
stm32_ros2_robot_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00028fe0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004e14  080291e0  080291e0  0002a1e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802dff4  0802dff4  00030938  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802dff4  0802dff4  0002eff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802dffc  0802dffc  00030938  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0802dffc  0802dffc  0002effc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802e00c  0802e00c  0002f00c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000007f8  20000000  0802e010  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200007f8  0802e808  000307f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000898  0802e8a8  00030898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000147f4  20000938  0802e948  00030938  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  2001512c  0802e948  0003112c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030938  2**0
                  CONTENTS, READONLY
 14 .debug_info   00038b70  00000000  00000000  00030966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000086e0  00000000  00000000  000694d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002720  00000000  00000000  00071bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001f1f  00000000  00000000  000742d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029a2b  00000000  00000000  000761f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000e4f0  00000000  00000000  0009fc22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000076  00000000  00000000  000ae112  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000afac  00000000  00000000  000ae188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  000b9134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000938 	.word	0x20000938
 800021c:	00000000 	.word	0x00000000
 8000220:	080291c8 	.word	0x080291c8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000093c 	.word	0x2000093c
 800023c:	080291c8 	.word	0x080291c8

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9d3 	b.w	80006d8 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b988 	b.w	80006d8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	468e      	mov	lr, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	4688      	mov	r8, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d962      	bls.n	80004bc <__udivmoddi4+0xdc>
 80003f6:	fab2 f682 	clz	r6, r2
 80003fa:	b14e      	cbz	r6, 8000410 <__udivmoddi4+0x30>
 80003fc:	f1c6 0320 	rsb	r3, r6, #32
 8000400:	fa01 f806 	lsl.w	r8, r1, r6
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	40b7      	lsls	r7, r6
 800040a:	ea43 0808 	orr.w	r8, r3, r8
 800040e:	40b4      	lsls	r4, r6
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	fa1f fc87 	uxth.w	ip, r7
 8000418:	fbb8 f1fe 	udiv	r1, r8, lr
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fb01 f20c 	mul.w	r2, r1, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0x62>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f101 30ff 	add.w	r0, r1, #4294967295
 8000434:	f080 80ea 	bcs.w	800060c <__udivmoddi4+0x22c>
 8000438:	429a      	cmp	r2, r3
 800043a:	f240 80e7 	bls.w	800060c <__udivmoddi4+0x22c>
 800043e:	3902      	subs	r1, #2
 8000440:	443b      	add	r3, r7
 8000442:	1a9a      	subs	r2, r3, r2
 8000444:	b2a3      	uxth	r3, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000452:	fb00 fc0c 	mul.w	ip, r0, ip
 8000456:	459c      	cmp	ip, r3
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x8e>
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000460:	f080 80d6 	bcs.w	8000610 <__udivmoddi4+0x230>
 8000464:	459c      	cmp	ip, r3
 8000466:	f240 80d3 	bls.w	8000610 <__udivmoddi4+0x230>
 800046a:	443b      	add	r3, r7
 800046c:	3802      	subs	r0, #2
 800046e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000472:	eba3 030c 	sub.w	r3, r3, ip
 8000476:	2100      	movs	r1, #0
 8000478:	b11d      	cbz	r5, 8000482 <__udivmoddi4+0xa2>
 800047a:	40f3      	lsrs	r3, r6
 800047c:	2200      	movs	r2, #0
 800047e:	e9c5 3200 	strd	r3, r2, [r5]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d905      	bls.n	8000496 <__udivmoddi4+0xb6>
 800048a:	b10d      	cbz	r5, 8000490 <__udivmoddi4+0xb0>
 800048c:	e9c5 0100 	strd	r0, r1, [r5]
 8000490:	2100      	movs	r1, #0
 8000492:	4608      	mov	r0, r1
 8000494:	e7f5      	b.n	8000482 <__udivmoddi4+0xa2>
 8000496:	fab3 f183 	clz	r1, r3
 800049a:	2900      	cmp	r1, #0
 800049c:	d146      	bne.n	800052c <__udivmoddi4+0x14c>
 800049e:	4573      	cmp	r3, lr
 80004a0:	d302      	bcc.n	80004a8 <__udivmoddi4+0xc8>
 80004a2:	4282      	cmp	r2, r0
 80004a4:	f200 8105 	bhi.w	80006b2 <__udivmoddi4+0x2d2>
 80004a8:	1a84      	subs	r4, r0, r2
 80004aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80004ae:	2001      	movs	r0, #1
 80004b0:	4690      	mov	r8, r2
 80004b2:	2d00      	cmp	r5, #0
 80004b4:	d0e5      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004b6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ba:	e7e2      	b.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	2a00      	cmp	r2, #0
 80004be:	f000 8090 	beq.w	80005e2 <__udivmoddi4+0x202>
 80004c2:	fab2 f682 	clz	r6, r2
 80004c6:	2e00      	cmp	r6, #0
 80004c8:	f040 80a4 	bne.w	8000614 <__udivmoddi4+0x234>
 80004cc:	1a8a      	subs	r2, r1, r2
 80004ce:	0c03      	lsrs	r3, r0, #16
 80004d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d4:	b280      	uxth	r0, r0
 80004d6:	b2bc      	uxth	r4, r7
 80004d8:	2101      	movs	r1, #1
 80004da:	fbb2 fcfe 	udiv	ip, r2, lr
 80004de:	fb0e 221c 	mls	r2, lr, ip, r2
 80004e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004e6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d907      	bls.n	80004fe <__udivmoddi4+0x11e>
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x11c>
 80004f6:	429a      	cmp	r2, r3
 80004f8:	f200 80e0 	bhi.w	80006bc <__udivmoddi4+0x2dc>
 80004fc:	46c4      	mov	ip, r8
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	fbb3 f2fe 	udiv	r2, r3, lr
 8000504:	fb0e 3312 	mls	r3, lr, r2, r3
 8000508:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800050c:	fb02 f404 	mul.w	r4, r2, r4
 8000510:	429c      	cmp	r4, r3
 8000512:	d907      	bls.n	8000524 <__udivmoddi4+0x144>
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	f102 30ff 	add.w	r0, r2, #4294967295
 800051a:	d202      	bcs.n	8000522 <__udivmoddi4+0x142>
 800051c:	429c      	cmp	r4, r3
 800051e:	f200 80ca 	bhi.w	80006b6 <__udivmoddi4+0x2d6>
 8000522:	4602      	mov	r2, r0
 8000524:	1b1b      	subs	r3, r3, r4
 8000526:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800052a:	e7a5      	b.n	8000478 <__udivmoddi4+0x98>
 800052c:	f1c1 0620 	rsb	r6, r1, #32
 8000530:	408b      	lsls	r3, r1
 8000532:	fa22 f706 	lsr.w	r7, r2, r6
 8000536:	431f      	orrs	r7, r3
 8000538:	fa0e f401 	lsl.w	r4, lr, r1
 800053c:	fa20 f306 	lsr.w	r3, r0, r6
 8000540:	fa2e fe06 	lsr.w	lr, lr, r6
 8000544:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000548:	4323      	orrs	r3, r4
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	fa1f fc87 	uxth.w	ip, r7
 8000552:	fbbe f0f9 	udiv	r0, lr, r9
 8000556:	0c1c      	lsrs	r4, r3, #16
 8000558:	fb09 ee10 	mls	lr, r9, r0, lr
 800055c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000560:	fb00 fe0c 	mul.w	lr, r0, ip
 8000564:	45a6      	cmp	lr, r4
 8000566:	fa02 f201 	lsl.w	r2, r2, r1
 800056a:	d909      	bls.n	8000580 <__udivmoddi4+0x1a0>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000572:	f080 809c 	bcs.w	80006ae <__udivmoddi4+0x2ce>
 8000576:	45a6      	cmp	lr, r4
 8000578:	f240 8099 	bls.w	80006ae <__udivmoddi4+0x2ce>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	eba4 040e 	sub.w	r4, r4, lr
 8000584:	fa1f fe83 	uxth.w	lr, r3
 8000588:	fbb4 f3f9 	udiv	r3, r4, r9
 800058c:	fb09 4413 	mls	r4, r9, r3, r4
 8000590:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000594:	fb03 fc0c 	mul.w	ip, r3, ip
 8000598:	45a4      	cmp	ip, r4
 800059a:	d908      	bls.n	80005ae <__udivmoddi4+0x1ce>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f103 3eff 	add.w	lr, r3, #4294967295
 80005a2:	f080 8082 	bcs.w	80006aa <__udivmoddi4+0x2ca>
 80005a6:	45a4      	cmp	ip, r4
 80005a8:	d97f      	bls.n	80006aa <__udivmoddi4+0x2ca>
 80005aa:	3b02      	subs	r3, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005b2:	eba4 040c 	sub.w	r4, r4, ip
 80005b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ba:	4564      	cmp	r4, ip
 80005bc:	4673      	mov	r3, lr
 80005be:	46e1      	mov	r9, ip
 80005c0:	d362      	bcc.n	8000688 <__udivmoddi4+0x2a8>
 80005c2:	d05f      	beq.n	8000684 <__udivmoddi4+0x2a4>
 80005c4:	b15d      	cbz	r5, 80005de <__udivmoddi4+0x1fe>
 80005c6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ca:	eb64 0409 	sbc.w	r4, r4, r9
 80005ce:	fa04 f606 	lsl.w	r6, r4, r6
 80005d2:	fa22 f301 	lsr.w	r3, r2, r1
 80005d6:	431e      	orrs	r6, r3
 80005d8:	40cc      	lsrs	r4, r1
 80005da:	e9c5 6400 	strd	r6, r4, [r5]
 80005de:	2100      	movs	r1, #0
 80005e0:	e74f      	b.n	8000482 <__udivmoddi4+0xa2>
 80005e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005e6:	0c01      	lsrs	r1, r0, #16
 80005e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005ec:	b280      	uxth	r0, r0
 80005ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005f2:	463b      	mov	r3, r7
 80005f4:	4638      	mov	r0, r7
 80005f6:	463c      	mov	r4, r7
 80005f8:	46b8      	mov	r8, r7
 80005fa:	46be      	mov	lr, r7
 80005fc:	2620      	movs	r6, #32
 80005fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000602:	eba2 0208 	sub.w	r2, r2, r8
 8000606:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800060a:	e766      	b.n	80004da <__udivmoddi4+0xfa>
 800060c:	4601      	mov	r1, r0
 800060e:	e718      	b.n	8000442 <__udivmoddi4+0x62>
 8000610:	4610      	mov	r0, r2
 8000612:	e72c      	b.n	800046e <__udivmoddi4+0x8e>
 8000614:	f1c6 0220 	rsb	r2, r6, #32
 8000618:	fa2e f302 	lsr.w	r3, lr, r2
 800061c:	40b7      	lsls	r7, r6
 800061e:	40b1      	lsls	r1, r6
 8000620:	fa20 f202 	lsr.w	r2, r0, r2
 8000624:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000628:	430a      	orrs	r2, r1
 800062a:	fbb3 f8fe 	udiv	r8, r3, lr
 800062e:	b2bc      	uxth	r4, r7
 8000630:	fb0e 3318 	mls	r3, lr, r8, r3
 8000634:	0c11      	lsrs	r1, r2, #16
 8000636:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800063a:	fb08 f904 	mul.w	r9, r8, r4
 800063e:	40b0      	lsls	r0, r6
 8000640:	4589      	cmp	r9, r1
 8000642:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000646:	b280      	uxth	r0, r0
 8000648:	d93e      	bls.n	80006c8 <__udivmoddi4+0x2e8>
 800064a:	1879      	adds	r1, r7, r1
 800064c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000650:	d201      	bcs.n	8000656 <__udivmoddi4+0x276>
 8000652:	4589      	cmp	r9, r1
 8000654:	d81f      	bhi.n	8000696 <__udivmoddi4+0x2b6>
 8000656:	eba1 0109 	sub.w	r1, r1, r9
 800065a:	fbb1 f9fe 	udiv	r9, r1, lr
 800065e:	fb09 f804 	mul.w	r8, r9, r4
 8000662:	fb0e 1119 	mls	r1, lr, r9, r1
 8000666:	b292      	uxth	r2, r2
 8000668:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800066c:	4542      	cmp	r2, r8
 800066e:	d229      	bcs.n	80006c4 <__udivmoddi4+0x2e4>
 8000670:	18ba      	adds	r2, r7, r2
 8000672:	f109 31ff 	add.w	r1, r9, #4294967295
 8000676:	d2c4      	bcs.n	8000602 <__udivmoddi4+0x222>
 8000678:	4542      	cmp	r2, r8
 800067a:	d2c2      	bcs.n	8000602 <__udivmoddi4+0x222>
 800067c:	f1a9 0102 	sub.w	r1, r9, #2
 8000680:	443a      	add	r2, r7
 8000682:	e7be      	b.n	8000602 <__udivmoddi4+0x222>
 8000684:	45f0      	cmp	r8, lr
 8000686:	d29d      	bcs.n	80005c4 <__udivmoddi4+0x1e4>
 8000688:	ebbe 0302 	subs.w	r3, lr, r2
 800068c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000690:	3801      	subs	r0, #1
 8000692:	46e1      	mov	r9, ip
 8000694:	e796      	b.n	80005c4 <__udivmoddi4+0x1e4>
 8000696:	eba7 0909 	sub.w	r9, r7, r9
 800069a:	4449      	add	r1, r9
 800069c:	f1a8 0c02 	sub.w	ip, r8, #2
 80006a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a4:	fb09 f804 	mul.w	r8, r9, r4
 80006a8:	e7db      	b.n	8000662 <__udivmoddi4+0x282>
 80006aa:	4673      	mov	r3, lr
 80006ac:	e77f      	b.n	80005ae <__udivmoddi4+0x1ce>
 80006ae:	4650      	mov	r0, sl
 80006b0:	e766      	b.n	8000580 <__udivmoddi4+0x1a0>
 80006b2:	4608      	mov	r0, r1
 80006b4:	e6fd      	b.n	80004b2 <__udivmoddi4+0xd2>
 80006b6:	443b      	add	r3, r7
 80006b8:	3a02      	subs	r2, #2
 80006ba:	e733      	b.n	8000524 <__udivmoddi4+0x144>
 80006bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006c0:	443b      	add	r3, r7
 80006c2:	e71c      	b.n	80004fe <__udivmoddi4+0x11e>
 80006c4:	4649      	mov	r1, r9
 80006c6:	e79c      	b.n	8000602 <__udivmoddi4+0x222>
 80006c8:	eba1 0109 	sub.w	r1, r1, r9
 80006cc:	46c4      	mov	ip, r8
 80006ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d2:	fb09 f804 	mul.w	r8, r9, r4
 80006d6:	e7c4      	b.n	8000662 <__udivmoddi4+0x282>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	0000      	movs	r0, r0
	...

080006e0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80006e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80006e4:	b086      	sub	sp, #24
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80006ec:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80006f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80006f6:	a320      	add	r3, pc, #128	@ (adr r3, 8000778 <UTILS_NanosecondsToTimespec+0x98>)
 80006f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006fc:	f7ff fe08 	bl	8000310 <__aeabi_ldivmod>
 8000700:	4602      	mov	r2, r0
 8000702:	460b      	mov	r3, r1
 8000704:	6879      	ldr	r1, [r7, #4]
 8000706:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800070a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800070e:	a31a      	add	r3, pc, #104	@ (adr r3, 8000778 <UTILS_NanosecondsToTimespec+0x98>)
 8000710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000714:	f7ff fdfc 	bl	8000310 <__aeabi_ldivmod>
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	2b00      	cmp	r3, #0
 8000722:	da20      	bge.n	8000766 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	4a11      	ldr	r2, [pc, #68]	@ (8000770 <UTILS_NanosecondsToTimespec+0x90>)
 800072a:	fb82 1203 	smull	r1, r2, r2, r3
 800072e:	1712      	asrs	r2, r2, #28
 8000730:	17db      	asrs	r3, r3, #31
 8000732:	1ad3      	subs	r3, r2, r3
 8000734:	3301      	adds	r3, #1
 8000736:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800073e:	6979      	ldr	r1, [r7, #20]
 8000740:	17c8      	asrs	r0, r1, #31
 8000742:	460c      	mov	r4, r1
 8000744:	4605      	mov	r5, r0
 8000746:	ebb2 0804 	subs.w	r8, r2, r4
 800074a:	eb63 0905 	sbc.w	r9, r3, r5
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	689a      	ldr	r2, [r3, #8]
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	4906      	ldr	r1, [pc, #24]	@ (8000774 <UTILS_NanosecondsToTimespec+0x94>)
 800075c:	fb01 f303 	mul.w	r3, r1, r3
 8000760:	441a      	add	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	609a      	str	r2, [r3, #8]
    }
}
 8000766:	bf00      	nop
 8000768:	3718      	adds	r7, #24
 800076a:	46bd      	mov	sp, r7
 800076c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000770:	44b82fa1 	.word	0x44b82fa1
 8000774:	3b9aca00 	.word	0x3b9aca00
 8000778:	3b9aca00 	.word	0x3b9aca00
 800077c:	00000000 	.word	0x00000000

08000780 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8000780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000784:	b08e      	sub	sp, #56	@ 0x38
 8000786:	af00      	add	r7, sp, #0
 8000788:	6278      	str	r0, [r7, #36]	@ 0x24
 800078a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800078c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000790:	2300      	movs	r3, #0
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8000796:	f04f 0200 	mov.w	r2, #0
 800079a:	f04f 0300 	mov.w	r3, #0
 800079e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80007a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007a6:	4618      	mov	r0, r3
 80007a8:	f008 fbb0 	bl	8008f0c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80007ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007ae:	17da      	asrs	r2, r3, #31
 80007b0:	61bb      	str	r3, [r7, #24]
 80007b2:	61fa      	str	r2, [r7, #28]
 80007b4:	f04f 0200 	mov.w	r2, #0
 80007b8:	f04f 0300 	mov.w	r3, #0
 80007bc:	69b9      	ldr	r1, [r7, #24]
 80007be:	000b      	movs	r3, r1
 80007c0:	2200      	movs	r2, #0
 80007c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80007c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007c8:	2200      	movs	r2, #0
 80007ca:	461c      	mov	r4, r3
 80007cc:	4615      	mov	r5, r2
 80007ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80007d2:	1911      	adds	r1, r2, r4
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	416b      	adcs	r3, r5
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80007de:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80007e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80007e6:	4602      	mov	r2, r0
 80007e8:	460b      	mov	r3, r1
 80007ea:	f04f 0400 	mov.w	r4, #0
 80007ee:	f04f 0500 	mov.w	r5, #0
 80007f2:	015d      	lsls	r5, r3, #5
 80007f4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80007f8:	0154      	lsls	r4, r2, #5
 80007fa:	4622      	mov	r2, r4
 80007fc:	462b      	mov	r3, r5
 80007fe:	ebb2 0800 	subs.w	r8, r2, r0
 8000802:	eb63 0901 	sbc.w	r9, r3, r1
 8000806:	f04f 0200 	mov.w	r2, #0
 800080a:	f04f 0300 	mov.w	r3, #0
 800080e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8000812:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8000816:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800081a:	4690      	mov	r8, r2
 800081c:	4699      	mov	r9, r3
 800081e:	eb18 0a00 	adds.w	sl, r8, r0
 8000822:	eb49 0b01 	adc.w	fp, r9, r1
 8000826:	f04f 0200 	mov.w	r2, #0
 800082a:	f04f 0300 	mov.w	r3, #0
 800082e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8000832:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8000836:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800083a:	ebb2 040a 	subs.w	r4, r2, sl
 800083e:	603c      	str	r4, [r7, #0]
 8000840:	eb63 030b 	sbc.w	r3, r3, fp
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	e9d7 4500 	ldrd	r4, r5, [r7]
 800084a:	4623      	mov	r3, r4
 800084c:	181b      	adds	r3, r3, r0
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	462b      	mov	r3, r5
 8000852:	eb41 0303 	adc.w	r3, r1, r3
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	6a3a      	ldr	r2, [r7, #32]
 800085a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800085e:	f7ff ff3f 	bl	80006e0 <UTILS_NanosecondsToTimespec>

    return 0;
 8000862:	2300      	movs	r3, #0
 8000864:	4618      	mov	r0, r3
 8000866:	3738      	adds	r7, #56	@ 0x38
 8000868:	46bd      	mov	sp, r7
 800086a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08000870 <cubemx_transport_open>:

// --- micro-ROS Transports ---
#define UDP_PORT        8888
static int sock_fd = -1;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
    sock_fd = socket(AF_INET, SOCK_DGRAM, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	2102      	movs	r1, #2
 800087c:	2002      	movs	r0, #2
 800087e:	f00c fa41 	bl	800cd04 <lwip_socket>
 8000882:	4603      	mov	r3, r0
 8000884:	4a10      	ldr	r2, [pc, #64]	@ (80008c8 <cubemx_transport_open+0x58>)
 8000886:	6013      	str	r3, [r2, #0]
    struct sockaddr_in addr;
    addr.sin_family = AF_INET;
 8000888:	2302      	movs	r3, #2
 800088a:	727b      	strb	r3, [r7, #9]
    addr.sin_port = htons(UDP_PORT);
 800088c:	f242 20b8 	movw	r0, #8888	@ 0x22b8
 8000890:	f00d f826 	bl	800d8e0 <lwip_htons>
 8000894:	4603      	mov	r3, r0
 8000896:	817b      	strh	r3, [r7, #10]
    addr.sin_addr.s_addr = htonl(INADDR_ANY);
 8000898:	2000      	movs	r0, #0
 800089a:	f00d f837 	bl	800d90c <lwip_htonl>
 800089e:	4603      	mov	r3, r0
 80008a0:	60fb      	str	r3, [r7, #12]
    
    if (bind(sock_fd, (struct sockaddr *)&addr, sizeof(addr)) == -1)
 80008a2:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <cubemx_transport_open+0x58>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f107 0108 	add.w	r1, r7, #8
 80008aa:	2210      	movs	r2, #16
 80008ac:	4618      	mov	r0, r3
 80008ae:	f00b fd29 	bl	800c304 <lwip_bind>
 80008b2:	4603      	mov	r3, r0
 80008b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b8:	d101      	bne.n	80008be <cubemx_transport_open+0x4e>
    {
        return false;
 80008ba:	2300      	movs	r3, #0
 80008bc:	e000      	b.n	80008c0 <cubemx_transport_open+0x50>
    }

    return true;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000000 	.word	0x20000000

080008cc <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
    if (sock_fd != -1)
 80008d4:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <cubemx_transport_close+0x30>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008dc:	d008      	beq.n	80008f0 <cubemx_transport_close+0x24>
    {
        closesocket(sock_fd);
 80008de:	4b07      	ldr	r3, [pc, #28]	@ (80008fc <cubemx_transport_close+0x30>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f00b fd7c 	bl	800c3e0 <lwip_close>
        sock_fd = -1;
 80008e8:	4b04      	ldr	r3, [pc, #16]	@ (80008fc <cubemx_transport_close+0x30>)
 80008ea:	f04f 32ff 	mov.w	r2, #4294967295
 80008ee:	601a      	str	r2, [r3, #0]
    }
    return true;
 80008f0:	2301      	movs	r3, #1
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000000 	.word	0x20000000

08000900 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000900:	b580      	push	{r7, lr}
 8000902:	b08e      	sub	sp, #56	@ 0x38
 8000904:	af02      	add	r7, sp, #8
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
 800090c:	603b      	str	r3, [r7, #0]
    if (sock_fd == -1)
 800090e:	4b18      	ldr	r3, [pc, #96]	@ (8000970 <cubemx_transport_write+0x70>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000916:	d101      	bne.n	800091c <cubemx_transport_write+0x1c>
    {
        return 0;
 8000918:	2300      	movs	r3, #0
 800091a:	e024      	b.n	8000966 <cubemx_transport_write+0x66>
    }
    const char * ip_addr = (const char*) transport->args;
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000922:	62fb      	str	r3, [r7, #44]	@ 0x2c
    struct sockaddr_in addr;
    addr.sin_family = AF_INET;
 8000924:	2302      	movs	r3, #2
 8000926:	757b      	strb	r3, [r7, #21]
    addr.sin_port = htons(UDP_PORT);
 8000928:	f242 20b8 	movw	r0, #8888	@ 0x22b8
 800092c:	f00c ffd8 	bl	800d8e0 <lwip_htons>
 8000930:	4603      	mov	r3, r0
 8000932:	82fb      	strh	r3, [r7, #22]
    addr.sin_addr.s_addr = inet_addr(ip_addr);
 8000934:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000936:	f017 f8d6 	bl	8017ae6 <ipaddr_addr>
 800093a:	4603      	mov	r3, r0
 800093c:	61bb      	str	r3, [r7, #24]
    int ret = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	@ 0x28
    ret = sendto(sock_fd, buf, len, 0, (struct sockaddr *)&addr, sizeof(addr));
 8000942:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <cubemx_transport_write+0x70>)
 8000944:	6818      	ldr	r0, [r3, #0]
 8000946:	2310      	movs	r3, #16
 8000948:	9301      	str	r3, [sp, #4]
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	2300      	movs	r3, #0
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	68b9      	ldr	r1, [r7, #8]
 8000956:	f00c f923 	bl	800cba0 <lwip_sendto>
 800095a:	62b8      	str	r0, [r7, #40]	@ 0x28
    size_t writed = ret>0? ret:0;
 800095c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800095e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000962:	627b      	str	r3, [r7, #36]	@ 0x24

    return writed;
 8000964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000966:	4618      	mov	r0, r3
 8000968:	3730      	adds	r7, #48	@ 0x30
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000000 	.word	0x20000000

08000974 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000974:	b5b0      	push	{r4, r5, r7, lr}
 8000976:	b08c      	sub	sp, #48	@ 0x30
 8000978:	af02      	add	r7, sp, #8
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
 8000980:	603b      	str	r3, [r7, #0]

    int ret = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
    //set timeout
    struct timeval tv_out;
    tv_out.tv_sec = timeout / 1000;
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	4a1c      	ldr	r2, [pc, #112]	@ (80009fc <cubemx_transport_read+0x88>)
 800098a:	fb82 1203 	smull	r1, r2, r2, r3
 800098e:	1192      	asrs	r2, r2, #6
 8000990:	17db      	asrs	r3, r3, #31
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	17da      	asrs	r2, r3, #31
 8000996:	461c      	mov	r4, r3
 8000998:	4615      	mov	r5, r2
 800099a:	e9c7 4504 	strd	r4, r5, [r7, #16]
    tv_out.tv_usec = (timeout % 1000) * 1000;
 800099e:	683a      	ldr	r2, [r7, #0]
 80009a0:	4b16      	ldr	r3, [pc, #88]	@ (80009fc <cubemx_transport_read+0x88>)
 80009a2:	fb83 1302 	smull	r1, r3, r3, r2
 80009a6:	1199      	asrs	r1, r3, #6
 80009a8:	17d3      	asrs	r3, r2, #31
 80009aa:	1acb      	subs	r3, r1, r3
 80009ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80009b0:	fb01 f303 	mul.w	r3, r1, r3
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009ba:	fb02 f303 	mul.w	r3, r2, r3
 80009be:	61bb      	str	r3, [r7, #24]
    setsockopt(sock_fd, SOL_SOCKET, SO_RCVTIMEO,&tv_out, sizeof(tv_out));
 80009c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a00 <cubemx_transport_read+0x8c>)
 80009c2:	6818      	ldr	r0, [r3, #0]
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	2210      	movs	r2, #16
 80009ca:	9200      	str	r2, [sp, #0]
 80009cc:	f241 0206 	movw	r2, #4102	@ 0x1006
 80009d0:	f640 71ff 	movw	r1, #4095	@ 0xfff
 80009d4:	f00c fbac 	bl	800d130 <lwip_setsockopt>
    ret = recv(sock_fd, buf, len, MSG_WAITALL);
 80009d8:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <cubemx_transport_read+0x8c>)
 80009da:	6818      	ldr	r0, [r3, #0]
 80009dc:	2302      	movs	r3, #2
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	68b9      	ldr	r1, [r7, #8]
 80009e2:	f00c f869 	bl	800cab8 <lwip_recv>
 80009e6:	6278      	str	r0, [r7, #36]	@ 0x24
    size_t readed = ret > 0 ? ret : 0;
 80009e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80009ee:	623b      	str	r3, [r7, #32]
    return readed;
 80009f0:	6a3b      	ldr	r3, [r7, #32]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3728      	adds	r7, #40	@ 0x28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bdb0      	pop	{r4, r5, r7, pc}
 80009fa:	bf00      	nop
 80009fc:	10624dd3 	.word	0x10624dd3
 8000a00:	20000000 	.word	0x20000000

08000a04 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2180      	movs	r1, #128	@ 0x80
 8000a12:	4803      	ldr	r0, [pc, #12]	@ (8000a20 <vApplicationStackOverflowHook+0x1c>)
 8000a14:	f003 f97a 	bl	8003d0c <HAL_GPIO_WritePin>
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40020400 	.word	0x40020400

08000a24 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4a07      	ldr	r2, [pc, #28]	@ (8000a50 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	4a06      	ldr	r2, [pc, #24]	@ (8000a54 <vApplicationGetIdleTaskMemory+0x30>)
 8000a3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2280      	movs	r2, #128	@ 0x80
 8000a40:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a42:	bf00      	nop
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000954 	.word	0x20000954
 8000a54:	200009f4 	.word	0x200009f4

08000a58 <joint_command_callback>:
  return 0;
}

// Joint command callback for ros2_control integration
void joint_command_callback(const void * msgin)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  // Toggle blue LED to indicate callback entry
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000a60:	2180      	movs	r1, #128	@ 0x80
 8000a62:	4851      	ldr	r0, [pc, #324]	@ (8000ba8 <joint_command_callback+0x150>)
 8000a64:	f003 f96b 	bl	8003d3e <HAL_GPIO_TogglePin>
  
  const control_msgs__msg__JointJog * msg = (const control_msgs__msg__JointJog *)msgin;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	60fb      	str	r3, [r7, #12]
  
  // Enhanced safety checks - CRITICAL for preventing crashes
  if (msg == NULL) {
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d104      	bne.n	8000a7c <joint_command_callback+0x24>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7); // Exit indicator
 8000a72:	2180      	movs	r1, #128	@ 0x80
 8000a74:	484c      	ldr	r0, [pc, #304]	@ (8000ba8 <joint_command_callback+0x150>)
 8000a76:	f003 f962 	bl	8003d3e <HAL_GPIO_TogglePin>
    return;
 8000a7a:	e087      	b.n	8000b8c <joint_command_callback+0x134>
  }
  
  // Check if joint_names array exists and has valid size
  if (msg->joint_names.data == NULL || msg->joint_names.size == 0 || msg->joint_names.size > NUM_JOINTS) {
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	695b      	ldr	r3, [r3, #20]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d007      	beq.n	8000a94 <joint_command_callback+0x3c>
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d003      	beq.n	8000a94 <joint_command_callback+0x3c>
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	2b03      	cmp	r3, #3
 8000a92:	d904      	bls.n	8000a9e <joint_command_callback+0x46>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7); // Exit indicator
 8000a94:	2180      	movs	r1, #128	@ 0x80
 8000a96:	4844      	ldr	r0, [pc, #272]	@ (8000ba8 <joint_command_callback+0x150>)
 8000a98:	f003 f951 	bl	8003d3e <HAL_GPIO_TogglePin>
    return;
 8000a9c:	e076      	b.n	8000b8c <joint_command_callback+0x134>
  }
  
  // Check if displacements array exists and has valid size
  if (msg->displacements.data == NULL || msg->displacements.size == 0) {
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	6a1b      	ldr	r3, [r3, #32]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d003      	beq.n	8000aae <joint_command_callback+0x56>
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d104      	bne.n	8000ab8 <joint_command_callback+0x60>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7); // Exit indicator
 8000aae:	2180      	movs	r1, #128	@ 0x80
 8000ab0:	483d      	ldr	r0, [pc, #244]	@ (8000ba8 <joint_command_callback+0x150>)
 8000ab2:	f003 f944 	bl	8003d3e <HAL_GPIO_TogglePin>
    return;
 8000ab6:	e069      	b.n	8000b8c <joint_command_callback+0x134>
  }
  
  // Process joint commands with bounds checking
  size_t max_joints = (msg->joint_names.size < msg->displacements.size) ? msg->joint_names.size : msg->displacements.size;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	bf28      	it	cs
 8000ac4:	4613      	movcs	r3, r2
 8000ac6:	60bb      	str	r3, [r7, #8]
  max_joints = (max_joints < NUM_JOINTS) ? max_joints : NUM_JOINTS;
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	2b03      	cmp	r3, #3
 8000acc:	bf28      	it	cs
 8000ace:	2303      	movcs	r3, #3
 8000ad0:	60bb      	str	r3, [r7, #8]
  
  for (size_t i = 0; i < max_joints; i++) {
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
 8000ad6:	e051      	b.n	8000b7c <joint_command_callback+0x124>
    // Validate displacement value
    double displacement = msg->displacements.data[i];
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	6a1a      	ldr	r2, [r3, #32]
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	00db      	lsls	r3, r3, #3
 8000ae0:	4413      	add	r3, r2
 8000ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ae6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    // Check for NaN or infinite values
    if (!isfinite(displacement)) {
 8000aea:	ed97 7b04 	vldr	d7, [r7, #16]
 8000aee:	eeb0 7bc7 	vabs.f64	d7, d7
 8000af2:	ed9f 6b29 	vldr	d6, [pc, #164]	@ 8000b98 <joint_command_callback+0x140>
 8000af6:	eeb4 7b46 	vcmp.f64	d7, d6
 8000afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000afe:	d839      	bhi.n	8000b74 <joint_command_callback+0x11c>
      continue; // Skip invalid values
    }
    
    // Clamp displacement to safe range (-π to π)
    if (displacement > 180) displacement = 180;
 8000b00:	ed97 7b04 	vldr	d7, [r7, #16]
 8000b04:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8000ba0 <joint_command_callback+0x148>
 8000b08:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b10:	dd04      	ble.n	8000b1c <joint_command_callback+0xc4>
 8000b12:	f04f 0200 	mov.w	r2, #0
 8000b16:	4b25      	ldr	r3, [pc, #148]	@ (8000bac <joint_command_callback+0x154>)
 8000b18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (displacement < 0) displacement = 0;
 8000b1c:	ed97 7b04 	vldr	d7, [r7, #16]
 8000b20:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b28:	d505      	bpl.n	8000b36 <joint_command_callback+0xde>
 8000b2a:	f04f 0200 	mov.w	r2, #0
 8000b2e:	f04f 0300 	mov.w	r3, #0
 8000b32:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    // Update target position
    target_joint_positions[i] = displacement;
 8000b36:	4a1e      	ldr	r2, [pc, #120]	@ (8000bb0 <joint_command_callback+0x158>)
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	00db      	lsls	r3, r3, #3
 8000b3c:	18d1      	adds	r1, r2, r3
 8000b3e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000b42:	e9c1 2300 	strd	r2, r3, [r1]
    
    // Additional servo angle validation
    if (servo_angle > 180) servo_angle = 180;
    */
    // Send command to servo (commented out for safety during debugging)
    set_servo(i, displacement);
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	ed97 7b04 	vldr	d7, [r7, #16]
 8000b4e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b52:	edc7 7a00 	vstr	s15, [r7]
 8000b56:	783a      	ldrb	r2, [r7, #0]
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f001 f815 	bl	8001b8c <set_servo>
    
    // Update current position for feedback
    current_joint_positions[i] = displacement;
 8000b62:	4a14      	ldr	r2, [pc, #80]	@ (8000bb4 <joint_command_callback+0x15c>)
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	00db      	lsls	r3, r3, #3
 8000b68:	18d1      	adds	r1, r2, r3
 8000b6a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000b6e:	e9c1 2300 	strd	r2, r3, [r1]
 8000b72:	e000      	b.n	8000b76 <joint_command_callback+0x11e>
      continue; // Skip invalid values
 8000b74:	bf00      	nop
  for (size_t i = 0; i < max_joints; i++) {
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	61fb      	str	r3, [r7, #28]
 8000b7c:	69fa      	ldr	r2, [r7, #28]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d3a9      	bcc.n	8000ad8 <joint_command_callback+0x80>
  }
  
  // Toggle blue LED to indicate successful processing
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000b84:	2180      	movs	r1, #128	@ 0x80
 8000b86:	4808      	ldr	r0, [pc, #32]	@ (8000ba8 <joint_command_callback+0x150>)
 8000b88:	f003 f8d9 	bl	8003d3e <HAL_GPIO_TogglePin>
}
 8000b8c:	3720      	adds	r7, #32
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	f3af 8000 	nop.w
 8000b98:	ffffffff 	.word	0xffffffff
 8000b9c:	7fefffff 	.word	0x7fefffff
 8000ba0:	00000000 	.word	0x00000000
 8000ba4:	40668000 	.word	0x40668000
 8000ba8:	40020400 	.word	0x40020400
 8000bac:	40668000 	.word	0x40668000
 8000bb0:	20000c70 	.word	0x20000c70
 8000bb4:	20000c58 	.word	0x20000c58

08000bb8 <trajectory_callback>:

// Trajectory callback for ros2_control integration
void trajectory_callback(const void * msgin)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b098      	sub	sp, #96	@ 0x60
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  // Toggle blue LED to indicate callback entry
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000bc0:	2180      	movs	r1, #128	@ 0x80
 8000bc2:	489b      	ldr	r0, [pc, #620]	@ (8000e30 <trajectory_callback+0x278>)
 8000bc4:	f003 f8bb 	bl	8003d3e <HAL_GPIO_TogglePin>
  
  const trajectory_msgs__msg__JointTrajectory * msg = (const trajectory_msgs__msg__JointTrajectory *)msgin;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  // Enhanced safety checks
  if (msg == NULL) {
 8000bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d104      	bne.n	8000bdc <trajectory_callback+0x24>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000bd2:	2180      	movs	r1, #128	@ 0x80
 8000bd4:	4896      	ldr	r0, [pc, #600]	@ (8000e30 <trajectory_callback+0x278>)
 8000bd6:	f003 f8b2 	bl	8003d3e <HAL_GPIO_TogglePin>
    return;
 8000bda:	e180      	b.n	8000ede <trajectory_callback+0x326>
  }
  
  // Check if points array exists and has data
  if (msg->points.data == NULL || msg->points.size == 0) {
 8000bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bde:	6a1b      	ldr	r3, [r3, #32]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d003      	beq.n	8000bec <trajectory_callback+0x34>
 8000be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d104      	bne.n	8000bf6 <trajectory_callback+0x3e>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000bec:	2180      	movs	r1, #128	@ 0x80
 8000bee:	4890      	ldr	r0, [pc, #576]	@ (8000e30 <trajectory_callback+0x278>)
 8000bf0:	f003 f8a5 	bl	8003d3e <HAL_GPIO_TogglePin>
    return;
 8000bf4:	e173      	b.n	8000ede <trajectory_callback+0x326>
  }
  
  // Get the first trajectory point with safety checks
  trajectory_msgs__msg__JointTrajectoryPoint* point = &msg->points.data[0];
 8000bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bf8:	6a1b      	ldr	r3, [r3, #32]
 8000bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (point == NULL) {
 8000bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d104      	bne.n	8000c0c <trajectory_callback+0x54>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000c02:	2180      	movs	r1, #128	@ 0x80
 8000c04:	488a      	ldr	r0, [pc, #552]	@ (8000e30 <trajectory_callback+0x278>)
 8000c06:	f003 f89a 	bl	8003d3e <HAL_GPIO_TogglePin>
    return;
 8000c0a:	e168      	b.n	8000ede <trajectory_callback+0x326>
  }
  
  // Check positions array
  if (point->positions.data == NULL || point->positions.size == 0 || point->positions.size > NUM_JOINTS) {
 8000c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d007      	beq.n	8000c24 <trajectory_callback+0x6c>
 8000c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d003      	beq.n	8000c24 <trajectory_callback+0x6c>
 8000c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	2b03      	cmp	r3, #3
 8000c22:	d904      	bls.n	8000c2e <trajectory_callback+0x76>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000c24:	2180      	movs	r1, #128	@ 0x80
 8000c26:	4882      	ldr	r0, [pc, #520]	@ (8000e30 <trajectory_callback+0x278>)
 8000c28:	f003 f889 	bl	8003d3e <HAL_GPIO_TogglePin>
    return;
 8000c2c:	e157      	b.n	8000ede <trajectory_callback+0x326>
  }
  
  // Process positions with bounds checking
  size_t max_joints = (point->positions.size < NUM_JOINTS) ? point->positions.size : NUM_JOINTS;
 8000c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	bf28      	it	cs
 8000c36:	2303      	movcs	r3, #3
 8000c38:	627b      	str	r3, [r7, #36]	@ 0x24
  
  for (size_t i = 0; i < max_joints; i++) {
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000c3e:	e071      	b.n	8000d24 <trajectory_callback+0x16c>
    // Validate position value
    double position = point->positions.data[i];
 8000c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c46:	00db      	lsls	r3, r3, #3
 8000c48:	4413      	add	r3, r2
 8000c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c4e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    
    // Check for NaN or infinite values
    if (!isfinite(position)) {
 8000c52:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8000c56:	eeb0 7bc7 	vabs.f64	d7, d7
 8000c5a:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8000e00 <trajectory_callback+0x248>
 8000c5e:	eeb4 7b46 	vcmp.f64	d7, d6
 8000c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c66:	d859      	bhi.n	8000d1c <trajectory_callback+0x164>
      continue; // Skip invalid values
    }
    
    // Clamp position to safe range
    if (position > M_PI) position = M_PI;
 8000c68:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8000c6c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8000e08 <trajectory_callback+0x250>
 8000c70:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c78:	dd04      	ble.n	8000c84 <trajectory_callback+0xcc>
 8000c7a:	a363      	add	r3, pc, #396	@ (adr r3, 8000e08 <trajectory_callback+0x250>)
 8000c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c80:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    if (position < -M_PI) position = -M_PI;
 8000c84:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8000c88:	ed9f 6b61 	vldr	d6, [pc, #388]	@ 8000e10 <trajectory_callback+0x258>
 8000c8c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c94:	d504      	bpl.n	8000ca0 <trajectory_callback+0xe8>
 8000c96:	a35e      	add	r3, pc, #376	@ (adr r3, 8000e10 <trajectory_callback+0x258>)
 8000c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c9c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    
    // Update target position
    target_joint_positions[i] = position;
 8000ca0:	4a64      	ldr	r2, [pc, #400]	@ (8000e34 <trajectory_callback+0x27c>)
 8000ca2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	18d1      	adds	r1, r2, r3
 8000ca8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8000cac:	e9c1 2300 	strd	r2, r3, [r1]
    
    // Convert radians to servo angle with safety clamping
    double angle_rad = position;
 8000cb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8000cb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    angle_rad = fmax(-M_PI/2, fmin(M_PI/2, angle_rad)); // Clamp to safe servo range
 8000cb8:	ed9f 1b57 	vldr	d1, [pc, #348]	@ 8000e18 <trajectory_callback+0x260>
 8000cbc:	ed97 0b04 	vldr	d0, [r7, #16]
 8000cc0:	f028 fa41 	bl	8029146 <fmin>
 8000cc4:	eeb0 7b40 	vmov.f64	d7, d0
 8000cc8:	ed9f 1b55 	vldr	d1, [pc, #340]	@ 8000e20 <trajectory_callback+0x268>
 8000ccc:	eeb0 0b47 	vmov.f64	d0, d7
 8000cd0:	f028 fa1c 	bl	802910c <fmax>
 8000cd4:	ed87 0b04 	vstr	d0, [r7, #16]
    uint8_t servo_angle = (uint8_t)((angle_rad + M_PI/2) * 180.0 / M_PI);
 8000cd8:	ed97 7b04 	vldr	d7, [r7, #16]
 8000cdc:	ed9f 6b4e 	vldr	d6, [pc, #312]	@ 8000e18 <trajectory_callback+0x260>
 8000ce0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ce4:	ed9f 6b50 	vldr	d6, [pc, #320]	@ 8000e28 <trajectory_callback+0x270>
 8000ce8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000cec:	ed9f 5b46 	vldr	d5, [pc, #280]	@ 8000e08 <trajectory_callback+0x250>
 8000cf0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cf4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000cf8:	edc7 7a00 	vstr	s15, [r7]
 8000cfc:	783b      	ldrb	r3, [r7, #0]
 8000cfe:	73fb      	strb	r3, [r7, #15]
    
    // Additional servo angle validation
    if (servo_angle > 180) servo_angle = 180;
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	2bb4      	cmp	r3, #180	@ 0xb4
 8000d04:	d901      	bls.n	8000d0a <trajectory_callback+0x152>
 8000d06:	23b4      	movs	r3, #180	@ 0xb4
 8000d08:	73fb      	strb	r3, [r7, #15]
    
    // Send command to servo (commented out for safety during debugging)
    // set_servo(i, servo_angle);
    
    // Update current position
    current_joint_positions[i] = angle_rad;
 8000d0a:	4a4b      	ldr	r2, [pc, #300]	@ (8000e38 <trajectory_callback+0x280>)
 8000d0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	18d1      	adds	r1, r2, r3
 8000d12:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000d16:	e9c1 2300 	strd	r2, r3, [r1]
 8000d1a:	e000      	b.n	8000d1e <trajectory_callback+0x166>
      continue; // Skip invalid values
 8000d1c:	bf00      	nop
  for (size_t i = 0; i < max_joints; i++) {
 8000d1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d20:	3301      	adds	r3, #1
 8000d22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000d24:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d389      	bcc.n	8000c40 <trajectory_callback+0x88>
  }
  
  // Handle velocities if provided and valid
  if (point->velocities.data != NULL && point->velocities.size > 0) {
 8000d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d053      	beq.n	8000ddc <trajectory_callback+0x224>
 8000d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d36:	691b      	ldr	r3, [r3, #16]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d04f      	beq.n	8000ddc <trajectory_callback+0x224>
    size_t max_vel_joints = (point->velocities.size < NUM_JOINTS) ? point->velocities.size : NUM_JOINTS;
 8000d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d3e:	691b      	ldr	r3, [r3, #16]
 8000d40:	2b03      	cmp	r3, #3
 8000d42:	bf28      	it	cs
 8000d44:	2303      	movcs	r3, #3
 8000d46:	623b      	str	r3, [r7, #32]
    for (size_t i = 0; i < max_vel_joints; i++) {
 8000d48:	2300      	movs	r3, #0
 8000d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000d4c:	e042      	b.n	8000dd4 <trajectory_callback+0x21c>
      double velocity = point->velocities.data[i];
 8000d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d50:	68da      	ldr	r2, [r3, #12]
 8000d52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	4413      	add	r3, r2
 8000d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d5c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
      if (isfinite(velocity)) {
 8000d60:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8000d64:	eeb0 7bc7 	vabs.f64	d7, d7
 8000d68:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 8000e00 <trajectory_callback+0x248>
 8000d6c:	eeb4 7b46 	vcmp.f64	d7, d6
 8000d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d74:	bf8c      	ite	hi
 8000d76:	2301      	movhi	r3, #1
 8000d78:	2300      	movls	r3, #0
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	f083 0301 	eor.w	r3, r3, #1
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d023      	beq.n	8000dce <trajectory_callback+0x216>
        // Clamp velocity to reasonable range
        if (velocity > 10.0) velocity = 10.0;
 8000d86:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8000d8a:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8000d8e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d96:	dd04      	ble.n	8000da2 <trajectory_callback+0x1ea>
 8000d98:	f04f 0200 	mov.w	r2, #0
 8000d9c:	4b27      	ldr	r3, [pc, #156]	@ (8000e3c <trajectory_callback+0x284>)
 8000d9e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
        if (velocity < -10.0) velocity = -10.0;
 8000da2:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8000da6:	eeba 6b04 	vmov.f64	d6, #164	@ 0xc1200000 -10.0
 8000daa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db2:	d504      	bpl.n	8000dbe <trajectory_callback+0x206>
 8000db4:	f04f 0200 	mov.w	r2, #0
 8000db8:	4b21      	ldr	r3, [pc, #132]	@ (8000e40 <trajectory_callback+0x288>)
 8000dba:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
        joint_velocities[i] = velocity;
 8000dbe:	4a21      	ldr	r2, [pc, #132]	@ (8000e44 <trajectory_callback+0x28c>)
 8000dc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	18d1      	adds	r1, r2, r3
 8000dc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8000dca:	e9c1 2300 	strd	r2, r3, [r1]
    for (size_t i = 0; i < max_vel_joints; i++) {
 8000dce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000dd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000dd6:	6a3b      	ldr	r3, [r7, #32]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d3b8      	bcc.n	8000d4e <trajectory_callback+0x196>
      }
    }
  }
  
  // Handle efforts if provided and valid
  if (point->effort.data != NULL && point->effort.size > 0) {
 8000ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d078      	beq.n	8000ed6 <trajectory_callback+0x31e>
 8000de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d074      	beq.n	8000ed6 <trajectory_callback+0x31e>
    size_t max_eff_joints = (point->effort.size < NUM_JOINTS) ? point->effort.size : NUM_JOINTS;
 8000dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	bf28      	it	cs
 8000df4:	2303      	movcs	r3, #3
 8000df6:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < max_eff_joints; i++) {
 8000df8:	2300      	movs	r3, #0
 8000dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000dfc:	e067      	b.n	8000ece <trajectory_callback+0x316>
 8000dfe:	bf00      	nop
 8000e00:	ffffffff 	.word	0xffffffff
 8000e04:	7fefffff 	.word	0x7fefffff
 8000e08:	54442d18 	.word	0x54442d18
 8000e0c:	400921fb 	.word	0x400921fb
 8000e10:	54442d18 	.word	0x54442d18
 8000e14:	c00921fb 	.word	0xc00921fb
 8000e18:	54442d18 	.word	0x54442d18
 8000e1c:	3ff921fb 	.word	0x3ff921fb
 8000e20:	54442d18 	.word	0x54442d18
 8000e24:	bff921fb 	.word	0xbff921fb
 8000e28:	00000000 	.word	0x00000000
 8000e2c:	40668000 	.word	0x40668000
 8000e30:	40020400 	.word	0x40020400
 8000e34:	20000c70 	.word	0x20000c70
 8000e38:	20000c58 	.word	0x20000c58
 8000e3c:	40240000 	.word	0x40240000
 8000e40:	c0240000 	.word	0xc0240000
 8000e44:	20000c88 	.word	0x20000c88
      double effort = point->effort.data[i];
 8000e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e4e:	00db      	lsls	r3, r3, #3
 8000e50:	4413      	add	r3, r2
 8000e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e56:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
      if (isfinite(effort)) {
 8000e5a:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8000e5e:	eeb0 7bc7 	vabs.f64	d7, d7
 8000e62:	ed9f 6b21 	vldr	d6, [pc, #132]	@ 8000ee8 <trajectory_callback+0x330>
 8000e66:	eeb4 7b46 	vcmp.f64	d7, d6
 8000e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e6e:	bf8c      	ite	hi
 8000e70:	2301      	movhi	r3, #1
 8000e72:	2300      	movls	r3, #0
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	f083 0301 	eor.w	r3, r3, #1
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d023      	beq.n	8000ec8 <trajectory_callback+0x310>
        // Clamp effort to reasonable range
        if (effort > 100.0) effort = 100.0;
 8000e80:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8000e84:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8000ef0 <trajectory_callback+0x338>
 8000e88:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e90:	dd04      	ble.n	8000e9c <trajectory_callback+0x2e4>
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	4b1a      	ldr	r3, [pc, #104]	@ (8000f00 <trajectory_callback+0x348>)
 8000e98:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        if (effort < -100.0) effort = -100.0;
 8000e9c:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8000ea0:	ed9f 6b15 	vldr	d6, [pc, #84]	@ 8000ef8 <trajectory_callback+0x340>
 8000ea4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eac:	d504      	bpl.n	8000eb8 <trajectory_callback+0x300>
 8000eae:	f04f 0200 	mov.w	r2, #0
 8000eb2:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <trajectory_callback+0x34c>)
 8000eb4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        joint_efforts[i] = effort;
 8000eb8:	4a13      	ldr	r2, [pc, #76]	@ (8000f08 <trajectory_callback+0x350>)
 8000eba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	18d1      	adds	r1, r2, r3
 8000ec0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000ec4:	e9c1 2300 	strd	r2, r3, [r1]
    for (size_t i = 0; i < max_eff_joints; i++) {
 8000ec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000eca:	3301      	adds	r3, #1
 8000ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ece:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d3b8      	bcc.n	8000e48 <trajectory_callback+0x290>
      }
    }
  }
  
  // Toggle blue LED to indicate successful processing
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000ed6:	2180      	movs	r1, #128	@ 0x80
 8000ed8:	480c      	ldr	r0, [pc, #48]	@ (8000f0c <trajectory_callback+0x354>)
 8000eda:	f002 ff30 	bl	8003d3e <HAL_GPIO_TogglePin>
}
 8000ede:	3760      	adds	r7, #96	@ 0x60
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	f3af 8000 	nop.w
 8000ee8:	ffffffff 	.word	0xffffffff
 8000eec:	7fefffff 	.word	0x7fefffff
 8000ef0:	00000000 	.word	0x00000000
 8000ef4:	40590000 	.word	0x40590000
 8000ef8:	00000000 	.word	0x00000000
 8000efc:	c0590000 	.word	0xc0590000
 8000f00:	40590000 	.word	0x40590000
 8000f04:	c0590000 	.word	0xc0590000
 8000f08:	20000ca0 	.word	0x20000ca0
 8000f0c:	40020400 	.word	0x40020400

08000f10 <debugNetworkStatus>:

void debugNetworkStatus(void)
{  
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  if (netif_is_up(&gnetif) && netif_is_link_up(&gnetif)) {
 8000f14:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <debugNetworkStatus+0x5c>)
 8000f16:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d014      	beq.n	8000f4e <debugNetworkStatus+0x3e>
 8000f24:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <debugNetworkStatus+0x5c>)
 8000f26:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d00b      	beq.n	8000f4e <debugNetworkStatus+0x3e>
    // Network is fully working - solid green
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);  // Red OFF
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f3c:	480c      	ldr	r0, [pc, #48]	@ (8000f70 <debugNetworkStatus+0x60>)
 8000f3e:	f002 fee5 	bl	8003d0c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);     // Green ON
 8000f42:	2201      	movs	r2, #1
 8000f44:	2101      	movs	r1, #1
 8000f46:	480a      	ldr	r0, [pc, #40]	@ (8000f70 <debugNetworkStatus+0x60>)
 8000f48:	f002 fee0 	bl	8003d0c <HAL_GPIO_WritePin>
 8000f4c:	e00b      	b.n	8000f66 <debugNetworkStatus+0x56>
  } else {
    // No physical link - solid red
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);   // Green OFF
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2101      	movs	r1, #1
 8000f52:	4807      	ldr	r0, [pc, #28]	@ (8000f70 <debugNetworkStatus+0x60>)
 8000f54:	f002 feda 	bl	8003d0c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);    // Red ON
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f5e:	4804      	ldr	r0, [pc, #16]	@ (8000f70 <debugNetworkStatus+0x60>)
 8000f60:	f002 fed4 	bl	8003d0c <HAL_GPIO_WritePin>
  }
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000e9c 	.word	0x20000e9c
 8000f70:	40020400 	.word	0x40020400

08000f74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f74:	b5b0      	push	{r4, r5, r7, lr}
 8000f76:	b096      	sub	sp, #88	@ 0x58
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7a:	f001 f966 	bl	800224a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7e:	f000 f84f 	bl	8001020 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f82:	f000 f8fb 	bl	800117c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f86:	f000 f8b9 	bl	80010fc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000f8a:	2064      	movs	r0, #100	@ 0x64
 8000f8c:	f001 f98a 	bl	80022a4 <HAL_Delay>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ethernetTask */
  osThreadDef(ethernetTask, ethernetStatusCheck, osPriorityIdle, 0, 256);
 8000f90:	4b1d      	ldr	r3, [pc, #116]	@ (8001008 <main+0x94>)
 8000f92:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000f96:	461d      	mov	r5, r3
 8000f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fa0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ethernetTaskHandle = osThreadCreate(osThread(ethernetTask), NULL);
 8000fa4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f005 fe79 	bl	8006ca2 <osThreadCreate>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4a16      	ldr	r2, [pc, #88]	@ (800100c <main+0x98>)
 8000fb4:	6013      	str	r3, [r2, #0]

  /* definition and creation of robotTask */
  osThreadDef(robotTask, robotControl, osPriorityIdle, 0, 256);
 8000fb6:	4b16      	ldr	r3, [pc, #88]	@ (8001010 <main+0x9c>)
 8000fb8:	f107 0420 	add.w	r4, r7, #32
 8000fbc:	461d      	mov	r5, r3
 8000fbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  robotTaskHandle = osThreadCreate(osThread(robotTask), NULL);
 8000fca:	f107 0320 	add.w	r3, r7, #32
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f005 fe66 	bl	8006ca2 <osThreadCreate>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4a0e      	ldr	r2, [pc, #56]	@ (8001014 <main+0xa0>)
 8000fda:	6013      	str	r3, [r2, #0]

  /* definition and creation of rosTask */
  osThreadDef(rosTask, ros, osPriorityNormal, 0, 3840);
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <main+0xa4>)
 8000fde:	1d3c      	adds	r4, r7, #4
 8000fe0:	461d      	mov	r5, r3
 8000fe2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rosTaskHandle = osThreadCreate(osThread(rosTask), NULL);
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f005 fe55 	bl	8006ca2 <osThreadCreate>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	4a08      	ldr	r2, [pc, #32]	@ (800101c <main+0xa8>)
 8000ffc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ffe:	f005 fe39 	bl	8006c74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001002:	bf00      	nop
 8001004:	e7fd      	b.n	8001002 <main+0x8e>
 8001006:	bf00      	nop
 8001008:	080291f0 	.word	0x080291f0
 800100c:	20000c48 	.word	0x20000c48
 8001010:	08029218 	.word	0x08029218
 8001014:	20000c4c 	.word	0x20000c4c
 8001018:	0802923c 	.word	0x0802923c
 800101c:	20000c50 	.word	0x20000c50

08001020 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b094      	sub	sp, #80	@ 0x50
 8001024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	2234      	movs	r2, #52	@ 0x34
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f027 f906 	bl	8028240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001044:	4b2b      	ldr	r3, [pc, #172]	@ (80010f4 <SystemClock_Config+0xd4>)
 8001046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001048:	4a2a      	ldr	r2, [pc, #168]	@ (80010f4 <SystemClock_Config+0xd4>)
 800104a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800104e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001050:	4b28      	ldr	r3, [pc, #160]	@ (80010f4 <SystemClock_Config+0xd4>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001054:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800105c:	4b26      	ldr	r3, [pc, #152]	@ (80010f8 <SystemClock_Config+0xd8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a25      	ldr	r2, [pc, #148]	@ (80010f8 <SystemClock_Config+0xd8>)
 8001062:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	4b23      	ldr	r3, [pc, #140]	@ (80010f8 <SystemClock_Config+0xd8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001074:	2302      	movs	r3, #2
 8001076:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001078:	2301      	movs	r3, #1
 800107a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800107c:	2310      	movs	r3, #16
 800107e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001080:	2302      	movs	r3, #2
 8001082:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001084:	2300      	movs	r3, #0
 8001086:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001088:	2308      	movs	r3, #8
 800108a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800108c:	23d8      	movs	r3, #216	@ 0xd8
 800108e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001090:	2302      	movs	r3, #2
 8001092:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001094:	2302      	movs	r3, #2
 8001096:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001098:	2302      	movs	r3, #2
 800109a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	4618      	mov	r0, r3
 80010a2:	f003 fb6d 	bl	8004780 <HAL_RCC_OscConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80010ac:	f000 fd02 	bl	8001ab4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010b0:	f003 fb16 	bl	80046e0 <HAL_PWREx_EnableOverDrive>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80010ba:	f000 fcfb 	bl	8001ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010be:	230f      	movs	r3, #15
 80010c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c2:	2302      	movs	r3, #2
 80010c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010ca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010d4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80010d6:	f107 0308 	add.w	r3, r7, #8
 80010da:	2107      	movs	r1, #7
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 fdfd 	bl	8004cdc <HAL_RCC_ClockConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80010e8:	f000 fce4 	bl	8001ab4 <Error_Handler>
  }
}
 80010ec:	bf00      	nop
 80010ee:	3750      	adds	r7, #80	@ 0x50
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40007000 	.word	0x40007000

080010fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001100:	4b1b      	ldr	r3, [pc, #108]	@ (8001170 <MX_I2C1_Init+0x74>)
 8001102:	4a1c      	ldr	r2, [pc, #112]	@ (8001174 <MX_I2C1_Init+0x78>)
 8001104:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001106:	4b1a      	ldr	r3, [pc, #104]	@ (8001170 <MX_I2C1_Init+0x74>)
 8001108:	4a1b      	ldr	r2, [pc, #108]	@ (8001178 <MX_I2C1_Init+0x7c>)
 800110a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800110c:	4b18      	ldr	r3, [pc, #96]	@ (8001170 <MX_I2C1_Init+0x74>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001112:	4b17      	ldr	r3, [pc, #92]	@ (8001170 <MX_I2C1_Init+0x74>)
 8001114:	2201      	movs	r2, #1
 8001116:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001118:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <MX_I2C1_Init+0x74>)
 800111a:	2200      	movs	r2, #0
 800111c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800111e:	4b14      	ldr	r3, [pc, #80]	@ (8001170 <MX_I2C1_Init+0x74>)
 8001120:	2200      	movs	r2, #0
 8001122:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001124:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <MX_I2C1_Init+0x74>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800112a:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <MX_I2C1_Init+0x74>)
 800112c:	2200      	movs	r2, #0
 800112e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001130:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <MX_I2C1_Init+0x74>)
 8001132:	2200      	movs	r2, #0
 8001134:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001136:	480e      	ldr	r0, [pc, #56]	@ (8001170 <MX_I2C1_Init+0x74>)
 8001138:	f002 fe1c 	bl	8003d74 <HAL_I2C_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001142:	f000 fcb7 	bl	8001ab4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001146:	2100      	movs	r1, #0
 8001148:	4809      	ldr	r0, [pc, #36]	@ (8001170 <MX_I2C1_Init+0x74>)
 800114a:	f003 fa31 	bl	80045b0 <HAL_I2CEx_ConfigAnalogFilter>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001154:	f000 fcae 	bl	8001ab4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001158:	2100      	movs	r1, #0
 800115a:	4805      	ldr	r0, [pc, #20]	@ (8001170 <MX_I2C1_Init+0x74>)
 800115c:	f003 fa73 	bl	8004646 <HAL_I2CEx_ConfigDigitalFilter>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001166:	f000 fca5 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000bf4 	.word	0x20000bf4
 8001174:	40005400 	.word	0x40005400
 8001178:	20404768 	.word	0x20404768

0800117c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	@ 0x28
 8001180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001192:	4b24      	ldr	r3, [pc, #144]	@ (8001224 <MX_GPIO_Init+0xa8>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a23      	ldr	r2, [pc, #140]	@ (8001224 <MX_GPIO_Init+0xa8>)
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b21      	ldr	r3, [pc, #132]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	4a17      	ldr	r2, [pc, #92]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ce:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011da:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	4a11      	ldr	r2, [pc, #68]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80011f8:	480b      	ldr	r0, [pc, #44]	@ (8001228 <MX_GPIO_Init+0xac>)
 80011fa:	f002 fd87 	bl	8003d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 80011fe:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	4804      	ldr	r0, [pc, #16]	@ (8001228 <MX_GPIO_Init+0xac>)
 8001218:	f002 fbcc 	bl	80039b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	@ 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40023800 	.word	0x40023800
 8001228:	40020400 	.word	0x40020400

0800122c <ethernetStatusCheck>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ethernetStatusCheck */
void ethernetStatusCheck(void const * argument)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001234:	f004 fe4c 	bl	8005ed0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	debugNetworkStatus();
 8001238:	f7ff fe6a 	bl	8000f10 <debugNetworkStatus>
    osDelay(2000);
 800123c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001240:	f005 fd87 	bl	8006d52 <osDelay>
	debugNetworkStatus();
 8001244:	bf00      	nop
 8001246:	e7f7      	b.n	8001238 <ethernetStatusCheck+0xc>

08001248 <robotControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_robotControl */
void robotControl(void const * argument)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN robotControl */
  
  // Initialize robot hardware
  pca9685_init();
 8001250:	f000 fc54 	bl	8001afc <pca9685_init>
  
  // Initialize servos to safe starting positions
  set_servo(0, 90);   // Servo 0 to center
 8001254:	215a      	movs	r1, #90	@ 0x5a
 8001256:	2000      	movs	r0, #0
 8001258:	f000 fc98 	bl	8001b8c <set_servo>
  set_servo(1, 90);   // Servo 1 to center
 800125c:	215a      	movs	r1, #90	@ 0x5a
 800125e:	2001      	movs	r0, #1
 8001260:	f000 fc94 	bl	8001b8c <set_servo>
  set_servo(2, 90);   // Servo 2 to center
 8001264:	215a      	movs	r1, #90	@ 0x5a
 8001266:	2002      	movs	r0, #2
 8001268:	f000 fc90 	bl	8001b8c <set_servo>
  
  current_joint_positions[0] = 90;
 800126c:	490b      	ldr	r1, [pc, #44]	@ (800129c <robotControl+0x54>)
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <robotControl+0x58>)
 8001274:	e9c1 2300 	strd	r2, r3, [r1]
  current_joint_positions[1] = 90;
 8001278:	4908      	ldr	r1, [pc, #32]	@ (800129c <robotControl+0x54>)
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <robotControl+0x58>)
 8001280:	e9c1 2302 	strd	r2, r3, [r1, #8]
  current_joint_positions[2] = 90;
 8001284:	4905      	ldr	r1, [pc, #20]	@ (800129c <robotControl+0x54>)
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <robotControl+0x58>)
 800128c:	e9c1 2304 	strd	r2, r3, [r1, #16]

  for (;;) {
	  osDelay(2000);
 8001290:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001294:	f005 fd5d 	bl	8006d52 <osDelay>
 8001298:	e7fa      	b.n	8001290 <robotControl+0x48>
 800129a:	bf00      	nop
 800129c:	20000c58 	.word	0x20000c58
 80012a0:	40568000 	.word	0x40568000

080012a4 <ros>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ros */
void ros(void const * argument)
{
 80012a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a6:	b095      	sub	sp, #84	@ 0x54
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ros */
  
  // Wait for network to be ready - use longer delays to give Ethernet task time
  uint32_t network_wait_count = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	647b      	str	r3, [r7, #68]	@ 0x44
  while (!netif_is_up(&gnetif) || !netif_is_link_up(&gnetif)) {
 80012b0:	e016      	b.n	80012e0 <ros+0x3c>
    network_wait_count++;
 80012b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012b4:	3301      	adds	r3, #1
 80012b6:	647b      	str	r3, [r7, #68]	@ 0x44
    
    // Blink blue LED to show we're waiting for network
    if (network_wait_count % 10 == 0) {
 80012b8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80012ba:	4b98      	ldr	r3, [pc, #608]	@ (800151c <ros+0x278>)
 80012bc:	fba3 2301 	umull	r2, r3, r3, r1
 80012c0:	08da      	lsrs	r2, r3, #3
 80012c2:	4613      	mov	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	1aca      	subs	r2, r1, r3
 80012cc:	2a00      	cmp	r2, #0
 80012ce:	d103      	bne.n	80012d8 <ros+0x34>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80012d0:	2180      	movs	r1, #128	@ 0x80
 80012d2:	4893      	ldr	r0, [pc, #588]	@ (8001520 <ros+0x27c>)
 80012d4:	f002 fd33 	bl	8003d3e <HAL_GPIO_TogglePin>
    }
    
    osDelay(1000);  // 1 second delay - gives plenty of time for Ethernet task
 80012d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012dc:	f005 fd39 	bl	8006d52 <osDelay>
  while (!netif_is_up(&gnetif) || !netif_is_link_up(&gnetif)) {
 80012e0:	4b90      	ldr	r3, [pc, #576]	@ (8001524 <ros+0x280>)
 80012e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0e1      	beq.n	80012b2 <ros+0xe>
 80012ee:	4b8d      	ldr	r3, [pc, #564]	@ (8001524 <ros+0x280>)
 80012f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0da      	beq.n	80012b2 <ros+0xe>
  }
  
  // Network is ready - turn off blue LED
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2180      	movs	r1, #128	@ 0x80
 8001300:	4887      	ldr	r0, [pc, #540]	@ (8001520 <ros+0x27c>)
 8001302:	f002 fd03 	bl	8003d0c <HAL_GPIO_WritePin>
  
  // Setup micro-ROS transport
  rmw_uros_set_custom_transport(
 8001306:	4b88      	ldr	r3, [pc, #544]	@ (8001528 <ros+0x284>)
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	4b88      	ldr	r3, [pc, #544]	@ (800152c <ros+0x288>)
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	4b88      	ldr	r3, [pc, #544]	@ (8001530 <ros+0x28c>)
 8001310:	4a88      	ldr	r2, [pc, #544]	@ (8001534 <ros+0x290>)
 8001312:	4989      	ldr	r1, [pc, #548]	@ (8001538 <ros+0x294>)
 8001314:	2000      	movs	r0, #0
 8001316:	f01a fd0b 	bl	801bd30 <rmw_uros_set_custom_transport>
    cubemx_transport_write,
    cubemx_transport_read
  );

  // Initialize micro-ROS
  rcl_allocator_t allocator = rcl_get_default_allocator();
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4618      	mov	r0, r3
 8001320:	f01a fc66 	bl	801bbf0 <rcutils_get_default_allocator>
  
  // Create support
  if (rclc_support_init(&support, 0, NULL, &allocator) != RCL_RET_OK) {
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	2200      	movs	r2, #0
 800132a:	2100      	movs	r1, #0
 800132c:	4883      	ldr	r0, [pc, #524]	@ (800153c <ros+0x298>)
 800132e:	f01a fb57 	bl	801b9e0 <rclc_support_init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d008      	beq.n	800134a <ros+0xa6>
    // Error - blink red LED fast
    for(;;) {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001338:	2180      	movs	r1, #128	@ 0x80
 800133a:	4879      	ldr	r0, [pc, #484]	@ (8001520 <ros+0x27c>)
 800133c:	f002 fcff 	bl	8003d3e <HAL_GPIO_TogglePin>
      osDelay(100);
 8001340:	2064      	movs	r0, #100	@ 0x64
 8001342:	f005 fd06 	bl	8006d52 <osDelay>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001346:	bf00      	nop
 8001348:	e7f6      	b.n	8001338 <ros+0x94>
    }
  }

  // Create node
  if (rclc_node_init_default(&node, "stm32_simple_node", "", &support) != RCL_RET_OK) {
 800134a:	4b7c      	ldr	r3, [pc, #496]	@ (800153c <ros+0x298>)
 800134c:	4a7c      	ldr	r2, [pc, #496]	@ (8001540 <ros+0x29c>)
 800134e:	497d      	ldr	r1, [pc, #500]	@ (8001544 <ros+0x2a0>)
 8001350:	487d      	ldr	r0, [pc, #500]	@ (8001548 <ros+0x2a4>)
 8001352:	f01a fb8f 	bl	801ba74 <rclc_node_init_default>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d009      	beq.n	8001370 <ros+0xcc>
    // Error - blink red LED fast
    for(;;) {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800135c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001360:	486f      	ldr	r0, [pc, #444]	@ (8001520 <ros+0x27c>)
 8001362:	f002 fcec 	bl	8003d3e <HAL_GPIO_TogglePin>
      osDelay(100);
 8001366:	2064      	movs	r0, #100	@ 0x64
 8001368:	f005 fcf3 	bl	8006d52 <osDelay>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800136c:	bf00      	nop
 800136e:	e7f5      	b.n	800135c <ros+0xb8>
    }
  }

  // Create publisher
  if (rclc_publisher_init_default(
 8001370:	f01b fb84 	bl	801ca7c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState>
 8001374:	4602      	mov	r2, r0
 8001376:	4b75      	ldr	r3, [pc, #468]	@ (800154c <ros+0x2a8>)
 8001378:	4973      	ldr	r1, [pc, #460]	@ (8001548 <ros+0x2a4>)
 800137a:	4875      	ldr	r0, [pc, #468]	@ (8001550 <ros+0x2ac>)
 800137c:	f01a fbbc 	bl	801baf8 <rclc_publisher_init_default>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d009      	beq.n	800139a <ros+0xf6>
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, JointState),
    "joint_states") != RCL_RET_OK) {
    // Error - blink red LED medium
    for(;;) {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001386:	2180      	movs	r1, #128	@ 0x80
 8001388:	4865      	ldr	r0, [pc, #404]	@ (8001520 <ros+0x27c>)
 800138a:	f002 fcd8 	bl	8003d3e <HAL_GPIO_TogglePin>
      osDelay(400);
 800138e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001392:	f005 fcde 	bl	8006d52 <osDelay>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001396:	bf00      	nop
 8001398:	e7f5      	b.n	8001386 <ros+0xe2>
    }
  }

  // Create joint command subscriber for ros2_control
  if (rclc_subscription_init_default(
 800139a:	f017 fdd9 	bl	8018f50 <rosidl_typesupport_c__get_message_type_support_handle__control_msgs__msg__JointJog>
 800139e:	4602      	mov	r2, r0
 80013a0:	4b6c      	ldr	r3, [pc, #432]	@ (8001554 <ros+0x2b0>)
 80013a2:	4969      	ldr	r1, [pc, #420]	@ (8001548 <ros+0x2a4>)
 80013a4:	486c      	ldr	r0, [pc, #432]	@ (8001558 <ros+0x2b4>)
 80013a6:	f01a fbe1 	bl	801bb6c <rclc_subscription_init_default>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d009      	beq.n	80013c4 <ros+0x120>
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(control_msgs, msg, JointJog),
    "joint_command") != RCL_RET_OK) {
    // Error - blink red LED medium
    for(;;) {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80013b0:	2180      	movs	r1, #128	@ 0x80
 80013b2:	485b      	ldr	r0, [pc, #364]	@ (8001520 <ros+0x27c>)
 80013b4:	f002 fcc3 	bl	8003d3e <HAL_GPIO_TogglePin>
      osDelay(400);
 80013b8:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80013bc:	f005 fcc9 	bl	8006d52 <osDelay>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80013c0:	bf00      	nop
 80013c2:	e7f5      	b.n	80013b0 <ros+0x10c>
    }
  }

  // Create trajectory subscriber for ros2_control
  if (rclc_subscription_init_default(
 80013c4:	f01b fe56 	bl	801d074 <rosidl_typesupport_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectory>
 80013c8:	4602      	mov	r2, r0
 80013ca:	4b64      	ldr	r3, [pc, #400]	@ (800155c <ros+0x2b8>)
 80013cc:	495e      	ldr	r1, [pc, #376]	@ (8001548 <ros+0x2a4>)
 80013ce:	4864      	ldr	r0, [pc, #400]	@ (8001560 <ros+0x2bc>)
 80013d0:	f01a fbcc 	bl	801bb6c <rclc_subscription_init_default>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d009      	beq.n	80013ee <ros+0x14a>
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(trajectory_msgs, msg, JointTrajectory),
    "joint_trajectory") != RCL_RET_OK) {
    // Error - blink red LED medium
    for(;;) {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80013da:	2180      	movs	r1, #128	@ 0x80
 80013dc:	4850      	ldr	r0, [pc, #320]	@ (8001520 <ros+0x27c>)
 80013de:	f002 fcae 	bl	8003d3e <HAL_GPIO_TogglePin>
      osDelay(400);
 80013e2:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80013e6:	f005 fcb4 	bl	8006d52 <osDelay>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80013ea:	bf00      	nop
 80013ec:	e7f5      	b.n	80013da <ros+0x136>
    }
  }

  // Create executor
  if (rclc_executor_init(&executor, &support.context, 5, &allocator) != RCL_RET_OK) {
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	2205      	movs	r2, #5
 80013f4:	4951      	ldr	r1, [pc, #324]	@ (800153c <ros+0x298>)
 80013f6:	485b      	ldr	r0, [pc, #364]	@ (8001564 <ros+0x2c0>)
 80013f8:	f01a f812 	bl	801b420 <rclc_executor_init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d009      	beq.n	8001416 <ros+0x172>
    // Error - blink blue LED  slow
    for(;;) {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001402:	2180      	movs	r1, #128	@ 0x80
 8001404:	4846      	ldr	r0, [pc, #280]	@ (8001520 <ros+0x27c>)
 8001406:	f002 fc9a 	bl	8003d3e <HAL_GPIO_TogglePin>
      osDelay(1000);
 800140a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800140e:	f005 fca0 	bl	8006d52 <osDelay>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001412:	bf00      	nop
 8001414:	e7f5      	b.n	8001402 <ros+0x15e>
    }
  }

  // Add joint command subscription to executor
  if (rclc_executor_add_subscription(&executor, &joint_cmd_subscriber, &joint_cmd_msg, 
 8001416:	2300      	movs	r3, #0
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	4b53      	ldr	r3, [pc, #332]	@ (8001568 <ros+0x2c4>)
 800141c:	4a53      	ldr	r2, [pc, #332]	@ (800156c <ros+0x2c8>)
 800141e:	494e      	ldr	r1, [pc, #312]	@ (8001558 <ros+0x2b4>)
 8001420:	4850      	ldr	r0, [pc, #320]	@ (8001564 <ros+0x2c0>)
 8001422:	f01a f879 	bl	801b518 <rclc_executor_add_subscription>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00a      	beq.n	8001442 <ros+0x19e>
    &joint_command_callback, ON_NEW_DATA) != RCL_RET_OK) {
    // Error - blink red LED  slow
    for(;;) {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800142c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001430:	483b      	ldr	r0, [pc, #236]	@ (8001520 <ros+0x27c>)
 8001432:	f002 fc84 	bl	8003d3e <HAL_GPIO_TogglePin>
      osDelay(1000);
 8001436:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800143a:	f005 fc8a 	bl	8006d52 <osDelay>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800143e:	bf00      	nop
 8001440:	e7f4      	b.n	800142c <ros+0x188>
    }
  }

  // Add trajectory subscription to executor
  if (rclc_executor_add_subscription(&executor, &trajectory_subscriber, &trajectory_msg, 
 8001442:	2300      	movs	r3, #0
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	4b4a      	ldr	r3, [pc, #296]	@ (8001570 <ros+0x2cc>)
 8001448:	4a4a      	ldr	r2, [pc, #296]	@ (8001574 <ros+0x2d0>)
 800144a:	4945      	ldr	r1, [pc, #276]	@ (8001560 <ros+0x2bc>)
 800144c:	4845      	ldr	r0, [pc, #276]	@ (8001564 <ros+0x2c0>)
 800144e:	f01a f863 	bl	801b518 <rclc_executor_add_subscription>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d00a      	beq.n	800146e <ros+0x1ca>
    &trajectory_callback, ON_NEW_DATA) != RCL_RET_OK) {
    // Error - blink red LED  slow
    for(;;) {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001458:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800145c:	4830      	ldr	r0, [pc, #192]	@ (8001520 <ros+0x27c>)
 800145e:	f002 fc6e 	bl	8003d3e <HAL_GPIO_TogglePin>
      osDelay(1000);
 8001462:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001466:	f005 fc74 	bl	8006d52 <osDelay>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800146a:	bf00      	nop
 800146c:	e7f4      	b.n	8001458 <ros+0x1b4>
    }
  }

  // Initialize messages
  // Initialize JointState message
  pub_msg.header.frame_id.data = (char*)malloc(10);
 800146e:	200a      	movs	r0, #10
 8001470:	f026 f9e8 	bl	8027844 <malloc>
 8001474:	4603      	mov	r3, r0
 8001476:	461a      	mov	r2, r3
 8001478:	4b3f      	ldr	r3, [pc, #252]	@ (8001578 <ros+0x2d4>)
 800147a:	609a      	str	r2, [r3, #8]
  pub_msg.header.frame_id.size = 0;
 800147c:	4b3e      	ldr	r3, [pc, #248]	@ (8001578 <ros+0x2d4>)
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]
  pub_msg.header.frame_id.capacity = 10;
 8001482:	4b3d      	ldr	r3, [pc, #244]	@ (8001578 <ros+0x2d4>)
 8001484:	220a      	movs	r2, #10
 8001486:	611a      	str	r2, [r3, #16]
  
  const size_t num_joints = 3;
 8001488:	2303      	movs	r3, #3
 800148a:	633b      	str	r3, [r7, #48]	@ 0x30
  
  pub_msg.name.data = (rosidl_runtime_c__String*)malloc(num_joints * sizeof(rosidl_runtime_c__String));
 800148c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4618      	mov	r0, r3
 8001498:	f026 f9d4 	bl	8027844 <malloc>
 800149c:	4603      	mov	r3, r0
 800149e:	461a      	mov	r2, r3
 80014a0:	4b35      	ldr	r3, [pc, #212]	@ (8001578 <ros+0x2d4>)
 80014a2:	615a      	str	r2, [r3, #20]
  pub_msg.name.size = num_joints;
 80014a4:	4a34      	ldr	r2, [pc, #208]	@ (8001578 <ros+0x2d4>)
 80014a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014a8:	6193      	str	r3, [r2, #24]
  pub_msg.name.capacity = num_joints;
 80014aa:	4a33      	ldr	r2, [pc, #204]	@ (8001578 <ros+0x2d4>)
 80014ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014ae:	61d3      	str	r3, [r2, #28]
  
  pub_msg.position.data = (double*)malloc(num_joints * sizeof(double));
 80014b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	4618      	mov	r0, r3
 80014b6:	f026 f9c5 	bl	8027844 <malloc>
 80014ba:	4603      	mov	r3, r0
 80014bc:	461a      	mov	r2, r3
 80014be:	4b2e      	ldr	r3, [pc, #184]	@ (8001578 <ros+0x2d4>)
 80014c0:	621a      	str	r2, [r3, #32]
  pub_msg.position.size = num_joints;
 80014c2:	4a2d      	ldr	r2, [pc, #180]	@ (8001578 <ros+0x2d4>)
 80014c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014c6:	6253      	str	r3, [r2, #36]	@ 0x24
  pub_msg.position.capacity = num_joints;
 80014c8:	4a2b      	ldr	r2, [pc, #172]	@ (8001578 <ros+0x2d4>)
 80014ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014cc:	6293      	str	r3, [r2, #40]	@ 0x28
  
  pub_msg.velocity.data = (double*)malloc(num_joints * sizeof(double));
 80014ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f026 f9b6 	bl	8027844 <malloc>
 80014d8:	4603      	mov	r3, r0
 80014da:	461a      	mov	r2, r3
 80014dc:	4b26      	ldr	r3, [pc, #152]	@ (8001578 <ros+0x2d4>)
 80014de:	62da      	str	r2, [r3, #44]	@ 0x2c
  pub_msg.velocity.size = num_joints;
 80014e0:	4a25      	ldr	r2, [pc, #148]	@ (8001578 <ros+0x2d4>)
 80014e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014e4:	6313      	str	r3, [r2, #48]	@ 0x30
  pub_msg.velocity.capacity = num_joints;
 80014e6:	4a24      	ldr	r2, [pc, #144]	@ (8001578 <ros+0x2d4>)
 80014e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014ea:	6353      	str	r3, [r2, #52]	@ 0x34
  
  pub_msg.effort.data = (double*)malloc(num_joints * sizeof(double));
 80014ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	4618      	mov	r0, r3
 80014f2:	f026 f9a7 	bl	8027844 <malloc>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001578 <ros+0x2d4>)
 80014fc:	639a      	str	r2, [r3, #56]	@ 0x38
  pub_msg.effort.size = num_joints;
 80014fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001578 <ros+0x2d4>)
 8001500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001502:	63d3      	str	r3, [r2, #60]	@ 0x3c
  pub_msg.effort.capacity = num_joints;
 8001504:	4a1c      	ldr	r2, [pc, #112]	@ (8001578 <ros+0x2d4>)
 8001506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001508:	6413      	str	r3, [r2, #64]	@ 0x40
  
  // Initialize joint names and values
  const char* joint_names[NUM_JOINTS] = {"joint_1", "joint_2", "joint_3"};
 800150a:	4a1c      	ldr	r2, [pc, #112]	@ (800157c <ros+0x2d8>)
 800150c:	f107 0308 	add.w	r3, r7, #8
 8001510:	ca07      	ldmia	r2, {r0, r1, r2}
 8001512:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  for (size_t i = 0; i < num_joints; i++) {
 8001516:	2300      	movs	r3, #0
 8001518:	643b      	str	r3, [r7, #64]	@ 0x40
 800151a:	e097      	b.n	800164c <ros+0x3a8>
 800151c:	cccccccd 	.word	0xcccccccd
 8001520:	40020400 	.word	0x40020400
 8001524:	20000e9c 	.word	0x20000e9c
 8001528:	08000975 	.word	0x08000975
 800152c:	08000901 	.word	0x08000901
 8001530:	080008cd 	.word	0x080008cd
 8001534:	08000871 	.word	0x08000871
 8001538:	08029258 	.word	0x08029258
 800153c:	20000ccc 	.word	0x20000ccc
 8001540:	08029268 	.word	0x08029268
 8001544:	0802926c 	.word	0x0802926c
 8001548:	20000cb8 	.word	0x20000cb8
 800154c:	08029280 	.word	0x08029280
 8001550:	20000cc0 	.word	0x20000cc0
 8001554:	08029290 	.word	0x08029290
 8001558:	20000cc4 	.word	0x20000cc4
 800155c:	080292a0 	.word	0x080292a0
 8001560:	20000cc8 	.word	0x20000cc8
 8001564:	20000d00 	.word	0x20000d00
 8001568:	08000a59 	.word	0x08000a59
 800156c:	20000dd8 	.word	0x20000dd8
 8001570:	08000bb9 	.word	0x08000bb9
 8001574:	20000e18 	.word	0x20000e18
 8001578:	20000d88 	.word	0x20000d88
 800157c:	080292cc 	.word	0x080292cc
    pub_msg.name.data[i].data = (char*)malloc(20);
 8001580:	4ba6      	ldr	r3, [pc, #664]	@ (800181c <ros+0x578>)
 8001582:	6959      	ldr	r1, [r3, #20]
 8001584:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001586:	4613      	mov	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4413      	add	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	18ce      	adds	r6, r1, r3
 8001590:	2014      	movs	r0, #20
 8001592:	f026 f957 	bl	8027844 <malloc>
 8001596:	4603      	mov	r3, r0
 8001598:	6033      	str	r3, [r6, #0]
    pub_msg.name.data[i].capacity = 20;
 800159a:	4ba0      	ldr	r3, [pc, #640]	@ (800181c <ros+0x578>)
 800159c:	6959      	ldr	r1, [r3, #20]
 800159e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80015a0:	4613      	mov	r3, r2
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	4413      	add	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	2214      	movs	r2, #20
 80015ac:	609a      	str	r2, [r3, #8]
    strcpy(pub_msg.name.data[i].data, joint_names[i]);
 80015ae:	4b9b      	ldr	r3, [pc, #620]	@ (800181c <ros+0x578>)
 80015b0:	6959      	ldr	r1, [r3, #20]
 80015b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	3348      	adds	r3, #72	@ 0x48
 80015c6:	443b      	add	r3, r7
 80015c8:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80015cc:	4619      	mov	r1, r3
 80015ce:	4610      	mov	r0, r2
 80015d0:	f026 ff55 	bl	802847e <strcpy>
    pub_msg.name.data[i].size = strlen(joint_names[i]);
 80015d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	3348      	adds	r3, #72	@ 0x48
 80015da:	443b      	add	r3, r7
 80015dc:	f853 0c40 	ldr.w	r0, [r3, #-64]
 80015e0:	4b8e      	ldr	r3, [pc, #568]	@ (800181c <ros+0x578>)
 80015e2:	6959      	ldr	r1, [r3, #20]
 80015e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80015e6:	4613      	mov	r3, r2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4413      	add	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	18ce      	adds	r6, r1, r3
 80015f0:	f7fe fe30 	bl	8000254 <strlen>
 80015f4:	4603      	mov	r3, r0
 80015f6:	6073      	str	r3, [r6, #4]
    
    pub_msg.position.data[i] = current_joint_positions[i];
 80015f8:	4b88      	ldr	r3, [pc, #544]	@ (800181c <ros+0x578>)
 80015fa:	6a1a      	ldr	r2, [r3, #32]
 80015fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	18d1      	adds	r1, r2, r3
 8001602:	4a87      	ldr	r2, [pc, #540]	@ (8001820 <ros+0x57c>)
 8001604:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	4413      	add	r3, r2
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	e9c1 2300 	strd	r2, r3, [r1]
    pub_msg.velocity.data[i] = joint_velocities[i];
 8001612:	4b82      	ldr	r3, [pc, #520]	@ (800181c <ros+0x578>)
 8001614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	18d1      	adds	r1, r2, r3
 800161c:	4a81      	ldr	r2, [pc, #516]	@ (8001824 <ros+0x580>)
 800161e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4413      	add	r3, r2
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	e9c1 2300 	strd	r2, r3, [r1]
    pub_msg.effort.data[i] = joint_efforts[i];
 800162c:	4b7b      	ldr	r3, [pc, #492]	@ (800181c <ros+0x578>)
 800162e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001630:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	18d1      	adds	r1, r2, r3
 8001636:	4a7c      	ldr	r2, [pc, #496]	@ (8001828 <ros+0x584>)
 8001638:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	4413      	add	r3, r2
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	e9c1 2300 	strd	r2, r3, [r1]
  for (size_t i = 0; i < num_joints; i++) {
 8001646:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001648:	3301      	adds	r3, #1
 800164a:	643b      	str	r3, [r7, #64]	@ 0x40
 800164c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800164e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001650:	429a      	cmp	r2, r3
 8001652:	d395      	bcc.n	8001580 <ros+0x2dc>
  }
  
  sub_msg.data.data = (char*)malloc(50);
 8001654:	2032      	movs	r0, #50	@ 0x32
 8001656:	f026 f8f5 	bl	8027844 <malloc>
 800165a:	4603      	mov	r3, r0
 800165c:	461a      	mov	r2, r3
 800165e:	4b73      	ldr	r3, [pc, #460]	@ (800182c <ros+0x588>)
 8001660:	601a      	str	r2, [r3, #0]
  sub_msg.data.size = 0;
 8001662:	4b72      	ldr	r3, [pc, #456]	@ (800182c <ros+0x588>)
 8001664:	2200      	movs	r2, #0
 8001666:	605a      	str	r2, [r3, #4]
  sub_msg.data.capacity = 50;
 8001668:	4b70      	ldr	r3, [pc, #448]	@ (800182c <ros+0x588>)
 800166a:	2232      	movs	r2, #50	@ 0x32
 800166c:	609a      	str	r2, [r3, #8]

  // Initialize joint command message
  joint_cmd_msg.header.frame_id.data = (char*)malloc(10);
 800166e:	200a      	movs	r0, #10
 8001670:	f026 f8e8 	bl	8027844 <malloc>
 8001674:	4603      	mov	r3, r0
 8001676:	461a      	mov	r2, r3
 8001678:	4b6d      	ldr	r3, [pc, #436]	@ (8001830 <ros+0x58c>)
 800167a:	609a      	str	r2, [r3, #8]
  joint_cmd_msg.header.frame_id.size = 0;
 800167c:	4b6c      	ldr	r3, [pc, #432]	@ (8001830 <ros+0x58c>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
  joint_cmd_msg.header.frame_id.capacity = 10;
 8001682:	4b6b      	ldr	r3, [pc, #428]	@ (8001830 <ros+0x58c>)
 8001684:	220a      	movs	r2, #10
 8001686:	611a      	str	r2, [r3, #16]
  
  joint_cmd_msg.joint_names.data = (rosidl_runtime_c__String*)malloc(NUM_JOINTS * sizeof(rosidl_runtime_c__String));
 8001688:	2024      	movs	r0, #36	@ 0x24
 800168a:	f026 f8db 	bl	8027844 <malloc>
 800168e:	4603      	mov	r3, r0
 8001690:	461a      	mov	r2, r3
 8001692:	4b67      	ldr	r3, [pc, #412]	@ (8001830 <ros+0x58c>)
 8001694:	615a      	str	r2, [r3, #20]
  if (joint_cmd_msg.joint_names.data == NULL) {
 8001696:	4b66      	ldr	r3, [pc, #408]	@ (8001830 <ros+0x58c>)
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d109      	bne.n	80016b2 <ros+0x40e>
    for(;;) {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800169e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016a2:	4864      	ldr	r0, [pc, #400]	@ (8001834 <ros+0x590>)
 80016a4:	f002 fb4b 	bl	8003d3e <HAL_GPIO_TogglePin>
      osDelay(100);
 80016a8:	2064      	movs	r0, #100	@ 0x64
 80016aa:	f005 fb52 	bl	8006d52 <osDelay>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80016ae:	bf00      	nop
 80016b0:	e7f5      	b.n	800169e <ros+0x3fa>
    }
  }
  joint_cmd_msg.joint_names.size = 0;
 80016b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001830 <ros+0x58c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  joint_cmd_msg.joint_names.capacity = NUM_JOINTS;
 80016b8:	4b5d      	ldr	r3, [pc, #372]	@ (8001830 <ros+0x58c>)
 80016ba:	2203      	movs	r2, #3
 80016bc:	61da      	str	r2, [r3, #28]
  
  // CRITICAL: Initialize individual joint name strings
  for (size_t i = 0; i < NUM_JOINTS; i++) {
 80016be:	2300      	movs	r3, #0
 80016c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016c2:	e038      	b.n	8001736 <ros+0x492>
    joint_cmd_msg.joint_names.data[i].data = (char*)malloc(20);
 80016c4:	4b5a      	ldr	r3, [pc, #360]	@ (8001830 <ros+0x58c>)
 80016c6:	6959      	ldr	r1, [r3, #20]
 80016c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016ca:	4613      	mov	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	4413      	add	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	18ce      	adds	r6, r1, r3
 80016d4:	2014      	movs	r0, #20
 80016d6:	f026 f8b5 	bl	8027844 <malloc>
 80016da:	4603      	mov	r3, r0
 80016dc:	6033      	str	r3, [r6, #0]
    if (joint_cmd_msg.joint_names.data[i].data == NULL) {
 80016de:	4b54      	ldr	r3, [pc, #336]	@ (8001830 <ros+0x58c>)
 80016e0:	6959      	ldr	r1, [r3, #20]
 80016e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016e4:	4613      	mov	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d109      	bne.n	8001708 <ros+0x464>
      for(;;) {
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80016f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016f8:	484e      	ldr	r0, [pc, #312]	@ (8001834 <ros+0x590>)
 80016fa:	f002 fb20 	bl	8003d3e <HAL_GPIO_TogglePin>
        osDelay(100);
 80016fe:	2064      	movs	r0, #100	@ 0x64
 8001700:	f005 fb27 	bl	8006d52 <osDelay>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001704:	bf00      	nop
 8001706:	e7f5      	b.n	80016f4 <ros+0x450>
      }
    }
    joint_cmd_msg.joint_names.data[i].capacity = 20;
 8001708:	4b49      	ldr	r3, [pc, #292]	@ (8001830 <ros+0x58c>)
 800170a:	6959      	ldr	r1, [r3, #20]
 800170c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800170e:	4613      	mov	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	2214      	movs	r2, #20
 800171a:	609a      	str	r2, [r3, #8]
    joint_cmd_msg.joint_names.data[i].size = 0;
 800171c:	4b44      	ldr	r3, [pc, #272]	@ (8001830 <ros+0x58c>)
 800171e:	6959      	ldr	r1, [r3, #20]
 8001720:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001722:	4613      	mov	r3, r2
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	4413      	add	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	440b      	add	r3, r1
 800172c:	2200      	movs	r2, #0
 800172e:	605a      	str	r2, [r3, #4]
  for (size_t i = 0; i < NUM_JOINTS; i++) {
 8001730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001732:	3301      	adds	r3, #1
 8001734:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001738:	2b02      	cmp	r3, #2
 800173a:	d9c3      	bls.n	80016c4 <ros+0x420>
  }
  
  joint_cmd_msg.displacements.data = (double*)malloc(NUM_JOINTS * sizeof(double));
 800173c:	2018      	movs	r0, #24
 800173e:	f026 f881 	bl	8027844 <malloc>
 8001742:	4603      	mov	r3, r0
 8001744:	461a      	mov	r2, r3
 8001746:	4b3a      	ldr	r3, [pc, #232]	@ (8001830 <ros+0x58c>)
 8001748:	621a      	str	r2, [r3, #32]
  if (joint_cmd_msg.displacements.data == NULL) {
 800174a:	4b39      	ldr	r3, [pc, #228]	@ (8001830 <ros+0x58c>)
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d109      	bne.n	8001766 <ros+0x4c2>
    for(;;) {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001752:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001756:	4837      	ldr	r0, [pc, #220]	@ (8001834 <ros+0x590>)
 8001758:	f002 faf1 	bl	8003d3e <HAL_GPIO_TogglePin>
      osDelay(100);
 800175c:	2064      	movs	r0, #100	@ 0x64
 800175e:	f005 faf8 	bl	8006d52 <osDelay>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001762:	bf00      	nop
 8001764:	e7f5      	b.n	8001752 <ros+0x4ae>
    }
  }
  joint_cmd_msg.displacements.size = 0;
 8001766:	4b32      	ldr	r3, [pc, #200]	@ (8001830 <ros+0x58c>)
 8001768:	2200      	movs	r2, #0
 800176a:	625a      	str	r2, [r3, #36]	@ 0x24
  joint_cmd_msg.displacements.capacity = NUM_JOINTS;
 800176c:	4b30      	ldr	r3, [pc, #192]	@ (8001830 <ros+0x58c>)
 800176e:	2203      	movs	r2, #3
 8001770:	629a      	str	r2, [r3, #40]	@ 0x28
  
  joint_cmd_msg.velocities.data = (double*)malloc(NUM_JOINTS * sizeof(double));
 8001772:	2018      	movs	r0, #24
 8001774:	f026 f866 	bl	8027844 <malloc>
 8001778:	4603      	mov	r3, r0
 800177a:	461a      	mov	r2, r3
 800177c:	4b2c      	ldr	r3, [pc, #176]	@ (8001830 <ros+0x58c>)
 800177e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (joint_cmd_msg.velocities.data == NULL) {
 8001780:	4b2b      	ldr	r3, [pc, #172]	@ (8001830 <ros+0x58c>)
 8001782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001784:	2b00      	cmp	r3, #0
 8001786:	d109      	bne.n	800179c <ros+0x4f8>
    for(;;) {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001788:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800178c:	4829      	ldr	r0, [pc, #164]	@ (8001834 <ros+0x590>)
 800178e:	f002 fad6 	bl	8003d3e <HAL_GPIO_TogglePin>
      osDelay(100);
 8001792:	2064      	movs	r0, #100	@ 0x64
 8001794:	f005 fadd 	bl	8006d52 <osDelay>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001798:	bf00      	nop
 800179a:	e7f5      	b.n	8001788 <ros+0x4e4>
    }
  }
  joint_cmd_msg.velocities.size = 0;
 800179c:	4b24      	ldr	r3, [pc, #144]	@ (8001830 <ros+0x58c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	631a      	str	r2, [r3, #48]	@ 0x30
  joint_cmd_msg.velocities.capacity = NUM_JOINTS;
 80017a2:	4b23      	ldr	r3, [pc, #140]	@ (8001830 <ros+0x58c>)
 80017a4:	2203      	movs	r2, #3
 80017a6:	635a      	str	r2, [r3, #52]	@ 0x34
  
  // Initialize trajectory message (basic allocation)
  trajectory_msg.header.frame_id.data = (char*)malloc(10);
 80017a8:	200a      	movs	r0, #10
 80017aa:	f026 f84b 	bl	8027844 <malloc>
 80017ae:	4603      	mov	r3, r0
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b21      	ldr	r3, [pc, #132]	@ (8001838 <ros+0x594>)
 80017b4:	609a      	str	r2, [r3, #8]
  if (trajectory_msg.header.frame_id.data == NULL) {
 80017b6:	4b20      	ldr	r3, [pc, #128]	@ (8001838 <ros+0x594>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d109      	bne.n	80017d2 <ros+0x52e>
    for(;;) {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80017be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017c2:	481c      	ldr	r0, [pc, #112]	@ (8001834 <ros+0x590>)
 80017c4:	f002 fabb 	bl	8003d3e <HAL_GPIO_TogglePin>
      osDelay(100);
 80017c8:	2064      	movs	r0, #100	@ 0x64
 80017ca:	f005 fac2 	bl	8006d52 <osDelay>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80017ce:	bf00      	nop
 80017d0:	e7f5      	b.n	80017be <ros+0x51a>
    }
  }
  trajectory_msg.header.frame_id.size = 0;
 80017d2:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <ros+0x594>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	60da      	str	r2, [r3, #12]
  trajectory_msg.header.frame_id.capacity = 10;
 80017d8:	4b17      	ldr	r3, [pc, #92]	@ (8001838 <ros+0x594>)
 80017da:	220a      	movs	r2, #10
 80017dc:	611a      	str	r2, [r3, #16]
  
  trajectory_msg.joint_names.data = (rosidl_runtime_c__String*)malloc(NUM_JOINTS * sizeof(rosidl_runtime_c__String));
 80017de:	2024      	movs	r0, #36	@ 0x24
 80017e0:	f026 f830 	bl	8027844 <malloc>
 80017e4:	4603      	mov	r3, r0
 80017e6:	461a      	mov	r2, r3
 80017e8:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <ros+0x594>)
 80017ea:	615a      	str	r2, [r3, #20]
  if (trajectory_msg.joint_names.data == NULL) {
 80017ec:	4b12      	ldr	r3, [pc, #72]	@ (8001838 <ros+0x594>)
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d109      	bne.n	8001808 <ros+0x564>
    for(;;) {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80017f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017f8:	480e      	ldr	r0, [pc, #56]	@ (8001834 <ros+0x590>)
 80017fa:	f002 faa0 	bl	8003d3e <HAL_GPIO_TogglePin>
      osDelay(100);
 80017fe:	2064      	movs	r0, #100	@ 0x64
 8001800:	f005 faa7 	bl	8006d52 <osDelay>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001804:	bf00      	nop
 8001806:	e7f5      	b.n	80017f4 <ros+0x550>
    }
  }
  trajectory_msg.joint_names.size = 0;
 8001808:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <ros+0x594>)
 800180a:	2200      	movs	r2, #0
 800180c:	619a      	str	r2, [r3, #24]
  trajectory_msg.joint_names.capacity = NUM_JOINTS;
 800180e:	4b0a      	ldr	r3, [pc, #40]	@ (8001838 <ros+0x594>)
 8001810:	2203      	movs	r2, #3
 8001812:	61da      	str	r2, [r3, #28]
  
  // CRITICAL: Initialize trajectory joint name strings
  for (size_t i = 0; i < NUM_JOINTS; i++) {
 8001814:	2300      	movs	r3, #0
 8001816:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001818:	e049      	b.n	80018ae <ros+0x60a>
 800181a:	bf00      	nop
 800181c:	20000d88 	.word	0x20000d88
 8001820:	20000c58 	.word	0x20000c58
 8001824:	20000c88 	.word	0x20000c88
 8001828:	20000ca0 	.word	0x20000ca0
 800182c:	20000dcc 	.word	0x20000dcc
 8001830:	20000dd8 	.word	0x20000dd8
 8001834:	40020400 	.word	0x40020400
 8001838:	20000e18 	.word	0x20000e18
    trajectory_msg.joint_names.data[i].data = (char*)malloc(20);
 800183c:	4b8b      	ldr	r3, [pc, #556]	@ (8001a6c <ros+0x7c8>)
 800183e:	6959      	ldr	r1, [r3, #20]
 8001840:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001842:	4613      	mov	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	18ce      	adds	r6, r1, r3
 800184c:	2014      	movs	r0, #20
 800184e:	f025 fff9 	bl	8027844 <malloc>
 8001852:	4603      	mov	r3, r0
 8001854:	6033      	str	r3, [r6, #0]
    if (trajectory_msg.joint_names.data[i].data == NULL) {
 8001856:	4b85      	ldr	r3, [pc, #532]	@ (8001a6c <ros+0x7c8>)
 8001858:	6959      	ldr	r1, [r3, #20]
 800185a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800185c:	4613      	mov	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d109      	bne.n	8001880 <ros+0x5dc>
      for(;;) {
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800186c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001870:	487f      	ldr	r0, [pc, #508]	@ (8001a70 <ros+0x7cc>)
 8001872:	f002 fa64 	bl	8003d3e <HAL_GPIO_TogglePin>
        osDelay(100);
 8001876:	2064      	movs	r0, #100	@ 0x64
 8001878:	f005 fa6b 	bl	8006d52 <osDelay>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800187c:	bf00      	nop
 800187e:	e7f5      	b.n	800186c <ros+0x5c8>
      }
    }
    trajectory_msg.joint_names.data[i].capacity = 20;
 8001880:	4b7a      	ldr	r3, [pc, #488]	@ (8001a6c <ros+0x7c8>)
 8001882:	6959      	ldr	r1, [r3, #20]
 8001884:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001886:	4613      	mov	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	4413      	add	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	440b      	add	r3, r1
 8001890:	2214      	movs	r2, #20
 8001892:	609a      	str	r2, [r3, #8]
    trajectory_msg.joint_names.data[i].size = 0;
 8001894:	4b75      	ldr	r3, [pc, #468]	@ (8001a6c <ros+0x7c8>)
 8001896:	6959      	ldr	r1, [r3, #20]
 8001898:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800189a:	4613      	mov	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4413      	add	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	2200      	movs	r2, #0
 80018a6:	605a      	str	r2, [r3, #4]
  for (size_t i = 0; i < NUM_JOINTS; i++) {
 80018a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018aa:	3301      	adds	r3, #1
 80018ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d9c3      	bls.n	800183c <ros+0x598>
  }
  
  trajectory_msg.points.data = (trajectory_msgs__msg__JointTrajectoryPoint*)malloc(sizeof(trajectory_msgs__msg__JointTrajectoryPoint));
 80018b4:	2038      	movs	r0, #56	@ 0x38
 80018b6:	f025 ffc5 	bl	8027844 <malloc>
 80018ba:	4603      	mov	r3, r0
 80018bc:	461a      	mov	r2, r3
 80018be:	4b6b      	ldr	r3, [pc, #428]	@ (8001a6c <ros+0x7c8>)
 80018c0:	621a      	str	r2, [r3, #32]
  if (trajectory_msg.points.data == NULL) {
 80018c2:	4b6a      	ldr	r3, [pc, #424]	@ (8001a6c <ros+0x7c8>)
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d109      	bne.n	80018de <ros+0x63a>
    for(;;) {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80018ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018ce:	4868      	ldr	r0, [pc, #416]	@ (8001a70 <ros+0x7cc>)
 80018d0:	f002 fa35 	bl	8003d3e <HAL_GPIO_TogglePin>
      osDelay(100);
 80018d4:	2064      	movs	r0, #100	@ 0x64
 80018d6:	f005 fa3c 	bl	8006d52 <osDelay>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80018da:	bf00      	nop
 80018dc:	e7f5      	b.n	80018ca <ros+0x626>
    }
  }
  trajectory_msg.points.size = 0;
 80018de:	4b63      	ldr	r3, [pc, #396]	@ (8001a6c <ros+0x7c8>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	625a      	str	r2, [r3, #36]	@ 0x24
  trajectory_msg.points.capacity = 1;
 80018e4:	4b61      	ldr	r3, [pc, #388]	@ (8001a6c <ros+0x7c8>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	629a      	str	r2, [r3, #40]	@ 0x28

  // CRITICAL: Initialize trajectory point arrays - THIS PREVENTS CRASHES!
  trajectory_msg.points.data[0].positions.data = (double*)malloc(NUM_JOINTS * sizeof(double));
 80018ea:	4b60      	ldr	r3, [pc, #384]	@ (8001a6c <ros+0x7c8>)
 80018ec:	6a1e      	ldr	r6, [r3, #32]
 80018ee:	2018      	movs	r0, #24
 80018f0:	f025 ffa8 	bl	8027844 <malloc>
 80018f4:	4603      	mov	r3, r0
 80018f6:	6033      	str	r3, [r6, #0]
  if (trajectory_msg.points.data[0].positions.data == NULL) {
 80018f8:	4b5c      	ldr	r3, [pc, #368]	@ (8001a6c <ros+0x7c8>)
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d109      	bne.n	8001916 <ros+0x672>
    for(;;) {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001902:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001906:	485a      	ldr	r0, [pc, #360]	@ (8001a70 <ros+0x7cc>)
 8001908:	f002 fa19 	bl	8003d3e <HAL_GPIO_TogglePin>
      osDelay(100);
 800190c:	2064      	movs	r0, #100	@ 0x64
 800190e:	f005 fa20 	bl	8006d52 <osDelay>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001912:	bf00      	nop
 8001914:	e7f5      	b.n	8001902 <ros+0x65e>
    }
  }
  trajectory_msg.points.data[0].positions.capacity = NUM_JOINTS;
 8001916:	4b55      	ldr	r3, [pc, #340]	@ (8001a6c <ros+0x7c8>)
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	2203      	movs	r2, #3
 800191c:	609a      	str	r2, [r3, #8]
  trajectory_msg.points.data[0].positions.size = 0;
 800191e:	4b53      	ldr	r3, [pc, #332]	@ (8001a6c <ros+0x7c8>)
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	2200      	movs	r2, #0
 8001924:	605a      	str	r2, [r3, #4]

  trajectory_msg.points.data[0].velocities.data = (double*)malloc(NUM_JOINTS * sizeof(double));
 8001926:	4b51      	ldr	r3, [pc, #324]	@ (8001a6c <ros+0x7c8>)
 8001928:	6a1e      	ldr	r6, [r3, #32]
 800192a:	2018      	movs	r0, #24
 800192c:	f025 ff8a 	bl	8027844 <malloc>
 8001930:	4603      	mov	r3, r0
 8001932:	60f3      	str	r3, [r6, #12]
  if (trajectory_msg.points.data[0].velocities.data == NULL) {
 8001934:	4b4d      	ldr	r3, [pc, #308]	@ (8001a6c <ros+0x7c8>)
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d109      	bne.n	8001952 <ros+0x6ae>
    for(;;) {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800193e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001942:	484b      	ldr	r0, [pc, #300]	@ (8001a70 <ros+0x7cc>)
 8001944:	f002 f9fb 	bl	8003d3e <HAL_GPIO_TogglePin>
      osDelay(100);
 8001948:	2064      	movs	r0, #100	@ 0x64
 800194a:	f005 fa02 	bl	8006d52 <osDelay>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800194e:	bf00      	nop
 8001950:	e7f5      	b.n	800193e <ros+0x69a>
    }
  }
  trajectory_msg.points.data[0].velocities.capacity = NUM_JOINTS;
 8001952:	4b46      	ldr	r3, [pc, #280]	@ (8001a6c <ros+0x7c8>)
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	2203      	movs	r2, #3
 8001958:	615a      	str	r2, [r3, #20]
  trajectory_msg.points.data[0].velocities.size = 0;
 800195a:	4b44      	ldr	r3, [pc, #272]	@ (8001a6c <ros+0x7c8>)
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	2200      	movs	r2, #0
 8001960:	611a      	str	r2, [r3, #16]

  trajectory_msg.points.data[0].effort.data = (double*)malloc(NUM_JOINTS * sizeof(double));
 8001962:	4b42      	ldr	r3, [pc, #264]	@ (8001a6c <ros+0x7c8>)
 8001964:	6a1e      	ldr	r6, [r3, #32]
 8001966:	2018      	movs	r0, #24
 8001968:	f025 ff6c 	bl	8027844 <malloc>
 800196c:	4603      	mov	r3, r0
 800196e:	6273      	str	r3, [r6, #36]	@ 0x24
  if (trajectory_msg.points.data[0].effort.data == NULL) {
 8001970:	4b3e      	ldr	r3, [pc, #248]	@ (8001a6c <ros+0x7c8>)
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <ros+0x6ea>
    for(;;) {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800197a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800197e:	483c      	ldr	r0, [pc, #240]	@ (8001a70 <ros+0x7cc>)
 8001980:	f002 f9dd 	bl	8003d3e <HAL_GPIO_TogglePin>
      osDelay(100);
 8001984:	2064      	movs	r0, #100	@ 0x64
 8001986:	f005 f9e4 	bl	8006d52 <osDelay>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800198a:	bf00      	nop
 800198c:	e7f5      	b.n	800197a <ros+0x6d6>
    }
  }
  trajectory_msg.points.data[0].effort.capacity = NUM_JOINTS;
 800198e:	4b37      	ldr	r3, [pc, #220]	@ (8001a6c <ros+0x7c8>)
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	2203      	movs	r2, #3
 8001994:	62da      	str	r2, [r3, #44]	@ 0x2c
  trajectory_msg.points.data[0].effort.size = 0;
 8001996:	4b35      	ldr	r3, [pc, #212]	@ (8001a6c <ros+0x7c8>)
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	2200      	movs	r2, #0
 800199c:	629a      	str	r2, [r3, #40]	@ 0x28

  // Success - solid green LED
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800199e:	2201      	movs	r2, #1
 80019a0:	2101      	movs	r1, #1
 80019a2:	4833      	ldr	r0, [pc, #204]	@ (8001a70 <ros+0x7cc>)
 80019a4:	f002 f9b2 	bl	8003d0c <HAL_GPIO_WritePin>
  
  /* Infinite loop */
  for(;;)
  {
    // Handle subscriptions
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(1));
 80019a8:	4a32      	ldr	r2, [pc, #200]	@ (8001a74 <ros+0x7d0>)
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	4832      	ldr	r0, [pc, #200]	@ (8001a78 <ros+0x7d4>)
 80019b0:	f019 ffdc 	bl	801b96c <rclc_executor_spin_some>
    
    // Publish joint state every 1 second
    // Update timestamp
    uint64_t time = HAL_GetTick();
 80019b4:	f000 fc6a 	bl	800228c <HAL_GetTick>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2200      	movs	r2, #0
 80019bc:	461c      	mov	r4, r3
 80019be:	4615      	mov	r5, r2
 80019c0:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
    pub_msg.header.stamp.sec = time / 1000;
 80019c4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80019c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	f7fe fcee 	bl	80003b0 <__aeabi_uldivmod>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4b28      	ldr	r3, [pc, #160]	@ (8001a7c <ros+0x7d8>)
 80019da:	601a      	str	r2, [r3, #0]
    pub_msg.header.stamp.nanosec = (time % 1000) * 1000000;
 80019dc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80019e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	f7fe fce2 	bl	80003b0 <__aeabi_uldivmod>
 80019ec:	4b21      	ldr	r3, [pc, #132]	@ (8001a74 <ros+0x7d0>)
 80019ee:	fb02 f303 	mul.w	r3, r2, r3
 80019f2:	4a22      	ldr	r2, [pc, #136]	@ (8001a7c <ros+0x7d8>)
 80019f4:	6053      	str	r3, [r2, #4]

    // Update joint positions with actual hardware state
    for (size_t i = 0; i < pub_msg.position.size; i++) {
 80019f6:	2300      	movs	r3, #0
 80019f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80019fa:	e029      	b.n	8001a50 <ros+0x7ac>
      pub_msg.position.data[i] = current_joint_positions[i];
 80019fc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a7c <ros+0x7d8>)
 80019fe:	6a1a      	ldr	r2, [r3, #32]
 8001a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	18d1      	adds	r1, r2, r3
 8001a06:	4a1e      	ldr	r2, [pc, #120]	@ (8001a80 <ros+0x7dc>)
 8001a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a12:	e9c1 2300 	strd	r2, r3, [r1]
      pub_msg.velocity.data[i] = joint_velocities[i];
 8001a16:	4b19      	ldr	r3, [pc, #100]	@ (8001a7c <ros+0x7d8>)
 8001a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	18d1      	adds	r1, r2, r3
 8001a20:	4a18      	ldr	r2, [pc, #96]	@ (8001a84 <ros+0x7e0>)
 8001a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	4413      	add	r3, r2
 8001a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2c:	e9c1 2300 	strd	r2, r3, [r1]
      pub_msg.effort.data[i] = joint_efforts[i];
 8001a30:	4b12      	ldr	r3, [pc, #72]	@ (8001a7c <ros+0x7d8>)
 8001a32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	18d1      	adds	r1, r2, r3
 8001a3a:	4a13      	ldr	r2, [pc, #76]	@ (8001a88 <ros+0x7e4>)
 8001a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	4413      	add	r3, r2
 8001a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a46:	e9c1 2300 	strd	r2, r3, [r1]
    for (size_t i = 0; i < pub_msg.position.size; i++) {
 8001a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a50:	4b0a      	ldr	r3, [pc, #40]	@ (8001a7c <ros+0x7d8>)
 8001a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d3d0      	bcc.n	80019fc <ros+0x758>
    }

    rcl_publish(&publisher, &pub_msg, NULL);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	4907      	ldr	r1, [pc, #28]	@ (8001a7c <ros+0x7d8>)
 8001a5e:	480b      	ldr	r0, [pc, #44]	@ (8001a8c <ros+0x7e8>)
 8001a60:	f019 f950 	bl	801ad04 <rcl_publish>
    
    osDelay(9);
 8001a64:	2009      	movs	r0, #9
 8001a66:	f005 f974 	bl	8006d52 <osDelay>
  {
 8001a6a:	e79d      	b.n	80019a8 <ros+0x704>
 8001a6c:	20000e18 	.word	0x20000e18
 8001a70:	40020400 	.word	0x40020400
 8001a74:	000f4240 	.word	0x000f4240
 8001a78:	20000d00 	.word	0x20000d00
 8001a7c:	20000d88 	.word	0x20000d88
 8001a80:	20000c58 	.word	0x20000c58
 8001a84:	20000c88 	.word	0x20000c88
 8001a88:	20000ca0 	.word	0x20000ca0
 8001a8c:	20000cc0 	.word	0x20000cc0

08001a90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a04      	ldr	r2, [pc, #16]	@ (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d101      	bne.n	8001aa6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001aa2:	f000 fbdf 	bl	8002264 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40014000 	.word	0x40014000

08001ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab8:	b672      	cpsid	i
}
 8001aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <Error_Handler+0x8>

08001ac0 <pca9685_write>:
#include "cmsis_os.h"
#include <math.h>

extern I2C_HandleTypeDef hi2c1;

static void pca9685_write(uint8_t reg, uint8_t *data, uint8_t len) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af04      	add	r7, sp, #16
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	6039      	str	r1, [r7, #0]
 8001aca:	71fb      	strb	r3, [r7, #7]
 8001acc:	4613      	mov	r3, r2
 8001ace:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDR, reg, 1, data, len, HAL_MAX_DELAY);
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	79bb      	ldrb	r3, [r7, #6]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8001adc:	9102      	str	r1, [sp, #8]
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	2180      	movs	r1, #128	@ 0x80
 8001ae8:	4803      	ldr	r0, [pc, #12]	@ (8001af8 <pca9685_write+0x38>)
 8001aea:	f002 f9df 	bl	8003eac <HAL_I2C_Mem_Write>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000bf4 	.word	0x20000bf4

08001afc <pca9685_init>:

void pca9685_init() {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
    uint8_t mode1 = 0x10; // sleep
 8001b02:	2310      	movs	r3, #16
 8001b04:	71fb      	strb	r3, [r7, #7]
    pca9685_write(0x00, &mode1, 1);
 8001b06:	1dfb      	adds	r3, r7, #7
 8001b08:	2201      	movs	r2, #1
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f7ff ffd7 	bl	8001ac0 <pca9685_write>

    uint8_t prescale = 121; // ~50Hz
 8001b12:	2379      	movs	r3, #121	@ 0x79
 8001b14:	71bb      	strb	r3, [r7, #6]
    pca9685_write(0xFE, &prescale, 1);
 8001b16:	1dbb      	adds	r3, r7, #6
 8001b18:	2201      	movs	r2, #1
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	20fe      	movs	r0, #254	@ 0xfe
 8001b1e:	f7ff ffcf 	bl	8001ac0 <pca9685_write>

    mode1 = 0xA1; // auto-increment + restart
 8001b22:	23a1      	movs	r3, #161	@ 0xa1
 8001b24:	71fb      	strb	r3, [r7, #7]
    pca9685_write(0x00, &mode1, 1);
 8001b26:	1dfb      	adds	r3, r7, #7
 8001b28:	2201      	movs	r2, #1
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f7ff ffc7 	bl	8001ac0 <pca9685_write>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <angle_to_pwm>:

static uint16_t angle_to_pwm(uint8_t angle) {
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
    // Wider range: ~0.5ms to 2.5ms (102 to 512 PWM values)
    // This matches the 500-2500µs range commonly used
    return (uint16_t)(102 + ((float)angle / 180.0f) * (512 - 102));
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	ee07 3a90 	vmov	s15, r3
 8001b4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b50:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001b80 <angle_to_pwm+0x44>
 8001b54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b58:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001b84 <angle_to_pwm+0x48>
 8001b5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b60:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001b88 <angle_to_pwm+0x4c>
 8001b64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b6c:	ee17 3a90 	vmov	r3, s15
 8001b70:	b29b      	uxth	r3, r3
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	43340000 	.word	0x43340000
 8001b84:	43cd0000 	.word	0x43cd0000
 8001b88:	42cc0000 	.word	0x42cc0000

08001b8c <set_servo>:

void set_servo(uint8_t channel, uint8_t angle) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	460a      	mov	r2, r1
 8001b96:	71fb      	strb	r3, [r7, #7]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	71bb      	strb	r3, [r7, #6]
    uint16_t pwm = angle_to_pwm(angle);
 8001b9c:	79bb      	ldrb	r3, [r7, #6]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff ffcc 	bl	8001b3c <angle_to_pwm>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	81fb      	strh	r3, [r7, #14]
    uint8_t reg = 0x06 + 4 * channel;
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	3306      	adds	r3, #6
 8001bb0:	737b      	strb	r3, [r7, #13]
    uint8_t data[4] = {0x00, 0x00, pwm & 0xFF, pwm >> 8};
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	723b      	strb	r3, [r7, #8]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	727b      	strb	r3, [r7, #9]
 8001bba:	89fb      	ldrh	r3, [r7, #14]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	72bb      	strb	r3, [r7, #10]
 8001bc0:	89fb      	ldrh	r3, [r7, #14]
 8001bc2:	0a1b      	lsrs	r3, r3, #8
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	72fb      	strb	r3, [r7, #11]

    pca9685_write(reg, data, 4);
 8001bca:	f107 0108 	add.w	r1, r7, #8
 8001bce:	7b7b      	ldrb	r3, [r7, #13]
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff ff74 	bl	8001ac0 <pca9685_write>
}
 8001bd8:	bf00      	nop
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001be6:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <HAL_MspInit+0x4c>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bea:	4a10      	ldr	r2, [pc, #64]	@ (8001c2c <HAL_MspInit+0x4c>)
 8001bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c2c <HAL_MspInit+0x4c>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001c2c <HAL_MspInit+0x4c>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c02:	4a0a      	ldr	r2, [pc, #40]	@ (8001c2c <HAL_MspInit+0x4c>)
 8001c04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c0a:	4b08      	ldr	r3, [pc, #32]	@ (8001c2c <HAL_MspInit+0x4c>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	210f      	movs	r1, #15
 8001c1a:	f06f 0001 	mvn.w	r0, #1
 8001c1e:	f000 fc29 	bl	8002474 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800

08001c30 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b0ae      	sub	sp, #184	@ 0xb8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	2290      	movs	r2, #144	@ 0x90
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f026 faf5 	bl	8028240 <memset>
  if(hi2c->Instance==I2C1)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a22      	ldr	r2, [pc, #136]	@ (8001ce4 <HAL_I2C_MspInit+0xb4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d13c      	bne.n	8001cda <HAL_I2C_MspInit+0xaa>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c60:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c64:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c66:	2300      	movs	r3, #0
 8001c68:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f003 fa38 	bl	80050e4 <HAL_RCCEx_PeriphCLKConfig>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001c7a:	f7ff ff1b 	bl	8001ab4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce8 <HAL_I2C_MspInit+0xb8>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	4a19      	ldr	r2, [pc, #100]	@ (8001ce8 <HAL_I2C_MspInit+0xb8>)
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8a:	4b17      	ldr	r3, [pc, #92]	@ (8001ce8 <HAL_I2C_MspInit+0xb8>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c9e:	2312      	movs	r3, #18
 8001ca0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001caa:	2303      	movs	r3, #3
 8001cac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cb0:	2304      	movs	r3, #4
 8001cb2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001cba:	4619      	mov	r1, r3
 8001cbc:	480b      	ldr	r0, [pc, #44]	@ (8001cec <HAL_I2C_MspInit+0xbc>)
 8001cbe:	f001 fe79 	bl	80039b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cc2:	4b09      	ldr	r3, [pc, #36]	@ (8001ce8 <HAL_I2C_MspInit+0xb8>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	4a08      	ldr	r2, [pc, #32]	@ (8001ce8 <HAL_I2C_MspInit+0xb8>)
 8001cc8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cce:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <HAL_I2C_MspInit+0xb8>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001cda:	bf00      	nop
 8001cdc:	37b8      	adds	r7, #184	@ 0xb8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40005400 	.word	0x40005400
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40020400 	.word	0x40020400

08001cf0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08c      	sub	sp, #48	@ 0x30
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8001d00:	4b2f      	ldr	r3, [pc, #188]	@ (8001dc0 <HAL_InitTick+0xd0>)
 8001d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d04:	4a2e      	ldr	r2, [pc, #184]	@ (8001dc0 <HAL_InitTick+0xd0>)
 8001d06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d0a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001dc0 <HAL_InitTick+0xd0>)
 8001d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d18:	f107 020c 	add.w	r2, r7, #12
 8001d1c:	f107 0310 	add.w	r3, r7, #16
 8001d20:	4611      	mov	r1, r2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f003 f9ac 	bl	8005080 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001d28:	f003 f996 	bl	8005058 <HAL_RCC_GetPCLK2Freq>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d34:	4a23      	ldr	r2, [pc, #140]	@ (8001dc4 <HAL_InitTick+0xd4>)
 8001d36:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3a:	0c9b      	lsrs	r3, r3, #18
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001d40:	4b21      	ldr	r3, [pc, #132]	@ (8001dc8 <HAL_InitTick+0xd8>)
 8001d42:	4a22      	ldr	r2, [pc, #136]	@ (8001dcc <HAL_InitTick+0xdc>)
 8001d44:	601a      	str	r2, [r3, #0]
   * Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8001d46:	4b20      	ldr	r3, [pc, #128]	@ (8001dc8 <HAL_InitTick+0xd8>)
 8001d48:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d4c:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8001d4e:	4a1e      	ldr	r2, [pc, #120]	@ (8001dc8 <HAL_InitTick+0xd8>)
 8001d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d52:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001d54:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc8 <HAL_InitTick+0xd8>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc8 <HAL_InitTick+0xd8>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d60:	4b19      	ldr	r3, [pc, #100]	@ (8001dc8 <HAL_InitTick+0xd8>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8001d66:	4818      	ldr	r0, [pc, #96]	@ (8001dc8 <HAL_InitTick+0xd8>)
 8001d68:	f003 fde4 	bl	8005934 <HAL_TIM_Base_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001d72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d11b      	bne.n	8001db2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8001d7a:	4813      	ldr	r0, [pc, #76]	@ (8001dc8 <HAL_InitTick+0xd8>)
 8001d7c:	f003 fe3c 	bl	80059f8 <HAL_TIM_Base_Start_IT>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001d86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d111      	bne.n	8001db2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001d8e:	2018      	movs	r0, #24
 8001d90:	f000 fb8c 	bl	80024ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b0f      	cmp	r3, #15
 8001d98:	d808      	bhi.n	8001dac <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	2018      	movs	r0, #24
 8001da0:	f000 fb68 	bl	8002474 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001da4:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd0 <HAL_InitTick+0xe0>)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	e002      	b.n	8001db2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001db2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3730      	adds	r7, #48	@ 0x30
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	431bde83 	.word	0x431bde83
 8001dc8:	20000e44 	.word	0x20000e44
 8001dcc:	40014000 	.word	0x40014000
 8001dd0:	2000000c 	.word	0x2000000c

08001dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <NMI_Handler+0x4>

08001ddc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de0:	bf00      	nop
 8001de2:	e7fd      	b.n	8001de0 <HardFault_Handler+0x4>

08001de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <MemManage_Handler+0x4>

08001dec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <BusFault_Handler+0x4>

08001df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <UsageFault_Handler+0x4>

08001dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001e10:	4802      	ldr	r0, [pc, #8]	@ (8001e1c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001e12:	f003 fe69 	bl	8005ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000e44 	.word	0x20000e44

08001e20 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001e24:	4802      	ldr	r0, [pc, #8]	@ (8001e30 <ETH_IRQHandler+0x10>)
 8001e26:	f000 fedd 	bl	8002be4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	2000587c 	.word	0x2000587c

08001e34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return 1;
 8001e38:	2301      	movs	r3, #1
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <_kill>:

int _kill(int pid, int sig)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e4e:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <_kill+0x20>)
 8001e50:	2216      	movs	r2, #22
 8001e52:	601a      	str	r2, [r3, #0]
  return -1;
 8001e54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	20015124 	.word	0x20015124

08001e68 <_exit>:

void _exit (int status)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e70:	f04f 31ff 	mov.w	r1, #4294967295
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ffe5 	bl	8001e44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e7a:	bf00      	nop
 8001e7c:	e7fd      	b.n	8001e7a <_exit+0x12>

08001e7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b086      	sub	sp, #24
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	60f8      	str	r0, [r7, #12]
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	e00a      	b.n	8001ea6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e90:	f3af 8000 	nop.w
 8001e94:	4601      	mov	r1, r0
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	60ba      	str	r2, [r7, #8]
 8001e9c:	b2ca      	uxtb	r2, r1
 8001e9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	dbf0      	blt.n	8001e90 <_read+0x12>
  }

  return len;
 8001eae:	687b      	ldr	r3, [r7, #4]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	e009      	b.n	8001ede <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	1c5a      	adds	r2, r3, #1
 8001ece:	60ba      	str	r2, [r7, #8]
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	3301      	adds	r3, #1
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	dbf1      	blt.n	8001eca <_write+0x12>
  }
  return len;
 8001ee6:	687b      	ldr	r3, [r7, #4]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <_close>:

int _close(int file)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ef8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f18:	605a      	str	r2, [r3, #4]
  return 0;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <_isatty>:

int _isatty(int file)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f30:	2301      	movs	r3, #1
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b085      	sub	sp, #20
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f60:	4a14      	ldr	r2, [pc, #80]	@ (8001fb4 <_sbrk+0x5c>)
 8001f62:	4b15      	ldr	r3, [pc, #84]	@ (8001fb8 <_sbrk+0x60>)
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f6c:	4b13      	ldr	r3, [pc, #76]	@ (8001fbc <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f74:	4b11      	ldr	r3, [pc, #68]	@ (8001fbc <_sbrk+0x64>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	@ (8001fc0 <_sbrk+0x68>)
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d205      	bcs.n	8001f94 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001f88:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc4 <_sbrk+0x6c>)
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f92:	e009      	b.n	8001fa8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f94:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <_sbrk+0x64>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9a:	4b08      	ldr	r3, [pc, #32]	@ (8001fbc <_sbrk+0x64>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	4a06      	ldr	r2, [pc, #24]	@ (8001fbc <_sbrk+0x64>)
 8001fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	371c      	adds	r7, #28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	20080000 	.word	0x20080000
 8001fb8:	00000400 	.word	0x00000400
 8001fbc:	20000e94 	.word	0x20000e94
 8001fc0:	20015130 	.word	0x20015130
 8001fc4:	20015124 	.word	0x20015124

08001fc8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fcc:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <SystemInit+0x20>)
 8001fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fd2:	4a05      	ldr	r2, [pc, #20]	@ (8001fe8 <SystemInit+0x20>)
 8001fd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002024 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ff0:	f7ff ffea 	bl	8001fc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ff4:	480c      	ldr	r0, [pc, #48]	@ (8002028 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ff6:	490d      	ldr	r1, [pc, #52]	@ (800202c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8002030 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ffc:	e002      	b.n	8002004 <LoopCopyDataInit>

08001ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002002:	3304      	adds	r3, #4

08002004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002008:	d3f9      	bcc.n	8001ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800200a:	4a0a      	ldr	r2, [pc, #40]	@ (8002034 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800200c:	4c0a      	ldr	r4, [pc, #40]	@ (8002038 <LoopFillZerobss+0x22>)
  movs r3, #0
 800200e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002010:	e001      	b.n	8002016 <LoopFillZerobss>

08002012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002014:	3204      	adds	r2, #4

08002016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002018:	d3fb      	bcc.n	8002012 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800201a:	f026 fa09 	bl	8028430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800201e:	f7fe ffa9 	bl	8000f74 <main>
  bx  lr    
 8002022:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002024:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800202c:	200007f8 	.word	0x200007f8
  ldr r2, =_sidata
 8002030:	0802e010 	.word	0x0802e010
  ldr r2, =_sbss
 8002034:	20000938 	.word	0x20000938
  ldr r4, =_ebss
 8002038:	2001512c 	.word	0x2001512c

0800203c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800203c:	e7fe      	b.n	800203c <ADC_IRQHandler>

0800203e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00b      	beq.n	8002066 <LAN8742_RegisterBusIO+0x28>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d007      	beq.n	8002066 <LAN8742_RegisterBusIO+0x28>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <LAN8742_RegisterBusIO+0x28>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d102      	bne.n	800206c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002066:	f04f 33ff 	mov.w	r3, #4294967295
 800206a:	e014      	b.n	8002096 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b086      	sub	sp, #24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d139      	bne.n	8002132 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2220      	movs	r2, #32
 80020d0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	e01c      	b.n	8002112 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	f107 020c 	add.w	r2, r7, #12
 80020e0:	2112      	movs	r1, #18
 80020e2:	6978      	ldr	r0, [r7, #20]
 80020e4:	4798      	blx	r3
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	da03      	bge.n	80020f4 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80020ec:	f06f 0304 	mvn.w	r3, #4
 80020f0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80020f2:	e00b      	b.n	800210c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f003 031f 	and.w	r3, r3, #31
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d105      	bne.n	800210c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
         break;
 800210a:	e005      	b.n	8002118 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	3301      	adds	r3, #1
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2b1f      	cmp	r3, #31
 8002116:	d9df      	bls.n	80020d8 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b1f      	cmp	r3, #31
 800211e:	d902      	bls.n	8002126 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002120:	f06f 0302 	mvn.w	r3, #2
 8002124:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d102      	bne.n	8002132 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8002132:	693b      	ldr	r3, [r7, #16]
 }
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6810      	ldr	r0, [r2, #0]
 8002150:	f107 020c 	add.w	r2, r7, #12
 8002154:	2101      	movs	r1, #1
 8002156:	4798      	blx	r3
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	da02      	bge.n	8002164 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800215e:	f06f 0304 	mvn.w	r3, #4
 8002162:	e06e      	b.n	8002242 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6810      	ldr	r0, [r2, #0]
 800216c:	f107 020c 	add.w	r2, r7, #12
 8002170:	2101      	movs	r1, #1
 8002172:	4798      	blx	r3
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	da02      	bge.n	8002180 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800217a:	f06f 0304 	mvn.w	r3, #4
 800217e:	e060      	b.n	8002242 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800218a:	2301      	movs	r3, #1
 800218c:	e059      	b.n	8002242 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6810      	ldr	r0, [r2, #0]
 8002196:	f107 020c 	add.w	r2, r7, #12
 800219a:	2100      	movs	r1, #0
 800219c:	4798      	blx	r3
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	da02      	bge.n	80021aa <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80021a4:	f06f 0304 	mvn.w	r3, #4
 80021a8:	e04b      	b.n	8002242 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d11b      	bne.n	80021ec <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d006      	beq.n	80021cc <LAN8742_GetLinkState+0x90>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80021c8:	2302      	movs	r3, #2
 80021ca:	e03a      	b.n	8002242 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e033      	b.n	8002242 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80021e4:	2304      	movs	r3, #4
 80021e6:	e02c      	b.n	8002242 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80021e8:	2305      	movs	r3, #5
 80021ea:	e02a      	b.n	8002242 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6810      	ldr	r0, [r2, #0]
 80021f4:	f107 020c 	add.w	r2, r7, #12
 80021f8:	211f      	movs	r1, #31
 80021fa:	4798      	blx	r3
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	da02      	bge.n	8002208 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002202:	f06f 0304 	mvn.w	r3, #4
 8002206:	e01c      	b.n	8002242 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002212:	2306      	movs	r3, #6
 8002214:	e015      	b.n	8002242 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f003 031c 	and.w	r3, r3, #28
 800221c:	2b18      	cmp	r3, #24
 800221e:	d101      	bne.n	8002224 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002220:	2302      	movs	r3, #2
 8002222:	e00e      	b.n	8002242 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 031c 	and.w	r3, r3, #28
 800222a:	2b08      	cmp	r3, #8
 800222c:	d101      	bne.n	8002232 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800222e:	2303      	movs	r3, #3
 8002230:	e007      	b.n	8002242 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f003 031c 	and.w	r3, r3, #28
 8002238:	2b14      	cmp	r3, #20
 800223a:	d101      	bne.n	8002240 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800223c:	2304      	movs	r3, #4
 800223e:	e000      	b.n	8002242 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002240:	2305      	movs	r3, #5
    }
  }
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800224e:	2003      	movs	r0, #3
 8002250:	f000 f905 	bl	800245e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002254:	200f      	movs	r0, #15
 8002256:	f7ff fd4b 	bl	8001cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800225a:	f7ff fcc1 	bl	8001be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002268:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <HAL_IncTick+0x20>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <HAL_IncTick+0x24>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4413      	add	r3, r2
 8002274:	4a04      	ldr	r2, [pc, #16]	@ (8002288 <HAL_IncTick+0x24>)
 8002276:	6013      	str	r3, [r2, #0]
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000010 	.word	0x20000010
 8002288:	20000e98 	.word	0x20000e98

0800228c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return uwTick;
 8002290:	4b03      	ldr	r3, [pc, #12]	@ (80022a0 <HAL_GetTick+0x14>)
 8002292:	681b      	ldr	r3, [r3, #0]
}
 8002294:	4618      	mov	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	20000e98 	.word	0x20000e98

080022a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022ac:	f7ff ffee 	bl	800228c <HAL_GetTick>
 80022b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022bc:	d005      	beq.n	80022ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022be:	4b0a      	ldr	r3, [pc, #40]	@ (80022e8 <HAL_Delay+0x44>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4413      	add	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ca:	bf00      	nop
 80022cc:	f7ff ffde 	bl	800228c <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d8f7      	bhi.n	80022cc <HAL_Delay+0x28>
  {
  }
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000010 	.word	0x20000010

080022ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 80022f0:	4b03      	ldr	r3, [pc, #12]	@ (8002300 <HAL_GetREVID+0x14>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	0c1b      	lsrs	r3, r3, #16
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	e0042000 	.word	0xe0042000

08002304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002314:	4b0b      	ldr	r3, [pc, #44]	@ (8002344 <__NVIC_SetPriorityGrouping+0x40>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002320:	4013      	ands	r3, r2
 8002322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800232c:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <__NVIC_SetPriorityGrouping+0x44>)
 800232e:	4313      	orrs	r3, r2
 8002330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002332:	4a04      	ldr	r2, [pc, #16]	@ (8002344 <__NVIC_SetPriorityGrouping+0x40>)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	60d3      	str	r3, [r2, #12]
}
 8002338:	bf00      	nop
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	e000ed00 	.word	0xe000ed00
 8002348:	05fa0000 	.word	0x05fa0000

0800234c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002350:	4b04      	ldr	r3, [pc, #16]	@ (8002364 <__NVIC_GetPriorityGrouping+0x18>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	0a1b      	lsrs	r3, r3, #8
 8002356:	f003 0307 	and.w	r3, r3, #7
}
 800235a:	4618      	mov	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	2b00      	cmp	r3, #0
 8002378:	db0b      	blt.n	8002392 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	f003 021f 	and.w	r2, r3, #31
 8002380:	4907      	ldr	r1, [pc, #28]	@ (80023a0 <__NVIC_EnableIRQ+0x38>)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	095b      	lsrs	r3, r3, #5
 8002388:	2001      	movs	r0, #1
 800238a:	fa00 f202 	lsl.w	r2, r0, r2
 800238e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	e000e100 	.word	0xe000e100

080023a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	6039      	str	r1, [r7, #0]
 80023ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	db0a      	blt.n	80023ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	490c      	ldr	r1, [pc, #48]	@ (80023f0 <__NVIC_SetPriority+0x4c>)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	0112      	lsls	r2, r2, #4
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	440b      	add	r3, r1
 80023c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023cc:	e00a      	b.n	80023e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	4908      	ldr	r1, [pc, #32]	@ (80023f4 <__NVIC_SetPriority+0x50>)
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	3b04      	subs	r3, #4
 80023dc:	0112      	lsls	r2, r2, #4
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	440b      	add	r3, r1
 80023e2:	761a      	strb	r2, [r3, #24]
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000e100 	.word	0xe000e100
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b089      	sub	sp, #36	@ 0x24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f1c3 0307 	rsb	r3, r3, #7
 8002412:	2b04      	cmp	r3, #4
 8002414:	bf28      	it	cs
 8002416:	2304      	movcs	r3, #4
 8002418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3304      	adds	r3, #4
 800241e:	2b06      	cmp	r3, #6
 8002420:	d902      	bls.n	8002428 <NVIC_EncodePriority+0x30>
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3b03      	subs	r3, #3
 8002426:	e000      	b.n	800242a <NVIC_EncodePriority+0x32>
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800242c:	f04f 32ff 	mov.w	r2, #4294967295
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43da      	mvns	r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	401a      	ands	r2, r3
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002440:	f04f 31ff 	mov.w	r1, #4294967295
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	fa01 f303 	lsl.w	r3, r1, r3
 800244a:	43d9      	mvns	r1, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002450:	4313      	orrs	r3, r2
         );
}
 8002452:	4618      	mov	r0, r3
 8002454:	3724      	adds	r7, #36	@ 0x24
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff ff4c 	bl	8002304 <__NVIC_SetPriorityGrouping>
}
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002486:	f7ff ff61 	bl	800234c <__NVIC_GetPriorityGrouping>
 800248a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	68b9      	ldr	r1, [r7, #8]
 8002490:	6978      	ldr	r0, [r7, #20]
 8002492:	f7ff ffb1 	bl	80023f8 <NVIC_EncodePriority>
 8002496:	4602      	mov	r2, r0
 8002498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249c:	4611      	mov	r1, r2
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ff80 	bl	80023a4 <__NVIC_SetPriority>
}
 80024a4:	bf00      	nop
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff ff54 	bl	8002368 <__NVIC_EnableIRQ>
}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e086      	b.n	80025e8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d106      	bne.n	80024f2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f004 f949 	bl	8006784 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f2:	4b3f      	ldr	r3, [pc, #252]	@ (80025f0 <HAL_ETH_Init+0x128>)
 80024f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f6:	4a3e      	ldr	r2, [pc, #248]	@ (80025f0 <HAL_ETH_Init+0x128>)
 80024f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80024fe:	4b3c      	ldr	r3, [pc, #240]	@ (80025f0 <HAL_ETH_Init+0x128>)
 8002500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002502:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800250a:	4b3a      	ldr	r3, [pc, #232]	@ (80025f4 <HAL_ETH_Init+0x12c>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4a39      	ldr	r2, [pc, #228]	@ (80025f4 <HAL_ETH_Init+0x12c>)
 8002510:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002514:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002516:	4b37      	ldr	r3, [pc, #220]	@ (80025f4 <HAL_ETH_Init+0x12c>)
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	4935      	ldr	r1, [pc, #212]	@ (80025f4 <HAL_ETH_Init+0x12c>)
 8002520:	4313      	orrs	r3, r2
 8002522:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002524:	4b33      	ldr	r3, [pc, #204]	@ (80025f4 <HAL_ETH_Init+0x12c>)
 8002526:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800253e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002540:	f7ff fea4 	bl	800228c <HAL_GetTick>
 8002544:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002546:	e011      	b.n	800256c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002548:	f7ff fea0 	bl	800228c <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002556:	d909      	bls.n	800256c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2204      	movs	r2, #4
 800255c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	22e0      	movs	r2, #224	@ 0xe0
 8002564:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e03d      	b.n	80025e8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1e4      	bne.n	8002548 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 ff5c 	bl	800343c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f001 f807 	bl	8003598 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f001 f85d 	bl	800364a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	461a      	mov	r2, r3
 8002596:	2100      	movs	r1, #0
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 ffc5 	bl	8003528 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80025ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	4b0f      	ldr	r3, [pc, #60]	@ (80025f8 <HAL_ETH_Init+0x130>)
 80025bc:	430b      	orrs	r3, r1
 80025be:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80025d2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2210      	movs	r2, #16
 80025e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40013800 	.word	0x40013800
 80025f8:	00020060 	.word	0x00020060

080025fc <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800260a:	2b10      	cmp	r3, #16
 800260c:	d15f      	bne.n	80026ce <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2220      	movs	r2, #32
 8002612:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2204      	movs	r2, #4
 8002620:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f9f6 	bl	8002a14 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002630:	2001      	movs	r0, #1
 8002632:	f7ff fe37 	bl	80022a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002650:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002654:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	f043 0302 	orr.w	r3, r3, #2
 8002668:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800266c:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 fd80 	bl	8003174 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0208 	orr.w	r2, r2, #8
 8002682:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800268c:	2001      	movs	r0, #1
 800268e:	f7ff fe09 	bl	80022a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 0204 	orr.w	r2, r2, #4
 80026a8:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026b2:	69d9      	ldr	r1, [r3, #28]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4b07      	ldr	r3, [pc, #28]	@ (80026d8 <HAL_ETH_Start_IT+0xdc>)
 80026ba:	430b      	orrs	r3, r1
 80026bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026c0:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2240      	movs	r2, #64	@ 0x40
 80026c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	e000      	b.n	80026d0 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
  }
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	0001a0c1 	.word	0x0001a0c1

080026dc <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026ea:	2b40      	cmp	r3, #64	@ 0x40
 80026ec:	d16e      	bne.n	80027cc <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2220      	movs	r2, #32
 80026f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026fe:	69d9      	ldr	r1, [r3, #28]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4b34      	ldr	r3, [pc, #208]	@ (80027d8 <HAL_ETH_Stop_IT+0xfc>)
 8002706:	400b      	ands	r3, r1
 8002708:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800270c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6812      	ldr	r2, [r2, #0]
 800271c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002720:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002724:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6812      	ldr	r2, [r2, #0]
 8002734:	f023 0302 	bic.w	r3, r3, #2
 8002738:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800273c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0204 	bic.w	r2, r2, #4
 800274c:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002756:	2001      	movs	r0, #1
 8002758:	f7ff fda4 	bl	80022a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 fd05 	bl	8003174 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0208 	bic.w	r2, r2, #8
 8002778:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002782:	2001      	movs	r0, #1
 8002784:	f7ff fd8e 	bl	80022a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	e00e      	b.n	80027b4 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	3212      	adds	r2, #18
 800279c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a0:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	3301      	adds	r3, #1
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d9ed      	bls.n	8002796 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2210      	movs	r2, #16
 80027c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80027c8:	2300      	movs	r3, #0
 80027ca:	e000      	b.n	80027ce <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
  }
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	fffe5f3e 	.word	0xfffe5f3e

080027dc <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d109      	bne.n	8002800 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f2:	f043 0201 	orr.w	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e045      	b.n	800288c <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002806:	2b40      	cmp	r3, #64	@ 0x40
 8002808:	d13f      	bne.n	800288a <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002812:	2201      	movs	r2, #1
 8002814:	6839      	ldr	r1, [r7, #0]
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 ff86 	bl	8003728 <ETH_Prepare_Tx_Descriptors>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d009      	beq.n	8002836 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002828:	f043 0202 	orr.w	r2, r3, #2
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e02a      	b.n	800288c <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002836:	f3bf 8f4f 	dsb	sy
}
 800283a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	629a      	str	r2, [r3, #40]	@ 0x28
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284a:	2b03      	cmp	r3, #3
 800284c:	d904      	bls.n	8002858 <HAL_ETH_Transmit_IT+0x7c>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002852:	1f1a      	subs	r2, r3, #4
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	f003 0304 	and.w	r3, r3, #4
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00d      	beq.n	8002886 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002872:	461a      	mov	r2, r3
 8002874:	2304      	movs	r3, #4
 8002876:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002880:	461a      	mov	r2, r3
 8002882:	2300      	movs	r3, #0
 8002884:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	e000      	b.n	800288c <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
  }
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d109      	bne.n	80028c0 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b2:	f043 0201 	orr.w	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0a4      	b.n	8002a0a <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028c6:	2b40      	cmp	r3, #64	@ 0x40
 80028c8:	d001      	beq.n	80028ce <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e09d      	b.n	8002a0a <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	3212      	adds	r2, #18
 80028da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028de:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028e4:	f1c3 0304 	rsb	r3, r3, #4
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80028ea:	e066      	b.n	80029ba <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d007      	beq.n	8002908 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	69da      	ldr	r2, [r3, #28]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	699a      	ldr	r2, [r3, #24]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002910:	2b00      	cmp	r3, #0
 8002912:	d103      	bne.n	800291c <HAL_ETH_ReadData+0x88>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002918:	2b00      	cmp	r3, #0
 800291a:	d03c      	beq.n	8002996 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	0c1b      	lsrs	r3, r3, #16
 800293a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800293e:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002954:	2301      	movs	r3, #1
 8002956:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002970:	461a      	mov	r2, r3
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	b29b      	uxth	r3, r3
 8002976:	f004 f8d1 	bl	8006b1c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	441a      	add	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	2200      	movs	r2, #0
 8002994:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3301      	adds	r3, #1
 800299a:	61fb      	str	r3, [r7, #28]
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d902      	bls.n	80029a8 <HAL_ETH_ReadData+0x114>
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	3b04      	subs	r3, #4
 80029a6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69fa      	ldr	r2, [r7, #28]
 80029ac:	3212      	adds	r2, #18
 80029ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	3301      	adds	r3, #1
 80029b8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80029be:	2b00      	cmp	r3, #0
 80029c0:	db06      	blt.n	80029d0 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d202      	bcs.n	80029d0 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80029ca:	7cfb      	ldrb	r3, [r7, #19]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d08d      	beq.n	80028ec <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	441a      	add	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f815 	bl	8002a14 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69fa      	ldr	r2, [r7, #28]
 80029ee:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80029f0:	7cfb      	ldrb	r3, [r7, #19]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d108      	bne.n	8002a08 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	e000      	b.n	8002a0a <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3720      	adds	r7, #32
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002a20:	2301      	movs	r3, #1
 8002a22:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a28:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69fa      	ldr	r2, [r7, #28]
 8002a2e:	3212      	adds	r2, #18
 8002a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a34:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a3a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002a3c:	e042      	b.n	8002ac4 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d112      	bne.n	8002a6c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002a46:	f107 0308 	add.w	r3, r7, #8
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f004 f836 	bl	8006abc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d102      	bne.n	8002a5c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	74fb      	strb	r3, [r7, #19]
 8002a5a:	e007      	b.n	8002a6c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	461a      	mov	r2, r3
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002a6c:	7cfb      	ldrb	r3, [r7, #19]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d028      	beq.n	8002ac4 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695a      	ldr	r2, [r3, #20]
 8002a7e:	4b26      	ldr	r3, [pc, #152]	@ (8002b18 <ETH_UpdateDescriptor+0x104>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	6053      	str	r3, [r2, #4]
 8002a86:	e005      	b.n	8002a94 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	61fb      	str	r3, [r7, #28]
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d902      	bls.n	8002ab2 <ETH_UpdateDescriptor+0x9e>
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	3b04      	subs	r3, #4
 8002ab0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69fa      	ldr	r2, [r7, #28]
 8002ab6:	3212      	adds	r2, #18
 8002ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002abc:	617b      	str	r3, [r7, #20]
      desccount--;
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <ETH_UpdateDescriptor+0xbc>
 8002aca:	7cfb      	ldrb	r3, [r7, #19]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1b6      	bne.n	8002a3e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d01a      	beq.n	8002b10 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	3303      	adds	r3, #3
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002ae4:	f3bf 8f5f 	dmb	sy
}
 8002ae8:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6919      	ldr	r1, [r3, #16]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	18ca      	adds	r2, r1, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b02:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002b10:	bf00      	nop
 8002b12:	3720      	adds	r7, #32
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	80004000 	.word	0x80004000

08002b1c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3318      	adds	r3, #24
 8002b28:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b34:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002b36:	2301      	movs	r3, #1
 8002b38:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002b3a:	e047      	b.n	8002bcc <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10a      	bne.n	8002b6c <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	d902      	bls.n	8002b68 <HAL_ETH_ReleaseTxPacket+0x4c>
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	3b04      	subs	r3, #4
 8002b66:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002b6c:	7bbb      	ldrb	r3, [r7, #14]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d02c      	beq.n	8002bcc <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68d9      	ldr	r1, [r3, #12]
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	440b      	add	r3, r1
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	db1f      	blt.n	8002bc8 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f004 f803 	bl	8006ba0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	3301      	adds	r3, #1
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d902      	bls.n	8002bba <HAL_ETH_ReleaseTxPacket+0x9e>
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	3b04      	subs	r3, #4
 8002bb8:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002bc6:	e001      	b.n	8002bcc <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d002      	beq.n	8002bd8 <HAL_ETH_ReleaseTxPacket+0xbc>
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1b1      	bne.n	8002b3c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
	...

08002be4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf2:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002c0c:	4b4b      	ldr	r3, [pc, #300]	@ (8002d3c <HAL_ETH_IRQHandler+0x158>)
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00e      	beq.n	8002c3a <HAL_ETH_IRQHandler+0x56>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d009      	beq.n	8002c3a <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c2e:	461a      	mov	r2, r3
 8002c30:	4b43      	ldr	r3, [pc, #268]	@ (8002d40 <HAL_ETH_IRQHandler+0x15c>)
 8002c32:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f003 fab9 	bl	80061ac <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00f      	beq.n	8002c64 <HAL_ETH_IRQHandler+0x80>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c56:	461a      	mov	r2, r3
 8002c58:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002c5c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f003 fab4 	bl	80061cc <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d042      	beq.n	8002cf4 <HAL_ETH_IRQHandler+0x110>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d03d      	beq.n	8002cf4 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c7e:	f043 0208 	orr.w	r2, r3, #8
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d01a      	beq.n	8002cc8 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c9a:	695a      	ldr	r2, [r3, #20]
 8002c9c:	4b29      	ldr	r3, [pc, #164]	@ (8002d44 <HAL_ETH_IRQHandler+0x160>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002cb8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002cbc:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	22e0      	movs	r2, #224	@ 0xe0
 8002cc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002cc6:	e012      	b.n	8002cee <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002cec:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f003 fa7c 	bl	80061ec <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f003 0308 	and.w	r3, r3, #8
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00e      	beq.n	8002d1c <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d04:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f81a 	bl	8002d48 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d006      	beq.n	8002d34 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002d26:	4b05      	ldr	r3, [pc, #20]	@ (8002d3c <HAL_ETH_IRQHandler+0x158>)
 8002d28:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002d2c:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f814 	bl	8002d5c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002d34:	bf00      	nop
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40013c00 	.word	0x40013c00
 8002d40:	00010040 	.word	0x00010040
 8002d44:	007e2000 	.word	0x007e2000

08002d48 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f003 031c 	and.w	r3, r3, #28
 8002d8c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	02db      	lsls	r3, r3, #11
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	019b      	lsls	r3, r3, #6
 8002d9e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f023 0302 	bic.w	r3, r3, #2
 8002dae:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f043 0301 	orr.w	r3, r3, #1
 8002db6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002dc0:	f7ff fa64 	bl	800228c <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002dc6:	e00d      	b.n	8002de4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002dc8:	f7ff fa60 	bl	800228c <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dd6:	d301      	bcc.n	8002ddc <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e010      	b.n	8002dfe <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1ec      	bne.n	8002dc8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	461a      	mov	r2, r3
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b086      	sub	sp, #24
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	607a      	str	r2, [r7, #4]
 8002e12:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f003 031c 	and.w	r3, r3, #28
 8002e22:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	02db      	lsls	r3, r3, #11
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	019b      	lsls	r3, r3, #6
 8002e34:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f043 0302 	orr.w	r3, r3, #2
 8002e44:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e60:	f7ff fa14 	bl	800228c <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e66:	e00d      	b.n	8002e84 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002e68:	f7ff fa10 	bl	800228c <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e76:	d301      	bcc.n	8002e7c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e009      	b.n	8002e90 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1ec      	bne.n	8002e68 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0e6      	b.n	800307a <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	bf14      	ite	ne
 8002eba:	2301      	movne	r3, #1
 8002ebc:	2300      	moveq	r3, #0
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	bf0c      	ite	eq
 8002ee4:	2301      	moveq	r3, #1
 8002ee6:	2300      	movne	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	461a      	mov	r2, r3
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	bf14      	ite	ne
 8002f00:	2301      	movne	r3, #1
 8002f02:	2300      	moveq	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	bf0c      	ite	eq
 8002f1a:	2301      	moveq	r3, #1
 8002f1c:	2300      	movne	r3, #0
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	461a      	mov	r2, r3
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bf14      	ite	ne
 8002f34:	2301      	movne	r3, #1
 8002f36:	2300      	moveq	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	bf0c      	ite	eq
 8002f6a:	2301      	moveq	r3, #1
 8002f6c:	2300      	movne	r3, #0
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	461a      	mov	r2, r3
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	bf14      	ite	ne
 8002f9e:	2301      	movne	r3, #1
 8002fa0:	2300      	moveq	r3, #0
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	bf14      	ite	ne
 8002fc6:	2301      	movne	r3, #1
 8002fc8:	2300      	moveq	r3, #0
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	461a      	mov	r2, r3
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf14      	ite	ne
 8002fe0:	2301      	movne	r3, #1
 8002fe2:	2300      	moveq	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bf14      	ite	ne
 8002ffa:	2301      	movne	r3, #1
 8002ffc:	2300      	moveq	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	461a      	mov	r2, r3
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003012:	2b00      	cmp	r3, #0
 8003014:	bf0c      	ite	eq
 8003016:	2301      	moveq	r3, #1
 8003018:	2300      	movne	r3, #0
 800301a:	b2db      	uxtb	r3, r3
 800301c:	461a      	mov	r2, r3
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	0c1b      	lsrs	r3, r3, #16
 800303a:	b29a      	uxth	r2, r3
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b00      	cmp	r3, #0
 800304c:	bf14      	ite	ne
 800304e:	2301      	movne	r3, #1
 8003050:	2300      	moveq	r3, #0
 8003052:	b2db      	uxtb	r3, r3
 8003054:	461a      	mov	r2, r3
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003066:	2b00      	cmp	r3, #0
 8003068:	bf14      	ite	ne
 800306a:	2301      	movne	r3, #1
 800306c:	2300      	moveq	r3, #0
 800306e:	b2db      	uxtb	r3, r3
 8003070:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e00b      	b.n	80030b2 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030a0:	2b10      	cmp	r3, #16
 80030a2:	d105      	bne.n	80030b0 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80030a4:	6839      	ldr	r1, [r7, #0]
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f88a 	bl	80031c0 <ETH_SetMACConfig>

    return HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	e000      	b.n	80030b2 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
  }
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
	...

080030bc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f023 031c 	bic.w	r3, r3, #28
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80030d4:	f001 ffb4 	bl	8005040 <HAL_RCC_GetHCLKFreq>
 80030d8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	4a14      	ldr	r2, [pc, #80]	@ (8003130 <HAL_ETH_SetMDIOClockRange+0x74>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d804      	bhi.n	80030ec <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f043 0308 	orr.w	r3, r3, #8
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	e019      	b.n	8003120 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	4a11      	ldr	r2, [pc, #68]	@ (8003134 <HAL_ETH_SetMDIOClockRange+0x78>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d204      	bcs.n	80030fe <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f043 030c 	orr.w	r3, r3, #12
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	e010      	b.n	8003120 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	4a0d      	ldr	r2, [pc, #52]	@ (8003138 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d90c      	bls.n	8003120 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	4a0c      	ldr	r2, [pc, #48]	@ (800313c <HAL_ETH_SetMDIOClockRange+0x80>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d804      	bhi.n	8003118 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f043 0304 	orr.w	r3, r3, #4
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	e003      	b.n	8003120 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f043 0310 	orr.w	r3, r3, #16
 800311e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	611a      	str	r2, [r3, #16]
}
 8003128:	bf00      	nop
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	02160ebf 	.word	0x02160ebf
 8003134:	03938700 	.word	0x03938700
 8003138:	05f5e0ff 	.word	0x05f5e0ff
 800313c:	08f0d17f 	.word	0x08f0d17f

08003140 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8003168:	4618      	mov	r0, r3
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6812      	ldr	r2, [r2, #0]
 800318e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003192:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003196:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80031a4:	2001      	movs	r0, #1
 80031a6:	f7ff f87d 	bl	80022a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80031b4:	6193      	str	r3, [r2, #24]
}
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4b53      	ldr	r3, [pc, #332]	@ (8003324 <ETH_SetMACConfig+0x164>)
 80031d6:	4013      	ands	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	7b9b      	ldrb	r3, [r3, #14]
 80031de:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	7c12      	ldrb	r2, [r2, #16]
 80031e4:	2a00      	cmp	r2, #0
 80031e6:	d102      	bne.n	80031ee <ETH_SetMACConfig+0x2e>
 80031e8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80031ec:	e000      	b.n	80031f0 <ETH_SetMACConfig+0x30>
 80031ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80031f0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	7c52      	ldrb	r2, [r2, #17]
 80031f6:	2a00      	cmp	r2, #0
 80031f8:	d102      	bne.n	8003200 <ETH_SetMACConfig+0x40>
 80031fa:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80031fe:	e000      	b.n	8003202 <ETH_SetMACConfig+0x42>
 8003200:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003202:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003208:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	7fdb      	ldrb	r3, [r3, #31]
 800320e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003210:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003216:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	7f92      	ldrb	r2, [r2, #30]
 800321c:	2a00      	cmp	r2, #0
 800321e:	d102      	bne.n	8003226 <ETH_SetMACConfig+0x66>
 8003220:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003224:	e000      	b.n	8003228 <ETH_SetMACConfig+0x68>
 8003226:	2200      	movs	r2, #0
                        macconf->Speed |
 8003228:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	7f1b      	ldrb	r3, [r3, #28]
 800322e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003230:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003236:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	791b      	ldrb	r3, [r3, #4]
 800323c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800323e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003246:	2a00      	cmp	r2, #0
 8003248:	d102      	bne.n	8003250 <ETH_SetMACConfig+0x90>
 800324a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800324e:	e000      	b.n	8003252 <ETH_SetMACConfig+0x92>
 8003250:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003252:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	7bdb      	ldrb	r3, [r3, #15]
 8003258:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800325a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003260:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003268:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800326a:	4313      	orrs	r3, r2
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003282:	2001      	movs	r0, #1
 8003284:	f7ff f80e 	bl	80022a4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800329e:	4013      	ands	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032a6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80032ae:	2a00      	cmp	r2, #0
 80032b0:	d101      	bne.n	80032b6 <ETH_SetMACConfig+0xf6>
 80032b2:	2280      	movs	r2, #128	@ 0x80
 80032b4:	e000      	b.n	80032b8 <ETH_SetMACConfig+0xf8>
 80032b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80032b8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80032be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80032c6:	2a01      	cmp	r2, #1
 80032c8:	d101      	bne.n	80032ce <ETH_SetMACConfig+0x10e>
 80032ca:	2208      	movs	r2, #8
 80032cc:	e000      	b.n	80032d0 <ETH_SetMACConfig+0x110>
 80032ce:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80032d0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80032d8:	2a01      	cmp	r2, #1
 80032da:	d101      	bne.n	80032e0 <ETH_SetMACConfig+0x120>
 80032dc:	2204      	movs	r2, #4
 80032de:	e000      	b.n	80032e2 <ETH_SetMACConfig+0x122>
 80032e0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80032e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80032ea:	2a01      	cmp	r2, #1
 80032ec:	d101      	bne.n	80032f2 <ETH_SetMACConfig+0x132>
 80032ee:	2202      	movs	r2, #2
 80032f0:	e000      	b.n	80032f4 <ETH_SetMACConfig+0x134>
 80032f2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80032f4:	4313      	orrs	r3, r2
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800330c:	2001      	movs	r0, #1
 800330e:	f7fe ffc9 	bl	80022a4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	619a      	str	r2, [r3, #24]
}
 800331a:	bf00      	nop
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	fd20810f 	.word	0xfd20810f

08003328 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4b3d      	ldr	r3, [pc, #244]	@ (8003438 <ETH_SetDMAConfig+0x110>)
 8003342:	4013      	ands	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	7b1b      	ldrb	r3, [r3, #12]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d102      	bne.n	8003354 <ETH_SetDMAConfig+0x2c>
 800334e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003352:	e000      	b.n	8003356 <ETH_SetDMAConfig+0x2e>
 8003354:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	7b5b      	ldrb	r3, [r3, #13]
 800335a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800335c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	7f52      	ldrb	r2, [r2, #29]
 8003362:	2a00      	cmp	r2, #0
 8003364:	d102      	bne.n	800336c <ETH_SetDMAConfig+0x44>
 8003366:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800336a:	e000      	b.n	800336e <ETH_SetDMAConfig+0x46>
 800336c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800336e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	7b9b      	ldrb	r3, [r3, #14]
 8003374:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003376:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800337c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	7f1b      	ldrb	r3, [r3, #28]
 8003382:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003384:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	7f9b      	ldrb	r3, [r3, #30]
 800338a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800338c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003392:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800339a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800339c:	4313      	orrs	r3, r2
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033ac:	461a      	mov	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80033be:	2001      	movs	r0, #1
 80033c0:	f7fe ff70 	bl	80022a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033cc:	461a      	mov	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	791b      	ldrb	r3, [r3, #4]
 80033d6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80033dc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80033e2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80033e8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80033f0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80033f2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80033fa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003400:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6812      	ldr	r2, [r2, #0]
 8003406:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800340a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800340e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800341c:	2001      	movs	r0, #1
 800341e:	f7fe ff41 	bl	80022a4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800342a:	461a      	mov	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6013      	str	r3, [r2, #0]
}
 8003430:	bf00      	nop
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	f8de3f23 	.word	0xf8de3f23

0800343c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b0a6      	sub	sp, #152	@ 0x98
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003444:	2301      	movs	r3, #1
 8003446:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800344a:	2301      	movs	r3, #1
 800344c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003450:	2300      	movs	r3, #0
 8003452:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003454:	2300      	movs	r3, #0
 8003456:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800345a:	2301      	movs	r3, #1
 800345c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003460:	2300      	movs	r3, #0
 8003462:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003466:	2301      	movs	r3, #1
 8003468:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800346c:	2301      	movs	r3, #1
 800346e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003472:	2300      	movs	r3, #0
 8003474:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003478:	2300      	movs	r3, #0
 800347a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800347e:	2300      	movs	r3, #0
 8003480:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003482:	2300      	movs	r3, #0
 8003484:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003488:	2300      	movs	r3, #0
 800348a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800348c:	2300      	movs	r3, #0
 800348e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003492:	2300      	movs	r3, #0
 8003494:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003498:	2300      	movs	r3, #0
 800349a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800349e:	2300      	movs	r3, #0
 80034a0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80034a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80034a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80034aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80034ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80034b0:	2300      	movs	r3, #0
 80034b2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80034b6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80034ba:	4619      	mov	r1, r3
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff fe7f 	bl	80031c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80034c2:	2301      	movs	r3, #1
 80034c4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80034c6:	2301      	movs	r3, #1
 80034c8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80034ca:	2301      	movs	r3, #1
 80034cc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80034d0:	2301      	movs	r3, #1
 80034d2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80034d4:	2300      	movs	r3, #0
 80034d6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80034d8:	2300      	movs	r3, #0
 80034da:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80034de:	2300      	movs	r3, #0
 80034e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80034e4:	2300      	movs	r3, #0
 80034e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80034e8:	2301      	movs	r3, #1
 80034ea:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80034ee:	2301      	movs	r3, #1
 80034f0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80034f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80034f6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80034f8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80034fc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80034fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003502:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003504:	2301      	movs	r3, #1
 8003506:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800350a:	2300      	movs	r3, #0
 800350c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800350e:	2300      	movs	r3, #0
 8003510:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003512:	f107 0308 	add.w	r3, r7, #8
 8003516:	4619      	mov	r1, r3
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff ff05 	bl	8003328 <ETH_SetDMAConfig>
}
 800351e:	bf00      	nop
 8003520:	3798      	adds	r7, #152	@ 0x98
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3305      	adds	r3, #5
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	021b      	lsls	r3, r3, #8
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	3204      	adds	r2, #4
 8003540:	7812      	ldrb	r2, [r2, #0]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	4b11      	ldr	r3, [pc, #68]	@ (8003590 <ETH_MACAddressConfig+0x68>)
 800354a:	4413      	add	r3, r2
 800354c:	461a      	mov	r2, r3
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3303      	adds	r3, #3
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	061a      	lsls	r2, r3, #24
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3302      	adds	r3, #2
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	041b      	lsls	r3, r3, #16
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3301      	adds	r3, #1
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	021b      	lsls	r3, r3, #8
 800356c:	4313      	orrs	r3, r2
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	7812      	ldrb	r2, [r2, #0]
 8003572:	4313      	orrs	r3, r2
 8003574:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	4b06      	ldr	r3, [pc, #24]	@ (8003594 <ETH_MACAddressConfig+0x6c>)
 800357a:	4413      	add	r3, r2
 800357c:	461a      	mov	r2, r3
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	6013      	str	r3, [r2, #0]
}
 8003582:	bf00      	nop
 8003584:	371c      	adds	r7, #28
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40028040 	.word	0x40028040
 8003594:	40028044 	.word	0x40028044

08003598 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80035a0:	2300      	movs	r3, #0
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	e03e      	b.n	8003624 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68d9      	ldr	r1, [r3, #12]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	440b      	add	r3, r1
 80035b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2200      	movs	r2, #0
 80035c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2200      	movs	r2, #0
 80035c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2200      	movs	r2, #0
 80035ce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80035d0:	68b9      	ldr	r1, [r7, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	3206      	adds	r2, #6
 80035d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d80c      	bhi.n	8003608 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68d9      	ldr	r1, [r3, #12]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	4613      	mov	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	440b      	add	r3, r1
 8003600:	461a      	mov	r2, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	60da      	str	r2, [r3, #12]
 8003606:	e004      	b.n	8003612 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	461a      	mov	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	3301      	adds	r3, #1
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2b03      	cmp	r3, #3
 8003628:	d9bd      	bls.n	80035a6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800363c:	611a      	str	r2, [r3, #16]
}
 800363e:	bf00      	nop
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	e048      	b.n	80036ea <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6919      	ldr	r1, [r3, #16]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	440b      	add	r3, r1
 8003668:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2200      	movs	r2, #0
 8003674:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2200      	movs	r2, #0
 800367a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2200      	movs	r2, #0
 8003680:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2200      	movs	r2, #0
 8003686:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2200      	movs	r2, #0
 800368c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003694:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80036ae:	68b9      	ldr	r1, [r7, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	3212      	adds	r2, #18
 80036b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d80c      	bhi.n	80036da <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6919      	ldr	r1, [r3, #16]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	4613      	mov	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	440b      	add	r3, r1
 80036d2:	461a      	mov	r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	60da      	str	r2, [r3, #12]
 80036d8:	e004      	b.n	80036e4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	461a      	mov	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	3301      	adds	r3, #1
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d9b3      	bls.n	8003658 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691a      	ldr	r2, [r3, #16]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800371a:	60da      	str	r2, [r3, #12]
}
 800371c:	bf00      	nop
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003728:	b480      	push	{r7}
 800372a:	b091      	sub	sp, #68	@ 0x44
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	3318      	adds	r3, #24
 8003738:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800373a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003746:	2300      	movs	r3, #0
 8003748:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800374a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800374e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003752:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800375a:	2300      	movs	r3, #0
 800375c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800375e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003766:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800376a:	d007      	beq.n	800377c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800376c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800376e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003770:	3304      	adds	r3, #4
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800377c:	2302      	movs	r3, #2
 800377e:	e111      	b.n	80039a4 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8003780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003782:	3301      	adds	r3, #1
 8003784:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	4b86      	ldr	r3, [pc, #536]	@ (80039b0 <ETH_Prepare_Tx_Descriptors+0x288>)
 8003796:	4013      	ands	r3, r2
 8003798:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800379a:	6852      	ldr	r2, [r2, #4]
 800379c:	431a      	orrs	r2, r3
 800379e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d008      	beq.n	80037c0 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80037ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	431a      	orrs	r2, r3
 80037bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037be:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d008      	beq.n	80037de <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80037cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	431a      	orrs	r2, r3
 80037da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037dc:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d005      	beq.n	80037f6 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80037ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80037f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80037f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80037fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003800:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003802:	e082      	b.n	800390a <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800380c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380e:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d006      	beq.n	8003824 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800381e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	e005      	b.n	8003830 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800382c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382e:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003832:	3301      	adds	r3, #1
 8003834:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003838:	2b03      	cmp	r3, #3
 800383a:	d902      	bls.n	8003842 <ETH_Prepare_Tx_Descriptors+0x11a>
 800383c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800383e:	3b04      	subs	r3, #4
 8003840:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003844:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800384a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800384c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003854:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003858:	d007      	beq.n	800386a <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800385a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800385c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800385e:	3304      	adds	r3, #4
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d029      	beq.n	80038be <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800386e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003870:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003876:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003878:	2300      	movs	r3, #0
 800387a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800387c:	e019      	b.n	80038b2 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 800387e:	f3bf 8f5f 	dmb	sy
}
 8003882:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800388c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800388e:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003892:	3301      	adds	r3, #1
 8003894:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003898:	2b03      	cmp	r3, #3
 800389a:	d902      	bls.n	80038a2 <ETH_Prepare_Tx_Descriptors+0x17a>
 800389c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800389e:	3b04      	subs	r3, #4
 80038a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80038a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038aa:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80038ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ae:	3301      	adds	r3, #1
 80038b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80038b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d3e1      	bcc.n	800387e <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 80038ba:	2302      	movs	r3, #2
 80038bc:	e072      	b.n	80039a4 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80038be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80038c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c8:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 80038ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038cc:	3301      	adds	r3, #1
 80038ce:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80038d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80038d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	461a      	mov	r2, r3
 80038dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038de:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80038e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	4b32      	ldr	r3, [pc, #200]	@ (80039b0 <ETH_Prepare_Tx_Descriptors+0x288>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038ea:	6852      	ldr	r2, [r2, #4]
 80038ec:	431a      	orrs	r2, r3
 80038ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f0:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80038f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f4:	3301      	adds	r3, #1
 80038f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80038f8:	f3bf 8f5f 	dmb	sy
}
 80038fc:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80038fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003908:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800390a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	f47f af78 	bne.w	8003804 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d006      	beq.n	8003928 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800391a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	e005      	b.n	8003934 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003932:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800393c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393e:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003942:	6a3a      	ldr	r2, [r7, #32]
 8003944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003948:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800394a:	f3bf 8f5f 	dmb	sy
}
 800394e:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395a:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800395c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003960:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003964:	3304      	adds	r3, #4
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800396c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003970:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003972:	f3ef 8310 	mrs	r3, PRIMASK
 8003976:	613b      	str	r3, [r7, #16]
  return(result);
 8003978:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800397a:	61fb      	str	r3, [r7, #28]
 800397c:	2301      	movs	r3, #1
 800397e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f383 8810 	msr	PRIMASK, r3
}
 8003986:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800398c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800398e:	4413      	add	r3, r2
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003994:	629a      	str	r2, [r3, #40]	@ 0x28
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	f383 8810 	msr	PRIMASK, r3
}
 80039a0:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3744      	adds	r7, #68	@ 0x44
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	ffffe000 	.word	0xffffe000

080039b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b089      	sub	sp, #36	@ 0x24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80039be:	2300      	movs	r3, #0
 80039c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80039c6:	2300      	movs	r3, #0
 80039c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80039ca:	2300      	movs	r3, #0
 80039cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80039ce:	2300      	movs	r3, #0
 80039d0:	61fb      	str	r3, [r7, #28]
 80039d2:	e175      	b.n	8003cc0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80039d4:	2201      	movs	r2, #1
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	4013      	ands	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	f040 8164 	bne.w	8003cba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d005      	beq.n	8003a0a <HAL_GPIO_Init+0x56>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f003 0303 	and.w	r3, r3, #3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d130      	bne.n	8003a6c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	2203      	movs	r2, #3
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a40:	2201      	movs	r2, #1
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	091b      	lsrs	r3, r3, #4
 8003a56:	f003 0201 	and.w	r2, r3, #1
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 0303 	and.w	r3, r3, #3
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d017      	beq.n	8003aa8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	2203      	movs	r2, #3
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 0303 	and.w	r3, r3, #3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d123      	bne.n	8003afc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	08da      	lsrs	r2, r3, #3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3208      	adds	r2, #8
 8003abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	220f      	movs	r2, #15
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	08da      	lsrs	r2, r3, #3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	3208      	adds	r2, #8
 8003af6:	69b9      	ldr	r1, [r7, #24]
 8003af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	2203      	movs	r2, #3
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4013      	ands	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f003 0203 	and.w	r2, r3, #3
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 80be 	beq.w	8003cba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b3e:	4b66      	ldr	r3, [pc, #408]	@ (8003cd8 <HAL_GPIO_Init+0x324>)
 8003b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b42:	4a65      	ldr	r2, [pc, #404]	@ (8003cd8 <HAL_GPIO_Init+0x324>)
 8003b44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b48:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b4a:	4b63      	ldr	r3, [pc, #396]	@ (8003cd8 <HAL_GPIO_Init+0x324>)
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003b56:	4a61      	ldr	r2, [pc, #388]	@ (8003cdc <HAL_GPIO_Init+0x328>)
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	089b      	lsrs	r3, r3, #2
 8003b5c:	3302      	adds	r3, #2
 8003b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	220f      	movs	r2, #15
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	43db      	mvns	r3, r3
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	4013      	ands	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a58      	ldr	r2, [pc, #352]	@ (8003ce0 <HAL_GPIO_Init+0x32c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d037      	beq.n	8003bf2 <HAL_GPIO_Init+0x23e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a57      	ldr	r2, [pc, #348]	@ (8003ce4 <HAL_GPIO_Init+0x330>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d031      	beq.n	8003bee <HAL_GPIO_Init+0x23a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a56      	ldr	r2, [pc, #344]	@ (8003ce8 <HAL_GPIO_Init+0x334>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d02b      	beq.n	8003bea <HAL_GPIO_Init+0x236>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a55      	ldr	r2, [pc, #340]	@ (8003cec <HAL_GPIO_Init+0x338>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d025      	beq.n	8003be6 <HAL_GPIO_Init+0x232>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a54      	ldr	r2, [pc, #336]	@ (8003cf0 <HAL_GPIO_Init+0x33c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d01f      	beq.n	8003be2 <HAL_GPIO_Init+0x22e>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a53      	ldr	r2, [pc, #332]	@ (8003cf4 <HAL_GPIO_Init+0x340>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d019      	beq.n	8003bde <HAL_GPIO_Init+0x22a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a52      	ldr	r2, [pc, #328]	@ (8003cf8 <HAL_GPIO_Init+0x344>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d013      	beq.n	8003bda <HAL_GPIO_Init+0x226>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a51      	ldr	r2, [pc, #324]	@ (8003cfc <HAL_GPIO_Init+0x348>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d00d      	beq.n	8003bd6 <HAL_GPIO_Init+0x222>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a50      	ldr	r2, [pc, #320]	@ (8003d00 <HAL_GPIO_Init+0x34c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d007      	beq.n	8003bd2 <HAL_GPIO_Init+0x21e>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a4f      	ldr	r2, [pc, #316]	@ (8003d04 <HAL_GPIO_Init+0x350>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d101      	bne.n	8003bce <HAL_GPIO_Init+0x21a>
 8003bca:	2309      	movs	r3, #9
 8003bcc:	e012      	b.n	8003bf4 <HAL_GPIO_Init+0x240>
 8003bce:	230a      	movs	r3, #10
 8003bd0:	e010      	b.n	8003bf4 <HAL_GPIO_Init+0x240>
 8003bd2:	2308      	movs	r3, #8
 8003bd4:	e00e      	b.n	8003bf4 <HAL_GPIO_Init+0x240>
 8003bd6:	2307      	movs	r3, #7
 8003bd8:	e00c      	b.n	8003bf4 <HAL_GPIO_Init+0x240>
 8003bda:	2306      	movs	r3, #6
 8003bdc:	e00a      	b.n	8003bf4 <HAL_GPIO_Init+0x240>
 8003bde:	2305      	movs	r3, #5
 8003be0:	e008      	b.n	8003bf4 <HAL_GPIO_Init+0x240>
 8003be2:	2304      	movs	r3, #4
 8003be4:	e006      	b.n	8003bf4 <HAL_GPIO_Init+0x240>
 8003be6:	2303      	movs	r3, #3
 8003be8:	e004      	b.n	8003bf4 <HAL_GPIO_Init+0x240>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e002      	b.n	8003bf4 <HAL_GPIO_Init+0x240>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <HAL_GPIO_Init+0x240>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	69fa      	ldr	r2, [r7, #28]
 8003bf6:	f002 0203 	and.w	r2, r2, #3
 8003bfa:	0092      	lsls	r2, r2, #2
 8003bfc:	4093      	lsls	r3, r2
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003c04:	4935      	ldr	r1, [pc, #212]	@ (8003cdc <HAL_GPIO_Init+0x328>)
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	089b      	lsrs	r3, r3, #2
 8003c0a:	3302      	adds	r3, #2
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c12:	4b3d      	ldr	r3, [pc, #244]	@ (8003d08 <HAL_GPIO_Init+0x354>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c36:	4a34      	ldr	r2, [pc, #208]	@ (8003d08 <HAL_GPIO_Init+0x354>)
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c3c:	4b32      	ldr	r3, [pc, #200]	@ (8003d08 <HAL_GPIO_Init+0x354>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	43db      	mvns	r3, r3
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c60:	4a29      	ldr	r2, [pc, #164]	@ (8003d08 <HAL_GPIO_Init+0x354>)
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c66:	4b28      	ldr	r3, [pc, #160]	@ (8003d08 <HAL_GPIO_Init+0x354>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4013      	ands	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003d08 <HAL_GPIO_Init+0x354>)
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c90:	4b1d      	ldr	r3, [pc, #116]	@ (8003d08 <HAL_GPIO_Init+0x354>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cb4:	4a14      	ldr	r2, [pc, #80]	@ (8003d08 <HAL_GPIO_Init+0x354>)
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	61fb      	str	r3, [r7, #28]
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	2b0f      	cmp	r3, #15
 8003cc4:	f67f ae86 	bls.w	80039d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003cc8:	bf00      	nop
 8003cca:	bf00      	nop
 8003ccc:	3724      	adds	r7, #36	@ 0x24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	40013800 	.word	0x40013800
 8003ce0:	40020000 	.word	0x40020000
 8003ce4:	40020400 	.word	0x40020400
 8003ce8:	40020800 	.word	0x40020800
 8003cec:	40020c00 	.word	0x40020c00
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40021400 	.word	0x40021400
 8003cf8:	40021800 	.word	0x40021800
 8003cfc:	40021c00 	.word	0x40021c00
 8003d00:	40022000 	.word	0x40022000
 8003d04:	40022400 	.word	0x40022400
 8003d08:	40013c00 	.word	0x40013c00

08003d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	807b      	strh	r3, [r7, #2]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d1c:	787b      	ldrb	r3, [r7, #1]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d22:	887a      	ldrh	r2, [r7, #2]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003d28:	e003      	b.n	8003d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003d2a:	887b      	ldrh	r3, [r7, #2]
 8003d2c:	041a      	lsls	r2, r3, #16
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	619a      	str	r2, [r3, #24]
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b085      	sub	sp, #20
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	460b      	mov	r3, r1
 8003d48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d50:	887a      	ldrh	r2, [r7, #2]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4013      	ands	r3, r2
 8003d56:	041a      	lsls	r2, r3, #16
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	43d9      	mvns	r1, r3
 8003d5c:	887b      	ldrh	r3, [r7, #2]
 8003d5e:	400b      	ands	r3, r1
 8003d60:	431a      	orrs	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	619a      	str	r2, [r3, #24]
}
 8003d66:	bf00      	nop
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
	...

08003d74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e08b      	b.n	8003e9e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d106      	bne.n	8003da0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7fd ff48 	bl	8001c30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2224      	movs	r2, #36	@ 0x24
 8003da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0201 	bic.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003dc4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003dd4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d107      	bne.n	8003dee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003dea:	609a      	str	r2, [r3, #8]
 8003dec:	e006      	b.n	8003dfc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003dfa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d108      	bne.n	8003e16 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e12:	605a      	str	r2, [r3, #4]
 8003e14:	e007      	b.n	8003e26 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	4b1d      	ldr	r3, [pc, #116]	@ (8003ea8 <HAL_I2C_Init+0x134>)
 8003e32:	430b      	orrs	r3, r1
 8003e34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691a      	ldr	r2, [r3, #16]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	69d9      	ldr	r1, [r3, #28]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1a      	ldr	r2, [r3, #32]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0201 	orr.w	r2, r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	02008000 	.word	0x02008000

08003eac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af02      	add	r7, sp, #8
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	4608      	mov	r0, r1
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4603      	mov	r3, r0
 8003ebc:	817b      	strh	r3, [r7, #10]
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	813b      	strh	r3, [r7, #8]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b20      	cmp	r3, #32
 8003ed0:	f040 80f9 	bne.w	80040c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <HAL_I2C_Mem_Write+0x34>
 8003eda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d105      	bne.n	8003eec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ee6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e0ed      	b.n	80040c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d101      	bne.n	8003efa <HAL_I2C_Mem_Write+0x4e>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e0e6      	b.n	80040c8 <HAL_I2C_Mem_Write+0x21c>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f02:	f7fe f9c3 	bl	800228c <HAL_GetTick>
 8003f06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	2319      	movs	r3, #25
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 f955 	bl	80041c4 <I2C_WaitOnFlagUntilTimeout>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e0d1      	b.n	80040c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2221      	movs	r2, #33	@ 0x21
 8003f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2240      	movs	r2, #64	@ 0x40
 8003f30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a3a      	ldr	r2, [r7, #32]
 8003f3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f4c:	88f8      	ldrh	r0, [r7, #6]
 8003f4e:	893a      	ldrh	r2, [r7, #8]
 8003f50:	8979      	ldrh	r1, [r7, #10]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	9301      	str	r3, [sp, #4]
 8003f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 f8b9 	bl	80040d4 <I2C_RequestMemoryWrite>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d005      	beq.n	8003f74 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e0a9      	b.n	80040c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2bff      	cmp	r3, #255	@ 0xff
 8003f7c:	d90e      	bls.n	8003f9c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	22ff      	movs	r2, #255	@ 0xff
 8003f82:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	8979      	ldrh	r1, [r7, #10]
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 fad9 	bl	800454c <I2C_TransferConfig>
 8003f9a:	e00f      	b.n	8003fbc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	8979      	ldrh	r1, [r7, #10]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 fac8 	bl	800454c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 f958 	bl	8004276 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e07b      	b.n	80040c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd4:	781a      	ldrb	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004004:	b29b      	uxth	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d034      	beq.n	8004074 <HAL_I2C_Mem_Write+0x1c8>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800400e:	2b00      	cmp	r3, #0
 8004010:	d130      	bne.n	8004074 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004018:	2200      	movs	r2, #0
 800401a:	2180      	movs	r1, #128	@ 0x80
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f000 f8d1 	bl	80041c4 <I2C_WaitOnFlagUntilTimeout>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e04d      	b.n	80040c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004030:	b29b      	uxth	r3, r3
 8004032:	2bff      	cmp	r3, #255	@ 0xff
 8004034:	d90e      	bls.n	8004054 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	22ff      	movs	r2, #255	@ 0xff
 800403a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004040:	b2da      	uxtb	r2, r3
 8004042:	8979      	ldrh	r1, [r7, #10]
 8004044:	2300      	movs	r3, #0
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 fa7d 	bl	800454c <I2C_TransferConfig>
 8004052:	e00f      	b.n	8004074 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004058:	b29a      	uxth	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004062:	b2da      	uxtb	r2, r3
 8004064:	8979      	ldrh	r1, [r7, #10]
 8004066:	2300      	movs	r3, #0
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 fa6c 	bl	800454c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d19e      	bne.n	8003fbc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 f93e 	bl	8004304 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e01a      	b.n	80040c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2220      	movs	r2, #32
 8004098:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6859      	ldr	r1, [r3, #4]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	4b0a      	ldr	r3, [pc, #40]	@ (80040d0 <HAL_I2C_Mem_Write+0x224>)
 80040a6:	400b      	ands	r3, r1
 80040a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	e000      	b.n	80040c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80040c6:	2302      	movs	r3, #2
  }
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	fe00e800 	.word	0xfe00e800

080040d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af02      	add	r7, sp, #8
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	4608      	mov	r0, r1
 80040de:	4611      	mov	r1, r2
 80040e0:	461a      	mov	r2, r3
 80040e2:	4603      	mov	r3, r0
 80040e4:	817b      	strh	r3, [r7, #10]
 80040e6:	460b      	mov	r3, r1
 80040e8:	813b      	strh	r3, [r7, #8]
 80040ea:	4613      	mov	r3, r2
 80040ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80040ee:	88fb      	ldrh	r3, [r7, #6]
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	8979      	ldrh	r1, [r7, #10]
 80040f4:	4b20      	ldr	r3, [pc, #128]	@ (8004178 <I2C_RequestMemoryWrite+0xa4>)
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 fa25 	bl	800454c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	69b9      	ldr	r1, [r7, #24]
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f8b5 	bl	8004276 <I2C_WaitOnTXISFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e02c      	b.n	8004170 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004116:	88fb      	ldrh	r3, [r7, #6]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d105      	bne.n	8004128 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800411c:	893b      	ldrh	r3, [r7, #8]
 800411e:	b2da      	uxtb	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	629a      	str	r2, [r3, #40]	@ 0x28
 8004126:	e015      	b.n	8004154 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004128:	893b      	ldrh	r3, [r7, #8]
 800412a:	0a1b      	lsrs	r3, r3, #8
 800412c:	b29b      	uxth	r3, r3
 800412e:	b2da      	uxtb	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004136:	69fa      	ldr	r2, [r7, #28]
 8004138:	69b9      	ldr	r1, [r7, #24]
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 f89b 	bl	8004276 <I2C_WaitOnTXISFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e012      	b.n	8004170 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800414a:	893b      	ldrh	r3, [r7, #8]
 800414c:	b2da      	uxtb	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2200      	movs	r2, #0
 800415c:	2180      	movs	r1, #128	@ 0x80
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 f830 	bl	80041c4 <I2C_WaitOnFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	80002000 	.word	0x80002000

0800417c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b02      	cmp	r3, #2
 8004190:	d103      	bne.n	800419a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2200      	movs	r2, #0
 8004198:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d007      	beq.n	80041b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699a      	ldr	r2, [r3, #24]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0201 	orr.w	r2, r2, #1
 80041b6:	619a      	str	r2, [r3, #24]
  }
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	603b      	str	r3, [r7, #0]
 80041d0:	4613      	mov	r3, r2
 80041d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041d4:	e03b      	b.n	800424e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	6839      	ldr	r1, [r7, #0]
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 f8d6 	bl	800438c <I2C_IsErrorOccurred>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e041      	b.n	800426e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f0:	d02d      	beq.n	800424e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f2:	f7fe f84b 	bl	800228c <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d302      	bcc.n	8004208 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d122      	bne.n	800424e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	4013      	ands	r3, r2
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	429a      	cmp	r2, r3
 8004216:	bf0c      	ite	eq
 8004218:	2301      	moveq	r3, #1
 800421a:	2300      	movne	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	461a      	mov	r2, r3
 8004220:	79fb      	ldrb	r3, [r7, #7]
 8004222:	429a      	cmp	r2, r3
 8004224:	d113      	bne.n	800424e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422a:	f043 0220 	orr.w	r2, r3, #32
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2220      	movs	r2, #32
 8004236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e00f      	b.n	800426e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	699a      	ldr	r2, [r3, #24]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4013      	ands	r3, r2
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	429a      	cmp	r2, r3
 800425c:	bf0c      	ite	eq
 800425e:	2301      	moveq	r3, #1
 8004260:	2300      	movne	r3, #0
 8004262:	b2db      	uxtb	r3, r3
 8004264:	461a      	mov	r2, r3
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	429a      	cmp	r2, r3
 800426a:	d0b4      	beq.n	80041d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004282:	e033      	b.n	80042ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	68b9      	ldr	r1, [r7, #8]
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 f87f 	bl	800438c <I2C_IsErrorOccurred>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e031      	b.n	80042fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429e:	d025      	beq.n	80042ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a0:	f7fd fff4 	bl	800228c <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d302      	bcc.n	80042b6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d11a      	bne.n	80042ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d013      	beq.n	80042ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c8:	f043 0220 	orr.w	r2, r3, #32
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e007      	b.n	80042fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d1c4      	bne.n	8004284 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004310:	e02f      	b.n	8004372 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	68b9      	ldr	r1, [r7, #8]
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 f838 	bl	800438c <I2C_IsErrorOccurred>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e02d      	b.n	8004382 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004326:	f7fd ffb1 	bl	800228c <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	429a      	cmp	r2, r3
 8004334:	d302      	bcc.n	800433c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d11a      	bne.n	8004372 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b20      	cmp	r3, #32
 8004348:	d013      	beq.n	8004372 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434e:	f043 0220 	orr.w	r2, r3, #32
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2220      	movs	r2, #32
 800435a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e007      	b.n	8004382 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	f003 0320 	and.w	r3, r3, #32
 800437c:	2b20      	cmp	r3, #32
 800437e:	d1c8      	bne.n	8004312 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08a      	sub	sp, #40	@ 0x28
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004398:	2300      	movs	r3, #0
 800439a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80043a6:	2300      	movs	r3, #0
 80043a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	f003 0310 	and.w	r3, r3, #16
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d068      	beq.n	800448a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2210      	movs	r2, #16
 80043be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043c0:	e049      	b.n	8004456 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c8:	d045      	beq.n	8004456 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043ca:	f7fd ff5f 	bl	800228c <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d302      	bcc.n	80043e0 <I2C_IsErrorOccurred+0x54>
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d13a      	bne.n	8004456 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004402:	d121      	bne.n	8004448 <I2C_IsErrorOccurred+0xbc>
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800440a:	d01d      	beq.n	8004448 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800440c:	7cfb      	ldrb	r3, [r7, #19]
 800440e:	2b20      	cmp	r3, #32
 8004410:	d01a      	beq.n	8004448 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004420:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004422:	f7fd ff33 	bl	800228c <HAL_GetTick>
 8004426:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004428:	e00e      	b.n	8004448 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800442a:	f7fd ff2f 	bl	800228c <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b19      	cmp	r3, #25
 8004436:	d907      	bls.n	8004448 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	f043 0320 	orr.w	r3, r3, #32
 800443e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004446:	e006      	b.n	8004456 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	f003 0320 	and.w	r3, r3, #32
 8004452:	2b20      	cmp	r3, #32
 8004454:	d1e9      	bne.n	800442a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	f003 0320 	and.w	r3, r3, #32
 8004460:	2b20      	cmp	r3, #32
 8004462:	d003      	beq.n	800446c <I2C_IsErrorOccurred+0xe0>
 8004464:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004468:	2b00      	cmp	r3, #0
 800446a:	d0aa      	beq.n	80043c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800446c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004470:	2b00      	cmp	r3, #0
 8004472:	d103      	bne.n	800447c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2220      	movs	r2, #32
 800447a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	f043 0304 	orr.w	r3, r3, #4
 8004482:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00b      	beq.n	80044b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	f043 0301 	orr.w	r3, r3, #1
 80044a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00b      	beq.n	80044d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	f043 0308 	orr.w	r3, r3, #8
 80044c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00b      	beq.n	80044f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	f043 0302 	orr.w	r3, r3, #2
 80044e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80044f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d01c      	beq.n	800453a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f7ff fe3b 	bl	800417c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6859      	ldr	r1, [r3, #4]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	4b0d      	ldr	r3, [pc, #52]	@ (8004548 <I2C_IsErrorOccurred+0x1bc>)
 8004512:	400b      	ands	r3, r1
 8004514:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	431a      	orrs	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2220      	movs	r2, #32
 8004526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800453a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800453e:	4618      	mov	r0, r3
 8004540:	3728      	adds	r7, #40	@ 0x28
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	fe00e800 	.word	0xfe00e800

0800454c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	607b      	str	r3, [r7, #4]
 8004556:	460b      	mov	r3, r1
 8004558:	817b      	strh	r3, [r7, #10]
 800455a:	4613      	mov	r3, r2
 800455c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800455e:	897b      	ldrh	r3, [r7, #10]
 8004560:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004564:	7a7b      	ldrb	r3, [r7, #9]
 8004566:	041b      	lsls	r3, r3, #16
 8004568:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800456c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	4313      	orrs	r3, r2
 8004576:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800457a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	0d5b      	lsrs	r3, r3, #21
 8004586:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800458a:	4b08      	ldr	r3, [pc, #32]	@ (80045ac <I2C_TransferConfig+0x60>)
 800458c:	430b      	orrs	r3, r1
 800458e:	43db      	mvns	r3, r3
 8004590:	ea02 0103 	and.w	r1, r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	430a      	orrs	r2, r1
 800459c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800459e:	bf00      	nop
 80045a0:	371c      	adds	r7, #28
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	03ff63ff 	.word	0x03ff63ff

080045b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b20      	cmp	r3, #32
 80045c4:	d138      	bne.n	8004638 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80045d0:	2302      	movs	r3, #2
 80045d2:	e032      	b.n	800463a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2224      	movs	r2, #36	@ 0x24
 80045e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0201 	bic.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004602:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6819      	ldr	r1, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f042 0201 	orr.w	r2, r2, #1
 8004622:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004634:	2300      	movs	r3, #0
 8004636:	e000      	b.n	800463a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004638:	2302      	movs	r3, #2
  }
}
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004646:	b480      	push	{r7}
 8004648:	b085      	sub	sp, #20
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b20      	cmp	r3, #32
 800465a:	d139      	bne.n	80046d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004666:	2302      	movs	r3, #2
 8004668:	e033      	b.n	80046d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2224      	movs	r2, #36	@ 0x24
 8004676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0201 	bic.w	r2, r2, #1
 8004688:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004698:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	021b      	lsls	r3, r3, #8
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0201 	orr.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	e000      	b.n	80046d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80046d0:	2302      	movs	r3, #2
  }
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
	...

080046e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80046e6:	2300      	movs	r3, #0
 80046e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80046ea:	4b23      	ldr	r3, [pc, #140]	@ (8004778 <HAL_PWREx_EnableOverDrive+0x98>)
 80046ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ee:	4a22      	ldr	r2, [pc, #136]	@ (8004778 <HAL_PWREx_EnableOverDrive+0x98>)
 80046f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80046f6:	4b20      	ldr	r3, [pc, #128]	@ (8004778 <HAL_PWREx_EnableOverDrive+0x98>)
 80046f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046fe:	603b      	str	r3, [r7, #0]
 8004700:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004702:	4b1e      	ldr	r3, [pc, #120]	@ (800477c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a1d      	ldr	r2, [pc, #116]	@ (800477c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800470c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800470e:	f7fd fdbd 	bl	800228c <HAL_GetTick>
 8004712:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004714:	e009      	b.n	800472a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004716:	f7fd fdb9 	bl	800228c <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004724:	d901      	bls.n	800472a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e022      	b.n	8004770 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800472a:	4b14      	ldr	r3, [pc, #80]	@ (800477c <HAL_PWREx_EnableOverDrive+0x9c>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004732:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004736:	d1ee      	bne.n	8004716 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004738:	4b10      	ldr	r3, [pc, #64]	@ (800477c <HAL_PWREx_EnableOverDrive+0x9c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a0f      	ldr	r2, [pc, #60]	@ (800477c <HAL_PWREx_EnableOverDrive+0x9c>)
 800473e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004742:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004744:	f7fd fda2 	bl	800228c <HAL_GetTick>
 8004748:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800474a:	e009      	b.n	8004760 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800474c:	f7fd fd9e 	bl	800228c <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800475a:	d901      	bls.n	8004760 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e007      	b.n	8004770 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004760:	4b06      	ldr	r3, [pc, #24]	@ (800477c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004768:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800476c:	d1ee      	bne.n	800474c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	40023800 	.word	0x40023800
 800477c:	40007000 	.word	0x40007000

08004780 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004788:	2300      	movs	r3, #0
 800478a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e29b      	b.n	8004cce <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 8087 	beq.w	80048b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047a4:	4b96      	ldr	r3, [pc, #600]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 030c 	and.w	r3, r3, #12
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d00c      	beq.n	80047ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047b0:	4b93      	ldr	r3, [pc, #588]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 030c 	and.w	r3, r3, #12
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d112      	bne.n	80047e2 <HAL_RCC_OscConfig+0x62>
 80047bc:	4b90      	ldr	r3, [pc, #576]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047c8:	d10b      	bne.n	80047e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ca:	4b8d      	ldr	r3, [pc, #564]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d06c      	beq.n	80048b0 <HAL_RCC_OscConfig+0x130>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d168      	bne.n	80048b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e275      	b.n	8004cce <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047ea:	d106      	bne.n	80047fa <HAL_RCC_OscConfig+0x7a>
 80047ec:	4b84      	ldr	r3, [pc, #528]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a83      	ldr	r2, [pc, #524]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 80047f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047f6:	6013      	str	r3, [r2, #0]
 80047f8:	e02e      	b.n	8004858 <HAL_RCC_OscConfig+0xd8>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10c      	bne.n	800481c <HAL_RCC_OscConfig+0x9c>
 8004802:	4b7f      	ldr	r3, [pc, #508]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a7e      	ldr	r2, [pc, #504]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 8004808:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	4b7c      	ldr	r3, [pc, #496]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a7b      	ldr	r2, [pc, #492]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 8004814:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	e01d      	b.n	8004858 <HAL_RCC_OscConfig+0xd8>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004824:	d10c      	bne.n	8004840 <HAL_RCC_OscConfig+0xc0>
 8004826:	4b76      	ldr	r3, [pc, #472]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a75      	ldr	r2, [pc, #468]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 800482c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004830:	6013      	str	r3, [r2, #0]
 8004832:	4b73      	ldr	r3, [pc, #460]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a72      	ldr	r2, [pc, #456]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 8004838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	e00b      	b.n	8004858 <HAL_RCC_OscConfig+0xd8>
 8004840:	4b6f      	ldr	r3, [pc, #444]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a6e      	ldr	r2, [pc, #440]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 8004846:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800484a:	6013      	str	r3, [r2, #0]
 800484c:	4b6c      	ldr	r3, [pc, #432]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a6b      	ldr	r2, [pc, #428]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 8004852:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d013      	beq.n	8004888 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004860:	f7fd fd14 	bl	800228c <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004868:	f7fd fd10 	bl	800228c <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b64      	cmp	r3, #100	@ 0x64
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e229      	b.n	8004cce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800487a:	4b61      	ldr	r3, [pc, #388]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0xe8>
 8004886:	e014      	b.n	80048b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004888:	f7fd fd00 	bl	800228c <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004890:	f7fd fcfc 	bl	800228c <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b64      	cmp	r3, #100	@ 0x64
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e215      	b.n	8004cce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048a2:	4b57      	ldr	r3, [pc, #348]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f0      	bne.n	8004890 <HAL_RCC_OscConfig+0x110>
 80048ae:	e000      	b.n	80048b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d069      	beq.n	8004992 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048be:	4b50      	ldr	r3, [pc, #320]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 030c 	and.w	r3, r3, #12
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00b      	beq.n	80048e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ca:	4b4d      	ldr	r3, [pc, #308]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 030c 	and.w	r3, r3, #12
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d11c      	bne.n	8004910 <HAL_RCC_OscConfig+0x190>
 80048d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d116      	bne.n	8004910 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048e2:	4b47      	ldr	r3, [pc, #284]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d005      	beq.n	80048fa <HAL_RCC_OscConfig+0x17a>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d001      	beq.n	80048fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e1e9      	b.n	8004cce <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048fa:	4b41      	ldr	r3, [pc, #260]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	493d      	ldr	r1, [pc, #244]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 800490a:	4313      	orrs	r3, r2
 800490c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800490e:	e040      	b.n	8004992 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d023      	beq.n	8004960 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004918:	4b39      	ldr	r3, [pc, #228]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a38      	ldr	r2, [pc, #224]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 800491e:	f043 0301 	orr.w	r3, r3, #1
 8004922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004924:	f7fd fcb2 	bl	800228c <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800492c:	f7fd fcae 	bl	800228c <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e1c7      	b.n	8004cce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800493e:	4b30      	ldr	r3, [pc, #192]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0f0      	beq.n	800492c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800494a:	4b2d      	ldr	r3, [pc, #180]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	4929      	ldr	r1, [pc, #164]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 800495a:	4313      	orrs	r3, r2
 800495c:	600b      	str	r3, [r1, #0]
 800495e:	e018      	b.n	8004992 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004960:	4b27      	ldr	r3, [pc, #156]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a26      	ldr	r2, [pc, #152]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 8004966:	f023 0301 	bic.w	r3, r3, #1
 800496a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496c:	f7fd fc8e 	bl	800228c <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004974:	f7fd fc8a 	bl	800228c <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e1a3      	b.n	8004cce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004986:	4b1e      	ldr	r3, [pc, #120]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1f0      	bne.n	8004974 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d038      	beq.n	8004a10 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d019      	beq.n	80049da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049a6:	4b16      	ldr	r3, [pc, #88]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 80049a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049aa:	4a15      	ldr	r2, [pc, #84]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 80049ac:	f043 0301 	orr.w	r3, r3, #1
 80049b0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b2:	f7fd fc6b 	bl	800228c <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049b8:	e008      	b.n	80049cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ba:	f7fd fc67 	bl	800228c <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e180      	b.n	8004cce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 80049ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0f0      	beq.n	80049ba <HAL_RCC_OscConfig+0x23a>
 80049d8:	e01a      	b.n	8004a10 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049da:	4b09      	ldr	r3, [pc, #36]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 80049dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049de:	4a08      	ldr	r2, [pc, #32]	@ (8004a00 <HAL_RCC_OscConfig+0x280>)
 80049e0:	f023 0301 	bic.w	r3, r3, #1
 80049e4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e6:	f7fd fc51 	bl	800228c <HAL_GetTick>
 80049ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049ec:	e00a      	b.n	8004a04 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ee:	f7fd fc4d 	bl	800228c <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d903      	bls.n	8004a04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e166      	b.n	8004cce <HAL_RCC_OscConfig+0x54e>
 8004a00:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a04:	4b92      	ldr	r3, [pc, #584]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004a06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1ee      	bne.n	80049ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 80a4 	beq.w	8004b66 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a1e:	4b8c      	ldr	r3, [pc, #560]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10d      	bne.n	8004a46 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a2a:	4b89      	ldr	r3, [pc, #548]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2e:	4a88      	ldr	r2, [pc, #544]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a36:	4b86      	ldr	r3, [pc, #536]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a3e:	60bb      	str	r3, [r7, #8]
 8004a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a42:	2301      	movs	r3, #1
 8004a44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a46:	4b83      	ldr	r3, [pc, #524]	@ (8004c54 <HAL_RCC_OscConfig+0x4d4>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d118      	bne.n	8004a84 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004a52:	4b80      	ldr	r3, [pc, #512]	@ (8004c54 <HAL_RCC_OscConfig+0x4d4>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a7f      	ldr	r2, [pc, #508]	@ (8004c54 <HAL_RCC_OscConfig+0x4d4>)
 8004a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a5e:	f7fd fc15 	bl	800228c <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a64:	e008      	b.n	8004a78 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a66:	f7fd fc11 	bl	800228c <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b64      	cmp	r3, #100	@ 0x64
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e12a      	b.n	8004cce <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a78:	4b76      	ldr	r3, [pc, #472]	@ (8004c54 <HAL_RCC_OscConfig+0x4d4>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0f0      	beq.n	8004a66 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d106      	bne.n	8004a9a <HAL_RCC_OscConfig+0x31a>
 8004a8c:	4b70      	ldr	r3, [pc, #448]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a90:	4a6f      	ldr	r2, [pc, #444]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004a92:	f043 0301 	orr.w	r3, r3, #1
 8004a96:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a98:	e02d      	b.n	8004af6 <HAL_RCC_OscConfig+0x376>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10c      	bne.n	8004abc <HAL_RCC_OscConfig+0x33c>
 8004aa2:	4b6b      	ldr	r3, [pc, #428]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa6:	4a6a      	ldr	r2, [pc, #424]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004aa8:	f023 0301 	bic.w	r3, r3, #1
 8004aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aae:	4b68      	ldr	r3, [pc, #416]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab2:	4a67      	ldr	r2, [pc, #412]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004ab4:	f023 0304 	bic.w	r3, r3, #4
 8004ab8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aba:	e01c      	b.n	8004af6 <HAL_RCC_OscConfig+0x376>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	2b05      	cmp	r3, #5
 8004ac2:	d10c      	bne.n	8004ade <HAL_RCC_OscConfig+0x35e>
 8004ac4:	4b62      	ldr	r3, [pc, #392]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ac8:	4a61      	ldr	r2, [pc, #388]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004aca:	f043 0304 	orr.w	r3, r3, #4
 8004ace:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ad0:	4b5f      	ldr	r3, [pc, #380]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad4:	4a5e      	ldr	r2, [pc, #376]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004ad6:	f043 0301 	orr.w	r3, r3, #1
 8004ada:	6713      	str	r3, [r2, #112]	@ 0x70
 8004adc:	e00b      	b.n	8004af6 <HAL_RCC_OscConfig+0x376>
 8004ade:	4b5c      	ldr	r3, [pc, #368]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ae2:	4a5b      	ldr	r2, [pc, #364]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004ae4:	f023 0301 	bic.w	r3, r3, #1
 8004ae8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aea:	4b59      	ldr	r3, [pc, #356]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aee:	4a58      	ldr	r2, [pc, #352]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004af0:	f023 0304 	bic.w	r3, r3, #4
 8004af4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d015      	beq.n	8004b2a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afe:	f7fd fbc5 	bl	800228c <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b04:	e00a      	b.n	8004b1c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b06:	f7fd fbc1 	bl	800228c <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e0d8      	b.n	8004cce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b1c:	4b4c      	ldr	r3, [pc, #304]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0ee      	beq.n	8004b06 <HAL_RCC_OscConfig+0x386>
 8004b28:	e014      	b.n	8004b54 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b2a:	f7fd fbaf 	bl	800228c <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b30:	e00a      	b.n	8004b48 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b32:	f7fd fbab 	bl	800228c <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e0c2      	b.n	8004cce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b48:	4b41      	ldr	r3, [pc, #260]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1ee      	bne.n	8004b32 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b54:	7dfb      	ldrb	r3, [r7, #23]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d105      	bne.n	8004b66 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b5a:	4b3d      	ldr	r3, [pc, #244]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5e:	4a3c      	ldr	r2, [pc, #240]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004b60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b64:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 80ae 	beq.w	8004ccc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b70:	4b37      	ldr	r3, [pc, #220]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f003 030c 	and.w	r3, r3, #12
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d06d      	beq.n	8004c58 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d14b      	bne.n	8004c1c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b84:	4b32      	ldr	r3, [pc, #200]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a31      	ldr	r2, [pc, #196]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004b8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b90:	f7fd fb7c 	bl	800228c <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b96:	e008      	b.n	8004baa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b98:	f7fd fb78 	bl	800228c <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e091      	b.n	8004cce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004baa:	4b29      	ldr	r3, [pc, #164]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1f0      	bne.n	8004b98 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	69da      	ldr	r2, [r3, #28]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc4:	019b      	lsls	r3, r3, #6
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bcc:	085b      	lsrs	r3, r3, #1
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	041b      	lsls	r3, r3, #16
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd8:	061b      	lsls	r3, r3, #24
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be0:	071b      	lsls	r3, r3, #28
 8004be2:	491b      	ldr	r1, [pc, #108]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004be8:	4b19      	ldr	r3, [pc, #100]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a18      	ldr	r2, [pc, #96]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004bee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf4:	f7fd fb4a 	bl	800228c <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bfc:	f7fd fb46 	bl	800228c <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e05f      	b.n	8004cce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c0e:	4b10      	ldr	r3, [pc, #64]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0f0      	beq.n	8004bfc <HAL_RCC_OscConfig+0x47c>
 8004c1a:	e057      	b.n	8004ccc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a0b      	ldr	r2, [pc, #44]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004c22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c28:	f7fd fb30 	bl	800228c <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c30:	f7fd fb2c 	bl	800228c <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e045      	b.n	8004cce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c42:	4b03      	ldr	r3, [pc, #12]	@ (8004c50 <HAL_RCC_OscConfig+0x4d0>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1f0      	bne.n	8004c30 <HAL_RCC_OscConfig+0x4b0>
 8004c4e:	e03d      	b.n	8004ccc <HAL_RCC_OscConfig+0x54c>
 8004c50:	40023800 	.word	0x40023800
 8004c54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004c58:	4b1f      	ldr	r3, [pc, #124]	@ (8004cd8 <HAL_RCC_OscConfig+0x558>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d030      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d129      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d122      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004c88:	4013      	ands	r3, r2
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c8e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d119      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9e:	085b      	lsrs	r3, r3, #1
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d10f      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d107      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d001      	beq.n	8004ccc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e000      	b.n	8004cce <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40023800 	.word	0x40023800

08004cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e0d0      	b.n	8004e96 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cf4:	4b6a      	ldr	r3, [pc, #424]	@ (8004ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 030f 	and.w	r3, r3, #15
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d910      	bls.n	8004d24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d02:	4b67      	ldr	r3, [pc, #412]	@ (8004ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f023 020f 	bic.w	r2, r3, #15
 8004d0a:	4965      	ldr	r1, [pc, #404]	@ (8004ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d12:	4b63      	ldr	r3, [pc, #396]	@ (8004ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d001      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e0b8      	b.n	8004e96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d020      	beq.n	8004d72 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d005      	beq.n	8004d48 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d3c:	4b59      	ldr	r3, [pc, #356]	@ (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	4a58      	ldr	r2, [pc, #352]	@ (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0308 	and.w	r3, r3, #8
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d005      	beq.n	8004d60 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d54:	4b53      	ldr	r3, [pc, #332]	@ (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	4a52      	ldr	r2, [pc, #328]	@ (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d60:	4b50      	ldr	r3, [pc, #320]	@ (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	494d      	ldr	r1, [pc, #308]	@ (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d040      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d107      	bne.n	8004d96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d86:	4b47      	ldr	r3, [pc, #284]	@ (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d115      	bne.n	8004dbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e07f      	b.n	8004e96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d107      	bne.n	8004dae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d9e:	4b41      	ldr	r3, [pc, #260]	@ (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d109      	bne.n	8004dbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e073      	b.n	8004e96 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dae:	4b3d      	ldr	r3, [pc, #244]	@ (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e06b      	b.n	8004e96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dbe:	4b39      	ldr	r3, [pc, #228]	@ (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f023 0203 	bic.w	r2, r3, #3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	4936      	ldr	r1, [pc, #216]	@ (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dd0:	f7fd fa5c 	bl	800228c <HAL_GetTick>
 8004dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dd6:	e00a      	b.n	8004dee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dd8:	f7fd fa58 	bl	800228c <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e053      	b.n	8004e96 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dee:	4b2d      	ldr	r3, [pc, #180]	@ (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 020c 	and.w	r2, r3, #12
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d1eb      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e00:	4b27      	ldr	r3, [pc, #156]	@ (8004ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 030f 	and.w	r3, r3, #15
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d210      	bcs.n	8004e30 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e0e:	4b24      	ldr	r3, [pc, #144]	@ (8004ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f023 020f 	bic.w	r2, r3, #15
 8004e16:	4922      	ldr	r1, [pc, #136]	@ (8004ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e1e:	4b20      	ldr	r3, [pc, #128]	@ (8004ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d001      	beq.n	8004e30 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e032      	b.n	8004e96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d008      	beq.n	8004e4e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e3c:	4b19      	ldr	r3, [pc, #100]	@ (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	4916      	ldr	r1, [pc, #88]	@ (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0308 	and.w	r3, r3, #8
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d009      	beq.n	8004e6e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e5a:	4b12      	ldr	r3, [pc, #72]	@ (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	490e      	ldr	r1, [pc, #56]	@ (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e6e:	f000 f821 	bl	8004eb4 <HAL_RCC_GetSysClockFreq>
 8004e72:	4602      	mov	r2, r0
 8004e74:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	091b      	lsrs	r3, r3, #4
 8004e7a:	f003 030f 	and.w	r3, r3, #15
 8004e7e:	490a      	ldr	r1, [pc, #40]	@ (8004ea8 <HAL_RCC_ClockConfig+0x1cc>)
 8004e80:	5ccb      	ldrb	r3, [r1, r3]
 8004e82:	fa22 f303 	lsr.w	r3, r2, r3
 8004e86:	4a09      	ldr	r2, [pc, #36]	@ (8004eac <HAL_RCC_ClockConfig+0x1d0>)
 8004e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e8a:	4b09      	ldr	r3, [pc, #36]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1d4>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fc ff2e 	bl	8001cf0 <HAL_InitTick>

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40023c00 	.word	0x40023c00
 8004ea4:	40023800 	.word	0x40023800
 8004ea8:	0802ccd8 	.word	0x0802ccd8
 8004eac:	20000008 	.word	0x20000008
 8004eb0:	2000000c 	.word	0x2000000c

08004eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eb8:	b090      	sub	sp, #64	@ 0x40
 8004eba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ecc:	4b59      	ldr	r3, [pc, #356]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f003 030c 	and.w	r3, r3, #12
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d00d      	beq.n	8004ef4 <HAL_RCC_GetSysClockFreq+0x40>
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	f200 80a1 	bhi.w	8005020 <HAL_RCC_GetSysClockFreq+0x16c>
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d002      	beq.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d003      	beq.n	8004eee <HAL_RCC_GetSysClockFreq+0x3a>
 8004ee6:	e09b      	b.n	8005020 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ee8:	4b53      	ldr	r3, [pc, #332]	@ (8005038 <HAL_RCC_GetSysClockFreq+0x184>)
 8004eea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004eec:	e09b      	b.n	8005026 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004eee:	4b53      	ldr	r3, [pc, #332]	@ (800503c <HAL_RCC_GetSysClockFreq+0x188>)
 8004ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ef2:	e098      	b.n	8005026 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ef4:	4b4f      	ldr	r3, [pc, #316]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004efc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004efe:	4b4d      	ldr	r3, [pc, #308]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d028      	beq.n	8004f5c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f0a:	4b4a      	ldr	r3, [pc, #296]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	099b      	lsrs	r3, r3, #6
 8004f10:	2200      	movs	r2, #0
 8004f12:	623b      	str	r3, [r7, #32]
 8004f14:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	4b47      	ldr	r3, [pc, #284]	@ (800503c <HAL_RCC_GetSysClockFreq+0x188>)
 8004f20:	fb03 f201 	mul.w	r2, r3, r1
 8004f24:	2300      	movs	r3, #0
 8004f26:	fb00 f303 	mul.w	r3, r0, r3
 8004f2a:	4413      	add	r3, r2
 8004f2c:	4a43      	ldr	r2, [pc, #268]	@ (800503c <HAL_RCC_GetSysClockFreq+0x188>)
 8004f2e:	fba0 1202 	umull	r1, r2, r0, r2
 8004f32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f34:	460a      	mov	r2, r1
 8004f36:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004f38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f3a:	4413      	add	r3, r2
 8004f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f40:	2200      	movs	r2, #0
 8004f42:	61bb      	str	r3, [r7, #24]
 8004f44:	61fa      	str	r2, [r7, #28]
 8004f46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004f4e:	f7fb fa2f 	bl	80003b0 <__aeabi_uldivmod>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	4613      	mov	r3, r2
 8004f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f5a:	e053      	b.n	8005004 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f5c:	4b35      	ldr	r3, [pc, #212]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	099b      	lsrs	r3, r3, #6
 8004f62:	2200      	movs	r2, #0
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	617a      	str	r2, [r7, #20]
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004f6e:	f04f 0b00 	mov.w	fp, #0
 8004f72:	4652      	mov	r2, sl
 8004f74:	465b      	mov	r3, fp
 8004f76:	f04f 0000 	mov.w	r0, #0
 8004f7a:	f04f 0100 	mov.w	r1, #0
 8004f7e:	0159      	lsls	r1, r3, #5
 8004f80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f84:	0150      	lsls	r0, r2, #5
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	ebb2 080a 	subs.w	r8, r2, sl
 8004f8e:	eb63 090b 	sbc.w	r9, r3, fp
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004f9e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004fa2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004fa6:	ebb2 0408 	subs.w	r4, r2, r8
 8004faa:	eb63 0509 	sbc.w	r5, r3, r9
 8004fae:	f04f 0200 	mov.w	r2, #0
 8004fb2:	f04f 0300 	mov.w	r3, #0
 8004fb6:	00eb      	lsls	r3, r5, #3
 8004fb8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fbc:	00e2      	lsls	r2, r4, #3
 8004fbe:	4614      	mov	r4, r2
 8004fc0:	461d      	mov	r5, r3
 8004fc2:	eb14 030a 	adds.w	r3, r4, sl
 8004fc6:	603b      	str	r3, [r7, #0]
 8004fc8:	eb45 030b 	adc.w	r3, r5, fp
 8004fcc:	607b      	str	r3, [r7, #4]
 8004fce:	f04f 0200 	mov.w	r2, #0
 8004fd2:	f04f 0300 	mov.w	r3, #0
 8004fd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004fda:	4629      	mov	r1, r5
 8004fdc:	028b      	lsls	r3, r1, #10
 8004fde:	4621      	mov	r1, r4
 8004fe0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fe4:	4621      	mov	r1, r4
 8004fe6:	028a      	lsls	r2, r1, #10
 8004fe8:	4610      	mov	r0, r2
 8004fea:	4619      	mov	r1, r3
 8004fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fee:	2200      	movs	r2, #0
 8004ff0:	60bb      	str	r3, [r7, #8]
 8004ff2:	60fa      	str	r2, [r7, #12]
 8004ff4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ff8:	f7fb f9da 	bl	80003b0 <__aeabi_uldivmod>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	4613      	mov	r3, r2
 8005002:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005004:	4b0b      	ldr	r3, [pc, #44]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x180>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	0c1b      	lsrs	r3, r3, #16
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	3301      	adds	r3, #1
 8005010:	005b      	lsls	r3, r3, #1
 8005012:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005014:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005018:	fbb2 f3f3 	udiv	r3, r2, r3
 800501c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800501e:	e002      	b.n	8005026 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005020:	4b05      	ldr	r3, [pc, #20]	@ (8005038 <HAL_RCC_GetSysClockFreq+0x184>)
 8005022:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005024:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005028:	4618      	mov	r0, r3
 800502a:	3740      	adds	r7, #64	@ 0x40
 800502c:	46bd      	mov	sp, r7
 800502e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005032:	bf00      	nop
 8005034:	40023800 	.word	0x40023800
 8005038:	00f42400 	.word	0x00f42400
 800503c:	017d7840 	.word	0x017d7840

08005040 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005044:	4b03      	ldr	r3, [pc, #12]	@ (8005054 <HAL_RCC_GetHCLKFreq+0x14>)
 8005046:	681b      	ldr	r3, [r3, #0]
}
 8005048:	4618      	mov	r0, r3
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	20000008 	.word	0x20000008

08005058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800505c:	f7ff fff0 	bl	8005040 <HAL_RCC_GetHCLKFreq>
 8005060:	4602      	mov	r2, r0
 8005062:	4b05      	ldr	r3, [pc, #20]	@ (8005078 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	0b5b      	lsrs	r3, r3, #13
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	4903      	ldr	r1, [pc, #12]	@ (800507c <HAL_RCC_GetPCLK2Freq+0x24>)
 800506e:	5ccb      	ldrb	r3, [r1, r3]
 8005070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005074:	4618      	mov	r0, r3
 8005076:	bd80      	pop	{r7, pc}
 8005078:	40023800 	.word	0x40023800
 800507c:	0802cce8 	.word	0x0802cce8

08005080 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	220f      	movs	r2, #15
 800508e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005090:	4b12      	ldr	r3, [pc, #72]	@ (80050dc <HAL_RCC_GetClockConfig+0x5c>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f003 0203 	and.w	r2, r3, #3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800509c:	4b0f      	ldr	r3, [pc, #60]	@ (80050dc <HAL_RCC_GetClockConfig+0x5c>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80050a8:	4b0c      	ldr	r3, [pc, #48]	@ (80050dc <HAL_RCC_GetClockConfig+0x5c>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80050b4:	4b09      	ldr	r3, [pc, #36]	@ (80050dc <HAL_RCC_GetClockConfig+0x5c>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	08db      	lsrs	r3, r3, #3
 80050ba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80050c2:	4b07      	ldr	r3, [pc, #28]	@ (80050e0 <HAL_RCC_GetClockConfig+0x60>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 020f 	and.w	r2, r3, #15
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	601a      	str	r2, [r3, #0]
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40023800 	.word	0x40023800
 80050e0:	40023c00 	.word	0x40023c00

080050e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b088      	sub	sp, #32
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80050ec:	2300      	movs	r3, #0
 80050ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80050f0:	2300      	movs	r3, #0
 80050f2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80050f4:	2300      	movs	r3, #0
 80050f6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80050f8:	2300      	movs	r3, #0
 80050fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80050fc:	2300      	movs	r3, #0
 80050fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b00      	cmp	r3, #0
 800510a:	d012      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800510c:	4b69      	ldr	r3, [pc, #420]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	4a68      	ldr	r2, [pc, #416]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005112:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005116:	6093      	str	r3, [r2, #8]
 8005118:	4b66      	ldr	r3, [pc, #408]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005120:	4964      	ldr	r1, [pc, #400]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005122:	4313      	orrs	r3, r2
 8005124:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800512e:	2301      	movs	r3, #1
 8005130:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d017      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800513e:	4b5d      	ldr	r3, [pc, #372]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005140:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005144:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800514c:	4959      	ldr	r1, [pc, #356]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800514e:	4313      	orrs	r3, r2
 8005150:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005158:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800515c:	d101      	bne.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800515e:	2301      	movs	r3, #1
 8005160:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800516a:	2301      	movs	r3, #1
 800516c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d017      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800517a:	4b4e      	ldr	r3, [pc, #312]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800517c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005180:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005188:	494a      	ldr	r1, [pc, #296]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800518a:	4313      	orrs	r3, r2
 800518c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005194:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005198:	d101      	bne.n	800519e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800519a:	2301      	movs	r3, #1
 800519c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80051a6:	2301      	movs	r3, #1
 80051a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80051b6:	2301      	movs	r3, #1
 80051b8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0320 	and.w	r3, r3, #32
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 808b 	beq.w	80052de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051c8:	4b3a      	ldr	r3, [pc, #232]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051cc:	4a39      	ldr	r2, [pc, #228]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80051d4:	4b37      	ldr	r3, [pc, #220]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051dc:	60bb      	str	r3, [r7, #8]
 80051de:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80051e0:	4b35      	ldr	r3, [pc, #212]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a34      	ldr	r2, [pc, #208]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ec:	f7fd f84e 	bl	800228c <HAL_GetTick>
 80051f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051f2:	e008      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051f4:	f7fd f84a 	bl	800228c <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b64      	cmp	r3, #100	@ 0x64
 8005200:	d901      	bls.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e38f      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005206:	4b2c      	ldr	r3, [pc, #176]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800520e:	2b00      	cmp	r3, #0
 8005210:	d0f0      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005212:	4b28      	ldr	r3, [pc, #160]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005216:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800521a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d035      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005226:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	429a      	cmp	r2, r3
 800522e:	d02e      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005230:	4b20      	ldr	r3, [pc, #128]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005234:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005238:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800523a:	4b1e      	ldr	r3, [pc, #120]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800523c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800523e:	4a1d      	ldr	r2, [pc, #116]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005244:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005246:	4b1b      	ldr	r3, [pc, #108]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800524a:	4a1a      	ldr	r2, [pc, #104]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800524c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005250:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005252:	4a18      	ldr	r2, [pc, #96]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005258:	4b16      	ldr	r3, [pc, #88]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800525a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b01      	cmp	r3, #1
 8005262:	d114      	bne.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005264:	f7fd f812 	bl	800228c <HAL_GetTick>
 8005268:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800526a:	e00a      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800526c:	f7fd f80e 	bl	800228c <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800527a:	4293      	cmp	r3, r2
 800527c:	d901      	bls.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e351      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005282:	4b0c      	ldr	r3, [pc, #48]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0ee      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005292:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005296:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800529a:	d111      	bne.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800529c:	4b05      	ldr	r3, [pc, #20]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80052a8:	4b04      	ldr	r3, [pc, #16]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80052aa:	400b      	ands	r3, r1
 80052ac:	4901      	ldr	r1, [pc, #4]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	608b      	str	r3, [r1, #8]
 80052b2:	e00b      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80052b4:	40023800 	.word	0x40023800
 80052b8:	40007000 	.word	0x40007000
 80052bc:	0ffffcff 	.word	0x0ffffcff
 80052c0:	4bac      	ldr	r3, [pc, #688]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	4aab      	ldr	r2, [pc, #684]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052c6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80052ca:	6093      	str	r3, [r2, #8]
 80052cc:	4ba9      	ldr	r3, [pc, #676]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052d8:	49a6      	ldr	r1, [pc, #664]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0310 	and.w	r3, r3, #16
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d010      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052ea:	4ba2      	ldr	r3, [pc, #648]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052f0:	4aa0      	ldr	r2, [pc, #640]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80052fa:	4b9e      	ldr	r3, [pc, #632]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005304:	499b      	ldr	r1, [pc, #620]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005306:	4313      	orrs	r3, r2
 8005308:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00a      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005318:	4b96      	ldr	r3, [pc, #600]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800531a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800531e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005326:	4993      	ldr	r1, [pc, #588]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005328:	4313      	orrs	r3, r2
 800532a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800533a:	4b8e      	ldr	r3, [pc, #568]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800533c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005340:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005348:	498a      	ldr	r1, [pc, #552]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800534a:	4313      	orrs	r3, r2
 800534c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00a      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800535c:	4b85      	ldr	r3, [pc, #532]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800535e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005362:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800536a:	4982      	ldr	r1, [pc, #520]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800536c:	4313      	orrs	r3, r2
 800536e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800537e:	4b7d      	ldr	r3, [pc, #500]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005384:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800538c:	4979      	ldr	r1, [pc, #484]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800538e:	4313      	orrs	r3, r2
 8005390:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00a      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053a0:	4b74      	ldr	r3, [pc, #464]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053a6:	f023 0203 	bic.w	r2, r3, #3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ae:	4971      	ldr	r1, [pc, #452]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053c2:	4b6c      	ldr	r3, [pc, #432]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c8:	f023 020c 	bic.w	r2, r3, #12
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053d0:	4968      	ldr	r1, [pc, #416]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00a      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053e4:	4b63      	ldr	r3, [pc, #396]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ea:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053f2:	4960      	ldr	r1, [pc, #384]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005406:	4b5b      	ldr	r3, [pc, #364]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800540c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005414:	4957      	ldr	r1, [pc, #348]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005416:	4313      	orrs	r3, r2
 8005418:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00a      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005428:	4b52      	ldr	r3, [pc, #328]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800542a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800542e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005436:	494f      	ldr	r1, [pc, #316]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005438:	4313      	orrs	r3, r2
 800543a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800544a:	4b4a      	ldr	r3, [pc, #296]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800544c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005450:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005458:	4946      	ldr	r1, [pc, #280]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800545a:	4313      	orrs	r3, r2
 800545c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00a      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800546c:	4b41      	ldr	r3, [pc, #260]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800546e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005472:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800547a:	493e      	ldr	r1, [pc, #248]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800547c:	4313      	orrs	r3, r2
 800547e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800548e:	4b39      	ldr	r3, [pc, #228]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005494:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800549c:	4935      	ldr	r1, [pc, #212]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00a      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80054b0:	4b30      	ldr	r3, [pc, #192]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054b6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054be:	492d      	ldr	r1, [pc, #180]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d011      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80054d2:	4b28      	ldr	r3, [pc, #160]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054d8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054e0:	4924      	ldr	r1, [pc, #144]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054f0:	d101      	bne.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80054f2:	2301      	movs	r3, #1
 80054f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0308 	and.w	r3, r3, #8
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005502:	2301      	movs	r3, #1
 8005504:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005512:	4b18      	ldr	r3, [pc, #96]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005518:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005520:	4914      	ldr	r1, [pc, #80]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00b      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005534:	4b0f      	ldr	r3, [pc, #60]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800553a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005544:	490b      	ldr	r1, [pc, #44]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005546:	4313      	orrs	r3, r2
 8005548:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00f      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005558:	4b06      	ldr	r3, [pc, #24]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800555a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800555e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005568:	4902      	ldr	r1, [pc, #8]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800556a:	4313      	orrs	r3, r2
 800556c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005570:	e002      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005572:	bf00      	nop
 8005574:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00b      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005584:	4b8a      	ldr	r3, [pc, #552]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005586:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800558a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005594:	4986      	ldr	r1, [pc, #536]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005596:	4313      	orrs	r3, r2
 8005598:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00b      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80055a8:	4b81      	ldr	r3, [pc, #516]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055ae:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055b8:	497d      	ldr	r1, [pc, #500]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d006      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 80d6 	beq.w	8005780 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055d4:	4b76      	ldr	r3, [pc, #472]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a75      	ldr	r2, [pc, #468]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80055de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055e0:	f7fc fe54 	bl	800228c <HAL_GetTick>
 80055e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055e6:	e008      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055e8:	f7fc fe50 	bl	800228c <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b64      	cmp	r3, #100	@ 0x64
 80055f4:	d901      	bls.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e195      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055fa:	4b6d      	ldr	r3, [pc, #436]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1f0      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d021      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005616:	2b00      	cmp	r3, #0
 8005618:	d11d      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800561a:	4b65      	ldr	r3, [pc, #404]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800561c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005620:	0c1b      	lsrs	r3, r3, #16
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005628:	4b61      	ldr	r3, [pc, #388]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800562a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800562e:	0e1b      	lsrs	r3, r3, #24
 8005630:	f003 030f 	and.w	r3, r3, #15
 8005634:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	019a      	lsls	r2, r3, #6
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	041b      	lsls	r3, r3, #16
 8005640:	431a      	orrs	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	061b      	lsls	r3, r3, #24
 8005646:	431a      	orrs	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	071b      	lsls	r3, r3, #28
 800564e:	4958      	ldr	r1, [pc, #352]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005650:	4313      	orrs	r3, r2
 8005652:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d004      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005666:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800566a:	d00a      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005674:	2b00      	cmp	r3, #0
 8005676:	d02e      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005680:	d129      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005682:	4b4b      	ldr	r3, [pc, #300]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005684:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005688:	0c1b      	lsrs	r3, r3, #16
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005690:	4b47      	ldr	r3, [pc, #284]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005692:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005696:	0f1b      	lsrs	r3, r3, #28
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	019a      	lsls	r2, r3, #6
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	041b      	lsls	r3, r3, #16
 80056a8:	431a      	orrs	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	061b      	lsls	r3, r3, #24
 80056b0:	431a      	orrs	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	071b      	lsls	r3, r3, #28
 80056b6:	493e      	ldr	r1, [pc, #248]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80056be:	4b3c      	ldr	r3, [pc, #240]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056c4:	f023 021f 	bic.w	r2, r3, #31
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056cc:	3b01      	subs	r3, #1
 80056ce:	4938      	ldr	r1, [pc, #224]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d01d      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056e2:	4b33      	ldr	r3, [pc, #204]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056e8:	0e1b      	lsrs	r3, r3, #24
 80056ea:	f003 030f 	and.w	r3, r3, #15
 80056ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056f0:	4b2f      	ldr	r3, [pc, #188]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056f6:	0f1b      	lsrs	r3, r3, #28
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	019a      	lsls	r2, r3, #6
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	041b      	lsls	r3, r3, #16
 800570a:	431a      	orrs	r2, r3
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	061b      	lsls	r3, r3, #24
 8005710:	431a      	orrs	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	071b      	lsls	r3, r3, #28
 8005716:	4926      	ldr	r1, [pc, #152]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005718:	4313      	orrs	r3, r2
 800571a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d011      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	019a      	lsls	r2, r3, #6
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	041b      	lsls	r3, r3, #16
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	061b      	lsls	r3, r3, #24
 800573e:	431a      	orrs	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	071b      	lsls	r3, r3, #28
 8005746:	491a      	ldr	r1, [pc, #104]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005748:	4313      	orrs	r3, r2
 800574a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800574e:	4b18      	ldr	r3, [pc, #96]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a17      	ldr	r2, [pc, #92]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005754:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005758:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800575a:	f7fc fd97 	bl	800228c <HAL_GetTick>
 800575e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005760:	e008      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005762:	f7fc fd93 	bl	800228c <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	2b64      	cmp	r3, #100	@ 0x64
 800576e:	d901      	bls.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e0d8      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005774:	4b0e      	ldr	r3, [pc, #56]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d0f0      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	2b01      	cmp	r3, #1
 8005784:	f040 80ce 	bne.w	8005924 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005788:	4b09      	ldr	r3, [pc, #36]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a08      	ldr	r2, [pc, #32]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800578e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005792:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005794:	f7fc fd7a 	bl	800228c <HAL_GetTick>
 8005798:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800579a:	e00b      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800579c:	f7fc fd76 	bl	800228c <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b64      	cmp	r3, #100	@ 0x64
 80057a8:	d904      	bls.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e0bb      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80057ae:	bf00      	nop
 80057b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057b4:	4b5e      	ldr	r3, [pc, #376]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057c0:	d0ec      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d009      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d02e      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d12a      	bne.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80057ea:	4b51      	ldr	r3, [pc, #324]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f0:	0c1b      	lsrs	r3, r3, #16
 80057f2:	f003 0303 	and.w	r3, r3, #3
 80057f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057f8:	4b4d      	ldr	r3, [pc, #308]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057fe:	0f1b      	lsrs	r3, r3, #28
 8005800:	f003 0307 	and.w	r3, r3, #7
 8005804:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	019a      	lsls	r2, r3, #6
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	041b      	lsls	r3, r3, #16
 8005810:	431a      	orrs	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	061b      	lsls	r3, r3, #24
 8005818:	431a      	orrs	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	071b      	lsls	r3, r3, #28
 800581e:	4944      	ldr	r1, [pc, #272]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005820:	4313      	orrs	r3, r2
 8005822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005826:	4b42      	ldr	r3, [pc, #264]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005828:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800582c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005834:	3b01      	subs	r3, #1
 8005836:	021b      	lsls	r3, r3, #8
 8005838:	493d      	ldr	r1, [pc, #244]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800583a:	4313      	orrs	r3, r2
 800583c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d022      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005850:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005854:	d11d      	bne.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005856:	4b36      	ldr	r3, [pc, #216]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800585c:	0e1b      	lsrs	r3, r3, #24
 800585e:	f003 030f 	and.w	r3, r3, #15
 8005862:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005864:	4b32      	ldr	r3, [pc, #200]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800586a:	0f1b      	lsrs	r3, r3, #28
 800586c:	f003 0307 	and.w	r3, r3, #7
 8005870:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	019a      	lsls	r2, r3, #6
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	041b      	lsls	r3, r3, #16
 800587e:	431a      	orrs	r2, r3
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	061b      	lsls	r3, r3, #24
 8005884:	431a      	orrs	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	071b      	lsls	r3, r3, #28
 800588a:	4929      	ldr	r1, [pc, #164]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800588c:	4313      	orrs	r3, r2
 800588e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	2b00      	cmp	r3, #0
 800589c:	d028      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800589e:	4b24      	ldr	r3, [pc, #144]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058a4:	0e1b      	lsrs	r3, r3, #24
 80058a6:	f003 030f 	and.w	r3, r3, #15
 80058aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80058ac:	4b20      	ldr	r3, [pc, #128]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b2:	0c1b      	lsrs	r3, r3, #16
 80058b4:	f003 0303 	and.w	r3, r3, #3
 80058b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	019a      	lsls	r2, r3, #6
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	041b      	lsls	r3, r3, #16
 80058c4:	431a      	orrs	r2, r3
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	061b      	lsls	r3, r3, #24
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	071b      	lsls	r3, r3, #28
 80058d2:	4917      	ldr	r1, [pc, #92]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80058da:	4b15      	ldr	r3, [pc, #84]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e8:	4911      	ldr	r1, [pc, #68]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80058f0:	4b0f      	ldr	r3, [pc, #60]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a0e      	ldr	r2, [pc, #56]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058fc:	f7fc fcc6 	bl	800228c <HAL_GetTick>
 8005900:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005902:	e008      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005904:	f7fc fcc2 	bl	800228c <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b64      	cmp	r3, #100	@ 0x64
 8005910:	d901      	bls.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e007      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005916:	4b06      	ldr	r3, [pc, #24]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800591e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005922:	d1ef      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3720      	adds	r7, #32
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	40023800 	.word	0x40023800

08005934 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d101      	bne.n	8005946 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e049      	b.n	80059da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d106      	bne.n	8005960 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f841 	bl	80059e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	3304      	adds	r3, #4
 8005970:	4619      	mov	r1, r3
 8005972:	4610      	mov	r0, r2
 8005974:	f000 f9e8 	bl	8005d48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b083      	sub	sp, #12
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
	...

080059f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d001      	beq.n	8005a10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e054      	b.n	8005aba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2202      	movs	r2, #2
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0201 	orr.w	r2, r2, #1
 8005a26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a26      	ldr	r2, [pc, #152]	@ (8005ac8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d022      	beq.n	8005a78 <HAL_TIM_Base_Start_IT+0x80>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a3a:	d01d      	beq.n	8005a78 <HAL_TIM_Base_Start_IT+0x80>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a22      	ldr	r2, [pc, #136]	@ (8005acc <HAL_TIM_Base_Start_IT+0xd4>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d018      	beq.n	8005a78 <HAL_TIM_Base_Start_IT+0x80>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a21      	ldr	r2, [pc, #132]	@ (8005ad0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d013      	beq.n	8005a78 <HAL_TIM_Base_Start_IT+0x80>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a1f      	ldr	r2, [pc, #124]	@ (8005ad4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d00e      	beq.n	8005a78 <HAL_TIM_Base_Start_IT+0x80>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8005ad8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d009      	beq.n	8005a78 <HAL_TIM_Base_Start_IT+0x80>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a1c      	ldr	r2, [pc, #112]	@ (8005adc <HAL_TIM_Base_Start_IT+0xe4>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d004      	beq.n	8005a78 <HAL_TIM_Base_Start_IT+0x80>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a1b      	ldr	r2, [pc, #108]	@ (8005ae0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d115      	bne.n	8005aa4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689a      	ldr	r2, [r3, #8]
 8005a7e:	4b19      	ldr	r3, [pc, #100]	@ (8005ae4 <HAL_TIM_Base_Start_IT+0xec>)
 8005a80:	4013      	ands	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2b06      	cmp	r3, #6
 8005a88:	d015      	beq.n	8005ab6 <HAL_TIM_Base_Start_IT+0xbe>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a90:	d011      	beq.n	8005ab6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f042 0201 	orr.w	r2, r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aa2:	e008      	b.n	8005ab6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f042 0201 	orr.w	r2, r2, #1
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	e000      	b.n	8005ab8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	40010000 	.word	0x40010000
 8005acc:	40000400 	.word	0x40000400
 8005ad0:	40000800 	.word	0x40000800
 8005ad4:	40000c00 	.word	0x40000c00
 8005ad8:	40010400 	.word	0x40010400
 8005adc:	40014000 	.word	0x40014000
 8005ae0:	40001800 	.word	0x40001800
 8005ae4:	00010007 	.word	0x00010007

08005ae8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d020      	beq.n	8005b4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d01b      	beq.n	8005b4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f06f 0202 	mvn.w	r2, #2
 8005b1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	f003 0303 	and.w	r3, r3, #3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f8e9 	bl	8005d0a <HAL_TIM_IC_CaptureCallback>
 8005b38:	e005      	b.n	8005b46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f8db 	bl	8005cf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f8ec 	bl	8005d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f003 0304 	and.w	r3, r3, #4
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d020      	beq.n	8005b98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f003 0304 	and.w	r3, r3, #4
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d01b      	beq.n	8005b98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f06f 0204 	mvn.w	r2, #4
 8005b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f8c3 	bl	8005d0a <HAL_TIM_IC_CaptureCallback>
 8005b84:	e005      	b.n	8005b92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f8b5 	bl	8005cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 f8c6 	bl	8005d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	f003 0308 	and.w	r3, r3, #8
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d020      	beq.n	8005be4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f003 0308 	and.w	r3, r3, #8
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d01b      	beq.n	8005be4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f06f 0208 	mvn.w	r2, #8
 8005bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2204      	movs	r2, #4
 8005bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	f003 0303 	and.w	r3, r3, #3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f89d 	bl	8005d0a <HAL_TIM_IC_CaptureCallback>
 8005bd0:	e005      	b.n	8005bde <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f88f 	bl	8005cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f8a0 	bl	8005d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	f003 0310 	and.w	r3, r3, #16
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d020      	beq.n	8005c30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f003 0310 	and.w	r3, r3, #16
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d01b      	beq.n	8005c30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f06f 0210 	mvn.w	r2, #16
 8005c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2208      	movs	r2, #8
 8005c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f877 	bl	8005d0a <HAL_TIM_IC_CaptureCallback>
 8005c1c:	e005      	b.n	8005c2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f869 	bl	8005cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f87a 	bl	8005d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00c      	beq.n	8005c54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d007      	beq.n	8005c54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f06f 0201 	mvn.w	r2, #1
 8005c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7fb ff1e 	bl	8001a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d104      	bne.n	8005c68 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00c      	beq.n	8005c82 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d007      	beq.n	8005c82 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f913 	bl	8005ea8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00c      	beq.n	8005ca6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d007      	beq.n	8005ca6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f90b 	bl	8005ebc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00c      	beq.n	8005cca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d007      	beq.n	8005cca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f834 	bl	8005d32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f003 0320 	and.w	r3, r3, #32
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00c      	beq.n	8005cee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f003 0320 	and.w	r3, r3, #32
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d007      	beq.n	8005cee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f06f 0220 	mvn.w	r2, #32
 8005ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 f8d3 	bl	8005e94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cee:	bf00      	nop
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b083      	sub	sp, #12
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cfe:	bf00      	nop
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b083      	sub	sp, #12
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d12:	bf00      	nop
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b083      	sub	sp, #12
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b083      	sub	sp, #12
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d3a:	bf00      	nop
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
	...

08005d48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a43      	ldr	r2, [pc, #268]	@ (8005e68 <TIM_Base_SetConfig+0x120>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d013      	beq.n	8005d88 <TIM_Base_SetConfig+0x40>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d66:	d00f      	beq.n	8005d88 <TIM_Base_SetConfig+0x40>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a40      	ldr	r2, [pc, #256]	@ (8005e6c <TIM_Base_SetConfig+0x124>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d00b      	beq.n	8005d88 <TIM_Base_SetConfig+0x40>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a3f      	ldr	r2, [pc, #252]	@ (8005e70 <TIM_Base_SetConfig+0x128>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d007      	beq.n	8005d88 <TIM_Base_SetConfig+0x40>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a3e      	ldr	r2, [pc, #248]	@ (8005e74 <TIM_Base_SetConfig+0x12c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d003      	beq.n	8005d88 <TIM_Base_SetConfig+0x40>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a3d      	ldr	r2, [pc, #244]	@ (8005e78 <TIM_Base_SetConfig+0x130>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d108      	bne.n	8005d9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a32      	ldr	r2, [pc, #200]	@ (8005e68 <TIM_Base_SetConfig+0x120>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d02b      	beq.n	8005dfa <TIM_Base_SetConfig+0xb2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005da8:	d027      	beq.n	8005dfa <TIM_Base_SetConfig+0xb2>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a2f      	ldr	r2, [pc, #188]	@ (8005e6c <TIM_Base_SetConfig+0x124>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d023      	beq.n	8005dfa <TIM_Base_SetConfig+0xb2>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a2e      	ldr	r2, [pc, #184]	@ (8005e70 <TIM_Base_SetConfig+0x128>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d01f      	beq.n	8005dfa <TIM_Base_SetConfig+0xb2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a2d      	ldr	r2, [pc, #180]	@ (8005e74 <TIM_Base_SetConfig+0x12c>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d01b      	beq.n	8005dfa <TIM_Base_SetConfig+0xb2>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a2c      	ldr	r2, [pc, #176]	@ (8005e78 <TIM_Base_SetConfig+0x130>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d017      	beq.n	8005dfa <TIM_Base_SetConfig+0xb2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a2b      	ldr	r2, [pc, #172]	@ (8005e7c <TIM_Base_SetConfig+0x134>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d013      	beq.n	8005dfa <TIM_Base_SetConfig+0xb2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a2a      	ldr	r2, [pc, #168]	@ (8005e80 <TIM_Base_SetConfig+0x138>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d00f      	beq.n	8005dfa <TIM_Base_SetConfig+0xb2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a29      	ldr	r2, [pc, #164]	@ (8005e84 <TIM_Base_SetConfig+0x13c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d00b      	beq.n	8005dfa <TIM_Base_SetConfig+0xb2>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a28      	ldr	r2, [pc, #160]	@ (8005e88 <TIM_Base_SetConfig+0x140>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d007      	beq.n	8005dfa <TIM_Base_SetConfig+0xb2>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a27      	ldr	r2, [pc, #156]	@ (8005e8c <TIM_Base_SetConfig+0x144>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d003      	beq.n	8005dfa <TIM_Base_SetConfig+0xb2>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a26      	ldr	r2, [pc, #152]	@ (8005e90 <TIM_Base_SetConfig+0x148>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d108      	bne.n	8005e0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	689a      	ldr	r2, [r3, #8]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a0e      	ldr	r2, [pc, #56]	@ (8005e68 <TIM_Base_SetConfig+0x120>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d003      	beq.n	8005e3a <TIM_Base_SetConfig+0xf2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a10      	ldr	r2, [pc, #64]	@ (8005e78 <TIM_Base_SetConfig+0x130>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d103      	bne.n	8005e42 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	691a      	ldr	r2, [r3, #16]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f043 0204 	orr.w	r2, r3, #4
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	601a      	str	r2, [r3, #0]
}
 8005e5a:	bf00      	nop
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	40010000 	.word	0x40010000
 8005e6c:	40000400 	.word	0x40000400
 8005e70:	40000800 	.word	0x40000800
 8005e74:	40000c00 	.word	0x40000c00
 8005e78:	40010400 	.word	0x40010400
 8005e7c:	40014000 	.word	0x40014000
 8005e80:	40014400 	.word	0x40014400
 8005e84:	40014800 	.word	0x40014800
 8005e88:	40001800 	.word	0x40001800
 8005e8c:	40001c00 	.word	0x40001c00
 8005e90:	40002000 	.word	0x40002000

08005e94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005ed0:	b5b0      	push	{r4, r5, r7, lr}
 8005ed2:	b08c      	sub	sp, #48	@ 0x30
 8005ed4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005ed6:	4b8f      	ldr	r3, [pc, #572]	@ (8006114 <MX_LWIP_Init+0x244>)
 8005ed8:	22c0      	movs	r2, #192	@ 0xc0
 8005eda:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005edc:	4b8d      	ldr	r3, [pc, #564]	@ (8006114 <MX_LWIP_Init+0x244>)
 8005ede:	22a8      	movs	r2, #168	@ 0xa8
 8005ee0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 10;
 8005ee2:	4b8c      	ldr	r3, [pc, #560]	@ (8006114 <MX_LWIP_Init+0x244>)
 8005ee4:	220a      	movs	r2, #10
 8005ee6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 23;
 8005ee8:	4b8a      	ldr	r3, [pc, #552]	@ (8006114 <MX_LWIP_Init+0x244>)
 8005eea:	2217      	movs	r2, #23
 8005eec:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005eee:	4b8a      	ldr	r3, [pc, #552]	@ (8006118 <MX_LWIP_Init+0x248>)
 8005ef0:	22ff      	movs	r2, #255	@ 0xff
 8005ef2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005ef4:	4b88      	ldr	r3, [pc, #544]	@ (8006118 <MX_LWIP_Init+0x248>)
 8005ef6:	22ff      	movs	r2, #255	@ 0xff
 8005ef8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005efa:	4b87      	ldr	r3, [pc, #540]	@ (8006118 <MX_LWIP_Init+0x248>)
 8005efc:	22ff      	movs	r2, #255	@ 0xff
 8005efe:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005f00:	4b85      	ldr	r3, [pc, #532]	@ (8006118 <MX_LWIP_Init+0x248>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8005f06:	4b85      	ldr	r3, [pc, #532]	@ (800611c <MX_LWIP_Init+0x24c>)
 8005f08:	22c0      	movs	r2, #192	@ 0xc0
 8005f0a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005f0c:	4b83      	ldr	r3, [pc, #524]	@ (800611c <MX_LWIP_Init+0x24c>)
 8005f0e:	22a8      	movs	r2, #168	@ 0xa8
 8005f10:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 10;
 8005f12:	4b82      	ldr	r3, [pc, #520]	@ (800611c <MX_LWIP_Init+0x24c>)
 8005f14:	220a      	movs	r2, #10
 8005f16:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005f18:	4b80      	ldr	r3, [pc, #512]	@ (800611c <MX_LWIP_Init+0x24c>)
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005f1e:	2100      	movs	r1, #0
 8005f20:	2000      	movs	r0, #0
 8005f22:	f007 fc93 	bl	800d84c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005f26:	4b7b      	ldr	r3, [pc, #492]	@ (8006114 <MX_LWIP_Init+0x244>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	061a      	lsls	r2, r3, #24
 8005f2c:	4b79      	ldr	r3, [pc, #484]	@ (8006114 <MX_LWIP_Init+0x244>)
 8005f2e:	785b      	ldrb	r3, [r3, #1]
 8005f30:	041b      	lsls	r3, r3, #16
 8005f32:	431a      	orrs	r2, r3
 8005f34:	4b77      	ldr	r3, [pc, #476]	@ (8006114 <MX_LWIP_Init+0x244>)
 8005f36:	789b      	ldrb	r3, [r3, #2]
 8005f38:	021b      	lsls	r3, r3, #8
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	4a75      	ldr	r2, [pc, #468]	@ (8006114 <MX_LWIP_Init+0x244>)
 8005f3e:	78d2      	ldrb	r2, [r2, #3]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	061a      	lsls	r2, r3, #24
 8005f44:	4b73      	ldr	r3, [pc, #460]	@ (8006114 <MX_LWIP_Init+0x244>)
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	0619      	lsls	r1, r3, #24
 8005f4a:	4b72      	ldr	r3, [pc, #456]	@ (8006114 <MX_LWIP_Init+0x244>)
 8005f4c:	785b      	ldrb	r3, [r3, #1]
 8005f4e:	041b      	lsls	r3, r3, #16
 8005f50:	4319      	orrs	r1, r3
 8005f52:	4b70      	ldr	r3, [pc, #448]	@ (8006114 <MX_LWIP_Init+0x244>)
 8005f54:	789b      	ldrb	r3, [r3, #2]
 8005f56:	021b      	lsls	r3, r3, #8
 8005f58:	430b      	orrs	r3, r1
 8005f5a:	496e      	ldr	r1, [pc, #440]	@ (8006114 <MX_LWIP_Init+0x244>)
 8005f5c:	78c9      	ldrb	r1, [r1, #3]
 8005f5e:	430b      	orrs	r3, r1
 8005f60:	021b      	lsls	r3, r3, #8
 8005f62:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005f66:	431a      	orrs	r2, r3
 8005f68:	4b6a      	ldr	r3, [pc, #424]	@ (8006114 <MX_LWIP_Init+0x244>)
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	0619      	lsls	r1, r3, #24
 8005f6e:	4b69      	ldr	r3, [pc, #420]	@ (8006114 <MX_LWIP_Init+0x244>)
 8005f70:	785b      	ldrb	r3, [r3, #1]
 8005f72:	041b      	lsls	r3, r3, #16
 8005f74:	4319      	orrs	r1, r3
 8005f76:	4b67      	ldr	r3, [pc, #412]	@ (8006114 <MX_LWIP_Init+0x244>)
 8005f78:	789b      	ldrb	r3, [r3, #2]
 8005f7a:	021b      	lsls	r3, r3, #8
 8005f7c:	430b      	orrs	r3, r1
 8005f7e:	4965      	ldr	r1, [pc, #404]	@ (8006114 <MX_LWIP_Init+0x244>)
 8005f80:	78c9      	ldrb	r1, [r1, #3]
 8005f82:	430b      	orrs	r3, r1
 8005f84:	0a1b      	lsrs	r3, r3, #8
 8005f86:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	4b61      	ldr	r3, [pc, #388]	@ (8006114 <MX_LWIP_Init+0x244>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	0619      	lsls	r1, r3, #24
 8005f92:	4b60      	ldr	r3, [pc, #384]	@ (8006114 <MX_LWIP_Init+0x244>)
 8005f94:	785b      	ldrb	r3, [r3, #1]
 8005f96:	041b      	lsls	r3, r3, #16
 8005f98:	4319      	orrs	r1, r3
 8005f9a:	4b5e      	ldr	r3, [pc, #376]	@ (8006114 <MX_LWIP_Init+0x244>)
 8005f9c:	789b      	ldrb	r3, [r3, #2]
 8005f9e:	021b      	lsls	r3, r3, #8
 8005fa0:	430b      	orrs	r3, r1
 8005fa2:	495c      	ldr	r1, [pc, #368]	@ (8006114 <MX_LWIP_Init+0x244>)
 8005fa4:	78c9      	ldrb	r1, [r1, #3]
 8005fa6:	430b      	orrs	r3, r1
 8005fa8:	0e1b      	lsrs	r3, r3, #24
 8005faa:	4313      	orrs	r3, r2
 8005fac:	4a5c      	ldr	r2, [pc, #368]	@ (8006120 <MX_LWIP_Init+0x250>)
 8005fae:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005fb0:	4b59      	ldr	r3, [pc, #356]	@ (8006118 <MX_LWIP_Init+0x248>)
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	061a      	lsls	r2, r3, #24
 8005fb6:	4b58      	ldr	r3, [pc, #352]	@ (8006118 <MX_LWIP_Init+0x248>)
 8005fb8:	785b      	ldrb	r3, [r3, #1]
 8005fba:	041b      	lsls	r3, r3, #16
 8005fbc:	431a      	orrs	r2, r3
 8005fbe:	4b56      	ldr	r3, [pc, #344]	@ (8006118 <MX_LWIP_Init+0x248>)
 8005fc0:	789b      	ldrb	r3, [r3, #2]
 8005fc2:	021b      	lsls	r3, r3, #8
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	4a54      	ldr	r2, [pc, #336]	@ (8006118 <MX_LWIP_Init+0x248>)
 8005fc8:	78d2      	ldrb	r2, [r2, #3]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	061a      	lsls	r2, r3, #24
 8005fce:	4b52      	ldr	r3, [pc, #328]	@ (8006118 <MX_LWIP_Init+0x248>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	0619      	lsls	r1, r3, #24
 8005fd4:	4b50      	ldr	r3, [pc, #320]	@ (8006118 <MX_LWIP_Init+0x248>)
 8005fd6:	785b      	ldrb	r3, [r3, #1]
 8005fd8:	041b      	lsls	r3, r3, #16
 8005fda:	4319      	orrs	r1, r3
 8005fdc:	4b4e      	ldr	r3, [pc, #312]	@ (8006118 <MX_LWIP_Init+0x248>)
 8005fde:	789b      	ldrb	r3, [r3, #2]
 8005fe0:	021b      	lsls	r3, r3, #8
 8005fe2:	430b      	orrs	r3, r1
 8005fe4:	494c      	ldr	r1, [pc, #304]	@ (8006118 <MX_LWIP_Init+0x248>)
 8005fe6:	78c9      	ldrb	r1, [r1, #3]
 8005fe8:	430b      	orrs	r3, r1
 8005fea:	021b      	lsls	r3, r3, #8
 8005fec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	4b49      	ldr	r3, [pc, #292]	@ (8006118 <MX_LWIP_Init+0x248>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	0619      	lsls	r1, r3, #24
 8005ff8:	4b47      	ldr	r3, [pc, #284]	@ (8006118 <MX_LWIP_Init+0x248>)
 8005ffa:	785b      	ldrb	r3, [r3, #1]
 8005ffc:	041b      	lsls	r3, r3, #16
 8005ffe:	4319      	orrs	r1, r3
 8006000:	4b45      	ldr	r3, [pc, #276]	@ (8006118 <MX_LWIP_Init+0x248>)
 8006002:	789b      	ldrb	r3, [r3, #2]
 8006004:	021b      	lsls	r3, r3, #8
 8006006:	430b      	orrs	r3, r1
 8006008:	4943      	ldr	r1, [pc, #268]	@ (8006118 <MX_LWIP_Init+0x248>)
 800600a:	78c9      	ldrb	r1, [r1, #3]
 800600c:	430b      	orrs	r3, r1
 800600e:	0a1b      	lsrs	r3, r3, #8
 8006010:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006014:	431a      	orrs	r2, r3
 8006016:	4b40      	ldr	r3, [pc, #256]	@ (8006118 <MX_LWIP_Init+0x248>)
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	0619      	lsls	r1, r3, #24
 800601c:	4b3e      	ldr	r3, [pc, #248]	@ (8006118 <MX_LWIP_Init+0x248>)
 800601e:	785b      	ldrb	r3, [r3, #1]
 8006020:	041b      	lsls	r3, r3, #16
 8006022:	4319      	orrs	r1, r3
 8006024:	4b3c      	ldr	r3, [pc, #240]	@ (8006118 <MX_LWIP_Init+0x248>)
 8006026:	789b      	ldrb	r3, [r3, #2]
 8006028:	021b      	lsls	r3, r3, #8
 800602a:	430b      	orrs	r3, r1
 800602c:	493a      	ldr	r1, [pc, #232]	@ (8006118 <MX_LWIP_Init+0x248>)
 800602e:	78c9      	ldrb	r1, [r1, #3]
 8006030:	430b      	orrs	r3, r1
 8006032:	0e1b      	lsrs	r3, r3, #24
 8006034:	4313      	orrs	r3, r2
 8006036:	4a3b      	ldr	r2, [pc, #236]	@ (8006124 <MX_LWIP_Init+0x254>)
 8006038:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800603a:	4b38      	ldr	r3, [pc, #224]	@ (800611c <MX_LWIP_Init+0x24c>)
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	061a      	lsls	r2, r3, #24
 8006040:	4b36      	ldr	r3, [pc, #216]	@ (800611c <MX_LWIP_Init+0x24c>)
 8006042:	785b      	ldrb	r3, [r3, #1]
 8006044:	041b      	lsls	r3, r3, #16
 8006046:	431a      	orrs	r2, r3
 8006048:	4b34      	ldr	r3, [pc, #208]	@ (800611c <MX_LWIP_Init+0x24c>)
 800604a:	789b      	ldrb	r3, [r3, #2]
 800604c:	021b      	lsls	r3, r3, #8
 800604e:	4313      	orrs	r3, r2
 8006050:	4a32      	ldr	r2, [pc, #200]	@ (800611c <MX_LWIP_Init+0x24c>)
 8006052:	78d2      	ldrb	r2, [r2, #3]
 8006054:	4313      	orrs	r3, r2
 8006056:	061a      	lsls	r2, r3, #24
 8006058:	4b30      	ldr	r3, [pc, #192]	@ (800611c <MX_LWIP_Init+0x24c>)
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	0619      	lsls	r1, r3, #24
 800605e:	4b2f      	ldr	r3, [pc, #188]	@ (800611c <MX_LWIP_Init+0x24c>)
 8006060:	785b      	ldrb	r3, [r3, #1]
 8006062:	041b      	lsls	r3, r3, #16
 8006064:	4319      	orrs	r1, r3
 8006066:	4b2d      	ldr	r3, [pc, #180]	@ (800611c <MX_LWIP_Init+0x24c>)
 8006068:	789b      	ldrb	r3, [r3, #2]
 800606a:	021b      	lsls	r3, r3, #8
 800606c:	430b      	orrs	r3, r1
 800606e:	492b      	ldr	r1, [pc, #172]	@ (800611c <MX_LWIP_Init+0x24c>)
 8006070:	78c9      	ldrb	r1, [r1, #3]
 8006072:	430b      	orrs	r3, r1
 8006074:	021b      	lsls	r3, r3, #8
 8006076:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800607a:	431a      	orrs	r2, r3
 800607c:	4b27      	ldr	r3, [pc, #156]	@ (800611c <MX_LWIP_Init+0x24c>)
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	0619      	lsls	r1, r3, #24
 8006082:	4b26      	ldr	r3, [pc, #152]	@ (800611c <MX_LWIP_Init+0x24c>)
 8006084:	785b      	ldrb	r3, [r3, #1]
 8006086:	041b      	lsls	r3, r3, #16
 8006088:	4319      	orrs	r1, r3
 800608a:	4b24      	ldr	r3, [pc, #144]	@ (800611c <MX_LWIP_Init+0x24c>)
 800608c:	789b      	ldrb	r3, [r3, #2]
 800608e:	021b      	lsls	r3, r3, #8
 8006090:	430b      	orrs	r3, r1
 8006092:	4922      	ldr	r1, [pc, #136]	@ (800611c <MX_LWIP_Init+0x24c>)
 8006094:	78c9      	ldrb	r1, [r1, #3]
 8006096:	430b      	orrs	r3, r1
 8006098:	0a1b      	lsrs	r3, r3, #8
 800609a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800609e:	431a      	orrs	r2, r3
 80060a0:	4b1e      	ldr	r3, [pc, #120]	@ (800611c <MX_LWIP_Init+0x24c>)
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	0619      	lsls	r1, r3, #24
 80060a6:	4b1d      	ldr	r3, [pc, #116]	@ (800611c <MX_LWIP_Init+0x24c>)
 80060a8:	785b      	ldrb	r3, [r3, #1]
 80060aa:	041b      	lsls	r3, r3, #16
 80060ac:	4319      	orrs	r1, r3
 80060ae:	4b1b      	ldr	r3, [pc, #108]	@ (800611c <MX_LWIP_Init+0x24c>)
 80060b0:	789b      	ldrb	r3, [r3, #2]
 80060b2:	021b      	lsls	r3, r3, #8
 80060b4:	430b      	orrs	r3, r1
 80060b6:	4919      	ldr	r1, [pc, #100]	@ (800611c <MX_LWIP_Init+0x24c>)
 80060b8:	78c9      	ldrb	r1, [r1, #3]
 80060ba:	430b      	orrs	r3, r1
 80060bc:	0e1b      	lsrs	r3, r3, #24
 80060be:	4313      	orrs	r3, r2
 80060c0:	4a19      	ldr	r2, [pc, #100]	@ (8006128 <MX_LWIP_Init+0x258>)
 80060c2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80060c4:	4b19      	ldr	r3, [pc, #100]	@ (800612c <MX_LWIP_Init+0x25c>)
 80060c6:	9302      	str	r3, [sp, #8]
 80060c8:	4b19      	ldr	r3, [pc, #100]	@ (8006130 <MX_LWIP_Init+0x260>)
 80060ca:	9301      	str	r3, [sp, #4]
 80060cc:	2300      	movs	r3, #0
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	4b15      	ldr	r3, [pc, #84]	@ (8006128 <MX_LWIP_Init+0x258>)
 80060d2:	4a14      	ldr	r2, [pc, #80]	@ (8006124 <MX_LWIP_Init+0x254>)
 80060d4:	4912      	ldr	r1, [pc, #72]	@ (8006120 <MX_LWIP_Init+0x250>)
 80060d6:	4817      	ldr	r0, [pc, #92]	@ (8006134 <MX_LWIP_Init+0x264>)
 80060d8:	f008 f97e 	bl	800e3d8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80060dc:	4815      	ldr	r0, [pc, #84]	@ (8006134 <MX_LWIP_Init+0x264>)
 80060de:	f008 fb2d 	bl	800e73c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80060e2:	4814      	ldr	r0, [pc, #80]	@ (8006134 <MX_LWIP_Init+0x264>)
 80060e4:	f008 fb3a 	bl	800e75c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80060e8:	4913      	ldr	r1, [pc, #76]	@ (8006138 <MX_LWIP_Init+0x268>)
 80060ea:	4812      	ldr	r0, [pc, #72]	@ (8006134 <MX_LWIP_Init+0x264>)
 80060ec:	f008 fc38 	bl	800e960 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 80060f0:	4b12      	ldr	r3, [pc, #72]	@ (800613c <MX_LWIP_Init+0x26c>)
 80060f2:	1d3c      	adds	r4, r7, #4
 80060f4:	461d      	mov	r5, r3
 80060f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80060fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8006102:	1d3b      	adds	r3, r7, #4
 8006104:	490b      	ldr	r1, [pc, #44]	@ (8006134 <MX_LWIP_Init+0x264>)
 8006106:	4618      	mov	r0, r3
 8006108:	f000 fdcb 	bl	8006ca2 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800610c:	bf00      	nop
 800610e:	3720      	adds	r7, #32
 8006110:	46bd      	mov	sp, r7
 8006112:	bdb0      	pop	{r4, r5, r7, pc}
 8006114:	20000edc 	.word	0x20000edc
 8006118:	20000ee0 	.word	0x20000ee0
 800611c:	20000ee4 	.word	0x20000ee4
 8006120:	20000ed0 	.word	0x20000ed0
 8006124:	20000ed4 	.word	0x20000ed4
 8006128:	20000ed8 	.word	0x20000ed8
 800612c:	0800d75d 	.word	0x0800d75d
 8006130:	080066d9 	.word	0x080066d9
 8006134:	20000e9c 	.word	0x20000e9c
 8006138:	08006141 	.word	0x08006141
 800613c:	080292e0 	.word	0x080292e0

08006140 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8006154:	b480      	push	{r7}
 8006156:	b087      	sub	sp, #28
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8006166:	2320      	movs	r3, #32
 8006168:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800616a:	f3bf 8f4f 	dsb	sy
}
 800616e:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8006170:	e00b      	b.n	800618a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8006172:	4a0d      	ldr	r2, [pc, #52]	@ (80061a8 <SCB_InvalidateDCache_by_Addr+0x54>)
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4413      	add	r3, r2
 8006180:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	2b00      	cmp	r3, #0
 800618e:	dcf0      	bgt.n	8006172 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8006190:	f3bf 8f4f 	dsb	sy
}
 8006194:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006196:	f3bf 8f6f 	isb	sy
}
 800619a:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800619c:	bf00      	nop
 800619e:	371c      	adds	r7, #28
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	e000ed00 	.word	0xe000ed00

080061ac <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80061b4:	4b04      	ldr	r3, [pc, #16]	@ (80061c8 <HAL_ETH_RxCpltCallback+0x1c>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 fefb 	bl	8006fb4 <osSemaphoreRelease>
}
 80061be:	bf00      	nop
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	20005874 	.word	0x20005874

080061cc <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80061d4:	4b04      	ldr	r3, [pc, #16]	@ (80061e8 <HAL_ETH_TxCpltCallback+0x1c>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 feeb 	bl	8006fb4 <osSemaphoreRelease>
}
 80061de:	bf00      	nop
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20005878 	.word	0x20005878

080061ec <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7fc ffb0 	bl	800315a <HAL_ETH_GetDMAError>
 80061fa:	4603      	mov	r3, r0
 80061fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006200:	2b80      	cmp	r3, #128	@ 0x80
 8006202:	d104      	bne.n	800620e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8006204:	4b04      	ldr	r3, [pc, #16]	@ (8006218 <HAL_ETH_ErrorCallback+0x2c>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4618      	mov	r0, r3
 800620a:	f000 fed3 	bl	8006fb4 <osSemaphoreRelease>
  }
}
 800620e:	bf00      	nop
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	20005874 	.word	0x20005874

0800621c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800621c:	b5b0      	push	{r4, r5, r7, lr}
 800621e:	b0b4      	sub	sp, #208	@ 0xd0
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8006224:	2300      	movs	r3, #0
 8006226:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  uint32_t duplex, speed = 0;
 800622a:	2300      	movs	r3, #0
 800622c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  int32_t PHYLinkState = 0;
 8006230:	2300      	movs	r3, #0
 8006232:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  ETH_MACConfigTypeDef MACConf = {0};
 8006236:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800623a:	2264      	movs	r2, #100	@ 0x64
 800623c:	2100      	movs	r1, #0
 800623e:	4618      	mov	r0, r3
 8006240:	f021 fffe 	bl	8028240 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006244:	4b9f      	ldr	r3, [pc, #636]	@ (80064c4 <low_level_init+0x2a8>)
 8006246:	4aa0      	ldr	r2, [pc, #640]	@ (80064c8 <low_level_init+0x2ac>)
 8006248:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800624a:	2300      	movs	r3, #0
 800624c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  MACAddr[1] = 0x80;
 8006250:	2380      	movs	r3, #128	@ 0x80
 8006252:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  MACAddr[2] = 0xE1;
 8006256:	23e1      	movs	r3, #225	@ 0xe1
 8006258:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  MACAddr[3] = 0x00;
 800625c:	2300      	movs	r3, #0
 800625e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  MACAddr[4] = 0x00;
 8006262:	2300      	movs	r3, #0
 8006264:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  MACAddr[5] = 0x00;
 8006268:	2300      	movs	r3, #0
 800626a:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
  heth.Init.MACAddr = &MACAddr[0];
 800626e:	4a95      	ldr	r2, [pc, #596]	@ (80064c4 <low_level_init+0x2a8>)
 8006270:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006274:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006276:	4b93      	ldr	r3, [pc, #588]	@ (80064c4 <low_level_init+0x2a8>)
 8006278:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800627c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800627e:	4b91      	ldr	r3, [pc, #580]	@ (80064c4 <low_level_init+0x2a8>)
 8006280:	4a92      	ldr	r2, [pc, #584]	@ (80064cc <low_level_init+0x2b0>)
 8006282:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006284:	4b8f      	ldr	r3, [pc, #572]	@ (80064c4 <low_level_init+0x2a8>)
 8006286:	4a92      	ldr	r2, [pc, #584]	@ (80064d0 <low_level_init+0x2b4>)
 8006288:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800628a:	4b8e      	ldr	r3, [pc, #568]	@ (80064c4 <low_level_init+0x2a8>)
 800628c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006290:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006292:	488c      	ldr	r0, [pc, #560]	@ (80064c4 <low_level_init+0x2a8>)
 8006294:	f7fc f918 	bl	80024c8 <HAL_ETH_Init>
 8006298:	4603      	mov	r3, r0
 800629a:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800629e:	2238      	movs	r2, #56	@ 0x38
 80062a0:	2100      	movs	r1, #0
 80062a2:	488c      	ldr	r0, [pc, #560]	@ (80064d4 <low_level_init+0x2b8>)
 80062a4:	f021 ffcc 	bl	8028240 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80062a8:	4b8a      	ldr	r3, [pc, #552]	@ (80064d4 <low_level_init+0x2b8>)
 80062aa:	2221      	movs	r2, #33	@ 0x21
 80062ac:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80062ae:	4b89      	ldr	r3, [pc, #548]	@ (80064d4 <low_level_init+0x2b8>)
 80062b0:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80062b4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80062b6:	4b87      	ldr	r3, [pc, #540]	@ (80064d4 <low_level_init+0x2b8>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80062bc:	4886      	ldr	r0, [pc, #536]	@ (80064d8 <low_level_init+0x2bc>)
 80062be:	f007 ff45 	bl	800e14c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2206      	movs	r2, #6
 80062c6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80062ca:	4b7e      	ldr	r3, [pc, #504]	@ (80064c4 <low_level_init+0x2a8>)
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	781a      	ldrb	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80062d6:	4b7b      	ldr	r3, [pc, #492]	@ (80064c4 <low_level_init+0x2a8>)
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	785a      	ldrb	r2, [r3, #1]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80062e2:	4b78      	ldr	r3, [pc, #480]	@ (80064c4 <low_level_init+0x2a8>)
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	789a      	ldrb	r2, [r3, #2]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80062ee:	4b75      	ldr	r3, [pc, #468]	@ (80064c4 <low_level_init+0x2a8>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	78da      	ldrb	r2, [r3, #3]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80062fa:	4b72      	ldr	r3, [pc, #456]	@ (80064c4 <low_level_init+0x2a8>)
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	791a      	ldrb	r2, [r3, #4]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006306:	4b6f      	ldr	r3, [pc, #444]	@ (80064c4 <low_level_init+0x2a8>)
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	795a      	ldrb	r2, [r3, #5]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8006318:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006320:	f043 030a 	orr.w	r3, r3, #10
 8006324:	b2da      	uxtb	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 800632c:	2300      	movs	r3, #0
 800632e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006330:	2300      	movs	r3, #0
 8006332:	653b      	str	r3, [r7, #80]	@ 0x50
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8006334:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006338:	2101      	movs	r1, #1
 800633a:	4618      	mov	r0, r3
 800633c:	f000 fdba 	bl	8006eb4 <osSemaphoreCreate>
 8006340:	4603      	mov	r3, r0
 8006342:	4a66      	ldr	r2, [pc, #408]	@ (80064dc <low_level_init+0x2c0>)
 8006344:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8006346:	2300      	movs	r3, #0
 8006348:	647b      	str	r3, [r7, #68]	@ 0x44
 800634a:	2300      	movs	r3, #0
 800634c:	64bb      	str	r3, [r7, #72]	@ 0x48
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800634e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8006352:	2101      	movs	r1, #1
 8006354:	4618      	mov	r0, r3
 8006356:	f000 fdad 	bl	8006eb4 <osSemaphoreCreate>
 800635a:	4603      	mov	r3, r0
 800635c:	4a60      	ldr	r2, [pc, #384]	@ (80064e0 <low_level_init+0x2c4>)
 800635e:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8006360:	4b5e      	ldr	r3, [pc, #376]	@ (80064dc <low_level_init+0x2c0>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2100      	movs	r1, #0
 8006366:	4618      	mov	r0, r3
 8006368:	f000 fdd6 	bl	8006f18 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 800636c:	4b5c      	ldr	r3, [pc, #368]	@ (80064e0 <low_level_init+0x2c4>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2100      	movs	r1, #0
 8006372:	4618      	mov	r0, r3
 8006374:	f000 fdd0 	bl	8006f18 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8006378:	4b5a      	ldr	r3, [pc, #360]	@ (80064e4 <low_level_init+0x2c8>)
 800637a:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800637e:	461d      	mov	r5, r3
 8006380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006384:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006388:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800638c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006390:	6879      	ldr	r1, [r7, #4]
 8006392:	4618      	mov	r0, r3
 8006394:	f000 fc85 	bl	8006ca2 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006398:	4953      	ldr	r1, [pc, #332]	@ (80064e8 <low_level_init+0x2cc>)
 800639a:	4854      	ldr	r0, [pc, #336]	@ (80064ec <low_level_init+0x2d0>)
 800639c:	f7fb fe4f 	bl	800203e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 80063a0:	4852      	ldr	r0, [pc, #328]	@ (80064ec <low_level_init+0x2d0>)
 80063a2:	f7fb fe7e 	bl	80020a2 <LAN8742_Init>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d006      	beq.n	80063ba <low_level_init+0x19e>
  {
    netif_set_link_down(netif);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f008 faa7 	bl	800e900 <netif_set_link_down>
    netif_set_down(netif);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f008 fa3e 	bl	800e834 <netif_set_down>
 80063b8:	e081      	b.n	80064be <low_level_init+0x2a2>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 80063ba:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d165      	bne.n	800648e <low_level_init+0x272>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80063c2:	484a      	ldr	r0, [pc, #296]	@ (80064ec <low_level_init+0x2d0>)
 80063c4:	f7fb feba 	bl	800213c <LAN8742_GetLinkState>
 80063c8:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80063cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	dc06      	bgt.n	80063e2 <low_level_init+0x1c6>
    {
      netif_set_link_down(netif);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f008 fa93 	bl	800e900 <netif_set_link_down>
      netif_set_down(netif);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f008 fa2a 	bl	800e834 <netif_set_down>
 80063e0:	e057      	b.n	8006492 <low_level_init+0x276>
    }
    else
    {
      switch (PHYLinkState)
 80063e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80063e6:	3b02      	subs	r3, #2
 80063e8:	2b03      	cmp	r3, #3
 80063ea:	d82b      	bhi.n	8006444 <low_level_init+0x228>
 80063ec:	a201      	add	r2, pc, #4	@ (adr r2, 80063f4 <low_level_init+0x1d8>)
 80063ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f2:	bf00      	nop
 80063f4:	08006405 	.word	0x08006405
 80063f8:	08006417 	.word	0x08006417
 80063fc:	08006427 	.word	0x08006427
 8006400:	08006437 	.word	0x08006437
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8006404:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006408:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 800640c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006410:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8006414:	e01f      	b.n	8006456 <low_level_init+0x23a>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8006416:	2300      	movs	r3, #0
 8006418:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 800641c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006420:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8006424:	e017      	b.n	8006456 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8006426:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800642a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 800642e:	2300      	movs	r3, #0
 8006430:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8006434:	e00f      	b.n	8006456 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8006436:	2300      	movs	r3, #0
 8006438:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 800643c:	2300      	movs	r3, #0
 800643e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8006442:	e008      	b.n	8006456 <low_level_init+0x23a>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8006444:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006448:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 800644c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006450:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8006454:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006456:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800645a:	4619      	mov	r1, r3
 800645c:	4819      	ldr	r0, [pc, #100]	@ (80064c4 <low_level_init+0x2a8>)
 800645e:	f7fc fd1b 	bl	8002e98 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8006462:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006466:	677b      	str	r3, [r7, #116]	@ 0x74
    MACConf.Speed = speed;
 8006468:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800646c:	673b      	str	r3, [r7, #112]	@ 0x70
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800646e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006472:	4619      	mov	r1, r3
 8006474:	4813      	ldr	r0, [pc, #76]	@ (80064c4 <low_level_init+0x2a8>)
 8006476:	f7fc fe06 	bl	8003086 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800647a:	4812      	ldr	r0, [pc, #72]	@ (80064c4 <low_level_init+0x2a8>)
 800647c:	f7fc f8be 	bl	80025fc <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f008 f96b 	bl	800e75c <netif_set_up>
    netif_set_link_up(netif);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f008 fa06 	bl	800e898 <netif_set_link_up>
 800648c:	e001      	b.n	8006492 <low_level_init+0x276>
    }

  }
  else
  {
    Error_Handler();
 800648e:	f7fb fb11 	bl	8001ab4 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

  if(HAL_GetREVID() == 0x1000)
 8006492:	f7fb ff2b 	bl	80022ec <HAL_GetREVID>
 8006496:	4603      	mov	r3, r0
 8006498:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800649c:	d10f      	bne.n	80064be <low_level_init+0x2a2>
  {
    /*
      This thread will keep resetting the RMII interface until good frames are received
    */
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 800649e:	4b14      	ldr	r3, [pc, #80]	@ (80064f0 <low_level_init+0x2d4>)
 80064a0:	f107 040c 	add.w	r4, r7, #12
 80064a4:	461d      	mov	r5, r3
 80064a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80064ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 80064b2:	f107 030c 	add.w	r3, r7, #12
 80064b6:	2100      	movs	r1, #0
 80064b8:	4618      	mov	r0, r3
 80064ba:	f000 fbf2 	bl	8006ca2 <osThreadCreate>
  }
}
 80064be:	37d0      	adds	r7, #208	@ 0xd0
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bdb0      	pop	{r4, r5, r7, pc}
 80064c4:	2000587c 	.word	0x2000587c
 80064c8:	40028000 	.word	0x40028000
 80064cc:	20000898 	.word	0x20000898
 80064d0:	200007f8 	.word	0x200007f8
 80064d4:	2000592c 	.word	0x2000592c
 80064d8:	0802ccf0 	.word	0x0802ccf0
 80064dc:	20005874 	.word	0x20005874
 80064e0:	20005878 	.word	0x20005878
 80064e4:	08029304 	.word	0x08029304
 80064e8:	20000014 	.word	0x20000014
 80064ec:	20005964 	.word	0x20005964
 80064f0:	08029330 	.word	0x08029330

080064f4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b092      	sub	sp, #72	@ 0x48
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80064fe:	2300      	movs	r3, #0
 8006500:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8006502:	2300      	movs	r3, #0
 8006504:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800650c:	f107 030c 	add.w	r3, r7, #12
 8006510:	2230      	movs	r2, #48	@ 0x30
 8006512:	2100      	movs	r1, #0
 8006514:	4618      	mov	r0, r3
 8006516:	f021 fe93 	bl	8028240 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800651a:	f107 030c 	add.w	r3, r7, #12
 800651e:	2230      	movs	r2, #48	@ 0x30
 8006520:	2100      	movs	r1, #0
 8006522:	4618      	mov	r0, r3
 8006524:	f021 fe8c 	bl	8028240 <memset>

  for(q = p; q != NULL; q = q->next)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	643b      	str	r3, [r7, #64]	@ 0x40
 800652c:	e045      	b.n	80065ba <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800652e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006530:	2b03      	cmp	r3, #3
 8006532:	d902      	bls.n	800653a <low_level_output+0x46>
      return ERR_IF;
 8006534:	f06f 030b 	mvn.w	r3, #11
 8006538:	e07f      	b.n	800663a <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800653a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800653c:	6859      	ldr	r1, [r3, #4]
 800653e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006540:	4613      	mov	r3, r2
 8006542:	005b      	lsls	r3, r3, #1
 8006544:	4413      	add	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	3348      	adds	r3, #72	@ 0x48
 800654a:	443b      	add	r3, r7
 800654c:	3b3c      	subs	r3, #60	@ 0x3c
 800654e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006550:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006552:	895b      	ldrh	r3, [r3, #10]
 8006554:	4619      	mov	r1, r3
 8006556:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006558:	4613      	mov	r3, r2
 800655a:	005b      	lsls	r3, r3, #1
 800655c:	4413      	add	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	3348      	adds	r3, #72	@ 0x48
 8006562:	443b      	add	r3, r7
 8006564:	3b38      	subs	r3, #56	@ 0x38
 8006566:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006568:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800656a:	2b00      	cmp	r3, #0
 800656c:	d011      	beq.n	8006592 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800656e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006570:	1e5a      	subs	r2, r3, #1
 8006572:	f107 000c 	add.w	r0, r7, #12
 8006576:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006578:	460b      	mov	r3, r1
 800657a:	005b      	lsls	r3, r3, #1
 800657c:	440b      	add	r3, r1
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	18c1      	adds	r1, r0, r3
 8006582:	4613      	mov	r3, r2
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	4413      	add	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	3348      	adds	r3, #72	@ 0x48
 800658c:	443b      	add	r3, r7
 800658e:	3b34      	subs	r3, #52	@ 0x34
 8006590:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006592:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d109      	bne.n	80065ae <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800659a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800659c:	4613      	mov	r3, r2
 800659e:	005b      	lsls	r3, r3, #1
 80065a0:	4413      	add	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	3348      	adds	r3, #72	@ 0x48
 80065a6:	443b      	add	r3, r7
 80065a8:	3b34      	subs	r3, #52	@ 0x34
 80065aa:	2200      	movs	r2, #0
 80065ac:	601a      	str	r2, [r3, #0]
    }

    i++;
 80065ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065b0:	3301      	adds	r3, #1
 80065b2:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80065b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80065ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1b6      	bne.n	800652e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	891b      	ldrh	r3, [r3, #8]
 80065c4:	461a      	mov	r2, r3
 80065c6:	4b1f      	ldr	r3, [pc, #124]	@ (8006644 <low_level_output+0x150>)
 80065c8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80065ca:	4a1e      	ldr	r2, [pc, #120]	@ (8006644 <low_level_output+0x150>)
 80065cc:	f107 030c 	add.w	r3, r7, #12
 80065d0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80065d2:	4a1c      	ldr	r2, [pc, #112]	@ (8006644 <low_level_output+0x150>)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 80065d8:	6838      	ldr	r0, [r7, #0]
 80065da:	f008 fe7f 	bl	800f2dc <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 80065de:	4919      	ldr	r1, [pc, #100]	@ (8006644 <low_level_output+0x150>)
 80065e0:	4819      	ldr	r0, [pc, #100]	@ (8006648 <low_level_output+0x154>)
 80065e2:	f7fc f8fb 	bl	80027dc <HAL_ETH_Transmit_IT>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d103      	bne.n	80065f4 <low_level_output+0x100>
    {
      errval = ERR_OK;
 80065ec:	2300      	movs	r3, #0
 80065ee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80065f2:	e01b      	b.n	800662c <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 80065f4:	4814      	ldr	r0, [pc, #80]	@ (8006648 <low_level_output+0x154>)
 80065f6:	f7fc fda3 	bl	8003140 <HAL_ETH_GetError>
 80065fa:	4603      	mov	r3, r0
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00d      	beq.n	8006620 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8006604:	4b11      	ldr	r3, [pc, #68]	@ (800664c <low_level_output+0x158>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fc83 	bl	8006f18 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 8006612:	480d      	ldr	r0, [pc, #52]	@ (8006648 <low_level_output+0x154>)
 8006614:	f7fc fa82 	bl	8002b1c <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8006618:	23fe      	movs	r3, #254	@ 0xfe
 800661a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800661e:	e005      	b.n	800662c <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8006620:	6838      	ldr	r0, [r7, #0]
 8006622:	f008 fdb5 	bl	800f190 <pbuf_free>
        errval =  ERR_IF;
 8006626:	23f4      	movs	r3, #244	@ 0xf4
 8006628:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800662c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006630:	f113 0f02 	cmn.w	r3, #2
 8006634:	d0d3      	beq.n	80065de <low_level_output+0xea>

  return errval;
 8006636:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800663a:	4618      	mov	r0, r3
 800663c:	3748      	adds	r7, #72	@ 0x48
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	2000592c 	.word	0x2000592c
 8006648:	2000587c 	.word	0x2000587c
 800664c:	20005878 	.word	0x20005878

08006650 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006658:	2300      	movs	r3, #0
 800665a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800665c:	4b07      	ldr	r3, [pc, #28]	@ (800667c <low_level_input+0x2c>)
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d105      	bne.n	8006670 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006664:	f107 030c 	add.w	r3, r7, #12
 8006668:	4619      	mov	r1, r3
 800666a:	4805      	ldr	r0, [pc, #20]	@ (8006680 <low_level_input+0x30>)
 800666c:	f7fc f912 	bl	8002894 <HAL_ETH_ReadData>
  }

  return p;
 8006670:	68fb      	ldr	r3, [r7, #12]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20005870 	.word	0x20005870
 8006680:	2000587c 	.word	0x2000587c

08006684 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800668c:	2300      	movs	r3, #0
 800668e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006694:	4b0f      	ldr	r3, [pc, #60]	@ (80066d4 <ethernetif_input+0x50>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f04f 31ff 	mov.w	r1, #4294967295
 800669c:	4618      	mov	r0, r3
 800669e:	f000 fc3b 	bl	8006f18 <osSemaphoreWait>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1f5      	bne.n	8006694 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80066a8:	68b8      	ldr	r0, [r7, #8]
 80066aa:	f7ff ffd1 	bl	8006650 <low_level_input>
 80066ae:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00a      	beq.n	80066cc <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	68b9      	ldr	r1, [r7, #8]
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	4798      	blx	r3
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d002      	beq.n	80066cc <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f008 fd62 	bl	800f190 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1ea      	bne.n	80066a8 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80066d2:	e7df      	b.n	8006694 <ethernetif_input+0x10>
 80066d4:	20005874 	.word	0x20005874

080066d8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d106      	bne.n	80066f4 <ethernetif_init+0x1c>
 80066e6:	4b0e      	ldr	r3, [pc, #56]	@ (8006720 <ethernetif_init+0x48>)
 80066e8:	f240 2217 	movw	r2, #535	@ 0x217
 80066ec:	490d      	ldr	r1, [pc, #52]	@ (8006724 <ethernetif_init+0x4c>)
 80066ee:	480e      	ldr	r0, [pc, #56]	@ (8006728 <ethernetif_init+0x50>)
 80066f0:	f021 fc20 	bl	8027f34 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2273      	movs	r2, #115	@ 0x73
 80066f8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2274      	movs	r2, #116	@ 0x74
 8006700:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a09      	ldr	r2, [pc, #36]	@ (800672c <ethernetif_init+0x54>)
 8006708:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a08      	ldr	r2, [pc, #32]	@ (8006730 <ethernetif_init+0x58>)
 800670e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f7ff fd83 	bl	800621c <low_level_init>

  return ERR_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	0802934c 	.word	0x0802934c
 8006724:	08029368 	.word	0x08029368
 8006728:	08029378 	.word	0x08029378
 800672c:	08016c1d 	.word	0x08016c1d
 8006730:	080064f5 	.word	0x080064f5

08006734 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006740:	68f9      	ldr	r1, [r7, #12]
 8006742:	4809      	ldr	r0, [pc, #36]	@ (8006768 <pbuf_free_custom+0x34>)
 8006744:	f007 fdf2 	bl	800e32c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006748:	4b08      	ldr	r3, [pc, #32]	@ (800676c <pbuf_free_custom+0x38>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d107      	bne.n	8006760 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8006750:	4b06      	ldr	r3, [pc, #24]	@ (800676c <pbuf_free_custom+0x38>)
 8006752:	2200      	movs	r2, #0
 8006754:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8006756:	4b06      	ldr	r3, [pc, #24]	@ (8006770 <pbuf_free_custom+0x3c>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4618      	mov	r0, r3
 800675c:	f000 fc2a 	bl	8006fb4 <osSemaphoreRelease>
  }
}
 8006760:	bf00      	nop
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	0802ccf0 	.word	0x0802ccf0
 800676c:	20005870 	.word	0x20005870
 8006770:	20005874 	.word	0x20005874

08006774 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006778:	f7fb fd88 	bl	800228c <HAL_GetTick>
 800677c:	4603      	mov	r3, r0
}
 800677e:	4618      	mov	r0, r3
 8006780:	bd80      	pop	{r7, pc}
	...

08006784 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b08e      	sub	sp, #56	@ 0x38
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800678c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006790:	2200      	movs	r2, #0
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	605a      	str	r2, [r3, #4]
 8006796:	609a      	str	r2, [r3, #8]
 8006798:	60da      	str	r2, [r3, #12]
 800679a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a52      	ldr	r2, [pc, #328]	@ (80068ec <HAL_ETH_MspInit+0x168>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	f040 809e 	bne.w	80068e4 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80067a8:	4b51      	ldr	r3, [pc, #324]	@ (80068f0 <HAL_ETH_MspInit+0x16c>)
 80067aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ac:	4a50      	ldr	r2, [pc, #320]	@ (80068f0 <HAL_ETH_MspInit+0x16c>)
 80067ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80067b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80067b4:	4b4e      	ldr	r3, [pc, #312]	@ (80068f0 <HAL_ETH_MspInit+0x16c>)
 80067b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067bc:	623b      	str	r3, [r7, #32]
 80067be:	6a3b      	ldr	r3, [r7, #32]
 80067c0:	4b4b      	ldr	r3, [pc, #300]	@ (80068f0 <HAL_ETH_MspInit+0x16c>)
 80067c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067c4:	4a4a      	ldr	r2, [pc, #296]	@ (80068f0 <HAL_ETH_MspInit+0x16c>)
 80067c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80067ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80067cc:	4b48      	ldr	r3, [pc, #288]	@ (80068f0 <HAL_ETH_MspInit+0x16c>)
 80067ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80067d4:	61fb      	str	r3, [r7, #28]
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	4b45      	ldr	r3, [pc, #276]	@ (80068f0 <HAL_ETH_MspInit+0x16c>)
 80067da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067dc:	4a44      	ldr	r2, [pc, #272]	@ (80068f0 <HAL_ETH_MspInit+0x16c>)
 80067de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80067e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80067e4:	4b42      	ldr	r3, [pc, #264]	@ (80068f0 <HAL_ETH_MspInit+0x16c>)
 80067e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067ec:	61bb      	str	r3, [r7, #24]
 80067ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80067f0:	4b3f      	ldr	r3, [pc, #252]	@ (80068f0 <HAL_ETH_MspInit+0x16c>)
 80067f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f4:	4a3e      	ldr	r2, [pc, #248]	@ (80068f0 <HAL_ETH_MspInit+0x16c>)
 80067f6:	f043 0304 	orr.w	r3, r3, #4
 80067fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80067fc:	4b3c      	ldr	r3, [pc, #240]	@ (80068f0 <HAL_ETH_MspInit+0x16c>)
 80067fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	617b      	str	r3, [r7, #20]
 8006806:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006808:	4b39      	ldr	r3, [pc, #228]	@ (80068f0 <HAL_ETH_MspInit+0x16c>)
 800680a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800680c:	4a38      	ldr	r2, [pc, #224]	@ (80068f0 <HAL_ETH_MspInit+0x16c>)
 800680e:	f043 0301 	orr.w	r3, r3, #1
 8006812:	6313      	str	r3, [r2, #48]	@ 0x30
 8006814:	4b36      	ldr	r3, [pc, #216]	@ (80068f0 <HAL_ETH_MspInit+0x16c>)
 8006816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	613b      	str	r3, [r7, #16]
 800681e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006820:	4b33      	ldr	r3, [pc, #204]	@ (80068f0 <HAL_ETH_MspInit+0x16c>)
 8006822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006824:	4a32      	ldr	r2, [pc, #200]	@ (80068f0 <HAL_ETH_MspInit+0x16c>)
 8006826:	f043 0302 	orr.w	r3, r3, #2
 800682a:	6313      	str	r3, [r2, #48]	@ 0x30
 800682c:	4b30      	ldr	r3, [pc, #192]	@ (80068f0 <HAL_ETH_MspInit+0x16c>)
 800682e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	60fb      	str	r3, [r7, #12]
 8006836:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006838:	4b2d      	ldr	r3, [pc, #180]	@ (80068f0 <HAL_ETH_MspInit+0x16c>)
 800683a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800683c:	4a2c      	ldr	r2, [pc, #176]	@ (80068f0 <HAL_ETH_MspInit+0x16c>)
 800683e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006842:	6313      	str	r3, [r2, #48]	@ 0x30
 8006844:	4b2a      	ldr	r3, [pc, #168]	@ (80068f0 <HAL_ETH_MspInit+0x16c>)
 8006846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800684c:	60bb      	str	r3, [r7, #8]
 800684e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8006850:	2332      	movs	r3, #50	@ 0x32
 8006852:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006854:	2302      	movs	r3, #2
 8006856:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006858:	2300      	movs	r3, #0
 800685a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800685c:	2303      	movs	r3, #3
 800685e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006860:	230b      	movs	r3, #11
 8006862:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006864:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006868:	4619      	mov	r1, r3
 800686a:	4822      	ldr	r0, [pc, #136]	@ (80068f4 <HAL_ETH_MspInit+0x170>)
 800686c:	f7fd f8a2 	bl	80039b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8006870:	2386      	movs	r3, #134	@ 0x86
 8006872:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006874:	2302      	movs	r3, #2
 8006876:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006878:	2300      	movs	r3, #0
 800687a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800687c:	2303      	movs	r3, #3
 800687e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006880:	230b      	movs	r3, #11
 8006882:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006884:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006888:	4619      	mov	r1, r3
 800688a:	481b      	ldr	r0, [pc, #108]	@ (80068f8 <HAL_ETH_MspInit+0x174>)
 800688c:	f7fd f892 	bl	80039b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006890:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006894:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006896:	2302      	movs	r3, #2
 8006898:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800689a:	2300      	movs	r3, #0
 800689c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800689e:	2303      	movs	r3, #3
 80068a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80068a2:	230b      	movs	r3, #11
 80068a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068aa:	4619      	mov	r1, r3
 80068ac:	4813      	ldr	r0, [pc, #76]	@ (80068fc <HAL_ETH_MspInit+0x178>)
 80068ae:	f7fd f881 	bl	80039b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80068b2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80068b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068b8:	2302      	movs	r3, #2
 80068ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068bc:	2300      	movs	r3, #0
 80068be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068c0:	2303      	movs	r3, #3
 80068c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80068c4:	230b      	movs	r3, #11
 80068c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80068c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068cc:	4619      	mov	r1, r3
 80068ce:	480c      	ldr	r0, [pc, #48]	@ (8006900 <HAL_ETH_MspInit+0x17c>)
 80068d0:	f7fd f870 	bl	80039b4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80068d4:	2200      	movs	r2, #0
 80068d6:	2105      	movs	r1, #5
 80068d8:	203d      	movs	r0, #61	@ 0x3d
 80068da:	f7fb fdcb 	bl	8002474 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80068de:	203d      	movs	r0, #61	@ 0x3d
 80068e0:	f7fb fde4 	bl	80024ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80068e4:	bf00      	nop
 80068e6:	3738      	adds	r7, #56	@ 0x38
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	40028000 	.word	0x40028000
 80068f0:	40023800 	.word	0x40023800
 80068f4:	40020800 	.word	0x40020800
 80068f8:	40020000 	.word	0x40020000
 80068fc:	40020400 	.word	0x40020400
 8006900:	40021800 	.word	0x40021800

08006904 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006908:	4802      	ldr	r0, [pc, #8]	@ (8006914 <ETH_PHY_IO_Init+0x10>)
 800690a:	f7fc fbd7 	bl	80030bc <HAL_ETH_SetMDIOClockRange>

  return 0;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	bd80      	pop	{r7, pc}
 8006914:	2000587c 	.word	0x2000587c

08006918 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
  return 0;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	68f9      	ldr	r1, [r7, #12]
 800693a:	4807      	ldr	r0, [pc, #28]	@ (8006958 <ETH_PHY_IO_ReadReg+0x30>)
 800693c:	f7fc fa18 	bl	8002d70 <HAL_ETH_ReadPHYRegister>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d002      	beq.n	800694c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8006946:	f04f 33ff 	mov.w	r3, #4294967295
 800694a:	e000      	b.n	800694e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	2000587c 	.word	0x2000587c

0800695c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	68f9      	ldr	r1, [r7, #12]
 800696e:	4807      	ldr	r0, [pc, #28]	@ (800698c <ETH_PHY_IO_WriteReg+0x30>)
 8006970:	f7fc fa49 	bl	8002e06 <HAL_ETH_WritePHYRegister>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d002      	beq.n	8006980 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800697a:	f04f 33ff 	mov.w	r3, #4294967295
 800697e:	e000      	b.n	8006982 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	2000587c 	.word	0x2000587c

08006990 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006994:	f7fb fc7a 	bl	800228c <HAL_GetTick>
 8006998:	4603      	mov	r3, r0
}
 800699a:	4618      	mov	r0, r3
 800699c:	bd80      	pop	{r7, pc}
	...

080069a0 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b0a0      	sub	sp, #128	@ 0x80
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80069a8:	f107 0308 	add.w	r3, r7, #8
 80069ac:	2264      	movs	r2, #100	@ 0x64
 80069ae:	2100      	movs	r1, #0
 80069b0:	4618      	mov	r0, r3
 80069b2:	f021 fc45 	bl	8028240 <memset>
  int32_t PHYLinkState = 0;
 80069b6:	2300      	movs	r3, #0
 80069b8:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80069be:	2300      	movs	r3, #0
 80069c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80069c2:	2300      	movs	r3, #0
 80069c4:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80069ca:	483a      	ldr	r0, [pc, #232]	@ (8006ab4 <ethernet_link_thread+0x114>)
 80069cc:	f7fb fbb6 	bl	800213c <LAN8742_GetLinkState>
 80069d0:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80069d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80069d8:	089b      	lsrs	r3, r3, #2
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00c      	beq.n	80069fe <ethernet_link_thread+0x5e>
 80069e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	dc09      	bgt.n	80069fe <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80069ea:	4833      	ldr	r0, [pc, #204]	@ (8006ab8 <ethernet_link_thread+0x118>)
 80069ec:	f7fb fe76 	bl	80026dc <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80069f0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80069f2:	f007 ff1f 	bl	800e834 <netif_set_down>
    netif_set_link_down(netif);
 80069f6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80069f8:	f007 ff82 	bl	800e900 <netif_set_link_down>
 80069fc:	e055      	b.n	8006aaa <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80069fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a00:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006a04:	f003 0304 	and.w	r3, r3, #4
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d14e      	bne.n	8006aaa <ethernet_link_thread+0x10a>
 8006a0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	dd4b      	ble.n	8006aaa <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8006a12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a14:	3b02      	subs	r3, #2
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	d82a      	bhi.n	8006a70 <ethernet_link_thread+0xd0>
 8006a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a20 <ethernet_link_thread+0x80>)
 8006a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a20:	08006a31 	.word	0x08006a31
 8006a24:	08006a43 	.word	0x08006a43
 8006a28:	08006a53 	.word	0x08006a53
 8006a2c:	08006a63 	.word	0x08006a63
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8006a30:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006a34:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8006a36:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006a3a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006a40:	e017      	b.n	8006a72 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8006a42:	2300      	movs	r3, #0
 8006a44:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8006a46:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006a4a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006a50:	e00f      	b.n	8006a72 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8006a52:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006a56:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006a60:	e007      	b.n	8006a72 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8006a62:	2300      	movs	r3, #0
 8006a64:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006a66:	2300      	movs	r3, #0
 8006a68:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006a6e:	e000      	b.n	8006a72 <ethernet_link_thread+0xd2>
    default:
      break;
 8006a70:	bf00      	nop
    }

    if(linkchanged)
 8006a72:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d018      	beq.n	8006aaa <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006a78:	f107 0308 	add.w	r3, r7, #8
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	480e      	ldr	r0, [pc, #56]	@ (8006ab8 <ethernet_link_thread+0x118>)
 8006a80:	f7fc fa0a 	bl	8002e98 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006a84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a86:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8006a88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a8a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006a8c:	f107 0308 	add.w	r3, r7, #8
 8006a90:	4619      	mov	r1, r3
 8006a92:	4809      	ldr	r0, [pc, #36]	@ (8006ab8 <ethernet_link_thread+0x118>)
 8006a94:	f7fc faf7 	bl	8003086 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8006a98:	4807      	ldr	r0, [pc, #28]	@ (8006ab8 <ethernet_link_thread+0x118>)
 8006a9a:	f7fb fdaf 	bl	80025fc <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8006a9e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006aa0:	f007 fe5c 	bl	800e75c <netif_set_up>
      netif_set_link_up(netif);
 8006aa4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006aa6:	f007 fef7 	bl	800e898 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8006aaa:	2064      	movs	r0, #100	@ 0x64
 8006aac:	f000 f951 	bl	8006d52 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006ab0:	e78b      	b.n	80069ca <ethernet_link_thread+0x2a>
 8006ab2:	bf00      	nop
 8006ab4:	20005964 	.word	0x20005964
 8006ab8:	2000587c 	.word	0x2000587c

08006abc <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b086      	sub	sp, #24
 8006ac0:	af02      	add	r7, sp, #8
 8006ac2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006ac4:	4812      	ldr	r0, [pc, #72]	@ (8006b10 <HAL_ETH_RxAllocateCallback+0x54>)
 8006ac6:	f007 fbbd 	bl	800e244 <memp_malloc_pool>
 8006aca:	60f8      	str	r0, [r7, #12]
  if (p)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d014      	beq.n	8006afc <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f103 0220 	add.w	r2, r3, #32
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4a0d      	ldr	r2, [pc, #52]	@ (8006b14 <HAL_ETH_RxAllocateCallback+0x58>)
 8006ae0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006aea:	9201      	str	r2, [sp, #4]
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2241      	movs	r2, #65	@ 0x41
 8006af2:	2100      	movs	r1, #0
 8006af4:	2000      	movs	r0, #0
 8006af6:	f008 f95f 	bl	800edb8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006afa:	e005      	b.n	8006b08 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006afc:	4b06      	ldr	r3, [pc, #24]	@ (8006b18 <HAL_ETH_RxAllocateCallback+0x5c>)
 8006afe:	2201      	movs	r2, #1
 8006b00:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	601a      	str	r2, [r3, #0]
}
 8006b08:	bf00      	nop
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	0802ccf0 	.word	0x0802ccf0
 8006b14:	08006735 	.word	0x08006735
 8006b18:	20005870 	.word	0x20005870

08006b1c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b088      	sub	sp, #32
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
 8006b28:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8006b32:	2300      	movs	r3, #0
 8006b34:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	3b20      	subs	r3, #32
 8006b3a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	2200      	movs	r2, #0
 8006b46:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	887a      	ldrh	r2, [r7, #2]
 8006b4c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d103      	bne.n	8006b5e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	69fa      	ldr	r2, [r7, #28]
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	e003      	b.n	8006b66 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	69fa      	ldr	r2, [r7, #28]
 8006b64:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	69fa      	ldr	r2, [r7, #28]
 8006b6a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	61fb      	str	r3, [r7, #28]
 8006b72:	e009      	b.n	8006b88 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	891a      	ldrh	r2, [r3, #8]
 8006b78:	887b      	ldrh	r3, [r7, #2]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	61fb      	str	r3, [r7, #28]
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1f2      	bne.n	8006b74 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8006b8e:	887b      	ldrh	r3, [r7, #2]
 8006b90:	4619      	mov	r1, r3
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7ff fade 	bl	8006154 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006b98:	bf00      	nop
 8006b9a:	3720      	adds	r7, #32
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f008 faf1 	bl	800f190 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8006bae:	bf00      	nop
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
	...

08006bb8 <RMII_Thread>:
/* USER CODE BEGIN 8 */

/* USER CODE END 8 */

void RMII_Thread( void const * argument )
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  (void) argument;

  for(;;)
  {
    /* some unicast good packets are received */
    if(heth.Instance->MMCRGUFCR > 0U)
 8006bc0:	4b15      	ldr	r3, [pc, #84]	@ (8006c18 <RMII_Thread+0x60>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d003      	beq.n	8006bd4 <RMII_Thread+0x1c>
    {
      /* RMII Init is OK: Delete the Thread */
      osThreadTerminate(NULL);
 8006bcc:	2000      	movs	r0, #0
 8006bce:	f000 f8b4 	bl	8006d3a <osThreadTerminate>
 8006bd2:	e7f5      	b.n	8006bc0 <RMII_Thread+0x8>
    }
    else if(heth.Instance->MMCRFCECR > 10U)
 8006bd4:	4b10      	ldr	r3, [pc, #64]	@ (8006c18 <RMII_Thread+0x60>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8006bdc:	2b0a      	cmp	r3, #10
 8006bde:	d916      	bls.n	8006c0e <RMII_Thread+0x56>
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 8006be0:	4b0e      	ldr	r3, [pc, #56]	@ (8006c1c <RMII_Thread+0x64>)
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	4a0d      	ldr	r2, [pc, #52]	@ (8006c1c <RMII_Thread+0x64>)
 8006be6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006bea:	6053      	str	r3, [r2, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 8006bec:	4b0b      	ldr	r3, [pc, #44]	@ (8006c1c <RMII_Thread+0x64>)
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8006c1c <RMII_Thread+0x64>)
 8006bf2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006bf6:	6053      	str	r3, [r2, #4]

      heth.Instance->MMCCR |= ETH_MMCCR_CR;
 8006bf8:	4b07      	ldr	r3, [pc, #28]	@ (8006c18 <RMII_Thread+0x60>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8006c00:	4b05      	ldr	r3, [pc, #20]	@ (8006c18 <RMII_Thread+0x60>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f042 0201 	orr.w	r2, r2, #1
 8006c08:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006c0c:	e7d8      	b.n	8006bc0 <RMII_Thread+0x8>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 8006c0e:	20c8      	movs	r0, #200	@ 0xc8
 8006c10:	f000 f89f 	bl	8006d52 <osDelay>
    if(heth.Instance->MMCRGUFCR > 0U)
 8006c14:	e7d4      	b.n	8006bc0 <RMII_Thread+0x8>
 8006c16:	bf00      	nop
 8006c18:	2000587c 	.word	0x2000587c
 8006c1c:	40013800 	.word	0x40013800

08006c20 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	4603      	mov	r3, r0
 8006c28:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006c2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c32:	2b84      	cmp	r3, #132	@ 0x84
 8006c34:	d005      	beq.n	8006c42 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006c36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	3303      	adds	r3, #3
 8006c40:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006c42:	68fb      	ldr	r3, [r7, #12]
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c56:	f3ef 8305 	mrs	r3, IPSR
 8006c5a:	607b      	str	r3, [r7, #4]
  return(result);
 8006c5c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	bf14      	ite	ne
 8006c62:	2301      	movne	r3, #1
 8006c64:	2300      	moveq	r3, #0
 8006c66:	b2db      	uxtb	r3, r3
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006c78:	f001 fe4c 	bl	8008914 <vTaskStartScheduler>
  
  return osOK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006c86:	f7ff ffe3 	bl	8006c50 <inHandlerMode>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d003      	beq.n	8006c98 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006c90:	f001 ff6c 	bl	8008b6c <xTaskGetTickCountFromISR>
 8006c94:	4603      	mov	r3, r0
 8006c96:	e002      	b.n	8006c9e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8006c98:	f001 ff58 	bl	8008b4c <xTaskGetTickCount>
 8006c9c:	4603      	mov	r3, r0
  }
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006ca2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ca4:	b089      	sub	sp, #36	@ 0x24
 8006ca6:	af04      	add	r7, sp, #16
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	695b      	ldr	r3, [r3, #20]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d020      	beq.n	8006cf6 <osThreadCreate+0x54>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d01c      	beq.n	8006cf6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685c      	ldr	r4, [r3, #4]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	691e      	ldr	r6, [r3, #16]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7ff ffa6 	bl	8006c20 <makeFreeRtosPriority>
 8006cd4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cde:	9202      	str	r2, [sp, #8]
 8006ce0:	9301      	str	r3, [sp, #4]
 8006ce2:	9100      	str	r1, [sp, #0]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	4632      	mov	r2, r6
 8006ce8:	4629      	mov	r1, r5
 8006cea:	4620      	mov	r0, r4
 8006cec:	f001 fb90 	bl	8008410 <xTaskCreateStatic>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	60fb      	str	r3, [r7, #12]
 8006cf4:	e01c      	b.n	8006d30 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685c      	ldr	r4, [r3, #4]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d02:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7ff ff88 	bl	8006c20 <makeFreeRtosPriority>
 8006d10:	4602      	mov	r2, r0
 8006d12:	f107 030c 	add.w	r3, r7, #12
 8006d16:	9301      	str	r3, [sp, #4]
 8006d18:	9200      	str	r2, [sp, #0]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	4632      	mov	r2, r6
 8006d1e:	4629      	mov	r1, r5
 8006d20:	4620      	mov	r0, r4
 8006d22:	f001 fbdb 	bl	80084dc <xTaskCreate>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d001      	beq.n	8006d30 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	e000      	b.n	8006d32 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006d30:	68fb      	ldr	r3, [r7, #12]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3714      	adds	r7, #20
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d3a <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b082      	sub	sp, #8
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f001 fd1c 	bl	8008780 <vTaskDelete>
  return osOK;
 8006d48:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3708      	adds	r7, #8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b084      	sub	sp, #16
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d001      	beq.n	8006d68 <osDelay+0x16>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	e000      	b.n	8006d6a <osDelay+0x18>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f001 fd9a 	bl	80088a4 <vTaskDelay>
  
  return osOK;
 8006d70:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b082      	sub	sp, #8
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d007      	beq.n	8006d9a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	4619      	mov	r1, r3
 8006d90:	2001      	movs	r0, #1
 8006d92:	f000 fc9a 	bl	80076ca <xQueueCreateMutexStatic>
 8006d96:	4603      	mov	r3, r0
 8006d98:	e003      	b.n	8006da2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006d9a:	2001      	movs	r0, #1
 8006d9c:	f000 fc7d 	bl	800769a <xQueueCreateMutex>
 8006da0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
	...

08006dac <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006db6:	2300      	movs	r3, #0
 8006db8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d101      	bne.n	8006dc4 <osMutexWait+0x18>
    return osErrorParameter;
 8006dc0:	2380      	movs	r3, #128	@ 0x80
 8006dc2:	e03a      	b.n	8006e3a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dce:	d103      	bne.n	8006dd8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8006dd4:	60fb      	str	r3, [r7, #12]
 8006dd6:	e009      	b.n	8006dec <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d006      	beq.n	8006dec <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d101      	bne.n	8006dec <osMutexWait+0x40>
      ticks = 1;
 8006de8:	2301      	movs	r3, #1
 8006dea:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006dec:	f7ff ff30 	bl	8006c50 <inHandlerMode>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d017      	beq.n	8006e26 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006df6:	f107 0308 	add.w	r3, r7, #8
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f001 f8c4 	bl	8007f8c <xQueueReceiveFromISR>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d001      	beq.n	8006e0e <osMutexWait+0x62>
      return osErrorOS;
 8006e0a:	23ff      	movs	r3, #255	@ 0xff
 8006e0c:	e015      	b.n	8006e3a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d011      	beq.n	8006e38 <osMutexWait+0x8c>
 8006e14:	4b0b      	ldr	r3, [pc, #44]	@ (8006e44 <osMutexWait+0x98>)
 8006e16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	e008      	b.n	8006e38 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006e26:	68f9      	ldr	r1, [r7, #12]
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 ff97 	bl	8007d5c <xQueueSemaphoreTake>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d001      	beq.n	8006e38 <osMutexWait+0x8c>
    return osErrorOS;
 8006e34:	23ff      	movs	r3, #255	@ 0xff
 8006e36:	e000      	b.n	8006e3a <osMutexWait+0x8e>
  }
  
  return osOK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	e000ed04 	.word	0xe000ed04

08006e48 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006e50:	2300      	movs	r3, #0
 8006e52:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006e54:	2300      	movs	r3, #0
 8006e56:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006e58:	f7ff fefa 	bl	8006c50 <inHandlerMode>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d016      	beq.n	8006e90 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006e62:	f107 0308 	add.w	r3, r7, #8
 8006e66:	4619      	mov	r1, r3
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fdf6 	bl	8007a5a <xQueueGiveFromISR>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d001      	beq.n	8006e78 <osMutexRelease+0x30>
      return osErrorOS;
 8006e74:	23ff      	movs	r3, #255	@ 0xff
 8006e76:	e017      	b.n	8006ea8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d013      	beq.n	8006ea6 <osMutexRelease+0x5e>
 8006e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006eb0 <osMutexRelease+0x68>)
 8006e80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	e00a      	b.n	8006ea6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006e90:	2300      	movs	r3, #0
 8006e92:	2200      	movs	r2, #0
 8006e94:	2100      	movs	r1, #0
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fc32 	bl	8007700 <xQueueGenericSend>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d001      	beq.n	8006ea6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006ea2:	23ff      	movs	r3, #255	@ 0xff
 8006ea4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	e000ed04 	.word	0xe000ed04

08006eb4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af02      	add	r7, sp, #8
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00f      	beq.n	8006ee6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d10a      	bne.n	8006ee2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	2203      	movs	r2, #3
 8006ed2:	9200      	str	r2, [sp, #0]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	2001      	movs	r0, #1
 8006eda:	f000 fadb 	bl	8007494 <xQueueGenericCreateStatic>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	e016      	b.n	8006f10 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	e014      	b.n	8006f10 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d110      	bne.n	8006f0e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006eec:	2203      	movs	r2, #3
 8006eee:	2100      	movs	r1, #0
 8006ef0:	2001      	movs	r0, #1
 8006ef2:	f000 fb56 	bl	80075a2 <xQueueGenericCreate>
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d005      	beq.n	8006f0a <osSemaphoreCreate+0x56>
 8006efe:	2300      	movs	r3, #0
 8006f00:	2200      	movs	r2, #0
 8006f02:	2100      	movs	r1, #0
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 fbfb 	bl	8007700 <xQueueGenericSend>
      return sema;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	e000      	b.n	8006f10 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006f0e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006f22:	2300      	movs	r3, #0
 8006f24:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006f2c:	2380      	movs	r3, #128	@ 0x80
 8006f2e:	e03a      	b.n	8006fa6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006f30:	2300      	movs	r3, #0
 8006f32:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3a:	d103      	bne.n	8006f44 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f40:	60fb      	str	r3, [r7, #12]
 8006f42:	e009      	b.n	8006f58 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d006      	beq.n	8006f58 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <osSemaphoreWait+0x40>
      ticks = 1;
 8006f54:	2301      	movs	r3, #1
 8006f56:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006f58:	f7ff fe7a 	bl	8006c50 <inHandlerMode>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d017      	beq.n	8006f92 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006f62:	f107 0308 	add.w	r3, r7, #8
 8006f66:	461a      	mov	r2, r3
 8006f68:	2100      	movs	r1, #0
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 f80e 	bl	8007f8c <xQueueReceiveFromISR>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d001      	beq.n	8006f7a <osSemaphoreWait+0x62>
      return osErrorOS;
 8006f76:	23ff      	movs	r3, #255	@ 0xff
 8006f78:	e015      	b.n	8006fa6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d011      	beq.n	8006fa4 <osSemaphoreWait+0x8c>
 8006f80:	4b0b      	ldr	r3, [pc, #44]	@ (8006fb0 <osSemaphoreWait+0x98>)
 8006f82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f86:	601a      	str	r2, [r3, #0]
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	f3bf 8f6f 	isb	sy
 8006f90:	e008      	b.n	8006fa4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006f92:	68f9      	ldr	r1, [r7, #12]
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fee1 	bl	8007d5c <xQueueSemaphoreTake>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d001      	beq.n	8006fa4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006fa0:	23ff      	movs	r3, #255	@ 0xff
 8006fa2:	e000      	b.n	8006fa6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	e000ed04 	.word	0xe000ed04

08006fb4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006fc4:	f7ff fe44 	bl	8006c50 <inHandlerMode>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d016      	beq.n	8006ffc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006fce:	f107 0308 	add.w	r3, r7, #8
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fd40 	bl	8007a5a <xQueueGiveFromISR>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d001      	beq.n	8006fe4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006fe0:	23ff      	movs	r3, #255	@ 0xff
 8006fe2:	e017      	b.n	8007014 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d013      	beq.n	8007012 <osSemaphoreRelease+0x5e>
 8006fea:	4b0c      	ldr	r3, [pc, #48]	@ (800701c <osSemaphoreRelease+0x68>)
 8006fec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ff0:	601a      	str	r2, [r3, #0]
 8006ff2:	f3bf 8f4f 	dsb	sy
 8006ff6:	f3bf 8f6f 	isb	sy
 8006ffa:	e00a      	b.n	8007012 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	2200      	movs	r2, #0
 8007000:	2100      	movs	r1, #0
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fb7c 	bl	8007700 <xQueueGenericSend>
 8007008:	4603      	mov	r3, r0
 800700a:	2b01      	cmp	r3, #1
 800700c:	d001      	beq.n	8007012 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800700e:	23ff      	movs	r3, #255	@ 0xff
 8007010:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007012:	68fb      	ldr	r3, [r7, #12]
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	e000ed04 	.word	0xe000ed04

08007020 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007028:	f7ff fe12 	bl	8006c50 <inHandlerMode>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8007032:	2382      	movs	r3, #130	@ 0x82
 8007034:	e003      	b.n	800703e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f001 f872 	bl	8008120 <vQueueDelete>

  return osOK; 
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007046:	b590      	push	{r4, r7, lr}
 8007048:	b085      	sub	sp, #20
 800704a:	af02      	add	r7, sp, #8
 800704c:	6078      	str	r0, [r7, #4]
 800704e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d011      	beq.n	800707c <osMessageCreate+0x36>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00d      	beq.n	800707c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6818      	ldr	r0, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6859      	ldr	r1, [r3, #4]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	689a      	ldr	r2, [r3, #8]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	2400      	movs	r4, #0
 8007072:	9400      	str	r4, [sp, #0]
 8007074:	f000 fa0e 	bl	8007494 <xQueueGenericCreateStatic>
 8007078:	4603      	mov	r3, r0
 800707a:	e008      	b.n	800708e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6818      	ldr	r0, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	4619      	mov	r1, r3
 8007088:	f000 fa8b 	bl	80075a2 <xQueueGenericCreate>
 800708c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800708e:	4618      	mov	r0, r3
 8007090:	370c      	adds	r7, #12
 8007092:	46bd      	mov	sp, r7
 8007094:	bd90      	pop	{r4, r7, pc}
	...

08007098 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80070a4:	2300      	movs	r3, #0
 80070a6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <osMessagePut+0x1e>
    ticks = 1;
 80070b2:	2301      	movs	r3, #1
 80070b4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80070b6:	f7ff fdcb 	bl	8006c50 <inHandlerMode>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d018      	beq.n	80070f2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80070c0:	f107 0210 	add.w	r2, r7, #16
 80070c4:	f107 0108 	add.w	r1, r7, #8
 80070c8:	2300      	movs	r3, #0
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f000 fc22 	bl	8007914 <xQueueGenericSendFromISR>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d001      	beq.n	80070da <osMessagePut+0x42>
      return osErrorOS;
 80070d6:	23ff      	movs	r3, #255	@ 0xff
 80070d8:	e018      	b.n	800710c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d014      	beq.n	800710a <osMessagePut+0x72>
 80070e0:	4b0c      	ldr	r3, [pc, #48]	@ (8007114 <osMessagePut+0x7c>)
 80070e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070e6:	601a      	str	r2, [r3, #0]
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	e00b      	b.n	800710a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80070f2:	f107 0108 	add.w	r1, r7, #8
 80070f6:	2300      	movs	r3, #0
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f000 fb00 	bl	8007700 <xQueueGenericSend>
 8007100:	4603      	mov	r3, r0
 8007102:	2b01      	cmp	r3, #1
 8007104:	d001      	beq.n	800710a <osMessagePut+0x72>
      return osErrorOS;
 8007106:	23ff      	movs	r3, #255	@ 0xff
 8007108:	e000      	b.n	800710c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3718      	adds	r7, #24
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	e000ed04 	.word	0xe000ed04

08007118 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007118:	b590      	push	{r4, r7, lr}
 800711a:	b08b      	sub	sp, #44	@ 0x2c
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007128:	2300      	movs	r3, #0
 800712a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10a      	bne.n	8007148 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007132:	2380      	movs	r3, #128	@ 0x80
 8007134:	617b      	str	r3, [r7, #20]
    return event;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	461c      	mov	r4, r3
 800713a:	f107 0314 	add.w	r3, r7, #20
 800713e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007142:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007146:	e054      	b.n	80071f2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007148:	2300      	movs	r3, #0
 800714a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800714c:	2300      	movs	r3, #0
 800714e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007156:	d103      	bne.n	8007160 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007158:	f04f 33ff 	mov.w	r3, #4294967295
 800715c:	627b      	str	r3, [r7, #36]	@ 0x24
 800715e:	e009      	b.n	8007174 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d006      	beq.n	8007174 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800716a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716c:	2b00      	cmp	r3, #0
 800716e:	d101      	bne.n	8007174 <osMessageGet+0x5c>
      ticks = 1;
 8007170:	2301      	movs	r3, #1
 8007172:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007174:	f7ff fd6c 	bl	8006c50 <inHandlerMode>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d01c      	beq.n	80071b8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800717e:	f107 0220 	add.w	r2, r7, #32
 8007182:	f107 0314 	add.w	r3, r7, #20
 8007186:	3304      	adds	r3, #4
 8007188:	4619      	mov	r1, r3
 800718a:	68b8      	ldr	r0, [r7, #8]
 800718c:	f000 fefe 	bl	8007f8c <xQueueReceiveFromISR>
 8007190:	4603      	mov	r3, r0
 8007192:	2b01      	cmp	r3, #1
 8007194:	d102      	bne.n	800719c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007196:	2310      	movs	r3, #16
 8007198:	617b      	str	r3, [r7, #20]
 800719a:	e001      	b.n	80071a0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800719c:	2300      	movs	r3, #0
 800719e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80071a0:	6a3b      	ldr	r3, [r7, #32]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d01d      	beq.n	80071e2 <osMessageGet+0xca>
 80071a6:	4b15      	ldr	r3, [pc, #84]	@ (80071fc <osMessageGet+0xe4>)
 80071a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071ac:	601a      	str	r2, [r3, #0]
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	e014      	b.n	80071e2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80071b8:	f107 0314 	add.w	r3, r7, #20
 80071bc:	3304      	adds	r3, #4
 80071be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071c0:	4619      	mov	r1, r3
 80071c2:	68b8      	ldr	r0, [r7, #8]
 80071c4:	f000 fce2 	bl	8007b8c <xQueueReceive>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d102      	bne.n	80071d4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80071ce:	2310      	movs	r3, #16
 80071d0:	617b      	str	r3, [r7, #20]
 80071d2:	e006      	b.n	80071e2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80071d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <osMessageGet+0xc6>
 80071da:	2300      	movs	r3, #0
 80071dc:	e000      	b.n	80071e0 <osMessageGet+0xc8>
 80071de:	2340      	movs	r3, #64	@ 0x40
 80071e0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	461c      	mov	r4, r3
 80071e6:	f107 0314 	add.w	r3, r7, #20
 80071ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80071ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	372c      	adds	r7, #44	@ 0x2c
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd90      	pop	{r4, r7, pc}
 80071fa:	bf00      	nop
 80071fc:	e000ed04 	.word	0xe000ed04

08007200 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007208:	f7ff fd22 	bl	8006c50 <inHandlerMode>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d004      	beq.n	800721c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 ff63 	bl	80080de <uxQueueMessagesWaitingFromISR>
 8007218:	4603      	mov	r3, r0
 800721a:	e003      	b.n	8007224 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 ff3d 	bl	800809c <uxQueueMessagesWaiting>
 8007222:	4603      	mov	r3, r0
  }
}
 8007224:	4618      	mov	r0, r3
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007234:	f7ff fd0c 	bl	8006c50 <inHandlerMode>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d001      	beq.n	8007242 <osMessageDelete+0x16>
    return osErrorISR;
 800723e:	2382      	movs	r3, #130	@ 0x82
 8007240:	e003      	b.n	800724a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 ff6c 	bl	8008120 <vQueueDelete>

  return osOK; 
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007252:	b480      	push	{r7}
 8007254:	b083      	sub	sp, #12
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f103 0208 	add.w	r2, r3, #8
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f04f 32ff 	mov.w	r2, #4294967295
 800726a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f103 0208 	add.w	r2, r3, #8
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f103 0208 	add.w	r2, r3, #8
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007286:	bf00      	nop
 8007288:	370c      	adds	r7, #12
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr

08007292 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007292:	b480      	push	{r7}
 8007294:	b083      	sub	sp, #12
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	689a      	ldr	r2, [r3, #8]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	683a      	ldr	r2, [r7, #0]
 80072d6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	1c5a      	adds	r2, r3, #1
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	601a      	str	r2, [r3, #0]
}
 80072e8:	bf00      	nop
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730a:	d103      	bne.n	8007314 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	60fb      	str	r3, [r7, #12]
 8007312:	e00c      	b.n	800732e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	3308      	adds	r3, #8
 8007318:	60fb      	str	r3, [r7, #12]
 800731a:	e002      	b.n	8007322 <vListInsert+0x2e>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	60fb      	str	r3, [r7, #12]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	429a      	cmp	r2, r3
 800732c:	d2f6      	bcs.n	800731c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	685a      	ldr	r2, [r3, #4]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	1c5a      	adds	r2, r3, #1
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	601a      	str	r2, [r3, #0]
}
 800735a:	bf00      	nop
 800735c:	3714      	adds	r7, #20
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007366:	b480      	push	{r7}
 8007368:	b085      	sub	sp, #20
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	6892      	ldr	r2, [r2, #8]
 800737c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	6852      	ldr	r2, [r2, #4]
 8007386:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	429a      	cmp	r2, r3
 8007390:	d103      	bne.n	800739a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	689a      	ldr	r2, [r3, #8]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	1e5a      	subs	r2, r3, #1
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
	...

080073bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10d      	bne.n	80073ec <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80073d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d4:	b672      	cpsid	i
 80073d6:	f383 8811 	msr	BASEPRI, r3
 80073da:	f3bf 8f6f 	isb	sy
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	b662      	cpsie	i
 80073e4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80073e6:	bf00      	nop
 80073e8:	bf00      	nop
 80073ea:	e7fd      	b.n	80073e8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80073ec:	f002 fa76 	bl	80098dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073f8:	68f9      	ldr	r1, [r7, #12]
 80073fa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80073fc:	fb01 f303 	mul.w	r3, r1, r3
 8007400:	441a      	add	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800741c:	3b01      	subs	r3, #1
 800741e:	68f9      	ldr	r1, [r7, #12]
 8007420:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007422:	fb01 f303 	mul.w	r3, r1, r3
 8007426:	441a      	add	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	22ff      	movs	r2, #255	@ 0xff
 8007430:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	22ff      	movs	r2, #255	@ 0xff
 8007438:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d114      	bne.n	800746c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d01a      	beq.n	8007480 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	3310      	adds	r3, #16
 800744e:	4618      	mov	r0, r3
 8007450:	f001 fcf6 	bl	8008e40 <xTaskRemoveFromEventList>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d012      	beq.n	8007480 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800745a:	4b0d      	ldr	r3, [pc, #52]	@ (8007490 <xQueueGenericReset+0xd4>)
 800745c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	e009      	b.n	8007480 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	3310      	adds	r3, #16
 8007470:	4618      	mov	r0, r3
 8007472:	f7ff feee 	bl	8007252 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	3324      	adds	r3, #36	@ 0x24
 800747a:	4618      	mov	r0, r3
 800747c:	f7ff fee9 	bl	8007252 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007480:	f002 fa62 	bl	8009948 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007484:	2301      	movs	r3, #1
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	e000ed04 	.word	0xe000ed04

08007494 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007494:	b580      	push	{r7, lr}
 8007496:	b08e      	sub	sp, #56	@ 0x38
 8007498:	af02      	add	r7, sp, #8
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
 80074a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10d      	bne.n	80074c4 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80074a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ac:	b672      	cpsid	i
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	b662      	cpsie	i
 80074bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80074be:	bf00      	nop
 80074c0:	bf00      	nop
 80074c2:	e7fd      	b.n	80074c0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10d      	bne.n	80074e6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80074ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ce:	b672      	cpsid	i
 80074d0:	f383 8811 	msr	BASEPRI, r3
 80074d4:	f3bf 8f6f 	isb	sy
 80074d8:	f3bf 8f4f 	dsb	sy
 80074dc:	b662      	cpsie	i
 80074de:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80074e0:	bf00      	nop
 80074e2:	bf00      	nop
 80074e4:	e7fd      	b.n	80074e2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d002      	beq.n	80074f2 <xQueueGenericCreateStatic+0x5e>
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d001      	beq.n	80074f6 <xQueueGenericCreateStatic+0x62>
 80074f2:	2301      	movs	r3, #1
 80074f4:	e000      	b.n	80074f8 <xQueueGenericCreateStatic+0x64>
 80074f6:	2300      	movs	r3, #0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10d      	bne.n	8007518 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80074fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007500:	b672      	cpsid	i
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	b662      	cpsie	i
 8007510:	623b      	str	r3, [r7, #32]
}
 8007512:	bf00      	nop
 8007514:	bf00      	nop
 8007516:	e7fd      	b.n	8007514 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d102      	bne.n	8007524 <xQueueGenericCreateStatic+0x90>
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d101      	bne.n	8007528 <xQueueGenericCreateStatic+0x94>
 8007524:	2301      	movs	r3, #1
 8007526:	e000      	b.n	800752a <xQueueGenericCreateStatic+0x96>
 8007528:	2300      	movs	r3, #0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10d      	bne.n	800754a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800752e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007532:	b672      	cpsid	i
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	b662      	cpsie	i
 8007542:	61fb      	str	r3, [r7, #28]
}
 8007544:	bf00      	nop
 8007546:	bf00      	nop
 8007548:	e7fd      	b.n	8007546 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800754a:	2348      	movs	r3, #72	@ 0x48
 800754c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2b48      	cmp	r3, #72	@ 0x48
 8007552:	d00d      	beq.n	8007570 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8007554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007558:	b672      	cpsid	i
 800755a:	f383 8811 	msr	BASEPRI, r3
 800755e:	f3bf 8f6f 	isb	sy
 8007562:	f3bf 8f4f 	dsb	sy
 8007566:	b662      	cpsie	i
 8007568:	61bb      	str	r3, [r7, #24]
}
 800756a:	bf00      	nop
 800756c:	bf00      	nop
 800756e:	e7fd      	b.n	800756c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007570:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00d      	beq.n	8007598 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800757c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800757e:	2201      	movs	r2, #1
 8007580:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007584:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	4613      	mov	r3, r2
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	68b9      	ldr	r1, [r7, #8]
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f000 f848 	bl	8007628 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800759a:	4618      	mov	r0, r3
 800759c:	3730      	adds	r7, #48	@ 0x30
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b08a      	sub	sp, #40	@ 0x28
 80075a6:	af02      	add	r7, sp, #8
 80075a8:	60f8      	str	r0, [r7, #12]
 80075aa:	60b9      	str	r1, [r7, #8]
 80075ac:	4613      	mov	r3, r2
 80075ae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10d      	bne.n	80075d2 <xQueueGenericCreate+0x30>
	__asm volatile
 80075b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ba:	b672      	cpsid	i
 80075bc:	f383 8811 	msr	BASEPRI, r3
 80075c0:	f3bf 8f6f 	isb	sy
 80075c4:	f3bf 8f4f 	dsb	sy
 80075c8:	b662      	cpsie	i
 80075ca:	613b      	str	r3, [r7, #16]
}
 80075cc:	bf00      	nop
 80075ce:	bf00      	nop
 80075d0:	e7fd      	b.n	80075ce <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d102      	bne.n	80075de <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80075d8:	2300      	movs	r3, #0
 80075da:	61fb      	str	r3, [r7, #28]
 80075dc:	e004      	b.n	80075e8 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	fb02 f303 	mul.w	r3, r2, r3
 80075e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	3348      	adds	r3, #72	@ 0x48
 80075ec:	4618      	mov	r0, r3
 80075ee:	f002 faa3 	bl	8009b38 <pvPortMalloc>
 80075f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d011      	beq.n	800761e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	3348      	adds	r3, #72	@ 0x48
 8007602:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800760c:	79fa      	ldrb	r2, [r7, #7]
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	9300      	str	r3, [sp, #0]
 8007612:	4613      	mov	r3, r2
 8007614:	697a      	ldr	r2, [r7, #20]
 8007616:	68b9      	ldr	r1, [r7, #8]
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 f805 	bl	8007628 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800761e:	69bb      	ldr	r3, [r7, #24]
	}
 8007620:	4618      	mov	r0, r3
 8007622:	3720      	adds	r7, #32
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
 8007634:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d103      	bne.n	8007644 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	69ba      	ldr	r2, [r7, #24]
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	e002      	b.n	800764a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007656:	2101      	movs	r1, #1
 8007658:	69b8      	ldr	r0, [r7, #24]
 800765a:	f7ff feaf 	bl	80073bc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800765e:	bf00      	nop
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007666:	b580      	push	{r7, lr}
 8007668:	b082      	sub	sp, #8
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00e      	beq.n	8007692 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007686:	2300      	movs	r3, #0
 8007688:	2200      	movs	r2, #0
 800768a:	2100      	movs	r1, #0
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f837 	bl	8007700 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007692:	bf00      	nop
 8007694:	3708      	adds	r7, #8
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800769a:	b580      	push	{r7, lr}
 800769c:	b086      	sub	sp, #24
 800769e:	af00      	add	r7, sp, #0
 80076a0:	4603      	mov	r3, r0
 80076a2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80076a4:	2301      	movs	r3, #1
 80076a6:	617b      	str	r3, [r7, #20]
 80076a8:	2300      	movs	r3, #0
 80076aa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80076ac:	79fb      	ldrb	r3, [r7, #7]
 80076ae:	461a      	mov	r2, r3
 80076b0:	6939      	ldr	r1, [r7, #16]
 80076b2:	6978      	ldr	r0, [r7, #20]
 80076b4:	f7ff ff75 	bl	80075a2 <xQueueGenericCreate>
 80076b8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f7ff ffd3 	bl	8007666 <prvInitialiseMutex>

		return xNewQueue;
 80076c0:	68fb      	ldr	r3, [r7, #12]
	}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3718      	adds	r7, #24
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b088      	sub	sp, #32
 80076ce:	af02      	add	r7, sp, #8
 80076d0:	4603      	mov	r3, r0
 80076d2:	6039      	str	r1, [r7, #0]
 80076d4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80076d6:	2301      	movs	r3, #1
 80076d8:	617b      	str	r3, [r7, #20]
 80076da:	2300      	movs	r3, #0
 80076dc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80076de:	79fb      	ldrb	r3, [r7, #7]
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	2200      	movs	r2, #0
 80076e6:	6939      	ldr	r1, [r7, #16]
 80076e8:	6978      	ldr	r0, [r7, #20]
 80076ea:	f7ff fed3 	bl	8007494 <xQueueGenericCreateStatic>
 80076ee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f7ff ffb8 	bl	8007666 <prvInitialiseMutex>

		return xNewQueue;
 80076f6:	68fb      	ldr	r3, [r7, #12]
	}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3718      	adds	r7, #24
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b08e      	sub	sp, #56	@ 0x38
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
 800770c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800770e:	2300      	movs	r3, #0
 8007710:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10d      	bne.n	8007738 <xQueueGenericSend+0x38>
	__asm volatile
 800771c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007720:	b672      	cpsid	i
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	b662      	cpsie	i
 8007730:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007732:	bf00      	nop
 8007734:	bf00      	nop
 8007736:	e7fd      	b.n	8007734 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d103      	bne.n	8007746 <xQueueGenericSend+0x46>
 800773e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007742:	2b00      	cmp	r3, #0
 8007744:	d101      	bne.n	800774a <xQueueGenericSend+0x4a>
 8007746:	2301      	movs	r3, #1
 8007748:	e000      	b.n	800774c <xQueueGenericSend+0x4c>
 800774a:	2300      	movs	r3, #0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10d      	bne.n	800776c <xQueueGenericSend+0x6c>
	__asm volatile
 8007750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007754:	b672      	cpsid	i
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	b662      	cpsie	i
 8007764:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007766:	bf00      	nop
 8007768:	bf00      	nop
 800776a:	e7fd      	b.n	8007768 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	2b02      	cmp	r3, #2
 8007770:	d103      	bne.n	800777a <xQueueGenericSend+0x7a>
 8007772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007776:	2b01      	cmp	r3, #1
 8007778:	d101      	bne.n	800777e <xQueueGenericSend+0x7e>
 800777a:	2301      	movs	r3, #1
 800777c:	e000      	b.n	8007780 <xQueueGenericSend+0x80>
 800777e:	2300      	movs	r3, #0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10d      	bne.n	80077a0 <xQueueGenericSend+0xa0>
	__asm volatile
 8007784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007788:	b672      	cpsid	i
 800778a:	f383 8811 	msr	BASEPRI, r3
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f3bf 8f4f 	dsb	sy
 8007796:	b662      	cpsie	i
 8007798:	623b      	str	r3, [r7, #32]
}
 800779a:	bf00      	nop
 800779c:	bf00      	nop
 800779e:	e7fd      	b.n	800779c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077a0:	f001 fd46 	bl	8009230 <xTaskGetSchedulerState>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d102      	bne.n	80077b0 <xQueueGenericSend+0xb0>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d101      	bne.n	80077b4 <xQueueGenericSend+0xb4>
 80077b0:	2301      	movs	r3, #1
 80077b2:	e000      	b.n	80077b6 <xQueueGenericSend+0xb6>
 80077b4:	2300      	movs	r3, #0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10d      	bne.n	80077d6 <xQueueGenericSend+0xd6>
	__asm volatile
 80077ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077be:	b672      	cpsid	i
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	b662      	cpsie	i
 80077ce:	61fb      	str	r3, [r7, #28]
}
 80077d0:	bf00      	nop
 80077d2:	bf00      	nop
 80077d4:	e7fd      	b.n	80077d2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077d6:	f002 f881 	bl	80098dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80077da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d302      	bcc.n	80077ec <xQueueGenericSend+0xec>
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d129      	bne.n	8007840 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077ec:	683a      	ldr	r2, [r7, #0]
 80077ee:	68b9      	ldr	r1, [r7, #8]
 80077f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80077f2:	f000 fcd3 	bl	800819c <prvCopyDataToQueue>
 80077f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d010      	beq.n	8007822 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007802:	3324      	adds	r3, #36	@ 0x24
 8007804:	4618      	mov	r0, r3
 8007806:	f001 fb1b 	bl	8008e40 <xTaskRemoveFromEventList>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d013      	beq.n	8007838 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007810:	4b3f      	ldr	r3, [pc, #252]	@ (8007910 <xQueueGenericSend+0x210>)
 8007812:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007816:	601a      	str	r2, [r3, #0]
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	e00a      	b.n	8007838 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007824:	2b00      	cmp	r3, #0
 8007826:	d007      	beq.n	8007838 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007828:	4b39      	ldr	r3, [pc, #228]	@ (8007910 <xQueueGenericSend+0x210>)
 800782a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007838:	f002 f886 	bl	8009948 <vPortExitCritical>
				return pdPASS;
 800783c:	2301      	movs	r3, #1
 800783e:	e063      	b.n	8007908 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d103      	bne.n	800784e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007846:	f002 f87f 	bl	8009948 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800784a:	2300      	movs	r3, #0
 800784c:	e05c      	b.n	8007908 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800784e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007850:	2b00      	cmp	r3, #0
 8007852:	d106      	bne.n	8007862 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007854:	f107 0314 	add.w	r3, r7, #20
 8007858:	4618      	mov	r0, r3
 800785a:	f001 fb81 	bl	8008f60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800785e:	2301      	movs	r3, #1
 8007860:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007862:	f002 f871 	bl	8009948 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007866:	f001 f8c3 	bl	80089f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800786a:	f002 f837 	bl	80098dc <vPortEnterCritical>
 800786e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007870:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007874:	b25b      	sxtb	r3, r3
 8007876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800787a:	d103      	bne.n	8007884 <xQueueGenericSend+0x184>
 800787c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787e:	2200      	movs	r2, #0
 8007880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007886:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800788a:	b25b      	sxtb	r3, r3
 800788c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007890:	d103      	bne.n	800789a <xQueueGenericSend+0x19a>
 8007892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800789a:	f002 f855 	bl	8009948 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800789e:	1d3a      	adds	r2, r7, #4
 80078a0:	f107 0314 	add.w	r3, r7, #20
 80078a4:	4611      	mov	r1, r2
 80078a6:	4618      	mov	r0, r3
 80078a8:	f001 fb70 	bl	8008f8c <xTaskCheckForTimeOut>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d124      	bne.n	80078fc <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80078b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078b4:	f000 fd6a 	bl	800838c <prvIsQueueFull>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d018      	beq.n	80078f0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80078be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c0:	3310      	adds	r3, #16
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	4611      	mov	r1, r2
 80078c6:	4618      	mov	r0, r3
 80078c8:	f001 fa92 	bl	8008df0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80078cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078ce:	f000 fcf5 	bl	80082bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80078d2:	f001 f89b 	bl	8008a0c <xTaskResumeAll>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f47f af7c 	bne.w	80077d6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80078de:	4b0c      	ldr	r3, [pc, #48]	@ (8007910 <xQueueGenericSend+0x210>)
 80078e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078e4:	601a      	str	r2, [r3, #0]
 80078e6:	f3bf 8f4f 	dsb	sy
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	e772      	b.n	80077d6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80078f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078f2:	f000 fce3 	bl	80082bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078f6:	f001 f889 	bl	8008a0c <xTaskResumeAll>
 80078fa:	e76c      	b.n	80077d6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80078fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078fe:	f000 fcdd 	bl	80082bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007902:	f001 f883 	bl	8008a0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007906:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007908:	4618      	mov	r0, r3
 800790a:	3738      	adds	r7, #56	@ 0x38
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	e000ed04 	.word	0xe000ed04

08007914 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b08e      	sub	sp, #56	@ 0x38
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	607a      	str	r2, [r7, #4]
 8007920:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10d      	bne.n	8007948 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800792c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007930:	b672      	cpsid	i
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	b662      	cpsie	i
 8007940:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007942:	bf00      	nop
 8007944:	bf00      	nop
 8007946:	e7fd      	b.n	8007944 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d103      	bne.n	8007956 <xQueueGenericSendFromISR+0x42>
 800794e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <xQueueGenericSendFromISR+0x46>
 8007956:	2301      	movs	r3, #1
 8007958:	e000      	b.n	800795c <xQueueGenericSendFromISR+0x48>
 800795a:	2300      	movs	r3, #0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10d      	bne.n	800797c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007964:	b672      	cpsid	i
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	b662      	cpsie	i
 8007974:	623b      	str	r3, [r7, #32]
}
 8007976:	bf00      	nop
 8007978:	bf00      	nop
 800797a:	e7fd      	b.n	8007978 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	2b02      	cmp	r3, #2
 8007980:	d103      	bne.n	800798a <xQueueGenericSendFromISR+0x76>
 8007982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007986:	2b01      	cmp	r3, #1
 8007988:	d101      	bne.n	800798e <xQueueGenericSendFromISR+0x7a>
 800798a:	2301      	movs	r3, #1
 800798c:	e000      	b.n	8007990 <xQueueGenericSendFromISR+0x7c>
 800798e:	2300      	movs	r3, #0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10d      	bne.n	80079b0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8007994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007998:	b672      	cpsid	i
 800799a:	f383 8811 	msr	BASEPRI, r3
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	f3bf 8f4f 	dsb	sy
 80079a6:	b662      	cpsie	i
 80079a8:	61fb      	str	r3, [r7, #28]
}
 80079aa:	bf00      	nop
 80079ac:	bf00      	nop
 80079ae:	e7fd      	b.n	80079ac <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079b0:	f002 f87c 	bl	8009aac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80079b4:	f3ef 8211 	mrs	r2, BASEPRI
 80079b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079bc:	b672      	cpsid	i
 80079be:	f383 8811 	msr	BASEPRI, r3
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	b662      	cpsie	i
 80079cc:	61ba      	str	r2, [r7, #24]
 80079ce:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80079d0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80079d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079dc:	429a      	cmp	r2, r3
 80079de:	d302      	bcc.n	80079e6 <xQueueGenericSendFromISR+0xd2>
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d12c      	bne.n	8007a40 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80079e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079f0:	683a      	ldr	r2, [r7, #0]
 80079f2:	68b9      	ldr	r1, [r7, #8]
 80079f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079f6:	f000 fbd1 	bl	800819c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80079fa:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80079fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a02:	d112      	bne.n	8007a2a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d016      	beq.n	8007a3a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0e:	3324      	adds	r3, #36	@ 0x24
 8007a10:	4618      	mov	r0, r3
 8007a12:	f001 fa15 	bl	8008e40 <xTaskRemoveFromEventList>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00e      	beq.n	8007a3a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00b      	beq.n	8007a3a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	601a      	str	r2, [r3, #0]
 8007a28:	e007      	b.n	8007a3a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a2a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a2e:	3301      	adds	r3, #1
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	b25a      	sxtb	r2, r3
 8007a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8007a3e:	e001      	b.n	8007a44 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a40:	2300      	movs	r3, #0
 8007a42:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a46:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a4e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3738      	adds	r7, #56	@ 0x38
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b08e      	sub	sp, #56	@ 0x38
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10d      	bne.n	8007a8a <xQueueGiveFromISR+0x30>
	__asm volatile
 8007a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a72:	b672      	cpsid	i
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	b662      	cpsie	i
 8007a82:	623b      	str	r3, [r7, #32]
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop
 8007a88:	e7fd      	b.n	8007a86 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00d      	beq.n	8007aae <xQueueGiveFromISR+0x54>
	__asm volatile
 8007a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a96:	b672      	cpsid	i
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	b662      	cpsie	i
 8007aa6:	61fb      	str	r3, [r7, #28]
}
 8007aa8:	bf00      	nop
 8007aaa:	bf00      	nop
 8007aac:	e7fd      	b.n	8007aaa <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d103      	bne.n	8007abe <xQueueGiveFromISR+0x64>
 8007ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d101      	bne.n	8007ac2 <xQueueGiveFromISR+0x68>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e000      	b.n	8007ac4 <xQueueGiveFromISR+0x6a>
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10d      	bne.n	8007ae4 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8007ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007acc:	b672      	cpsid	i
 8007ace:	f383 8811 	msr	BASEPRI, r3
 8007ad2:	f3bf 8f6f 	isb	sy
 8007ad6:	f3bf 8f4f 	dsb	sy
 8007ada:	b662      	cpsie	i
 8007adc:	61bb      	str	r3, [r7, #24]
}
 8007ade:	bf00      	nop
 8007ae0:	bf00      	nop
 8007ae2:	e7fd      	b.n	8007ae0 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ae4:	f001 ffe2 	bl	8009aac <vPortValidateInterruptPriority>
	__asm volatile
 8007ae8:	f3ef 8211 	mrs	r2, BASEPRI
 8007aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af0:	b672      	cpsid	i
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	b662      	cpsie	i
 8007b00:	617a      	str	r2, [r7, #20]
 8007b02:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007b04:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b0c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d22b      	bcs.n	8007b70 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b24:	1c5a      	adds	r2, r3, #1
 8007b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b28:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007b2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b32:	d112      	bne.n	8007b5a <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d016      	beq.n	8007b6a <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3e:	3324      	adds	r3, #36	@ 0x24
 8007b40:	4618      	mov	r0, r3
 8007b42:	f001 f97d 	bl	8008e40 <xTaskRemoveFromEventList>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00e      	beq.n	8007b6a <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00b      	beq.n	8007b6a <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	2201      	movs	r2, #1
 8007b56:	601a      	str	r2, [r3, #0]
 8007b58:	e007      	b.n	8007b6a <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b5e:	3301      	adds	r3, #1
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	b25a      	sxtb	r2, r3
 8007b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b6e:	e001      	b.n	8007b74 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b70:	2300      	movs	r3, #0
 8007b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b76:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f383 8811 	msr	BASEPRI, r3
}
 8007b7e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3738      	adds	r7, #56	@ 0x38
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
	...

08007b8c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b08c      	sub	sp, #48	@ 0x30
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10d      	bne.n	8007bc2 <xQueueReceive+0x36>
	__asm volatile
 8007ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007baa:	b672      	cpsid	i
 8007bac:	f383 8811 	msr	BASEPRI, r3
 8007bb0:	f3bf 8f6f 	isb	sy
 8007bb4:	f3bf 8f4f 	dsb	sy
 8007bb8:	b662      	cpsie	i
 8007bba:	623b      	str	r3, [r7, #32]
}
 8007bbc:	bf00      	nop
 8007bbe:	bf00      	nop
 8007bc0:	e7fd      	b.n	8007bbe <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d103      	bne.n	8007bd0 <xQueueReceive+0x44>
 8007bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <xQueueReceive+0x48>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e000      	b.n	8007bd6 <xQueueReceive+0x4a>
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10d      	bne.n	8007bf6 <xQueueReceive+0x6a>
	__asm volatile
 8007bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bde:	b672      	cpsid	i
 8007be0:	f383 8811 	msr	BASEPRI, r3
 8007be4:	f3bf 8f6f 	isb	sy
 8007be8:	f3bf 8f4f 	dsb	sy
 8007bec:	b662      	cpsie	i
 8007bee:	61fb      	str	r3, [r7, #28]
}
 8007bf0:	bf00      	nop
 8007bf2:	bf00      	nop
 8007bf4:	e7fd      	b.n	8007bf2 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007bf6:	f001 fb1b 	bl	8009230 <xTaskGetSchedulerState>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d102      	bne.n	8007c06 <xQueueReceive+0x7a>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d101      	bne.n	8007c0a <xQueueReceive+0x7e>
 8007c06:	2301      	movs	r3, #1
 8007c08:	e000      	b.n	8007c0c <xQueueReceive+0x80>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d10d      	bne.n	8007c2c <xQueueReceive+0xa0>
	__asm volatile
 8007c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c14:	b672      	cpsid	i
 8007c16:	f383 8811 	msr	BASEPRI, r3
 8007c1a:	f3bf 8f6f 	isb	sy
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	b662      	cpsie	i
 8007c24:	61bb      	str	r3, [r7, #24]
}
 8007c26:	bf00      	nop
 8007c28:	bf00      	nop
 8007c2a:	e7fd      	b.n	8007c28 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c2c:	f001 fe56 	bl	80098dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c34:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d01f      	beq.n	8007c7c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c3c:	68b9      	ldr	r1, [r7, #8]
 8007c3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c40:	f000 fb16 	bl	8008270 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c46:	1e5a      	subs	r2, r3, #1
 8007c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c4a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00f      	beq.n	8007c74 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c56:	3310      	adds	r3, #16
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f001 f8f1 	bl	8008e40 <xTaskRemoveFromEventList>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d007      	beq.n	8007c74 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c64:	4b3c      	ldr	r3, [pc, #240]	@ (8007d58 <xQueueReceive+0x1cc>)
 8007c66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c6a:	601a      	str	r2, [r3, #0]
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c74:	f001 fe68 	bl	8009948 <vPortExitCritical>
				return pdPASS;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e069      	b.n	8007d50 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d103      	bne.n	8007c8a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c82:	f001 fe61 	bl	8009948 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c86:	2300      	movs	r3, #0
 8007c88:	e062      	b.n	8007d50 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d106      	bne.n	8007c9e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c90:	f107 0310 	add.w	r3, r7, #16
 8007c94:	4618      	mov	r0, r3
 8007c96:	f001 f963 	bl	8008f60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c9e:	f001 fe53 	bl	8009948 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ca2:	f000 fea5 	bl	80089f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ca6:	f001 fe19 	bl	80098dc <vPortEnterCritical>
 8007caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007cb0:	b25b      	sxtb	r3, r3
 8007cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cb6:	d103      	bne.n	8007cc0 <xQueueReceive+0x134>
 8007cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007cc6:	b25b      	sxtb	r3, r3
 8007cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ccc:	d103      	bne.n	8007cd6 <xQueueReceive+0x14a>
 8007cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cd6:	f001 fe37 	bl	8009948 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007cda:	1d3a      	adds	r2, r7, #4
 8007cdc:	f107 0310 	add.w	r3, r7, #16
 8007ce0:	4611      	mov	r1, r2
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f001 f952 	bl	8008f8c <xTaskCheckForTimeOut>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d123      	bne.n	8007d36 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cf0:	f000 fb36 	bl	8008360 <prvIsQueueEmpty>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d017      	beq.n	8007d2a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cfc:	3324      	adds	r3, #36	@ 0x24
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	4611      	mov	r1, r2
 8007d02:	4618      	mov	r0, r3
 8007d04:	f001 f874 	bl	8008df0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d0a:	f000 fad7 	bl	80082bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d0e:	f000 fe7d 	bl	8008a0c <xTaskResumeAll>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d189      	bne.n	8007c2c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8007d18:	4b0f      	ldr	r3, [pc, #60]	@ (8007d58 <xQueueReceive+0x1cc>)
 8007d1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d1e:	601a      	str	r2, [r3, #0]
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	e780      	b.n	8007c2c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007d2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d2c:	f000 fac6 	bl	80082bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d30:	f000 fe6c 	bl	8008a0c <xTaskResumeAll>
 8007d34:	e77a      	b.n	8007c2c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007d36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d38:	f000 fac0 	bl	80082bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d3c:	f000 fe66 	bl	8008a0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d42:	f000 fb0d 	bl	8008360 <prvIsQueueEmpty>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f43f af6f 	beq.w	8007c2c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d4e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3730      	adds	r7, #48	@ 0x30
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	e000ed04 	.word	0xe000ed04

08007d5c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b08e      	sub	sp, #56	@ 0x38
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d66:	2300      	movs	r3, #0
 8007d68:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10d      	bne.n	8007d94 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8007d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d7c:	b672      	cpsid	i
 8007d7e:	f383 8811 	msr	BASEPRI, r3
 8007d82:	f3bf 8f6f 	isb	sy
 8007d86:	f3bf 8f4f 	dsb	sy
 8007d8a:	b662      	cpsie	i
 8007d8c:	623b      	str	r3, [r7, #32]
}
 8007d8e:	bf00      	nop
 8007d90:	bf00      	nop
 8007d92:	e7fd      	b.n	8007d90 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00d      	beq.n	8007db8 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8007d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da0:	b672      	cpsid	i
 8007da2:	f383 8811 	msr	BASEPRI, r3
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	b662      	cpsie	i
 8007db0:	61fb      	str	r3, [r7, #28]
}
 8007db2:	bf00      	nop
 8007db4:	bf00      	nop
 8007db6:	e7fd      	b.n	8007db4 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007db8:	f001 fa3a 	bl	8009230 <xTaskGetSchedulerState>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d102      	bne.n	8007dc8 <xQueueSemaphoreTake+0x6c>
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d101      	bne.n	8007dcc <xQueueSemaphoreTake+0x70>
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e000      	b.n	8007dce <xQueueSemaphoreTake+0x72>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10d      	bne.n	8007dee <xQueueSemaphoreTake+0x92>
	__asm volatile
 8007dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd6:	b672      	cpsid	i
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	b662      	cpsie	i
 8007de6:	61bb      	str	r3, [r7, #24]
}
 8007de8:	bf00      	nop
 8007dea:	bf00      	nop
 8007dec:	e7fd      	b.n	8007dea <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007dee:	f001 fd75 	bl	80098dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d024      	beq.n	8007e48 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e00:	1e5a      	subs	r2, r3, #1
 8007e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e04:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d104      	bne.n	8007e18 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007e0e:	f001 fbd9 	bl	80095c4 <pvTaskIncrementMutexHeldCount>
 8007e12:	4602      	mov	r2, r0
 8007e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e16:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00f      	beq.n	8007e40 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e22:	3310      	adds	r3, #16
 8007e24:	4618      	mov	r0, r3
 8007e26:	f001 f80b 	bl	8008e40 <xTaskRemoveFromEventList>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d007      	beq.n	8007e40 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e30:	4b55      	ldr	r3, [pc, #340]	@ (8007f88 <xQueueSemaphoreTake+0x22c>)
 8007e32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e36:	601a      	str	r2, [r3, #0]
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e40:	f001 fd82 	bl	8009948 <vPortExitCritical>
				return pdPASS;
 8007e44:	2301      	movs	r3, #1
 8007e46:	e09a      	b.n	8007f7e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d114      	bne.n	8007e78 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00d      	beq.n	8007e70 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8007e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e58:	b672      	cpsid	i
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	b662      	cpsie	i
 8007e68:	617b      	str	r3, [r7, #20]
}
 8007e6a:	bf00      	nop
 8007e6c:	bf00      	nop
 8007e6e:	e7fd      	b.n	8007e6c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007e70:	f001 fd6a 	bl	8009948 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e74:	2300      	movs	r3, #0
 8007e76:	e082      	b.n	8007f7e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d106      	bne.n	8007e8c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e7e:	f107 030c 	add.w	r3, r7, #12
 8007e82:	4618      	mov	r0, r3
 8007e84:	f001 f86c 	bl	8008f60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e8c:	f001 fd5c 	bl	8009948 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e90:	f000 fdae 	bl	80089f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e94:	f001 fd22 	bl	80098dc <vPortEnterCritical>
 8007e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e9a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e9e:	b25b      	sxtb	r3, r3
 8007ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea4:	d103      	bne.n	8007eae <xQueueSemaphoreTake+0x152>
 8007ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007eb4:	b25b      	sxtb	r3, r3
 8007eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eba:	d103      	bne.n	8007ec4 <xQueueSemaphoreTake+0x168>
 8007ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ec4:	f001 fd40 	bl	8009948 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ec8:	463a      	mov	r2, r7
 8007eca:	f107 030c 	add.w	r3, r7, #12
 8007ece:	4611      	mov	r1, r2
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f001 f85b 	bl	8008f8c <xTaskCheckForTimeOut>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d132      	bne.n	8007f42 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007edc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007ede:	f000 fa3f 	bl	8008360 <prvIsQueueEmpty>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d026      	beq.n	8007f36 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d109      	bne.n	8007f04 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8007ef0:	f001 fcf4 	bl	80098dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f001 f9b7 	bl	800926c <xTaskPriorityInherit>
 8007efe:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007f00:	f001 fd22 	bl	8009948 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f06:	3324      	adds	r3, #36	@ 0x24
 8007f08:	683a      	ldr	r2, [r7, #0]
 8007f0a:	4611      	mov	r1, r2
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f000 ff6f 	bl	8008df0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f14:	f000 f9d2 	bl	80082bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f18:	f000 fd78 	bl	8008a0c <xTaskResumeAll>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f47f af65 	bne.w	8007dee <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8007f24:	4b18      	ldr	r3, [pc, #96]	@ (8007f88 <xQueueSemaphoreTake+0x22c>)
 8007f26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f2a:	601a      	str	r2, [r3, #0]
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	f3bf 8f6f 	isb	sy
 8007f34:	e75b      	b.n	8007dee <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007f36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f38:	f000 f9c0 	bl	80082bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f3c:	f000 fd66 	bl	8008a0c <xTaskResumeAll>
 8007f40:	e755      	b.n	8007dee <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007f42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f44:	f000 f9ba 	bl	80082bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f48:	f000 fd60 	bl	8008a0c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f4e:	f000 fa07 	bl	8008360 <prvIsQueueEmpty>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f43f af4a 	beq.w	8007dee <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00d      	beq.n	8007f7c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8007f60:	f001 fcbc 	bl	80098dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007f64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f66:	f000 f901 	bl	800816c <prvGetDisinheritPriorityAfterTimeout>
 8007f6a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f72:	4618      	mov	r0, r3
 8007f74:	f001 fa86 	bl	8009484 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007f78:	f001 fce6 	bl	8009948 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3738      	adds	r7, #56	@ 0x38
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	e000ed04 	.word	0xe000ed04

08007f8c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b08e      	sub	sp, #56	@ 0x38
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10d      	bne.n	8007fbe <xQueueReceiveFromISR+0x32>
	__asm volatile
 8007fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa6:	b672      	cpsid	i
 8007fa8:	f383 8811 	msr	BASEPRI, r3
 8007fac:	f3bf 8f6f 	isb	sy
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	b662      	cpsie	i
 8007fb6:	623b      	str	r3, [r7, #32]
}
 8007fb8:	bf00      	nop
 8007fba:	bf00      	nop
 8007fbc:	e7fd      	b.n	8007fba <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d103      	bne.n	8007fcc <xQueueReceiveFromISR+0x40>
 8007fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d101      	bne.n	8007fd0 <xQueueReceiveFromISR+0x44>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e000      	b.n	8007fd2 <xQueueReceiveFromISR+0x46>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d10d      	bne.n	8007ff2 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8007fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fda:	b672      	cpsid	i
 8007fdc:	f383 8811 	msr	BASEPRI, r3
 8007fe0:	f3bf 8f6f 	isb	sy
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	b662      	cpsie	i
 8007fea:	61fb      	str	r3, [r7, #28]
}
 8007fec:	bf00      	nop
 8007fee:	bf00      	nop
 8007ff0:	e7fd      	b.n	8007fee <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ff2:	f001 fd5b 	bl	8009aac <vPortValidateInterruptPriority>
	__asm volatile
 8007ff6:	f3ef 8211 	mrs	r2, BASEPRI
 8007ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ffe:	b672      	cpsid	i
 8008000:	f383 8811 	msr	BASEPRI, r3
 8008004:	f3bf 8f6f 	isb	sy
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	b662      	cpsie	i
 800800e:	61ba      	str	r2, [r7, #24]
 8008010:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008012:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008014:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800801a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800801c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800801e:	2b00      	cmp	r3, #0
 8008020:	d02f      	beq.n	8008082 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008024:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008028:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800802c:	68b9      	ldr	r1, [r7, #8]
 800802e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008030:	f000 f91e 	bl	8008270 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008036:	1e5a      	subs	r2, r3, #1
 8008038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800803c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008044:	d112      	bne.n	800806c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d016      	beq.n	800807c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800804e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008050:	3310      	adds	r3, #16
 8008052:	4618      	mov	r0, r3
 8008054:	f000 fef4 	bl	8008e40 <xTaskRemoveFromEventList>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00e      	beq.n	800807c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00b      	beq.n	800807c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	601a      	str	r2, [r3, #0]
 800806a:	e007      	b.n	800807c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800806c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008070:	3301      	adds	r3, #1
 8008072:	b2db      	uxtb	r3, r3
 8008074:	b25a      	sxtb	r2, r3
 8008076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008078:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800807c:	2301      	movs	r3, #1
 800807e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008080:	e001      	b.n	8008086 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8008082:	2300      	movs	r3, #0
 8008084:	637b      	str	r3, [r7, #52]	@ 0x34
 8008086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008088:	613b      	str	r3, [r7, #16]
	__asm volatile
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	f383 8811 	msr	BASEPRI, r3
}
 8008090:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008094:	4618      	mov	r0, r3
 8008096:	3738      	adds	r7, #56	@ 0x38
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d10d      	bne.n	80080c6 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 80080aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ae:	b672      	cpsid	i
 80080b0:	f383 8811 	msr	BASEPRI, r3
 80080b4:	f3bf 8f6f 	isb	sy
 80080b8:	f3bf 8f4f 	dsb	sy
 80080bc:	b662      	cpsie	i
 80080be:	60bb      	str	r3, [r7, #8]
}
 80080c0:	bf00      	nop
 80080c2:	bf00      	nop
 80080c4:	e7fd      	b.n	80080c2 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80080c6:	f001 fc09 	bl	80098dc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ce:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80080d0:	f001 fc3a 	bl	8009948 <vPortExitCritical>

	return uxReturn;
 80080d4:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80080de:	b480      	push	{r7}
 80080e0:	b087      	sub	sp, #28
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d10d      	bne.n	800810c <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 80080f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f4:	b672      	cpsid	i
 80080f6:	f383 8811 	msr	BASEPRI, r3
 80080fa:	f3bf 8f6f 	isb	sy
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	b662      	cpsie	i
 8008104:	60fb      	str	r3, [r7, #12]
}
 8008106:	bf00      	nop
 8008108:	bf00      	nop
 800810a:	e7fd      	b.n	8008108 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008110:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8008112:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008114:	4618      	mov	r0, r3
 8008116:	371c      	adds	r7, #28
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10d      	bne.n	800814e <vQueueDelete+0x2e>
	__asm volatile
 8008132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008136:	b672      	cpsid	i
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	b662      	cpsie	i
 8008146:	60bb      	str	r3, [r7, #8]
}
 8008148:	bf00      	nop
 800814a:	bf00      	nop
 800814c:	e7fd      	b.n	800814a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f000 f934 	bl	80083bc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800815a:	2b00      	cmp	r3, #0
 800815c:	d102      	bne.n	8008164 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f001 fdb8 	bl	8009cd4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008164:	bf00      	nop
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008178:	2b00      	cmp	r3, #0
 800817a:	d006      	beq.n	800818a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f1c3 0307 	rsb	r3, r3, #7
 8008186:	60fb      	str	r3, [r7, #12]
 8008188:	e001      	b.n	800818e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800818a:	2300      	movs	r3, #0
 800818c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800818e:	68fb      	ldr	r3, [r7, #12]
	}
 8008190:	4618      	mov	r0, r3
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80081a8:	2300      	movs	r3, #0
 80081aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d10d      	bne.n	80081d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d14d      	bne.n	800825e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f001 f8d0 	bl	800936c <xTaskPriorityDisinherit>
 80081cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	609a      	str	r2, [r3, #8]
 80081d4:	e043      	b.n	800825e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d119      	bne.n	8008210 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6858      	ldr	r0, [r3, #4]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e4:	461a      	mov	r2, r3
 80081e6:	68b9      	ldr	r1, [r7, #8]
 80081e8:	f020 f951 	bl	802848e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	685a      	ldr	r2, [r3, #4]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081f4:	441a      	add	r2, r3
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	685a      	ldr	r2, [r3, #4]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	429a      	cmp	r2, r3
 8008204:	d32b      	bcc.n	800825e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	605a      	str	r2, [r3, #4]
 800820e:	e026      	b.n	800825e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	68d8      	ldr	r0, [r3, #12]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008218:	461a      	mov	r2, r3
 800821a:	68b9      	ldr	r1, [r7, #8]
 800821c:	f020 f937 	bl	802848e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	68da      	ldr	r2, [r3, #12]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008228:	425b      	negs	r3, r3
 800822a:	441a      	add	r2, r3
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	68da      	ldr	r2, [r3, #12]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	429a      	cmp	r2, r3
 800823a:	d207      	bcs.n	800824c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	689a      	ldr	r2, [r3, #8]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008244:	425b      	negs	r3, r3
 8008246:	441a      	add	r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b02      	cmp	r3, #2
 8008250:	d105      	bne.n	800825e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d002      	beq.n	800825e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	3b01      	subs	r3, #1
 800825c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	1c5a      	adds	r2, r3, #1
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008266:	697b      	ldr	r3, [r7, #20]
}
 8008268:	4618      	mov	r0, r3
 800826a:	3718      	adds	r7, #24
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800827e:	2b00      	cmp	r3, #0
 8008280:	d018      	beq.n	80082b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	68da      	ldr	r2, [r3, #12]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800828a:	441a      	add	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	68da      	ldr	r2, [r3, #12]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	429a      	cmp	r2, r3
 800829a:	d303      	bcc.n	80082a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	68d9      	ldr	r1, [r3, #12]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ac:	461a      	mov	r2, r3
 80082ae:	6838      	ldr	r0, [r7, #0]
 80082b0:	f020 f8ed 	bl	802848e <memcpy>
	}
}
 80082b4:	bf00      	nop
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80082c4:	f001 fb0a 	bl	80098dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082d0:	e011      	b.n	80082f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d012      	beq.n	8008300 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	3324      	adds	r3, #36	@ 0x24
 80082de:	4618      	mov	r0, r3
 80082e0:	f000 fdae 	bl	8008e40 <xTaskRemoveFromEventList>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80082ea:	f000 feb7 	bl	800905c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082ee:	7bfb      	ldrb	r3, [r7, #15]
 80082f0:	3b01      	subs	r3, #1
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	dce9      	bgt.n	80082d2 <prvUnlockQueue+0x16>
 80082fe:	e000      	b.n	8008302 <prvUnlockQueue+0x46>
					break;
 8008300:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	22ff      	movs	r2, #255	@ 0xff
 8008306:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800830a:	f001 fb1d 	bl	8009948 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800830e:	f001 fae5 	bl	80098dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008318:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800831a:	e011      	b.n	8008340 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d012      	beq.n	800834a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	3310      	adds	r3, #16
 8008328:	4618      	mov	r0, r3
 800832a:	f000 fd89 	bl	8008e40 <xTaskRemoveFromEventList>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d001      	beq.n	8008338 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008334:	f000 fe92 	bl	800905c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008338:	7bbb      	ldrb	r3, [r7, #14]
 800833a:	3b01      	subs	r3, #1
 800833c:	b2db      	uxtb	r3, r3
 800833e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008340:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008344:	2b00      	cmp	r3, #0
 8008346:	dce9      	bgt.n	800831c <prvUnlockQueue+0x60>
 8008348:	e000      	b.n	800834c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800834a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	22ff      	movs	r2, #255	@ 0xff
 8008350:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008354:	f001 faf8 	bl	8009948 <vPortExitCritical>
}
 8008358:	bf00      	nop
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008368:	f001 fab8 	bl	80098dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008370:	2b00      	cmp	r3, #0
 8008372:	d102      	bne.n	800837a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008374:	2301      	movs	r3, #1
 8008376:	60fb      	str	r3, [r7, #12]
 8008378:	e001      	b.n	800837e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800837a:	2300      	movs	r3, #0
 800837c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800837e:	f001 fae3 	bl	8009948 <vPortExitCritical>

	return xReturn;
 8008382:	68fb      	ldr	r3, [r7, #12]
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008394:	f001 faa2 	bl	80098dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d102      	bne.n	80083aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80083a4:	2301      	movs	r3, #1
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	e001      	b.n	80083ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80083aa:	2300      	movs	r3, #0
 80083ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083ae:	f001 facb 	bl	8009948 <vPortExitCritical>

	return xReturn;
 80083b2:	68fb      	ldr	r3, [r7, #12]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3710      	adds	r7, #16
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083c4:	2300      	movs	r3, #0
 80083c6:	60fb      	str	r3, [r7, #12]
 80083c8:	e016      	b.n	80083f8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80083ca:	4a10      	ldr	r2, [pc, #64]	@ (800840c <vQueueUnregisterQueue+0x50>)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	00db      	lsls	r3, r3, #3
 80083d0:	4413      	add	r3, r2
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d10b      	bne.n	80083f2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80083da:	4a0c      	ldr	r2, [pc, #48]	@ (800840c <vQueueUnregisterQueue+0x50>)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2100      	movs	r1, #0
 80083e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80083e4:	4a09      	ldr	r2, [pc, #36]	@ (800840c <vQueueUnregisterQueue+0x50>)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	00db      	lsls	r3, r3, #3
 80083ea:	4413      	add	r3, r2
 80083ec:	2200      	movs	r2, #0
 80083ee:	605a      	str	r2, [r3, #4]
				break;
 80083f0:	e006      	b.n	8008400 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	3301      	adds	r3, #1
 80083f6:	60fb      	str	r3, [r7, #12]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2b07      	cmp	r3, #7
 80083fc:	d9e5      	bls.n	80083ca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80083fe:	bf00      	nop
 8008400:	bf00      	nop
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr
 800840c:	20005984 	.word	0x20005984

08008410 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008410:	b580      	push	{r7, lr}
 8008412:	b08e      	sub	sp, #56	@ 0x38
 8008414:	af04      	add	r7, sp, #16
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
 800841c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800841e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10d      	bne.n	8008440 <xTaskCreateStatic+0x30>
	__asm volatile
 8008424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008428:	b672      	cpsid	i
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	b662      	cpsie	i
 8008438:	623b      	str	r3, [r7, #32]
}
 800843a:	bf00      	nop
 800843c:	bf00      	nop
 800843e:	e7fd      	b.n	800843c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10d      	bne.n	8008462 <xTaskCreateStatic+0x52>
	__asm volatile
 8008446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800844a:	b672      	cpsid	i
 800844c:	f383 8811 	msr	BASEPRI, r3
 8008450:	f3bf 8f6f 	isb	sy
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	b662      	cpsie	i
 800845a:	61fb      	str	r3, [r7, #28]
}
 800845c:	bf00      	nop
 800845e:	bf00      	nop
 8008460:	e7fd      	b.n	800845e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008462:	23a0      	movs	r3, #160	@ 0xa0
 8008464:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	2ba0      	cmp	r3, #160	@ 0xa0
 800846a:	d00d      	beq.n	8008488 <xTaskCreateStatic+0x78>
	__asm volatile
 800846c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008470:	b672      	cpsid	i
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	b662      	cpsie	i
 8008480:	61bb      	str	r3, [r7, #24]
}
 8008482:	bf00      	nop
 8008484:	bf00      	nop
 8008486:	e7fd      	b.n	8008484 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008488:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800848a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800848c:	2b00      	cmp	r3, #0
 800848e:	d01e      	beq.n	80084ce <xTaskCreateStatic+0xbe>
 8008490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008492:	2b00      	cmp	r3, #0
 8008494:	d01b      	beq.n	80084ce <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008498:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800849a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800849e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a2:	2202      	movs	r2, #2
 80084a4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084a8:	2300      	movs	r3, #0
 80084aa:	9303      	str	r3, [sp, #12]
 80084ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ae:	9302      	str	r3, [sp, #8]
 80084b0:	f107 0314 	add.w	r3, r7, #20
 80084b4:	9301      	str	r3, [sp, #4]
 80084b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	68b9      	ldr	r1, [r7, #8]
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f000 f851 	bl	8008568 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80084c8:	f000 f8f0 	bl	80086ac <prvAddNewTaskToReadyList>
 80084cc:	e001      	b.n	80084d2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80084ce:	2300      	movs	r3, #0
 80084d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80084d2:	697b      	ldr	r3, [r7, #20]
	}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3728      	adds	r7, #40	@ 0x28
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b08c      	sub	sp, #48	@ 0x30
 80084e0:	af04      	add	r7, sp, #16
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	603b      	str	r3, [r7, #0]
 80084e8:	4613      	mov	r3, r2
 80084ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80084ec:	88fb      	ldrh	r3, [r7, #6]
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	4618      	mov	r0, r3
 80084f2:	f001 fb21 	bl	8009b38 <pvPortMalloc>
 80084f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00e      	beq.n	800851c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80084fe:	20a0      	movs	r0, #160	@ 0xa0
 8008500:	f001 fb1a 	bl	8009b38 <pvPortMalloc>
 8008504:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d003      	beq.n	8008514 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	697a      	ldr	r2, [r7, #20]
 8008510:	631a      	str	r2, [r3, #48]	@ 0x30
 8008512:	e005      	b.n	8008520 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008514:	6978      	ldr	r0, [r7, #20]
 8008516:	f001 fbdd 	bl	8009cd4 <vPortFree>
 800851a:	e001      	b.n	8008520 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800851c:	2300      	movs	r3, #0
 800851e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d017      	beq.n	8008556 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800852e:	88fa      	ldrh	r2, [r7, #6]
 8008530:	2300      	movs	r3, #0
 8008532:	9303      	str	r3, [sp, #12]
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	9302      	str	r3, [sp, #8]
 8008538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800853a:	9301      	str	r3, [sp, #4]
 800853c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800853e:	9300      	str	r3, [sp, #0]
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	68b9      	ldr	r1, [r7, #8]
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f000 f80f 	bl	8008568 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800854a:	69f8      	ldr	r0, [r7, #28]
 800854c:	f000 f8ae 	bl	80086ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008550:	2301      	movs	r3, #1
 8008552:	61bb      	str	r3, [r7, #24]
 8008554:	e002      	b.n	800855c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008556:	f04f 33ff 	mov.w	r3, #4294967295
 800855a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800855c:	69bb      	ldr	r3, [r7, #24]
	}
 800855e:	4618      	mov	r0, r3
 8008560:	3720      	adds	r7, #32
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
	...

08008568 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b088      	sub	sp, #32
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	607a      	str	r2, [r7, #4]
 8008574:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008578:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800857a:	6879      	ldr	r1, [r7, #4]
 800857c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008580:	440b      	add	r3, r1
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4413      	add	r3, r2
 8008586:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	f023 0307 	bic.w	r3, r3, #7
 800858e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	f003 0307 	and.w	r3, r3, #7
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00d      	beq.n	80085b6 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800859a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800859e:	b672      	cpsid	i
 80085a0:	f383 8811 	msr	BASEPRI, r3
 80085a4:	f3bf 8f6f 	isb	sy
 80085a8:	f3bf 8f4f 	dsb	sy
 80085ac:	b662      	cpsie	i
 80085ae:	617b      	str	r3, [r7, #20]
}
 80085b0:	bf00      	nop
 80085b2:	bf00      	nop
 80085b4:	e7fd      	b.n	80085b2 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d01f      	beq.n	80085fc <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085bc:	2300      	movs	r3, #0
 80085be:	61fb      	str	r3, [r7, #28]
 80085c0:	e012      	b.n	80085e8 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80085c2:	68ba      	ldr	r2, [r7, #8]
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	4413      	add	r3, r2
 80085c8:	7819      	ldrb	r1, [r3, #0]
 80085ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	4413      	add	r3, r2
 80085d0:	3334      	adds	r3, #52	@ 0x34
 80085d2:	460a      	mov	r2, r1
 80085d4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	4413      	add	r3, r2
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d006      	beq.n	80085f0 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	3301      	adds	r3, #1
 80085e6:	61fb      	str	r3, [r7, #28]
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	2b0f      	cmp	r3, #15
 80085ec:	d9e9      	bls.n	80085c2 <prvInitialiseNewTask+0x5a>
 80085ee:	e000      	b.n	80085f2 <prvInitialiseNewTask+0x8a>
			{
				break;
 80085f0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80085f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80085fa:	e003      	b.n	8008604 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80085fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008606:	2b06      	cmp	r3, #6
 8008608:	d901      	bls.n	800860e <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800860a:	2306      	movs	r3, #6
 800860c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800860e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008610:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008612:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008616:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008618:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800861a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861c:	2200      	movs	r2, #0
 800861e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008622:	3304      	adds	r3, #4
 8008624:	4618      	mov	r0, r3
 8008626:	f7fe fe34 	bl	8007292 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800862a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862c:	3318      	adds	r3, #24
 800862e:	4618      	mov	r0, r3
 8008630:	f7fe fe2f 	bl	8007292 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008636:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008638:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800863a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800863c:	f1c3 0207 	rsb	r2, r3, #7
 8008640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008642:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008646:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008648:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800864a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864c:	2200      	movs	r2, #0
 800864e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008654:	2200      	movs	r2, #0
 8008656:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800865a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865c:	334c      	adds	r3, #76	@ 0x4c
 800865e:	224c      	movs	r2, #76	@ 0x4c
 8008660:	2100      	movs	r1, #0
 8008662:	4618      	mov	r0, r3
 8008664:	f01f fdec 	bl	8028240 <memset>
 8008668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800866a:	4a0d      	ldr	r2, [pc, #52]	@ (80086a0 <prvInitialiseNewTask+0x138>)
 800866c:	651a      	str	r2, [r3, #80]	@ 0x50
 800866e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008670:	4a0c      	ldr	r2, [pc, #48]	@ (80086a4 <prvInitialiseNewTask+0x13c>)
 8008672:	655a      	str	r2, [r3, #84]	@ 0x54
 8008674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008676:	4a0c      	ldr	r2, [pc, #48]	@ (80086a8 <prvInitialiseNewTask+0x140>)
 8008678:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800867a:	683a      	ldr	r2, [r7, #0]
 800867c:	68f9      	ldr	r1, [r7, #12]
 800867e:	69b8      	ldr	r0, [r7, #24]
 8008680:	f001 f81a 	bl	80096b8 <pxPortInitialiseStack>
 8008684:	4602      	mov	r2, r0
 8008686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008688:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800868a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800868c:	2b00      	cmp	r3, #0
 800868e:	d002      	beq.n	8008696 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008696:	bf00      	nop
 8008698:	3720      	adds	r7, #32
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	20014fe8 	.word	0x20014fe8
 80086a4:	20015050 	.word	0x20015050
 80086a8:	200150b8 	.word	0x200150b8

080086ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80086b4:	f001 f912 	bl	80098dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80086b8:	4b2a      	ldr	r3, [pc, #168]	@ (8008764 <prvAddNewTaskToReadyList+0xb8>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	3301      	adds	r3, #1
 80086be:	4a29      	ldr	r2, [pc, #164]	@ (8008764 <prvAddNewTaskToReadyList+0xb8>)
 80086c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80086c2:	4b29      	ldr	r3, [pc, #164]	@ (8008768 <prvAddNewTaskToReadyList+0xbc>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d109      	bne.n	80086de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80086ca:	4a27      	ldr	r2, [pc, #156]	@ (8008768 <prvAddNewTaskToReadyList+0xbc>)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80086d0:	4b24      	ldr	r3, [pc, #144]	@ (8008764 <prvAddNewTaskToReadyList+0xb8>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d110      	bne.n	80086fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80086d8:	f000 fce4 	bl	80090a4 <prvInitialiseTaskLists>
 80086dc:	e00d      	b.n	80086fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80086de:	4b23      	ldr	r3, [pc, #140]	@ (800876c <prvAddNewTaskToReadyList+0xc0>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d109      	bne.n	80086fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80086e6:	4b20      	ldr	r3, [pc, #128]	@ (8008768 <prvAddNewTaskToReadyList+0xbc>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d802      	bhi.n	80086fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80086f4:	4a1c      	ldr	r2, [pc, #112]	@ (8008768 <prvAddNewTaskToReadyList+0xbc>)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80086fa:	4b1d      	ldr	r3, [pc, #116]	@ (8008770 <prvAddNewTaskToReadyList+0xc4>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	3301      	adds	r3, #1
 8008700:	4a1b      	ldr	r2, [pc, #108]	@ (8008770 <prvAddNewTaskToReadyList+0xc4>)
 8008702:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008708:	2201      	movs	r2, #1
 800870a:	409a      	lsls	r2, r3
 800870c:	4b19      	ldr	r3, [pc, #100]	@ (8008774 <prvAddNewTaskToReadyList+0xc8>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4313      	orrs	r3, r2
 8008712:	4a18      	ldr	r2, [pc, #96]	@ (8008774 <prvAddNewTaskToReadyList+0xc8>)
 8008714:	6013      	str	r3, [r2, #0]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800871a:	4613      	mov	r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4413      	add	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	4a15      	ldr	r2, [pc, #84]	@ (8008778 <prvAddNewTaskToReadyList+0xcc>)
 8008724:	441a      	add	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	3304      	adds	r3, #4
 800872a:	4619      	mov	r1, r3
 800872c:	4610      	mov	r0, r2
 800872e:	f7fe fdbd 	bl	80072ac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008732:	f001 f909 	bl	8009948 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008736:	4b0d      	ldr	r3, [pc, #52]	@ (800876c <prvAddNewTaskToReadyList+0xc0>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00e      	beq.n	800875c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800873e:	4b0a      	ldr	r3, [pc, #40]	@ (8008768 <prvAddNewTaskToReadyList+0xbc>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008748:	429a      	cmp	r2, r3
 800874a:	d207      	bcs.n	800875c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800874c:	4b0b      	ldr	r3, [pc, #44]	@ (800877c <prvAddNewTaskToReadyList+0xd0>)
 800874e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008752:	601a      	str	r2, [r3, #0]
 8008754:	f3bf 8f4f 	dsb	sy
 8008758:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800875c:	bf00      	nop
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	20005ac4 	.word	0x20005ac4
 8008768:	200059c4 	.word	0x200059c4
 800876c:	20005ad0 	.word	0x20005ad0
 8008770:	20005ae0 	.word	0x20005ae0
 8008774:	20005acc 	.word	0x20005acc
 8008778:	200059c8 	.word	0x200059c8
 800877c:	e000ed04 	.word	0xe000ed04

08008780 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008788:	f001 f8a8 	bl	80098dc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d102      	bne.n	8008798 <vTaskDelete+0x18>
 8008792:	4b3a      	ldr	r3, [pc, #232]	@ (800887c <vTaskDelete+0xfc>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	e000      	b.n	800879a <vTaskDelete+0x1a>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	3304      	adds	r3, #4
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7fe fde0 	bl	8007366 <uxListRemove>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d115      	bne.n	80087d8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087b0:	4933      	ldr	r1, [pc, #204]	@ (8008880 <vTaskDelete+0x100>)
 80087b2:	4613      	mov	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4413      	add	r3, r2
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	440b      	add	r3, r1
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d10a      	bne.n	80087d8 <vTaskDelete+0x58>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c6:	2201      	movs	r2, #1
 80087c8:	fa02 f303 	lsl.w	r3, r2, r3
 80087cc:	43da      	mvns	r2, r3
 80087ce:	4b2d      	ldr	r3, [pc, #180]	@ (8008884 <vTaskDelete+0x104>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4013      	ands	r3, r2
 80087d4:	4a2b      	ldr	r2, [pc, #172]	@ (8008884 <vTaskDelete+0x104>)
 80087d6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d004      	beq.n	80087ea <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	3318      	adds	r3, #24
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7fe fdbe 	bl	8007366 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80087ea:	4b27      	ldr	r3, [pc, #156]	@ (8008888 <vTaskDelete+0x108>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	3301      	adds	r3, #1
 80087f0:	4a25      	ldr	r2, [pc, #148]	@ (8008888 <vTaskDelete+0x108>)
 80087f2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80087f4:	4b21      	ldr	r3, [pc, #132]	@ (800887c <vTaskDelete+0xfc>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d10b      	bne.n	8008816 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	3304      	adds	r3, #4
 8008802:	4619      	mov	r1, r3
 8008804:	4821      	ldr	r0, [pc, #132]	@ (800888c <vTaskDelete+0x10c>)
 8008806:	f7fe fd51 	bl	80072ac <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800880a:	4b21      	ldr	r3, [pc, #132]	@ (8008890 <vTaskDelete+0x110>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	3301      	adds	r3, #1
 8008810:	4a1f      	ldr	r2, [pc, #124]	@ (8008890 <vTaskDelete+0x110>)
 8008812:	6013      	str	r3, [r2, #0]
 8008814:	e009      	b.n	800882a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008816:	4b1f      	ldr	r3, [pc, #124]	@ (8008894 <vTaskDelete+0x114>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	3b01      	subs	r3, #1
 800881c:	4a1d      	ldr	r2, [pc, #116]	@ (8008894 <vTaskDelete+0x114>)
 800881e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f000 fcad 	bl	8009180 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008826:	f000 fce3 	bl	80091f0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800882a:	f001 f88d 	bl	8009948 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800882e:	4b1a      	ldr	r3, [pc, #104]	@ (8008898 <vTaskDelete+0x118>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d01e      	beq.n	8008874 <vTaskDelete+0xf4>
		{
			if( pxTCB == pxCurrentTCB )
 8008836:	4b11      	ldr	r3, [pc, #68]	@ (800887c <vTaskDelete+0xfc>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	429a      	cmp	r2, r3
 800883e:	d119      	bne.n	8008874 <vTaskDelete+0xf4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008840:	4b16      	ldr	r3, [pc, #88]	@ (800889c <vTaskDelete+0x11c>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00d      	beq.n	8008864 <vTaskDelete+0xe4>
	__asm volatile
 8008848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884c:	b672      	cpsid	i
 800884e:	f383 8811 	msr	BASEPRI, r3
 8008852:	f3bf 8f6f 	isb	sy
 8008856:	f3bf 8f4f 	dsb	sy
 800885a:	b662      	cpsie	i
 800885c:	60bb      	str	r3, [r7, #8]
}
 800885e:	bf00      	nop
 8008860:	bf00      	nop
 8008862:	e7fd      	b.n	8008860 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8008864:	4b0e      	ldr	r3, [pc, #56]	@ (80088a0 <vTaskDelete+0x120>)
 8008866:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800886a:	601a      	str	r2, [r3, #0]
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008874:	bf00      	nop
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	200059c4 	.word	0x200059c4
 8008880:	200059c8 	.word	0x200059c8
 8008884:	20005acc 	.word	0x20005acc
 8008888:	20005ae0 	.word	0x20005ae0
 800888c:	20005a98 	.word	0x20005a98
 8008890:	20005aac 	.word	0x20005aac
 8008894:	20005ac4 	.word	0x20005ac4
 8008898:	20005ad0 	.word	0x20005ad0
 800889c:	20005aec 	.word	0x20005aec
 80088a0:	e000ed04 	.word	0xe000ed04

080088a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80088ac:	2300      	movs	r3, #0
 80088ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d01a      	beq.n	80088ec <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80088b6:	4b15      	ldr	r3, [pc, #84]	@ (800890c <vTaskDelay+0x68>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00d      	beq.n	80088da <vTaskDelay+0x36>
	__asm volatile
 80088be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c2:	b672      	cpsid	i
 80088c4:	f383 8811 	msr	BASEPRI, r3
 80088c8:	f3bf 8f6f 	isb	sy
 80088cc:	f3bf 8f4f 	dsb	sy
 80088d0:	b662      	cpsie	i
 80088d2:	60bb      	str	r3, [r7, #8]
}
 80088d4:	bf00      	nop
 80088d6:	bf00      	nop
 80088d8:	e7fd      	b.n	80088d6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80088da:	f000 f889 	bl	80089f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80088de:	2100      	movs	r1, #0
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 fe83 	bl	80095ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80088e6:	f000 f891 	bl	8008a0c <xTaskResumeAll>
 80088ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d107      	bne.n	8008902 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80088f2:	4b07      	ldr	r3, [pc, #28]	@ (8008910 <vTaskDelay+0x6c>)
 80088f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088f8:	601a      	str	r2, [r3, #0]
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008902:	bf00      	nop
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	20005aec 	.word	0x20005aec
 8008910:	e000ed04 	.word	0xe000ed04

08008914 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b08a      	sub	sp, #40	@ 0x28
 8008918:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800891a:	2300      	movs	r3, #0
 800891c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800891e:	2300      	movs	r3, #0
 8008920:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008922:	463a      	mov	r2, r7
 8008924:	1d39      	adds	r1, r7, #4
 8008926:	f107 0308 	add.w	r3, r7, #8
 800892a:	4618      	mov	r0, r3
 800892c:	f7f8 f87a 	bl	8000a24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008930:	6839      	ldr	r1, [r7, #0]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	68ba      	ldr	r2, [r7, #8]
 8008936:	9202      	str	r2, [sp, #8]
 8008938:	9301      	str	r3, [sp, #4]
 800893a:	2300      	movs	r3, #0
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	2300      	movs	r3, #0
 8008940:	460a      	mov	r2, r1
 8008942:	4923      	ldr	r1, [pc, #140]	@ (80089d0 <vTaskStartScheduler+0xbc>)
 8008944:	4823      	ldr	r0, [pc, #140]	@ (80089d4 <vTaskStartScheduler+0xc0>)
 8008946:	f7ff fd63 	bl	8008410 <xTaskCreateStatic>
 800894a:	4603      	mov	r3, r0
 800894c:	4a22      	ldr	r2, [pc, #136]	@ (80089d8 <vTaskStartScheduler+0xc4>)
 800894e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008950:	4b21      	ldr	r3, [pc, #132]	@ (80089d8 <vTaskStartScheduler+0xc4>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d002      	beq.n	800895e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008958:	2301      	movs	r3, #1
 800895a:	617b      	str	r3, [r7, #20]
 800895c:	e001      	b.n	8008962 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800895e:	2300      	movs	r3, #0
 8008960:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d11d      	bne.n	80089a4 <vTaskStartScheduler+0x90>
	__asm volatile
 8008968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800896c:	b672      	cpsid	i
 800896e:	f383 8811 	msr	BASEPRI, r3
 8008972:	f3bf 8f6f 	isb	sy
 8008976:	f3bf 8f4f 	dsb	sy
 800897a:	b662      	cpsie	i
 800897c:	613b      	str	r3, [r7, #16]
}
 800897e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008980:	4b16      	ldr	r3, [pc, #88]	@ (80089dc <vTaskStartScheduler+0xc8>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	334c      	adds	r3, #76	@ 0x4c
 8008986:	4a16      	ldr	r2, [pc, #88]	@ (80089e0 <vTaskStartScheduler+0xcc>)
 8008988:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800898a:	4b16      	ldr	r3, [pc, #88]	@ (80089e4 <vTaskStartScheduler+0xd0>)
 800898c:	f04f 32ff 	mov.w	r2, #4294967295
 8008990:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008992:	4b15      	ldr	r3, [pc, #84]	@ (80089e8 <vTaskStartScheduler+0xd4>)
 8008994:	2201      	movs	r2, #1
 8008996:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008998:	4b14      	ldr	r3, [pc, #80]	@ (80089ec <vTaskStartScheduler+0xd8>)
 800899a:	2200      	movs	r2, #0
 800899c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800899e:	f000 ff1f 	bl	80097e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80089a2:	e011      	b.n	80089c8 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089aa:	d10d      	bne.n	80089c8 <vTaskStartScheduler+0xb4>
	__asm volatile
 80089ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b0:	b672      	cpsid	i
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	b662      	cpsie	i
 80089c0:	60fb      	str	r3, [r7, #12]
}
 80089c2:	bf00      	nop
 80089c4:	bf00      	nop
 80089c6:	e7fd      	b.n	80089c4 <vTaskStartScheduler+0xb0>
}
 80089c8:	bf00      	nop
 80089ca:	3718      	adds	r7, #24
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	080293a0 	.word	0x080293a0
 80089d4:	08009075 	.word	0x08009075
 80089d8:	20005ae8 	.word	0x20005ae8
 80089dc:	200059c4 	.word	0x200059c4
 80089e0:	200007a8 	.word	0x200007a8
 80089e4:	20005ae4 	.word	0x20005ae4
 80089e8:	20005ad0 	.word	0x20005ad0
 80089ec:	20005ac8 	.word	0x20005ac8

080089f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80089f0:	b480      	push	{r7}
 80089f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80089f4:	4b04      	ldr	r3, [pc, #16]	@ (8008a08 <vTaskSuspendAll+0x18>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	3301      	adds	r3, #1
 80089fa:	4a03      	ldr	r2, [pc, #12]	@ (8008a08 <vTaskSuspendAll+0x18>)
 80089fc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80089fe:	bf00      	nop
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr
 8008a08:	20005aec 	.word	0x20005aec

08008a0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008a12:	2300      	movs	r3, #0
 8008a14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008a16:	2300      	movs	r3, #0
 8008a18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008a1a:	4b43      	ldr	r3, [pc, #268]	@ (8008b28 <xTaskResumeAll+0x11c>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10d      	bne.n	8008a3e <xTaskResumeAll+0x32>
	__asm volatile
 8008a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a26:	b672      	cpsid	i
 8008a28:	f383 8811 	msr	BASEPRI, r3
 8008a2c:	f3bf 8f6f 	isb	sy
 8008a30:	f3bf 8f4f 	dsb	sy
 8008a34:	b662      	cpsie	i
 8008a36:	603b      	str	r3, [r7, #0]
}
 8008a38:	bf00      	nop
 8008a3a:	bf00      	nop
 8008a3c:	e7fd      	b.n	8008a3a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008a3e:	f000 ff4d 	bl	80098dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008a42:	4b39      	ldr	r3, [pc, #228]	@ (8008b28 <xTaskResumeAll+0x11c>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	3b01      	subs	r3, #1
 8008a48:	4a37      	ldr	r2, [pc, #220]	@ (8008b28 <xTaskResumeAll+0x11c>)
 8008a4a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a4c:	4b36      	ldr	r3, [pc, #216]	@ (8008b28 <xTaskResumeAll+0x11c>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d161      	bne.n	8008b18 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008a54:	4b35      	ldr	r3, [pc, #212]	@ (8008b2c <xTaskResumeAll+0x120>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d05d      	beq.n	8008b18 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a5c:	e02e      	b.n	8008abc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a5e:	4b34      	ldr	r3, [pc, #208]	@ (8008b30 <xTaskResumeAll+0x124>)
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	3318      	adds	r3, #24
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7fe fc7b 	bl	8007366 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	3304      	adds	r3, #4
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7fe fc76 	bl	8007366 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a7e:	2201      	movs	r2, #1
 8008a80:	409a      	lsls	r2, r3
 8008a82:	4b2c      	ldr	r3, [pc, #176]	@ (8008b34 <xTaskResumeAll+0x128>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	4a2a      	ldr	r2, [pc, #168]	@ (8008b34 <xTaskResumeAll+0x128>)
 8008a8a:	6013      	str	r3, [r2, #0]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a90:	4613      	mov	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4413      	add	r3, r2
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	4a27      	ldr	r2, [pc, #156]	@ (8008b38 <xTaskResumeAll+0x12c>)
 8008a9a:	441a      	add	r2, r3
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	3304      	adds	r3, #4
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	4610      	mov	r0, r2
 8008aa4:	f7fe fc02 	bl	80072ac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aac:	4b23      	ldr	r3, [pc, #140]	@ (8008b3c <xTaskResumeAll+0x130>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d302      	bcc.n	8008abc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008ab6:	4b22      	ldr	r3, [pc, #136]	@ (8008b40 <xTaskResumeAll+0x134>)
 8008ab8:	2201      	movs	r2, #1
 8008aba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008abc:	4b1c      	ldr	r3, [pc, #112]	@ (8008b30 <xTaskResumeAll+0x124>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d1cc      	bne.n	8008a5e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d001      	beq.n	8008ace <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008aca:	f000 fb91 	bl	80091f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008ace:	4b1d      	ldr	r3, [pc, #116]	@ (8008b44 <xTaskResumeAll+0x138>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d010      	beq.n	8008afc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008ada:	f000 f859 	bl	8008b90 <xTaskIncrementTick>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d002      	beq.n	8008aea <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008ae4:	4b16      	ldr	r3, [pc, #88]	@ (8008b40 <xTaskResumeAll+0x134>)
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	3b01      	subs	r3, #1
 8008aee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1f1      	bne.n	8008ada <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008af6:	4b13      	ldr	r3, [pc, #76]	@ (8008b44 <xTaskResumeAll+0x138>)
 8008af8:	2200      	movs	r2, #0
 8008afa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008afc:	4b10      	ldr	r3, [pc, #64]	@ (8008b40 <xTaskResumeAll+0x134>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d009      	beq.n	8008b18 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008b04:	2301      	movs	r3, #1
 8008b06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008b08:	4b0f      	ldr	r3, [pc, #60]	@ (8008b48 <xTaskResumeAll+0x13c>)
 8008b0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b0e:	601a      	str	r2, [r3, #0]
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b18:	f000 ff16 	bl	8009948 <vPortExitCritical>

	return xAlreadyYielded;
 8008b1c:	68bb      	ldr	r3, [r7, #8]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	20005aec 	.word	0x20005aec
 8008b2c:	20005ac4 	.word	0x20005ac4
 8008b30:	20005a84 	.word	0x20005a84
 8008b34:	20005acc 	.word	0x20005acc
 8008b38:	200059c8 	.word	0x200059c8
 8008b3c:	200059c4 	.word	0x200059c4
 8008b40:	20005ad8 	.word	0x20005ad8
 8008b44:	20005ad4 	.word	0x20005ad4
 8008b48:	e000ed04 	.word	0xe000ed04

08008b4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008b52:	4b05      	ldr	r3, [pc, #20]	@ (8008b68 <xTaskGetTickCount+0x1c>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008b58:	687b      	ldr	r3, [r7, #4]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	20005ac8 	.word	0x20005ac8

08008b6c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b72:	f000 ff9b 	bl	8009aac <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008b76:	2300      	movs	r3, #0
 8008b78:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008b7a:	4b04      	ldr	r3, [pc, #16]	@ (8008b8c <xTaskGetTickCountFromISR+0x20>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b80:	683b      	ldr	r3, [r7, #0]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	20005ac8 	.word	0x20005ac8

08008b90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b086      	sub	sp, #24
 8008b94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008b96:	2300      	movs	r3, #0
 8008b98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b9a:	4b50      	ldr	r3, [pc, #320]	@ (8008cdc <xTaskIncrementTick+0x14c>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	f040 808b 	bne.w	8008cba <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ba4:	4b4e      	ldr	r3, [pc, #312]	@ (8008ce0 <xTaskIncrementTick+0x150>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008bac:	4a4c      	ldr	r2, [pc, #304]	@ (8008ce0 <xTaskIncrementTick+0x150>)
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d123      	bne.n	8008c00 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8008bb8:	4b4a      	ldr	r3, [pc, #296]	@ (8008ce4 <xTaskIncrementTick+0x154>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00d      	beq.n	8008bde <xTaskIncrementTick+0x4e>
	__asm volatile
 8008bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc6:	b672      	cpsid	i
 8008bc8:	f383 8811 	msr	BASEPRI, r3
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	f3bf 8f4f 	dsb	sy
 8008bd4:	b662      	cpsie	i
 8008bd6:	603b      	str	r3, [r7, #0]
}
 8008bd8:	bf00      	nop
 8008bda:	bf00      	nop
 8008bdc:	e7fd      	b.n	8008bda <xTaskIncrementTick+0x4a>
 8008bde:	4b41      	ldr	r3, [pc, #260]	@ (8008ce4 <xTaskIncrementTick+0x154>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	60fb      	str	r3, [r7, #12]
 8008be4:	4b40      	ldr	r3, [pc, #256]	@ (8008ce8 <xTaskIncrementTick+0x158>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a3e      	ldr	r2, [pc, #248]	@ (8008ce4 <xTaskIncrementTick+0x154>)
 8008bea:	6013      	str	r3, [r2, #0]
 8008bec:	4a3e      	ldr	r2, [pc, #248]	@ (8008ce8 <xTaskIncrementTick+0x158>)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6013      	str	r3, [r2, #0]
 8008bf2:	4b3e      	ldr	r3, [pc, #248]	@ (8008cec <xTaskIncrementTick+0x15c>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	4a3c      	ldr	r2, [pc, #240]	@ (8008cec <xTaskIncrementTick+0x15c>)
 8008bfa:	6013      	str	r3, [r2, #0]
 8008bfc:	f000 faf8 	bl	80091f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c00:	4b3b      	ldr	r3, [pc, #236]	@ (8008cf0 <xTaskIncrementTick+0x160>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	693a      	ldr	r2, [r7, #16]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d348      	bcc.n	8008c9c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c0a:	4b36      	ldr	r3, [pc, #216]	@ (8008ce4 <xTaskIncrementTick+0x154>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d104      	bne.n	8008c1e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c14:	4b36      	ldr	r3, [pc, #216]	@ (8008cf0 <xTaskIncrementTick+0x160>)
 8008c16:	f04f 32ff 	mov.w	r2, #4294967295
 8008c1a:	601a      	str	r2, [r3, #0]
					break;
 8008c1c:	e03e      	b.n	8008c9c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c1e:	4b31      	ldr	r3, [pc, #196]	@ (8008ce4 <xTaskIncrementTick+0x154>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008c2e:	693a      	ldr	r2, [r7, #16]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d203      	bcs.n	8008c3e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008c36:	4a2e      	ldr	r2, [pc, #184]	@ (8008cf0 <xTaskIncrementTick+0x160>)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008c3c:	e02e      	b.n	8008c9c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	3304      	adds	r3, #4
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fe fb8f 	bl	8007366 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d004      	beq.n	8008c5a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	3318      	adds	r3, #24
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7fe fb86 	bl	8007366 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c5e:	2201      	movs	r2, #1
 8008c60:	409a      	lsls	r2, r3
 8008c62:	4b24      	ldr	r3, [pc, #144]	@ (8008cf4 <xTaskIncrementTick+0x164>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	4a22      	ldr	r2, [pc, #136]	@ (8008cf4 <xTaskIncrementTick+0x164>)
 8008c6a:	6013      	str	r3, [r2, #0]
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c70:	4613      	mov	r3, r2
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	4413      	add	r3, r2
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	4a1f      	ldr	r2, [pc, #124]	@ (8008cf8 <xTaskIncrementTick+0x168>)
 8008c7a:	441a      	add	r2, r3
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	3304      	adds	r3, #4
 8008c80:	4619      	mov	r1, r3
 8008c82:	4610      	mov	r0, r2
 8008c84:	f7fe fb12 	bl	80072ac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8008cfc <xTaskIncrementTick+0x16c>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d3b9      	bcc.n	8008c0a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8008c96:	2301      	movs	r3, #1
 8008c98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c9a:	e7b6      	b.n	8008c0a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c9c:	4b17      	ldr	r3, [pc, #92]	@ (8008cfc <xTaskIncrementTick+0x16c>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ca2:	4915      	ldr	r1, [pc, #84]	@ (8008cf8 <xTaskIncrementTick+0x168>)
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4413      	add	r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	440b      	add	r3, r1
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d907      	bls.n	8008cc4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	617b      	str	r3, [r7, #20]
 8008cb8:	e004      	b.n	8008cc4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008cba:	4b11      	ldr	r3, [pc, #68]	@ (8008d00 <xTaskIncrementTick+0x170>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	4a0f      	ldr	r2, [pc, #60]	@ (8008d00 <xTaskIncrementTick+0x170>)
 8008cc2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8008d04 <xTaskIncrementTick+0x174>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d001      	beq.n	8008cd0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008cd0:	697b      	ldr	r3, [r7, #20]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3718      	adds	r7, #24
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	20005aec 	.word	0x20005aec
 8008ce0:	20005ac8 	.word	0x20005ac8
 8008ce4:	20005a7c 	.word	0x20005a7c
 8008ce8:	20005a80 	.word	0x20005a80
 8008cec:	20005adc 	.word	0x20005adc
 8008cf0:	20005ae4 	.word	0x20005ae4
 8008cf4:	20005acc 	.word	0x20005acc
 8008cf8:	200059c8 	.word	0x200059c8
 8008cfc:	200059c4 	.word	0x200059c4
 8008d00:	20005ad4 	.word	0x20005ad4
 8008d04:	20005ad8 	.word	0x20005ad8

08008d08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b086      	sub	sp, #24
 8008d0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008d0e:	4b32      	ldr	r3, [pc, #200]	@ (8008dd8 <vTaskSwitchContext+0xd0>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d003      	beq.n	8008d1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008d16:	4b31      	ldr	r3, [pc, #196]	@ (8008ddc <vTaskSwitchContext+0xd4>)
 8008d18:	2201      	movs	r2, #1
 8008d1a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008d1c:	e058      	b.n	8008dd0 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 8008d1e:	4b2f      	ldr	r3, [pc, #188]	@ (8008ddc <vTaskSwitchContext+0xd4>)
 8008d20:	2200      	movs	r2, #0
 8008d22:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008d24:	4b2e      	ldr	r3, [pc, #184]	@ (8008de0 <vTaskSwitchContext+0xd8>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	4b2d      	ldr	r3, [pc, #180]	@ (8008de0 <vTaskSwitchContext+0xd8>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d808      	bhi.n	8008d46 <vTaskSwitchContext+0x3e>
 8008d34:	4b2a      	ldr	r3, [pc, #168]	@ (8008de0 <vTaskSwitchContext+0xd8>)
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	4b29      	ldr	r3, [pc, #164]	@ (8008de0 <vTaskSwitchContext+0xd8>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	3334      	adds	r3, #52	@ 0x34
 8008d3e:	4619      	mov	r1, r3
 8008d40:	4610      	mov	r0, r2
 8008d42:	f7f7 fe5f 	bl	8000a04 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d46:	4b27      	ldr	r3, [pc, #156]	@ (8008de4 <vTaskSwitchContext+0xdc>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	fab3 f383 	clz	r3, r3
 8008d52:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008d54:	7afb      	ldrb	r3, [r7, #11]
 8008d56:	f1c3 031f 	rsb	r3, r3, #31
 8008d5a:	617b      	str	r3, [r7, #20]
 8008d5c:	4922      	ldr	r1, [pc, #136]	@ (8008de8 <vTaskSwitchContext+0xe0>)
 8008d5e:	697a      	ldr	r2, [r7, #20]
 8008d60:	4613      	mov	r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	4413      	add	r3, r2
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	440b      	add	r3, r1
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d10d      	bne.n	8008d8c <vTaskSwitchContext+0x84>
	__asm volatile
 8008d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d74:	b672      	cpsid	i
 8008d76:	f383 8811 	msr	BASEPRI, r3
 8008d7a:	f3bf 8f6f 	isb	sy
 8008d7e:	f3bf 8f4f 	dsb	sy
 8008d82:	b662      	cpsie	i
 8008d84:	607b      	str	r3, [r7, #4]
}
 8008d86:	bf00      	nop
 8008d88:	bf00      	nop
 8008d8a:	e7fd      	b.n	8008d88 <vTaskSwitchContext+0x80>
 8008d8c:	697a      	ldr	r2, [r7, #20]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	4a14      	ldr	r2, [pc, #80]	@ (8008de8 <vTaskSwitchContext+0xe0>)
 8008d98:	4413      	add	r3, r2
 8008d9a:	613b      	str	r3, [r7, #16]
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	685a      	ldr	r2, [r3, #4]
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	605a      	str	r2, [r3, #4]
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	685a      	ldr	r2, [r3, #4]
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	3308      	adds	r3, #8
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d104      	bne.n	8008dbc <vTaskSwitchContext+0xb4>
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	685a      	ldr	r2, [r3, #4]
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	605a      	str	r2, [r3, #4]
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	4a07      	ldr	r2, [pc, #28]	@ (8008de0 <vTaskSwitchContext+0xd8>)
 8008dc4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008dc6:	4b06      	ldr	r3, [pc, #24]	@ (8008de0 <vTaskSwitchContext+0xd8>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	334c      	adds	r3, #76	@ 0x4c
 8008dcc:	4a07      	ldr	r2, [pc, #28]	@ (8008dec <vTaskSwitchContext+0xe4>)
 8008dce:	6013      	str	r3, [r2, #0]
}
 8008dd0:	bf00      	nop
 8008dd2:	3718      	adds	r7, #24
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	20005aec 	.word	0x20005aec
 8008ddc:	20005ad8 	.word	0x20005ad8
 8008de0:	200059c4 	.word	0x200059c4
 8008de4:	20005acc 	.word	0x20005acc
 8008de8:	200059c8 	.word	0x200059c8
 8008dec:	200007a8 	.word	0x200007a8

08008df0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d10d      	bne.n	8008e1c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8008e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e04:	b672      	cpsid	i
 8008e06:	f383 8811 	msr	BASEPRI, r3
 8008e0a:	f3bf 8f6f 	isb	sy
 8008e0e:	f3bf 8f4f 	dsb	sy
 8008e12:	b662      	cpsie	i
 8008e14:	60fb      	str	r3, [r7, #12]
}
 8008e16:	bf00      	nop
 8008e18:	bf00      	nop
 8008e1a:	e7fd      	b.n	8008e18 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e1c:	4b07      	ldr	r3, [pc, #28]	@ (8008e3c <vTaskPlaceOnEventList+0x4c>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	3318      	adds	r3, #24
 8008e22:	4619      	mov	r1, r3
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f7fe fa65 	bl	80072f4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e2a:	2101      	movs	r1, #1
 8008e2c:	6838      	ldr	r0, [r7, #0]
 8008e2e:	f000 fbdd 	bl	80095ec <prvAddCurrentTaskToDelayedList>
}
 8008e32:	bf00      	nop
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	200059c4 	.word	0x200059c4

08008e40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d10d      	bne.n	8008e72 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8008e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e5a:	b672      	cpsid	i
 8008e5c:	f383 8811 	msr	BASEPRI, r3
 8008e60:	f3bf 8f6f 	isb	sy
 8008e64:	f3bf 8f4f 	dsb	sy
 8008e68:	b662      	cpsie	i
 8008e6a:	60fb      	str	r3, [r7, #12]
}
 8008e6c:	bf00      	nop
 8008e6e:	bf00      	nop
 8008e70:	e7fd      	b.n	8008e6e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	3318      	adds	r3, #24
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7fe fa75 	bl	8007366 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8008ef4 <xTaskRemoveFromEventList+0xb4>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d11c      	bne.n	8008ebe <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	3304      	adds	r3, #4
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7fe fa6c 	bl	8007366 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e92:	2201      	movs	r2, #1
 8008e94:	409a      	lsls	r2, r3
 8008e96:	4b18      	ldr	r3, [pc, #96]	@ (8008ef8 <xTaskRemoveFromEventList+0xb8>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	4a16      	ldr	r2, [pc, #88]	@ (8008ef8 <xTaskRemoveFromEventList+0xb8>)
 8008e9e:	6013      	str	r3, [r2, #0]
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	4413      	add	r3, r2
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	4a13      	ldr	r2, [pc, #76]	@ (8008efc <xTaskRemoveFromEventList+0xbc>)
 8008eae:	441a      	add	r2, r3
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	3304      	adds	r3, #4
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	4610      	mov	r0, r2
 8008eb8:	f7fe f9f8 	bl	80072ac <vListInsertEnd>
 8008ebc:	e005      	b.n	8008eca <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	3318      	adds	r3, #24
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	480e      	ldr	r0, [pc, #56]	@ (8008f00 <xTaskRemoveFromEventList+0xc0>)
 8008ec6:	f7fe f9f1 	bl	80072ac <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ece:	4b0d      	ldr	r3, [pc, #52]	@ (8008f04 <xTaskRemoveFromEventList+0xc4>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d905      	bls.n	8008ee4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008edc:	4b0a      	ldr	r3, [pc, #40]	@ (8008f08 <xTaskRemoveFromEventList+0xc8>)
 8008ede:	2201      	movs	r2, #1
 8008ee0:	601a      	str	r2, [r3, #0]
 8008ee2:	e001      	b.n	8008ee8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008ee8:	697b      	ldr	r3, [r7, #20]
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3718      	adds	r7, #24
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	20005aec 	.word	0x20005aec
 8008ef8:	20005acc 	.word	0x20005acc
 8008efc:	200059c8 	.word	0x200059c8
 8008f00:	20005a84 	.word	0x20005a84
 8008f04:	200059c4 	.word	0x200059c4
 8008f08:	20005ad8 	.word	0x20005ad8

08008f0c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d10d      	bne.n	8008f36 <vTaskSetTimeOutState+0x2a>
	__asm volatile
 8008f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f1e:	b672      	cpsid	i
 8008f20:	f383 8811 	msr	BASEPRI, r3
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	b662      	cpsie	i
 8008f2e:	60fb      	str	r3, [r7, #12]
}
 8008f30:	bf00      	nop
 8008f32:	bf00      	nop
 8008f34:	e7fd      	b.n	8008f32 <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 8008f36:	f000 fcd1 	bl	80098dc <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f3a:	4b07      	ldr	r3, [pc, #28]	@ (8008f58 <vTaskSetTimeOutState+0x4c>)
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008f42:	4b06      	ldr	r3, [pc, #24]	@ (8008f5c <vTaskSetTimeOutState+0x50>)
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8008f4a:	f000 fcfd 	bl	8009948 <vPortExitCritical>
}
 8008f4e:	bf00      	nop
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	20005adc 	.word	0x20005adc
 8008f5c:	20005ac8 	.word	0x20005ac8

08008f60 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f68:	4b06      	ldr	r3, [pc, #24]	@ (8008f84 <vTaskInternalSetTimeOutState+0x24>)
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f70:	4b05      	ldr	r3, [pc, #20]	@ (8008f88 <vTaskInternalSetTimeOutState+0x28>)
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	605a      	str	r2, [r3, #4]
}
 8008f78:	bf00      	nop
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr
 8008f84:	20005adc 	.word	0x20005adc
 8008f88:	20005ac8 	.word	0x20005ac8

08008f8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b088      	sub	sp, #32
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d10d      	bne.n	8008fb8 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8008f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa0:	b672      	cpsid	i
 8008fa2:	f383 8811 	msr	BASEPRI, r3
 8008fa6:	f3bf 8f6f 	isb	sy
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	b662      	cpsie	i
 8008fb0:	613b      	str	r3, [r7, #16]
}
 8008fb2:	bf00      	nop
 8008fb4:	bf00      	nop
 8008fb6:	e7fd      	b.n	8008fb4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d10d      	bne.n	8008fda <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8008fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc2:	b672      	cpsid	i
 8008fc4:	f383 8811 	msr	BASEPRI, r3
 8008fc8:	f3bf 8f6f 	isb	sy
 8008fcc:	f3bf 8f4f 	dsb	sy
 8008fd0:	b662      	cpsie	i
 8008fd2:	60fb      	str	r3, [r7, #12]
}
 8008fd4:	bf00      	nop
 8008fd6:	bf00      	nop
 8008fd8:	e7fd      	b.n	8008fd6 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8008fda:	f000 fc7f 	bl	80098dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008fde:	4b1d      	ldr	r3, [pc, #116]	@ (8009054 <xTaskCheckForTimeOut+0xc8>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	69ba      	ldr	r2, [r7, #24]
 8008fea:	1ad3      	subs	r3, r2, r3
 8008fec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff6:	d102      	bne.n	8008ffe <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	61fb      	str	r3, [r7, #28]
 8008ffc:	e023      	b.n	8009046 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	4b15      	ldr	r3, [pc, #84]	@ (8009058 <xTaskCheckForTimeOut+0xcc>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	429a      	cmp	r2, r3
 8009008:	d007      	beq.n	800901a <xTaskCheckForTimeOut+0x8e>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	69ba      	ldr	r2, [r7, #24]
 8009010:	429a      	cmp	r2, r3
 8009012:	d302      	bcc.n	800901a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009014:	2301      	movs	r3, #1
 8009016:	61fb      	str	r3, [r7, #28]
 8009018:	e015      	b.n	8009046 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	697a      	ldr	r2, [r7, #20]
 8009020:	429a      	cmp	r2, r3
 8009022:	d20b      	bcs.n	800903c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	1ad2      	subs	r2, r2, r3
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f7ff ff95 	bl	8008f60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009036:	2300      	movs	r3, #0
 8009038:	61fb      	str	r3, [r7, #28]
 800903a:	e004      	b.n	8009046 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	2200      	movs	r2, #0
 8009040:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009042:	2301      	movs	r3, #1
 8009044:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009046:	f000 fc7f 	bl	8009948 <vPortExitCritical>

	return xReturn;
 800904a:	69fb      	ldr	r3, [r7, #28]
}
 800904c:	4618      	mov	r0, r3
 800904e:	3720      	adds	r7, #32
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	20005ac8 	.word	0x20005ac8
 8009058:	20005adc 	.word	0x20005adc

0800905c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800905c:	b480      	push	{r7}
 800905e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009060:	4b03      	ldr	r3, [pc, #12]	@ (8009070 <vTaskMissedYield+0x14>)
 8009062:	2201      	movs	r2, #1
 8009064:	601a      	str	r2, [r3, #0]
}
 8009066:	bf00      	nop
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	20005ad8 	.word	0x20005ad8

08009074 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800907c:	f000 f852 	bl	8009124 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009080:	4b06      	ldr	r3, [pc, #24]	@ (800909c <prvIdleTask+0x28>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	2b01      	cmp	r3, #1
 8009086:	d9f9      	bls.n	800907c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009088:	4b05      	ldr	r3, [pc, #20]	@ (80090a0 <prvIdleTask+0x2c>)
 800908a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800908e:	601a      	str	r2, [r3, #0]
 8009090:	f3bf 8f4f 	dsb	sy
 8009094:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009098:	e7f0      	b.n	800907c <prvIdleTask+0x8>
 800909a:	bf00      	nop
 800909c:	200059c8 	.word	0x200059c8
 80090a0:	e000ed04 	.word	0xe000ed04

080090a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090aa:	2300      	movs	r3, #0
 80090ac:	607b      	str	r3, [r7, #4]
 80090ae:	e00c      	b.n	80090ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	4613      	mov	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	4413      	add	r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	4a12      	ldr	r2, [pc, #72]	@ (8009104 <prvInitialiseTaskLists+0x60>)
 80090bc:	4413      	add	r3, r2
 80090be:	4618      	mov	r0, r3
 80090c0:	f7fe f8c7 	bl	8007252 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	3301      	adds	r3, #1
 80090c8:	607b      	str	r3, [r7, #4]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2b06      	cmp	r3, #6
 80090ce:	d9ef      	bls.n	80090b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80090d0:	480d      	ldr	r0, [pc, #52]	@ (8009108 <prvInitialiseTaskLists+0x64>)
 80090d2:	f7fe f8be 	bl	8007252 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80090d6:	480d      	ldr	r0, [pc, #52]	@ (800910c <prvInitialiseTaskLists+0x68>)
 80090d8:	f7fe f8bb 	bl	8007252 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80090dc:	480c      	ldr	r0, [pc, #48]	@ (8009110 <prvInitialiseTaskLists+0x6c>)
 80090de:	f7fe f8b8 	bl	8007252 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80090e2:	480c      	ldr	r0, [pc, #48]	@ (8009114 <prvInitialiseTaskLists+0x70>)
 80090e4:	f7fe f8b5 	bl	8007252 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80090e8:	480b      	ldr	r0, [pc, #44]	@ (8009118 <prvInitialiseTaskLists+0x74>)
 80090ea:	f7fe f8b2 	bl	8007252 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80090ee:	4b0b      	ldr	r3, [pc, #44]	@ (800911c <prvInitialiseTaskLists+0x78>)
 80090f0:	4a05      	ldr	r2, [pc, #20]	@ (8009108 <prvInitialiseTaskLists+0x64>)
 80090f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090f4:	4b0a      	ldr	r3, [pc, #40]	@ (8009120 <prvInitialiseTaskLists+0x7c>)
 80090f6:	4a05      	ldr	r2, [pc, #20]	@ (800910c <prvInitialiseTaskLists+0x68>)
 80090f8:	601a      	str	r2, [r3, #0]
}
 80090fa:	bf00      	nop
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	200059c8 	.word	0x200059c8
 8009108:	20005a54 	.word	0x20005a54
 800910c:	20005a68 	.word	0x20005a68
 8009110:	20005a84 	.word	0x20005a84
 8009114:	20005a98 	.word	0x20005a98
 8009118:	20005ab0 	.word	0x20005ab0
 800911c:	20005a7c 	.word	0x20005a7c
 8009120:	20005a80 	.word	0x20005a80

08009124 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800912a:	e019      	b.n	8009160 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800912c:	f000 fbd6 	bl	80098dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009130:	4b10      	ldr	r3, [pc, #64]	@ (8009174 <prvCheckTasksWaitingTermination+0x50>)
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	3304      	adds	r3, #4
 800913c:	4618      	mov	r0, r3
 800913e:	f7fe f912 	bl	8007366 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009142:	4b0d      	ldr	r3, [pc, #52]	@ (8009178 <prvCheckTasksWaitingTermination+0x54>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	3b01      	subs	r3, #1
 8009148:	4a0b      	ldr	r2, [pc, #44]	@ (8009178 <prvCheckTasksWaitingTermination+0x54>)
 800914a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800914c:	4b0b      	ldr	r3, [pc, #44]	@ (800917c <prvCheckTasksWaitingTermination+0x58>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	3b01      	subs	r3, #1
 8009152:	4a0a      	ldr	r2, [pc, #40]	@ (800917c <prvCheckTasksWaitingTermination+0x58>)
 8009154:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009156:	f000 fbf7 	bl	8009948 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f810 	bl	8009180 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009160:	4b06      	ldr	r3, [pc, #24]	@ (800917c <prvCheckTasksWaitingTermination+0x58>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d1e1      	bne.n	800912c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009168:	bf00      	nop
 800916a:	bf00      	nop
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	20005a98 	.word	0x20005a98
 8009178:	20005ac4 	.word	0x20005ac4
 800917c:	20005aac 	.word	0x20005aac

08009180 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	334c      	adds	r3, #76	@ 0x4c
 800918c:	4618      	mov	r0, r3
 800918e:	f01f f8a5 	bl	80282dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009198:	2b00      	cmp	r3, #0
 800919a:	d108      	bne.n	80091ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091a0:	4618      	mov	r0, r3
 80091a2:	f000 fd97 	bl	8009cd4 <vPortFree>
				vPortFree( pxTCB );
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fd94 	bl	8009cd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80091ac:	e01b      	b.n	80091e6 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d103      	bne.n	80091c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fd8b 	bl	8009cd4 <vPortFree>
	}
 80091be:	e012      	b.n	80091e6 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80091c6:	2b02      	cmp	r3, #2
 80091c8:	d00d      	beq.n	80091e6 <prvDeleteTCB+0x66>
	__asm volatile
 80091ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ce:	b672      	cpsid	i
 80091d0:	f383 8811 	msr	BASEPRI, r3
 80091d4:	f3bf 8f6f 	isb	sy
 80091d8:	f3bf 8f4f 	dsb	sy
 80091dc:	b662      	cpsie	i
 80091de:	60fb      	str	r3, [r7, #12]
}
 80091e0:	bf00      	nop
 80091e2:	bf00      	nop
 80091e4:	e7fd      	b.n	80091e2 <prvDeleteTCB+0x62>
	}
 80091e6:	bf00      	nop
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
	...

080091f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091f6:	4b0c      	ldr	r3, [pc, #48]	@ (8009228 <prvResetNextTaskUnblockTime+0x38>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d104      	bne.n	800920a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009200:	4b0a      	ldr	r3, [pc, #40]	@ (800922c <prvResetNextTaskUnblockTime+0x3c>)
 8009202:	f04f 32ff 	mov.w	r2, #4294967295
 8009206:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009208:	e008      	b.n	800921c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800920a:	4b07      	ldr	r3, [pc, #28]	@ (8009228 <prvResetNextTaskUnblockTime+0x38>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	4a04      	ldr	r2, [pc, #16]	@ (800922c <prvResetNextTaskUnblockTime+0x3c>)
 800921a:	6013      	str	r3, [r2, #0]
}
 800921c:	bf00      	nop
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr
 8009228:	20005a7c 	.word	0x20005a7c
 800922c:	20005ae4 	.word	0x20005ae4

08009230 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009236:	4b0b      	ldr	r3, [pc, #44]	@ (8009264 <xTaskGetSchedulerState+0x34>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d102      	bne.n	8009244 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800923e:	2301      	movs	r3, #1
 8009240:	607b      	str	r3, [r7, #4]
 8009242:	e008      	b.n	8009256 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009244:	4b08      	ldr	r3, [pc, #32]	@ (8009268 <xTaskGetSchedulerState+0x38>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d102      	bne.n	8009252 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800924c:	2302      	movs	r3, #2
 800924e:	607b      	str	r3, [r7, #4]
 8009250:	e001      	b.n	8009256 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009252:	2300      	movs	r3, #0
 8009254:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009256:	687b      	ldr	r3, [r7, #4]
	}
 8009258:	4618      	mov	r0, r3
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr
 8009264:	20005ad0 	.word	0x20005ad0
 8009268:	20005aec 	.word	0x20005aec

0800926c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009278:	2300      	movs	r3, #0
 800927a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d069      	beq.n	8009356 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009286:	4b36      	ldr	r3, [pc, #216]	@ (8009360 <xTaskPriorityInherit+0xf4>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800928c:	429a      	cmp	r2, r3
 800928e:	d259      	bcs.n	8009344 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	2b00      	cmp	r3, #0
 8009296:	db06      	blt.n	80092a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009298:	4b31      	ldr	r3, [pc, #196]	@ (8009360 <xTaskPriorityInherit+0xf4>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800929e:	f1c3 0207 	rsb	r2, r3, #7
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	6959      	ldr	r1, [r3, #20]
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092ae:	4613      	mov	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	4413      	add	r3, r2
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	4a2b      	ldr	r2, [pc, #172]	@ (8009364 <xTaskPriorityInherit+0xf8>)
 80092b8:	4413      	add	r3, r2
 80092ba:	4299      	cmp	r1, r3
 80092bc:	d13a      	bne.n	8009334 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	3304      	adds	r3, #4
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7fe f84f 	bl	8007366 <uxListRemove>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d115      	bne.n	80092fa <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092d2:	4924      	ldr	r1, [pc, #144]	@ (8009364 <xTaskPriorityInherit+0xf8>)
 80092d4:	4613      	mov	r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	4413      	add	r3, r2
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	440b      	add	r3, r1
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d10a      	bne.n	80092fa <xTaskPriorityInherit+0x8e>
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e8:	2201      	movs	r2, #1
 80092ea:	fa02 f303 	lsl.w	r3, r2, r3
 80092ee:	43da      	mvns	r2, r3
 80092f0:	4b1d      	ldr	r3, [pc, #116]	@ (8009368 <xTaskPriorityInherit+0xfc>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4013      	ands	r3, r2
 80092f6:	4a1c      	ldr	r2, [pc, #112]	@ (8009368 <xTaskPriorityInherit+0xfc>)
 80092f8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80092fa:	4b19      	ldr	r3, [pc, #100]	@ (8009360 <xTaskPriorityInherit+0xf4>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009308:	2201      	movs	r2, #1
 800930a:	409a      	lsls	r2, r3
 800930c:	4b16      	ldr	r3, [pc, #88]	@ (8009368 <xTaskPriorityInherit+0xfc>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4313      	orrs	r3, r2
 8009312:	4a15      	ldr	r2, [pc, #84]	@ (8009368 <xTaskPriorityInherit+0xfc>)
 8009314:	6013      	str	r3, [r2, #0]
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800931a:	4613      	mov	r3, r2
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	4413      	add	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	4a10      	ldr	r2, [pc, #64]	@ (8009364 <xTaskPriorityInherit+0xf8>)
 8009324:	441a      	add	r2, r3
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	3304      	adds	r3, #4
 800932a:	4619      	mov	r1, r3
 800932c:	4610      	mov	r0, r2
 800932e:	f7fd ffbd 	bl	80072ac <vListInsertEnd>
 8009332:	e004      	b.n	800933e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009334:	4b0a      	ldr	r3, [pc, #40]	@ (8009360 <xTaskPriorityInherit+0xf4>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800933e:	2301      	movs	r3, #1
 8009340:	60fb      	str	r3, [r7, #12]
 8009342:	e008      	b.n	8009356 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009348:	4b05      	ldr	r3, [pc, #20]	@ (8009360 <xTaskPriorityInherit+0xf4>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800934e:	429a      	cmp	r2, r3
 8009350:	d201      	bcs.n	8009356 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009352:	2301      	movs	r3, #1
 8009354:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009356:	68fb      	ldr	r3, [r7, #12]
	}
 8009358:	4618      	mov	r0, r3
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	200059c4 	.word	0x200059c4
 8009364:	200059c8 	.word	0x200059c8
 8009368:	20005acc 	.word	0x20005acc

0800936c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800936c:	b580      	push	{r7, lr}
 800936e:	b086      	sub	sp, #24
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009378:	2300      	movs	r3, #0
 800937a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d074      	beq.n	800946c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009382:	4b3d      	ldr	r3, [pc, #244]	@ (8009478 <xTaskPriorityDisinherit+0x10c>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	693a      	ldr	r2, [r7, #16]
 8009388:	429a      	cmp	r2, r3
 800938a:	d00d      	beq.n	80093a8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800938c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009390:	b672      	cpsid	i
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	b662      	cpsie	i
 80093a0:	60fb      	str	r3, [r7, #12]
}
 80093a2:	bf00      	nop
 80093a4:	bf00      	nop
 80093a6:	e7fd      	b.n	80093a4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d10d      	bne.n	80093cc <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80093b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b4:	b672      	cpsid	i
 80093b6:	f383 8811 	msr	BASEPRI, r3
 80093ba:	f3bf 8f6f 	isb	sy
 80093be:	f3bf 8f4f 	dsb	sy
 80093c2:	b662      	cpsie	i
 80093c4:	60bb      	str	r3, [r7, #8]
}
 80093c6:	bf00      	nop
 80093c8:	bf00      	nop
 80093ca:	e7fd      	b.n	80093c8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093d0:	1e5a      	subs	r2, r3, #1
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093de:	429a      	cmp	r2, r3
 80093e0:	d044      	beq.n	800946c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d140      	bne.n	800946c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	3304      	adds	r3, #4
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7fd ffb9 	bl	8007366 <uxListRemove>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d115      	bne.n	8009426 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093fe:	491f      	ldr	r1, [pc, #124]	@ (800947c <xTaskPriorityDisinherit+0x110>)
 8009400:	4613      	mov	r3, r2
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	4413      	add	r3, r2
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	440b      	add	r3, r1
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d10a      	bne.n	8009426 <xTaskPriorityDisinherit+0xba>
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009414:	2201      	movs	r2, #1
 8009416:	fa02 f303 	lsl.w	r3, r2, r3
 800941a:	43da      	mvns	r2, r3
 800941c:	4b18      	ldr	r3, [pc, #96]	@ (8009480 <xTaskPriorityDisinherit+0x114>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4013      	ands	r3, r2
 8009422:	4a17      	ldr	r2, [pc, #92]	@ (8009480 <xTaskPriorityDisinherit+0x114>)
 8009424:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009432:	f1c3 0207 	rsb	r2, r3, #7
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800943e:	2201      	movs	r2, #1
 8009440:	409a      	lsls	r2, r3
 8009442:	4b0f      	ldr	r3, [pc, #60]	@ (8009480 <xTaskPriorityDisinherit+0x114>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4313      	orrs	r3, r2
 8009448:	4a0d      	ldr	r2, [pc, #52]	@ (8009480 <xTaskPriorityDisinherit+0x114>)
 800944a:	6013      	str	r3, [r2, #0]
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009450:	4613      	mov	r3, r2
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	4413      	add	r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	4a08      	ldr	r2, [pc, #32]	@ (800947c <xTaskPriorityDisinherit+0x110>)
 800945a:	441a      	add	r2, r3
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	3304      	adds	r3, #4
 8009460:	4619      	mov	r1, r3
 8009462:	4610      	mov	r0, r2
 8009464:	f7fd ff22 	bl	80072ac <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009468:	2301      	movs	r3, #1
 800946a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800946c:	697b      	ldr	r3, [r7, #20]
	}
 800946e:	4618      	mov	r0, r3
 8009470:	3718      	adds	r7, #24
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	200059c4 	.word	0x200059c4
 800947c:	200059c8 	.word	0x200059c8
 8009480:	20005acc 	.word	0x20005acc

08009484 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009484:	b580      	push	{r7, lr}
 8009486:	b088      	sub	sp, #32
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009492:	2301      	movs	r3, #1
 8009494:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2b00      	cmp	r3, #0
 800949a:	f000 8089 	beq.w	80095b0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10d      	bne.n	80094c2 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 80094a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094aa:	b672      	cpsid	i
 80094ac:	f383 8811 	msr	BASEPRI, r3
 80094b0:	f3bf 8f6f 	isb	sy
 80094b4:	f3bf 8f4f 	dsb	sy
 80094b8:	b662      	cpsie	i
 80094ba:	60fb      	str	r3, [r7, #12]
}
 80094bc:	bf00      	nop
 80094be:	bf00      	nop
 80094c0:	e7fd      	b.n	80094be <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094c6:	683a      	ldr	r2, [r7, #0]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d902      	bls.n	80094d2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	61fb      	str	r3, [r7, #28]
 80094d0:	e002      	b.n	80094d8 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094d6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094dc:	69fa      	ldr	r2, [r7, #28]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d066      	beq.n	80095b0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094e6:	697a      	ldr	r2, [r7, #20]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d161      	bne.n	80095b0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80094ec:	4b32      	ldr	r3, [pc, #200]	@ (80095b8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	69ba      	ldr	r2, [r7, #24]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d10d      	bne.n	8009512 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 80094f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094fa:	b672      	cpsid	i
 80094fc:	f383 8811 	msr	BASEPRI, r3
 8009500:	f3bf 8f6f 	isb	sy
 8009504:	f3bf 8f4f 	dsb	sy
 8009508:	b662      	cpsie	i
 800950a:	60bb      	str	r3, [r7, #8]
}
 800950c:	bf00      	nop
 800950e:	bf00      	nop
 8009510:	e7fd      	b.n	800950e <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009516:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	69fa      	ldr	r2, [r7, #28]
 800951c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	699b      	ldr	r3, [r3, #24]
 8009522:	2b00      	cmp	r3, #0
 8009524:	db04      	blt.n	8009530 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	f1c3 0207 	rsb	r2, r3, #7
 800952c:	69bb      	ldr	r3, [r7, #24]
 800952e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009530:	69bb      	ldr	r3, [r7, #24]
 8009532:	6959      	ldr	r1, [r3, #20]
 8009534:	693a      	ldr	r2, [r7, #16]
 8009536:	4613      	mov	r3, r2
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	4413      	add	r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	4a1f      	ldr	r2, [pc, #124]	@ (80095bc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009540:	4413      	add	r3, r2
 8009542:	4299      	cmp	r1, r3
 8009544:	d134      	bne.n	80095b0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	3304      	adds	r3, #4
 800954a:	4618      	mov	r0, r3
 800954c:	f7fd ff0b 	bl	8007366 <uxListRemove>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	d115      	bne.n	8009582 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009556:	69bb      	ldr	r3, [r7, #24]
 8009558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800955a:	4918      	ldr	r1, [pc, #96]	@ (80095bc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800955c:	4613      	mov	r3, r2
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4413      	add	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	440b      	add	r3, r1
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d10a      	bne.n	8009582 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009570:	2201      	movs	r2, #1
 8009572:	fa02 f303 	lsl.w	r3, r2, r3
 8009576:	43da      	mvns	r2, r3
 8009578:	4b11      	ldr	r3, [pc, #68]	@ (80095c0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4013      	ands	r3, r2
 800957e:	4a10      	ldr	r2, [pc, #64]	@ (80095c0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009580:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009586:	2201      	movs	r2, #1
 8009588:	409a      	lsls	r2, r3
 800958a:	4b0d      	ldr	r3, [pc, #52]	@ (80095c0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4313      	orrs	r3, r2
 8009590:	4a0b      	ldr	r2, [pc, #44]	@ (80095c0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009592:	6013      	str	r3, [r2, #0]
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009598:	4613      	mov	r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	4413      	add	r3, r2
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	4a06      	ldr	r2, [pc, #24]	@ (80095bc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80095a2:	441a      	add	r2, r3
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	3304      	adds	r3, #4
 80095a8:	4619      	mov	r1, r3
 80095aa:	4610      	mov	r0, r2
 80095ac:	f7fd fe7e 	bl	80072ac <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095b0:	bf00      	nop
 80095b2:	3720      	adds	r7, #32
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	200059c4 	.word	0x200059c4
 80095bc:	200059c8 	.word	0x200059c8
 80095c0:	20005acc 	.word	0x20005acc

080095c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80095c4:	b480      	push	{r7}
 80095c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80095c8:	4b07      	ldr	r3, [pc, #28]	@ (80095e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d004      	beq.n	80095da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80095d0:	4b05      	ldr	r3, [pc, #20]	@ (80095e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80095d6:	3201      	adds	r2, #1
 80095d8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80095da:	4b03      	ldr	r3, [pc, #12]	@ (80095e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80095dc:	681b      	ldr	r3, [r3, #0]
	}
 80095de:	4618      	mov	r0, r3
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr
 80095e8:	200059c4 	.word	0x200059c4

080095ec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80095f6:	4b29      	ldr	r3, [pc, #164]	@ (800969c <prvAddCurrentTaskToDelayedList+0xb0>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095fc:	4b28      	ldr	r3, [pc, #160]	@ (80096a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	3304      	adds	r3, #4
 8009602:	4618      	mov	r0, r3
 8009604:	f7fd feaf 	bl	8007366 <uxListRemove>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d10b      	bne.n	8009626 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800960e:	4b24      	ldr	r3, [pc, #144]	@ (80096a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009614:	2201      	movs	r2, #1
 8009616:	fa02 f303 	lsl.w	r3, r2, r3
 800961a:	43da      	mvns	r2, r3
 800961c:	4b21      	ldr	r3, [pc, #132]	@ (80096a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4013      	ands	r3, r2
 8009622:	4a20      	ldr	r2, [pc, #128]	@ (80096a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009624:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800962c:	d10a      	bne.n	8009644 <prvAddCurrentTaskToDelayedList+0x58>
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d007      	beq.n	8009644 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009634:	4b1a      	ldr	r3, [pc, #104]	@ (80096a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	3304      	adds	r3, #4
 800963a:	4619      	mov	r1, r3
 800963c:	481a      	ldr	r0, [pc, #104]	@ (80096a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800963e:	f7fd fe35 	bl	80072ac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009642:	e026      	b.n	8009692 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009644:	68fa      	ldr	r2, [r7, #12]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4413      	add	r3, r2
 800964a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800964c:	4b14      	ldr	r3, [pc, #80]	@ (80096a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	68ba      	ldr	r2, [r7, #8]
 8009652:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009654:	68ba      	ldr	r2, [r7, #8]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	429a      	cmp	r2, r3
 800965a:	d209      	bcs.n	8009670 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800965c:	4b13      	ldr	r3, [pc, #76]	@ (80096ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	4b0f      	ldr	r3, [pc, #60]	@ (80096a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	3304      	adds	r3, #4
 8009666:	4619      	mov	r1, r3
 8009668:	4610      	mov	r0, r2
 800966a:	f7fd fe43 	bl	80072f4 <vListInsert>
}
 800966e:	e010      	b.n	8009692 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009670:	4b0f      	ldr	r3, [pc, #60]	@ (80096b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	4b0a      	ldr	r3, [pc, #40]	@ (80096a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	3304      	adds	r3, #4
 800967a:	4619      	mov	r1, r3
 800967c:	4610      	mov	r0, r2
 800967e:	f7fd fe39 	bl	80072f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009682:	4b0c      	ldr	r3, [pc, #48]	@ (80096b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	68ba      	ldr	r2, [r7, #8]
 8009688:	429a      	cmp	r2, r3
 800968a:	d202      	bcs.n	8009692 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800968c:	4a09      	ldr	r2, [pc, #36]	@ (80096b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	6013      	str	r3, [r2, #0]
}
 8009692:	bf00      	nop
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	20005ac8 	.word	0x20005ac8
 80096a0:	200059c4 	.word	0x200059c4
 80096a4:	20005acc 	.word	0x20005acc
 80096a8:	20005ab0 	.word	0x20005ab0
 80096ac:	20005a80 	.word	0x20005a80
 80096b0:	20005a7c 	.word	0x20005a7c
 80096b4:	20005ae4 	.word	0x20005ae4

080096b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80096b8:	b480      	push	{r7}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	3b04      	subs	r3, #4
 80096c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80096d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	3b04      	subs	r3, #4
 80096d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	f023 0201 	bic.w	r2, r3, #1
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	3b04      	subs	r3, #4
 80096e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096e8:	4a0c      	ldr	r2, [pc, #48]	@ (800971c <pxPortInitialiseStack+0x64>)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	3b14      	subs	r3, #20
 80096f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	3b04      	subs	r3, #4
 80096fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f06f 0202 	mvn.w	r2, #2
 8009706:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	3b20      	subs	r3, #32
 800970c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800970e:	68fb      	ldr	r3, [r7, #12]
}
 8009710:	4618      	mov	r0, r3
 8009712:	3714      	adds	r7, #20
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr
 800971c:	08009721 	.word	0x08009721

08009720 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009720:	b480      	push	{r7}
 8009722:	b085      	sub	sp, #20
 8009724:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009726:	2300      	movs	r3, #0
 8009728:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800972a:	4b15      	ldr	r3, [pc, #84]	@ (8009780 <prvTaskExitError+0x60>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009732:	d00d      	beq.n	8009750 <prvTaskExitError+0x30>
	__asm volatile
 8009734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009738:	b672      	cpsid	i
 800973a:	f383 8811 	msr	BASEPRI, r3
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	f3bf 8f4f 	dsb	sy
 8009746:	b662      	cpsie	i
 8009748:	60fb      	str	r3, [r7, #12]
}
 800974a:	bf00      	nop
 800974c:	bf00      	nop
 800974e:	e7fd      	b.n	800974c <prvTaskExitError+0x2c>
	__asm volatile
 8009750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009754:	b672      	cpsid	i
 8009756:	f383 8811 	msr	BASEPRI, r3
 800975a:	f3bf 8f6f 	isb	sy
 800975e:	f3bf 8f4f 	dsb	sy
 8009762:	b662      	cpsie	i
 8009764:	60bb      	str	r3, [r7, #8]
}
 8009766:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009768:	bf00      	nop
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d0fc      	beq.n	800976a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009770:	bf00      	nop
 8009772:	bf00      	nop
 8009774:	3714      	adds	r7, #20
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
 800977e:	bf00      	nop
 8009780:	20000028 	.word	0x20000028
	...

08009790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009790:	4b07      	ldr	r3, [pc, #28]	@ (80097b0 <pxCurrentTCBConst2>)
 8009792:	6819      	ldr	r1, [r3, #0]
 8009794:	6808      	ldr	r0, [r1, #0]
 8009796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800979a:	f380 8809 	msr	PSP, r0
 800979e:	f3bf 8f6f 	isb	sy
 80097a2:	f04f 0000 	mov.w	r0, #0
 80097a6:	f380 8811 	msr	BASEPRI, r0
 80097aa:	4770      	bx	lr
 80097ac:	f3af 8000 	nop.w

080097b0 <pxCurrentTCBConst2>:
 80097b0:	200059c4 	.word	0x200059c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80097b4:	bf00      	nop
 80097b6:	bf00      	nop

080097b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80097b8:	4808      	ldr	r0, [pc, #32]	@ (80097dc <prvPortStartFirstTask+0x24>)
 80097ba:	6800      	ldr	r0, [r0, #0]
 80097bc:	6800      	ldr	r0, [r0, #0]
 80097be:	f380 8808 	msr	MSP, r0
 80097c2:	f04f 0000 	mov.w	r0, #0
 80097c6:	f380 8814 	msr	CONTROL, r0
 80097ca:	b662      	cpsie	i
 80097cc:	b661      	cpsie	f
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	f3bf 8f6f 	isb	sy
 80097d6:	df00      	svc	0
 80097d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80097da:	bf00      	nop
 80097dc:	e000ed08 	.word	0xe000ed08

080097e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80097e6:	4b37      	ldr	r3, [pc, #220]	@ (80098c4 <xPortStartScheduler+0xe4>)
 80097e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	22ff      	movs	r2, #255	@ 0xff
 80097f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009800:	78fb      	ldrb	r3, [r7, #3]
 8009802:	b2db      	uxtb	r3, r3
 8009804:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009808:	b2da      	uxtb	r2, r3
 800980a:	4b2f      	ldr	r3, [pc, #188]	@ (80098c8 <xPortStartScheduler+0xe8>)
 800980c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800980e:	4b2f      	ldr	r3, [pc, #188]	@ (80098cc <xPortStartScheduler+0xec>)
 8009810:	2207      	movs	r2, #7
 8009812:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009814:	e009      	b.n	800982a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009816:	4b2d      	ldr	r3, [pc, #180]	@ (80098cc <xPortStartScheduler+0xec>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	3b01      	subs	r3, #1
 800981c:	4a2b      	ldr	r2, [pc, #172]	@ (80098cc <xPortStartScheduler+0xec>)
 800981e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009820:	78fb      	ldrb	r3, [r7, #3]
 8009822:	b2db      	uxtb	r3, r3
 8009824:	005b      	lsls	r3, r3, #1
 8009826:	b2db      	uxtb	r3, r3
 8009828:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800982a:	78fb      	ldrb	r3, [r7, #3]
 800982c:	b2db      	uxtb	r3, r3
 800982e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009832:	2b80      	cmp	r3, #128	@ 0x80
 8009834:	d0ef      	beq.n	8009816 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009836:	4b25      	ldr	r3, [pc, #148]	@ (80098cc <xPortStartScheduler+0xec>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f1c3 0307 	rsb	r3, r3, #7
 800983e:	2b04      	cmp	r3, #4
 8009840:	d00d      	beq.n	800985e <xPortStartScheduler+0x7e>
	__asm volatile
 8009842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009846:	b672      	cpsid	i
 8009848:	f383 8811 	msr	BASEPRI, r3
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	b662      	cpsie	i
 8009856:	60bb      	str	r3, [r7, #8]
}
 8009858:	bf00      	nop
 800985a:	bf00      	nop
 800985c:	e7fd      	b.n	800985a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800985e:	4b1b      	ldr	r3, [pc, #108]	@ (80098cc <xPortStartScheduler+0xec>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	021b      	lsls	r3, r3, #8
 8009864:	4a19      	ldr	r2, [pc, #100]	@ (80098cc <xPortStartScheduler+0xec>)
 8009866:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009868:	4b18      	ldr	r3, [pc, #96]	@ (80098cc <xPortStartScheduler+0xec>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009870:	4a16      	ldr	r2, [pc, #88]	@ (80098cc <xPortStartScheduler+0xec>)
 8009872:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	b2da      	uxtb	r2, r3
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800987c:	4b14      	ldr	r3, [pc, #80]	@ (80098d0 <xPortStartScheduler+0xf0>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a13      	ldr	r2, [pc, #76]	@ (80098d0 <xPortStartScheduler+0xf0>)
 8009882:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009886:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009888:	4b11      	ldr	r3, [pc, #68]	@ (80098d0 <xPortStartScheduler+0xf0>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a10      	ldr	r2, [pc, #64]	@ (80098d0 <xPortStartScheduler+0xf0>)
 800988e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009892:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009894:	f000 f8dc 	bl	8009a50 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009898:	4b0e      	ldr	r3, [pc, #56]	@ (80098d4 <xPortStartScheduler+0xf4>)
 800989a:	2200      	movs	r2, #0
 800989c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800989e:	f000 f8fb 	bl	8009a98 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80098a2:	4b0d      	ldr	r3, [pc, #52]	@ (80098d8 <xPortStartScheduler+0xf8>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a0c      	ldr	r2, [pc, #48]	@ (80098d8 <xPortStartScheduler+0xf8>)
 80098a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80098ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80098ae:	f7ff ff83 	bl	80097b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80098b2:	f7ff fa29 	bl	8008d08 <vTaskSwitchContext>
	prvTaskExitError();
 80098b6:	f7ff ff33 	bl	8009720 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80098ba:	2300      	movs	r3, #0
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	e000e400 	.word	0xe000e400
 80098c8:	20005af0 	.word	0x20005af0
 80098cc:	20005af4 	.word	0x20005af4
 80098d0:	e000ed20 	.word	0xe000ed20
 80098d4:	20000028 	.word	0x20000028
 80098d8:	e000ef34 	.word	0xe000ef34

080098dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
	__asm volatile
 80098e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e6:	b672      	cpsid	i
 80098e8:	f383 8811 	msr	BASEPRI, r3
 80098ec:	f3bf 8f6f 	isb	sy
 80098f0:	f3bf 8f4f 	dsb	sy
 80098f4:	b662      	cpsie	i
 80098f6:	607b      	str	r3, [r7, #4]
}
 80098f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80098fa:	4b11      	ldr	r3, [pc, #68]	@ (8009940 <vPortEnterCritical+0x64>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	3301      	adds	r3, #1
 8009900:	4a0f      	ldr	r2, [pc, #60]	@ (8009940 <vPortEnterCritical+0x64>)
 8009902:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009904:	4b0e      	ldr	r3, [pc, #56]	@ (8009940 <vPortEnterCritical+0x64>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2b01      	cmp	r3, #1
 800990a:	d112      	bne.n	8009932 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800990c:	4b0d      	ldr	r3, [pc, #52]	@ (8009944 <vPortEnterCritical+0x68>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	b2db      	uxtb	r3, r3
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00d      	beq.n	8009932 <vPortEnterCritical+0x56>
	__asm volatile
 8009916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800991a:	b672      	cpsid	i
 800991c:	f383 8811 	msr	BASEPRI, r3
 8009920:	f3bf 8f6f 	isb	sy
 8009924:	f3bf 8f4f 	dsb	sy
 8009928:	b662      	cpsie	i
 800992a:	603b      	str	r3, [r7, #0]
}
 800992c:	bf00      	nop
 800992e:	bf00      	nop
 8009930:	e7fd      	b.n	800992e <vPortEnterCritical+0x52>
	}
}
 8009932:	bf00      	nop
 8009934:	370c      	adds	r7, #12
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr
 800993e:	bf00      	nop
 8009940:	20000028 	.word	0x20000028
 8009944:	e000ed04 	.word	0xe000ed04

08009948 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800994e:	4b13      	ldr	r3, [pc, #76]	@ (800999c <vPortExitCritical+0x54>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d10d      	bne.n	8009972 <vPortExitCritical+0x2a>
	__asm volatile
 8009956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800995a:	b672      	cpsid	i
 800995c:	f383 8811 	msr	BASEPRI, r3
 8009960:	f3bf 8f6f 	isb	sy
 8009964:	f3bf 8f4f 	dsb	sy
 8009968:	b662      	cpsie	i
 800996a:	607b      	str	r3, [r7, #4]
}
 800996c:	bf00      	nop
 800996e:	bf00      	nop
 8009970:	e7fd      	b.n	800996e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009972:	4b0a      	ldr	r3, [pc, #40]	@ (800999c <vPortExitCritical+0x54>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	3b01      	subs	r3, #1
 8009978:	4a08      	ldr	r2, [pc, #32]	@ (800999c <vPortExitCritical+0x54>)
 800997a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800997c:	4b07      	ldr	r3, [pc, #28]	@ (800999c <vPortExitCritical+0x54>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d105      	bne.n	8009990 <vPortExitCritical+0x48>
 8009984:	2300      	movs	r3, #0
 8009986:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	f383 8811 	msr	BASEPRI, r3
}
 800998e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009990:	bf00      	nop
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr
 800999c:	20000028 	.word	0x20000028

080099a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80099a0:	f3ef 8009 	mrs	r0, PSP
 80099a4:	f3bf 8f6f 	isb	sy
 80099a8:	4b15      	ldr	r3, [pc, #84]	@ (8009a00 <pxCurrentTCBConst>)
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	f01e 0f10 	tst.w	lr, #16
 80099b0:	bf08      	it	eq
 80099b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80099b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ba:	6010      	str	r0, [r2, #0]
 80099bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80099c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80099c4:	b672      	cpsid	i
 80099c6:	f380 8811 	msr	BASEPRI, r0
 80099ca:	f3bf 8f4f 	dsb	sy
 80099ce:	f3bf 8f6f 	isb	sy
 80099d2:	b662      	cpsie	i
 80099d4:	f7ff f998 	bl	8008d08 <vTaskSwitchContext>
 80099d8:	f04f 0000 	mov.w	r0, #0
 80099dc:	f380 8811 	msr	BASEPRI, r0
 80099e0:	bc09      	pop	{r0, r3}
 80099e2:	6819      	ldr	r1, [r3, #0]
 80099e4:	6808      	ldr	r0, [r1, #0]
 80099e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ea:	f01e 0f10 	tst.w	lr, #16
 80099ee:	bf08      	it	eq
 80099f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80099f4:	f380 8809 	msr	PSP, r0
 80099f8:	f3bf 8f6f 	isb	sy
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop

08009a00 <pxCurrentTCBConst>:
 8009a00:	200059c4 	.word	0x200059c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009a04:	bf00      	nop
 8009a06:	bf00      	nop

08009a08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a12:	b672      	cpsid	i
 8009a14:	f383 8811 	msr	BASEPRI, r3
 8009a18:	f3bf 8f6f 	isb	sy
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	b662      	cpsie	i
 8009a22:	607b      	str	r3, [r7, #4]
}
 8009a24:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009a26:	f7ff f8b3 	bl	8008b90 <xTaskIncrementTick>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d003      	beq.n	8009a38 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a30:	4b06      	ldr	r3, [pc, #24]	@ (8009a4c <SysTick_Handler+0x44>)
 8009a32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a36:	601a      	str	r2, [r3, #0]
 8009a38:	2300      	movs	r3, #0
 8009a3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	f383 8811 	msr	BASEPRI, r3
}
 8009a42:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a44:	bf00      	nop
 8009a46:	3708      	adds	r7, #8
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	e000ed04 	.word	0xe000ed04

08009a50 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a50:	b480      	push	{r7}
 8009a52:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a54:	4b0b      	ldr	r3, [pc, #44]	@ (8009a84 <vPortSetupTimerInterrupt+0x34>)
 8009a56:	2200      	movs	r2, #0
 8009a58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8009a88 <vPortSetupTimerInterrupt+0x38>)
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a60:	4b0a      	ldr	r3, [pc, #40]	@ (8009a8c <vPortSetupTimerInterrupt+0x3c>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a0a      	ldr	r2, [pc, #40]	@ (8009a90 <vPortSetupTimerInterrupt+0x40>)
 8009a66:	fba2 2303 	umull	r2, r3, r2, r3
 8009a6a:	099b      	lsrs	r3, r3, #6
 8009a6c:	4a09      	ldr	r2, [pc, #36]	@ (8009a94 <vPortSetupTimerInterrupt+0x44>)
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a72:	4b04      	ldr	r3, [pc, #16]	@ (8009a84 <vPortSetupTimerInterrupt+0x34>)
 8009a74:	2207      	movs	r2, #7
 8009a76:	601a      	str	r2, [r3, #0]
}
 8009a78:	bf00      	nop
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	e000e010 	.word	0xe000e010
 8009a88:	e000e018 	.word	0xe000e018
 8009a8c:	20000008 	.word	0x20000008
 8009a90:	10624dd3 	.word	0x10624dd3
 8009a94:	e000e014 	.word	0xe000e014

08009a98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a98:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009aa8 <vPortEnableVFP+0x10>
 8009a9c:	6801      	ldr	r1, [r0, #0]
 8009a9e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009aa2:	6001      	str	r1, [r0, #0]
 8009aa4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009aa6:	bf00      	nop
 8009aa8:	e000ed88 	.word	0xe000ed88

08009aac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009aac:	b480      	push	{r7}
 8009aae:	b085      	sub	sp, #20
 8009ab0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009ab2:	f3ef 8305 	mrs	r3, IPSR
 8009ab6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2b0f      	cmp	r3, #15
 8009abc:	d917      	bls.n	8009aee <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009abe:	4a1a      	ldr	r2, [pc, #104]	@ (8009b28 <vPortValidateInterruptPriority+0x7c>)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	4413      	add	r3, r2
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009ac8:	4b18      	ldr	r3, [pc, #96]	@ (8009b2c <vPortValidateInterruptPriority+0x80>)
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	7afa      	ldrb	r2, [r7, #11]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d20d      	bcs.n	8009aee <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8009ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad6:	b672      	cpsid	i
 8009ad8:	f383 8811 	msr	BASEPRI, r3
 8009adc:	f3bf 8f6f 	isb	sy
 8009ae0:	f3bf 8f4f 	dsb	sy
 8009ae4:	b662      	cpsie	i
 8009ae6:	607b      	str	r3, [r7, #4]
}
 8009ae8:	bf00      	nop
 8009aea:	bf00      	nop
 8009aec:	e7fd      	b.n	8009aea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009aee:	4b10      	ldr	r3, [pc, #64]	@ (8009b30 <vPortValidateInterruptPriority+0x84>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009af6:	4b0f      	ldr	r3, [pc, #60]	@ (8009b34 <vPortValidateInterruptPriority+0x88>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d90d      	bls.n	8009b1a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8009afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b02:	b672      	cpsid	i
 8009b04:	f383 8811 	msr	BASEPRI, r3
 8009b08:	f3bf 8f6f 	isb	sy
 8009b0c:	f3bf 8f4f 	dsb	sy
 8009b10:	b662      	cpsie	i
 8009b12:	603b      	str	r3, [r7, #0]
}
 8009b14:	bf00      	nop
 8009b16:	bf00      	nop
 8009b18:	e7fd      	b.n	8009b16 <vPortValidateInterruptPriority+0x6a>
	}
 8009b1a:	bf00      	nop
 8009b1c:	3714      	adds	r7, #20
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop
 8009b28:	e000e3f0 	.word	0xe000e3f0
 8009b2c:	20005af0 	.word	0x20005af0
 8009b30:	e000ed0c 	.word	0xe000ed0c
 8009b34:	20005af4 	.word	0x20005af4

08009b38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b08a      	sub	sp, #40	@ 0x28
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009b40:	2300      	movs	r3, #0
 8009b42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009b44:	f7fe ff54 	bl	80089f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009b48:	4b5d      	ldr	r3, [pc, #372]	@ (8009cc0 <pvPortMalloc+0x188>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d101      	bne.n	8009b54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009b50:	f000 f920 	bl	8009d94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009b54:	4b5b      	ldr	r3, [pc, #364]	@ (8009cc4 <pvPortMalloc+0x18c>)
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	f040 8094 	bne.w	8009c8a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d020      	beq.n	8009baa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8009b68:	2208      	movs	r2, #8
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f003 0307 	and.w	r3, r3, #7
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d017      	beq.n	8009baa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f023 0307 	bic.w	r3, r3, #7
 8009b80:	3308      	adds	r3, #8
 8009b82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f003 0307 	and.w	r3, r3, #7
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00d      	beq.n	8009baa <pvPortMalloc+0x72>
	__asm volatile
 8009b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b92:	b672      	cpsid	i
 8009b94:	f383 8811 	msr	BASEPRI, r3
 8009b98:	f3bf 8f6f 	isb	sy
 8009b9c:	f3bf 8f4f 	dsb	sy
 8009ba0:	b662      	cpsie	i
 8009ba2:	617b      	str	r3, [r7, #20]
}
 8009ba4:	bf00      	nop
 8009ba6:	bf00      	nop
 8009ba8:	e7fd      	b.n	8009ba6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d06c      	beq.n	8009c8a <pvPortMalloc+0x152>
 8009bb0:	4b45      	ldr	r3, [pc, #276]	@ (8009cc8 <pvPortMalloc+0x190>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d867      	bhi.n	8009c8a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009bba:	4b44      	ldr	r3, [pc, #272]	@ (8009ccc <pvPortMalloc+0x194>)
 8009bbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009bbe:	4b43      	ldr	r3, [pc, #268]	@ (8009ccc <pvPortMalloc+0x194>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009bc4:	e004      	b.n	8009bd0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8009bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d903      	bls.n	8009be2 <pvPortMalloc+0xaa>
 8009bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d1f1      	bne.n	8009bc6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009be2:	4b37      	ldr	r3, [pc, #220]	@ (8009cc0 <pvPortMalloc+0x188>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d04e      	beq.n	8009c8a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009bec:	6a3b      	ldr	r3, [r7, #32]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2208      	movs	r2, #8
 8009bf2:	4413      	add	r3, r2
 8009bf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	6a3b      	ldr	r3, [r7, #32]
 8009bfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c00:	685a      	ldr	r2, [r3, #4]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	1ad2      	subs	r2, r2, r3
 8009c06:	2308      	movs	r3, #8
 8009c08:	005b      	lsls	r3, r3, #1
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d922      	bls.n	8009c54 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4413      	add	r3, r2
 8009c14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	f003 0307 	and.w	r3, r3, #7
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d00d      	beq.n	8009c3c <pvPortMalloc+0x104>
	__asm volatile
 8009c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c24:	b672      	cpsid	i
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	b662      	cpsie	i
 8009c34:	613b      	str	r3, [r7, #16]
}
 8009c36:	bf00      	nop
 8009c38:	bf00      	nop
 8009c3a:	e7fd      	b.n	8009c38 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3e:	685a      	ldr	r2, [r3, #4]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	1ad2      	subs	r2, r2, r3
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009c4e:	69b8      	ldr	r0, [r7, #24]
 8009c50:	f000 f902 	bl	8009e58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c54:	4b1c      	ldr	r3, [pc, #112]	@ (8009cc8 <pvPortMalloc+0x190>)
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8009cc8 <pvPortMalloc+0x190>)
 8009c60:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c62:	4b19      	ldr	r3, [pc, #100]	@ (8009cc8 <pvPortMalloc+0x190>)
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	4b1a      	ldr	r3, [pc, #104]	@ (8009cd0 <pvPortMalloc+0x198>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d203      	bcs.n	8009c76 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009c6e:	4b16      	ldr	r3, [pc, #88]	@ (8009cc8 <pvPortMalloc+0x190>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a17      	ldr	r2, [pc, #92]	@ (8009cd0 <pvPortMalloc+0x198>)
 8009c74:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c78:	685a      	ldr	r2, [r3, #4]
 8009c7a:	4b12      	ldr	r3, [pc, #72]	@ (8009cc4 <pvPortMalloc+0x18c>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	431a      	orrs	r2, r3
 8009c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c82:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c86:	2200      	movs	r2, #0
 8009c88:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009c8a:	f7fe febf 	bl	8008a0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	f003 0307 	and.w	r3, r3, #7
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d00d      	beq.n	8009cb4 <pvPortMalloc+0x17c>
	__asm volatile
 8009c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c9c:	b672      	cpsid	i
 8009c9e:	f383 8811 	msr	BASEPRI, r3
 8009ca2:	f3bf 8f6f 	isb	sy
 8009ca6:	f3bf 8f4f 	dsb	sy
 8009caa:	b662      	cpsie	i
 8009cac:	60fb      	str	r3, [r7, #12]
}
 8009cae:	bf00      	nop
 8009cb0:	bf00      	nop
 8009cb2:	e7fd      	b.n	8009cb0 <pvPortMalloc+0x178>
	return pvReturn;
 8009cb4:	69fb      	ldr	r3, [r7, #28]
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3728      	adds	r7, #40	@ 0x28
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	2000d030 	.word	0x2000d030
 8009cc4:	2000d03c 	.word	0x2000d03c
 8009cc8:	2000d034 	.word	0x2000d034
 8009ccc:	2000d028 	.word	0x2000d028
 8009cd0:	2000d038 	.word	0x2000d038

08009cd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d04e      	beq.n	8009d84 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ce6:	2308      	movs	r3, #8
 8009ce8:	425b      	negs	r3, r3
 8009cea:	697a      	ldr	r2, [r7, #20]
 8009cec:	4413      	add	r3, r2
 8009cee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	685a      	ldr	r2, [r3, #4]
 8009cf8:	4b24      	ldr	r3, [pc, #144]	@ (8009d8c <vPortFree+0xb8>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d10d      	bne.n	8009d1e <vPortFree+0x4a>
	__asm volatile
 8009d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d06:	b672      	cpsid	i
 8009d08:	f383 8811 	msr	BASEPRI, r3
 8009d0c:	f3bf 8f6f 	isb	sy
 8009d10:	f3bf 8f4f 	dsb	sy
 8009d14:	b662      	cpsie	i
 8009d16:	60fb      	str	r3, [r7, #12]
}
 8009d18:	bf00      	nop
 8009d1a:	bf00      	nop
 8009d1c:	e7fd      	b.n	8009d1a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d00d      	beq.n	8009d42 <vPortFree+0x6e>
	__asm volatile
 8009d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d2a:	b672      	cpsid	i
 8009d2c:	f383 8811 	msr	BASEPRI, r3
 8009d30:	f3bf 8f6f 	isb	sy
 8009d34:	f3bf 8f4f 	dsb	sy
 8009d38:	b662      	cpsie	i
 8009d3a:	60bb      	str	r3, [r7, #8]
}
 8009d3c:	bf00      	nop
 8009d3e:	bf00      	nop
 8009d40:	e7fd      	b.n	8009d3e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	685a      	ldr	r2, [r3, #4]
 8009d46:	4b11      	ldr	r3, [pc, #68]	@ (8009d8c <vPortFree+0xb8>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d019      	beq.n	8009d84 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d115      	bne.n	8009d84 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	685a      	ldr	r2, [r3, #4]
 8009d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8009d8c <vPortFree+0xb8>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	43db      	mvns	r3, r3
 8009d62:	401a      	ands	r2, r3
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009d68:	f7fe fe42 	bl	80089f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	685a      	ldr	r2, [r3, #4]
 8009d70:	4b07      	ldr	r3, [pc, #28]	@ (8009d90 <vPortFree+0xbc>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4413      	add	r3, r2
 8009d76:	4a06      	ldr	r2, [pc, #24]	@ (8009d90 <vPortFree+0xbc>)
 8009d78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009d7a:	6938      	ldr	r0, [r7, #16]
 8009d7c:	f000 f86c 	bl	8009e58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009d80:	f7fe fe44 	bl	8008a0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d84:	bf00      	nop
 8009d86:	3718      	adds	r7, #24
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}
 8009d8c:	2000d03c 	.word	0x2000d03c
 8009d90:	2000d034 	.word	0x2000d034

08009d94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d9a:	f247 5330 	movw	r3, #30000	@ 0x7530
 8009d9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009da0:	4b27      	ldr	r3, [pc, #156]	@ (8009e40 <prvHeapInit+0xac>)
 8009da2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f003 0307 	and.w	r3, r3, #7
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00c      	beq.n	8009dc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	3307      	adds	r3, #7
 8009db2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f023 0307 	bic.w	r3, r3, #7
 8009dba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009dbc:	68ba      	ldr	r2, [r7, #8]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	1ad3      	subs	r3, r2, r3
 8009dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8009e40 <prvHeapInit+0xac>)
 8009dc4:	4413      	add	r3, r2
 8009dc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8009e44 <prvHeapInit+0xb0>)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8009e44 <prvHeapInit+0xb0>)
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	68ba      	ldr	r2, [r7, #8]
 8009ddc:	4413      	add	r3, r2
 8009dde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009de0:	2208      	movs	r2, #8
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	1a9b      	subs	r3, r3, r2
 8009de6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f023 0307 	bic.w	r3, r3, #7
 8009dee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	4a15      	ldr	r2, [pc, #84]	@ (8009e48 <prvHeapInit+0xb4>)
 8009df4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009df6:	4b14      	ldr	r3, [pc, #80]	@ (8009e48 <prvHeapInit+0xb4>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009dfe:	4b12      	ldr	r3, [pc, #72]	@ (8009e48 <prvHeapInit+0xb4>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2200      	movs	r2, #0
 8009e04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	1ad2      	subs	r2, r2, r3
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e14:	4b0c      	ldr	r3, [pc, #48]	@ (8009e48 <prvHeapInit+0xb4>)
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	4a0a      	ldr	r2, [pc, #40]	@ (8009e4c <prvHeapInit+0xb8>)
 8009e22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	4a09      	ldr	r2, [pc, #36]	@ (8009e50 <prvHeapInit+0xbc>)
 8009e2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e2c:	4b09      	ldr	r3, [pc, #36]	@ (8009e54 <prvHeapInit+0xc0>)
 8009e2e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009e32:	601a      	str	r2, [r3, #0]
}
 8009e34:	bf00      	nop
 8009e36:	3714      	adds	r7, #20
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr
 8009e40:	20005af8 	.word	0x20005af8
 8009e44:	2000d028 	.word	0x2000d028
 8009e48:	2000d030 	.word	0x2000d030
 8009e4c:	2000d038 	.word	0x2000d038
 8009e50:	2000d034 	.word	0x2000d034
 8009e54:	2000d03c 	.word	0x2000d03c

08009e58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b085      	sub	sp, #20
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009e60:	4b28      	ldr	r3, [pc, #160]	@ (8009f04 <prvInsertBlockIntoFreeList+0xac>)
 8009e62:	60fb      	str	r3, [r7, #12]
 8009e64:	e002      	b.n	8009e6c <prvInsertBlockIntoFreeList+0x14>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	60fb      	str	r3, [r7, #12]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d8f7      	bhi.n	8009e66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	68ba      	ldr	r2, [r7, #8]
 8009e80:	4413      	add	r3, r2
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d108      	bne.n	8009e9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	685a      	ldr	r2, [r3, #4]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	441a      	add	r2, r3
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	68ba      	ldr	r2, [r7, #8]
 8009ea4:	441a      	add	r2, r3
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d118      	bne.n	8009ee0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	4b15      	ldr	r3, [pc, #84]	@ (8009f08 <prvInsertBlockIntoFreeList+0xb0>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d00d      	beq.n	8009ed6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	685a      	ldr	r2, [r3, #4]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	441a      	add	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	601a      	str	r2, [r3, #0]
 8009ed4:	e008      	b.n	8009ee8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8009f08 <prvInsertBlockIntoFreeList+0xb0>)
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	601a      	str	r2, [r3, #0]
 8009ede:	e003      	b.n	8009ee8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d002      	beq.n	8009ef6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ef6:	bf00      	nop
 8009ef8:	3714      	adds	r7, #20
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	2000d028 	.word	0x2000d028
 8009f08:	2000d030 	.word	0x2000d030

08009f0c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	330c      	adds	r3, #12
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	6839      	ldr	r1, [r7, #0]
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f003 fc7d 	bl	800d820 <tcpip_send_msg_wait_sem>
 8009f26:	4603      	mov	r3, r0
 8009f28:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d103      	bne.n	8009f3a <netconn_apimsg+0x2e>
    return apimsg->err;
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009f38:	e001      	b.n	8009f3e <netconn_apimsg+0x32>
  }
  return err;
 8009f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
	...

08009f48 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b08c      	sub	sp, #48	@ 0x30
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	4603      	mov	r3, r0
 8009f50:	603a      	str	r2, [r7, #0]
 8009f52:	71fb      	strb	r3, [r7, #7]
 8009f54:	460b      	mov	r3, r1
 8009f56:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009f58:	79fb      	ldrb	r3, [r7, #7]
 8009f5a:	6839      	ldr	r1, [r7, #0]
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f001 f84b 	bl	800aff8 <netconn_alloc>
 8009f62:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8009f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d054      	beq.n	800a014 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8009f6a:	79bb      	ldrb	r3, [r7, #6]
 8009f6c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8009f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f70:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8009f72:	f107 0308 	add.w	r3, r7, #8
 8009f76:	4619      	mov	r1, r3
 8009f78:	4829      	ldr	r0, [pc, #164]	@ (800a020 <netconn_new_with_proto_and_callback+0xd8>)
 8009f7a:	f7ff ffc7 	bl	8009f0c <netconn_apimsg>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8009f84:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d043      	beq.n	800a014 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8009f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d005      	beq.n	8009fa0 <netconn_new_with_proto_and_callback+0x58>
 8009f94:	4b23      	ldr	r3, [pc, #140]	@ (800a024 <netconn_new_with_proto_and_callback+0xdc>)
 8009f96:	22a3      	movs	r2, #163	@ 0xa3
 8009f98:	4923      	ldr	r1, [pc, #140]	@ (800a028 <netconn_new_with_proto_and_callback+0xe0>)
 8009f9a:	4824      	ldr	r0, [pc, #144]	@ (800a02c <netconn_new_with_proto_and_callback+0xe4>)
 8009f9c:	f01d ffca 	bl	8027f34 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8009fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fa2:	3310      	adds	r3, #16
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f00e fe9a 	bl	8018cde <sys_mbox_valid>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d105      	bne.n	8009fbc <netconn_new_with_proto_and_callback+0x74>
 8009fb0:	4b1c      	ldr	r3, [pc, #112]	@ (800a024 <netconn_new_with_proto_and_callback+0xdc>)
 8009fb2:	22a4      	movs	r2, #164	@ 0xa4
 8009fb4:	491e      	ldr	r1, [pc, #120]	@ (800a030 <netconn_new_with_proto_and_callback+0xe8>)
 8009fb6:	481d      	ldr	r0, [pc, #116]	@ (800a02c <netconn_new_with_proto_and_callback+0xe4>)
 8009fb8:	f01d ffbc 	bl	8027f34 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8009fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fbe:	3314      	adds	r3, #20
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f00e fe8c 	bl	8018cde <sys_mbox_valid>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d005      	beq.n	8009fd8 <netconn_new_with_proto_and_callback+0x90>
 8009fcc:	4b15      	ldr	r3, [pc, #84]	@ (800a024 <netconn_new_with_proto_and_callback+0xdc>)
 8009fce:	22a6      	movs	r2, #166	@ 0xa6
 8009fd0:	4918      	ldr	r1, [pc, #96]	@ (800a034 <netconn_new_with_proto_and_callback+0xec>)
 8009fd2:	4816      	ldr	r0, [pc, #88]	@ (800a02c <netconn_new_with_proto_and_callback+0xe4>)
 8009fd4:	f01d ffae 	bl	8027f34 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fda:	330c      	adds	r3, #12
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f00e ff0f 	bl	8018e00 <sys_sem_valid>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d105      	bne.n	8009ff4 <netconn_new_with_proto_and_callback+0xac>
 8009fe8:	4b0e      	ldr	r3, [pc, #56]	@ (800a024 <netconn_new_with_proto_and_callback+0xdc>)
 8009fea:	22a9      	movs	r2, #169	@ 0xa9
 8009fec:	4912      	ldr	r1, [pc, #72]	@ (800a038 <netconn_new_with_proto_and_callback+0xf0>)
 8009fee:	480f      	ldr	r0, [pc, #60]	@ (800a02c <netconn_new_with_proto_and_callback+0xe4>)
 8009ff0:	f01d ffa0 	bl	8027f34 <iprintf>
      sys_sem_free(&conn->op_completed);
 8009ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ff6:	330c      	adds	r3, #12
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f00e fef4 	bl	8018de6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8009ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a000:	3310      	adds	r3, #16
 800a002:	4618      	mov	r0, r3
 800a004:	f00e fde4 	bl	8018bd0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800a008:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a00a:	2007      	movs	r0, #7
 800a00c:	f004 f9b2 	bl	800e374 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800a010:	2300      	movs	r3, #0
 800a012:	e000      	b.n	800a016 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800a014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a016:	4618      	mov	r0, r3
 800a018:	3730      	adds	r7, #48	@ 0x30
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	0800afcd 	.word	0x0800afcd
 800a024:	080293a8 	.word	0x080293a8
 800a028:	080293dc 	.word	0x080293dc
 800a02c:	08029400 	.word	0x08029400
 800a030:	08029428 	.word	0x08029428
 800a034:	08029440 	.word	0x08029440
 800a038:	08029464 	.word	0x08029464

0800a03c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b08c      	sub	sp, #48	@ 0x30
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d101      	bne.n	800a04e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800a04a:	2300      	movs	r3, #0
 800a04c:	e014      	b.n	800a078 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a052:	2329      	movs	r3, #41	@ 0x29
 800a054:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800a056:	f107 030c 	add.w	r3, r7, #12
 800a05a:	4619      	mov	r1, r3
 800a05c:	4808      	ldr	r0, [pc, #32]	@ (800a080 <netconn_prepare_delete+0x44>)
 800a05e:	f7ff ff55 	bl	8009f0c <netconn_apimsg>
 800a062:	4603      	mov	r3, r0
 800a064:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800a068:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d002      	beq.n	800a076 <netconn_prepare_delete+0x3a>
    return err;
 800a070:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a074:	e000      	b.n	800a078 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3730      	adds	r7, #48	@ 0x30
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	0800b541 	.word	0x0800b541

0800a084 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d101      	bne.n	800a096 <netconn_delete+0x12>
    return ERR_OK;
 800a092:	2300      	movs	r3, #0
 800a094:	e00d      	b.n	800a0b2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f7ff ffd0 	bl	800a03c <netconn_prepare_delete>
 800a09c:	4603      	mov	r3, r0
 800a09e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800a0a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d102      	bne.n	800a0ae <netconn_delete+0x2a>
    netconn_free(conn);
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f001 f817 	bl	800b0dc <netconn_free>
  }
  return err;
 800a0ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3710      	adds	r7, #16
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
	...

0800a0bc <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b08e      	sub	sp, #56	@ 0x38
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	607a      	str	r2, [r7, #4]
 800a0c8:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d109      	bne.n	800a0e4 <netconn_getaddr+0x28>
 800a0d0:	4b1d      	ldr	r3, [pc, #116]	@ (800a148 <netconn_getaddr+0x8c>)
 800a0d2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800a0d6:	491d      	ldr	r1, [pc, #116]	@ (800a14c <netconn_getaddr+0x90>)
 800a0d8:	481d      	ldr	r0, [pc, #116]	@ (800a150 <netconn_getaddr+0x94>)
 800a0da:	f01d ff2b 	bl	8027f34 <iprintf>
 800a0de:	f06f 030f 	mvn.w	r3, #15
 800a0e2:	e02d      	b.n	800a140 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d109      	bne.n	800a0fe <netconn_getaddr+0x42>
 800a0ea:	4b17      	ldr	r3, [pc, #92]	@ (800a148 <netconn_getaddr+0x8c>)
 800a0ec:	f240 1213 	movw	r2, #275	@ 0x113
 800a0f0:	4918      	ldr	r1, [pc, #96]	@ (800a154 <netconn_getaddr+0x98>)
 800a0f2:	4817      	ldr	r0, [pc, #92]	@ (800a150 <netconn_getaddr+0x94>)
 800a0f4:	f01d ff1e 	bl	8027f34 <iprintf>
 800a0f8:	f06f 030f 	mvn.w	r3, #15
 800a0fc:	e020      	b.n	800a140 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d109      	bne.n	800a118 <netconn_getaddr+0x5c>
 800a104:	4b10      	ldr	r3, [pc, #64]	@ (800a148 <netconn_getaddr+0x8c>)
 800a106:	f44f 728a 	mov.w	r2, #276	@ 0x114
 800a10a:	4913      	ldr	r1, [pc, #76]	@ (800a158 <netconn_getaddr+0x9c>)
 800a10c:	4810      	ldr	r0, [pc, #64]	@ (800a150 <netconn_getaddr+0x94>)
 800a10e:	f01d ff11 	bl	8027f34 <iprintf>
 800a112:	f06f 030f 	mvn.w	r3, #15
 800a116:	e013      	b.n	800a140 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800a11c:	78fb      	ldrb	r3, [r7, #3]
 800a11e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800a12a:	f107 0314 	add.w	r3, r7, #20
 800a12e:	4619      	mov	r1, r3
 800a130:	480a      	ldr	r0, [pc, #40]	@ (800a15c <netconn_getaddr+0xa0>)
 800a132:	f7ff feeb 	bl	8009f0c <netconn_apimsg>
 800a136:	4603      	mov	r3, r0
 800a138:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800a13c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800a140:	4618      	mov	r0, r3
 800a142:	3738      	adds	r7, #56	@ 0x38
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	080293a8 	.word	0x080293a8
 800a14c:	08029480 	.word	0x08029480
 800a150:	08029400 	.word	0x08029400
 800a154:	080294a0 	.word	0x080294a0
 800a158:	080294c0 	.word	0x080294c0
 800a15c:	0800bd3d 	.word	0x0800bd3d

0800a160 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b08e      	sub	sp, #56	@ 0x38
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	4613      	mov	r3, r2
 800a16c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d109      	bne.n	800a188 <netconn_bind+0x28>
 800a174:	4b11      	ldr	r3, [pc, #68]	@ (800a1bc <netconn_bind+0x5c>)
 800a176:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800a17a:	4911      	ldr	r1, [pc, #68]	@ (800a1c0 <netconn_bind+0x60>)
 800a17c:	4811      	ldr	r0, [pc, #68]	@ (800a1c4 <netconn_bind+0x64>)
 800a17e:	f01d fed9 	bl	8027f34 <iprintf>
 800a182:	f06f 030f 	mvn.w	r3, #15
 800a186:	e015      	b.n	800a1b4 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d101      	bne.n	800a192 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800a18e:	4b0e      	ldr	r3, [pc, #56]	@ (800a1c8 <netconn_bind+0x68>)
 800a190:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800a19a:	88fb      	ldrh	r3, [r7, #6]
 800a19c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800a19e:	f107 0314 	add.w	r3, r7, #20
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	4809      	ldr	r0, [pc, #36]	@ (800a1cc <netconn_bind+0x6c>)
 800a1a6:	f7ff feb1 	bl	8009f0c <netconn_apimsg>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800a1b0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3738      	adds	r7, #56	@ 0x38
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	080293a8 	.word	0x080293a8
 800a1c0:	080294e0 	.word	0x080294e0
 800a1c4:	08029400 	.word	0x08029400
 800a1c8:	0802ce54 	.word	0x0802ce54
 800a1cc:	0800b70d 	.word	0x0800b70d

0800a1d0 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b088      	sub	sp, #32
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d109      	bne.n	800a1fc <netconn_recv_data+0x2c>
 800a1e8:	4b5e      	ldr	r3, [pc, #376]	@ (800a364 <netconn_recv_data+0x194>)
 800a1ea:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800a1ee:	495e      	ldr	r1, [pc, #376]	@ (800a368 <netconn_recv_data+0x198>)
 800a1f0:	485e      	ldr	r0, [pc, #376]	@ (800a36c <netconn_recv_data+0x19c>)
 800a1f2:	f01d fe9f 	bl	8027f34 <iprintf>
 800a1f6:	f06f 030f 	mvn.w	r3, #15
 800a1fa:	e0ae      	b.n	800a35a <netconn_recv_data+0x18a>
  *new_buf = NULL;
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	2200      	movs	r2, #0
 800a200:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d109      	bne.n	800a21c <netconn_recv_data+0x4c>
 800a208:	4b56      	ldr	r3, [pc, #344]	@ (800a364 <netconn_recv_data+0x194>)
 800a20a:	f240 224a 	movw	r2, #586	@ 0x24a
 800a20e:	4958      	ldr	r1, [pc, #352]	@ (800a370 <netconn_recv_data+0x1a0>)
 800a210:	4856      	ldr	r0, [pc, #344]	@ (800a36c <netconn_recv_data+0x19c>)
 800a212:	f01d fe8f 	bl	8027f34 <iprintf>
 800a216:	f06f 030f 	mvn.w	r3, #15
 800a21a:	e09e      	b.n	800a35a <netconn_recv_data+0x18a>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	3310      	adds	r3, #16
 800a220:	4618      	mov	r0, r3
 800a222:	f00e fd5c 	bl	8018cde <sys_mbox_valid>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d10e      	bne.n	800a24a <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f000 fb13 	bl	800a858 <netconn_err>
 800a232:	4603      	mov	r3, r0
 800a234:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800a236:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d002      	beq.n	800a244 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800a23e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a242:	e08a      	b.n	800a35a <netconn_recv_data+0x18a>
    }
    return ERR_CONN;
 800a244:	f06f 030a 	mvn.w	r3, #10
 800a248:	e087      	b.n	800a35a <netconn_recv_data+0x18a>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a250:	f003 0302 	and.w	r3, r3, #2
 800a254:	2b00      	cmp	r3, #0
 800a256:	d110      	bne.n	800a27a <netconn_recv_data+0xaa>
 800a258:	79fb      	ldrb	r3, [r7, #7]
 800a25a:	f003 0304 	and.w	r3, r3, #4
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d10b      	bne.n	800a27a <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a268:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d104      	bne.n	800a27a <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d024      	beq.n	800a2c4 <netconn_recv_data+0xf4>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	3310      	adds	r3, #16
 800a27e:	f107 0218 	add.w	r2, r7, #24
 800a282:	4611      	mov	r1, r2
 800a284:	4618      	mov	r0, r3
 800a286:	f00e fd0e 	bl	8018ca6 <sys_arch_mbox_tryfetch>
 800a28a:	4603      	mov	r3, r0
 800a28c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a290:	d129      	bne.n	800a2e6 <netconn_recv_data+0x116>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f000 fae0 	bl	800a858 <netconn_err>
 800a298:	4603      	mov	r3, r0
 800a29a:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800a29c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d002      	beq.n	800a2aa <netconn_recv_data+0xda>
        /* return pending error */
        return err;
 800a2a4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a2a8:	e057      	b.n	800a35a <netconn_recv_data+0x18a>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a2b0:	f003 0301 	and.w	r3, r3, #1
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d002      	beq.n	800a2be <netconn_recv_data+0xee>
        return ERR_CONN;
 800a2b8:	f06f 030a 	mvn.w	r3, #10
 800a2bc:	e04d      	b.n	800a35a <netconn_recv_data+0x18a>
      }
      return ERR_WOULDBLOCK;
 800a2be:	f06f 0306 	mvn.w	r3, #6
 800a2c2:	e04a      	b.n	800a35a <netconn_recv_data+0x18a>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f103 0010 	add.w	r0, r3, #16
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	69da      	ldr	r2, [r3, #28]
 800a2ce:	f107 0318 	add.w	r3, r7, #24
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	f00e fca8 	bl	8018c28 <sys_arch_mbox_fetch>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2de:	d102      	bne.n	800a2e6 <netconn_recv_data+0x116>
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 800a2e0:	f06f 0302 	mvn.w	r3, #2
 800a2e4:	e039      	b.n	800a35a <netconn_recv_data+0x18a>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a2ee:	2b10      	cmp	r3, #16
 800a2f0:	d117      	bne.n	800a322 <netconn_recv_data+0x152>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	f107 0217 	add.w	r2, r7, #23
 800a2f8:	4611      	mov	r1, r2
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f000 fafe 	bl	800a8fc <lwip_netconn_is_err_msg>
 800a300:	4603      	mov	r3, r0
 800a302:	2b00      	cmp	r3, #0
 800a304:	d009      	beq.n	800a31a <netconn_recv_data+0x14a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800a306:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a30a:	f113 0f0f 	cmn.w	r3, #15
 800a30e:	d101      	bne.n	800a314 <netconn_recv_data+0x144>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800a310:	2300      	movs	r3, #0
 800a312:	e022      	b.n	800a35a <netconn_recv_data+0x18a>
      }
      return err;
 800a314:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a318:	e01f      	b.n	800a35a <netconn_recv_data+0x18a>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	891b      	ldrh	r3, [r3, #8]
 800a31e:	83fb      	strh	r3, [r7, #30]
 800a320:	e00d      	b.n	800a33e <netconn_recv_data+0x16e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d106      	bne.n	800a336 <netconn_recv_data+0x166>
 800a328:	4b0e      	ldr	r3, [pc, #56]	@ (800a364 <netconn_recv_data+0x194>)
 800a32a:	f240 2291 	movw	r2, #657	@ 0x291
 800a32e:	4911      	ldr	r1, [pc, #68]	@ (800a374 <netconn_recv_data+0x1a4>)
 800a330:	480e      	ldr	r0, [pc, #56]	@ (800a36c <netconn_recv_data+0x19c>)
 800a332:	f01d fdff 	bl	8027f34 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	891b      	ldrh	r3, [r3, #8]
 800a33c:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a342:	2b00      	cmp	r3, #0
 800a344:	d005      	beq.n	800a352 <netconn_recv_data+0x182>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a34a:	8bfa      	ldrh	r2, [r7, #30]
 800a34c:	2101      	movs	r1, #1
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800a352:	69ba      	ldr	r2, [r7, #24]
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a358:	2300      	movs	r3, #0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3720      	adds	r7, #32
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	080293a8 	.word	0x080293a8
 800a368:	080295c0 	.word	0x080295c0
 800a36c:	08029400 	.word	0x08029400
 800a370:	080295e0 	.word	0x080295e0
 800a374:	080295fc 	.word	0x080295fc

0800a378 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d005      	beq.n	800a396 <netconn_tcp_recvd_msg+0x1e>
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a392:	2b10      	cmp	r3, #16
 800a394:	d009      	beq.n	800a3aa <netconn_tcp_recvd_msg+0x32>
 800a396:	4b0c      	ldr	r3, [pc, #48]	@ (800a3c8 <netconn_tcp_recvd_msg+0x50>)
 800a398:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800a39c:	490b      	ldr	r1, [pc, #44]	@ (800a3cc <netconn_tcp_recvd_msg+0x54>)
 800a39e:	480c      	ldr	r0, [pc, #48]	@ (800a3d0 <netconn_tcp_recvd_msg+0x58>)
 800a3a0:	f01d fdc8 	bl	8027f34 <iprintf>
 800a3a4:	f06f 030f 	mvn.w	r3, #15
 800a3a8:	e00a      	b.n	800a3c0 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	68ba      	ldr	r2, [r7, #8]
 800a3b4:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800a3b6:	6879      	ldr	r1, [r7, #4]
 800a3b8:	4806      	ldr	r0, [pc, #24]	@ (800a3d4 <netconn_tcp_recvd_msg+0x5c>)
 800a3ba:	f7ff fda7 	bl	8009f0c <netconn_apimsg>
 800a3be:	4603      	mov	r3, r0
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3710      	adds	r7, #16
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	080293a8 	.word	0x080293a8
 800a3cc:	08029608 	.word	0x08029608
 800a3d0:	08029400 	.word	0x08029400
 800a3d4:	0800b81b 	.word	0x0800b81b

0800a3d8 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b08c      	sub	sp, #48	@ 0x30
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d005      	beq.n	800a3f4 <netconn_tcp_recvd+0x1c>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a3f0:	2b10      	cmp	r3, #16
 800a3f2:	d009      	beq.n	800a408 <netconn_tcp_recvd+0x30>
 800a3f4:	4b0c      	ldr	r3, [pc, #48]	@ (800a428 <netconn_tcp_recvd+0x50>)
 800a3f6:	f240 22b5 	movw	r2, #693	@ 0x2b5
 800a3fa:	490c      	ldr	r1, [pc, #48]	@ (800a42c <netconn_tcp_recvd+0x54>)
 800a3fc:	480c      	ldr	r0, [pc, #48]	@ (800a430 <netconn_tcp_recvd+0x58>)
 800a3fe:	f01d fd99 	bl	8027f34 <iprintf>
 800a402:	f06f 030f 	mvn.w	r3, #15
 800a406:	e00b      	b.n	800a420 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800a408:	f107 030c 	add.w	r3, r7, #12
 800a40c:	461a      	mov	r2, r3
 800a40e:	6839      	ldr	r1, [r7, #0]
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f7ff ffb1 	bl	800a378 <netconn_tcp_recvd_msg>
 800a416:	4603      	mov	r3, r0
 800a418:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800a41c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800a420:	4618      	mov	r0, r3
 800a422:	3730      	adds	r7, #48	@ 0x30
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	080293a8 	.word	0x080293a8
 800a42c:	08029608 	.word	0x08029608
 800a430:	08029400 	.word	0x08029400

0800a434 <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b090      	sub	sp, #64	@ 0x40
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	4613      	mov	r3, r2
 800a440:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	3310      	adds	r3, #16
 800a446:	4618      	mov	r0, r3
 800a448:	f00e fc49 	bl	8018cde <sys_mbox_valid>
 800a44c:	4603      	mov	r3, r0
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d102      	bne.n	800a458 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800a452:	f06f 030a 	mvn.w	r3, #10
 800a456:	e072      	b.n	800a53e <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a45e:	b25b      	sxtb	r3, r3
 800a460:	2b00      	cmp	r3, #0
 800a462:	da09      	bge.n	800a478 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a46a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a46e:	b2da      	uxtb	r2, r3
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f883 2020 	strb.w	r2, [r3, #32]
    goto handle_fin;
 800a476:	e03b      	b.n	800a4f0 <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800a478:	79fb      	ldrb	r3, [r7, #7]
 800a47a:	461a      	mov	r2, r3
 800a47c:	68b9      	ldr	r1, [r7, #8]
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f7ff fea6 	bl	800a1d0 <netconn_recv_data>
 800a484:	4603      	mov	r3, r0
 800a486:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 800a48a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d002      	beq.n	800a498 <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800a492:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a496:	e052      	b.n	800a53e <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800a49e:	79fb      	ldrb	r3, [r7, #7]
 800a4a0:	f003 0308 	and.w	r3, r3, #8
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d10e      	bne.n	800a4c6 <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800a4a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d002      	beq.n	800a4b4 <netconn_recv_data_tcp+0x80>
 800a4ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b0:	891b      	ldrh	r3, [r3, #8]
 800a4b2:	e000      	b.n	800a4b6 <netconn_recv_data_tcp+0x82>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800a4b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a4ba:	f107 0214 	add.w	r2, r7, #20
 800a4be:	4619      	mov	r1, r3
 800a4c0:	68f8      	ldr	r0, [r7, #12]
 800a4c2:	f7ff ff59 	bl	800a378 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800a4c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d136      	bne.n	800a53a <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 800a4cc:	79fb      	ldrb	r3, [r7, #7]
 800a4ce:	f003 0310 	and.w	r3, r3, #16
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00b      	beq.n	800a4ee <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a4dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a4e0:	b2da      	uxtb	r2, r3
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f883 2020 	strb.w	r2, [r3, #32]
      return ERR_WOULDBLOCK;
 800a4e8:	f06f 0306 	mvn.w	r3, #6
 800a4ec:	e027      	b.n	800a53e <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 800a4ee:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d005      	beq.n	800a504 <netconn_recv_data_tcp+0xd0>
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	2101      	movs	r1, #1
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d10f      	bne.n	800a52c <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800a50c:	68f8      	ldr	r0, [r7, #12]
 800a50e:	f000 f9a3 	bl	800a858 <netconn_err>
 800a512:	4603      	mov	r3, r0
 800a514:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 800a518:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d002      	beq.n	800a526 <netconn_recv_data_tcp+0xf2>
          return err;
 800a520:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a524:	e00b      	b.n	800a53e <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 800a526:	f06f 030d 	mvn.w	r3, #13
 800a52a:	e008      	b.n	800a53e <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800a52c:	2101      	movs	r1, #1
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	f000 f962 	bl	800a7f8 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800a534:	f06f 030e 	mvn.w	r3, #14
 800a538:	e001      	b.n	800a53e <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 800a53a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3740      	adds	r7, #64	@ 0x40
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
	...

0800a548 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	4613      	mov	r3, r2
 800a554:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d005      	beq.n	800a568 <netconn_recv_tcp_pbuf_flags+0x20>
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a564:	2b10      	cmp	r3, #16
 800a566:	d009      	beq.n	800a57c <netconn_recv_tcp_pbuf_flags+0x34>
 800a568:	4b0a      	ldr	r3, [pc, #40]	@ (800a594 <netconn_recv_tcp_pbuf_flags+0x4c>)
 800a56a:	f240 3225 	movw	r2, #805	@ 0x325
 800a56e:	490a      	ldr	r1, [pc, #40]	@ (800a598 <netconn_recv_tcp_pbuf_flags+0x50>)
 800a570:	480a      	ldr	r0, [pc, #40]	@ (800a59c <netconn_recv_tcp_pbuf_flags+0x54>)
 800a572:	f01d fcdf 	bl	8027f34 <iprintf>
 800a576:	f06f 030f 	mvn.w	r3, #15
 800a57a:	e006      	b.n	800a58a <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800a57c:	79fb      	ldrb	r3, [r7, #7]
 800a57e:	461a      	mov	r2, r3
 800a580:	68b9      	ldr	r1, [r7, #8]
 800a582:	68f8      	ldr	r0, [r7, #12]
 800a584:	f7ff ff56 	bl	800a434 <netconn_recv_data_tcp>
 800a588:	4603      	mov	r3, r0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3710      	adds	r7, #16
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	080293a8 	.word	0x080293a8
 800a598:	08029608 	.word	0x08029608
 800a59c:	08029400 	.word	0x08029400

0800a5a0 <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d005      	beq.n	800a5c0 <netconn_recv_udp_raw_netbuf_flags+0x20>
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a5bc:	2b10      	cmp	r3, #16
 800a5be:	d109      	bne.n	800a5d4 <netconn_recv_udp_raw_netbuf_flags+0x34>
 800a5c0:	4b0a      	ldr	r3, [pc, #40]	@ (800a5ec <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800a5c2:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 800a5c6:	490a      	ldr	r1, [pc, #40]	@ (800a5f0 <netconn_recv_udp_raw_netbuf_flags+0x50>)
 800a5c8:	480a      	ldr	r0, [pc, #40]	@ (800a5f4 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800a5ca:	f01d fcb3 	bl	8027f34 <iprintf>
 800a5ce:	f06f 030f 	mvn.w	r3, #15
 800a5d2:	e006      	b.n	800a5e2 <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800a5d4:	79fb      	ldrb	r3, [r7, #7]
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	68b9      	ldr	r1, [r7, #8]
 800a5da:	68f8      	ldr	r0, [r7, #12]
 800a5dc:	f7ff fdf8 	bl	800a1d0 <netconn_recv_data>
 800a5e0:	4603      	mov	r3, r0
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	080293a8 	.word	0x080293a8
 800a5f0:	0802962c 	.word	0x0802962c
 800a5f4:	08029400 	.word	0x08029400

0800a5f8 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b08c      	sub	sp, #48	@ 0x30
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d109      	bne.n	800a61c <netconn_send+0x24>
 800a608:	4b0e      	ldr	r3, [pc, #56]	@ (800a644 <netconn_send+0x4c>)
 800a60a:	f240 32b2 	movw	r2, #946	@ 0x3b2
 800a60e:	490e      	ldr	r1, [pc, #56]	@ (800a648 <netconn_send+0x50>)
 800a610:	480e      	ldr	r0, [pc, #56]	@ (800a64c <netconn_send+0x54>)
 800a612:	f01d fc8f 	bl	8027f34 <iprintf>
 800a616:	f06f 030f 	mvn.w	r3, #15
 800a61a:	e00e      	b.n	800a63a <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800a624:	f107 030c 	add.w	r3, r7, #12
 800a628:	4619      	mov	r1, r3
 800a62a:	4809      	ldr	r0, [pc, #36]	@ (800a650 <netconn_send+0x58>)
 800a62c:	f7ff fc6e 	bl	8009f0c <netconn_apimsg>
 800a630:	4603      	mov	r3, r0
 800a632:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a636:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3730      	adds	r7, #48	@ 0x30
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	080293a8 	.word	0x080293a8
 800a648:	08029664 	.word	0x08029664
 800a64c:	08029400 	.word	0x08029400
 800a650:	0800b781 	.word	0x0800b781

0800a654 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b088      	sub	sp, #32
 800a658:	af02      	add	r7, sp, #8
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	607a      	str	r2, [r7, #4]
 800a660:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800a66a:	78fa      	ldrb	r2, [r7, #3]
 800a66c:	f107 0110 	add.w	r1, r7, #16
 800a670:	6a3b      	ldr	r3, [r7, #32]
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	4613      	mov	r3, r2
 800a676:	2201      	movs	r2, #1
 800a678:	68f8      	ldr	r0, [r7, #12]
 800a67a:	f000 f805 	bl	800a688 <netconn_write_vectors_partly>
 800a67e:	4603      	mov	r3, r0
}
 800a680:	4618      	mov	r0, r3
 800a682:	3718      	adds	r7, #24
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b092      	sub	sp, #72	@ 0x48
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	4611      	mov	r1, r2
 800a694:	461a      	mov	r2, r3
 800a696:	460b      	mov	r3, r1
 800a698:	80fb      	strh	r3, [r7, #6]
 800a69a:	4613      	mov	r3, r2
 800a69c:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d109      	bne.n	800a6b8 <netconn_write_vectors_partly+0x30>
 800a6a4:	4b4e      	ldr	r3, [pc, #312]	@ (800a7e0 <netconn_write_vectors_partly+0x158>)
 800a6a6:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800a6aa:	494e      	ldr	r1, [pc, #312]	@ (800a7e4 <netconn_write_vectors_partly+0x15c>)
 800a6ac:	484e      	ldr	r0, [pc, #312]	@ (800a7e8 <netconn_write_vectors_partly+0x160>)
 800a6ae:	f01d fc41 	bl	8027f34 <iprintf>
 800a6b2:	f06f 030f 	mvn.w	r3, #15
 800a6b6:	e08f      	b.n	800a7d8 <netconn_write_vectors_partly+0x150>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a6c0:	2b10      	cmp	r3, #16
 800a6c2:	d009      	beq.n	800a6d8 <netconn_write_vectors_partly+0x50>
 800a6c4:	4b46      	ldr	r3, [pc, #280]	@ (800a7e0 <netconn_write_vectors_partly+0x158>)
 800a6c6:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800a6ca:	4948      	ldr	r1, [pc, #288]	@ (800a7ec <netconn_write_vectors_partly+0x164>)
 800a6cc:	4846      	ldr	r0, [pc, #280]	@ (800a7e8 <netconn_write_vectors_partly+0x160>)
 800a6ce:	f01d fc31 	bl	8027f34 <iprintf>
 800a6d2:	f06f 0305 	mvn.w	r3, #5
 800a6d6:	e07f      	b.n	800a7d8 <netconn_write_vectors_partly+0x150>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a6de:	f003 0302 	and.w	r3, r3, #2
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d104      	bne.n	800a6f0 <netconn_write_vectors_partly+0x68>
 800a6e6:	797b      	ldrb	r3, [r7, #5]
 800a6e8:	f003 0304 	and.w	r3, r3, #4
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d001      	beq.n	800a6f4 <netconn_write_vectors_partly+0x6c>
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e000      	b.n	800a6f6 <netconn_write_vectors_partly+0x6e>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800a6fa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d005      	beq.n	800a70e <netconn_write_vectors_partly+0x86>
 800a702:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a704:	2b00      	cmp	r3, #0
 800a706:	d102      	bne.n	800a70e <netconn_write_vectors_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800a708:	f06f 0305 	mvn.w	r3, #5
 800a70c:	e064      	b.n	800a7d8 <netconn_write_vectors_partly+0x150>
  }

  /* sum up the total size */
  size = 0;
 800a70e:	2300      	movs	r3, #0
 800a710:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 800a712:	2300      	movs	r3, #0
 800a714:	643b      	str	r3, [r7, #64]	@ 0x40
 800a716:	e015      	b.n	800a744 <netconn_write_vectors_partly+0xbc>
    size += vectors[i].len;
 800a718:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a71a:	00db      	lsls	r3, r3, #3
 800a71c:	68ba      	ldr	r2, [r7, #8]
 800a71e:	4413      	add	r3, r2
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a724:	4413      	add	r3, r2
 800a726:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800a728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a72a:	00db      	lsls	r3, r3, #3
 800a72c:	68ba      	ldr	r2, [r7, #8]
 800a72e:	4413      	add	r3, r2
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a734:	429a      	cmp	r2, r3
 800a736:	d202      	bcs.n	800a73e <netconn_write_vectors_partly+0xb6>
      /* overflow */
      return ERR_VAL;
 800a738:	f06f 0305 	mvn.w	r3, #5
 800a73c:	e04c      	b.n	800a7d8 <netconn_write_vectors_partly+0x150>
  for (i = 0; i < vectorcnt; i++) {
 800a73e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a740:	3301      	adds	r3, #1
 800a742:	643b      	str	r3, [r7, #64]	@ 0x40
 800a744:	88fb      	ldrh	r3, [r7, #6]
 800a746:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a748:	429a      	cmp	r2, r3
 800a74a:	dbe5      	blt.n	800a718 <netconn_write_vectors_partly+0x90>
    }
  }
  if (size == 0) {
 800a74c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d101      	bne.n	800a756 <netconn_write_vectors_partly+0xce>
    return ERR_OK;
 800a752:	2300      	movs	r3, #0
 800a754:	e040      	b.n	800a7d8 <netconn_write_vectors_partly+0x150>
  } else if (size > SSIZE_MAX) {
 800a756:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a758:	2b00      	cmp	r3, #0
 800a75a:	da0a      	bge.n	800a772 <netconn_write_vectors_partly+0xea>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800a75c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d102      	bne.n	800a768 <netconn_write_vectors_partly+0xe0>
      return ERR_VAL;
 800a762:	f06f 0305 	mvn.w	r3, #5
 800a766:	e037      	b.n	800a7d8 <netconn_write_vectors_partly+0x150>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800a768:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a76c:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 800a76e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a770:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800a77a:	88fb      	ldrh	r3, [r7, #6]
 800a77c:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800a77e:	2300      	movs	r3, #0
 800a780:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800a782:	797b      	ldrb	r3, [r7, #5]
 800a784:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800a788:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a78a:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800a78c:	2300      	movs	r3, #0
 800a78e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800a790:	f107 0314 	add.w	r3, r7, #20
 800a794:	4619      	mov	r1, r3
 800a796:	4816      	ldr	r0, [pc, #88]	@ (800a7f0 <netconn_write_vectors_partly+0x168>)
 800a798:	f7ff fbb8 	bl	8009f0c <netconn_apimsg>
 800a79c:	4603      	mov	r3, r0
 800a79e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 800a7a2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d114      	bne.n	800a7d4 <netconn_write_vectors_partly+0x14c>
    if (bytes_written != NULL) {
 800a7aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d002      	beq.n	800a7b6 <netconn_write_vectors_partly+0x12e>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800a7b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7b4:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800a7b6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d10a      	bne.n	800a7d4 <netconn_write_vectors_partly+0x14c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800a7be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d006      	beq.n	800a7d4 <netconn_write_vectors_partly+0x14c>
 800a7c6:	4b06      	ldr	r3, [pc, #24]	@ (800a7e0 <netconn_write_vectors_partly+0x158>)
 800a7c8:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800a7cc:	4909      	ldr	r1, [pc, #36]	@ (800a7f4 <netconn_write_vectors_partly+0x16c>)
 800a7ce:	4806      	ldr	r0, [pc, #24]	@ (800a7e8 <netconn_write_vectors_partly+0x160>)
 800a7d0:	f01d fbb0 	bl	8027f34 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800a7d4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3748      	adds	r7, #72	@ 0x48
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	080293a8 	.word	0x080293a8
 800a7e4:	08029680 	.word	0x08029680
 800a7e8:	08029400 	.word	0x08029400
 800a7ec:	0802969c 	.word	0x0802969c
 800a7f0:	0800bc25 	.word	0x0800bc25
 800a7f4:	080296c0 	.word	0x080296c0

0800a7f8 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b08c      	sub	sp, #48	@ 0x30
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	460b      	mov	r3, r1
 800a802:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d109      	bne.n	800a81e <netconn_close_shutdown+0x26>
 800a80a:	4b0f      	ldr	r3, [pc, #60]	@ (800a848 <netconn_close_shutdown+0x50>)
 800a80c:	f240 4247 	movw	r2, #1095	@ 0x447
 800a810:	490e      	ldr	r1, [pc, #56]	@ (800a84c <netconn_close_shutdown+0x54>)
 800a812:	480f      	ldr	r0, [pc, #60]	@ (800a850 <netconn_close_shutdown+0x58>)
 800a814:	f01d fb8e 	bl	8027f34 <iprintf>
 800a818:	f06f 030f 	mvn.w	r3, #15
 800a81c:	e010      	b.n	800a840 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800a822:	78fb      	ldrb	r3, [r7, #3]
 800a824:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a826:	2329      	movs	r3, #41	@ 0x29
 800a828:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800a82a:	f107 030c 	add.w	r3, r7, #12
 800a82e:	4619      	mov	r1, r3
 800a830:	4808      	ldr	r0, [pc, #32]	@ (800a854 <netconn_close_shutdown+0x5c>)
 800a832:	f7ff fb6b 	bl	8009f0c <netconn_apimsg>
 800a836:	4603      	mov	r3, r0
 800a838:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a83c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800a840:	4618      	mov	r0, r3
 800a842:	3730      	adds	r7, #48	@ 0x30
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	080293a8 	.word	0x080293a8
 800a84c:	080296e4 	.word	0x080296e4
 800a850:	08029400 	.word	0x08029400
 800a854:	0800be49 	.word	0x0800be49

0800a858 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b084      	sub	sp, #16
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d101      	bne.n	800a86a <netconn_err+0x12>
    return ERR_OK;
 800a866:	2300      	movs	r3, #0
 800a868:	e00d      	b.n	800a886 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800a86a:	f00e fb53 	bl	8018f14 <sys_arch_protect>
 800a86e:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	7a1b      	ldrb	r3, [r3, #8]
 800a874:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800a87c:	68f8      	ldr	r0, [r7, #12]
 800a87e:	f00e fb57 	bl	8018f30 <sys_arch_unprotect>
  return err;
 800a882:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3710      	adds	r7, #16
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
	...

0800a890 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b082      	sub	sp, #8
 800a894:	af00      	add	r7, sp, #0
 800a896:	4603      	mov	r3, r0
 800a898:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800a89a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a89e:	f113 0f0d 	cmn.w	r3, #13
 800a8a2:	d009      	beq.n	800a8b8 <lwip_netconn_err_to_msg+0x28>
 800a8a4:	f113 0f0d 	cmn.w	r3, #13
 800a8a8:	dc0c      	bgt.n	800a8c4 <lwip_netconn_err_to_msg+0x34>
 800a8aa:	f113 0f0f 	cmn.w	r3, #15
 800a8ae:	d007      	beq.n	800a8c0 <lwip_netconn_err_to_msg+0x30>
 800a8b0:	f113 0f0e 	cmn.w	r3, #14
 800a8b4:	d002      	beq.n	800a8bc <lwip_netconn_err_to_msg+0x2c>
 800a8b6:	e005      	b.n	800a8c4 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800a8b8:	4b0a      	ldr	r3, [pc, #40]	@ (800a8e4 <lwip_netconn_err_to_msg+0x54>)
 800a8ba:	e00e      	b.n	800a8da <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800a8bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a8e8 <lwip_netconn_err_to_msg+0x58>)
 800a8be:	e00c      	b.n	800a8da <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800a8c0:	4b0a      	ldr	r3, [pc, #40]	@ (800a8ec <lwip_netconn_err_to_msg+0x5c>)
 800a8c2:	e00a      	b.n	800a8da <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800a8c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d005      	beq.n	800a8d8 <lwip_netconn_err_to_msg+0x48>
 800a8cc:	4b08      	ldr	r3, [pc, #32]	@ (800a8f0 <lwip_netconn_err_to_msg+0x60>)
 800a8ce:	227d      	movs	r2, #125	@ 0x7d
 800a8d0:	4908      	ldr	r1, [pc, #32]	@ (800a8f4 <lwip_netconn_err_to_msg+0x64>)
 800a8d2:	4809      	ldr	r0, [pc, #36]	@ (800a8f8 <lwip_netconn_err_to_msg+0x68>)
 800a8d4:	f01d fb2e 	bl	8027f34 <iprintf>
      return NULL;
 800a8d8:	2300      	movs	r3, #0
  }
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3708      	adds	r7, #8
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	0802ccfc 	.word	0x0802ccfc
 800a8e8:	0802ccfd 	.word	0x0802ccfd
 800a8ec:	0802ccfe 	.word	0x0802ccfe
 800a8f0:	08029700 	.word	0x08029700
 800a8f4:	08029734 	.word	0x08029734
 800a8f8:	08029744 	.word	0x08029744

0800a8fc <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d105      	bne.n	800a918 <lwip_netconn_is_err_msg+0x1c>
 800a90c:	4b12      	ldr	r3, [pc, #72]	@ (800a958 <lwip_netconn_is_err_msg+0x5c>)
 800a90e:	2285      	movs	r2, #133	@ 0x85
 800a910:	4912      	ldr	r1, [pc, #72]	@ (800a95c <lwip_netconn_is_err_msg+0x60>)
 800a912:	4813      	ldr	r0, [pc, #76]	@ (800a960 <lwip_netconn_is_err_msg+0x64>)
 800a914:	f01d fb0e 	bl	8027f34 <iprintf>

  if (msg == &netconn_aborted) {
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4a12      	ldr	r2, [pc, #72]	@ (800a964 <lwip_netconn_is_err_msg+0x68>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d104      	bne.n	800a92a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	22f3      	movs	r2, #243	@ 0xf3
 800a924:	701a      	strb	r2, [r3, #0]
    return 1;
 800a926:	2301      	movs	r3, #1
 800a928:	e012      	b.n	800a950 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	4a0e      	ldr	r2, [pc, #56]	@ (800a968 <lwip_netconn_is_err_msg+0x6c>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d104      	bne.n	800a93c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	22f2      	movs	r2, #242	@ 0xf2
 800a936:	701a      	strb	r2, [r3, #0]
    return 1;
 800a938:	2301      	movs	r3, #1
 800a93a:	e009      	b.n	800a950 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	4a0b      	ldr	r2, [pc, #44]	@ (800a96c <lwip_netconn_is_err_msg+0x70>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d104      	bne.n	800a94e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	22f1      	movs	r2, #241	@ 0xf1
 800a948:	701a      	strb	r2, [r3, #0]
    return 1;
 800a94a:	2301      	movs	r3, #1
 800a94c:	e000      	b.n	800a950 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	3708      	adds	r7, #8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}
 800a958:	08029700 	.word	0x08029700
 800a95c:	0802976c 	.word	0x0802976c
 800a960:	08029744 	.word	0x08029744
 800a964:	0802ccfc 	.word	0x0802ccfc
 800a968:	0802ccfd 	.word	0x0802ccfd
 800a96c:	0802ccfe 	.word	0x0802ccfe

0800a970 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b088      	sub	sp, #32
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
 800a97c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d105      	bne.n	800a990 <recv_udp+0x20>
 800a984:	4b34      	ldr	r3, [pc, #208]	@ (800aa58 <recv_udp+0xe8>)
 800a986:	22e5      	movs	r2, #229	@ 0xe5
 800a988:	4934      	ldr	r1, [pc, #208]	@ (800aa5c <recv_udp+0xec>)
 800a98a:	4835      	ldr	r0, [pc, #212]	@ (800aa60 <recv_udp+0xf0>)
 800a98c:	f01d fad2 	bl	8027f34 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d105      	bne.n	800a9a2 <recv_udp+0x32>
 800a996:	4b30      	ldr	r3, [pc, #192]	@ (800aa58 <recv_udp+0xe8>)
 800a998:	22e6      	movs	r2, #230	@ 0xe6
 800a99a:	4932      	ldr	r1, [pc, #200]	@ (800aa64 <recv_udp+0xf4>)
 800a99c:	4830      	ldr	r0, [pc, #192]	@ (800aa60 <recv_udp+0xf0>)
 800a99e:	f01d fac9 	bl	8027f34 <iprintf>
  conn = (struct netconn *)arg;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d103      	bne.n	800a9b4 <recv_udp+0x44>
    pbuf_free(p);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f004 fbef 	bl	800f190 <pbuf_free>
    return;
 800a9b2:	e04d      	b.n	800aa50 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	68ba      	ldr	r2, [r7, #8]
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d005      	beq.n	800a9ca <recv_udp+0x5a>
 800a9be:	4b26      	ldr	r3, [pc, #152]	@ (800aa58 <recv_udp+0xe8>)
 800a9c0:	22ee      	movs	r2, #238	@ 0xee
 800a9c2:	4929      	ldr	r1, [pc, #164]	@ (800aa68 <recv_udp+0xf8>)
 800a9c4:	4826      	ldr	r0, [pc, #152]	@ (800aa60 <recv_udp+0xf0>)
 800a9c6:	f01d fab5 	bl	8027f34 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a9ca:	69fb      	ldr	r3, [r7, #28]
 800a9cc:	3310      	adds	r3, #16
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f00e f985 	bl	8018cde <sys_mbox_valid>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d103      	bne.n	800a9e2 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f004 fbd8 	bl	800f190 <pbuf_free>
    return;
 800a9e0:	e036      	b.n	800aa50 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a9e2:	2006      	movs	r0, #6
 800a9e4:	f003 fc50 	bl	800e288 <memp_malloc>
 800a9e8:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800a9ea:	69bb      	ldr	r3, [r7, #24]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d103      	bne.n	800a9f8 <recv_udp+0x88>
    pbuf_free(p);
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f004 fbcd 	bl	800f190 <pbuf_free>
    return;
 800a9f6:	e02b      	b.n	800aa50 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800a9f8:	69bb      	ldr	r3, [r7, #24]
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a9fe:	69bb      	ldr	r3, [r7, #24]
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d002      	beq.n	800aa10 <recv_udp+0xa0>
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	e000      	b.n	800aa12 <recv_udp+0xa2>
 800aa10:	2300      	movs	r3, #0
 800aa12:	69ba      	ldr	r2, [r7, #24]
 800aa14:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800aa1a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	891b      	ldrh	r3, [r3, #8]
 800aa20:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800aa22:	69fb      	ldr	r3, [r7, #28]
 800aa24:	3310      	adds	r3, #16
 800aa26:	69b9      	ldr	r1, [r7, #24]
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f00e f8e3 	bl	8018bf4 <sys_mbox_trypost>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d003      	beq.n	800aa3c <recv_udp+0xcc>
    netbuf_delete(buf);
 800aa34:	69b8      	ldr	r0, [r7, #24]
 800aa36:	f001 fab1 	bl	800bf9c <netbuf_delete>
    return;
 800aa3a:	e009      	b.n	800aa50 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800aa3c:	69fb      	ldr	r3, [r7, #28]
 800aa3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d005      	beq.n	800aa50 <recv_udp+0xe0>
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa48:	8afa      	ldrh	r2, [r7, #22]
 800aa4a:	2100      	movs	r1, #0
 800aa4c:	69f8      	ldr	r0, [r7, #28]
 800aa4e:	4798      	blx	r3
  }
}
 800aa50:	3720      	adds	r7, #32
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	08029700 	.word	0x08029700
 800aa5c:	08029778 	.word	0x08029778
 800aa60:	08029744 	.word	0x08029744
 800aa64:	0802979c 	.word	0x0802979c
 800aa68:	080297bc 	.word	0x080297bc

0800aa6c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b088      	sub	sp, #32
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	60b9      	str	r1, [r7, #8]
 800aa76:	607a      	str	r2, [r7, #4]
 800aa78:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d106      	bne.n	800aa8e <recv_tcp+0x22>
 800aa80:	4b36      	ldr	r3, [pc, #216]	@ (800ab5c <recv_tcp+0xf0>)
 800aa82:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800aa86:	4936      	ldr	r1, [pc, #216]	@ (800ab60 <recv_tcp+0xf4>)
 800aa88:	4836      	ldr	r0, [pc, #216]	@ (800ab64 <recv_tcp+0xf8>)
 800aa8a:	f01d fa53 	bl	8027f34 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d106      	bne.n	800aaa2 <recv_tcp+0x36>
 800aa94:	4b31      	ldr	r3, [pc, #196]	@ (800ab5c <recv_tcp+0xf0>)
 800aa96:	f240 122d 	movw	r2, #301	@ 0x12d
 800aa9a:	4933      	ldr	r1, [pc, #204]	@ (800ab68 <recv_tcp+0xfc>)
 800aa9c:	4831      	ldr	r0, [pc, #196]	@ (800ab64 <recv_tcp+0xf8>)
 800aa9e:	f01d fa49 	bl	8027f34 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800aaa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d006      	beq.n	800aab8 <recv_tcp+0x4c>
 800aaaa:	4b2c      	ldr	r3, [pc, #176]	@ (800ab5c <recv_tcp+0xf0>)
 800aaac:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800aab0:	492e      	ldr	r1, [pc, #184]	@ (800ab6c <recv_tcp+0x100>)
 800aab2:	482c      	ldr	r0, [pc, #176]	@ (800ab64 <recv_tcp+0xf8>)
 800aab4:	f01d fa3e 	bl	8027f34 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d102      	bne.n	800aac8 <recv_tcp+0x5c>
    return ERR_VAL;
 800aac2:	f06f 0305 	mvn.w	r3, #5
 800aac6:	e045      	b.n	800ab54 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	68ba      	ldr	r2, [r7, #8]
 800aace:	429a      	cmp	r2, r3
 800aad0:	d006      	beq.n	800aae0 <recv_tcp+0x74>
 800aad2:	4b22      	ldr	r3, [pc, #136]	@ (800ab5c <recv_tcp+0xf0>)
 800aad4:	f240 1235 	movw	r2, #309	@ 0x135
 800aad8:	4925      	ldr	r1, [pc, #148]	@ (800ab70 <recv_tcp+0x104>)
 800aada:	4822      	ldr	r0, [pc, #136]	@ (800ab64 <recv_tcp+0xf8>)
 800aadc:	f01d fa2a 	bl	8027f34 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	3310      	adds	r3, #16
 800aae4:	4618      	mov	r0, r3
 800aae6:	f00e f8fa 	bl	8018cde <sys_mbox_valid>
 800aaea:	4603      	mov	r3, r0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d10d      	bne.n	800ab0c <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d008      	beq.n	800ab08 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	891b      	ldrh	r3, [r3, #8]
 800aafa:	4619      	mov	r1, r3
 800aafc:	68b8      	ldr	r0, [r7, #8]
 800aafe:	f005 fa5f 	bl	800ffc0 <tcp_recved>
      pbuf_free(p);
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f004 fb44 	bl	800f190 <pbuf_free>
    }
    return ERR_OK;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	e023      	b.n	800ab54 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d005      	beq.n	800ab1e <recv_tcp+0xb2>
    msg = p;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	891b      	ldrh	r3, [r3, #8]
 800ab1a:	83fb      	strh	r3, [r7, #30]
 800ab1c:	e003      	b.n	800ab26 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800ab1e:	4b15      	ldr	r3, [pc, #84]	@ (800ab74 <recv_tcp+0x108>)
 800ab20:	61bb      	str	r3, [r7, #24]
    len = 0;
 800ab22:	2300      	movs	r3, #0
 800ab24:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	3310      	adds	r3, #16
 800ab2a:	69b9      	ldr	r1, [r7, #24]
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f00e f861 	bl	8018bf4 <sys_mbox_trypost>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d002      	beq.n	800ab3e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800ab38:	f04f 33ff 	mov.w	r3, #4294967295
 800ab3c:	e00a      	b.n	800ab54 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d005      	beq.n	800ab52 <recv_tcp+0xe6>
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab4a:	8bfa      	ldrh	r2, [r7, #30]
 800ab4c:	2100      	movs	r1, #0
 800ab4e:	6978      	ldr	r0, [r7, #20]
 800ab50:	4798      	blx	r3
  }

  return ERR_OK;
 800ab52:	2300      	movs	r3, #0
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3720      	adds	r7, #32
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	08029700 	.word	0x08029700
 800ab60:	080297dc 	.word	0x080297dc
 800ab64:	08029744 	.word	0x08029744
 800ab68:	08029800 	.word	0x08029800
 800ab6c:	08029820 	.word	0x08029820
 800ab70:	08029838 	.word	0x08029838
 800ab74:	0802ccfe 	.word	0x0802ccfe

0800ab78 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d106      	bne.n	800ab9a <poll_tcp+0x22>
 800ab8c:	4b2b      	ldr	r3, [pc, #172]	@ (800ac3c <poll_tcp+0xc4>)
 800ab8e:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800ab92:	492b      	ldr	r1, [pc, #172]	@ (800ac40 <poll_tcp+0xc8>)
 800ab94:	482b      	ldr	r0, [pc, #172]	@ (800ac44 <poll_tcp+0xcc>)
 800ab96:	f01d f9cd 	bl	8027f34 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	785b      	ldrb	r3, [r3, #1]
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d104      	bne.n	800abac <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800aba2:	2101      	movs	r1, #1
 800aba4:	68f8      	ldr	r0, [r7, #12]
 800aba6:	f000 fe6d 	bl	800b884 <lwip_netconn_do_writemore>
 800abaa:	e016      	b.n	800abda <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	785b      	ldrb	r3, [r3, #1]
 800abb0:	2b04      	cmp	r3, #4
 800abb2:	d112      	bne.n	800abda <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d00a      	beq.n	800abd2 <poll_tcp+0x5a>
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abc0:	7a5b      	ldrb	r3, [r3, #9]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d005      	beq.n	800abd2 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abca:	7a5a      	ldrb	r2, [r3, #9]
 800abcc:	3a01      	subs	r2, #1
 800abce:	b2d2      	uxtb	r2, r2
 800abd0:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800abd2:	2101      	movs	r1, #1
 800abd4:	68f8      	ldr	r0, [r7, #12]
 800abd6:	f000 fb49 	bl	800b26c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800abe0:	f003 0310 	and.w	r3, r3, #16
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d023      	beq.n	800ac30 <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d01f      	beq.n	800ac30 <poll_tcp+0xb8>
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800abf8:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800abfc:	d318      	bcc.n	800ac30 <poll_tcp+0xb8>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ac06:	2b04      	cmp	r3, #4
 800ac08:	d812      	bhi.n	800ac30 <poll_tcp+0xb8>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ac10:	f023 0310 	bic.w	r3, r3, #16
 800ac14:	b2da      	uxtb	r2, r3
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d005      	beq.n	800ac30 <poll_tcp+0xb8>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac28:	2200      	movs	r2, #0
 800ac2a:	2102      	movs	r1, #2
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3710      	adds	r7, #16
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	08029700 	.word	0x08029700
 800ac40:	08029858 	.word	0x08029858
 800ac44:	08029744 	.word	0x08029744

0800ac48 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b086      	sub	sp, #24
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	4613      	mov	r3, r2
 800ac54:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d106      	bne.n	800ac6e <sent_tcp+0x26>
 800ac60:	4b21      	ldr	r3, [pc, #132]	@ (800ace8 <sent_tcp+0xa0>)
 800ac62:	f240 1293 	movw	r2, #403	@ 0x193
 800ac66:	4921      	ldr	r1, [pc, #132]	@ (800acec <sent_tcp+0xa4>)
 800ac68:	4821      	ldr	r0, [pc, #132]	@ (800acf0 <sent_tcp+0xa8>)
 800ac6a:	f01d f963 	bl	8027f34 <iprintf>

  if (conn) {
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d034      	beq.n	800acde <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	785b      	ldrb	r3, [r3, #1]
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d104      	bne.n	800ac86 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800ac7c:	2101      	movs	r1, #1
 800ac7e:	6978      	ldr	r0, [r7, #20]
 800ac80:	f000 fe00 	bl	800b884 <lwip_netconn_do_writemore>
 800ac84:	e007      	b.n	800ac96 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	785b      	ldrb	r3, [r3, #1]
 800ac8a:	2b04      	cmp	r3, #4
 800ac8c:	d103      	bne.n	800ac96 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ac8e:	2101      	movs	r1, #1
 800ac90:	6978      	ldr	r0, [r7, #20]
 800ac92:	f000 faeb 	bl	800b26c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d01f      	beq.n	800acde <sent_tcp+0x96>
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800aca6:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800acaa:	d318      	bcc.n	800acde <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800acb4:	2b04      	cmp	r3, #4
 800acb6:	d812      	bhi.n	800acde <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	f893 3020 	ldrb.w	r3, [r3, #32]
 800acbe:	f023 0310 	bic.w	r3, r3, #16
 800acc2:	b2da      	uxtb	r2, r3
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d005      	beq.n	800acde <sent_tcp+0x96>
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acd6:	88fa      	ldrh	r2, [r7, #6]
 800acd8:	2102      	movs	r1, #2
 800acda:	6978      	ldr	r0, [r7, #20]
 800acdc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800acde:	2300      	movs	r3, #0
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3718      	adds	r7, #24
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	08029700 	.word	0x08029700
 800acec:	08029858 	.word	0x08029858
 800acf0:	08029744 	.word	0x08029744

0800acf4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b088      	sub	sp, #32
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	460b      	mov	r3, r1
 800acfe:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ad04:	69fb      	ldr	r3, [r7, #28]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d106      	bne.n	800ad18 <err_tcp+0x24>
 800ad0a:	4b61      	ldr	r3, [pc, #388]	@ (800ae90 <err_tcp+0x19c>)
 800ad0c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800ad10:	4960      	ldr	r1, [pc, #384]	@ (800ae94 <err_tcp+0x1a0>)
 800ad12:	4861      	ldr	r0, [pc, #388]	@ (800ae98 <err_tcp+0x1a4>)
 800ad14:	f01d f90e 	bl	8027f34 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800ad18:	f00e f8fc 	bl	8018f14 <sys_arch_protect>
 800ad1c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	2200      	movs	r2, #0
 800ad22:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	78fa      	ldrb	r2, [r7, #3]
 800ad28:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800ad2a:	69fb      	ldr	r3, [r7, #28]
 800ad2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ad30:	f043 0301 	orr.w	r3, r3, #1
 800ad34:	b2da      	uxtb	r2, r3
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	f883 2020 	strb.w	r2, [r3, #32]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	785b      	ldrb	r3, [r3, #1]
 800ad40:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800ad42:	69fb      	ldr	r3, [r7, #28]
 800ad44:	2200      	movs	r2, #0
 800ad46:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800ad48:	69b8      	ldr	r0, [r7, #24]
 800ad4a:	f00e f8f1 	bl	8018f30 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800ad4e:	69fb      	ldr	r3, [r7, #28]
 800ad50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d005      	beq.n	800ad62 <err_tcp+0x6e>
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	2104      	movs	r1, #4
 800ad5e:	69f8      	ldr	r0, [r7, #28]
 800ad60:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ad62:	69fb      	ldr	r3, [r7, #28]
 800ad64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d005      	beq.n	800ad76 <err_tcp+0x82>
 800ad6a:	69fb      	ldr	r3, [r7, #28]
 800ad6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad6e:	2200      	movs	r2, #0
 800ad70:	2100      	movs	r1, #0
 800ad72:	69f8      	ldr	r0, [r7, #28]
 800ad74:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d005      	beq.n	800ad8a <err_tcp+0x96>
 800ad7e:	69fb      	ldr	r3, [r7, #28]
 800ad80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad82:	2200      	movs	r2, #0
 800ad84:	2102      	movs	r1, #2
 800ad86:	69f8      	ldr	r0, [r7, #28]
 800ad88:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800ad8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7ff fd7e 	bl	800a890 <lwip_netconn_err_to_msg>
 800ad94:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ad96:	69fb      	ldr	r3, [r7, #28]
 800ad98:	3310      	adds	r3, #16
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f00d ff9f 	bl	8018cde <sys_mbox_valid>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d005      	beq.n	800adb2 <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800ada6:	69fb      	ldr	r3, [r7, #28]
 800ada8:	3310      	adds	r3, #16
 800adaa:	6939      	ldr	r1, [r7, #16]
 800adac:	4618      	mov	r0, r3
 800adae:	f00d ff21 	bl	8018bf4 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	3314      	adds	r3, #20
 800adb6:	4618      	mov	r0, r3
 800adb8:	f00d ff91 	bl	8018cde <sys_mbox_valid>
 800adbc:	4603      	mov	r3, r0
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d005      	beq.n	800adce <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	3314      	adds	r3, #20
 800adc6:	6939      	ldr	r1, [r7, #16]
 800adc8:	4618      	mov	r0, r3
 800adca:	f00d ff13 	bl	8018bf4 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800adce:	7dfb      	ldrb	r3, [r7, #23]
 800add0:	2b01      	cmp	r3, #1
 800add2:	d005      	beq.n	800ade0 <err_tcp+0xec>
 800add4:	7dfb      	ldrb	r3, [r7, #23]
 800add6:	2b04      	cmp	r3, #4
 800add8:	d002      	beq.n	800ade0 <err_tcp+0xec>
 800adda:	7dfb      	ldrb	r3, [r7, #23]
 800addc:	2b03      	cmp	r3, #3
 800adde:	d146      	bne.n	800ae6e <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800ade0:	69fb      	ldr	r3, [r7, #28]
 800ade2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ade6:	f003 0304 	and.w	r3, r3, #4
 800adea:	2b00      	cmp	r3, #0
 800adec:	bf14      	ite	ne
 800adee:	2301      	movne	r3, #1
 800adf0:	2300      	moveq	r3, #0
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800adf6:	69fb      	ldr	r3, [r7, #28]
 800adf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800adfc:	f023 0304 	bic.w	r3, r3, #4
 800ae00:	b2da      	uxtb	r2, r3
 800ae02:	69fb      	ldr	r3, [r7, #28]
 800ae04:	f883 2020 	strb.w	r2, [r3, #32]

    if (!was_nonblocking_connect) {
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d13b      	bne.n	800ae86 <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ae0e:	69fb      	ldr	r3, [r7, #28]
 800ae10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d106      	bne.n	800ae24 <err_tcp+0x130>
 800ae16:	4b1e      	ldr	r3, [pc, #120]	@ (800ae90 <err_tcp+0x19c>)
 800ae18:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800ae1c:	491f      	ldr	r1, [pc, #124]	@ (800ae9c <err_tcp+0x1a8>)
 800ae1e:	481e      	ldr	r0, [pc, #120]	@ (800ae98 <err_tcp+0x1a4>)
 800ae20:	f01d f888 	bl	8027f34 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800ae24:	7dfb      	ldrb	r3, [r7, #23]
 800ae26:	2b04      	cmp	r3, #4
 800ae28:	d104      	bne.n	800ae34 <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800ae2a:	69fb      	ldr	r3, [r7, #28]
 800ae2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae2e:	2200      	movs	r2, #0
 800ae30:	711a      	strb	r2, [r3, #4]
 800ae32:	e003      	b.n	800ae3c <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800ae34:	69fb      	ldr	r3, [r7, #28]
 800ae36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae38:	78fa      	ldrb	r2, [r7, #3]
 800ae3a:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ae3c:	69fb      	ldr	r3, [r7, #28]
 800ae3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	330c      	adds	r3, #12
 800ae44:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800ae46:	68b8      	ldr	r0, [r7, #8]
 800ae48:	f00d ffda 	bl	8018e00 <sys_sem_valid>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d106      	bne.n	800ae60 <err_tcp+0x16c>
 800ae52:	4b0f      	ldr	r3, [pc, #60]	@ (800ae90 <err_tcp+0x19c>)
 800ae54:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800ae58:	4911      	ldr	r1, [pc, #68]	@ (800aea0 <err_tcp+0x1ac>)
 800ae5a:	480f      	ldr	r0, [pc, #60]	@ (800ae98 <err_tcp+0x1a4>)
 800ae5c:	f01d f86a 	bl	8027f34 <iprintf>
      conn->current_msg = NULL;
 800ae60:	69fb      	ldr	r3, [r7, #28]
 800ae62:	2200      	movs	r2, #0
 800ae64:	625a      	str	r2, [r3, #36]	@ 0x24
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800ae66:	68b8      	ldr	r0, [r7, #8]
 800ae68:	f00d ffb0 	bl	8018dcc <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800ae6c:	e00b      	b.n	800ae86 <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800ae6e:	69fb      	ldr	r3, [r7, #28]
 800ae70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d008      	beq.n	800ae88 <err_tcp+0x194>
 800ae76:	4b06      	ldr	r3, [pc, #24]	@ (800ae90 <err_tcp+0x19c>)
 800ae78:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800ae7c:	4909      	ldr	r1, [pc, #36]	@ (800aea4 <err_tcp+0x1b0>)
 800ae7e:	4806      	ldr	r0, [pc, #24]	@ (800ae98 <err_tcp+0x1a4>)
 800ae80:	f01d f858 	bl	8027f34 <iprintf>
  }
}
 800ae84:	e000      	b.n	800ae88 <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 800ae86:	bf00      	nop
}
 800ae88:	bf00      	nop
 800ae8a:	3720      	adds	r7, #32
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	08029700 	.word	0x08029700
 800ae94:	08029858 	.word	0x08029858
 800ae98:	08029744 	.word	0x08029744
 800ae9c:	08029868 	.word	0x08029868
 800aea0:	08029884 	.word	0x08029884
 800aea4:	080298a0 	.word	0x080298a0

0800aea8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800aeb6:	6879      	ldr	r1, [r7, #4]
 800aeb8:	68f8      	ldr	r0, [r7, #12]
 800aeba:	f005 ff49 	bl	8010d50 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800aebe:	490a      	ldr	r1, [pc, #40]	@ (800aee8 <setup_tcp+0x40>)
 800aec0:	68f8      	ldr	r0, [r7, #12]
 800aec2:	f005 ff57 	bl	8010d74 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800aec6:	4909      	ldr	r1, [pc, #36]	@ (800aeec <setup_tcp+0x44>)
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f005 ff75 	bl	8010db8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800aece:	2202      	movs	r2, #2
 800aed0:	4907      	ldr	r1, [pc, #28]	@ (800aef0 <setup_tcp+0x48>)
 800aed2:	68f8      	ldr	r0, [r7, #12]
 800aed4:	f005 ffcc 	bl	8010e70 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800aed8:	4906      	ldr	r1, [pc, #24]	@ (800aef4 <setup_tcp+0x4c>)
 800aeda:	68f8      	ldr	r0, [r7, #12]
 800aedc:	f005 ff8e 	bl	8010dfc <tcp_err>
}
 800aee0:	bf00      	nop
 800aee2:	3710      	adds	r7, #16
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	0800aa6d 	.word	0x0800aa6d
 800aeec:	0800ac49 	.word	0x0800ac49
 800aef0:	0800ab79 	.word	0x0800ab79
 800aef4:	0800acf5 	.word	0x0800acf5

0800aef8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800aef8:	b590      	push	{r4, r7, lr}
 800aefa:	b085      	sub	sp, #20
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800af00:	2300      	movs	r3, #0
 800af02:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d006      	beq.n	800af1c <pcb_new+0x24>
 800af0e:	4b2b      	ldr	r3, [pc, #172]	@ (800afbc <pcb_new+0xc4>)
 800af10:	f240 2265 	movw	r2, #613	@ 0x265
 800af14:	492a      	ldr	r1, [pc, #168]	@ (800afc0 <pcb_new+0xc8>)
 800af16:	482b      	ldr	r0, [pc, #172]	@ (800afc4 <pcb_new+0xcc>)
 800af18:	f01d f80c 	bl	8027f34 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800af26:	2b10      	cmp	r3, #16
 800af28:	d022      	beq.n	800af70 <pcb_new+0x78>
 800af2a:	2b20      	cmp	r3, #32
 800af2c:	d133      	bne.n	800af96 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681c      	ldr	r4, [r3, #0]
 800af32:	7bfb      	ldrb	r3, [r7, #15]
 800af34:	4618      	mov	r0, r3
 800af36:	f00b f9e8 	bl	801630a <udp_new_ip_type>
 800af3a:	4603      	mov	r3, r0
 800af3c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d02a      	beq.n	800af9e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	2b22      	cmp	r3, #34	@ 0x22
 800af50:	d104      	bne.n	800af5c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	2201      	movs	r2, #1
 800af5a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	6858      	ldr	r0, [r3, #4]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	461a      	mov	r2, r3
 800af68:	4917      	ldr	r1, [pc, #92]	@ (800afc8 <pcb_new+0xd0>)
 800af6a:	f00b f955 	bl	8016218 <udp_recv>
      }
      break;
 800af6e:	e016      	b.n	800af9e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681c      	ldr	r4, [r3, #0]
 800af74:	7bfb      	ldrb	r3, [r7, #15]
 800af76:	4618      	mov	r0, r3
 800af78:	f005 fedc 	bl	8010d34 <tcp_new_ip_type>
 800af7c:	4603      	mov	r3, r0
 800af7e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d00b      	beq.n	800afa2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4618      	mov	r0, r3
 800af90:	f7ff ff8a 	bl	800aea8 <setup_tcp>
      }
      break;
 800af94:	e005      	b.n	800afa2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	22fa      	movs	r2, #250	@ 0xfa
 800af9a:	711a      	strb	r2, [r3, #4]
      return;
 800af9c:	e00a      	b.n	800afb4 <pcb_new+0xbc>
      break;
 800af9e:	bf00      	nop
 800afa0:	e000      	b.n	800afa4 <pcb_new+0xac>
      break;
 800afa2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d102      	bne.n	800afb4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	22ff      	movs	r2, #255	@ 0xff
 800afb2:	711a      	strb	r2, [r3, #4]
  }
}
 800afb4:	3714      	adds	r7, #20
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd90      	pop	{r4, r7, pc}
 800afba:	bf00      	nop
 800afbc:	08029700 	.word	0x08029700
 800afc0:	080298e4 	.word	0x080298e4
 800afc4:	08029744 	.word	0x08029744
 800afc8:	0800a971 	.word	0x0800a971

0800afcc <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2200      	movs	r2, #0
 800afdc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d102      	bne.n	800afee <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f7ff ff85 	bl	800aef8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800afee:	bf00      	nop
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
	...

0800aff8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b086      	sub	sp, #24
 800affc:	af00      	add	r7, sp, #0
 800affe:	4603      	mov	r3, r0
 800b000:	6039      	str	r1, [r7, #0]
 800b002:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800b004:	2300      	movs	r3, #0
 800b006:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800b008:	2007      	movs	r0, #7
 800b00a:	f003 f93d 	bl	800e288 <memp_malloc>
 800b00e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d101      	bne.n	800b01a <netconn_alloc+0x22>
    return NULL;
 800b016:	2300      	movs	r3, #0
 800b018:	e056      	b.n	800b0c8 <netconn_alloc+0xd0>
  }

  conn->pending_err = ERR_OK;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2200      	movs	r2, #0
 800b01e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	79fa      	ldrb	r2, [r7, #7]
 800b024:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2200      	movs	r2, #0
 800b02a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800b02c:	79fb      	ldrb	r3, [r7, #7]
 800b02e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b032:	2b10      	cmp	r3, #16
 800b034:	d004      	beq.n	800b040 <netconn_alloc+0x48>
 800b036:	2b20      	cmp	r3, #32
 800b038:	d105      	bne.n	800b046 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800b03a:	2306      	movs	r3, #6
 800b03c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800b03e:	e00a      	b.n	800b056 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800b040:	2306      	movs	r3, #6
 800b042:	617b      	str	r3, [r7, #20]
      break;
 800b044:	e007      	b.n	800b056 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800b046:	4b22      	ldr	r3, [pc, #136]	@ (800b0d0 <netconn_alloc+0xd8>)
 800b048:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800b04c:	4921      	ldr	r1, [pc, #132]	@ (800b0d4 <netconn_alloc+0xdc>)
 800b04e:	4822      	ldr	r0, [pc, #136]	@ (800b0d8 <netconn_alloc+0xe0>)
 800b050:	f01c ff70 	bl	8027f34 <iprintf>
      goto free_and_return;
 800b054:	e033      	b.n	800b0be <netconn_alloc+0xc6>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	3310      	adds	r3, #16
 800b05a:	6979      	ldr	r1, [r7, #20]
 800b05c:	4618      	mov	r0, r3
 800b05e:	f00d fd95 	bl	8018b8c <sys_mbox_new>
 800b062:	4603      	mov	r3, r0
 800b064:	2b00      	cmp	r3, #0
 800b066:	d129      	bne.n	800b0bc <netconn_alloc+0xc4>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	330c      	adds	r3, #12
 800b06c:	2100      	movs	r1, #0
 800b06e:	4618      	mov	r0, r3
 800b070:	f00d fe53 	bl	8018d1a <sys_sem_new>
 800b074:	4603      	mov	r3, r0
 800b076:	2b00      	cmp	r3, #0
 800b078:	d005      	beq.n	800b086 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	3310      	adds	r3, #16
 800b07e:	4618      	mov	r0, r3
 800b080:	f00d fda6 	bl	8018bd0 <sys_mbox_free>
    goto free_and_return;
 800b084:	e01b      	b.n	800b0be <netconn_alloc+0xc6>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	3314      	adds	r3, #20
 800b08a:	4618      	mov	r0, r3
 800b08c:	f00d fe38 	bl	8018d00 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2200      	movs	r2, #0
 800b094:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f04f 32ff 	mov.w	r2, #4294967295
 800b09c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	683a      	ldr	r2, [r7, #0]
 800b0a2:	629a      	str	r2, [r3, #40]	@ 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	625a      	str	r2, [r3, #36]	@ 0x24
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	7cfa      	ldrb	r2, [r7, #19]
 800b0b4:	f883 2020 	strb.w	r2, [r3, #32]
  return conn;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	e005      	b.n	800b0c8 <netconn_alloc+0xd0>
    goto free_and_return;
 800b0bc:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800b0be:	68f9      	ldr	r1, [r7, #12]
 800b0c0:	2007      	movs	r0, #7
 800b0c2:	f003 f957 	bl	800e374 <memp_free>
  return NULL;
 800b0c6:	2300      	movs	r3, #0
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3718      	adds	r7, #24
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	08029700 	.word	0x08029700
 800b0d4:	08029904 	.word	0x08029904
 800b0d8:	08029744 	.word	0x08029744

0800b0dc <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b082      	sub	sp, #8
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d006      	beq.n	800b0fa <netconn_free+0x1e>
 800b0ec:	4b1b      	ldr	r3, [pc, #108]	@ (800b15c <netconn_free+0x80>)
 800b0ee:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800b0f2:	491b      	ldr	r1, [pc, #108]	@ (800b160 <netconn_free+0x84>)
 800b0f4:	481b      	ldr	r0, [pc, #108]	@ (800b164 <netconn_free+0x88>)
 800b0f6:	f01c ff1d 	bl	8027f34 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	3310      	adds	r3, #16
 800b0fe:	4618      	mov	r0, r3
 800b100:	f00d fded 	bl	8018cde <sys_mbox_valid>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	d006      	beq.n	800b118 <netconn_free+0x3c>
 800b10a:	4b14      	ldr	r3, [pc, #80]	@ (800b15c <netconn_free+0x80>)
 800b10c:	f240 3223 	movw	r2, #803	@ 0x323
 800b110:	4915      	ldr	r1, [pc, #84]	@ (800b168 <netconn_free+0x8c>)
 800b112:	4814      	ldr	r0, [pc, #80]	@ (800b164 <netconn_free+0x88>)
 800b114:	f01c ff0e 	bl	8027f34 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	3314      	adds	r3, #20
 800b11c:	4618      	mov	r0, r3
 800b11e:	f00d fdde 	bl	8018cde <sys_mbox_valid>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d006      	beq.n	800b136 <netconn_free+0x5a>
 800b128:	4b0c      	ldr	r3, [pc, #48]	@ (800b15c <netconn_free+0x80>)
 800b12a:	f240 3226 	movw	r2, #806	@ 0x326
 800b12e:	490f      	ldr	r1, [pc, #60]	@ (800b16c <netconn_free+0x90>)
 800b130:	480c      	ldr	r0, [pc, #48]	@ (800b164 <netconn_free+0x88>)
 800b132:	f01c feff 	bl	8027f34 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	330c      	adds	r3, #12
 800b13a:	4618      	mov	r0, r3
 800b13c:	f00d fe53 	bl	8018de6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	330c      	adds	r3, #12
 800b144:	4618      	mov	r0, r3
 800b146:	f00d fe6c 	bl	8018e22 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800b14a:	6879      	ldr	r1, [r7, #4]
 800b14c:	2007      	movs	r0, #7
 800b14e:	f003 f911 	bl	800e374 <memp_free>
}
 800b152:	bf00      	nop
 800b154:	3708      	adds	r7, #8
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	08029700 	.word	0x08029700
 800b160:	0802992c 	.word	0x0802992c
 800b164:	08029744 	.word	0x08029744
 800b168:	0802995c 	.word	0x0802995c
 800b16c:	08029998 	.word	0x08029998

0800b170 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b086      	sub	sp, #24
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	3310      	adds	r3, #16
 800b17c:	4618      	mov	r0, r3
 800b17e:	f00d fdae 	bl	8018cde <sys_mbox_valid>
 800b182:	4603      	mov	r3, r0
 800b184:	2b00      	cmp	r3, #0
 800b186:	d02f      	beq.n	800b1e8 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b188:	e018      	b.n	800b1bc <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b192:	2b10      	cmp	r3, #16
 800b194:	d10e      	bne.n	800b1b4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	f107 020f 	add.w	r2, r7, #15
 800b19c:	4611      	mov	r1, r2
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7ff fbac 	bl	800a8fc <lwip_netconn_is_err_msg>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d108      	bne.n	800b1bc <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f003 ffef 	bl	800f190 <pbuf_free>
 800b1b2:	e003      	b.n	800b1bc <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f000 fef0 	bl	800bf9c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	3310      	adds	r3, #16
 800b1c0:	f107 0210 	add.w	r2, r7, #16
 800b1c4:	4611      	mov	r1, r2
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f00d fd6d 	bl	8018ca6 <sys_arch_mbox_tryfetch>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1d2:	d1da      	bne.n	800b18a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	3310      	adds	r3, #16
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f00d fcf9 	bl	8018bd0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	3310      	adds	r3, #16
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f00d fd8c 	bl	8018d00 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	3314      	adds	r3, #20
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f00d fd76 	bl	8018cde <sys_mbox_valid>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d034      	beq.n	800b262 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b1f8:	e01d      	b.n	800b236 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	f107 020e 	add.w	r2, r7, #14
 800b200:	4611      	mov	r1, r2
 800b202:	4618      	mov	r0, r3
 800b204:	f7ff fb7a 	bl	800a8fc <lwip_netconn_is_err_msg>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d113      	bne.n	800b236 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800b212:	6978      	ldr	r0, [r7, #20]
 800b214:	f7ff ffac 	bl	800b170 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d007      	beq.n	800b230 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	4618      	mov	r0, r3
 800b226:	f004 fdb3 	bl	800fd90 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	2200      	movs	r2, #0
 800b22e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800b230:	6978      	ldr	r0, [r7, #20]
 800b232:	f7ff ff53 	bl	800b0dc <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	3314      	adds	r3, #20
 800b23a:	f107 0210 	add.w	r2, r7, #16
 800b23e:	4611      	mov	r1, r2
 800b240:	4618      	mov	r0, r3
 800b242:	f00d fd30 	bl	8018ca6 <sys_arch_mbox_tryfetch>
 800b246:	4603      	mov	r3, r0
 800b248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b24c:	d1d5      	bne.n	800b1fa <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	3314      	adds	r3, #20
 800b252:	4618      	mov	r0, r3
 800b254:	f00d fcbc 	bl	8018bd0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	3314      	adds	r3, #20
 800b25c:	4618      	mov	r0, r3
 800b25e:	f00d fd4f 	bl	8018d00 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800b262:	bf00      	nop
 800b264:	3718      	adds	r7, #24
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
	...

0800b26c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b086      	sub	sp, #24
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	460b      	mov	r3, r1
 800b276:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800b278:	2300      	movs	r3, #0
 800b27a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d106      	bne.n	800b290 <lwip_netconn_do_close_internal+0x24>
 800b282:	4b87      	ldr	r3, [pc, #540]	@ (800b4a0 <lwip_netconn_do_close_internal+0x234>)
 800b284:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800b288:	4986      	ldr	r1, [pc, #536]	@ (800b4a4 <lwip_netconn_do_close_internal+0x238>)
 800b28a:	4887      	ldr	r0, [pc, #540]	@ (800b4a8 <lwip_netconn_do_close_internal+0x23c>)
 800b28c:	f01c fe52 	bl	8027f34 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	781b      	ldrb	r3, [r3, #0]
 800b294:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b298:	2b10      	cmp	r3, #16
 800b29a:	d006      	beq.n	800b2aa <lwip_netconn_do_close_internal+0x3e>
 800b29c:	4b80      	ldr	r3, [pc, #512]	@ (800b4a0 <lwip_netconn_do_close_internal+0x234>)
 800b29e:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800b2a2:	4982      	ldr	r1, [pc, #520]	@ (800b4ac <lwip_netconn_do_close_internal+0x240>)
 800b2a4:	4880      	ldr	r0, [pc, #512]	@ (800b4a8 <lwip_netconn_do_close_internal+0x23c>)
 800b2a6:	f01c fe45 	bl	8027f34 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	785b      	ldrb	r3, [r3, #1]
 800b2ae:	2b04      	cmp	r3, #4
 800b2b0:	d006      	beq.n	800b2c0 <lwip_netconn_do_close_internal+0x54>
 800b2b2:	4b7b      	ldr	r3, [pc, #492]	@ (800b4a0 <lwip_netconn_do_close_internal+0x234>)
 800b2b4:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800b2b8:	497d      	ldr	r1, [pc, #500]	@ (800b4b0 <lwip_netconn_do_close_internal+0x244>)
 800b2ba:	487b      	ldr	r0, [pc, #492]	@ (800b4a8 <lwip_netconn_do_close_internal+0x23c>)
 800b2bc:	f01c fe3a 	bl	8027f34 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d106      	bne.n	800b2d6 <lwip_netconn_do_close_internal+0x6a>
 800b2c8:	4b75      	ldr	r3, [pc, #468]	@ (800b4a0 <lwip_netconn_do_close_internal+0x234>)
 800b2ca:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800b2ce:	4979      	ldr	r1, [pc, #484]	@ (800b4b4 <lwip_netconn_do_close_internal+0x248>)
 800b2d0:	4875      	ldr	r0, [pc, #468]	@ (800b4a8 <lwip_netconn_do_close_internal+0x23c>)
 800b2d2:	f01c fe2f 	bl	8027f34 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d106      	bne.n	800b2ec <lwip_netconn_do_close_internal+0x80>
 800b2de:	4b70      	ldr	r3, [pc, #448]	@ (800b4a0 <lwip_netconn_do_close_internal+0x234>)
 800b2e0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800b2e4:	4974      	ldr	r1, [pc, #464]	@ (800b4b8 <lwip_netconn_do_close_internal+0x24c>)
 800b2e6:	4870      	ldr	r0, [pc, #448]	@ (800b4a8 <lwip_netconn_do_close_internal+0x23c>)
 800b2e8:	f01c fe24 	bl	8027f34 <iprintf>

  tpcb = conn->pcb.tcp;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2f6:	7a1b      	ldrb	r3, [r3, #8]
 800b2f8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800b2fa:	7bfb      	ldrb	r3, [r7, #15]
 800b2fc:	f003 0301 	and.w	r3, r3, #1
 800b300:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800b302:	7bfb      	ldrb	r3, [r7, #15]
 800b304:	f003 0302 	and.w	r3, r3, #2
 800b308:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800b30a:	7bfb      	ldrb	r3, [r7, #15]
 800b30c:	2b03      	cmp	r3, #3
 800b30e:	d102      	bne.n	800b316 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800b310:	2301      	movs	r3, #1
 800b312:	75bb      	strb	r3, [r7, #22]
 800b314:	e01f      	b.n	800b356 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800b316:	7bbb      	ldrb	r3, [r7, #14]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d00e      	beq.n	800b33a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800b320:	2b05      	cmp	r3, #5
 800b322:	d007      	beq.n	800b334 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800b328:	2b06      	cmp	r3, #6
 800b32a:	d003      	beq.n	800b334 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800b330:	2b08      	cmp	r3, #8
 800b332:	d102      	bne.n	800b33a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800b334:	2301      	movs	r3, #1
 800b336:	75bb      	strb	r3, [r7, #22]
 800b338:	e00d      	b.n	800b356 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800b33a:	7b7b      	ldrb	r3, [r7, #13]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d008      	beq.n	800b352 <lwip_netconn_do_close_internal+0xe6>
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	8b5b      	ldrh	r3, [r3, #26]
 800b344:	f003 0310 	and.w	r3, r3, #16
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d002      	beq.n	800b352 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800b34c:	2301      	movs	r3, #1
 800b34e:	75bb      	strb	r3, [r7, #22]
 800b350:	e001      	b.n	800b356 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800b352:	2300      	movs	r3, #0
 800b354:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800b356:	7dbb      	ldrb	r3, [r7, #22]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d003      	beq.n	800b364 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800b35c:	2100      	movs	r1, #0
 800b35e:	6938      	ldr	r0, [r7, #16]
 800b360:	f005 fcf6 	bl	8010d50 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	7d1b      	ldrb	r3, [r3, #20]
 800b368:	2b01      	cmp	r3, #1
 800b36a:	d104      	bne.n	800b376 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800b36c:	2100      	movs	r1, #0
 800b36e:	6938      	ldr	r0, [r7, #16]
 800b370:	f005 fd66 	bl	8010e40 <tcp_accept>
 800b374:	e01d      	b.n	800b3b2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800b376:	7bbb      	ldrb	r3, [r7, #14]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d007      	beq.n	800b38c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800b37c:	2100      	movs	r1, #0
 800b37e:	6938      	ldr	r0, [r7, #16]
 800b380:	f005 fcf8 	bl	8010d74 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800b384:	2100      	movs	r1, #0
 800b386:	6938      	ldr	r0, [r7, #16]
 800b388:	f005 fd5a 	bl	8010e40 <tcp_accept>
    }
    if (shut_tx) {
 800b38c:	7b7b      	ldrb	r3, [r7, #13]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d003      	beq.n	800b39a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800b392:	2100      	movs	r1, #0
 800b394:	6938      	ldr	r0, [r7, #16]
 800b396:	f005 fd0f 	bl	8010db8 <tcp_sent>
    }
    if (shut_close) {
 800b39a:	7dbb      	ldrb	r3, [r7, #22]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d008      	beq.n	800b3b2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	2100      	movs	r1, #0
 800b3a4:	6938      	ldr	r0, [r7, #16]
 800b3a6:	f005 fd63 	bl	8010e70 <tcp_poll>
      tcp_err(tpcb, NULL);
 800b3aa:	2100      	movs	r1, #0
 800b3ac:	6938      	ldr	r0, [r7, #16]
 800b3ae:	f005 fd25 	bl	8010dfc <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800b3b2:	7dbb      	ldrb	r3, [r7, #22]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d005      	beq.n	800b3c4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800b3b8:	6938      	ldr	r0, [r7, #16]
 800b3ba:	f004 fba3 	bl	800fb04 <tcp_close>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	75fb      	strb	r3, [r7, #23]
 800b3c2:	e007      	b.n	800b3d4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800b3c4:	7bbb      	ldrb	r3, [r7, #14]
 800b3c6:	7b7a      	ldrb	r2, [r7, #13]
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	6938      	ldr	r0, [r7, #16]
 800b3cc:	f004 fbc6 	bl	800fb5c <tcp_shutdown>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800b3d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d102      	bne.n	800b3e2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	757b      	strb	r3, [r7, #21]
 800b3e0:	e016      	b.n	800b410 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800b3e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ea:	d10f      	bne.n	800b40c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3f0:	7a5b      	ldrb	r3, [r3, #9]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d10c      	bne.n	800b410 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800b3fa:	7dbb      	ldrb	r3, [r7, #22]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d007      	beq.n	800b410 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800b400:	6938      	ldr	r0, [r7, #16]
 800b402:	f004 fcc5 	bl	800fd90 <tcp_abort>
          err = ERR_OK;
 800b406:	2300      	movs	r3, #0
 800b408:	75fb      	strb	r3, [r7, #23]
 800b40a:	e001      	b.n	800b410 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800b40c:	2301      	movs	r3, #1
 800b40e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800b410:	7d7b      	ldrb	r3, [r7, #21]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d052      	beq.n	800b4bc <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	330c      	adds	r3, #12
 800b41e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b424:	7dfa      	ldrb	r2, [r7, #23]
 800b426:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2200      	movs	r2, #0
 800b42c:	625a      	str	r2, [r3, #36]	@ 0x24
    conn->state = NETCONN_NONE;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2200      	movs	r2, #0
 800b432:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800b434:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d129      	bne.n	800b490 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800b43c:	7dbb      	ldrb	r3, [r7, #22]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d00c      	beq.n	800b45c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2200      	movs	r2, #0
 800b446:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d005      	beq.n	800b45c <lwip_netconn_do_close_internal+0x1f0>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b454:	2200      	movs	r2, #0
 800b456:	2104      	movs	r1, #4
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	4798      	blx	r3
      }
      if (shut_rx) {
 800b45c:	7bbb      	ldrb	r3, [r7, #14]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d009      	beq.n	800b476 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b466:	2b00      	cmp	r3, #0
 800b468:	d005      	beq.n	800b476 <lwip_netconn_do_close_internal+0x20a>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b46e:	2200      	movs	r2, #0
 800b470:	2100      	movs	r1, #0
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	4798      	blx	r3
      }
      if (shut_tx) {
 800b476:	7b7b      	ldrb	r3, [r7, #13]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d009      	beq.n	800b490 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b480:	2b00      	cmp	r3, #0
 800b482:	d005      	beq.n	800b490 <lwip_netconn_do_close_internal+0x224>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b488:	2200      	movs	r2, #0
 800b48a:	2102      	movs	r1, #2
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b490:	78fb      	ldrb	r3, [r7, #3]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d002      	beq.n	800b49c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800b496:	68b8      	ldr	r0, [r7, #8]
 800b498:	f00d fc98 	bl	8018dcc <sys_sem_signal>
    }
    return ERR_OK;
 800b49c:	2300      	movs	r3, #0
 800b49e:	e03c      	b.n	800b51a <lwip_netconn_do_close_internal+0x2ae>
 800b4a0:	08029700 	.word	0x08029700
 800b4a4:	080299d4 	.word	0x080299d4
 800b4a8:	08029744 	.word	0x08029744
 800b4ac:	080299e4 	.word	0x080299e4
 800b4b0:	08029a04 	.word	0x08029a04
 800b4b4:	08029a28 	.word	0x08029a28
 800b4b8:	08029868 	.word	0x08029868
  }
  if (!close_finished) {
 800b4bc:	7d7b      	ldrb	r3, [r7, #21]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d11e      	bne.n	800b500 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	7d1b      	ldrb	r3, [r3, #20]
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d106      	bne.n	800b4d8 <lwip_netconn_do_close_internal+0x26c>
 800b4ca:	4b16      	ldr	r3, [pc, #88]	@ (800b524 <lwip_netconn_do_close_internal+0x2b8>)
 800b4cc:	f240 4241 	movw	r2, #1089	@ 0x441
 800b4d0:	4915      	ldr	r1, [pc, #84]	@ (800b528 <lwip_netconn_do_close_internal+0x2bc>)
 800b4d2:	4816      	ldr	r0, [pc, #88]	@ (800b52c <lwip_netconn_do_close_internal+0x2c0>)
 800b4d4:	f01c fd2e 	bl	8027f34 <iprintf>
    if (shut_tx) {
 800b4d8:	7b7b      	ldrb	r3, [r7, #13]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d003      	beq.n	800b4e6 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800b4de:	4914      	ldr	r1, [pc, #80]	@ (800b530 <lwip_netconn_do_close_internal+0x2c4>)
 800b4e0:	6938      	ldr	r0, [r7, #16]
 800b4e2:	f005 fc69 	bl	8010db8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	4912      	ldr	r1, [pc, #72]	@ (800b534 <lwip_netconn_do_close_internal+0x2c8>)
 800b4ea:	6938      	ldr	r0, [r7, #16]
 800b4ec:	f005 fcc0 	bl	8010e70 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800b4f0:	4911      	ldr	r1, [pc, #68]	@ (800b538 <lwip_netconn_do_close_internal+0x2cc>)
 800b4f2:	6938      	ldr	r0, [r7, #16]
 800b4f4:	f005 fc82 	bl	8010dfc <tcp_err>
    tcp_arg(tpcb, conn);
 800b4f8:	6879      	ldr	r1, [r7, #4]
 800b4fa:	6938      	ldr	r0, [r7, #16]
 800b4fc:	f005 fc28 	bl	8010d50 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800b500:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d106      	bne.n	800b516 <lwip_netconn_do_close_internal+0x2aa>
 800b508:	4b06      	ldr	r3, [pc, #24]	@ (800b524 <lwip_netconn_do_close_internal+0x2b8>)
 800b50a:	f240 424d 	movw	r2, #1101	@ 0x44d
 800b50e:	490b      	ldr	r1, [pc, #44]	@ (800b53c <lwip_netconn_do_close_internal+0x2d0>)
 800b510:	4806      	ldr	r0, [pc, #24]	@ (800b52c <lwip_netconn_do_close_internal+0x2c0>)
 800b512:	f01c fd0f 	bl	8027f34 <iprintf>
  return err;
 800b516:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3718      	adds	r7, #24
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	08029700 	.word	0x08029700
 800b528:	08029a3c 	.word	0x08029a3c
 800b52c:	08029744 	.word	0x08029744
 800b530:	0800ac49 	.word	0x0800ac49
 800b534:	0800ab79 	.word	0x0800ab79
 800b538:	0800acf5 	.word	0x0800acf5
 800b53c:	08029a60 	.word	0x08029a60

0800b540 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	785b      	ldrb	r3, [r3, #1]
 800b552:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800b554:	7afb      	ldrb	r3, [r7, #11]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d00d      	beq.n	800b576 <lwip_netconn_do_delconn+0x36>
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b564:	2b10      	cmp	r3, #16
 800b566:	d006      	beq.n	800b576 <lwip_netconn_do_delconn+0x36>
 800b568:	4b61      	ldr	r3, [pc, #388]	@ (800b6f0 <lwip_netconn_do_delconn+0x1b0>)
 800b56a:	f240 425e 	movw	r2, #1118	@ 0x45e
 800b56e:	4961      	ldr	r1, [pc, #388]	@ (800b6f4 <lwip_netconn_do_delconn+0x1b4>)
 800b570:	4861      	ldr	r0, [pc, #388]	@ (800b6f8 <lwip_netconn_do_delconn+0x1b8>)
 800b572:	f01c fcdf 	bl	8027f34 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800b576:	7afb      	ldrb	r3, [r7, #11]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d005      	beq.n	800b588 <lwip_netconn_do_delconn+0x48>
 800b57c:	7afb      	ldrb	r3, [r7, #11]
 800b57e:	2b02      	cmp	r3, #2
 800b580:	d002      	beq.n	800b588 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800b582:	7afb      	ldrb	r3, [r7, #11]
 800b584:	2b03      	cmp	r3, #3
 800b586:	d10a      	bne.n	800b59e <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 800b588:	7afb      	ldrb	r3, [r7, #11]
 800b58a:	2b03      	cmp	r3, #3
 800b58c:	d10b      	bne.n	800b5a6 <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b596:	f003 0304 	and.w	r3, r3, #4
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d103      	bne.n	800b5a6 <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	22fb      	movs	r2, #251	@ 0xfb
 800b5a2:	711a      	strb	r2, [r3, #4]
 800b5a4:	e098      	b.n	800b6d8 <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800b5a6:	7afb      	ldrb	r3, [r7, #11]
 800b5a8:	2b03      	cmp	r3, #3
 800b5aa:	d10e      	bne.n	800b5ca <lwip_netconn_do_delconn+0x8a>
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b5b4:	f003 0304 	and.w	r3, r3, #4
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d106      	bne.n	800b5ca <lwip_netconn_do_delconn+0x8a>
 800b5bc:	4b4c      	ldr	r3, [pc, #304]	@ (800b6f0 <lwip_netconn_do_delconn+0x1b0>)
 800b5be:	f240 427a 	movw	r2, #1146	@ 0x47a
 800b5c2:	494e      	ldr	r1, [pc, #312]	@ (800b6fc <lwip_netconn_do_delconn+0x1bc>)
 800b5c4:	484c      	ldr	r0, [pc, #304]	@ (800b6f8 <lwip_netconn_do_delconn+0x1b8>)
 800b5c6:	f01c fcb5 	bl	8027f34 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7ff fdcb 	bl	800b170 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d05f      	beq.n	800b6a4 <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	781b      	ldrb	r3, [r3, #0]
 800b5ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b5ee:	2b10      	cmp	r3, #16
 800b5f0:	d00d      	beq.n	800b60e <lwip_netconn_do_delconn+0xce>
 800b5f2:	2b20      	cmp	r3, #32
 800b5f4:	d151      	bne.n	800b69a <lwip_netconn_do_delconn+0x15a>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	4618      	mov	r0, r3
 800b608:	f00a fe26 	bl	8016258 <udp_remove>
          break;
 800b60c:	e046      	b.n	800b69c <lwip_netconn_do_delconn+0x15c>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b614:	2b00      	cmp	r3, #0
 800b616:	d006      	beq.n	800b626 <lwip_netconn_do_delconn+0xe6>
 800b618:	4b35      	ldr	r3, [pc, #212]	@ (800b6f0 <lwip_netconn_do_delconn+0x1b0>)
 800b61a:	f240 4294 	movw	r2, #1172	@ 0x494
 800b61e:	4938      	ldr	r1, [pc, #224]	@ (800b700 <lwip_netconn_do_delconn+0x1c0>)
 800b620:	4835      	ldr	r0, [pc, #212]	@ (800b6f8 <lwip_netconn_do_delconn+0x1b8>)
 800b622:	f01c fc87 	bl	8027f34 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2204      	movs	r2, #4
 800b62c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2203      	movs	r2, #3
 800b632:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	68fa      	ldr	r2, [r7, #12]
 800b63a:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2100      	movs	r1, #0
 800b642:	4618      	mov	r0, r3
 800b644:	f7ff fe12 	bl	800b26c <lwip_netconn_do_close_internal>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d04b      	beq.n	800b6e6 <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	785b      	ldrb	r3, [r3, #1]
 800b654:	2b04      	cmp	r3, #4
 800b656:	d006      	beq.n	800b666 <lwip_netconn_do_delconn+0x126>
 800b658:	4b25      	ldr	r3, [pc, #148]	@ (800b6f0 <lwip_netconn_do_delconn+0x1b0>)
 800b65a:	f240 429a 	movw	r2, #1178	@ 0x49a
 800b65e:	4929      	ldr	r1, [pc, #164]	@ (800b704 <lwip_netconn_do_delconn+0x1c4>)
 800b660:	4825      	ldr	r0, [pc, #148]	@ (800b6f8 <lwip_netconn_do_delconn+0x1b8>)
 800b662:	f01c fc67 	bl	8027f34 <iprintf>
            UNLOCK_TCPIP_CORE();
 800b666:	4828      	ldr	r0, [pc, #160]	@ (800b708 <lwip_netconn_do_delconn+0x1c8>)
 800b668:	f00d fc21 	bl	8018eae <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	330c      	adds	r3, #12
 800b672:	2100      	movs	r1, #0
 800b674:	4618      	mov	r0, r3
 800b676:	f00d fb78 	bl	8018d6a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800b67a:	4823      	ldr	r0, [pc, #140]	@ (800b708 <lwip_netconn_do_delconn+0x1c8>)
 800b67c:	f00d fc08 	bl	8018e90 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	785b      	ldrb	r3, [r3, #1]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d02d      	beq.n	800b6e6 <lwip_netconn_do_delconn+0x1a6>
 800b68a:	4b19      	ldr	r3, [pc, #100]	@ (800b6f0 <lwip_netconn_do_delconn+0x1b0>)
 800b68c:	f240 429e 	movw	r2, #1182	@ 0x49e
 800b690:	491c      	ldr	r1, [pc, #112]	@ (800b704 <lwip_netconn_do_delconn+0x1c4>)
 800b692:	4819      	ldr	r0, [pc, #100]	@ (800b6f8 <lwip_netconn_do_delconn+0x1b8>)
 800b694:	f01c fc4e 	bl	8027f34 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800b698:	e025      	b.n	800b6e6 <lwip_netconn_do_delconn+0x1a6>
#endif /* LWIP_TCP */
        default:
          break;
 800b69a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d007      	beq.n	800b6be <lwip_netconn_do_delconn+0x17e>
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6b4:	68fa      	ldr	r2, [r7, #12]
 800b6b6:	6810      	ldr	r0, [r2, #0]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	2100      	movs	r1, #0
 800b6bc:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d007      	beq.n	800b6d8 <lwip_netconn_do_delconn+0x198>
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ce:	68fa      	ldr	r2, [r7, #12]
 800b6d0:	6810      	ldr	r0, [r2, #0]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	2102      	movs	r1, #2
 800b6d6:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	330c      	adds	r3, #12
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f00d fb8e 	bl	8018e00 <sys_sem_valid>
 800b6e4:	e000      	b.n	800b6e8 <lwip_netconn_do_delconn+0x1a8>
          return;
 800b6e6:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800b6e8:	3710      	adds	r7, #16
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	08029700 	.word	0x08029700
 800b6f4:	08029a70 	.word	0x08029a70
 800b6f8:	08029744 	.word	0x08029744
 800b6fc:	08029a84 	.word	0x08029a84
 800b700:	08029aa4 	.word	0x08029aa4
 800b704:	08029ac0 	.word	0x08029ac0
 800b708:	2000d090 	.word	0x2000d090

0800b70c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d025      	beq.n	800b76e <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b72c:	2b10      	cmp	r3, #16
 800b72e:	d00e      	beq.n	800b74e <lwip_netconn_do_bind+0x42>
 800b730:	2b20      	cmp	r3, #32
 800b732:	d119      	bne.n	800b768 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	6858      	ldr	r0, [r3, #4]
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	6899      	ldr	r1, [r3, #8]
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	899b      	ldrh	r3, [r3, #12]
 800b742:	461a      	mov	r2, r3
 800b744:	f00a fcc6 	bl	80160d4 <udp_bind>
 800b748:	4603      	mov	r3, r0
 800b74a:	73fb      	strb	r3, [r7, #15]
        break;
 800b74c:	e011      	b.n	800b772 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	6858      	ldr	r0, [r3, #4]
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	6899      	ldr	r1, [r3, #8]
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	899b      	ldrh	r3, [r3, #12]
 800b75c:	461a      	mov	r2, r3
 800b75e:	f004 fb23 	bl	800fda8 <tcp_bind>
 800b762:	4603      	mov	r3, r0
 800b764:	73fb      	strb	r3, [r7, #15]
        break;
 800b766:	e004      	b.n	800b772 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800b768:	23fa      	movs	r3, #250	@ 0xfa
 800b76a:	73fb      	strb	r3, [r7, #15]
        break;
 800b76c:	e001      	b.n	800b772 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800b76e:	23fa      	movs	r3, #250	@ 0xfa
 800b770:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	7bfa      	ldrb	r2, [r7, #15]
 800b776:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b778:	bf00      	nop
 800b77a:	3710      	adds	r7, #16
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b084      	sub	sp, #16
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4618      	mov	r0, r3
 800b792:	f7ff f861 	bl	800a858 <netconn_err>
 800b796:	4603      	mov	r3, r0
 800b798:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b79a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d134      	bne.n	800b80c <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d02d      	beq.n	800b808 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b7b6:	2b20      	cmp	r3, #32
 800b7b8:	d123      	bne.n	800b802 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	689b      	ldr	r3, [r3, #8]
 800b7be:	689b      	ldr	r3, [r3, #8]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d10c      	bne.n	800b7de <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	685a      	ldr	r2, [r3, #4]
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	689b      	ldr	r3, [r3, #8]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	4610      	mov	r0, r2
 800b7d4:	f00a fa94 	bl	8015d00 <udp_send>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800b7dc:	e016      	b.n	800b80c <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	6858      	ldr	r0, [r3, #4]
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	689b      	ldr	r3, [r3, #8]
 800b7e8:	6819      	ldr	r1, [r3, #0]
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	689b      	ldr	r3, [r3, #8]
 800b7ee:	f103 0208 	add.w	r2, r3, #8
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	899b      	ldrh	r3, [r3, #12]
 800b7f8:	f00a fab6 	bl	8015d68 <udp_sendto>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	73fb      	strb	r3, [r7, #15]
          break;
 800b800:	e004      	b.n	800b80c <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800b802:	23f5      	movs	r3, #245	@ 0xf5
 800b804:	73fb      	strb	r3, [r7, #15]
          break;
 800b806:	e001      	b.n	800b80c <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800b808:	23f5      	movs	r3, #245	@ 0xf5
 800b80a:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	7bfa      	ldrb	r2, [r7, #15]
 800b810:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b812:	bf00      	nop
 800b814:	3710      	adds	r7, #16
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}

0800b81a <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800b81a:	b580      	push	{r7, lr}
 800b81c:	b086      	sub	sp, #24
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	2200      	movs	r2, #0
 800b82a:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d022      	beq.n	800b87c <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	781b      	ldrb	r3, [r3, #0]
 800b83c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b840:	2b10      	cmp	r3, #16
 800b842:	d11b      	bne.n	800b87c <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	689b      	ldr	r3, [r3, #8]
 800b848:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b850:	d202      	bcs.n	800b858 <lwip_netconn_do_recv+0x3e>
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	b29b      	uxth	r3, r3
 800b856:	e001      	b.n	800b85c <lwip_netconn_do_recv+0x42>
 800b858:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b85c:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	89fa      	ldrh	r2, [r7, #14]
 800b866:	4611      	mov	r1, r2
 800b868:	4618      	mov	r0, r3
 800b86a:	f004 fba9 	bl	800ffc0 <tcp_recved>
        remaining -= recved;
 800b86e:	89fb      	ldrh	r3, [r7, #14]
 800b870:	697a      	ldr	r2, [r7, #20]
 800b872:	1ad3      	subs	r3, r2, r3
 800b874:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d1e6      	bne.n	800b84a <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b87c:	bf00      	nop
 800b87e:	3718      	adds	r7, #24
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b088      	sub	sp, #32
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	460b      	mov	r3, r1
 800b88e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800b890:	2300      	movs	r3, #0
 800b892:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d106      	bne.n	800b8a8 <lwip_netconn_do_writemore+0x24>
 800b89a:	4b61      	ldr	r3, [pc, #388]	@ (800ba20 <lwip_netconn_do_writemore+0x19c>)
 800b89c:	f240 6273 	movw	r2, #1651	@ 0x673
 800b8a0:	4960      	ldr	r1, [pc, #384]	@ (800ba24 <lwip_netconn_do_writemore+0x1a0>)
 800b8a2:	4861      	ldr	r0, [pc, #388]	@ (800ba28 <lwip_netconn_do_writemore+0x1a4>)
 800b8a4:	f01c fb46 	bl	8027f34 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	785b      	ldrb	r3, [r3, #1]
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d006      	beq.n	800b8be <lwip_netconn_do_writemore+0x3a>
 800b8b0:	4b5b      	ldr	r3, [pc, #364]	@ (800ba20 <lwip_netconn_do_writemore+0x19c>)
 800b8b2:	f240 6274 	movw	r2, #1652	@ 0x674
 800b8b6:	495d      	ldr	r1, [pc, #372]	@ (800ba2c <lwip_netconn_do_writemore+0x1a8>)
 800b8b8:	485b      	ldr	r0, [pc, #364]	@ (800ba28 <lwip_netconn_do_writemore+0x1a4>)
 800b8ba:	f01c fb3b 	bl	8027f34 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d106      	bne.n	800b8d4 <lwip_netconn_do_writemore+0x50>
 800b8c6:	4b56      	ldr	r3, [pc, #344]	@ (800ba20 <lwip_netconn_do_writemore+0x19c>)
 800b8c8:	f240 6275 	movw	r2, #1653	@ 0x675
 800b8cc:	4958      	ldr	r1, [pc, #352]	@ (800ba30 <lwip_netconn_do_writemore+0x1ac>)
 800b8ce:	4856      	ldr	r0, [pc, #344]	@ (800ba28 <lwip_netconn_do_writemore+0x1a4>)
 800b8d0:	f01c fb30 	bl	8027f34 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d106      	bne.n	800b8ea <lwip_netconn_do_writemore+0x66>
 800b8dc:	4b50      	ldr	r3, [pc, #320]	@ (800ba20 <lwip_netconn_do_writemore+0x19c>)
 800b8de:	f240 6276 	movw	r2, #1654	@ 0x676
 800b8e2:	4954      	ldr	r1, [pc, #336]	@ (800ba34 <lwip_netconn_do_writemore+0x1b0>)
 800b8e4:	4850      	ldr	r0, [pc, #320]	@ (800ba28 <lwip_netconn_do_writemore+0x1a4>)
 800b8e6:	f01c fb25 	bl	8027f34 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8ee:	699a      	ldr	r2, [r3, #24]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8f4:	695b      	ldr	r3, [r3, #20]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d306      	bcc.n	800b908 <lwip_netconn_do_writemore+0x84>
 800b8fa:	4b49      	ldr	r3, [pc, #292]	@ (800ba20 <lwip_netconn_do_writemore+0x19c>)
 800b8fc:	f240 6277 	movw	r2, #1655	@ 0x677
 800b900:	494d      	ldr	r1, [pc, #308]	@ (800ba38 <lwip_netconn_do_writemore+0x1b4>)
 800b902:	4849      	ldr	r0, [pc, #292]	@ (800ba28 <lwip_netconn_do_writemore+0x1a4>)
 800b904:	f01c fb16 	bl	8027f34 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b90c:	899b      	ldrh	r3, [r3, #12]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d106      	bne.n	800b920 <lwip_netconn_do_writemore+0x9c>
 800b912:	4b43      	ldr	r3, [pc, #268]	@ (800ba20 <lwip_netconn_do_writemore+0x19c>)
 800b914:	f240 6279 	movw	r2, #1657	@ 0x679
 800b918:	4948      	ldr	r1, [pc, #288]	@ (800ba3c <lwip_netconn_do_writemore+0x1b8>)
 800b91a:	4843      	ldr	r0, [pc, #268]	@ (800ba28 <lwip_netconn_do_writemore+0x1a4>)
 800b91c:	f01c fb0a 	bl	8027f34 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b924:	7f1b      	ldrb	r3, [r3, #28]
 800b926:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b92e:	f003 0302 	and.w	r3, r3, #2
 800b932:	2b00      	cmp	r3, #0
 800b934:	d104      	bne.n	800b940 <lwip_netconn_do_writemore+0xbc>
 800b936:	7ebb      	ldrb	r3, [r7, #26]
 800b938:	f003 0304 	and.w	r3, r3, #4
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d001      	beq.n	800b944 <lwip_netconn_do_writemore+0xc0>
 800b940:	2301      	movs	r3, #1
 800b942:	e000      	b.n	800b946 <lwip_netconn_do_writemore+0xc2>
 800b944:	2300      	movs	r3, #0
 800b946:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b94c:	689b      	ldr	r3, [r3, #8]
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b954:	691b      	ldr	r3, [r3, #16]
 800b956:	4413      	add	r3, r2
 800b958:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b95e:	689b      	ldr	r3, [r3, #8]
 800b960:	685a      	ldr	r2, [r3, #4]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b966:	691b      	ldr	r3, [r3, #16]
 800b968:	1ad3      	subs	r3, r2, r3
 800b96a:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b972:	d307      	bcc.n	800b984 <lwip_netconn_do_writemore+0x100>
        len = 0xffff;
 800b974:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b978:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b97a:	7ebb      	ldrb	r3, [r7, #26]
 800b97c:	f043 0302 	orr.w	r3, r3, #2
 800b980:	76bb      	strb	r3, [r7, #26]
 800b982:	e001      	b.n	800b988 <lwip_netconn_do_writemore+0x104>
      } else {
        len = (u16_t)diff;
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b990:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800b992:	89fa      	ldrh	r2, [r7, #14]
 800b994:	8bbb      	ldrh	r3, [r7, #28]
 800b996:	429a      	cmp	r2, r3
 800b998:	d216      	bcs.n	800b9c8 <lwip_netconn_do_writemore+0x144>
        /* don't try to write more than sendbuf */
        len = available;
 800b99a:	89fb      	ldrh	r3, [r7, #14]
 800b99c:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800b99e:	7e3b      	ldrb	r3, [r7, #24]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d00d      	beq.n	800b9c0 <lwip_netconn_do_writemore+0x13c>
          if (!len) {
 800b9a4:	8bbb      	ldrh	r3, [r7, #28]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d10e      	bne.n	800b9c8 <lwip_netconn_do_writemore+0x144>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9ae:	699b      	ldr	r3, [r3, #24]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d102      	bne.n	800b9ba <lwip_netconn_do_writemore+0x136>
 800b9b4:	f06f 0306 	mvn.w	r3, #6
 800b9b8:	e000      	b.n	800b9bc <lwip_netconn_do_writemore+0x138>
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800b9be:	e08f      	b.n	800bae0 <lwip_netconn_do_writemore+0x25c>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800b9c0:	7ebb      	ldrb	r3, [r7, #26]
 800b9c2:	f043 0302 	orr.w	r3, r3, #2
 800b9c6:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9cc:	691a      	ldr	r2, [r3, #16]
 800b9ce:	8bbb      	ldrh	r3, [r7, #28]
 800b9d0:	441a      	add	r2, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9d6:	689b      	ldr	r3, [r3, #8]
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d906      	bls.n	800b9ec <lwip_netconn_do_writemore+0x168>
 800b9de:	4b10      	ldr	r3, [pc, #64]	@ (800ba20 <lwip_netconn_do_writemore+0x19c>)
 800b9e0:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800b9e4:	4916      	ldr	r1, [pc, #88]	@ (800ba40 <lwip_netconn_do_writemore+0x1bc>)
 800b9e6:	4810      	ldr	r0, [pc, #64]	@ (800ba28 <lwip_netconn_do_writemore+0x1a4>)
 800b9e8:	f01c faa4 	bl	8027f34 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b9ec:	8bbb      	ldrh	r3, [r7, #28]
 800b9ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d103      	bne.n	800b9fe <lwip_netconn_do_writemore+0x17a>
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9fc:	d209      	bcs.n	800ba12 <lwip_netconn_do_writemore+0x18e>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ba02:	8bba      	ldrh	r2, [r7, #28]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d11d      	bne.n	800ba44 <lwip_netconn_do_writemore+0x1c0>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba0c:	899b      	ldrh	r3, [r3, #12]
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d918      	bls.n	800ba44 <lwip_netconn_do_writemore+0x1c0>
        write_more = 1;
 800ba12:	2301      	movs	r3, #1
 800ba14:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ba16:	7ebb      	ldrb	r3, [r7, #26]
 800ba18:	f043 0302 	orr.w	r3, r3, #2
 800ba1c:	76bb      	strb	r3, [r7, #26]
 800ba1e:	e013      	b.n	800ba48 <lwip_netconn_do_writemore+0x1c4>
 800ba20:	08029700 	.word	0x08029700
 800ba24:	08029858 	.word	0x08029858
 800ba28:	08029744 	.word	0x08029744
 800ba2c:	08029b60 	.word	0x08029b60
 800ba30:	08029868 	.word	0x08029868
 800ba34:	08029b80 	.word	0x08029b80
 800ba38:	08029b98 	.word	0x08029b98
 800ba3c:	08029bd8 	.word	0x08029bd8
 800ba40:	08029c00 	.word	0x08029c00
      } else {
        write_more = 0;
 800ba44:	2300      	movs	r3, #0
 800ba46:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6858      	ldr	r0, [r3, #4]
 800ba4c:	7ebb      	ldrb	r3, [r7, #26]
 800ba4e:	8bba      	ldrh	r2, [r7, #28]
 800ba50:	6979      	ldr	r1, [r7, #20]
 800ba52:	f008 f8b9 	bl	8013bc8 <tcp_write>
 800ba56:	4603      	mov	r3, r0
 800ba58:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800ba5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d12c      	bne.n	800babc <lwip_netconn_do_writemore+0x238>
        conn->current_msg->msg.w.offset += len;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba66:	6999      	ldr	r1, [r3, #24]
 800ba68:	8bba      	ldrh	r2, [r7, #28]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba6e:	440a      	add	r2, r1
 800ba70:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba76:	6919      	ldr	r1, [r3, #16]
 800ba78:	8bba      	ldrh	r2, [r7, #28]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba7e:	440a      	add	r2, r1
 800ba80:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba86:	691a      	ldr	r2, [r3, #16]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba8c:	689b      	ldr	r3, [r3, #8]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d113      	bne.n	800babc <lwip_netconn_do_writemore+0x238>
          conn->current_msg->msg.w.vector_cnt--;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba98:	899a      	ldrh	r2, [r3, #12]
 800ba9a:	3a01      	subs	r2, #1
 800ba9c:	b292      	uxth	r2, r2
 800ba9e:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baa4:	899b      	ldrh	r3, [r3, #12]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d008      	beq.n	800babc <lwip_netconn_do_writemore+0x238>
            conn->current_msg->msg.w.vector++;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baae:	689a      	ldr	r2, [r3, #8]
 800bab0:	3208      	adds	r2, #8
 800bab2:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bab8:	2200      	movs	r2, #0
 800baba:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800babc:	7e7b      	ldrb	r3, [r7, #25]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d004      	beq.n	800bacc <lwip_netconn_do_writemore+0x248>
 800bac2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	f43f af3e 	beq.w	800b948 <lwip_netconn_do_writemore+0xc4>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800bacc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d004      	beq.n	800bade <lwip_netconn_do_writemore+0x25a>
 800bad4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800badc:	d136      	bne.n	800bb4c <lwip_netconn_do_writemore+0x2c8>
err_mem:
 800bade:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800bae0:	7e3b      	ldrb	r3, [r7, #24]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d01b      	beq.n	800bb1e <lwip_netconn_do_writemore+0x29a>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baea:	699a      	ldr	r2, [r3, #24]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baf0:	695b      	ldr	r3, [r3, #20]
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d213      	bcs.n	800bb1e <lwip_netconn_do_writemore+0x29a>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d005      	beq.n	800bb0a <lwip_netconn_do_writemore+0x286>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb02:	2200      	movs	r2, #0
 800bb04:	2103      	movs	r1, #3
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bb10:	f043 0310 	orr.w	r3, r3, #16
 800bb14:	b2da      	uxtb	r2, r3
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f883 2020 	strb.w	r2, [r3, #32]
 800bb1c:	e016      	b.n	800bb4c <lwip_netconn_do_writemore+0x2c8>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	685b      	ldr	r3, [r3, #4]
 800bb22:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800bb26:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800bb2a:	d305      	bcc.n	800bb38 <lwip_netconn_do_writemore+0x2b4>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	685b      	ldr	r3, [r3, #4]
 800bb30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800bb34:	2b04      	cmp	r3, #4
 800bb36:	d909      	bls.n	800bb4c <lwip_netconn_do_writemore+0x2c8>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d005      	beq.n	800bb4c <lwip_netconn_do_writemore+0x2c8>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb44:	2200      	movs	r2, #0
 800bb46:	2103      	movs	r1, #3
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800bb4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d11d      	bne.n	800bb90 <lwip_netconn_do_writemore+0x30c>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb58:	699a      	ldr	r2, [r3, #24]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb5e:	695b      	ldr	r3, [r3, #20]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d002      	beq.n	800bb6a <lwip_netconn_do_writemore+0x2e6>
 800bb64:	7e3b      	ldrb	r3, [r7, #24]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d001      	beq.n	800bb6e <lwip_netconn_do_writemore+0x2ea>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	4618      	mov	r0, r3
 800bb74:	f008 fe12 	bl	801479c <tcp_output>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800bb7c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800bb80:	f113 0f04 	cmn.w	r3, #4
 800bb84:	d12c      	bne.n	800bbe0 <lwip_netconn_do_writemore+0x35c>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800bb86:	7b3b      	ldrb	r3, [r7, #12]
 800bb88:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	76fb      	strb	r3, [r7, #27]
 800bb8e:	e027      	b.n	800bbe0 <lwip_netconn_do_writemore+0x35c>
      }
    } else if (err == ERR_MEM) {
 800bb90:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bb94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb98:	d120      	bne.n	800bbdc <lwip_netconn_do_writemore+0x358>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f008 fdfc 	bl	801479c <tcp_output>
 800bba4:	4603      	mov	r3, r0
 800bba6:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800bba8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800bbac:	f113 0f04 	cmn.w	r3, #4
 800bbb0:	d104      	bne.n	800bbbc <lwip_netconn_do_writemore+0x338>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800bbb2:	7b7b      	ldrb	r3, [r7, #13]
 800bbb4:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	76fb      	strb	r3, [r7, #27]
 800bbba:	e011      	b.n	800bbe0 <lwip_netconn_do_writemore+0x35c>
      } else if (dontblock) {
 800bbbc:	7e3b      	ldrb	r3, [r7, #24]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d00e      	beq.n	800bbe0 <lwip_netconn_do_writemore+0x35c>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbc6:	699b      	ldr	r3, [r3, #24]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d102      	bne.n	800bbd2 <lwip_netconn_do_writemore+0x34e>
 800bbcc:	f06f 0306 	mvn.w	r3, #6
 800bbd0:	e000      	b.n	800bbd4 <lwip_netconn_do_writemore+0x350>
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	76fb      	strb	r3, [r7, #27]
 800bbda:	e001      	b.n	800bbe0 <lwip_netconn_do_writemore+0x35c>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800bbe0:	7efb      	ldrb	r3, [r7, #27]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d015      	beq.n	800bc12 <lwip_netconn_do_writemore+0x38e>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	330c      	adds	r3, #12
 800bbee:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbf4:	7ffa      	ldrb	r2, [r7, #31]
 800bbf6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	625a      	str	r2, [r3, #36]	@ 0x24
    conn->state = NETCONN_NONE;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2200      	movs	r2, #0
 800bc02:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800bc04:	78fb      	ldrb	r3, [r7, #3]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d006      	beq.n	800bc18 <lwip_netconn_do_writemore+0x394>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800bc0a:	68b8      	ldr	r0, [r7, #8]
 800bc0c:	f00d f8de 	bl	8018dcc <sys_sem_signal>
 800bc10:	e002      	b.n	800bc18 <lwip_netconn_do_writemore+0x394>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800bc12:	f04f 33ff 	mov.w	r3, #4294967295
 800bc16:	e000      	b.n	800bc1a <lwip_netconn_do_writemore+0x396>
  }
#endif
  return ERR_OK;
 800bc18:	2300      	movs	r3, #0
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3720      	adds	r7, #32
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
 800bc22:	bf00      	nop

0800bc24 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7fe fe0f 	bl	800a858 <netconn_err>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800bc3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d166      	bne.n	800bd14 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bc50:	2b10      	cmp	r3, #16
 800bc52:	d15d      	bne.n	800bd10 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	785b      	ldrb	r3, [r3, #1]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d002      	beq.n	800bc64 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800bc5e:	23fb      	movs	r3, #251	@ 0xfb
 800bc60:	73fb      	strb	r3, [r7, #15]
 800bc62:	e057      	b.n	800bd14 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d04d      	beq.n	800bd0a <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	2201      	movs	r2, #1
 800bc74:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d006      	beq.n	800bc8e <lwip_netconn_do_write+0x6a>
 800bc80:	4b28      	ldr	r3, [pc, #160]	@ (800bd24 <lwip_netconn_do_write+0x100>)
 800bc82:	f240 7223 	movw	r2, #1827	@ 0x723
 800bc86:	4928      	ldr	r1, [pc, #160]	@ (800bd28 <lwip_netconn_do_write+0x104>)
 800bc88:	4828      	ldr	r0, [pc, #160]	@ (800bd2c <lwip_netconn_do_write+0x108>)
 800bc8a:	f01c f953 	bl	8027f34 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	695b      	ldr	r3, [r3, #20]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d106      	bne.n	800bca4 <lwip_netconn_do_write+0x80>
 800bc96:	4b23      	ldr	r3, [pc, #140]	@ (800bd24 <lwip_netconn_do_write+0x100>)
 800bc98:	f240 7224 	movw	r2, #1828	@ 0x724
 800bc9c:	4924      	ldr	r1, [pc, #144]	@ (800bd30 <lwip_netconn_do_write+0x10c>)
 800bc9e:	4823      	ldr	r0, [pc, #140]	@ (800bd2c <lwip_netconn_do_write+0x108>)
 800bca0:	f01c f948 	bl	8027f34 <iprintf>
        msg->conn->current_msg = msg;
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	68ba      	ldr	r2, [r7, #8]
 800bcaa:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	2100      	movs	r1, #0
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f7ff fde6 	bl	800b884 <lwip_netconn_do_writemore>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d02e      	beq.n	800bd1c <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	785b      	ldrb	r3, [r3, #1]
 800bcc4:	2b01      	cmp	r3, #1
 800bcc6:	d006      	beq.n	800bcd6 <lwip_netconn_do_write+0xb2>
 800bcc8:	4b16      	ldr	r3, [pc, #88]	@ (800bd24 <lwip_netconn_do_write+0x100>)
 800bcca:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800bcce:	4919      	ldr	r1, [pc, #100]	@ (800bd34 <lwip_netconn_do_write+0x110>)
 800bcd0:	4816      	ldr	r0, [pc, #88]	@ (800bd2c <lwip_netconn_do_write+0x108>)
 800bcd2:	f01c f92f 	bl	8027f34 <iprintf>
          UNLOCK_TCPIP_CORE();
 800bcd6:	4818      	ldr	r0, [pc, #96]	@ (800bd38 <lwip_netconn_do_write+0x114>)
 800bcd8:	f00d f8e9 	bl	8018eae <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	330c      	adds	r3, #12
 800bce2:	2100      	movs	r1, #0
 800bce4:	4618      	mov	r0, r3
 800bce6:	f00d f840 	bl	8018d6a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800bcea:	4813      	ldr	r0, [pc, #76]	@ (800bd38 <lwip_netconn_do_write+0x114>)
 800bcec:	f00d f8d0 	bl	8018e90 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	785b      	ldrb	r3, [r3, #1]
 800bcf6:	2b01      	cmp	r3, #1
 800bcf8:	d110      	bne.n	800bd1c <lwip_netconn_do_write+0xf8>
 800bcfa:	4b0a      	ldr	r3, [pc, #40]	@ (800bd24 <lwip_netconn_do_write+0x100>)
 800bcfc:	f240 722c 	movw	r2, #1836	@ 0x72c
 800bd00:	490c      	ldr	r1, [pc, #48]	@ (800bd34 <lwip_netconn_do_write+0x110>)
 800bd02:	480a      	ldr	r0, [pc, #40]	@ (800bd2c <lwip_netconn_do_write+0x108>)
 800bd04:	f01c f916 	bl	8027f34 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800bd08:	e008      	b.n	800bd1c <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800bd0a:	23f5      	movs	r3, #245	@ 0xf5
 800bd0c:	73fb      	strb	r3, [r7, #15]
 800bd0e:	e001      	b.n	800bd14 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800bd10:	23fa      	movs	r3, #250	@ 0xfa
 800bd12:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	7bfa      	ldrb	r2, [r7, #15]
 800bd18:	711a      	strb	r2, [r3, #4]
 800bd1a:	e000      	b.n	800bd1e <lwip_netconn_do_write+0xfa>
        return;
 800bd1c:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800bd1e:	3710      	adds	r7, #16
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	08029700 	.word	0x08029700
 800bd28:	08029aa4 	.word	0x08029aa4
 800bd2c:	08029744 	.word	0x08029744
 800bd30:	08029c2c 	.word	0x08029c2c
 800bd34:	08029ac0 	.word	0x08029ac0
 800bd38:	2000d090 	.word	0x2000d090

0800bd3c <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b084      	sub	sp, #16
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d06b      	beq.n	800be2a <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	7c1b      	ldrb	r3, [r3, #16]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d007      	beq.n	800bd6a <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	685a      	ldr	r2, [r3, #4]
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	689b      	ldr	r3, [r3, #8]
 800bd64:	6812      	ldr	r2, [r2, #0]
 800bd66:	601a      	str	r2, [r3, #0]
 800bd68:	e006      	b.n	800bd78 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	685a      	ldr	r2, [r3, #4]
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	6852      	ldr	r2, [r2, #4]
 800bd76:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bd88:	2b10      	cmp	r3, #16
 800bd8a:	d021      	beq.n	800bdd0 <lwip_netconn_do_getaddr+0x94>
 800bd8c:	2b20      	cmp	r3, #32
 800bd8e:	d144      	bne.n	800be1a <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	7c1b      	ldrb	r3, [r3, #16]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d007      	beq.n	800bda8 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	685a      	ldr	r2, [r3, #4]
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	68db      	ldr	r3, [r3, #12]
 800bda2:	8a52      	ldrh	r2, [r2, #18]
 800bda4:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800bda6:	e044      	b.n	800be32 <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	7c1b      	ldrb	r3, [r3, #16]
 800bdb0:	f003 0304 	and.w	r3, r3, #4
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d103      	bne.n	800bdc0 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	22f5      	movs	r2, #245	@ 0xf5
 800bdbc:	711a      	strb	r2, [r3, #4]
        break;
 800bdbe:	e038      	b.n	800be32 <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	685a      	ldr	r2, [r3, #4]
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	68db      	ldr	r3, [r3, #12]
 800bdca:	8a92      	ldrh	r2, [r2, #20]
 800bdcc:	801a      	strh	r2, [r3, #0]
        break;
 800bdce:	e030      	b.n	800be32 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	7c1b      	ldrb	r3, [r3, #16]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d10f      	bne.n	800bdf8 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d005      	beq.n	800bdf0 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	7d1b      	ldrb	r3, [r3, #20]
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d103      	bne.n	800bdf8 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	22f5      	movs	r2, #245	@ 0xf5
 800bdf4:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800bdf6:	e01c      	b.n	800be32 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	7c1b      	ldrb	r3, [r3, #16]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d004      	beq.n	800be0a <lwip_netconn_do_getaddr+0xce>
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	685b      	ldr	r3, [r3, #4]
 800be06:	8adb      	ldrh	r3, [r3, #22]
 800be08:	e003      	b.n	800be12 <lwip_netconn_do_getaddr+0xd6>
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	8b1b      	ldrh	r3, [r3, #24]
 800be12:	68fa      	ldr	r2, [r7, #12]
 800be14:	68d2      	ldr	r2, [r2, #12]
 800be16:	8013      	strh	r3, [r2, #0]
        break;
 800be18:	e00b      	b.n	800be32 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800be1a:	4b08      	ldr	r3, [pc, #32]	@ (800be3c <lwip_netconn_do_getaddr+0x100>)
 800be1c:	f240 727d 	movw	r2, #1917	@ 0x77d
 800be20:	4907      	ldr	r1, [pc, #28]	@ (800be40 <lwip_netconn_do_getaddr+0x104>)
 800be22:	4808      	ldr	r0, [pc, #32]	@ (800be44 <lwip_netconn_do_getaddr+0x108>)
 800be24:	f01c f886 	bl	8027f34 <iprintf>
        break;
 800be28:	e003      	b.n	800be32 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	22f5      	movs	r2, #245	@ 0xf5
 800be2e:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800be30:	bf00      	nop
 800be32:	bf00      	nop
 800be34:	3710      	adds	r7, #16
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
 800be3a:	bf00      	nop
 800be3c:	08029700 	.word	0x08029700
 800be40:	08029c40 	.word	0x08029c40
 800be44:	08029744 	.word	0x08029744

0800be48 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b084      	sub	sp, #16
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	785b      	ldrb	r3, [r3, #1]
 800be5a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d069      	beq.n	800bf3a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800be70:	2b10      	cmp	r3, #16
 800be72:	d162      	bne.n	800bf3a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800be78:	2b03      	cmp	r3, #3
 800be7a:	d002      	beq.n	800be82 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800be7c:	7afb      	ldrb	r3, [r7, #11]
 800be7e:	2b02      	cmp	r3, #2
 800be80:	d05b      	beq.n	800bf3a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800be82:	7afb      	ldrb	r3, [r7, #11]
 800be84:	2b03      	cmp	r3, #3
 800be86:	d103      	bne.n	800be90 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	22f5      	movs	r2, #245	@ 0xf5
 800be8c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800be8e:	e059      	b.n	800bf44 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800be90:	7afb      	ldrb	r3, [r7, #11]
 800be92:	2b01      	cmp	r3, #1
 800be94:	d103      	bne.n	800be9e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	22fb      	movs	r2, #251	@ 0xfb
 800be9a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800be9c:	e052      	b.n	800bf44 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	7a1b      	ldrb	r3, [r3, #8]
 800bea2:	f003 0301 	and.w	r3, r3, #1
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d004      	beq.n	800beb4 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	4618      	mov	r0, r3
 800beb0:	f7ff f95e 	bl	800b170 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d006      	beq.n	800becc <lwip_netconn_do_close+0x84>
 800bebe:	4b23      	ldr	r3, [pc, #140]	@ (800bf4c <lwip_netconn_do_close+0x104>)
 800bec0:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800bec4:	4922      	ldr	r1, [pc, #136]	@ (800bf50 <lwip_netconn_do_close+0x108>)
 800bec6:	4823      	ldr	r0, [pc, #140]	@ (800bf54 <lwip_netconn_do_close+0x10c>)
 800bec8:	f01c f834 	bl	8027f34 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	2204      	movs	r2, #4
 800bed2:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	68fa      	ldr	r2, [r7, #12]
 800beda:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	2100      	movs	r1, #0
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7ff f9c2 	bl	800b26c <lwip_netconn_do_close_internal>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d029      	beq.n	800bf42 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	785b      	ldrb	r3, [r3, #1]
 800bef4:	2b04      	cmp	r3, #4
 800bef6:	d006      	beq.n	800bf06 <lwip_netconn_do_close+0xbe>
 800bef8:	4b14      	ldr	r3, [pc, #80]	@ (800bf4c <lwip_netconn_do_close+0x104>)
 800befa:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800befe:	4916      	ldr	r1, [pc, #88]	@ (800bf58 <lwip_netconn_do_close+0x110>)
 800bf00:	4814      	ldr	r0, [pc, #80]	@ (800bf54 <lwip_netconn_do_close+0x10c>)
 800bf02:	f01c f817 	bl	8027f34 <iprintf>
        UNLOCK_TCPIP_CORE();
 800bf06:	4815      	ldr	r0, [pc, #84]	@ (800bf5c <lwip_netconn_do_close+0x114>)
 800bf08:	f00c ffd1 	bl	8018eae <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	330c      	adds	r3, #12
 800bf12:	2100      	movs	r1, #0
 800bf14:	4618      	mov	r0, r3
 800bf16:	f00c ff28 	bl	8018d6a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800bf1a:	4810      	ldr	r0, [pc, #64]	@ (800bf5c <lwip_netconn_do_close+0x114>)
 800bf1c:	f00c ffb8 	bl	8018e90 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	785b      	ldrb	r3, [r3, #1]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d00b      	beq.n	800bf42 <lwip_netconn_do_close+0xfa>
 800bf2a:	4b08      	ldr	r3, [pc, #32]	@ (800bf4c <lwip_netconn_do_close+0x104>)
 800bf2c:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800bf30:	4909      	ldr	r1, [pc, #36]	@ (800bf58 <lwip_netconn_do_close+0x110>)
 800bf32:	4808      	ldr	r0, [pc, #32]	@ (800bf54 <lwip_netconn_do_close+0x10c>)
 800bf34:	f01b fffe 	bl	8027f34 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800bf38:	e003      	b.n	800bf42 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	22f5      	movs	r2, #245	@ 0xf5
 800bf3e:	711a      	strb	r2, [r3, #4]
 800bf40:	e000      	b.n	800bf44 <lwip_netconn_do_close+0xfc>
      return;
 800bf42:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800bf44:	3710      	adds	r7, #16
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	08029700 	.word	0x08029700
 800bf50:	08029aa4 	.word	0x08029aa4
 800bf54:	08029744 	.word	0x08029744
 800bf58:	08029ac0 	.word	0x08029ac0
 800bf5c:	2000d090 	.word	0x2000d090

0800bf60 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b083      	sub	sp, #12
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	4603      	mov	r3, r0
 800bf68:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800bf6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	dc04      	bgt.n	800bf7c <err_to_errno+0x1c>
 800bf72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf76:	f113 0f10 	cmn.w	r3, #16
 800bf7a:	da01      	bge.n	800bf80 <err_to_errno+0x20>
    return EIO;
 800bf7c:	2305      	movs	r3, #5
 800bf7e:	e005      	b.n	800bf8c <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800bf80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf84:	425b      	negs	r3, r3
 800bf86:	4a04      	ldr	r2, [pc, #16]	@ (800bf98 <err_to_errno+0x38>)
 800bf88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	370c      	adds	r7, #12
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr
 800bf98:	0802cd00 	.word	0x0802cd00

0800bf9c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b082      	sub	sp, #8
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d013      	beq.n	800bfd2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d00b      	beq.n	800bfca <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f003 f8ea 	bl	800f190 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	605a      	str	r2, [r3, #4]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	685a      	ldr	r2, [r3, #4]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800bfca:	6879      	ldr	r1, [r7, #4]
 800bfcc:	2006      	movs	r0, #6
 800bfce:	f002 f9d1 	bl	800e374 <memp_free>
  }
}
 800bfd2:	bf00      	nop
 800bfd4:	3708      	adds	r7, #8
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
	...

0800bfdc <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b082      	sub	sp, #8
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d106      	bne.n	800bff8 <netbuf_free+0x1c>
 800bfea:	4b0d      	ldr	r3, [pc, #52]	@ (800c020 <netbuf_free+0x44>)
 800bfec:	2281      	movs	r2, #129	@ 0x81
 800bfee:	490d      	ldr	r1, [pc, #52]	@ (800c024 <netbuf_free+0x48>)
 800bff0:	480d      	ldr	r0, [pc, #52]	@ (800c028 <netbuf_free+0x4c>)
 800bff2:	f01b ff9f 	bl	8027f34 <iprintf>
 800bff6:	e00f      	b.n	800c018 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d004      	beq.n	800c00a <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	4618      	mov	r0, r3
 800c006:	f003 f8c3 	bl	800f190 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2200      	movs	r2, #0
 800c00e:	605a      	str	r2, [r3, #4]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	685a      	ldr	r2, [r3, #4]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800c018:	3708      	adds	r7, #8
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop
 800c020:	08029c58 	.word	0x08029c58
 800c024:	08029cf4 	.word	0x08029cf4
 800c028:	08029ca8 	.word	0x08029ca8

0800c02c <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b084      	sub	sp, #16
 800c030:	af00      	add	r7, sp, #0
 800c032:	60f8      	str	r0, [r7, #12]
 800c034:	60b9      	str	r1, [r7, #8]
 800c036:	4613      	mov	r3, r2
 800c038:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d108      	bne.n	800c052 <netbuf_ref+0x26>
 800c040:	4b1c      	ldr	r3, [pc, #112]	@ (800c0b4 <netbuf_ref+0x88>)
 800c042:	2299      	movs	r2, #153	@ 0x99
 800c044:	491c      	ldr	r1, [pc, #112]	@ (800c0b8 <netbuf_ref+0x8c>)
 800c046:	481d      	ldr	r0, [pc, #116]	@ (800c0bc <netbuf_ref+0x90>)
 800c048:	f01b ff74 	bl	8027f34 <iprintf>
 800c04c:	f06f 030f 	mvn.w	r3, #15
 800c050:	e02b      	b.n	800c0aa <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d004      	beq.n	800c064 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	4618      	mov	r0, r3
 800c060:	f003 f896 	bl	800f190 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800c064:	2241      	movs	r2, #65	@ 0x41
 800c066:	2100      	movs	r1, #0
 800c068:	2036      	movs	r0, #54	@ 0x36
 800c06a:	f002 fd7b 	bl	800eb64 <pbuf_alloc>
 800c06e:	4602      	mov	r2, r0
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d105      	bne.n	800c088 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2200      	movs	r2, #0
 800c080:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800c082:	f04f 33ff 	mov.w	r3, #4294967295
 800c086:	e010      	b.n	800c0aa <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	68ba      	ldr	r2, [r7, #8]
 800c08e:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	88fa      	ldrh	r2, [r7, #6]
 800c096:	811a      	strh	r2, [r3, #8]
 800c098:	68fa      	ldr	r2, [r7, #12]
 800c09a:	6812      	ldr	r2, [r2, #0]
 800c09c:	891b      	ldrh	r3, [r3, #8]
 800c09e:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800c0a8:	2300      	movs	r3, #0
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3710      	adds	r7, #16
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
 800c0b2:	bf00      	nop
 800c0b4:	08029c58 	.word	0x08029c58
 800c0b8:	08029d10 	.word	0x08029d10
 800c0bc:	08029ca8 	.word	0x08029ca8

0800c0c0 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b085      	sub	sp, #20
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	db02      	blt.n	800c0d8 <tryget_socket_unconn_nouse+0x18>
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2b03      	cmp	r3, #3
 800c0d6:	dd01      	ble.n	800c0dc <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	e003      	b.n	800c0e4 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	011b      	lsls	r3, r3, #4
 800c0e0:	4a03      	ldr	r2, [pc, #12]	@ (800c0f0 <tryget_socket_unconn_nouse+0x30>)
 800c0e2:	4413      	add	r3, r2
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3714      	adds	r7, #20
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr
 800c0f0:	2000d040 	.word	0x2000d040

0800c0f4 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b084      	sub	sp, #16
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f7ff ffdf 	bl	800c0c0 <tryget_socket_unconn_nouse>
 800c102:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800c104:	68fb      	ldr	r3, [r7, #12]
}
 800c106:	4618      	mov	r0, r3
 800c108:	3710      	adds	r7, #16
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}

0800c10e <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800c10e:	b580      	push	{r7, lr}
 800c110:	b084      	sub	sp, #16
 800c112:	af00      	add	r7, sp, #0
 800c114:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f7ff ffec 	bl	800c0f4 <tryget_socket_unconn>
 800c11c:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d005      	beq.n	800c130 <tryget_socket+0x22>
    if (sock->conn) {
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d001      	beq.n	800c130 <tryget_socket+0x22>
      return sock;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	e000      	b.n	800c132 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800c130:	2300      	movs	r3, #0
}
 800c132:	4618      	mov	r0, r3
 800c134:	3710      	adds	r7, #16
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
	...

0800c13c <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f7ff ffe2 	bl	800c10e <tryget_socket>
 800c14a:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d104      	bne.n	800c15c <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800c152:	4b05      	ldr	r3, [pc, #20]	@ (800c168 <get_socket+0x2c>)
 800c154:	2209      	movs	r2, #9
 800c156:	601a      	str	r2, [r3, #0]
    return NULL;
 800c158:	2300      	movs	r3, #0
 800c15a:	e000      	b.n	800c15e <get_socket+0x22>
  }
  return sock;
 800c15c:	68fb      	ldr	r3, [r7, #12]
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3710      	adds	r7, #16
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	20015124 	.word	0x20015124

0800c16c <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800c176:	2300      	movs	r3, #0
 800c178:	60fb      	str	r3, [r7, #12]
 800c17a:	e052      	b.n	800c222 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800c17c:	f00c feca 	bl	8018f14 <sys_arch_protect>
 800c180:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800c182:	4a2c      	ldr	r2, [pc, #176]	@ (800c234 <alloc_socket+0xc8>)
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	011b      	lsls	r3, r3, #4
 800c188:	4413      	add	r3, r2
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d142      	bne.n	800c216 <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800c190:	4a28      	ldr	r2, [pc, #160]	@ (800c234 <alloc_socket+0xc8>)
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	011b      	lsls	r3, r3, #4
 800c196:	4413      	add	r3, r2
 800c198:	687a      	ldr	r2, [r7, #4]
 800c19a:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800c19c:	68b8      	ldr	r0, [r7, #8]
 800c19e:	f00c fec7 	bl	8018f30 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800c1a2:	4a24      	ldr	r2, [pc, #144]	@ (800c234 <alloc_socket+0xc8>)
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	011b      	lsls	r3, r3, #4
 800c1a8:	4413      	add	r3, r2
 800c1aa:	3304      	adds	r3, #4
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800c1b0:	4a20      	ldr	r2, [pc, #128]	@ (800c234 <alloc_socket+0xc8>)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	011b      	lsls	r3, r3, #4
 800c1b6:	4413      	add	r3, r2
 800c1b8:	330e      	adds	r3, #14
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d006      	beq.n	800c1ce <alloc_socket+0x62>
 800c1c0:	4b1d      	ldr	r3, [pc, #116]	@ (800c238 <alloc_socket+0xcc>)
 800c1c2:	f240 220e 	movw	r2, #526	@ 0x20e
 800c1c6:	491d      	ldr	r1, [pc, #116]	@ (800c23c <alloc_socket+0xd0>)
 800c1c8:	481d      	ldr	r0, [pc, #116]	@ (800c240 <alloc_socket+0xd4>)
 800c1ca:	f01b feb3 	bl	8027f34 <iprintf>
      sockets[i].rcvevent   = 0;
 800c1ce:	4a19      	ldr	r2, [pc, #100]	@ (800c234 <alloc_socket+0xc8>)
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	011b      	lsls	r3, r3, #4
 800c1d4:	4413      	add	r3, r2
 800c1d6:	3308      	adds	r3, #8
 800c1d8:	2200      	movs	r2, #0
 800c1da:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c1e4:	2b10      	cmp	r3, #16
 800c1e6:	d102      	bne.n	800c1ee <alloc_socket+0x82>
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d001      	beq.n	800c1f2 <alloc_socket+0x86>
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	e000      	b.n	800c1f4 <alloc_socket+0x88>
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	b299      	uxth	r1, r3
 800c1f6:	4a0f      	ldr	r2, [pc, #60]	@ (800c234 <alloc_socket+0xc8>)
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	011b      	lsls	r3, r3, #4
 800c1fc:	4413      	add	r3, r2
 800c1fe:	330a      	adds	r3, #10
 800c200:	460a      	mov	r2, r1
 800c202:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800c204:	4a0b      	ldr	r2, [pc, #44]	@ (800c234 <alloc_socket+0xc8>)
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	011b      	lsls	r3, r3, #4
 800c20a:	4413      	add	r3, r2
 800c20c:	330c      	adds	r3, #12
 800c20e:	2200      	movs	r2, #0
 800c210:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	e00a      	b.n	800c22c <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800c216:	68b8      	ldr	r0, [r7, #8]
 800c218:	f00c fe8a 	bl	8018f30 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	3301      	adds	r3, #1
 800c220:	60fb      	str	r3, [r7, #12]
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2b03      	cmp	r3, #3
 800c226:	dda9      	ble.n	800c17c <alloc_socket+0x10>
  }
  return -1;
 800c228:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3710      	adds	r7, #16
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}
 800c234:	2000d040 	.word	0x2000d040
 800c238:	08029df0 	.word	0x08029df0
 800c23c:	08029e24 	.word	0x08029e24
 800c240:	08029e44 	.word	0x08029e44

0800c244 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800c244:	b480      	push	{r7}
 800c246:	b085      	sub	sp, #20
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]
 800c250:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	68fa      	ldr	r2, [r7, #12]
 800c256:	6852      	ldr	r2, [r2, #4]
 800c258:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2200      	movs	r2, #0
 800c25e:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681a      	ldr	r2, [r3, #0]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2200      	movs	r2, #0
 800c26c:	601a      	str	r2, [r3, #0]
  return 1;
 800c26e:	2301      	movs	r3, #1
}
 800c270:	4618      	mov	r0, r3
 800c272:	3714      	adds	r7, #20
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr

0800c27c <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	60f8      	str	r0, [r7, #12]
 800c284:	60b9      	str	r1, [r7, #8]
 800c286:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d00d      	beq.n	800c2ac <free_socket_free_elements+0x30>
    if (is_tcp) {
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d005      	beq.n	800c2a2 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4618      	mov	r0, r3
 800c29c:	f002 ff78 	bl	800f190 <pbuf_free>
 800c2a0:	e004      	b.n	800c2ac <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7ff fe78 	bl	800bf9c <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d002      	beq.n	800c2b8 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800c2b2:	68b8      	ldr	r0, [r7, #8]
 800c2b4:	f7fd fee6 	bl	800a084 <netconn_delete>
  }
}
 800c2b8:	bf00      	nop
 800c2ba:	3710      	adds	r7, #16
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b086      	sub	sp, #24
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800c2ca:	f00c fe23 	bl	8018f14 <sys_arch_protect>
 800c2ce:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800c2d0:	f107 0308 	add.w	r3, r7, #8
 800c2d4:	f107 020c 	add.w	r2, r7, #12
 800c2d8:	6839      	ldr	r1, [r7, #0]
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f7ff ffb2 	bl	800c244 <free_socket_locked>
 800c2e0:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800c2e2:	6978      	ldr	r0, [r7, #20]
 800c2e4:	f00c fe24 	bl	8018f30 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d006      	beq.n	800c2fc <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	f107 0208 	add.w	r2, r7, #8
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	6838      	ldr	r0, [r7, #0]
 800c2f8:	f7ff ffc0 	bl	800c27c <free_socket_free_elements>
  }
}
 800c2fc:	bf00      	nop
 800c2fe:	3718      	adds	r7, #24
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}

0800c304 <lwip_bind>:
  return newsock;
}

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b08a      	sub	sp, #40	@ 0x28
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800c310:	68f8      	ldr	r0, [r7, #12]
 800c312:	f7ff ff13 	bl	800c13c <get_socket>
 800c316:	6278      	str	r0, [r7, #36]	@ 0x24
  if (!sock) {
 800c318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d102      	bne.n	800c324 <lwip_bind+0x20>
    return -1;
 800c31e:	f04f 33ff 	mov.w	r3, #4294967295
 800c322:	e051      	b.n	800c3c8 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2b10      	cmp	r3, #16
 800c328:	d108      	bne.n	800c33c <lwip_bind+0x38>
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	785b      	ldrb	r3, [r3, #1]
 800c32e:	2b02      	cmp	r3, #2
 800c330:	d104      	bne.n	800c33c <lwip_bind+0x38>
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	f003 0303 	and.w	r3, r3, #3
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d014      	beq.n	800c366 <lwip_bind+0x62>
 800c33c:	4b24      	ldr	r3, [pc, #144]	@ (800c3d0 <lwip_bind+0xcc>)
 800c33e:	f240 22e2 	movw	r2, #738	@ 0x2e2
 800c342:	4924      	ldr	r1, [pc, #144]	@ (800c3d4 <lwip_bind+0xd0>)
 800c344:	4824      	ldr	r0, [pc, #144]	@ (800c3d8 <lwip_bind+0xd4>)
 800c346:	f01b fdf5 	bl	8027f34 <iprintf>
 800c34a:	f06f 000f 	mvn.w	r0, #15
 800c34e:	f7ff fe07 	bl	800bf60 <err_to_errno>
 800c352:	6178      	str	r0, [r7, #20]
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d002      	beq.n	800c360 <lwip_bind+0x5c>
 800c35a:	4a20      	ldr	r2, [pc, #128]	@ (800c3dc <lwip_bind+0xd8>)
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	6013      	str	r3, [r2, #0]
 800c360:	f04f 33ff 	mov.w	r3, #4294967295
 800c364:	e030      	b.n	800c3c8 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	613b      	str	r3, [r7, #16]
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	885b      	ldrh	r3, [r3, #2]
 800c370:	4618      	mov	r0, r3
 800c372:	f001 fab5 	bl	800d8e0 <lwip_htons>
 800c376:	4603      	mov	r3, r0
 800c378:	847b      	strh	r3, [r7, #34]	@ 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800c37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c380:	f107 0110 	add.w	r1, r7, #16
 800c384:	4618      	mov	r0, r3
 800c386:	f7fd feeb 	bl	800a160 <netconn_bind>
 800c38a:	4603      	mov	r3, r0
 800c38c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

  if (err != ERR_OK) {
 800c390:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800c394:	2b00      	cmp	r3, #0
 800c396:	d00e      	beq.n	800c3b6 <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800c398:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7ff fddf 	bl	800bf60 <err_to_errno>
 800c3a2:	61b8      	str	r0, [r7, #24]
 800c3a4:	69bb      	ldr	r3, [r7, #24]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d002      	beq.n	800c3b0 <lwip_bind+0xac>
 800c3aa:	4a0c      	ldr	r2, [pc, #48]	@ (800c3dc <lwip_bind+0xd8>)
 800c3ac:	69bb      	ldr	r3, [r7, #24]
 800c3ae:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800c3b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c3b4:	e008      	b.n	800c3c8 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	61fb      	str	r3, [r7, #28]
 800c3ba:	69fb      	ldr	r3, [r7, #28]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d002      	beq.n	800c3c6 <lwip_bind+0xc2>
 800c3c0:	4a06      	ldr	r2, [pc, #24]	@ (800c3dc <lwip_bind+0xd8>)
 800c3c2:	69fb      	ldr	r3, [r7, #28]
 800c3c4:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800c3c6:	2300      	movs	r3, #0
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3728      	adds	r7, #40	@ 0x28
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	08029df0 	.word	0x08029df0
 800c3d4:	08029e94 	.word	0x08029e94
 800c3d8:	08029e44 	.word	0x08029e44
 800c3dc:	20015124 	.word	0x20015124

0800c3e0 <lwip_close>:

int
lwip_close(int s)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b086      	sub	sp, #24
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f7ff fea5 	bl	800c13c <get_socket>
 800c3f2:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d102      	bne.n	800c400 <lwip_close+0x20>
    return -1;
 800c3fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c3fe:	e039      	b.n	800c474 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d00b      	beq.n	800c420 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c412:	2b10      	cmp	r3, #16
 800c414:	bf0c      	ite	eq
 800c416:	2301      	moveq	r3, #1
 800c418:	2300      	movne	r3, #0
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	617b      	str	r3, [r7, #20]
 800c41e:	e00a      	b.n	800c436 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d006      	beq.n	800c436 <lwip_close+0x56>
 800c428:	4b14      	ldr	r3, [pc, #80]	@ (800c47c <lwip_close+0x9c>)
 800c42a:	f44f 7245 	mov.w	r2, #788	@ 0x314
 800c42e:	4914      	ldr	r1, [pc, #80]	@ (800c480 <lwip_close+0xa0>)
 800c430:	4814      	ldr	r0, [pc, #80]	@ (800c484 <lwip_close+0xa4>)
 800c432:	f01b fd7f 	bl	8027f34 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7fd fdfe 	bl	800a03c <netconn_prepare_delete>
 800c440:	4603      	mov	r3, r0
 800c442:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d00e      	beq.n	800c46a <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 800c44c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c450:	4618      	mov	r0, r3
 800c452:	f7ff fd85 	bl	800bf60 <err_to_errno>
 800c456:	60b8      	str	r0, [r7, #8]
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d002      	beq.n	800c464 <lwip_close+0x84>
 800c45e:	4a0a      	ldr	r2, [pc, #40]	@ (800c488 <lwip_close+0xa8>)
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800c464:	f04f 33ff 	mov.w	r3, #4294967295
 800c468:	e004      	b.n	800c474 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 800c46a:	6979      	ldr	r1, [r7, #20]
 800c46c:	6938      	ldr	r0, [r7, #16]
 800c46e:	f7ff ff27 	bl	800c2c0 <free_socket>
  set_errno(0);
  return 0;
 800c472:	2300      	movs	r3, #0
}
 800c474:	4618      	mov	r0, r3
 800c476:	3718      	adds	r7, #24
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	08029df0 	.word	0x08029df0
 800c480:	08029eb0 	.word	0x08029eb0
 800c484:	08029e44 	.word	0x08029e44
 800c488:	20015124 	.word	0x20015124

0800c48c <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b08c      	sub	sp, #48	@ 0x30
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	607a      	str	r2, [r7, #4]
 800c498:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800c49a:	2308      	movs	r3, #8
 800c49c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  ssize_t recvd = 0;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	db01      	blt.n	800c4ae <lwip_recv_tcp+0x22>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	e001      	b.n	800c4b2 <lwip_recv_tcp+0x26>
 800c4ae:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800c4b2:	627b      	str	r3, [r7, #36]	@ 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d106      	bne.n	800c4c8 <lwip_recv_tcp+0x3c>
 800c4ba:	4b74      	ldr	r3, [pc, #464]	@ (800c68c <lwip_recv_tcp+0x200>)
 800c4bc:	f240 329e 	movw	r2, #926	@ 0x39e
 800c4c0:	4973      	ldr	r1, [pc, #460]	@ (800c690 <lwip_recv_tcp+0x204>)
 800c4c2:	4874      	ldr	r0, [pc, #464]	@ (800c694 <lwip_recv_tcp+0x208>)
 800c4c4:	f01b fd36 	bl	8027f34 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c4d2:	2b10      	cmp	r3, #16
 800c4d4:	d006      	beq.n	800c4e4 <lwip_recv_tcp+0x58>
 800c4d6:	4b6d      	ldr	r3, [pc, #436]	@ (800c68c <lwip_recv_tcp+0x200>)
 800c4d8:	f240 329f 	movw	r2, #927	@ 0x39f
 800c4dc:	496e      	ldr	r1, [pc, #440]	@ (800c698 <lwip_recv_tcp+0x20c>)
 800c4de:	486d      	ldr	r0, [pc, #436]	@ (800c694 <lwip_recv_tcp+0x208>)
 800c4e0:	f01b fd28 	bl	8027f34 <iprintf>

  if (flags & MSG_DONTWAIT) {
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	f003 0308 	and.w	r3, r3, #8
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d005      	beq.n	800c4fa <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800c4ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c4f2:	f043 0304 	orr.w	r3, r3, #4
 800c4f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d003      	beq.n	800c50a <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	617b      	str	r3, [r7, #20]
 800c508:	e036      	b.n	800c578 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800c512:	f107 0114 	add.w	r1, r7, #20
 800c516:	4618      	mov	r0, r3
 800c518:	f7fe f816 	bl	800a548 <netconn_recv_tcp_pbuf_flags>
 800c51c:	4603      	mov	r3, r0
 800c51e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800c522:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800c526:	2b00      	cmp	r3, #0
 800c528:	d019      	beq.n	800c55e <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800c52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	f300 808d 	bgt.w	800c64c <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800c532:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800c536:	4618      	mov	r0, r3
 800c538:	f7ff fd12 	bl	800bf60 <err_to_errno>
 800c53c:	61f8      	str	r0, [r7, #28]
 800c53e:	69fb      	ldr	r3, [r7, #28]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d002      	beq.n	800c54a <lwip_recv_tcp+0xbe>
 800c544:	4a55      	ldr	r2, [pc, #340]	@ (800c69c <lwip_recv_tcp+0x210>)
 800c546:	69fb      	ldr	r3, [r7, #28]
 800c548:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800c54a:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800c54e:	f113 0f0f 	cmn.w	r3, #15
 800c552:	d101      	bne.n	800c558 <lwip_recv_tcp+0xcc>
          return 0;
 800c554:	2300      	movs	r3, #0
 800c556:	e094      	b.n	800c682 <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800c558:	f04f 33ff 	mov.w	r3, #4294967295
 800c55c:	e091      	b.n	800c682 <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d106      	bne.n	800c572 <lwip_recv_tcp+0xe6>
 800c564:	4b49      	ldr	r3, [pc, #292]	@ (800c68c <lwip_recv_tcp+0x200>)
 800c566:	f240 32c5 	movw	r2, #965	@ 0x3c5
 800c56a:	494d      	ldr	r1, [pc, #308]	@ (800c6a0 <lwip_recv_tcp+0x214>)
 800c56c:	4849      	ldr	r0, [pc, #292]	@ (800c694 <lwip_recv_tcp+0x208>)
 800c56e:	f01b fce1 	bl	8027f34 <iprintf>
      sock->lastdata.pbuf = p;
 800c572:	697a      	ldr	r2, [r7, #20]
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	891b      	ldrh	r3, [r3, #8]
 800c57c:	461a      	mov	r2, r3
 800c57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c580:	4293      	cmp	r3, r2
 800c582:	dd03      	ble.n	800c58c <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	891b      	ldrh	r3, [r3, #8]
 800c588:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c58a:	e001      	b.n	800c590 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800c58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c58e:	847b      	strh	r3, [r7, #34]	@ 0x22
    }
    if (recvd + copylen < recvd) {
 800c590:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c594:	4413      	add	r3, r2
 800c596:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c598:	429a      	cmp	r2, r3
 800c59a:	dd03      	ble.n	800c5a4 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800c59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	43db      	mvns	r3, r3
 800c5a2:	847b      	strh	r3, [r7, #34]	@ 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800c5a4:	6978      	ldr	r0, [r7, #20]
 800c5a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5a8:	68ba      	ldr	r2, [r7, #8]
 800c5aa:	18d1      	adds	r1, r2, r3
 800c5ac:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	f002 fff4 	bl	800f59c <pbuf_copy_partial>

    recvd += copylen;
 800c5b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c5b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c5b8:	4413      	add	r3, r2
 800c5ba:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800c5bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c5be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	da06      	bge.n	800c5d2 <lwip_recv_tcp+0x146>
 800c5c4:	4b31      	ldr	r3, [pc, #196]	@ (800c68c <lwip_recv_tcp+0x200>)
 800c5c6:	f240 32dd 	movw	r2, #989	@ 0x3dd
 800c5ca:	4936      	ldr	r1, [pc, #216]	@ (800c6a4 <lwip_recv_tcp+0x218>)
 800c5cc:	4831      	ldr	r0, [pc, #196]	@ (800c694 <lwip_recv_tcp+0x208>)
 800c5ce:	f01b fcb1 	bl	8027f34 <iprintf>
    recv_left -= copylen;
 800c5d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c5d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5d6:	1ad3      	subs	r3, r2, r3
 800c5d8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	f003 0301 	and.w	r3, r3, #1
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d123      	bne.n	800c62c <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	891b      	ldrh	r3, [r3, #8]
 800c5e8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d906      	bls.n	800c5fc <lwip_recv_tcp+0x170>
 800c5ee:	4b27      	ldr	r3, [pc, #156]	@ (800c68c <lwip_recv_tcp+0x200>)
 800c5f0:	f240 32e3 	movw	r2, #995	@ 0x3e3
 800c5f4:	492c      	ldr	r1, [pc, #176]	@ (800c6a8 <lwip_recv_tcp+0x21c>)
 800c5f6:	4827      	ldr	r0, [pc, #156]	@ (800c694 <lwip_recv_tcp+0x208>)
 800c5f8:	f01b fc9c 	bl	8027f34 <iprintf>
      if (p->tot_len - copylen > 0) {
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	891b      	ldrh	r3, [r3, #8]
 800c600:	461a      	mov	r2, r3
 800c602:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c604:	1ad3      	subs	r3, r2, r3
 800c606:	2b00      	cmp	r3, #0
 800c608:	dd09      	ble.n	800c61e <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c60e:	4611      	mov	r1, r2
 800c610:	4618      	mov	r0, r3
 800c612:	f002 fd8a 	bl	800f12a <pbuf_free_header>
 800c616:	4602      	mov	r2, r0
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	605a      	str	r2, [r3, #4]
 800c61c:	e006      	b.n	800c62c <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2200      	movs	r2, #0
 800c622:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	4618      	mov	r0, r3
 800c628:	f002 fdb2 	bl	800f190 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800c62c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c630:	f043 0314 	orr.w	r3, r3, #20
 800c634:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800c638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	dd08      	ble.n	800c650 <lwip_recv_tcp+0x1c4>
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	f003 0301 	and.w	r3, r3, #1
 800c644:	2b00      	cmp	r3, #0
 800c646:	f43f af58 	beq.w	800c4fa <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800c64a:	e001      	b.n	800c650 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800c64c:	bf00      	nop
 800c64e:	e000      	b.n	800c652 <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800c650:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800c652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c654:	2b00      	cmp	r3, #0
 800c656:	dd0b      	ble.n	800c670 <lwip_recv_tcp+0x1e4>
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	f003 0301 	and.w	r3, r3, #1
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d106      	bne.n	800c670 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c668:	4611      	mov	r1, r2
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7fd feb4 	bl	800a3d8 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800c670:	2300      	movs	r3, #0
 800c672:	61bb      	str	r3, [r7, #24]
 800c674:	69bb      	ldr	r3, [r7, #24]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d002      	beq.n	800c680 <lwip_recv_tcp+0x1f4>
 800c67a:	4a08      	ldr	r2, [pc, #32]	@ (800c69c <lwip_recv_tcp+0x210>)
 800c67c:	69bb      	ldr	r3, [r7, #24]
 800c67e:	6013      	str	r3, [r2, #0]
  return recvd;
 800c680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 800c682:	4618      	mov	r0, r3
 800c684:	3730      	adds	r7, #48	@ 0x30
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
 800c68a:	bf00      	nop
 800c68c:	08029df0 	.word	0x08029df0
 800c690:	08029ee8 	.word	0x08029ee8
 800c694:	08029e44 	.word	0x08029e44
 800c698:	08029ef8 	.word	0x08029ef8
 800c69c:	20015124 	.word	0x20015124
 800c6a0:	08029f1c 	.word	0x08029f1c
 800c6a4:	08029f28 	.word	0x08029f28
 800c6a8:	08029f50 	.word	0x08029f50

0800c6ac <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800c6ac:	b590      	push	{r4, r7, lr}
 800c6ae:	b08b      	sub	sp, #44	@ 0x2c
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	60f8      	str	r0, [r7, #12]
 800c6b4:	60b9      	str	r1, [r7, #8]
 800c6b6:	603b      	str	r3, [r7, #0]
 800c6b8:	4613      	mov	r3, r2
 800c6ba:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	627b      	str	r3, [r7, #36]	@ 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d106      	bne.n	800c6d4 <lwip_sock_make_addr+0x28>
 800c6c6:	4b2b      	ldr	r3, [pc, #172]	@ (800c774 <lwip_sock_make_addr+0xc8>)
 800c6c8:	f240 4207 	movw	r2, #1031	@ 0x407
 800c6cc:	492a      	ldr	r1, [pc, #168]	@ (800c778 <lwip_sock_make_addr+0xcc>)
 800c6ce:	482b      	ldr	r0, [pc, #172]	@ (800c77c <lwip_sock_make_addr+0xd0>)
 800c6d0:	f01b fc30 	bl	8027f34 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d106      	bne.n	800c6e8 <lwip_sock_make_addr+0x3c>
 800c6da:	4b26      	ldr	r3, [pc, #152]	@ (800c774 <lwip_sock_make_addr+0xc8>)
 800c6dc:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 800c6e0:	4927      	ldr	r1, [pc, #156]	@ (800c780 <lwip_sock_make_addr+0xd4>)
 800c6e2:	4826      	ldr	r0, [pc, #152]	@ (800c77c <lwip_sock_make_addr+0xd0>)
 800c6e4:	f01b fc26 	bl	8027f34 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800c6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d106      	bne.n	800c6fc <lwip_sock_make_addr+0x50>
 800c6ee:	4b21      	ldr	r3, [pc, #132]	@ (800c774 <lwip_sock_make_addr+0xc8>)
 800c6f0:	f240 4209 	movw	r2, #1033	@ 0x409
 800c6f4:	4923      	ldr	r1, [pc, #140]	@ (800c784 <lwip_sock_make_addr+0xd8>)
 800c6f6:	4821      	ldr	r0, [pc, #132]	@ (800c77c <lwip_sock_make_addr+0xd0>)
 800c6f8:	f01b fc1c 	bl	8027f34 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800c6fc:	f107 0314 	add.w	r3, r7, #20
 800c700:	2210      	movs	r2, #16
 800c702:	701a      	strb	r2, [r3, #0]
 800c704:	f107 0314 	add.w	r3, r7, #20
 800c708:	2202      	movs	r2, #2
 800c70a:	705a      	strb	r2, [r3, #1]
 800c70c:	f107 0414 	add.w	r4, r7, #20
 800c710:	88fb      	ldrh	r3, [r7, #6]
 800c712:	4618      	mov	r0, r3
 800c714:	f001 f8e4 	bl	800d8e0 <lwip_htons>
 800c718:	4603      	mov	r3, r0
 800c71a:	8063      	strh	r3, [r4, #2]
 800c71c:	f107 0314 	add.w	r3, r7, #20
 800c720:	68ba      	ldr	r2, [r7, #8]
 800c722:	6812      	ldr	r2, [r2, #0]
 800c724:	605a      	str	r2, [r3, #4]
 800c726:	f107 0314 	add.w	r3, r7, #20
 800c72a:	3308      	adds	r3, #8
 800c72c:	2208      	movs	r2, #8
 800c72e:	2100      	movs	r1, #0
 800c730:	4618      	mov	r0, r3
 800c732:	f01b fd85 	bl	8028240 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800c736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	7d3a      	ldrb	r2, [r7, #20]
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d202      	bcs.n	800c746 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800c740:	2301      	movs	r3, #1
 800c742:	627b      	str	r3, [r7, #36]	@ 0x24
 800c744:	e008      	b.n	800c758 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800c746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	7d3a      	ldrb	r2, [r7, #20]
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d903      	bls.n	800c758 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800c750:	7d3b      	ldrb	r3, [r7, #20]
 800c752:	461a      	mov	r2, r3
 800c754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c756:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800c758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c75a:	681a      	ldr	r2, [r3, #0]
 800c75c:	f107 0314 	add.w	r3, r7, #20
 800c760:	4619      	mov	r1, r3
 800c762:	6838      	ldr	r0, [r7, #0]
 800c764:	f01b fe93 	bl	802848e <memcpy>
  return truncated;
 800c768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	372c      	adds	r7, #44	@ 0x2c
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd90      	pop	{r4, r7, pc}
 800c772:	bf00      	nop
 800c774:	08029df0 	.word	0x08029df0
 800c778:	08029f60 	.word	0x08029f60
 800c77c:	08029e44 	.word	0x08029e44
 800c780:	08029f74 	.word	0x08029f74
 800c784:	08029f84 	.word	0x08029f84

0800c788 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b088      	sub	sp, #32
 800c78c:	af02      	add	r7, sp, #8
 800c78e:	60f8      	str	r0, [r7, #12]
 800c790:	60b9      	str	r1, [r7, #8]
 800c792:	607a      	str	r2, [r7, #4]
 800c794:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d101      	bne.n	800c7a0 <lwip_recv_tcp_from+0x18>
    return 0;
 800c79c:	2300      	movs	r3, #0
 800c79e:	e021      	b.n	800c7e4 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d01d      	beq.n	800c7e2 <lwip_recv_tcp_from+0x5a>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d01a      	beq.n	800c7e2 <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	6818      	ldr	r0, [r3, #0]
 800c7b0:	f107 0216 	add.w	r2, r7, #22
 800c7b4:	f107 0110 	add.w	r1, r7, #16
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	f7fd fc7f 	bl	800a0bc <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d00e      	beq.n	800c7e2 <lwip_recv_tcp_from+0x5a>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d00b      	beq.n	800c7e2 <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	6818      	ldr	r0, [r3, #0]
 800c7ce:	8afa      	ldrh	r2, [r7, #22]
 800c7d0:	f107 0110 	add.w	r1, r7, #16
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	9300      	str	r3, [sp, #0]
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	f7ff ff67 	bl	800c6ac <lwip_sock_make_addr>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	e000      	b.n	800c7e4 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800c7e2:	2300      	movs	r3, #0
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3718      	adds	r7, #24
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800c7ec:	b590      	push	{r4, r7, lr}
 800c7ee:	b08d      	sub	sp, #52	@ 0x34
 800c7f0:	af02      	add	r7, sp, #8
 800c7f2:	60f8      	str	r0, [r7, #12]
 800c7f4:	60b9      	str	r1, [r7, #8]
 800c7f6:	607a      	str	r2, [r7, #4]
 800c7f8:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	689b      	ldr	r3, [r3, #8]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d10d      	bne.n	800c81e <lwip_recvfrom_udp_raw+0x32>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	68db      	ldr	r3, [r3, #12]
 800c806:	2b00      	cmp	r3, #0
 800c808:	dd09      	ble.n	800c81e <lwip_recvfrom_udp_raw+0x32>
 800c80a:	4b5e      	ldr	r3, [pc, #376]	@ (800c984 <lwip_recvfrom_udp_raw+0x198>)
 800c80c:	f240 4249 	movw	r2, #1097	@ 0x449
 800c810:	495d      	ldr	r1, [pc, #372]	@ (800c988 <lwip_recvfrom_udp_raw+0x19c>)
 800c812:	485e      	ldr	r0, [pc, #376]	@ (800c98c <lwip_recvfrom_udp_raw+0x1a0>)
 800c814:	f01b fb8e 	bl	8027f34 <iprintf>
 800c818:	f06f 030f 	mvn.w	r3, #15
 800c81c:	e0ad      	b.n	800c97a <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	f003 0308 	and.w	r3, r3, #8
 800c824:	2b00      	cmp	r3, #0
 800c826:	d003      	beq.n	800c830 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800c828:	2304      	movs	r3, #4
 800c82a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c82e:	e002      	b.n	800c836 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800c830:	2300      	movs	r3, #0
 800c832:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	685b      	ldr	r3, [r3, #4]
 800c83a:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d11e      	bne.n	800c880 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c84a:	f107 0110 	add.w	r1, r7, #16
 800c84e:	4618      	mov	r0, r3
 800c850:	f7fd fea6 	bl	800a5a0 <netconn_recv_udp_raw_netbuf_flags>
 800c854:	4603      	mov	r3, r0
 800c856:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800c858:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d002      	beq.n	800c866 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800c860:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c864:	e089      	b.n	800c97a <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d106      	bne.n	800c87a <lwip_recvfrom_udp_raw+0x8e>
 800c86c:	4b45      	ldr	r3, [pc, #276]	@ (800c984 <lwip_recvfrom_udp_raw+0x198>)
 800c86e:	f240 425e 	movw	r2, #1118	@ 0x45e
 800c872:	4947      	ldr	r1, [pc, #284]	@ (800c990 <lwip_recvfrom_udp_raw+0x1a4>)
 800c874:	4845      	ldr	r0, [pc, #276]	@ (800c98c <lwip_recvfrom_udp_raw+0x1a0>)
 800c876:	f01b fb5d 	bl	8027f34 <iprintf>
    sock->lastdata.netbuf = buf;
 800c87a:	693a      	ldr	r2, [r7, #16]
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	891b      	ldrh	r3, [r3, #8]
 800c886:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800c888:	2300      	movs	r3, #0
 800c88a:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800c88c:	2300      	movs	r3, #0
 800c88e:	61fb      	str	r3, [r7, #28]
 800c890:	e029      	b.n	800c8e6 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800c892:	8b3a      	ldrh	r2, [r7, #24]
 800c894:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c896:	1ad3      	subs	r3, r2, r3
 800c898:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	689a      	ldr	r2, [r3, #8]
 800c89e:	69fb      	ldr	r3, [r7, #28]
 800c8a0:	00db      	lsls	r3, r3, #3
 800c8a2:	4413      	add	r3, r2
 800c8a4:	685a      	ldr	r2, [r3, #4]
 800c8a6:	8afb      	ldrh	r3, [r7, #22]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d902      	bls.n	800c8b2 <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800c8ac:	8afb      	ldrh	r3, [r7, #22]
 800c8ae:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c8b0:	e006      	b.n	800c8c0 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	689a      	ldr	r2, [r3, #8]
 800c8b6:	69fb      	ldr	r3, [r7, #28]
 800c8b8:	00db      	lsls	r3, r3, #3
 800c8ba:	4413      	add	r3, r2
 800c8bc:	685b      	ldr	r3, [r3, #4]
 800c8be:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	6818      	ldr	r0, [r3, #0]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	689a      	ldr	r2, [r3, #8]
 800c8c8:	69fb      	ldr	r3, [r7, #28]
 800c8ca:	00db      	lsls	r3, r3, #3
 800c8cc:	4413      	add	r3, r2
 800c8ce:	6819      	ldr	r1, [r3, #0]
 800c8d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c8d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c8d4:	f002 fe62 	bl	800f59c <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800c8d8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c8da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8dc:	4413      	add	r3, r2
 800c8de:	847b      	strh	r3, [r7, #34]	@ 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800c8e0:	69fb      	ldr	r3, [r7, #28]
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	61fb      	str	r3, [r7, #28]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	69fa      	ldr	r2, [r7, #28]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	da03      	bge.n	800c8f8 <lwip_recvfrom_udp_raw+0x10c>
 800c8f0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c8f2:	8b3b      	ldrh	r3, [r7, #24]
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d3cc      	bcc.n	800c892 <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d01a      	beq.n	800c936 <lwip_recvfrom_udp_raw+0x14a>
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d016      	beq.n	800c936 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d012      	beq.n	800c936 <lwip_recvfrom_udp_raw+0x14a>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d00e      	beq.n	800c936 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	6818      	ldr	r0, [r3, #0]
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	f103 0108 	add.w	r1, r3, #8
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	3304      	adds	r3, #4
 800c92e:	9300      	str	r3, [sp, #0]
 800c930:	4623      	mov	r3, r4
 800c932:	f7ff febb 	bl	800c6ac <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2200      	movs	r2, #0
 800c93a:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	691b      	ldr	r3, [r3, #16]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d007      	beq.n	800c954 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800c944:	2300      	movs	r3, #0
 800c946:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800c948:	7d7b      	ldrb	r3, [r7, #21]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d102      	bne.n	800c954 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2200      	movs	r2, #0
 800c952:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	f003 0301 	and.w	r3, r3, #1
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d106      	bne.n	800c96c <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	2200      	movs	r2, #0
 800c962:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	4618      	mov	r0, r3
 800c968:	f7ff fb18 	bl	800bf9c <netbuf_delete>
  }
  if (datagram_len) {
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d002      	beq.n	800c978 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	8b3a      	ldrh	r2, [r7, #24]
 800c976:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800c978:	2300      	movs	r3, #0
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	372c      	adds	r7, #44	@ 0x2c
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd90      	pop	{r4, r7, pc}
 800c982:	bf00      	nop
 800c984:	08029df0 	.word	0x08029df0
 800c988:	08029f94 	.word	0x08029f94
 800c98c:	08029e44 	.word	0x08029e44
 800c990:	08029fc0 	.word	0x08029fc0

0800c994 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b096      	sub	sp, #88	@ 0x58
 800c998:	af02      	add	r7, sp, #8
 800c99a:	60f8      	str	r0, [r7, #12]
 800c99c:	60b9      	str	r1, [r7, #8]
 800c99e:	607a      	str	r2, [r7, #4]
 800c9a0:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800c9a2:	68f8      	ldr	r0, [r7, #12]
 800c9a4:	f7ff fbca 	bl	800c13c <get_socket>
 800c9a8:	64f8      	str	r0, [r7, #76]	@ 0x4c
  if (!sock) {
 800c9aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d102      	bne.n	800c9b6 <lwip_recvfrom+0x22>
    return -1;
 800c9b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c9b4:	e078      	b.n	800caa8 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800c9b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c9c0:	2b10      	cmp	r3, #16
 800c9c2:	d112      	bne.n	800c9ea <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	68b9      	ldr	r1, [r7, #8]
 800c9ca:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800c9cc:	f7ff fd5e 	bl	800c48c <lwip_recv_tcp>
 800c9d0:	6478      	str	r0, [r7, #68]	@ 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800c9d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9d4:	9301      	str	r3, [sp, #4]
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	9300      	str	r3, [sp, #0]
 800c9da:	4b35      	ldr	r3, [pc, #212]	@ (800cab0 <lwip_recvfrom+0x11c>)
 800c9dc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c9de:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c9e0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800c9e2:	f7ff fed1 	bl	800c788 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800c9e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9e8:	e05e      	b.n	800caa8 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	877b      	strh	r3, [r7, #58]	@ 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	633b      	str	r3, [r7, #48]	@ 0x30
    vec.iov_len = len;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	637b      	str	r3, [r7, #52]	@ 0x34
    msg.msg_control = NULL;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	627b      	str	r3, [r7, #36]	@ 0x24
    msg.msg_controllen = 0;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    msg.msg_flags = 0;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    msg.msg_iov = &vec;
 800ca02:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ca06:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800ca08:	2301      	movs	r3, #1
 800ca0a:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800ca0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca0e:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800ca10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d002      	beq.n	800ca1c <lwip_recvfrom+0x88>
 800ca16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	e000      	b.n	800ca1e <lwip_recvfrom+0x8a>
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800ca20:	f107 013a 	add.w	r1, r7, #58	@ 0x3a
 800ca24:	f107 0214 	add.w	r2, r7, #20
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	9300      	str	r3, [sp, #0]
 800ca2c:	460b      	mov	r3, r1
 800ca2e:	6839      	ldr	r1, [r7, #0]
 800ca30:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800ca32:	f7ff fedb 	bl	800c7ec <lwip_recvfrom_udp_raw>
 800ca36:	4603      	mov	r3, r0
 800ca38:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    if (err != ERR_OK) {
 800ca3c:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d00e      	beq.n	800ca62 <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800ca44:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f7ff fa89 	bl	800bf60 <err_to_errno>
 800ca4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800ca50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d002      	beq.n	800ca5c <lwip_recvfrom+0xc8>
 800ca56:	4a17      	ldr	r2, [pc, #92]	@ (800cab4 <lwip_recvfrom+0x120>)
 800ca58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca5a:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800ca5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ca60:	e022      	b.n	800caa8 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800ca62:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ca64:	461a      	mov	r2, r3
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	bf28      	it	cs
 800ca6c:	4613      	movcs	r3, r2
 800ca6e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d206      	bcs.n	800ca84 <lwip_recvfrom+0xf0>
 800ca76:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ca78:	461a      	mov	r2, r3
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	bf28      	it	cs
 800ca80:	4613      	movcs	r3, r2
 800ca82:	e001      	b.n	800ca88 <lwip_recvfrom+0xf4>
 800ca84:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ca88:	647b      	str	r3, [r7, #68]	@ 0x44
    if (fromlen) {
 800ca8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d002      	beq.n	800ca96 <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800ca90:	69ba      	ldr	r2, [r7, #24]
 800ca92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca94:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800ca96:	2300      	movs	r3, #0
 800ca98:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d002      	beq.n	800caa6 <lwip_recvfrom+0x112>
 800caa0:	4a04      	ldr	r2, [pc, #16]	@ (800cab4 <lwip_recvfrom+0x120>)
 800caa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800caa4:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800caa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3750      	adds	r7, #80	@ 0x50
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}
 800cab0:	08029fcc 	.word	0x08029fcc
 800cab4:	20015124 	.word	0x20015124

0800cab8 <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b086      	sub	sp, #24
 800cabc:	af02      	add	r7, sp, #8
 800cabe:	60f8      	str	r0, [r7, #12]
 800cac0:	60b9      	str	r1, [r7, #8]
 800cac2:	607a      	str	r2, [r7, #4]
 800cac4:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 800cac6:	2300      	movs	r3, #0
 800cac8:	9301      	str	r3, [sp, #4]
 800caca:	2300      	movs	r3, #0
 800cacc:	9300      	str	r3, [sp, #0]
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	68b9      	ldr	r1, [r7, #8]
 800cad4:	68f8      	ldr	r0, [r7, #12]
 800cad6:	f7ff ff5d 	bl	800c994 <lwip_recvfrom>
 800cada:	4603      	mov	r3, r0
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3710      	adds	r7, #16
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b08a      	sub	sp, #40	@ 0x28
 800cae8:	af02      	add	r7, sp, #8
 800caea:	60f8      	str	r0, [r7, #12]
 800caec:	60b9      	str	r1, [r7, #8]
 800caee:	607a      	str	r2, [r7, #4]
 800caf0:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800caf2:	68f8      	ldr	r0, [r7, #12]
 800caf4:	f7ff fb22 	bl	800c13c <get_socket>
 800caf8:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800cafa:	69fb      	ldr	r3, [r7, #28]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d102      	bne.n	800cb06 <lwip_send+0x22>
    return -1;
 800cb00:	f04f 33ff 	mov.w	r3, #4294967295
 800cb04:	e046      	b.n	800cb94 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800cb06:	69fb      	ldr	r3, [r7, #28]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cb10:	2b10      	cmp	r3, #16
 800cb12:	d00b      	beq.n	800cb2c <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800cb14:	2300      	movs	r3, #0
 800cb16:	9301      	str	r3, [sp, #4]
 800cb18:	2300      	movs	r3, #0
 800cb1a:	9300      	str	r3, [sp, #0]
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	68b9      	ldr	r1, [r7, #8]
 800cb22:	68f8      	ldr	r0, [r7, #12]
 800cb24:	f000 f83c 	bl	800cba0 <lwip_sendto>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	e033      	b.n	800cb94 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d001      	beq.n	800cb3a <lwip_send+0x56>
 800cb36:	2203      	movs	r2, #3
 800cb38:	e000      	b.n	800cb3c <lwip_send+0x58>
 800cb3a:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	105b      	asrs	r3, r3, #1
 800cb40:	b25b      	sxtb	r3, r3
 800cb42:	f003 0304 	and.w	r3, r3, #4
 800cb46:	b25b      	sxtb	r3, r3
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800cb4c:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800cb52:	69fb      	ldr	r3, [r7, #28]
 800cb54:	6818      	ldr	r0, [r3, #0]
 800cb56:	7efa      	ldrb	r2, [r7, #27]
 800cb58:	f107 0310 	add.w	r3, r7, #16
 800cb5c:	9300      	str	r3, [sp, #0]
 800cb5e:	4613      	mov	r3, r2
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	68b9      	ldr	r1, [r7, #8]
 800cb64:	f7fd fd76 	bl	800a654 <netconn_write_partly>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800cb6c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cb70:	4618      	mov	r0, r3
 800cb72:	f7ff f9f5 	bl	800bf60 <err_to_errno>
 800cb76:	6178      	str	r0, [r7, #20]
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d002      	beq.n	800cb84 <lwip_send+0xa0>
 800cb7e:	4a07      	ldr	r2, [pc, #28]	@ (800cb9c <lwip_send+0xb8>)
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800cb84:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d101      	bne.n	800cb90 <lwip_send+0xac>
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	e001      	b.n	800cb94 <lwip_send+0xb0>
 800cb90:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3720      	adds	r7, #32
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}
 800cb9c:	20015124 	.word	0x20015124

0800cba0 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b08e      	sub	sp, #56	@ 0x38
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	60f8      	str	r0, [r7, #12]
 800cba8:	60b9      	str	r1, [r7, #8]
 800cbaa:	607a      	str	r2, [r7, #4]
 800cbac:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800cbae:	68f8      	ldr	r0, [r7, #12]
 800cbb0:	f7ff fac4 	bl	800c13c <get_socket>
 800cbb4:	6338      	str	r0, [r7, #48]	@ 0x30
  if (!sock) {
 800cbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d102      	bne.n	800cbc2 <lwip_sendto+0x22>
    return -1;
 800cbbc:	f04f 33ff 	mov.w	r3, #4294967295
 800cbc0:	e093      	b.n	800ccea <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800cbc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cbcc:	2b10      	cmp	r3, #16
 800cbce:	d107      	bne.n	800cbe0 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	687a      	ldr	r2, [r7, #4]
 800cbd4:	68b9      	ldr	r1, [r7, #8]
 800cbd6:	68f8      	ldr	r0, [r7, #12]
 800cbd8:	f7ff ff84 	bl	800cae4 <lwip_send>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	e084      	b.n	800ccea <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cbe6:	d30a      	bcc.n	800cbfe <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800cbe8:	235a      	movs	r3, #90	@ 0x5a
 800cbea:	623b      	str	r3, [r7, #32]
 800cbec:	6a3b      	ldr	r3, [r7, #32]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d002      	beq.n	800cbf8 <lwip_sendto+0x58>
 800cbf2:	4a40      	ldr	r2, [pc, #256]	@ (800ccf4 <lwip_sendto+0x154>)
 800cbf4:	6a3b      	ldr	r3, [r7, #32]
 800cbf6:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800cbf8:	f04f 33ff 	mov.w	r3, #4294967295
 800cbfc:	e075      	b.n	800ccea <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800cc02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d102      	bne.n	800cc0e <lwip_sendto+0x6e>
 800cc08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d023      	beq.n	800cc56 <lwip_sendto+0xb6>
 800cc0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc10:	2b10      	cmp	r3, #16
 800cc12:	d10b      	bne.n	800cc2c <lwip_sendto+0x8c>
 800cc14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d008      	beq.n	800cc2c <lwip_sendto+0x8c>
 800cc1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc1c:	785b      	ldrb	r3, [r3, #1]
 800cc1e:	2b02      	cmp	r3, #2
 800cc20:	d104      	bne.n	800cc2c <lwip_sendto+0x8c>
 800cc22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc24:	f003 0303 	and.w	r3, r3, #3
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d014      	beq.n	800cc56 <lwip_sendto+0xb6>
 800cc2c:	4b32      	ldr	r3, [pc, #200]	@ (800ccf8 <lwip_sendto+0x158>)
 800cc2e:	f240 6252 	movw	r2, #1618	@ 0x652
 800cc32:	4932      	ldr	r1, [pc, #200]	@ (800ccfc <lwip_sendto+0x15c>)
 800cc34:	4832      	ldr	r0, [pc, #200]	@ (800cd00 <lwip_sendto+0x160>)
 800cc36:	f01b f97d 	bl	8027f34 <iprintf>
 800cc3a:	f06f 000f 	mvn.w	r0, #15
 800cc3e:	f7ff f98f 	bl	800bf60 <err_to_errno>
 800cc42:	62b8      	str	r0, [r7, #40]	@ 0x28
 800cc44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d002      	beq.n	800cc50 <lwip_sendto+0xb0>
 800cc4a:	4a2a      	ldr	r2, [pc, #168]	@ (800ccf4 <lwip_sendto+0x154>)
 800cc4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc4e:	6013      	str	r3, [r2, #0]
 800cc50:	f04f 33ff 	mov.w	r3, #4294967295
 800cc54:	e049      	b.n	800ccea <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800cc56:	2300      	movs	r3, #0
 800cc58:	617b      	str	r3, [r7, #20]
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800cc5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d00a      	beq.n	800cc7a <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800cc64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc66:	685b      	ldr	r3, [r3, #4]
 800cc68:	61bb      	str	r3, [r7, #24]
 800cc6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc6c:	885b      	ldrh	r3, [r3, #2]
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f000 fe36 	bl	800d8e0 <lwip_htons>
 800cc74:	4603      	mov	r3, r0
 800cc76:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800cc78:	e003      	b.n	800cc82 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	86bb      	strh	r3, [r7, #52]	@ 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800cc7e:	2300      	movs	r3, #0
 800cc80:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800cc82:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800cc84:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800cc86:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cc88:	f107 0310 	add.w	r3, r7, #16
 800cc8c:	68b9      	ldr	r1, [r7, #8]
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7ff f9cc 	bl	800c02c <netbuf_ref>
 800cc94:	4603      	mov	r3, r0
 800cc96:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800cc9a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d10a      	bne.n	800ccb8 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800cca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f107 0210 	add.w	r2, r7, #16
 800ccaa:	4611      	mov	r1, r2
 800ccac:	4618      	mov	r0, r3
 800ccae:	f7fd fca3 	bl	800a5f8 <netconn_send>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800ccb8:	f107 0310 	add.w	r3, r7, #16
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f7ff f98d 	bl	800bfdc <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800ccc2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f7ff f94a 	bl	800bf60 <err_to_errno>
 800cccc:	6278      	str	r0, [r7, #36]	@ 0x24
 800ccce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d002      	beq.n	800ccda <lwip_sendto+0x13a>
 800ccd4:	4a07      	ldr	r2, [pc, #28]	@ (800ccf4 <lwip_sendto+0x154>)
 800ccd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccd8:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800ccda:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d101      	bne.n	800cce6 <lwip_sendto+0x146>
 800cce2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cce4:	e001      	b.n	800ccea <lwip_sendto+0x14a>
 800cce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3738      	adds	r7, #56	@ 0x38
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	20015124 	.word	0x20015124
 800ccf8:	08029df0 	.word	0x08029df0
 800ccfc:	0802a0d0 	.word	0x0802a0d0
 800cd00:	08029e44 	.word	0x08029e44

0800cd04 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b086      	sub	sp, #24
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	60f8      	str	r0, [r7, #12]
 800cd0c:	60b9      	str	r1, [r7, #8]
 800cd0e:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	2b03      	cmp	r3, #3
 800cd14:	d009      	beq.n	800cd2a <lwip_socket+0x26>
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	2b03      	cmp	r3, #3
 800cd1a:	dc23      	bgt.n	800cd64 <lwip_socket+0x60>
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	2b01      	cmp	r3, #1
 800cd20:	d019      	beq.n	800cd56 <lwip_socket+0x52>
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	2b02      	cmp	r3, #2
 800cd26:	d009      	beq.n	800cd3c <lwip_socket+0x38>
 800cd28:	e01c      	b.n	800cd64 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	b2db      	uxtb	r3, r3
 800cd2e:	4a22      	ldr	r2, [pc, #136]	@ (800cdb8 <lwip_socket+0xb4>)
 800cd30:	4619      	mov	r1, r3
 800cd32:	2040      	movs	r0, #64	@ 0x40
 800cd34:	f7fd f908 	bl	8009f48 <netconn_new_with_proto_and_callback>
 800cd38:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800cd3a:	e019      	b.n	800cd70 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2b88      	cmp	r3, #136	@ 0x88
 800cd40:	d101      	bne.n	800cd46 <lwip_socket+0x42>
 800cd42:	2321      	movs	r3, #33	@ 0x21
 800cd44:	e000      	b.n	800cd48 <lwip_socket+0x44>
 800cd46:	2320      	movs	r3, #32
 800cd48:	4a1b      	ldr	r2, [pc, #108]	@ (800cdb8 <lwip_socket+0xb4>)
 800cd4a:	2100      	movs	r1, #0
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f7fd f8fb 	bl	8009f48 <netconn_new_with_proto_and_callback>
 800cd52:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800cd54:	e00c      	b.n	800cd70 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800cd56:	4a18      	ldr	r2, [pc, #96]	@ (800cdb8 <lwip_socket+0xb4>)
 800cd58:	2100      	movs	r1, #0
 800cd5a:	2010      	movs	r0, #16
 800cd5c:	f7fd f8f4 	bl	8009f48 <netconn_new_with_proto_and_callback>
 800cd60:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800cd62:	e005      	b.n	800cd70 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800cd64:	4b15      	ldr	r3, [pc, #84]	@ (800cdbc <lwip_socket+0xb8>)
 800cd66:	2216      	movs	r2, #22
 800cd68:	601a      	str	r2, [r3, #0]
      return -1;
 800cd6a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd6e:	e01e      	b.n	800cdae <lwip_socket+0xaa>
  }

  if (!conn) {
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d105      	bne.n	800cd82 <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800cd76:	4b11      	ldr	r3, [pc, #68]	@ (800cdbc <lwip_socket+0xb8>)
 800cd78:	2269      	movs	r2, #105	@ 0x69
 800cd7a:	601a      	str	r2, [r3, #0]
    return -1;
 800cd7c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd80:	e015      	b.n	800cdae <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800cd82:	2100      	movs	r1, #0
 800cd84:	6978      	ldr	r0, [r7, #20]
 800cd86:	f7ff f9f1 	bl	800c16c <alloc_socket>
 800cd8a:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd92:	d108      	bne.n	800cda6 <lwip_socket+0xa2>
    netconn_delete(conn);
 800cd94:	6978      	ldr	r0, [r7, #20]
 800cd96:	f7fd f975 	bl	800a084 <netconn_delete>
    set_errno(ENFILE);
 800cd9a:	4b08      	ldr	r3, [pc, #32]	@ (800cdbc <lwip_socket+0xb8>)
 800cd9c:	2217      	movs	r2, #23
 800cd9e:	601a      	str	r2, [r3, #0]
    return -1;
 800cda0:	f04f 33ff 	mov.w	r3, #4294967295
 800cda4:	e003      	b.n	800cdae <lwip_socket+0xaa>
  }
  conn->socket = i;
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	693a      	ldr	r2, [r7, #16]
 800cdaa:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800cdac:	693b      	ldr	r3, [r7, #16]
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3718      	adds	r7, #24
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}
 800cdb6:	bf00      	nop
 800cdb8:	0800ce49 	.word	0x0800ce49
 800cdbc:	20015124 	.word	0x20015124

0800cdc0 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b087      	sub	sp, #28
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	60b9      	str	r1, [r7, #8]
 800cdca:	607a      	str	r2, [r7, #4]
 800cdcc:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800cdce:	2300      	movs	r3, #0
 800cdd0:	617b      	str	r3, [r7, #20]
 800cdd2:	e02c      	b.n	800ce2e <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	695a      	ldr	r2, [r3, #20]
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	00db      	lsls	r3, r3, #3
 800cddc:	4413      	add	r3, r2
 800cdde:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	68ba      	ldr	r2, [r7, #8]
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d11e      	bne.n	800ce28 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d009      	beq.n	800ce04 <lwip_poll_should_wake+0x44>
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	f003 0301 	and.w	r3, r3, #1
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d001      	beq.n	800ce04 <lwip_poll_should_wake+0x44>
        return 1;
 800ce00:	2301      	movs	r3, #1
 800ce02:	e01a      	b.n	800ce3a <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d009      	beq.n	800ce1e <lwip_poll_should_wake+0x5e>
 800ce0a:	693b      	ldr	r3, [r7, #16]
 800ce0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	f003 0302 	and.w	r3, r3, #2
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d001      	beq.n	800ce1e <lwip_poll_should_wake+0x5e>
        return 1;
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	e00d      	b.n	800ce3a <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800ce1e:	6a3b      	ldr	r3, [r7, #32]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d001      	beq.n	800ce28 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800ce24:	2301      	movs	r3, #1
 800ce26:	e008      	b.n	800ce3a <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	617b      	str	r3, [r7, #20]
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	699b      	ldr	r3, [r3, #24]
 800ce32:	697a      	ldr	r2, [r7, #20]
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d3cd      	bcc.n	800cdd4 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800ce38:	2300      	movs	r3, #0
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	371c      	adds	r7, #28
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr
	...

0800ce48 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b08a      	sub	sp, #40	@ 0x28
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	460b      	mov	r3, r1
 800ce52:	70fb      	strb	r3, [r7, #3]
 800ce54:	4613      	mov	r3, r2
 800ce56:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	f000 80a4 	beq.w	800cfa8 <event_callback+0x160>
    s = conn->socket;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	699b      	ldr	r3, [r3, #24]
 800ce64:	627b      	str	r3, [r7, #36]	@ 0x24
    if (s < 0) {
 800ce66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	da18      	bge.n	800ce9e <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800ce6c:	f00c f852 	bl	8018f14 <sys_arch_protect>
 800ce70:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	699b      	ldr	r3, [r3, #24]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	da0b      	bge.n	800ce92 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800ce7a:	78fb      	ldrb	r3, [r7, #3]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d104      	bne.n	800ce8a <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	699b      	ldr	r3, [r3, #24]
 800ce84:	1e5a      	subs	r2, r3, #1
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800ce8a:	69f8      	ldr	r0, [r7, #28]
 800ce8c:	f00c f850 	bl	8018f30 <sys_arch_unprotect>
        return;
 800ce90:	e08d      	b.n	800cfae <event_callback+0x166>
      }
      s = conn->socket;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	699b      	ldr	r3, [r3, #24]
 800ce96:	627b      	str	r3, [r7, #36]	@ 0x24
      SYS_ARCH_UNPROTECT(lev);
 800ce98:	69f8      	ldr	r0, [r7, #28]
 800ce9a:	f00c f849 	bl	8018f30 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800ce9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cea0:	f7ff f94c 	bl	800c13c <get_socket>
 800cea4:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800cea6:	69bb      	ldr	r3, [r7, #24]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d07f      	beq.n	800cfac <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800ceac:	2301      	movs	r3, #1
 800ceae:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800ceb0:	f00c f830 	bl	8018f14 <sys_arch_protect>
 800ceb4:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800ceb6:	78fb      	ldrb	r3, [r7, #3]
 800ceb8:	2b04      	cmp	r3, #4
 800ceba:	d83e      	bhi.n	800cf3a <event_callback+0xf2>
 800cebc:	a201      	add	r2, pc, #4	@ (adr r2, 800cec4 <event_callback+0x7c>)
 800cebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cec2:	bf00      	nop
 800cec4:	0800ced9 	.word	0x0800ced9
 800cec8:	0800cefb 	.word	0x0800cefb
 800cecc:	0800cf13 	.word	0x0800cf13
 800ced0:	0800cf27 	.word	0x0800cf27
 800ced4:	0800cf33 	.word	0x0800cf33
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800ced8:	69bb      	ldr	r3, [r7, #24]
 800ceda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cede:	b29b      	uxth	r3, r3
 800cee0:	3301      	adds	r3, #1
 800cee2:	b29b      	uxth	r3, r3
 800cee4:	b21a      	sxth	r2, r3
 800cee6:	69bb      	ldr	r3, [r7, #24]
 800cee8:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800ceea:	69bb      	ldr	r3, [r7, #24]
 800ceec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	dd2a      	ble.n	800cf4a <event_callback+0x102>
        check_waiters = 0;
 800cef4:	2300      	movs	r3, #0
 800cef6:	623b      	str	r3, [r7, #32]
      }
      break;
 800cef8:	e027      	b.n	800cf4a <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cf00:	b29b      	uxth	r3, r3
 800cf02:	3b01      	subs	r3, #1
 800cf04:	b29b      	uxth	r3, r3
 800cf06:	b21a      	sxth	r2, r3
 800cf08:	69bb      	ldr	r3, [r7, #24]
 800cf0a:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	623b      	str	r3, [r7, #32]
      break;
 800cf10:	e01c      	b.n	800cf4c <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800cf12:	69bb      	ldr	r3, [r7, #24]
 800cf14:	895b      	ldrh	r3, [r3, #10]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d001      	beq.n	800cf1e <event_callback+0xd6>
        check_waiters = 0;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800cf1e:	69bb      	ldr	r3, [r7, #24]
 800cf20:	2201      	movs	r2, #1
 800cf22:	815a      	strh	r2, [r3, #10]
      break;
 800cf24:	e012      	b.n	800cf4c <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800cf26:	69bb      	ldr	r3, [r7, #24]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	623b      	str	r3, [r7, #32]
      break;
 800cf30:	e00c      	b.n	800cf4c <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800cf32:	69bb      	ldr	r3, [r7, #24]
 800cf34:	2201      	movs	r2, #1
 800cf36:	819a      	strh	r2, [r3, #12]
      break;
 800cf38:	e008      	b.n	800cf4c <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800cf3a:	4b1e      	ldr	r3, [pc, #120]	@ (800cfb4 <event_callback+0x16c>)
 800cf3c:	f44f 621f 	mov.w	r2, #2544	@ 0x9f0
 800cf40:	491d      	ldr	r1, [pc, #116]	@ (800cfb8 <event_callback+0x170>)
 800cf42:	481e      	ldr	r0, [pc, #120]	@ (800cfbc <event_callback+0x174>)
 800cf44:	f01a fff6 	bl	8027f34 <iprintf>
      break;
 800cf48:	e000      	b.n	800cf4c <event_callback+0x104>
      break;
 800cf4a:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800cf4c:	69bb      	ldr	r3, [r7, #24]
 800cf4e:	7b9b      	ldrb	r3, [r3, #14]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d025      	beq.n	800cfa0 <event_callback+0x158>
 800cf54:	6a3b      	ldr	r3, [r7, #32]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d022      	beq.n	800cfa0 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800cf5a:	69bb      	ldr	r3, [r7, #24]
 800cf5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	bfcc      	ite	gt
 800cf64:	2301      	movgt	r3, #1
 800cf66:	2300      	movle	r3, #0
 800cf68:	b2db      	uxtb	r3, r3
 800cf6a:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800cf6c:	69bb      	ldr	r3, [r7, #24]
 800cf6e:	895b      	ldrh	r3, [r3, #10]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	bf14      	ite	ne
 800cf74:	2301      	movne	r3, #1
 800cf76:	2300      	moveq	r3, #0
 800cf78:	b2db      	uxtb	r3, r3
 800cf7a:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800cf7c:	69bb      	ldr	r3, [r7, #24]
 800cf7e:	899b      	ldrh	r3, [r3, #12]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	bf14      	ite	ne
 800cf84:	2301      	movne	r3, #1
 800cf86:	2300      	moveq	r3, #0
 800cf88:	b2db      	uxtb	r3, r3
 800cf8a:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800cf8c:	69f8      	ldr	r0, [r7, #28]
 800cf8e:	f00b ffcf 	bl	8018f30 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	693a      	ldr	r2, [r7, #16]
 800cf96:	6979      	ldr	r1, [r7, #20]
 800cf98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cf9a:	f000 f811 	bl	800cfc0 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800cf9e:	e006      	b.n	800cfae <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800cfa0:	69f8      	ldr	r0, [r7, #28]
 800cfa2:	f00b ffc5 	bl	8018f30 <sys_arch_unprotect>
 800cfa6:	e002      	b.n	800cfae <event_callback+0x166>
    return;
 800cfa8:	bf00      	nop
 800cfaa:	e000      	b.n	800cfae <event_callback+0x166>
      return;
 800cfac:	bf00      	nop
  }
  done_socket(sock);
}
 800cfae:	3728      	adds	r7, #40	@ 0x28
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}
 800cfb4:	08029df0 	.word	0x08029df0
 800cfb8:	0802a16c 	.word	0x0802a16c
 800cfbc:	08029e44 	.word	0x08029e44

0800cfc0 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b088      	sub	sp, #32
 800cfc4:	af02      	add	r7, sp, #8
 800cfc6:	60f8      	str	r0, [r7, #12]
 800cfc8:	60b9      	str	r1, [r7, #8]
 800cfca:	607a      	str	r2, [r7, #4]
 800cfcc:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800cfce:	4b42      	ldr	r3, [pc, #264]	@ (800d0d8 <select_check_waiters+0x118>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	617b      	str	r3, [r7, #20]
 800cfd4:	e078      	b.n	800d0c8 <select_check_waiters+0x108>
    if (scb->sem_signalled == 0) {
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	69db      	ldr	r3, [r3, #28]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d171      	bne.n	800d0c2 <select_check_waiters+0x102>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	695b      	ldr	r3, [r3, #20]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d009      	beq.n	800cffe <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	9300      	str	r3, [sp, #0]
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	68ba      	ldr	r2, [r7, #8]
 800cff2:	68f9      	ldr	r1, [r7, #12]
 800cff4:	6978      	ldr	r0, [r7, #20]
 800cff6:	f7ff fee3 	bl	800cdc0 <lwip_poll_should_wake>
 800cffa:	6138      	str	r0, [r7, #16]
 800cffc:	e056      	b.n	800d0ac <select_check_waiters+0xec>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d017      	beq.n	800d034 <select_check_waiters+0x74>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	689b      	ldr	r3, [r3, #8]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d013      	beq.n	800d034 <select_check_waiters+0x74>
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	689a      	ldr	r2, [r3, #8]
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	2b00      	cmp	r3, #0
 800d014:	da00      	bge.n	800d018 <select_check_waiters+0x58>
 800d016:	331f      	adds	r3, #31
 800d018:	115b      	asrs	r3, r3, #5
 800d01a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	f003 031f 	and.w	r3, r3, #31
 800d024:	fa22 f303 	lsr.w	r3, r2, r3
 800d028:	f003 0301 	and.w	r3, r3, #1
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d001      	beq.n	800d034 <select_check_waiters+0x74>
            do_signal = 1;
 800d030:	2301      	movs	r3, #1
 800d032:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d01a      	beq.n	800d070 <select_check_waiters+0xb0>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d117      	bne.n	800d070 <select_check_waiters+0xb0>
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	68db      	ldr	r3, [r3, #12]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d013      	beq.n	800d070 <select_check_waiters+0xb0>
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	68da      	ldr	r2, [r3, #12]
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	da00      	bge.n	800d054 <select_check_waiters+0x94>
 800d052:	331f      	adds	r3, #31
 800d054:	115b      	asrs	r3, r3, #5
 800d056:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f003 031f 	and.w	r3, r3, #31
 800d060:	fa22 f303 	lsr.w	r3, r2, r3
 800d064:	f003 0301 	and.w	r3, r3, #1
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d001      	beq.n	800d070 <select_check_waiters+0xb0>
            do_signal = 1;
 800d06c:	2301      	movs	r3, #1
 800d06e:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d01a      	beq.n	800d0ac <select_check_waiters+0xec>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d117      	bne.n	800d0ac <select_check_waiters+0xec>
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	691b      	ldr	r3, [r3, #16]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d013      	beq.n	800d0ac <select_check_waiters+0xec>
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	691a      	ldr	r2, [r3, #16]
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	da00      	bge.n	800d090 <select_check_waiters+0xd0>
 800d08e:	331f      	adds	r3, #31
 800d090:	115b      	asrs	r3, r3, #5
 800d092:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f003 031f 	and.w	r3, r3, #31
 800d09c:	fa22 f303 	lsr.w	r3, r2, r3
 800d0a0:	f003 0301 	and.w	r3, r3, #1
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d001      	beq.n	800d0ac <select_check_waiters+0xec>
            do_signal = 1;
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d007      	beq.n	800d0c2 <select_check_waiters+0x102>
        scb->sem_signalled = 1;
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	3320      	adds	r3, #32
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f00b fe85 	bl	8018dcc <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	617b      	str	r3, [r7, #20]
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d183      	bne.n	800cfd6 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800d0ce:	bf00      	nop
 800d0d0:	bf00      	nop
 800d0d2:	3718      	adds	r7, #24
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	2000d080 	.word	0x2000d080

0800d0dc <lwip_sockopt_to_ipopt>:
}
#endif  /* LWIP_TCPIP_CORE_LOCKING */

static int
lwip_sockopt_to_ipopt(int optname)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b082      	sub	sp, #8
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  /* Map SO_* values to our internal SOF_* values
   * We should not rely on #defines in socket.h
   * being in sync with ip.h.
   */
  switch (optname) {
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2b20      	cmp	r3, #32
 800d0e8:	d009      	beq.n	800d0fe <lwip_sockopt_to_ipopt+0x22>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2b20      	cmp	r3, #32
 800d0ee:	dc0c      	bgt.n	800d10a <lwip_sockopt_to_ipopt+0x2e>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2b04      	cmp	r3, #4
 800d0f4:	d007      	beq.n	800d106 <lwip_sockopt_to_ipopt+0x2a>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2b08      	cmp	r3, #8
 800d0fa:	d002      	beq.n	800d102 <lwip_sockopt_to_ipopt+0x26>
 800d0fc:	e005      	b.n	800d10a <lwip_sockopt_to_ipopt+0x2e>
  case SO_BROADCAST:
    return SOF_BROADCAST;
 800d0fe:	2320      	movs	r3, #32
 800d100:	e00b      	b.n	800d11a <lwip_sockopt_to_ipopt+0x3e>
  case SO_KEEPALIVE:
    return SOF_KEEPALIVE;
 800d102:	2308      	movs	r3, #8
 800d104:	e009      	b.n	800d11a <lwip_sockopt_to_ipopt+0x3e>
  case SO_REUSEADDR:
    return SOF_REUSEADDR;
 800d106:	2304      	movs	r3, #4
 800d108:	e007      	b.n	800d11a <lwip_sockopt_to_ipopt+0x3e>
  default:
    LWIP_ASSERT("Unknown socket option", 0);
 800d10a:	4b06      	ldr	r3, [pc, #24]	@ (800d124 <lwip_sockopt_to_ipopt+0x48>)
 800d10c:	f640 3239 	movw	r2, #2873	@ 0xb39
 800d110:	4905      	ldr	r1, [pc, #20]	@ (800d128 <lwip_sockopt_to_ipopt+0x4c>)
 800d112:	4806      	ldr	r0, [pc, #24]	@ (800d12c <lwip_sockopt_to_ipopt+0x50>)
 800d114:	f01a ff0e 	bl	8027f34 <iprintf>
    return 0;
 800d118:	2300      	movs	r3, #0
  }
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3708      	adds	r7, #8
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}
 800d122:	bf00      	nop
 800d124:	08029df0 	.word	0x08029df0
 800d128:	0802a17c 	.word	0x0802a17c
 800d12c:	08029e44 	.word	0x08029e44

0800d130 <lwip_setsockopt>:
  return err;
}

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b08a      	sub	sp, #40	@ 0x28
 800d134:	af02      	add	r7, sp, #8
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	60b9      	str	r1, [r7, #8]
 800d13a:	607a      	str	r2, [r7, #4]
 800d13c:	603b      	str	r3, [r7, #0]
  int err = 0;
 800d13e:	2300      	movs	r3, #0
 800d140:	61fb      	str	r3, [r7, #28]
  struct lwip_sock *sock = get_socket(s);
 800d142:	68f8      	ldr	r0, [r7, #12]
 800d144:	f7fe fffa 	bl	800c13c <get_socket>
 800d148:	61b8      	str	r0, [r7, #24]
#if !LWIP_TCPIP_CORE_LOCKING
  err_t cberr;
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
 800d14a:	69bb      	ldr	r3, [r7, #24]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d102      	bne.n	800d156 <lwip_setsockopt+0x26>
    return -1;
 800d150:	f04f 33ff 	mov.w	r3, #4294967295
 800d154:	e02b      	b.n	800d1ae <lwip_setsockopt+0x7e>
  }

  if (NULL == optval) {
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d10a      	bne.n	800d172 <lwip_setsockopt+0x42>
    sock_set_errno(sock, EFAULT);
 800d15c:	230e      	movs	r3, #14
 800d15e:	613b      	str	r3, [r7, #16]
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d002      	beq.n	800d16c <lwip_setsockopt+0x3c>
 800d166:	4a14      	ldr	r2, [pc, #80]	@ (800d1b8 <lwip_setsockopt+0x88>)
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800d16c:	f04f 33ff 	mov.w	r3, #4294967295
 800d170:	e01d      	b.n	800d1ae <lwip_setsockopt+0x7e>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
 800d172:	4812      	ldr	r0, [pc, #72]	@ (800d1bc <lwip_setsockopt+0x8c>)
 800d174:	f00b fe8c 	bl	8018e90 <sys_mutex_lock>
  err = lwip_setsockopt_impl(s, level, optname, optval, optlen);
 800d178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d17a:	9300      	str	r3, [sp, #0]
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	687a      	ldr	r2, [r7, #4]
 800d180:	68b9      	ldr	r1, [r7, #8]
 800d182:	68f8      	ldr	r0, [r7, #12]
 800d184:	f000 f81c 	bl	800d1c0 <lwip_setsockopt_impl>
 800d188:	61f8      	str	r0, [r7, #28]
  UNLOCK_TCPIP_CORE();
 800d18a:	480c      	ldr	r0, [pc, #48]	@ (800d1bc <lwip_setsockopt+0x8c>)
 800d18c:	f00b fe8f 	bl	8018eae <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif  /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
 800d190:	69fb      	ldr	r3, [r7, #28]
 800d192:	617b      	str	r3, [r7, #20]
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d002      	beq.n	800d1a0 <lwip_setsockopt+0x70>
 800d19a:	4a07      	ldr	r2, [pc, #28]	@ (800d1b8 <lwip_setsockopt+0x88>)
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return err ? -1 : 0;
 800d1a0:	69fb      	ldr	r3, [r7, #28]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d002      	beq.n	800d1ac <lwip_setsockopt+0x7c>
 800d1a6:	f04f 33ff 	mov.w	r3, #4294967295
 800d1aa:	e000      	b.n	800d1ae <lwip_setsockopt+0x7e>
 800d1ac:	2300      	movs	r3, #0
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3720      	adds	r7, #32
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop
 800d1b8:	20015124 	.word	0x20015124
 800d1bc:	2000d090 	.word	0x2000d090

0800d1c0 <lwip_setsockopt_impl>:
/** lwip_setsockopt_impl: the actual implementation of setsockopt:
 * same argument as lwip_setsockopt, either called directly or through callback
 */
static int
lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b08a      	sub	sp, #40	@ 0x28
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	60f8      	str	r0, [r7, #12]
 800d1c8:	60b9      	str	r1, [r7, #8]
 800d1ca:	607a      	str	r2, [r7, #4]
 800d1cc:	603b      	str	r3, [r7, #0]
  int err = 0;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	627b      	str	r3, [r7, #36]	@ 0x24
  struct lwip_sock *sock = tryget_socket(s);
 800d1d2:	68f8      	ldr	r0, [r7, #12]
 800d1d4:	f7fe ff9b 	bl	800c10e <tryget_socket>
 800d1d8:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800d1da:	69fb      	ldr	r3, [r7, #28]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d101      	bne.n	800d1e4 <lwip_setsockopt_impl+0x24>
    return EBADF;
 800d1e0:	2309      	movs	r3, #9
 800d1e2:	e1b9      	b.n	800d558 <lwip_setsockopt_impl+0x398>
  if (LWIP_HOOK_SOCKETS_SETSOCKOPT(s, sock, level, optname, optval, optlen, &err)) {
    return err;
  }
#endif

  switch (level) {
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d015      	beq.n	800d21a <lwip_setsockopt_impl+0x5a>
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d1f4:	f280 81ac 	bge.w	800d550 <lwip_setsockopt_impl+0x390>
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	2bff      	cmp	r3, #255	@ 0xff
 800d1fc:	f000 81a4 	beq.w	800d548 <lwip_setsockopt_impl+0x388>
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	2bff      	cmp	r3, #255	@ 0xff
 800d204:	f300 81a4 	bgt.w	800d550 <lwip_setsockopt_impl+0x390>
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	f000 8112 	beq.w	800d434 <lwip_setsockopt_impl+0x274>
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	2b06      	cmp	r3, #6
 800d214:	f000 8148 	beq.w	800d4a8 <lwip_setsockopt_impl+0x2e8>
 800d218:	e19a      	b.n	800d550 <lwip_setsockopt_impl+0x390>

    /* Level: SOL_SOCKET */
    case SOL_SOCKET:
      switch (optname) {
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f241 020b 	movw	r2, #4107	@ 0x100b
 800d220:	4293      	cmp	r3, r2
 800d222:	f000 80c3 	beq.w	800d3ac <lwip_setsockopt_impl+0x1ec>
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f241 020b 	movw	r2, #4107	@ 0x100b
 800d22c:	4293      	cmp	r3, r2
 800d22e:	f300 80fd 	bgt.w	800d42c <lwip_setsockopt_impl+0x26c>
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f241 020a 	movw	r2, #4106	@ 0x100a
 800d238:	4293      	cmp	r3, r2
 800d23a:	f000 8082 	beq.w	800d342 <lwip_setsockopt_impl+0x182>
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f241 020a 	movw	r2, #4106	@ 0x100a
 800d244:	4293      	cmp	r3, r2
 800d246:	f300 80f1 	bgt.w	800d42c <lwip_setsockopt_impl+0x26c>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f241 0206 	movw	r2, #4102	@ 0x1006
 800d250:	4293      	cmp	r3, r2
 800d252:	d050      	beq.n	800d2f6 <lwip_setsockopt_impl+0x136>
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f241 0206 	movw	r2, #4102	@ 0x1006
 800d25a:	4293      	cmp	r3, r2
 800d25c:	f300 80e6 	bgt.w	800d42c <lwip_setsockopt_impl+0x26c>
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2b08      	cmp	r3, #8
 800d264:	d003      	beq.n	800d26e <lwip_setsockopt_impl+0xae>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2b20      	cmp	r3, #32
 800d26a:	f040 80df 	bne.w	800d42c <lwip_setsockopt_impl+0x26c>
        case SO_BROADCAST:
        case SO_KEEPALIVE:
#if SO_REUSE
        case SO_REUSEADDR:
#endif /* SO_REUSE */
          if ((optname == SO_BROADCAST) &&
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2b20      	cmp	r3, #32
 800d272:	d108      	bne.n	800d286 <lwip_setsockopt_impl+0xc6>
              (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_UDP)) {
 800d274:	69fb      	ldr	r3, [r7, #28]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	781b      	ldrb	r3, [r3, #0]
 800d27a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if ((optname == SO_BROADCAST) &&
 800d27e:	2b20      	cmp	r3, #32
 800d280:	d001      	beq.n	800d286 <lwip_setsockopt_impl+0xc6>
            done_socket(sock);
            return ENOPROTOOPT;
 800d282:	235c      	movs	r3, #92	@ 0x5c
 800d284:	e168      	b.n	800d558 <lwip_setsockopt_impl+0x398>
          }

          optname = lwip_sockopt_to_ipopt(optname);
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f7ff ff28 	bl	800d0dc <lwip_sockopt_to_ipopt>
 800d28c:	6078      	str	r0, [r7, #4]

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800d28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d290:	2b03      	cmp	r3, #3
 800d292:	d801      	bhi.n	800d298 <lwip_setsockopt_impl+0xd8>
 800d294:	2316      	movs	r3, #22
 800d296:	e15f      	b.n	800d558 <lwip_setsockopt_impl+0x398>
 800d298:	69fb      	ldr	r3, [r7, #28]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d004      	beq.n	800d2aa <lwip_setsockopt_impl+0xea>
 800d2a0:	69fb      	ldr	r3, [r7, #28]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d101      	bne.n	800d2ae <lwip_setsockopt_impl+0xee>
 800d2aa:	2316      	movs	r3, #22
 800d2ac:	e154      	b.n	800d558 <lwip_setsockopt_impl+0x398>
          if (*(const int *)optval) {
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d00e      	beq.n	800d2d4 <lwip_setsockopt_impl+0x114>
            ip_set_option(sock->conn->pcb.ip, optname);
 800d2b6:	69fb      	ldr	r3, [r7, #28]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	7a5b      	ldrb	r3, [r3, #9]
 800d2be:	b25a      	sxtb	r2, r3
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	b25b      	sxtb	r3, r3
 800d2c4:	4313      	orrs	r3, r2
 800d2c6:	b25a      	sxtb	r2, r3
 800d2c8:	69fb      	ldr	r3, [r7, #28]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	b2d2      	uxtb	r2, r2
 800d2d0:	725a      	strb	r2, [r3, #9]
          } else {
            ip_reset_option(sock->conn->pcb.ip, optname);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                                      s, optname, (*(const int *)optval ? "on" : "off")));
          break;
 800d2d2:	e0ae      	b.n	800d432 <lwip_setsockopt_impl+0x272>
            ip_reset_option(sock->conn->pcb.ip, optname);
 800d2d4:	69fb      	ldr	r3, [r7, #28]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	685b      	ldr	r3, [r3, #4]
 800d2da:	7a5b      	ldrb	r3, [r3, #9]
 800d2dc:	b25a      	sxtb	r2, r3
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	b25b      	sxtb	r3, r3
 800d2e2:	43db      	mvns	r3, r3
 800d2e4:	b25b      	sxtb	r3, r3
 800d2e6:	4013      	ands	r3, r2
 800d2e8:	b25a      	sxtb	r2, r3
 800d2ea:	69fb      	ldr	r3, [r7, #28]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	685b      	ldr	r3, [r3, #4]
 800d2f0:	b2d2      	uxtb	r2, r2
 800d2f2:	725a      	strb	r2, [r3, #9]
          break;
 800d2f4:	e09d      	b.n	800d432 <lwip_setsockopt_impl+0x272>
        }
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
        case SO_RCVTIMEO: {
          long ms_long;
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
 800d2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f8:	2b0f      	cmp	r3, #15
 800d2fa:	d801      	bhi.n	800d300 <lwip_setsockopt_impl+0x140>
 800d2fc:	2316      	movs	r3, #22
 800d2fe:	e12b      	b.n	800d558 <lwip_setsockopt_impl+0x398>
 800d300:	69fb      	ldr	r3, [r7, #28]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d101      	bne.n	800d30c <lwip_setsockopt_impl+0x14c>
 800d308:	2316      	movs	r3, #22
 800d30a:	e125      	b.n	800d558 <lwip_setsockopt_impl+0x398>
          ms_long = LWIP_SO_SNDRCVTIMEO_GET_MS(optval);
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d312:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d316:	fb03 f202 	mul.w	r2, r3, r2
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	689b      	ldr	r3, [r3, #8]
 800d31e:	4990      	ldr	r1, [pc, #576]	@ (800d560 <lwip_setsockopt_impl+0x3a0>)
 800d320:	fb81 0103 	smull	r0, r1, r1, r3
 800d324:	1189      	asrs	r1, r1, #6
 800d326:	17db      	asrs	r3, r3, #31
 800d328:	1acb      	subs	r3, r1, r3
 800d32a:	4413      	add	r3, r2
 800d32c:	617b      	str	r3, [r7, #20]
          if (ms_long < 0) {
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	2b00      	cmp	r3, #0
 800d332:	da01      	bge.n	800d338 <lwip_setsockopt_impl+0x178>
            done_socket(sock);
            return EINVAL;
 800d334:	2316      	movs	r3, #22
 800d336:	e10f      	b.n	800d558 <lwip_setsockopt_impl+0x398>
          }
          netconn_set_recvtimeout(sock->conn, (u32_t)ms_long);
 800d338:	69fb      	ldr	r3, [r7, #28]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	697a      	ldr	r2, [r7, #20]
 800d33e:	61da      	str	r2, [r3, #28]
          break;
 800d340:	e077      	b.n	800d432 <lwip_setsockopt_impl+0x272>
        }
        break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
        case SO_NO_CHECK:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
 800d342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d344:	2b03      	cmp	r3, #3
 800d346:	d801      	bhi.n	800d34c <lwip_setsockopt_impl+0x18c>
 800d348:	2316      	movs	r3, #22
 800d34a:	e105      	b.n	800d558 <lwip_setsockopt_impl+0x398>
 800d34c:	69fb      	ldr	r3, [r7, #28]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d004      	beq.n	800d35e <lwip_setsockopt_impl+0x19e>
 800d354:	69fb      	ldr	r3, [r7, #28]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	685b      	ldr	r3, [r3, #4]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d101      	bne.n	800d362 <lwip_setsockopt_impl+0x1a2>
 800d35e:	2316      	movs	r3, #22
 800d360:	e0fa      	b.n	800d558 <lwip_setsockopt_impl+0x398>
 800d362:	69fb      	ldr	r3, [r7, #28]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d36c:	2b20      	cmp	r3, #32
 800d36e:	d001      	beq.n	800d374 <lwip_setsockopt_impl+0x1b4>
 800d370:	235c      	movs	r3, #92	@ 0x5c
 800d372:	e0f1      	b.n	800d558 <lwip_setsockopt_impl+0x398>
            /* this flag is only available for UDP, not for UDP lite */
            done_socket(sock);
            return EAFNOSUPPORT;
          }
#endif /* LWIP_UDPLITE */
          if (*(const int *)optval) {
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d00b      	beq.n	800d394 <lwip_setsockopt_impl+0x1d4>
            udp_set_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800d37c:	69fb      	ldr	r3, [r7, #28]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	685b      	ldr	r3, [r3, #4]
 800d382:	7c1a      	ldrb	r2, [r3, #16]
 800d384:	69fb      	ldr	r3, [r7, #28]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	685b      	ldr	r3, [r3, #4]
 800d38a:	f042 0201 	orr.w	r2, r2, #1
 800d38e:	b2d2      	uxtb	r2, r2
 800d390:	741a      	strb	r2, [r3, #16]
          } else {
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
          }
          break;
 800d392:	e04e      	b.n	800d432 <lwip_setsockopt_impl+0x272>
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800d394:	69fb      	ldr	r3, [r7, #28]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	7c1a      	ldrb	r2, [r3, #16]
 800d39c:	69fb      	ldr	r3, [r7, #28]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	f022 0201 	bic.w	r2, r2, #1
 800d3a6:	b2d2      	uxtb	r2, r2
 800d3a8:	741a      	strb	r2, [r3, #16]
          break;
 800d3aa:	e042      	b.n	800d432 <lwip_setsockopt_impl+0x272>
#endif /* LWIP_UDP */
        case SO_BINDTODEVICE: {
          const struct ifreq *iface;
          struct netif *n = NULL;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	623b      	str	r3, [r7, #32]

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, struct ifreq);
 800d3b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3b2:	2b05      	cmp	r3, #5
 800d3b4:	d801      	bhi.n	800d3ba <lwip_setsockopt_impl+0x1fa>
 800d3b6:	2316      	movs	r3, #22
 800d3b8:	e0ce      	b.n	800d558 <lwip_setsockopt_impl+0x398>
 800d3ba:	69fb      	ldr	r3, [r7, #28]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d101      	bne.n	800d3c6 <lwip_setsockopt_impl+0x206>
 800d3c2:	2316      	movs	r3, #22
 800d3c4:	e0c8      	b.n	800d558 <lwip_setsockopt_impl+0x398>

          iface = (const struct ifreq *)optval;
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	61bb      	str	r3, [r7, #24]
          if (iface->ifr_name[0] != 0) {
 800d3ca:	69bb      	ldr	r3, [r7, #24]
 800d3cc:	781b      	ldrb	r3, [r3, #0]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d009      	beq.n	800d3e6 <lwip_setsockopt_impl+0x226>
            n = netif_find(iface->ifr_name);
 800d3d2:	69bb      	ldr	r3, [r7, #24]
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f001 fb09 	bl	800e9ec <netif_find>
 800d3da:	6238      	str	r0, [r7, #32]
            if (n == NULL) {
 800d3dc:	6a3b      	ldr	r3, [r7, #32]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d101      	bne.n	800d3e6 <lwip_setsockopt_impl+0x226>
              done_socket(sock);
              return ENODEV;
 800d3e2:	2313      	movs	r3, #19
 800d3e4:	e0b8      	b.n	800d558 <lwip_setsockopt_impl+0x398>
            }
          }

          switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
 800d3e6:	69fb      	ldr	r3, [r7, #28]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d3f0:	2b10      	cmp	r3, #16
 800d3f2:	d002      	beq.n	800d3fa <lwip_setsockopt_impl+0x23a>
 800d3f4:	2b20      	cmp	r3, #32
 800d3f6:	d008      	beq.n	800d40a <lwip_setsockopt_impl+0x24a>
 800d3f8:	e00f      	b.n	800d41a <lwip_setsockopt_impl+0x25a>
#if LWIP_TCP
            case NETCONN_TCP:
              tcp_bind_netif(sock->conn->pcb.tcp, n);
 800d3fa:	69fb      	ldr	r3, [r7, #28]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	685b      	ldr	r3, [r3, #4]
 800d400:	6a39      	ldr	r1, [r7, #32]
 800d402:	4618      	mov	r0, r3
 800d404:	f002 fd68 	bl	800fed8 <tcp_bind_netif>
              break;
 800d408:	e00f      	b.n	800d42a <lwip_setsockopt_impl+0x26a>
#endif
#if LWIP_UDP
            case NETCONN_UDP:
              udp_bind_netif(sock->conn->pcb.udp, n);
 800d40a:	69fb      	ldr	r3, [r7, #28]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	685b      	ldr	r3, [r3, #4]
 800d410:	6a39      	ldr	r1, [r7, #32]
 800d412:	4618      	mov	r0, r3
 800d414:	f008 fee6 	bl	80161e4 <udp_bind_netif>
              break;
 800d418:	e007      	b.n	800d42a <lwip_setsockopt_impl+0x26a>
            case NETCONN_RAW:
              raw_bind_netif(sock->conn->pcb.raw, n);
              break;
#endif
            default:
              LWIP_ASSERT("Unhandled netconn type in SO_BINDTODEVICE", 0);
 800d41a:	4b52      	ldr	r3, [pc, #328]	@ (800d564 <lwip_setsockopt_impl+0x3a4>)
 800d41c:	f640 527d 	movw	r2, #3453	@ 0xd7d
 800d420:	4951      	ldr	r1, [pc, #324]	@ (800d568 <lwip_setsockopt_impl+0x3a8>)
 800d422:	4852      	ldr	r0, [pc, #328]	@ (800d56c <lwip_setsockopt_impl+0x3ac>)
 800d424:	f01a fd86 	bl	8027f34 <iprintf>
              break;
 800d428:	bf00      	nop
          }
        }
        break;
 800d42a:	e002      	b.n	800d432 <lwip_setsockopt_impl+0x272>
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800d42c:	235c      	movs	r3, #92	@ 0x5c
 800d42e:	627b      	str	r3, [r7, #36]	@ 0x24
          break;
 800d430:	bf00      	nop
      }  /* switch (optname) */
      break;
 800d432:	e090      	b.n	800d556 <lwip_setsockopt_impl+0x396>

    /* Level: IPPROTO_IP */
    case IPPROTO_IP:
      switch (optname) {
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2b01      	cmp	r3, #1
 800d438:	d01a      	beq.n	800d470 <lwip_setsockopt_impl+0x2b0>
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2b02      	cmp	r3, #2
 800d43e:	d12f      	bne.n	800d4a0 <lwip_setsockopt_impl+0x2e0>
        case IP_TTL:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800d440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d442:	2b03      	cmp	r3, #3
 800d444:	d801      	bhi.n	800d44a <lwip_setsockopt_impl+0x28a>
 800d446:	2316      	movs	r3, #22
 800d448:	e086      	b.n	800d558 <lwip_setsockopt_impl+0x398>
 800d44a:	69fb      	ldr	r3, [r7, #28]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d004      	beq.n	800d45c <lwip_setsockopt_impl+0x29c>
 800d452:	69fb      	ldr	r3, [r7, #28]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d101      	bne.n	800d460 <lwip_setsockopt_impl+0x2a0>
 800d45c:	2316      	movs	r3, #22
 800d45e:	e07b      	b.n	800d558 <lwip_setsockopt_impl+0x398>
          sock->conn->pcb.ip->ttl = (u8_t)(*(const int *)optval);
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	681a      	ldr	r2, [r3, #0]
 800d464:	69fb      	ldr	r3, [r7, #28]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	b2d2      	uxtb	r2, r2
 800d46c:	72da      	strb	r2, [r3, #11]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
                                      s, sock->conn->pcb.ip->ttl));
          break;
 800d46e:	e01a      	b.n	800d4a6 <lwip_setsockopt_impl+0x2e6>
        case IP_TOS:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800d470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d472:	2b03      	cmp	r3, #3
 800d474:	d801      	bhi.n	800d47a <lwip_setsockopt_impl+0x2ba>
 800d476:	2316      	movs	r3, #22
 800d478:	e06e      	b.n	800d558 <lwip_setsockopt_impl+0x398>
 800d47a:	69fb      	ldr	r3, [r7, #28]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d004      	beq.n	800d48c <lwip_setsockopt_impl+0x2cc>
 800d482:	69fb      	ldr	r3, [r7, #28]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	685b      	ldr	r3, [r3, #4]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d101      	bne.n	800d490 <lwip_setsockopt_impl+0x2d0>
 800d48c:	2316      	movs	r3, #22
 800d48e:	e063      	b.n	800d558 <lwip_setsockopt_impl+0x398>
          sock->conn->pcb.ip->tos = (u8_t)(*(const int *)optval);
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	69fb      	ldr	r3, [r7, #28]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	685b      	ldr	r3, [r3, #4]
 800d49a:	b2d2      	uxtb	r2, r2
 800d49c:	729a      	strb	r2, [r3, #10]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
                                      s, sock->conn->pcb.ip->tos));
          break;
 800d49e:	e002      	b.n	800d4a6 <lwip_setsockopt_impl+0x2e6>
        break;
#endif /* LWIP_IGMP */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800d4a0:	235c      	movs	r3, #92	@ 0x5c
 800d4a2:	627b      	str	r3, [r7, #36]	@ 0x24
          break;
 800d4a4:	bf00      	nop
      }  /* switch (optname) */
      break;
 800d4a6:	e056      	b.n	800d556 <lwip_setsockopt_impl+0x396>

#if LWIP_TCP
    /* Level: IPPROTO_TCP */
    case IPPROTO_TCP:
      /* Special case: all IPPROTO_TCP option take an int */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
 800d4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4aa:	2b03      	cmp	r3, #3
 800d4ac:	d801      	bhi.n	800d4b2 <lwip_setsockopt_impl+0x2f2>
 800d4ae:	2316      	movs	r3, #22
 800d4b0:	e052      	b.n	800d558 <lwip_setsockopt_impl+0x398>
 800d4b2:	69fb      	ldr	r3, [r7, #28]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d004      	beq.n	800d4c4 <lwip_setsockopt_impl+0x304>
 800d4ba:	69fb      	ldr	r3, [r7, #28]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	685b      	ldr	r3, [r3, #4]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d101      	bne.n	800d4c8 <lwip_setsockopt_impl+0x308>
 800d4c4:	2316      	movs	r3, #22
 800d4c6:	e047      	b.n	800d558 <lwip_setsockopt_impl+0x398>
 800d4c8:	69fb      	ldr	r3, [r7, #28]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d4d2:	2b10      	cmp	r3, #16
 800d4d4:	d001      	beq.n	800d4da <lwip_setsockopt_impl+0x31a>
 800d4d6:	235c      	movs	r3, #92	@ 0x5c
 800d4d8:	e03e      	b.n	800d558 <lwip_setsockopt_impl+0x398>
      if (sock->conn->pcb.tcp->state == LISTEN) {
 800d4da:	69fb      	ldr	r3, [r7, #28]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	7d1b      	ldrb	r3, [r3, #20]
 800d4e2:	2b01      	cmp	r3, #1
 800d4e4:	d101      	bne.n	800d4ea <lwip_setsockopt_impl+0x32a>
        done_socket(sock);
        return EINVAL;
 800d4e6:	2316      	movs	r3, #22
 800d4e8:	e036      	b.n	800d558 <lwip_setsockopt_impl+0x398>
      }
      switch (optname) {
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2b01      	cmp	r3, #1
 800d4ee:	d003      	beq.n	800d4f8 <lwip_setsockopt_impl+0x338>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2b02      	cmp	r3, #2
 800d4f4:	d01c      	beq.n	800d530 <lwip_setsockopt_impl+0x370>
 800d4f6:	e023      	b.n	800d540 <lwip_setsockopt_impl+0x380>
        case TCP_NODELAY:
          if (*(const int *)optval) {
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d00b      	beq.n	800d518 <lwip_setsockopt_impl+0x358>
            tcp_nagle_disable(sock->conn->pcb.tcp);
 800d500:	69fb      	ldr	r3, [r7, #28]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	685b      	ldr	r3, [r3, #4]
 800d506:	8b5a      	ldrh	r2, [r3, #26]
 800d508:	69fb      	ldr	r3, [r7, #28]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d512:	b292      	uxth	r2, r2
 800d514:	835a      	strh	r2, [r3, #26]
          } else {
            tcp_nagle_enable(sock->conn->pcb.tcp);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                                      s, (*(const int *)optval) ? "on" : "off") );
          break;
 800d516:	e016      	b.n	800d546 <lwip_setsockopt_impl+0x386>
            tcp_nagle_enable(sock->conn->pcb.tcp);
 800d518:	69fb      	ldr	r3, [r7, #28]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	8b5a      	ldrh	r2, [r3, #26]
 800d520:	69fb      	ldr	r3, [r7, #28]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d52a:	b292      	uxth	r2, r2
 800d52c:	835a      	strh	r2, [r3, #26]
          break;
 800d52e:	e00a      	b.n	800d546 <lwip_setsockopt_impl+0x386>
        case TCP_KEEPALIVE:
          sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int *)optval);
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	681a      	ldr	r2, [r3, #0]
 800d534:	69fb      	ldr	r3, [r7, #28]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	685b      	ldr	r3, [r3, #4]
 800d53a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
                                      s, sock->conn->pcb.tcp->keep_idle));
          break;
 800d53e:	e002      	b.n	800d546 <lwip_setsockopt_impl+0x386>
          break;
#endif /* LWIP_TCP_KEEPALIVE */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800d540:	235c      	movs	r3, #92	@ 0x5c
 800d542:	627b      	str	r3, [r7, #36]	@ 0x24
          break;
 800d544:	bf00      	nop
      }  /* switch (optname) */
      break;
 800d546:	e006      	b.n	800d556 <lwip_setsockopt_impl+0x396>
          break;
#endif /* LWIP_IPV6 && LWIP_RAW */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800d548:	235c      	movs	r3, #92	@ 0x5c
 800d54a:	627b      	str	r3, [r7, #36]	@ 0x24
          break;
 800d54c:	bf00      	nop
      }  /* switch (optname) */
      break;
 800d54e:	e002      	b.n	800d556 <lwip_setsockopt_impl+0x396>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                  s, level, optname));
      err = ENOPROTOOPT;
 800d550:	235c      	movs	r3, #92	@ 0x5c
 800d552:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800d554:	bf00      	nop
  }  /* switch (level) */

  done_socket(sock);
  return err;
 800d556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3728      	adds	r7, #40	@ 0x28
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	10624dd3 	.word	0x10624dd3
 800d564:	08029df0 	.word	0x08029df0
 800d568:	0802a194 	.word	0x0802a194
 800d56c:	08029e44 	.word	0x08029e44

0800d570 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800d57a:	f008 f9c7 	bl	801590c <sys_timeouts_sleeptime>
 800d57e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d586:	d10b      	bne.n	800d5a0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800d588:	4813      	ldr	r0, [pc, #76]	@ (800d5d8 <tcpip_timeouts_mbox_fetch+0x68>)
 800d58a:	f00b fc90 	bl	8018eae <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800d58e:	2200      	movs	r2, #0
 800d590:	6839      	ldr	r1, [r7, #0]
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f00b fb48 	bl	8018c28 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800d598:	480f      	ldr	r0, [pc, #60]	@ (800d5d8 <tcpip_timeouts_mbox_fetch+0x68>)
 800d59a:	f00b fc79 	bl	8018e90 <sys_mutex_lock>
    return;
 800d59e:	e018      	b.n	800d5d2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d102      	bne.n	800d5ac <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800d5a6:	f008 f977 	bl	8015898 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d5aa:	e7e6      	b.n	800d57a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800d5ac:	480a      	ldr	r0, [pc, #40]	@ (800d5d8 <tcpip_timeouts_mbox_fetch+0x68>)
 800d5ae:	f00b fc7e 	bl	8018eae <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800d5b2:	68fa      	ldr	r2, [r7, #12]
 800d5b4:	6839      	ldr	r1, [r7, #0]
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f00b fb36 	bl	8018c28 <sys_arch_mbox_fetch>
 800d5bc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800d5be:	4806      	ldr	r0, [pc, #24]	@ (800d5d8 <tcpip_timeouts_mbox_fetch+0x68>)
 800d5c0:	f00b fc66 	bl	8018e90 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5ca:	d102      	bne.n	800d5d2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800d5cc:	f008 f964 	bl	8015898 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d5d0:	e7d3      	b.n	800d57a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800d5d2:	3710      	adds	r7, #16
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}
 800d5d8:	2000d090 	.word	0x2000d090

0800d5dc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b084      	sub	sp, #16
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800d5e4:	4810      	ldr	r0, [pc, #64]	@ (800d628 <tcpip_thread+0x4c>)
 800d5e6:	f00b fc53 	bl	8018e90 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800d5ea:	4b10      	ldr	r3, [pc, #64]	@ (800d62c <tcpip_thread+0x50>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d005      	beq.n	800d5fe <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800d5f2:	4b0e      	ldr	r3, [pc, #56]	@ (800d62c <tcpip_thread+0x50>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	4a0e      	ldr	r2, [pc, #56]	@ (800d630 <tcpip_thread+0x54>)
 800d5f8:	6812      	ldr	r2, [r2, #0]
 800d5fa:	4610      	mov	r0, r2
 800d5fc:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d5fe:	f107 030c 	add.w	r3, r7, #12
 800d602:	4619      	mov	r1, r3
 800d604:	480b      	ldr	r0, [pc, #44]	@ (800d634 <tcpip_thread+0x58>)
 800d606:	f7ff ffb3 	bl	800d570 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d106      	bne.n	800d61e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d610:	4b09      	ldr	r3, [pc, #36]	@ (800d638 <tcpip_thread+0x5c>)
 800d612:	2291      	movs	r2, #145	@ 0x91
 800d614:	4909      	ldr	r1, [pc, #36]	@ (800d63c <tcpip_thread+0x60>)
 800d616:	480a      	ldr	r0, [pc, #40]	@ (800d640 <tcpip_thread+0x64>)
 800d618:	f01a fc8c 	bl	8027f34 <iprintf>
      continue;
 800d61c:	e003      	b.n	800d626 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	4618      	mov	r0, r3
 800d622:	f000 f80f 	bl	800d644 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d626:	e7ea      	b.n	800d5fe <tcpip_thread+0x22>
 800d628:	2000d090 	.word	0x2000d090
 800d62c:	2000d084 	.word	0x2000d084
 800d630:	2000d088 	.word	0x2000d088
 800d634:	2000d08c 	.word	0x2000d08c
 800d638:	0802a1c0 	.word	0x0802a1c0
 800d63c:	0802a1f0 	.word	0x0802a1f0
 800d640:	0802a210 	.word	0x0802a210

0800d644 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b082      	sub	sp, #8
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	2b02      	cmp	r3, #2
 800d652:	d026      	beq.n	800d6a2 <tcpip_thread_handle_msg+0x5e>
 800d654:	2b02      	cmp	r3, #2
 800d656:	dc2b      	bgt.n	800d6b0 <tcpip_thread_handle_msg+0x6c>
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d002      	beq.n	800d662 <tcpip_thread_handle_msg+0x1e>
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	d015      	beq.n	800d68c <tcpip_thread_handle_msg+0x48>
 800d660:	e026      	b.n	800d6b0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	68db      	ldr	r3, [r3, #12]
 800d666:	687a      	ldr	r2, [r7, #4]
 800d668:	6850      	ldr	r0, [r2, #4]
 800d66a:	687a      	ldr	r2, [r7, #4]
 800d66c:	6892      	ldr	r2, [r2, #8]
 800d66e:	4611      	mov	r1, r2
 800d670:	4798      	blx	r3
 800d672:	4603      	mov	r3, r0
 800d674:	2b00      	cmp	r3, #0
 800d676:	d004      	beq.n	800d682 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	685b      	ldr	r3, [r3, #4]
 800d67c:	4618      	mov	r0, r3
 800d67e:	f001 fd87 	bl	800f190 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d682:	6879      	ldr	r1, [r7, #4]
 800d684:	2009      	movs	r0, #9
 800d686:	f000 fe75 	bl	800e374 <memp_free>
      break;
 800d68a:	e018      	b.n	800d6be <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	685b      	ldr	r3, [r3, #4]
 800d690:	687a      	ldr	r2, [r7, #4]
 800d692:	6892      	ldr	r2, [r2, #8]
 800d694:	4610      	mov	r0, r2
 800d696:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800d698:	6879      	ldr	r1, [r7, #4]
 800d69a:	2008      	movs	r0, #8
 800d69c:	f000 fe6a 	bl	800e374 <memp_free>
      break;
 800d6a0:	e00d      	b.n	800d6be <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	685b      	ldr	r3, [r3, #4]
 800d6a6:	687a      	ldr	r2, [r7, #4]
 800d6a8:	6892      	ldr	r2, [r2, #8]
 800d6aa:	4610      	mov	r0, r2
 800d6ac:	4798      	blx	r3
      break;
 800d6ae:	e006      	b.n	800d6be <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d6b0:	4b05      	ldr	r3, [pc, #20]	@ (800d6c8 <tcpip_thread_handle_msg+0x84>)
 800d6b2:	22cf      	movs	r2, #207	@ 0xcf
 800d6b4:	4905      	ldr	r1, [pc, #20]	@ (800d6cc <tcpip_thread_handle_msg+0x88>)
 800d6b6:	4806      	ldr	r0, [pc, #24]	@ (800d6d0 <tcpip_thread_handle_msg+0x8c>)
 800d6b8:	f01a fc3c 	bl	8027f34 <iprintf>
      break;
 800d6bc:	bf00      	nop
  }
}
 800d6be:	bf00      	nop
 800d6c0:	3708      	adds	r7, #8
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}
 800d6c6:	bf00      	nop
 800d6c8:	0802a1c0 	.word	0x0802a1c0
 800d6cc:	0802a1f0 	.word	0x0802a1f0
 800d6d0:	0802a210 	.word	0x0802a210

0800d6d4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b086      	sub	sp, #24
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	60f8      	str	r0, [r7, #12]
 800d6dc:	60b9      	str	r1, [r7, #8]
 800d6de:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d6e0:	481a      	ldr	r0, [pc, #104]	@ (800d74c <tcpip_inpkt+0x78>)
 800d6e2:	f00b fafc 	bl	8018cde <sys_mbox_valid>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d105      	bne.n	800d6f8 <tcpip_inpkt+0x24>
 800d6ec:	4b18      	ldr	r3, [pc, #96]	@ (800d750 <tcpip_inpkt+0x7c>)
 800d6ee:	22fc      	movs	r2, #252	@ 0xfc
 800d6f0:	4918      	ldr	r1, [pc, #96]	@ (800d754 <tcpip_inpkt+0x80>)
 800d6f2:	4819      	ldr	r0, [pc, #100]	@ (800d758 <tcpip_inpkt+0x84>)
 800d6f4:	f01a fc1e 	bl	8027f34 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800d6f8:	2009      	movs	r0, #9
 800d6fa:	f000 fdc5 	bl	800e288 <memp_malloc>
 800d6fe:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d102      	bne.n	800d70c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800d706:	f04f 33ff 	mov.w	r3, #4294967295
 800d70a:	e01a      	b.n	800d742 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	2200      	movs	r2, #0
 800d710:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	68fa      	ldr	r2, [r7, #12]
 800d716:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800d718:	697b      	ldr	r3, [r7, #20]
 800d71a:	68ba      	ldr	r2, [r7, #8]
 800d71c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800d71e:	697b      	ldr	r3, [r7, #20]
 800d720:	687a      	ldr	r2, [r7, #4]
 800d722:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d724:	6979      	ldr	r1, [r7, #20]
 800d726:	4809      	ldr	r0, [pc, #36]	@ (800d74c <tcpip_inpkt+0x78>)
 800d728:	f00b fa64 	bl	8018bf4 <sys_mbox_trypost>
 800d72c:	4603      	mov	r3, r0
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d006      	beq.n	800d740 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d732:	6979      	ldr	r1, [r7, #20]
 800d734:	2009      	movs	r0, #9
 800d736:	f000 fe1d 	bl	800e374 <memp_free>
    return ERR_MEM;
 800d73a:	f04f 33ff 	mov.w	r3, #4294967295
 800d73e:	e000      	b.n	800d742 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800d740:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d742:	4618      	mov	r0, r3
 800d744:	3718      	adds	r7, #24
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	2000d08c 	.word	0x2000d08c
 800d750:	0802a1c0 	.word	0x0802a1c0
 800d754:	0802a238 	.word	0x0802a238
 800d758:	0802a210 	.word	0x0802a210

0800d75c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b082      	sub	sp, #8
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d76c:	f003 0318 	and.w	r3, r3, #24
 800d770:	2b00      	cmp	r3, #0
 800d772:	d006      	beq.n	800d782 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d774:	4a08      	ldr	r2, [pc, #32]	@ (800d798 <tcpip_input+0x3c>)
 800d776:	6839      	ldr	r1, [r7, #0]
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f7ff ffab 	bl	800d6d4 <tcpip_inpkt>
 800d77e:	4603      	mov	r3, r0
 800d780:	e005      	b.n	800d78e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d782:	4a06      	ldr	r2, [pc, #24]	@ (800d79c <tcpip_input+0x40>)
 800d784:	6839      	ldr	r1, [r7, #0]
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f7ff ffa4 	bl	800d6d4 <tcpip_inpkt>
 800d78c:	4603      	mov	r3, r0
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3708      	adds	r7, #8
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}
 800d796:	bf00      	nop
 800d798:	080189e1 	.word	0x080189e1
 800d79c:	0801766d 	.word	0x0801766d

0800d7a0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b084      	sub	sp, #16
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d7aa:	4819      	ldr	r0, [pc, #100]	@ (800d810 <tcpip_try_callback+0x70>)
 800d7ac:	f00b fa97 	bl	8018cde <sys_mbox_valid>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d106      	bne.n	800d7c4 <tcpip_try_callback+0x24>
 800d7b6:	4b17      	ldr	r3, [pc, #92]	@ (800d814 <tcpip_try_callback+0x74>)
 800d7b8:	f240 125d 	movw	r2, #349	@ 0x15d
 800d7bc:	4916      	ldr	r1, [pc, #88]	@ (800d818 <tcpip_try_callback+0x78>)
 800d7be:	4817      	ldr	r0, [pc, #92]	@ (800d81c <tcpip_try_callback+0x7c>)
 800d7c0:	f01a fbb8 	bl	8027f34 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d7c4:	2008      	movs	r0, #8
 800d7c6:	f000 fd5f 	bl	800e288 <memp_malloc>
 800d7ca:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d102      	bne.n	800d7d8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800d7d2:	f04f 33ff 	mov.w	r3, #4294967295
 800d7d6:	e017      	b.n	800d808 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2201      	movs	r2, #1
 800d7dc:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	687a      	ldr	r2, [r7, #4]
 800d7e2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	683a      	ldr	r2, [r7, #0]
 800d7e8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d7ea:	68f9      	ldr	r1, [r7, #12]
 800d7ec:	4808      	ldr	r0, [pc, #32]	@ (800d810 <tcpip_try_callback+0x70>)
 800d7ee:	f00b fa01 	bl	8018bf4 <sys_mbox_trypost>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d006      	beq.n	800d806 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800d7f8:	68f9      	ldr	r1, [r7, #12]
 800d7fa:	2008      	movs	r0, #8
 800d7fc:	f000 fdba 	bl	800e374 <memp_free>
    return ERR_MEM;
 800d800:	f04f 33ff 	mov.w	r3, #4294967295
 800d804:	e000      	b.n	800d808 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800d806:	2300      	movs	r3, #0
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3710      	adds	r7, #16
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}
 800d810:	2000d08c 	.word	0x2000d08c
 800d814:	0802a1c0 	.word	0x0802a1c0
 800d818:	0802a238 	.word	0x0802a238
 800d81c:	0802a210 	.word	0x0802a210

0800d820 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b084      	sub	sp, #16
 800d824:	af00      	add	r7, sp, #0
 800d826:	60f8      	str	r0, [r7, #12]
 800d828:	60b9      	str	r1, [r7, #8]
 800d82a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800d82c:	4806      	ldr	r0, [pc, #24]	@ (800d848 <tcpip_send_msg_wait_sem+0x28>)
 800d82e:	f00b fb2f 	bl	8018e90 <sys_mutex_lock>
  fn(apimsg);
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	68b8      	ldr	r0, [r7, #8]
 800d836:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800d838:	4803      	ldr	r0, [pc, #12]	@ (800d848 <tcpip_send_msg_wait_sem+0x28>)
 800d83a:	f00b fb38 	bl	8018eae <sys_mutex_unlock>
  return ERR_OK;
 800d83e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800d840:	4618      	mov	r0, r3
 800d842:	3710      	adds	r7, #16
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}
 800d848:	2000d090 	.word	0x2000d090

0800d84c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b084      	sub	sp, #16
 800d850:	af02      	add	r7, sp, #8
 800d852:	6078      	str	r0, [r7, #4]
 800d854:	6039      	str	r1, [r7, #0]
  lwip_init();
 800d856:	f000 f872 	bl	800d93e <lwip_init>

  tcpip_init_done = initfunc;
 800d85a:	4a17      	ldr	r2, [pc, #92]	@ (800d8b8 <tcpip_init+0x6c>)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800d860:	4a16      	ldr	r2, [pc, #88]	@ (800d8bc <tcpip_init+0x70>)
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800d866:	2106      	movs	r1, #6
 800d868:	4815      	ldr	r0, [pc, #84]	@ (800d8c0 <tcpip_init+0x74>)
 800d86a:	f00b f98f 	bl	8018b8c <sys_mbox_new>
 800d86e:	4603      	mov	r3, r0
 800d870:	2b00      	cmp	r3, #0
 800d872:	d006      	beq.n	800d882 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800d874:	4b13      	ldr	r3, [pc, #76]	@ (800d8c4 <tcpip_init+0x78>)
 800d876:	f240 2261 	movw	r2, #609	@ 0x261
 800d87a:	4913      	ldr	r1, [pc, #76]	@ (800d8c8 <tcpip_init+0x7c>)
 800d87c:	4813      	ldr	r0, [pc, #76]	@ (800d8cc <tcpip_init+0x80>)
 800d87e:	f01a fb59 	bl	8027f34 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800d882:	4813      	ldr	r0, [pc, #76]	@ (800d8d0 <tcpip_init+0x84>)
 800d884:	f00b fae8 	bl	8018e58 <sys_mutex_new>
 800d888:	4603      	mov	r3, r0
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d006      	beq.n	800d89c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800d88e:	4b0d      	ldr	r3, [pc, #52]	@ (800d8c4 <tcpip_init+0x78>)
 800d890:	f240 2265 	movw	r2, #613	@ 0x265
 800d894:	490f      	ldr	r1, [pc, #60]	@ (800d8d4 <tcpip_init+0x88>)
 800d896:	480d      	ldr	r0, [pc, #52]	@ (800d8cc <tcpip_init+0x80>)
 800d898:	f01a fb4c 	bl	8027f34 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d89c:	2300      	movs	r3, #0
 800d89e:	9300      	str	r3, [sp, #0]
 800d8a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	490c      	ldr	r1, [pc, #48]	@ (800d8d8 <tcpip_init+0x8c>)
 800d8a8:	480c      	ldr	r0, [pc, #48]	@ (800d8dc <tcpip_init+0x90>)
 800d8aa:	f00b fb0d 	bl	8018ec8 <sys_thread_new>
}
 800d8ae:	bf00      	nop
 800d8b0:	3708      	adds	r7, #8
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop
 800d8b8:	2000d084 	.word	0x2000d084
 800d8bc:	2000d088 	.word	0x2000d088
 800d8c0:	2000d08c 	.word	0x2000d08c
 800d8c4:	0802a1c0 	.word	0x0802a1c0
 800d8c8:	0802a248 	.word	0x0802a248
 800d8cc:	0802a210 	.word	0x0802a210
 800d8d0:	2000d090 	.word	0x2000d090
 800d8d4:	0802a26c 	.word	0x0802a26c
 800d8d8:	0800d5dd 	.word	0x0800d5dd
 800d8dc:	0802a290 	.word	0x0802a290

0800d8e0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b083      	sub	sp, #12
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d8ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d8ee:	021b      	lsls	r3, r3, #8
 800d8f0:	b21a      	sxth	r2, r3
 800d8f2:	88fb      	ldrh	r3, [r7, #6]
 800d8f4:	0a1b      	lsrs	r3, r3, #8
 800d8f6:	b29b      	uxth	r3, r3
 800d8f8:	b21b      	sxth	r3, r3
 800d8fa:	4313      	orrs	r3, r2
 800d8fc:	b21b      	sxth	r3, r3
 800d8fe:	b29b      	uxth	r3, r3
}
 800d900:	4618      	mov	r0, r3
 800d902:	370c      	adds	r7, #12
 800d904:	46bd      	mov	sp, r7
 800d906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90a:	4770      	bx	lr

0800d90c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d90c:	b480      	push	{r7}
 800d90e:	b083      	sub	sp, #12
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	061a      	lsls	r2, r3, #24
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	021b      	lsls	r3, r3, #8
 800d91c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d920:	431a      	orrs	r2, r3
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	0a1b      	lsrs	r3, r3, #8
 800d926:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d92a:	431a      	orrs	r2, r3
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	0e1b      	lsrs	r3, r3, #24
 800d930:	4313      	orrs	r3, r2
}
 800d932:	4618      	mov	r0, r3
 800d934:	370c      	adds	r7, #12
 800d936:	46bd      	mov	sp, r7
 800d938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93c:	4770      	bx	lr

0800d93e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d93e:	b580      	push	{r7, lr}
 800d940:	b082      	sub	sp, #8
 800d942:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d944:	2300      	movs	r3, #0
 800d946:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d948:	f00b fa78 	bl	8018e3c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d94c:	f000 f8d4 	bl	800daf8 <mem_init>
  memp_init();
 800d950:	f000 fc2c 	bl	800e1ac <memp_init>
  pbuf_init();
  netif_init();
 800d954:	f000 fd38 	bl	800e3c8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d958:	f008 f810 	bl	801597c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d95c:	f001 fec2 	bl	800f6e4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d960:	f007 ff52 	bl	8015808 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d964:	bf00      	nop
 800d966:	3708      	adds	r7, #8
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b083      	sub	sp, #12
 800d970:	af00      	add	r7, sp, #0
 800d972:	4603      	mov	r3, r0
 800d974:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d976:	4b05      	ldr	r3, [pc, #20]	@ (800d98c <ptr_to_mem+0x20>)
 800d978:	681a      	ldr	r2, [r3, #0]
 800d97a:	88fb      	ldrh	r3, [r7, #6]
 800d97c:	4413      	add	r3, r2
}
 800d97e:	4618      	mov	r0, r3
 800d980:	370c      	adds	r7, #12
 800d982:	46bd      	mov	sp, r7
 800d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d988:	4770      	bx	lr
 800d98a:	bf00      	nop
 800d98c:	2000d0ac 	.word	0x2000d0ac

0800d990 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d990:	b480      	push	{r7}
 800d992:	b083      	sub	sp, #12
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d998:	4b05      	ldr	r3, [pc, #20]	@ (800d9b0 <mem_to_ptr+0x20>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	687a      	ldr	r2, [r7, #4]
 800d99e:	1ad3      	subs	r3, r2, r3
 800d9a0:	b29b      	uxth	r3, r3
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	370c      	adds	r7, #12
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ac:	4770      	bx	lr
 800d9ae:	bf00      	nop
 800d9b0:	2000d0ac 	.word	0x2000d0ac

0800d9b4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d9b4:	b590      	push	{r4, r7, lr}
 800d9b6:	b085      	sub	sp, #20
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d9bc:	4b45      	ldr	r3, [pc, #276]	@ (800dad4 <plug_holes+0x120>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	687a      	ldr	r2, [r7, #4]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d206      	bcs.n	800d9d4 <plug_holes+0x20>
 800d9c6:	4b44      	ldr	r3, [pc, #272]	@ (800dad8 <plug_holes+0x124>)
 800d9c8:	f240 12df 	movw	r2, #479	@ 0x1df
 800d9cc:	4943      	ldr	r1, [pc, #268]	@ (800dadc <plug_holes+0x128>)
 800d9ce:	4844      	ldr	r0, [pc, #272]	@ (800dae0 <plug_holes+0x12c>)
 800d9d0:	f01a fab0 	bl	8027f34 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d9d4:	4b43      	ldr	r3, [pc, #268]	@ (800dae4 <plug_holes+0x130>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	687a      	ldr	r2, [r7, #4]
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d306      	bcc.n	800d9ec <plug_holes+0x38>
 800d9de:	4b3e      	ldr	r3, [pc, #248]	@ (800dad8 <plug_holes+0x124>)
 800d9e0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800d9e4:	4940      	ldr	r1, [pc, #256]	@ (800dae8 <plug_holes+0x134>)
 800d9e6:	483e      	ldr	r0, [pc, #248]	@ (800dae0 <plug_holes+0x12c>)
 800d9e8:	f01a faa4 	bl	8027f34 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	791b      	ldrb	r3, [r3, #4]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d006      	beq.n	800da02 <plug_holes+0x4e>
 800d9f4:	4b38      	ldr	r3, [pc, #224]	@ (800dad8 <plug_holes+0x124>)
 800d9f6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800d9fa:	493c      	ldr	r1, [pc, #240]	@ (800daec <plug_holes+0x138>)
 800d9fc:	4838      	ldr	r0, [pc, #224]	@ (800dae0 <plug_holes+0x12c>)
 800d9fe:	f01a fa99 	bl	8027f34 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	881b      	ldrh	r3, [r3, #0]
 800da06:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800da0a:	d906      	bls.n	800da1a <plug_holes+0x66>
 800da0c:	4b32      	ldr	r3, [pc, #200]	@ (800dad8 <plug_holes+0x124>)
 800da0e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800da12:	4937      	ldr	r1, [pc, #220]	@ (800daf0 <plug_holes+0x13c>)
 800da14:	4832      	ldr	r0, [pc, #200]	@ (800dae0 <plug_holes+0x12c>)
 800da16:	f01a fa8d 	bl	8027f34 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	881b      	ldrh	r3, [r3, #0]
 800da1e:	4618      	mov	r0, r3
 800da20:	f7ff ffa4 	bl	800d96c <ptr_to_mem>
 800da24:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800da26:	687a      	ldr	r2, [r7, #4]
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d024      	beq.n	800da78 <plug_holes+0xc4>
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	791b      	ldrb	r3, [r3, #4]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d120      	bne.n	800da78 <plug_holes+0xc4>
 800da36:	4b2b      	ldr	r3, [pc, #172]	@ (800dae4 <plug_holes+0x130>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	68fa      	ldr	r2, [r7, #12]
 800da3c:	429a      	cmp	r2, r3
 800da3e:	d01b      	beq.n	800da78 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800da40:	4b2c      	ldr	r3, [pc, #176]	@ (800daf4 <plug_holes+0x140>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	68fa      	ldr	r2, [r7, #12]
 800da46:	429a      	cmp	r2, r3
 800da48:	d102      	bne.n	800da50 <plug_holes+0x9c>
      lfree = mem;
 800da4a:	4a2a      	ldr	r2, [pc, #168]	@ (800daf4 <plug_holes+0x140>)
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	881a      	ldrh	r2, [r3, #0]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	881b      	ldrh	r3, [r3, #0]
 800da5c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800da60:	d00a      	beq.n	800da78 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	881b      	ldrh	r3, [r3, #0]
 800da66:	4618      	mov	r0, r3
 800da68:	f7ff ff80 	bl	800d96c <ptr_to_mem>
 800da6c:	4604      	mov	r4, r0
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f7ff ff8e 	bl	800d990 <mem_to_ptr>
 800da74:	4603      	mov	r3, r0
 800da76:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	885b      	ldrh	r3, [r3, #2]
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7ff ff75 	bl	800d96c <ptr_to_mem>
 800da82:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800da84:	68ba      	ldr	r2, [r7, #8]
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	429a      	cmp	r2, r3
 800da8a:	d01f      	beq.n	800dacc <plug_holes+0x118>
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	791b      	ldrb	r3, [r3, #4]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d11b      	bne.n	800dacc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800da94:	4b17      	ldr	r3, [pc, #92]	@ (800daf4 <plug_holes+0x140>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	687a      	ldr	r2, [r7, #4]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d102      	bne.n	800daa4 <plug_holes+0xf0>
      lfree = pmem;
 800da9e:	4a15      	ldr	r2, [pc, #84]	@ (800daf4 <plug_holes+0x140>)
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	881a      	ldrh	r2, [r3, #0]
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	881b      	ldrh	r3, [r3, #0]
 800dab0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800dab4:	d00a      	beq.n	800dacc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	881b      	ldrh	r3, [r3, #0]
 800daba:	4618      	mov	r0, r3
 800dabc:	f7ff ff56 	bl	800d96c <ptr_to_mem>
 800dac0:	4604      	mov	r4, r0
 800dac2:	68b8      	ldr	r0, [r7, #8]
 800dac4:	f7ff ff64 	bl	800d990 <mem_to_ptr>
 800dac8:	4603      	mov	r3, r0
 800daca:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800dacc:	bf00      	nop
 800dace:	3714      	adds	r7, #20
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd90      	pop	{r4, r7, pc}
 800dad4:	2000d0ac 	.word	0x2000d0ac
 800dad8:	0802a2a0 	.word	0x0802a2a0
 800dadc:	0802a2d0 	.word	0x0802a2d0
 800dae0:	0802a2e8 	.word	0x0802a2e8
 800dae4:	2000d0b0 	.word	0x2000d0b0
 800dae8:	0802a310 	.word	0x0802a310
 800daec:	0802a32c 	.word	0x0802a32c
 800daf0:	0802a348 	.word	0x0802a348
 800daf4:	2000d0b8 	.word	0x2000d0b8

0800daf8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b082      	sub	sp, #8
 800dafc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800dafe:	4b1d      	ldr	r3, [pc, #116]	@ (800db74 <mem_init+0x7c>)
 800db00:	4a1d      	ldr	r2, [pc, #116]	@ (800db78 <mem_init+0x80>)
 800db02:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800db04:	4b1b      	ldr	r3, [pc, #108]	@ (800db74 <mem_init+0x7c>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800db10:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2200      	movs	r2, #0
 800db16:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2200      	movs	r2, #0
 800db1c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800db1e:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800db22:	f7ff ff23 	bl	800d96c <ptr_to_mem>
 800db26:	4603      	mov	r3, r0
 800db28:	4a14      	ldr	r2, [pc, #80]	@ (800db7c <mem_init+0x84>)
 800db2a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800db2c:	4b13      	ldr	r3, [pc, #76]	@ (800db7c <mem_init+0x84>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	2201      	movs	r2, #1
 800db32:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800db34:	4b11      	ldr	r3, [pc, #68]	@ (800db7c <mem_init+0x84>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800db3c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800db3e:	4b0f      	ldr	r3, [pc, #60]	@ (800db7c <mem_init+0x84>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800db46:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800db48:	4b0a      	ldr	r3, [pc, #40]	@ (800db74 <mem_init+0x7c>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	4a0c      	ldr	r2, [pc, #48]	@ (800db80 <mem_init+0x88>)
 800db4e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800db50:	480c      	ldr	r0, [pc, #48]	@ (800db84 <mem_init+0x8c>)
 800db52:	f00b f981 	bl	8018e58 <sys_mutex_new>
 800db56:	4603      	mov	r3, r0
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d006      	beq.n	800db6a <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800db5c:	4b0a      	ldr	r3, [pc, #40]	@ (800db88 <mem_init+0x90>)
 800db5e:	f240 221f 	movw	r2, #543	@ 0x21f
 800db62:	490a      	ldr	r1, [pc, #40]	@ (800db8c <mem_init+0x94>)
 800db64:	480a      	ldr	r0, [pc, #40]	@ (800db90 <mem_init+0x98>)
 800db66:	f01a f9e5 	bl	8027f34 <iprintf>
  }
}
 800db6a:	bf00      	nop
 800db6c:	3708      	adds	r7, #8
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}
 800db72:	bf00      	nop
 800db74:	2000d0ac 	.word	0x2000d0ac
 800db78:	20048000 	.word	0x20048000
 800db7c:	2000d0b0 	.word	0x2000d0b0
 800db80:	2000d0b8 	.word	0x2000d0b8
 800db84:	2000d0b4 	.word	0x2000d0b4
 800db88:	0802a2a0 	.word	0x0802a2a0
 800db8c:	0802a374 	.word	0x0802a374
 800db90:	0802a2e8 	.word	0x0802a2e8

0800db94 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b086      	sub	sp, #24
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f7ff fef7 	bl	800d990 <mem_to_ptr>
 800dba2:	4603      	mov	r3, r0
 800dba4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	881b      	ldrh	r3, [r3, #0]
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f7ff fede 	bl	800d96c <ptr_to_mem>
 800dbb0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	885b      	ldrh	r3, [r3, #2]
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7ff fed8 	bl	800d96c <ptr_to_mem>
 800dbbc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	881b      	ldrh	r3, [r3, #0]
 800dbc2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800dbc6:	d818      	bhi.n	800dbfa <mem_link_valid+0x66>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	885b      	ldrh	r3, [r3, #2]
 800dbcc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800dbd0:	d813      	bhi.n	800dbfa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800dbd6:	8afa      	ldrh	r2, [r7, #22]
 800dbd8:	429a      	cmp	r2, r3
 800dbda:	d004      	beq.n	800dbe6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	881b      	ldrh	r3, [r3, #0]
 800dbe0:	8afa      	ldrh	r2, [r7, #22]
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d109      	bne.n	800dbfa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800dbe6:	4b08      	ldr	r3, [pc, #32]	@ (800dc08 <mem_link_valid+0x74>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800dbea:	693a      	ldr	r2, [r7, #16]
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d006      	beq.n	800dbfe <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	885b      	ldrh	r3, [r3, #2]
 800dbf4:	8afa      	ldrh	r2, [r7, #22]
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d001      	beq.n	800dbfe <mem_link_valid+0x6a>
    return 0;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	e000      	b.n	800dc00 <mem_link_valid+0x6c>
  }
  return 1;
 800dbfe:	2301      	movs	r3, #1
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3718      	adds	r7, #24
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}
 800dc08:	2000d0b0 	.word	0x2000d0b0

0800dc0c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b088      	sub	sp, #32
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d070      	beq.n	800dcfc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f003 0303 	and.w	r3, r3, #3
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d00d      	beq.n	800dc40 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800dc24:	4b37      	ldr	r3, [pc, #220]	@ (800dd04 <mem_free+0xf8>)
 800dc26:	f240 2273 	movw	r2, #627	@ 0x273
 800dc2a:	4937      	ldr	r1, [pc, #220]	@ (800dd08 <mem_free+0xfc>)
 800dc2c:	4837      	ldr	r0, [pc, #220]	@ (800dd0c <mem_free+0x100>)
 800dc2e:	f01a f981 	bl	8027f34 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dc32:	f00b f96f 	bl	8018f14 <sys_arch_protect>
 800dc36:	60f8      	str	r0, [r7, #12]
 800dc38:	68f8      	ldr	r0, [r7, #12]
 800dc3a:	f00b f979 	bl	8018f30 <sys_arch_unprotect>
    return;
 800dc3e:	e05e      	b.n	800dcfe <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	3b08      	subs	r3, #8
 800dc44:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800dc46:	4b32      	ldr	r3, [pc, #200]	@ (800dd10 <mem_free+0x104>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	69fa      	ldr	r2, [r7, #28]
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d306      	bcc.n	800dc5e <mem_free+0x52>
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f103 020c 	add.w	r2, r3, #12
 800dc56:	4b2f      	ldr	r3, [pc, #188]	@ (800dd14 <mem_free+0x108>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d90d      	bls.n	800dc7a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800dc5e:	4b29      	ldr	r3, [pc, #164]	@ (800dd04 <mem_free+0xf8>)
 800dc60:	f240 227f 	movw	r2, #639	@ 0x27f
 800dc64:	492c      	ldr	r1, [pc, #176]	@ (800dd18 <mem_free+0x10c>)
 800dc66:	4829      	ldr	r0, [pc, #164]	@ (800dd0c <mem_free+0x100>)
 800dc68:	f01a f964 	bl	8027f34 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dc6c:	f00b f952 	bl	8018f14 <sys_arch_protect>
 800dc70:	6138      	str	r0, [r7, #16]
 800dc72:	6938      	ldr	r0, [r7, #16]
 800dc74:	f00b f95c 	bl	8018f30 <sys_arch_unprotect>
    return;
 800dc78:	e041      	b.n	800dcfe <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800dc7a:	4828      	ldr	r0, [pc, #160]	@ (800dd1c <mem_free+0x110>)
 800dc7c:	f00b f908 	bl	8018e90 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800dc80:	69fb      	ldr	r3, [r7, #28]
 800dc82:	791b      	ldrb	r3, [r3, #4]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d110      	bne.n	800dcaa <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800dc88:	4b1e      	ldr	r3, [pc, #120]	@ (800dd04 <mem_free+0xf8>)
 800dc8a:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800dc8e:	4924      	ldr	r1, [pc, #144]	@ (800dd20 <mem_free+0x114>)
 800dc90:	481e      	ldr	r0, [pc, #120]	@ (800dd0c <mem_free+0x100>)
 800dc92:	f01a f94f 	bl	8027f34 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800dc96:	4821      	ldr	r0, [pc, #132]	@ (800dd1c <mem_free+0x110>)
 800dc98:	f00b f909 	bl	8018eae <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dc9c:	f00b f93a 	bl	8018f14 <sys_arch_protect>
 800dca0:	6178      	str	r0, [r7, #20]
 800dca2:	6978      	ldr	r0, [r7, #20]
 800dca4:	f00b f944 	bl	8018f30 <sys_arch_unprotect>
    return;
 800dca8:	e029      	b.n	800dcfe <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800dcaa:	69f8      	ldr	r0, [r7, #28]
 800dcac:	f7ff ff72 	bl	800db94 <mem_link_valid>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d110      	bne.n	800dcd8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800dcb6:	4b13      	ldr	r3, [pc, #76]	@ (800dd04 <mem_free+0xf8>)
 800dcb8:	f240 2295 	movw	r2, #661	@ 0x295
 800dcbc:	4919      	ldr	r1, [pc, #100]	@ (800dd24 <mem_free+0x118>)
 800dcbe:	4813      	ldr	r0, [pc, #76]	@ (800dd0c <mem_free+0x100>)
 800dcc0:	f01a f938 	bl	8027f34 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800dcc4:	4815      	ldr	r0, [pc, #84]	@ (800dd1c <mem_free+0x110>)
 800dcc6:	f00b f8f2 	bl	8018eae <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dcca:	f00b f923 	bl	8018f14 <sys_arch_protect>
 800dcce:	61b8      	str	r0, [r7, #24]
 800dcd0:	69b8      	ldr	r0, [r7, #24]
 800dcd2:	f00b f92d 	bl	8018f30 <sys_arch_unprotect>
    return;
 800dcd6:	e012      	b.n	800dcfe <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800dcd8:	69fb      	ldr	r3, [r7, #28]
 800dcda:	2200      	movs	r2, #0
 800dcdc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800dcde:	4b12      	ldr	r3, [pc, #72]	@ (800dd28 <mem_free+0x11c>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	69fa      	ldr	r2, [r7, #28]
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d202      	bcs.n	800dcee <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800dce8:	4a0f      	ldr	r2, [pc, #60]	@ (800dd28 <mem_free+0x11c>)
 800dcea:	69fb      	ldr	r3, [r7, #28]
 800dcec:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800dcee:	69f8      	ldr	r0, [r7, #28]
 800dcf0:	f7ff fe60 	bl	800d9b4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800dcf4:	4809      	ldr	r0, [pc, #36]	@ (800dd1c <mem_free+0x110>)
 800dcf6:	f00b f8da 	bl	8018eae <sys_mutex_unlock>
 800dcfa:	e000      	b.n	800dcfe <mem_free+0xf2>
    return;
 800dcfc:	bf00      	nop
}
 800dcfe:	3720      	adds	r7, #32
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}
 800dd04:	0802a2a0 	.word	0x0802a2a0
 800dd08:	0802a390 	.word	0x0802a390
 800dd0c:	0802a2e8 	.word	0x0802a2e8
 800dd10:	2000d0ac 	.word	0x2000d0ac
 800dd14:	2000d0b0 	.word	0x2000d0b0
 800dd18:	0802a3b4 	.word	0x0802a3b4
 800dd1c:	2000d0b4 	.word	0x2000d0b4
 800dd20:	0802a3d0 	.word	0x0802a3d0
 800dd24:	0802a3f8 	.word	0x0802a3f8
 800dd28:	2000d0b8 	.word	0x2000d0b8

0800dd2c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b088      	sub	sp, #32
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
 800dd34:	460b      	mov	r3, r1
 800dd36:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800dd38:	887b      	ldrh	r3, [r7, #2]
 800dd3a:	3303      	adds	r3, #3
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	f023 0303 	bic.w	r3, r3, #3
 800dd42:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800dd44:	8bfb      	ldrh	r3, [r7, #30]
 800dd46:	2b0b      	cmp	r3, #11
 800dd48:	d801      	bhi.n	800dd4e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800dd4a:	230c      	movs	r3, #12
 800dd4c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800dd4e:	8bfb      	ldrh	r3, [r7, #30]
 800dd50:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800dd54:	d803      	bhi.n	800dd5e <mem_trim+0x32>
 800dd56:	8bfa      	ldrh	r2, [r7, #30]
 800dd58:	887b      	ldrh	r3, [r7, #2]
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d201      	bcs.n	800dd62 <mem_trim+0x36>
    return NULL;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	e0d8      	b.n	800df14 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800dd62:	4b6e      	ldr	r3, [pc, #440]	@ (800df1c <mem_trim+0x1f0>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	687a      	ldr	r2, [r7, #4]
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d304      	bcc.n	800dd76 <mem_trim+0x4a>
 800dd6c:	4b6c      	ldr	r3, [pc, #432]	@ (800df20 <mem_trim+0x1f4>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	687a      	ldr	r2, [r7, #4]
 800dd72:	429a      	cmp	r2, r3
 800dd74:	d306      	bcc.n	800dd84 <mem_trim+0x58>
 800dd76:	4b6b      	ldr	r3, [pc, #428]	@ (800df24 <mem_trim+0x1f8>)
 800dd78:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800dd7c:	496a      	ldr	r1, [pc, #424]	@ (800df28 <mem_trim+0x1fc>)
 800dd7e:	486b      	ldr	r0, [pc, #428]	@ (800df2c <mem_trim+0x200>)
 800dd80:	f01a f8d8 	bl	8027f34 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800dd84:	4b65      	ldr	r3, [pc, #404]	@ (800df1c <mem_trim+0x1f0>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	687a      	ldr	r2, [r7, #4]
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d304      	bcc.n	800dd98 <mem_trim+0x6c>
 800dd8e:	4b64      	ldr	r3, [pc, #400]	@ (800df20 <mem_trim+0x1f4>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	687a      	ldr	r2, [r7, #4]
 800dd94:	429a      	cmp	r2, r3
 800dd96:	d307      	bcc.n	800dda8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dd98:	f00b f8bc 	bl	8018f14 <sys_arch_protect>
 800dd9c:	60b8      	str	r0, [r7, #8]
 800dd9e:	68b8      	ldr	r0, [r7, #8]
 800dda0:	f00b f8c6 	bl	8018f30 <sys_arch_unprotect>
    return rmem;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	e0b5      	b.n	800df14 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	3b08      	subs	r3, #8
 800ddac:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ddae:	69b8      	ldr	r0, [r7, #24]
 800ddb0:	f7ff fdee 	bl	800d990 <mem_to_ptr>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ddb8:	69bb      	ldr	r3, [r7, #24]
 800ddba:	881a      	ldrh	r2, [r3, #0]
 800ddbc:	8afb      	ldrh	r3, [r7, #22]
 800ddbe:	1ad3      	subs	r3, r2, r3
 800ddc0:	b29b      	uxth	r3, r3
 800ddc2:	3b08      	subs	r3, #8
 800ddc4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ddc6:	8bfa      	ldrh	r2, [r7, #30]
 800ddc8:	8abb      	ldrh	r3, [r7, #20]
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d906      	bls.n	800dddc <mem_trim+0xb0>
 800ddce:	4b55      	ldr	r3, [pc, #340]	@ (800df24 <mem_trim+0x1f8>)
 800ddd0:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800ddd4:	4956      	ldr	r1, [pc, #344]	@ (800df30 <mem_trim+0x204>)
 800ddd6:	4855      	ldr	r0, [pc, #340]	@ (800df2c <mem_trim+0x200>)
 800ddd8:	f01a f8ac 	bl	8027f34 <iprintf>
  if (newsize > size) {
 800dddc:	8bfa      	ldrh	r2, [r7, #30]
 800ddde:	8abb      	ldrh	r3, [r7, #20]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d901      	bls.n	800dde8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800dde4:	2300      	movs	r3, #0
 800dde6:	e095      	b.n	800df14 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800dde8:	8bfa      	ldrh	r2, [r7, #30]
 800ddea:	8abb      	ldrh	r3, [r7, #20]
 800ddec:	429a      	cmp	r2, r3
 800ddee:	d101      	bne.n	800ddf4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	e08f      	b.n	800df14 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ddf4:	484f      	ldr	r0, [pc, #316]	@ (800df34 <mem_trim+0x208>)
 800ddf6:	f00b f84b 	bl	8018e90 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800ddfa:	69bb      	ldr	r3, [r7, #24]
 800ddfc:	881b      	ldrh	r3, [r3, #0]
 800ddfe:	4618      	mov	r0, r3
 800de00:	f7ff fdb4 	bl	800d96c <ptr_to_mem>
 800de04:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	791b      	ldrb	r3, [r3, #4]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d13f      	bne.n	800de8e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800de0e:	69bb      	ldr	r3, [r7, #24]
 800de10:	881b      	ldrh	r3, [r3, #0]
 800de12:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800de16:	d106      	bne.n	800de26 <mem_trim+0xfa>
 800de18:	4b42      	ldr	r3, [pc, #264]	@ (800df24 <mem_trim+0x1f8>)
 800de1a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800de1e:	4946      	ldr	r1, [pc, #280]	@ (800df38 <mem_trim+0x20c>)
 800de20:	4842      	ldr	r0, [pc, #264]	@ (800df2c <mem_trim+0x200>)
 800de22:	f01a f887 	bl	8027f34 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800de26:	693b      	ldr	r3, [r7, #16]
 800de28:	881b      	ldrh	r3, [r3, #0]
 800de2a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800de2c:	8afa      	ldrh	r2, [r7, #22]
 800de2e:	8bfb      	ldrh	r3, [r7, #30]
 800de30:	4413      	add	r3, r2
 800de32:	b29b      	uxth	r3, r3
 800de34:	3308      	adds	r3, #8
 800de36:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800de38:	4b40      	ldr	r3, [pc, #256]	@ (800df3c <mem_trim+0x210>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	693a      	ldr	r2, [r7, #16]
 800de3e:	429a      	cmp	r2, r3
 800de40:	d106      	bne.n	800de50 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800de42:	89fb      	ldrh	r3, [r7, #14]
 800de44:	4618      	mov	r0, r3
 800de46:	f7ff fd91 	bl	800d96c <ptr_to_mem>
 800de4a:	4603      	mov	r3, r0
 800de4c:	4a3b      	ldr	r2, [pc, #236]	@ (800df3c <mem_trim+0x210>)
 800de4e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800de50:	89fb      	ldrh	r3, [r7, #14]
 800de52:	4618      	mov	r0, r3
 800de54:	f7ff fd8a 	bl	800d96c <ptr_to_mem>
 800de58:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	2200      	movs	r2, #0
 800de5e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	89ba      	ldrh	r2, [r7, #12]
 800de64:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	8afa      	ldrh	r2, [r7, #22]
 800de6a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800de6c:	69bb      	ldr	r3, [r7, #24]
 800de6e:	89fa      	ldrh	r2, [r7, #14]
 800de70:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	881b      	ldrh	r3, [r3, #0]
 800de76:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800de7a:	d047      	beq.n	800df0c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	881b      	ldrh	r3, [r3, #0]
 800de80:	4618      	mov	r0, r3
 800de82:	f7ff fd73 	bl	800d96c <ptr_to_mem>
 800de86:	4602      	mov	r2, r0
 800de88:	89fb      	ldrh	r3, [r7, #14]
 800de8a:	8053      	strh	r3, [r2, #2]
 800de8c:	e03e      	b.n	800df0c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800de8e:	8bfb      	ldrh	r3, [r7, #30]
 800de90:	f103 0214 	add.w	r2, r3, #20
 800de94:	8abb      	ldrh	r3, [r7, #20]
 800de96:	429a      	cmp	r2, r3
 800de98:	d838      	bhi.n	800df0c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800de9a:	8afa      	ldrh	r2, [r7, #22]
 800de9c:	8bfb      	ldrh	r3, [r7, #30]
 800de9e:	4413      	add	r3, r2
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	3308      	adds	r3, #8
 800dea4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800dea6:	69bb      	ldr	r3, [r7, #24]
 800dea8:	881b      	ldrh	r3, [r3, #0]
 800deaa:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800deae:	d106      	bne.n	800debe <mem_trim+0x192>
 800deb0:	4b1c      	ldr	r3, [pc, #112]	@ (800df24 <mem_trim+0x1f8>)
 800deb2:	f240 3216 	movw	r2, #790	@ 0x316
 800deb6:	4920      	ldr	r1, [pc, #128]	@ (800df38 <mem_trim+0x20c>)
 800deb8:	481c      	ldr	r0, [pc, #112]	@ (800df2c <mem_trim+0x200>)
 800deba:	f01a f83b 	bl	8027f34 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800debe:	89fb      	ldrh	r3, [r7, #14]
 800dec0:	4618      	mov	r0, r3
 800dec2:	f7ff fd53 	bl	800d96c <ptr_to_mem>
 800dec6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800dec8:	4b1c      	ldr	r3, [pc, #112]	@ (800df3c <mem_trim+0x210>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	693a      	ldr	r2, [r7, #16]
 800dece:	429a      	cmp	r2, r3
 800ded0:	d202      	bcs.n	800ded8 <mem_trim+0x1ac>
      lfree = mem2;
 800ded2:	4a1a      	ldr	r2, [pc, #104]	@ (800df3c <mem_trim+0x210>)
 800ded4:	693b      	ldr	r3, [r7, #16]
 800ded6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ded8:	693b      	ldr	r3, [r7, #16]
 800deda:	2200      	movs	r2, #0
 800dedc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800dede:	69bb      	ldr	r3, [r7, #24]
 800dee0:	881a      	ldrh	r2, [r3, #0]
 800dee2:	693b      	ldr	r3, [r7, #16]
 800dee4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800dee6:	693b      	ldr	r3, [r7, #16]
 800dee8:	8afa      	ldrh	r2, [r7, #22]
 800deea:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800deec:	69bb      	ldr	r3, [r7, #24]
 800deee:	89fa      	ldrh	r2, [r7, #14]
 800def0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800def2:	693b      	ldr	r3, [r7, #16]
 800def4:	881b      	ldrh	r3, [r3, #0]
 800def6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800defa:	d007      	beq.n	800df0c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800defc:	693b      	ldr	r3, [r7, #16]
 800defe:	881b      	ldrh	r3, [r3, #0]
 800df00:	4618      	mov	r0, r3
 800df02:	f7ff fd33 	bl	800d96c <ptr_to_mem>
 800df06:	4602      	mov	r2, r0
 800df08:	89fb      	ldrh	r3, [r7, #14]
 800df0a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800df0c:	4809      	ldr	r0, [pc, #36]	@ (800df34 <mem_trim+0x208>)
 800df0e:	f00a ffce 	bl	8018eae <sys_mutex_unlock>
  return rmem;
 800df12:	687b      	ldr	r3, [r7, #4]
}
 800df14:	4618      	mov	r0, r3
 800df16:	3720      	adds	r7, #32
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}
 800df1c:	2000d0ac 	.word	0x2000d0ac
 800df20:	2000d0b0 	.word	0x2000d0b0
 800df24:	0802a2a0 	.word	0x0802a2a0
 800df28:	0802a42c 	.word	0x0802a42c
 800df2c:	0802a2e8 	.word	0x0802a2e8
 800df30:	0802a444 	.word	0x0802a444
 800df34:	2000d0b4 	.word	0x2000d0b4
 800df38:	0802a464 	.word	0x0802a464
 800df3c:	2000d0b8 	.word	0x2000d0b8

0800df40 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b088      	sub	sp, #32
 800df44:	af00      	add	r7, sp, #0
 800df46:	4603      	mov	r3, r0
 800df48:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800df4a:	88fb      	ldrh	r3, [r7, #6]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d101      	bne.n	800df54 <mem_malloc+0x14>
    return NULL;
 800df50:	2300      	movs	r3, #0
 800df52:	e0e2      	b.n	800e11a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800df54:	88fb      	ldrh	r3, [r7, #6]
 800df56:	3303      	adds	r3, #3
 800df58:	b29b      	uxth	r3, r3
 800df5a:	f023 0303 	bic.w	r3, r3, #3
 800df5e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800df60:	8bbb      	ldrh	r3, [r7, #28]
 800df62:	2b0b      	cmp	r3, #11
 800df64:	d801      	bhi.n	800df6a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800df66:	230c      	movs	r3, #12
 800df68:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800df6a:	8bbb      	ldrh	r3, [r7, #28]
 800df6c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800df70:	d803      	bhi.n	800df7a <mem_malloc+0x3a>
 800df72:	8bba      	ldrh	r2, [r7, #28]
 800df74:	88fb      	ldrh	r3, [r7, #6]
 800df76:	429a      	cmp	r2, r3
 800df78:	d201      	bcs.n	800df7e <mem_malloc+0x3e>
    return NULL;
 800df7a:	2300      	movs	r3, #0
 800df7c:	e0cd      	b.n	800e11a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800df7e:	4869      	ldr	r0, [pc, #420]	@ (800e124 <mem_malloc+0x1e4>)
 800df80:	f00a ff86 	bl	8018e90 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800df84:	4b68      	ldr	r3, [pc, #416]	@ (800e128 <mem_malloc+0x1e8>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4618      	mov	r0, r3
 800df8a:	f7ff fd01 	bl	800d990 <mem_to_ptr>
 800df8e:	4603      	mov	r3, r0
 800df90:	83fb      	strh	r3, [r7, #30]
 800df92:	e0b7      	b.n	800e104 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800df94:	8bfb      	ldrh	r3, [r7, #30]
 800df96:	4618      	mov	r0, r3
 800df98:	f7ff fce8 	bl	800d96c <ptr_to_mem>
 800df9c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	791b      	ldrb	r3, [r3, #4]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	f040 80a7 	bne.w	800e0f6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800dfa8:	697b      	ldr	r3, [r7, #20]
 800dfaa:	881b      	ldrh	r3, [r3, #0]
 800dfac:	461a      	mov	r2, r3
 800dfae:	8bfb      	ldrh	r3, [r7, #30]
 800dfb0:	1ad3      	subs	r3, r2, r3
 800dfb2:	f1a3 0208 	sub.w	r2, r3, #8
 800dfb6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800dfb8:	429a      	cmp	r2, r3
 800dfba:	f0c0 809c 	bcc.w	800e0f6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	881b      	ldrh	r3, [r3, #0]
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	8bfb      	ldrh	r3, [r7, #30]
 800dfc6:	1ad3      	subs	r3, r2, r3
 800dfc8:	f1a3 0208 	sub.w	r2, r3, #8
 800dfcc:	8bbb      	ldrh	r3, [r7, #28]
 800dfce:	3314      	adds	r3, #20
 800dfd0:	429a      	cmp	r2, r3
 800dfd2:	d333      	bcc.n	800e03c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800dfd4:	8bfa      	ldrh	r2, [r7, #30]
 800dfd6:	8bbb      	ldrh	r3, [r7, #28]
 800dfd8:	4413      	add	r3, r2
 800dfda:	b29b      	uxth	r3, r3
 800dfdc:	3308      	adds	r3, #8
 800dfde:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800dfe0:	8a7b      	ldrh	r3, [r7, #18]
 800dfe2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800dfe6:	d106      	bne.n	800dff6 <mem_malloc+0xb6>
 800dfe8:	4b50      	ldr	r3, [pc, #320]	@ (800e12c <mem_malloc+0x1ec>)
 800dfea:	f240 3287 	movw	r2, #903	@ 0x387
 800dfee:	4950      	ldr	r1, [pc, #320]	@ (800e130 <mem_malloc+0x1f0>)
 800dff0:	4850      	ldr	r0, [pc, #320]	@ (800e134 <mem_malloc+0x1f4>)
 800dff2:	f019 ff9f 	bl	8027f34 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800dff6:	8a7b      	ldrh	r3, [r7, #18]
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7ff fcb7 	bl	800d96c <ptr_to_mem>
 800dffe:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	2200      	movs	r2, #0
 800e004:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	881a      	ldrh	r2, [r3, #0]
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	8bfa      	ldrh	r2, [r7, #30]
 800e012:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	8a7a      	ldrh	r2, [r7, #18]
 800e018:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	2201      	movs	r2, #1
 800e01e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	881b      	ldrh	r3, [r3, #0]
 800e024:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800e028:	d00b      	beq.n	800e042 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	881b      	ldrh	r3, [r3, #0]
 800e02e:	4618      	mov	r0, r3
 800e030:	f7ff fc9c 	bl	800d96c <ptr_to_mem>
 800e034:	4602      	mov	r2, r0
 800e036:	8a7b      	ldrh	r3, [r7, #18]
 800e038:	8053      	strh	r3, [r2, #2]
 800e03a:	e002      	b.n	800e042 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	2201      	movs	r2, #1
 800e040:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e042:	4b39      	ldr	r3, [pc, #228]	@ (800e128 <mem_malloc+0x1e8>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	697a      	ldr	r2, [r7, #20]
 800e048:	429a      	cmp	r2, r3
 800e04a:	d127      	bne.n	800e09c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800e04c:	4b36      	ldr	r3, [pc, #216]	@ (800e128 <mem_malloc+0x1e8>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e052:	e005      	b.n	800e060 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e054:	69bb      	ldr	r3, [r7, #24]
 800e056:	881b      	ldrh	r3, [r3, #0]
 800e058:	4618      	mov	r0, r3
 800e05a:	f7ff fc87 	bl	800d96c <ptr_to_mem>
 800e05e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800e060:	69bb      	ldr	r3, [r7, #24]
 800e062:	791b      	ldrb	r3, [r3, #4]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d004      	beq.n	800e072 <mem_malloc+0x132>
 800e068:	4b33      	ldr	r3, [pc, #204]	@ (800e138 <mem_malloc+0x1f8>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	69ba      	ldr	r2, [r7, #24]
 800e06e:	429a      	cmp	r2, r3
 800e070:	d1f0      	bne.n	800e054 <mem_malloc+0x114>
          }
          lfree = cur;
 800e072:	4a2d      	ldr	r2, [pc, #180]	@ (800e128 <mem_malloc+0x1e8>)
 800e074:	69bb      	ldr	r3, [r7, #24]
 800e076:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e078:	4b2b      	ldr	r3, [pc, #172]	@ (800e128 <mem_malloc+0x1e8>)
 800e07a:	681a      	ldr	r2, [r3, #0]
 800e07c:	4b2e      	ldr	r3, [pc, #184]	@ (800e138 <mem_malloc+0x1f8>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	429a      	cmp	r2, r3
 800e082:	d00b      	beq.n	800e09c <mem_malloc+0x15c>
 800e084:	4b28      	ldr	r3, [pc, #160]	@ (800e128 <mem_malloc+0x1e8>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	791b      	ldrb	r3, [r3, #4]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d006      	beq.n	800e09c <mem_malloc+0x15c>
 800e08e:	4b27      	ldr	r3, [pc, #156]	@ (800e12c <mem_malloc+0x1ec>)
 800e090:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800e094:	4929      	ldr	r1, [pc, #164]	@ (800e13c <mem_malloc+0x1fc>)
 800e096:	4827      	ldr	r0, [pc, #156]	@ (800e134 <mem_malloc+0x1f4>)
 800e098:	f019 ff4c 	bl	8027f34 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e09c:	4821      	ldr	r0, [pc, #132]	@ (800e124 <mem_malloc+0x1e4>)
 800e09e:	f00a ff06 	bl	8018eae <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e0a2:	8bba      	ldrh	r2, [r7, #28]
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	4413      	add	r3, r2
 800e0a8:	3308      	adds	r3, #8
 800e0aa:	4a23      	ldr	r2, [pc, #140]	@ (800e138 <mem_malloc+0x1f8>)
 800e0ac:	6812      	ldr	r2, [r2, #0]
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	d906      	bls.n	800e0c0 <mem_malloc+0x180>
 800e0b2:	4b1e      	ldr	r3, [pc, #120]	@ (800e12c <mem_malloc+0x1ec>)
 800e0b4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800e0b8:	4921      	ldr	r1, [pc, #132]	@ (800e140 <mem_malloc+0x200>)
 800e0ba:	481e      	ldr	r0, [pc, #120]	@ (800e134 <mem_malloc+0x1f4>)
 800e0bc:	f019 ff3a 	bl	8027f34 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	f003 0303 	and.w	r3, r3, #3
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d006      	beq.n	800e0d8 <mem_malloc+0x198>
 800e0ca:	4b18      	ldr	r3, [pc, #96]	@ (800e12c <mem_malloc+0x1ec>)
 800e0cc:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800e0d0:	491c      	ldr	r1, [pc, #112]	@ (800e144 <mem_malloc+0x204>)
 800e0d2:	4818      	ldr	r0, [pc, #96]	@ (800e134 <mem_malloc+0x1f4>)
 800e0d4:	f019 ff2e 	bl	8027f34 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e0d8:	697b      	ldr	r3, [r7, #20]
 800e0da:	f003 0303 	and.w	r3, r3, #3
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d006      	beq.n	800e0f0 <mem_malloc+0x1b0>
 800e0e2:	4b12      	ldr	r3, [pc, #72]	@ (800e12c <mem_malloc+0x1ec>)
 800e0e4:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800e0e8:	4917      	ldr	r1, [pc, #92]	@ (800e148 <mem_malloc+0x208>)
 800e0ea:	4812      	ldr	r0, [pc, #72]	@ (800e134 <mem_malloc+0x1f4>)
 800e0ec:	f019 ff22 	bl	8027f34 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	3308      	adds	r3, #8
 800e0f4:	e011      	b.n	800e11a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800e0f6:	8bfb      	ldrh	r3, [r7, #30]
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f7ff fc37 	bl	800d96c <ptr_to_mem>
 800e0fe:	4603      	mov	r3, r0
 800e100:	881b      	ldrh	r3, [r3, #0]
 800e102:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e104:	8bfa      	ldrh	r2, [r7, #30]
 800e106:	8bbb      	ldrh	r3, [r7, #28]
 800e108:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800e10c:	429a      	cmp	r2, r3
 800e10e:	f4ff af41 	bcc.w	800df94 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e112:	4804      	ldr	r0, [pc, #16]	@ (800e124 <mem_malloc+0x1e4>)
 800e114:	f00a fecb 	bl	8018eae <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800e118:	2300      	movs	r3, #0
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3720      	adds	r7, #32
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}
 800e122:	bf00      	nop
 800e124:	2000d0b4 	.word	0x2000d0b4
 800e128:	2000d0b8 	.word	0x2000d0b8
 800e12c:	0802a2a0 	.word	0x0802a2a0
 800e130:	0802a464 	.word	0x0802a464
 800e134:	0802a2e8 	.word	0x0802a2e8
 800e138:	2000d0b0 	.word	0x2000d0b0
 800e13c:	0802a478 	.word	0x0802a478
 800e140:	0802a494 	.word	0x0802a494
 800e144:	0802a4c4 	.word	0x0802a4c4
 800e148:	0802a4f4 	.word	0x0802a4f4

0800e14c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b085      	sub	sp, #20
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	689b      	ldr	r3, [r3, #8]
 800e158:	2200      	movs	r2, #0
 800e15a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	685b      	ldr	r3, [r3, #4]
 800e160:	3303      	adds	r3, #3
 800e162:	f023 0303 	bic.w	r3, r3, #3
 800e166:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800e168:	2300      	movs	r3, #0
 800e16a:	60fb      	str	r3, [r7, #12]
 800e16c:	e011      	b.n	800e192 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	689b      	ldr	r3, [r3, #8]
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	689b      	ldr	r3, [r3, #8]
 800e17c:	68ba      	ldr	r2, [r7, #8]
 800e17e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	881b      	ldrh	r3, [r3, #0]
 800e184:	461a      	mov	r2, r3
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	4413      	add	r3, r2
 800e18a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	3301      	adds	r3, #1
 800e190:	60fb      	str	r3, [r7, #12]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	885b      	ldrh	r3, [r3, #2]
 800e196:	461a      	mov	r2, r3
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	4293      	cmp	r3, r2
 800e19c:	dbe7      	blt.n	800e16e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e19e:	bf00      	nop
 800e1a0:	bf00      	nop
 800e1a2:	3714      	adds	r7, #20
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr

0800e1ac <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b082      	sub	sp, #8
 800e1b0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	80fb      	strh	r3, [r7, #6]
 800e1b6:	e009      	b.n	800e1cc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e1b8:	88fb      	ldrh	r3, [r7, #6]
 800e1ba:	4a08      	ldr	r2, [pc, #32]	@ (800e1dc <memp_init+0x30>)
 800e1bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f7ff ffc3 	bl	800e14c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e1c6:	88fb      	ldrh	r3, [r7, #6]
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	80fb      	strh	r3, [r7, #6]
 800e1cc:	88fb      	ldrh	r3, [r7, #6]
 800e1ce:	2b0c      	cmp	r3, #12
 800e1d0:	d9f2      	bls.n	800e1b8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e1d2:	bf00      	nop
 800e1d4:	bf00      	nop
 800e1d6:	3708      	adds	r7, #8
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}
 800e1dc:	0802cde0 	.word	0x0802cde0

0800e1e0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b084      	sub	sp, #16
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800e1e8:	f00a fe94 	bl	8018f14 <sys_arch_protect>
 800e1ec:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	689b      	ldr	r3, [r3, #8]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d015      	beq.n	800e228 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	689b      	ldr	r3, [r3, #8]
 800e200:	68ba      	ldr	r2, [r7, #8]
 800e202:	6812      	ldr	r2, [r2, #0]
 800e204:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	f003 0303 	and.w	r3, r3, #3
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d006      	beq.n	800e21e <do_memp_malloc_pool+0x3e>
 800e210:	4b09      	ldr	r3, [pc, #36]	@ (800e238 <do_memp_malloc_pool+0x58>)
 800e212:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800e216:	4909      	ldr	r1, [pc, #36]	@ (800e23c <do_memp_malloc_pool+0x5c>)
 800e218:	4809      	ldr	r0, [pc, #36]	@ (800e240 <do_memp_malloc_pool+0x60>)
 800e21a:	f019 fe8b 	bl	8027f34 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e21e:	68f8      	ldr	r0, [r7, #12]
 800e220:	f00a fe86 	bl	8018f30 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	e003      	b.n	800e230 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e228:	68f8      	ldr	r0, [r7, #12]
 800e22a:	f00a fe81 	bl	8018f30 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e22e:	2300      	movs	r3, #0
}
 800e230:	4618      	mov	r0, r3
 800e232:	3710      	adds	r7, #16
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}
 800e238:	0802a518 	.word	0x0802a518
 800e23c:	0802a548 	.word	0x0802a548
 800e240:	0802a56c 	.word	0x0802a56c

0800e244 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b082      	sub	sp, #8
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d106      	bne.n	800e260 <memp_malloc_pool+0x1c>
 800e252:	4b0a      	ldr	r3, [pc, #40]	@ (800e27c <memp_malloc_pool+0x38>)
 800e254:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800e258:	4909      	ldr	r1, [pc, #36]	@ (800e280 <memp_malloc_pool+0x3c>)
 800e25a:	480a      	ldr	r0, [pc, #40]	@ (800e284 <memp_malloc_pool+0x40>)
 800e25c:	f019 fe6a 	bl	8027f34 <iprintf>
  if (desc == NULL) {
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d101      	bne.n	800e26a <memp_malloc_pool+0x26>
    return NULL;
 800e266:	2300      	movs	r3, #0
 800e268:	e003      	b.n	800e272 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f7ff ffb8 	bl	800e1e0 <do_memp_malloc_pool>
 800e270:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800e272:	4618      	mov	r0, r3
 800e274:	3708      	adds	r7, #8
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}
 800e27a:	bf00      	nop
 800e27c:	0802a518 	.word	0x0802a518
 800e280:	0802a594 	.word	0x0802a594
 800e284:	0802a56c 	.word	0x0802a56c

0800e288 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b084      	sub	sp, #16
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	4603      	mov	r3, r0
 800e290:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e292:	79fb      	ldrb	r3, [r7, #7]
 800e294:	2b0c      	cmp	r3, #12
 800e296:	d908      	bls.n	800e2aa <memp_malloc+0x22>
 800e298:	4b0a      	ldr	r3, [pc, #40]	@ (800e2c4 <memp_malloc+0x3c>)
 800e29a:	f240 1257 	movw	r2, #343	@ 0x157
 800e29e:	490a      	ldr	r1, [pc, #40]	@ (800e2c8 <memp_malloc+0x40>)
 800e2a0:	480a      	ldr	r0, [pc, #40]	@ (800e2cc <memp_malloc+0x44>)
 800e2a2:	f019 fe47 	bl	8027f34 <iprintf>
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	e008      	b.n	800e2bc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e2aa:	79fb      	ldrb	r3, [r7, #7]
 800e2ac:	4a08      	ldr	r2, [pc, #32]	@ (800e2d0 <memp_malloc+0x48>)
 800e2ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7ff ff94 	bl	800e1e0 <do_memp_malloc_pool>
 800e2b8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	3710      	adds	r7, #16
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}
 800e2c4:	0802a518 	.word	0x0802a518
 800e2c8:	0802a5a8 	.word	0x0802a5a8
 800e2cc:	0802a56c 	.word	0x0802a56c
 800e2d0:	0802cde0 	.word	0x0802cde0

0800e2d4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b084      	sub	sp, #16
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	f003 0303 	and.w	r3, r3, #3
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d006      	beq.n	800e2f6 <do_memp_free_pool+0x22>
 800e2e8:	4b0d      	ldr	r3, [pc, #52]	@ (800e320 <do_memp_free_pool+0x4c>)
 800e2ea:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800e2ee:	490d      	ldr	r1, [pc, #52]	@ (800e324 <do_memp_free_pool+0x50>)
 800e2f0:	480d      	ldr	r0, [pc, #52]	@ (800e328 <do_memp_free_pool+0x54>)
 800e2f2:	f019 fe1f 	bl	8027f34 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800e2fa:	f00a fe0b 	bl	8018f14 <sys_arch_protect>
 800e2fe:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	689b      	ldr	r3, [r3, #8]
 800e304:	681a      	ldr	r2, [r3, #0]
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	689b      	ldr	r3, [r3, #8]
 800e30e:	68fa      	ldr	r2, [r7, #12]
 800e310:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800e312:	68b8      	ldr	r0, [r7, #8]
 800e314:	f00a fe0c 	bl	8018f30 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800e318:	bf00      	nop
 800e31a:	3710      	adds	r7, #16
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}
 800e320:	0802a518 	.word	0x0802a518
 800e324:	0802a5c8 	.word	0x0802a5c8
 800e328:	0802a56c 	.word	0x0802a56c

0800e32c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b082      	sub	sp, #8
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
 800e334:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d106      	bne.n	800e34a <memp_free_pool+0x1e>
 800e33c:	4b0a      	ldr	r3, [pc, #40]	@ (800e368 <memp_free_pool+0x3c>)
 800e33e:	f240 1295 	movw	r2, #405	@ 0x195
 800e342:	490a      	ldr	r1, [pc, #40]	@ (800e36c <memp_free_pool+0x40>)
 800e344:	480a      	ldr	r0, [pc, #40]	@ (800e370 <memp_free_pool+0x44>)
 800e346:	f019 fdf5 	bl	8027f34 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d007      	beq.n	800e360 <memp_free_pool+0x34>
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d004      	beq.n	800e360 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800e356:	6839      	ldr	r1, [r7, #0]
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f7ff ffbb 	bl	800e2d4 <do_memp_free_pool>
 800e35e:	e000      	b.n	800e362 <memp_free_pool+0x36>
    return;
 800e360:	bf00      	nop
}
 800e362:	3708      	adds	r7, #8
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}
 800e368:	0802a518 	.word	0x0802a518
 800e36c:	0802a594 	.word	0x0802a594
 800e370:	0802a56c 	.word	0x0802a56c

0800e374 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b082      	sub	sp, #8
 800e378:	af00      	add	r7, sp, #0
 800e37a:	4603      	mov	r3, r0
 800e37c:	6039      	str	r1, [r7, #0]
 800e37e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e380:	79fb      	ldrb	r3, [r7, #7]
 800e382:	2b0c      	cmp	r3, #12
 800e384:	d907      	bls.n	800e396 <memp_free+0x22>
 800e386:	4b0c      	ldr	r3, [pc, #48]	@ (800e3b8 <memp_free+0x44>)
 800e388:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800e38c:	490b      	ldr	r1, [pc, #44]	@ (800e3bc <memp_free+0x48>)
 800e38e:	480c      	ldr	r0, [pc, #48]	@ (800e3c0 <memp_free+0x4c>)
 800e390:	f019 fdd0 	bl	8027f34 <iprintf>
 800e394:	e00c      	b.n	800e3b0 <memp_free+0x3c>

  if (mem == NULL) {
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d008      	beq.n	800e3ae <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e39c:	79fb      	ldrb	r3, [r7, #7]
 800e39e:	4a09      	ldr	r2, [pc, #36]	@ (800e3c4 <memp_free+0x50>)
 800e3a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3a4:	6839      	ldr	r1, [r7, #0]
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7ff ff94 	bl	800e2d4 <do_memp_free_pool>
 800e3ac:	e000      	b.n	800e3b0 <memp_free+0x3c>
    return;
 800e3ae:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e3b0:	3708      	adds	r7, #8
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}
 800e3b6:	bf00      	nop
 800e3b8:	0802a518 	.word	0x0802a518
 800e3bc:	0802a5e8 	.word	0x0802a5e8
 800e3c0:	0802a56c 	.word	0x0802a56c
 800e3c4:	0802cde0 	.word	0x0802cde0

0800e3c8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e3cc:	bf00      	nop
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d4:	4770      	bx	lr
	...

0800e3d8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b086      	sub	sp, #24
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	60f8      	str	r0, [r7, #12]
 800e3e0:	60b9      	str	r1, [r7, #8]
 800e3e2:	607a      	str	r2, [r7, #4]
 800e3e4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d108      	bne.n	800e3fe <netif_add+0x26>
 800e3ec:	4b57      	ldr	r3, [pc, #348]	@ (800e54c <netif_add+0x174>)
 800e3ee:	f240 1227 	movw	r2, #295	@ 0x127
 800e3f2:	4957      	ldr	r1, [pc, #348]	@ (800e550 <netif_add+0x178>)
 800e3f4:	4857      	ldr	r0, [pc, #348]	@ (800e554 <netif_add+0x17c>)
 800e3f6:	f019 fd9d 	bl	8027f34 <iprintf>
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	e0a2      	b.n	800e544 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e400:	2b00      	cmp	r3, #0
 800e402:	d108      	bne.n	800e416 <netif_add+0x3e>
 800e404:	4b51      	ldr	r3, [pc, #324]	@ (800e54c <netif_add+0x174>)
 800e406:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800e40a:	4953      	ldr	r1, [pc, #332]	@ (800e558 <netif_add+0x180>)
 800e40c:	4851      	ldr	r0, [pc, #324]	@ (800e554 <netif_add+0x17c>)
 800e40e:	f019 fd91 	bl	8027f34 <iprintf>
 800e412:	2300      	movs	r3, #0
 800e414:	e096      	b.n	800e544 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d101      	bne.n	800e420 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e41c:	4b4f      	ldr	r3, [pc, #316]	@ (800e55c <netif_add+0x184>)
 800e41e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d101      	bne.n	800e42a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e426:	4b4d      	ldr	r3, [pc, #308]	@ (800e55c <netif_add+0x184>)
 800e428:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d101      	bne.n	800e434 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e430:	4b4a      	ldr	r3, [pc, #296]	@ (800e55c <netif_add+0x184>)
 800e432:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	2200      	movs	r2, #0
 800e438:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	2200      	movs	r2, #0
 800e43e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	2200      	movs	r2, #0
 800e444:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	4a45      	ldr	r2, [pc, #276]	@ (800e560 <netif_add+0x188>)
 800e44a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	2200      	movs	r2, #0
 800e450:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	2200      	movs	r2, #0
 800e456:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	2200      	movs	r2, #0
 800e45e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	6a3a      	ldr	r2, [r7, #32]
 800e464:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800e466:	4b3f      	ldr	r3, [pc, #252]	@ (800e564 <netif_add+0x18c>)
 800e468:	781a      	ldrb	r2, [r3, #0]
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e474:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	687a      	ldr	r2, [r7, #4]
 800e47a:	68b9      	ldr	r1, [r7, #8]
 800e47c:	68f8      	ldr	r0, [r7, #12]
 800e47e:	f000 f913 	bl	800e6a8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e484:	68f8      	ldr	r0, [r7, #12]
 800e486:	4798      	blx	r3
 800e488:	4603      	mov	r3, r0
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d001      	beq.n	800e492 <netif_add+0xba>
    return NULL;
 800e48e:	2300      	movs	r3, #0
 800e490:	e058      	b.n	800e544 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e498:	2bff      	cmp	r3, #255	@ 0xff
 800e49a:	d103      	bne.n	800e4a4 <netif_add+0xcc>
        netif->num = 0;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	2200      	movs	r2, #0
 800e4a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e4a8:	4b2f      	ldr	r3, [pc, #188]	@ (800e568 <netif_add+0x190>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	617b      	str	r3, [r7, #20]
 800e4ae:	e02b      	b.n	800e508 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800e4b0:	697a      	ldr	r2, [r7, #20]
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d106      	bne.n	800e4c6 <netif_add+0xee>
 800e4b8:	4b24      	ldr	r3, [pc, #144]	@ (800e54c <netif_add+0x174>)
 800e4ba:	f240 128b 	movw	r2, #395	@ 0x18b
 800e4be:	492b      	ldr	r1, [pc, #172]	@ (800e56c <netif_add+0x194>)
 800e4c0:	4824      	ldr	r0, [pc, #144]	@ (800e554 <netif_add+0x17c>)
 800e4c2:	f019 fd37 	bl	8027f34 <iprintf>
        num_netifs++;
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	3301      	adds	r3, #1
 800e4ca:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800e4cc:	693b      	ldr	r3, [r7, #16]
 800e4ce:	2bff      	cmp	r3, #255	@ 0xff
 800e4d0:	dd06      	ble.n	800e4e0 <netif_add+0x108>
 800e4d2:	4b1e      	ldr	r3, [pc, #120]	@ (800e54c <netif_add+0x174>)
 800e4d4:	f240 128d 	movw	r2, #397	@ 0x18d
 800e4d8:	4925      	ldr	r1, [pc, #148]	@ (800e570 <netif_add+0x198>)
 800e4da:	481e      	ldr	r0, [pc, #120]	@ (800e554 <netif_add+0x17c>)
 800e4dc:	f019 fd2a 	bl	8027f34 <iprintf>
        if (netif2->num == netif->num) {
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d108      	bne.n	800e502 <netif_add+0x12a>
          netif->num++;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e4f6:	3301      	adds	r3, #1
 800e4f8:	b2da      	uxtb	r2, r3
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800e500:	e005      	b.n	800e50e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	617b      	str	r3, [r7, #20]
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d1d0      	bne.n	800e4b0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d1be      	bne.n	800e492 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e51a:	2bfe      	cmp	r3, #254	@ 0xfe
 800e51c:	d103      	bne.n	800e526 <netif_add+0x14e>
    netif_num = 0;
 800e51e:	4b11      	ldr	r3, [pc, #68]	@ (800e564 <netif_add+0x18c>)
 800e520:	2200      	movs	r2, #0
 800e522:	701a      	strb	r2, [r3, #0]
 800e524:	e006      	b.n	800e534 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e52c:	3301      	adds	r3, #1
 800e52e:	b2da      	uxtb	r2, r3
 800e530:	4b0c      	ldr	r3, [pc, #48]	@ (800e564 <netif_add+0x18c>)
 800e532:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e534:	4b0c      	ldr	r3, [pc, #48]	@ (800e568 <netif_add+0x190>)
 800e536:	681a      	ldr	r2, [r3, #0]
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e53c:	4a0a      	ldr	r2, [pc, #40]	@ (800e568 <netif_add+0x190>)
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e542:	68fb      	ldr	r3, [r7, #12]
}
 800e544:	4618      	mov	r0, r3
 800e546:	3718      	adds	r7, #24
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}
 800e54c:	0802a604 	.word	0x0802a604
 800e550:	0802a698 	.word	0x0802a698
 800e554:	0802a654 	.word	0x0802a654
 800e558:	0802a6b4 	.word	0x0802a6b4
 800e55c:	0802ce54 	.word	0x0802ce54
 800e560:	0800e983 	.word	0x0800e983
 800e564:	20010300 	.word	0x20010300
 800e568:	200102f8 	.word	0x200102f8
 800e56c:	0802a6d8 	.word	0x0802a6d8
 800e570:	0802a6ec 	.word	0x0802a6ec

0800e574 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b082      	sub	sp, #8
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
 800e57c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e57e:	6839      	ldr	r1, [r7, #0]
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f002 fe1b 	bl	80111bc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e586:	6839      	ldr	r1, [r7, #0]
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f007 fecb 	bl	8016324 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e58e:	bf00      	nop
 800e590:	3708      	adds	r7, #8
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
	...

0800e598 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b086      	sub	sp, #24
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	60f8      	str	r0, [r7, #12]
 800e5a0:	60b9      	str	r1, [r7, #8]
 800e5a2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d106      	bne.n	800e5b8 <netif_do_set_ipaddr+0x20>
 800e5aa:	4b1d      	ldr	r3, [pc, #116]	@ (800e620 <netif_do_set_ipaddr+0x88>)
 800e5ac:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800e5b0:	491c      	ldr	r1, [pc, #112]	@ (800e624 <netif_do_set_ipaddr+0x8c>)
 800e5b2:	481d      	ldr	r0, [pc, #116]	@ (800e628 <netif_do_set_ipaddr+0x90>)
 800e5b4:	f019 fcbe 	bl	8027f34 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d106      	bne.n	800e5cc <netif_do_set_ipaddr+0x34>
 800e5be:	4b18      	ldr	r3, [pc, #96]	@ (800e620 <netif_do_set_ipaddr+0x88>)
 800e5c0:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800e5c4:	4917      	ldr	r1, [pc, #92]	@ (800e624 <netif_do_set_ipaddr+0x8c>)
 800e5c6:	4818      	ldr	r0, [pc, #96]	@ (800e628 <netif_do_set_ipaddr+0x90>)
 800e5c8:	f019 fcb4 	bl	8027f34 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	681a      	ldr	r2, [r3, #0]
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	3304      	adds	r3, #4
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d01c      	beq.n	800e614 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	3304      	adds	r3, #4
 800e5e4:	681a      	ldr	r2, [r3, #0]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e5ea:	f107 0314 	add.w	r3, r7, #20
 800e5ee:	4619      	mov	r1, r3
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f7ff ffbf 	bl	800e574 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d002      	beq.n	800e602 <netif_do_set_ipaddr+0x6a>
 800e5fc:	68bb      	ldr	r3, [r7, #8]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	e000      	b.n	800e604 <netif_do_set_ipaddr+0x6c>
 800e602:	2300      	movs	r3, #0
 800e604:	68fa      	ldr	r2, [r7, #12]
 800e606:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e608:	2101      	movs	r1, #1
 800e60a:	68f8      	ldr	r0, [r7, #12]
 800e60c:	f000 f8d2 	bl	800e7b4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800e610:	2301      	movs	r3, #1
 800e612:	e000      	b.n	800e616 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800e614:	2300      	movs	r3, #0
}
 800e616:	4618      	mov	r0, r3
 800e618:	3718      	adds	r7, #24
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}
 800e61e:	bf00      	nop
 800e620:	0802a604 	.word	0x0802a604
 800e624:	0802a71c 	.word	0x0802a71c
 800e628:	0802a654 	.word	0x0802a654

0800e62c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e62c:	b480      	push	{r7}
 800e62e:	b085      	sub	sp, #20
 800e630:	af00      	add	r7, sp, #0
 800e632:	60f8      	str	r0, [r7, #12]
 800e634:	60b9      	str	r1, [r7, #8]
 800e636:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	681a      	ldr	r2, [r3, #0]
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	3308      	adds	r3, #8
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	429a      	cmp	r2, r3
 800e644:	d00a      	beq.n	800e65c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e646:	68bb      	ldr	r3, [r7, #8]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d002      	beq.n	800e652 <netif_do_set_netmask+0x26>
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	e000      	b.n	800e654 <netif_do_set_netmask+0x28>
 800e652:	2300      	movs	r3, #0
 800e654:	68fa      	ldr	r2, [r7, #12]
 800e656:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e658:	2301      	movs	r3, #1
 800e65a:	e000      	b.n	800e65e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800e65c:	2300      	movs	r3, #0
}
 800e65e:	4618      	mov	r0, r3
 800e660:	3714      	adds	r7, #20
 800e662:	46bd      	mov	sp, r7
 800e664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e668:	4770      	bx	lr

0800e66a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e66a:	b480      	push	{r7}
 800e66c:	b085      	sub	sp, #20
 800e66e:	af00      	add	r7, sp, #0
 800e670:	60f8      	str	r0, [r7, #12]
 800e672:	60b9      	str	r1, [r7, #8]
 800e674:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	681a      	ldr	r2, [r3, #0]
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	330c      	adds	r3, #12
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	429a      	cmp	r2, r3
 800e682:	d00a      	beq.n	800e69a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d002      	beq.n	800e690 <netif_do_set_gw+0x26>
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	e000      	b.n	800e692 <netif_do_set_gw+0x28>
 800e690:	2300      	movs	r3, #0
 800e692:	68fa      	ldr	r2, [r7, #12]
 800e694:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e696:	2301      	movs	r3, #1
 800e698:	e000      	b.n	800e69c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800e69a:	2300      	movs	r3, #0
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	3714      	adds	r7, #20
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr

0800e6a8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b088      	sub	sp, #32
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	60f8      	str	r0, [r7, #12]
 800e6b0:	60b9      	str	r1, [r7, #8]
 800e6b2:	607a      	str	r2, [r7, #4]
 800e6b4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d101      	bne.n	800e6c8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e6c4:	4b1c      	ldr	r3, [pc, #112]	@ (800e738 <netif_set_addr+0x90>)
 800e6c6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d101      	bne.n	800e6d2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e6ce:	4b1a      	ldr	r3, [pc, #104]	@ (800e738 <netif_set_addr+0x90>)
 800e6d0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d101      	bne.n	800e6dc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e6d8:	4b17      	ldr	r3, [pc, #92]	@ (800e738 <netif_set_addr+0x90>)
 800e6da:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d003      	beq.n	800e6ea <netif_set_addr+0x42>
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d101      	bne.n	800e6ee <netif_set_addr+0x46>
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	e000      	b.n	800e6f0 <netif_set_addr+0x48>
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d006      	beq.n	800e706 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e6f8:	f107 0310 	add.w	r3, r7, #16
 800e6fc:	461a      	mov	r2, r3
 800e6fe:	68b9      	ldr	r1, [r7, #8]
 800e700:	68f8      	ldr	r0, [r7, #12]
 800e702:	f7ff ff49 	bl	800e598 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e706:	69fa      	ldr	r2, [r7, #28]
 800e708:	6879      	ldr	r1, [r7, #4]
 800e70a:	68f8      	ldr	r0, [r7, #12]
 800e70c:	f7ff ff8e 	bl	800e62c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e710:	69ba      	ldr	r2, [r7, #24]
 800e712:	6839      	ldr	r1, [r7, #0]
 800e714:	68f8      	ldr	r0, [r7, #12]
 800e716:	f7ff ffa8 	bl	800e66a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d106      	bne.n	800e72e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e720:	f107 0310 	add.w	r3, r7, #16
 800e724:	461a      	mov	r2, r3
 800e726:	68b9      	ldr	r1, [r7, #8]
 800e728:	68f8      	ldr	r0, [r7, #12]
 800e72a:	f7ff ff35 	bl	800e598 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e72e:	bf00      	nop
 800e730:	3720      	adds	r7, #32
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}
 800e736:	bf00      	nop
 800e738:	0802ce54 	.word	0x0802ce54

0800e73c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e73c:	b480      	push	{r7}
 800e73e:	b083      	sub	sp, #12
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e744:	4a04      	ldr	r2, [pc, #16]	@ (800e758 <netif_set_default+0x1c>)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e74a:	bf00      	nop
 800e74c:	370c      	adds	r7, #12
 800e74e:	46bd      	mov	sp, r7
 800e750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e754:	4770      	bx	lr
 800e756:	bf00      	nop
 800e758:	200102fc 	.word	0x200102fc

0800e75c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b082      	sub	sp, #8
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d107      	bne.n	800e77a <netif_set_up+0x1e>
 800e76a:	4b0f      	ldr	r3, [pc, #60]	@ (800e7a8 <netif_set_up+0x4c>)
 800e76c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800e770:	490e      	ldr	r1, [pc, #56]	@ (800e7ac <netif_set_up+0x50>)
 800e772:	480f      	ldr	r0, [pc, #60]	@ (800e7b0 <netif_set_up+0x54>)
 800e774:	f019 fbde 	bl	8027f34 <iprintf>
 800e778:	e013      	b.n	800e7a2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e780:	f003 0301 	and.w	r3, r3, #1
 800e784:	2b00      	cmp	r3, #0
 800e786:	d10c      	bne.n	800e7a2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e78e:	f043 0301 	orr.w	r3, r3, #1
 800e792:	b2da      	uxtb	r2, r3
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e79a:	2103      	movs	r1, #3
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f000 f809 	bl	800e7b4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e7a2:	3708      	adds	r7, #8
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}
 800e7a8:	0802a604 	.word	0x0802a604
 800e7ac:	0802a78c 	.word	0x0802a78c
 800e7b0:	0802a654 	.word	0x0802a654

0800e7b4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b082      	sub	sp, #8
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
 800e7bc:	460b      	mov	r3, r1
 800e7be:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d106      	bne.n	800e7d4 <netif_issue_reports+0x20>
 800e7c6:	4b18      	ldr	r3, [pc, #96]	@ (800e828 <netif_issue_reports+0x74>)
 800e7c8:	f240 326d 	movw	r2, #877	@ 0x36d
 800e7cc:	4917      	ldr	r1, [pc, #92]	@ (800e82c <netif_issue_reports+0x78>)
 800e7ce:	4818      	ldr	r0, [pc, #96]	@ (800e830 <netif_issue_reports+0x7c>)
 800e7d0:	f019 fbb0 	bl	8027f34 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e7da:	f003 0304 	and.w	r3, r3, #4
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d01e      	beq.n	800e820 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e7e8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d017      	beq.n	800e820 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e7f0:	78fb      	ldrb	r3, [r7, #3]
 800e7f2:	f003 0301 	and.w	r3, r3, #1
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d013      	beq.n	800e822 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	3304      	adds	r3, #4
 800e7fe:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e800:	2b00      	cmp	r3, #0
 800e802:	d00e      	beq.n	800e822 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e80a:	f003 0308 	and.w	r3, r3, #8
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d007      	beq.n	800e822 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	3304      	adds	r3, #4
 800e816:	4619      	mov	r1, r3
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f008 fced 	bl	80171f8 <etharp_request>
 800e81e:	e000      	b.n	800e822 <netif_issue_reports+0x6e>
    return;
 800e820:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e822:	3708      	adds	r7, #8
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}
 800e828:	0802a604 	.word	0x0802a604
 800e82c:	0802a7a8 	.word	0x0802a7a8
 800e830:	0802a654 	.word	0x0802a654

0800e834 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b082      	sub	sp, #8
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d107      	bne.n	800e852 <netif_set_down+0x1e>
 800e842:	4b12      	ldr	r3, [pc, #72]	@ (800e88c <netif_set_down+0x58>)
 800e844:	f240 329b 	movw	r2, #923	@ 0x39b
 800e848:	4911      	ldr	r1, [pc, #68]	@ (800e890 <netif_set_down+0x5c>)
 800e84a:	4812      	ldr	r0, [pc, #72]	@ (800e894 <netif_set_down+0x60>)
 800e84c:	f019 fb72 	bl	8027f34 <iprintf>
 800e850:	e019      	b.n	800e886 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e858:	f003 0301 	and.w	r3, r3, #1
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d012      	beq.n	800e886 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e866:	f023 0301 	bic.w	r3, r3, #1
 800e86a:	b2da      	uxtb	r2, r3
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e878:	f003 0308 	and.w	r3, r3, #8
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d002      	beq.n	800e886 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f008 f877 	bl	8016974 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e886:	3708      	adds	r7, #8
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}
 800e88c:	0802a604 	.word	0x0802a604
 800e890:	0802a7cc 	.word	0x0802a7cc
 800e894:	0802a654 	.word	0x0802a654

0800e898 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d107      	bne.n	800e8b6 <netif_set_link_up+0x1e>
 800e8a6:	4b13      	ldr	r3, [pc, #76]	@ (800e8f4 <netif_set_link_up+0x5c>)
 800e8a8:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800e8ac:	4912      	ldr	r1, [pc, #72]	@ (800e8f8 <netif_set_link_up+0x60>)
 800e8ae:	4813      	ldr	r0, [pc, #76]	@ (800e8fc <netif_set_link_up+0x64>)
 800e8b0:	f019 fb40 	bl	8027f34 <iprintf>
 800e8b4:	e01b      	b.n	800e8ee <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e8bc:	f003 0304 	and.w	r3, r3, #4
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d114      	bne.n	800e8ee <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e8ca:	f043 0304 	orr.w	r3, r3, #4
 800e8ce:	b2da      	uxtb	r2, r3
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e8d6:	2103      	movs	r1, #3
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f7ff ff6b 	bl	800e7b4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	69db      	ldr	r3, [r3, #28]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d003      	beq.n	800e8ee <netif_set_link_up+0x56>
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	69db      	ldr	r3, [r3, #28]
 800e8ea:	6878      	ldr	r0, [r7, #4]
 800e8ec:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e8ee:	3708      	adds	r7, #8
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}
 800e8f4:	0802a604 	.word	0x0802a604
 800e8f8:	0802a7ec 	.word	0x0802a7ec
 800e8fc:	0802a654 	.word	0x0802a654

0800e900 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b082      	sub	sp, #8
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d107      	bne.n	800e91e <netif_set_link_down+0x1e>
 800e90e:	4b11      	ldr	r3, [pc, #68]	@ (800e954 <netif_set_link_down+0x54>)
 800e910:	f240 4206 	movw	r2, #1030	@ 0x406
 800e914:	4910      	ldr	r1, [pc, #64]	@ (800e958 <netif_set_link_down+0x58>)
 800e916:	4811      	ldr	r0, [pc, #68]	@ (800e95c <netif_set_link_down+0x5c>)
 800e918:	f019 fb0c 	bl	8027f34 <iprintf>
 800e91c:	e017      	b.n	800e94e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e924:	f003 0304 	and.w	r3, r3, #4
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d010      	beq.n	800e94e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e932:	f023 0304 	bic.w	r3, r3, #4
 800e936:	b2da      	uxtb	r2, r3
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	69db      	ldr	r3, [r3, #28]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d003      	beq.n	800e94e <netif_set_link_down+0x4e>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	69db      	ldr	r3, [r3, #28]
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e94e:	3708      	adds	r7, #8
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}
 800e954:	0802a604 	.word	0x0802a604
 800e958:	0802a810 	.word	0x0802a810
 800e95c:	0802a654 	.word	0x0802a654

0800e960 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e960:	b480      	push	{r7}
 800e962:	b083      	sub	sp, #12
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
 800e968:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d002      	beq.n	800e976 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	683a      	ldr	r2, [r7, #0]
 800e974:	61da      	str	r2, [r3, #28]
  }
}
 800e976:	bf00      	nop
 800e978:	370c      	adds	r7, #12
 800e97a:	46bd      	mov	sp, r7
 800e97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e980:	4770      	bx	lr

0800e982 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e982:	b480      	push	{r7}
 800e984:	b085      	sub	sp, #20
 800e986:	af00      	add	r7, sp, #0
 800e988:	60f8      	str	r0, [r7, #12]
 800e98a:	60b9      	str	r1, [r7, #8]
 800e98c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e98e:	f06f 030b 	mvn.w	r3, #11
}
 800e992:	4618      	mov	r0, r3
 800e994:	3714      	adds	r7, #20
 800e996:	46bd      	mov	sp, r7
 800e998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99c:	4770      	bx	lr
	...

0800e9a0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	b085      	sub	sp, #20
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e9aa:	79fb      	ldrb	r3, [r7, #7]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d013      	beq.n	800e9d8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e9b0:	4b0d      	ldr	r3, [pc, #52]	@ (800e9e8 <netif_get_by_index+0x48>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	60fb      	str	r3, [r7, #12]
 800e9b6:	e00c      	b.n	800e9d2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e9be:	3301      	adds	r3, #1
 800e9c0:	b2db      	uxtb	r3, r3
 800e9c2:	79fa      	ldrb	r2, [r7, #7]
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d101      	bne.n	800e9cc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	e006      	b.n	800e9da <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	60fb      	str	r3, [r7, #12]
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d1ef      	bne.n	800e9b8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e9d8:	2300      	movs	r3, #0
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3714      	adds	r7, #20
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e4:	4770      	bx	lr
 800e9e6:	bf00      	nop
 800e9e8:	200102f8 	.word	0x200102f8

0800e9ec <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(const char *name)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b084      	sub	sp, #16
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
  struct netif *netif;
  u8_t num;

  LWIP_ASSERT_CORE_LOCKED();

  if (name == NULL) {
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d101      	bne.n	800e9fe <netif_find+0x12>
    return NULL;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	e028      	b.n	800ea50 <netif_find+0x64>
  }

  num = (u8_t)atoi(&name[2]);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	3302      	adds	r3, #2
 800ea02:	4618      	mov	r0, r3
 800ea04:	f018 fea4 	bl	8027750 <atoi>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	72fb      	strb	r3, [r7, #11]

  NETIF_FOREACH(netif) {
 800ea0c:	4b12      	ldr	r3, [pc, #72]	@ (800ea58 <netif_find+0x6c>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	60fb      	str	r3, [r7, #12]
 800ea12:	e019      	b.n	800ea48 <netif_find+0x5c>
    if (num == netif->num &&
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ea1a:	7afa      	ldrb	r2, [r7, #11]
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	d110      	bne.n	800ea42 <netif_find+0x56>
        name[0] == netif->name[0] &&
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	781a      	ldrb	r2, [r3, #0]
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
    if (num == netif->num &&
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	d109      	bne.n	800ea42 <netif_find+0x56>
        name[1] == netif->name[1]) {
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	3301      	adds	r3, #1
 800ea32:	781a      	ldrb	r2, [r3, #0]
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
        name[0] == netif->name[0] &&
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d101      	bne.n	800ea42 <netif_find+0x56>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	e006      	b.n	800ea50 <netif_find+0x64>
  NETIF_FOREACH(netif) {
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	60fb      	str	r3, [r7, #12]
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d1e2      	bne.n	800ea14 <netif_find+0x28>
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
 800ea4e:	2300      	movs	r3, #0
}
 800ea50:	4618      	mov	r0, r3
 800ea52:	3710      	adds	r7, #16
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}
 800ea58:	200102f8 	.word	0x200102f8

0800ea5c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b082      	sub	sp, #8
 800ea60:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ea62:	f00a fa57 	bl	8018f14 <sys_arch_protect>
 800ea66:	6038      	str	r0, [r7, #0]
 800ea68:	4b0d      	ldr	r3, [pc, #52]	@ (800eaa0 <pbuf_free_ooseq+0x44>)
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	701a      	strb	r2, [r3, #0]
 800ea6e:	6838      	ldr	r0, [r7, #0]
 800ea70:	f00a fa5e 	bl	8018f30 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ea74:	4b0b      	ldr	r3, [pc, #44]	@ (800eaa4 <pbuf_free_ooseq+0x48>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	607b      	str	r3, [r7, #4]
 800ea7a:	e00a      	b.n	800ea92 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d003      	beq.n	800ea8c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f002 fbd7 	bl	8011238 <tcp_free_ooseq>
      return;
 800ea8a:	e005      	b.n	800ea98 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	68db      	ldr	r3, [r3, #12]
 800ea90:	607b      	str	r3, [r7, #4]
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d1f1      	bne.n	800ea7c <pbuf_free_ooseq+0x20>
    }
  }
}
 800ea98:	3708      	adds	r7, #8
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}
 800ea9e:	bf00      	nop
 800eaa0:	20010301 	.word	0x20010301
 800eaa4:	20010310 	.word	0x20010310

0800eaa8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b082      	sub	sp, #8
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800eab0:	f7ff ffd4 	bl	800ea5c <pbuf_free_ooseq>
}
 800eab4:	bf00      	nop
 800eab6:	3708      	adds	r7, #8
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}

0800eabc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b082      	sub	sp, #8
 800eac0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800eac2:	f00a fa27 	bl	8018f14 <sys_arch_protect>
 800eac6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800eac8:	4b0f      	ldr	r3, [pc, #60]	@ (800eb08 <pbuf_pool_is_empty+0x4c>)
 800eaca:	781b      	ldrb	r3, [r3, #0]
 800eacc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800eace:	4b0e      	ldr	r3, [pc, #56]	@ (800eb08 <pbuf_pool_is_empty+0x4c>)
 800ead0:	2201      	movs	r2, #1
 800ead2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f00a fa2b 	bl	8018f30 <sys_arch_unprotect>

  if (!queued) {
 800eada:	78fb      	ldrb	r3, [r7, #3]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d10f      	bne.n	800eb00 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800eae0:	2100      	movs	r1, #0
 800eae2:	480a      	ldr	r0, [pc, #40]	@ (800eb0c <pbuf_pool_is_empty+0x50>)
 800eae4:	f7fe fe5c 	bl	800d7a0 <tcpip_try_callback>
 800eae8:	4603      	mov	r3, r0
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d008      	beq.n	800eb00 <pbuf_pool_is_empty+0x44>
 800eaee:	f00a fa11 	bl	8018f14 <sys_arch_protect>
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	4b04      	ldr	r3, [pc, #16]	@ (800eb08 <pbuf_pool_is_empty+0x4c>)
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	701a      	strb	r2, [r3, #0]
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f00a fa18 	bl	8018f30 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800eb00:	bf00      	nop
 800eb02:	3708      	adds	r7, #8
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}
 800eb08:	20010301 	.word	0x20010301
 800eb0c:	0800eaa9 	.word	0x0800eaa9

0800eb10 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800eb10:	b480      	push	{r7}
 800eb12:	b085      	sub	sp, #20
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	60f8      	str	r0, [r7, #12]
 800eb18:	60b9      	str	r1, [r7, #8]
 800eb1a:	4611      	mov	r1, r2
 800eb1c:	461a      	mov	r2, r3
 800eb1e:	460b      	mov	r3, r1
 800eb20:	80fb      	strh	r3, [r7, #6]
 800eb22:	4613      	mov	r3, r2
 800eb24:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	68ba      	ldr	r2, [r7, #8]
 800eb30:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	88fa      	ldrh	r2, [r7, #6]
 800eb36:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	88ba      	ldrh	r2, [r7, #4]
 800eb3c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800eb3e:	8b3b      	ldrh	r3, [r7, #24]
 800eb40:	b2da      	uxtb	r2, r3
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	7f3a      	ldrb	r2, [r7, #28]
 800eb4a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2201      	movs	r2, #1
 800eb50:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	2200      	movs	r2, #0
 800eb56:	73da      	strb	r2, [r3, #15]
}
 800eb58:	bf00      	nop
 800eb5a:	3714      	adds	r7, #20
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb62:	4770      	bx	lr

0800eb64 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b08c      	sub	sp, #48	@ 0x30
 800eb68:	af02      	add	r7, sp, #8
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	71fb      	strb	r3, [r7, #7]
 800eb6e:	460b      	mov	r3, r1
 800eb70:	80bb      	strh	r3, [r7, #4]
 800eb72:	4613      	mov	r3, r2
 800eb74:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800eb76:	79fb      	ldrb	r3, [r7, #7]
 800eb78:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800eb7a:	887b      	ldrh	r3, [r7, #2]
 800eb7c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800eb80:	d07f      	beq.n	800ec82 <pbuf_alloc+0x11e>
 800eb82:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800eb86:	f300 80c8 	bgt.w	800ed1a <pbuf_alloc+0x1b6>
 800eb8a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800eb8e:	d010      	beq.n	800ebb2 <pbuf_alloc+0x4e>
 800eb90:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800eb94:	f300 80c1 	bgt.w	800ed1a <pbuf_alloc+0x1b6>
 800eb98:	2b01      	cmp	r3, #1
 800eb9a:	d002      	beq.n	800eba2 <pbuf_alloc+0x3e>
 800eb9c:	2b41      	cmp	r3, #65	@ 0x41
 800eb9e:	f040 80bc 	bne.w	800ed1a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800eba2:	887a      	ldrh	r2, [r7, #2]
 800eba4:	88bb      	ldrh	r3, [r7, #4]
 800eba6:	4619      	mov	r1, r3
 800eba8:	2000      	movs	r0, #0
 800ebaa:	f000 f8d1 	bl	800ed50 <pbuf_alloc_reference>
 800ebae:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800ebb0:	e0bd      	b.n	800ed2e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ebba:	88bb      	ldrh	r3, [r7, #4]
 800ebbc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ebbe:	200c      	movs	r0, #12
 800ebc0:	f7ff fb62 	bl	800e288 <memp_malloc>
 800ebc4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d109      	bne.n	800ebe0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ebcc:	f7ff ff76 	bl	800eabc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ebd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d002      	beq.n	800ebdc <pbuf_alloc+0x78>
            pbuf_free(p);
 800ebd6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ebd8:	f000 fada 	bl	800f190 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	e0a7      	b.n	800ed30 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ebe0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ebe2:	3303      	adds	r3, #3
 800ebe4:	b29b      	uxth	r3, r3
 800ebe6:	f023 0303 	bic.w	r3, r3, #3
 800ebea:	b29b      	uxth	r3, r3
 800ebec:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800ebf0:	b29b      	uxth	r3, r3
 800ebf2:	8b7a      	ldrh	r2, [r7, #26]
 800ebf4:	4293      	cmp	r3, r2
 800ebf6:	bf28      	it	cs
 800ebf8:	4613      	movcs	r3, r2
 800ebfa:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ebfc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ebfe:	3310      	adds	r3, #16
 800ec00:	693a      	ldr	r2, [r7, #16]
 800ec02:	4413      	add	r3, r2
 800ec04:	3303      	adds	r3, #3
 800ec06:	f023 0303 	bic.w	r3, r3, #3
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	89f9      	ldrh	r1, [r7, #14]
 800ec0e:	8b7a      	ldrh	r2, [r7, #26]
 800ec10:	2300      	movs	r3, #0
 800ec12:	9301      	str	r3, [sp, #4]
 800ec14:	887b      	ldrh	r3, [r7, #2]
 800ec16:	9300      	str	r3, [sp, #0]
 800ec18:	460b      	mov	r3, r1
 800ec1a:	4601      	mov	r1, r0
 800ec1c:	6938      	ldr	r0, [r7, #16]
 800ec1e:	f7ff ff77 	bl	800eb10 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ec22:	693b      	ldr	r3, [r7, #16]
 800ec24:	685b      	ldr	r3, [r3, #4]
 800ec26:	f003 0303 	and.w	r3, r3, #3
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d006      	beq.n	800ec3c <pbuf_alloc+0xd8>
 800ec2e:	4b42      	ldr	r3, [pc, #264]	@ (800ed38 <pbuf_alloc+0x1d4>)
 800ec30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ec34:	4941      	ldr	r1, [pc, #260]	@ (800ed3c <pbuf_alloc+0x1d8>)
 800ec36:	4842      	ldr	r0, [pc, #264]	@ (800ed40 <pbuf_alloc+0x1dc>)
 800ec38:	f019 f97c 	bl	8027f34 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ec3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ec3e:	3303      	adds	r3, #3
 800ec40:	f023 0303 	bic.w	r3, r3, #3
 800ec44:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800ec48:	d106      	bne.n	800ec58 <pbuf_alloc+0xf4>
 800ec4a:	4b3b      	ldr	r3, [pc, #236]	@ (800ed38 <pbuf_alloc+0x1d4>)
 800ec4c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800ec50:	493c      	ldr	r1, [pc, #240]	@ (800ed44 <pbuf_alloc+0x1e0>)
 800ec52:	483b      	ldr	r0, [pc, #236]	@ (800ed40 <pbuf_alloc+0x1dc>)
 800ec54:	f019 f96e 	bl	8027f34 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ec58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d102      	bne.n	800ec64 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec62:	e002      	b.n	800ec6a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ec64:	69fb      	ldr	r3, [r7, #28]
 800ec66:	693a      	ldr	r2, [r7, #16]
 800ec68:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ec6a:	693b      	ldr	r3, [r7, #16]
 800ec6c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ec6e:	8b7a      	ldrh	r2, [r7, #26]
 800ec70:	89fb      	ldrh	r3, [r7, #14]
 800ec72:	1ad3      	subs	r3, r2, r3
 800ec74:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ec76:	2300      	movs	r3, #0
 800ec78:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800ec7a:	8b7b      	ldrh	r3, [r7, #26]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d19e      	bne.n	800ebbe <pbuf_alloc+0x5a>
      break;
 800ec80:	e055      	b.n	800ed2e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ec82:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ec84:	3303      	adds	r3, #3
 800ec86:	b29b      	uxth	r3, r3
 800ec88:	f023 0303 	bic.w	r3, r3, #3
 800ec8c:	b29a      	uxth	r2, r3
 800ec8e:	88bb      	ldrh	r3, [r7, #4]
 800ec90:	3303      	adds	r3, #3
 800ec92:	b29b      	uxth	r3, r3
 800ec94:	f023 0303 	bic.w	r3, r3, #3
 800ec98:	b29b      	uxth	r3, r3
 800ec9a:	4413      	add	r3, r2
 800ec9c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ec9e:	8b3b      	ldrh	r3, [r7, #24]
 800eca0:	3310      	adds	r3, #16
 800eca2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800eca4:	8b3a      	ldrh	r2, [r7, #24]
 800eca6:	88bb      	ldrh	r3, [r7, #4]
 800eca8:	3303      	adds	r3, #3
 800ecaa:	f023 0303 	bic.w	r3, r3, #3
 800ecae:	429a      	cmp	r2, r3
 800ecb0:	d306      	bcc.n	800ecc0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ecb2:	8afa      	ldrh	r2, [r7, #22]
 800ecb4:	88bb      	ldrh	r3, [r7, #4]
 800ecb6:	3303      	adds	r3, #3
 800ecb8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d201      	bcs.n	800ecc4 <pbuf_alloc+0x160>
        return NULL;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	e035      	b.n	800ed30 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ecc4:	8afb      	ldrh	r3, [r7, #22]
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7ff f93a 	bl	800df40 <mem_malloc>
 800eccc:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800ecce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d101      	bne.n	800ecd8 <pbuf_alloc+0x174>
        return NULL;
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	e02b      	b.n	800ed30 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ecd8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ecda:	3310      	adds	r3, #16
 800ecdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ecde:	4413      	add	r3, r2
 800ece0:	3303      	adds	r3, #3
 800ece2:	f023 0303 	bic.w	r3, r3, #3
 800ece6:	4618      	mov	r0, r3
 800ece8:	88b9      	ldrh	r1, [r7, #4]
 800ecea:	88ba      	ldrh	r2, [r7, #4]
 800ecec:	2300      	movs	r3, #0
 800ecee:	9301      	str	r3, [sp, #4]
 800ecf0:	887b      	ldrh	r3, [r7, #2]
 800ecf2:	9300      	str	r3, [sp, #0]
 800ecf4:	460b      	mov	r3, r1
 800ecf6:	4601      	mov	r1, r0
 800ecf8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ecfa:	f7ff ff09 	bl	800eb10 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ecfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed00:	685b      	ldr	r3, [r3, #4]
 800ed02:	f003 0303 	and.w	r3, r3, #3
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d010      	beq.n	800ed2c <pbuf_alloc+0x1c8>
 800ed0a:	4b0b      	ldr	r3, [pc, #44]	@ (800ed38 <pbuf_alloc+0x1d4>)
 800ed0c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800ed10:	490d      	ldr	r1, [pc, #52]	@ (800ed48 <pbuf_alloc+0x1e4>)
 800ed12:	480b      	ldr	r0, [pc, #44]	@ (800ed40 <pbuf_alloc+0x1dc>)
 800ed14:	f019 f90e 	bl	8027f34 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ed18:	e008      	b.n	800ed2c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ed1a:	4b07      	ldr	r3, [pc, #28]	@ (800ed38 <pbuf_alloc+0x1d4>)
 800ed1c:	f240 1227 	movw	r2, #295	@ 0x127
 800ed20:	490a      	ldr	r1, [pc, #40]	@ (800ed4c <pbuf_alloc+0x1e8>)
 800ed22:	4807      	ldr	r0, [pc, #28]	@ (800ed40 <pbuf_alloc+0x1dc>)
 800ed24:	f019 f906 	bl	8027f34 <iprintf>
      return NULL;
 800ed28:	2300      	movs	r3, #0
 800ed2a:	e001      	b.n	800ed30 <pbuf_alloc+0x1cc>
      break;
 800ed2c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ed2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3728      	adds	r7, #40	@ 0x28
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}
 800ed38:	0802a834 	.word	0x0802a834
 800ed3c:	0802a864 	.word	0x0802a864
 800ed40:	0802a894 	.word	0x0802a894
 800ed44:	0802a8bc 	.word	0x0802a8bc
 800ed48:	0802a8f0 	.word	0x0802a8f0
 800ed4c:	0802a91c 	.word	0x0802a91c

0800ed50 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b086      	sub	sp, #24
 800ed54:	af02      	add	r7, sp, #8
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	460b      	mov	r3, r1
 800ed5a:	807b      	strh	r3, [r7, #2]
 800ed5c:	4613      	mov	r3, r2
 800ed5e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ed60:	883b      	ldrh	r3, [r7, #0]
 800ed62:	2b41      	cmp	r3, #65	@ 0x41
 800ed64:	d009      	beq.n	800ed7a <pbuf_alloc_reference+0x2a>
 800ed66:	883b      	ldrh	r3, [r7, #0]
 800ed68:	2b01      	cmp	r3, #1
 800ed6a:	d006      	beq.n	800ed7a <pbuf_alloc_reference+0x2a>
 800ed6c:	4b0f      	ldr	r3, [pc, #60]	@ (800edac <pbuf_alloc_reference+0x5c>)
 800ed6e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800ed72:	490f      	ldr	r1, [pc, #60]	@ (800edb0 <pbuf_alloc_reference+0x60>)
 800ed74:	480f      	ldr	r0, [pc, #60]	@ (800edb4 <pbuf_alloc_reference+0x64>)
 800ed76:	f019 f8dd 	bl	8027f34 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ed7a:	200b      	movs	r0, #11
 800ed7c:	f7ff fa84 	bl	800e288 <memp_malloc>
 800ed80:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d101      	bne.n	800ed8c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	e00b      	b.n	800eda4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ed8c:	8879      	ldrh	r1, [r7, #2]
 800ed8e:	887a      	ldrh	r2, [r7, #2]
 800ed90:	2300      	movs	r3, #0
 800ed92:	9301      	str	r3, [sp, #4]
 800ed94:	883b      	ldrh	r3, [r7, #0]
 800ed96:	9300      	str	r3, [sp, #0]
 800ed98:	460b      	mov	r3, r1
 800ed9a:	6879      	ldr	r1, [r7, #4]
 800ed9c:	68f8      	ldr	r0, [r7, #12]
 800ed9e:	f7ff feb7 	bl	800eb10 <pbuf_init_alloced_pbuf>
  return p;
 800eda2:	68fb      	ldr	r3, [r7, #12]
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3710      	adds	r7, #16
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}
 800edac:	0802a834 	.word	0x0802a834
 800edb0:	0802a938 	.word	0x0802a938
 800edb4:	0802a894 	.word	0x0802a894

0800edb8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b088      	sub	sp, #32
 800edbc:	af02      	add	r7, sp, #8
 800edbe:	607b      	str	r3, [r7, #4]
 800edc0:	4603      	mov	r3, r0
 800edc2:	73fb      	strb	r3, [r7, #15]
 800edc4:	460b      	mov	r3, r1
 800edc6:	81bb      	strh	r3, [r7, #12]
 800edc8:	4613      	mov	r3, r2
 800edca:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800edcc:	7bfb      	ldrb	r3, [r7, #15]
 800edce:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800edd0:	8a7b      	ldrh	r3, [r7, #18]
 800edd2:	3303      	adds	r3, #3
 800edd4:	f023 0203 	bic.w	r2, r3, #3
 800edd8:	89bb      	ldrh	r3, [r7, #12]
 800edda:	441a      	add	r2, r3
 800eddc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800edde:	429a      	cmp	r2, r3
 800ede0:	d901      	bls.n	800ede6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ede2:	2300      	movs	r3, #0
 800ede4:	e018      	b.n	800ee18 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ede6:	6a3b      	ldr	r3, [r7, #32]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d007      	beq.n	800edfc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800edec:	8a7b      	ldrh	r3, [r7, #18]
 800edee:	3303      	adds	r3, #3
 800edf0:	f023 0303 	bic.w	r3, r3, #3
 800edf4:	6a3a      	ldr	r2, [r7, #32]
 800edf6:	4413      	add	r3, r2
 800edf8:	617b      	str	r3, [r7, #20]
 800edfa:	e001      	b.n	800ee00 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800edfc:	2300      	movs	r3, #0
 800edfe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	89b9      	ldrh	r1, [r7, #12]
 800ee04:	89ba      	ldrh	r2, [r7, #12]
 800ee06:	2302      	movs	r3, #2
 800ee08:	9301      	str	r3, [sp, #4]
 800ee0a:	897b      	ldrh	r3, [r7, #10]
 800ee0c:	9300      	str	r3, [sp, #0]
 800ee0e:	460b      	mov	r3, r1
 800ee10:	6979      	ldr	r1, [r7, #20]
 800ee12:	f7ff fe7d 	bl	800eb10 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ee16:	687b      	ldr	r3, [r7, #4]
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3718      	adds	r7, #24
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}

0800ee20 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b084      	sub	sp, #16
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	460b      	mov	r3, r1
 800ee2a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d106      	bne.n	800ee40 <pbuf_realloc+0x20>
 800ee32:	4b3a      	ldr	r3, [pc, #232]	@ (800ef1c <pbuf_realloc+0xfc>)
 800ee34:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800ee38:	4939      	ldr	r1, [pc, #228]	@ (800ef20 <pbuf_realloc+0x100>)
 800ee3a:	483a      	ldr	r0, [pc, #232]	@ (800ef24 <pbuf_realloc+0x104>)
 800ee3c:	f019 f87a 	bl	8027f34 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	891b      	ldrh	r3, [r3, #8]
 800ee44:	887a      	ldrh	r2, [r7, #2]
 800ee46:	429a      	cmp	r2, r3
 800ee48:	d263      	bcs.n	800ef12 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	891a      	ldrh	r2, [r3, #8]
 800ee4e:	887b      	ldrh	r3, [r7, #2]
 800ee50:	1ad3      	subs	r3, r2, r3
 800ee52:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ee54:	887b      	ldrh	r3, [r7, #2]
 800ee56:	817b      	strh	r3, [r7, #10]
  q = p;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ee5c:	e018      	b.n	800ee90 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	895b      	ldrh	r3, [r3, #10]
 800ee62:	897a      	ldrh	r2, [r7, #10]
 800ee64:	1ad3      	subs	r3, r2, r3
 800ee66:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	891a      	ldrh	r2, [r3, #8]
 800ee6c:	893b      	ldrh	r3, [r7, #8]
 800ee6e:	1ad3      	subs	r3, r2, r3
 800ee70:	b29a      	uxth	r2, r3
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d106      	bne.n	800ee90 <pbuf_realloc+0x70>
 800ee82:	4b26      	ldr	r3, [pc, #152]	@ (800ef1c <pbuf_realloc+0xfc>)
 800ee84:	f240 12af 	movw	r2, #431	@ 0x1af
 800ee88:	4927      	ldr	r1, [pc, #156]	@ (800ef28 <pbuf_realloc+0x108>)
 800ee8a:	4826      	ldr	r0, [pc, #152]	@ (800ef24 <pbuf_realloc+0x104>)
 800ee8c:	f019 f852 	bl	8027f34 <iprintf>
  while (rem_len > q->len) {
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	895b      	ldrh	r3, [r3, #10]
 800ee94:	897a      	ldrh	r2, [r7, #10]
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d8e1      	bhi.n	800ee5e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	7b1b      	ldrb	r3, [r3, #12]
 800ee9e:	f003 030f 	and.w	r3, r3, #15
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d121      	bne.n	800eeea <pbuf_realloc+0xca>
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	895b      	ldrh	r3, [r3, #10]
 800eeaa:	897a      	ldrh	r2, [r7, #10]
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d01c      	beq.n	800eeea <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	7b5b      	ldrb	r3, [r3, #13]
 800eeb4:	f003 0302 	and.w	r3, r3, #2
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d116      	bne.n	800eeea <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	685a      	ldr	r2, [r3, #4]
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	1ad3      	subs	r3, r2, r3
 800eec4:	b29a      	uxth	r2, r3
 800eec6:	897b      	ldrh	r3, [r7, #10]
 800eec8:	4413      	add	r3, r2
 800eeca:	b29b      	uxth	r3, r3
 800eecc:	4619      	mov	r1, r3
 800eece:	68f8      	ldr	r0, [r7, #12]
 800eed0:	f7fe ff2c 	bl	800dd2c <mem_trim>
 800eed4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d106      	bne.n	800eeea <pbuf_realloc+0xca>
 800eedc:	4b0f      	ldr	r3, [pc, #60]	@ (800ef1c <pbuf_realloc+0xfc>)
 800eede:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800eee2:	4912      	ldr	r1, [pc, #72]	@ (800ef2c <pbuf_realloc+0x10c>)
 800eee4:	480f      	ldr	r0, [pc, #60]	@ (800ef24 <pbuf_realloc+0x104>)
 800eee6:	f019 f825 	bl	8027f34 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	897a      	ldrh	r2, [r7, #10]
 800eeee:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	895a      	ldrh	r2, [r3, #10]
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d004      	beq.n	800ef0a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4618      	mov	r0, r3
 800ef06:	f000 f943 	bl	800f190 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	601a      	str	r2, [r3, #0]
 800ef10:	e000      	b.n	800ef14 <pbuf_realloc+0xf4>
    return;
 800ef12:	bf00      	nop

}
 800ef14:	3710      	adds	r7, #16
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bd80      	pop	{r7, pc}
 800ef1a:	bf00      	nop
 800ef1c:	0802a834 	.word	0x0802a834
 800ef20:	0802a94c 	.word	0x0802a94c
 800ef24:	0802a894 	.word	0x0802a894
 800ef28:	0802a964 	.word	0x0802a964
 800ef2c:	0802a97c 	.word	0x0802a97c

0800ef30 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b086      	sub	sp, #24
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	60f8      	str	r0, [r7, #12]
 800ef38:	60b9      	str	r1, [r7, #8]
 800ef3a:	4613      	mov	r3, r2
 800ef3c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d106      	bne.n	800ef52 <pbuf_add_header_impl+0x22>
 800ef44:	4b2b      	ldr	r3, [pc, #172]	@ (800eff4 <pbuf_add_header_impl+0xc4>)
 800ef46:	f240 12df 	movw	r2, #479	@ 0x1df
 800ef4a:	492b      	ldr	r1, [pc, #172]	@ (800eff8 <pbuf_add_header_impl+0xc8>)
 800ef4c:	482b      	ldr	r0, [pc, #172]	@ (800effc <pbuf_add_header_impl+0xcc>)
 800ef4e:	f018 fff1 	bl	8027f34 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d003      	beq.n	800ef60 <pbuf_add_header_impl+0x30>
 800ef58:	68bb      	ldr	r3, [r7, #8]
 800ef5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ef5e:	d301      	bcc.n	800ef64 <pbuf_add_header_impl+0x34>
    return 1;
 800ef60:	2301      	movs	r3, #1
 800ef62:	e043      	b.n	800efec <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ef64:	68bb      	ldr	r3, [r7, #8]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d101      	bne.n	800ef6e <pbuf_add_header_impl+0x3e>
    return 0;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	e03e      	b.n	800efec <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	891a      	ldrh	r2, [r3, #8]
 800ef76:	8a7b      	ldrh	r3, [r7, #18]
 800ef78:	4413      	add	r3, r2
 800ef7a:	b29b      	uxth	r3, r3
 800ef7c:	8a7a      	ldrh	r2, [r7, #18]
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	d901      	bls.n	800ef86 <pbuf_add_header_impl+0x56>
    return 1;
 800ef82:	2301      	movs	r3, #1
 800ef84:	e032      	b.n	800efec <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	7b1b      	ldrb	r3, [r3, #12]
 800ef8a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ef8c:	8a3b      	ldrh	r3, [r7, #16]
 800ef8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d00c      	beq.n	800efb0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	685a      	ldr	r2, [r3, #4]
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	425b      	negs	r3, r3
 800ef9e:	4413      	add	r3, r2
 800efa0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	3310      	adds	r3, #16
 800efa6:	697a      	ldr	r2, [r7, #20]
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d20d      	bcs.n	800efc8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800efac:	2301      	movs	r3, #1
 800efae:	e01d      	b.n	800efec <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800efb0:	79fb      	ldrb	r3, [r7, #7]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d006      	beq.n	800efc4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	685a      	ldr	r2, [r3, #4]
 800efba:	68bb      	ldr	r3, [r7, #8]
 800efbc:	425b      	negs	r3, r3
 800efbe:	4413      	add	r3, r2
 800efc0:	617b      	str	r3, [r7, #20]
 800efc2:	e001      	b.n	800efc8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800efc4:	2301      	movs	r3, #1
 800efc6:	e011      	b.n	800efec <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	697a      	ldr	r2, [r7, #20]
 800efcc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	895a      	ldrh	r2, [r3, #10]
 800efd2:	8a7b      	ldrh	r3, [r7, #18]
 800efd4:	4413      	add	r3, r2
 800efd6:	b29a      	uxth	r2, r3
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	891a      	ldrh	r2, [r3, #8]
 800efe0:	8a7b      	ldrh	r3, [r7, #18]
 800efe2:	4413      	add	r3, r2
 800efe4:	b29a      	uxth	r2, r3
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	811a      	strh	r2, [r3, #8]


  return 0;
 800efea:	2300      	movs	r3, #0
}
 800efec:	4618      	mov	r0, r3
 800efee:	3718      	adds	r7, #24
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}
 800eff4:	0802a834 	.word	0x0802a834
 800eff8:	0802a998 	.word	0x0802a998
 800effc:	0802a894 	.word	0x0802a894

0800f000 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b082      	sub	sp, #8
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
 800f008:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800f00a:	2200      	movs	r2, #0
 800f00c:	6839      	ldr	r1, [r7, #0]
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f7ff ff8e 	bl	800ef30 <pbuf_add_header_impl>
 800f014:	4603      	mov	r3, r0
}
 800f016:	4618      	mov	r0, r3
 800f018:	3708      	adds	r7, #8
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}
	...

0800f020 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b084      	sub	sp, #16
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
 800f028:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d106      	bne.n	800f03e <pbuf_remove_header+0x1e>
 800f030:	4b20      	ldr	r3, [pc, #128]	@ (800f0b4 <pbuf_remove_header+0x94>)
 800f032:	f240 224b 	movw	r2, #587	@ 0x24b
 800f036:	4920      	ldr	r1, [pc, #128]	@ (800f0b8 <pbuf_remove_header+0x98>)
 800f038:	4820      	ldr	r0, [pc, #128]	@ (800f0bc <pbuf_remove_header+0x9c>)
 800f03a:	f018 ff7b 	bl	8027f34 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d003      	beq.n	800f04c <pbuf_remove_header+0x2c>
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f04a:	d301      	bcc.n	800f050 <pbuf_remove_header+0x30>
    return 1;
 800f04c:	2301      	movs	r3, #1
 800f04e:	e02c      	b.n	800f0aa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800f050:	683b      	ldr	r3, [r7, #0]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d101      	bne.n	800f05a <pbuf_remove_header+0x3a>
    return 0;
 800f056:	2300      	movs	r3, #0
 800f058:	e027      	b.n	800f0aa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	895b      	ldrh	r3, [r3, #10]
 800f062:	89fa      	ldrh	r2, [r7, #14]
 800f064:	429a      	cmp	r2, r3
 800f066:	d908      	bls.n	800f07a <pbuf_remove_header+0x5a>
 800f068:	4b12      	ldr	r3, [pc, #72]	@ (800f0b4 <pbuf_remove_header+0x94>)
 800f06a:	f240 2255 	movw	r2, #597	@ 0x255
 800f06e:	4914      	ldr	r1, [pc, #80]	@ (800f0c0 <pbuf_remove_header+0xa0>)
 800f070:	4812      	ldr	r0, [pc, #72]	@ (800f0bc <pbuf_remove_header+0x9c>)
 800f072:	f018 ff5f 	bl	8027f34 <iprintf>
 800f076:	2301      	movs	r3, #1
 800f078:	e017      	b.n	800f0aa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	685b      	ldr	r3, [r3, #4]
 800f07e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	685a      	ldr	r2, [r3, #4]
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	441a      	add	r2, r3
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	895a      	ldrh	r2, [r3, #10]
 800f090:	89fb      	ldrh	r3, [r7, #14]
 800f092:	1ad3      	subs	r3, r2, r3
 800f094:	b29a      	uxth	r2, r3
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	891a      	ldrh	r2, [r3, #8]
 800f09e:	89fb      	ldrh	r3, [r7, #14]
 800f0a0:	1ad3      	subs	r3, r2, r3
 800f0a2:	b29a      	uxth	r2, r3
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800f0a8:	2300      	movs	r3, #0
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	3710      	adds	r7, #16
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}
 800f0b2:	bf00      	nop
 800f0b4:	0802a834 	.word	0x0802a834
 800f0b8:	0802a998 	.word	0x0802a998
 800f0bc:	0802a894 	.word	0x0802a894
 800f0c0:	0802a9a4 	.word	0x0802a9a4

0800f0c4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b082      	sub	sp, #8
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	460b      	mov	r3, r1
 800f0ce:	807b      	strh	r3, [r7, #2]
 800f0d0:	4613      	mov	r3, r2
 800f0d2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800f0d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	da08      	bge.n	800f0ee <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800f0dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f0e0:	425b      	negs	r3, r3
 800f0e2:	4619      	mov	r1, r3
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f7ff ff9b 	bl	800f020 <pbuf_remove_header>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	e007      	b.n	800f0fe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800f0ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f0f2:	787a      	ldrb	r2, [r7, #1]
 800f0f4:	4619      	mov	r1, r3
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f7ff ff1a 	bl	800ef30 <pbuf_add_header_impl>
 800f0fc:	4603      	mov	r3, r0
  }
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	3708      	adds	r7, #8
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}

0800f106 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f106:	b580      	push	{r7, lr}
 800f108:	b082      	sub	sp, #8
 800f10a:	af00      	add	r7, sp, #0
 800f10c:	6078      	str	r0, [r7, #4]
 800f10e:	460b      	mov	r3, r1
 800f110:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800f112:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f116:	2201      	movs	r2, #1
 800f118:	4619      	mov	r1, r3
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f7ff ffd2 	bl	800f0c4 <pbuf_header_impl>
 800f120:	4603      	mov	r3, r0
}
 800f122:	4618      	mov	r0, r3
 800f124:	3708      	adds	r7, #8
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}

0800f12a <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 800f12a:	b580      	push	{r7, lr}
 800f12c:	b086      	sub	sp, #24
 800f12e:	af00      	add	r7, sp, #0
 800f130:	6078      	str	r0, [r7, #4]
 800f132:	460b      	mov	r3, r1
 800f134:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 800f13a:	887b      	ldrh	r3, [r7, #2]
 800f13c:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800f13e:	e01c      	b.n	800f17a <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	895b      	ldrh	r3, [r3, #10]
 800f144:	8a7a      	ldrh	r2, [r7, #18]
 800f146:	429a      	cmp	r2, r3
 800f148:	d310      	bcc.n	800f16c <pbuf_free_header+0x42>
      struct pbuf *f = p;
 800f14a:	697b      	ldr	r3, [r7, #20]
 800f14c:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	895b      	ldrh	r3, [r3, #10]
 800f152:	8a7a      	ldrh	r2, [r7, #18]
 800f154:	1ad3      	subs	r3, r2, r3
 800f156:	827b      	strh	r3, [r7, #18]
      p = p->next;
 800f158:	697b      	ldr	r3, [r7, #20]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	617b      	str	r3, [r7, #20]
      f->next = 0;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	2200      	movs	r2, #0
 800f162:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 800f164:	68f8      	ldr	r0, [r7, #12]
 800f166:	f000 f813 	bl	800f190 <pbuf_free>
 800f16a:	e006      	b.n	800f17a <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 800f16c:	8a7b      	ldrh	r3, [r7, #18]
 800f16e:	4619      	mov	r1, r3
 800f170:	6978      	ldr	r0, [r7, #20]
 800f172:	f7ff ff55 	bl	800f020 <pbuf_remove_header>
      free_left = 0;
 800f176:	2300      	movs	r3, #0
 800f178:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800f17a:	8a7b      	ldrh	r3, [r7, #18]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d002      	beq.n	800f186 <pbuf_free_header+0x5c>
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d1dc      	bne.n	800f140 <pbuf_free_header+0x16>
    }
  }
  return p;
 800f186:	697b      	ldr	r3, [r7, #20]
}
 800f188:	4618      	mov	r0, r3
 800f18a:	3718      	adds	r7, #24
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}

0800f190 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b088      	sub	sp, #32
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d10b      	bne.n	800f1b6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d106      	bne.n	800f1b2 <pbuf_free+0x22>
 800f1a4:	4b3b      	ldr	r3, [pc, #236]	@ (800f294 <pbuf_free+0x104>)
 800f1a6:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800f1aa:	493b      	ldr	r1, [pc, #236]	@ (800f298 <pbuf_free+0x108>)
 800f1ac:	483b      	ldr	r0, [pc, #236]	@ (800f29c <pbuf_free+0x10c>)
 800f1ae:	f018 fec1 	bl	8027f34 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	e069      	b.n	800f28a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f1ba:	e062      	b.n	800f282 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800f1bc:	f009 feaa 	bl	8018f14 <sys_arch_protect>
 800f1c0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	7b9b      	ldrb	r3, [r3, #14]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d106      	bne.n	800f1d8 <pbuf_free+0x48>
 800f1ca:	4b32      	ldr	r3, [pc, #200]	@ (800f294 <pbuf_free+0x104>)
 800f1cc:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800f1d0:	4933      	ldr	r1, [pc, #204]	@ (800f2a0 <pbuf_free+0x110>)
 800f1d2:	4832      	ldr	r0, [pc, #200]	@ (800f29c <pbuf_free+0x10c>)
 800f1d4:	f018 feae 	bl	8027f34 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	7b9b      	ldrb	r3, [r3, #14]
 800f1dc:	3b01      	subs	r3, #1
 800f1de:	b2da      	uxtb	r2, r3
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	739a      	strb	r2, [r3, #14]
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	7b9b      	ldrb	r3, [r3, #14]
 800f1e8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800f1ea:	69b8      	ldr	r0, [r7, #24]
 800f1ec:	f009 fea0 	bl	8018f30 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f1f0:	7dfb      	ldrb	r3, [r7, #23]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d143      	bne.n	800f27e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	7b1b      	ldrb	r3, [r3, #12]
 800f200:	f003 030f 	and.w	r3, r3, #15
 800f204:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	7b5b      	ldrb	r3, [r3, #13]
 800f20a:	f003 0302 	and.w	r3, r3, #2
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d011      	beq.n	800f236 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	691b      	ldr	r3, [r3, #16]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d106      	bne.n	800f22c <pbuf_free+0x9c>
 800f21e:	4b1d      	ldr	r3, [pc, #116]	@ (800f294 <pbuf_free+0x104>)
 800f220:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800f224:	491f      	ldr	r1, [pc, #124]	@ (800f2a4 <pbuf_free+0x114>)
 800f226:	481d      	ldr	r0, [pc, #116]	@ (800f29c <pbuf_free+0x10c>)
 800f228:	f018 fe84 	bl	8027f34 <iprintf>
        pc->custom_free_function(p);
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	691b      	ldr	r3, [r3, #16]
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	4798      	blx	r3
 800f234:	e01d      	b.n	800f272 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800f236:	7bfb      	ldrb	r3, [r7, #15]
 800f238:	2b02      	cmp	r3, #2
 800f23a:	d104      	bne.n	800f246 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800f23c:	6879      	ldr	r1, [r7, #4]
 800f23e:	200c      	movs	r0, #12
 800f240:	f7ff f898 	bl	800e374 <memp_free>
 800f244:	e015      	b.n	800f272 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800f246:	7bfb      	ldrb	r3, [r7, #15]
 800f248:	2b01      	cmp	r3, #1
 800f24a:	d104      	bne.n	800f256 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800f24c:	6879      	ldr	r1, [r7, #4]
 800f24e:	200b      	movs	r0, #11
 800f250:	f7ff f890 	bl	800e374 <memp_free>
 800f254:	e00d      	b.n	800f272 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800f256:	7bfb      	ldrb	r3, [r7, #15]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d103      	bne.n	800f264 <pbuf_free+0xd4>
          mem_free(p);
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f7fe fcd5 	bl	800dc0c <mem_free>
 800f262:	e006      	b.n	800f272 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800f264:	4b0b      	ldr	r3, [pc, #44]	@ (800f294 <pbuf_free+0x104>)
 800f266:	f240 320f 	movw	r2, #783	@ 0x30f
 800f26a:	490f      	ldr	r1, [pc, #60]	@ (800f2a8 <pbuf_free+0x118>)
 800f26c:	480b      	ldr	r0, [pc, #44]	@ (800f29c <pbuf_free+0x10c>)
 800f26e:	f018 fe61 	bl	8027f34 <iprintf>
        }
      }
      count++;
 800f272:	7ffb      	ldrb	r3, [r7, #31]
 800f274:	3301      	adds	r3, #1
 800f276:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800f278:	693b      	ldr	r3, [r7, #16]
 800f27a:	607b      	str	r3, [r7, #4]
 800f27c:	e001      	b.n	800f282 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800f27e:	2300      	movs	r3, #0
 800f280:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d199      	bne.n	800f1bc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f288:	7ffb      	ldrb	r3, [r7, #31]
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	3720      	adds	r7, #32
 800f28e:	46bd      	mov	sp, r7
 800f290:	bd80      	pop	{r7, pc}
 800f292:	bf00      	nop
 800f294:	0802a834 	.word	0x0802a834
 800f298:	0802a998 	.word	0x0802a998
 800f29c:	0802a894 	.word	0x0802a894
 800f2a0:	0802a9c4 	.word	0x0802a9c4
 800f2a4:	0802a9dc 	.word	0x0802a9dc
 800f2a8:	0802aa00 	.word	0x0802aa00

0800f2ac <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f2ac:	b480      	push	{r7}
 800f2ae:	b085      	sub	sp, #20
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f2b8:	e005      	b.n	800f2c6 <pbuf_clen+0x1a>
    ++len;
 800f2ba:	89fb      	ldrh	r3, [r7, #14]
 800f2bc:	3301      	adds	r3, #1
 800f2be:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d1f6      	bne.n	800f2ba <pbuf_clen+0xe>
  }
  return len;
 800f2cc:	89fb      	ldrh	r3, [r7, #14]
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3714      	adds	r7, #20
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d8:	4770      	bx	lr
	...

0800f2dc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b084      	sub	sp, #16
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d016      	beq.n	800f318 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800f2ea:	f009 fe13 	bl	8018f14 <sys_arch_protect>
 800f2ee:	60f8      	str	r0, [r7, #12]
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	7b9b      	ldrb	r3, [r3, #14]
 800f2f4:	3301      	adds	r3, #1
 800f2f6:	b2da      	uxtb	r2, r3
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	739a      	strb	r2, [r3, #14]
 800f2fc:	68f8      	ldr	r0, [r7, #12]
 800f2fe:	f009 fe17 	bl	8018f30 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	7b9b      	ldrb	r3, [r3, #14]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d106      	bne.n	800f318 <pbuf_ref+0x3c>
 800f30a:	4b05      	ldr	r3, [pc, #20]	@ (800f320 <pbuf_ref+0x44>)
 800f30c:	f240 3242 	movw	r2, #834	@ 0x342
 800f310:	4904      	ldr	r1, [pc, #16]	@ (800f324 <pbuf_ref+0x48>)
 800f312:	4805      	ldr	r0, [pc, #20]	@ (800f328 <pbuf_ref+0x4c>)
 800f314:	f018 fe0e 	bl	8027f34 <iprintf>
  }
}
 800f318:	bf00      	nop
 800f31a:	3710      	adds	r7, #16
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}
 800f320:	0802a834 	.word	0x0802a834
 800f324:	0802aa14 	.word	0x0802aa14
 800f328:	0802a894 	.word	0x0802a894

0800f32c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b084      	sub	sp, #16
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
 800f334:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d002      	beq.n	800f342 <pbuf_cat+0x16>
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d107      	bne.n	800f352 <pbuf_cat+0x26>
 800f342:	4b20      	ldr	r3, [pc, #128]	@ (800f3c4 <pbuf_cat+0x98>)
 800f344:	f240 3259 	movw	r2, #857	@ 0x359
 800f348:	491f      	ldr	r1, [pc, #124]	@ (800f3c8 <pbuf_cat+0x9c>)
 800f34a:	4820      	ldr	r0, [pc, #128]	@ (800f3cc <pbuf_cat+0xa0>)
 800f34c:	f018 fdf2 	bl	8027f34 <iprintf>
 800f350:	e034      	b.n	800f3bc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	60fb      	str	r3, [r7, #12]
 800f356:	e00a      	b.n	800f36e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	891a      	ldrh	r2, [r3, #8]
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	891b      	ldrh	r3, [r3, #8]
 800f360:	4413      	add	r3, r2
 800f362:	b29a      	uxth	r2, r3
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	60fb      	str	r3, [r7, #12]
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d1f0      	bne.n	800f358 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	891a      	ldrh	r2, [r3, #8]
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	895b      	ldrh	r3, [r3, #10]
 800f37e:	429a      	cmp	r2, r3
 800f380:	d006      	beq.n	800f390 <pbuf_cat+0x64>
 800f382:	4b10      	ldr	r3, [pc, #64]	@ (800f3c4 <pbuf_cat+0x98>)
 800f384:	f240 3262 	movw	r2, #866	@ 0x362
 800f388:	4911      	ldr	r1, [pc, #68]	@ (800f3d0 <pbuf_cat+0xa4>)
 800f38a:	4810      	ldr	r0, [pc, #64]	@ (800f3cc <pbuf_cat+0xa0>)
 800f38c:	f018 fdd2 	bl	8027f34 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d006      	beq.n	800f3a6 <pbuf_cat+0x7a>
 800f398:	4b0a      	ldr	r3, [pc, #40]	@ (800f3c4 <pbuf_cat+0x98>)
 800f39a:	f240 3263 	movw	r2, #867	@ 0x363
 800f39e:	490d      	ldr	r1, [pc, #52]	@ (800f3d4 <pbuf_cat+0xa8>)
 800f3a0:	480a      	ldr	r0, [pc, #40]	@ (800f3cc <pbuf_cat+0xa0>)
 800f3a2:	f018 fdc7 	bl	8027f34 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	891a      	ldrh	r2, [r3, #8]
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	891b      	ldrh	r3, [r3, #8]
 800f3ae:	4413      	add	r3, r2
 800f3b0:	b29a      	uxth	r2, r3
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	683a      	ldr	r2, [r7, #0]
 800f3ba:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f3bc:	3710      	adds	r7, #16
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}
 800f3c2:	bf00      	nop
 800f3c4:	0802a834 	.word	0x0802a834
 800f3c8:	0802aa28 	.word	0x0802aa28
 800f3cc:	0802a894 	.word	0x0802a894
 800f3d0:	0802aa60 	.word	0x0802aa60
 800f3d4:	0802aa90 	.word	0x0802aa90

0800f3d8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b082      	sub	sp, #8
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
 800f3e0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800f3e2:	6839      	ldr	r1, [r7, #0]
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f7ff ffa1 	bl	800f32c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800f3ea:	6838      	ldr	r0, [r7, #0]
 800f3ec:	f7ff ff76 	bl	800f2dc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800f3f0:	bf00      	nop
 800f3f2:	3708      	adds	r7, #8
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}

0800f3f8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b086      	sub	sp, #24
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
 800f400:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f402:	2300      	movs	r3, #0
 800f404:	617b      	str	r3, [r7, #20]
 800f406:	2300      	movs	r3, #0
 800f408:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d008      	beq.n	800f422 <pbuf_copy+0x2a>
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d005      	beq.n	800f422 <pbuf_copy+0x2a>
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	891a      	ldrh	r2, [r3, #8]
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	891b      	ldrh	r3, [r3, #8]
 800f41e:	429a      	cmp	r2, r3
 800f420:	d209      	bcs.n	800f436 <pbuf_copy+0x3e>
 800f422:	4b57      	ldr	r3, [pc, #348]	@ (800f580 <pbuf_copy+0x188>)
 800f424:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800f428:	4956      	ldr	r1, [pc, #344]	@ (800f584 <pbuf_copy+0x18c>)
 800f42a:	4857      	ldr	r0, [pc, #348]	@ (800f588 <pbuf_copy+0x190>)
 800f42c:	f018 fd82 	bl	8027f34 <iprintf>
 800f430:	f06f 030f 	mvn.w	r3, #15
 800f434:	e09f      	b.n	800f576 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	895b      	ldrh	r3, [r3, #10]
 800f43a:	461a      	mov	r2, r3
 800f43c:	697b      	ldr	r3, [r7, #20]
 800f43e:	1ad2      	subs	r2, r2, r3
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	895b      	ldrh	r3, [r3, #10]
 800f444:	4619      	mov	r1, r3
 800f446:	693b      	ldr	r3, [r7, #16]
 800f448:	1acb      	subs	r3, r1, r3
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d306      	bcc.n	800f45c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	895b      	ldrh	r3, [r3, #10]
 800f452:	461a      	mov	r2, r3
 800f454:	693b      	ldr	r3, [r7, #16]
 800f456:	1ad3      	subs	r3, r2, r3
 800f458:	60fb      	str	r3, [r7, #12]
 800f45a:	e005      	b.n	800f468 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	895b      	ldrh	r3, [r3, #10]
 800f460:	461a      	mov	r2, r3
 800f462:	697b      	ldr	r3, [r7, #20]
 800f464:	1ad3      	subs	r3, r2, r3
 800f466:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	685a      	ldr	r2, [r3, #4]
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	18d0      	adds	r0, r2, r3
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	685a      	ldr	r2, [r3, #4]
 800f474:	693b      	ldr	r3, [r7, #16]
 800f476:	4413      	add	r3, r2
 800f478:	68fa      	ldr	r2, [r7, #12]
 800f47a:	4619      	mov	r1, r3
 800f47c:	f019 f807 	bl	802848e <memcpy>
    offset_to += len;
 800f480:	697a      	ldr	r2, [r7, #20]
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	4413      	add	r3, r2
 800f486:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f488:	693a      	ldr	r2, [r7, #16]
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	4413      	add	r3, r2
 800f48e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	895b      	ldrh	r3, [r3, #10]
 800f494:	461a      	mov	r2, r3
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	4293      	cmp	r3, r2
 800f49a:	d906      	bls.n	800f4aa <pbuf_copy+0xb2>
 800f49c:	4b38      	ldr	r3, [pc, #224]	@ (800f580 <pbuf_copy+0x188>)
 800f49e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800f4a2:	493a      	ldr	r1, [pc, #232]	@ (800f58c <pbuf_copy+0x194>)
 800f4a4:	4838      	ldr	r0, [pc, #224]	@ (800f588 <pbuf_copy+0x190>)
 800f4a6:	f018 fd45 	bl	8027f34 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	895b      	ldrh	r3, [r3, #10]
 800f4ae:	461a      	mov	r2, r3
 800f4b0:	693b      	ldr	r3, [r7, #16]
 800f4b2:	4293      	cmp	r3, r2
 800f4b4:	d906      	bls.n	800f4c4 <pbuf_copy+0xcc>
 800f4b6:	4b32      	ldr	r3, [pc, #200]	@ (800f580 <pbuf_copy+0x188>)
 800f4b8:	f240 32da 	movw	r2, #986	@ 0x3da
 800f4bc:	4934      	ldr	r1, [pc, #208]	@ (800f590 <pbuf_copy+0x198>)
 800f4be:	4832      	ldr	r0, [pc, #200]	@ (800f588 <pbuf_copy+0x190>)
 800f4c0:	f018 fd38 	bl	8027f34 <iprintf>
    if (offset_from >= p_from->len) {
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	895b      	ldrh	r3, [r3, #10]
 800f4c8:	461a      	mov	r2, r3
 800f4ca:	693b      	ldr	r3, [r7, #16]
 800f4cc:	4293      	cmp	r3, r2
 800f4ce:	d304      	bcc.n	800f4da <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	895b      	ldrh	r3, [r3, #10]
 800f4de:	461a      	mov	r2, r3
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	4293      	cmp	r3, r2
 800f4e4:	d114      	bne.n	800f510 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d10c      	bne.n	800f510 <pbuf_copy+0x118>
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d009      	beq.n	800f510 <pbuf_copy+0x118>
 800f4fc:	4b20      	ldr	r3, [pc, #128]	@ (800f580 <pbuf_copy+0x188>)
 800f4fe:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800f502:	4924      	ldr	r1, [pc, #144]	@ (800f594 <pbuf_copy+0x19c>)
 800f504:	4820      	ldr	r0, [pc, #128]	@ (800f588 <pbuf_copy+0x190>)
 800f506:	f018 fd15 	bl	8027f34 <iprintf>
 800f50a:	f06f 030f 	mvn.w	r3, #15
 800f50e:	e032      	b.n	800f576 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d013      	beq.n	800f53e <pbuf_copy+0x146>
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	895a      	ldrh	r2, [r3, #10]
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	891b      	ldrh	r3, [r3, #8]
 800f51e:	429a      	cmp	r2, r3
 800f520:	d10d      	bne.n	800f53e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d009      	beq.n	800f53e <pbuf_copy+0x146>
 800f52a:	4b15      	ldr	r3, [pc, #84]	@ (800f580 <pbuf_copy+0x188>)
 800f52c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800f530:	4919      	ldr	r1, [pc, #100]	@ (800f598 <pbuf_copy+0x1a0>)
 800f532:	4815      	ldr	r0, [pc, #84]	@ (800f588 <pbuf_copy+0x190>)
 800f534:	f018 fcfe 	bl	8027f34 <iprintf>
 800f538:	f06f 0305 	mvn.w	r3, #5
 800f53c:	e01b      	b.n	800f576 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d013      	beq.n	800f56c <pbuf_copy+0x174>
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	895a      	ldrh	r2, [r3, #10]
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	891b      	ldrh	r3, [r3, #8]
 800f54c:	429a      	cmp	r2, r3
 800f54e:	d10d      	bne.n	800f56c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d009      	beq.n	800f56c <pbuf_copy+0x174>
 800f558:	4b09      	ldr	r3, [pc, #36]	@ (800f580 <pbuf_copy+0x188>)
 800f55a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800f55e:	490e      	ldr	r1, [pc, #56]	@ (800f598 <pbuf_copy+0x1a0>)
 800f560:	4809      	ldr	r0, [pc, #36]	@ (800f588 <pbuf_copy+0x190>)
 800f562:	f018 fce7 	bl	8027f34 <iprintf>
 800f566:	f06f 0305 	mvn.w	r3, #5
 800f56a:	e004      	b.n	800f576 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	f47f af61 	bne.w	800f436 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f574:	2300      	movs	r3, #0
}
 800f576:	4618      	mov	r0, r3
 800f578:	3718      	adds	r7, #24
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}
 800f57e:	bf00      	nop
 800f580:	0802a834 	.word	0x0802a834
 800f584:	0802aadc 	.word	0x0802aadc
 800f588:	0802a894 	.word	0x0802a894
 800f58c:	0802ab0c 	.word	0x0802ab0c
 800f590:	0802ab24 	.word	0x0802ab24
 800f594:	0802ab40 	.word	0x0802ab40
 800f598:	0802ab50 	.word	0x0802ab50

0800f59c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b088      	sub	sp, #32
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	60f8      	str	r0, [r7, #12]
 800f5a4:	60b9      	str	r1, [r7, #8]
 800f5a6:	4611      	mov	r1, r2
 800f5a8:	461a      	mov	r2, r3
 800f5aa:	460b      	mov	r3, r1
 800f5ac:	80fb      	strh	r3, [r7, #6]
 800f5ae:	4613      	mov	r3, r2
 800f5b0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d108      	bne.n	800f5d2 <pbuf_copy_partial+0x36>
 800f5c0:	4b2b      	ldr	r3, [pc, #172]	@ (800f670 <pbuf_copy_partial+0xd4>)
 800f5c2:	f240 420a 	movw	r2, #1034	@ 0x40a
 800f5c6:	492b      	ldr	r1, [pc, #172]	@ (800f674 <pbuf_copy_partial+0xd8>)
 800f5c8:	482b      	ldr	r0, [pc, #172]	@ (800f678 <pbuf_copy_partial+0xdc>)
 800f5ca:	f018 fcb3 	bl	8027f34 <iprintf>
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	e04a      	b.n	800f668 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f5d2:	68bb      	ldr	r3, [r7, #8]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d108      	bne.n	800f5ea <pbuf_copy_partial+0x4e>
 800f5d8:	4b25      	ldr	r3, [pc, #148]	@ (800f670 <pbuf_copy_partial+0xd4>)
 800f5da:	f240 420b 	movw	r2, #1035	@ 0x40b
 800f5de:	4927      	ldr	r1, [pc, #156]	@ (800f67c <pbuf_copy_partial+0xe0>)
 800f5e0:	4825      	ldr	r0, [pc, #148]	@ (800f678 <pbuf_copy_partial+0xdc>)
 800f5e2:	f018 fca7 	bl	8027f34 <iprintf>
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	e03e      	b.n	800f668 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	61fb      	str	r3, [r7, #28]
 800f5ee:	e034      	b.n	800f65a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f5f0:	88bb      	ldrh	r3, [r7, #4]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d00a      	beq.n	800f60c <pbuf_copy_partial+0x70>
 800f5f6:	69fb      	ldr	r3, [r7, #28]
 800f5f8:	895b      	ldrh	r3, [r3, #10]
 800f5fa:	88ba      	ldrh	r2, [r7, #4]
 800f5fc:	429a      	cmp	r2, r3
 800f5fe:	d305      	bcc.n	800f60c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f600:	69fb      	ldr	r3, [r7, #28]
 800f602:	895b      	ldrh	r3, [r3, #10]
 800f604:	88ba      	ldrh	r2, [r7, #4]
 800f606:	1ad3      	subs	r3, r2, r3
 800f608:	80bb      	strh	r3, [r7, #4]
 800f60a:	e023      	b.n	800f654 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f60c:	69fb      	ldr	r3, [r7, #28]
 800f60e:	895a      	ldrh	r2, [r3, #10]
 800f610:	88bb      	ldrh	r3, [r7, #4]
 800f612:	1ad3      	subs	r3, r2, r3
 800f614:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f616:	8b3a      	ldrh	r2, [r7, #24]
 800f618:	88fb      	ldrh	r3, [r7, #6]
 800f61a:	429a      	cmp	r2, r3
 800f61c:	d901      	bls.n	800f622 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f61e:	88fb      	ldrh	r3, [r7, #6]
 800f620:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f622:	8b7b      	ldrh	r3, [r7, #26]
 800f624:	68ba      	ldr	r2, [r7, #8]
 800f626:	18d0      	adds	r0, r2, r3
 800f628:	69fb      	ldr	r3, [r7, #28]
 800f62a:	685a      	ldr	r2, [r3, #4]
 800f62c:	88bb      	ldrh	r3, [r7, #4]
 800f62e:	4413      	add	r3, r2
 800f630:	8b3a      	ldrh	r2, [r7, #24]
 800f632:	4619      	mov	r1, r3
 800f634:	f018 ff2b 	bl	802848e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f638:	8afa      	ldrh	r2, [r7, #22]
 800f63a:	8b3b      	ldrh	r3, [r7, #24]
 800f63c:	4413      	add	r3, r2
 800f63e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f640:	8b7a      	ldrh	r2, [r7, #26]
 800f642:	8b3b      	ldrh	r3, [r7, #24]
 800f644:	4413      	add	r3, r2
 800f646:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f648:	88fa      	ldrh	r2, [r7, #6]
 800f64a:	8b3b      	ldrh	r3, [r7, #24]
 800f64c:	1ad3      	subs	r3, r2, r3
 800f64e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f650:	2300      	movs	r3, #0
 800f652:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f654:	69fb      	ldr	r3, [r7, #28]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	61fb      	str	r3, [r7, #28]
 800f65a:	88fb      	ldrh	r3, [r7, #6]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d002      	beq.n	800f666 <pbuf_copy_partial+0xca>
 800f660:	69fb      	ldr	r3, [r7, #28]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d1c4      	bne.n	800f5f0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f666:	8afb      	ldrh	r3, [r7, #22]
}
 800f668:	4618      	mov	r0, r3
 800f66a:	3720      	adds	r7, #32
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}
 800f670:	0802a834 	.word	0x0802a834
 800f674:	0802ab7c 	.word	0x0802ab7c
 800f678:	0802a894 	.word	0x0802a894
 800f67c:	0802ab9c 	.word	0x0802ab9c

0800f680 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b084      	sub	sp, #16
 800f684:	af00      	add	r7, sp, #0
 800f686:	4603      	mov	r3, r0
 800f688:	603a      	str	r2, [r7, #0]
 800f68a:	71fb      	strb	r3, [r7, #7]
 800f68c:	460b      	mov	r3, r1
 800f68e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	8919      	ldrh	r1, [r3, #8]
 800f694:	88ba      	ldrh	r2, [r7, #4]
 800f696:	79fb      	ldrb	r3, [r7, #7]
 800f698:	4618      	mov	r0, r3
 800f69a:	f7ff fa63 	bl	800eb64 <pbuf_alloc>
 800f69e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d101      	bne.n	800f6aa <pbuf_clone+0x2a>
    return NULL;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	e011      	b.n	800f6ce <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800f6aa:	6839      	ldr	r1, [r7, #0]
 800f6ac:	68f8      	ldr	r0, [r7, #12]
 800f6ae:	f7ff fea3 	bl	800f3f8 <pbuf_copy>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800f6b6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d006      	beq.n	800f6cc <pbuf_clone+0x4c>
 800f6be:	4b06      	ldr	r3, [pc, #24]	@ (800f6d8 <pbuf_clone+0x58>)
 800f6c0:	f240 5224 	movw	r2, #1316	@ 0x524
 800f6c4:	4905      	ldr	r1, [pc, #20]	@ (800f6dc <pbuf_clone+0x5c>)
 800f6c6:	4806      	ldr	r0, [pc, #24]	@ (800f6e0 <pbuf_clone+0x60>)
 800f6c8:	f018 fc34 	bl	8027f34 <iprintf>
  return q;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
}
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	3710      	adds	r7, #16
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}
 800f6d6:	bf00      	nop
 800f6d8:	0802a834 	.word	0x0802a834
 800f6dc:	0802aca8 	.word	0x0802aca8
 800f6e0:	0802a894 	.word	0x0802a894

0800f6e4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f6e8:	f018 f998 	bl	8027a1c <rand>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	b29b      	uxth	r3, r3
 800f6f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800f6fa:	b29a      	uxth	r2, r3
 800f6fc:	4b01      	ldr	r3, [pc, #4]	@ (800f704 <tcp_init+0x20>)
 800f6fe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f700:	bf00      	nop
 800f702:	bd80      	pop	{r7, pc}
 800f704:	2000002c 	.word	0x2000002c

0800f708 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b082      	sub	sp, #8
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	7d1b      	ldrb	r3, [r3, #20]
 800f714:	2b01      	cmp	r3, #1
 800f716:	d105      	bne.n	800f724 <tcp_free+0x1c>
 800f718:	4b06      	ldr	r3, [pc, #24]	@ (800f734 <tcp_free+0x2c>)
 800f71a:	22d4      	movs	r2, #212	@ 0xd4
 800f71c:	4906      	ldr	r1, [pc, #24]	@ (800f738 <tcp_free+0x30>)
 800f71e:	4807      	ldr	r0, [pc, #28]	@ (800f73c <tcp_free+0x34>)
 800f720:	f018 fc08 	bl	8027f34 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800f724:	6879      	ldr	r1, [r7, #4]
 800f726:	2001      	movs	r0, #1
 800f728:	f7fe fe24 	bl	800e374 <memp_free>
}
 800f72c:	bf00      	nop
 800f72e:	3708      	adds	r7, #8
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}
 800f734:	0802ad34 	.word	0x0802ad34
 800f738:	0802ad64 	.word	0x0802ad64
 800f73c:	0802ad78 	.word	0x0802ad78

0800f740 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b082      	sub	sp, #8
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	7d1b      	ldrb	r3, [r3, #20]
 800f74c:	2b01      	cmp	r3, #1
 800f74e:	d105      	bne.n	800f75c <tcp_free_listen+0x1c>
 800f750:	4b06      	ldr	r3, [pc, #24]	@ (800f76c <tcp_free_listen+0x2c>)
 800f752:	22df      	movs	r2, #223	@ 0xdf
 800f754:	4906      	ldr	r1, [pc, #24]	@ (800f770 <tcp_free_listen+0x30>)
 800f756:	4807      	ldr	r0, [pc, #28]	@ (800f774 <tcp_free_listen+0x34>)
 800f758:	f018 fbec 	bl	8027f34 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800f75c:	6879      	ldr	r1, [r7, #4]
 800f75e:	2002      	movs	r0, #2
 800f760:	f7fe fe08 	bl	800e374 <memp_free>
}
 800f764:	bf00      	nop
 800f766:	3708      	adds	r7, #8
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}
 800f76c:	0802ad34 	.word	0x0802ad34
 800f770:	0802ada0 	.word	0x0802ada0
 800f774:	0802ad78 	.word	0x0802ad78

0800f778 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f77c:	f000 fff8 	bl	8010770 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f780:	4b07      	ldr	r3, [pc, #28]	@ (800f7a0 <tcp_tmr+0x28>)
 800f782:	781b      	ldrb	r3, [r3, #0]
 800f784:	3301      	adds	r3, #1
 800f786:	b2da      	uxtb	r2, r3
 800f788:	4b05      	ldr	r3, [pc, #20]	@ (800f7a0 <tcp_tmr+0x28>)
 800f78a:	701a      	strb	r2, [r3, #0]
 800f78c:	4b04      	ldr	r3, [pc, #16]	@ (800f7a0 <tcp_tmr+0x28>)
 800f78e:	781b      	ldrb	r3, [r3, #0]
 800f790:	f003 0301 	and.w	r3, r3, #1
 800f794:	2b00      	cmp	r3, #0
 800f796:	d001      	beq.n	800f79c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f798:	f000 fca8 	bl	80100ec <tcp_slowtmr>
  }
}
 800f79c:	bf00      	nop
 800f79e:	bd80      	pop	{r7, pc}
 800f7a0:	20010319 	.word	0x20010319

0800f7a4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800f7ae:	683b      	ldr	r3, [r7, #0]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d105      	bne.n	800f7c0 <tcp_remove_listener+0x1c>
 800f7b4:	4b0d      	ldr	r3, [pc, #52]	@ (800f7ec <tcp_remove_listener+0x48>)
 800f7b6:	22ff      	movs	r2, #255	@ 0xff
 800f7b8:	490d      	ldr	r1, [pc, #52]	@ (800f7f0 <tcp_remove_listener+0x4c>)
 800f7ba:	480e      	ldr	r0, [pc, #56]	@ (800f7f4 <tcp_remove_listener+0x50>)
 800f7bc:	f018 fbba 	bl	8027f34 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	60fb      	str	r3, [r7, #12]
 800f7c4:	e00a      	b.n	800f7dc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f7ca:	683a      	ldr	r2, [r7, #0]
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	d102      	bne.n	800f7d6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	68db      	ldr	r3, [r3, #12]
 800f7da:	60fb      	str	r3, [r7, #12]
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d1f1      	bne.n	800f7c6 <tcp_remove_listener+0x22>
    }
  }
}
 800f7e2:	bf00      	nop
 800f7e4:	bf00      	nop
 800f7e6:	3710      	adds	r7, #16
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd80      	pop	{r7, pc}
 800f7ec:	0802ad34 	.word	0x0802ad34
 800f7f0:	0802adbc 	.word	0x0802adbc
 800f7f4:	0802ad78 	.word	0x0802ad78

0800f7f8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b084      	sub	sp, #16
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d106      	bne.n	800f814 <tcp_listen_closed+0x1c>
 800f806:	4b14      	ldr	r3, [pc, #80]	@ (800f858 <tcp_listen_closed+0x60>)
 800f808:	f240 1211 	movw	r2, #273	@ 0x111
 800f80c:	4913      	ldr	r1, [pc, #76]	@ (800f85c <tcp_listen_closed+0x64>)
 800f80e:	4814      	ldr	r0, [pc, #80]	@ (800f860 <tcp_listen_closed+0x68>)
 800f810:	f018 fb90 	bl	8027f34 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	7d1b      	ldrb	r3, [r3, #20]
 800f818:	2b01      	cmp	r3, #1
 800f81a:	d006      	beq.n	800f82a <tcp_listen_closed+0x32>
 800f81c:	4b0e      	ldr	r3, [pc, #56]	@ (800f858 <tcp_listen_closed+0x60>)
 800f81e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800f822:	4910      	ldr	r1, [pc, #64]	@ (800f864 <tcp_listen_closed+0x6c>)
 800f824:	480e      	ldr	r0, [pc, #56]	@ (800f860 <tcp_listen_closed+0x68>)
 800f826:	f018 fb85 	bl	8027f34 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f82a:	2301      	movs	r3, #1
 800f82c:	60fb      	str	r3, [r7, #12]
 800f82e:	e00b      	b.n	800f848 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f830:	4a0d      	ldr	r2, [pc, #52]	@ (800f868 <tcp_listen_closed+0x70>)
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	6879      	ldr	r1, [r7, #4]
 800f83c:	4618      	mov	r0, r3
 800f83e:	f7ff ffb1 	bl	800f7a4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	3301      	adds	r3, #1
 800f846:	60fb      	str	r3, [r7, #12]
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	2b03      	cmp	r3, #3
 800f84c:	d9f0      	bls.n	800f830 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f84e:	bf00      	nop
 800f850:	bf00      	nop
 800f852:	3710      	adds	r7, #16
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}
 800f858:	0802ad34 	.word	0x0802ad34
 800f85c:	0802ade4 	.word	0x0802ade4
 800f860:	0802ad78 	.word	0x0802ad78
 800f864:	0802adf0 	.word	0x0802adf0
 800f868:	0802ce2c 	.word	0x0802ce2c

0800f86c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f86c:	b5b0      	push	{r4, r5, r7, lr}
 800f86e:	b088      	sub	sp, #32
 800f870:	af04      	add	r7, sp, #16
 800f872:	6078      	str	r0, [r7, #4]
 800f874:	460b      	mov	r3, r1
 800f876:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d106      	bne.n	800f88c <tcp_close_shutdown+0x20>
 800f87e:	4b63      	ldr	r3, [pc, #396]	@ (800fa0c <tcp_close_shutdown+0x1a0>)
 800f880:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800f884:	4962      	ldr	r1, [pc, #392]	@ (800fa10 <tcp_close_shutdown+0x1a4>)
 800f886:	4863      	ldr	r0, [pc, #396]	@ (800fa14 <tcp_close_shutdown+0x1a8>)
 800f888:	f018 fb54 	bl	8027f34 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f88c:	78fb      	ldrb	r3, [r7, #3]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d066      	beq.n	800f960 <tcp_close_shutdown+0xf4>
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	7d1b      	ldrb	r3, [r3, #20]
 800f896:	2b04      	cmp	r3, #4
 800f898:	d003      	beq.n	800f8a2 <tcp_close_shutdown+0x36>
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	7d1b      	ldrb	r3, [r3, #20]
 800f89e:	2b07      	cmp	r3, #7
 800f8a0:	d15e      	bne.n	800f960 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d104      	bne.n	800f8b4 <tcp_close_shutdown+0x48>
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f8ae:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f8b2:	d055      	beq.n	800f960 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	8b5b      	ldrh	r3, [r3, #26]
 800f8b8:	f003 0310 	and.w	r3, r3, #16
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d106      	bne.n	800f8ce <tcp_close_shutdown+0x62>
 800f8c0:	4b52      	ldr	r3, [pc, #328]	@ (800fa0c <tcp_close_shutdown+0x1a0>)
 800f8c2:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800f8c6:	4954      	ldr	r1, [pc, #336]	@ (800fa18 <tcp_close_shutdown+0x1ac>)
 800f8c8:	4852      	ldr	r0, [pc, #328]	@ (800fa14 <tcp_close_shutdown+0x1a8>)
 800f8ca:	f018 fb33 	bl	8027f34 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f8d6:	687d      	ldr	r5, [r7, #4]
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	3304      	adds	r3, #4
 800f8dc:	687a      	ldr	r2, [r7, #4]
 800f8de:	8ad2      	ldrh	r2, [r2, #22]
 800f8e0:	6879      	ldr	r1, [r7, #4]
 800f8e2:	8b09      	ldrh	r1, [r1, #24]
 800f8e4:	9102      	str	r1, [sp, #8]
 800f8e6:	9201      	str	r2, [sp, #4]
 800f8e8:	9300      	str	r3, [sp, #0]
 800f8ea:	462b      	mov	r3, r5
 800f8ec:	4622      	mov	r2, r4
 800f8ee:	4601      	mov	r1, r0
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	f005 fd07 	bl	8015304 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f001 faea 	bl	8010ed0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f8fc:	4b47      	ldr	r3, [pc, #284]	@ (800fa1c <tcp_close_shutdown+0x1b0>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	687a      	ldr	r2, [r7, #4]
 800f902:	429a      	cmp	r2, r3
 800f904:	d105      	bne.n	800f912 <tcp_close_shutdown+0xa6>
 800f906:	4b45      	ldr	r3, [pc, #276]	@ (800fa1c <tcp_close_shutdown+0x1b0>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	68db      	ldr	r3, [r3, #12]
 800f90c:	4a43      	ldr	r2, [pc, #268]	@ (800fa1c <tcp_close_shutdown+0x1b0>)
 800f90e:	6013      	str	r3, [r2, #0]
 800f910:	e013      	b.n	800f93a <tcp_close_shutdown+0xce>
 800f912:	4b42      	ldr	r3, [pc, #264]	@ (800fa1c <tcp_close_shutdown+0x1b0>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	60fb      	str	r3, [r7, #12]
 800f918:	e00c      	b.n	800f934 <tcp_close_shutdown+0xc8>
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	68db      	ldr	r3, [r3, #12]
 800f91e:	687a      	ldr	r2, [r7, #4]
 800f920:	429a      	cmp	r2, r3
 800f922:	d104      	bne.n	800f92e <tcp_close_shutdown+0xc2>
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	68da      	ldr	r2, [r3, #12]
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	60da      	str	r2, [r3, #12]
 800f92c:	e005      	b.n	800f93a <tcp_close_shutdown+0xce>
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	68db      	ldr	r3, [r3, #12]
 800f932:	60fb      	str	r3, [r7, #12]
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d1ef      	bne.n	800f91a <tcp_close_shutdown+0xae>
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2200      	movs	r2, #0
 800f93e:	60da      	str	r2, [r3, #12]
 800f940:	4b37      	ldr	r3, [pc, #220]	@ (800fa20 <tcp_close_shutdown+0x1b4>)
 800f942:	2201      	movs	r2, #1
 800f944:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f946:	4b37      	ldr	r3, [pc, #220]	@ (800fa24 <tcp_close_shutdown+0x1b8>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	687a      	ldr	r2, [r7, #4]
 800f94c:	429a      	cmp	r2, r3
 800f94e:	d102      	bne.n	800f956 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f950:	f003 ff7e 	bl	8013850 <tcp_trigger_input_pcb_close>
 800f954:	e002      	b.n	800f95c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f7ff fed6 	bl	800f708 <tcp_free>
      }
      return ERR_OK;
 800f95c:	2300      	movs	r3, #0
 800f95e:	e050      	b.n	800fa02 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	7d1b      	ldrb	r3, [r3, #20]
 800f964:	2b02      	cmp	r3, #2
 800f966:	d03b      	beq.n	800f9e0 <tcp_close_shutdown+0x174>
 800f968:	2b02      	cmp	r3, #2
 800f96a:	dc44      	bgt.n	800f9f6 <tcp_close_shutdown+0x18a>
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d002      	beq.n	800f976 <tcp_close_shutdown+0x10a>
 800f970:	2b01      	cmp	r3, #1
 800f972:	d02a      	beq.n	800f9ca <tcp_close_shutdown+0x15e>
 800f974:	e03f      	b.n	800f9f6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	8adb      	ldrh	r3, [r3, #22]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d021      	beq.n	800f9c2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f97e:	4b2a      	ldr	r3, [pc, #168]	@ (800fa28 <tcp_close_shutdown+0x1bc>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	687a      	ldr	r2, [r7, #4]
 800f984:	429a      	cmp	r2, r3
 800f986:	d105      	bne.n	800f994 <tcp_close_shutdown+0x128>
 800f988:	4b27      	ldr	r3, [pc, #156]	@ (800fa28 <tcp_close_shutdown+0x1bc>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	68db      	ldr	r3, [r3, #12]
 800f98e:	4a26      	ldr	r2, [pc, #152]	@ (800fa28 <tcp_close_shutdown+0x1bc>)
 800f990:	6013      	str	r3, [r2, #0]
 800f992:	e013      	b.n	800f9bc <tcp_close_shutdown+0x150>
 800f994:	4b24      	ldr	r3, [pc, #144]	@ (800fa28 <tcp_close_shutdown+0x1bc>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	60bb      	str	r3, [r7, #8]
 800f99a:	e00c      	b.n	800f9b6 <tcp_close_shutdown+0x14a>
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	68db      	ldr	r3, [r3, #12]
 800f9a0:	687a      	ldr	r2, [r7, #4]
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d104      	bne.n	800f9b0 <tcp_close_shutdown+0x144>
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	68da      	ldr	r2, [r3, #12]
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	60da      	str	r2, [r3, #12]
 800f9ae:	e005      	b.n	800f9bc <tcp_close_shutdown+0x150>
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	68db      	ldr	r3, [r3, #12]
 800f9b4:	60bb      	str	r3, [r7, #8]
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d1ef      	bne.n	800f99c <tcp_close_shutdown+0x130>
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2200      	movs	r2, #0
 800f9c0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f7ff fea0 	bl	800f708 <tcp_free>
      break;
 800f9c8:	e01a      	b.n	800fa00 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	f7ff ff14 	bl	800f7f8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f9d0:	6879      	ldr	r1, [r7, #4]
 800f9d2:	4816      	ldr	r0, [pc, #88]	@ (800fa2c <tcp_close_shutdown+0x1c0>)
 800f9d4:	f001 facc 	bl	8010f70 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f7ff feb1 	bl	800f740 <tcp_free_listen>
      break;
 800f9de:	e00f      	b.n	800fa00 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f9e0:	6879      	ldr	r1, [r7, #4]
 800f9e2:	480e      	ldr	r0, [pc, #56]	@ (800fa1c <tcp_close_shutdown+0x1b0>)
 800f9e4:	f001 fac4 	bl	8010f70 <tcp_pcb_remove>
 800f9e8:	4b0d      	ldr	r3, [pc, #52]	@ (800fa20 <tcp_close_shutdown+0x1b4>)
 800f9ea:	2201      	movs	r2, #1
 800f9ec:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f7ff fe8a 	bl	800f708 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f9f4:	e004      	b.n	800fa00 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f000 f81a 	bl	800fa30 <tcp_close_shutdown_fin>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	e000      	b.n	800fa02 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800fa00:	2300      	movs	r3, #0
}
 800fa02:	4618      	mov	r0, r3
 800fa04:	3710      	adds	r7, #16
 800fa06:	46bd      	mov	sp, r7
 800fa08:	bdb0      	pop	{r4, r5, r7, pc}
 800fa0a:	bf00      	nop
 800fa0c:	0802ad34 	.word	0x0802ad34
 800fa10:	0802ae08 	.word	0x0802ae08
 800fa14:	0802ad78 	.word	0x0802ad78
 800fa18:	0802ae28 	.word	0x0802ae28
 800fa1c:	20010310 	.word	0x20010310
 800fa20:	20010318 	.word	0x20010318
 800fa24:	20010350 	.word	0x20010350
 800fa28:	20010308 	.word	0x20010308
 800fa2c:	2001030c 	.word	0x2001030c

0800fa30 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b084      	sub	sp, #16
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d106      	bne.n	800fa4c <tcp_close_shutdown_fin+0x1c>
 800fa3e:	4b2e      	ldr	r3, [pc, #184]	@ (800faf8 <tcp_close_shutdown_fin+0xc8>)
 800fa40:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800fa44:	492d      	ldr	r1, [pc, #180]	@ (800fafc <tcp_close_shutdown_fin+0xcc>)
 800fa46:	482e      	ldr	r0, [pc, #184]	@ (800fb00 <tcp_close_shutdown_fin+0xd0>)
 800fa48:	f018 fa74 	bl	8027f34 <iprintf>

  switch (pcb->state) {
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	7d1b      	ldrb	r3, [r3, #20]
 800fa50:	2b07      	cmp	r3, #7
 800fa52:	d020      	beq.n	800fa96 <tcp_close_shutdown_fin+0x66>
 800fa54:	2b07      	cmp	r3, #7
 800fa56:	dc2b      	bgt.n	800fab0 <tcp_close_shutdown_fin+0x80>
 800fa58:	2b03      	cmp	r3, #3
 800fa5a:	d002      	beq.n	800fa62 <tcp_close_shutdown_fin+0x32>
 800fa5c:	2b04      	cmp	r3, #4
 800fa5e:	d00d      	beq.n	800fa7c <tcp_close_shutdown_fin+0x4c>
 800fa60:	e026      	b.n	800fab0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f004 fd5c 	bl	8014520 <tcp_send_fin>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fa6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d11f      	bne.n	800fab4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2205      	movs	r2, #5
 800fa78:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fa7a:	e01b      	b.n	800fab4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800fa7c:	6878      	ldr	r0, [r7, #4]
 800fa7e:	f004 fd4f 	bl	8014520 <tcp_send_fin>
 800fa82:	4603      	mov	r3, r0
 800fa84:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fa86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d114      	bne.n	800fab8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	2205      	movs	r2, #5
 800fa92:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fa94:	e010      	b.n	800fab8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f004 fd42 	bl	8014520 <tcp_send_fin>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800faa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d109      	bne.n	800fabc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2209      	movs	r2, #9
 800faac:	751a      	strb	r2, [r3, #20]
      }
      break;
 800faae:	e005      	b.n	800fabc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800fab0:	2300      	movs	r3, #0
 800fab2:	e01c      	b.n	800faee <tcp_close_shutdown_fin+0xbe>
      break;
 800fab4:	bf00      	nop
 800fab6:	e002      	b.n	800fabe <tcp_close_shutdown_fin+0x8e>
      break;
 800fab8:	bf00      	nop
 800faba:	e000      	b.n	800fabe <tcp_close_shutdown_fin+0x8e>
      break;
 800fabc:	bf00      	nop
  }

  if (err == ERR_OK) {
 800fabe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d103      	bne.n	800face <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f004 fe68 	bl	801479c <tcp_output>
 800facc:	e00d      	b.n	800faea <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800face:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fad6:	d108      	bne.n	800faea <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	8b5b      	ldrh	r3, [r3, #26]
 800fadc:	f043 0308 	orr.w	r3, r3, #8
 800fae0:	b29a      	uxth	r2, r3
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800fae6:	2300      	movs	r3, #0
 800fae8:	e001      	b.n	800faee <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800faea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800faee:	4618      	mov	r0, r3
 800faf0:	3710      	adds	r7, #16
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}
 800faf6:	bf00      	nop
 800faf8:	0802ad34 	.word	0x0802ad34
 800fafc:	0802ade4 	.word	0x0802ade4
 800fb00:	0802ad78 	.word	0x0802ad78

0800fb04 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b082      	sub	sp, #8
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d109      	bne.n	800fb26 <tcp_close+0x22>
 800fb12:	4b0f      	ldr	r3, [pc, #60]	@ (800fb50 <tcp_close+0x4c>)
 800fb14:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800fb18:	490e      	ldr	r1, [pc, #56]	@ (800fb54 <tcp_close+0x50>)
 800fb1a:	480f      	ldr	r0, [pc, #60]	@ (800fb58 <tcp_close+0x54>)
 800fb1c:	f018 fa0a 	bl	8027f34 <iprintf>
 800fb20:	f06f 030f 	mvn.w	r3, #15
 800fb24:	e00f      	b.n	800fb46 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	7d1b      	ldrb	r3, [r3, #20]
 800fb2a:	2b01      	cmp	r3, #1
 800fb2c:	d006      	beq.n	800fb3c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	8b5b      	ldrh	r3, [r3, #26]
 800fb32:	f043 0310 	orr.w	r3, r3, #16
 800fb36:	b29a      	uxth	r2, r3
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800fb3c:	2101      	movs	r1, #1
 800fb3e:	6878      	ldr	r0, [r7, #4]
 800fb40:	f7ff fe94 	bl	800f86c <tcp_close_shutdown>
 800fb44:	4603      	mov	r3, r0
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	3708      	adds	r7, #8
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}
 800fb4e:	bf00      	nop
 800fb50:	0802ad34 	.word	0x0802ad34
 800fb54:	0802ae44 	.word	0x0802ae44
 800fb58:	0802ad78 	.word	0x0802ad78

0800fb5c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b084      	sub	sp, #16
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	60f8      	str	r0, [r7, #12]
 800fb64:	60b9      	str	r1, [r7, #8]
 800fb66:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d109      	bne.n	800fb82 <tcp_shutdown+0x26>
 800fb6e:	4b26      	ldr	r3, [pc, #152]	@ (800fc08 <tcp_shutdown+0xac>)
 800fb70:	f240 2207 	movw	r2, #519	@ 0x207
 800fb74:	4925      	ldr	r1, [pc, #148]	@ (800fc0c <tcp_shutdown+0xb0>)
 800fb76:	4826      	ldr	r0, [pc, #152]	@ (800fc10 <tcp_shutdown+0xb4>)
 800fb78:	f018 f9dc 	bl	8027f34 <iprintf>
 800fb7c:	f06f 030f 	mvn.w	r3, #15
 800fb80:	e03d      	b.n	800fbfe <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	7d1b      	ldrb	r3, [r3, #20]
 800fb86:	2b01      	cmp	r3, #1
 800fb88:	d102      	bne.n	800fb90 <tcp_shutdown+0x34>
    return ERR_CONN;
 800fb8a:	f06f 030a 	mvn.w	r3, #10
 800fb8e:	e036      	b.n	800fbfe <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d01b      	beq.n	800fbce <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	8b5b      	ldrh	r3, [r3, #26]
 800fb9a:	f043 0310 	orr.w	r3, r3, #16
 800fb9e:	b29a      	uxth	r2, r3
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d005      	beq.n	800fbb6 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800fbaa:	2101      	movs	r1, #1
 800fbac:	68f8      	ldr	r0, [r7, #12]
 800fbae:	f7ff fe5d 	bl	800f86c <tcp_close_shutdown>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	e023      	b.n	800fbfe <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d007      	beq.n	800fbce <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f7ff fae4 	bl	800f190 <pbuf_free>
      pcb->refused_data = NULL;
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	2200      	movs	r2, #0
 800fbcc:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d013      	beq.n	800fbfc <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	7d1b      	ldrb	r3, [r3, #20]
 800fbd8:	2b04      	cmp	r3, #4
 800fbda:	dc02      	bgt.n	800fbe2 <tcp_shutdown+0x86>
 800fbdc:	2b03      	cmp	r3, #3
 800fbde:	da02      	bge.n	800fbe6 <tcp_shutdown+0x8a>
 800fbe0:	e009      	b.n	800fbf6 <tcp_shutdown+0x9a>
 800fbe2:	2b07      	cmp	r3, #7
 800fbe4:	d107      	bne.n	800fbf6 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	b2db      	uxtb	r3, r3
 800fbea:	4619      	mov	r1, r3
 800fbec:	68f8      	ldr	r0, [r7, #12]
 800fbee:	f7ff fe3d 	bl	800f86c <tcp_close_shutdown>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	e003      	b.n	800fbfe <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800fbf6:	f06f 030a 	mvn.w	r3, #10
 800fbfa:	e000      	b.n	800fbfe <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800fbfc:	2300      	movs	r3, #0
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3710      	adds	r7, #16
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}
 800fc06:	bf00      	nop
 800fc08:	0802ad34 	.word	0x0802ad34
 800fc0c:	0802ae5c 	.word	0x0802ae5c
 800fc10:	0802ad78 	.word	0x0802ad78

0800fc14 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b08e      	sub	sp, #56	@ 0x38
 800fc18:	af04      	add	r7, sp, #16
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d107      	bne.n	800fc34 <tcp_abandon+0x20>
 800fc24:	4b52      	ldr	r3, [pc, #328]	@ (800fd70 <tcp_abandon+0x15c>)
 800fc26:	f240 223d 	movw	r2, #573	@ 0x23d
 800fc2a:	4952      	ldr	r1, [pc, #328]	@ (800fd74 <tcp_abandon+0x160>)
 800fc2c:	4852      	ldr	r0, [pc, #328]	@ (800fd78 <tcp_abandon+0x164>)
 800fc2e:	f018 f981 	bl	8027f34 <iprintf>
 800fc32:	e099      	b.n	800fd68 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	7d1b      	ldrb	r3, [r3, #20]
 800fc38:	2b01      	cmp	r3, #1
 800fc3a:	d106      	bne.n	800fc4a <tcp_abandon+0x36>
 800fc3c:	4b4c      	ldr	r3, [pc, #304]	@ (800fd70 <tcp_abandon+0x15c>)
 800fc3e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800fc42:	494e      	ldr	r1, [pc, #312]	@ (800fd7c <tcp_abandon+0x168>)
 800fc44:	484c      	ldr	r0, [pc, #304]	@ (800fd78 <tcp_abandon+0x164>)
 800fc46:	f018 f975 	bl	8027f34 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	7d1b      	ldrb	r3, [r3, #20]
 800fc4e:	2b0a      	cmp	r3, #10
 800fc50:	d107      	bne.n	800fc62 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800fc52:	6879      	ldr	r1, [r7, #4]
 800fc54:	484a      	ldr	r0, [pc, #296]	@ (800fd80 <tcp_abandon+0x16c>)
 800fc56:	f001 f98b 	bl	8010f70 <tcp_pcb_remove>
    tcp_free(pcb);
 800fc5a:	6878      	ldr	r0, [r7, #4]
 800fc5c:	f7ff fd54 	bl	800f708 <tcp_free>
 800fc60:	e082      	b.n	800fd68 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800fc62:	2300      	movs	r3, #0
 800fc64:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800fc66:	2300      	movs	r3, #0
 800fc68:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc6e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc74:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc7c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	691b      	ldr	r3, [r3, #16]
 800fc82:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	7d1b      	ldrb	r3, [r3, #20]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d126      	bne.n	800fcda <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	8adb      	ldrh	r3, [r3, #22]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d02e      	beq.n	800fcf2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fc94:	4b3b      	ldr	r3, [pc, #236]	@ (800fd84 <tcp_abandon+0x170>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	687a      	ldr	r2, [r7, #4]
 800fc9a:	429a      	cmp	r2, r3
 800fc9c:	d105      	bne.n	800fcaa <tcp_abandon+0x96>
 800fc9e:	4b39      	ldr	r3, [pc, #228]	@ (800fd84 <tcp_abandon+0x170>)
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	68db      	ldr	r3, [r3, #12]
 800fca4:	4a37      	ldr	r2, [pc, #220]	@ (800fd84 <tcp_abandon+0x170>)
 800fca6:	6013      	str	r3, [r2, #0]
 800fca8:	e013      	b.n	800fcd2 <tcp_abandon+0xbe>
 800fcaa:	4b36      	ldr	r3, [pc, #216]	@ (800fd84 <tcp_abandon+0x170>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	61fb      	str	r3, [r7, #28]
 800fcb0:	e00c      	b.n	800fccc <tcp_abandon+0xb8>
 800fcb2:	69fb      	ldr	r3, [r7, #28]
 800fcb4:	68db      	ldr	r3, [r3, #12]
 800fcb6:	687a      	ldr	r2, [r7, #4]
 800fcb8:	429a      	cmp	r2, r3
 800fcba:	d104      	bne.n	800fcc6 <tcp_abandon+0xb2>
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	68da      	ldr	r2, [r3, #12]
 800fcc0:	69fb      	ldr	r3, [r7, #28]
 800fcc2:	60da      	str	r2, [r3, #12]
 800fcc4:	e005      	b.n	800fcd2 <tcp_abandon+0xbe>
 800fcc6:	69fb      	ldr	r3, [r7, #28]
 800fcc8:	68db      	ldr	r3, [r3, #12]
 800fcca:	61fb      	str	r3, [r7, #28]
 800fccc:	69fb      	ldr	r3, [r7, #28]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d1ef      	bne.n	800fcb2 <tcp_abandon+0x9e>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	60da      	str	r2, [r3, #12]
 800fcd8:	e00b      	b.n	800fcf2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	8adb      	ldrh	r3, [r3, #22]
 800fce2:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fce4:	6879      	ldr	r1, [r7, #4]
 800fce6:	4828      	ldr	r0, [pc, #160]	@ (800fd88 <tcp_abandon+0x174>)
 800fce8:	f001 f942 	bl	8010f70 <tcp_pcb_remove>
 800fcec:	4b27      	ldr	r3, [pc, #156]	@ (800fd8c <tcp_abandon+0x178>)
 800fcee:	2201      	movs	r2, #1
 800fcf0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d004      	beq.n	800fd04 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f000 fe16 	bl	8010930 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d004      	beq.n	800fd16 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd10:	4618      	mov	r0, r3
 800fd12:	f000 fe0d 	bl	8010930 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d004      	beq.n	800fd28 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd22:	4618      	mov	r0, r3
 800fd24:	f000 fe04 	bl	8010930 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800fd28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d00e      	beq.n	800fd4c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800fd2e:	6879      	ldr	r1, [r7, #4]
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	3304      	adds	r3, #4
 800fd34:	687a      	ldr	r2, [r7, #4]
 800fd36:	8b12      	ldrh	r2, [r2, #24]
 800fd38:	9202      	str	r2, [sp, #8]
 800fd3a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800fd3c:	9201      	str	r2, [sp, #4]
 800fd3e:	9300      	str	r3, [sp, #0]
 800fd40:	460b      	mov	r3, r1
 800fd42:	697a      	ldr	r2, [r7, #20]
 800fd44:	69b9      	ldr	r1, [r7, #24]
 800fd46:	6878      	ldr	r0, [r7, #4]
 800fd48:	f005 fadc 	bl	8015304 <tcp_rst>
    }
    last_state = pcb->state;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	7d1b      	ldrb	r3, [r3, #20]
 800fd50:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	f7ff fcd8 	bl	800f708 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800fd58:	693b      	ldr	r3, [r7, #16]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d004      	beq.n	800fd68 <tcp_abandon+0x154>
 800fd5e:	693b      	ldr	r3, [r7, #16]
 800fd60:	f06f 010c 	mvn.w	r1, #12
 800fd64:	68f8      	ldr	r0, [r7, #12]
 800fd66:	4798      	blx	r3
  }
}
 800fd68:	3728      	adds	r7, #40	@ 0x28
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}
 800fd6e:	bf00      	nop
 800fd70:	0802ad34 	.word	0x0802ad34
 800fd74:	0802ae78 	.word	0x0802ae78
 800fd78:	0802ad78 	.word	0x0802ad78
 800fd7c:	0802ae94 	.word	0x0802ae94
 800fd80:	20010314 	.word	0x20010314
 800fd84:	20010308 	.word	0x20010308
 800fd88:	20010310 	.word	0x20010310
 800fd8c:	20010318 	.word	0x20010318

0800fd90 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b082      	sub	sp, #8
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800fd98:	2101      	movs	r1, #1
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	f7ff ff3a 	bl	800fc14 <tcp_abandon>
}
 800fda0:	bf00      	nop
 800fda2:	3708      	adds	r7, #8
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}

0800fda8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b088      	sub	sp, #32
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	60f8      	str	r0, [r7, #12]
 800fdb0:	60b9      	str	r1, [r7, #8]
 800fdb2:	4613      	mov	r3, r2
 800fdb4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800fdb6:	2304      	movs	r3, #4
 800fdb8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fdba:	68bb      	ldr	r3, [r7, #8]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d101      	bne.n	800fdc4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800fdc0:	4b3e      	ldr	r3, [pc, #248]	@ (800febc <tcp_bind+0x114>)
 800fdc2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d109      	bne.n	800fdde <tcp_bind+0x36>
 800fdca:	4b3d      	ldr	r3, [pc, #244]	@ (800fec0 <tcp_bind+0x118>)
 800fdcc:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800fdd0:	493c      	ldr	r1, [pc, #240]	@ (800fec4 <tcp_bind+0x11c>)
 800fdd2:	483d      	ldr	r0, [pc, #244]	@ (800fec8 <tcp_bind+0x120>)
 800fdd4:	f018 f8ae 	bl	8027f34 <iprintf>
 800fdd8:	f06f 030f 	mvn.w	r3, #15
 800fddc:	e06a      	b.n	800feb4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	7d1b      	ldrb	r3, [r3, #20]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d009      	beq.n	800fdfa <tcp_bind+0x52>
 800fde6:	4b36      	ldr	r3, [pc, #216]	@ (800fec0 <tcp_bind+0x118>)
 800fde8:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800fdec:	4937      	ldr	r1, [pc, #220]	@ (800fecc <tcp_bind+0x124>)
 800fdee:	4836      	ldr	r0, [pc, #216]	@ (800fec8 <tcp_bind+0x120>)
 800fdf0:	f018 f8a0 	bl	8027f34 <iprintf>
 800fdf4:	f06f 0305 	mvn.w	r3, #5
 800fdf8:	e05c      	b.n	800feb4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800fdfa:	88fb      	ldrh	r3, [r7, #6]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d109      	bne.n	800fe14 <tcp_bind+0x6c>
    port = tcp_new_port();
 800fe00:	f000 f92e 	bl	8010060 <tcp_new_port>
 800fe04:	4603      	mov	r3, r0
 800fe06:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800fe08:	88fb      	ldrh	r3, [r7, #6]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d135      	bne.n	800fe7a <tcp_bind+0xd2>
      return ERR_BUF;
 800fe0e:	f06f 0301 	mvn.w	r3, #1
 800fe12:	e04f      	b.n	800feb4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800fe14:	2300      	movs	r3, #0
 800fe16:	61fb      	str	r3, [r7, #28]
 800fe18:	e02b      	b.n	800fe72 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800fe1a:	4a2d      	ldr	r2, [pc, #180]	@ (800fed0 <tcp_bind+0x128>)
 800fe1c:	69fb      	ldr	r3, [r7, #28]
 800fe1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	61bb      	str	r3, [r7, #24]
 800fe26:	e01e      	b.n	800fe66 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800fe28:	69bb      	ldr	r3, [r7, #24]
 800fe2a:	8adb      	ldrh	r3, [r3, #22]
 800fe2c:	88fa      	ldrh	r2, [r7, #6]
 800fe2e:	429a      	cmp	r2, r3
 800fe30:	d116      	bne.n	800fe60 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800fe32:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d010      	beq.n	800fe5a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800fe38:	69bb      	ldr	r3, [r7, #24]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d00c      	beq.n	800fe5a <tcp_bind+0xb2>
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d009      	beq.n	800fe5a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d005      	beq.n	800fe5a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800fe4e:	69bb      	ldr	r3, [r7, #24]
 800fe50:	681a      	ldr	r2, [r3, #0]
 800fe52:	68bb      	ldr	r3, [r7, #8]
 800fe54:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d102      	bne.n	800fe60 <tcp_bind+0xb8>
              return ERR_USE;
 800fe5a:	f06f 0307 	mvn.w	r3, #7
 800fe5e:	e029      	b.n	800feb4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800fe60:	69bb      	ldr	r3, [r7, #24]
 800fe62:	68db      	ldr	r3, [r3, #12]
 800fe64:	61bb      	str	r3, [r7, #24]
 800fe66:	69bb      	ldr	r3, [r7, #24]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d1dd      	bne.n	800fe28 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800fe6c:	69fb      	ldr	r3, [r7, #28]
 800fe6e:	3301      	adds	r3, #1
 800fe70:	61fb      	str	r3, [r7, #28]
 800fe72:	69fa      	ldr	r2, [r7, #28]
 800fe74:	697b      	ldr	r3, [r7, #20]
 800fe76:	429a      	cmp	r2, r3
 800fe78:	dbcf      	blt.n	800fe1a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800fe7a:	68bb      	ldr	r3, [r7, #8]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d00c      	beq.n	800fe9a <tcp_bind+0xf2>
 800fe80:	68bb      	ldr	r3, [r7, #8]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d008      	beq.n	800fe9a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d002      	beq.n	800fe94 <tcp_bind+0xec>
 800fe8e:	68bb      	ldr	r3, [r7, #8]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	e000      	b.n	800fe96 <tcp_bind+0xee>
 800fe94:	2300      	movs	r3, #0
 800fe96:	68fa      	ldr	r2, [r7, #12]
 800fe98:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	88fa      	ldrh	r2, [r7, #6]
 800fe9e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800fea0:	4b0c      	ldr	r3, [pc, #48]	@ (800fed4 <tcp_bind+0x12c>)
 800fea2:	681a      	ldr	r2, [r3, #0]
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	60da      	str	r2, [r3, #12]
 800fea8:	4a0a      	ldr	r2, [pc, #40]	@ (800fed4 <tcp_bind+0x12c>)
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	6013      	str	r3, [r2, #0]
 800feae:	f005 fbeb 	bl	8015688 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800feb2:	2300      	movs	r3, #0
}
 800feb4:	4618      	mov	r0, r3
 800feb6:	3720      	adds	r7, #32
 800feb8:	46bd      	mov	sp, r7
 800feba:	bd80      	pop	{r7, pc}
 800febc:	0802ce54 	.word	0x0802ce54
 800fec0:	0802ad34 	.word	0x0802ad34
 800fec4:	0802aec8 	.word	0x0802aec8
 800fec8:	0802ad78 	.word	0x0802ad78
 800fecc:	0802aee0 	.word	0x0802aee0
 800fed0:	0802ce2c 	.word	0x0802ce2c
 800fed4:	20010308 	.word	0x20010308

0800fed8 <tcp_bind_netif>:
 * @param pcb the tcp_pcb to bind.
 * @param netif the netif to bind to. Can be NULL.
 */
void
tcp_bind_netif(struct tcp_pcb *pcb, const struct netif *netif)
{
 800fed8:	b480      	push	{r7}
 800feda:	b083      	sub	sp, #12
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (netif != NULL) {
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d007      	beq.n	800fef8 <tcp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800feee:	3301      	adds	r3, #1
 800fef0:	b2da      	uxtb	r2, r3
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 800fef6:	e002      	b.n	800fefe <tcp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	2200      	movs	r2, #0
 800fefc:	721a      	strb	r2, [r3, #8]
}
 800fefe:	bf00      	nop
 800ff00:	370c      	adds	r7, #12
 800ff02:	46bd      	mov	sp, r7
 800ff04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff08:	4770      	bx	lr
	...

0800ff0c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b084      	sub	sp, #16
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d106      	bne.n	800ff28 <tcp_update_rcv_ann_wnd+0x1c>
 800ff1a:	4b25      	ldr	r3, [pc, #148]	@ (800ffb0 <tcp_update_rcv_ann_wnd+0xa4>)
 800ff1c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800ff20:	4924      	ldr	r1, [pc, #144]	@ (800ffb4 <tcp_update_rcv_ann_wnd+0xa8>)
 800ff22:	4825      	ldr	r0, [pc, #148]	@ (800ffb8 <tcp_update_rcv_ann_wnd+0xac>)
 800ff24:	f018 f806 	bl	8027f34 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff2c:	687a      	ldr	r2, [r7, #4]
 800ff2e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800ff30:	4413      	add	r3, r2
 800ff32:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff38:	687a      	ldr	r2, [r7, #4]
 800ff3a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800ff3c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800ff40:	bf28      	it	cs
 800ff42:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800ff46:	b292      	uxth	r2, r2
 800ff48:	4413      	add	r3, r2
 800ff4a:	68fa      	ldr	r2, [r7, #12]
 800ff4c:	1ad3      	subs	r3, r2, r3
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	db08      	blt.n	800ff64 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff5e:	68fa      	ldr	r2, [r7, #12]
 800ff60:	1ad3      	subs	r3, r2, r3
 800ff62:	e020      	b.n	800ffa6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff6c:	1ad3      	subs	r3, r2, r3
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	dd03      	ble.n	800ff7a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2200      	movs	r2, #0
 800ff76:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ff78:	e014      	b.n	800ffa4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff82:	1ad3      	subs	r3, r2, r3
 800ff84:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ff8c:	d306      	bcc.n	800ff9c <tcp_update_rcv_ann_wnd+0x90>
 800ff8e:	4b08      	ldr	r3, [pc, #32]	@ (800ffb0 <tcp_update_rcv_ann_wnd+0xa4>)
 800ff90:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800ff94:	4909      	ldr	r1, [pc, #36]	@ (800ffbc <tcp_update_rcv_ann_wnd+0xb0>)
 800ff96:	4808      	ldr	r0, [pc, #32]	@ (800ffb8 <tcp_update_rcv_ann_wnd+0xac>)
 800ff98:	f017 ffcc 	bl	8027f34 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	b29a      	uxth	r2, r3
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800ffa4:	2300      	movs	r3, #0
  }
}
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	3710      	adds	r7, #16
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	bd80      	pop	{r7, pc}
 800ffae:	bf00      	nop
 800ffb0:	0802ad34 	.word	0x0802ad34
 800ffb4:	0802af90 	.word	0x0802af90
 800ffb8:	0802ad78 	.word	0x0802ad78
 800ffbc:	0802afb4 	.word	0x0802afb4

0800ffc0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b084      	sub	sp, #16
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	460b      	mov	r3, r1
 800ffca:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d107      	bne.n	800ffe2 <tcp_recved+0x22>
 800ffd2:	4b1f      	ldr	r3, [pc, #124]	@ (8010050 <tcp_recved+0x90>)
 800ffd4:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800ffd8:	491e      	ldr	r1, [pc, #120]	@ (8010054 <tcp_recved+0x94>)
 800ffda:	481f      	ldr	r0, [pc, #124]	@ (8010058 <tcp_recved+0x98>)
 800ffdc:	f017 ffaa 	bl	8027f34 <iprintf>
 800ffe0:	e032      	b.n	8010048 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	7d1b      	ldrb	r3, [r3, #20]
 800ffe6:	2b01      	cmp	r3, #1
 800ffe8:	d106      	bne.n	800fff8 <tcp_recved+0x38>
 800ffea:	4b19      	ldr	r3, [pc, #100]	@ (8010050 <tcp_recved+0x90>)
 800ffec:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800fff0:	491a      	ldr	r1, [pc, #104]	@ (801005c <tcp_recved+0x9c>)
 800fff2:	4819      	ldr	r0, [pc, #100]	@ (8010058 <tcp_recved+0x98>)
 800fff4:	f017 ff9e 	bl	8027f34 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fffc:	887b      	ldrh	r3, [r7, #2]
 800fffe:	4413      	add	r3, r2
 8010000:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8010002:	89fb      	ldrh	r3, [r7, #14]
 8010004:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8010008:	d804      	bhi.n	8010014 <tcp_recved+0x54>
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801000e:	89fa      	ldrh	r2, [r7, #14]
 8010010:	429a      	cmp	r2, r3
 8010012:	d204      	bcs.n	801001e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801001a:	851a      	strh	r2, [r3, #40]	@ 0x28
 801001c:	e002      	b.n	8010024 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	89fa      	ldrh	r2, [r7, #14]
 8010022:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010024:	6878      	ldr	r0, [r7, #4]
 8010026:	f7ff ff71 	bl	800ff0c <tcp_update_rcv_ann_wnd>
 801002a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8010032:	d309      	bcc.n	8010048 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	8b5b      	ldrh	r3, [r3, #26]
 8010038:	f043 0302 	orr.w	r3, r3, #2
 801003c:	b29a      	uxth	r2, r3
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010042:	6878      	ldr	r0, [r7, #4]
 8010044:	f004 fbaa 	bl	801479c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010048:	3710      	adds	r7, #16
 801004a:	46bd      	mov	sp, r7
 801004c:	bd80      	pop	{r7, pc}
 801004e:	bf00      	nop
 8010050:	0802ad34 	.word	0x0802ad34
 8010054:	0802afd0 	.word	0x0802afd0
 8010058:	0802ad78 	.word	0x0802ad78
 801005c:	0802afe8 	.word	0x0802afe8

08010060 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8010060:	b480      	push	{r7}
 8010062:	b083      	sub	sp, #12
 8010064:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8010066:	2300      	movs	r3, #0
 8010068:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801006a:	4b1e      	ldr	r3, [pc, #120]	@ (80100e4 <tcp_new_port+0x84>)
 801006c:	881b      	ldrh	r3, [r3, #0]
 801006e:	3301      	adds	r3, #1
 8010070:	b29a      	uxth	r2, r3
 8010072:	4b1c      	ldr	r3, [pc, #112]	@ (80100e4 <tcp_new_port+0x84>)
 8010074:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8010076:	4b1b      	ldr	r3, [pc, #108]	@ (80100e4 <tcp_new_port+0x84>)
 8010078:	881b      	ldrh	r3, [r3, #0]
 801007a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801007e:	4293      	cmp	r3, r2
 8010080:	d103      	bne.n	801008a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8010082:	4b18      	ldr	r3, [pc, #96]	@ (80100e4 <tcp_new_port+0x84>)
 8010084:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8010088:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801008a:	2300      	movs	r3, #0
 801008c:	71fb      	strb	r3, [r7, #7]
 801008e:	e01e      	b.n	80100ce <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010090:	79fb      	ldrb	r3, [r7, #7]
 8010092:	4a15      	ldr	r2, [pc, #84]	@ (80100e8 <tcp_new_port+0x88>)
 8010094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	603b      	str	r3, [r7, #0]
 801009c:	e011      	b.n	80100c2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	8ada      	ldrh	r2, [r3, #22]
 80100a2:	4b10      	ldr	r3, [pc, #64]	@ (80100e4 <tcp_new_port+0x84>)
 80100a4:	881b      	ldrh	r3, [r3, #0]
 80100a6:	429a      	cmp	r2, r3
 80100a8:	d108      	bne.n	80100bc <tcp_new_port+0x5c>
        n++;
 80100aa:	88bb      	ldrh	r3, [r7, #4]
 80100ac:	3301      	adds	r3, #1
 80100ae:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80100b0:	88bb      	ldrh	r3, [r7, #4]
 80100b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80100b6:	d3d8      	bcc.n	801006a <tcp_new_port+0xa>
          return 0;
 80100b8:	2300      	movs	r3, #0
 80100ba:	e00d      	b.n	80100d8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	68db      	ldr	r3, [r3, #12]
 80100c0:	603b      	str	r3, [r7, #0]
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d1ea      	bne.n	801009e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80100c8:	79fb      	ldrb	r3, [r7, #7]
 80100ca:	3301      	adds	r3, #1
 80100cc:	71fb      	strb	r3, [r7, #7]
 80100ce:	79fb      	ldrb	r3, [r7, #7]
 80100d0:	2b03      	cmp	r3, #3
 80100d2:	d9dd      	bls.n	8010090 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80100d4:	4b03      	ldr	r3, [pc, #12]	@ (80100e4 <tcp_new_port+0x84>)
 80100d6:	881b      	ldrh	r3, [r3, #0]
}
 80100d8:	4618      	mov	r0, r3
 80100da:	370c      	adds	r7, #12
 80100dc:	46bd      	mov	sp, r7
 80100de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e2:	4770      	bx	lr
 80100e4:	2000002c 	.word	0x2000002c
 80100e8:	0802ce2c 	.word	0x0802ce2c

080100ec <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80100ec:	b5b0      	push	{r4, r5, r7, lr}
 80100ee:	b090      	sub	sp, #64	@ 0x40
 80100f0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80100f2:	2300      	movs	r3, #0
 80100f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80100f8:	4b95      	ldr	r3, [pc, #596]	@ (8010350 <tcp_slowtmr+0x264>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	3301      	adds	r3, #1
 80100fe:	4a94      	ldr	r2, [pc, #592]	@ (8010350 <tcp_slowtmr+0x264>)
 8010100:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8010102:	4b94      	ldr	r3, [pc, #592]	@ (8010354 <tcp_slowtmr+0x268>)
 8010104:	781b      	ldrb	r3, [r3, #0]
 8010106:	3301      	adds	r3, #1
 8010108:	b2da      	uxtb	r2, r3
 801010a:	4b92      	ldr	r3, [pc, #584]	@ (8010354 <tcp_slowtmr+0x268>)
 801010c:	701a      	strb	r2, [r3, #0]
 801010e:	e000      	b.n	8010112 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8010110:	bf00      	nop
  prev = NULL;
 8010112:	2300      	movs	r3, #0
 8010114:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8010116:	4b90      	ldr	r3, [pc, #576]	@ (8010358 <tcp_slowtmr+0x26c>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801011c:	e29d      	b.n	801065a <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801011e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010120:	7d1b      	ldrb	r3, [r3, #20]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d106      	bne.n	8010134 <tcp_slowtmr+0x48>
 8010126:	4b8d      	ldr	r3, [pc, #564]	@ (801035c <tcp_slowtmr+0x270>)
 8010128:	f240 42be 	movw	r2, #1214	@ 0x4be
 801012c:	498c      	ldr	r1, [pc, #560]	@ (8010360 <tcp_slowtmr+0x274>)
 801012e:	488d      	ldr	r0, [pc, #564]	@ (8010364 <tcp_slowtmr+0x278>)
 8010130:	f017 ff00 	bl	8027f34 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010136:	7d1b      	ldrb	r3, [r3, #20]
 8010138:	2b01      	cmp	r3, #1
 801013a:	d106      	bne.n	801014a <tcp_slowtmr+0x5e>
 801013c:	4b87      	ldr	r3, [pc, #540]	@ (801035c <tcp_slowtmr+0x270>)
 801013e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8010142:	4989      	ldr	r1, [pc, #548]	@ (8010368 <tcp_slowtmr+0x27c>)
 8010144:	4887      	ldr	r0, [pc, #540]	@ (8010364 <tcp_slowtmr+0x278>)
 8010146:	f017 fef5 	bl	8027f34 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801014a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801014c:	7d1b      	ldrb	r3, [r3, #20]
 801014e:	2b0a      	cmp	r3, #10
 8010150:	d106      	bne.n	8010160 <tcp_slowtmr+0x74>
 8010152:	4b82      	ldr	r3, [pc, #520]	@ (801035c <tcp_slowtmr+0x270>)
 8010154:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8010158:	4984      	ldr	r1, [pc, #528]	@ (801036c <tcp_slowtmr+0x280>)
 801015a:	4882      	ldr	r0, [pc, #520]	@ (8010364 <tcp_slowtmr+0x278>)
 801015c:	f017 feea 	bl	8027f34 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010162:	7f9a      	ldrb	r2, [r3, #30]
 8010164:	4b7b      	ldr	r3, [pc, #492]	@ (8010354 <tcp_slowtmr+0x268>)
 8010166:	781b      	ldrb	r3, [r3, #0]
 8010168:	429a      	cmp	r2, r3
 801016a:	d105      	bne.n	8010178 <tcp_slowtmr+0x8c>
      prev = pcb;
 801016c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801016e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8010170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010172:	68db      	ldr	r3, [r3, #12]
 8010174:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8010176:	e270      	b.n	801065a <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8010178:	4b76      	ldr	r3, [pc, #472]	@ (8010354 <tcp_slowtmr+0x268>)
 801017a:	781a      	ldrb	r2, [r3, #0]
 801017c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801017e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8010180:	2300      	movs	r3, #0
 8010182:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8010186:	2300      	movs	r3, #0
 8010188:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801018c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801018e:	7d1b      	ldrb	r3, [r3, #20]
 8010190:	2b02      	cmp	r3, #2
 8010192:	d10a      	bne.n	80101aa <tcp_slowtmr+0xbe>
 8010194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010196:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801019a:	2b05      	cmp	r3, #5
 801019c:	d905      	bls.n	80101aa <tcp_slowtmr+0xbe>
      ++pcb_remove;
 801019e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80101a2:	3301      	adds	r3, #1
 80101a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80101a8:	e11e      	b.n	80103e8 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80101aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80101b0:	2b0b      	cmp	r3, #11
 80101b2:	d905      	bls.n	80101c0 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80101b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80101b8:	3301      	adds	r3, #1
 80101ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80101be:	e113      	b.n	80103e8 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80101c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101c2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d075      	beq.n	80102b6 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80101ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d006      	beq.n	80101e0 <tcp_slowtmr+0xf4>
 80101d2:	4b62      	ldr	r3, [pc, #392]	@ (801035c <tcp_slowtmr+0x270>)
 80101d4:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80101d8:	4965      	ldr	r1, [pc, #404]	@ (8010370 <tcp_slowtmr+0x284>)
 80101da:	4862      	ldr	r0, [pc, #392]	@ (8010364 <tcp_slowtmr+0x278>)
 80101dc:	f017 feaa 	bl	8027f34 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80101e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d106      	bne.n	80101f6 <tcp_slowtmr+0x10a>
 80101e8:	4b5c      	ldr	r3, [pc, #368]	@ (801035c <tcp_slowtmr+0x270>)
 80101ea:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80101ee:	4961      	ldr	r1, [pc, #388]	@ (8010374 <tcp_slowtmr+0x288>)
 80101f0:	485c      	ldr	r0, [pc, #368]	@ (8010364 <tcp_slowtmr+0x278>)
 80101f2:	f017 fe9f 	bl	8027f34 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80101f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101f8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80101fc:	2b0b      	cmp	r3, #11
 80101fe:	d905      	bls.n	801020c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8010200:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010204:	3301      	adds	r3, #1
 8010206:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801020a:	e0ed      	b.n	80103e8 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801020c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801020e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010212:	3b01      	subs	r3, #1
 8010214:	4a58      	ldr	r2, [pc, #352]	@ (8010378 <tcp_slowtmr+0x28c>)
 8010216:	5cd3      	ldrb	r3, [r2, r3]
 8010218:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801021a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801021c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8010220:	7c7a      	ldrb	r2, [r7, #17]
 8010222:	429a      	cmp	r2, r3
 8010224:	d907      	bls.n	8010236 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8010226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010228:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801022c:	3301      	adds	r3, #1
 801022e:	b2da      	uxtb	r2, r3
 8010230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010232:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8010236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010238:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801023c:	7c7a      	ldrb	r2, [r7, #17]
 801023e:	429a      	cmp	r2, r3
 8010240:	f200 80d2 	bhi.w	80103e8 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8010244:	2301      	movs	r3, #1
 8010246:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8010248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801024a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801024e:	2b00      	cmp	r3, #0
 8010250:	d108      	bne.n	8010264 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8010252:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010254:	f005 f94a 	bl	80154ec <tcp_zero_window_probe>
 8010258:	4603      	mov	r3, r0
 801025a:	2b00      	cmp	r3, #0
 801025c:	d014      	beq.n	8010288 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 801025e:	2300      	movs	r3, #0
 8010260:	623b      	str	r3, [r7, #32]
 8010262:	e011      	b.n	8010288 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8010264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010266:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801026a:	4619      	mov	r1, r3
 801026c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801026e:	f004 f80f 	bl	8014290 <tcp_split_unsent_seg>
 8010272:	4603      	mov	r3, r0
 8010274:	2b00      	cmp	r3, #0
 8010276:	d107      	bne.n	8010288 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8010278:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801027a:	f004 fa8f 	bl	801479c <tcp_output>
 801027e:	4603      	mov	r3, r0
 8010280:	2b00      	cmp	r3, #0
 8010282:	d101      	bne.n	8010288 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8010284:	2300      	movs	r3, #0
 8010286:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8010288:	6a3b      	ldr	r3, [r7, #32]
 801028a:	2b00      	cmp	r3, #0
 801028c:	f000 80ac 	beq.w	80103e8 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8010290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010292:	2200      	movs	r2, #0
 8010294:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801029a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801029e:	2b06      	cmp	r3, #6
 80102a0:	f200 80a2 	bhi.w	80103e8 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80102a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102a6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80102aa:	3301      	adds	r3, #1
 80102ac:	b2da      	uxtb	r2, r3
 80102ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102b0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80102b4:	e098      	b.n	80103e8 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80102b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80102bc:	2b00      	cmp	r3, #0
 80102be:	db0f      	blt.n	80102e0 <tcp_slowtmr+0x1f4>
 80102c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80102c6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80102ca:	4293      	cmp	r3, r2
 80102cc:	d008      	beq.n	80102e0 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80102ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80102d4:	b29b      	uxth	r3, r3
 80102d6:	3301      	adds	r3, #1
 80102d8:	b29b      	uxth	r3, r3
 80102da:	b21a      	sxth	r2, r3
 80102dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102de:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80102e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102e2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80102e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102e8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80102ec:	429a      	cmp	r2, r3
 80102ee:	db7b      	blt.n	80103e8 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80102f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80102f2:	f004 fd47 	bl	8014d84 <tcp_rexmit_rto_prepare>
 80102f6:	4603      	mov	r3, r0
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d007      	beq.n	801030c <tcp_slowtmr+0x220>
 80102fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010300:	2b00      	cmp	r3, #0
 8010302:	d171      	bne.n	80103e8 <tcp_slowtmr+0x2fc>
 8010304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010306:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010308:	2b00      	cmp	r3, #0
 801030a:	d06d      	beq.n	80103e8 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 801030c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801030e:	7d1b      	ldrb	r3, [r3, #20]
 8010310:	2b02      	cmp	r3, #2
 8010312:	d03a      	beq.n	801038a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8010314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010316:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801031a:	2b0c      	cmp	r3, #12
 801031c:	bf28      	it	cs
 801031e:	230c      	movcs	r3, #12
 8010320:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010324:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010328:	10db      	asrs	r3, r3, #3
 801032a:	b21b      	sxth	r3, r3
 801032c:	461a      	mov	r2, r3
 801032e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010330:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010334:	4413      	add	r3, r2
 8010336:	7efa      	ldrb	r2, [r7, #27]
 8010338:	4910      	ldr	r1, [pc, #64]	@ (801037c <tcp_slowtmr+0x290>)
 801033a:	5c8a      	ldrb	r2, [r1, r2]
 801033c:	4093      	lsls	r3, r2
 801033e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010340:	697b      	ldr	r3, [r7, #20]
 8010342:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8010346:	4293      	cmp	r3, r2
 8010348:	dc1a      	bgt.n	8010380 <tcp_slowtmr+0x294>
 801034a:	697b      	ldr	r3, [r7, #20]
 801034c:	b21a      	sxth	r2, r3
 801034e:	e019      	b.n	8010384 <tcp_slowtmr+0x298>
 8010350:	20010304 	.word	0x20010304
 8010354:	2001031a 	.word	0x2001031a
 8010358:	20010310 	.word	0x20010310
 801035c:	0802ad34 	.word	0x0802ad34
 8010360:	0802b078 	.word	0x0802b078
 8010364:	0802ad78 	.word	0x0802ad78
 8010368:	0802b0a4 	.word	0x0802b0a4
 801036c:	0802b0d0 	.word	0x0802b0d0
 8010370:	0802b100 	.word	0x0802b100
 8010374:	0802b134 	.word	0x0802b134
 8010378:	0802ce24 	.word	0x0802ce24
 801037c:	0802ce14 	.word	0x0802ce14
 8010380:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8010384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010386:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801038a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801038c:	2200      	movs	r2, #0
 801038e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8010390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010392:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010398:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801039c:	4293      	cmp	r3, r2
 801039e:	bf28      	it	cs
 80103a0:	4613      	movcs	r3, r2
 80103a2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80103a4:	8a7b      	ldrh	r3, [r7, #18]
 80103a6:	085b      	lsrs	r3, r3, #1
 80103a8:	b29a      	uxth	r2, r3
 80103aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103ac:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80103b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80103b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80103ba:	005b      	lsls	r3, r3, #1
 80103bc:	b29b      	uxth	r3, r3
 80103be:	429a      	cmp	r2, r3
 80103c0:	d206      	bcs.n	80103d0 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80103c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80103c6:	005b      	lsls	r3, r3, #1
 80103c8:	b29a      	uxth	r2, r3
 80103ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103cc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80103d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103d2:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80103d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103d6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80103da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103dc:	2200      	movs	r2, #0
 80103de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80103e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80103e4:	f004 fd3e 	bl	8014e64 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80103e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103ea:	7d1b      	ldrb	r3, [r3, #20]
 80103ec:	2b06      	cmp	r3, #6
 80103ee:	d111      	bne.n	8010414 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80103f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103f2:	8b5b      	ldrh	r3, [r3, #26]
 80103f4:	f003 0310 	and.w	r3, r3, #16
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d00b      	beq.n	8010414 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80103fc:	4b9c      	ldr	r3, [pc, #624]	@ (8010670 <tcp_slowtmr+0x584>)
 80103fe:	681a      	ldr	r2, [r3, #0]
 8010400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010402:	6a1b      	ldr	r3, [r3, #32]
 8010404:	1ad3      	subs	r3, r2, r3
 8010406:	2b28      	cmp	r3, #40	@ 0x28
 8010408:	d904      	bls.n	8010414 <tcp_slowtmr+0x328>
          ++pcb_remove;
 801040a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801040e:	3301      	adds	r3, #1
 8010410:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010416:	7a5b      	ldrb	r3, [r3, #9]
 8010418:	f003 0308 	and.w	r3, r3, #8
 801041c:	2b00      	cmp	r3, #0
 801041e:	d04a      	beq.n	80104b6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8010420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010422:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010424:	2b04      	cmp	r3, #4
 8010426:	d003      	beq.n	8010430 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8010428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801042a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801042c:	2b07      	cmp	r3, #7
 801042e:	d142      	bne.n	80104b6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010430:	4b8f      	ldr	r3, [pc, #572]	@ (8010670 <tcp_slowtmr+0x584>)
 8010432:	681a      	ldr	r2, [r3, #0]
 8010434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010436:	6a1b      	ldr	r3, [r3, #32]
 8010438:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801043a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801043c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8010440:	4b8c      	ldr	r3, [pc, #560]	@ (8010674 <tcp_slowtmr+0x588>)
 8010442:	440b      	add	r3, r1
 8010444:	498c      	ldr	r1, [pc, #560]	@ (8010678 <tcp_slowtmr+0x58c>)
 8010446:	fba1 1303 	umull	r1, r3, r1, r3
 801044a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801044c:	429a      	cmp	r2, r3
 801044e:	d90a      	bls.n	8010466 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8010450:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010454:	3301      	adds	r3, #1
 8010456:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801045a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801045e:	3301      	adds	r3, #1
 8010460:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010464:	e027      	b.n	80104b6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010466:	4b82      	ldr	r3, [pc, #520]	@ (8010670 <tcp_slowtmr+0x584>)
 8010468:	681a      	ldr	r2, [r3, #0]
 801046a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801046c:	6a1b      	ldr	r3, [r3, #32]
 801046e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8010470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010472:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8010476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010478:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801047c:	4618      	mov	r0, r3
 801047e:	4b7f      	ldr	r3, [pc, #508]	@ (801067c <tcp_slowtmr+0x590>)
 8010480:	fb00 f303 	mul.w	r3, r0, r3
 8010484:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8010486:	497c      	ldr	r1, [pc, #496]	@ (8010678 <tcp_slowtmr+0x58c>)
 8010488:	fba1 1303 	umull	r1, r3, r1, r3
 801048c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801048e:	429a      	cmp	r2, r3
 8010490:	d911      	bls.n	80104b6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8010492:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010494:	f004 ffea 	bl	801546c <tcp_keepalive>
 8010498:	4603      	mov	r3, r0
 801049a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 801049e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d107      	bne.n	80104b6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80104a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104a8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80104ac:	3301      	adds	r3, #1
 80104ae:	b2da      	uxtb	r2, r3
 80104b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104b2:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80104b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d011      	beq.n	80104e2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80104be:	4b6c      	ldr	r3, [pc, #432]	@ (8010670 <tcp_slowtmr+0x584>)
 80104c0:	681a      	ldr	r2, [r3, #0]
 80104c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104c4:	6a1b      	ldr	r3, [r3, #32]
 80104c6:	1ad2      	subs	r2, r2, r3
 80104c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104ca:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80104ce:	4619      	mov	r1, r3
 80104d0:	460b      	mov	r3, r1
 80104d2:	005b      	lsls	r3, r3, #1
 80104d4:	440b      	add	r3, r1
 80104d6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80104d8:	429a      	cmp	r2, r3
 80104da:	d302      	bcc.n	80104e2 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 80104dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80104de:	f000 feab 	bl	8011238 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80104e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104e4:	7d1b      	ldrb	r3, [r3, #20]
 80104e6:	2b03      	cmp	r3, #3
 80104e8:	d10b      	bne.n	8010502 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80104ea:	4b61      	ldr	r3, [pc, #388]	@ (8010670 <tcp_slowtmr+0x584>)
 80104ec:	681a      	ldr	r2, [r3, #0]
 80104ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104f0:	6a1b      	ldr	r3, [r3, #32]
 80104f2:	1ad3      	subs	r3, r2, r3
 80104f4:	2b28      	cmp	r3, #40	@ 0x28
 80104f6:	d904      	bls.n	8010502 <tcp_slowtmr+0x416>
        ++pcb_remove;
 80104f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80104fc:	3301      	adds	r3, #1
 80104fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8010502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010504:	7d1b      	ldrb	r3, [r3, #20]
 8010506:	2b09      	cmp	r3, #9
 8010508:	d10b      	bne.n	8010522 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801050a:	4b59      	ldr	r3, [pc, #356]	@ (8010670 <tcp_slowtmr+0x584>)
 801050c:	681a      	ldr	r2, [r3, #0]
 801050e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010510:	6a1b      	ldr	r3, [r3, #32]
 8010512:	1ad3      	subs	r3, r2, r3
 8010514:	2bf0      	cmp	r3, #240	@ 0xf0
 8010516:	d904      	bls.n	8010522 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8010518:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801051c:	3301      	adds	r3, #1
 801051e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8010522:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010526:	2b00      	cmp	r3, #0
 8010528:	d060      	beq.n	80105ec <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 801052a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801052c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010530:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8010532:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010534:	f000 fccc 	bl	8010ed0 <tcp_pcb_purge>
      if (prev != NULL) {
 8010538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801053a:	2b00      	cmp	r3, #0
 801053c:	d010      	beq.n	8010560 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801053e:	4b50      	ldr	r3, [pc, #320]	@ (8010680 <tcp_slowtmr+0x594>)
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010544:	429a      	cmp	r2, r3
 8010546:	d106      	bne.n	8010556 <tcp_slowtmr+0x46a>
 8010548:	4b4e      	ldr	r3, [pc, #312]	@ (8010684 <tcp_slowtmr+0x598>)
 801054a:	f240 526d 	movw	r2, #1389	@ 0x56d
 801054e:	494e      	ldr	r1, [pc, #312]	@ (8010688 <tcp_slowtmr+0x59c>)
 8010550:	484e      	ldr	r0, [pc, #312]	@ (801068c <tcp_slowtmr+0x5a0>)
 8010552:	f017 fcef 	bl	8027f34 <iprintf>
        prev->next = pcb->next;
 8010556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010558:	68da      	ldr	r2, [r3, #12]
 801055a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801055c:	60da      	str	r2, [r3, #12]
 801055e:	e00f      	b.n	8010580 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8010560:	4b47      	ldr	r3, [pc, #284]	@ (8010680 <tcp_slowtmr+0x594>)
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010566:	429a      	cmp	r2, r3
 8010568:	d006      	beq.n	8010578 <tcp_slowtmr+0x48c>
 801056a:	4b46      	ldr	r3, [pc, #280]	@ (8010684 <tcp_slowtmr+0x598>)
 801056c:	f240 5271 	movw	r2, #1393	@ 0x571
 8010570:	4947      	ldr	r1, [pc, #284]	@ (8010690 <tcp_slowtmr+0x5a4>)
 8010572:	4846      	ldr	r0, [pc, #280]	@ (801068c <tcp_slowtmr+0x5a0>)
 8010574:	f017 fcde 	bl	8027f34 <iprintf>
        tcp_active_pcbs = pcb->next;
 8010578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801057a:	68db      	ldr	r3, [r3, #12]
 801057c:	4a40      	ldr	r2, [pc, #256]	@ (8010680 <tcp_slowtmr+0x594>)
 801057e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8010580:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010584:	2b00      	cmp	r3, #0
 8010586:	d013      	beq.n	80105b0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801058a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801058c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801058e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8010590:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8010592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010594:	3304      	adds	r3, #4
 8010596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010598:	8ad2      	ldrh	r2, [r2, #22]
 801059a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801059c:	8b09      	ldrh	r1, [r1, #24]
 801059e:	9102      	str	r1, [sp, #8]
 80105a0:	9201      	str	r2, [sp, #4]
 80105a2:	9300      	str	r3, [sp, #0]
 80105a4:	462b      	mov	r3, r5
 80105a6:	4622      	mov	r2, r4
 80105a8:	4601      	mov	r1, r0
 80105aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80105ac:	f004 feaa 	bl	8015304 <tcp_rst>
      err_arg = pcb->callback_arg;
 80105b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105b2:	691b      	ldr	r3, [r3, #16]
 80105b4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80105b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105b8:	7d1b      	ldrb	r3, [r3, #20]
 80105ba:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80105bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105be:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80105c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105c2:	68db      	ldr	r3, [r3, #12]
 80105c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80105c6:	6838      	ldr	r0, [r7, #0]
 80105c8:	f7ff f89e 	bl	800f708 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80105cc:	4b31      	ldr	r3, [pc, #196]	@ (8010694 <tcp_slowtmr+0x5a8>)
 80105ce:	2200      	movs	r2, #0
 80105d0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d004      	beq.n	80105e2 <tcp_slowtmr+0x4f6>
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	f06f 010c 	mvn.w	r1, #12
 80105de:	68b8      	ldr	r0, [r7, #8]
 80105e0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80105e2:	4b2c      	ldr	r3, [pc, #176]	@ (8010694 <tcp_slowtmr+0x5a8>)
 80105e4:	781b      	ldrb	r3, [r3, #0]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d037      	beq.n	801065a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80105ea:	e592      	b.n	8010112 <tcp_slowtmr+0x26>
      prev = pcb;
 80105ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80105f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105f2:	68db      	ldr	r3, [r3, #12]
 80105f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80105f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105f8:	7f1b      	ldrb	r3, [r3, #28]
 80105fa:	3301      	adds	r3, #1
 80105fc:	b2da      	uxtb	r2, r3
 80105fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010600:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8010602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010604:	7f1a      	ldrb	r2, [r3, #28]
 8010606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010608:	7f5b      	ldrb	r3, [r3, #29]
 801060a:	429a      	cmp	r2, r3
 801060c:	d325      	bcc.n	801065a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801060e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010610:	2200      	movs	r2, #0
 8010612:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8010614:	4b1f      	ldr	r3, [pc, #124]	@ (8010694 <tcp_slowtmr+0x5a8>)
 8010616:	2200      	movs	r2, #0
 8010618:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801061a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801061c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010620:	2b00      	cmp	r3, #0
 8010622:	d00b      	beq.n	801063c <tcp_slowtmr+0x550>
 8010624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010626:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801062a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801062c:	6912      	ldr	r2, [r2, #16]
 801062e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010630:	4610      	mov	r0, r2
 8010632:	4798      	blx	r3
 8010634:	4603      	mov	r3, r0
 8010636:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801063a:	e002      	b.n	8010642 <tcp_slowtmr+0x556>
 801063c:	2300      	movs	r3, #0
 801063e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8010642:	4b14      	ldr	r3, [pc, #80]	@ (8010694 <tcp_slowtmr+0x5a8>)
 8010644:	781b      	ldrb	r3, [r3, #0]
 8010646:	2b00      	cmp	r3, #0
 8010648:	f47f ad62 	bne.w	8010110 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801064c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8010650:	2b00      	cmp	r3, #0
 8010652:	d102      	bne.n	801065a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8010654:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010656:	f004 f8a1 	bl	801479c <tcp_output>
  while (pcb != NULL) {
 801065a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801065c:	2b00      	cmp	r3, #0
 801065e:	f47f ad5e 	bne.w	801011e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010662:	2300      	movs	r3, #0
 8010664:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8010666:	4b0c      	ldr	r3, [pc, #48]	@ (8010698 <tcp_slowtmr+0x5ac>)
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801066c:	e069      	b.n	8010742 <tcp_slowtmr+0x656>
 801066e:	bf00      	nop
 8010670:	20010304 	.word	0x20010304
 8010674:	000a4cb8 	.word	0x000a4cb8
 8010678:	10624dd3 	.word	0x10624dd3
 801067c:	000124f8 	.word	0x000124f8
 8010680:	20010310 	.word	0x20010310
 8010684:	0802ad34 	.word	0x0802ad34
 8010688:	0802b16c 	.word	0x0802b16c
 801068c:	0802ad78 	.word	0x0802ad78
 8010690:	0802b198 	.word	0x0802b198
 8010694:	20010318 	.word	0x20010318
 8010698:	20010314 	.word	0x20010314
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801069c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801069e:	7d1b      	ldrb	r3, [r3, #20]
 80106a0:	2b0a      	cmp	r3, #10
 80106a2:	d006      	beq.n	80106b2 <tcp_slowtmr+0x5c6>
 80106a4:	4b2b      	ldr	r3, [pc, #172]	@ (8010754 <tcp_slowtmr+0x668>)
 80106a6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80106aa:	492b      	ldr	r1, [pc, #172]	@ (8010758 <tcp_slowtmr+0x66c>)
 80106ac:	482b      	ldr	r0, [pc, #172]	@ (801075c <tcp_slowtmr+0x670>)
 80106ae:	f017 fc41 	bl	8027f34 <iprintf>
    pcb_remove = 0;
 80106b2:	2300      	movs	r3, #0
 80106b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80106b8:	4b29      	ldr	r3, [pc, #164]	@ (8010760 <tcp_slowtmr+0x674>)
 80106ba:	681a      	ldr	r2, [r3, #0]
 80106bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106be:	6a1b      	ldr	r3, [r3, #32]
 80106c0:	1ad3      	subs	r3, r2, r3
 80106c2:	2bf0      	cmp	r3, #240	@ 0xf0
 80106c4:	d904      	bls.n	80106d0 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80106c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80106ca:	3301      	adds	r3, #1
 80106cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80106d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d02f      	beq.n	8010738 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80106d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80106da:	f000 fbf9 	bl	8010ed0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80106de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d010      	beq.n	8010706 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80106e4:	4b1f      	ldr	r3, [pc, #124]	@ (8010764 <tcp_slowtmr+0x678>)
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80106ea:	429a      	cmp	r2, r3
 80106ec:	d106      	bne.n	80106fc <tcp_slowtmr+0x610>
 80106ee:	4b19      	ldr	r3, [pc, #100]	@ (8010754 <tcp_slowtmr+0x668>)
 80106f0:	f240 52af 	movw	r2, #1455	@ 0x5af
 80106f4:	491c      	ldr	r1, [pc, #112]	@ (8010768 <tcp_slowtmr+0x67c>)
 80106f6:	4819      	ldr	r0, [pc, #100]	@ (801075c <tcp_slowtmr+0x670>)
 80106f8:	f017 fc1c 	bl	8027f34 <iprintf>
        prev->next = pcb->next;
 80106fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106fe:	68da      	ldr	r2, [r3, #12]
 8010700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010702:	60da      	str	r2, [r3, #12]
 8010704:	e00f      	b.n	8010726 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8010706:	4b17      	ldr	r3, [pc, #92]	@ (8010764 <tcp_slowtmr+0x678>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801070c:	429a      	cmp	r2, r3
 801070e:	d006      	beq.n	801071e <tcp_slowtmr+0x632>
 8010710:	4b10      	ldr	r3, [pc, #64]	@ (8010754 <tcp_slowtmr+0x668>)
 8010712:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8010716:	4915      	ldr	r1, [pc, #84]	@ (801076c <tcp_slowtmr+0x680>)
 8010718:	4810      	ldr	r0, [pc, #64]	@ (801075c <tcp_slowtmr+0x670>)
 801071a:	f017 fc0b 	bl	8027f34 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801071e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010720:	68db      	ldr	r3, [r3, #12]
 8010722:	4a10      	ldr	r2, [pc, #64]	@ (8010764 <tcp_slowtmr+0x678>)
 8010724:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010728:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801072a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801072c:	68db      	ldr	r3, [r3, #12]
 801072e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8010730:	69f8      	ldr	r0, [r7, #28]
 8010732:	f7fe ffe9 	bl	800f708 <tcp_free>
 8010736:	e004      	b.n	8010742 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8010738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801073a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801073c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801073e:	68db      	ldr	r3, [r3, #12]
 8010740:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8010742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010744:	2b00      	cmp	r3, #0
 8010746:	d1a9      	bne.n	801069c <tcp_slowtmr+0x5b0>
    }
  }
}
 8010748:	bf00      	nop
 801074a:	bf00      	nop
 801074c:	3730      	adds	r7, #48	@ 0x30
 801074e:	46bd      	mov	sp, r7
 8010750:	bdb0      	pop	{r4, r5, r7, pc}
 8010752:	bf00      	nop
 8010754:	0802ad34 	.word	0x0802ad34
 8010758:	0802b1c4 	.word	0x0802b1c4
 801075c:	0802ad78 	.word	0x0802ad78
 8010760:	20010304 	.word	0x20010304
 8010764:	20010314 	.word	0x20010314
 8010768:	0802b1f4 	.word	0x0802b1f4
 801076c:	0802b21c 	.word	0x0802b21c

08010770 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b082      	sub	sp, #8
 8010774:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8010776:	4b2d      	ldr	r3, [pc, #180]	@ (801082c <tcp_fasttmr+0xbc>)
 8010778:	781b      	ldrb	r3, [r3, #0]
 801077a:	3301      	adds	r3, #1
 801077c:	b2da      	uxtb	r2, r3
 801077e:	4b2b      	ldr	r3, [pc, #172]	@ (801082c <tcp_fasttmr+0xbc>)
 8010780:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010782:	4b2b      	ldr	r3, [pc, #172]	@ (8010830 <tcp_fasttmr+0xc0>)
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010788:	e048      	b.n	801081c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	7f9a      	ldrb	r2, [r3, #30]
 801078e:	4b27      	ldr	r3, [pc, #156]	@ (801082c <tcp_fasttmr+0xbc>)
 8010790:	781b      	ldrb	r3, [r3, #0]
 8010792:	429a      	cmp	r2, r3
 8010794:	d03f      	beq.n	8010816 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8010796:	4b25      	ldr	r3, [pc, #148]	@ (801082c <tcp_fasttmr+0xbc>)
 8010798:	781a      	ldrb	r2, [r3, #0]
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	8b5b      	ldrh	r3, [r3, #26]
 80107a2:	f003 0301 	and.w	r3, r3, #1
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d010      	beq.n	80107cc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	8b5b      	ldrh	r3, [r3, #26]
 80107ae:	f043 0302 	orr.w	r3, r3, #2
 80107b2:	b29a      	uxth	r2, r3
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80107b8:	6878      	ldr	r0, [r7, #4]
 80107ba:	f003 ffef 	bl	801479c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	8b5b      	ldrh	r3, [r3, #26]
 80107c2:	f023 0303 	bic.w	r3, r3, #3
 80107c6:	b29a      	uxth	r2, r3
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	8b5b      	ldrh	r3, [r3, #26]
 80107d0:	f003 0308 	and.w	r3, r3, #8
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d009      	beq.n	80107ec <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	8b5b      	ldrh	r3, [r3, #26]
 80107dc:	f023 0308 	bic.w	r3, r3, #8
 80107e0:	b29a      	uxth	r2, r3
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f7ff f922 	bl	800fa30 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	68db      	ldr	r3, [r3, #12]
 80107f0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d00a      	beq.n	8010810 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80107fa:	4b0e      	ldr	r3, [pc, #56]	@ (8010834 <tcp_fasttmr+0xc4>)
 80107fc:	2200      	movs	r2, #0
 80107fe:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f000 f819 	bl	8010838 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8010806:	4b0b      	ldr	r3, [pc, #44]	@ (8010834 <tcp_fasttmr+0xc4>)
 8010808:	781b      	ldrb	r3, [r3, #0]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d000      	beq.n	8010810 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801080e:	e7b8      	b.n	8010782 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	607b      	str	r3, [r7, #4]
 8010814:	e002      	b.n	801081c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	68db      	ldr	r3, [r3, #12]
 801081a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d1b3      	bne.n	801078a <tcp_fasttmr+0x1a>
    }
  }
}
 8010822:	bf00      	nop
 8010824:	bf00      	nop
 8010826:	3708      	adds	r7, #8
 8010828:	46bd      	mov	sp, r7
 801082a:	bd80      	pop	{r7, pc}
 801082c:	2001031a 	.word	0x2001031a
 8010830:	20010310 	.word	0x20010310
 8010834:	20010318 	.word	0x20010318

08010838 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010838:	b590      	push	{r4, r7, lr}
 801083a:	b085      	sub	sp, #20
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d109      	bne.n	801085a <tcp_process_refused_data+0x22>
 8010846:	4b37      	ldr	r3, [pc, #220]	@ (8010924 <tcp_process_refused_data+0xec>)
 8010848:	f240 6209 	movw	r2, #1545	@ 0x609
 801084c:	4936      	ldr	r1, [pc, #216]	@ (8010928 <tcp_process_refused_data+0xf0>)
 801084e:	4837      	ldr	r0, [pc, #220]	@ (801092c <tcp_process_refused_data+0xf4>)
 8010850:	f017 fb70 	bl	8027f34 <iprintf>
 8010854:	f06f 030f 	mvn.w	r3, #15
 8010858:	e060      	b.n	801091c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801085e:	7b5b      	ldrb	r3, [r3, #13]
 8010860:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010866:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	2200      	movs	r2, #0
 801086c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010874:	2b00      	cmp	r3, #0
 8010876:	d00b      	beq.n	8010890 <tcp_process_refused_data+0x58>
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	6918      	ldr	r0, [r3, #16]
 8010882:	2300      	movs	r3, #0
 8010884:	68ba      	ldr	r2, [r7, #8]
 8010886:	6879      	ldr	r1, [r7, #4]
 8010888:	47a0      	blx	r4
 801088a:	4603      	mov	r3, r0
 801088c:	73fb      	strb	r3, [r7, #15]
 801088e:	e007      	b.n	80108a0 <tcp_process_refused_data+0x68>
 8010890:	2300      	movs	r3, #0
 8010892:	68ba      	ldr	r2, [r7, #8]
 8010894:	6879      	ldr	r1, [r7, #4]
 8010896:	2000      	movs	r0, #0
 8010898:	f000 f8a4 	bl	80109e4 <tcp_recv_null>
 801089c:	4603      	mov	r3, r0
 801089e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80108a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d12a      	bne.n	80108fe <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80108a8:	7bbb      	ldrb	r3, [r7, #14]
 80108aa:	f003 0320 	and.w	r3, r3, #32
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d033      	beq.n	801091a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80108b6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80108ba:	d005      	beq.n	80108c8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80108c0:	3301      	adds	r3, #1
 80108c2:	b29a      	uxth	r2, r3
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d00b      	beq.n	80108ea <tcp_process_refused_data+0xb2>
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	6918      	ldr	r0, [r3, #16]
 80108dc:	2300      	movs	r3, #0
 80108de:	2200      	movs	r2, #0
 80108e0:	6879      	ldr	r1, [r7, #4]
 80108e2:	47a0      	blx	r4
 80108e4:	4603      	mov	r3, r0
 80108e6:	73fb      	strb	r3, [r7, #15]
 80108e8:	e001      	b.n	80108ee <tcp_process_refused_data+0xb6>
 80108ea:	2300      	movs	r3, #0
 80108ec:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80108ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80108f2:	f113 0f0d 	cmn.w	r3, #13
 80108f6:	d110      	bne.n	801091a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80108f8:	f06f 030c 	mvn.w	r3, #12
 80108fc:	e00e      	b.n	801091c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80108fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010902:	f113 0f0d 	cmn.w	r3, #13
 8010906:	d102      	bne.n	801090e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010908:	f06f 030c 	mvn.w	r3, #12
 801090c:	e006      	b.n	801091c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	68ba      	ldr	r2, [r7, #8]
 8010912:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8010914:	f06f 0304 	mvn.w	r3, #4
 8010918:	e000      	b.n	801091c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801091a:	2300      	movs	r3, #0
}
 801091c:	4618      	mov	r0, r3
 801091e:	3714      	adds	r7, #20
 8010920:	46bd      	mov	sp, r7
 8010922:	bd90      	pop	{r4, r7, pc}
 8010924:	0802ad34 	.word	0x0802ad34
 8010928:	0802b244 	.word	0x0802b244
 801092c:	0802ad78 	.word	0x0802ad78

08010930 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b084      	sub	sp, #16
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010938:	e007      	b.n	801094a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010940:	6878      	ldr	r0, [r7, #4]
 8010942:	f000 f80a 	bl	801095a <tcp_seg_free>
    seg = next;
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d1f4      	bne.n	801093a <tcp_segs_free+0xa>
  }
}
 8010950:	bf00      	nop
 8010952:	bf00      	nop
 8010954:	3710      	adds	r7, #16
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}

0801095a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801095a:	b580      	push	{r7, lr}
 801095c:	b082      	sub	sp, #8
 801095e:	af00      	add	r7, sp, #0
 8010960:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d00c      	beq.n	8010982 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	685b      	ldr	r3, [r3, #4]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d004      	beq.n	801097a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	685b      	ldr	r3, [r3, #4]
 8010974:	4618      	mov	r0, r3
 8010976:	f7fe fc0b 	bl	800f190 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801097a:	6879      	ldr	r1, [r7, #4]
 801097c:	2003      	movs	r0, #3
 801097e:	f7fd fcf9 	bl	800e374 <memp_free>
  }
}
 8010982:	bf00      	nop
 8010984:	3708      	adds	r7, #8
 8010986:	46bd      	mov	sp, r7
 8010988:	bd80      	pop	{r7, pc}
	...

0801098c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b084      	sub	sp, #16
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d106      	bne.n	80109a8 <tcp_seg_copy+0x1c>
 801099a:	4b0f      	ldr	r3, [pc, #60]	@ (80109d8 <tcp_seg_copy+0x4c>)
 801099c:	f240 6282 	movw	r2, #1666	@ 0x682
 80109a0:	490e      	ldr	r1, [pc, #56]	@ (80109dc <tcp_seg_copy+0x50>)
 80109a2:	480f      	ldr	r0, [pc, #60]	@ (80109e0 <tcp_seg_copy+0x54>)
 80109a4:	f017 fac6 	bl	8027f34 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80109a8:	2003      	movs	r0, #3
 80109aa:	f7fd fc6d 	bl	800e288 <memp_malloc>
 80109ae:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d101      	bne.n	80109ba <tcp_seg_copy+0x2e>
    return NULL;
 80109b6:	2300      	movs	r3, #0
 80109b8:	e00a      	b.n	80109d0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80109ba:	2210      	movs	r2, #16
 80109bc:	6879      	ldr	r1, [r7, #4]
 80109be:	68f8      	ldr	r0, [r7, #12]
 80109c0:	f017 fd65 	bl	802848e <memcpy>
  pbuf_ref(cseg->p);
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	685b      	ldr	r3, [r3, #4]
 80109c8:	4618      	mov	r0, r3
 80109ca:	f7fe fc87 	bl	800f2dc <pbuf_ref>
  return cseg;
 80109ce:	68fb      	ldr	r3, [r7, #12]
}
 80109d0:	4618      	mov	r0, r3
 80109d2:	3710      	adds	r7, #16
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}
 80109d8:	0802ad34 	.word	0x0802ad34
 80109dc:	0802b288 	.word	0x0802b288
 80109e0:	0802ad78 	.word	0x0802ad78

080109e4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b084      	sub	sp, #16
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	60f8      	str	r0, [r7, #12]
 80109ec:	60b9      	str	r1, [r7, #8]
 80109ee:	607a      	str	r2, [r7, #4]
 80109f0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80109f2:	68bb      	ldr	r3, [r7, #8]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d109      	bne.n	8010a0c <tcp_recv_null+0x28>
 80109f8:	4b12      	ldr	r3, [pc, #72]	@ (8010a44 <tcp_recv_null+0x60>)
 80109fa:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80109fe:	4912      	ldr	r1, [pc, #72]	@ (8010a48 <tcp_recv_null+0x64>)
 8010a00:	4812      	ldr	r0, [pc, #72]	@ (8010a4c <tcp_recv_null+0x68>)
 8010a02:	f017 fa97 	bl	8027f34 <iprintf>
 8010a06:	f06f 030f 	mvn.w	r3, #15
 8010a0a:	e016      	b.n	8010a3a <tcp_recv_null+0x56>

  if (p != NULL) {
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d009      	beq.n	8010a26 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	891b      	ldrh	r3, [r3, #8]
 8010a16:	4619      	mov	r1, r3
 8010a18:	68b8      	ldr	r0, [r7, #8]
 8010a1a:	f7ff fad1 	bl	800ffc0 <tcp_recved>
    pbuf_free(p);
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f7fe fbb6 	bl	800f190 <pbuf_free>
 8010a24:	e008      	b.n	8010a38 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010a26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d104      	bne.n	8010a38 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010a2e:	68b8      	ldr	r0, [r7, #8]
 8010a30:	f7ff f868 	bl	800fb04 <tcp_close>
 8010a34:	4603      	mov	r3, r0
 8010a36:	e000      	b.n	8010a3a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010a38:	2300      	movs	r3, #0
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	3710      	adds	r7, #16
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}
 8010a42:	bf00      	nop
 8010a44:	0802ad34 	.word	0x0802ad34
 8010a48:	0802b2a4 	.word	0x0802b2a4
 8010a4c:	0802ad78 	.word	0x0802ad78

08010a50 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b086      	sub	sp, #24
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	4603      	mov	r3, r0
 8010a58:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	db01      	blt.n	8010a66 <tcp_kill_prio+0x16>
 8010a62:	79fb      	ldrb	r3, [r7, #7]
 8010a64:	e000      	b.n	8010a68 <tcp_kill_prio+0x18>
 8010a66:	237f      	movs	r3, #127	@ 0x7f
 8010a68:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8010a6a:	7afb      	ldrb	r3, [r7, #11]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d034      	beq.n	8010ada <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010a70:	7afb      	ldrb	r3, [r7, #11]
 8010a72:	3b01      	subs	r3, #1
 8010a74:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8010a76:	2300      	movs	r3, #0
 8010a78:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010a7e:	4b19      	ldr	r3, [pc, #100]	@ (8010ae4 <tcp_kill_prio+0x94>)
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	617b      	str	r3, [r7, #20]
 8010a84:	e01f      	b.n	8010ac6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8010a86:	697b      	ldr	r3, [r7, #20]
 8010a88:	7d5b      	ldrb	r3, [r3, #21]
 8010a8a:	7afa      	ldrb	r2, [r7, #11]
 8010a8c:	429a      	cmp	r2, r3
 8010a8e:	d80c      	bhi.n	8010aaa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010a90:	697b      	ldr	r3, [r7, #20]
 8010a92:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010a94:	7afa      	ldrb	r2, [r7, #11]
 8010a96:	429a      	cmp	r2, r3
 8010a98:	d112      	bne.n	8010ac0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010a9a:	4b13      	ldr	r3, [pc, #76]	@ (8010ae8 <tcp_kill_prio+0x98>)
 8010a9c:	681a      	ldr	r2, [r3, #0]
 8010a9e:	697b      	ldr	r3, [r7, #20]
 8010aa0:	6a1b      	ldr	r3, [r3, #32]
 8010aa2:	1ad3      	subs	r3, r2, r3
 8010aa4:	68fa      	ldr	r2, [r7, #12]
 8010aa6:	429a      	cmp	r2, r3
 8010aa8:	d80a      	bhi.n	8010ac0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8010ae8 <tcp_kill_prio+0x98>)
 8010aac:	681a      	ldr	r2, [r3, #0]
 8010aae:	697b      	ldr	r3, [r7, #20]
 8010ab0:	6a1b      	ldr	r3, [r3, #32]
 8010ab2:	1ad3      	subs	r3, r2, r3
 8010ab4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8010ab6:	697b      	ldr	r3, [r7, #20]
 8010ab8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010aba:	697b      	ldr	r3, [r7, #20]
 8010abc:	7d5b      	ldrb	r3, [r3, #21]
 8010abe:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	68db      	ldr	r3, [r3, #12]
 8010ac4:	617b      	str	r3, [r7, #20]
 8010ac6:	697b      	ldr	r3, [r7, #20]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d1dc      	bne.n	8010a86 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010acc:	693b      	ldr	r3, [r7, #16]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d004      	beq.n	8010adc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010ad2:	6938      	ldr	r0, [r7, #16]
 8010ad4:	f7ff f95c 	bl	800fd90 <tcp_abort>
 8010ad8:	e000      	b.n	8010adc <tcp_kill_prio+0x8c>
    return;
 8010ada:	bf00      	nop
  }
}
 8010adc:	3718      	adds	r7, #24
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}
 8010ae2:	bf00      	nop
 8010ae4:	20010310 	.word	0x20010310
 8010ae8:	20010304 	.word	0x20010304

08010aec <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b086      	sub	sp, #24
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	4603      	mov	r3, r0
 8010af4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010af6:	79fb      	ldrb	r3, [r7, #7]
 8010af8:	2b08      	cmp	r3, #8
 8010afa:	d009      	beq.n	8010b10 <tcp_kill_state+0x24>
 8010afc:	79fb      	ldrb	r3, [r7, #7]
 8010afe:	2b09      	cmp	r3, #9
 8010b00:	d006      	beq.n	8010b10 <tcp_kill_state+0x24>
 8010b02:	4b1a      	ldr	r3, [pc, #104]	@ (8010b6c <tcp_kill_state+0x80>)
 8010b04:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8010b08:	4919      	ldr	r1, [pc, #100]	@ (8010b70 <tcp_kill_state+0x84>)
 8010b0a:	481a      	ldr	r0, [pc, #104]	@ (8010b74 <tcp_kill_state+0x88>)
 8010b0c:	f017 fa12 	bl	8027f34 <iprintf>

  inactivity = 0;
 8010b10:	2300      	movs	r3, #0
 8010b12:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010b14:	2300      	movs	r3, #0
 8010b16:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b18:	4b17      	ldr	r3, [pc, #92]	@ (8010b78 <tcp_kill_state+0x8c>)
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	617b      	str	r3, [r7, #20]
 8010b1e:	e017      	b.n	8010b50 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010b20:	697b      	ldr	r3, [r7, #20]
 8010b22:	7d1b      	ldrb	r3, [r3, #20]
 8010b24:	79fa      	ldrb	r2, [r7, #7]
 8010b26:	429a      	cmp	r2, r3
 8010b28:	d10f      	bne.n	8010b4a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010b2a:	4b14      	ldr	r3, [pc, #80]	@ (8010b7c <tcp_kill_state+0x90>)
 8010b2c:	681a      	ldr	r2, [r3, #0]
 8010b2e:	697b      	ldr	r3, [r7, #20]
 8010b30:	6a1b      	ldr	r3, [r3, #32]
 8010b32:	1ad3      	subs	r3, r2, r3
 8010b34:	68fa      	ldr	r2, [r7, #12]
 8010b36:	429a      	cmp	r2, r3
 8010b38:	d807      	bhi.n	8010b4a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010b3a:	4b10      	ldr	r3, [pc, #64]	@ (8010b7c <tcp_kill_state+0x90>)
 8010b3c:	681a      	ldr	r2, [r3, #0]
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	6a1b      	ldr	r3, [r3, #32]
 8010b42:	1ad3      	subs	r3, r2, r3
 8010b44:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010b46:	697b      	ldr	r3, [r7, #20]
 8010b48:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b4a:	697b      	ldr	r3, [r7, #20]
 8010b4c:	68db      	ldr	r3, [r3, #12]
 8010b4e:	617b      	str	r3, [r7, #20]
 8010b50:	697b      	ldr	r3, [r7, #20]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d1e4      	bne.n	8010b20 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010b56:	693b      	ldr	r3, [r7, #16]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d003      	beq.n	8010b64 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010b5c:	2100      	movs	r1, #0
 8010b5e:	6938      	ldr	r0, [r7, #16]
 8010b60:	f7ff f858 	bl	800fc14 <tcp_abandon>
  }
}
 8010b64:	bf00      	nop
 8010b66:	3718      	adds	r7, #24
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}
 8010b6c:	0802ad34 	.word	0x0802ad34
 8010b70:	0802b2c0 	.word	0x0802b2c0
 8010b74:	0802ad78 	.word	0x0802ad78
 8010b78:	20010310 	.word	0x20010310
 8010b7c:	20010304 	.word	0x20010304

08010b80 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b084      	sub	sp, #16
 8010b84:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8010b86:	2300      	movs	r3, #0
 8010b88:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b8e:	4b12      	ldr	r3, [pc, #72]	@ (8010bd8 <tcp_kill_timewait+0x58>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	60fb      	str	r3, [r7, #12]
 8010b94:	e012      	b.n	8010bbc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010b96:	4b11      	ldr	r3, [pc, #68]	@ (8010bdc <tcp_kill_timewait+0x5c>)
 8010b98:	681a      	ldr	r2, [r3, #0]
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	6a1b      	ldr	r3, [r3, #32]
 8010b9e:	1ad3      	subs	r3, r2, r3
 8010ba0:	687a      	ldr	r2, [r7, #4]
 8010ba2:	429a      	cmp	r2, r3
 8010ba4:	d807      	bhi.n	8010bb6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8010bdc <tcp_kill_timewait+0x5c>)
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	6a1b      	ldr	r3, [r3, #32]
 8010bae:	1ad3      	subs	r3, r2, r3
 8010bb0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	68db      	ldr	r3, [r3, #12]
 8010bba:	60fb      	str	r3, [r7, #12]
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d1e9      	bne.n	8010b96 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010bc2:	68bb      	ldr	r3, [r7, #8]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d002      	beq.n	8010bce <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010bc8:	68b8      	ldr	r0, [r7, #8]
 8010bca:	f7ff f8e1 	bl	800fd90 <tcp_abort>
  }
}
 8010bce:	bf00      	nop
 8010bd0:	3710      	adds	r7, #16
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd80      	pop	{r7, pc}
 8010bd6:	bf00      	nop
 8010bd8:	20010314 	.word	0x20010314
 8010bdc:	20010304 	.word	0x20010304

08010be0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b082      	sub	sp, #8
 8010be4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010be6:	4b10      	ldr	r3, [pc, #64]	@ (8010c28 <tcp_handle_closepend+0x48>)
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010bec:	e014      	b.n	8010c18 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	68db      	ldr	r3, [r3, #12]
 8010bf2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	8b5b      	ldrh	r3, [r3, #26]
 8010bf8:	f003 0308 	and.w	r3, r3, #8
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d009      	beq.n	8010c14 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	8b5b      	ldrh	r3, [r3, #26]
 8010c04:	f023 0308 	bic.w	r3, r3, #8
 8010c08:	b29a      	uxth	r2, r3
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010c0e:	6878      	ldr	r0, [r7, #4]
 8010c10:	f7fe ff0e 	bl	800fa30 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d1e7      	bne.n	8010bee <tcp_handle_closepend+0xe>
  }
}
 8010c1e:	bf00      	nop
 8010c20:	bf00      	nop
 8010c22:	3708      	adds	r7, #8
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}
 8010c28:	20010310 	.word	0x20010310

08010c2c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b084      	sub	sp, #16
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	4603      	mov	r3, r0
 8010c34:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010c36:	2001      	movs	r0, #1
 8010c38:	f7fd fb26 	bl	800e288 <memp_malloc>
 8010c3c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d126      	bne.n	8010c92 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010c44:	f7ff ffcc 	bl	8010be0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010c48:	f7ff ff9a 	bl	8010b80 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010c4c:	2001      	movs	r0, #1
 8010c4e:	f7fd fb1b 	bl	800e288 <memp_malloc>
 8010c52:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d11b      	bne.n	8010c92 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010c5a:	2009      	movs	r0, #9
 8010c5c:	f7ff ff46 	bl	8010aec <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010c60:	2001      	movs	r0, #1
 8010c62:	f7fd fb11 	bl	800e288 <memp_malloc>
 8010c66:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d111      	bne.n	8010c92 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010c6e:	2008      	movs	r0, #8
 8010c70:	f7ff ff3c 	bl	8010aec <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010c74:	2001      	movs	r0, #1
 8010c76:	f7fd fb07 	bl	800e288 <memp_malloc>
 8010c7a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d107      	bne.n	8010c92 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010c82:	79fb      	ldrb	r3, [r7, #7]
 8010c84:	4618      	mov	r0, r3
 8010c86:	f7ff fee3 	bl	8010a50 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010c8a:	2001      	movs	r0, #1
 8010c8c:	f7fd fafc 	bl	800e288 <memp_malloc>
 8010c90:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d03f      	beq.n	8010d18 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010c98:	229c      	movs	r2, #156	@ 0x9c
 8010c9a:	2100      	movs	r1, #0
 8010c9c:	68f8      	ldr	r0, [r7, #12]
 8010c9e:	f017 facf 	bl	8028240 <memset>
    pcb->prio = prio;
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	79fa      	ldrb	r2, [r7, #7]
 8010ca6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8010cae:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8010cb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	22ff      	movs	r2, #255	@ 0xff
 8010cc6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8010cce:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	2206      	movs	r2, #6
 8010cd4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	2206      	movs	r2, #6
 8010cdc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010ce4:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	2201      	movs	r2, #1
 8010cea:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8010cee:	4b0d      	ldr	r3, [pc, #52]	@ (8010d24 <tcp_alloc+0xf8>)
 8010cf0:	681a      	ldr	r2, [r3, #0]
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8010d28 <tcp_alloc+0xfc>)
 8010cf8:	781a      	ldrb	r2, [r3, #0]
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8010d04:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	4a08      	ldr	r2, [pc, #32]	@ (8010d2c <tcp_alloc+0x100>)
 8010d0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	4a07      	ldr	r2, [pc, #28]	@ (8010d30 <tcp_alloc+0x104>)
 8010d14:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010d18:	68fb      	ldr	r3, [r7, #12]
}
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	3710      	adds	r7, #16
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	bd80      	pop	{r7, pc}
 8010d22:	bf00      	nop
 8010d24:	20010304 	.word	0x20010304
 8010d28:	2001031a 	.word	0x2001031a
 8010d2c:	080109e5 	.word	0x080109e5
 8010d30:	006ddd00 	.word	0x006ddd00

08010d34 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b084      	sub	sp, #16
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8010d3e:	2040      	movs	r0, #64	@ 0x40
 8010d40:	f7ff ff74 	bl	8010c2c <tcp_alloc>
 8010d44:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8010d46:	68fb      	ldr	r3, [r7, #12]
}
 8010d48:	4618      	mov	r0, r3
 8010d4a:	3710      	adds	r7, #16
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd80      	pop	{r7, pc}

08010d50 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8010d50:	b480      	push	{r7}
 8010d52:	b083      	sub	sp, #12
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
 8010d58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d002      	beq.n	8010d66 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	683a      	ldr	r2, [r7, #0]
 8010d64:	611a      	str	r2, [r3, #16]
  }
}
 8010d66:	bf00      	nop
 8010d68:	370c      	adds	r7, #12
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d70:	4770      	bx	lr
	...

08010d74 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b082      	sub	sp, #8
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
 8010d7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d00e      	beq.n	8010da2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	7d1b      	ldrb	r3, [r3, #20]
 8010d88:	2b01      	cmp	r3, #1
 8010d8a:	d106      	bne.n	8010d9a <tcp_recv+0x26>
 8010d8c:	4b07      	ldr	r3, [pc, #28]	@ (8010dac <tcp_recv+0x38>)
 8010d8e:	f240 72df 	movw	r2, #2015	@ 0x7df
 8010d92:	4907      	ldr	r1, [pc, #28]	@ (8010db0 <tcp_recv+0x3c>)
 8010d94:	4807      	ldr	r0, [pc, #28]	@ (8010db4 <tcp_recv+0x40>)
 8010d96:	f017 f8cd 	bl	8027f34 <iprintf>
    pcb->recv = recv;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	683a      	ldr	r2, [r7, #0]
 8010d9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8010da2:	bf00      	nop
 8010da4:	3708      	adds	r7, #8
 8010da6:	46bd      	mov	sp, r7
 8010da8:	bd80      	pop	{r7, pc}
 8010daa:	bf00      	nop
 8010dac:	0802ad34 	.word	0x0802ad34
 8010db0:	0802b2d0 	.word	0x0802b2d0
 8010db4:	0802ad78 	.word	0x0802ad78

08010db8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b082      	sub	sp, #8
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
 8010dc0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d00e      	beq.n	8010de6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	7d1b      	ldrb	r3, [r3, #20]
 8010dcc:	2b01      	cmp	r3, #1
 8010dce:	d106      	bne.n	8010dde <tcp_sent+0x26>
 8010dd0:	4b07      	ldr	r3, [pc, #28]	@ (8010df0 <tcp_sent+0x38>)
 8010dd2:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8010dd6:	4907      	ldr	r1, [pc, #28]	@ (8010df4 <tcp_sent+0x3c>)
 8010dd8:	4807      	ldr	r0, [pc, #28]	@ (8010df8 <tcp_sent+0x40>)
 8010dda:	f017 f8ab 	bl	8027f34 <iprintf>
    pcb->sent = sent;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	683a      	ldr	r2, [r7, #0]
 8010de2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8010de6:	bf00      	nop
 8010de8:	3708      	adds	r7, #8
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}
 8010dee:	bf00      	nop
 8010df0:	0802ad34 	.word	0x0802ad34
 8010df4:	0802b2f8 	.word	0x0802b2f8
 8010df8:	0802ad78 	.word	0x0802ad78

08010dfc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b082      	sub	sp, #8
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
 8010e04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d00e      	beq.n	8010e2a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	7d1b      	ldrb	r3, [r3, #20]
 8010e10:	2b01      	cmp	r3, #1
 8010e12:	d106      	bne.n	8010e22 <tcp_err+0x26>
 8010e14:	4b07      	ldr	r3, [pc, #28]	@ (8010e34 <tcp_err+0x38>)
 8010e16:	f640 020d 	movw	r2, #2061	@ 0x80d
 8010e1a:	4907      	ldr	r1, [pc, #28]	@ (8010e38 <tcp_err+0x3c>)
 8010e1c:	4807      	ldr	r0, [pc, #28]	@ (8010e3c <tcp_err+0x40>)
 8010e1e:	f017 f889 	bl	8027f34 <iprintf>
    pcb->errf = err;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	683a      	ldr	r2, [r7, #0]
 8010e26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8010e2a:	bf00      	nop
 8010e2c:	3708      	adds	r7, #8
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	bd80      	pop	{r7, pc}
 8010e32:	bf00      	nop
 8010e34:	0802ad34 	.word	0x0802ad34
 8010e38:	0802b320 	.word	0x0802b320
 8010e3c:	0802ad78 	.word	0x0802ad78

08010e40 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8010e40:	b480      	push	{r7}
 8010e42:	b085      	sub	sp, #20
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
 8010e48:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d008      	beq.n	8010e62 <tcp_accept+0x22>
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	7d1b      	ldrb	r3, [r3, #20]
 8010e54:	2b01      	cmp	r3, #1
 8010e56:	d104      	bne.n	8010e62 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	683a      	ldr	r2, [r7, #0]
 8010e60:	619a      	str	r2, [r3, #24]
  }
}
 8010e62:	bf00      	nop
 8010e64:	3714      	adds	r7, #20
 8010e66:	46bd      	mov	sp, r7
 8010e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6c:	4770      	bx	lr
	...

08010e70 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b084      	sub	sp, #16
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	60f8      	str	r0, [r7, #12]
 8010e78:	60b9      	str	r1, [r7, #8]
 8010e7a:	4613      	mov	r3, r2
 8010e7c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d107      	bne.n	8010e94 <tcp_poll+0x24>
 8010e84:	4b0e      	ldr	r3, [pc, #56]	@ (8010ec0 <tcp_poll+0x50>)
 8010e86:	f640 023d 	movw	r2, #2109	@ 0x83d
 8010e8a:	490e      	ldr	r1, [pc, #56]	@ (8010ec4 <tcp_poll+0x54>)
 8010e8c:	480e      	ldr	r0, [pc, #56]	@ (8010ec8 <tcp_poll+0x58>)
 8010e8e:	f017 f851 	bl	8027f34 <iprintf>
 8010e92:	e011      	b.n	8010eb8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	7d1b      	ldrb	r3, [r3, #20]
 8010e98:	2b01      	cmp	r3, #1
 8010e9a:	d106      	bne.n	8010eaa <tcp_poll+0x3a>
 8010e9c:	4b08      	ldr	r3, [pc, #32]	@ (8010ec0 <tcp_poll+0x50>)
 8010e9e:	f640 023e 	movw	r2, #2110	@ 0x83e
 8010ea2:	490a      	ldr	r1, [pc, #40]	@ (8010ecc <tcp_poll+0x5c>)
 8010ea4:	4808      	ldr	r0, [pc, #32]	@ (8010ec8 <tcp_poll+0x58>)
 8010ea6:	f017 f845 	bl	8027f34 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	68ba      	ldr	r2, [r7, #8]
 8010eae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	79fa      	ldrb	r2, [r7, #7]
 8010eb6:	775a      	strb	r2, [r3, #29]
}
 8010eb8:	3710      	adds	r7, #16
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bd80      	pop	{r7, pc}
 8010ebe:	bf00      	nop
 8010ec0:	0802ad34 	.word	0x0802ad34
 8010ec4:	0802b348 	.word	0x0802b348
 8010ec8:	0802ad78 	.word	0x0802ad78
 8010ecc:	0802b360 	.word	0x0802b360

08010ed0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b082      	sub	sp, #8
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d107      	bne.n	8010eee <tcp_pcb_purge+0x1e>
 8010ede:	4b21      	ldr	r3, [pc, #132]	@ (8010f64 <tcp_pcb_purge+0x94>)
 8010ee0:	f640 0251 	movw	r2, #2129	@ 0x851
 8010ee4:	4920      	ldr	r1, [pc, #128]	@ (8010f68 <tcp_pcb_purge+0x98>)
 8010ee6:	4821      	ldr	r0, [pc, #132]	@ (8010f6c <tcp_pcb_purge+0x9c>)
 8010ee8:	f017 f824 	bl	8027f34 <iprintf>
 8010eec:	e037      	b.n	8010f5e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	7d1b      	ldrb	r3, [r3, #20]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d033      	beq.n	8010f5e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010efa:	2b0a      	cmp	r3, #10
 8010efc:	d02f      	beq.n	8010f5e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8010f02:	2b01      	cmp	r3, #1
 8010f04:	d02b      	beq.n	8010f5e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d007      	beq.n	8010f1e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010f12:	4618      	mov	r0, r3
 8010f14:	f7fe f93c 	bl	800f190 <pbuf_free>
      pcb->refused_data = NULL;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d002      	beq.n	8010f2c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010f26:	6878      	ldr	r0, [r7, #4]
 8010f28:	f000 f986 	bl	8011238 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010f32:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f38:	4618      	mov	r0, r3
 8010f3a:	f7ff fcf9 	bl	8010930 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010f42:	4618      	mov	r0, r3
 8010f44:	f7ff fcf4 	bl	8010930 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	2200      	movs	r2, #0
 8010f5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8010f5e:	3708      	adds	r7, #8
 8010f60:	46bd      	mov	sp, r7
 8010f62:	bd80      	pop	{r7, pc}
 8010f64:	0802ad34 	.word	0x0802ad34
 8010f68:	0802b380 	.word	0x0802b380
 8010f6c:	0802ad78 	.word	0x0802ad78

08010f70 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b084      	sub	sp, #16
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
 8010f78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8010f7a:	683b      	ldr	r3, [r7, #0]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d106      	bne.n	8010f8e <tcp_pcb_remove+0x1e>
 8010f80:	4b3e      	ldr	r3, [pc, #248]	@ (801107c <tcp_pcb_remove+0x10c>)
 8010f82:	f640 0283 	movw	r2, #2179	@ 0x883
 8010f86:	493e      	ldr	r1, [pc, #248]	@ (8011080 <tcp_pcb_remove+0x110>)
 8010f88:	483e      	ldr	r0, [pc, #248]	@ (8011084 <tcp_pcb_remove+0x114>)
 8010f8a:	f016 ffd3 	bl	8027f34 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d106      	bne.n	8010fa2 <tcp_pcb_remove+0x32>
 8010f94:	4b39      	ldr	r3, [pc, #228]	@ (801107c <tcp_pcb_remove+0x10c>)
 8010f96:	f640 0284 	movw	r2, #2180	@ 0x884
 8010f9a:	493b      	ldr	r1, [pc, #236]	@ (8011088 <tcp_pcb_remove+0x118>)
 8010f9c:	4839      	ldr	r0, [pc, #228]	@ (8011084 <tcp_pcb_remove+0x114>)
 8010f9e:	f016 ffc9 	bl	8027f34 <iprintf>

  TCP_RMV(pcblist, pcb);
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	683a      	ldr	r2, [r7, #0]
 8010fa8:	429a      	cmp	r2, r3
 8010faa:	d105      	bne.n	8010fb8 <tcp_pcb_remove+0x48>
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	68da      	ldr	r2, [r3, #12]
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	601a      	str	r2, [r3, #0]
 8010fb6:	e013      	b.n	8010fe0 <tcp_pcb_remove+0x70>
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	60fb      	str	r3, [r7, #12]
 8010fbe:	e00c      	b.n	8010fda <tcp_pcb_remove+0x6a>
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	68db      	ldr	r3, [r3, #12]
 8010fc4:	683a      	ldr	r2, [r7, #0]
 8010fc6:	429a      	cmp	r2, r3
 8010fc8:	d104      	bne.n	8010fd4 <tcp_pcb_remove+0x64>
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	68da      	ldr	r2, [r3, #12]
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	60da      	str	r2, [r3, #12]
 8010fd2:	e005      	b.n	8010fe0 <tcp_pcb_remove+0x70>
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	68db      	ldr	r3, [r3, #12]
 8010fd8:	60fb      	str	r3, [r7, #12]
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d1ef      	bne.n	8010fc0 <tcp_pcb_remove+0x50>
 8010fe0:	683b      	ldr	r3, [r7, #0]
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010fe6:	6838      	ldr	r0, [r7, #0]
 8010fe8:	f7ff ff72 	bl	8010ed0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	7d1b      	ldrb	r3, [r3, #20]
 8010ff0:	2b0a      	cmp	r3, #10
 8010ff2:	d013      	beq.n	801101c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010ff8:	2b01      	cmp	r3, #1
 8010ffa:	d00f      	beq.n	801101c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	8b5b      	ldrh	r3, [r3, #26]
 8011000:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011004:	2b00      	cmp	r3, #0
 8011006:	d009      	beq.n	801101c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8011008:	683b      	ldr	r3, [r7, #0]
 801100a:	8b5b      	ldrh	r3, [r3, #26]
 801100c:	f043 0302 	orr.w	r3, r3, #2
 8011010:	b29a      	uxth	r2, r3
 8011012:	683b      	ldr	r3, [r7, #0]
 8011014:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011016:	6838      	ldr	r0, [r7, #0]
 8011018:	f003 fbc0 	bl	801479c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801101c:	683b      	ldr	r3, [r7, #0]
 801101e:	7d1b      	ldrb	r3, [r3, #20]
 8011020:	2b01      	cmp	r3, #1
 8011022:	d020      	beq.n	8011066 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011024:	683b      	ldr	r3, [r7, #0]
 8011026:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011028:	2b00      	cmp	r3, #0
 801102a:	d006      	beq.n	801103a <tcp_pcb_remove+0xca>
 801102c:	4b13      	ldr	r3, [pc, #76]	@ (801107c <tcp_pcb_remove+0x10c>)
 801102e:	f640 0293 	movw	r2, #2195	@ 0x893
 8011032:	4916      	ldr	r1, [pc, #88]	@ (801108c <tcp_pcb_remove+0x11c>)
 8011034:	4813      	ldr	r0, [pc, #76]	@ (8011084 <tcp_pcb_remove+0x114>)
 8011036:	f016 ff7d 	bl	8027f34 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801103e:	2b00      	cmp	r3, #0
 8011040:	d006      	beq.n	8011050 <tcp_pcb_remove+0xe0>
 8011042:	4b0e      	ldr	r3, [pc, #56]	@ (801107c <tcp_pcb_remove+0x10c>)
 8011044:	f640 0294 	movw	r2, #2196	@ 0x894
 8011048:	4911      	ldr	r1, [pc, #68]	@ (8011090 <tcp_pcb_remove+0x120>)
 801104a:	480e      	ldr	r0, [pc, #56]	@ (8011084 <tcp_pcb_remove+0x114>)
 801104c:	f016 ff72 	bl	8027f34 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011054:	2b00      	cmp	r3, #0
 8011056:	d006      	beq.n	8011066 <tcp_pcb_remove+0xf6>
 8011058:	4b08      	ldr	r3, [pc, #32]	@ (801107c <tcp_pcb_remove+0x10c>)
 801105a:	f640 0296 	movw	r2, #2198	@ 0x896
 801105e:	490d      	ldr	r1, [pc, #52]	@ (8011094 <tcp_pcb_remove+0x124>)
 8011060:	4808      	ldr	r0, [pc, #32]	@ (8011084 <tcp_pcb_remove+0x114>)
 8011062:	f016 ff67 	bl	8027f34 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011066:	683b      	ldr	r3, [r7, #0]
 8011068:	2200      	movs	r2, #0
 801106a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	2200      	movs	r2, #0
 8011070:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8011072:	bf00      	nop
 8011074:	3710      	adds	r7, #16
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}
 801107a:	bf00      	nop
 801107c:	0802ad34 	.word	0x0802ad34
 8011080:	0802b39c 	.word	0x0802b39c
 8011084:	0802ad78 	.word	0x0802ad78
 8011088:	0802b3b8 	.word	0x0802b3b8
 801108c:	0802b3d8 	.word	0x0802b3d8
 8011090:	0802b3f0 	.word	0x0802b3f0
 8011094:	0802b40c 	.word	0x0802b40c

08011098 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b082      	sub	sp, #8
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d106      	bne.n	80110b4 <tcp_next_iss+0x1c>
 80110a6:	4b0a      	ldr	r3, [pc, #40]	@ (80110d0 <tcp_next_iss+0x38>)
 80110a8:	f640 02af 	movw	r2, #2223	@ 0x8af
 80110ac:	4909      	ldr	r1, [pc, #36]	@ (80110d4 <tcp_next_iss+0x3c>)
 80110ae:	480a      	ldr	r0, [pc, #40]	@ (80110d8 <tcp_next_iss+0x40>)
 80110b0:	f016 ff40 	bl	8027f34 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80110b4:	4b09      	ldr	r3, [pc, #36]	@ (80110dc <tcp_next_iss+0x44>)
 80110b6:	681a      	ldr	r2, [r3, #0]
 80110b8:	4b09      	ldr	r3, [pc, #36]	@ (80110e0 <tcp_next_iss+0x48>)
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	4413      	add	r3, r2
 80110be:	4a07      	ldr	r2, [pc, #28]	@ (80110dc <tcp_next_iss+0x44>)
 80110c0:	6013      	str	r3, [r2, #0]
  return iss;
 80110c2:	4b06      	ldr	r3, [pc, #24]	@ (80110dc <tcp_next_iss+0x44>)
 80110c4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80110c6:	4618      	mov	r0, r3
 80110c8:	3708      	adds	r7, #8
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}
 80110ce:	bf00      	nop
 80110d0:	0802ad34 	.word	0x0802ad34
 80110d4:	0802b424 	.word	0x0802b424
 80110d8:	0802ad78 	.word	0x0802ad78
 80110dc:	20000030 	.word	0x20000030
 80110e0:	20010304 	.word	0x20010304

080110e4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b086      	sub	sp, #24
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	4603      	mov	r3, r0
 80110ec:	60b9      	str	r1, [r7, #8]
 80110ee:	607a      	str	r2, [r7, #4]
 80110f0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d106      	bne.n	8011106 <tcp_eff_send_mss_netif+0x22>
 80110f8:	4b14      	ldr	r3, [pc, #80]	@ (801114c <tcp_eff_send_mss_netif+0x68>)
 80110fa:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80110fe:	4914      	ldr	r1, [pc, #80]	@ (8011150 <tcp_eff_send_mss_netif+0x6c>)
 8011100:	4814      	ldr	r0, [pc, #80]	@ (8011154 <tcp_eff_send_mss_netif+0x70>)
 8011102:	f016 ff17 	bl	8027f34 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d101      	bne.n	8011110 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801110c:	89fb      	ldrh	r3, [r7, #14]
 801110e:	e019      	b.n	8011144 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8011110:	68bb      	ldr	r3, [r7, #8]
 8011112:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011114:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8011116:	8afb      	ldrh	r3, [r7, #22]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d012      	beq.n	8011142 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801111c:	2328      	movs	r3, #40	@ 0x28
 801111e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011120:	8afa      	ldrh	r2, [r7, #22]
 8011122:	8abb      	ldrh	r3, [r7, #20]
 8011124:	429a      	cmp	r2, r3
 8011126:	d904      	bls.n	8011132 <tcp_eff_send_mss_netif+0x4e>
 8011128:	8afa      	ldrh	r2, [r7, #22]
 801112a:	8abb      	ldrh	r3, [r7, #20]
 801112c:	1ad3      	subs	r3, r2, r3
 801112e:	b29b      	uxth	r3, r3
 8011130:	e000      	b.n	8011134 <tcp_eff_send_mss_netif+0x50>
 8011132:	2300      	movs	r3, #0
 8011134:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011136:	8a7a      	ldrh	r2, [r7, #18]
 8011138:	89fb      	ldrh	r3, [r7, #14]
 801113a:	4293      	cmp	r3, r2
 801113c:	bf28      	it	cs
 801113e:	4613      	movcs	r3, r2
 8011140:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8011142:	89fb      	ldrh	r3, [r7, #14]
}
 8011144:	4618      	mov	r0, r3
 8011146:	3718      	adds	r7, #24
 8011148:	46bd      	mov	sp, r7
 801114a:	bd80      	pop	{r7, pc}
 801114c:	0802ad34 	.word	0x0802ad34
 8011150:	0802b440 	.word	0x0802b440
 8011154:	0802ad78 	.word	0x0802ad78

08011158 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b084      	sub	sp, #16
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
 8011160:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d119      	bne.n	80111a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801116c:	4b10      	ldr	r3, [pc, #64]	@ (80111b0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801116e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8011172:	4910      	ldr	r1, [pc, #64]	@ (80111b4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011174:	4810      	ldr	r0, [pc, #64]	@ (80111b8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8011176:	f016 fedd 	bl	8027f34 <iprintf>

  while (pcb != NULL) {
 801117a:	e011      	b.n	80111a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	681a      	ldr	r2, [r3, #0]
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	429a      	cmp	r2, r3
 8011186:	d108      	bne.n	801119a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	68db      	ldr	r3, [r3, #12]
 801118c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801118e:	68f8      	ldr	r0, [r7, #12]
 8011190:	f7fe fdfe 	bl	800fd90 <tcp_abort>
      pcb = next;
 8011194:	68bb      	ldr	r3, [r7, #8]
 8011196:	60fb      	str	r3, [r7, #12]
 8011198:	e002      	b.n	80111a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	68db      	ldr	r3, [r3, #12]
 801119e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d1ea      	bne.n	801117c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80111a6:	bf00      	nop
 80111a8:	bf00      	nop
 80111aa:	3710      	adds	r7, #16
 80111ac:	46bd      	mov	sp, r7
 80111ae:	bd80      	pop	{r7, pc}
 80111b0:	0802ad34 	.word	0x0802ad34
 80111b4:	0802b468 	.word	0x0802b468
 80111b8:	0802ad78 	.word	0x0802ad78

080111bc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b084      	sub	sp, #16
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
 80111c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d02a      	beq.n	8011222 <tcp_netif_ip_addr_changed+0x66>
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d026      	beq.n	8011222 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80111d4:	4b15      	ldr	r3, [pc, #84]	@ (801122c <tcp_netif_ip_addr_changed+0x70>)
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	4619      	mov	r1, r3
 80111da:	6878      	ldr	r0, [r7, #4]
 80111dc:	f7ff ffbc 	bl	8011158 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80111e0:	4b13      	ldr	r3, [pc, #76]	@ (8011230 <tcp_netif_ip_addr_changed+0x74>)
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	4619      	mov	r1, r3
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	f7ff ffb6 	bl	8011158 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d017      	beq.n	8011222 <tcp_netif_ip_addr_changed+0x66>
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d013      	beq.n	8011222 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80111fa:	4b0e      	ldr	r3, [pc, #56]	@ (8011234 <tcp_netif_ip_addr_changed+0x78>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	60fb      	str	r3, [r7, #12]
 8011200:	e00c      	b.n	801121c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	681a      	ldr	r2, [r3, #0]
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	429a      	cmp	r2, r3
 801120c:	d103      	bne.n	8011216 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801120e:	683b      	ldr	r3, [r7, #0]
 8011210:	681a      	ldr	r2, [r3, #0]
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	68db      	ldr	r3, [r3, #12]
 801121a:	60fb      	str	r3, [r7, #12]
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d1ef      	bne.n	8011202 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8011222:	bf00      	nop
 8011224:	3710      	adds	r7, #16
 8011226:	46bd      	mov	sp, r7
 8011228:	bd80      	pop	{r7, pc}
 801122a:	bf00      	nop
 801122c:	20010310 	.word	0x20010310
 8011230:	20010308 	.word	0x20010308
 8011234:	2001030c 	.word	0x2001030c

08011238 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011238:	b580      	push	{r7, lr}
 801123a:	b082      	sub	sp, #8
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011244:	2b00      	cmp	r3, #0
 8011246:	d007      	beq.n	8011258 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801124c:	4618      	mov	r0, r3
 801124e:	f7ff fb6f 	bl	8010930 <tcp_segs_free>
    pcb->ooseq = NULL;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	2200      	movs	r2, #0
 8011256:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8011258:	bf00      	nop
 801125a:	3708      	adds	r7, #8
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}

08011260 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8011260:	b590      	push	{r4, r7, lr}
 8011262:	b08d      	sub	sp, #52	@ 0x34
 8011264:	af04      	add	r7, sp, #16
 8011266:	6078      	str	r0, [r7, #4]
 8011268:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d105      	bne.n	801127c <tcp_input+0x1c>
 8011270:	4b9b      	ldr	r3, [pc, #620]	@ (80114e0 <tcp_input+0x280>)
 8011272:	2283      	movs	r2, #131	@ 0x83
 8011274:	499b      	ldr	r1, [pc, #620]	@ (80114e4 <tcp_input+0x284>)
 8011276:	489c      	ldr	r0, [pc, #624]	@ (80114e8 <tcp_input+0x288>)
 8011278:	f016 fe5c 	bl	8027f34 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	685b      	ldr	r3, [r3, #4]
 8011280:	4a9a      	ldr	r2, [pc, #616]	@ (80114ec <tcp_input+0x28c>)
 8011282:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	895b      	ldrh	r3, [r3, #10]
 8011288:	2b13      	cmp	r3, #19
 801128a:	f240 83d1 	bls.w	8011a30 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801128e:	4b98      	ldr	r3, [pc, #608]	@ (80114f0 <tcp_input+0x290>)
 8011290:	695b      	ldr	r3, [r3, #20]
 8011292:	4a97      	ldr	r2, [pc, #604]	@ (80114f0 <tcp_input+0x290>)
 8011294:	6812      	ldr	r2, [r2, #0]
 8011296:	4611      	mov	r1, r2
 8011298:	4618      	mov	r0, r3
 801129a:	f006 fbe3 	bl	8017a64 <ip4_addr_isbroadcast_u32>
 801129e:	4603      	mov	r3, r0
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	f040 83c7 	bne.w	8011a34 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80112a6:	4b92      	ldr	r3, [pc, #584]	@ (80114f0 <tcp_input+0x290>)
 80112a8:	695b      	ldr	r3, [r3, #20]
 80112aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80112ae:	2be0      	cmp	r3, #224	@ 0xe0
 80112b0:	f000 83c0 	beq.w	8011a34 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80112b4:	4b8d      	ldr	r3, [pc, #564]	@ (80114ec <tcp_input+0x28c>)
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	899b      	ldrh	r3, [r3, #12]
 80112ba:	b29b      	uxth	r3, r3
 80112bc:	4618      	mov	r0, r3
 80112be:	f7fc fb0f 	bl	800d8e0 <lwip_htons>
 80112c2:	4603      	mov	r3, r0
 80112c4:	0b1b      	lsrs	r3, r3, #12
 80112c6:	b29b      	uxth	r3, r3
 80112c8:	b2db      	uxtb	r3, r3
 80112ca:	009b      	lsls	r3, r3, #2
 80112cc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80112ce:	7cbb      	ldrb	r3, [r7, #18]
 80112d0:	2b13      	cmp	r3, #19
 80112d2:	f240 83b1 	bls.w	8011a38 <tcp_input+0x7d8>
 80112d6:	7cbb      	ldrb	r3, [r7, #18]
 80112d8:	b29a      	uxth	r2, r3
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	891b      	ldrh	r3, [r3, #8]
 80112de:	429a      	cmp	r2, r3
 80112e0:	f200 83aa 	bhi.w	8011a38 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80112e4:	7cbb      	ldrb	r3, [r7, #18]
 80112e6:	b29b      	uxth	r3, r3
 80112e8:	3b14      	subs	r3, #20
 80112ea:	b29a      	uxth	r2, r3
 80112ec:	4b81      	ldr	r3, [pc, #516]	@ (80114f4 <tcp_input+0x294>)
 80112ee:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80112f0:	4b81      	ldr	r3, [pc, #516]	@ (80114f8 <tcp_input+0x298>)
 80112f2:	2200      	movs	r2, #0
 80112f4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	895a      	ldrh	r2, [r3, #10]
 80112fa:	7cbb      	ldrb	r3, [r7, #18]
 80112fc:	b29b      	uxth	r3, r3
 80112fe:	429a      	cmp	r2, r3
 8011300:	d309      	bcc.n	8011316 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8011302:	4b7c      	ldr	r3, [pc, #496]	@ (80114f4 <tcp_input+0x294>)
 8011304:	881a      	ldrh	r2, [r3, #0]
 8011306:	4b7d      	ldr	r3, [pc, #500]	@ (80114fc <tcp_input+0x29c>)
 8011308:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801130a:	7cbb      	ldrb	r3, [r7, #18]
 801130c:	4619      	mov	r1, r3
 801130e:	6878      	ldr	r0, [r7, #4]
 8011310:	f7fd fe86 	bl	800f020 <pbuf_remove_header>
 8011314:	e04e      	b.n	80113b4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d105      	bne.n	801132a <tcp_input+0xca>
 801131e:	4b70      	ldr	r3, [pc, #448]	@ (80114e0 <tcp_input+0x280>)
 8011320:	22c2      	movs	r2, #194	@ 0xc2
 8011322:	4977      	ldr	r1, [pc, #476]	@ (8011500 <tcp_input+0x2a0>)
 8011324:	4870      	ldr	r0, [pc, #448]	@ (80114e8 <tcp_input+0x288>)
 8011326:	f016 fe05 	bl	8027f34 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801132a:	2114      	movs	r1, #20
 801132c:	6878      	ldr	r0, [r7, #4]
 801132e:	f7fd fe77 	bl	800f020 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	895a      	ldrh	r2, [r3, #10]
 8011336:	4b71      	ldr	r3, [pc, #452]	@ (80114fc <tcp_input+0x29c>)
 8011338:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801133a:	4b6e      	ldr	r3, [pc, #440]	@ (80114f4 <tcp_input+0x294>)
 801133c:	881a      	ldrh	r2, [r3, #0]
 801133e:	4b6f      	ldr	r3, [pc, #444]	@ (80114fc <tcp_input+0x29c>)
 8011340:	881b      	ldrh	r3, [r3, #0]
 8011342:	1ad3      	subs	r3, r2, r3
 8011344:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8011346:	4b6d      	ldr	r3, [pc, #436]	@ (80114fc <tcp_input+0x29c>)
 8011348:	881b      	ldrh	r3, [r3, #0]
 801134a:	4619      	mov	r1, r3
 801134c:	6878      	ldr	r0, [r7, #4]
 801134e:	f7fd fe67 	bl	800f020 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	895b      	ldrh	r3, [r3, #10]
 8011358:	8a3a      	ldrh	r2, [r7, #16]
 801135a:	429a      	cmp	r2, r3
 801135c:	f200 836e 	bhi.w	8011a3c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	685b      	ldr	r3, [r3, #4]
 8011366:	4a64      	ldr	r2, [pc, #400]	@ (80114f8 <tcp_input+0x298>)
 8011368:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	8a3a      	ldrh	r2, [r7, #16]
 8011370:	4611      	mov	r1, r2
 8011372:	4618      	mov	r0, r3
 8011374:	f7fd fe54 	bl	800f020 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	891a      	ldrh	r2, [r3, #8]
 801137c:	8a3b      	ldrh	r3, [r7, #16]
 801137e:	1ad3      	subs	r3, r2, r3
 8011380:	b29a      	uxth	r2, r3
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	895b      	ldrh	r3, [r3, #10]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d005      	beq.n	801139a <tcp_input+0x13a>
 801138e:	4b54      	ldr	r3, [pc, #336]	@ (80114e0 <tcp_input+0x280>)
 8011390:	22df      	movs	r2, #223	@ 0xdf
 8011392:	495c      	ldr	r1, [pc, #368]	@ (8011504 <tcp_input+0x2a4>)
 8011394:	4854      	ldr	r0, [pc, #336]	@ (80114e8 <tcp_input+0x288>)
 8011396:	f016 fdcd 	bl	8027f34 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	891a      	ldrh	r2, [r3, #8]
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	891b      	ldrh	r3, [r3, #8]
 80113a4:	429a      	cmp	r2, r3
 80113a6:	d005      	beq.n	80113b4 <tcp_input+0x154>
 80113a8:	4b4d      	ldr	r3, [pc, #308]	@ (80114e0 <tcp_input+0x280>)
 80113aa:	22e0      	movs	r2, #224	@ 0xe0
 80113ac:	4956      	ldr	r1, [pc, #344]	@ (8011508 <tcp_input+0x2a8>)
 80113ae:	484e      	ldr	r0, [pc, #312]	@ (80114e8 <tcp_input+0x288>)
 80113b0:	f016 fdc0 	bl	8027f34 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80113b4:	4b4d      	ldr	r3, [pc, #308]	@ (80114ec <tcp_input+0x28c>)
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	881b      	ldrh	r3, [r3, #0]
 80113ba:	b29b      	uxth	r3, r3
 80113bc:	4a4b      	ldr	r2, [pc, #300]	@ (80114ec <tcp_input+0x28c>)
 80113be:	6814      	ldr	r4, [r2, #0]
 80113c0:	4618      	mov	r0, r3
 80113c2:	f7fc fa8d 	bl	800d8e0 <lwip_htons>
 80113c6:	4603      	mov	r3, r0
 80113c8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80113ca:	4b48      	ldr	r3, [pc, #288]	@ (80114ec <tcp_input+0x28c>)
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	885b      	ldrh	r3, [r3, #2]
 80113d0:	b29b      	uxth	r3, r3
 80113d2:	4a46      	ldr	r2, [pc, #280]	@ (80114ec <tcp_input+0x28c>)
 80113d4:	6814      	ldr	r4, [r2, #0]
 80113d6:	4618      	mov	r0, r3
 80113d8:	f7fc fa82 	bl	800d8e0 <lwip_htons>
 80113dc:	4603      	mov	r3, r0
 80113de:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80113e0:	4b42      	ldr	r3, [pc, #264]	@ (80114ec <tcp_input+0x28c>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	685b      	ldr	r3, [r3, #4]
 80113e6:	4a41      	ldr	r2, [pc, #260]	@ (80114ec <tcp_input+0x28c>)
 80113e8:	6814      	ldr	r4, [r2, #0]
 80113ea:	4618      	mov	r0, r3
 80113ec:	f7fc fa8e 	bl	800d90c <lwip_htonl>
 80113f0:	4603      	mov	r3, r0
 80113f2:	6063      	str	r3, [r4, #4]
 80113f4:	6863      	ldr	r3, [r4, #4]
 80113f6:	4a45      	ldr	r2, [pc, #276]	@ (801150c <tcp_input+0x2ac>)
 80113f8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80113fa:	4b3c      	ldr	r3, [pc, #240]	@ (80114ec <tcp_input+0x28c>)
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	689b      	ldr	r3, [r3, #8]
 8011400:	4a3a      	ldr	r2, [pc, #232]	@ (80114ec <tcp_input+0x28c>)
 8011402:	6814      	ldr	r4, [r2, #0]
 8011404:	4618      	mov	r0, r3
 8011406:	f7fc fa81 	bl	800d90c <lwip_htonl>
 801140a:	4603      	mov	r3, r0
 801140c:	60a3      	str	r3, [r4, #8]
 801140e:	68a3      	ldr	r3, [r4, #8]
 8011410:	4a3f      	ldr	r2, [pc, #252]	@ (8011510 <tcp_input+0x2b0>)
 8011412:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011414:	4b35      	ldr	r3, [pc, #212]	@ (80114ec <tcp_input+0x28c>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	89db      	ldrh	r3, [r3, #14]
 801141a:	b29b      	uxth	r3, r3
 801141c:	4a33      	ldr	r2, [pc, #204]	@ (80114ec <tcp_input+0x28c>)
 801141e:	6814      	ldr	r4, [r2, #0]
 8011420:	4618      	mov	r0, r3
 8011422:	f7fc fa5d 	bl	800d8e0 <lwip_htons>
 8011426:	4603      	mov	r3, r0
 8011428:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801142a:	4b30      	ldr	r3, [pc, #192]	@ (80114ec <tcp_input+0x28c>)
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	899b      	ldrh	r3, [r3, #12]
 8011430:	b29b      	uxth	r3, r3
 8011432:	4618      	mov	r0, r3
 8011434:	f7fc fa54 	bl	800d8e0 <lwip_htons>
 8011438:	4603      	mov	r3, r0
 801143a:	b2db      	uxtb	r3, r3
 801143c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011440:	b2da      	uxtb	r2, r3
 8011442:	4b34      	ldr	r3, [pc, #208]	@ (8011514 <tcp_input+0x2b4>)
 8011444:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	891a      	ldrh	r2, [r3, #8]
 801144a:	4b33      	ldr	r3, [pc, #204]	@ (8011518 <tcp_input+0x2b8>)
 801144c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801144e:	4b31      	ldr	r3, [pc, #196]	@ (8011514 <tcp_input+0x2b4>)
 8011450:	781b      	ldrb	r3, [r3, #0]
 8011452:	f003 0303 	and.w	r3, r3, #3
 8011456:	2b00      	cmp	r3, #0
 8011458:	d00c      	beq.n	8011474 <tcp_input+0x214>
    tcplen++;
 801145a:	4b2f      	ldr	r3, [pc, #188]	@ (8011518 <tcp_input+0x2b8>)
 801145c:	881b      	ldrh	r3, [r3, #0]
 801145e:	3301      	adds	r3, #1
 8011460:	b29a      	uxth	r2, r3
 8011462:	4b2d      	ldr	r3, [pc, #180]	@ (8011518 <tcp_input+0x2b8>)
 8011464:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	891a      	ldrh	r2, [r3, #8]
 801146a:	4b2b      	ldr	r3, [pc, #172]	@ (8011518 <tcp_input+0x2b8>)
 801146c:	881b      	ldrh	r3, [r3, #0]
 801146e:	429a      	cmp	r2, r3
 8011470:	f200 82e6 	bhi.w	8011a40 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8011474:	2300      	movs	r3, #0
 8011476:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011478:	4b28      	ldr	r3, [pc, #160]	@ (801151c <tcp_input+0x2bc>)
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	61fb      	str	r3, [r7, #28]
 801147e:	e09d      	b.n	80115bc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011480:	69fb      	ldr	r3, [r7, #28]
 8011482:	7d1b      	ldrb	r3, [r3, #20]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d105      	bne.n	8011494 <tcp_input+0x234>
 8011488:	4b15      	ldr	r3, [pc, #84]	@ (80114e0 <tcp_input+0x280>)
 801148a:	22fb      	movs	r2, #251	@ 0xfb
 801148c:	4924      	ldr	r1, [pc, #144]	@ (8011520 <tcp_input+0x2c0>)
 801148e:	4816      	ldr	r0, [pc, #88]	@ (80114e8 <tcp_input+0x288>)
 8011490:	f016 fd50 	bl	8027f34 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011494:	69fb      	ldr	r3, [r7, #28]
 8011496:	7d1b      	ldrb	r3, [r3, #20]
 8011498:	2b0a      	cmp	r3, #10
 801149a:	d105      	bne.n	80114a8 <tcp_input+0x248>
 801149c:	4b10      	ldr	r3, [pc, #64]	@ (80114e0 <tcp_input+0x280>)
 801149e:	22fc      	movs	r2, #252	@ 0xfc
 80114a0:	4920      	ldr	r1, [pc, #128]	@ (8011524 <tcp_input+0x2c4>)
 80114a2:	4811      	ldr	r0, [pc, #68]	@ (80114e8 <tcp_input+0x288>)
 80114a4:	f016 fd46 	bl	8027f34 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80114a8:	69fb      	ldr	r3, [r7, #28]
 80114aa:	7d1b      	ldrb	r3, [r3, #20]
 80114ac:	2b01      	cmp	r3, #1
 80114ae:	d105      	bne.n	80114bc <tcp_input+0x25c>
 80114b0:	4b0b      	ldr	r3, [pc, #44]	@ (80114e0 <tcp_input+0x280>)
 80114b2:	22fd      	movs	r2, #253	@ 0xfd
 80114b4:	491c      	ldr	r1, [pc, #112]	@ (8011528 <tcp_input+0x2c8>)
 80114b6:	480c      	ldr	r0, [pc, #48]	@ (80114e8 <tcp_input+0x288>)
 80114b8:	f016 fd3c 	bl	8027f34 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80114bc:	69fb      	ldr	r3, [r7, #28]
 80114be:	7a1b      	ldrb	r3, [r3, #8]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d033      	beq.n	801152c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80114c4:	69fb      	ldr	r3, [r7, #28]
 80114c6:	7a1a      	ldrb	r2, [r3, #8]
 80114c8:	4b09      	ldr	r3, [pc, #36]	@ (80114f0 <tcp_input+0x290>)
 80114ca:	685b      	ldr	r3, [r3, #4]
 80114cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80114d0:	3301      	adds	r3, #1
 80114d2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80114d4:	429a      	cmp	r2, r3
 80114d6:	d029      	beq.n	801152c <tcp_input+0x2cc>
      prev = pcb;
 80114d8:	69fb      	ldr	r3, [r7, #28]
 80114da:	61bb      	str	r3, [r7, #24]
      continue;
 80114dc:	e06b      	b.n	80115b6 <tcp_input+0x356>
 80114de:	bf00      	nop
 80114e0:	0802b49c 	.word	0x0802b49c
 80114e4:	0802b4d0 	.word	0x0802b4d0
 80114e8:	0802b4e8 	.word	0x0802b4e8
 80114ec:	2001032c 	.word	0x2001032c
 80114f0:	2000d094 	.word	0x2000d094
 80114f4:	20010330 	.word	0x20010330
 80114f8:	20010334 	.word	0x20010334
 80114fc:	20010332 	.word	0x20010332
 8011500:	0802b510 	.word	0x0802b510
 8011504:	0802b520 	.word	0x0802b520
 8011508:	0802b52c 	.word	0x0802b52c
 801150c:	2001033c 	.word	0x2001033c
 8011510:	20010340 	.word	0x20010340
 8011514:	20010348 	.word	0x20010348
 8011518:	20010346 	.word	0x20010346
 801151c:	20010310 	.word	0x20010310
 8011520:	0802b54c 	.word	0x0802b54c
 8011524:	0802b574 	.word	0x0802b574
 8011528:	0802b5a0 	.word	0x0802b5a0
    }

    if (pcb->remote_port == tcphdr->src &&
 801152c:	69fb      	ldr	r3, [r7, #28]
 801152e:	8b1a      	ldrh	r2, [r3, #24]
 8011530:	4b72      	ldr	r3, [pc, #456]	@ (80116fc <tcp_input+0x49c>)
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	881b      	ldrh	r3, [r3, #0]
 8011536:	b29b      	uxth	r3, r3
 8011538:	429a      	cmp	r2, r3
 801153a:	d13a      	bne.n	80115b2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801153c:	69fb      	ldr	r3, [r7, #28]
 801153e:	8ada      	ldrh	r2, [r3, #22]
 8011540:	4b6e      	ldr	r3, [pc, #440]	@ (80116fc <tcp_input+0x49c>)
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	885b      	ldrh	r3, [r3, #2]
 8011546:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8011548:	429a      	cmp	r2, r3
 801154a:	d132      	bne.n	80115b2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801154c:	69fb      	ldr	r3, [r7, #28]
 801154e:	685a      	ldr	r2, [r3, #4]
 8011550:	4b6b      	ldr	r3, [pc, #428]	@ (8011700 <tcp_input+0x4a0>)
 8011552:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011554:	429a      	cmp	r2, r3
 8011556:	d12c      	bne.n	80115b2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011558:	69fb      	ldr	r3, [r7, #28]
 801155a:	681a      	ldr	r2, [r3, #0]
 801155c:	4b68      	ldr	r3, [pc, #416]	@ (8011700 <tcp_input+0x4a0>)
 801155e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011560:	429a      	cmp	r2, r3
 8011562:	d126      	bne.n	80115b2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8011564:	69fb      	ldr	r3, [r7, #28]
 8011566:	68db      	ldr	r3, [r3, #12]
 8011568:	69fa      	ldr	r2, [r7, #28]
 801156a:	429a      	cmp	r2, r3
 801156c:	d106      	bne.n	801157c <tcp_input+0x31c>
 801156e:	4b65      	ldr	r3, [pc, #404]	@ (8011704 <tcp_input+0x4a4>)
 8011570:	f240 120d 	movw	r2, #269	@ 0x10d
 8011574:	4964      	ldr	r1, [pc, #400]	@ (8011708 <tcp_input+0x4a8>)
 8011576:	4865      	ldr	r0, [pc, #404]	@ (801170c <tcp_input+0x4ac>)
 8011578:	f016 fcdc 	bl	8027f34 <iprintf>
      if (prev != NULL) {
 801157c:	69bb      	ldr	r3, [r7, #24]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d00a      	beq.n	8011598 <tcp_input+0x338>
        prev->next = pcb->next;
 8011582:	69fb      	ldr	r3, [r7, #28]
 8011584:	68da      	ldr	r2, [r3, #12]
 8011586:	69bb      	ldr	r3, [r7, #24]
 8011588:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801158a:	4b61      	ldr	r3, [pc, #388]	@ (8011710 <tcp_input+0x4b0>)
 801158c:	681a      	ldr	r2, [r3, #0]
 801158e:	69fb      	ldr	r3, [r7, #28]
 8011590:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8011592:	4a5f      	ldr	r2, [pc, #380]	@ (8011710 <tcp_input+0x4b0>)
 8011594:	69fb      	ldr	r3, [r7, #28]
 8011596:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011598:	69fb      	ldr	r3, [r7, #28]
 801159a:	68db      	ldr	r3, [r3, #12]
 801159c:	69fa      	ldr	r2, [r7, #28]
 801159e:	429a      	cmp	r2, r3
 80115a0:	d111      	bne.n	80115c6 <tcp_input+0x366>
 80115a2:	4b58      	ldr	r3, [pc, #352]	@ (8011704 <tcp_input+0x4a4>)
 80115a4:	f240 1215 	movw	r2, #277	@ 0x115
 80115a8:	495a      	ldr	r1, [pc, #360]	@ (8011714 <tcp_input+0x4b4>)
 80115aa:	4858      	ldr	r0, [pc, #352]	@ (801170c <tcp_input+0x4ac>)
 80115ac:	f016 fcc2 	bl	8027f34 <iprintf>
      break;
 80115b0:	e009      	b.n	80115c6 <tcp_input+0x366>
    }
    prev = pcb;
 80115b2:	69fb      	ldr	r3, [r7, #28]
 80115b4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80115b6:	69fb      	ldr	r3, [r7, #28]
 80115b8:	68db      	ldr	r3, [r3, #12]
 80115ba:	61fb      	str	r3, [r7, #28]
 80115bc:	69fb      	ldr	r3, [r7, #28]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	f47f af5e 	bne.w	8011480 <tcp_input+0x220>
 80115c4:	e000      	b.n	80115c8 <tcp_input+0x368>
      break;
 80115c6:	bf00      	nop
  }

  if (pcb == NULL) {
 80115c8:	69fb      	ldr	r3, [r7, #28]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	f040 80aa 	bne.w	8011724 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80115d0:	4b51      	ldr	r3, [pc, #324]	@ (8011718 <tcp_input+0x4b8>)
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	61fb      	str	r3, [r7, #28]
 80115d6:	e03f      	b.n	8011658 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80115d8:	69fb      	ldr	r3, [r7, #28]
 80115da:	7d1b      	ldrb	r3, [r3, #20]
 80115dc:	2b0a      	cmp	r3, #10
 80115de:	d006      	beq.n	80115ee <tcp_input+0x38e>
 80115e0:	4b48      	ldr	r3, [pc, #288]	@ (8011704 <tcp_input+0x4a4>)
 80115e2:	f240 121f 	movw	r2, #287	@ 0x11f
 80115e6:	494d      	ldr	r1, [pc, #308]	@ (801171c <tcp_input+0x4bc>)
 80115e8:	4848      	ldr	r0, [pc, #288]	@ (801170c <tcp_input+0x4ac>)
 80115ea:	f016 fca3 	bl	8027f34 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80115ee:	69fb      	ldr	r3, [r7, #28]
 80115f0:	7a1b      	ldrb	r3, [r3, #8]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d009      	beq.n	801160a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80115f6:	69fb      	ldr	r3, [r7, #28]
 80115f8:	7a1a      	ldrb	r2, [r3, #8]
 80115fa:	4b41      	ldr	r3, [pc, #260]	@ (8011700 <tcp_input+0x4a0>)
 80115fc:	685b      	ldr	r3, [r3, #4]
 80115fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011602:	3301      	adds	r3, #1
 8011604:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011606:	429a      	cmp	r2, r3
 8011608:	d122      	bne.n	8011650 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801160a:	69fb      	ldr	r3, [r7, #28]
 801160c:	8b1a      	ldrh	r2, [r3, #24]
 801160e:	4b3b      	ldr	r3, [pc, #236]	@ (80116fc <tcp_input+0x49c>)
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	881b      	ldrh	r3, [r3, #0]
 8011614:	b29b      	uxth	r3, r3
 8011616:	429a      	cmp	r2, r3
 8011618:	d11b      	bne.n	8011652 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801161a:	69fb      	ldr	r3, [r7, #28]
 801161c:	8ada      	ldrh	r2, [r3, #22]
 801161e:	4b37      	ldr	r3, [pc, #220]	@ (80116fc <tcp_input+0x49c>)
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	885b      	ldrh	r3, [r3, #2]
 8011624:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8011626:	429a      	cmp	r2, r3
 8011628:	d113      	bne.n	8011652 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801162a:	69fb      	ldr	r3, [r7, #28]
 801162c:	685a      	ldr	r2, [r3, #4]
 801162e:	4b34      	ldr	r3, [pc, #208]	@ (8011700 <tcp_input+0x4a0>)
 8011630:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8011632:	429a      	cmp	r2, r3
 8011634:	d10d      	bne.n	8011652 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011636:	69fb      	ldr	r3, [r7, #28]
 8011638:	681a      	ldr	r2, [r3, #0]
 801163a:	4b31      	ldr	r3, [pc, #196]	@ (8011700 <tcp_input+0x4a0>)
 801163c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801163e:	429a      	cmp	r2, r3
 8011640:	d107      	bne.n	8011652 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8011642:	69f8      	ldr	r0, [r7, #28]
 8011644:	f000 fb56 	bl	8011cf4 <tcp_timewait_input>
        }
        pbuf_free(p);
 8011648:	6878      	ldr	r0, [r7, #4]
 801164a:	f7fd fda1 	bl	800f190 <pbuf_free>
        return;
 801164e:	e1fd      	b.n	8011a4c <tcp_input+0x7ec>
        continue;
 8011650:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011652:	69fb      	ldr	r3, [r7, #28]
 8011654:	68db      	ldr	r3, [r3, #12]
 8011656:	61fb      	str	r3, [r7, #28]
 8011658:	69fb      	ldr	r3, [r7, #28]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d1bc      	bne.n	80115d8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801165e:	2300      	movs	r3, #0
 8011660:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011662:	4b2f      	ldr	r3, [pc, #188]	@ (8011720 <tcp_input+0x4c0>)
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	617b      	str	r3, [r7, #20]
 8011668:	e02a      	b.n	80116c0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801166a:	697b      	ldr	r3, [r7, #20]
 801166c:	7a1b      	ldrb	r3, [r3, #8]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d00c      	beq.n	801168c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011672:	697b      	ldr	r3, [r7, #20]
 8011674:	7a1a      	ldrb	r2, [r3, #8]
 8011676:	4b22      	ldr	r3, [pc, #136]	@ (8011700 <tcp_input+0x4a0>)
 8011678:	685b      	ldr	r3, [r3, #4]
 801167a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801167e:	3301      	adds	r3, #1
 8011680:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011682:	429a      	cmp	r2, r3
 8011684:	d002      	beq.n	801168c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8011686:	697b      	ldr	r3, [r7, #20]
 8011688:	61bb      	str	r3, [r7, #24]
        continue;
 801168a:	e016      	b.n	80116ba <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	8ada      	ldrh	r2, [r3, #22]
 8011690:	4b1a      	ldr	r3, [pc, #104]	@ (80116fc <tcp_input+0x49c>)
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	885b      	ldrh	r3, [r3, #2]
 8011696:	b29b      	uxth	r3, r3
 8011698:	429a      	cmp	r2, r3
 801169a:	d10c      	bne.n	80116b6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	681a      	ldr	r2, [r3, #0]
 80116a0:	4b17      	ldr	r3, [pc, #92]	@ (8011700 <tcp_input+0x4a0>)
 80116a2:	695b      	ldr	r3, [r3, #20]
 80116a4:	429a      	cmp	r2, r3
 80116a6:	d00f      	beq.n	80116c8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80116a8:	697b      	ldr	r3, [r7, #20]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d00d      	beq.n	80116ca <tcp_input+0x46a>
 80116ae:	697b      	ldr	r3, [r7, #20]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d009      	beq.n	80116ca <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80116b6:	697b      	ldr	r3, [r7, #20]
 80116b8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80116ba:	697b      	ldr	r3, [r7, #20]
 80116bc:	68db      	ldr	r3, [r3, #12]
 80116be:	617b      	str	r3, [r7, #20]
 80116c0:	697b      	ldr	r3, [r7, #20]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d1d1      	bne.n	801166a <tcp_input+0x40a>
 80116c6:	e000      	b.n	80116ca <tcp_input+0x46a>
            break;
 80116c8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80116ca:	697b      	ldr	r3, [r7, #20]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d029      	beq.n	8011724 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80116d0:	69bb      	ldr	r3, [r7, #24]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d00a      	beq.n	80116ec <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80116d6:	697b      	ldr	r3, [r7, #20]
 80116d8:	68da      	ldr	r2, [r3, #12]
 80116da:	69bb      	ldr	r3, [r7, #24]
 80116dc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80116de:	4b10      	ldr	r3, [pc, #64]	@ (8011720 <tcp_input+0x4c0>)
 80116e0:	681a      	ldr	r2, [r3, #0]
 80116e2:	697b      	ldr	r3, [r7, #20]
 80116e4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80116e6:	4a0e      	ldr	r2, [pc, #56]	@ (8011720 <tcp_input+0x4c0>)
 80116e8:	697b      	ldr	r3, [r7, #20]
 80116ea:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80116ec:	6978      	ldr	r0, [r7, #20]
 80116ee:	f000 fa03 	bl	8011af8 <tcp_listen_input>
      }
      pbuf_free(p);
 80116f2:	6878      	ldr	r0, [r7, #4]
 80116f4:	f7fd fd4c 	bl	800f190 <pbuf_free>
      return;
 80116f8:	e1a8      	b.n	8011a4c <tcp_input+0x7ec>
 80116fa:	bf00      	nop
 80116fc:	2001032c 	.word	0x2001032c
 8011700:	2000d094 	.word	0x2000d094
 8011704:	0802b49c 	.word	0x0802b49c
 8011708:	0802b5c8 	.word	0x0802b5c8
 801170c:	0802b4e8 	.word	0x0802b4e8
 8011710:	20010310 	.word	0x20010310
 8011714:	0802b5f4 	.word	0x0802b5f4
 8011718:	20010314 	.word	0x20010314
 801171c:	0802b620 	.word	0x0802b620
 8011720:	2001030c 	.word	0x2001030c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011724:	69fb      	ldr	r3, [r7, #28]
 8011726:	2b00      	cmp	r3, #0
 8011728:	f000 8158 	beq.w	80119dc <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801172c:	4b95      	ldr	r3, [pc, #596]	@ (8011984 <tcp_input+0x724>)
 801172e:	2200      	movs	r2, #0
 8011730:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	891a      	ldrh	r2, [r3, #8]
 8011736:	4b93      	ldr	r3, [pc, #588]	@ (8011984 <tcp_input+0x724>)
 8011738:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801173a:	4a92      	ldr	r2, [pc, #584]	@ (8011984 <tcp_input+0x724>)
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011740:	4b91      	ldr	r3, [pc, #580]	@ (8011988 <tcp_input+0x728>)
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	4a8f      	ldr	r2, [pc, #572]	@ (8011984 <tcp_input+0x724>)
 8011746:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8011748:	4b90      	ldr	r3, [pc, #576]	@ (801198c <tcp_input+0x72c>)
 801174a:	2200      	movs	r2, #0
 801174c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801174e:	4b90      	ldr	r3, [pc, #576]	@ (8011990 <tcp_input+0x730>)
 8011750:	2200      	movs	r2, #0
 8011752:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011754:	4b8f      	ldr	r3, [pc, #572]	@ (8011994 <tcp_input+0x734>)
 8011756:	2200      	movs	r2, #0
 8011758:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801175a:	4b8f      	ldr	r3, [pc, #572]	@ (8011998 <tcp_input+0x738>)
 801175c:	781b      	ldrb	r3, [r3, #0]
 801175e:	f003 0308 	and.w	r3, r3, #8
 8011762:	2b00      	cmp	r3, #0
 8011764:	d006      	beq.n	8011774 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	7b5b      	ldrb	r3, [r3, #13]
 801176a:	f043 0301 	orr.w	r3, r3, #1
 801176e:	b2da      	uxtb	r2, r3
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011774:	69fb      	ldr	r3, [r7, #28]
 8011776:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011778:	2b00      	cmp	r3, #0
 801177a:	d017      	beq.n	80117ac <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801177c:	69f8      	ldr	r0, [r7, #28]
 801177e:	f7ff f85b 	bl	8010838 <tcp_process_refused_data>
 8011782:	4603      	mov	r3, r0
 8011784:	f113 0f0d 	cmn.w	r3, #13
 8011788:	d007      	beq.n	801179a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801178a:	69fb      	ldr	r3, [r7, #28]
 801178c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801178e:	2b00      	cmp	r3, #0
 8011790:	d00c      	beq.n	80117ac <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011792:	4b82      	ldr	r3, [pc, #520]	@ (801199c <tcp_input+0x73c>)
 8011794:	881b      	ldrh	r3, [r3, #0]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d008      	beq.n	80117ac <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801179a:	69fb      	ldr	r3, [r7, #28]
 801179c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801179e:	2b00      	cmp	r3, #0
 80117a0:	f040 80e3 	bne.w	801196a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80117a4:	69f8      	ldr	r0, [r7, #28]
 80117a6:	f003 fdff 	bl	80153a8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80117aa:	e0de      	b.n	801196a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80117ac:	4a7c      	ldr	r2, [pc, #496]	@ (80119a0 <tcp_input+0x740>)
 80117ae:	69fb      	ldr	r3, [r7, #28]
 80117b0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80117b2:	69f8      	ldr	r0, [r7, #28]
 80117b4:	f000 fb18 	bl	8011de8 <tcp_process>
 80117b8:	4603      	mov	r3, r0
 80117ba:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80117bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80117c0:	f113 0f0d 	cmn.w	r3, #13
 80117c4:	f000 80d3 	beq.w	801196e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80117c8:	4b71      	ldr	r3, [pc, #452]	@ (8011990 <tcp_input+0x730>)
 80117ca:	781b      	ldrb	r3, [r3, #0]
 80117cc:	f003 0308 	and.w	r3, r3, #8
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d015      	beq.n	8011800 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80117d4:	69fb      	ldr	r3, [r7, #28]
 80117d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d008      	beq.n	80117f0 <tcp_input+0x590>
 80117de:	69fb      	ldr	r3, [r7, #28]
 80117e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80117e4:	69fa      	ldr	r2, [r7, #28]
 80117e6:	6912      	ldr	r2, [r2, #16]
 80117e8:	f06f 010d 	mvn.w	r1, #13
 80117ec:	4610      	mov	r0, r2
 80117ee:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80117f0:	69f9      	ldr	r1, [r7, #28]
 80117f2:	486c      	ldr	r0, [pc, #432]	@ (80119a4 <tcp_input+0x744>)
 80117f4:	f7ff fbbc 	bl	8010f70 <tcp_pcb_remove>
        tcp_free(pcb);
 80117f8:	69f8      	ldr	r0, [r7, #28]
 80117fa:	f7fd ff85 	bl	800f708 <tcp_free>
 80117fe:	e0da      	b.n	80119b6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8011800:	2300      	movs	r3, #0
 8011802:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011804:	4b63      	ldr	r3, [pc, #396]	@ (8011994 <tcp_input+0x734>)
 8011806:	881b      	ldrh	r3, [r3, #0]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d01d      	beq.n	8011848 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801180c:	4b61      	ldr	r3, [pc, #388]	@ (8011994 <tcp_input+0x734>)
 801180e:	881b      	ldrh	r3, [r3, #0]
 8011810:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011812:	69fb      	ldr	r3, [r7, #28]
 8011814:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011818:	2b00      	cmp	r3, #0
 801181a:	d00a      	beq.n	8011832 <tcp_input+0x5d2>
 801181c:	69fb      	ldr	r3, [r7, #28]
 801181e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011822:	69fa      	ldr	r2, [r7, #28]
 8011824:	6910      	ldr	r0, [r2, #16]
 8011826:	89fa      	ldrh	r2, [r7, #14]
 8011828:	69f9      	ldr	r1, [r7, #28]
 801182a:	4798      	blx	r3
 801182c:	4603      	mov	r3, r0
 801182e:	74fb      	strb	r3, [r7, #19]
 8011830:	e001      	b.n	8011836 <tcp_input+0x5d6>
 8011832:	2300      	movs	r3, #0
 8011834:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011836:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801183a:	f113 0f0d 	cmn.w	r3, #13
 801183e:	f000 8098 	beq.w	8011972 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011842:	4b54      	ldr	r3, [pc, #336]	@ (8011994 <tcp_input+0x734>)
 8011844:	2200      	movs	r2, #0
 8011846:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8011848:	69f8      	ldr	r0, [r7, #28]
 801184a:	f000 f915 	bl	8011a78 <tcp_input_delayed_close>
 801184e:	4603      	mov	r3, r0
 8011850:	2b00      	cmp	r3, #0
 8011852:	f040 8090 	bne.w	8011976 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8011856:	4b4d      	ldr	r3, [pc, #308]	@ (801198c <tcp_input+0x72c>)
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d041      	beq.n	80118e2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801185e:	69fb      	ldr	r3, [r7, #28]
 8011860:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011862:	2b00      	cmp	r3, #0
 8011864:	d006      	beq.n	8011874 <tcp_input+0x614>
 8011866:	4b50      	ldr	r3, [pc, #320]	@ (80119a8 <tcp_input+0x748>)
 8011868:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801186c:	494f      	ldr	r1, [pc, #316]	@ (80119ac <tcp_input+0x74c>)
 801186e:	4850      	ldr	r0, [pc, #320]	@ (80119b0 <tcp_input+0x750>)
 8011870:	f016 fb60 	bl	8027f34 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011874:	69fb      	ldr	r3, [r7, #28]
 8011876:	8b5b      	ldrh	r3, [r3, #26]
 8011878:	f003 0310 	and.w	r3, r3, #16
 801187c:	2b00      	cmp	r3, #0
 801187e:	d008      	beq.n	8011892 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011880:	4b42      	ldr	r3, [pc, #264]	@ (801198c <tcp_input+0x72c>)
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	4618      	mov	r0, r3
 8011886:	f7fd fc83 	bl	800f190 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801188a:	69f8      	ldr	r0, [r7, #28]
 801188c:	f7fe fa80 	bl	800fd90 <tcp_abort>
            goto aborted;
 8011890:	e091      	b.n	80119b6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011892:	69fb      	ldr	r3, [r7, #28]
 8011894:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011898:	2b00      	cmp	r3, #0
 801189a:	d00c      	beq.n	80118b6 <tcp_input+0x656>
 801189c:	69fb      	ldr	r3, [r7, #28]
 801189e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80118a2:	69fb      	ldr	r3, [r7, #28]
 80118a4:	6918      	ldr	r0, [r3, #16]
 80118a6:	4b39      	ldr	r3, [pc, #228]	@ (801198c <tcp_input+0x72c>)
 80118a8:	681a      	ldr	r2, [r3, #0]
 80118aa:	2300      	movs	r3, #0
 80118ac:	69f9      	ldr	r1, [r7, #28]
 80118ae:	47a0      	blx	r4
 80118b0:	4603      	mov	r3, r0
 80118b2:	74fb      	strb	r3, [r7, #19]
 80118b4:	e008      	b.n	80118c8 <tcp_input+0x668>
 80118b6:	4b35      	ldr	r3, [pc, #212]	@ (801198c <tcp_input+0x72c>)
 80118b8:	681a      	ldr	r2, [r3, #0]
 80118ba:	2300      	movs	r3, #0
 80118bc:	69f9      	ldr	r1, [r7, #28]
 80118be:	2000      	movs	r0, #0
 80118c0:	f7ff f890 	bl	80109e4 <tcp_recv_null>
 80118c4:	4603      	mov	r3, r0
 80118c6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80118c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80118cc:	f113 0f0d 	cmn.w	r3, #13
 80118d0:	d053      	beq.n	801197a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80118d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d003      	beq.n	80118e2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80118da:	4b2c      	ldr	r3, [pc, #176]	@ (801198c <tcp_input+0x72c>)
 80118dc:	681a      	ldr	r2, [r3, #0]
 80118de:	69fb      	ldr	r3, [r7, #28]
 80118e0:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80118e2:	4b2b      	ldr	r3, [pc, #172]	@ (8011990 <tcp_input+0x730>)
 80118e4:	781b      	ldrb	r3, [r3, #0]
 80118e6:	f003 0320 	and.w	r3, r3, #32
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d030      	beq.n	8011950 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80118ee:	69fb      	ldr	r3, [r7, #28]
 80118f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d009      	beq.n	801190a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80118f6:	69fb      	ldr	r3, [r7, #28]
 80118f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80118fa:	7b5a      	ldrb	r2, [r3, #13]
 80118fc:	69fb      	ldr	r3, [r7, #28]
 80118fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011900:	f042 0220 	orr.w	r2, r2, #32
 8011904:	b2d2      	uxtb	r2, r2
 8011906:	735a      	strb	r2, [r3, #13]
 8011908:	e022      	b.n	8011950 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801190a:	69fb      	ldr	r3, [r7, #28]
 801190c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801190e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8011912:	d005      	beq.n	8011920 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8011914:	69fb      	ldr	r3, [r7, #28]
 8011916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011918:	3301      	adds	r3, #1
 801191a:	b29a      	uxth	r2, r3
 801191c:	69fb      	ldr	r3, [r7, #28]
 801191e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011920:	69fb      	ldr	r3, [r7, #28]
 8011922:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011926:	2b00      	cmp	r3, #0
 8011928:	d00b      	beq.n	8011942 <tcp_input+0x6e2>
 801192a:	69fb      	ldr	r3, [r7, #28]
 801192c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011930:	69fb      	ldr	r3, [r7, #28]
 8011932:	6918      	ldr	r0, [r3, #16]
 8011934:	2300      	movs	r3, #0
 8011936:	2200      	movs	r2, #0
 8011938:	69f9      	ldr	r1, [r7, #28]
 801193a:	47a0      	blx	r4
 801193c:	4603      	mov	r3, r0
 801193e:	74fb      	strb	r3, [r7, #19]
 8011940:	e001      	b.n	8011946 <tcp_input+0x6e6>
 8011942:	2300      	movs	r3, #0
 8011944:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011946:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801194a:	f113 0f0d 	cmn.w	r3, #13
 801194e:	d016      	beq.n	801197e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011950:	4b13      	ldr	r3, [pc, #76]	@ (80119a0 <tcp_input+0x740>)
 8011952:	2200      	movs	r2, #0
 8011954:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011956:	69f8      	ldr	r0, [r7, #28]
 8011958:	f000 f88e 	bl	8011a78 <tcp_input_delayed_close>
 801195c:	4603      	mov	r3, r0
 801195e:	2b00      	cmp	r3, #0
 8011960:	d128      	bne.n	80119b4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011962:	69f8      	ldr	r0, [r7, #28]
 8011964:	f002 ff1a 	bl	801479c <tcp_output>
 8011968:	e025      	b.n	80119b6 <tcp_input+0x756>
        goto aborted;
 801196a:	bf00      	nop
 801196c:	e023      	b.n	80119b6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801196e:	bf00      	nop
 8011970:	e021      	b.n	80119b6 <tcp_input+0x756>
              goto aborted;
 8011972:	bf00      	nop
 8011974:	e01f      	b.n	80119b6 <tcp_input+0x756>
          goto aborted;
 8011976:	bf00      	nop
 8011978:	e01d      	b.n	80119b6 <tcp_input+0x756>
            goto aborted;
 801197a:	bf00      	nop
 801197c:	e01b      	b.n	80119b6 <tcp_input+0x756>
              goto aborted;
 801197e:	bf00      	nop
 8011980:	e019      	b.n	80119b6 <tcp_input+0x756>
 8011982:	bf00      	nop
 8011984:	2001031c 	.word	0x2001031c
 8011988:	2001032c 	.word	0x2001032c
 801198c:	2001034c 	.word	0x2001034c
 8011990:	20010349 	.word	0x20010349
 8011994:	20010344 	.word	0x20010344
 8011998:	20010348 	.word	0x20010348
 801199c:	20010346 	.word	0x20010346
 80119a0:	20010350 	.word	0x20010350
 80119a4:	20010310 	.word	0x20010310
 80119a8:	0802b49c 	.word	0x0802b49c
 80119ac:	0802b650 	.word	0x0802b650
 80119b0:	0802b4e8 	.word	0x0802b4e8
          goto aborted;
 80119b4:	bf00      	nop
    tcp_input_pcb = NULL;
 80119b6:	4b27      	ldr	r3, [pc, #156]	@ (8011a54 <tcp_input+0x7f4>)
 80119b8:	2200      	movs	r2, #0
 80119ba:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80119bc:	4b26      	ldr	r3, [pc, #152]	@ (8011a58 <tcp_input+0x7f8>)
 80119be:	2200      	movs	r2, #0
 80119c0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80119c2:	4b26      	ldr	r3, [pc, #152]	@ (8011a5c <tcp_input+0x7fc>)
 80119c4:	685b      	ldr	r3, [r3, #4]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d03f      	beq.n	8011a4a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80119ca:	4b24      	ldr	r3, [pc, #144]	@ (8011a5c <tcp_input+0x7fc>)
 80119cc:	685b      	ldr	r3, [r3, #4]
 80119ce:	4618      	mov	r0, r3
 80119d0:	f7fd fbde 	bl	800f190 <pbuf_free>
      inseg.p = NULL;
 80119d4:	4b21      	ldr	r3, [pc, #132]	@ (8011a5c <tcp_input+0x7fc>)
 80119d6:	2200      	movs	r2, #0
 80119d8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80119da:	e036      	b.n	8011a4a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80119dc:	4b20      	ldr	r3, [pc, #128]	@ (8011a60 <tcp_input+0x800>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	899b      	ldrh	r3, [r3, #12]
 80119e2:	b29b      	uxth	r3, r3
 80119e4:	4618      	mov	r0, r3
 80119e6:	f7fb ff7b 	bl	800d8e0 <lwip_htons>
 80119ea:	4603      	mov	r3, r0
 80119ec:	b2db      	uxtb	r3, r3
 80119ee:	f003 0304 	and.w	r3, r3, #4
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d118      	bne.n	8011a28 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80119f6:	4b1b      	ldr	r3, [pc, #108]	@ (8011a64 <tcp_input+0x804>)
 80119f8:	6819      	ldr	r1, [r3, #0]
 80119fa:	4b1b      	ldr	r3, [pc, #108]	@ (8011a68 <tcp_input+0x808>)
 80119fc:	881b      	ldrh	r3, [r3, #0]
 80119fe:	461a      	mov	r2, r3
 8011a00:	4b1a      	ldr	r3, [pc, #104]	@ (8011a6c <tcp_input+0x80c>)
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011a06:	4b16      	ldr	r3, [pc, #88]	@ (8011a60 <tcp_input+0x800>)
 8011a08:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a0a:	885b      	ldrh	r3, [r3, #2]
 8011a0c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011a0e:	4a14      	ldr	r2, [pc, #80]	@ (8011a60 <tcp_input+0x800>)
 8011a10:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a12:	8812      	ldrh	r2, [r2, #0]
 8011a14:	b292      	uxth	r2, r2
 8011a16:	9202      	str	r2, [sp, #8]
 8011a18:	9301      	str	r3, [sp, #4]
 8011a1a:	4b15      	ldr	r3, [pc, #84]	@ (8011a70 <tcp_input+0x810>)
 8011a1c:	9300      	str	r3, [sp, #0]
 8011a1e:	4b15      	ldr	r3, [pc, #84]	@ (8011a74 <tcp_input+0x814>)
 8011a20:	4602      	mov	r2, r0
 8011a22:	2000      	movs	r0, #0
 8011a24:	f003 fc6e 	bl	8015304 <tcp_rst>
    pbuf_free(p);
 8011a28:	6878      	ldr	r0, [r7, #4]
 8011a2a:	f7fd fbb1 	bl	800f190 <pbuf_free>
  return;
 8011a2e:	e00c      	b.n	8011a4a <tcp_input+0x7ea>
    goto dropped;
 8011a30:	bf00      	nop
 8011a32:	e006      	b.n	8011a42 <tcp_input+0x7e2>
    goto dropped;
 8011a34:	bf00      	nop
 8011a36:	e004      	b.n	8011a42 <tcp_input+0x7e2>
    goto dropped;
 8011a38:	bf00      	nop
 8011a3a:	e002      	b.n	8011a42 <tcp_input+0x7e2>
      goto dropped;
 8011a3c:	bf00      	nop
 8011a3e:	e000      	b.n	8011a42 <tcp_input+0x7e2>
      goto dropped;
 8011a40:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f7fd fba4 	bl	800f190 <pbuf_free>
 8011a48:	e000      	b.n	8011a4c <tcp_input+0x7ec>
  return;
 8011a4a:	bf00      	nop
}
 8011a4c:	3724      	adds	r7, #36	@ 0x24
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	bd90      	pop	{r4, r7, pc}
 8011a52:	bf00      	nop
 8011a54:	20010350 	.word	0x20010350
 8011a58:	2001034c 	.word	0x2001034c
 8011a5c:	2001031c 	.word	0x2001031c
 8011a60:	2001032c 	.word	0x2001032c
 8011a64:	20010340 	.word	0x20010340
 8011a68:	20010346 	.word	0x20010346
 8011a6c:	2001033c 	.word	0x2001033c
 8011a70:	2000d0a4 	.word	0x2000d0a4
 8011a74:	2000d0a8 	.word	0x2000d0a8

08011a78 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b082      	sub	sp, #8
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d106      	bne.n	8011a94 <tcp_input_delayed_close+0x1c>
 8011a86:	4b17      	ldr	r3, [pc, #92]	@ (8011ae4 <tcp_input_delayed_close+0x6c>)
 8011a88:	f240 225a 	movw	r2, #602	@ 0x25a
 8011a8c:	4916      	ldr	r1, [pc, #88]	@ (8011ae8 <tcp_input_delayed_close+0x70>)
 8011a8e:	4817      	ldr	r0, [pc, #92]	@ (8011aec <tcp_input_delayed_close+0x74>)
 8011a90:	f016 fa50 	bl	8027f34 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011a94:	4b16      	ldr	r3, [pc, #88]	@ (8011af0 <tcp_input_delayed_close+0x78>)
 8011a96:	781b      	ldrb	r3, [r3, #0]
 8011a98:	f003 0310 	and.w	r3, r3, #16
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d01c      	beq.n	8011ada <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	8b5b      	ldrh	r3, [r3, #26]
 8011aa4:	f003 0310 	and.w	r3, r3, #16
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d10d      	bne.n	8011ac8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d008      	beq.n	8011ac8 <tcp_input_delayed_close+0x50>
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011abc:	687a      	ldr	r2, [r7, #4]
 8011abe:	6912      	ldr	r2, [r2, #16]
 8011ac0:	f06f 010e 	mvn.w	r1, #14
 8011ac4:	4610      	mov	r0, r2
 8011ac6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011ac8:	6879      	ldr	r1, [r7, #4]
 8011aca:	480a      	ldr	r0, [pc, #40]	@ (8011af4 <tcp_input_delayed_close+0x7c>)
 8011acc:	f7ff fa50 	bl	8010f70 <tcp_pcb_remove>
    tcp_free(pcb);
 8011ad0:	6878      	ldr	r0, [r7, #4]
 8011ad2:	f7fd fe19 	bl	800f708 <tcp_free>
    return 1;
 8011ad6:	2301      	movs	r3, #1
 8011ad8:	e000      	b.n	8011adc <tcp_input_delayed_close+0x64>
  }
  return 0;
 8011ada:	2300      	movs	r3, #0
}
 8011adc:	4618      	mov	r0, r3
 8011ade:	3708      	adds	r7, #8
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	bd80      	pop	{r7, pc}
 8011ae4:	0802b49c 	.word	0x0802b49c
 8011ae8:	0802b66c 	.word	0x0802b66c
 8011aec:	0802b4e8 	.word	0x0802b4e8
 8011af0:	20010349 	.word	0x20010349
 8011af4:	20010310 	.word	0x20010310

08011af8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011af8:	b590      	push	{r4, r7, lr}
 8011afa:	b08b      	sub	sp, #44	@ 0x2c
 8011afc:	af04      	add	r7, sp, #16
 8011afe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011b00:	4b6f      	ldr	r3, [pc, #444]	@ (8011cc0 <tcp_listen_input+0x1c8>)
 8011b02:	781b      	ldrb	r3, [r3, #0]
 8011b04:	f003 0304 	and.w	r3, r3, #4
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	f040 80d2 	bne.w	8011cb2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d106      	bne.n	8011b22 <tcp_listen_input+0x2a>
 8011b14:	4b6b      	ldr	r3, [pc, #428]	@ (8011cc4 <tcp_listen_input+0x1cc>)
 8011b16:	f240 2281 	movw	r2, #641	@ 0x281
 8011b1a:	496b      	ldr	r1, [pc, #428]	@ (8011cc8 <tcp_listen_input+0x1d0>)
 8011b1c:	486b      	ldr	r0, [pc, #428]	@ (8011ccc <tcp_listen_input+0x1d4>)
 8011b1e:	f016 fa09 	bl	8027f34 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011b22:	4b67      	ldr	r3, [pc, #412]	@ (8011cc0 <tcp_listen_input+0x1c8>)
 8011b24:	781b      	ldrb	r3, [r3, #0]
 8011b26:	f003 0310 	and.w	r3, r3, #16
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d019      	beq.n	8011b62 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b2e:	4b68      	ldr	r3, [pc, #416]	@ (8011cd0 <tcp_listen_input+0x1d8>)
 8011b30:	6819      	ldr	r1, [r3, #0]
 8011b32:	4b68      	ldr	r3, [pc, #416]	@ (8011cd4 <tcp_listen_input+0x1dc>)
 8011b34:	881b      	ldrh	r3, [r3, #0]
 8011b36:	461a      	mov	r2, r3
 8011b38:	4b67      	ldr	r3, [pc, #412]	@ (8011cd8 <tcp_listen_input+0x1e0>)
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011b3e:	4b67      	ldr	r3, [pc, #412]	@ (8011cdc <tcp_listen_input+0x1e4>)
 8011b40:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b42:	885b      	ldrh	r3, [r3, #2]
 8011b44:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011b46:	4a65      	ldr	r2, [pc, #404]	@ (8011cdc <tcp_listen_input+0x1e4>)
 8011b48:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b4a:	8812      	ldrh	r2, [r2, #0]
 8011b4c:	b292      	uxth	r2, r2
 8011b4e:	9202      	str	r2, [sp, #8]
 8011b50:	9301      	str	r3, [sp, #4]
 8011b52:	4b63      	ldr	r3, [pc, #396]	@ (8011ce0 <tcp_listen_input+0x1e8>)
 8011b54:	9300      	str	r3, [sp, #0]
 8011b56:	4b63      	ldr	r3, [pc, #396]	@ (8011ce4 <tcp_listen_input+0x1ec>)
 8011b58:	4602      	mov	r2, r0
 8011b5a:	6878      	ldr	r0, [r7, #4]
 8011b5c:	f003 fbd2 	bl	8015304 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011b60:	e0a9      	b.n	8011cb6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8011b62:	4b57      	ldr	r3, [pc, #348]	@ (8011cc0 <tcp_listen_input+0x1c8>)
 8011b64:	781b      	ldrb	r3, [r3, #0]
 8011b66:	f003 0302 	and.w	r3, r3, #2
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	f000 80a3 	beq.w	8011cb6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	7d5b      	ldrb	r3, [r3, #21]
 8011b74:	4618      	mov	r0, r3
 8011b76:	f7ff f859 	bl	8010c2c <tcp_alloc>
 8011b7a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011b7c:	697b      	ldr	r3, [r7, #20]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d111      	bne.n	8011ba6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	699b      	ldr	r3, [r3, #24]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d00a      	beq.n	8011ba0 <tcp_listen_input+0xa8>
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	699b      	ldr	r3, [r3, #24]
 8011b8e:	687a      	ldr	r2, [r7, #4]
 8011b90:	6910      	ldr	r0, [r2, #16]
 8011b92:	f04f 32ff 	mov.w	r2, #4294967295
 8011b96:	2100      	movs	r1, #0
 8011b98:	4798      	blx	r3
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	73bb      	strb	r3, [r7, #14]
      return;
 8011b9e:	e08b      	b.n	8011cb8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011ba0:	23f0      	movs	r3, #240	@ 0xf0
 8011ba2:	73bb      	strb	r3, [r7, #14]
      return;
 8011ba4:	e088      	b.n	8011cb8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011ba6:	4b50      	ldr	r3, [pc, #320]	@ (8011ce8 <tcp_listen_input+0x1f0>)
 8011ba8:	695a      	ldr	r2, [r3, #20]
 8011baa:	697b      	ldr	r3, [r7, #20]
 8011bac:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011bae:	4b4e      	ldr	r3, [pc, #312]	@ (8011ce8 <tcp_listen_input+0x1f0>)
 8011bb0:	691a      	ldr	r2, [r3, #16]
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	8ada      	ldrh	r2, [r3, #22]
 8011bba:	697b      	ldr	r3, [r7, #20]
 8011bbc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011bbe:	4b47      	ldr	r3, [pc, #284]	@ (8011cdc <tcp_listen_input+0x1e4>)
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	881b      	ldrh	r3, [r3, #0]
 8011bc4:	b29a      	uxth	r2, r3
 8011bc6:	697b      	ldr	r3, [r7, #20]
 8011bc8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8011bca:	697b      	ldr	r3, [r7, #20]
 8011bcc:	2203      	movs	r2, #3
 8011bce:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011bd0:	4b41      	ldr	r3, [pc, #260]	@ (8011cd8 <tcp_listen_input+0x1e0>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	1c5a      	adds	r2, r3, #1
 8011bd6:	697b      	ldr	r3, [r7, #20]
 8011bd8:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8011bda:	697b      	ldr	r3, [r7, #20]
 8011bdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011bde:	697b      	ldr	r3, [r7, #20]
 8011be0:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8011be2:	6978      	ldr	r0, [r7, #20]
 8011be4:	f7ff fa58 	bl	8011098 <tcp_next_iss>
 8011be8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8011bea:	697b      	ldr	r3, [r7, #20]
 8011bec:	693a      	ldr	r2, [r7, #16]
 8011bee:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8011bf0:	697b      	ldr	r3, [r7, #20]
 8011bf2:	693a      	ldr	r2, [r7, #16]
 8011bf4:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8011bf6:	697b      	ldr	r3, [r7, #20]
 8011bf8:	693a      	ldr	r2, [r7, #16]
 8011bfa:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8011bfc:	697b      	ldr	r3, [r7, #20]
 8011bfe:	693a      	ldr	r2, [r7, #16]
 8011c00:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011c02:	4b35      	ldr	r3, [pc, #212]	@ (8011cd8 <tcp_listen_input+0x1e0>)
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	1e5a      	subs	r2, r3, #1
 8011c08:	697b      	ldr	r3, [r7, #20]
 8011c0a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	691a      	ldr	r2, [r3, #16]
 8011c10:	697b      	ldr	r3, [r7, #20]
 8011c12:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011c14:	697b      	ldr	r3, [r7, #20]
 8011c16:	687a      	ldr	r2, [r7, #4]
 8011c18:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	7a5b      	ldrb	r3, [r3, #9]
 8011c1e:	f003 030c 	and.w	r3, r3, #12
 8011c22:	b2da      	uxtb	r2, r3
 8011c24:	697b      	ldr	r3, [r7, #20]
 8011c26:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	7a1a      	ldrb	r2, [r3, #8]
 8011c2c:	697b      	ldr	r3, [r7, #20]
 8011c2e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011c30:	4b2e      	ldr	r3, [pc, #184]	@ (8011cec <tcp_listen_input+0x1f4>)
 8011c32:	681a      	ldr	r2, [r3, #0]
 8011c34:	697b      	ldr	r3, [r7, #20]
 8011c36:	60da      	str	r2, [r3, #12]
 8011c38:	4a2c      	ldr	r2, [pc, #176]	@ (8011cec <tcp_listen_input+0x1f4>)
 8011c3a:	697b      	ldr	r3, [r7, #20]
 8011c3c:	6013      	str	r3, [r2, #0]
 8011c3e:	f003 fd23 	bl	8015688 <tcp_timer_needed>
 8011c42:	4b2b      	ldr	r3, [pc, #172]	@ (8011cf0 <tcp_listen_input+0x1f8>)
 8011c44:	2201      	movs	r2, #1
 8011c46:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011c48:	6978      	ldr	r0, [r7, #20]
 8011c4a:	f001 fd8b 	bl	8013764 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011c4e:	4b23      	ldr	r3, [pc, #140]	@ (8011cdc <tcp_listen_input+0x1e4>)
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	89db      	ldrh	r3, [r3, #14]
 8011c54:	b29a      	uxth	r2, r3
 8011c56:	697b      	ldr	r3, [r7, #20]
 8011c58:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011c5c:	697b      	ldr	r3, [r7, #20]
 8011c5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011c62:	697b      	ldr	r3, [r7, #20]
 8011c64:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011c68:	697b      	ldr	r3, [r7, #20]
 8011c6a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8011c6c:	697b      	ldr	r3, [r7, #20]
 8011c6e:	3304      	adds	r3, #4
 8011c70:	4618      	mov	r0, r3
 8011c72:	f005 fc61 	bl	8017538 <ip4_route>
 8011c76:	4601      	mov	r1, r0
 8011c78:	697b      	ldr	r3, [r7, #20]
 8011c7a:	3304      	adds	r3, #4
 8011c7c:	461a      	mov	r2, r3
 8011c7e:	4620      	mov	r0, r4
 8011c80:	f7ff fa30 	bl	80110e4 <tcp_eff_send_mss_netif>
 8011c84:	4603      	mov	r3, r0
 8011c86:	461a      	mov	r2, r3
 8011c88:	697b      	ldr	r3, [r7, #20]
 8011c8a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011c8c:	2112      	movs	r1, #18
 8011c8e:	6978      	ldr	r0, [r7, #20]
 8011c90:	f002 fc96 	bl	80145c0 <tcp_enqueue_flags>
 8011c94:	4603      	mov	r3, r0
 8011c96:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d004      	beq.n	8011caa <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011ca0:	2100      	movs	r1, #0
 8011ca2:	6978      	ldr	r0, [r7, #20]
 8011ca4:	f7fd ffb6 	bl	800fc14 <tcp_abandon>
      return;
 8011ca8:	e006      	b.n	8011cb8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8011caa:	6978      	ldr	r0, [r7, #20]
 8011cac:	f002 fd76 	bl	801479c <tcp_output>
  return;
 8011cb0:	e001      	b.n	8011cb6 <tcp_listen_input+0x1be>
    return;
 8011cb2:	bf00      	nop
 8011cb4:	e000      	b.n	8011cb8 <tcp_listen_input+0x1c0>
  return;
 8011cb6:	bf00      	nop
}
 8011cb8:	371c      	adds	r7, #28
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd90      	pop	{r4, r7, pc}
 8011cbe:	bf00      	nop
 8011cc0:	20010348 	.word	0x20010348
 8011cc4:	0802b49c 	.word	0x0802b49c
 8011cc8:	0802b694 	.word	0x0802b694
 8011ccc:	0802b4e8 	.word	0x0802b4e8
 8011cd0:	20010340 	.word	0x20010340
 8011cd4:	20010346 	.word	0x20010346
 8011cd8:	2001033c 	.word	0x2001033c
 8011cdc:	2001032c 	.word	0x2001032c
 8011ce0:	2000d0a4 	.word	0x2000d0a4
 8011ce4:	2000d0a8 	.word	0x2000d0a8
 8011ce8:	2000d094 	.word	0x2000d094
 8011cec:	20010310 	.word	0x20010310
 8011cf0:	20010318 	.word	0x20010318

08011cf4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b086      	sub	sp, #24
 8011cf8:	af04      	add	r7, sp, #16
 8011cfa:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011cfc:	4b2f      	ldr	r3, [pc, #188]	@ (8011dbc <tcp_timewait_input+0xc8>)
 8011cfe:	781b      	ldrb	r3, [r3, #0]
 8011d00:	f003 0304 	and.w	r3, r3, #4
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d153      	bne.n	8011db0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d106      	bne.n	8011d1c <tcp_timewait_input+0x28>
 8011d0e:	4b2c      	ldr	r3, [pc, #176]	@ (8011dc0 <tcp_timewait_input+0xcc>)
 8011d10:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8011d14:	492b      	ldr	r1, [pc, #172]	@ (8011dc4 <tcp_timewait_input+0xd0>)
 8011d16:	482c      	ldr	r0, [pc, #176]	@ (8011dc8 <tcp_timewait_input+0xd4>)
 8011d18:	f016 f90c 	bl	8027f34 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011d1c:	4b27      	ldr	r3, [pc, #156]	@ (8011dbc <tcp_timewait_input+0xc8>)
 8011d1e:	781b      	ldrb	r3, [r3, #0]
 8011d20:	f003 0302 	and.w	r3, r3, #2
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d02a      	beq.n	8011d7e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011d28:	4b28      	ldr	r3, [pc, #160]	@ (8011dcc <tcp_timewait_input+0xd8>)
 8011d2a:	681a      	ldr	r2, [r3, #0]
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d30:	1ad3      	subs	r3, r2, r3
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	db2d      	blt.n	8011d92 <tcp_timewait_input+0x9e>
 8011d36:	4b25      	ldr	r3, [pc, #148]	@ (8011dcc <tcp_timewait_input+0xd8>)
 8011d38:	681a      	ldr	r2, [r3, #0]
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d3e:	6879      	ldr	r1, [r7, #4]
 8011d40:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011d42:	440b      	add	r3, r1
 8011d44:	1ad3      	subs	r3, r2, r3
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	dc23      	bgt.n	8011d92 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d4a:	4b21      	ldr	r3, [pc, #132]	@ (8011dd0 <tcp_timewait_input+0xdc>)
 8011d4c:	6819      	ldr	r1, [r3, #0]
 8011d4e:	4b21      	ldr	r3, [pc, #132]	@ (8011dd4 <tcp_timewait_input+0xe0>)
 8011d50:	881b      	ldrh	r3, [r3, #0]
 8011d52:	461a      	mov	r2, r3
 8011d54:	4b1d      	ldr	r3, [pc, #116]	@ (8011dcc <tcp_timewait_input+0xd8>)
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8011dd8 <tcp_timewait_input+0xe4>)
 8011d5c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d5e:	885b      	ldrh	r3, [r3, #2]
 8011d60:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011d62:	4a1d      	ldr	r2, [pc, #116]	@ (8011dd8 <tcp_timewait_input+0xe4>)
 8011d64:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d66:	8812      	ldrh	r2, [r2, #0]
 8011d68:	b292      	uxth	r2, r2
 8011d6a:	9202      	str	r2, [sp, #8]
 8011d6c:	9301      	str	r3, [sp, #4]
 8011d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8011ddc <tcp_timewait_input+0xe8>)
 8011d70:	9300      	str	r3, [sp, #0]
 8011d72:	4b1b      	ldr	r3, [pc, #108]	@ (8011de0 <tcp_timewait_input+0xec>)
 8011d74:	4602      	mov	r2, r0
 8011d76:	6878      	ldr	r0, [r7, #4]
 8011d78:	f003 fac4 	bl	8015304 <tcp_rst>
      return;
 8011d7c:	e01b      	b.n	8011db6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8011dbc <tcp_timewait_input+0xc8>)
 8011d80:	781b      	ldrb	r3, [r3, #0]
 8011d82:	f003 0301 	and.w	r3, r3, #1
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d003      	beq.n	8011d92 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011d8a:	4b16      	ldr	r3, [pc, #88]	@ (8011de4 <tcp_timewait_input+0xf0>)
 8011d8c:	681a      	ldr	r2, [r3, #0]
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011d92:	4b10      	ldr	r3, [pc, #64]	@ (8011dd4 <tcp_timewait_input+0xe0>)
 8011d94:	881b      	ldrh	r3, [r3, #0]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d00c      	beq.n	8011db4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	8b5b      	ldrh	r3, [r3, #26]
 8011d9e:	f043 0302 	orr.w	r3, r3, #2
 8011da2:	b29a      	uxth	r2, r3
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011da8:	6878      	ldr	r0, [r7, #4]
 8011daa:	f002 fcf7 	bl	801479c <tcp_output>
  }
  return;
 8011dae:	e001      	b.n	8011db4 <tcp_timewait_input+0xc0>
    return;
 8011db0:	bf00      	nop
 8011db2:	e000      	b.n	8011db6 <tcp_timewait_input+0xc2>
  return;
 8011db4:	bf00      	nop
}
 8011db6:	3708      	adds	r7, #8
 8011db8:	46bd      	mov	sp, r7
 8011dba:	bd80      	pop	{r7, pc}
 8011dbc:	20010348 	.word	0x20010348
 8011dc0:	0802b49c 	.word	0x0802b49c
 8011dc4:	0802b6b4 	.word	0x0802b6b4
 8011dc8:	0802b4e8 	.word	0x0802b4e8
 8011dcc:	2001033c 	.word	0x2001033c
 8011dd0:	20010340 	.word	0x20010340
 8011dd4:	20010346 	.word	0x20010346
 8011dd8:	2001032c 	.word	0x2001032c
 8011ddc:	2000d0a4 	.word	0x2000d0a4
 8011de0:	2000d0a8 	.word	0x2000d0a8
 8011de4:	20010304 	.word	0x20010304

08011de8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011de8:	b590      	push	{r4, r7, lr}
 8011dea:	b08d      	sub	sp, #52	@ 0x34
 8011dec:	af04      	add	r7, sp, #16
 8011dee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011df0:	2300      	movs	r3, #0
 8011df2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011df4:	2300      	movs	r3, #0
 8011df6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d106      	bne.n	8011e0c <tcp_process+0x24>
 8011dfe:	4b9d      	ldr	r3, [pc, #628]	@ (8012074 <tcp_process+0x28c>)
 8011e00:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8011e04:	499c      	ldr	r1, [pc, #624]	@ (8012078 <tcp_process+0x290>)
 8011e06:	489d      	ldr	r0, [pc, #628]	@ (801207c <tcp_process+0x294>)
 8011e08:	f016 f894 	bl	8027f34 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011e0c:	4b9c      	ldr	r3, [pc, #624]	@ (8012080 <tcp_process+0x298>)
 8011e0e:	781b      	ldrb	r3, [r3, #0]
 8011e10:	f003 0304 	and.w	r3, r3, #4
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d04e      	beq.n	8011eb6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	7d1b      	ldrb	r3, [r3, #20]
 8011e1c:	2b02      	cmp	r3, #2
 8011e1e:	d108      	bne.n	8011e32 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011e24:	4b97      	ldr	r3, [pc, #604]	@ (8012084 <tcp_process+0x29c>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	429a      	cmp	r2, r3
 8011e2a:	d123      	bne.n	8011e74 <tcp_process+0x8c>
        acceptable = 1;
 8011e2c:	2301      	movs	r3, #1
 8011e2e:	76fb      	strb	r3, [r7, #27]
 8011e30:	e020      	b.n	8011e74 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011e36:	4b94      	ldr	r3, [pc, #592]	@ (8012088 <tcp_process+0x2a0>)
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	d102      	bne.n	8011e44 <tcp_process+0x5c>
        acceptable = 1;
 8011e3e:	2301      	movs	r3, #1
 8011e40:	76fb      	strb	r3, [r7, #27]
 8011e42:	e017      	b.n	8011e74 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011e44:	4b90      	ldr	r3, [pc, #576]	@ (8012088 <tcp_process+0x2a0>)
 8011e46:	681a      	ldr	r2, [r3, #0]
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e4c:	1ad3      	subs	r3, r2, r3
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	db10      	blt.n	8011e74 <tcp_process+0x8c>
 8011e52:	4b8d      	ldr	r3, [pc, #564]	@ (8012088 <tcp_process+0x2a0>)
 8011e54:	681a      	ldr	r2, [r3, #0]
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e5a:	6879      	ldr	r1, [r7, #4]
 8011e5c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011e5e:	440b      	add	r3, r1
 8011e60:	1ad3      	subs	r3, r2, r3
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	dc06      	bgt.n	8011e74 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	8b5b      	ldrh	r3, [r3, #26]
 8011e6a:	f043 0302 	orr.w	r3, r3, #2
 8011e6e:	b29a      	uxth	r2, r3
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011e74:	7efb      	ldrb	r3, [r7, #27]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d01b      	beq.n	8011eb2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	7d1b      	ldrb	r3, [r3, #20]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d106      	bne.n	8011e90 <tcp_process+0xa8>
 8011e82:	4b7c      	ldr	r3, [pc, #496]	@ (8012074 <tcp_process+0x28c>)
 8011e84:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8011e88:	4980      	ldr	r1, [pc, #512]	@ (801208c <tcp_process+0x2a4>)
 8011e8a:	487c      	ldr	r0, [pc, #496]	@ (801207c <tcp_process+0x294>)
 8011e8c:	f016 f852 	bl	8027f34 <iprintf>
      recv_flags |= TF_RESET;
 8011e90:	4b7f      	ldr	r3, [pc, #508]	@ (8012090 <tcp_process+0x2a8>)
 8011e92:	781b      	ldrb	r3, [r3, #0]
 8011e94:	f043 0308 	orr.w	r3, r3, #8
 8011e98:	b2da      	uxtb	r2, r3
 8011e9a:	4b7d      	ldr	r3, [pc, #500]	@ (8012090 <tcp_process+0x2a8>)
 8011e9c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	8b5b      	ldrh	r3, [r3, #26]
 8011ea2:	f023 0301 	bic.w	r3, r3, #1
 8011ea6:	b29a      	uxth	r2, r3
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011eac:	f06f 030d 	mvn.w	r3, #13
 8011eb0:	e37a      	b.n	80125a8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	e378      	b.n	80125a8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011eb6:	4b72      	ldr	r3, [pc, #456]	@ (8012080 <tcp_process+0x298>)
 8011eb8:	781b      	ldrb	r3, [r3, #0]
 8011eba:	f003 0302 	and.w	r3, r3, #2
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d010      	beq.n	8011ee4 <tcp_process+0xfc>
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	7d1b      	ldrb	r3, [r3, #20]
 8011ec6:	2b02      	cmp	r3, #2
 8011ec8:	d00c      	beq.n	8011ee4 <tcp_process+0xfc>
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	7d1b      	ldrb	r3, [r3, #20]
 8011ece:	2b03      	cmp	r3, #3
 8011ed0:	d008      	beq.n	8011ee4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	8b5b      	ldrh	r3, [r3, #26]
 8011ed6:	f043 0302 	orr.w	r3, r3, #2
 8011eda:	b29a      	uxth	r2, r3
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	e361      	b.n	80125a8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	8b5b      	ldrh	r3, [r3, #26]
 8011ee8:	f003 0310 	and.w	r3, r3, #16
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d103      	bne.n	8011ef8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011ef0:	4b68      	ldr	r3, [pc, #416]	@ (8012094 <tcp_process+0x2ac>)
 8011ef2:	681a      	ldr	r2, [r3, #0]
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	2200      	movs	r2, #0
 8011efc:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	2200      	movs	r2, #0
 8011f04:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8011f08:	6878      	ldr	r0, [r7, #4]
 8011f0a:	f001 fc2b 	bl	8013764 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	7d1b      	ldrb	r3, [r3, #20]
 8011f12:	3b02      	subs	r3, #2
 8011f14:	2b07      	cmp	r3, #7
 8011f16:	f200 8337 	bhi.w	8012588 <tcp_process+0x7a0>
 8011f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8011f20 <tcp_process+0x138>)
 8011f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f20:	08011f41 	.word	0x08011f41
 8011f24:	08012171 	.word	0x08012171
 8011f28:	080122e9 	.word	0x080122e9
 8011f2c:	08012313 	.word	0x08012313
 8011f30:	08012437 	.word	0x08012437
 8011f34:	080122e9 	.word	0x080122e9
 8011f38:	080124c3 	.word	0x080124c3
 8011f3c:	08012553 	.word	0x08012553
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011f40:	4b4f      	ldr	r3, [pc, #316]	@ (8012080 <tcp_process+0x298>)
 8011f42:	781b      	ldrb	r3, [r3, #0]
 8011f44:	f003 0310 	and.w	r3, r3, #16
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	f000 80e4 	beq.w	8012116 <tcp_process+0x32e>
 8011f4e:	4b4c      	ldr	r3, [pc, #304]	@ (8012080 <tcp_process+0x298>)
 8011f50:	781b      	ldrb	r3, [r3, #0]
 8011f52:	f003 0302 	and.w	r3, r3, #2
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	f000 80dd 	beq.w	8012116 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f60:	1c5a      	adds	r2, r3, #1
 8011f62:	4b48      	ldr	r3, [pc, #288]	@ (8012084 <tcp_process+0x29c>)
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	429a      	cmp	r2, r3
 8011f68:	f040 80d5 	bne.w	8012116 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011f6c:	4b46      	ldr	r3, [pc, #280]	@ (8012088 <tcp_process+0x2a0>)
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	1c5a      	adds	r2, r3, #1
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8011f7e:	4b41      	ldr	r3, [pc, #260]	@ (8012084 <tcp_process+0x29c>)
 8011f80:	681a      	ldr	r2, [r3, #0]
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8011f86:	4b44      	ldr	r3, [pc, #272]	@ (8012098 <tcp_process+0x2b0>)
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	89db      	ldrh	r3, [r3, #14]
 8011f8c:	b29a      	uxth	r2, r3
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011fa0:	4b39      	ldr	r3, [pc, #228]	@ (8012088 <tcp_process+0x2a0>)
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	1e5a      	subs	r2, r3, #1
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	2204      	movs	r2, #4
 8011fae:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	3304      	adds	r3, #4
 8011fb8:	4618      	mov	r0, r3
 8011fba:	f005 fabd 	bl	8017538 <ip4_route>
 8011fbe:	4601      	mov	r1, r0
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	3304      	adds	r3, #4
 8011fc4:	461a      	mov	r2, r3
 8011fc6:	4620      	mov	r0, r4
 8011fc8:	f7ff f88c 	bl	80110e4 <tcp_eff_send_mss_netif>
 8011fcc:	4603      	mov	r3, r0
 8011fce:	461a      	mov	r2, r3
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011fd8:	009a      	lsls	r2, r3, #2
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011fde:	005b      	lsls	r3, r3, #1
 8011fe0:	f241 111c 	movw	r1, #4380	@ 0x111c
 8011fe4:	428b      	cmp	r3, r1
 8011fe6:	bf38      	it	cc
 8011fe8:	460b      	movcc	r3, r1
 8011fea:	429a      	cmp	r2, r3
 8011fec:	d204      	bcs.n	8011ff8 <tcp_process+0x210>
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011ff2:	009b      	lsls	r3, r3, #2
 8011ff4:	b29b      	uxth	r3, r3
 8011ff6:	e00d      	b.n	8012014 <tcp_process+0x22c>
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011ffc:	005b      	lsls	r3, r3, #1
 8011ffe:	f241 121c 	movw	r2, #4380	@ 0x111c
 8012002:	4293      	cmp	r3, r2
 8012004:	d904      	bls.n	8012010 <tcp_process+0x228>
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801200a:	005b      	lsls	r3, r3, #1
 801200c:	b29b      	uxth	r3, r3
 801200e:	e001      	b.n	8012014 <tcp_process+0x22c>
 8012010:	f241 131c 	movw	r3, #4380	@ 0x111c
 8012014:	687a      	ldr	r2, [r7, #4]
 8012016:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012020:	2b00      	cmp	r3, #0
 8012022:	d106      	bne.n	8012032 <tcp_process+0x24a>
 8012024:	4b13      	ldr	r3, [pc, #76]	@ (8012074 <tcp_process+0x28c>)
 8012026:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801202a:	491c      	ldr	r1, [pc, #112]	@ (801209c <tcp_process+0x2b4>)
 801202c:	4813      	ldr	r0, [pc, #76]	@ (801207c <tcp_process+0x294>)
 801202e:	f015 ff81 	bl	8027f34 <iprintf>
        --pcb->snd_queuelen;
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012038:	3b01      	subs	r3, #1
 801203a:	b29a      	uxth	r2, r3
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012046:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8012048:	69fb      	ldr	r3, [r7, #28]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d12a      	bne.n	80120a4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012052:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8012054:	69fb      	ldr	r3, [r7, #28]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d106      	bne.n	8012068 <tcp_process+0x280>
 801205a:	4b06      	ldr	r3, [pc, #24]	@ (8012074 <tcp_process+0x28c>)
 801205c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8012060:	490f      	ldr	r1, [pc, #60]	@ (80120a0 <tcp_process+0x2b8>)
 8012062:	4806      	ldr	r0, [pc, #24]	@ (801207c <tcp_process+0x294>)
 8012064:	f015 ff66 	bl	8027f34 <iprintf>
          pcb->unsent = rseg->next;
 8012068:	69fb      	ldr	r3, [r7, #28]
 801206a:	681a      	ldr	r2, [r3, #0]
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8012070:	e01c      	b.n	80120ac <tcp_process+0x2c4>
 8012072:	bf00      	nop
 8012074:	0802b49c 	.word	0x0802b49c
 8012078:	0802b6d4 	.word	0x0802b6d4
 801207c:	0802b4e8 	.word	0x0802b4e8
 8012080:	20010348 	.word	0x20010348
 8012084:	20010340 	.word	0x20010340
 8012088:	2001033c 	.word	0x2001033c
 801208c:	0802b6f0 	.word	0x0802b6f0
 8012090:	20010349 	.word	0x20010349
 8012094:	20010304 	.word	0x20010304
 8012098:	2001032c 	.word	0x2001032c
 801209c:	0802b710 	.word	0x0802b710
 80120a0:	0802b728 	.word	0x0802b728
        } else {
          pcb->unacked = rseg->next;
 80120a4:	69fb      	ldr	r3, [r7, #28]
 80120a6:	681a      	ldr	r2, [r3, #0]
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80120ac:	69f8      	ldr	r0, [r7, #28]
 80120ae:	f7fe fc54 	bl	801095a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d104      	bne.n	80120c4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80120c0:	861a      	strh	r2, [r3, #48]	@ 0x30
 80120c2:	e006      	b.n	80120d2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2200      	movs	r2, #0
 80120c8:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	2200      	movs	r2, #0
 80120ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d00a      	beq.n	80120f2 <tcp_process+0x30a>
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80120e2:	687a      	ldr	r2, [r7, #4]
 80120e4:	6910      	ldr	r0, [r2, #16]
 80120e6:	2200      	movs	r2, #0
 80120e8:	6879      	ldr	r1, [r7, #4]
 80120ea:	4798      	blx	r3
 80120ec:	4603      	mov	r3, r0
 80120ee:	76bb      	strb	r3, [r7, #26]
 80120f0:	e001      	b.n	80120f6 <tcp_process+0x30e>
 80120f2:	2300      	movs	r3, #0
 80120f4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80120f6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80120fa:	f113 0f0d 	cmn.w	r3, #13
 80120fe:	d102      	bne.n	8012106 <tcp_process+0x31e>
          return ERR_ABRT;
 8012100:	f06f 030c 	mvn.w	r3, #12
 8012104:	e250      	b.n	80125a8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	8b5b      	ldrh	r3, [r3, #26]
 801210a:	f043 0302 	orr.w	r3, r3, #2
 801210e:	b29a      	uxth	r2, r3
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8012114:	e23a      	b.n	801258c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8012116:	4b98      	ldr	r3, [pc, #608]	@ (8012378 <tcp_process+0x590>)
 8012118:	781b      	ldrb	r3, [r3, #0]
 801211a:	f003 0310 	and.w	r3, r3, #16
 801211e:	2b00      	cmp	r3, #0
 8012120:	f000 8234 	beq.w	801258c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012124:	4b95      	ldr	r3, [pc, #596]	@ (801237c <tcp_process+0x594>)
 8012126:	6819      	ldr	r1, [r3, #0]
 8012128:	4b95      	ldr	r3, [pc, #596]	@ (8012380 <tcp_process+0x598>)
 801212a:	881b      	ldrh	r3, [r3, #0]
 801212c:	461a      	mov	r2, r3
 801212e:	4b95      	ldr	r3, [pc, #596]	@ (8012384 <tcp_process+0x59c>)
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012134:	4b94      	ldr	r3, [pc, #592]	@ (8012388 <tcp_process+0x5a0>)
 8012136:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012138:	885b      	ldrh	r3, [r3, #2]
 801213a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801213c:	4a92      	ldr	r2, [pc, #584]	@ (8012388 <tcp_process+0x5a0>)
 801213e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012140:	8812      	ldrh	r2, [r2, #0]
 8012142:	b292      	uxth	r2, r2
 8012144:	9202      	str	r2, [sp, #8]
 8012146:	9301      	str	r3, [sp, #4]
 8012148:	4b90      	ldr	r3, [pc, #576]	@ (801238c <tcp_process+0x5a4>)
 801214a:	9300      	str	r3, [sp, #0]
 801214c:	4b90      	ldr	r3, [pc, #576]	@ (8012390 <tcp_process+0x5a8>)
 801214e:	4602      	mov	r2, r0
 8012150:	6878      	ldr	r0, [r7, #4]
 8012152:	f003 f8d7 	bl	8015304 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801215c:	2b05      	cmp	r3, #5
 801215e:	f200 8215 	bhi.w	801258c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	2200      	movs	r2, #0
 8012166:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8012168:	6878      	ldr	r0, [r7, #4]
 801216a:	f002 fea3 	bl	8014eb4 <tcp_rexmit_rto>
      break;
 801216e:	e20d      	b.n	801258c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8012170:	4b81      	ldr	r3, [pc, #516]	@ (8012378 <tcp_process+0x590>)
 8012172:	781b      	ldrb	r3, [r3, #0]
 8012174:	f003 0310 	and.w	r3, r3, #16
 8012178:	2b00      	cmp	r3, #0
 801217a:	f000 80a1 	beq.w	80122c0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801217e:	4b7f      	ldr	r3, [pc, #508]	@ (801237c <tcp_process+0x594>)
 8012180:	681a      	ldr	r2, [r3, #0]
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012186:	1ad3      	subs	r3, r2, r3
 8012188:	3b01      	subs	r3, #1
 801218a:	2b00      	cmp	r3, #0
 801218c:	db7e      	blt.n	801228c <tcp_process+0x4a4>
 801218e:	4b7b      	ldr	r3, [pc, #492]	@ (801237c <tcp_process+0x594>)
 8012190:	681a      	ldr	r2, [r3, #0]
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012196:	1ad3      	subs	r3, r2, r3
 8012198:	2b00      	cmp	r3, #0
 801219a:	dc77      	bgt.n	801228c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	2204      	movs	r2, #4
 80121a0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d102      	bne.n	80121b0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80121aa:	23fa      	movs	r3, #250	@ 0xfa
 80121ac:	76bb      	strb	r3, [r7, #26]
 80121ae:	e01d      	b.n	80121ec <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80121b4:	699b      	ldr	r3, [r3, #24]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d106      	bne.n	80121c8 <tcp_process+0x3e0>
 80121ba:	4b76      	ldr	r3, [pc, #472]	@ (8012394 <tcp_process+0x5ac>)
 80121bc:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80121c0:	4975      	ldr	r1, [pc, #468]	@ (8012398 <tcp_process+0x5b0>)
 80121c2:	4876      	ldr	r0, [pc, #472]	@ (801239c <tcp_process+0x5b4>)
 80121c4:	f015 feb6 	bl	8027f34 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80121cc:	699b      	ldr	r3, [r3, #24]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d00a      	beq.n	80121e8 <tcp_process+0x400>
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80121d6:	699b      	ldr	r3, [r3, #24]
 80121d8:	687a      	ldr	r2, [r7, #4]
 80121da:	6910      	ldr	r0, [r2, #16]
 80121dc:	2200      	movs	r2, #0
 80121de:	6879      	ldr	r1, [r7, #4]
 80121e0:	4798      	blx	r3
 80121e2:	4603      	mov	r3, r0
 80121e4:	76bb      	strb	r3, [r7, #26]
 80121e6:	e001      	b.n	80121ec <tcp_process+0x404>
 80121e8:	23f0      	movs	r3, #240	@ 0xf0
 80121ea:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80121ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d00a      	beq.n	801220a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80121f4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80121f8:	f113 0f0d 	cmn.w	r3, #13
 80121fc:	d002      	beq.n	8012204 <tcp_process+0x41c>
              tcp_abort(pcb);
 80121fe:	6878      	ldr	r0, [r7, #4]
 8012200:	f7fd fdc6 	bl	800fd90 <tcp_abort>
            }
            return ERR_ABRT;
 8012204:	f06f 030c 	mvn.w	r3, #12
 8012208:	e1ce      	b.n	80125a8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801220a:	6878      	ldr	r0, [r7, #4]
 801220c:	f000 fae0 	bl	80127d0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8012210:	4b63      	ldr	r3, [pc, #396]	@ (80123a0 <tcp_process+0x5b8>)
 8012212:	881b      	ldrh	r3, [r3, #0]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d005      	beq.n	8012224 <tcp_process+0x43c>
            recv_acked--;
 8012218:	4b61      	ldr	r3, [pc, #388]	@ (80123a0 <tcp_process+0x5b8>)
 801221a:	881b      	ldrh	r3, [r3, #0]
 801221c:	3b01      	subs	r3, #1
 801221e:	b29a      	uxth	r2, r3
 8012220:	4b5f      	ldr	r3, [pc, #380]	@ (80123a0 <tcp_process+0x5b8>)
 8012222:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012228:	009a      	lsls	r2, r3, #2
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801222e:	005b      	lsls	r3, r3, #1
 8012230:	f241 111c 	movw	r1, #4380	@ 0x111c
 8012234:	428b      	cmp	r3, r1
 8012236:	bf38      	it	cc
 8012238:	460b      	movcc	r3, r1
 801223a:	429a      	cmp	r2, r3
 801223c:	d204      	bcs.n	8012248 <tcp_process+0x460>
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012242:	009b      	lsls	r3, r3, #2
 8012244:	b29b      	uxth	r3, r3
 8012246:	e00d      	b.n	8012264 <tcp_process+0x47c>
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801224c:	005b      	lsls	r3, r3, #1
 801224e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8012252:	4293      	cmp	r3, r2
 8012254:	d904      	bls.n	8012260 <tcp_process+0x478>
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801225a:	005b      	lsls	r3, r3, #1
 801225c:	b29b      	uxth	r3, r3
 801225e:	e001      	b.n	8012264 <tcp_process+0x47c>
 8012260:	f241 131c 	movw	r3, #4380	@ 0x111c
 8012264:	687a      	ldr	r2, [r7, #4]
 8012266:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801226a:	4b4e      	ldr	r3, [pc, #312]	@ (80123a4 <tcp_process+0x5bc>)
 801226c:	781b      	ldrb	r3, [r3, #0]
 801226e:	f003 0320 	and.w	r3, r3, #32
 8012272:	2b00      	cmp	r3, #0
 8012274:	d037      	beq.n	80122e6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	8b5b      	ldrh	r3, [r3, #26]
 801227a:	f043 0302 	orr.w	r3, r3, #2
 801227e:	b29a      	uxth	r2, r3
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	2207      	movs	r2, #7
 8012288:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801228a:	e02c      	b.n	80122e6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801228c:	4b3b      	ldr	r3, [pc, #236]	@ (801237c <tcp_process+0x594>)
 801228e:	6819      	ldr	r1, [r3, #0]
 8012290:	4b3b      	ldr	r3, [pc, #236]	@ (8012380 <tcp_process+0x598>)
 8012292:	881b      	ldrh	r3, [r3, #0]
 8012294:	461a      	mov	r2, r3
 8012296:	4b3b      	ldr	r3, [pc, #236]	@ (8012384 <tcp_process+0x59c>)
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801229c:	4b3a      	ldr	r3, [pc, #232]	@ (8012388 <tcp_process+0x5a0>)
 801229e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80122a0:	885b      	ldrh	r3, [r3, #2]
 80122a2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80122a4:	4a38      	ldr	r2, [pc, #224]	@ (8012388 <tcp_process+0x5a0>)
 80122a6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80122a8:	8812      	ldrh	r2, [r2, #0]
 80122aa:	b292      	uxth	r2, r2
 80122ac:	9202      	str	r2, [sp, #8]
 80122ae:	9301      	str	r3, [sp, #4]
 80122b0:	4b36      	ldr	r3, [pc, #216]	@ (801238c <tcp_process+0x5a4>)
 80122b2:	9300      	str	r3, [sp, #0]
 80122b4:	4b36      	ldr	r3, [pc, #216]	@ (8012390 <tcp_process+0x5a8>)
 80122b6:	4602      	mov	r2, r0
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f003 f823 	bl	8015304 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80122be:	e167      	b.n	8012590 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80122c0:	4b2d      	ldr	r3, [pc, #180]	@ (8012378 <tcp_process+0x590>)
 80122c2:	781b      	ldrb	r3, [r3, #0]
 80122c4:	f003 0302 	and.w	r3, r3, #2
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	f000 8161 	beq.w	8012590 <tcp_process+0x7a8>
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122d2:	1e5a      	subs	r2, r3, #1
 80122d4:	4b2b      	ldr	r3, [pc, #172]	@ (8012384 <tcp_process+0x59c>)
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	429a      	cmp	r2, r3
 80122da:	f040 8159 	bne.w	8012590 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80122de:	6878      	ldr	r0, [r7, #4]
 80122e0:	f002 fe0a 	bl	8014ef8 <tcp_rexmit>
      break;
 80122e4:	e154      	b.n	8012590 <tcp_process+0x7a8>
 80122e6:	e153      	b.n	8012590 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80122e8:	6878      	ldr	r0, [r7, #4]
 80122ea:	f000 fa71 	bl	80127d0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80122ee:	4b2d      	ldr	r3, [pc, #180]	@ (80123a4 <tcp_process+0x5bc>)
 80122f0:	781b      	ldrb	r3, [r3, #0]
 80122f2:	f003 0320 	and.w	r3, r3, #32
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	f000 814c 	beq.w	8012594 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	8b5b      	ldrh	r3, [r3, #26]
 8012300:	f043 0302 	orr.w	r3, r3, #2
 8012304:	b29a      	uxth	r2, r3
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	2207      	movs	r2, #7
 801230e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012310:	e140      	b.n	8012594 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8012312:	6878      	ldr	r0, [r7, #4]
 8012314:	f000 fa5c 	bl	80127d0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012318:	4b22      	ldr	r3, [pc, #136]	@ (80123a4 <tcp_process+0x5bc>)
 801231a:	781b      	ldrb	r3, [r3, #0]
 801231c:	f003 0320 	and.w	r3, r3, #32
 8012320:	2b00      	cmp	r3, #0
 8012322:	d071      	beq.n	8012408 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012324:	4b14      	ldr	r3, [pc, #80]	@ (8012378 <tcp_process+0x590>)
 8012326:	781b      	ldrb	r3, [r3, #0]
 8012328:	f003 0310 	and.w	r3, r3, #16
 801232c:	2b00      	cmp	r3, #0
 801232e:	d060      	beq.n	80123f2 <tcp_process+0x60a>
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012334:	4b11      	ldr	r3, [pc, #68]	@ (801237c <tcp_process+0x594>)
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	429a      	cmp	r2, r3
 801233a:	d15a      	bne.n	80123f2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012340:	2b00      	cmp	r3, #0
 8012342:	d156      	bne.n	80123f2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	8b5b      	ldrh	r3, [r3, #26]
 8012348:	f043 0302 	orr.w	r3, r3, #2
 801234c:	b29a      	uxth	r2, r3
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8012352:	6878      	ldr	r0, [r7, #4]
 8012354:	f7fe fdbc 	bl	8010ed0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8012358:	4b13      	ldr	r3, [pc, #76]	@ (80123a8 <tcp_process+0x5c0>)
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	687a      	ldr	r2, [r7, #4]
 801235e:	429a      	cmp	r2, r3
 8012360:	d105      	bne.n	801236e <tcp_process+0x586>
 8012362:	4b11      	ldr	r3, [pc, #68]	@ (80123a8 <tcp_process+0x5c0>)
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	68db      	ldr	r3, [r3, #12]
 8012368:	4a0f      	ldr	r2, [pc, #60]	@ (80123a8 <tcp_process+0x5c0>)
 801236a:	6013      	str	r3, [r2, #0]
 801236c:	e02e      	b.n	80123cc <tcp_process+0x5e4>
 801236e:	4b0e      	ldr	r3, [pc, #56]	@ (80123a8 <tcp_process+0x5c0>)
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	617b      	str	r3, [r7, #20]
 8012374:	e027      	b.n	80123c6 <tcp_process+0x5de>
 8012376:	bf00      	nop
 8012378:	20010348 	.word	0x20010348
 801237c:	20010340 	.word	0x20010340
 8012380:	20010346 	.word	0x20010346
 8012384:	2001033c 	.word	0x2001033c
 8012388:	2001032c 	.word	0x2001032c
 801238c:	2000d0a4 	.word	0x2000d0a4
 8012390:	2000d0a8 	.word	0x2000d0a8
 8012394:	0802b49c 	.word	0x0802b49c
 8012398:	0802b73c 	.word	0x0802b73c
 801239c:	0802b4e8 	.word	0x0802b4e8
 80123a0:	20010344 	.word	0x20010344
 80123a4:	20010349 	.word	0x20010349
 80123a8:	20010310 	.word	0x20010310
 80123ac:	697b      	ldr	r3, [r7, #20]
 80123ae:	68db      	ldr	r3, [r3, #12]
 80123b0:	687a      	ldr	r2, [r7, #4]
 80123b2:	429a      	cmp	r2, r3
 80123b4:	d104      	bne.n	80123c0 <tcp_process+0x5d8>
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	68da      	ldr	r2, [r3, #12]
 80123ba:	697b      	ldr	r3, [r7, #20]
 80123bc:	60da      	str	r2, [r3, #12]
 80123be:	e005      	b.n	80123cc <tcp_process+0x5e4>
 80123c0:	697b      	ldr	r3, [r7, #20]
 80123c2:	68db      	ldr	r3, [r3, #12]
 80123c4:	617b      	str	r3, [r7, #20]
 80123c6:	697b      	ldr	r3, [r7, #20]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d1ef      	bne.n	80123ac <tcp_process+0x5c4>
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	2200      	movs	r2, #0
 80123d0:	60da      	str	r2, [r3, #12]
 80123d2:	4b77      	ldr	r3, [pc, #476]	@ (80125b0 <tcp_process+0x7c8>)
 80123d4:	2201      	movs	r2, #1
 80123d6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	220a      	movs	r2, #10
 80123dc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80123de:	4b75      	ldr	r3, [pc, #468]	@ (80125b4 <tcp_process+0x7cc>)
 80123e0:	681a      	ldr	r2, [r3, #0]
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	60da      	str	r2, [r3, #12]
 80123e6:	4a73      	ldr	r2, [pc, #460]	@ (80125b4 <tcp_process+0x7cc>)
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	6013      	str	r3, [r2, #0]
 80123ec:	f003 f94c 	bl	8015688 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80123f0:	e0d2      	b.n	8012598 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	8b5b      	ldrh	r3, [r3, #26]
 80123f6:	f043 0302 	orr.w	r3, r3, #2
 80123fa:	b29a      	uxth	r2, r3
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	2208      	movs	r2, #8
 8012404:	751a      	strb	r2, [r3, #20]
      break;
 8012406:	e0c7      	b.n	8012598 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012408:	4b6b      	ldr	r3, [pc, #428]	@ (80125b8 <tcp_process+0x7d0>)
 801240a:	781b      	ldrb	r3, [r3, #0]
 801240c:	f003 0310 	and.w	r3, r3, #16
 8012410:	2b00      	cmp	r3, #0
 8012412:	f000 80c1 	beq.w	8012598 <tcp_process+0x7b0>
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801241a:	4b68      	ldr	r3, [pc, #416]	@ (80125bc <tcp_process+0x7d4>)
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	429a      	cmp	r2, r3
 8012420:	f040 80ba 	bne.w	8012598 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012428:	2b00      	cmp	r3, #0
 801242a:	f040 80b5 	bne.w	8012598 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	2206      	movs	r2, #6
 8012432:	751a      	strb	r2, [r3, #20]
      break;
 8012434:	e0b0      	b.n	8012598 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8012436:	6878      	ldr	r0, [r7, #4]
 8012438:	f000 f9ca 	bl	80127d0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801243c:	4b60      	ldr	r3, [pc, #384]	@ (80125c0 <tcp_process+0x7d8>)
 801243e:	781b      	ldrb	r3, [r3, #0]
 8012440:	f003 0320 	and.w	r3, r3, #32
 8012444:	2b00      	cmp	r3, #0
 8012446:	f000 80a9 	beq.w	801259c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	8b5b      	ldrh	r3, [r3, #26]
 801244e:	f043 0302 	orr.w	r3, r3, #2
 8012452:	b29a      	uxth	r2, r3
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8012458:	6878      	ldr	r0, [r7, #4]
 801245a:	f7fe fd39 	bl	8010ed0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801245e:	4b59      	ldr	r3, [pc, #356]	@ (80125c4 <tcp_process+0x7dc>)
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	687a      	ldr	r2, [r7, #4]
 8012464:	429a      	cmp	r2, r3
 8012466:	d105      	bne.n	8012474 <tcp_process+0x68c>
 8012468:	4b56      	ldr	r3, [pc, #344]	@ (80125c4 <tcp_process+0x7dc>)
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	68db      	ldr	r3, [r3, #12]
 801246e:	4a55      	ldr	r2, [pc, #340]	@ (80125c4 <tcp_process+0x7dc>)
 8012470:	6013      	str	r3, [r2, #0]
 8012472:	e013      	b.n	801249c <tcp_process+0x6b4>
 8012474:	4b53      	ldr	r3, [pc, #332]	@ (80125c4 <tcp_process+0x7dc>)
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	613b      	str	r3, [r7, #16]
 801247a:	e00c      	b.n	8012496 <tcp_process+0x6ae>
 801247c:	693b      	ldr	r3, [r7, #16]
 801247e:	68db      	ldr	r3, [r3, #12]
 8012480:	687a      	ldr	r2, [r7, #4]
 8012482:	429a      	cmp	r2, r3
 8012484:	d104      	bne.n	8012490 <tcp_process+0x6a8>
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	68da      	ldr	r2, [r3, #12]
 801248a:	693b      	ldr	r3, [r7, #16]
 801248c:	60da      	str	r2, [r3, #12]
 801248e:	e005      	b.n	801249c <tcp_process+0x6b4>
 8012490:	693b      	ldr	r3, [r7, #16]
 8012492:	68db      	ldr	r3, [r3, #12]
 8012494:	613b      	str	r3, [r7, #16]
 8012496:	693b      	ldr	r3, [r7, #16]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d1ef      	bne.n	801247c <tcp_process+0x694>
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	2200      	movs	r2, #0
 80124a0:	60da      	str	r2, [r3, #12]
 80124a2:	4b43      	ldr	r3, [pc, #268]	@ (80125b0 <tcp_process+0x7c8>)
 80124a4:	2201      	movs	r2, #1
 80124a6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	220a      	movs	r2, #10
 80124ac:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80124ae:	4b41      	ldr	r3, [pc, #260]	@ (80125b4 <tcp_process+0x7cc>)
 80124b0:	681a      	ldr	r2, [r3, #0]
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	60da      	str	r2, [r3, #12]
 80124b6:	4a3f      	ldr	r2, [pc, #252]	@ (80125b4 <tcp_process+0x7cc>)
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	6013      	str	r3, [r2, #0]
 80124bc:	f003 f8e4 	bl	8015688 <tcp_timer_needed>
      }
      break;
 80124c0:	e06c      	b.n	801259c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80124c2:	6878      	ldr	r0, [r7, #4]
 80124c4:	f000 f984 	bl	80127d0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80124c8:	4b3b      	ldr	r3, [pc, #236]	@ (80125b8 <tcp_process+0x7d0>)
 80124ca:	781b      	ldrb	r3, [r3, #0]
 80124cc:	f003 0310 	and.w	r3, r3, #16
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d065      	beq.n	80125a0 <tcp_process+0x7b8>
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80124d8:	4b38      	ldr	r3, [pc, #224]	@ (80125bc <tcp_process+0x7d4>)
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	429a      	cmp	r2, r3
 80124de:	d15f      	bne.n	80125a0 <tcp_process+0x7b8>
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d15b      	bne.n	80125a0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80124e8:	6878      	ldr	r0, [r7, #4]
 80124ea:	f7fe fcf1 	bl	8010ed0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80124ee:	4b35      	ldr	r3, [pc, #212]	@ (80125c4 <tcp_process+0x7dc>)
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	687a      	ldr	r2, [r7, #4]
 80124f4:	429a      	cmp	r2, r3
 80124f6:	d105      	bne.n	8012504 <tcp_process+0x71c>
 80124f8:	4b32      	ldr	r3, [pc, #200]	@ (80125c4 <tcp_process+0x7dc>)
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	68db      	ldr	r3, [r3, #12]
 80124fe:	4a31      	ldr	r2, [pc, #196]	@ (80125c4 <tcp_process+0x7dc>)
 8012500:	6013      	str	r3, [r2, #0]
 8012502:	e013      	b.n	801252c <tcp_process+0x744>
 8012504:	4b2f      	ldr	r3, [pc, #188]	@ (80125c4 <tcp_process+0x7dc>)
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	60fb      	str	r3, [r7, #12]
 801250a:	e00c      	b.n	8012526 <tcp_process+0x73e>
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	68db      	ldr	r3, [r3, #12]
 8012510:	687a      	ldr	r2, [r7, #4]
 8012512:	429a      	cmp	r2, r3
 8012514:	d104      	bne.n	8012520 <tcp_process+0x738>
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	68da      	ldr	r2, [r3, #12]
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	60da      	str	r2, [r3, #12]
 801251e:	e005      	b.n	801252c <tcp_process+0x744>
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	68db      	ldr	r3, [r3, #12]
 8012524:	60fb      	str	r3, [r7, #12]
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d1ef      	bne.n	801250c <tcp_process+0x724>
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	2200      	movs	r2, #0
 8012530:	60da      	str	r2, [r3, #12]
 8012532:	4b1f      	ldr	r3, [pc, #124]	@ (80125b0 <tcp_process+0x7c8>)
 8012534:	2201      	movs	r2, #1
 8012536:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	220a      	movs	r2, #10
 801253c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801253e:	4b1d      	ldr	r3, [pc, #116]	@ (80125b4 <tcp_process+0x7cc>)
 8012540:	681a      	ldr	r2, [r3, #0]
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	60da      	str	r2, [r3, #12]
 8012546:	4a1b      	ldr	r2, [pc, #108]	@ (80125b4 <tcp_process+0x7cc>)
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	6013      	str	r3, [r2, #0]
 801254c:	f003 f89c 	bl	8015688 <tcp_timer_needed>
      }
      break;
 8012550:	e026      	b.n	80125a0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8012552:	6878      	ldr	r0, [r7, #4]
 8012554:	f000 f93c 	bl	80127d0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012558:	4b17      	ldr	r3, [pc, #92]	@ (80125b8 <tcp_process+0x7d0>)
 801255a:	781b      	ldrb	r3, [r3, #0]
 801255c:	f003 0310 	and.w	r3, r3, #16
 8012560:	2b00      	cmp	r3, #0
 8012562:	d01f      	beq.n	80125a4 <tcp_process+0x7bc>
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012568:	4b14      	ldr	r3, [pc, #80]	@ (80125bc <tcp_process+0x7d4>)
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	429a      	cmp	r2, r3
 801256e:	d119      	bne.n	80125a4 <tcp_process+0x7bc>
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012574:	2b00      	cmp	r3, #0
 8012576:	d115      	bne.n	80125a4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8012578:	4b11      	ldr	r3, [pc, #68]	@ (80125c0 <tcp_process+0x7d8>)
 801257a:	781b      	ldrb	r3, [r3, #0]
 801257c:	f043 0310 	orr.w	r3, r3, #16
 8012580:	b2da      	uxtb	r2, r3
 8012582:	4b0f      	ldr	r3, [pc, #60]	@ (80125c0 <tcp_process+0x7d8>)
 8012584:	701a      	strb	r2, [r3, #0]
      }
      break;
 8012586:	e00d      	b.n	80125a4 <tcp_process+0x7bc>
    default:
      break;
 8012588:	bf00      	nop
 801258a:	e00c      	b.n	80125a6 <tcp_process+0x7be>
      break;
 801258c:	bf00      	nop
 801258e:	e00a      	b.n	80125a6 <tcp_process+0x7be>
      break;
 8012590:	bf00      	nop
 8012592:	e008      	b.n	80125a6 <tcp_process+0x7be>
      break;
 8012594:	bf00      	nop
 8012596:	e006      	b.n	80125a6 <tcp_process+0x7be>
      break;
 8012598:	bf00      	nop
 801259a:	e004      	b.n	80125a6 <tcp_process+0x7be>
      break;
 801259c:	bf00      	nop
 801259e:	e002      	b.n	80125a6 <tcp_process+0x7be>
      break;
 80125a0:	bf00      	nop
 80125a2:	e000      	b.n	80125a6 <tcp_process+0x7be>
      break;
 80125a4:	bf00      	nop
  }
  return ERR_OK;
 80125a6:	2300      	movs	r3, #0
}
 80125a8:	4618      	mov	r0, r3
 80125aa:	3724      	adds	r7, #36	@ 0x24
 80125ac:	46bd      	mov	sp, r7
 80125ae:	bd90      	pop	{r4, r7, pc}
 80125b0:	20010318 	.word	0x20010318
 80125b4:	20010314 	.word	0x20010314
 80125b8:	20010348 	.word	0x20010348
 80125bc:	20010340 	.word	0x20010340
 80125c0:	20010349 	.word	0x20010349
 80125c4:	20010310 	.word	0x20010310

080125c8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80125c8:	b590      	push	{r4, r7, lr}
 80125ca:	b085      	sub	sp, #20
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
 80125d0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d106      	bne.n	80125e6 <tcp_oos_insert_segment+0x1e>
 80125d8:	4b3b      	ldr	r3, [pc, #236]	@ (80126c8 <tcp_oos_insert_segment+0x100>)
 80125da:	f240 421f 	movw	r2, #1055	@ 0x41f
 80125de:	493b      	ldr	r1, [pc, #236]	@ (80126cc <tcp_oos_insert_segment+0x104>)
 80125e0:	483b      	ldr	r0, [pc, #236]	@ (80126d0 <tcp_oos_insert_segment+0x108>)
 80125e2:	f015 fca7 	bl	8027f34 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	68db      	ldr	r3, [r3, #12]
 80125ea:	899b      	ldrh	r3, [r3, #12]
 80125ec:	b29b      	uxth	r3, r3
 80125ee:	4618      	mov	r0, r3
 80125f0:	f7fb f976 	bl	800d8e0 <lwip_htons>
 80125f4:	4603      	mov	r3, r0
 80125f6:	b2db      	uxtb	r3, r3
 80125f8:	f003 0301 	and.w	r3, r3, #1
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d028      	beq.n	8012652 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8012600:	6838      	ldr	r0, [r7, #0]
 8012602:	f7fe f995 	bl	8010930 <tcp_segs_free>
    next = NULL;
 8012606:	2300      	movs	r3, #0
 8012608:	603b      	str	r3, [r7, #0]
 801260a:	e056      	b.n	80126ba <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801260c:	683b      	ldr	r3, [r7, #0]
 801260e:	68db      	ldr	r3, [r3, #12]
 8012610:	899b      	ldrh	r3, [r3, #12]
 8012612:	b29b      	uxth	r3, r3
 8012614:	4618      	mov	r0, r3
 8012616:	f7fb f963 	bl	800d8e0 <lwip_htons>
 801261a:	4603      	mov	r3, r0
 801261c:	b2db      	uxtb	r3, r3
 801261e:	f003 0301 	and.w	r3, r3, #1
 8012622:	2b00      	cmp	r3, #0
 8012624:	d00d      	beq.n	8012642 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	68db      	ldr	r3, [r3, #12]
 801262a:	899b      	ldrh	r3, [r3, #12]
 801262c:	b29c      	uxth	r4, r3
 801262e:	2001      	movs	r0, #1
 8012630:	f7fb f956 	bl	800d8e0 <lwip_htons>
 8012634:	4603      	mov	r3, r0
 8012636:	461a      	mov	r2, r3
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	68db      	ldr	r3, [r3, #12]
 801263c:	4322      	orrs	r2, r4
 801263e:	b292      	uxth	r2, r2
 8012640:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8012642:	683b      	ldr	r3, [r7, #0]
 8012644:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8012646:	683b      	ldr	r3, [r7, #0]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801264c:	68f8      	ldr	r0, [r7, #12]
 801264e:	f7fe f984 	bl	801095a <tcp_seg_free>
    while (next &&
 8012652:	683b      	ldr	r3, [r7, #0]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d00e      	beq.n	8012676 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	891b      	ldrh	r3, [r3, #8]
 801265c:	461a      	mov	r2, r3
 801265e:	4b1d      	ldr	r3, [pc, #116]	@ (80126d4 <tcp_oos_insert_segment+0x10c>)
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	441a      	add	r2, r3
 8012664:	683b      	ldr	r3, [r7, #0]
 8012666:	68db      	ldr	r3, [r3, #12]
 8012668:	685b      	ldr	r3, [r3, #4]
 801266a:	6839      	ldr	r1, [r7, #0]
 801266c:	8909      	ldrh	r1, [r1, #8]
 801266e:	440b      	add	r3, r1
 8012670:	1ad3      	subs	r3, r2, r3
    while (next &&
 8012672:	2b00      	cmp	r3, #0
 8012674:	daca      	bge.n	801260c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8012676:	683b      	ldr	r3, [r7, #0]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d01e      	beq.n	80126ba <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	891b      	ldrh	r3, [r3, #8]
 8012680:	461a      	mov	r2, r3
 8012682:	4b14      	ldr	r3, [pc, #80]	@ (80126d4 <tcp_oos_insert_segment+0x10c>)
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	441a      	add	r2, r3
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	68db      	ldr	r3, [r3, #12]
 801268c:	685b      	ldr	r3, [r3, #4]
 801268e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012690:	2b00      	cmp	r3, #0
 8012692:	dd12      	ble.n	80126ba <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012694:	683b      	ldr	r3, [r7, #0]
 8012696:	68db      	ldr	r3, [r3, #12]
 8012698:	685b      	ldr	r3, [r3, #4]
 801269a:	b29a      	uxth	r2, r3
 801269c:	4b0d      	ldr	r3, [pc, #52]	@ (80126d4 <tcp_oos_insert_segment+0x10c>)
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	b29b      	uxth	r3, r3
 80126a2:	1ad3      	subs	r3, r2, r3
 80126a4:	b29a      	uxth	r2, r3
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	685a      	ldr	r2, [r3, #4]
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	891b      	ldrh	r3, [r3, #8]
 80126b2:	4619      	mov	r1, r3
 80126b4:	4610      	mov	r0, r2
 80126b6:	f7fc fbb3 	bl	800ee20 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	683a      	ldr	r2, [r7, #0]
 80126be:	601a      	str	r2, [r3, #0]
}
 80126c0:	bf00      	nop
 80126c2:	3714      	adds	r7, #20
 80126c4:	46bd      	mov	sp, r7
 80126c6:	bd90      	pop	{r4, r7, pc}
 80126c8:	0802b49c 	.word	0x0802b49c
 80126cc:	0802b75c 	.word	0x0802b75c
 80126d0:	0802b4e8 	.word	0x0802b4e8
 80126d4:	2001033c 	.word	0x2001033c

080126d8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80126d8:	b5b0      	push	{r4, r5, r7, lr}
 80126da:	b086      	sub	sp, #24
 80126dc:	af00      	add	r7, sp, #0
 80126de:	60f8      	str	r0, [r7, #12]
 80126e0:	60b9      	str	r1, [r7, #8]
 80126e2:	607a      	str	r2, [r7, #4]
 80126e4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80126e6:	e03e      	b.n	8012766 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80126e8:	68bb      	ldr	r3, [r7, #8]
 80126ea:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80126ec:	68bb      	ldr	r3, [r7, #8]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80126f2:	697b      	ldr	r3, [r7, #20]
 80126f4:	685b      	ldr	r3, [r3, #4]
 80126f6:	4618      	mov	r0, r3
 80126f8:	f7fc fdd8 	bl	800f2ac <pbuf_clen>
 80126fc:	4603      	mov	r3, r0
 80126fe:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012706:	8a7a      	ldrh	r2, [r7, #18]
 8012708:	429a      	cmp	r2, r3
 801270a:	d906      	bls.n	801271a <tcp_free_acked_segments+0x42>
 801270c:	4b2a      	ldr	r3, [pc, #168]	@ (80127b8 <tcp_free_acked_segments+0xe0>)
 801270e:	f240 4257 	movw	r2, #1111	@ 0x457
 8012712:	492a      	ldr	r1, [pc, #168]	@ (80127bc <tcp_free_acked_segments+0xe4>)
 8012714:	482a      	ldr	r0, [pc, #168]	@ (80127c0 <tcp_free_acked_segments+0xe8>)
 8012716:	f015 fc0d 	bl	8027f34 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8012720:	8a7b      	ldrh	r3, [r7, #18]
 8012722:	1ad3      	subs	r3, r2, r3
 8012724:	b29a      	uxth	r2, r3
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801272c:	697b      	ldr	r3, [r7, #20]
 801272e:	891a      	ldrh	r2, [r3, #8]
 8012730:	4b24      	ldr	r3, [pc, #144]	@ (80127c4 <tcp_free_acked_segments+0xec>)
 8012732:	881b      	ldrh	r3, [r3, #0]
 8012734:	4413      	add	r3, r2
 8012736:	b29a      	uxth	r2, r3
 8012738:	4b22      	ldr	r3, [pc, #136]	@ (80127c4 <tcp_free_acked_segments+0xec>)
 801273a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801273c:	6978      	ldr	r0, [r7, #20]
 801273e:	f7fe f90c 	bl	801095a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012748:	2b00      	cmp	r3, #0
 801274a:	d00c      	beq.n	8012766 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801274c:	68bb      	ldr	r3, [r7, #8]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d109      	bne.n	8012766 <tcp_free_acked_segments+0x8e>
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d106      	bne.n	8012766 <tcp_free_acked_segments+0x8e>
 8012758:	4b17      	ldr	r3, [pc, #92]	@ (80127b8 <tcp_free_acked_segments+0xe0>)
 801275a:	f240 4261 	movw	r2, #1121	@ 0x461
 801275e:	491a      	ldr	r1, [pc, #104]	@ (80127c8 <tcp_free_acked_segments+0xf0>)
 8012760:	4817      	ldr	r0, [pc, #92]	@ (80127c0 <tcp_free_acked_segments+0xe8>)
 8012762:	f015 fbe7 	bl	8027f34 <iprintf>
  while (seg_list != NULL &&
 8012766:	68bb      	ldr	r3, [r7, #8]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d020      	beq.n	80127ae <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801276c:	68bb      	ldr	r3, [r7, #8]
 801276e:	68db      	ldr	r3, [r3, #12]
 8012770:	685b      	ldr	r3, [r3, #4]
 8012772:	4618      	mov	r0, r3
 8012774:	f7fb f8ca 	bl	800d90c <lwip_htonl>
 8012778:	4604      	mov	r4, r0
 801277a:	68bb      	ldr	r3, [r7, #8]
 801277c:	891b      	ldrh	r3, [r3, #8]
 801277e:	461d      	mov	r5, r3
 8012780:	68bb      	ldr	r3, [r7, #8]
 8012782:	68db      	ldr	r3, [r3, #12]
 8012784:	899b      	ldrh	r3, [r3, #12]
 8012786:	b29b      	uxth	r3, r3
 8012788:	4618      	mov	r0, r3
 801278a:	f7fb f8a9 	bl	800d8e0 <lwip_htons>
 801278e:	4603      	mov	r3, r0
 8012790:	b2db      	uxtb	r3, r3
 8012792:	f003 0303 	and.w	r3, r3, #3
 8012796:	2b00      	cmp	r3, #0
 8012798:	d001      	beq.n	801279e <tcp_free_acked_segments+0xc6>
 801279a:	2301      	movs	r3, #1
 801279c:	e000      	b.n	80127a0 <tcp_free_acked_segments+0xc8>
 801279e:	2300      	movs	r3, #0
 80127a0:	442b      	add	r3, r5
 80127a2:	18e2      	adds	r2, r4, r3
 80127a4:	4b09      	ldr	r3, [pc, #36]	@ (80127cc <tcp_free_acked_segments+0xf4>)
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	dd9c      	ble.n	80126e8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80127ae:	68bb      	ldr	r3, [r7, #8]
}
 80127b0:	4618      	mov	r0, r3
 80127b2:	3718      	adds	r7, #24
 80127b4:	46bd      	mov	sp, r7
 80127b6:	bdb0      	pop	{r4, r5, r7, pc}
 80127b8:	0802b49c 	.word	0x0802b49c
 80127bc:	0802b784 	.word	0x0802b784
 80127c0:	0802b4e8 	.word	0x0802b4e8
 80127c4:	20010344 	.word	0x20010344
 80127c8:	0802b7ac 	.word	0x0802b7ac
 80127cc:	20010340 	.word	0x20010340

080127d0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80127d0:	b5b0      	push	{r4, r5, r7, lr}
 80127d2:	b094      	sub	sp, #80	@ 0x50
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80127d8:	2300      	movs	r3, #0
 80127da:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d106      	bne.n	80127f0 <tcp_receive+0x20>
 80127e2:	4b91      	ldr	r3, [pc, #580]	@ (8012a28 <tcp_receive+0x258>)
 80127e4:	f240 427b 	movw	r2, #1147	@ 0x47b
 80127e8:	4990      	ldr	r1, [pc, #576]	@ (8012a2c <tcp_receive+0x25c>)
 80127ea:	4891      	ldr	r0, [pc, #580]	@ (8012a30 <tcp_receive+0x260>)
 80127ec:	f015 fba2 	bl	8027f34 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	7d1b      	ldrb	r3, [r3, #20]
 80127f4:	2b03      	cmp	r3, #3
 80127f6:	d806      	bhi.n	8012806 <tcp_receive+0x36>
 80127f8:	4b8b      	ldr	r3, [pc, #556]	@ (8012a28 <tcp_receive+0x258>)
 80127fa:	f240 427c 	movw	r2, #1148	@ 0x47c
 80127fe:	498d      	ldr	r1, [pc, #564]	@ (8012a34 <tcp_receive+0x264>)
 8012800:	488b      	ldr	r0, [pc, #556]	@ (8012a30 <tcp_receive+0x260>)
 8012802:	f015 fb97 	bl	8027f34 <iprintf>

  if (flags & TCP_ACK) {
 8012806:	4b8c      	ldr	r3, [pc, #560]	@ (8012a38 <tcp_receive+0x268>)
 8012808:	781b      	ldrb	r3, [r3, #0]
 801280a:	f003 0310 	and.w	r3, r3, #16
 801280e:	2b00      	cmp	r3, #0
 8012810:	f000 8264 	beq.w	8012cdc <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801281a:	461a      	mov	r2, r3
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012820:	4413      	add	r3, r2
 8012822:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012828:	4b84      	ldr	r3, [pc, #528]	@ (8012a3c <tcp_receive+0x26c>)
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	1ad3      	subs	r3, r2, r3
 801282e:	2b00      	cmp	r3, #0
 8012830:	db1b      	blt.n	801286a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012836:	4b81      	ldr	r3, [pc, #516]	@ (8012a3c <tcp_receive+0x26c>)
 8012838:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801283a:	429a      	cmp	r2, r3
 801283c:	d106      	bne.n	801284c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012842:	4b7f      	ldr	r3, [pc, #508]	@ (8012a40 <tcp_receive+0x270>)
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	1ad3      	subs	r3, r2, r3
 8012848:	2b00      	cmp	r3, #0
 801284a:	db0e      	blt.n	801286a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012850:	4b7b      	ldr	r3, [pc, #492]	@ (8012a40 <tcp_receive+0x270>)
 8012852:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012854:	429a      	cmp	r2, r3
 8012856:	d125      	bne.n	80128a4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012858:	4b7a      	ldr	r3, [pc, #488]	@ (8012a44 <tcp_receive+0x274>)
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	89db      	ldrh	r3, [r3, #14]
 801285e:	b29a      	uxth	r2, r3
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012866:	429a      	cmp	r2, r3
 8012868:	d91c      	bls.n	80128a4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801286a:	4b76      	ldr	r3, [pc, #472]	@ (8012a44 <tcp_receive+0x274>)
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	89db      	ldrh	r3, [r3, #14]
 8012870:	b29a      	uxth	r2, r3
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012884:	429a      	cmp	r2, r3
 8012886:	d205      	bcs.n	8012894 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8012894:	4b69      	ldr	r3, [pc, #420]	@ (8012a3c <tcp_receive+0x26c>)
 8012896:	681a      	ldr	r2, [r3, #0]
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 801289c:	4b68      	ldr	r3, [pc, #416]	@ (8012a40 <tcp_receive+0x270>)
 801289e:	681a      	ldr	r2, [r3, #0]
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80128a4:	4b66      	ldr	r3, [pc, #408]	@ (8012a40 <tcp_receive+0x270>)
 80128a6:	681a      	ldr	r2, [r3, #0]
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80128ac:	1ad3      	subs	r3, r2, r3
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	dc58      	bgt.n	8012964 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80128b2:	4b65      	ldr	r3, [pc, #404]	@ (8012a48 <tcp_receive+0x278>)
 80128b4:	881b      	ldrh	r3, [r3, #0]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d14b      	bne.n	8012952 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80128be:	687a      	ldr	r2, [r7, #4]
 80128c0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80128c4:	4413      	add	r3, r2
 80128c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80128c8:	429a      	cmp	r2, r3
 80128ca:	d142      	bne.n	8012952 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	db3d      	blt.n	8012952 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80128da:	4b59      	ldr	r3, [pc, #356]	@ (8012a40 <tcp_receive+0x270>)
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	429a      	cmp	r2, r3
 80128e0:	d137      	bne.n	8012952 <tcp_receive+0x182>
              found_dupack = 1;
 80128e2:	2301      	movs	r3, #1
 80128e4:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80128ec:	2bff      	cmp	r3, #255	@ 0xff
 80128ee:	d007      	beq.n	8012900 <tcp_receive+0x130>
                ++pcb->dupacks;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80128f6:	3301      	adds	r3, #1
 80128f8:	b2da      	uxtb	r2, r3
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012906:	2b03      	cmp	r3, #3
 8012908:	d91b      	bls.n	8012942 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012914:	4413      	add	r3, r2
 8012916:	b29a      	uxth	r2, r3
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801291e:	429a      	cmp	r2, r3
 8012920:	d30a      	bcc.n	8012938 <tcp_receive+0x168>
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801292c:	4413      	add	r3, r2
 801292e:	b29a      	uxth	r2, r3
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012936:	e004      	b.n	8012942 <tcp_receive+0x172>
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801293e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012948:	2b02      	cmp	r3, #2
 801294a:	d902      	bls.n	8012952 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801294c:	6878      	ldr	r0, [r7, #4]
 801294e:	f002 fb3f 	bl	8014fd0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012952:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012954:	2b00      	cmp	r3, #0
 8012956:	f040 8161 	bne.w	8012c1c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	2200      	movs	r2, #0
 801295e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012962:	e15b      	b.n	8012c1c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012964:	4b36      	ldr	r3, [pc, #216]	@ (8012a40 <tcp_receive+0x270>)
 8012966:	681a      	ldr	r2, [r3, #0]
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801296c:	1ad3      	subs	r3, r2, r3
 801296e:	3b01      	subs	r3, #1
 8012970:	2b00      	cmp	r3, #0
 8012972:	f2c0 814e 	blt.w	8012c12 <tcp_receive+0x442>
 8012976:	4b32      	ldr	r3, [pc, #200]	@ (8012a40 <tcp_receive+0x270>)
 8012978:	681a      	ldr	r2, [r3, #0]
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801297e:	1ad3      	subs	r3, r2, r3
 8012980:	2b00      	cmp	r3, #0
 8012982:	f300 8146 	bgt.w	8012c12 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	8b5b      	ldrh	r3, [r3, #26]
 801298a:	f003 0304 	and.w	r3, r3, #4
 801298e:	2b00      	cmp	r3, #0
 8012990:	d010      	beq.n	80129b4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	8b5b      	ldrh	r3, [r3, #26]
 8012996:	f023 0304 	bic.w	r3, r3, #4
 801299a:	b29a      	uxth	r2, r3
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	2200      	movs	r2, #0
 80129b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	2200      	movs	r2, #0
 80129b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80129c2:	10db      	asrs	r3, r3, #3
 80129c4:	b21b      	sxth	r3, r3
 80129c6:	b29a      	uxth	r2, r3
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80129ce:	b29b      	uxth	r3, r3
 80129d0:	4413      	add	r3, r2
 80129d2:	b29b      	uxth	r3, r3
 80129d4:	b21a      	sxth	r2, r3
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80129dc:	4b18      	ldr	r3, [pc, #96]	@ (8012a40 <tcp_receive+0x270>)
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	b29a      	uxth	r2, r3
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80129e6:	b29b      	uxth	r3, r3
 80129e8:	1ad3      	subs	r3, r2, r3
 80129ea:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	2200      	movs	r2, #0
 80129f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80129f4:	4b12      	ldr	r3, [pc, #72]	@ (8012a40 <tcp_receive+0x270>)
 80129f6:	681a      	ldr	r2, [r3, #0]
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	7d1b      	ldrb	r3, [r3, #20]
 8012a00:	2b03      	cmp	r3, #3
 8012a02:	f240 8097 	bls.w	8012b34 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8012a12:	429a      	cmp	r2, r3
 8012a14:	d245      	bcs.n	8012aa2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	8b5b      	ldrh	r3, [r3, #26]
 8012a1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d014      	beq.n	8012a4c <tcp_receive+0x27c>
 8012a22:	2301      	movs	r3, #1
 8012a24:	e013      	b.n	8012a4e <tcp_receive+0x27e>
 8012a26:	bf00      	nop
 8012a28:	0802b49c 	.word	0x0802b49c
 8012a2c:	0802b7cc 	.word	0x0802b7cc
 8012a30:	0802b4e8 	.word	0x0802b4e8
 8012a34:	0802b7e8 	.word	0x0802b7e8
 8012a38:	20010348 	.word	0x20010348
 8012a3c:	2001033c 	.word	0x2001033c
 8012a40:	20010340 	.word	0x20010340
 8012a44:	2001032c 	.word	0x2001032c
 8012a48:	20010346 	.word	0x20010346
 8012a4c:	2302      	movs	r3, #2
 8012a4e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012a52:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8012a56:	b29a      	uxth	r2, r3
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012a5c:	fb12 f303 	smulbb	r3, r2, r3
 8012a60:	b29b      	uxth	r3, r3
 8012a62:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8012a64:	4293      	cmp	r3, r2
 8012a66:	bf28      	it	cs
 8012a68:	4613      	movcs	r3, r2
 8012a6a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012a72:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012a74:	4413      	add	r3, r2
 8012a76:	b29a      	uxth	r2, r3
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012a7e:	429a      	cmp	r2, r3
 8012a80:	d309      	bcc.n	8012a96 <tcp_receive+0x2c6>
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012a88:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012a8a:	4413      	add	r3, r2
 8012a8c:	b29a      	uxth	r2, r3
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012a94:	e04e      	b.n	8012b34 <tcp_receive+0x364>
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012a9c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012aa0:	e048      	b.n	8012b34 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012aa8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012aaa:	4413      	add	r3, r2
 8012aac:	b29a      	uxth	r2, r3
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012ab4:	429a      	cmp	r2, r3
 8012ab6:	d309      	bcc.n	8012acc <tcp_receive+0x2fc>
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012abe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012ac0:	4413      	add	r3, r2
 8012ac2:	b29a      	uxth	r2, r3
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8012aca:	e004      	b.n	8012ad6 <tcp_receive+0x306>
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012ad2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012ae2:	429a      	cmp	r2, r3
 8012ae4:	d326      	bcc.n	8012b34 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012af2:	1ad3      	subs	r3, r2, r3
 8012af4:	b29a      	uxth	r2, r3
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012b06:	4413      	add	r3, r2
 8012b08:	b29a      	uxth	r2, r3
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012b10:	429a      	cmp	r2, r3
 8012b12:	d30a      	bcc.n	8012b2a <tcp_receive+0x35a>
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012b1e:	4413      	add	r3, r2
 8012b20:	b29a      	uxth	r2, r3
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012b28:	e004      	b.n	8012b34 <tcp_receive+0x364>
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012b30:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012b3c:	4a98      	ldr	r2, [pc, #608]	@ (8012da0 <tcp_receive+0x5d0>)
 8012b3e:	6878      	ldr	r0, [r7, #4]
 8012b40:	f7ff fdca 	bl	80126d8 <tcp_free_acked_segments>
 8012b44:	4602      	mov	r2, r0
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b52:	4a94      	ldr	r2, [pc, #592]	@ (8012da4 <tcp_receive+0x5d4>)
 8012b54:	6878      	ldr	r0, [r7, #4]
 8012b56:	f7ff fdbf 	bl	80126d8 <tcp_free_acked_segments>
 8012b5a:	4602      	mov	r2, r0
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d104      	bne.n	8012b72 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012b6e:	861a      	strh	r2, [r3, #48]	@ 0x30
 8012b70:	e002      	b.n	8012b78 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	2200      	movs	r2, #0
 8012b76:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d103      	bne.n	8012b8e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	2200      	movs	r2, #0
 8012b8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8012b94:	4b84      	ldr	r3, [pc, #528]	@ (8012da8 <tcp_receive+0x5d8>)
 8012b96:	881b      	ldrh	r3, [r3, #0]
 8012b98:	4413      	add	r3, r2
 8012b9a:	b29a      	uxth	r2, r3
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	8b5b      	ldrh	r3, [r3, #26]
 8012ba6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d035      	beq.n	8012c1a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d118      	bne.n	8012be8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d00c      	beq.n	8012bd8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012bc6:	68db      	ldr	r3, [r3, #12]
 8012bc8:	685b      	ldr	r3, [r3, #4]
 8012bca:	4618      	mov	r0, r3
 8012bcc:	f7fa fe9e 	bl	800d90c <lwip_htonl>
 8012bd0:	4603      	mov	r3, r0
 8012bd2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	dc20      	bgt.n	8012c1a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	8b5b      	ldrh	r3, [r3, #26]
 8012bdc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012be0:	b29a      	uxth	r2, r3
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012be6:	e018      	b.n	8012c1a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012bf0:	68db      	ldr	r3, [r3, #12]
 8012bf2:	685b      	ldr	r3, [r3, #4]
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	f7fa fe89 	bl	800d90c <lwip_htonl>
 8012bfa:	4603      	mov	r3, r0
 8012bfc:	1ae3      	subs	r3, r4, r3
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	dc0b      	bgt.n	8012c1a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	8b5b      	ldrh	r3, [r3, #26]
 8012c06:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012c0a:	b29a      	uxth	r2, r3
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012c10:	e003      	b.n	8012c1a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012c12:	6878      	ldr	r0, [r7, #4]
 8012c14:	f002 fbc8 	bl	80153a8 <tcp_send_empty_ack>
 8012c18:	e000      	b.n	8012c1c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012c1a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d05b      	beq.n	8012cdc <tcp_receive+0x50c>
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012c28:	4b60      	ldr	r3, [pc, #384]	@ (8012dac <tcp_receive+0x5dc>)
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	1ad3      	subs	r3, r2, r3
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	da54      	bge.n	8012cdc <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012c32:	4b5f      	ldr	r3, [pc, #380]	@ (8012db0 <tcp_receive+0x5e0>)
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	b29a      	uxth	r2, r3
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012c3c:	b29b      	uxth	r3, r3
 8012c3e:	1ad3      	subs	r3, r2, r3
 8012c40:	b29b      	uxth	r3, r3
 8012c42:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8012c46:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012c50:	10db      	asrs	r3, r3, #3
 8012c52:	b21b      	sxth	r3, r3
 8012c54:	b29b      	uxth	r3, r3
 8012c56:	1ad3      	subs	r3, r2, r3
 8012c58:	b29b      	uxth	r3, r3
 8012c5a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012c64:	b29a      	uxth	r2, r3
 8012c66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8012c6a:	4413      	add	r3, r2
 8012c6c:	b29b      	uxth	r3, r3
 8012c6e:	b21a      	sxth	r2, r3
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8012c74:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	da05      	bge.n	8012c88 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8012c7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8012c80:	425b      	negs	r3, r3
 8012c82:	b29b      	uxth	r3, r3
 8012c84:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012c88:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012c92:	109b      	asrs	r3, r3, #2
 8012c94:	b21b      	sxth	r3, r3
 8012c96:	b29b      	uxth	r3, r3
 8012c98:	1ad3      	subs	r3, r2, r3
 8012c9a:	b29b      	uxth	r3, r3
 8012c9c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012ca6:	b29a      	uxth	r2, r3
 8012ca8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8012cac:	4413      	add	r3, r2
 8012cae:	b29b      	uxth	r3, r3
 8012cb0:	b21a      	sxth	r2, r3
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012cbc:	10db      	asrs	r3, r3, #3
 8012cbe:	b21b      	sxth	r3, r3
 8012cc0:	b29a      	uxth	r2, r3
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012cc8:	b29b      	uxth	r3, r3
 8012cca:	4413      	add	r3, r2
 8012ccc:	b29b      	uxth	r3, r3
 8012cce:	b21a      	sxth	r2, r3
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	2200      	movs	r2, #0
 8012cda:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012cdc:	4b35      	ldr	r3, [pc, #212]	@ (8012db4 <tcp_receive+0x5e4>)
 8012cde:	881b      	ldrh	r3, [r3, #0]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	f000 84df 	beq.w	80136a4 <tcp_receive+0xed4>
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	7d1b      	ldrb	r3, [r3, #20]
 8012cea:	2b06      	cmp	r3, #6
 8012cec:	f200 84da 	bhi.w	80136a4 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012cf4:	4b30      	ldr	r3, [pc, #192]	@ (8012db8 <tcp_receive+0x5e8>)
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	1ad3      	subs	r3, r2, r3
 8012cfa:	3b01      	subs	r3, #1
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	f2c0 808f 	blt.w	8012e20 <tcp_receive+0x650>
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012d06:	4b2b      	ldr	r3, [pc, #172]	@ (8012db4 <tcp_receive+0x5e4>)
 8012d08:	881b      	ldrh	r3, [r3, #0]
 8012d0a:	4619      	mov	r1, r3
 8012d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8012db8 <tcp_receive+0x5e8>)
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	440b      	add	r3, r1
 8012d12:	1ad3      	subs	r3, r2, r3
 8012d14:	3301      	adds	r3, #1
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	f300 8082 	bgt.w	8012e20 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012d1c:	4b27      	ldr	r3, [pc, #156]	@ (8012dbc <tcp_receive+0x5ec>)
 8012d1e:	685b      	ldr	r3, [r3, #4]
 8012d20:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012d26:	4b24      	ldr	r3, [pc, #144]	@ (8012db8 <tcp_receive+0x5e8>)
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	1ad3      	subs	r3, r2, r3
 8012d2c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012d2e:	4b23      	ldr	r3, [pc, #140]	@ (8012dbc <tcp_receive+0x5ec>)
 8012d30:	685b      	ldr	r3, [r3, #4]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d106      	bne.n	8012d44 <tcp_receive+0x574>
 8012d36:	4b22      	ldr	r3, [pc, #136]	@ (8012dc0 <tcp_receive+0x5f0>)
 8012d38:	f240 5294 	movw	r2, #1428	@ 0x594
 8012d3c:	4921      	ldr	r1, [pc, #132]	@ (8012dc4 <tcp_receive+0x5f4>)
 8012d3e:	4822      	ldr	r0, [pc, #136]	@ (8012dc8 <tcp_receive+0x5f8>)
 8012d40:	f015 f8f8 	bl	8027f34 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d46:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8012d4a:	4293      	cmp	r3, r2
 8012d4c:	d906      	bls.n	8012d5c <tcp_receive+0x58c>
 8012d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8012dc0 <tcp_receive+0x5f0>)
 8012d50:	f240 5295 	movw	r2, #1429	@ 0x595
 8012d54:	491d      	ldr	r1, [pc, #116]	@ (8012dcc <tcp_receive+0x5fc>)
 8012d56:	481c      	ldr	r0, [pc, #112]	@ (8012dc8 <tcp_receive+0x5f8>)
 8012d58:	f015 f8ec 	bl	8027f34 <iprintf>
      off = (u16_t)off32;
 8012d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d5e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012d62:	4b16      	ldr	r3, [pc, #88]	@ (8012dbc <tcp_receive+0x5ec>)
 8012d64:	685b      	ldr	r3, [r3, #4]
 8012d66:	891b      	ldrh	r3, [r3, #8]
 8012d68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012d6c:	429a      	cmp	r2, r3
 8012d6e:	d906      	bls.n	8012d7e <tcp_receive+0x5ae>
 8012d70:	4b13      	ldr	r3, [pc, #76]	@ (8012dc0 <tcp_receive+0x5f0>)
 8012d72:	f240 5297 	movw	r2, #1431	@ 0x597
 8012d76:	4916      	ldr	r1, [pc, #88]	@ (8012dd0 <tcp_receive+0x600>)
 8012d78:	4813      	ldr	r0, [pc, #76]	@ (8012dc8 <tcp_receive+0x5f8>)
 8012d7a:	f015 f8db 	bl	8027f34 <iprintf>
      inseg.len -= off;
 8012d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8012dbc <tcp_receive+0x5ec>)
 8012d80:	891a      	ldrh	r2, [r3, #8]
 8012d82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012d86:	1ad3      	subs	r3, r2, r3
 8012d88:	b29a      	uxth	r2, r3
 8012d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8012dbc <tcp_receive+0x5ec>)
 8012d8c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8012dbc <tcp_receive+0x5ec>)
 8012d90:	685b      	ldr	r3, [r3, #4]
 8012d92:	891a      	ldrh	r2, [r3, #8]
 8012d94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012d98:	1ad3      	subs	r3, r2, r3
 8012d9a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8012d9c:	e02a      	b.n	8012df4 <tcp_receive+0x624>
 8012d9e:	bf00      	nop
 8012da0:	0802b804 	.word	0x0802b804
 8012da4:	0802b80c 	.word	0x0802b80c
 8012da8:	20010344 	.word	0x20010344
 8012dac:	20010340 	.word	0x20010340
 8012db0:	20010304 	.word	0x20010304
 8012db4:	20010346 	.word	0x20010346
 8012db8:	2001033c 	.word	0x2001033c
 8012dbc:	2001031c 	.word	0x2001031c
 8012dc0:	0802b49c 	.word	0x0802b49c
 8012dc4:	0802b814 	.word	0x0802b814
 8012dc8:	0802b4e8 	.word	0x0802b4e8
 8012dcc:	0802b824 	.word	0x0802b824
 8012dd0:	0802b834 	.word	0x0802b834
        off -= p->len;
 8012dd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012dd6:	895b      	ldrh	r3, [r3, #10]
 8012dd8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012ddc:	1ad3      	subs	r3, r2, r3
 8012dde:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012de2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012de4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012de6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012de8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012dea:	2200      	movs	r2, #0
 8012dec:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012dee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8012df4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012df6:	895b      	ldrh	r3, [r3, #10]
 8012df8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012dfc:	429a      	cmp	r2, r3
 8012dfe:	d8e9      	bhi.n	8012dd4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012e00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012e04:	4619      	mov	r1, r3
 8012e06:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8012e08:	f7fc f90a 	bl	800f020 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e10:	4a90      	ldr	r2, [pc, #576]	@ (8013054 <tcp_receive+0x884>)
 8012e12:	6013      	str	r3, [r2, #0]
 8012e14:	4b90      	ldr	r3, [pc, #576]	@ (8013058 <tcp_receive+0x888>)
 8012e16:	68db      	ldr	r3, [r3, #12]
 8012e18:	4a8e      	ldr	r2, [pc, #568]	@ (8013054 <tcp_receive+0x884>)
 8012e1a:	6812      	ldr	r2, [r2, #0]
 8012e1c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012e1e:	e00d      	b.n	8012e3c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012e20:	4b8c      	ldr	r3, [pc, #560]	@ (8013054 <tcp_receive+0x884>)
 8012e22:	681a      	ldr	r2, [r3, #0]
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e28:	1ad3      	subs	r3, r2, r3
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	da06      	bge.n	8012e3c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	8b5b      	ldrh	r3, [r3, #26]
 8012e32:	f043 0302 	orr.w	r3, r3, #2
 8012e36:	b29a      	uxth	r2, r3
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012e3c:	4b85      	ldr	r3, [pc, #532]	@ (8013054 <tcp_receive+0x884>)
 8012e3e:	681a      	ldr	r2, [r3, #0]
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e44:	1ad3      	subs	r3, r2, r3
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	f2c0 8427 	blt.w	801369a <tcp_receive+0xeca>
 8012e4c:	4b81      	ldr	r3, [pc, #516]	@ (8013054 <tcp_receive+0x884>)
 8012e4e:	681a      	ldr	r2, [r3, #0]
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e54:	6879      	ldr	r1, [r7, #4]
 8012e56:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012e58:	440b      	add	r3, r1
 8012e5a:	1ad3      	subs	r3, r2, r3
 8012e5c:	3301      	adds	r3, #1
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	f300 841b 	bgt.w	801369a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012e68:	4b7a      	ldr	r3, [pc, #488]	@ (8013054 <tcp_receive+0x884>)
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	429a      	cmp	r2, r3
 8012e6e:	f040 8298 	bne.w	80133a2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012e72:	4b79      	ldr	r3, [pc, #484]	@ (8013058 <tcp_receive+0x888>)
 8012e74:	891c      	ldrh	r4, [r3, #8]
 8012e76:	4b78      	ldr	r3, [pc, #480]	@ (8013058 <tcp_receive+0x888>)
 8012e78:	68db      	ldr	r3, [r3, #12]
 8012e7a:	899b      	ldrh	r3, [r3, #12]
 8012e7c:	b29b      	uxth	r3, r3
 8012e7e:	4618      	mov	r0, r3
 8012e80:	f7fa fd2e 	bl	800d8e0 <lwip_htons>
 8012e84:	4603      	mov	r3, r0
 8012e86:	b2db      	uxtb	r3, r3
 8012e88:	f003 0303 	and.w	r3, r3, #3
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d001      	beq.n	8012e94 <tcp_receive+0x6c4>
 8012e90:	2301      	movs	r3, #1
 8012e92:	e000      	b.n	8012e96 <tcp_receive+0x6c6>
 8012e94:	2300      	movs	r3, #0
 8012e96:	4423      	add	r3, r4
 8012e98:	b29a      	uxth	r2, r3
 8012e9a:	4b70      	ldr	r3, [pc, #448]	@ (801305c <tcp_receive+0x88c>)
 8012e9c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012ea2:	4b6e      	ldr	r3, [pc, #440]	@ (801305c <tcp_receive+0x88c>)
 8012ea4:	881b      	ldrh	r3, [r3, #0]
 8012ea6:	429a      	cmp	r2, r3
 8012ea8:	d274      	bcs.n	8012f94 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012eaa:	4b6b      	ldr	r3, [pc, #428]	@ (8013058 <tcp_receive+0x888>)
 8012eac:	68db      	ldr	r3, [r3, #12]
 8012eae:	899b      	ldrh	r3, [r3, #12]
 8012eb0:	b29b      	uxth	r3, r3
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	f7fa fd14 	bl	800d8e0 <lwip_htons>
 8012eb8:	4603      	mov	r3, r0
 8012eba:	b2db      	uxtb	r3, r3
 8012ebc:	f003 0301 	and.w	r3, r3, #1
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d01e      	beq.n	8012f02 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012ec4:	4b64      	ldr	r3, [pc, #400]	@ (8013058 <tcp_receive+0x888>)
 8012ec6:	68db      	ldr	r3, [r3, #12]
 8012ec8:	899b      	ldrh	r3, [r3, #12]
 8012eca:	b29b      	uxth	r3, r3
 8012ecc:	b21b      	sxth	r3, r3
 8012ece:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012ed2:	b21c      	sxth	r4, r3
 8012ed4:	4b60      	ldr	r3, [pc, #384]	@ (8013058 <tcp_receive+0x888>)
 8012ed6:	68db      	ldr	r3, [r3, #12]
 8012ed8:	899b      	ldrh	r3, [r3, #12]
 8012eda:	b29b      	uxth	r3, r3
 8012edc:	4618      	mov	r0, r3
 8012ede:	f7fa fcff 	bl	800d8e0 <lwip_htons>
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	b2db      	uxtb	r3, r3
 8012ee6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8012eea:	b29b      	uxth	r3, r3
 8012eec:	4618      	mov	r0, r3
 8012eee:	f7fa fcf7 	bl	800d8e0 <lwip_htons>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	b21b      	sxth	r3, r3
 8012ef6:	4323      	orrs	r3, r4
 8012ef8:	b21a      	sxth	r2, r3
 8012efa:	4b57      	ldr	r3, [pc, #348]	@ (8013058 <tcp_receive+0x888>)
 8012efc:	68db      	ldr	r3, [r3, #12]
 8012efe:	b292      	uxth	r2, r2
 8012f00:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012f06:	4b54      	ldr	r3, [pc, #336]	@ (8013058 <tcp_receive+0x888>)
 8012f08:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012f0a:	4b53      	ldr	r3, [pc, #332]	@ (8013058 <tcp_receive+0x888>)
 8012f0c:	68db      	ldr	r3, [r3, #12]
 8012f0e:	899b      	ldrh	r3, [r3, #12]
 8012f10:	b29b      	uxth	r3, r3
 8012f12:	4618      	mov	r0, r3
 8012f14:	f7fa fce4 	bl	800d8e0 <lwip_htons>
 8012f18:	4603      	mov	r3, r0
 8012f1a:	b2db      	uxtb	r3, r3
 8012f1c:	f003 0302 	and.w	r3, r3, #2
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d005      	beq.n	8012f30 <tcp_receive+0x760>
            inseg.len -= 1;
 8012f24:	4b4c      	ldr	r3, [pc, #304]	@ (8013058 <tcp_receive+0x888>)
 8012f26:	891b      	ldrh	r3, [r3, #8]
 8012f28:	3b01      	subs	r3, #1
 8012f2a:	b29a      	uxth	r2, r3
 8012f2c:	4b4a      	ldr	r3, [pc, #296]	@ (8013058 <tcp_receive+0x888>)
 8012f2e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012f30:	4b49      	ldr	r3, [pc, #292]	@ (8013058 <tcp_receive+0x888>)
 8012f32:	685b      	ldr	r3, [r3, #4]
 8012f34:	4a48      	ldr	r2, [pc, #288]	@ (8013058 <tcp_receive+0x888>)
 8012f36:	8912      	ldrh	r2, [r2, #8]
 8012f38:	4611      	mov	r1, r2
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	f7fb ff70 	bl	800ee20 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012f40:	4b45      	ldr	r3, [pc, #276]	@ (8013058 <tcp_receive+0x888>)
 8012f42:	891c      	ldrh	r4, [r3, #8]
 8012f44:	4b44      	ldr	r3, [pc, #272]	@ (8013058 <tcp_receive+0x888>)
 8012f46:	68db      	ldr	r3, [r3, #12]
 8012f48:	899b      	ldrh	r3, [r3, #12]
 8012f4a:	b29b      	uxth	r3, r3
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f7fa fcc7 	bl	800d8e0 <lwip_htons>
 8012f52:	4603      	mov	r3, r0
 8012f54:	b2db      	uxtb	r3, r3
 8012f56:	f003 0303 	and.w	r3, r3, #3
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d001      	beq.n	8012f62 <tcp_receive+0x792>
 8012f5e:	2301      	movs	r3, #1
 8012f60:	e000      	b.n	8012f64 <tcp_receive+0x794>
 8012f62:	2300      	movs	r3, #0
 8012f64:	4423      	add	r3, r4
 8012f66:	b29a      	uxth	r2, r3
 8012f68:	4b3c      	ldr	r3, [pc, #240]	@ (801305c <tcp_receive+0x88c>)
 8012f6a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012f6c:	4b3b      	ldr	r3, [pc, #236]	@ (801305c <tcp_receive+0x88c>)
 8012f6e:	881b      	ldrh	r3, [r3, #0]
 8012f70:	461a      	mov	r2, r3
 8012f72:	4b38      	ldr	r3, [pc, #224]	@ (8013054 <tcp_receive+0x884>)
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	441a      	add	r2, r3
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f7c:	6879      	ldr	r1, [r7, #4]
 8012f7e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012f80:	440b      	add	r3, r1
 8012f82:	429a      	cmp	r2, r3
 8012f84:	d006      	beq.n	8012f94 <tcp_receive+0x7c4>
 8012f86:	4b36      	ldr	r3, [pc, #216]	@ (8013060 <tcp_receive+0x890>)
 8012f88:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8012f8c:	4935      	ldr	r1, [pc, #212]	@ (8013064 <tcp_receive+0x894>)
 8012f8e:	4836      	ldr	r0, [pc, #216]	@ (8013068 <tcp_receive+0x898>)
 8012f90:	f014 ffd0 	bl	8027f34 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	f000 80e6 	beq.w	801316a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012f9e:	4b2e      	ldr	r3, [pc, #184]	@ (8013058 <tcp_receive+0x888>)
 8012fa0:	68db      	ldr	r3, [r3, #12]
 8012fa2:	899b      	ldrh	r3, [r3, #12]
 8012fa4:	b29b      	uxth	r3, r3
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	f7fa fc9a 	bl	800d8e0 <lwip_htons>
 8012fac:	4603      	mov	r3, r0
 8012fae:	b2db      	uxtb	r3, r3
 8012fb0:	f003 0301 	and.w	r3, r3, #1
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d010      	beq.n	8012fda <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8012fb8:	e00a      	b.n	8012fd0 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012fbe:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012fc4:	681a      	ldr	r2, [r3, #0]
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8012fca:	68f8      	ldr	r0, [r7, #12]
 8012fcc:	f7fd fcc5 	bl	801095a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d1f0      	bne.n	8012fba <tcp_receive+0x7ea>
 8012fd8:	e0c7      	b.n	801316a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012fe0:	e051      	b.n	8013086 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012fe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012fe4:	68db      	ldr	r3, [r3, #12]
 8012fe6:	899b      	ldrh	r3, [r3, #12]
 8012fe8:	b29b      	uxth	r3, r3
 8012fea:	4618      	mov	r0, r3
 8012fec:	f7fa fc78 	bl	800d8e0 <lwip_htons>
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	b2db      	uxtb	r3, r3
 8012ff4:	f003 0301 	and.w	r3, r3, #1
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d03c      	beq.n	8013076 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012ffc:	4b16      	ldr	r3, [pc, #88]	@ (8013058 <tcp_receive+0x888>)
 8012ffe:	68db      	ldr	r3, [r3, #12]
 8013000:	899b      	ldrh	r3, [r3, #12]
 8013002:	b29b      	uxth	r3, r3
 8013004:	4618      	mov	r0, r3
 8013006:	f7fa fc6b 	bl	800d8e0 <lwip_htons>
 801300a:	4603      	mov	r3, r0
 801300c:	b2db      	uxtb	r3, r3
 801300e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013012:	2b00      	cmp	r3, #0
 8013014:	d12f      	bne.n	8013076 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8013016:	4b10      	ldr	r3, [pc, #64]	@ (8013058 <tcp_receive+0x888>)
 8013018:	68db      	ldr	r3, [r3, #12]
 801301a:	899b      	ldrh	r3, [r3, #12]
 801301c:	b29c      	uxth	r4, r3
 801301e:	2001      	movs	r0, #1
 8013020:	f7fa fc5e 	bl	800d8e0 <lwip_htons>
 8013024:	4603      	mov	r3, r0
 8013026:	461a      	mov	r2, r3
 8013028:	4b0b      	ldr	r3, [pc, #44]	@ (8013058 <tcp_receive+0x888>)
 801302a:	68db      	ldr	r3, [r3, #12]
 801302c:	4322      	orrs	r2, r4
 801302e:	b292      	uxth	r2, r2
 8013030:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013032:	4b09      	ldr	r3, [pc, #36]	@ (8013058 <tcp_receive+0x888>)
 8013034:	891c      	ldrh	r4, [r3, #8]
 8013036:	4b08      	ldr	r3, [pc, #32]	@ (8013058 <tcp_receive+0x888>)
 8013038:	68db      	ldr	r3, [r3, #12]
 801303a:	899b      	ldrh	r3, [r3, #12]
 801303c:	b29b      	uxth	r3, r3
 801303e:	4618      	mov	r0, r3
 8013040:	f7fa fc4e 	bl	800d8e0 <lwip_htons>
 8013044:	4603      	mov	r3, r0
 8013046:	b2db      	uxtb	r3, r3
 8013048:	f003 0303 	and.w	r3, r3, #3
 801304c:	2b00      	cmp	r3, #0
 801304e:	d00d      	beq.n	801306c <tcp_receive+0x89c>
 8013050:	2301      	movs	r3, #1
 8013052:	e00c      	b.n	801306e <tcp_receive+0x89e>
 8013054:	2001033c 	.word	0x2001033c
 8013058:	2001031c 	.word	0x2001031c
 801305c:	20010346 	.word	0x20010346
 8013060:	0802b49c 	.word	0x0802b49c
 8013064:	0802b844 	.word	0x0802b844
 8013068:	0802b4e8 	.word	0x0802b4e8
 801306c:	2300      	movs	r3, #0
 801306e:	4423      	add	r3, r4
 8013070:	b29a      	uxth	r2, r3
 8013072:	4b98      	ldr	r3, [pc, #608]	@ (80132d4 <tcp_receive+0xb04>)
 8013074:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8013076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013078:	613b      	str	r3, [r7, #16]
              next = next->next;
 801307a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8013080:	6938      	ldr	r0, [r7, #16]
 8013082:	f7fd fc6a 	bl	801095a <tcp_seg_free>
            while (next &&
 8013086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013088:	2b00      	cmp	r3, #0
 801308a:	d00e      	beq.n	80130aa <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801308c:	4b91      	ldr	r3, [pc, #580]	@ (80132d4 <tcp_receive+0xb04>)
 801308e:	881b      	ldrh	r3, [r3, #0]
 8013090:	461a      	mov	r2, r3
 8013092:	4b91      	ldr	r3, [pc, #580]	@ (80132d8 <tcp_receive+0xb08>)
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	441a      	add	r2, r3
 8013098:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801309a:	68db      	ldr	r3, [r3, #12]
 801309c:	685b      	ldr	r3, [r3, #4]
 801309e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80130a0:	8909      	ldrh	r1, [r1, #8]
 80130a2:	440b      	add	r3, r1
 80130a4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	da9b      	bge.n	8012fe2 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80130aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d059      	beq.n	8013164 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80130b0:	4b88      	ldr	r3, [pc, #544]	@ (80132d4 <tcp_receive+0xb04>)
 80130b2:	881b      	ldrh	r3, [r3, #0]
 80130b4:	461a      	mov	r2, r3
 80130b6:	4b88      	ldr	r3, [pc, #544]	@ (80132d8 <tcp_receive+0xb08>)
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	441a      	add	r2, r3
 80130bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130be:	68db      	ldr	r3, [r3, #12]
 80130c0:	685b      	ldr	r3, [r3, #4]
 80130c2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	dd4d      	ble.n	8013164 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80130c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130ca:	68db      	ldr	r3, [r3, #12]
 80130cc:	685b      	ldr	r3, [r3, #4]
 80130ce:	b29a      	uxth	r2, r3
 80130d0:	4b81      	ldr	r3, [pc, #516]	@ (80132d8 <tcp_receive+0xb08>)
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	b29b      	uxth	r3, r3
 80130d6:	1ad3      	subs	r3, r2, r3
 80130d8:	b29a      	uxth	r2, r3
 80130da:	4b80      	ldr	r3, [pc, #512]	@ (80132dc <tcp_receive+0xb0c>)
 80130dc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80130de:	4b7f      	ldr	r3, [pc, #508]	@ (80132dc <tcp_receive+0xb0c>)
 80130e0:	68db      	ldr	r3, [r3, #12]
 80130e2:	899b      	ldrh	r3, [r3, #12]
 80130e4:	b29b      	uxth	r3, r3
 80130e6:	4618      	mov	r0, r3
 80130e8:	f7fa fbfa 	bl	800d8e0 <lwip_htons>
 80130ec:	4603      	mov	r3, r0
 80130ee:	b2db      	uxtb	r3, r3
 80130f0:	f003 0302 	and.w	r3, r3, #2
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d005      	beq.n	8013104 <tcp_receive+0x934>
                inseg.len -= 1;
 80130f8:	4b78      	ldr	r3, [pc, #480]	@ (80132dc <tcp_receive+0xb0c>)
 80130fa:	891b      	ldrh	r3, [r3, #8]
 80130fc:	3b01      	subs	r3, #1
 80130fe:	b29a      	uxth	r2, r3
 8013100:	4b76      	ldr	r3, [pc, #472]	@ (80132dc <tcp_receive+0xb0c>)
 8013102:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013104:	4b75      	ldr	r3, [pc, #468]	@ (80132dc <tcp_receive+0xb0c>)
 8013106:	685b      	ldr	r3, [r3, #4]
 8013108:	4a74      	ldr	r2, [pc, #464]	@ (80132dc <tcp_receive+0xb0c>)
 801310a:	8912      	ldrh	r2, [r2, #8]
 801310c:	4611      	mov	r1, r2
 801310e:	4618      	mov	r0, r3
 8013110:	f7fb fe86 	bl	800ee20 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013114:	4b71      	ldr	r3, [pc, #452]	@ (80132dc <tcp_receive+0xb0c>)
 8013116:	891c      	ldrh	r4, [r3, #8]
 8013118:	4b70      	ldr	r3, [pc, #448]	@ (80132dc <tcp_receive+0xb0c>)
 801311a:	68db      	ldr	r3, [r3, #12]
 801311c:	899b      	ldrh	r3, [r3, #12]
 801311e:	b29b      	uxth	r3, r3
 8013120:	4618      	mov	r0, r3
 8013122:	f7fa fbdd 	bl	800d8e0 <lwip_htons>
 8013126:	4603      	mov	r3, r0
 8013128:	b2db      	uxtb	r3, r3
 801312a:	f003 0303 	and.w	r3, r3, #3
 801312e:	2b00      	cmp	r3, #0
 8013130:	d001      	beq.n	8013136 <tcp_receive+0x966>
 8013132:	2301      	movs	r3, #1
 8013134:	e000      	b.n	8013138 <tcp_receive+0x968>
 8013136:	2300      	movs	r3, #0
 8013138:	4423      	add	r3, r4
 801313a:	b29a      	uxth	r2, r3
 801313c:	4b65      	ldr	r3, [pc, #404]	@ (80132d4 <tcp_receive+0xb04>)
 801313e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013140:	4b64      	ldr	r3, [pc, #400]	@ (80132d4 <tcp_receive+0xb04>)
 8013142:	881b      	ldrh	r3, [r3, #0]
 8013144:	461a      	mov	r2, r3
 8013146:	4b64      	ldr	r3, [pc, #400]	@ (80132d8 <tcp_receive+0xb08>)
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	441a      	add	r2, r3
 801314c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801314e:	68db      	ldr	r3, [r3, #12]
 8013150:	685b      	ldr	r3, [r3, #4]
 8013152:	429a      	cmp	r2, r3
 8013154:	d006      	beq.n	8013164 <tcp_receive+0x994>
 8013156:	4b62      	ldr	r3, [pc, #392]	@ (80132e0 <tcp_receive+0xb10>)
 8013158:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 801315c:	4961      	ldr	r1, [pc, #388]	@ (80132e4 <tcp_receive+0xb14>)
 801315e:	4862      	ldr	r0, [pc, #392]	@ (80132e8 <tcp_receive+0xb18>)
 8013160:	f014 fee8 	bl	8027f34 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013168:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801316a:	4b5a      	ldr	r3, [pc, #360]	@ (80132d4 <tcp_receive+0xb04>)
 801316c:	881b      	ldrh	r3, [r3, #0]
 801316e:	461a      	mov	r2, r3
 8013170:	4b59      	ldr	r3, [pc, #356]	@ (80132d8 <tcp_receive+0xb08>)
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	441a      	add	r2, r3
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801317e:	4b55      	ldr	r3, [pc, #340]	@ (80132d4 <tcp_receive+0xb04>)
 8013180:	881b      	ldrh	r3, [r3, #0]
 8013182:	429a      	cmp	r2, r3
 8013184:	d206      	bcs.n	8013194 <tcp_receive+0x9c4>
 8013186:	4b56      	ldr	r3, [pc, #344]	@ (80132e0 <tcp_receive+0xb10>)
 8013188:	f240 6207 	movw	r2, #1543	@ 0x607
 801318c:	4957      	ldr	r1, [pc, #348]	@ (80132ec <tcp_receive+0xb1c>)
 801318e:	4856      	ldr	r0, [pc, #344]	@ (80132e8 <tcp_receive+0xb18>)
 8013190:	f014 fed0 	bl	8027f34 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013198:	4b4e      	ldr	r3, [pc, #312]	@ (80132d4 <tcp_receive+0xb04>)
 801319a:	881b      	ldrh	r3, [r3, #0]
 801319c:	1ad3      	subs	r3, r2, r3
 801319e:	b29a      	uxth	r2, r3
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80131a4:	6878      	ldr	r0, [r7, #4]
 80131a6:	f7fc feb1 	bl	800ff0c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80131aa:	4b4c      	ldr	r3, [pc, #304]	@ (80132dc <tcp_receive+0xb0c>)
 80131ac:	685b      	ldr	r3, [r3, #4]
 80131ae:	891b      	ldrh	r3, [r3, #8]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d006      	beq.n	80131c2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80131b4:	4b49      	ldr	r3, [pc, #292]	@ (80132dc <tcp_receive+0xb0c>)
 80131b6:	685b      	ldr	r3, [r3, #4]
 80131b8:	4a4d      	ldr	r2, [pc, #308]	@ (80132f0 <tcp_receive+0xb20>)
 80131ba:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80131bc:	4b47      	ldr	r3, [pc, #284]	@ (80132dc <tcp_receive+0xb0c>)
 80131be:	2200      	movs	r2, #0
 80131c0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80131c2:	4b46      	ldr	r3, [pc, #280]	@ (80132dc <tcp_receive+0xb0c>)
 80131c4:	68db      	ldr	r3, [r3, #12]
 80131c6:	899b      	ldrh	r3, [r3, #12]
 80131c8:	b29b      	uxth	r3, r3
 80131ca:	4618      	mov	r0, r3
 80131cc:	f7fa fb88 	bl	800d8e0 <lwip_htons>
 80131d0:	4603      	mov	r3, r0
 80131d2:	b2db      	uxtb	r3, r3
 80131d4:	f003 0301 	and.w	r3, r3, #1
 80131d8:	2b00      	cmp	r3, #0
 80131da:	f000 80b8 	beq.w	801334e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80131de:	4b45      	ldr	r3, [pc, #276]	@ (80132f4 <tcp_receive+0xb24>)
 80131e0:	781b      	ldrb	r3, [r3, #0]
 80131e2:	f043 0320 	orr.w	r3, r3, #32
 80131e6:	b2da      	uxtb	r2, r3
 80131e8:	4b42      	ldr	r3, [pc, #264]	@ (80132f4 <tcp_receive+0xb24>)
 80131ea:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80131ec:	e0af      	b.n	801334e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80131f2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80131f8:	68db      	ldr	r3, [r3, #12]
 80131fa:	685b      	ldr	r3, [r3, #4]
 80131fc:	4a36      	ldr	r2, [pc, #216]	@ (80132d8 <tcp_receive+0xb08>)
 80131fe:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013200:	68bb      	ldr	r3, [r7, #8]
 8013202:	891b      	ldrh	r3, [r3, #8]
 8013204:	461c      	mov	r4, r3
 8013206:	68bb      	ldr	r3, [r7, #8]
 8013208:	68db      	ldr	r3, [r3, #12]
 801320a:	899b      	ldrh	r3, [r3, #12]
 801320c:	b29b      	uxth	r3, r3
 801320e:	4618      	mov	r0, r3
 8013210:	f7fa fb66 	bl	800d8e0 <lwip_htons>
 8013214:	4603      	mov	r3, r0
 8013216:	b2db      	uxtb	r3, r3
 8013218:	f003 0303 	and.w	r3, r3, #3
 801321c:	2b00      	cmp	r3, #0
 801321e:	d001      	beq.n	8013224 <tcp_receive+0xa54>
 8013220:	2301      	movs	r3, #1
 8013222:	e000      	b.n	8013226 <tcp_receive+0xa56>
 8013224:	2300      	movs	r3, #0
 8013226:	191a      	adds	r2, r3, r4
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801322c:	441a      	add	r2, r3
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013236:	461c      	mov	r4, r3
 8013238:	68bb      	ldr	r3, [r7, #8]
 801323a:	891b      	ldrh	r3, [r3, #8]
 801323c:	461d      	mov	r5, r3
 801323e:	68bb      	ldr	r3, [r7, #8]
 8013240:	68db      	ldr	r3, [r3, #12]
 8013242:	899b      	ldrh	r3, [r3, #12]
 8013244:	b29b      	uxth	r3, r3
 8013246:	4618      	mov	r0, r3
 8013248:	f7fa fb4a 	bl	800d8e0 <lwip_htons>
 801324c:	4603      	mov	r3, r0
 801324e:	b2db      	uxtb	r3, r3
 8013250:	f003 0303 	and.w	r3, r3, #3
 8013254:	2b00      	cmp	r3, #0
 8013256:	d001      	beq.n	801325c <tcp_receive+0xa8c>
 8013258:	2301      	movs	r3, #1
 801325a:	e000      	b.n	801325e <tcp_receive+0xa8e>
 801325c:	2300      	movs	r3, #0
 801325e:	442b      	add	r3, r5
 8013260:	429c      	cmp	r4, r3
 8013262:	d206      	bcs.n	8013272 <tcp_receive+0xaa2>
 8013264:	4b1e      	ldr	r3, [pc, #120]	@ (80132e0 <tcp_receive+0xb10>)
 8013266:	f240 622b 	movw	r2, #1579	@ 0x62b
 801326a:	4923      	ldr	r1, [pc, #140]	@ (80132f8 <tcp_receive+0xb28>)
 801326c:	481e      	ldr	r0, [pc, #120]	@ (80132e8 <tcp_receive+0xb18>)
 801326e:	f014 fe61 	bl	8027f34 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8013272:	68bb      	ldr	r3, [r7, #8]
 8013274:	891b      	ldrh	r3, [r3, #8]
 8013276:	461c      	mov	r4, r3
 8013278:	68bb      	ldr	r3, [r7, #8]
 801327a:	68db      	ldr	r3, [r3, #12]
 801327c:	899b      	ldrh	r3, [r3, #12]
 801327e:	b29b      	uxth	r3, r3
 8013280:	4618      	mov	r0, r3
 8013282:	f7fa fb2d 	bl	800d8e0 <lwip_htons>
 8013286:	4603      	mov	r3, r0
 8013288:	b2db      	uxtb	r3, r3
 801328a:	f003 0303 	and.w	r3, r3, #3
 801328e:	2b00      	cmp	r3, #0
 8013290:	d001      	beq.n	8013296 <tcp_receive+0xac6>
 8013292:	2301      	movs	r3, #1
 8013294:	e000      	b.n	8013298 <tcp_receive+0xac8>
 8013296:	2300      	movs	r3, #0
 8013298:	1919      	adds	r1, r3, r4
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801329e:	b28b      	uxth	r3, r1
 80132a0:	1ad3      	subs	r3, r2, r3
 80132a2:	b29a      	uxth	r2, r3
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80132a8:	6878      	ldr	r0, [r7, #4]
 80132aa:	f7fc fe2f 	bl	800ff0c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80132ae:	68bb      	ldr	r3, [r7, #8]
 80132b0:	685b      	ldr	r3, [r3, #4]
 80132b2:	891b      	ldrh	r3, [r3, #8]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d028      	beq.n	801330a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80132b8:	4b0d      	ldr	r3, [pc, #52]	@ (80132f0 <tcp_receive+0xb20>)
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d01d      	beq.n	80132fc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80132c0:	4b0b      	ldr	r3, [pc, #44]	@ (80132f0 <tcp_receive+0xb20>)
 80132c2:	681a      	ldr	r2, [r3, #0]
 80132c4:	68bb      	ldr	r3, [r7, #8]
 80132c6:	685b      	ldr	r3, [r3, #4]
 80132c8:	4619      	mov	r1, r3
 80132ca:	4610      	mov	r0, r2
 80132cc:	f7fc f82e 	bl	800f32c <pbuf_cat>
 80132d0:	e018      	b.n	8013304 <tcp_receive+0xb34>
 80132d2:	bf00      	nop
 80132d4:	20010346 	.word	0x20010346
 80132d8:	2001033c 	.word	0x2001033c
 80132dc:	2001031c 	.word	0x2001031c
 80132e0:	0802b49c 	.word	0x0802b49c
 80132e4:	0802b87c 	.word	0x0802b87c
 80132e8:	0802b4e8 	.word	0x0802b4e8
 80132ec:	0802b8b8 	.word	0x0802b8b8
 80132f0:	2001034c 	.word	0x2001034c
 80132f4:	20010349 	.word	0x20010349
 80132f8:	0802b8d8 	.word	0x0802b8d8
            } else {
              recv_data = cseg->p;
 80132fc:	68bb      	ldr	r3, [r7, #8]
 80132fe:	685b      	ldr	r3, [r3, #4]
 8013300:	4a70      	ldr	r2, [pc, #448]	@ (80134c4 <tcp_receive+0xcf4>)
 8013302:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8013304:	68bb      	ldr	r3, [r7, #8]
 8013306:	2200      	movs	r2, #0
 8013308:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801330a:	68bb      	ldr	r3, [r7, #8]
 801330c:	68db      	ldr	r3, [r3, #12]
 801330e:	899b      	ldrh	r3, [r3, #12]
 8013310:	b29b      	uxth	r3, r3
 8013312:	4618      	mov	r0, r3
 8013314:	f7fa fae4 	bl	800d8e0 <lwip_htons>
 8013318:	4603      	mov	r3, r0
 801331a:	b2db      	uxtb	r3, r3
 801331c:	f003 0301 	and.w	r3, r3, #1
 8013320:	2b00      	cmp	r3, #0
 8013322:	d00d      	beq.n	8013340 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8013324:	4b68      	ldr	r3, [pc, #416]	@ (80134c8 <tcp_receive+0xcf8>)
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	f043 0320 	orr.w	r3, r3, #32
 801332c:	b2da      	uxtb	r2, r3
 801332e:	4b66      	ldr	r3, [pc, #408]	@ (80134c8 <tcp_receive+0xcf8>)
 8013330:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	7d1b      	ldrb	r3, [r3, #20]
 8013336:	2b04      	cmp	r3, #4
 8013338:	d102      	bne.n	8013340 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	2207      	movs	r2, #7
 801333e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013340:	68bb      	ldr	r3, [r7, #8]
 8013342:	681a      	ldr	r2, [r3, #0]
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8013348:	68b8      	ldr	r0, [r7, #8]
 801334a:	f7fd fb06 	bl	801095a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013352:	2b00      	cmp	r3, #0
 8013354:	d008      	beq.n	8013368 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801335a:	68db      	ldr	r3, [r3, #12]
 801335c:	685a      	ldr	r2, [r3, #4]
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8013362:	429a      	cmp	r2, r3
 8013364:	f43f af43 	beq.w	80131ee <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	8b5b      	ldrh	r3, [r3, #26]
 801336c:	f003 0301 	and.w	r3, r3, #1
 8013370:	2b00      	cmp	r3, #0
 8013372:	d00e      	beq.n	8013392 <tcp_receive+0xbc2>
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	8b5b      	ldrh	r3, [r3, #26]
 8013378:	f023 0301 	bic.w	r3, r3, #1
 801337c:	b29a      	uxth	r2, r3
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	835a      	strh	r2, [r3, #26]
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	8b5b      	ldrh	r3, [r3, #26]
 8013386:	f043 0302 	orr.w	r3, r3, #2
 801338a:	b29a      	uxth	r2, r3
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013390:	e187      	b.n	80136a2 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	8b5b      	ldrh	r3, [r3, #26]
 8013396:	f043 0301 	orr.w	r3, r3, #1
 801339a:	b29a      	uxth	r2, r3
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80133a0:	e17f      	b.n	80136a2 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d106      	bne.n	80133b8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80133aa:	4848      	ldr	r0, [pc, #288]	@ (80134cc <tcp_receive+0xcfc>)
 80133ac:	f7fd faee 	bl	801098c <tcp_seg_copy>
 80133b0:	4602      	mov	r2, r0
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	675a      	str	r2, [r3, #116]	@ 0x74
 80133b6:	e16c      	b.n	8013692 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80133b8:	2300      	movs	r3, #0
 80133ba:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80133c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80133c2:	e156      	b.n	8013672 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80133c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133c6:	68db      	ldr	r3, [r3, #12]
 80133c8:	685a      	ldr	r2, [r3, #4]
 80133ca:	4b41      	ldr	r3, [pc, #260]	@ (80134d0 <tcp_receive+0xd00>)
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	429a      	cmp	r2, r3
 80133d0:	d11d      	bne.n	801340e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80133d2:	4b3e      	ldr	r3, [pc, #248]	@ (80134cc <tcp_receive+0xcfc>)
 80133d4:	891a      	ldrh	r2, [r3, #8]
 80133d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133d8:	891b      	ldrh	r3, [r3, #8]
 80133da:	429a      	cmp	r2, r3
 80133dc:	f240 814e 	bls.w	801367c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80133e0:	483a      	ldr	r0, [pc, #232]	@ (80134cc <tcp_receive+0xcfc>)
 80133e2:	f7fd fad3 	bl	801098c <tcp_seg_copy>
 80133e6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80133e8:	697b      	ldr	r3, [r7, #20]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	f000 8148 	beq.w	8013680 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80133f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d003      	beq.n	80133fe <tcp_receive+0xc2e>
                    prev->next = cseg;
 80133f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133f8:	697a      	ldr	r2, [r7, #20]
 80133fa:	601a      	str	r2, [r3, #0]
 80133fc:	e002      	b.n	8013404 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	697a      	ldr	r2, [r7, #20]
 8013402:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8013404:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013406:	6978      	ldr	r0, [r7, #20]
 8013408:	f7ff f8de 	bl	80125c8 <tcp_oos_insert_segment>
                }
                break;
 801340c:	e138      	b.n	8013680 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801340e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013410:	2b00      	cmp	r3, #0
 8013412:	d117      	bne.n	8013444 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8013414:	4b2e      	ldr	r3, [pc, #184]	@ (80134d0 <tcp_receive+0xd00>)
 8013416:	681a      	ldr	r2, [r3, #0]
 8013418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801341a:	68db      	ldr	r3, [r3, #12]
 801341c:	685b      	ldr	r3, [r3, #4]
 801341e:	1ad3      	subs	r3, r2, r3
 8013420:	2b00      	cmp	r3, #0
 8013422:	da57      	bge.n	80134d4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013424:	4829      	ldr	r0, [pc, #164]	@ (80134cc <tcp_receive+0xcfc>)
 8013426:	f7fd fab1 	bl	801098c <tcp_seg_copy>
 801342a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801342c:	69bb      	ldr	r3, [r7, #24]
 801342e:	2b00      	cmp	r3, #0
 8013430:	f000 8128 	beq.w	8013684 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	69ba      	ldr	r2, [r7, #24]
 8013438:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801343a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801343c:	69b8      	ldr	r0, [r7, #24]
 801343e:	f7ff f8c3 	bl	80125c8 <tcp_oos_insert_segment>
                  }
                  break;
 8013442:	e11f      	b.n	8013684 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8013444:	4b22      	ldr	r3, [pc, #136]	@ (80134d0 <tcp_receive+0xd00>)
 8013446:	681a      	ldr	r2, [r3, #0]
 8013448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801344a:	68db      	ldr	r3, [r3, #12]
 801344c:	685b      	ldr	r3, [r3, #4]
 801344e:	1ad3      	subs	r3, r2, r3
 8013450:	3b01      	subs	r3, #1
 8013452:	2b00      	cmp	r3, #0
 8013454:	db3e      	blt.n	80134d4 <tcp_receive+0xd04>
 8013456:	4b1e      	ldr	r3, [pc, #120]	@ (80134d0 <tcp_receive+0xd00>)
 8013458:	681a      	ldr	r2, [r3, #0]
 801345a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801345c:	68db      	ldr	r3, [r3, #12]
 801345e:	685b      	ldr	r3, [r3, #4]
 8013460:	1ad3      	subs	r3, r2, r3
 8013462:	3301      	adds	r3, #1
 8013464:	2b00      	cmp	r3, #0
 8013466:	dc35      	bgt.n	80134d4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013468:	4818      	ldr	r0, [pc, #96]	@ (80134cc <tcp_receive+0xcfc>)
 801346a:	f7fd fa8f 	bl	801098c <tcp_seg_copy>
 801346e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8013470:	69fb      	ldr	r3, [r7, #28]
 8013472:	2b00      	cmp	r3, #0
 8013474:	f000 8108 	beq.w	8013688 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801347a:	68db      	ldr	r3, [r3, #12]
 801347c:	685b      	ldr	r3, [r3, #4]
 801347e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013480:	8912      	ldrh	r2, [r2, #8]
 8013482:	441a      	add	r2, r3
 8013484:	4b12      	ldr	r3, [pc, #72]	@ (80134d0 <tcp_receive+0xd00>)
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	1ad3      	subs	r3, r2, r3
 801348a:	2b00      	cmp	r3, #0
 801348c:	dd12      	ble.n	80134b4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801348e:	4b10      	ldr	r3, [pc, #64]	@ (80134d0 <tcp_receive+0xd00>)
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	b29a      	uxth	r2, r3
 8013494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013496:	68db      	ldr	r3, [r3, #12]
 8013498:	685b      	ldr	r3, [r3, #4]
 801349a:	b29b      	uxth	r3, r3
 801349c:	1ad3      	subs	r3, r2, r3
 801349e:	b29a      	uxth	r2, r3
 80134a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134a2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80134a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134a6:	685a      	ldr	r2, [r3, #4]
 80134a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134aa:	891b      	ldrh	r3, [r3, #8]
 80134ac:	4619      	mov	r1, r3
 80134ae:	4610      	mov	r0, r2
 80134b0:	f7fb fcb6 	bl	800ee20 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80134b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134b6:	69fa      	ldr	r2, [r7, #28]
 80134b8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80134ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80134bc:	69f8      	ldr	r0, [r7, #28]
 80134be:	f7ff f883 	bl	80125c8 <tcp_oos_insert_segment>
                  }
                  break;
 80134c2:	e0e1      	b.n	8013688 <tcp_receive+0xeb8>
 80134c4:	2001034c 	.word	0x2001034c
 80134c8:	20010349 	.word	0x20010349
 80134cc:	2001031c 	.word	0x2001031c
 80134d0:	2001033c 	.word	0x2001033c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80134d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134d6:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80134d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	f040 80c5 	bne.w	801366c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80134e2:	4b7f      	ldr	r3, [pc, #508]	@ (80136e0 <tcp_receive+0xf10>)
 80134e4:	681a      	ldr	r2, [r3, #0]
 80134e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134e8:	68db      	ldr	r3, [r3, #12]
 80134ea:	685b      	ldr	r3, [r3, #4]
 80134ec:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	f340 80bc 	ble.w	801366c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80134f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134f6:	68db      	ldr	r3, [r3, #12]
 80134f8:	899b      	ldrh	r3, [r3, #12]
 80134fa:	b29b      	uxth	r3, r3
 80134fc:	4618      	mov	r0, r3
 80134fe:	f7fa f9ef 	bl	800d8e0 <lwip_htons>
 8013502:	4603      	mov	r3, r0
 8013504:	b2db      	uxtb	r3, r3
 8013506:	f003 0301 	and.w	r3, r3, #1
 801350a:	2b00      	cmp	r3, #0
 801350c:	f040 80be 	bne.w	801368c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8013510:	4874      	ldr	r0, [pc, #464]	@ (80136e4 <tcp_receive+0xf14>)
 8013512:	f7fd fa3b 	bl	801098c <tcp_seg_copy>
 8013516:	4602      	mov	r2, r0
 8013518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801351a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801351c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	2b00      	cmp	r3, #0
 8013522:	f000 80b5 	beq.w	8013690 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8013526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013528:	68db      	ldr	r3, [r3, #12]
 801352a:	685b      	ldr	r3, [r3, #4]
 801352c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801352e:	8912      	ldrh	r2, [r2, #8]
 8013530:	441a      	add	r2, r3
 8013532:	4b6b      	ldr	r3, [pc, #428]	@ (80136e0 <tcp_receive+0xf10>)
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	1ad3      	subs	r3, r2, r3
 8013538:	2b00      	cmp	r3, #0
 801353a:	dd12      	ble.n	8013562 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801353c:	4b68      	ldr	r3, [pc, #416]	@ (80136e0 <tcp_receive+0xf10>)
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	b29a      	uxth	r2, r3
 8013542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013544:	68db      	ldr	r3, [r3, #12]
 8013546:	685b      	ldr	r3, [r3, #4]
 8013548:	b29b      	uxth	r3, r3
 801354a:	1ad3      	subs	r3, r2, r3
 801354c:	b29a      	uxth	r2, r3
 801354e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013550:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8013552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013554:	685a      	ldr	r2, [r3, #4]
 8013556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013558:	891b      	ldrh	r3, [r3, #8]
 801355a:	4619      	mov	r1, r3
 801355c:	4610      	mov	r0, r2
 801355e:	f7fb fc5f 	bl	800ee20 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8013562:	4b61      	ldr	r3, [pc, #388]	@ (80136e8 <tcp_receive+0xf18>)
 8013564:	881b      	ldrh	r3, [r3, #0]
 8013566:	461a      	mov	r2, r3
 8013568:	4b5d      	ldr	r3, [pc, #372]	@ (80136e0 <tcp_receive+0xf10>)
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	441a      	add	r2, r3
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013572:	6879      	ldr	r1, [r7, #4]
 8013574:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013576:	440b      	add	r3, r1
 8013578:	1ad3      	subs	r3, r2, r3
 801357a:	2b00      	cmp	r3, #0
 801357c:	f340 8088 	ble.w	8013690 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	68db      	ldr	r3, [r3, #12]
 8013586:	899b      	ldrh	r3, [r3, #12]
 8013588:	b29b      	uxth	r3, r3
 801358a:	4618      	mov	r0, r3
 801358c:	f7fa f9a8 	bl	800d8e0 <lwip_htons>
 8013590:	4603      	mov	r3, r0
 8013592:	b2db      	uxtb	r3, r3
 8013594:	f003 0301 	and.w	r3, r3, #1
 8013598:	2b00      	cmp	r3, #0
 801359a:	d021      	beq.n	80135e0 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801359c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	68db      	ldr	r3, [r3, #12]
 80135a2:	899b      	ldrh	r3, [r3, #12]
 80135a4:	b29b      	uxth	r3, r3
 80135a6:	b21b      	sxth	r3, r3
 80135a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80135ac:	b21c      	sxth	r4, r3
 80135ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	68db      	ldr	r3, [r3, #12]
 80135b4:	899b      	ldrh	r3, [r3, #12]
 80135b6:	b29b      	uxth	r3, r3
 80135b8:	4618      	mov	r0, r3
 80135ba:	f7fa f991 	bl	800d8e0 <lwip_htons>
 80135be:	4603      	mov	r3, r0
 80135c0:	b2db      	uxtb	r3, r3
 80135c2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80135c6:	b29b      	uxth	r3, r3
 80135c8:	4618      	mov	r0, r3
 80135ca:	f7fa f989 	bl	800d8e0 <lwip_htons>
 80135ce:	4603      	mov	r3, r0
 80135d0:	b21b      	sxth	r3, r3
 80135d2:	4323      	orrs	r3, r4
 80135d4:	b21a      	sxth	r2, r3
 80135d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	68db      	ldr	r3, [r3, #12]
 80135dc:	b292      	uxth	r2, r2
 80135de:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80135e4:	b29a      	uxth	r2, r3
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80135ea:	4413      	add	r3, r2
 80135ec:	b299      	uxth	r1, r3
 80135ee:	4b3c      	ldr	r3, [pc, #240]	@ (80136e0 <tcp_receive+0xf10>)
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	b29a      	uxth	r2, r3
 80135f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	1a8a      	subs	r2, r1, r2
 80135fa:	b292      	uxth	r2, r2
 80135fc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80135fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	685a      	ldr	r2, [r3, #4]
 8013604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	891b      	ldrh	r3, [r3, #8]
 801360a:	4619      	mov	r1, r3
 801360c:	4610      	mov	r0, r2
 801360e:	f7fb fc07 	bl	800ee20 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8013612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	891c      	ldrh	r4, [r3, #8]
 8013618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	68db      	ldr	r3, [r3, #12]
 801361e:	899b      	ldrh	r3, [r3, #12]
 8013620:	b29b      	uxth	r3, r3
 8013622:	4618      	mov	r0, r3
 8013624:	f7fa f95c 	bl	800d8e0 <lwip_htons>
 8013628:	4603      	mov	r3, r0
 801362a:	b2db      	uxtb	r3, r3
 801362c:	f003 0303 	and.w	r3, r3, #3
 8013630:	2b00      	cmp	r3, #0
 8013632:	d001      	beq.n	8013638 <tcp_receive+0xe68>
 8013634:	2301      	movs	r3, #1
 8013636:	e000      	b.n	801363a <tcp_receive+0xe6a>
 8013638:	2300      	movs	r3, #0
 801363a:	4423      	add	r3, r4
 801363c:	b29a      	uxth	r2, r3
 801363e:	4b2a      	ldr	r3, [pc, #168]	@ (80136e8 <tcp_receive+0xf18>)
 8013640:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013642:	4b29      	ldr	r3, [pc, #164]	@ (80136e8 <tcp_receive+0xf18>)
 8013644:	881b      	ldrh	r3, [r3, #0]
 8013646:	461a      	mov	r2, r3
 8013648:	4b25      	ldr	r3, [pc, #148]	@ (80136e0 <tcp_receive+0xf10>)
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	441a      	add	r2, r3
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013652:	6879      	ldr	r1, [r7, #4]
 8013654:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013656:	440b      	add	r3, r1
 8013658:	429a      	cmp	r2, r3
 801365a:	d019      	beq.n	8013690 <tcp_receive+0xec0>
 801365c:	4b23      	ldr	r3, [pc, #140]	@ (80136ec <tcp_receive+0xf1c>)
 801365e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8013662:	4923      	ldr	r1, [pc, #140]	@ (80136f0 <tcp_receive+0xf20>)
 8013664:	4823      	ldr	r0, [pc, #140]	@ (80136f4 <tcp_receive+0xf24>)
 8013666:	f014 fc65 	bl	8027f34 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801366a:	e011      	b.n	8013690 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801366c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013674:	2b00      	cmp	r3, #0
 8013676:	f47f aea5 	bne.w	80133c4 <tcp_receive+0xbf4>
 801367a:	e00a      	b.n	8013692 <tcp_receive+0xec2>
                break;
 801367c:	bf00      	nop
 801367e:	e008      	b.n	8013692 <tcp_receive+0xec2>
                break;
 8013680:	bf00      	nop
 8013682:	e006      	b.n	8013692 <tcp_receive+0xec2>
                  break;
 8013684:	bf00      	nop
 8013686:	e004      	b.n	8013692 <tcp_receive+0xec2>
                  break;
 8013688:	bf00      	nop
 801368a:	e002      	b.n	8013692 <tcp_receive+0xec2>
                  break;
 801368c:	bf00      	nop
 801368e:	e000      	b.n	8013692 <tcp_receive+0xec2>
                break;
 8013690:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8013692:	6878      	ldr	r0, [r7, #4]
 8013694:	f001 fe88 	bl	80153a8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8013698:	e003      	b.n	80136a2 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801369a:	6878      	ldr	r0, [r7, #4]
 801369c:	f001 fe84 	bl	80153a8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80136a0:	e01a      	b.n	80136d8 <tcp_receive+0xf08>
 80136a2:	e019      	b.n	80136d8 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80136a4:	4b0e      	ldr	r3, [pc, #56]	@ (80136e0 <tcp_receive+0xf10>)
 80136a6:	681a      	ldr	r2, [r3, #0]
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136ac:	1ad3      	subs	r3, r2, r3
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	db0a      	blt.n	80136c8 <tcp_receive+0xef8>
 80136b2:	4b0b      	ldr	r3, [pc, #44]	@ (80136e0 <tcp_receive+0xf10>)
 80136b4:	681a      	ldr	r2, [r3, #0]
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136ba:	6879      	ldr	r1, [r7, #4]
 80136bc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80136be:	440b      	add	r3, r1
 80136c0:	1ad3      	subs	r3, r2, r3
 80136c2:	3301      	adds	r3, #1
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	dd07      	ble.n	80136d8 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	8b5b      	ldrh	r3, [r3, #26]
 80136cc:	f043 0302 	orr.w	r3, r3, #2
 80136d0:	b29a      	uxth	r2, r3
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80136d6:	e7ff      	b.n	80136d8 <tcp_receive+0xf08>
 80136d8:	bf00      	nop
 80136da:	3750      	adds	r7, #80	@ 0x50
 80136dc:	46bd      	mov	sp, r7
 80136de:	bdb0      	pop	{r4, r5, r7, pc}
 80136e0:	2001033c 	.word	0x2001033c
 80136e4:	2001031c 	.word	0x2001031c
 80136e8:	20010346 	.word	0x20010346
 80136ec:	0802b49c 	.word	0x0802b49c
 80136f0:	0802b844 	.word	0x0802b844
 80136f4:	0802b4e8 	.word	0x0802b4e8

080136f8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80136f8:	b480      	push	{r7}
 80136fa:	b083      	sub	sp, #12
 80136fc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80136fe:	4b15      	ldr	r3, [pc, #84]	@ (8013754 <tcp_get_next_optbyte+0x5c>)
 8013700:	881b      	ldrh	r3, [r3, #0]
 8013702:	1c5a      	adds	r2, r3, #1
 8013704:	b291      	uxth	r1, r2
 8013706:	4a13      	ldr	r2, [pc, #76]	@ (8013754 <tcp_get_next_optbyte+0x5c>)
 8013708:	8011      	strh	r1, [r2, #0]
 801370a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801370c:	4b12      	ldr	r3, [pc, #72]	@ (8013758 <tcp_get_next_optbyte+0x60>)
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d004      	beq.n	801371e <tcp_get_next_optbyte+0x26>
 8013714:	4b11      	ldr	r3, [pc, #68]	@ (801375c <tcp_get_next_optbyte+0x64>)
 8013716:	881b      	ldrh	r3, [r3, #0]
 8013718:	88fa      	ldrh	r2, [r7, #6]
 801371a:	429a      	cmp	r2, r3
 801371c:	d208      	bcs.n	8013730 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801371e:	4b10      	ldr	r3, [pc, #64]	@ (8013760 <tcp_get_next_optbyte+0x68>)
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	3314      	adds	r3, #20
 8013724:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8013726:	88fb      	ldrh	r3, [r7, #6]
 8013728:	683a      	ldr	r2, [r7, #0]
 801372a:	4413      	add	r3, r2
 801372c:	781b      	ldrb	r3, [r3, #0]
 801372e:	e00b      	b.n	8013748 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8013730:	88fb      	ldrh	r3, [r7, #6]
 8013732:	b2da      	uxtb	r2, r3
 8013734:	4b09      	ldr	r3, [pc, #36]	@ (801375c <tcp_get_next_optbyte+0x64>)
 8013736:	881b      	ldrh	r3, [r3, #0]
 8013738:	b2db      	uxtb	r3, r3
 801373a:	1ad3      	subs	r3, r2, r3
 801373c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801373e:	4b06      	ldr	r3, [pc, #24]	@ (8013758 <tcp_get_next_optbyte+0x60>)
 8013740:	681a      	ldr	r2, [r3, #0]
 8013742:	797b      	ldrb	r3, [r7, #5]
 8013744:	4413      	add	r3, r2
 8013746:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013748:	4618      	mov	r0, r3
 801374a:	370c      	adds	r7, #12
 801374c:	46bd      	mov	sp, r7
 801374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013752:	4770      	bx	lr
 8013754:	20010338 	.word	0x20010338
 8013758:	20010334 	.word	0x20010334
 801375c:	20010332 	.word	0x20010332
 8013760:	2001032c 	.word	0x2001032c

08013764 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013764:	b580      	push	{r7, lr}
 8013766:	b084      	sub	sp, #16
 8013768:	af00      	add	r7, sp, #0
 801376a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d106      	bne.n	8013780 <tcp_parseopt+0x1c>
 8013772:	4b32      	ldr	r3, [pc, #200]	@ (801383c <tcp_parseopt+0xd8>)
 8013774:	f240 727d 	movw	r2, #1917	@ 0x77d
 8013778:	4931      	ldr	r1, [pc, #196]	@ (8013840 <tcp_parseopt+0xdc>)
 801377a:	4832      	ldr	r0, [pc, #200]	@ (8013844 <tcp_parseopt+0xe0>)
 801377c:	f014 fbda 	bl	8027f34 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8013780:	4b31      	ldr	r3, [pc, #196]	@ (8013848 <tcp_parseopt+0xe4>)
 8013782:	881b      	ldrh	r3, [r3, #0]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d056      	beq.n	8013836 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013788:	4b30      	ldr	r3, [pc, #192]	@ (801384c <tcp_parseopt+0xe8>)
 801378a:	2200      	movs	r2, #0
 801378c:	801a      	strh	r2, [r3, #0]
 801378e:	e046      	b.n	801381e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8013790:	f7ff ffb2 	bl	80136f8 <tcp_get_next_optbyte>
 8013794:	4603      	mov	r3, r0
 8013796:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013798:	7bfb      	ldrb	r3, [r7, #15]
 801379a:	2b02      	cmp	r3, #2
 801379c:	d006      	beq.n	80137ac <tcp_parseopt+0x48>
 801379e:	2b02      	cmp	r3, #2
 80137a0:	dc2a      	bgt.n	80137f8 <tcp_parseopt+0x94>
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d042      	beq.n	801382c <tcp_parseopt+0xc8>
 80137a6:	2b01      	cmp	r3, #1
 80137a8:	d038      	beq.n	801381c <tcp_parseopt+0xb8>
 80137aa:	e025      	b.n	80137f8 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80137ac:	f7ff ffa4 	bl	80136f8 <tcp_get_next_optbyte>
 80137b0:	4603      	mov	r3, r0
 80137b2:	2b04      	cmp	r3, #4
 80137b4:	d13c      	bne.n	8013830 <tcp_parseopt+0xcc>
 80137b6:	4b25      	ldr	r3, [pc, #148]	@ (801384c <tcp_parseopt+0xe8>)
 80137b8:	881b      	ldrh	r3, [r3, #0]
 80137ba:	3301      	adds	r3, #1
 80137bc:	4a22      	ldr	r2, [pc, #136]	@ (8013848 <tcp_parseopt+0xe4>)
 80137be:	8812      	ldrh	r2, [r2, #0]
 80137c0:	4293      	cmp	r3, r2
 80137c2:	da35      	bge.n	8013830 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80137c4:	f7ff ff98 	bl	80136f8 <tcp_get_next_optbyte>
 80137c8:	4603      	mov	r3, r0
 80137ca:	021b      	lsls	r3, r3, #8
 80137cc:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80137ce:	f7ff ff93 	bl	80136f8 <tcp_get_next_optbyte>
 80137d2:	4603      	mov	r3, r0
 80137d4:	461a      	mov	r2, r3
 80137d6:	89bb      	ldrh	r3, [r7, #12]
 80137d8:	4313      	orrs	r3, r2
 80137da:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80137dc:	89bb      	ldrh	r3, [r7, #12]
 80137de:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80137e2:	d804      	bhi.n	80137ee <tcp_parseopt+0x8a>
 80137e4:	89bb      	ldrh	r3, [r7, #12]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d001      	beq.n	80137ee <tcp_parseopt+0x8a>
 80137ea:	89ba      	ldrh	r2, [r7, #12]
 80137ec:	e001      	b.n	80137f2 <tcp_parseopt+0x8e>
 80137ee:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80137f6:	e012      	b.n	801381e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80137f8:	f7ff ff7e 	bl	80136f8 <tcp_get_next_optbyte>
 80137fc:	4603      	mov	r3, r0
 80137fe:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8013800:	7afb      	ldrb	r3, [r7, #11]
 8013802:	2b01      	cmp	r3, #1
 8013804:	d916      	bls.n	8013834 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013806:	7afb      	ldrb	r3, [r7, #11]
 8013808:	b29a      	uxth	r2, r3
 801380a:	4b10      	ldr	r3, [pc, #64]	@ (801384c <tcp_parseopt+0xe8>)
 801380c:	881b      	ldrh	r3, [r3, #0]
 801380e:	4413      	add	r3, r2
 8013810:	b29b      	uxth	r3, r3
 8013812:	3b02      	subs	r3, #2
 8013814:	b29a      	uxth	r2, r3
 8013816:	4b0d      	ldr	r3, [pc, #52]	@ (801384c <tcp_parseopt+0xe8>)
 8013818:	801a      	strh	r2, [r3, #0]
 801381a:	e000      	b.n	801381e <tcp_parseopt+0xba>
          break;
 801381c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801381e:	4b0b      	ldr	r3, [pc, #44]	@ (801384c <tcp_parseopt+0xe8>)
 8013820:	881a      	ldrh	r2, [r3, #0]
 8013822:	4b09      	ldr	r3, [pc, #36]	@ (8013848 <tcp_parseopt+0xe4>)
 8013824:	881b      	ldrh	r3, [r3, #0]
 8013826:	429a      	cmp	r2, r3
 8013828:	d3b2      	bcc.n	8013790 <tcp_parseopt+0x2c>
 801382a:	e004      	b.n	8013836 <tcp_parseopt+0xd2>
          return;
 801382c:	bf00      	nop
 801382e:	e002      	b.n	8013836 <tcp_parseopt+0xd2>
            return;
 8013830:	bf00      	nop
 8013832:	e000      	b.n	8013836 <tcp_parseopt+0xd2>
            return;
 8013834:	bf00      	nop
      }
    }
  }
}
 8013836:	3710      	adds	r7, #16
 8013838:	46bd      	mov	sp, r7
 801383a:	bd80      	pop	{r7, pc}
 801383c:	0802b49c 	.word	0x0802b49c
 8013840:	0802b900 	.word	0x0802b900
 8013844:	0802b4e8 	.word	0x0802b4e8
 8013848:	20010330 	.word	0x20010330
 801384c:	20010338 	.word	0x20010338

08013850 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8013850:	b480      	push	{r7}
 8013852:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013854:	4b05      	ldr	r3, [pc, #20]	@ (801386c <tcp_trigger_input_pcb_close+0x1c>)
 8013856:	781b      	ldrb	r3, [r3, #0]
 8013858:	f043 0310 	orr.w	r3, r3, #16
 801385c:	b2da      	uxtb	r2, r3
 801385e:	4b03      	ldr	r3, [pc, #12]	@ (801386c <tcp_trigger_input_pcb_close+0x1c>)
 8013860:	701a      	strb	r2, [r3, #0]
}
 8013862:	bf00      	nop
 8013864:	46bd      	mov	sp, r7
 8013866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801386a:	4770      	bx	lr
 801386c:	20010349 	.word	0x20010349

08013870 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b084      	sub	sp, #16
 8013874:	af00      	add	r7, sp, #0
 8013876:	60f8      	str	r0, [r7, #12]
 8013878:	60b9      	str	r1, [r7, #8]
 801387a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d00a      	beq.n	8013898 <tcp_route+0x28>
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	7a1b      	ldrb	r3, [r3, #8]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d006      	beq.n	8013898 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	7a1b      	ldrb	r3, [r3, #8]
 801388e:	4618      	mov	r0, r3
 8013890:	f7fb f886 	bl	800e9a0 <netif_get_by_index>
 8013894:	4603      	mov	r3, r0
 8013896:	e003      	b.n	80138a0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013898:	6878      	ldr	r0, [r7, #4]
 801389a:	f003 fe4d 	bl	8017538 <ip4_route>
 801389e:	4603      	mov	r3, r0
  }
}
 80138a0:	4618      	mov	r0, r3
 80138a2:	3710      	adds	r7, #16
 80138a4:	46bd      	mov	sp, r7
 80138a6:	bd80      	pop	{r7, pc}

080138a8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80138a8:	b590      	push	{r4, r7, lr}
 80138aa:	b087      	sub	sp, #28
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	60f8      	str	r0, [r7, #12]
 80138b0:	60b9      	str	r1, [r7, #8]
 80138b2:	603b      	str	r3, [r7, #0]
 80138b4:	4613      	mov	r3, r2
 80138b6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d105      	bne.n	80138ca <tcp_create_segment+0x22>
 80138be:	4b43      	ldr	r3, [pc, #268]	@ (80139cc <tcp_create_segment+0x124>)
 80138c0:	22a3      	movs	r2, #163	@ 0xa3
 80138c2:	4943      	ldr	r1, [pc, #268]	@ (80139d0 <tcp_create_segment+0x128>)
 80138c4:	4843      	ldr	r0, [pc, #268]	@ (80139d4 <tcp_create_segment+0x12c>)
 80138c6:	f014 fb35 	bl	8027f34 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80138ca:	68bb      	ldr	r3, [r7, #8]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d105      	bne.n	80138dc <tcp_create_segment+0x34>
 80138d0:	4b3e      	ldr	r3, [pc, #248]	@ (80139cc <tcp_create_segment+0x124>)
 80138d2:	22a4      	movs	r2, #164	@ 0xa4
 80138d4:	4940      	ldr	r1, [pc, #256]	@ (80139d8 <tcp_create_segment+0x130>)
 80138d6:	483f      	ldr	r0, [pc, #252]	@ (80139d4 <tcp_create_segment+0x12c>)
 80138d8:	f014 fb2c 	bl	8027f34 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80138dc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80138e0:	009b      	lsls	r3, r3, #2
 80138e2:	b2db      	uxtb	r3, r3
 80138e4:	f003 0304 	and.w	r3, r3, #4
 80138e8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80138ea:	2003      	movs	r0, #3
 80138ec:	f7fa fccc 	bl	800e288 <memp_malloc>
 80138f0:	6138      	str	r0, [r7, #16]
 80138f2:	693b      	ldr	r3, [r7, #16]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d104      	bne.n	8013902 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80138f8:	68b8      	ldr	r0, [r7, #8]
 80138fa:	f7fb fc49 	bl	800f190 <pbuf_free>
    return NULL;
 80138fe:	2300      	movs	r3, #0
 8013900:	e060      	b.n	80139c4 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8013902:	693b      	ldr	r3, [r7, #16]
 8013904:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8013908:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801390a:	693b      	ldr	r3, [r7, #16]
 801390c:	2200      	movs	r2, #0
 801390e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8013910:	693b      	ldr	r3, [r7, #16]
 8013912:	68ba      	ldr	r2, [r7, #8]
 8013914:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013916:	68bb      	ldr	r3, [r7, #8]
 8013918:	891a      	ldrh	r2, [r3, #8]
 801391a:	7dfb      	ldrb	r3, [r7, #23]
 801391c:	b29b      	uxth	r3, r3
 801391e:	429a      	cmp	r2, r3
 8013920:	d205      	bcs.n	801392e <tcp_create_segment+0x86>
 8013922:	4b2a      	ldr	r3, [pc, #168]	@ (80139cc <tcp_create_segment+0x124>)
 8013924:	22b0      	movs	r2, #176	@ 0xb0
 8013926:	492d      	ldr	r1, [pc, #180]	@ (80139dc <tcp_create_segment+0x134>)
 8013928:	482a      	ldr	r0, [pc, #168]	@ (80139d4 <tcp_create_segment+0x12c>)
 801392a:	f014 fb03 	bl	8027f34 <iprintf>
  seg->len = p->tot_len - optlen;
 801392e:	68bb      	ldr	r3, [r7, #8]
 8013930:	891a      	ldrh	r2, [r3, #8]
 8013932:	7dfb      	ldrb	r3, [r7, #23]
 8013934:	b29b      	uxth	r3, r3
 8013936:	1ad3      	subs	r3, r2, r3
 8013938:	b29a      	uxth	r2, r3
 801393a:	693b      	ldr	r3, [r7, #16]
 801393c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801393e:	2114      	movs	r1, #20
 8013940:	68b8      	ldr	r0, [r7, #8]
 8013942:	f7fb fb5d 	bl	800f000 <pbuf_add_header>
 8013946:	4603      	mov	r3, r0
 8013948:	2b00      	cmp	r3, #0
 801394a:	d004      	beq.n	8013956 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801394c:	6938      	ldr	r0, [r7, #16]
 801394e:	f7fd f804 	bl	801095a <tcp_seg_free>
    return NULL;
 8013952:	2300      	movs	r3, #0
 8013954:	e036      	b.n	80139c4 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	685b      	ldr	r3, [r3, #4]
 801395a:	685a      	ldr	r2, [r3, #4]
 801395c:	693b      	ldr	r3, [r7, #16]
 801395e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	8ada      	ldrh	r2, [r3, #22]
 8013964:	693b      	ldr	r3, [r7, #16]
 8013966:	68dc      	ldr	r4, [r3, #12]
 8013968:	4610      	mov	r0, r2
 801396a:	f7f9 ffb9 	bl	800d8e0 <lwip_htons>
 801396e:	4603      	mov	r3, r0
 8013970:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	8b1a      	ldrh	r2, [r3, #24]
 8013976:	693b      	ldr	r3, [r7, #16]
 8013978:	68dc      	ldr	r4, [r3, #12]
 801397a:	4610      	mov	r0, r2
 801397c:	f7f9 ffb0 	bl	800d8e0 <lwip_htons>
 8013980:	4603      	mov	r3, r0
 8013982:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013984:	693b      	ldr	r3, [r7, #16]
 8013986:	68dc      	ldr	r4, [r3, #12]
 8013988:	6838      	ldr	r0, [r7, #0]
 801398a:	f7f9 ffbf 	bl	800d90c <lwip_htonl>
 801398e:	4603      	mov	r3, r0
 8013990:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013992:	7dfb      	ldrb	r3, [r7, #23]
 8013994:	089b      	lsrs	r3, r3, #2
 8013996:	b2db      	uxtb	r3, r3
 8013998:	3305      	adds	r3, #5
 801399a:	b29b      	uxth	r3, r3
 801399c:	031b      	lsls	r3, r3, #12
 801399e:	b29a      	uxth	r2, r3
 80139a0:	79fb      	ldrb	r3, [r7, #7]
 80139a2:	b29b      	uxth	r3, r3
 80139a4:	4313      	orrs	r3, r2
 80139a6:	b29a      	uxth	r2, r3
 80139a8:	693b      	ldr	r3, [r7, #16]
 80139aa:	68dc      	ldr	r4, [r3, #12]
 80139ac:	4610      	mov	r0, r2
 80139ae:	f7f9 ff97 	bl	800d8e0 <lwip_htons>
 80139b2:	4603      	mov	r3, r0
 80139b4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80139b6:	693b      	ldr	r3, [r7, #16]
 80139b8:	68db      	ldr	r3, [r3, #12]
 80139ba:	2200      	movs	r2, #0
 80139bc:	749a      	strb	r2, [r3, #18]
 80139be:	2200      	movs	r2, #0
 80139c0:	74da      	strb	r2, [r3, #19]
  return seg;
 80139c2:	693b      	ldr	r3, [r7, #16]
}
 80139c4:	4618      	mov	r0, r3
 80139c6:	371c      	adds	r7, #28
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd90      	pop	{r4, r7, pc}
 80139cc:	0802b91c 	.word	0x0802b91c
 80139d0:	0802b950 	.word	0x0802b950
 80139d4:	0802b970 	.word	0x0802b970
 80139d8:	0802b998 	.word	0x0802b998
 80139dc:	0802b9bc 	.word	0x0802b9bc

080139e0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80139e0:	b580      	push	{r7, lr}
 80139e2:	b086      	sub	sp, #24
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	607b      	str	r3, [r7, #4]
 80139e8:	4603      	mov	r3, r0
 80139ea:	73fb      	strb	r3, [r7, #15]
 80139ec:	460b      	mov	r3, r1
 80139ee:	81bb      	strh	r3, [r7, #12]
 80139f0:	4613      	mov	r3, r2
 80139f2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80139f4:	89bb      	ldrh	r3, [r7, #12]
 80139f6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d105      	bne.n	8013a0a <tcp_pbuf_prealloc+0x2a>
 80139fe:	4b30      	ldr	r3, [pc, #192]	@ (8013ac0 <tcp_pbuf_prealloc+0xe0>)
 8013a00:	22e8      	movs	r2, #232	@ 0xe8
 8013a02:	4930      	ldr	r1, [pc, #192]	@ (8013ac4 <tcp_pbuf_prealloc+0xe4>)
 8013a04:	4830      	ldr	r0, [pc, #192]	@ (8013ac8 <tcp_pbuf_prealloc+0xe8>)
 8013a06:	f014 fa95 	bl	8027f34 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8013a0a:	6a3b      	ldr	r3, [r7, #32]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d105      	bne.n	8013a1c <tcp_pbuf_prealloc+0x3c>
 8013a10:	4b2b      	ldr	r3, [pc, #172]	@ (8013ac0 <tcp_pbuf_prealloc+0xe0>)
 8013a12:	22e9      	movs	r2, #233	@ 0xe9
 8013a14:	492d      	ldr	r1, [pc, #180]	@ (8013acc <tcp_pbuf_prealloc+0xec>)
 8013a16:	482c      	ldr	r0, [pc, #176]	@ (8013ac8 <tcp_pbuf_prealloc+0xe8>)
 8013a18:	f014 fa8c 	bl	8027f34 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8013a1c:	89ba      	ldrh	r2, [r7, #12]
 8013a1e:	897b      	ldrh	r3, [r7, #10]
 8013a20:	429a      	cmp	r2, r3
 8013a22:	d221      	bcs.n	8013a68 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013a24:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013a28:	f003 0302 	and.w	r3, r3, #2
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d111      	bne.n	8013a54 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8013a30:	6a3b      	ldr	r3, [r7, #32]
 8013a32:	8b5b      	ldrh	r3, [r3, #26]
 8013a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d115      	bne.n	8013a68 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8013a3c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d007      	beq.n	8013a54 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8013a44:	6a3b      	ldr	r3, [r7, #32]
 8013a46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d103      	bne.n	8013a54 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8013a4c:	6a3b      	ldr	r3, [r7, #32]
 8013a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d009      	beq.n	8013a68 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8013a54:	89bb      	ldrh	r3, [r7, #12]
 8013a56:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8013a5a:	f023 0203 	bic.w	r2, r3, #3
 8013a5e:	897b      	ldrh	r3, [r7, #10]
 8013a60:	4293      	cmp	r3, r2
 8013a62:	bf28      	it	cs
 8013a64:	4613      	movcs	r3, r2
 8013a66:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8013a68:	8af9      	ldrh	r1, [r7, #22]
 8013a6a:	7bfb      	ldrb	r3, [r7, #15]
 8013a6c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013a70:	4618      	mov	r0, r3
 8013a72:	f7fb f877 	bl	800eb64 <pbuf_alloc>
 8013a76:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013a78:	693b      	ldr	r3, [r7, #16]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d101      	bne.n	8013a82 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8013a7e:	2300      	movs	r3, #0
 8013a80:	e019      	b.n	8013ab6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8013a82:	693b      	ldr	r3, [r7, #16]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d006      	beq.n	8013a98 <tcp_pbuf_prealloc+0xb8>
 8013a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8013ac0 <tcp_pbuf_prealloc+0xe0>)
 8013a8c:	f240 120b 	movw	r2, #267	@ 0x10b
 8013a90:	490f      	ldr	r1, [pc, #60]	@ (8013ad0 <tcp_pbuf_prealloc+0xf0>)
 8013a92:	480d      	ldr	r0, [pc, #52]	@ (8013ac8 <tcp_pbuf_prealloc+0xe8>)
 8013a94:	f014 fa4e 	bl	8027f34 <iprintf>
  *oversize = p->len - length;
 8013a98:	693b      	ldr	r3, [r7, #16]
 8013a9a:	895a      	ldrh	r2, [r3, #10]
 8013a9c:	89bb      	ldrh	r3, [r7, #12]
 8013a9e:	1ad3      	subs	r3, r2, r3
 8013aa0:	b29a      	uxth	r2, r3
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8013aa6:	693b      	ldr	r3, [r7, #16]
 8013aa8:	89ba      	ldrh	r2, [r7, #12]
 8013aaa:	811a      	strh	r2, [r3, #8]
 8013aac:	693b      	ldr	r3, [r7, #16]
 8013aae:	891a      	ldrh	r2, [r3, #8]
 8013ab0:	693b      	ldr	r3, [r7, #16]
 8013ab2:	815a      	strh	r2, [r3, #10]
  return p;
 8013ab4:	693b      	ldr	r3, [r7, #16]
}
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	3718      	adds	r7, #24
 8013aba:	46bd      	mov	sp, r7
 8013abc:	bd80      	pop	{r7, pc}
 8013abe:	bf00      	nop
 8013ac0:	0802b91c 	.word	0x0802b91c
 8013ac4:	0802b9d4 	.word	0x0802b9d4
 8013ac8:	0802b970 	.word	0x0802b970
 8013acc:	0802b9f8 	.word	0x0802b9f8
 8013ad0:	0802ba18 	.word	0x0802ba18

08013ad4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	b082      	sub	sp, #8
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	6078      	str	r0, [r7, #4]
 8013adc:	460b      	mov	r3, r1
 8013ade:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d106      	bne.n	8013af4 <tcp_write_checks+0x20>
 8013ae6:	4b33      	ldr	r3, [pc, #204]	@ (8013bb4 <tcp_write_checks+0xe0>)
 8013ae8:	f240 1233 	movw	r2, #307	@ 0x133
 8013aec:	4932      	ldr	r1, [pc, #200]	@ (8013bb8 <tcp_write_checks+0xe4>)
 8013aee:	4833      	ldr	r0, [pc, #204]	@ (8013bbc <tcp_write_checks+0xe8>)
 8013af0:	f014 fa20 	bl	8027f34 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	7d1b      	ldrb	r3, [r3, #20]
 8013af8:	2b04      	cmp	r3, #4
 8013afa:	d00e      	beq.n	8013b1a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8013b00:	2b07      	cmp	r3, #7
 8013b02:	d00a      	beq.n	8013b1a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013b08:	2b02      	cmp	r3, #2
 8013b0a:	d006      	beq.n	8013b1a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8013b10:	2b03      	cmp	r3, #3
 8013b12:	d002      	beq.n	8013b1a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013b14:	f06f 030a 	mvn.w	r3, #10
 8013b18:	e048      	b.n	8013bac <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8013b1a:	887b      	ldrh	r3, [r7, #2]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d101      	bne.n	8013b24 <tcp_write_checks+0x50>
    return ERR_OK;
 8013b20:	2300      	movs	r3, #0
 8013b22:	e043      	b.n	8013bac <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013b2a:	887a      	ldrh	r2, [r7, #2]
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d909      	bls.n	8013b44 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	8b5b      	ldrh	r3, [r3, #26]
 8013b34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013b38:	b29a      	uxth	r2, r3
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8013b42:	e033      	b.n	8013bac <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013b4a:	2b08      	cmp	r3, #8
 8013b4c:	d909      	bls.n	8013b62 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	8b5b      	ldrh	r3, [r3, #26]
 8013b52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013b56:	b29a      	uxth	r2, r3
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8013b60:	e024      	b.n	8013bac <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d00f      	beq.n	8013b8c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d11a      	bne.n	8013baa <tcp_write_checks+0xd6>
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d116      	bne.n	8013baa <tcp_write_checks+0xd6>
 8013b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8013bb4 <tcp_write_checks+0xe0>)
 8013b7e:	f240 1255 	movw	r2, #341	@ 0x155
 8013b82:	490f      	ldr	r1, [pc, #60]	@ (8013bc0 <tcp_write_checks+0xec>)
 8013b84:	480d      	ldr	r0, [pc, #52]	@ (8013bbc <tcp_write_checks+0xe8>)
 8013b86:	f014 f9d5 	bl	8027f34 <iprintf>
 8013b8a:	e00e      	b.n	8013baa <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d103      	bne.n	8013b9c <tcp_write_checks+0xc8>
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d006      	beq.n	8013baa <tcp_write_checks+0xd6>
 8013b9c:	4b05      	ldr	r3, [pc, #20]	@ (8013bb4 <tcp_write_checks+0xe0>)
 8013b9e:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8013ba2:	4908      	ldr	r1, [pc, #32]	@ (8013bc4 <tcp_write_checks+0xf0>)
 8013ba4:	4805      	ldr	r0, [pc, #20]	@ (8013bbc <tcp_write_checks+0xe8>)
 8013ba6:	f014 f9c5 	bl	8027f34 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8013baa:	2300      	movs	r3, #0
}
 8013bac:	4618      	mov	r0, r3
 8013bae:	3708      	adds	r7, #8
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	bd80      	pop	{r7, pc}
 8013bb4:	0802b91c 	.word	0x0802b91c
 8013bb8:	0802ba2c 	.word	0x0802ba2c
 8013bbc:	0802b970 	.word	0x0802b970
 8013bc0:	0802ba4c 	.word	0x0802ba4c
 8013bc4:	0802ba88 	.word	0x0802ba88

08013bc8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8013bc8:	b590      	push	{r4, r7, lr}
 8013bca:	b09b      	sub	sp, #108	@ 0x6c
 8013bcc:	af04      	add	r7, sp, #16
 8013bce:	60f8      	str	r0, [r7, #12]
 8013bd0:	60b9      	str	r1, [r7, #8]
 8013bd2:	4611      	mov	r1, r2
 8013bd4:	461a      	mov	r2, r3
 8013bd6:	460b      	mov	r3, r1
 8013bd8:	80fb      	strh	r3, [r7, #6]
 8013bda:	4613      	mov	r3, r2
 8013bdc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8013bde:	2300      	movs	r3, #0
 8013be0:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8013be2:	2300      	movs	r3, #0
 8013be4:	653b      	str	r3, [r7, #80]	@ 0x50
 8013be6:	2300      	movs	r3, #0
 8013be8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013bea:	2300      	movs	r3, #0
 8013bec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013bee:	2300      	movs	r3, #0
 8013bf0:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8013bfe:	2300      	movs	r3, #0
 8013c00:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8013c02:	2300      	movs	r3, #0
 8013c04:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013c06:	2300      	movs	r3, #0
 8013c08:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d109      	bne.n	8013c24 <tcp_write+0x5c>
 8013c10:	4ba4      	ldr	r3, [pc, #656]	@ (8013ea4 <tcp_write+0x2dc>)
 8013c12:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8013c16:	49a4      	ldr	r1, [pc, #656]	@ (8013ea8 <tcp_write+0x2e0>)
 8013c18:	48a4      	ldr	r0, [pc, #656]	@ (8013eac <tcp_write+0x2e4>)
 8013c1a:	f014 f98b 	bl	8027f34 <iprintf>
 8013c1e:	f06f 030f 	mvn.w	r3, #15
 8013c22:	e32a      	b.n	801427a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013c2a:	085b      	lsrs	r3, r3, #1
 8013c2c:	b29a      	uxth	r2, r3
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013c32:	4293      	cmp	r3, r2
 8013c34:	bf28      	it	cs
 8013c36:	4613      	movcs	r3, r2
 8013c38:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8013c3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d102      	bne.n	8013c46 <tcp_write+0x7e>
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013c44:	e000      	b.n	8013c48 <tcp_write+0x80>
 8013c46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013c48:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8013c4a:	68bb      	ldr	r3, [r7, #8]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d109      	bne.n	8013c64 <tcp_write+0x9c>
 8013c50:	4b94      	ldr	r3, [pc, #592]	@ (8013ea4 <tcp_write+0x2dc>)
 8013c52:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8013c56:	4996      	ldr	r1, [pc, #600]	@ (8013eb0 <tcp_write+0x2e8>)
 8013c58:	4894      	ldr	r0, [pc, #592]	@ (8013eac <tcp_write+0x2e4>)
 8013c5a:	f014 f96b 	bl	8027f34 <iprintf>
 8013c5e:	f06f 030f 	mvn.w	r3, #15
 8013c62:	e30a      	b.n	801427a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8013c64:	88fb      	ldrh	r3, [r7, #6]
 8013c66:	4619      	mov	r1, r3
 8013c68:	68f8      	ldr	r0, [r7, #12]
 8013c6a:	f7ff ff33 	bl	8013ad4 <tcp_write_checks>
 8013c6e:	4603      	mov	r3, r0
 8013c70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8013c74:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d002      	beq.n	8013c82 <tcp_write+0xba>
    return err;
 8013c7c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8013c80:	e2fb      	b.n	801427a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013c88:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	f000 80f6 	beq.w	8013e88 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ca0:	653b      	str	r3, [r7, #80]	@ 0x50
 8013ca2:	e002      	b.n	8013caa <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8013ca4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013caa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d1f8      	bne.n	8013ca4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8013cb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013cb4:	7a9b      	ldrb	r3, [r3, #10]
 8013cb6:	009b      	lsls	r3, r3, #2
 8013cb8:	b29b      	uxth	r3, r3
 8013cba:	f003 0304 	and.w	r3, r3, #4
 8013cbe:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8013cc0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013cc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013cc4:	891b      	ldrh	r3, [r3, #8]
 8013cc6:	4619      	mov	r1, r3
 8013cc8:	8c3b      	ldrh	r3, [r7, #32]
 8013cca:	440b      	add	r3, r1
 8013ccc:	429a      	cmp	r2, r3
 8013cce:	da06      	bge.n	8013cde <tcp_write+0x116>
 8013cd0:	4b74      	ldr	r3, [pc, #464]	@ (8013ea4 <tcp_write+0x2dc>)
 8013cd2:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8013cd6:	4977      	ldr	r1, [pc, #476]	@ (8013eb4 <tcp_write+0x2ec>)
 8013cd8:	4874      	ldr	r0, [pc, #464]	@ (8013eac <tcp_write+0x2e4>)
 8013cda:	f014 f92b 	bl	8027f34 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8013cde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013ce0:	891a      	ldrh	r2, [r3, #8]
 8013ce2:	8c3b      	ldrh	r3, [r7, #32]
 8013ce4:	4413      	add	r3, r2
 8013ce6:	b29b      	uxth	r3, r3
 8013ce8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013cea:	1ad3      	subs	r3, r2, r3
 8013cec:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8013cf4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8013cf6:	8a7b      	ldrh	r3, [r7, #18]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d026      	beq.n	8013d4a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8013cfc:	8a7b      	ldrh	r3, [r7, #18]
 8013cfe:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013d00:	429a      	cmp	r2, r3
 8013d02:	d206      	bcs.n	8013d12 <tcp_write+0x14a>
 8013d04:	4b67      	ldr	r3, [pc, #412]	@ (8013ea4 <tcp_write+0x2dc>)
 8013d06:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8013d0a:	496b      	ldr	r1, [pc, #428]	@ (8013eb8 <tcp_write+0x2f0>)
 8013d0c:	4867      	ldr	r0, [pc, #412]	@ (8013eac <tcp_write+0x2e4>)
 8013d0e:	f014 f911 	bl	8027f34 <iprintf>
      seg = last_unsent;
 8013d12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013d16:	8a7b      	ldrh	r3, [r7, #18]
 8013d18:	88fa      	ldrh	r2, [r7, #6]
 8013d1a:	4293      	cmp	r3, r2
 8013d1c:	bf28      	it	cs
 8013d1e:	4613      	movcs	r3, r2
 8013d20:	b29b      	uxth	r3, r3
 8013d22:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013d24:	4293      	cmp	r3, r2
 8013d26:	bf28      	it	cs
 8013d28:	4613      	movcs	r3, r2
 8013d2a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8013d2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013d30:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013d32:	4413      	add	r3, r2
 8013d34:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8013d38:	8a7a      	ldrh	r2, [r7, #18]
 8013d3a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013d3c:	1ad3      	subs	r3, r2, r3
 8013d3e:	b29b      	uxth	r3, r3
 8013d40:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8013d42:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013d44:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013d46:	1ad3      	subs	r3, r2, r3
 8013d48:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8013d4a:	8a7b      	ldrh	r3, [r7, #18]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d00b      	beq.n	8013d68 <tcp_write+0x1a0>
 8013d50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013d54:	88fb      	ldrh	r3, [r7, #6]
 8013d56:	429a      	cmp	r2, r3
 8013d58:	d006      	beq.n	8013d68 <tcp_write+0x1a0>
 8013d5a:	4b52      	ldr	r3, [pc, #328]	@ (8013ea4 <tcp_write+0x2dc>)
 8013d5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013d60:	4956      	ldr	r1, [pc, #344]	@ (8013ebc <tcp_write+0x2f4>)
 8013d62:	4852      	ldr	r0, [pc, #328]	@ (8013eac <tcp_write+0x2e4>)
 8013d64:	f014 f8e6 	bl	8027f34 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8013d68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013d6c:	88fb      	ldrh	r3, [r7, #6]
 8013d6e:	429a      	cmp	r2, r3
 8013d70:	f080 8167 	bcs.w	8014042 <tcp_write+0x47a>
 8013d74:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	f000 8163 	beq.w	8014042 <tcp_write+0x47a>
 8013d7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d7e:	891b      	ldrh	r3, [r3, #8]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	f000 815e 	beq.w	8014042 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8013d86:	88fa      	ldrh	r2, [r7, #6]
 8013d88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013d8c:	1ad2      	subs	r2, r2, r3
 8013d8e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013d90:	4293      	cmp	r3, r2
 8013d92:	bfa8      	it	ge
 8013d94:	4613      	movge	r3, r2
 8013d96:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8013d98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013d9c:	797b      	ldrb	r3, [r7, #5]
 8013d9e:	f003 0301 	and.w	r3, r3, #1
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d027      	beq.n	8013df6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8013da6:	f107 0012 	add.w	r0, r7, #18
 8013daa:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013dac:	8bf9      	ldrh	r1, [r7, #30]
 8013dae:	2301      	movs	r3, #1
 8013db0:	9302      	str	r3, [sp, #8]
 8013db2:	797b      	ldrb	r3, [r7, #5]
 8013db4:	9301      	str	r3, [sp, #4]
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	9300      	str	r3, [sp, #0]
 8013dba:	4603      	mov	r3, r0
 8013dbc:	2000      	movs	r0, #0
 8013dbe:	f7ff fe0f 	bl	80139e0 <tcp_pbuf_prealloc>
 8013dc2:	6578      	str	r0, [r7, #84]	@ 0x54
 8013dc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	f000 8225 	beq.w	8014216 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8013dcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013dce:	6858      	ldr	r0, [r3, #4]
 8013dd0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013dd4:	68ba      	ldr	r2, [r7, #8]
 8013dd6:	4413      	add	r3, r2
 8013dd8:	8bfa      	ldrh	r2, [r7, #30]
 8013dda:	4619      	mov	r1, r3
 8013ddc:	f014 fb57 	bl	802848e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8013de0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8013de2:	f7fb fa63 	bl	800f2ac <pbuf_clen>
 8013de6:	4603      	mov	r3, r0
 8013de8:	461a      	mov	r2, r3
 8013dea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013dee:	4413      	add	r3, r2
 8013df0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8013df4:	e041      	b.n	8013e7a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013df6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013df8:	685b      	ldr	r3, [r3, #4]
 8013dfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8013dfc:	e002      	b.n	8013e04 <tcp_write+0x23c>
 8013dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	637b      	str	r3, [r7, #52]	@ 0x34
 8013e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d1f8      	bne.n	8013dfe <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e0e:	7b1b      	ldrb	r3, [r3, #12]
 8013e10:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d115      	bne.n	8013e44 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e1a:	685b      	ldr	r3, [r3, #4]
 8013e1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013e1e:	8952      	ldrh	r2, [r2, #10]
 8013e20:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013e22:	68ba      	ldr	r2, [r7, #8]
 8013e24:	429a      	cmp	r2, r3
 8013e26:	d10d      	bne.n	8013e44 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8013e28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d006      	beq.n	8013e3e <tcp_write+0x276>
 8013e30:	4b1c      	ldr	r3, [pc, #112]	@ (8013ea4 <tcp_write+0x2dc>)
 8013e32:	f240 2231 	movw	r2, #561	@ 0x231
 8013e36:	4922      	ldr	r1, [pc, #136]	@ (8013ec0 <tcp_write+0x2f8>)
 8013e38:	481c      	ldr	r0, [pc, #112]	@ (8013eac <tcp_write+0x2e4>)
 8013e3a:	f014 f87b 	bl	8027f34 <iprintf>
          extendlen = seglen;
 8013e3e:	8bfb      	ldrh	r3, [r7, #30]
 8013e40:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8013e42:	e01a      	b.n	8013e7a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8013e44:	8bfb      	ldrh	r3, [r7, #30]
 8013e46:	2201      	movs	r2, #1
 8013e48:	4619      	mov	r1, r3
 8013e4a:	2000      	movs	r0, #0
 8013e4c:	f7fa fe8a 	bl	800eb64 <pbuf_alloc>
 8013e50:	6578      	str	r0, [r7, #84]	@ 0x54
 8013e52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	f000 81e0 	beq.w	801421a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8013e5a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013e5e:	68ba      	ldr	r2, [r7, #8]
 8013e60:	441a      	add	r2, r3
 8013e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e64:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8013e66:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8013e68:	f7fb fa20 	bl	800f2ac <pbuf_clen>
 8013e6c:	4603      	mov	r3, r0
 8013e6e:	461a      	mov	r2, r3
 8013e70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013e74:	4413      	add	r3, r2
 8013e76:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8013e7a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013e7e:	8bfb      	ldrh	r3, [r7, #30]
 8013e80:	4413      	add	r3, r2
 8013e82:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8013e86:	e0dc      	b.n	8014042 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	f000 80d7 	beq.w	8014042 <tcp_write+0x47a>
 8013e94:	4b03      	ldr	r3, [pc, #12]	@ (8013ea4 <tcp_write+0x2dc>)
 8013e96:	f240 224a 	movw	r2, #586	@ 0x24a
 8013e9a:	490a      	ldr	r1, [pc, #40]	@ (8013ec4 <tcp_write+0x2fc>)
 8013e9c:	4803      	ldr	r0, [pc, #12]	@ (8013eac <tcp_write+0x2e4>)
 8013e9e:	f014 f849 	bl	8027f34 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8013ea2:	e0ce      	b.n	8014042 <tcp_write+0x47a>
 8013ea4:	0802b91c 	.word	0x0802b91c
 8013ea8:	0802babc 	.word	0x0802babc
 8013eac:	0802b970 	.word	0x0802b970
 8013eb0:	0802bad4 	.word	0x0802bad4
 8013eb4:	0802bb08 	.word	0x0802bb08
 8013eb8:	0802bb20 	.word	0x0802bb20
 8013ebc:	0802bb40 	.word	0x0802bb40
 8013ec0:	0802bb60 	.word	0x0802bb60
 8013ec4:	0802bb8c 	.word	0x0802bb8c
    struct pbuf *p;
    u16_t left = len - pos;
 8013ec8:	88fa      	ldrh	r2, [r7, #6]
 8013eca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013ece:	1ad3      	subs	r3, r2, r3
 8013ed0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8013ed2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013ed6:	b29b      	uxth	r3, r3
 8013ed8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013eda:	1ad3      	subs	r3, r2, r3
 8013edc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8013ede:	8b7a      	ldrh	r2, [r7, #26]
 8013ee0:	8bbb      	ldrh	r3, [r7, #28]
 8013ee2:	4293      	cmp	r3, r2
 8013ee4:	bf28      	it	cs
 8013ee6:	4613      	movcs	r3, r2
 8013ee8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013eea:	797b      	ldrb	r3, [r7, #5]
 8013eec:	f003 0301 	and.w	r3, r3, #1
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d036      	beq.n	8013f62 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013ef4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013ef8:	b29a      	uxth	r2, r3
 8013efa:	8b3b      	ldrh	r3, [r7, #24]
 8013efc:	4413      	add	r3, r2
 8013efe:	b299      	uxth	r1, r3
 8013f00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	bf0c      	ite	eq
 8013f06:	2301      	moveq	r3, #1
 8013f08:	2300      	movne	r3, #0
 8013f0a:	b2db      	uxtb	r3, r3
 8013f0c:	f107 0012 	add.w	r0, r7, #18
 8013f10:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013f12:	9302      	str	r3, [sp, #8]
 8013f14:	797b      	ldrb	r3, [r7, #5]
 8013f16:	9301      	str	r3, [sp, #4]
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	9300      	str	r3, [sp, #0]
 8013f1c:	4603      	mov	r3, r0
 8013f1e:	2036      	movs	r0, #54	@ 0x36
 8013f20:	f7ff fd5e 	bl	80139e0 <tcp_pbuf_prealloc>
 8013f24:	6338      	str	r0, [r7, #48]	@ 0x30
 8013f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	f000 8178 	beq.w	801421e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8013f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f30:	895b      	ldrh	r3, [r3, #10]
 8013f32:	8b3a      	ldrh	r2, [r7, #24]
 8013f34:	429a      	cmp	r2, r3
 8013f36:	d906      	bls.n	8013f46 <tcp_write+0x37e>
 8013f38:	4b8c      	ldr	r3, [pc, #560]	@ (801416c <tcp_write+0x5a4>)
 8013f3a:	f240 2266 	movw	r2, #614	@ 0x266
 8013f3e:	498c      	ldr	r1, [pc, #560]	@ (8014170 <tcp_write+0x5a8>)
 8013f40:	488c      	ldr	r0, [pc, #560]	@ (8014174 <tcp_write+0x5ac>)
 8013f42:	f013 fff7 	bl	8027f34 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8013f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f48:	685a      	ldr	r2, [r3, #4]
 8013f4a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013f4e:	18d0      	adds	r0, r2, r3
 8013f50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013f54:	68ba      	ldr	r2, [r7, #8]
 8013f56:	4413      	add	r3, r2
 8013f58:	8b3a      	ldrh	r2, [r7, #24]
 8013f5a:	4619      	mov	r1, r3
 8013f5c:	f014 fa97 	bl	802848e <memcpy>
 8013f60:	e02f      	b.n	8013fc2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8013f62:	8a7b      	ldrh	r3, [r7, #18]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d006      	beq.n	8013f76 <tcp_write+0x3ae>
 8013f68:	4b80      	ldr	r3, [pc, #512]	@ (801416c <tcp_write+0x5a4>)
 8013f6a:	f240 2271 	movw	r2, #625	@ 0x271
 8013f6e:	4982      	ldr	r1, [pc, #520]	@ (8014178 <tcp_write+0x5b0>)
 8013f70:	4880      	ldr	r0, [pc, #512]	@ (8014174 <tcp_write+0x5ac>)
 8013f72:	f013 ffdf 	bl	8027f34 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8013f76:	8b3b      	ldrh	r3, [r7, #24]
 8013f78:	2201      	movs	r2, #1
 8013f7a:	4619      	mov	r1, r3
 8013f7c:	2036      	movs	r0, #54	@ 0x36
 8013f7e:	f7fa fdf1 	bl	800eb64 <pbuf_alloc>
 8013f82:	6178      	str	r0, [r7, #20]
 8013f84:	697b      	ldr	r3, [r7, #20]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	f000 814b 	beq.w	8014222 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8013f8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013f90:	68ba      	ldr	r2, [r7, #8]
 8013f92:	441a      	add	r2, r3
 8013f94:	697b      	ldr	r3, [r7, #20]
 8013f96:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013f98:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013f9c:	b29b      	uxth	r3, r3
 8013f9e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013fa2:	4619      	mov	r1, r3
 8013fa4:	2036      	movs	r0, #54	@ 0x36
 8013fa6:	f7fa fddd 	bl	800eb64 <pbuf_alloc>
 8013faa:	6338      	str	r0, [r7, #48]	@ 0x30
 8013fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d103      	bne.n	8013fba <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8013fb2:	6978      	ldr	r0, [r7, #20]
 8013fb4:	f7fb f8ec 	bl	800f190 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8013fb8:	e136      	b.n	8014228 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8013fba:	6979      	ldr	r1, [r7, #20]
 8013fbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013fbe:	f7fb f9b5 	bl	800f32c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8013fc2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013fc4:	f7fb f972 	bl	800f2ac <pbuf_clen>
 8013fc8:	4603      	mov	r3, r0
 8013fca:	461a      	mov	r2, r3
 8013fcc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013fd0:	4413      	add	r3, r2
 8013fd2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8013fd6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013fda:	2b09      	cmp	r3, #9
 8013fdc:	d903      	bls.n	8013fe6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8013fde:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013fe0:	f7fb f8d6 	bl	800f190 <pbuf_free>
      goto memerr;
 8013fe4:	e120      	b.n	8014228 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8013fea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013fee:	441a      	add	r2, r3
 8013ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013ff4:	9300      	str	r3, [sp, #0]
 8013ff6:	4613      	mov	r3, r2
 8013ff8:	2200      	movs	r2, #0
 8013ffa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013ffc:	68f8      	ldr	r0, [r7, #12]
 8013ffe:	f7ff fc53 	bl	80138a8 <tcp_create_segment>
 8014002:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8014004:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014006:	2b00      	cmp	r3, #0
 8014008:	f000 810d 	beq.w	8014226 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801400c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801400e:	2b00      	cmp	r3, #0
 8014010:	d102      	bne.n	8014018 <tcp_write+0x450>
      queue = seg;
 8014012:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014014:	647b      	str	r3, [r7, #68]	@ 0x44
 8014016:	e00c      	b.n	8014032 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8014018:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801401a:	2b00      	cmp	r3, #0
 801401c:	d106      	bne.n	801402c <tcp_write+0x464>
 801401e:	4b53      	ldr	r3, [pc, #332]	@ (801416c <tcp_write+0x5a4>)
 8014020:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8014024:	4955      	ldr	r1, [pc, #340]	@ (801417c <tcp_write+0x5b4>)
 8014026:	4853      	ldr	r0, [pc, #332]	@ (8014174 <tcp_write+0x5ac>)
 8014028:	f013 ff84 	bl	8027f34 <iprintf>
      prev_seg->next = seg;
 801402c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801402e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014030:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8014032:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014034:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8014036:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801403a:	8b3b      	ldrh	r3, [r7, #24]
 801403c:	4413      	add	r3, r2
 801403e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8014042:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014046:	88fb      	ldrh	r3, [r7, #6]
 8014048:	429a      	cmp	r2, r3
 801404a:	f4ff af3d 	bcc.w	8013ec8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801404e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014050:	2b00      	cmp	r3, #0
 8014052:	d02c      	beq.n	80140ae <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8014054:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014056:	685b      	ldr	r3, [r3, #4]
 8014058:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801405a:	e01e      	b.n	801409a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801405c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801405e:	891a      	ldrh	r2, [r3, #8]
 8014060:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014062:	4413      	add	r3, r2
 8014064:	b29a      	uxth	r2, r3
 8014066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014068:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801406a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d110      	bne.n	8014094 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8014072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014074:	685b      	ldr	r3, [r3, #4]
 8014076:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014078:	8952      	ldrh	r2, [r2, #10]
 801407a:	4413      	add	r3, r2
 801407c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801407e:	68b9      	ldr	r1, [r7, #8]
 8014080:	4618      	mov	r0, r3
 8014082:	f014 fa04 	bl	802848e <memcpy>
        p->len += oversize_used;
 8014086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014088:	895a      	ldrh	r2, [r3, #10]
 801408a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801408c:	4413      	add	r3, r2
 801408e:	b29a      	uxth	r2, r3
 8014090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014092:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8014094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801409a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801409c:	2b00      	cmp	r3, #0
 801409e:	d1dd      	bne.n	801405c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80140a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80140a2:	891a      	ldrh	r2, [r3, #8]
 80140a4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80140a6:	4413      	add	r3, r2
 80140a8:	b29a      	uxth	r2, r3
 80140aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80140ac:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80140ae:	8a7a      	ldrh	r2, [r7, #18]
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80140b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d018      	beq.n	80140ee <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80140bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d106      	bne.n	80140d0 <tcp_write+0x508>
 80140c2:	4b2a      	ldr	r3, [pc, #168]	@ (801416c <tcp_write+0x5a4>)
 80140c4:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 80140c8:	492d      	ldr	r1, [pc, #180]	@ (8014180 <tcp_write+0x5b8>)
 80140ca:	482a      	ldr	r0, [pc, #168]	@ (8014174 <tcp_write+0x5ac>)
 80140cc:	f013 ff32 	bl	8027f34 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80140d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80140d2:	685b      	ldr	r3, [r3, #4]
 80140d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80140d6:	4618      	mov	r0, r3
 80140d8:	f7fb f928 	bl	800f32c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80140dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80140de:	891a      	ldrh	r2, [r3, #8]
 80140e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140e2:	891b      	ldrh	r3, [r3, #8]
 80140e4:	4413      	add	r3, r2
 80140e6:	b29a      	uxth	r2, r3
 80140e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80140ea:	811a      	strh	r2, [r3, #8]
 80140ec:	e037      	b.n	801415e <tcp_write+0x596>
  } else if (extendlen > 0) {
 80140ee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d034      	beq.n	801415e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80140f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d003      	beq.n	8014102 <tcp_write+0x53a>
 80140fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80140fc:	685b      	ldr	r3, [r3, #4]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d106      	bne.n	8014110 <tcp_write+0x548>
 8014102:	4b1a      	ldr	r3, [pc, #104]	@ (801416c <tcp_write+0x5a4>)
 8014104:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8014108:	491e      	ldr	r1, [pc, #120]	@ (8014184 <tcp_write+0x5bc>)
 801410a:	481a      	ldr	r0, [pc, #104]	@ (8014174 <tcp_write+0x5ac>)
 801410c:	f013 ff12 	bl	8027f34 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014110:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014112:	685b      	ldr	r3, [r3, #4]
 8014114:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014116:	e009      	b.n	801412c <tcp_write+0x564>
      p->tot_len += extendlen;
 8014118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801411a:	891a      	ldrh	r2, [r3, #8]
 801411c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801411e:	4413      	add	r3, r2
 8014120:	b29a      	uxth	r2, r3
 8014122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014124:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801412c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d1f1      	bne.n	8014118 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8014134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014136:	891a      	ldrh	r2, [r3, #8]
 8014138:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801413a:	4413      	add	r3, r2
 801413c:	b29a      	uxth	r2, r3
 801413e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014140:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8014142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014144:	895a      	ldrh	r2, [r3, #10]
 8014146:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014148:	4413      	add	r3, r2
 801414a:	b29a      	uxth	r2, r3
 801414c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801414e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8014150:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014152:	891a      	ldrh	r2, [r3, #8]
 8014154:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014156:	4413      	add	r3, r2
 8014158:	b29a      	uxth	r2, r3
 801415a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801415c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801415e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014160:	2b00      	cmp	r3, #0
 8014162:	d111      	bne.n	8014188 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014168:	66da      	str	r2, [r3, #108]	@ 0x6c
 801416a:	e010      	b.n	801418e <tcp_write+0x5c6>
 801416c:	0802b91c 	.word	0x0802b91c
 8014170:	0802bbbc 	.word	0x0802bbbc
 8014174:	0802b970 	.word	0x0802b970
 8014178:	0802bbfc 	.word	0x0802bbfc
 801417c:	0802bc0c 	.word	0x0802bc0c
 8014180:	0802bc20 	.word	0x0802bc20
 8014184:	0802bc58 	.word	0x0802bc58
  } else {
    last_unsent->next = queue;
 8014188:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801418a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801418c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014192:	88fb      	ldrh	r3, [r7, #6]
 8014194:	441a      	add	r2, r3
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80141a0:	88fb      	ldrh	r3, [r7, #6]
 80141a2:	1ad3      	subs	r3, r2, r3
 80141a4:	b29a      	uxth	r2, r3
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80141b2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d00e      	beq.n	80141de <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d10a      	bne.n	80141de <tcp_write+0x616>
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d106      	bne.n	80141de <tcp_write+0x616>
 80141d0:	4b2c      	ldr	r3, [pc, #176]	@ (8014284 <tcp_write+0x6bc>)
 80141d2:	f240 3212 	movw	r2, #786	@ 0x312
 80141d6:	492c      	ldr	r1, [pc, #176]	@ (8014288 <tcp_write+0x6c0>)
 80141d8:	482c      	ldr	r0, [pc, #176]	@ (801428c <tcp_write+0x6c4>)
 80141da:	f013 feab 	bl	8027f34 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80141de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d016      	beq.n	8014212 <tcp_write+0x64a>
 80141e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80141e6:	68db      	ldr	r3, [r3, #12]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d012      	beq.n	8014212 <tcp_write+0x64a>
 80141ec:	797b      	ldrb	r3, [r7, #5]
 80141ee:	f003 0302 	and.w	r3, r3, #2
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d10d      	bne.n	8014212 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80141f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80141f8:	68db      	ldr	r3, [r3, #12]
 80141fa:	899b      	ldrh	r3, [r3, #12]
 80141fc:	b29c      	uxth	r4, r3
 80141fe:	2008      	movs	r0, #8
 8014200:	f7f9 fb6e 	bl	800d8e0 <lwip_htons>
 8014204:	4603      	mov	r3, r0
 8014206:	461a      	mov	r2, r3
 8014208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801420a:	68db      	ldr	r3, [r3, #12]
 801420c:	4322      	orrs	r2, r4
 801420e:	b292      	uxth	r2, r2
 8014210:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8014212:	2300      	movs	r3, #0
 8014214:	e031      	b.n	801427a <tcp_write+0x6b2>
          goto memerr;
 8014216:	bf00      	nop
 8014218:	e006      	b.n	8014228 <tcp_write+0x660>
            goto memerr;
 801421a:	bf00      	nop
 801421c:	e004      	b.n	8014228 <tcp_write+0x660>
        goto memerr;
 801421e:	bf00      	nop
 8014220:	e002      	b.n	8014228 <tcp_write+0x660>
        goto memerr;
 8014222:	bf00      	nop
 8014224:	e000      	b.n	8014228 <tcp_write+0x660>
      goto memerr;
 8014226:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	8b5b      	ldrh	r3, [r3, #26]
 801422c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014230:	b29a      	uxth	r2, r3
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8014236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014238:	2b00      	cmp	r3, #0
 801423a:	d002      	beq.n	8014242 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801423c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801423e:	f7fa ffa7 	bl	800f190 <pbuf_free>
  }
  if (queue != NULL) {
 8014242:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014244:	2b00      	cmp	r3, #0
 8014246:	d002      	beq.n	801424e <tcp_write+0x686>
    tcp_segs_free(queue);
 8014248:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801424a:	f7fc fb71 	bl	8010930 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014254:	2b00      	cmp	r3, #0
 8014256:	d00e      	beq.n	8014276 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801425c:	2b00      	cmp	r3, #0
 801425e:	d10a      	bne.n	8014276 <tcp_write+0x6ae>
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014264:	2b00      	cmp	r3, #0
 8014266:	d106      	bne.n	8014276 <tcp_write+0x6ae>
 8014268:	4b06      	ldr	r3, [pc, #24]	@ (8014284 <tcp_write+0x6bc>)
 801426a:	f240 3227 	movw	r2, #807	@ 0x327
 801426e:	4906      	ldr	r1, [pc, #24]	@ (8014288 <tcp_write+0x6c0>)
 8014270:	4806      	ldr	r0, [pc, #24]	@ (801428c <tcp_write+0x6c4>)
 8014272:	f013 fe5f 	bl	8027f34 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8014276:	f04f 33ff 	mov.w	r3, #4294967295
}
 801427a:	4618      	mov	r0, r3
 801427c:	375c      	adds	r7, #92	@ 0x5c
 801427e:	46bd      	mov	sp, r7
 8014280:	bd90      	pop	{r4, r7, pc}
 8014282:	bf00      	nop
 8014284:	0802b91c 	.word	0x0802b91c
 8014288:	0802bc90 	.word	0x0802bc90
 801428c:	0802b970 	.word	0x0802b970

08014290 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8014290:	b590      	push	{r4, r7, lr}
 8014292:	b08b      	sub	sp, #44	@ 0x2c
 8014294:	af02      	add	r7, sp, #8
 8014296:	6078      	str	r0, [r7, #4]
 8014298:	460b      	mov	r3, r1
 801429a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801429c:	2300      	movs	r3, #0
 801429e:	61fb      	str	r3, [r7, #28]
 80142a0:	2300      	movs	r3, #0
 80142a2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80142a4:	2300      	movs	r3, #0
 80142a6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d106      	bne.n	80142bc <tcp_split_unsent_seg+0x2c>
 80142ae:	4b95      	ldr	r3, [pc, #596]	@ (8014504 <tcp_split_unsent_seg+0x274>)
 80142b0:	f240 324b 	movw	r2, #843	@ 0x34b
 80142b4:	4994      	ldr	r1, [pc, #592]	@ (8014508 <tcp_split_unsent_seg+0x278>)
 80142b6:	4895      	ldr	r0, [pc, #596]	@ (801450c <tcp_split_unsent_seg+0x27c>)
 80142b8:	f013 fe3c 	bl	8027f34 <iprintf>

  useg = pcb->unsent;
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80142c0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80142c2:	697b      	ldr	r3, [r7, #20]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d102      	bne.n	80142ce <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80142c8:	f04f 33ff 	mov.w	r3, #4294967295
 80142cc:	e116      	b.n	80144fc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80142ce:	887b      	ldrh	r3, [r7, #2]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d109      	bne.n	80142e8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80142d4:	4b8b      	ldr	r3, [pc, #556]	@ (8014504 <tcp_split_unsent_seg+0x274>)
 80142d6:	f240 3253 	movw	r2, #851	@ 0x353
 80142da:	498d      	ldr	r1, [pc, #564]	@ (8014510 <tcp_split_unsent_seg+0x280>)
 80142dc:	488b      	ldr	r0, [pc, #556]	@ (801450c <tcp_split_unsent_seg+0x27c>)
 80142de:	f013 fe29 	bl	8027f34 <iprintf>
    return ERR_VAL;
 80142e2:	f06f 0305 	mvn.w	r3, #5
 80142e6:	e109      	b.n	80144fc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80142e8:	697b      	ldr	r3, [r7, #20]
 80142ea:	891b      	ldrh	r3, [r3, #8]
 80142ec:	887a      	ldrh	r2, [r7, #2]
 80142ee:	429a      	cmp	r2, r3
 80142f0:	d301      	bcc.n	80142f6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80142f2:	2300      	movs	r3, #0
 80142f4:	e102      	b.n	80144fc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80142fa:	887a      	ldrh	r2, [r7, #2]
 80142fc:	429a      	cmp	r2, r3
 80142fe:	d906      	bls.n	801430e <tcp_split_unsent_seg+0x7e>
 8014300:	4b80      	ldr	r3, [pc, #512]	@ (8014504 <tcp_split_unsent_seg+0x274>)
 8014302:	f240 325b 	movw	r2, #859	@ 0x35b
 8014306:	4983      	ldr	r1, [pc, #524]	@ (8014514 <tcp_split_unsent_seg+0x284>)
 8014308:	4880      	ldr	r0, [pc, #512]	@ (801450c <tcp_split_unsent_seg+0x27c>)
 801430a:	f013 fe13 	bl	8027f34 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801430e:	697b      	ldr	r3, [r7, #20]
 8014310:	891b      	ldrh	r3, [r3, #8]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d106      	bne.n	8014324 <tcp_split_unsent_seg+0x94>
 8014316:	4b7b      	ldr	r3, [pc, #492]	@ (8014504 <tcp_split_unsent_seg+0x274>)
 8014318:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801431c:	497e      	ldr	r1, [pc, #504]	@ (8014518 <tcp_split_unsent_seg+0x288>)
 801431e:	487b      	ldr	r0, [pc, #492]	@ (801450c <tcp_split_unsent_seg+0x27c>)
 8014320:	f013 fe08 	bl	8027f34 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014324:	697b      	ldr	r3, [r7, #20]
 8014326:	7a9b      	ldrb	r3, [r3, #10]
 8014328:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801432a:	7bfb      	ldrb	r3, [r7, #15]
 801432c:	009b      	lsls	r3, r3, #2
 801432e:	b2db      	uxtb	r3, r3
 8014330:	f003 0304 	and.w	r3, r3, #4
 8014334:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014336:	697b      	ldr	r3, [r7, #20]
 8014338:	891a      	ldrh	r2, [r3, #8]
 801433a:	887b      	ldrh	r3, [r7, #2]
 801433c:	1ad3      	subs	r3, r2, r3
 801433e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014340:	7bbb      	ldrb	r3, [r7, #14]
 8014342:	b29a      	uxth	r2, r3
 8014344:	89bb      	ldrh	r3, [r7, #12]
 8014346:	4413      	add	r3, r2
 8014348:	b29b      	uxth	r3, r3
 801434a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801434e:	4619      	mov	r1, r3
 8014350:	2036      	movs	r0, #54	@ 0x36
 8014352:	f7fa fc07 	bl	800eb64 <pbuf_alloc>
 8014356:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014358:	693b      	ldr	r3, [r7, #16]
 801435a:	2b00      	cmp	r3, #0
 801435c:	f000 80b7 	beq.w	80144ce <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014360:	697b      	ldr	r3, [r7, #20]
 8014362:	685b      	ldr	r3, [r3, #4]
 8014364:	891a      	ldrh	r2, [r3, #8]
 8014366:	697b      	ldr	r3, [r7, #20]
 8014368:	891b      	ldrh	r3, [r3, #8]
 801436a:	1ad3      	subs	r3, r2, r3
 801436c:	b29a      	uxth	r2, r3
 801436e:	887b      	ldrh	r3, [r7, #2]
 8014370:	4413      	add	r3, r2
 8014372:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014374:	697b      	ldr	r3, [r7, #20]
 8014376:	6858      	ldr	r0, [r3, #4]
 8014378:	693b      	ldr	r3, [r7, #16]
 801437a:	685a      	ldr	r2, [r3, #4]
 801437c:	7bbb      	ldrb	r3, [r7, #14]
 801437e:	18d1      	adds	r1, r2, r3
 8014380:	897b      	ldrh	r3, [r7, #10]
 8014382:	89ba      	ldrh	r2, [r7, #12]
 8014384:	f7fb f90a 	bl	800f59c <pbuf_copy_partial>
 8014388:	4603      	mov	r3, r0
 801438a:	461a      	mov	r2, r3
 801438c:	89bb      	ldrh	r3, [r7, #12]
 801438e:	4293      	cmp	r3, r2
 8014390:	f040 809f 	bne.w	80144d2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014394:	697b      	ldr	r3, [r7, #20]
 8014396:	68db      	ldr	r3, [r3, #12]
 8014398:	899b      	ldrh	r3, [r3, #12]
 801439a:	b29b      	uxth	r3, r3
 801439c:	4618      	mov	r0, r3
 801439e:	f7f9 fa9f 	bl	800d8e0 <lwip_htons>
 80143a2:	4603      	mov	r3, r0
 80143a4:	b2db      	uxtb	r3, r3
 80143a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80143aa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80143ac:	2300      	movs	r3, #0
 80143ae:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80143b0:	7efb      	ldrb	r3, [r7, #27]
 80143b2:	f003 0308 	and.w	r3, r3, #8
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d007      	beq.n	80143ca <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80143ba:	7efb      	ldrb	r3, [r7, #27]
 80143bc:	f023 0308 	bic.w	r3, r3, #8
 80143c0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80143c2:	7ebb      	ldrb	r3, [r7, #26]
 80143c4:	f043 0308 	orr.w	r3, r3, #8
 80143c8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80143ca:	7efb      	ldrb	r3, [r7, #27]
 80143cc:	f003 0301 	and.w	r3, r3, #1
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d007      	beq.n	80143e4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80143d4:	7efb      	ldrb	r3, [r7, #27]
 80143d6:	f023 0301 	bic.w	r3, r3, #1
 80143da:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80143dc:	7ebb      	ldrb	r3, [r7, #26]
 80143de:	f043 0301 	orr.w	r3, r3, #1
 80143e2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80143e4:	697b      	ldr	r3, [r7, #20]
 80143e6:	68db      	ldr	r3, [r3, #12]
 80143e8:	685b      	ldr	r3, [r3, #4]
 80143ea:	4618      	mov	r0, r3
 80143ec:	f7f9 fa8e 	bl	800d90c <lwip_htonl>
 80143f0:	4602      	mov	r2, r0
 80143f2:	887b      	ldrh	r3, [r7, #2]
 80143f4:	18d1      	adds	r1, r2, r3
 80143f6:	7eba      	ldrb	r2, [r7, #26]
 80143f8:	7bfb      	ldrb	r3, [r7, #15]
 80143fa:	9300      	str	r3, [sp, #0]
 80143fc:	460b      	mov	r3, r1
 80143fe:	6939      	ldr	r1, [r7, #16]
 8014400:	6878      	ldr	r0, [r7, #4]
 8014402:	f7ff fa51 	bl	80138a8 <tcp_create_segment>
 8014406:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014408:	69fb      	ldr	r3, [r7, #28]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d063      	beq.n	80144d6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801440e:	697b      	ldr	r3, [r7, #20]
 8014410:	685b      	ldr	r3, [r3, #4]
 8014412:	4618      	mov	r0, r3
 8014414:	f7fa ff4a 	bl	800f2ac <pbuf_clen>
 8014418:	4603      	mov	r3, r0
 801441a:	461a      	mov	r2, r3
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014422:	1a9b      	subs	r3, r3, r2
 8014424:	b29a      	uxth	r2, r3
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801442c:	697b      	ldr	r3, [r7, #20]
 801442e:	6858      	ldr	r0, [r3, #4]
 8014430:	697b      	ldr	r3, [r7, #20]
 8014432:	685b      	ldr	r3, [r3, #4]
 8014434:	891a      	ldrh	r2, [r3, #8]
 8014436:	89bb      	ldrh	r3, [r7, #12]
 8014438:	1ad3      	subs	r3, r2, r3
 801443a:	b29b      	uxth	r3, r3
 801443c:	4619      	mov	r1, r3
 801443e:	f7fa fcef 	bl	800ee20 <pbuf_realloc>
  useg->len -= remainder;
 8014442:	697b      	ldr	r3, [r7, #20]
 8014444:	891a      	ldrh	r2, [r3, #8]
 8014446:	89bb      	ldrh	r3, [r7, #12]
 8014448:	1ad3      	subs	r3, r2, r3
 801444a:	b29a      	uxth	r2, r3
 801444c:	697b      	ldr	r3, [r7, #20]
 801444e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014450:	697b      	ldr	r3, [r7, #20]
 8014452:	68db      	ldr	r3, [r3, #12]
 8014454:	899b      	ldrh	r3, [r3, #12]
 8014456:	b29c      	uxth	r4, r3
 8014458:	7efb      	ldrb	r3, [r7, #27]
 801445a:	b29b      	uxth	r3, r3
 801445c:	4618      	mov	r0, r3
 801445e:	f7f9 fa3f 	bl	800d8e0 <lwip_htons>
 8014462:	4603      	mov	r3, r0
 8014464:	461a      	mov	r2, r3
 8014466:	697b      	ldr	r3, [r7, #20]
 8014468:	68db      	ldr	r3, [r3, #12]
 801446a:	4322      	orrs	r2, r4
 801446c:	b292      	uxth	r2, r2
 801446e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014470:	697b      	ldr	r3, [r7, #20]
 8014472:	685b      	ldr	r3, [r3, #4]
 8014474:	4618      	mov	r0, r3
 8014476:	f7fa ff19 	bl	800f2ac <pbuf_clen>
 801447a:	4603      	mov	r3, r0
 801447c:	461a      	mov	r2, r3
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014484:	4413      	add	r3, r2
 8014486:	b29a      	uxth	r2, r3
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801448e:	69fb      	ldr	r3, [r7, #28]
 8014490:	685b      	ldr	r3, [r3, #4]
 8014492:	4618      	mov	r0, r3
 8014494:	f7fa ff0a 	bl	800f2ac <pbuf_clen>
 8014498:	4603      	mov	r3, r0
 801449a:	461a      	mov	r2, r3
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80144a2:	4413      	add	r3, r2
 80144a4:	b29a      	uxth	r2, r3
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80144ac:	697b      	ldr	r3, [r7, #20]
 80144ae:	681a      	ldr	r2, [r3, #0]
 80144b0:	69fb      	ldr	r3, [r7, #28]
 80144b2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80144b4:	697b      	ldr	r3, [r7, #20]
 80144b6:	69fa      	ldr	r2, [r7, #28]
 80144b8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80144ba:	69fb      	ldr	r3, [r7, #28]
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d103      	bne.n	80144ca <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	2200      	movs	r2, #0
 80144c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80144ca:	2300      	movs	r3, #0
 80144cc:	e016      	b.n	80144fc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80144ce:	bf00      	nop
 80144d0:	e002      	b.n	80144d8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80144d2:	bf00      	nop
 80144d4:	e000      	b.n	80144d8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80144d6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80144d8:	69fb      	ldr	r3, [r7, #28]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d006      	beq.n	80144ec <tcp_split_unsent_seg+0x25c>
 80144de:	4b09      	ldr	r3, [pc, #36]	@ (8014504 <tcp_split_unsent_seg+0x274>)
 80144e0:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80144e4:	490d      	ldr	r1, [pc, #52]	@ (801451c <tcp_split_unsent_seg+0x28c>)
 80144e6:	4809      	ldr	r0, [pc, #36]	@ (801450c <tcp_split_unsent_seg+0x27c>)
 80144e8:	f013 fd24 	bl	8027f34 <iprintf>
  if (p != NULL) {
 80144ec:	693b      	ldr	r3, [r7, #16]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d002      	beq.n	80144f8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80144f2:	6938      	ldr	r0, [r7, #16]
 80144f4:	f7fa fe4c 	bl	800f190 <pbuf_free>
  }

  return ERR_MEM;
 80144f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80144fc:	4618      	mov	r0, r3
 80144fe:	3724      	adds	r7, #36	@ 0x24
 8014500:	46bd      	mov	sp, r7
 8014502:	bd90      	pop	{r4, r7, pc}
 8014504:	0802b91c 	.word	0x0802b91c
 8014508:	0802bcb0 	.word	0x0802bcb0
 801450c:	0802b970 	.word	0x0802b970
 8014510:	0802bcd4 	.word	0x0802bcd4
 8014514:	0802bcf8 	.word	0x0802bcf8
 8014518:	0802bd08 	.word	0x0802bd08
 801451c:	0802bd18 	.word	0x0802bd18

08014520 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014520:	b590      	push	{r4, r7, lr}
 8014522:	b085      	sub	sp, #20
 8014524:	af00      	add	r7, sp, #0
 8014526:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d106      	bne.n	801453c <tcp_send_fin+0x1c>
 801452e:	4b21      	ldr	r3, [pc, #132]	@ (80145b4 <tcp_send_fin+0x94>)
 8014530:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8014534:	4920      	ldr	r1, [pc, #128]	@ (80145b8 <tcp_send_fin+0x98>)
 8014536:	4821      	ldr	r0, [pc, #132]	@ (80145bc <tcp_send_fin+0x9c>)
 8014538:	f013 fcfc 	bl	8027f34 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014540:	2b00      	cmp	r3, #0
 8014542:	d02e      	beq.n	80145a2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014548:	60fb      	str	r3, [r7, #12]
 801454a:	e002      	b.n	8014552 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	2b00      	cmp	r3, #0
 8014558:	d1f8      	bne.n	801454c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	68db      	ldr	r3, [r3, #12]
 801455e:	899b      	ldrh	r3, [r3, #12]
 8014560:	b29b      	uxth	r3, r3
 8014562:	4618      	mov	r0, r3
 8014564:	f7f9 f9bc 	bl	800d8e0 <lwip_htons>
 8014568:	4603      	mov	r3, r0
 801456a:	b2db      	uxtb	r3, r3
 801456c:	f003 0307 	and.w	r3, r3, #7
 8014570:	2b00      	cmp	r3, #0
 8014572:	d116      	bne.n	80145a2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	68db      	ldr	r3, [r3, #12]
 8014578:	899b      	ldrh	r3, [r3, #12]
 801457a:	b29c      	uxth	r4, r3
 801457c:	2001      	movs	r0, #1
 801457e:	f7f9 f9af 	bl	800d8e0 <lwip_htons>
 8014582:	4603      	mov	r3, r0
 8014584:	461a      	mov	r2, r3
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	68db      	ldr	r3, [r3, #12]
 801458a:	4322      	orrs	r2, r4
 801458c:	b292      	uxth	r2, r2
 801458e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	8b5b      	ldrh	r3, [r3, #26]
 8014594:	f043 0320 	orr.w	r3, r3, #32
 8014598:	b29a      	uxth	r2, r3
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801459e:	2300      	movs	r3, #0
 80145a0:	e004      	b.n	80145ac <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80145a2:	2101      	movs	r1, #1
 80145a4:	6878      	ldr	r0, [r7, #4]
 80145a6:	f000 f80b 	bl	80145c0 <tcp_enqueue_flags>
 80145aa:	4603      	mov	r3, r0
}
 80145ac:	4618      	mov	r0, r3
 80145ae:	3714      	adds	r7, #20
 80145b0:	46bd      	mov	sp, r7
 80145b2:	bd90      	pop	{r4, r7, pc}
 80145b4:	0802b91c 	.word	0x0802b91c
 80145b8:	0802bd24 	.word	0x0802bd24
 80145bc:	0802b970 	.word	0x0802b970

080145c0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b08a      	sub	sp, #40	@ 0x28
 80145c4:	af02      	add	r7, sp, #8
 80145c6:	6078      	str	r0, [r7, #4]
 80145c8:	460b      	mov	r3, r1
 80145ca:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80145cc:	2300      	movs	r3, #0
 80145ce:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80145d0:	2300      	movs	r3, #0
 80145d2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80145d4:	78fb      	ldrb	r3, [r7, #3]
 80145d6:	f003 0303 	and.w	r3, r3, #3
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d106      	bne.n	80145ec <tcp_enqueue_flags+0x2c>
 80145de:	4b67      	ldr	r3, [pc, #412]	@ (801477c <tcp_enqueue_flags+0x1bc>)
 80145e0:	f240 4211 	movw	r2, #1041	@ 0x411
 80145e4:	4966      	ldr	r1, [pc, #408]	@ (8014780 <tcp_enqueue_flags+0x1c0>)
 80145e6:	4867      	ldr	r0, [pc, #412]	@ (8014784 <tcp_enqueue_flags+0x1c4>)
 80145e8:	f013 fca4 	bl	8027f34 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d106      	bne.n	8014600 <tcp_enqueue_flags+0x40>
 80145f2:	4b62      	ldr	r3, [pc, #392]	@ (801477c <tcp_enqueue_flags+0x1bc>)
 80145f4:	f240 4213 	movw	r2, #1043	@ 0x413
 80145f8:	4963      	ldr	r1, [pc, #396]	@ (8014788 <tcp_enqueue_flags+0x1c8>)
 80145fa:	4862      	ldr	r0, [pc, #392]	@ (8014784 <tcp_enqueue_flags+0x1c4>)
 80145fc:	f013 fc9a 	bl	8027f34 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014600:	78fb      	ldrb	r3, [r7, #3]
 8014602:	f003 0302 	and.w	r3, r3, #2
 8014606:	2b00      	cmp	r3, #0
 8014608:	d001      	beq.n	801460e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801460a:	2301      	movs	r3, #1
 801460c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801460e:	7ffb      	ldrb	r3, [r7, #31]
 8014610:	009b      	lsls	r3, r3, #2
 8014612:	b2db      	uxtb	r3, r3
 8014614:	f003 0304 	and.w	r3, r3, #4
 8014618:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801461a:	7dfb      	ldrb	r3, [r7, #23]
 801461c:	b29b      	uxth	r3, r3
 801461e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014622:	4619      	mov	r1, r3
 8014624:	2036      	movs	r0, #54	@ 0x36
 8014626:	f7fa fa9d 	bl	800eb64 <pbuf_alloc>
 801462a:	6138      	str	r0, [r7, #16]
 801462c:	693b      	ldr	r3, [r7, #16]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d109      	bne.n	8014646 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	8b5b      	ldrh	r3, [r3, #26]
 8014636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801463a:	b29a      	uxth	r2, r3
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014640:	f04f 33ff 	mov.w	r3, #4294967295
 8014644:	e095      	b.n	8014772 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014646:	693b      	ldr	r3, [r7, #16]
 8014648:	895a      	ldrh	r2, [r3, #10]
 801464a:	7dfb      	ldrb	r3, [r7, #23]
 801464c:	b29b      	uxth	r3, r3
 801464e:	429a      	cmp	r2, r3
 8014650:	d206      	bcs.n	8014660 <tcp_enqueue_flags+0xa0>
 8014652:	4b4a      	ldr	r3, [pc, #296]	@ (801477c <tcp_enqueue_flags+0x1bc>)
 8014654:	f240 4239 	movw	r2, #1081	@ 0x439
 8014658:	494c      	ldr	r1, [pc, #304]	@ (801478c <tcp_enqueue_flags+0x1cc>)
 801465a:	484a      	ldr	r0, [pc, #296]	@ (8014784 <tcp_enqueue_flags+0x1c4>)
 801465c:	f013 fc6a 	bl	8027f34 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8014664:	78fa      	ldrb	r2, [r7, #3]
 8014666:	7ffb      	ldrb	r3, [r7, #31]
 8014668:	9300      	str	r3, [sp, #0]
 801466a:	460b      	mov	r3, r1
 801466c:	6939      	ldr	r1, [r7, #16]
 801466e:	6878      	ldr	r0, [r7, #4]
 8014670:	f7ff f91a 	bl	80138a8 <tcp_create_segment>
 8014674:	60f8      	str	r0, [r7, #12]
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d109      	bne.n	8014690 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	8b5b      	ldrh	r3, [r3, #26]
 8014680:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014684:	b29a      	uxth	r2, r3
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801468a:	f04f 33ff 	mov.w	r3, #4294967295
 801468e:	e070      	b.n	8014772 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	68db      	ldr	r3, [r3, #12]
 8014694:	f003 0303 	and.w	r3, r3, #3
 8014698:	2b00      	cmp	r3, #0
 801469a:	d006      	beq.n	80146aa <tcp_enqueue_flags+0xea>
 801469c:	4b37      	ldr	r3, [pc, #220]	@ (801477c <tcp_enqueue_flags+0x1bc>)
 801469e:	f240 4242 	movw	r2, #1090	@ 0x442
 80146a2:	493b      	ldr	r1, [pc, #236]	@ (8014790 <tcp_enqueue_flags+0x1d0>)
 80146a4:	4837      	ldr	r0, [pc, #220]	@ (8014784 <tcp_enqueue_flags+0x1c4>)
 80146a6:	f013 fc45 	bl	8027f34 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	891b      	ldrh	r3, [r3, #8]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d006      	beq.n	80146c0 <tcp_enqueue_flags+0x100>
 80146b2:	4b32      	ldr	r3, [pc, #200]	@ (801477c <tcp_enqueue_flags+0x1bc>)
 80146b4:	f240 4243 	movw	r2, #1091	@ 0x443
 80146b8:	4936      	ldr	r1, [pc, #216]	@ (8014794 <tcp_enqueue_flags+0x1d4>)
 80146ba:	4832      	ldr	r0, [pc, #200]	@ (8014784 <tcp_enqueue_flags+0x1c4>)
 80146bc:	f013 fc3a 	bl	8027f34 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d103      	bne.n	80146d0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	68fa      	ldr	r2, [r7, #12]
 80146cc:	66da      	str	r2, [r3, #108]	@ 0x6c
 80146ce:	e00d      	b.n	80146ec <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80146d4:	61bb      	str	r3, [r7, #24]
 80146d6:	e002      	b.n	80146de <tcp_enqueue_flags+0x11e>
 80146d8:	69bb      	ldr	r3, [r7, #24]
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	61bb      	str	r3, [r7, #24]
 80146de:	69bb      	ldr	r3, [r7, #24]
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d1f8      	bne.n	80146d8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80146e6:	69bb      	ldr	r3, [r7, #24]
 80146e8:	68fa      	ldr	r2, [r7, #12]
 80146ea:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	2200      	movs	r2, #0
 80146f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80146f4:	78fb      	ldrb	r3, [r7, #3]
 80146f6:	f003 0302 	and.w	r3, r3, #2
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d104      	bne.n	8014708 <tcp_enqueue_flags+0x148>
 80146fe:	78fb      	ldrb	r3, [r7, #3]
 8014700:	f003 0301 	and.w	r3, r3, #1
 8014704:	2b00      	cmp	r3, #0
 8014706:	d004      	beq.n	8014712 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801470c:	1c5a      	adds	r2, r3, #1
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014712:	78fb      	ldrb	r3, [r7, #3]
 8014714:	f003 0301 	and.w	r3, r3, #1
 8014718:	2b00      	cmp	r3, #0
 801471a:	d006      	beq.n	801472a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	8b5b      	ldrh	r3, [r3, #26]
 8014720:	f043 0320 	orr.w	r3, r3, #32
 8014724:	b29a      	uxth	r2, r3
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	685b      	ldr	r3, [r3, #4]
 801472e:	4618      	mov	r0, r3
 8014730:	f7fa fdbc 	bl	800f2ac <pbuf_clen>
 8014734:	4603      	mov	r3, r0
 8014736:	461a      	mov	r2, r3
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801473e:	4413      	add	r3, r2
 8014740:	b29a      	uxth	r2, r3
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801474e:	2b00      	cmp	r3, #0
 8014750:	d00e      	beq.n	8014770 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014756:	2b00      	cmp	r3, #0
 8014758:	d10a      	bne.n	8014770 <tcp_enqueue_flags+0x1b0>
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801475e:	2b00      	cmp	r3, #0
 8014760:	d106      	bne.n	8014770 <tcp_enqueue_flags+0x1b0>
 8014762:	4b06      	ldr	r3, [pc, #24]	@ (801477c <tcp_enqueue_flags+0x1bc>)
 8014764:	f240 4265 	movw	r2, #1125	@ 0x465
 8014768:	490b      	ldr	r1, [pc, #44]	@ (8014798 <tcp_enqueue_flags+0x1d8>)
 801476a:	4806      	ldr	r0, [pc, #24]	@ (8014784 <tcp_enqueue_flags+0x1c4>)
 801476c:	f013 fbe2 	bl	8027f34 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014770:	2300      	movs	r3, #0
}
 8014772:	4618      	mov	r0, r3
 8014774:	3720      	adds	r7, #32
 8014776:	46bd      	mov	sp, r7
 8014778:	bd80      	pop	{r7, pc}
 801477a:	bf00      	nop
 801477c:	0802b91c 	.word	0x0802b91c
 8014780:	0802bd40 	.word	0x0802bd40
 8014784:	0802b970 	.word	0x0802b970
 8014788:	0802bd98 	.word	0x0802bd98
 801478c:	0802bdb8 	.word	0x0802bdb8
 8014790:	0802bdf4 	.word	0x0802bdf4
 8014794:	0802be0c 	.word	0x0802be0c
 8014798:	0802be38 	.word	0x0802be38

0801479c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801479c:	b5b0      	push	{r4, r5, r7, lr}
 801479e:	b08a      	sub	sp, #40	@ 0x28
 80147a0:	af00      	add	r7, sp, #0
 80147a2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d106      	bne.n	80147b8 <tcp_output+0x1c>
 80147aa:	4b8a      	ldr	r3, [pc, #552]	@ (80149d4 <tcp_output+0x238>)
 80147ac:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80147b0:	4989      	ldr	r1, [pc, #548]	@ (80149d8 <tcp_output+0x23c>)
 80147b2:	488a      	ldr	r0, [pc, #552]	@ (80149dc <tcp_output+0x240>)
 80147b4:	f013 fbbe 	bl	8027f34 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	7d1b      	ldrb	r3, [r3, #20]
 80147bc:	2b01      	cmp	r3, #1
 80147be:	d106      	bne.n	80147ce <tcp_output+0x32>
 80147c0:	4b84      	ldr	r3, [pc, #528]	@ (80149d4 <tcp_output+0x238>)
 80147c2:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80147c6:	4986      	ldr	r1, [pc, #536]	@ (80149e0 <tcp_output+0x244>)
 80147c8:	4884      	ldr	r0, [pc, #528]	@ (80149dc <tcp_output+0x240>)
 80147ca:	f013 fbb3 	bl	8027f34 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80147ce:	4b85      	ldr	r3, [pc, #532]	@ (80149e4 <tcp_output+0x248>)
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	687a      	ldr	r2, [r7, #4]
 80147d4:	429a      	cmp	r2, r3
 80147d6:	d101      	bne.n	80147dc <tcp_output+0x40>
    return ERR_OK;
 80147d8:	2300      	movs	r3, #0
 80147da:	e1ce      	b.n	8014b7a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80147e8:	4293      	cmp	r3, r2
 80147ea:	bf28      	it	cs
 80147ec:	4613      	movcs	r3, r2
 80147ee:	b29b      	uxth	r3, r3
 80147f0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80147f6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80147f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d10b      	bne.n	8014816 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	8b5b      	ldrh	r3, [r3, #26]
 8014802:	f003 0302 	and.w	r3, r3, #2
 8014806:	2b00      	cmp	r3, #0
 8014808:	f000 81aa 	beq.w	8014b60 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801480c:	6878      	ldr	r0, [r7, #4]
 801480e:	f000 fdcb 	bl	80153a8 <tcp_send_empty_ack>
 8014812:	4603      	mov	r3, r0
 8014814:	e1b1      	b.n	8014b7a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014816:	6879      	ldr	r1, [r7, #4]
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	3304      	adds	r3, #4
 801481c:	461a      	mov	r2, r3
 801481e:	6878      	ldr	r0, [r7, #4]
 8014820:	f7ff f826 	bl	8013870 <tcp_route>
 8014824:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014826:	697b      	ldr	r3, [r7, #20]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d102      	bne.n	8014832 <tcp_output+0x96>
    return ERR_RTE;
 801482c:	f06f 0303 	mvn.w	r3, #3
 8014830:	e1a3      	b.n	8014b7a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d003      	beq.n	8014840 <tcp_output+0xa4>
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d111      	bne.n	8014864 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014840:	697b      	ldr	r3, [r7, #20]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d002      	beq.n	801484c <tcp_output+0xb0>
 8014846:	697b      	ldr	r3, [r7, #20]
 8014848:	3304      	adds	r3, #4
 801484a:	e000      	b.n	801484e <tcp_output+0xb2>
 801484c:	2300      	movs	r3, #0
 801484e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014850:	693b      	ldr	r3, [r7, #16]
 8014852:	2b00      	cmp	r3, #0
 8014854:	d102      	bne.n	801485c <tcp_output+0xc0>
      return ERR_RTE;
 8014856:	f06f 0303 	mvn.w	r3, #3
 801485a:	e18e      	b.n	8014b7a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801485c:	693b      	ldr	r3, [r7, #16]
 801485e:	681a      	ldr	r2, [r3, #0]
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014866:	68db      	ldr	r3, [r3, #12]
 8014868:	685b      	ldr	r3, [r3, #4]
 801486a:	4618      	mov	r0, r3
 801486c:	f7f9 f84e 	bl	800d90c <lwip_htonl>
 8014870:	4602      	mov	r2, r0
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014876:	1ad3      	subs	r3, r2, r3
 8014878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801487a:	8912      	ldrh	r2, [r2, #8]
 801487c:	4413      	add	r3, r2
 801487e:	69ba      	ldr	r2, [r7, #24]
 8014880:	429a      	cmp	r2, r3
 8014882:	d227      	bcs.n	80148d4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801488a:	461a      	mov	r2, r3
 801488c:	69bb      	ldr	r3, [r7, #24]
 801488e:	4293      	cmp	r3, r2
 8014890:	d114      	bne.n	80148bc <tcp_output+0x120>
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014896:	2b00      	cmp	r3, #0
 8014898:	d110      	bne.n	80148bc <tcp_output+0x120>
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d10b      	bne.n	80148bc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	2200      	movs	r2, #0
 80148a8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	2201      	movs	r2, #1
 80148b0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	2200      	movs	r2, #0
 80148b8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	8b5b      	ldrh	r3, [r3, #26]
 80148c0:	f003 0302 	and.w	r3, r3, #2
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	f000 814d 	beq.w	8014b64 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	f000 fd6c 	bl	80153a8 <tcp_send_empty_ack>
 80148d0:	4603      	mov	r3, r0
 80148d2:	e152      	b.n	8014b7a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	2200      	movs	r2, #0
 80148d8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80148e0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80148e2:	6a3b      	ldr	r3, [r7, #32]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	f000 811c 	beq.w	8014b22 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80148ea:	e002      	b.n	80148f2 <tcp_output+0x156>
 80148ec:	6a3b      	ldr	r3, [r7, #32]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	623b      	str	r3, [r7, #32]
 80148f2:	6a3b      	ldr	r3, [r7, #32]
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d1f8      	bne.n	80148ec <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80148fa:	e112      	b.n	8014b22 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80148fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148fe:	68db      	ldr	r3, [r3, #12]
 8014900:	899b      	ldrh	r3, [r3, #12]
 8014902:	b29b      	uxth	r3, r3
 8014904:	4618      	mov	r0, r3
 8014906:	f7f8 ffeb 	bl	800d8e0 <lwip_htons>
 801490a:	4603      	mov	r3, r0
 801490c:	b2db      	uxtb	r3, r3
 801490e:	f003 0304 	and.w	r3, r3, #4
 8014912:	2b00      	cmp	r3, #0
 8014914:	d006      	beq.n	8014924 <tcp_output+0x188>
 8014916:	4b2f      	ldr	r3, [pc, #188]	@ (80149d4 <tcp_output+0x238>)
 8014918:	f240 5236 	movw	r2, #1334	@ 0x536
 801491c:	4932      	ldr	r1, [pc, #200]	@ (80149e8 <tcp_output+0x24c>)
 801491e:	482f      	ldr	r0, [pc, #188]	@ (80149dc <tcp_output+0x240>)
 8014920:	f013 fb08 	bl	8027f34 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014928:	2b00      	cmp	r3, #0
 801492a:	d01f      	beq.n	801496c <tcp_output+0x1d0>
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	8b5b      	ldrh	r3, [r3, #26]
 8014930:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8014934:	2b00      	cmp	r3, #0
 8014936:	d119      	bne.n	801496c <tcp_output+0x1d0>
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801493c:	2b00      	cmp	r3, #0
 801493e:	d00b      	beq.n	8014958 <tcp_output+0x1bc>
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	2b00      	cmp	r3, #0
 8014948:	d110      	bne.n	801496c <tcp_output+0x1d0>
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801494e:	891a      	ldrh	r2, [r3, #8]
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014954:	429a      	cmp	r2, r3
 8014956:	d209      	bcs.n	801496c <tcp_output+0x1d0>
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801495e:	2b00      	cmp	r3, #0
 8014960:	d004      	beq.n	801496c <tcp_output+0x1d0>
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014968:	2b08      	cmp	r3, #8
 801496a:	d901      	bls.n	8014970 <tcp_output+0x1d4>
 801496c:	2301      	movs	r3, #1
 801496e:	e000      	b.n	8014972 <tcp_output+0x1d6>
 8014970:	2300      	movs	r3, #0
 8014972:	2b00      	cmp	r3, #0
 8014974:	d106      	bne.n	8014984 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	8b5b      	ldrh	r3, [r3, #26]
 801497a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801497e:	2b00      	cmp	r3, #0
 8014980:	f000 80e4 	beq.w	8014b4c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	7d1b      	ldrb	r3, [r3, #20]
 8014988:	2b02      	cmp	r3, #2
 801498a:	d00d      	beq.n	80149a8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801498c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801498e:	68db      	ldr	r3, [r3, #12]
 8014990:	899b      	ldrh	r3, [r3, #12]
 8014992:	b29c      	uxth	r4, r3
 8014994:	2010      	movs	r0, #16
 8014996:	f7f8 ffa3 	bl	800d8e0 <lwip_htons>
 801499a:	4603      	mov	r3, r0
 801499c:	461a      	mov	r2, r3
 801499e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149a0:	68db      	ldr	r3, [r3, #12]
 80149a2:	4322      	orrs	r2, r4
 80149a4:	b292      	uxth	r2, r2
 80149a6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80149a8:	697a      	ldr	r2, [r7, #20]
 80149aa:	6879      	ldr	r1, [r7, #4]
 80149ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80149ae:	f000 f909 	bl	8014bc4 <tcp_output_segment>
 80149b2:	4603      	mov	r3, r0
 80149b4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80149b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d016      	beq.n	80149ec <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	8b5b      	ldrh	r3, [r3, #26]
 80149c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80149c6:	b29a      	uxth	r2, r3
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	835a      	strh	r2, [r3, #26]
      return err;
 80149cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80149d0:	e0d3      	b.n	8014b7a <tcp_output+0x3de>
 80149d2:	bf00      	nop
 80149d4:	0802b91c 	.word	0x0802b91c
 80149d8:	0802be60 	.word	0x0802be60
 80149dc:	0802b970 	.word	0x0802b970
 80149e0:	0802be78 	.word	0x0802be78
 80149e4:	20010350 	.word	0x20010350
 80149e8:	0802bea0 	.word	0x0802bea0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80149ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149ee:	681a      	ldr	r2, [r3, #0]
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	7d1b      	ldrb	r3, [r3, #20]
 80149f8:	2b02      	cmp	r3, #2
 80149fa:	d006      	beq.n	8014a0a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	8b5b      	ldrh	r3, [r3, #26]
 8014a00:	f023 0303 	bic.w	r3, r3, #3
 8014a04:	b29a      	uxth	r2, r3
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a0c:	68db      	ldr	r3, [r3, #12]
 8014a0e:	685b      	ldr	r3, [r3, #4]
 8014a10:	4618      	mov	r0, r3
 8014a12:	f7f8 ff7b 	bl	800d90c <lwip_htonl>
 8014a16:	4604      	mov	r4, r0
 8014a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a1a:	891b      	ldrh	r3, [r3, #8]
 8014a1c:	461d      	mov	r5, r3
 8014a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a20:	68db      	ldr	r3, [r3, #12]
 8014a22:	899b      	ldrh	r3, [r3, #12]
 8014a24:	b29b      	uxth	r3, r3
 8014a26:	4618      	mov	r0, r3
 8014a28:	f7f8 ff5a 	bl	800d8e0 <lwip_htons>
 8014a2c:	4603      	mov	r3, r0
 8014a2e:	b2db      	uxtb	r3, r3
 8014a30:	f003 0303 	and.w	r3, r3, #3
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d001      	beq.n	8014a3c <tcp_output+0x2a0>
 8014a38:	2301      	movs	r3, #1
 8014a3a:	e000      	b.n	8014a3e <tcp_output+0x2a2>
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	442b      	add	r3, r5
 8014a40:	4423      	add	r3, r4
 8014a42:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014a48:	68bb      	ldr	r3, [r7, #8]
 8014a4a:	1ad3      	subs	r3, r2, r3
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	da02      	bge.n	8014a56 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	68ba      	ldr	r2, [r7, #8]
 8014a54:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a58:	891b      	ldrh	r3, [r3, #8]
 8014a5a:	461c      	mov	r4, r3
 8014a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a5e:	68db      	ldr	r3, [r3, #12]
 8014a60:	899b      	ldrh	r3, [r3, #12]
 8014a62:	b29b      	uxth	r3, r3
 8014a64:	4618      	mov	r0, r3
 8014a66:	f7f8 ff3b 	bl	800d8e0 <lwip_htons>
 8014a6a:	4603      	mov	r3, r0
 8014a6c:	b2db      	uxtb	r3, r3
 8014a6e:	f003 0303 	and.w	r3, r3, #3
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d001      	beq.n	8014a7a <tcp_output+0x2de>
 8014a76:	2301      	movs	r3, #1
 8014a78:	e000      	b.n	8014a7c <tcp_output+0x2e0>
 8014a7a:	2300      	movs	r3, #0
 8014a7c:	4423      	add	r3, r4
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d049      	beq.n	8014b16 <tcp_output+0x37a>
      seg->next = NULL;
 8014a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a84:	2200      	movs	r2, #0
 8014a86:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d105      	bne.n	8014a9c <tcp_output+0x300>
        pcb->unacked = seg;
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014a94:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8014a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a98:	623b      	str	r3, [r7, #32]
 8014a9a:	e03f      	b.n	8014b1c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a9e:	68db      	ldr	r3, [r3, #12]
 8014aa0:	685b      	ldr	r3, [r3, #4]
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	f7f8 ff32 	bl	800d90c <lwip_htonl>
 8014aa8:	4604      	mov	r4, r0
 8014aaa:	6a3b      	ldr	r3, [r7, #32]
 8014aac:	68db      	ldr	r3, [r3, #12]
 8014aae:	685b      	ldr	r3, [r3, #4]
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	f7f8 ff2b 	bl	800d90c <lwip_htonl>
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	1ae3      	subs	r3, r4, r3
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	da24      	bge.n	8014b08 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	3370      	adds	r3, #112	@ 0x70
 8014ac2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014ac4:	e002      	b.n	8014acc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014ac6:	69fb      	ldr	r3, [r7, #28]
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014acc:	69fb      	ldr	r3, [r7, #28]
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d011      	beq.n	8014af8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014ad4:	69fb      	ldr	r3, [r7, #28]
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	68db      	ldr	r3, [r3, #12]
 8014ada:	685b      	ldr	r3, [r3, #4]
 8014adc:	4618      	mov	r0, r3
 8014ade:	f7f8 ff15 	bl	800d90c <lwip_htonl>
 8014ae2:	4604      	mov	r4, r0
 8014ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ae6:	68db      	ldr	r3, [r3, #12]
 8014ae8:	685b      	ldr	r3, [r3, #4]
 8014aea:	4618      	mov	r0, r3
 8014aec:	f7f8 ff0e 	bl	800d90c <lwip_htonl>
 8014af0:	4603      	mov	r3, r0
 8014af2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	dbe6      	blt.n	8014ac6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014af8:	69fb      	ldr	r3, [r7, #28]
 8014afa:	681a      	ldr	r2, [r3, #0]
 8014afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014afe:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014b00:	69fb      	ldr	r3, [r7, #28]
 8014b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014b04:	601a      	str	r2, [r3, #0]
 8014b06:	e009      	b.n	8014b1c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014b08:	6a3b      	ldr	r3, [r7, #32]
 8014b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014b0c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8014b0e:	6a3b      	ldr	r3, [r7, #32]
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	623b      	str	r3, [r7, #32]
 8014b14:	e002      	b.n	8014b1c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014b16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014b18:	f7fb ff1f 	bl	801095a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014b20:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8014b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d012      	beq.n	8014b4e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b2a:	68db      	ldr	r3, [r3, #12]
 8014b2c:	685b      	ldr	r3, [r3, #4]
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f7f8 feec 	bl	800d90c <lwip_htonl>
 8014b34:	4602      	mov	r2, r0
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014b3a:	1ad3      	subs	r3, r2, r3
 8014b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014b3e:	8912      	ldrh	r2, [r2, #8]
 8014b40:	4413      	add	r3, r2
  while (seg != NULL &&
 8014b42:	69ba      	ldr	r2, [r7, #24]
 8014b44:	429a      	cmp	r2, r3
 8014b46:	f4bf aed9 	bcs.w	80148fc <tcp_output+0x160>
 8014b4a:	e000      	b.n	8014b4e <tcp_output+0x3b2>
      break;
 8014b4c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d108      	bne.n	8014b68 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	2200      	movs	r2, #0
 8014b5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8014b5e:	e004      	b.n	8014b6a <tcp_output+0x3ce>
    goto output_done;
 8014b60:	bf00      	nop
 8014b62:	e002      	b.n	8014b6a <tcp_output+0x3ce>
    goto output_done;
 8014b64:	bf00      	nop
 8014b66:	e000      	b.n	8014b6a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014b68:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	8b5b      	ldrh	r3, [r3, #26]
 8014b6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014b72:	b29a      	uxth	r2, r3
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014b78:	2300      	movs	r3, #0
}
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	3728      	adds	r7, #40	@ 0x28
 8014b7e:	46bd      	mov	sp, r7
 8014b80:	bdb0      	pop	{r4, r5, r7, pc}
 8014b82:	bf00      	nop

08014b84 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b082      	sub	sp, #8
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d106      	bne.n	8014ba0 <tcp_output_segment_busy+0x1c>
 8014b92:	4b09      	ldr	r3, [pc, #36]	@ (8014bb8 <tcp_output_segment_busy+0x34>)
 8014b94:	f240 529a 	movw	r2, #1434	@ 0x59a
 8014b98:	4908      	ldr	r1, [pc, #32]	@ (8014bbc <tcp_output_segment_busy+0x38>)
 8014b9a:	4809      	ldr	r0, [pc, #36]	@ (8014bc0 <tcp_output_segment_busy+0x3c>)
 8014b9c:	f013 f9ca 	bl	8027f34 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	685b      	ldr	r3, [r3, #4]
 8014ba4:	7b9b      	ldrb	r3, [r3, #14]
 8014ba6:	2b01      	cmp	r3, #1
 8014ba8:	d001      	beq.n	8014bae <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8014baa:	2301      	movs	r3, #1
 8014bac:	e000      	b.n	8014bb0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8014bae:	2300      	movs	r3, #0
}
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	3708      	adds	r7, #8
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	bd80      	pop	{r7, pc}
 8014bb8:	0802b91c 	.word	0x0802b91c
 8014bbc:	0802beb8 	.word	0x0802beb8
 8014bc0:	0802b970 	.word	0x0802b970

08014bc4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014bc4:	b5b0      	push	{r4, r5, r7, lr}
 8014bc6:	b08c      	sub	sp, #48	@ 0x30
 8014bc8:	af04      	add	r7, sp, #16
 8014bca:	60f8      	str	r0, [r7, #12]
 8014bcc:	60b9      	str	r1, [r7, #8]
 8014bce:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d106      	bne.n	8014be4 <tcp_output_segment+0x20>
 8014bd6:	4b64      	ldr	r3, [pc, #400]	@ (8014d68 <tcp_output_segment+0x1a4>)
 8014bd8:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8014bdc:	4963      	ldr	r1, [pc, #396]	@ (8014d6c <tcp_output_segment+0x1a8>)
 8014bde:	4864      	ldr	r0, [pc, #400]	@ (8014d70 <tcp_output_segment+0x1ac>)
 8014be0:	f013 f9a8 	bl	8027f34 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014be4:	68bb      	ldr	r3, [r7, #8]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d106      	bne.n	8014bf8 <tcp_output_segment+0x34>
 8014bea:	4b5f      	ldr	r3, [pc, #380]	@ (8014d68 <tcp_output_segment+0x1a4>)
 8014bec:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8014bf0:	4960      	ldr	r1, [pc, #384]	@ (8014d74 <tcp_output_segment+0x1b0>)
 8014bf2:	485f      	ldr	r0, [pc, #380]	@ (8014d70 <tcp_output_segment+0x1ac>)
 8014bf4:	f013 f99e 	bl	8027f34 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d106      	bne.n	8014c0c <tcp_output_segment+0x48>
 8014bfe:	4b5a      	ldr	r3, [pc, #360]	@ (8014d68 <tcp_output_segment+0x1a4>)
 8014c00:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8014c04:	495c      	ldr	r1, [pc, #368]	@ (8014d78 <tcp_output_segment+0x1b4>)
 8014c06:	485a      	ldr	r0, [pc, #360]	@ (8014d70 <tcp_output_segment+0x1ac>)
 8014c08:	f013 f994 	bl	8027f34 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8014c0c:	68f8      	ldr	r0, [r7, #12]
 8014c0e:	f7ff ffb9 	bl	8014b84 <tcp_output_segment_busy>
 8014c12:	4603      	mov	r3, r0
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d001      	beq.n	8014c1c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014c18:	2300      	movs	r3, #0
 8014c1a:	e0a1      	b.n	8014d60 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014c1c:	68bb      	ldr	r3, [r7, #8]
 8014c1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	68dc      	ldr	r4, [r3, #12]
 8014c24:	4610      	mov	r0, r2
 8014c26:	f7f8 fe71 	bl	800d90c <lwip_htonl>
 8014c2a:	4603      	mov	r3, r0
 8014c2c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014c2e:	68bb      	ldr	r3, [r7, #8]
 8014c30:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	68dc      	ldr	r4, [r3, #12]
 8014c36:	4610      	mov	r0, r2
 8014c38:	f7f8 fe52 	bl	800d8e0 <lwip_htons>
 8014c3c:	4603      	mov	r3, r0
 8014c3e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014c40:	68bb      	ldr	r3, [r7, #8]
 8014c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c44:	68ba      	ldr	r2, [r7, #8]
 8014c46:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8014c48:	441a      	add	r2, r3
 8014c4a:	68bb      	ldr	r3, [r7, #8]
 8014c4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	68db      	ldr	r3, [r3, #12]
 8014c52:	3314      	adds	r3, #20
 8014c54:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	7a9b      	ldrb	r3, [r3, #10]
 8014c5a:	f003 0301 	and.w	r3, r3, #1
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d015      	beq.n	8014c8e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8014c62:	68bb      	ldr	r3, [r7, #8]
 8014c64:	3304      	adds	r3, #4
 8014c66:	461a      	mov	r2, r3
 8014c68:	6879      	ldr	r1, [r7, #4]
 8014c6a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8014c6e:	f7fc fa39 	bl	80110e4 <tcp_eff_send_mss_netif>
 8014c72:	4603      	mov	r3, r0
 8014c74:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014c76:	8b7b      	ldrh	r3, [r7, #26]
 8014c78:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	f7f8 fe45 	bl	800d90c <lwip_htonl>
 8014c82:	4602      	mov	r2, r0
 8014c84:	69fb      	ldr	r3, [r7, #28]
 8014c86:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014c88:	69fb      	ldr	r3, [r7, #28]
 8014c8a:	3304      	adds	r3, #4
 8014c8c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8014c8e:	68bb      	ldr	r3, [r7, #8]
 8014c90:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	da02      	bge.n	8014c9e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014c98:	68bb      	ldr	r3, [r7, #8]
 8014c9a:	2200      	movs	r2, #0
 8014c9c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8014c9e:	68bb      	ldr	r3, [r7, #8]
 8014ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d10c      	bne.n	8014cc0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014ca6:	4b35      	ldr	r3, [pc, #212]	@ (8014d7c <tcp_output_segment+0x1b8>)
 8014ca8:	681a      	ldr	r2, [r3, #0]
 8014caa:	68bb      	ldr	r3, [r7, #8]
 8014cac:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	68db      	ldr	r3, [r3, #12]
 8014cb2:	685b      	ldr	r3, [r3, #4]
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	f7f8 fe29 	bl	800d90c <lwip_htonl>
 8014cba:	4602      	mov	r2, r0
 8014cbc:	68bb      	ldr	r3, [r7, #8]
 8014cbe:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	68da      	ldr	r2, [r3, #12]
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	685b      	ldr	r3, [r3, #4]
 8014cc8:	685b      	ldr	r3, [r3, #4]
 8014cca:	1ad3      	subs	r3, r2, r3
 8014ccc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	685b      	ldr	r3, [r3, #4]
 8014cd2:	8959      	ldrh	r1, [r3, #10]
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	685b      	ldr	r3, [r3, #4]
 8014cd8:	8b3a      	ldrh	r2, [r7, #24]
 8014cda:	1a8a      	subs	r2, r1, r2
 8014cdc:	b292      	uxth	r2, r2
 8014cde:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	685b      	ldr	r3, [r3, #4]
 8014ce4:	8919      	ldrh	r1, [r3, #8]
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	685b      	ldr	r3, [r3, #4]
 8014cea:	8b3a      	ldrh	r2, [r7, #24]
 8014cec:	1a8a      	subs	r2, r1, r2
 8014cee:	b292      	uxth	r2, r2
 8014cf0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	685b      	ldr	r3, [r3, #4]
 8014cf6:	68fa      	ldr	r2, [r7, #12]
 8014cf8:	68d2      	ldr	r2, [r2, #12]
 8014cfa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	68db      	ldr	r3, [r3, #12]
 8014d00:	2200      	movs	r2, #0
 8014d02:	741a      	strb	r2, [r3, #16]
 8014d04:	2200      	movs	r2, #0
 8014d06:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	68da      	ldr	r2, [r3, #12]
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	7a9b      	ldrb	r3, [r3, #10]
 8014d10:	f003 0301 	and.w	r3, r3, #1
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d001      	beq.n	8014d1c <tcp_output_segment+0x158>
 8014d18:	2318      	movs	r3, #24
 8014d1a:	e000      	b.n	8014d1e <tcp_output_segment+0x15a>
 8014d1c:	2314      	movs	r3, #20
 8014d1e:	4413      	add	r3, r2
 8014d20:	69fa      	ldr	r2, [r7, #28]
 8014d22:	429a      	cmp	r2, r3
 8014d24:	d006      	beq.n	8014d34 <tcp_output_segment+0x170>
 8014d26:	4b10      	ldr	r3, [pc, #64]	@ (8014d68 <tcp_output_segment+0x1a4>)
 8014d28:	f240 621c 	movw	r2, #1564	@ 0x61c
 8014d2c:	4914      	ldr	r1, [pc, #80]	@ (8014d80 <tcp_output_segment+0x1bc>)
 8014d2e:	4810      	ldr	r0, [pc, #64]	@ (8014d70 <tcp_output_segment+0x1ac>)
 8014d30:	f013 f900 	bl	8027f34 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	6858      	ldr	r0, [r3, #4]
 8014d38:	68b9      	ldr	r1, [r7, #8]
 8014d3a:	68bb      	ldr	r3, [r7, #8]
 8014d3c:	1d1c      	adds	r4, r3, #4
 8014d3e:	68bb      	ldr	r3, [r7, #8]
 8014d40:	7add      	ldrb	r5, [r3, #11]
 8014d42:	68bb      	ldr	r3, [r7, #8]
 8014d44:	7a9b      	ldrb	r3, [r3, #10]
 8014d46:	687a      	ldr	r2, [r7, #4]
 8014d48:	9202      	str	r2, [sp, #8]
 8014d4a:	2206      	movs	r2, #6
 8014d4c:	9201      	str	r2, [sp, #4]
 8014d4e:	9300      	str	r3, [sp, #0]
 8014d50:	462b      	mov	r3, r5
 8014d52:	4622      	mov	r2, r4
 8014d54:	f002 fdae 	bl	80178b4 <ip4_output_if>
 8014d58:	4603      	mov	r3, r0
 8014d5a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014d5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014d60:	4618      	mov	r0, r3
 8014d62:	3720      	adds	r7, #32
 8014d64:	46bd      	mov	sp, r7
 8014d66:	bdb0      	pop	{r4, r5, r7, pc}
 8014d68:	0802b91c 	.word	0x0802b91c
 8014d6c:	0802bee0 	.word	0x0802bee0
 8014d70:	0802b970 	.word	0x0802b970
 8014d74:	0802bf00 	.word	0x0802bf00
 8014d78:	0802bf20 	.word	0x0802bf20
 8014d7c:	20010304 	.word	0x20010304
 8014d80:	0802bf44 	.word	0x0802bf44

08014d84 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014d84:	b5b0      	push	{r4, r5, r7, lr}
 8014d86:	b084      	sub	sp, #16
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d106      	bne.n	8014da0 <tcp_rexmit_rto_prepare+0x1c>
 8014d92:	4b31      	ldr	r3, [pc, #196]	@ (8014e58 <tcp_rexmit_rto_prepare+0xd4>)
 8014d94:	f240 6263 	movw	r2, #1635	@ 0x663
 8014d98:	4930      	ldr	r1, [pc, #192]	@ (8014e5c <tcp_rexmit_rto_prepare+0xd8>)
 8014d9a:	4831      	ldr	r0, [pc, #196]	@ (8014e60 <tcp_rexmit_rto_prepare+0xdc>)
 8014d9c:	f013 f8ca 	bl	8027f34 <iprintf>

  if (pcb->unacked == NULL) {
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d102      	bne.n	8014dae <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014da8:	f06f 0305 	mvn.w	r3, #5
 8014dac:	e050      	b.n	8014e50 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014db2:	60fb      	str	r3, [r7, #12]
 8014db4:	e00b      	b.n	8014dce <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8014db6:	68f8      	ldr	r0, [r7, #12]
 8014db8:	f7ff fee4 	bl	8014b84 <tcp_output_segment_busy>
 8014dbc:	4603      	mov	r3, r0
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d002      	beq.n	8014dc8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8014dc2:	f06f 0305 	mvn.w	r3, #5
 8014dc6:	e043      	b.n	8014e50 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	60fb      	str	r3, [r7, #12]
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d1ef      	bne.n	8014db6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8014dd6:	68f8      	ldr	r0, [r7, #12]
 8014dd8:	f7ff fed4 	bl	8014b84 <tcp_output_segment_busy>
 8014ddc:	4603      	mov	r3, r0
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d002      	beq.n	8014de8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8014de2:	f06f 0305 	mvn.w	r3, #5
 8014de6:	e033      	b.n	8014e50 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	2200      	movs	r2, #0
 8014dfc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	8b5b      	ldrh	r3, [r3, #26]
 8014e02:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8014e06:	b29a      	uxth	r2, r3
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	68db      	ldr	r3, [r3, #12]
 8014e10:	685b      	ldr	r3, [r3, #4]
 8014e12:	4618      	mov	r0, r3
 8014e14:	f7f8 fd7a 	bl	800d90c <lwip_htonl>
 8014e18:	4604      	mov	r4, r0
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	891b      	ldrh	r3, [r3, #8]
 8014e1e:	461d      	mov	r5, r3
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	68db      	ldr	r3, [r3, #12]
 8014e24:	899b      	ldrh	r3, [r3, #12]
 8014e26:	b29b      	uxth	r3, r3
 8014e28:	4618      	mov	r0, r3
 8014e2a:	f7f8 fd59 	bl	800d8e0 <lwip_htons>
 8014e2e:	4603      	mov	r3, r0
 8014e30:	b2db      	uxtb	r3, r3
 8014e32:	f003 0303 	and.w	r3, r3, #3
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d001      	beq.n	8014e3e <tcp_rexmit_rto_prepare+0xba>
 8014e3a:	2301      	movs	r3, #1
 8014e3c:	e000      	b.n	8014e40 <tcp_rexmit_rto_prepare+0xbc>
 8014e3e:	2300      	movs	r3, #0
 8014e40:	442b      	add	r3, r5
 8014e42:	18e2      	adds	r2, r4, r3
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8014e4e:	2300      	movs	r3, #0
}
 8014e50:	4618      	mov	r0, r3
 8014e52:	3710      	adds	r7, #16
 8014e54:	46bd      	mov	sp, r7
 8014e56:	bdb0      	pop	{r4, r5, r7, pc}
 8014e58:	0802b91c 	.word	0x0802b91c
 8014e5c:	0802bf58 	.word	0x0802bf58
 8014e60:	0802b970 	.word	0x0802b970

08014e64 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8014e64:	b580      	push	{r7, lr}
 8014e66:	b082      	sub	sp, #8
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d106      	bne.n	8014e80 <tcp_rexmit_rto_commit+0x1c>
 8014e72:	4b0d      	ldr	r3, [pc, #52]	@ (8014ea8 <tcp_rexmit_rto_commit+0x44>)
 8014e74:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8014e78:	490c      	ldr	r1, [pc, #48]	@ (8014eac <tcp_rexmit_rto_commit+0x48>)
 8014e7a:	480d      	ldr	r0, [pc, #52]	@ (8014eb0 <tcp_rexmit_rto_commit+0x4c>)
 8014e7c:	f013 f85a 	bl	8027f34 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014e86:	2bff      	cmp	r3, #255	@ 0xff
 8014e88:	d007      	beq.n	8014e9a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014e90:	3301      	adds	r3, #1
 8014e92:	b2da      	uxtb	r2, r3
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8014e9a:	6878      	ldr	r0, [r7, #4]
 8014e9c:	f7ff fc7e 	bl	801479c <tcp_output>
}
 8014ea0:	bf00      	nop
 8014ea2:	3708      	adds	r7, #8
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	bd80      	pop	{r7, pc}
 8014ea8:	0802b91c 	.word	0x0802b91c
 8014eac:	0802bf7c 	.word	0x0802bf7c
 8014eb0:	0802b970 	.word	0x0802b970

08014eb4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b082      	sub	sp, #8
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d106      	bne.n	8014ed0 <tcp_rexmit_rto+0x1c>
 8014ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8014eec <tcp_rexmit_rto+0x38>)
 8014ec4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8014ec8:	4909      	ldr	r1, [pc, #36]	@ (8014ef0 <tcp_rexmit_rto+0x3c>)
 8014eca:	480a      	ldr	r0, [pc, #40]	@ (8014ef4 <tcp_rexmit_rto+0x40>)
 8014ecc:	f013 f832 	bl	8027f34 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014ed0:	6878      	ldr	r0, [r7, #4]
 8014ed2:	f7ff ff57 	bl	8014d84 <tcp_rexmit_rto_prepare>
 8014ed6:	4603      	mov	r3, r0
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d102      	bne.n	8014ee2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014edc:	6878      	ldr	r0, [r7, #4]
 8014ede:	f7ff ffc1 	bl	8014e64 <tcp_rexmit_rto_commit>
  }
}
 8014ee2:	bf00      	nop
 8014ee4:	3708      	adds	r7, #8
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	bd80      	pop	{r7, pc}
 8014eea:	bf00      	nop
 8014eec:	0802b91c 	.word	0x0802b91c
 8014ef0:	0802bfa0 	.word	0x0802bfa0
 8014ef4:	0802b970 	.word	0x0802b970

08014ef8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014ef8:	b590      	push	{r4, r7, lr}
 8014efa:	b085      	sub	sp, #20
 8014efc:	af00      	add	r7, sp, #0
 8014efe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d106      	bne.n	8014f14 <tcp_rexmit+0x1c>
 8014f06:	4b2f      	ldr	r3, [pc, #188]	@ (8014fc4 <tcp_rexmit+0xcc>)
 8014f08:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8014f0c:	492e      	ldr	r1, [pc, #184]	@ (8014fc8 <tcp_rexmit+0xd0>)
 8014f0e:	482f      	ldr	r0, [pc, #188]	@ (8014fcc <tcp_rexmit+0xd4>)
 8014f10:	f013 f810 	bl	8027f34 <iprintf>

  if (pcb->unacked == NULL) {
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d102      	bne.n	8014f22 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014f1c:	f06f 0305 	mvn.w	r3, #5
 8014f20:	e04c      	b.n	8014fbc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014f26:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014f28:	68b8      	ldr	r0, [r7, #8]
 8014f2a:	f7ff fe2b 	bl	8014b84 <tcp_output_segment_busy>
 8014f2e:	4603      	mov	r3, r0
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d002      	beq.n	8014f3a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8014f34:	f06f 0305 	mvn.w	r3, #5
 8014f38:	e040      	b.n	8014fbc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014f3a:	68bb      	ldr	r3, [r7, #8]
 8014f3c:	681a      	ldr	r2, [r3, #0]
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	336c      	adds	r3, #108	@ 0x6c
 8014f46:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014f48:	e002      	b.n	8014f50 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d011      	beq.n	8014f7c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	68db      	ldr	r3, [r3, #12]
 8014f5e:	685b      	ldr	r3, [r3, #4]
 8014f60:	4618      	mov	r0, r3
 8014f62:	f7f8 fcd3 	bl	800d90c <lwip_htonl>
 8014f66:	4604      	mov	r4, r0
 8014f68:	68bb      	ldr	r3, [r7, #8]
 8014f6a:	68db      	ldr	r3, [r3, #12]
 8014f6c:	685b      	ldr	r3, [r3, #4]
 8014f6e:	4618      	mov	r0, r3
 8014f70:	f7f8 fccc 	bl	800d90c <lwip_htonl>
 8014f74:	4603      	mov	r3, r0
 8014f76:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	dbe6      	blt.n	8014f4a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	681a      	ldr	r2, [r3, #0]
 8014f80:	68bb      	ldr	r3, [r7, #8]
 8014f82:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	68ba      	ldr	r2, [r7, #8]
 8014f88:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8014f8a:	68bb      	ldr	r3, [r7, #8]
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d103      	bne.n	8014f9a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	2200      	movs	r2, #0
 8014f96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014fa0:	2bff      	cmp	r3, #255	@ 0xff
 8014fa2:	d007      	beq.n	8014fb4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014faa:	3301      	adds	r3, #1
 8014fac:	b2da      	uxtb	r2, r3
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8014fba:	2300      	movs	r3, #0
}
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	3714      	adds	r7, #20
 8014fc0:	46bd      	mov	sp, r7
 8014fc2:	bd90      	pop	{r4, r7, pc}
 8014fc4:	0802b91c 	.word	0x0802b91c
 8014fc8:	0802bfbc 	.word	0x0802bfbc
 8014fcc:	0802b970 	.word	0x0802b970

08014fd0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	b082      	sub	sp, #8
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d106      	bne.n	8014fec <tcp_rexmit_fast+0x1c>
 8014fde:	4b2a      	ldr	r3, [pc, #168]	@ (8015088 <tcp_rexmit_fast+0xb8>)
 8014fe0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8014fe4:	4929      	ldr	r1, [pc, #164]	@ (801508c <tcp_rexmit_fast+0xbc>)
 8014fe6:	482a      	ldr	r0, [pc, #168]	@ (8015090 <tcp_rexmit_fast+0xc0>)
 8014fe8:	f012 ffa4 	bl	8027f34 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d045      	beq.n	8015080 <tcp_rexmit_fast+0xb0>
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	8b5b      	ldrh	r3, [r3, #26]
 8014ff8:	f003 0304 	and.w	r3, r3, #4
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d13f      	bne.n	8015080 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015000:	6878      	ldr	r0, [r7, #4]
 8015002:	f7ff ff79 	bl	8014ef8 <tcp_rexmit>
 8015006:	4603      	mov	r3, r0
 8015008:	2b00      	cmp	r3, #0
 801500a:	d139      	bne.n	8015080 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015018:	4293      	cmp	r3, r2
 801501a:	bf28      	it	cs
 801501c:	4613      	movcs	r3, r2
 801501e:	b29b      	uxth	r3, r3
 8015020:	2b00      	cmp	r3, #0
 8015022:	da00      	bge.n	8015026 <tcp_rexmit_fast+0x56>
 8015024:	3301      	adds	r3, #1
 8015026:	105b      	asrs	r3, r3, #1
 8015028:	b29a      	uxth	r2, r3
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8015036:	461a      	mov	r2, r3
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801503c:	005b      	lsls	r3, r3, #1
 801503e:	429a      	cmp	r2, r3
 8015040:	d206      	bcs.n	8015050 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015046:	005b      	lsls	r3, r3, #1
 8015048:	b29a      	uxth	r2, r3
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801505a:	4619      	mov	r1, r3
 801505c:	0049      	lsls	r1, r1, #1
 801505e:	440b      	add	r3, r1
 8015060:	b29b      	uxth	r3, r3
 8015062:	4413      	add	r3, r2
 8015064:	b29a      	uxth	r2, r3
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	8b5b      	ldrh	r3, [r3, #26]
 8015070:	f043 0304 	orr.w	r3, r3, #4
 8015074:	b29a      	uxth	r2, r3
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	2200      	movs	r2, #0
 801507e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8015080:	bf00      	nop
 8015082:	3708      	adds	r7, #8
 8015084:	46bd      	mov	sp, r7
 8015086:	bd80      	pop	{r7, pc}
 8015088:	0802b91c 	.word	0x0802b91c
 801508c:	0802bfd4 	.word	0x0802bfd4
 8015090:	0802b970 	.word	0x0802b970

08015094 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015094:	b580      	push	{r7, lr}
 8015096:	b086      	sub	sp, #24
 8015098:	af00      	add	r7, sp, #0
 801509a:	60f8      	str	r0, [r7, #12]
 801509c:	607b      	str	r3, [r7, #4]
 801509e:	460b      	mov	r3, r1
 80150a0:	817b      	strh	r3, [r7, #10]
 80150a2:	4613      	mov	r3, r2
 80150a4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80150a6:	897a      	ldrh	r2, [r7, #10]
 80150a8:	893b      	ldrh	r3, [r7, #8]
 80150aa:	4413      	add	r3, r2
 80150ac:	b29b      	uxth	r3, r3
 80150ae:	3314      	adds	r3, #20
 80150b0:	b29b      	uxth	r3, r3
 80150b2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80150b6:	4619      	mov	r1, r3
 80150b8:	2022      	movs	r0, #34	@ 0x22
 80150ba:	f7f9 fd53 	bl	800eb64 <pbuf_alloc>
 80150be:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80150c0:	697b      	ldr	r3, [r7, #20]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d04d      	beq.n	8015162 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80150c6:	897b      	ldrh	r3, [r7, #10]
 80150c8:	3313      	adds	r3, #19
 80150ca:	697a      	ldr	r2, [r7, #20]
 80150cc:	8952      	ldrh	r2, [r2, #10]
 80150ce:	4293      	cmp	r3, r2
 80150d0:	db06      	blt.n	80150e0 <tcp_output_alloc_header_common+0x4c>
 80150d2:	4b26      	ldr	r3, [pc, #152]	@ (801516c <tcp_output_alloc_header_common+0xd8>)
 80150d4:	f240 7223 	movw	r2, #1827	@ 0x723
 80150d8:	4925      	ldr	r1, [pc, #148]	@ (8015170 <tcp_output_alloc_header_common+0xdc>)
 80150da:	4826      	ldr	r0, [pc, #152]	@ (8015174 <tcp_output_alloc_header_common+0xe0>)
 80150dc:	f012 ff2a 	bl	8027f34 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80150e0:	697b      	ldr	r3, [r7, #20]
 80150e2:	685b      	ldr	r3, [r3, #4]
 80150e4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80150e6:	8c3b      	ldrh	r3, [r7, #32]
 80150e8:	4618      	mov	r0, r3
 80150ea:	f7f8 fbf9 	bl	800d8e0 <lwip_htons>
 80150ee:	4603      	mov	r3, r0
 80150f0:	461a      	mov	r2, r3
 80150f2:	693b      	ldr	r3, [r7, #16]
 80150f4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80150f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80150f8:	4618      	mov	r0, r3
 80150fa:	f7f8 fbf1 	bl	800d8e0 <lwip_htons>
 80150fe:	4603      	mov	r3, r0
 8015100:	461a      	mov	r2, r3
 8015102:	693b      	ldr	r3, [r7, #16]
 8015104:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8015106:	693b      	ldr	r3, [r7, #16]
 8015108:	687a      	ldr	r2, [r7, #4]
 801510a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801510c:	68f8      	ldr	r0, [r7, #12]
 801510e:	f7f8 fbfd 	bl	800d90c <lwip_htonl>
 8015112:	4602      	mov	r2, r0
 8015114:	693b      	ldr	r3, [r7, #16]
 8015116:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015118:	897b      	ldrh	r3, [r7, #10]
 801511a:	089b      	lsrs	r3, r3, #2
 801511c:	b29b      	uxth	r3, r3
 801511e:	3305      	adds	r3, #5
 8015120:	b29b      	uxth	r3, r3
 8015122:	031b      	lsls	r3, r3, #12
 8015124:	b29a      	uxth	r2, r3
 8015126:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801512a:	b29b      	uxth	r3, r3
 801512c:	4313      	orrs	r3, r2
 801512e:	b29b      	uxth	r3, r3
 8015130:	4618      	mov	r0, r3
 8015132:	f7f8 fbd5 	bl	800d8e0 <lwip_htons>
 8015136:	4603      	mov	r3, r0
 8015138:	461a      	mov	r2, r3
 801513a:	693b      	ldr	r3, [r7, #16]
 801513c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801513e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015140:	4618      	mov	r0, r3
 8015142:	f7f8 fbcd 	bl	800d8e0 <lwip_htons>
 8015146:	4603      	mov	r3, r0
 8015148:	461a      	mov	r2, r3
 801514a:	693b      	ldr	r3, [r7, #16]
 801514c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801514e:	693b      	ldr	r3, [r7, #16]
 8015150:	2200      	movs	r2, #0
 8015152:	741a      	strb	r2, [r3, #16]
 8015154:	2200      	movs	r2, #0
 8015156:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015158:	693b      	ldr	r3, [r7, #16]
 801515a:	2200      	movs	r2, #0
 801515c:	749a      	strb	r2, [r3, #18]
 801515e:	2200      	movs	r2, #0
 8015160:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8015162:	697b      	ldr	r3, [r7, #20]
}
 8015164:	4618      	mov	r0, r3
 8015166:	3718      	adds	r7, #24
 8015168:	46bd      	mov	sp, r7
 801516a:	bd80      	pop	{r7, pc}
 801516c:	0802b91c 	.word	0x0802b91c
 8015170:	0802bff4 	.word	0x0802bff4
 8015174:	0802b970 	.word	0x0802b970

08015178 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015178:	b5b0      	push	{r4, r5, r7, lr}
 801517a:	b08a      	sub	sp, #40	@ 0x28
 801517c:	af04      	add	r7, sp, #16
 801517e:	60f8      	str	r0, [r7, #12]
 8015180:	607b      	str	r3, [r7, #4]
 8015182:	460b      	mov	r3, r1
 8015184:	817b      	strh	r3, [r7, #10]
 8015186:	4613      	mov	r3, r2
 8015188:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	2b00      	cmp	r3, #0
 801518e:	d106      	bne.n	801519e <tcp_output_alloc_header+0x26>
 8015190:	4b15      	ldr	r3, [pc, #84]	@ (80151e8 <tcp_output_alloc_header+0x70>)
 8015192:	f240 7242 	movw	r2, #1858	@ 0x742
 8015196:	4915      	ldr	r1, [pc, #84]	@ (80151ec <tcp_output_alloc_header+0x74>)
 8015198:	4815      	ldr	r0, [pc, #84]	@ (80151f0 <tcp_output_alloc_header+0x78>)
 801519a:	f012 fecb 	bl	8027f34 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	8adb      	ldrh	r3, [r3, #22]
 80151a6:	68fa      	ldr	r2, [r7, #12]
 80151a8:	8b12      	ldrh	r2, [r2, #24]
 80151aa:	68f9      	ldr	r1, [r7, #12]
 80151ac:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80151ae:	893d      	ldrh	r5, [r7, #8]
 80151b0:	897c      	ldrh	r4, [r7, #10]
 80151b2:	9103      	str	r1, [sp, #12]
 80151b4:	2110      	movs	r1, #16
 80151b6:	9102      	str	r1, [sp, #8]
 80151b8:	9201      	str	r2, [sp, #4]
 80151ba:	9300      	str	r3, [sp, #0]
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	462a      	mov	r2, r5
 80151c0:	4621      	mov	r1, r4
 80151c2:	f7ff ff67 	bl	8015094 <tcp_output_alloc_header_common>
 80151c6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80151c8:	697b      	ldr	r3, [r7, #20]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d006      	beq.n	80151dc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151d2:	68fa      	ldr	r2, [r7, #12]
 80151d4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80151d6:	441a      	add	r2, r3
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80151dc:	697b      	ldr	r3, [r7, #20]
}
 80151de:	4618      	mov	r0, r3
 80151e0:	3718      	adds	r7, #24
 80151e2:	46bd      	mov	sp, r7
 80151e4:	bdb0      	pop	{r4, r5, r7, pc}
 80151e6:	bf00      	nop
 80151e8:	0802b91c 	.word	0x0802b91c
 80151ec:	0802c024 	.word	0x0802c024
 80151f0:	0802b970 	.word	0x0802b970

080151f4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80151f4:	b580      	push	{r7, lr}
 80151f6:	b088      	sub	sp, #32
 80151f8:	af00      	add	r7, sp, #0
 80151fa:	60f8      	str	r0, [r7, #12]
 80151fc:	60b9      	str	r1, [r7, #8]
 80151fe:	4611      	mov	r1, r2
 8015200:	461a      	mov	r2, r3
 8015202:	460b      	mov	r3, r1
 8015204:	71fb      	strb	r3, [r7, #7]
 8015206:	4613      	mov	r3, r2
 8015208:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801520a:	2300      	movs	r3, #0
 801520c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801520e:	68bb      	ldr	r3, [r7, #8]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d106      	bne.n	8015222 <tcp_output_fill_options+0x2e>
 8015214:	4b12      	ldr	r3, [pc, #72]	@ (8015260 <tcp_output_fill_options+0x6c>)
 8015216:	f240 7256 	movw	r2, #1878	@ 0x756
 801521a:	4912      	ldr	r1, [pc, #72]	@ (8015264 <tcp_output_fill_options+0x70>)
 801521c:	4812      	ldr	r0, [pc, #72]	@ (8015268 <tcp_output_fill_options+0x74>)
 801521e:	f012 fe89 	bl	8027f34 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8015222:	68bb      	ldr	r3, [r7, #8]
 8015224:	685b      	ldr	r3, [r3, #4]
 8015226:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015228:	69bb      	ldr	r3, [r7, #24]
 801522a:	3314      	adds	r3, #20
 801522c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801522e:	8bfb      	ldrh	r3, [r7, #30]
 8015230:	009b      	lsls	r3, r3, #2
 8015232:	461a      	mov	r2, r3
 8015234:	79fb      	ldrb	r3, [r7, #7]
 8015236:	009b      	lsls	r3, r3, #2
 8015238:	f003 0304 	and.w	r3, r3, #4
 801523c:	4413      	add	r3, r2
 801523e:	3314      	adds	r3, #20
 8015240:	69ba      	ldr	r2, [r7, #24]
 8015242:	4413      	add	r3, r2
 8015244:	697a      	ldr	r2, [r7, #20]
 8015246:	429a      	cmp	r2, r3
 8015248:	d006      	beq.n	8015258 <tcp_output_fill_options+0x64>
 801524a:	4b05      	ldr	r3, [pc, #20]	@ (8015260 <tcp_output_fill_options+0x6c>)
 801524c:	f240 7275 	movw	r2, #1909	@ 0x775
 8015250:	4906      	ldr	r1, [pc, #24]	@ (801526c <tcp_output_fill_options+0x78>)
 8015252:	4805      	ldr	r0, [pc, #20]	@ (8015268 <tcp_output_fill_options+0x74>)
 8015254:	f012 fe6e 	bl	8027f34 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015258:	bf00      	nop
 801525a:	3720      	adds	r7, #32
 801525c:	46bd      	mov	sp, r7
 801525e:	bd80      	pop	{r7, pc}
 8015260:	0802b91c 	.word	0x0802b91c
 8015264:	0802c04c 	.word	0x0802c04c
 8015268:	0802b970 	.word	0x0802b970
 801526c:	0802bf44 	.word	0x0802bf44

08015270 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015270:	b580      	push	{r7, lr}
 8015272:	b08a      	sub	sp, #40	@ 0x28
 8015274:	af04      	add	r7, sp, #16
 8015276:	60f8      	str	r0, [r7, #12]
 8015278:	60b9      	str	r1, [r7, #8]
 801527a:	607a      	str	r2, [r7, #4]
 801527c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801527e:	68bb      	ldr	r3, [r7, #8]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d106      	bne.n	8015292 <tcp_output_control_segment+0x22>
 8015284:	4b1c      	ldr	r3, [pc, #112]	@ (80152f8 <tcp_output_control_segment+0x88>)
 8015286:	f240 7287 	movw	r2, #1927	@ 0x787
 801528a:	491c      	ldr	r1, [pc, #112]	@ (80152fc <tcp_output_control_segment+0x8c>)
 801528c:	481c      	ldr	r0, [pc, #112]	@ (8015300 <tcp_output_control_segment+0x90>)
 801528e:	f012 fe51 	bl	8027f34 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8015292:	683a      	ldr	r2, [r7, #0]
 8015294:	6879      	ldr	r1, [r7, #4]
 8015296:	68f8      	ldr	r0, [r7, #12]
 8015298:	f7fe faea 	bl	8013870 <tcp_route>
 801529c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801529e:	693b      	ldr	r3, [r7, #16]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d102      	bne.n	80152aa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80152a4:	23fc      	movs	r3, #252	@ 0xfc
 80152a6:	75fb      	strb	r3, [r7, #23]
 80152a8:	e01c      	b.n	80152e4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d006      	beq.n	80152be <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	7adb      	ldrb	r3, [r3, #11]
 80152b4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	7a9b      	ldrb	r3, [r3, #10]
 80152ba:	757b      	strb	r3, [r7, #21]
 80152bc:	e003      	b.n	80152c6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80152be:	23ff      	movs	r3, #255	@ 0xff
 80152c0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80152c2:	2300      	movs	r3, #0
 80152c4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80152c6:	7dba      	ldrb	r2, [r7, #22]
 80152c8:	693b      	ldr	r3, [r7, #16]
 80152ca:	9302      	str	r3, [sp, #8]
 80152cc:	2306      	movs	r3, #6
 80152ce:	9301      	str	r3, [sp, #4]
 80152d0:	7d7b      	ldrb	r3, [r7, #21]
 80152d2:	9300      	str	r3, [sp, #0]
 80152d4:	4613      	mov	r3, r2
 80152d6:	683a      	ldr	r2, [r7, #0]
 80152d8:	6879      	ldr	r1, [r7, #4]
 80152da:	68b8      	ldr	r0, [r7, #8]
 80152dc:	f002 faea 	bl	80178b4 <ip4_output_if>
 80152e0:	4603      	mov	r3, r0
 80152e2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80152e4:	68b8      	ldr	r0, [r7, #8]
 80152e6:	f7f9 ff53 	bl	800f190 <pbuf_free>
  return err;
 80152ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80152ee:	4618      	mov	r0, r3
 80152f0:	3718      	adds	r7, #24
 80152f2:	46bd      	mov	sp, r7
 80152f4:	bd80      	pop	{r7, pc}
 80152f6:	bf00      	nop
 80152f8:	0802b91c 	.word	0x0802b91c
 80152fc:	0802c074 	.word	0x0802c074
 8015300:	0802b970 	.word	0x0802b970

08015304 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015304:	b590      	push	{r4, r7, lr}
 8015306:	b08b      	sub	sp, #44	@ 0x2c
 8015308:	af04      	add	r7, sp, #16
 801530a:	60f8      	str	r0, [r7, #12]
 801530c:	60b9      	str	r1, [r7, #8]
 801530e:	607a      	str	r2, [r7, #4]
 8015310:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8015312:	683b      	ldr	r3, [r7, #0]
 8015314:	2b00      	cmp	r3, #0
 8015316:	d106      	bne.n	8015326 <tcp_rst+0x22>
 8015318:	4b1f      	ldr	r3, [pc, #124]	@ (8015398 <tcp_rst+0x94>)
 801531a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801531e:	491f      	ldr	r1, [pc, #124]	@ (801539c <tcp_rst+0x98>)
 8015320:	481f      	ldr	r0, [pc, #124]	@ (80153a0 <tcp_rst+0x9c>)
 8015322:	f012 fe07 	bl	8027f34 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8015326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015328:	2b00      	cmp	r3, #0
 801532a:	d106      	bne.n	801533a <tcp_rst+0x36>
 801532c:	4b1a      	ldr	r3, [pc, #104]	@ (8015398 <tcp_rst+0x94>)
 801532e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8015332:	491c      	ldr	r1, [pc, #112]	@ (80153a4 <tcp_rst+0xa0>)
 8015334:	481a      	ldr	r0, [pc, #104]	@ (80153a0 <tcp_rst+0x9c>)
 8015336:	f012 fdfd 	bl	8027f34 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801533a:	2300      	movs	r3, #0
 801533c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801533e:	f246 0308 	movw	r3, #24584	@ 0x6008
 8015342:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015344:	7dfb      	ldrb	r3, [r7, #23]
 8015346:	b29c      	uxth	r4, r3
 8015348:	68b8      	ldr	r0, [r7, #8]
 801534a:	f7f8 fadf 	bl	800d90c <lwip_htonl>
 801534e:	4602      	mov	r2, r0
 8015350:	8abb      	ldrh	r3, [r7, #20]
 8015352:	9303      	str	r3, [sp, #12]
 8015354:	2314      	movs	r3, #20
 8015356:	9302      	str	r3, [sp, #8]
 8015358:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801535a:	9301      	str	r3, [sp, #4]
 801535c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801535e:	9300      	str	r3, [sp, #0]
 8015360:	4613      	mov	r3, r2
 8015362:	2200      	movs	r2, #0
 8015364:	4621      	mov	r1, r4
 8015366:	6878      	ldr	r0, [r7, #4]
 8015368:	f7ff fe94 	bl	8015094 <tcp_output_alloc_header_common>
 801536c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801536e:	693b      	ldr	r3, [r7, #16]
 8015370:	2b00      	cmp	r3, #0
 8015372:	d00c      	beq.n	801538e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015374:	7dfb      	ldrb	r3, [r7, #23]
 8015376:	2200      	movs	r2, #0
 8015378:	6939      	ldr	r1, [r7, #16]
 801537a:	68f8      	ldr	r0, [r7, #12]
 801537c:	f7ff ff3a 	bl	80151f4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015382:	683a      	ldr	r2, [r7, #0]
 8015384:	6939      	ldr	r1, [r7, #16]
 8015386:	68f8      	ldr	r0, [r7, #12]
 8015388:	f7ff ff72 	bl	8015270 <tcp_output_control_segment>
 801538c:	e000      	b.n	8015390 <tcp_rst+0x8c>
    return;
 801538e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015390:	371c      	adds	r7, #28
 8015392:	46bd      	mov	sp, r7
 8015394:	bd90      	pop	{r4, r7, pc}
 8015396:	bf00      	nop
 8015398:	0802b91c 	.word	0x0802b91c
 801539c:	0802c0a0 	.word	0x0802c0a0
 80153a0:	0802b970 	.word	0x0802b970
 80153a4:	0802c0bc 	.word	0x0802c0bc

080153a8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80153a8:	b590      	push	{r4, r7, lr}
 80153aa:	b087      	sub	sp, #28
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80153b0:	2300      	movs	r3, #0
 80153b2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80153b4:	2300      	movs	r3, #0
 80153b6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d106      	bne.n	80153cc <tcp_send_empty_ack+0x24>
 80153be:	4b28      	ldr	r3, [pc, #160]	@ (8015460 <tcp_send_empty_ack+0xb8>)
 80153c0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80153c4:	4927      	ldr	r1, [pc, #156]	@ (8015464 <tcp_send_empty_ack+0xbc>)
 80153c6:	4828      	ldr	r0, [pc, #160]	@ (8015468 <tcp_send_empty_ack+0xc0>)
 80153c8:	f012 fdb4 	bl	8027f34 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80153cc:	7dfb      	ldrb	r3, [r7, #23]
 80153ce:	009b      	lsls	r3, r3, #2
 80153d0:	b2db      	uxtb	r3, r3
 80153d2:	f003 0304 	and.w	r3, r3, #4
 80153d6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80153d8:	7d7b      	ldrb	r3, [r7, #21]
 80153da:	b29c      	uxth	r4, r3
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80153e0:	4618      	mov	r0, r3
 80153e2:	f7f8 fa93 	bl	800d90c <lwip_htonl>
 80153e6:	4603      	mov	r3, r0
 80153e8:	2200      	movs	r2, #0
 80153ea:	4621      	mov	r1, r4
 80153ec:	6878      	ldr	r0, [r7, #4]
 80153ee:	f7ff fec3 	bl	8015178 <tcp_output_alloc_header>
 80153f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80153f4:	693b      	ldr	r3, [r7, #16]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d109      	bne.n	801540e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	8b5b      	ldrh	r3, [r3, #26]
 80153fe:	f043 0303 	orr.w	r3, r3, #3
 8015402:	b29a      	uxth	r2, r3
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015408:	f06f 0301 	mvn.w	r3, #1
 801540c:	e023      	b.n	8015456 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801540e:	7dbb      	ldrb	r3, [r7, #22]
 8015410:	7dfa      	ldrb	r2, [r7, #23]
 8015412:	6939      	ldr	r1, [r7, #16]
 8015414:	6878      	ldr	r0, [r7, #4]
 8015416:	f7ff feed 	bl	80151f4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801541a:	687a      	ldr	r2, [r7, #4]
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	3304      	adds	r3, #4
 8015420:	6939      	ldr	r1, [r7, #16]
 8015422:	6878      	ldr	r0, [r7, #4]
 8015424:	f7ff ff24 	bl	8015270 <tcp_output_control_segment>
 8015428:	4603      	mov	r3, r0
 801542a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801542c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d007      	beq.n	8015444 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	8b5b      	ldrh	r3, [r3, #26]
 8015438:	f043 0303 	orr.w	r3, r3, #3
 801543c:	b29a      	uxth	r2, r3
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	835a      	strh	r2, [r3, #26]
 8015442:	e006      	b.n	8015452 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	8b5b      	ldrh	r3, [r3, #26]
 8015448:	f023 0303 	bic.w	r3, r3, #3
 801544c:	b29a      	uxth	r2, r3
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8015452:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015456:	4618      	mov	r0, r3
 8015458:	371c      	adds	r7, #28
 801545a:	46bd      	mov	sp, r7
 801545c:	bd90      	pop	{r4, r7, pc}
 801545e:	bf00      	nop
 8015460:	0802b91c 	.word	0x0802b91c
 8015464:	0802c0d8 	.word	0x0802c0d8
 8015468:	0802b970 	.word	0x0802b970

0801546c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801546c:	b590      	push	{r4, r7, lr}
 801546e:	b087      	sub	sp, #28
 8015470:	af00      	add	r7, sp, #0
 8015472:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015474:	2300      	movs	r3, #0
 8015476:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	2b00      	cmp	r3, #0
 801547c:	d106      	bne.n	801548c <tcp_keepalive+0x20>
 801547e:	4b18      	ldr	r3, [pc, #96]	@ (80154e0 <tcp_keepalive+0x74>)
 8015480:	f640 0224 	movw	r2, #2084	@ 0x824
 8015484:	4917      	ldr	r1, [pc, #92]	@ (80154e4 <tcp_keepalive+0x78>)
 8015486:	4818      	ldr	r0, [pc, #96]	@ (80154e8 <tcp_keepalive+0x7c>)
 8015488:	f012 fd54 	bl	8027f34 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801548c:	7dfb      	ldrb	r3, [r7, #23]
 801548e:	b29c      	uxth	r4, r3
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015494:	3b01      	subs	r3, #1
 8015496:	4618      	mov	r0, r3
 8015498:	f7f8 fa38 	bl	800d90c <lwip_htonl>
 801549c:	4603      	mov	r3, r0
 801549e:	2200      	movs	r2, #0
 80154a0:	4621      	mov	r1, r4
 80154a2:	6878      	ldr	r0, [r7, #4]
 80154a4:	f7ff fe68 	bl	8015178 <tcp_output_alloc_header>
 80154a8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80154aa:	693b      	ldr	r3, [r7, #16]
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d102      	bne.n	80154b6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80154b0:	f04f 33ff 	mov.w	r3, #4294967295
 80154b4:	e010      	b.n	80154d8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80154b6:	7dfb      	ldrb	r3, [r7, #23]
 80154b8:	2200      	movs	r2, #0
 80154ba:	6939      	ldr	r1, [r7, #16]
 80154bc:	6878      	ldr	r0, [r7, #4]
 80154be:	f7ff fe99 	bl	80151f4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80154c2:	687a      	ldr	r2, [r7, #4]
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	3304      	adds	r3, #4
 80154c8:	6939      	ldr	r1, [r7, #16]
 80154ca:	6878      	ldr	r0, [r7, #4]
 80154cc:	f7ff fed0 	bl	8015270 <tcp_output_control_segment>
 80154d0:	4603      	mov	r3, r0
 80154d2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80154d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80154d8:	4618      	mov	r0, r3
 80154da:	371c      	adds	r7, #28
 80154dc:	46bd      	mov	sp, r7
 80154de:	bd90      	pop	{r4, r7, pc}
 80154e0:	0802b91c 	.word	0x0802b91c
 80154e4:	0802c0f8 	.word	0x0802c0f8
 80154e8:	0802b970 	.word	0x0802b970

080154ec <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80154ec:	b590      	push	{r4, r7, lr}
 80154ee:	b08b      	sub	sp, #44	@ 0x2c
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80154f4:	2300      	movs	r3, #0
 80154f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d106      	bne.n	801550e <tcp_zero_window_probe+0x22>
 8015500:	4b4c      	ldr	r3, [pc, #304]	@ (8015634 <tcp_zero_window_probe+0x148>)
 8015502:	f640 024f 	movw	r2, #2127	@ 0x84f
 8015506:	494c      	ldr	r1, [pc, #304]	@ (8015638 <tcp_zero_window_probe+0x14c>)
 8015508:	484c      	ldr	r0, [pc, #304]	@ (801563c <tcp_zero_window_probe+0x150>)
 801550a:	f012 fd13 	bl	8027f34 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015512:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8015514:	6a3b      	ldr	r3, [r7, #32]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d101      	bne.n	801551e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801551a:	2300      	movs	r3, #0
 801551c:	e086      	b.n	801562c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015524:	2bff      	cmp	r3, #255	@ 0xff
 8015526:	d007      	beq.n	8015538 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801552e:	3301      	adds	r3, #1
 8015530:	b2da      	uxtb	r2, r3
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015538:	6a3b      	ldr	r3, [r7, #32]
 801553a:	68db      	ldr	r3, [r3, #12]
 801553c:	899b      	ldrh	r3, [r3, #12]
 801553e:	b29b      	uxth	r3, r3
 8015540:	4618      	mov	r0, r3
 8015542:	f7f8 f9cd 	bl	800d8e0 <lwip_htons>
 8015546:	4603      	mov	r3, r0
 8015548:	b2db      	uxtb	r3, r3
 801554a:	f003 0301 	and.w	r3, r3, #1
 801554e:	2b00      	cmp	r3, #0
 8015550:	d005      	beq.n	801555e <tcp_zero_window_probe+0x72>
 8015552:	6a3b      	ldr	r3, [r7, #32]
 8015554:	891b      	ldrh	r3, [r3, #8]
 8015556:	2b00      	cmp	r3, #0
 8015558:	d101      	bne.n	801555e <tcp_zero_window_probe+0x72>
 801555a:	2301      	movs	r3, #1
 801555c:	e000      	b.n	8015560 <tcp_zero_window_probe+0x74>
 801555e:	2300      	movs	r3, #0
 8015560:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8015562:	7ffb      	ldrb	r3, [r7, #31]
 8015564:	2b00      	cmp	r3, #0
 8015566:	bf0c      	ite	eq
 8015568:	2301      	moveq	r3, #1
 801556a:	2300      	movne	r3, #0
 801556c:	b2db      	uxtb	r3, r3
 801556e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015570:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015574:	b299      	uxth	r1, r3
 8015576:	6a3b      	ldr	r3, [r7, #32]
 8015578:	68db      	ldr	r3, [r3, #12]
 801557a:	685b      	ldr	r3, [r3, #4]
 801557c:	8bba      	ldrh	r2, [r7, #28]
 801557e:	6878      	ldr	r0, [r7, #4]
 8015580:	f7ff fdfa 	bl	8015178 <tcp_output_alloc_header>
 8015584:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8015586:	69bb      	ldr	r3, [r7, #24]
 8015588:	2b00      	cmp	r3, #0
 801558a:	d102      	bne.n	8015592 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801558c:	f04f 33ff 	mov.w	r3, #4294967295
 8015590:	e04c      	b.n	801562c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015592:	69bb      	ldr	r3, [r7, #24]
 8015594:	685b      	ldr	r3, [r3, #4]
 8015596:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015598:	7ffb      	ldrb	r3, [r7, #31]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d011      	beq.n	80155c2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801559e:	697b      	ldr	r3, [r7, #20]
 80155a0:	899b      	ldrh	r3, [r3, #12]
 80155a2:	b29b      	uxth	r3, r3
 80155a4:	b21b      	sxth	r3, r3
 80155a6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80155aa:	b21c      	sxth	r4, r3
 80155ac:	2011      	movs	r0, #17
 80155ae:	f7f8 f997 	bl	800d8e0 <lwip_htons>
 80155b2:	4603      	mov	r3, r0
 80155b4:	b21b      	sxth	r3, r3
 80155b6:	4323      	orrs	r3, r4
 80155b8:	b21b      	sxth	r3, r3
 80155ba:	b29a      	uxth	r2, r3
 80155bc:	697b      	ldr	r3, [r7, #20]
 80155be:	819a      	strh	r2, [r3, #12]
 80155c0:	e010      	b.n	80155e4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80155c2:	69bb      	ldr	r3, [r7, #24]
 80155c4:	685b      	ldr	r3, [r3, #4]
 80155c6:	3314      	adds	r3, #20
 80155c8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80155ca:	6a3b      	ldr	r3, [r7, #32]
 80155cc:	6858      	ldr	r0, [r3, #4]
 80155ce:	6a3b      	ldr	r3, [r7, #32]
 80155d0:	685b      	ldr	r3, [r3, #4]
 80155d2:	891a      	ldrh	r2, [r3, #8]
 80155d4:	6a3b      	ldr	r3, [r7, #32]
 80155d6:	891b      	ldrh	r3, [r3, #8]
 80155d8:	1ad3      	subs	r3, r2, r3
 80155da:	b29b      	uxth	r3, r3
 80155dc:	2201      	movs	r2, #1
 80155de:	6939      	ldr	r1, [r7, #16]
 80155e0:	f7f9 ffdc 	bl	800f59c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80155e4:	6a3b      	ldr	r3, [r7, #32]
 80155e6:	68db      	ldr	r3, [r3, #12]
 80155e8:	685b      	ldr	r3, [r3, #4]
 80155ea:	4618      	mov	r0, r3
 80155ec:	f7f8 f98e 	bl	800d90c <lwip_htonl>
 80155f0:	4603      	mov	r3, r0
 80155f2:	3301      	adds	r3, #1
 80155f4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	1ad3      	subs	r3, r2, r3
 80155fe:	2b00      	cmp	r3, #0
 8015600:	da02      	bge.n	8015608 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	68fa      	ldr	r2, [r7, #12]
 8015606:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801560c:	2200      	movs	r2, #0
 801560e:	69b9      	ldr	r1, [r7, #24]
 8015610:	6878      	ldr	r0, [r7, #4]
 8015612:	f7ff fdef 	bl	80151f4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015616:	687a      	ldr	r2, [r7, #4]
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	3304      	adds	r3, #4
 801561c:	69b9      	ldr	r1, [r7, #24]
 801561e:	6878      	ldr	r0, [r7, #4]
 8015620:	f7ff fe26 	bl	8015270 <tcp_output_control_segment>
 8015624:	4603      	mov	r3, r0
 8015626:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015628:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801562c:	4618      	mov	r0, r3
 801562e:	372c      	adds	r7, #44	@ 0x2c
 8015630:	46bd      	mov	sp, r7
 8015632:	bd90      	pop	{r4, r7, pc}
 8015634:	0802b91c 	.word	0x0802b91c
 8015638:	0802c114 	.word	0x0802c114
 801563c:	0802b970 	.word	0x0802b970

08015640 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015640:	b580      	push	{r7, lr}
 8015642:	b082      	sub	sp, #8
 8015644:	af00      	add	r7, sp, #0
 8015646:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015648:	f7fa f896 	bl	800f778 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801564c:	4b0a      	ldr	r3, [pc, #40]	@ (8015678 <tcpip_tcp_timer+0x38>)
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	2b00      	cmp	r3, #0
 8015652:	d103      	bne.n	801565c <tcpip_tcp_timer+0x1c>
 8015654:	4b09      	ldr	r3, [pc, #36]	@ (801567c <tcpip_tcp_timer+0x3c>)
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	2b00      	cmp	r3, #0
 801565a:	d005      	beq.n	8015668 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801565c:	2200      	movs	r2, #0
 801565e:	4908      	ldr	r1, [pc, #32]	@ (8015680 <tcpip_tcp_timer+0x40>)
 8015660:	20fa      	movs	r0, #250	@ 0xfa
 8015662:	f000 f8f3 	bl	801584c <sys_timeout>
 8015666:	e003      	b.n	8015670 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015668:	4b06      	ldr	r3, [pc, #24]	@ (8015684 <tcpip_tcp_timer+0x44>)
 801566a:	2200      	movs	r2, #0
 801566c:	601a      	str	r2, [r3, #0]
  }
}
 801566e:	bf00      	nop
 8015670:	bf00      	nop
 8015672:	3708      	adds	r7, #8
 8015674:	46bd      	mov	sp, r7
 8015676:	bd80      	pop	{r7, pc}
 8015678:	20010310 	.word	0x20010310
 801567c:	20010314 	.word	0x20010314
 8015680:	08015641 	.word	0x08015641
 8015684:	2001035c 	.word	0x2001035c

08015688 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015688:	b580      	push	{r7, lr}
 801568a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801568c:	4b0a      	ldr	r3, [pc, #40]	@ (80156b8 <tcp_timer_needed+0x30>)
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d10f      	bne.n	80156b4 <tcp_timer_needed+0x2c>
 8015694:	4b09      	ldr	r3, [pc, #36]	@ (80156bc <tcp_timer_needed+0x34>)
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d103      	bne.n	80156a4 <tcp_timer_needed+0x1c>
 801569c:	4b08      	ldr	r3, [pc, #32]	@ (80156c0 <tcp_timer_needed+0x38>)
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d007      	beq.n	80156b4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80156a4:	4b04      	ldr	r3, [pc, #16]	@ (80156b8 <tcp_timer_needed+0x30>)
 80156a6:	2201      	movs	r2, #1
 80156a8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80156aa:	2200      	movs	r2, #0
 80156ac:	4905      	ldr	r1, [pc, #20]	@ (80156c4 <tcp_timer_needed+0x3c>)
 80156ae:	20fa      	movs	r0, #250	@ 0xfa
 80156b0:	f000 f8cc 	bl	801584c <sys_timeout>
  }
}
 80156b4:	bf00      	nop
 80156b6:	bd80      	pop	{r7, pc}
 80156b8:	2001035c 	.word	0x2001035c
 80156bc:	20010310 	.word	0x20010310
 80156c0:	20010314 	.word	0x20010314
 80156c4:	08015641 	.word	0x08015641

080156c8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80156c8:	b580      	push	{r7, lr}
 80156ca:	b086      	sub	sp, #24
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	60f8      	str	r0, [r7, #12]
 80156d0:	60b9      	str	r1, [r7, #8]
 80156d2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80156d4:	200a      	movs	r0, #10
 80156d6:	f7f8 fdd7 	bl	800e288 <memp_malloc>
 80156da:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80156dc:	693b      	ldr	r3, [r7, #16]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d109      	bne.n	80156f6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80156e2:	693b      	ldr	r3, [r7, #16]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d151      	bne.n	801578c <sys_timeout_abs+0xc4>
 80156e8:	4b2a      	ldr	r3, [pc, #168]	@ (8015794 <sys_timeout_abs+0xcc>)
 80156ea:	22be      	movs	r2, #190	@ 0xbe
 80156ec:	492a      	ldr	r1, [pc, #168]	@ (8015798 <sys_timeout_abs+0xd0>)
 80156ee:	482b      	ldr	r0, [pc, #172]	@ (801579c <sys_timeout_abs+0xd4>)
 80156f0:	f012 fc20 	bl	8027f34 <iprintf>
    return;
 80156f4:	e04a      	b.n	801578c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80156f6:	693b      	ldr	r3, [r7, #16]
 80156f8:	2200      	movs	r2, #0
 80156fa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80156fc:	693b      	ldr	r3, [r7, #16]
 80156fe:	68ba      	ldr	r2, [r7, #8]
 8015700:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015702:	693b      	ldr	r3, [r7, #16]
 8015704:	687a      	ldr	r2, [r7, #4]
 8015706:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015708:	693b      	ldr	r3, [r7, #16]
 801570a:	68fa      	ldr	r2, [r7, #12]
 801570c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801570e:	4b24      	ldr	r3, [pc, #144]	@ (80157a0 <sys_timeout_abs+0xd8>)
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	2b00      	cmp	r3, #0
 8015714:	d103      	bne.n	801571e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015716:	4a22      	ldr	r2, [pc, #136]	@ (80157a0 <sys_timeout_abs+0xd8>)
 8015718:	693b      	ldr	r3, [r7, #16]
 801571a:	6013      	str	r3, [r2, #0]
    return;
 801571c:	e037      	b.n	801578e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801571e:	693b      	ldr	r3, [r7, #16]
 8015720:	685a      	ldr	r2, [r3, #4]
 8015722:	4b1f      	ldr	r3, [pc, #124]	@ (80157a0 <sys_timeout_abs+0xd8>)
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	685b      	ldr	r3, [r3, #4]
 8015728:	1ad3      	subs	r3, r2, r3
 801572a:	0fdb      	lsrs	r3, r3, #31
 801572c:	f003 0301 	and.w	r3, r3, #1
 8015730:	b2db      	uxtb	r3, r3
 8015732:	2b00      	cmp	r3, #0
 8015734:	d007      	beq.n	8015746 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8015736:	4b1a      	ldr	r3, [pc, #104]	@ (80157a0 <sys_timeout_abs+0xd8>)
 8015738:	681a      	ldr	r2, [r3, #0]
 801573a:	693b      	ldr	r3, [r7, #16]
 801573c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801573e:	4a18      	ldr	r2, [pc, #96]	@ (80157a0 <sys_timeout_abs+0xd8>)
 8015740:	693b      	ldr	r3, [r7, #16]
 8015742:	6013      	str	r3, [r2, #0]
 8015744:	e023      	b.n	801578e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015746:	4b16      	ldr	r3, [pc, #88]	@ (80157a0 <sys_timeout_abs+0xd8>)
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	617b      	str	r3, [r7, #20]
 801574c:	e01a      	b.n	8015784 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801574e:	697b      	ldr	r3, [r7, #20]
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d00b      	beq.n	801576e <sys_timeout_abs+0xa6>
 8015756:	693b      	ldr	r3, [r7, #16]
 8015758:	685a      	ldr	r2, [r3, #4]
 801575a:	697b      	ldr	r3, [r7, #20]
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	685b      	ldr	r3, [r3, #4]
 8015760:	1ad3      	subs	r3, r2, r3
 8015762:	0fdb      	lsrs	r3, r3, #31
 8015764:	f003 0301 	and.w	r3, r3, #1
 8015768:	b2db      	uxtb	r3, r3
 801576a:	2b00      	cmp	r3, #0
 801576c:	d007      	beq.n	801577e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801576e:	697b      	ldr	r3, [r7, #20]
 8015770:	681a      	ldr	r2, [r3, #0]
 8015772:	693b      	ldr	r3, [r7, #16]
 8015774:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015776:	697b      	ldr	r3, [r7, #20]
 8015778:	693a      	ldr	r2, [r7, #16]
 801577a:	601a      	str	r2, [r3, #0]
        break;
 801577c:	e007      	b.n	801578e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801577e:	697b      	ldr	r3, [r7, #20]
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	617b      	str	r3, [r7, #20]
 8015784:	697b      	ldr	r3, [r7, #20]
 8015786:	2b00      	cmp	r3, #0
 8015788:	d1e1      	bne.n	801574e <sys_timeout_abs+0x86>
 801578a:	e000      	b.n	801578e <sys_timeout_abs+0xc6>
    return;
 801578c:	bf00      	nop
      }
    }
  }
}
 801578e:	3718      	adds	r7, #24
 8015790:	46bd      	mov	sp, r7
 8015792:	bd80      	pop	{r7, pc}
 8015794:	0802c138 	.word	0x0802c138
 8015798:	0802c16c 	.word	0x0802c16c
 801579c:	0802c1ac 	.word	0x0802c1ac
 80157a0:	20010354 	.word	0x20010354

080157a4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80157a4:	b580      	push	{r7, lr}
 80157a6:	b086      	sub	sp, #24
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80157b0:	697b      	ldr	r3, [r7, #20]
 80157b2:	685b      	ldr	r3, [r3, #4]
 80157b4:	4798      	blx	r3

  now = sys_now();
 80157b6:	f7f0 ffdd 	bl	8006774 <sys_now>
 80157ba:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80157bc:	697b      	ldr	r3, [r7, #20]
 80157be:	681a      	ldr	r2, [r3, #0]
 80157c0:	4b0f      	ldr	r3, [pc, #60]	@ (8015800 <lwip_cyclic_timer+0x5c>)
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	4413      	add	r3, r2
 80157c6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80157c8:	68fa      	ldr	r2, [r7, #12]
 80157ca:	693b      	ldr	r3, [r7, #16]
 80157cc:	1ad3      	subs	r3, r2, r3
 80157ce:	0fdb      	lsrs	r3, r3, #31
 80157d0:	f003 0301 	and.w	r3, r3, #1
 80157d4:	b2db      	uxtb	r3, r3
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d009      	beq.n	80157ee <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80157da:	697b      	ldr	r3, [r7, #20]
 80157dc:	681a      	ldr	r2, [r3, #0]
 80157de:	693b      	ldr	r3, [r7, #16]
 80157e0:	4413      	add	r3, r2
 80157e2:	687a      	ldr	r2, [r7, #4]
 80157e4:	4907      	ldr	r1, [pc, #28]	@ (8015804 <lwip_cyclic_timer+0x60>)
 80157e6:	4618      	mov	r0, r3
 80157e8:	f7ff ff6e 	bl	80156c8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80157ec:	e004      	b.n	80157f8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80157ee:	687a      	ldr	r2, [r7, #4]
 80157f0:	4904      	ldr	r1, [pc, #16]	@ (8015804 <lwip_cyclic_timer+0x60>)
 80157f2:	68f8      	ldr	r0, [r7, #12]
 80157f4:	f7ff ff68 	bl	80156c8 <sys_timeout_abs>
}
 80157f8:	bf00      	nop
 80157fa:	3718      	adds	r7, #24
 80157fc:	46bd      	mov	sp, r7
 80157fe:	bd80      	pop	{r7, pc}
 8015800:	20010358 	.word	0x20010358
 8015804:	080157a5 	.word	0x080157a5

08015808 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015808:	b580      	push	{r7, lr}
 801580a:	b082      	sub	sp, #8
 801580c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801580e:	2301      	movs	r3, #1
 8015810:	607b      	str	r3, [r7, #4]
 8015812:	e00e      	b.n	8015832 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015814:	4a0b      	ldr	r2, [pc, #44]	@ (8015844 <sys_timeouts_init+0x3c>)
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	00db      	lsls	r3, r3, #3
 8015820:	4a08      	ldr	r2, [pc, #32]	@ (8015844 <sys_timeouts_init+0x3c>)
 8015822:	4413      	add	r3, r2
 8015824:	461a      	mov	r2, r3
 8015826:	4908      	ldr	r1, [pc, #32]	@ (8015848 <sys_timeouts_init+0x40>)
 8015828:	f000 f810 	bl	801584c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	3301      	adds	r3, #1
 8015830:	607b      	str	r3, [r7, #4]
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	2b02      	cmp	r3, #2
 8015836:	d9ed      	bls.n	8015814 <sys_timeouts_init+0xc>
  }
}
 8015838:	bf00      	nop
 801583a:	bf00      	nop
 801583c:	3708      	adds	r7, #8
 801583e:	46bd      	mov	sp, r7
 8015840:	bd80      	pop	{r7, pc}
 8015842:	bf00      	nop
 8015844:	0802ce3c 	.word	0x0802ce3c
 8015848:	080157a5 	.word	0x080157a5

0801584c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801584c:	b580      	push	{r7, lr}
 801584e:	b086      	sub	sp, #24
 8015850:	af00      	add	r7, sp, #0
 8015852:	60f8      	str	r0, [r7, #12]
 8015854:	60b9      	str	r1, [r7, #8]
 8015856:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801585e:	d306      	bcc.n	801586e <sys_timeout+0x22>
 8015860:	4b0a      	ldr	r3, [pc, #40]	@ (801588c <sys_timeout+0x40>)
 8015862:	f240 1229 	movw	r2, #297	@ 0x129
 8015866:	490a      	ldr	r1, [pc, #40]	@ (8015890 <sys_timeout+0x44>)
 8015868:	480a      	ldr	r0, [pc, #40]	@ (8015894 <sys_timeout+0x48>)
 801586a:	f012 fb63 	bl	8027f34 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801586e:	f7f0 ff81 	bl	8006774 <sys_now>
 8015872:	4602      	mov	r2, r0
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	4413      	add	r3, r2
 8015878:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801587a:	687a      	ldr	r2, [r7, #4]
 801587c:	68b9      	ldr	r1, [r7, #8]
 801587e:	6978      	ldr	r0, [r7, #20]
 8015880:	f7ff ff22 	bl	80156c8 <sys_timeout_abs>
#endif
}
 8015884:	bf00      	nop
 8015886:	3718      	adds	r7, #24
 8015888:	46bd      	mov	sp, r7
 801588a:	bd80      	pop	{r7, pc}
 801588c:	0802c138 	.word	0x0802c138
 8015890:	0802c1d4 	.word	0x0802c1d4
 8015894:	0802c1ac 	.word	0x0802c1ac

08015898 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8015898:	b580      	push	{r7, lr}
 801589a:	b084      	sub	sp, #16
 801589c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801589e:	f7f0 ff69 	bl	8006774 <sys_now>
 80158a2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80158a4:	4b17      	ldr	r3, [pc, #92]	@ (8015904 <sys_check_timeouts+0x6c>)
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80158aa:	68bb      	ldr	r3, [r7, #8]
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d022      	beq.n	80158f6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80158b0:	68bb      	ldr	r3, [r7, #8]
 80158b2:	685b      	ldr	r3, [r3, #4]
 80158b4:	68fa      	ldr	r2, [r7, #12]
 80158b6:	1ad3      	subs	r3, r2, r3
 80158b8:	0fdb      	lsrs	r3, r3, #31
 80158ba:	f003 0301 	and.w	r3, r3, #1
 80158be:	b2db      	uxtb	r3, r3
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d11a      	bne.n	80158fa <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80158c4:	68bb      	ldr	r3, [r7, #8]
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	4a0e      	ldr	r2, [pc, #56]	@ (8015904 <sys_check_timeouts+0x6c>)
 80158ca:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80158cc:	68bb      	ldr	r3, [r7, #8]
 80158ce:	689b      	ldr	r3, [r3, #8]
 80158d0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80158d2:	68bb      	ldr	r3, [r7, #8]
 80158d4:	68db      	ldr	r3, [r3, #12]
 80158d6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80158d8:	68bb      	ldr	r3, [r7, #8]
 80158da:	685b      	ldr	r3, [r3, #4]
 80158dc:	4a0a      	ldr	r2, [pc, #40]	@ (8015908 <sys_check_timeouts+0x70>)
 80158de:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80158e0:	68b9      	ldr	r1, [r7, #8]
 80158e2:	200a      	movs	r0, #10
 80158e4:	f7f8 fd46 	bl	800e374 <memp_free>
    if (handler != NULL) {
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d0da      	beq.n	80158a4 <sys_check_timeouts+0xc>
      handler(arg);
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	6838      	ldr	r0, [r7, #0]
 80158f2:	4798      	blx	r3
  do {
 80158f4:	e7d6      	b.n	80158a4 <sys_check_timeouts+0xc>
      return;
 80158f6:	bf00      	nop
 80158f8:	e000      	b.n	80158fc <sys_check_timeouts+0x64>
      return;
 80158fa:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80158fc:	3710      	adds	r7, #16
 80158fe:	46bd      	mov	sp, r7
 8015900:	bd80      	pop	{r7, pc}
 8015902:	bf00      	nop
 8015904:	20010354 	.word	0x20010354
 8015908:	20010358 	.word	0x20010358

0801590c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801590c:	b580      	push	{r7, lr}
 801590e:	b082      	sub	sp, #8
 8015910:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8015912:	4b16      	ldr	r3, [pc, #88]	@ (801596c <sys_timeouts_sleeptime+0x60>)
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d102      	bne.n	8015920 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801591a:	f04f 33ff 	mov.w	r3, #4294967295
 801591e:	e020      	b.n	8015962 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8015920:	f7f0 ff28 	bl	8006774 <sys_now>
 8015924:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8015926:	4b11      	ldr	r3, [pc, #68]	@ (801596c <sys_timeouts_sleeptime+0x60>)
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	685a      	ldr	r2, [r3, #4]
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	1ad3      	subs	r3, r2, r3
 8015930:	0fdb      	lsrs	r3, r3, #31
 8015932:	f003 0301 	and.w	r3, r3, #1
 8015936:	b2db      	uxtb	r3, r3
 8015938:	2b00      	cmp	r3, #0
 801593a:	d001      	beq.n	8015940 <sys_timeouts_sleeptime+0x34>
    return 0;
 801593c:	2300      	movs	r3, #0
 801593e:	e010      	b.n	8015962 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8015940:	4b0a      	ldr	r3, [pc, #40]	@ (801596c <sys_timeouts_sleeptime+0x60>)
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	685a      	ldr	r2, [r3, #4]
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	1ad3      	subs	r3, r2, r3
 801594a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801594c:	683b      	ldr	r3, [r7, #0]
 801594e:	2b00      	cmp	r3, #0
 8015950:	da06      	bge.n	8015960 <sys_timeouts_sleeptime+0x54>
 8015952:	4b07      	ldr	r3, [pc, #28]	@ (8015970 <sys_timeouts_sleeptime+0x64>)
 8015954:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8015958:	4906      	ldr	r1, [pc, #24]	@ (8015974 <sys_timeouts_sleeptime+0x68>)
 801595a:	4807      	ldr	r0, [pc, #28]	@ (8015978 <sys_timeouts_sleeptime+0x6c>)
 801595c:	f012 faea 	bl	8027f34 <iprintf>
    return ret;
 8015960:	683b      	ldr	r3, [r7, #0]
  }
}
 8015962:	4618      	mov	r0, r3
 8015964:	3708      	adds	r7, #8
 8015966:	46bd      	mov	sp, r7
 8015968:	bd80      	pop	{r7, pc}
 801596a:	bf00      	nop
 801596c:	20010354 	.word	0x20010354
 8015970:	0802c138 	.word	0x0802c138
 8015974:	0802c20c 	.word	0x0802c20c
 8015978:	0802c1ac 	.word	0x0802c1ac

0801597c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801597c:	b580      	push	{r7, lr}
 801597e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015980:	f012 f84c 	bl	8027a1c <rand>
 8015984:	4603      	mov	r3, r0
 8015986:	b29b      	uxth	r3, r3
 8015988:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801598c:	b29b      	uxth	r3, r3
 801598e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8015992:	b29a      	uxth	r2, r3
 8015994:	4b01      	ldr	r3, [pc, #4]	@ (801599c <udp_init+0x20>)
 8015996:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015998:	bf00      	nop
 801599a:	bd80      	pop	{r7, pc}
 801599c:	20000034 	.word	0x20000034

080159a0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80159a0:	b480      	push	{r7}
 80159a2:	b083      	sub	sp, #12
 80159a4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80159a6:	2300      	movs	r3, #0
 80159a8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80159aa:	4b17      	ldr	r3, [pc, #92]	@ (8015a08 <udp_new_port+0x68>)
 80159ac:	881b      	ldrh	r3, [r3, #0]
 80159ae:	1c5a      	adds	r2, r3, #1
 80159b0:	b291      	uxth	r1, r2
 80159b2:	4a15      	ldr	r2, [pc, #84]	@ (8015a08 <udp_new_port+0x68>)
 80159b4:	8011      	strh	r1, [r2, #0]
 80159b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80159ba:	4293      	cmp	r3, r2
 80159bc:	d103      	bne.n	80159c6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80159be:	4b12      	ldr	r3, [pc, #72]	@ (8015a08 <udp_new_port+0x68>)
 80159c0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80159c4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80159c6:	4b11      	ldr	r3, [pc, #68]	@ (8015a0c <udp_new_port+0x6c>)
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	603b      	str	r3, [r7, #0]
 80159cc:	e011      	b.n	80159f2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80159ce:	683b      	ldr	r3, [r7, #0]
 80159d0:	8a5a      	ldrh	r2, [r3, #18]
 80159d2:	4b0d      	ldr	r3, [pc, #52]	@ (8015a08 <udp_new_port+0x68>)
 80159d4:	881b      	ldrh	r3, [r3, #0]
 80159d6:	429a      	cmp	r2, r3
 80159d8:	d108      	bne.n	80159ec <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80159da:	88fb      	ldrh	r3, [r7, #6]
 80159dc:	3301      	adds	r3, #1
 80159de:	80fb      	strh	r3, [r7, #6]
 80159e0:	88fb      	ldrh	r3, [r7, #6]
 80159e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80159e6:	d3e0      	bcc.n	80159aa <udp_new_port+0xa>
        return 0;
 80159e8:	2300      	movs	r3, #0
 80159ea:	e007      	b.n	80159fc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80159ec:	683b      	ldr	r3, [r7, #0]
 80159ee:	68db      	ldr	r3, [r3, #12]
 80159f0:	603b      	str	r3, [r7, #0]
 80159f2:	683b      	ldr	r3, [r7, #0]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d1ea      	bne.n	80159ce <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80159f8:	4b03      	ldr	r3, [pc, #12]	@ (8015a08 <udp_new_port+0x68>)
 80159fa:	881b      	ldrh	r3, [r3, #0]
}
 80159fc:	4618      	mov	r0, r3
 80159fe:	370c      	adds	r7, #12
 8015a00:	46bd      	mov	sp, r7
 8015a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a06:	4770      	bx	lr
 8015a08:	20000034 	.word	0x20000034
 8015a0c:	20010360 	.word	0x20010360

08015a10 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015a10:	b580      	push	{r7, lr}
 8015a12:	b084      	sub	sp, #16
 8015a14:	af00      	add	r7, sp, #0
 8015a16:	60f8      	str	r0, [r7, #12]
 8015a18:	60b9      	str	r1, [r7, #8]
 8015a1a:	4613      	mov	r3, r2
 8015a1c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d105      	bne.n	8015a30 <udp_input_local_match+0x20>
 8015a24:	4b27      	ldr	r3, [pc, #156]	@ (8015ac4 <udp_input_local_match+0xb4>)
 8015a26:	2287      	movs	r2, #135	@ 0x87
 8015a28:	4927      	ldr	r1, [pc, #156]	@ (8015ac8 <udp_input_local_match+0xb8>)
 8015a2a:	4828      	ldr	r0, [pc, #160]	@ (8015acc <udp_input_local_match+0xbc>)
 8015a2c:	f012 fa82 	bl	8027f34 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8015a30:	68bb      	ldr	r3, [r7, #8]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d105      	bne.n	8015a42 <udp_input_local_match+0x32>
 8015a36:	4b23      	ldr	r3, [pc, #140]	@ (8015ac4 <udp_input_local_match+0xb4>)
 8015a38:	2288      	movs	r2, #136	@ 0x88
 8015a3a:	4925      	ldr	r1, [pc, #148]	@ (8015ad0 <udp_input_local_match+0xc0>)
 8015a3c:	4823      	ldr	r0, [pc, #140]	@ (8015acc <udp_input_local_match+0xbc>)
 8015a3e:	f012 fa79 	bl	8027f34 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	7a1b      	ldrb	r3, [r3, #8]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d00b      	beq.n	8015a62 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	7a1a      	ldrb	r2, [r3, #8]
 8015a4e:	4b21      	ldr	r3, [pc, #132]	@ (8015ad4 <udp_input_local_match+0xc4>)
 8015a50:	685b      	ldr	r3, [r3, #4]
 8015a52:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015a56:	3301      	adds	r3, #1
 8015a58:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015a5a:	429a      	cmp	r2, r3
 8015a5c:	d001      	beq.n	8015a62 <udp_input_local_match+0x52>
    return 0;
 8015a5e:	2300      	movs	r3, #0
 8015a60:	e02b      	b.n	8015aba <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015a62:	79fb      	ldrb	r3, [r7, #7]
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d018      	beq.n	8015a9a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d013      	beq.n	8015a96 <udp_input_local_match+0x86>
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d00f      	beq.n	8015a96 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015a76:	4b17      	ldr	r3, [pc, #92]	@ (8015ad4 <udp_input_local_match+0xc4>)
 8015a78:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a7e:	d00a      	beq.n	8015a96 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	681a      	ldr	r2, [r3, #0]
 8015a84:	4b13      	ldr	r3, [pc, #76]	@ (8015ad4 <udp_input_local_match+0xc4>)
 8015a86:	695b      	ldr	r3, [r3, #20]
 8015a88:	405a      	eors	r2, r3
 8015a8a:	68bb      	ldr	r3, [r7, #8]
 8015a8c:	3308      	adds	r3, #8
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d110      	bne.n	8015ab8 <udp_input_local_match+0xa8>
          return 1;
 8015a96:	2301      	movs	r3, #1
 8015a98:	e00f      	b.n	8015aba <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d009      	beq.n	8015ab4 <udp_input_local_match+0xa4>
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d005      	beq.n	8015ab4 <udp_input_local_match+0xa4>
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	681a      	ldr	r2, [r3, #0]
 8015aac:	4b09      	ldr	r3, [pc, #36]	@ (8015ad4 <udp_input_local_match+0xc4>)
 8015aae:	695b      	ldr	r3, [r3, #20]
 8015ab0:	429a      	cmp	r2, r3
 8015ab2:	d101      	bne.n	8015ab8 <udp_input_local_match+0xa8>
        return 1;
 8015ab4:	2301      	movs	r3, #1
 8015ab6:	e000      	b.n	8015aba <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015ab8:	2300      	movs	r3, #0
}
 8015aba:	4618      	mov	r0, r3
 8015abc:	3710      	adds	r7, #16
 8015abe:	46bd      	mov	sp, r7
 8015ac0:	bd80      	pop	{r7, pc}
 8015ac2:	bf00      	nop
 8015ac4:	0802c220 	.word	0x0802c220
 8015ac8:	0802c250 	.word	0x0802c250
 8015acc:	0802c274 	.word	0x0802c274
 8015ad0:	0802c29c 	.word	0x0802c29c
 8015ad4:	2000d094 	.word	0x2000d094

08015ad8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015ad8:	b590      	push	{r4, r7, lr}
 8015ada:	b08d      	sub	sp, #52	@ 0x34
 8015adc:	af02      	add	r7, sp, #8
 8015ade:	6078      	str	r0, [r7, #4]
 8015ae0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015ae2:	2300      	movs	r3, #0
 8015ae4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d105      	bne.n	8015af8 <udp_input+0x20>
 8015aec:	4b7c      	ldr	r3, [pc, #496]	@ (8015ce0 <udp_input+0x208>)
 8015aee:	22cf      	movs	r2, #207	@ 0xcf
 8015af0:	497c      	ldr	r1, [pc, #496]	@ (8015ce4 <udp_input+0x20c>)
 8015af2:	487d      	ldr	r0, [pc, #500]	@ (8015ce8 <udp_input+0x210>)
 8015af4:	f012 fa1e 	bl	8027f34 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015af8:	683b      	ldr	r3, [r7, #0]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d105      	bne.n	8015b0a <udp_input+0x32>
 8015afe:	4b78      	ldr	r3, [pc, #480]	@ (8015ce0 <udp_input+0x208>)
 8015b00:	22d0      	movs	r2, #208	@ 0xd0
 8015b02:	497a      	ldr	r1, [pc, #488]	@ (8015cec <udp_input+0x214>)
 8015b04:	4878      	ldr	r0, [pc, #480]	@ (8015ce8 <udp_input+0x210>)
 8015b06:	f012 fa15 	bl	8027f34 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	895b      	ldrh	r3, [r3, #10]
 8015b0e:	2b07      	cmp	r3, #7
 8015b10:	d803      	bhi.n	8015b1a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015b12:	6878      	ldr	r0, [r7, #4]
 8015b14:	f7f9 fb3c 	bl	800f190 <pbuf_free>
    goto end;
 8015b18:	e0de      	b.n	8015cd8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	685b      	ldr	r3, [r3, #4]
 8015b1e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015b20:	4b73      	ldr	r3, [pc, #460]	@ (8015cf0 <udp_input+0x218>)
 8015b22:	695b      	ldr	r3, [r3, #20]
 8015b24:	4a72      	ldr	r2, [pc, #456]	@ (8015cf0 <udp_input+0x218>)
 8015b26:	6812      	ldr	r2, [r2, #0]
 8015b28:	4611      	mov	r1, r2
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	f001 ff9a 	bl	8017a64 <ip4_addr_isbroadcast_u32>
 8015b30:	4603      	mov	r3, r0
 8015b32:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015b34:	697b      	ldr	r3, [r7, #20]
 8015b36:	881b      	ldrh	r3, [r3, #0]
 8015b38:	b29b      	uxth	r3, r3
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	f7f7 fed0 	bl	800d8e0 <lwip_htons>
 8015b40:	4603      	mov	r3, r0
 8015b42:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015b44:	697b      	ldr	r3, [r7, #20]
 8015b46:	885b      	ldrh	r3, [r3, #2]
 8015b48:	b29b      	uxth	r3, r3
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f7f7 fec8 	bl	800d8e0 <lwip_htons>
 8015b50:	4603      	mov	r3, r0
 8015b52:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015b54:	2300      	movs	r3, #0
 8015b56:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8015b58:	2300      	movs	r3, #0
 8015b5a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015b60:	4b64      	ldr	r3, [pc, #400]	@ (8015cf4 <udp_input+0x21c>)
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8015b66:	e054      	b.n	8015c12 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b6a:	8a5b      	ldrh	r3, [r3, #18]
 8015b6c:	89fa      	ldrh	r2, [r7, #14]
 8015b6e:	429a      	cmp	r2, r3
 8015b70:	d14a      	bne.n	8015c08 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015b72:	7cfb      	ldrb	r3, [r7, #19]
 8015b74:	461a      	mov	r2, r3
 8015b76:	6839      	ldr	r1, [r7, #0]
 8015b78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015b7a:	f7ff ff49 	bl	8015a10 <udp_input_local_match>
 8015b7e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d041      	beq.n	8015c08 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b86:	7c1b      	ldrb	r3, [r3, #16]
 8015b88:	f003 0304 	and.w	r3, r3, #4
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d11d      	bne.n	8015bcc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015b90:	69fb      	ldr	r3, [r7, #28]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d102      	bne.n	8015b9c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b98:	61fb      	str	r3, [r7, #28]
 8015b9a:	e017      	b.n	8015bcc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015b9c:	7cfb      	ldrb	r3, [r7, #19]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d014      	beq.n	8015bcc <udp_input+0xf4>
 8015ba2:	4b53      	ldr	r3, [pc, #332]	@ (8015cf0 <udp_input+0x218>)
 8015ba4:	695b      	ldr	r3, [r3, #20]
 8015ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015baa:	d10f      	bne.n	8015bcc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015bac:	69fb      	ldr	r3, [r7, #28]
 8015bae:	681a      	ldr	r2, [r3, #0]
 8015bb0:	683b      	ldr	r3, [r7, #0]
 8015bb2:	3304      	adds	r3, #4
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	429a      	cmp	r2, r3
 8015bb8:	d008      	beq.n	8015bcc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bbc:	681a      	ldr	r2, [r3, #0]
 8015bbe:	683b      	ldr	r3, [r7, #0]
 8015bc0:	3304      	adds	r3, #4
 8015bc2:	681b      	ldr	r3, [r3, #0]
 8015bc4:	429a      	cmp	r2, r3
 8015bc6:	d101      	bne.n	8015bcc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bca:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bce:	8a9b      	ldrh	r3, [r3, #20]
 8015bd0:	8a3a      	ldrh	r2, [r7, #16]
 8015bd2:	429a      	cmp	r2, r3
 8015bd4:	d118      	bne.n	8015c08 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bd8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d005      	beq.n	8015bea <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8015bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015be0:	685a      	ldr	r2, [r3, #4]
 8015be2:	4b43      	ldr	r3, [pc, #268]	@ (8015cf0 <udp_input+0x218>)
 8015be4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015be6:	429a      	cmp	r2, r3
 8015be8:	d10e      	bne.n	8015c08 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015bea:	6a3b      	ldr	r3, [r7, #32]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d014      	beq.n	8015c1a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bf2:	68da      	ldr	r2, [r3, #12]
 8015bf4:	6a3b      	ldr	r3, [r7, #32]
 8015bf6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015bf8:	4b3e      	ldr	r3, [pc, #248]	@ (8015cf4 <udp_input+0x21c>)
 8015bfa:	681a      	ldr	r2, [r3, #0]
 8015bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bfe:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015c00:	4a3c      	ldr	r2, [pc, #240]	@ (8015cf4 <udp_input+0x21c>)
 8015c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c04:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015c06:	e008      	b.n	8015c1a <udp_input+0x142>
      }
    }

    prev = pcb;
 8015c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c0a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c0e:	68db      	ldr	r3, [r3, #12]
 8015c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8015c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d1a7      	bne.n	8015b68 <udp_input+0x90>
 8015c18:	e000      	b.n	8015c1c <udp_input+0x144>
        break;
 8015c1a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d101      	bne.n	8015c26 <udp_input+0x14e>
    pcb = uncon_pcb;
 8015c22:	69fb      	ldr	r3, [r7, #28]
 8015c24:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d002      	beq.n	8015c32 <udp_input+0x15a>
    for_us = 1;
 8015c2c:	2301      	movs	r3, #1
 8015c2e:	76fb      	strb	r3, [r7, #27]
 8015c30:	e00a      	b.n	8015c48 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015c32:	683b      	ldr	r3, [r7, #0]
 8015c34:	3304      	adds	r3, #4
 8015c36:	681a      	ldr	r2, [r3, #0]
 8015c38:	4b2d      	ldr	r3, [pc, #180]	@ (8015cf0 <udp_input+0x218>)
 8015c3a:	695b      	ldr	r3, [r3, #20]
 8015c3c:	429a      	cmp	r2, r3
 8015c3e:	bf0c      	ite	eq
 8015c40:	2301      	moveq	r3, #1
 8015c42:	2300      	movne	r3, #0
 8015c44:	b2db      	uxtb	r3, r3
 8015c46:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015c48:	7efb      	ldrb	r3, [r7, #27]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d041      	beq.n	8015cd2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8015c4e:	2108      	movs	r1, #8
 8015c50:	6878      	ldr	r0, [r7, #4]
 8015c52:	f7f9 f9e5 	bl	800f020 <pbuf_remove_header>
 8015c56:	4603      	mov	r3, r0
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d00a      	beq.n	8015c72 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015c5c:	4b20      	ldr	r3, [pc, #128]	@ (8015ce0 <udp_input+0x208>)
 8015c5e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8015c62:	4925      	ldr	r1, [pc, #148]	@ (8015cf8 <udp_input+0x220>)
 8015c64:	4820      	ldr	r0, [pc, #128]	@ (8015ce8 <udp_input+0x210>)
 8015c66:	f012 f965 	bl	8027f34 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015c6a:	6878      	ldr	r0, [r7, #4]
 8015c6c:	f7f9 fa90 	bl	800f190 <pbuf_free>
      goto end;
 8015c70:	e032      	b.n	8015cd8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8015c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d012      	beq.n	8015c9e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c7a:	699b      	ldr	r3, [r3, #24]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d00a      	beq.n	8015c96 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c82:	699c      	ldr	r4, [r3, #24]
 8015c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c86:	69d8      	ldr	r0, [r3, #28]
 8015c88:	8a3b      	ldrh	r3, [r7, #16]
 8015c8a:	9300      	str	r3, [sp, #0]
 8015c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8015cfc <udp_input+0x224>)
 8015c8e:	687a      	ldr	r2, [r7, #4]
 8015c90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015c92:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015c94:	e021      	b.n	8015cda <udp_input+0x202>
        pbuf_free(p);
 8015c96:	6878      	ldr	r0, [r7, #4]
 8015c98:	f7f9 fa7a 	bl	800f190 <pbuf_free>
        goto end;
 8015c9c:	e01c      	b.n	8015cd8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8015c9e:	7cfb      	ldrb	r3, [r7, #19]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d112      	bne.n	8015cca <udp_input+0x1f2>
 8015ca4:	4b12      	ldr	r3, [pc, #72]	@ (8015cf0 <udp_input+0x218>)
 8015ca6:	695b      	ldr	r3, [r3, #20]
 8015ca8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015cac:	2be0      	cmp	r3, #224	@ 0xe0
 8015cae:	d00c      	beq.n	8015cca <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8015cf0 <udp_input+0x218>)
 8015cb2:	899b      	ldrh	r3, [r3, #12]
 8015cb4:	3308      	adds	r3, #8
 8015cb6:	b29b      	uxth	r3, r3
 8015cb8:	b21b      	sxth	r3, r3
 8015cba:	4619      	mov	r1, r3
 8015cbc:	6878      	ldr	r0, [r7, #4]
 8015cbe:	f7f9 fa22 	bl	800f106 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015cc2:	2103      	movs	r1, #3
 8015cc4:	6878      	ldr	r0, [r7, #4]
 8015cc6:	f001 fbad 	bl	8017424 <icmp_dest_unreach>
      pbuf_free(p);
 8015cca:	6878      	ldr	r0, [r7, #4]
 8015ccc:	f7f9 fa60 	bl	800f190 <pbuf_free>
  return;
 8015cd0:	e003      	b.n	8015cda <udp_input+0x202>
    pbuf_free(p);
 8015cd2:	6878      	ldr	r0, [r7, #4]
 8015cd4:	f7f9 fa5c 	bl	800f190 <pbuf_free>
  return;
 8015cd8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015cda:	372c      	adds	r7, #44	@ 0x2c
 8015cdc:	46bd      	mov	sp, r7
 8015cde:	bd90      	pop	{r4, r7, pc}
 8015ce0:	0802c220 	.word	0x0802c220
 8015ce4:	0802c2c4 	.word	0x0802c2c4
 8015ce8:	0802c274 	.word	0x0802c274
 8015cec:	0802c2dc 	.word	0x0802c2dc
 8015cf0:	2000d094 	.word	0x2000d094
 8015cf4:	20010360 	.word	0x20010360
 8015cf8:	0802c2f8 	.word	0x0802c2f8
 8015cfc:	2000d0a4 	.word	0x2000d0a4

08015d00 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8015d00:	b580      	push	{r7, lr}
 8015d02:	b082      	sub	sp, #8
 8015d04:	af00      	add	r7, sp, #0
 8015d06:	6078      	str	r0, [r7, #4]
 8015d08:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d109      	bne.n	8015d24 <udp_send+0x24>
 8015d10:	4b11      	ldr	r3, [pc, #68]	@ (8015d58 <udp_send+0x58>)
 8015d12:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8015d16:	4911      	ldr	r1, [pc, #68]	@ (8015d5c <udp_send+0x5c>)
 8015d18:	4811      	ldr	r0, [pc, #68]	@ (8015d60 <udp_send+0x60>)
 8015d1a:	f012 f90b 	bl	8027f34 <iprintf>
 8015d1e:	f06f 030f 	mvn.w	r3, #15
 8015d22:	e015      	b.n	8015d50 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8015d24:	683b      	ldr	r3, [r7, #0]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d109      	bne.n	8015d3e <udp_send+0x3e>
 8015d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8015d58 <udp_send+0x58>)
 8015d2c:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8015d30:	490c      	ldr	r1, [pc, #48]	@ (8015d64 <udp_send+0x64>)
 8015d32:	480b      	ldr	r0, [pc, #44]	@ (8015d60 <udp_send+0x60>)
 8015d34:	f012 f8fe 	bl	8027f34 <iprintf>
 8015d38:	f06f 030f 	mvn.w	r3, #15
 8015d3c:	e008      	b.n	8015d50 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	1d1a      	adds	r2, r3, #4
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	8a9b      	ldrh	r3, [r3, #20]
 8015d46:	6839      	ldr	r1, [r7, #0]
 8015d48:	6878      	ldr	r0, [r7, #4]
 8015d4a:	f000 f80d 	bl	8015d68 <udp_sendto>
 8015d4e:	4603      	mov	r3, r0
}
 8015d50:	4618      	mov	r0, r3
 8015d52:	3708      	adds	r7, #8
 8015d54:	46bd      	mov	sp, r7
 8015d56:	bd80      	pop	{r7, pc}
 8015d58:	0802c220 	.word	0x0802c220
 8015d5c:	0802c314 	.word	0x0802c314
 8015d60:	0802c274 	.word	0x0802c274
 8015d64:	0802c32c 	.word	0x0802c32c

08015d68 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8015d68:	b580      	push	{r7, lr}
 8015d6a:	b088      	sub	sp, #32
 8015d6c:	af02      	add	r7, sp, #8
 8015d6e:	60f8      	str	r0, [r7, #12]
 8015d70:	60b9      	str	r1, [r7, #8]
 8015d72:	607a      	str	r2, [r7, #4]
 8015d74:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d109      	bne.n	8015d90 <udp_sendto+0x28>
 8015d7c:	4b23      	ldr	r3, [pc, #140]	@ (8015e0c <udp_sendto+0xa4>)
 8015d7e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8015d82:	4923      	ldr	r1, [pc, #140]	@ (8015e10 <udp_sendto+0xa8>)
 8015d84:	4823      	ldr	r0, [pc, #140]	@ (8015e14 <udp_sendto+0xac>)
 8015d86:	f012 f8d5 	bl	8027f34 <iprintf>
 8015d8a:	f06f 030f 	mvn.w	r3, #15
 8015d8e:	e038      	b.n	8015e02 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8015d90:	68bb      	ldr	r3, [r7, #8]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d109      	bne.n	8015daa <udp_sendto+0x42>
 8015d96:	4b1d      	ldr	r3, [pc, #116]	@ (8015e0c <udp_sendto+0xa4>)
 8015d98:	f240 2219 	movw	r2, #537	@ 0x219
 8015d9c:	491e      	ldr	r1, [pc, #120]	@ (8015e18 <udp_sendto+0xb0>)
 8015d9e:	481d      	ldr	r0, [pc, #116]	@ (8015e14 <udp_sendto+0xac>)
 8015da0:	f012 f8c8 	bl	8027f34 <iprintf>
 8015da4:	f06f 030f 	mvn.w	r3, #15
 8015da8:	e02b      	b.n	8015e02 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d109      	bne.n	8015dc4 <udp_sendto+0x5c>
 8015db0:	4b16      	ldr	r3, [pc, #88]	@ (8015e0c <udp_sendto+0xa4>)
 8015db2:	f240 221a 	movw	r2, #538	@ 0x21a
 8015db6:	4919      	ldr	r1, [pc, #100]	@ (8015e1c <udp_sendto+0xb4>)
 8015db8:	4816      	ldr	r0, [pc, #88]	@ (8015e14 <udp_sendto+0xac>)
 8015dba:	f012 f8bb 	bl	8027f34 <iprintf>
 8015dbe:	f06f 030f 	mvn.w	r3, #15
 8015dc2:	e01e      	b.n	8015e02 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	7a1b      	ldrb	r3, [r3, #8]
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d006      	beq.n	8015dda <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	7a1b      	ldrb	r3, [r3, #8]
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	f7f8 fde5 	bl	800e9a0 <netif_get_by_index>
 8015dd6:	6178      	str	r0, [r7, #20]
 8015dd8:	e003      	b.n	8015de2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8015dda:	6878      	ldr	r0, [r7, #4]
 8015ddc:	f001 fbac 	bl	8017538 <ip4_route>
 8015de0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8015de2:	697b      	ldr	r3, [r7, #20]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d102      	bne.n	8015dee <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8015de8:	f06f 0303 	mvn.w	r3, #3
 8015dec:	e009      	b.n	8015e02 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8015dee:	887a      	ldrh	r2, [r7, #2]
 8015df0:	697b      	ldr	r3, [r7, #20]
 8015df2:	9300      	str	r3, [sp, #0]
 8015df4:	4613      	mov	r3, r2
 8015df6:	687a      	ldr	r2, [r7, #4]
 8015df8:	68b9      	ldr	r1, [r7, #8]
 8015dfa:	68f8      	ldr	r0, [r7, #12]
 8015dfc:	f000 f810 	bl	8015e20 <udp_sendto_if>
 8015e00:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015e02:	4618      	mov	r0, r3
 8015e04:	3718      	adds	r7, #24
 8015e06:	46bd      	mov	sp, r7
 8015e08:	bd80      	pop	{r7, pc}
 8015e0a:	bf00      	nop
 8015e0c:	0802c220 	.word	0x0802c220
 8015e10:	0802c344 	.word	0x0802c344
 8015e14:	0802c274 	.word	0x0802c274
 8015e18:	0802c35c 	.word	0x0802c35c
 8015e1c:	0802c378 	.word	0x0802c378

08015e20 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b088      	sub	sp, #32
 8015e24:	af02      	add	r7, sp, #8
 8015e26:	60f8      	str	r0, [r7, #12]
 8015e28:	60b9      	str	r1, [r7, #8]
 8015e2a:	607a      	str	r2, [r7, #4]
 8015e2c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d109      	bne.n	8015e48 <udp_sendto_if+0x28>
 8015e34:	4b2e      	ldr	r3, [pc, #184]	@ (8015ef0 <udp_sendto_if+0xd0>)
 8015e36:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015e3a:	492e      	ldr	r1, [pc, #184]	@ (8015ef4 <udp_sendto_if+0xd4>)
 8015e3c:	482e      	ldr	r0, [pc, #184]	@ (8015ef8 <udp_sendto_if+0xd8>)
 8015e3e:	f012 f879 	bl	8027f34 <iprintf>
 8015e42:	f06f 030f 	mvn.w	r3, #15
 8015e46:	e04f      	b.n	8015ee8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8015e48:	68bb      	ldr	r3, [r7, #8]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d109      	bne.n	8015e62 <udp_sendto_if+0x42>
 8015e4e:	4b28      	ldr	r3, [pc, #160]	@ (8015ef0 <udp_sendto_if+0xd0>)
 8015e50:	f240 2281 	movw	r2, #641	@ 0x281
 8015e54:	4929      	ldr	r1, [pc, #164]	@ (8015efc <udp_sendto_if+0xdc>)
 8015e56:	4828      	ldr	r0, [pc, #160]	@ (8015ef8 <udp_sendto_if+0xd8>)
 8015e58:	f012 f86c 	bl	8027f34 <iprintf>
 8015e5c:	f06f 030f 	mvn.w	r3, #15
 8015e60:	e042      	b.n	8015ee8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d109      	bne.n	8015e7c <udp_sendto_if+0x5c>
 8015e68:	4b21      	ldr	r3, [pc, #132]	@ (8015ef0 <udp_sendto_if+0xd0>)
 8015e6a:	f240 2282 	movw	r2, #642	@ 0x282
 8015e6e:	4924      	ldr	r1, [pc, #144]	@ (8015f00 <udp_sendto_if+0xe0>)
 8015e70:	4821      	ldr	r0, [pc, #132]	@ (8015ef8 <udp_sendto_if+0xd8>)
 8015e72:	f012 f85f 	bl	8027f34 <iprintf>
 8015e76:	f06f 030f 	mvn.w	r3, #15
 8015e7a:	e035      	b.n	8015ee8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8015e7c:	6a3b      	ldr	r3, [r7, #32]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d109      	bne.n	8015e96 <udp_sendto_if+0x76>
 8015e82:	4b1b      	ldr	r3, [pc, #108]	@ (8015ef0 <udp_sendto_if+0xd0>)
 8015e84:	f240 2283 	movw	r2, #643	@ 0x283
 8015e88:	491e      	ldr	r1, [pc, #120]	@ (8015f04 <udp_sendto_if+0xe4>)
 8015e8a:	481b      	ldr	r0, [pc, #108]	@ (8015ef8 <udp_sendto_if+0xd8>)
 8015e8c:	f012 f852 	bl	8027f34 <iprintf>
 8015e90:	f06f 030f 	mvn.w	r3, #15
 8015e94:	e028      	b.n	8015ee8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d009      	beq.n	8015eb0 <udp_sendto_if+0x90>
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d005      	beq.n	8015eb0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015eac:	2be0      	cmp	r3, #224	@ 0xe0
 8015eae:	d103      	bne.n	8015eb8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8015eb0:	6a3b      	ldr	r3, [r7, #32]
 8015eb2:	3304      	adds	r3, #4
 8015eb4:	617b      	str	r3, [r7, #20]
 8015eb6:	e00b      	b.n	8015ed0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	681a      	ldr	r2, [r3, #0]
 8015ebc:	6a3b      	ldr	r3, [r7, #32]
 8015ebe:	3304      	adds	r3, #4
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	429a      	cmp	r2, r3
 8015ec4:	d002      	beq.n	8015ecc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8015ec6:	f06f 0303 	mvn.w	r3, #3
 8015eca:	e00d      	b.n	8015ee8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8015ed0:	887a      	ldrh	r2, [r7, #2]
 8015ed2:	697b      	ldr	r3, [r7, #20]
 8015ed4:	9301      	str	r3, [sp, #4]
 8015ed6:	6a3b      	ldr	r3, [r7, #32]
 8015ed8:	9300      	str	r3, [sp, #0]
 8015eda:	4613      	mov	r3, r2
 8015edc:	687a      	ldr	r2, [r7, #4]
 8015ede:	68b9      	ldr	r1, [r7, #8]
 8015ee0:	68f8      	ldr	r0, [r7, #12]
 8015ee2:	f000 f811 	bl	8015f08 <udp_sendto_if_src>
 8015ee6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015ee8:	4618      	mov	r0, r3
 8015eea:	3718      	adds	r7, #24
 8015eec:	46bd      	mov	sp, r7
 8015eee:	bd80      	pop	{r7, pc}
 8015ef0:	0802c220 	.word	0x0802c220
 8015ef4:	0802c394 	.word	0x0802c394
 8015ef8:	0802c274 	.word	0x0802c274
 8015efc:	0802c3b0 	.word	0x0802c3b0
 8015f00:	0802c3cc 	.word	0x0802c3cc
 8015f04:	0802c3ec 	.word	0x0802c3ec

08015f08 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b08c      	sub	sp, #48	@ 0x30
 8015f0c:	af04      	add	r7, sp, #16
 8015f0e:	60f8      	str	r0, [r7, #12]
 8015f10:	60b9      	str	r1, [r7, #8]
 8015f12:	607a      	str	r2, [r7, #4]
 8015f14:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d109      	bne.n	8015f30 <udp_sendto_if_src+0x28>
 8015f1c:	4b65      	ldr	r3, [pc, #404]	@ (80160b4 <udp_sendto_if_src+0x1ac>)
 8015f1e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8015f22:	4965      	ldr	r1, [pc, #404]	@ (80160b8 <udp_sendto_if_src+0x1b0>)
 8015f24:	4865      	ldr	r0, [pc, #404]	@ (80160bc <udp_sendto_if_src+0x1b4>)
 8015f26:	f012 f805 	bl	8027f34 <iprintf>
 8015f2a:	f06f 030f 	mvn.w	r3, #15
 8015f2e:	e0bc      	b.n	80160aa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8015f30:	68bb      	ldr	r3, [r7, #8]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d109      	bne.n	8015f4a <udp_sendto_if_src+0x42>
 8015f36:	4b5f      	ldr	r3, [pc, #380]	@ (80160b4 <udp_sendto_if_src+0x1ac>)
 8015f38:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8015f3c:	4960      	ldr	r1, [pc, #384]	@ (80160c0 <udp_sendto_if_src+0x1b8>)
 8015f3e:	485f      	ldr	r0, [pc, #380]	@ (80160bc <udp_sendto_if_src+0x1b4>)
 8015f40:	f011 fff8 	bl	8027f34 <iprintf>
 8015f44:	f06f 030f 	mvn.w	r3, #15
 8015f48:	e0af      	b.n	80160aa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d109      	bne.n	8015f64 <udp_sendto_if_src+0x5c>
 8015f50:	4b58      	ldr	r3, [pc, #352]	@ (80160b4 <udp_sendto_if_src+0x1ac>)
 8015f52:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8015f56:	495b      	ldr	r1, [pc, #364]	@ (80160c4 <udp_sendto_if_src+0x1bc>)
 8015f58:	4858      	ldr	r0, [pc, #352]	@ (80160bc <udp_sendto_if_src+0x1b4>)
 8015f5a:	f011 ffeb 	bl	8027f34 <iprintf>
 8015f5e:	f06f 030f 	mvn.w	r3, #15
 8015f62:	e0a2      	b.n	80160aa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8015f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d109      	bne.n	8015f7e <udp_sendto_if_src+0x76>
 8015f6a:	4b52      	ldr	r3, [pc, #328]	@ (80160b4 <udp_sendto_if_src+0x1ac>)
 8015f6c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8015f70:	4955      	ldr	r1, [pc, #340]	@ (80160c8 <udp_sendto_if_src+0x1c0>)
 8015f72:	4852      	ldr	r0, [pc, #328]	@ (80160bc <udp_sendto_if_src+0x1b4>)
 8015f74:	f011 ffde 	bl	8027f34 <iprintf>
 8015f78:	f06f 030f 	mvn.w	r3, #15
 8015f7c:	e095      	b.n	80160aa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8015f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d109      	bne.n	8015f98 <udp_sendto_if_src+0x90>
 8015f84:	4b4b      	ldr	r3, [pc, #300]	@ (80160b4 <udp_sendto_if_src+0x1ac>)
 8015f86:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8015f8a:	4950      	ldr	r1, [pc, #320]	@ (80160cc <udp_sendto_if_src+0x1c4>)
 8015f8c:	484b      	ldr	r0, [pc, #300]	@ (80160bc <udp_sendto_if_src+0x1b4>)
 8015f8e:	f011 ffd1 	bl	8027f34 <iprintf>
 8015f92:	f06f 030f 	mvn.w	r3, #15
 8015f96:	e088      	b.n	80160aa <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	8a5b      	ldrh	r3, [r3, #18]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d10f      	bne.n	8015fc0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015fa0:	68f9      	ldr	r1, [r7, #12]
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	8a5b      	ldrh	r3, [r3, #18]
 8015fa6:	461a      	mov	r2, r3
 8015fa8:	68f8      	ldr	r0, [r7, #12]
 8015faa:	f000 f893 	bl	80160d4 <udp_bind>
 8015fae:	4603      	mov	r3, r0
 8015fb0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8015fb2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d002      	beq.n	8015fc0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8015fba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015fbe:	e074      	b.n	80160aa <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8015fc0:	68bb      	ldr	r3, [r7, #8]
 8015fc2:	891b      	ldrh	r3, [r3, #8]
 8015fc4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8015fc8:	4293      	cmp	r3, r2
 8015fca:	d902      	bls.n	8015fd2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8015fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8015fd0:	e06b      	b.n	80160aa <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8015fd2:	2108      	movs	r1, #8
 8015fd4:	68b8      	ldr	r0, [r7, #8]
 8015fd6:	f7f9 f813 	bl	800f000 <pbuf_add_header>
 8015fda:	4603      	mov	r3, r0
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d015      	beq.n	801600c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8015fe0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015fe4:	2108      	movs	r1, #8
 8015fe6:	2022      	movs	r0, #34	@ 0x22
 8015fe8:	f7f8 fdbc 	bl	800eb64 <pbuf_alloc>
 8015fec:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8015fee:	69fb      	ldr	r3, [r7, #28]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d102      	bne.n	8015ffa <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8015ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8015ff8:	e057      	b.n	80160aa <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8015ffa:	68bb      	ldr	r3, [r7, #8]
 8015ffc:	891b      	ldrh	r3, [r3, #8]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d006      	beq.n	8016010 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8016002:	68b9      	ldr	r1, [r7, #8]
 8016004:	69f8      	ldr	r0, [r7, #28]
 8016006:	f7f9 f9e7 	bl	800f3d8 <pbuf_chain>
 801600a:	e001      	b.n	8016010 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801600c:	68bb      	ldr	r3, [r7, #8]
 801600e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8016010:	69fb      	ldr	r3, [r7, #28]
 8016012:	895b      	ldrh	r3, [r3, #10]
 8016014:	2b07      	cmp	r3, #7
 8016016:	d806      	bhi.n	8016026 <udp_sendto_if_src+0x11e>
 8016018:	4b26      	ldr	r3, [pc, #152]	@ (80160b4 <udp_sendto_if_src+0x1ac>)
 801601a:	f240 320d 	movw	r2, #781	@ 0x30d
 801601e:	492c      	ldr	r1, [pc, #176]	@ (80160d0 <udp_sendto_if_src+0x1c8>)
 8016020:	4826      	ldr	r0, [pc, #152]	@ (80160bc <udp_sendto_if_src+0x1b4>)
 8016022:	f011 ff87 	bl	8027f34 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8016026:	69fb      	ldr	r3, [r7, #28]
 8016028:	685b      	ldr	r3, [r3, #4]
 801602a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	8a5b      	ldrh	r3, [r3, #18]
 8016030:	4618      	mov	r0, r3
 8016032:	f7f7 fc55 	bl	800d8e0 <lwip_htons>
 8016036:	4603      	mov	r3, r0
 8016038:	461a      	mov	r2, r3
 801603a:	697b      	ldr	r3, [r7, #20]
 801603c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801603e:	887b      	ldrh	r3, [r7, #2]
 8016040:	4618      	mov	r0, r3
 8016042:	f7f7 fc4d 	bl	800d8e0 <lwip_htons>
 8016046:	4603      	mov	r3, r0
 8016048:	461a      	mov	r2, r3
 801604a:	697b      	ldr	r3, [r7, #20]
 801604c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801604e:	697b      	ldr	r3, [r7, #20]
 8016050:	2200      	movs	r2, #0
 8016052:	719a      	strb	r2, [r3, #6]
 8016054:	2200      	movs	r2, #0
 8016056:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8016058:	69fb      	ldr	r3, [r7, #28]
 801605a:	891b      	ldrh	r3, [r3, #8]
 801605c:	4618      	mov	r0, r3
 801605e:	f7f7 fc3f 	bl	800d8e0 <lwip_htons>
 8016062:	4603      	mov	r3, r0
 8016064:	461a      	mov	r2, r3
 8016066:	697b      	ldr	r3, [r7, #20]
 8016068:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801606a:	2311      	movs	r3, #17
 801606c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	7adb      	ldrb	r3, [r3, #11]
 8016072:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	7a9b      	ldrb	r3, [r3, #10]
 8016078:	7cb9      	ldrb	r1, [r7, #18]
 801607a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801607c:	9202      	str	r2, [sp, #8]
 801607e:	7cfa      	ldrb	r2, [r7, #19]
 8016080:	9201      	str	r2, [sp, #4]
 8016082:	9300      	str	r3, [sp, #0]
 8016084:	460b      	mov	r3, r1
 8016086:	687a      	ldr	r2, [r7, #4]
 8016088:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801608a:	69f8      	ldr	r0, [r7, #28]
 801608c:	f001 fc3c 	bl	8017908 <ip4_output_if_src>
 8016090:	4603      	mov	r3, r0
 8016092:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8016094:	69fa      	ldr	r2, [r7, #28]
 8016096:	68bb      	ldr	r3, [r7, #8]
 8016098:	429a      	cmp	r2, r3
 801609a:	d004      	beq.n	80160a6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801609c:	69f8      	ldr	r0, [r7, #28]
 801609e:	f7f9 f877 	bl	800f190 <pbuf_free>
    q = NULL;
 80160a2:	2300      	movs	r3, #0
 80160a4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80160a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80160aa:	4618      	mov	r0, r3
 80160ac:	3720      	adds	r7, #32
 80160ae:	46bd      	mov	sp, r7
 80160b0:	bd80      	pop	{r7, pc}
 80160b2:	bf00      	nop
 80160b4:	0802c220 	.word	0x0802c220
 80160b8:	0802c40c 	.word	0x0802c40c
 80160bc:	0802c274 	.word	0x0802c274
 80160c0:	0802c42c 	.word	0x0802c42c
 80160c4:	0802c44c 	.word	0x0802c44c
 80160c8:	0802c470 	.word	0x0802c470
 80160cc:	0802c494 	.word	0x0802c494
 80160d0:	0802c4b8 	.word	0x0802c4b8

080160d4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80160d4:	b580      	push	{r7, lr}
 80160d6:	b086      	sub	sp, #24
 80160d8:	af00      	add	r7, sp, #0
 80160da:	60f8      	str	r0, [r7, #12]
 80160dc:	60b9      	str	r1, [r7, #8]
 80160de:	4613      	mov	r3, r2
 80160e0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80160e2:	68bb      	ldr	r3, [r7, #8]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d101      	bne.n	80160ec <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80160e8:	4b39      	ldr	r3, [pc, #228]	@ (80161d0 <udp_bind+0xfc>)
 80160ea:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d109      	bne.n	8016106 <udp_bind+0x32>
 80160f2:	4b38      	ldr	r3, [pc, #224]	@ (80161d4 <udp_bind+0x100>)
 80160f4:	f240 32b7 	movw	r2, #951	@ 0x3b7
 80160f8:	4937      	ldr	r1, [pc, #220]	@ (80161d8 <udp_bind+0x104>)
 80160fa:	4838      	ldr	r0, [pc, #224]	@ (80161dc <udp_bind+0x108>)
 80160fc:	f011 ff1a 	bl	8027f34 <iprintf>
 8016100:	f06f 030f 	mvn.w	r3, #15
 8016104:	e060      	b.n	80161c8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8016106:	2300      	movs	r3, #0
 8016108:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801610a:	4b35      	ldr	r3, [pc, #212]	@ (80161e0 <udp_bind+0x10c>)
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	617b      	str	r3, [r7, #20]
 8016110:	e009      	b.n	8016126 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8016112:	68fa      	ldr	r2, [r7, #12]
 8016114:	697b      	ldr	r3, [r7, #20]
 8016116:	429a      	cmp	r2, r3
 8016118:	d102      	bne.n	8016120 <udp_bind+0x4c>
      rebind = 1;
 801611a:	2301      	movs	r3, #1
 801611c:	74fb      	strb	r3, [r7, #19]
      break;
 801611e:	e005      	b.n	801612c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016120:	697b      	ldr	r3, [r7, #20]
 8016122:	68db      	ldr	r3, [r3, #12]
 8016124:	617b      	str	r3, [r7, #20]
 8016126:	697b      	ldr	r3, [r7, #20]
 8016128:	2b00      	cmp	r3, #0
 801612a:	d1f2      	bne.n	8016112 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801612c:	88fb      	ldrh	r3, [r7, #6]
 801612e:	2b00      	cmp	r3, #0
 8016130:	d109      	bne.n	8016146 <udp_bind+0x72>
    port = udp_new_port();
 8016132:	f7ff fc35 	bl	80159a0 <udp_new_port>
 8016136:	4603      	mov	r3, r0
 8016138:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801613a:	88fb      	ldrh	r3, [r7, #6]
 801613c:	2b00      	cmp	r3, #0
 801613e:	d12c      	bne.n	801619a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8016140:	f06f 0307 	mvn.w	r3, #7
 8016144:	e040      	b.n	80161c8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016146:	4b26      	ldr	r3, [pc, #152]	@ (80161e0 <udp_bind+0x10c>)
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	617b      	str	r3, [r7, #20]
 801614c:	e022      	b.n	8016194 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801614e:	68fa      	ldr	r2, [r7, #12]
 8016150:	697b      	ldr	r3, [r7, #20]
 8016152:	429a      	cmp	r2, r3
 8016154:	d01b      	beq.n	801618e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8016156:	697b      	ldr	r3, [r7, #20]
 8016158:	8a5b      	ldrh	r3, [r3, #18]
 801615a:	88fa      	ldrh	r2, [r7, #6]
 801615c:	429a      	cmp	r2, r3
 801615e:	d116      	bne.n	801618e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016160:	697b      	ldr	r3, [r7, #20]
 8016162:	681a      	ldr	r2, [r3, #0]
 8016164:	68bb      	ldr	r3, [r7, #8]
 8016166:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8016168:	429a      	cmp	r2, r3
 801616a:	d00d      	beq.n	8016188 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801616c:	68bb      	ldr	r3, [r7, #8]
 801616e:	2b00      	cmp	r3, #0
 8016170:	d00a      	beq.n	8016188 <udp_bind+0xb4>
 8016172:	68bb      	ldr	r3, [r7, #8]
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d006      	beq.n	8016188 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801617a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801617c:	2b00      	cmp	r3, #0
 801617e:	d003      	beq.n	8016188 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8016180:	697b      	ldr	r3, [r7, #20]
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d102      	bne.n	801618e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8016188:	f06f 0307 	mvn.w	r3, #7
 801618c:	e01c      	b.n	80161c8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801618e:	697b      	ldr	r3, [r7, #20]
 8016190:	68db      	ldr	r3, [r3, #12]
 8016192:	617b      	str	r3, [r7, #20]
 8016194:	697b      	ldr	r3, [r7, #20]
 8016196:	2b00      	cmp	r3, #0
 8016198:	d1d9      	bne.n	801614e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801619a:	68bb      	ldr	r3, [r7, #8]
 801619c:	2b00      	cmp	r3, #0
 801619e:	d002      	beq.n	80161a6 <udp_bind+0xd2>
 80161a0:	68bb      	ldr	r3, [r7, #8]
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	e000      	b.n	80161a8 <udp_bind+0xd4>
 80161a6:	2300      	movs	r3, #0
 80161a8:	68fa      	ldr	r2, [r7, #12]
 80161aa:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	88fa      	ldrh	r2, [r7, #6]
 80161b0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80161b2:	7cfb      	ldrb	r3, [r7, #19]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d106      	bne.n	80161c6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80161b8:	4b09      	ldr	r3, [pc, #36]	@ (80161e0 <udp_bind+0x10c>)
 80161ba:	681a      	ldr	r2, [r3, #0]
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80161c0:	4a07      	ldr	r2, [pc, #28]	@ (80161e0 <udp_bind+0x10c>)
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80161c6:	2300      	movs	r3, #0
}
 80161c8:	4618      	mov	r0, r3
 80161ca:	3718      	adds	r7, #24
 80161cc:	46bd      	mov	sp, r7
 80161ce:	bd80      	pop	{r7, pc}
 80161d0:	0802ce54 	.word	0x0802ce54
 80161d4:	0802c220 	.word	0x0802c220
 80161d8:	0802c4e8 	.word	0x0802c4e8
 80161dc:	0802c274 	.word	0x0802c274
 80161e0:	20010360 	.word	0x20010360

080161e4 <udp_bind_netif>:
 *
 * @see udp_disconnect()
 */
void
udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)
{
 80161e4:	b480      	push	{r7}
 80161e6:	b083      	sub	sp, #12
 80161e8:	af00      	add	r7, sp, #0
 80161ea:	6078      	str	r0, [r7, #4]
 80161ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif != NULL) {
 80161ee:	683b      	ldr	r3, [r7, #0]
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d007      	beq.n	8016204 <udp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 80161f4:	683b      	ldr	r3, [r7, #0]
 80161f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80161fa:	3301      	adds	r3, #1
 80161fc:	b2da      	uxtb	r2, r3
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 8016202:	e002      	b.n	801620a <udp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	2200      	movs	r2, #0
 8016208:	721a      	strb	r2, [r3, #8]
}
 801620a:	bf00      	nop
 801620c:	370c      	adds	r7, #12
 801620e:	46bd      	mov	sp, r7
 8016210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016214:	4770      	bx	lr
	...

08016218 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8016218:	b580      	push	{r7, lr}
 801621a:	b084      	sub	sp, #16
 801621c:	af00      	add	r7, sp, #0
 801621e:	60f8      	str	r0, [r7, #12]
 8016220:	60b9      	str	r1, [r7, #8]
 8016222:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d107      	bne.n	801623a <udp_recv+0x22>
 801622a:	4b08      	ldr	r3, [pc, #32]	@ (801624c <udp_recv+0x34>)
 801622c:	f240 428a 	movw	r2, #1162	@ 0x48a
 8016230:	4907      	ldr	r1, [pc, #28]	@ (8016250 <udp_recv+0x38>)
 8016232:	4808      	ldr	r0, [pc, #32]	@ (8016254 <udp_recv+0x3c>)
 8016234:	f011 fe7e 	bl	8027f34 <iprintf>
 8016238:	e005      	b.n	8016246 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	68ba      	ldr	r2, [r7, #8]
 801623e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	687a      	ldr	r2, [r7, #4]
 8016244:	61da      	str	r2, [r3, #28]
}
 8016246:	3710      	adds	r7, #16
 8016248:	46bd      	mov	sp, r7
 801624a:	bd80      	pop	{r7, pc}
 801624c:	0802c220 	.word	0x0802c220
 8016250:	0802c554 	.word	0x0802c554
 8016254:	0802c274 	.word	0x0802c274

08016258 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8016258:	b580      	push	{r7, lr}
 801625a:	b084      	sub	sp, #16
 801625c:	af00      	add	r7, sp, #0
 801625e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	2b00      	cmp	r3, #0
 8016264:	d107      	bne.n	8016276 <udp_remove+0x1e>
 8016266:	4b19      	ldr	r3, [pc, #100]	@ (80162cc <udp_remove+0x74>)
 8016268:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801626c:	4918      	ldr	r1, [pc, #96]	@ (80162d0 <udp_remove+0x78>)
 801626e:	4819      	ldr	r0, [pc, #100]	@ (80162d4 <udp_remove+0x7c>)
 8016270:	f011 fe60 	bl	8027f34 <iprintf>
 8016274:	e026      	b.n	80162c4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8016276:	4b18      	ldr	r3, [pc, #96]	@ (80162d8 <udp_remove+0x80>)
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	687a      	ldr	r2, [r7, #4]
 801627c:	429a      	cmp	r2, r3
 801627e:	d105      	bne.n	801628c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8016280:	4b15      	ldr	r3, [pc, #84]	@ (80162d8 <udp_remove+0x80>)
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	68db      	ldr	r3, [r3, #12]
 8016286:	4a14      	ldr	r2, [pc, #80]	@ (80162d8 <udp_remove+0x80>)
 8016288:	6013      	str	r3, [r2, #0]
 801628a:	e017      	b.n	80162bc <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801628c:	4b12      	ldr	r3, [pc, #72]	@ (80162d8 <udp_remove+0x80>)
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	60fb      	str	r3, [r7, #12]
 8016292:	e010      	b.n	80162b6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	68db      	ldr	r3, [r3, #12]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d009      	beq.n	80162b0 <udp_remove+0x58>
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	68db      	ldr	r3, [r3, #12]
 80162a0:	687a      	ldr	r2, [r7, #4]
 80162a2:	429a      	cmp	r2, r3
 80162a4:	d104      	bne.n	80162b0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	68da      	ldr	r2, [r3, #12]
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	60da      	str	r2, [r3, #12]
        break;
 80162ae:	e005      	b.n	80162bc <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	68db      	ldr	r3, [r3, #12]
 80162b4:	60fb      	str	r3, [r7, #12]
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d1eb      	bne.n	8016294 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80162bc:	6879      	ldr	r1, [r7, #4]
 80162be:	2000      	movs	r0, #0
 80162c0:	f7f8 f858 	bl	800e374 <memp_free>
}
 80162c4:	3710      	adds	r7, #16
 80162c6:	46bd      	mov	sp, r7
 80162c8:	bd80      	pop	{r7, pc}
 80162ca:	bf00      	nop
 80162cc:	0802c220 	.word	0x0802c220
 80162d0:	0802c56c 	.word	0x0802c56c
 80162d4:	0802c274 	.word	0x0802c274
 80162d8:	20010360 	.word	0x20010360

080162dc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80162dc:	b580      	push	{r7, lr}
 80162de:	b082      	sub	sp, #8
 80162e0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80162e2:	2000      	movs	r0, #0
 80162e4:	f7f7 ffd0 	bl	800e288 <memp_malloc>
 80162e8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d007      	beq.n	8016300 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80162f0:	2220      	movs	r2, #32
 80162f2:	2100      	movs	r1, #0
 80162f4:	6878      	ldr	r0, [r7, #4]
 80162f6:	f011 ffa3 	bl	8028240 <memset>
    pcb->ttl = UDP_TTL;
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	22ff      	movs	r2, #255	@ 0xff
 80162fe:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8016300:	687b      	ldr	r3, [r7, #4]
}
 8016302:	4618      	mov	r0, r3
 8016304:	3708      	adds	r7, #8
 8016306:	46bd      	mov	sp, r7
 8016308:	bd80      	pop	{r7, pc}

0801630a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801630a:	b580      	push	{r7, lr}
 801630c:	b084      	sub	sp, #16
 801630e:	af00      	add	r7, sp, #0
 8016310:	4603      	mov	r3, r0
 8016312:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8016314:	f7ff ffe2 	bl	80162dc <udp_new>
 8016318:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801631a:	68fb      	ldr	r3, [r7, #12]
}
 801631c:	4618      	mov	r0, r3
 801631e:	3710      	adds	r7, #16
 8016320:	46bd      	mov	sp, r7
 8016322:	bd80      	pop	{r7, pc}

08016324 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016324:	b480      	push	{r7}
 8016326:	b085      	sub	sp, #20
 8016328:	af00      	add	r7, sp, #0
 801632a:	6078      	str	r0, [r7, #4]
 801632c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	2b00      	cmp	r3, #0
 8016332:	d01e      	beq.n	8016372 <udp_netif_ip_addr_changed+0x4e>
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d01a      	beq.n	8016372 <udp_netif_ip_addr_changed+0x4e>
 801633c:	683b      	ldr	r3, [r7, #0]
 801633e:	2b00      	cmp	r3, #0
 8016340:	d017      	beq.n	8016372 <udp_netif_ip_addr_changed+0x4e>
 8016342:	683b      	ldr	r3, [r7, #0]
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	2b00      	cmp	r3, #0
 8016348:	d013      	beq.n	8016372 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801634a:	4b0d      	ldr	r3, [pc, #52]	@ (8016380 <udp_netif_ip_addr_changed+0x5c>)
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	60fb      	str	r3, [r7, #12]
 8016350:	e00c      	b.n	801636c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	681a      	ldr	r2, [r3, #0]
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	429a      	cmp	r2, r3
 801635c:	d103      	bne.n	8016366 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801635e:	683b      	ldr	r3, [r7, #0]
 8016360:	681a      	ldr	r2, [r3, #0]
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	68db      	ldr	r3, [r3, #12]
 801636a:	60fb      	str	r3, [r7, #12]
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d1ef      	bne.n	8016352 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016372:	bf00      	nop
 8016374:	3714      	adds	r7, #20
 8016376:	46bd      	mov	sp, r7
 8016378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801637c:	4770      	bx	lr
 801637e:	bf00      	nop
 8016380:	20010360 	.word	0x20010360

08016384 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016384:	b580      	push	{r7, lr}
 8016386:	b082      	sub	sp, #8
 8016388:	af00      	add	r7, sp, #0
 801638a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801638c:	4915      	ldr	r1, [pc, #84]	@ (80163e4 <etharp_free_entry+0x60>)
 801638e:	687a      	ldr	r2, [r7, #4]
 8016390:	4613      	mov	r3, r2
 8016392:	005b      	lsls	r3, r3, #1
 8016394:	4413      	add	r3, r2
 8016396:	00db      	lsls	r3, r3, #3
 8016398:	440b      	add	r3, r1
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	2b00      	cmp	r3, #0
 801639e:	d013      	beq.n	80163c8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80163a0:	4910      	ldr	r1, [pc, #64]	@ (80163e4 <etharp_free_entry+0x60>)
 80163a2:	687a      	ldr	r2, [r7, #4]
 80163a4:	4613      	mov	r3, r2
 80163a6:	005b      	lsls	r3, r3, #1
 80163a8:	4413      	add	r3, r2
 80163aa:	00db      	lsls	r3, r3, #3
 80163ac:	440b      	add	r3, r1
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	4618      	mov	r0, r3
 80163b2:	f7f8 feed 	bl	800f190 <pbuf_free>
    arp_table[i].q = NULL;
 80163b6:	490b      	ldr	r1, [pc, #44]	@ (80163e4 <etharp_free_entry+0x60>)
 80163b8:	687a      	ldr	r2, [r7, #4]
 80163ba:	4613      	mov	r3, r2
 80163bc:	005b      	lsls	r3, r3, #1
 80163be:	4413      	add	r3, r2
 80163c0:	00db      	lsls	r3, r3, #3
 80163c2:	440b      	add	r3, r1
 80163c4:	2200      	movs	r2, #0
 80163c6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80163c8:	4906      	ldr	r1, [pc, #24]	@ (80163e4 <etharp_free_entry+0x60>)
 80163ca:	687a      	ldr	r2, [r7, #4]
 80163cc:	4613      	mov	r3, r2
 80163ce:	005b      	lsls	r3, r3, #1
 80163d0:	4413      	add	r3, r2
 80163d2:	00db      	lsls	r3, r3, #3
 80163d4:	440b      	add	r3, r1
 80163d6:	3314      	adds	r3, #20
 80163d8:	2200      	movs	r2, #0
 80163da:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80163dc:	bf00      	nop
 80163de:	3708      	adds	r7, #8
 80163e0:	46bd      	mov	sp, r7
 80163e2:	bd80      	pop	{r7, pc}
 80163e4:	20010364 	.word	0x20010364

080163e8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80163e8:	b580      	push	{r7, lr}
 80163ea:	b082      	sub	sp, #8
 80163ec:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80163ee:	2300      	movs	r3, #0
 80163f0:	607b      	str	r3, [r7, #4]
 80163f2:	e096      	b.n	8016522 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80163f4:	494f      	ldr	r1, [pc, #316]	@ (8016534 <etharp_tmr+0x14c>)
 80163f6:	687a      	ldr	r2, [r7, #4]
 80163f8:	4613      	mov	r3, r2
 80163fa:	005b      	lsls	r3, r3, #1
 80163fc:	4413      	add	r3, r2
 80163fe:	00db      	lsls	r3, r3, #3
 8016400:	440b      	add	r3, r1
 8016402:	3314      	adds	r3, #20
 8016404:	781b      	ldrb	r3, [r3, #0]
 8016406:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016408:	78fb      	ldrb	r3, [r7, #3]
 801640a:	2b00      	cmp	r3, #0
 801640c:	f000 8086 	beq.w	801651c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016410:	4948      	ldr	r1, [pc, #288]	@ (8016534 <etharp_tmr+0x14c>)
 8016412:	687a      	ldr	r2, [r7, #4]
 8016414:	4613      	mov	r3, r2
 8016416:	005b      	lsls	r3, r3, #1
 8016418:	4413      	add	r3, r2
 801641a:	00db      	lsls	r3, r3, #3
 801641c:	440b      	add	r3, r1
 801641e:	3312      	adds	r3, #18
 8016420:	881b      	ldrh	r3, [r3, #0]
 8016422:	3301      	adds	r3, #1
 8016424:	b298      	uxth	r0, r3
 8016426:	4943      	ldr	r1, [pc, #268]	@ (8016534 <etharp_tmr+0x14c>)
 8016428:	687a      	ldr	r2, [r7, #4]
 801642a:	4613      	mov	r3, r2
 801642c:	005b      	lsls	r3, r3, #1
 801642e:	4413      	add	r3, r2
 8016430:	00db      	lsls	r3, r3, #3
 8016432:	440b      	add	r3, r1
 8016434:	3312      	adds	r3, #18
 8016436:	4602      	mov	r2, r0
 8016438:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801643a:	493e      	ldr	r1, [pc, #248]	@ (8016534 <etharp_tmr+0x14c>)
 801643c:	687a      	ldr	r2, [r7, #4]
 801643e:	4613      	mov	r3, r2
 8016440:	005b      	lsls	r3, r3, #1
 8016442:	4413      	add	r3, r2
 8016444:	00db      	lsls	r3, r3, #3
 8016446:	440b      	add	r3, r1
 8016448:	3312      	adds	r3, #18
 801644a:	881b      	ldrh	r3, [r3, #0]
 801644c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8016450:	d215      	bcs.n	801647e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016452:	4938      	ldr	r1, [pc, #224]	@ (8016534 <etharp_tmr+0x14c>)
 8016454:	687a      	ldr	r2, [r7, #4]
 8016456:	4613      	mov	r3, r2
 8016458:	005b      	lsls	r3, r3, #1
 801645a:	4413      	add	r3, r2
 801645c:	00db      	lsls	r3, r3, #3
 801645e:	440b      	add	r3, r1
 8016460:	3314      	adds	r3, #20
 8016462:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016464:	2b01      	cmp	r3, #1
 8016466:	d10e      	bne.n	8016486 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016468:	4932      	ldr	r1, [pc, #200]	@ (8016534 <etharp_tmr+0x14c>)
 801646a:	687a      	ldr	r2, [r7, #4]
 801646c:	4613      	mov	r3, r2
 801646e:	005b      	lsls	r3, r3, #1
 8016470:	4413      	add	r3, r2
 8016472:	00db      	lsls	r3, r3, #3
 8016474:	440b      	add	r3, r1
 8016476:	3312      	adds	r3, #18
 8016478:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801647a:	2b04      	cmp	r3, #4
 801647c:	d903      	bls.n	8016486 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801647e:	6878      	ldr	r0, [r7, #4]
 8016480:	f7ff ff80 	bl	8016384 <etharp_free_entry>
 8016484:	e04a      	b.n	801651c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016486:	492b      	ldr	r1, [pc, #172]	@ (8016534 <etharp_tmr+0x14c>)
 8016488:	687a      	ldr	r2, [r7, #4]
 801648a:	4613      	mov	r3, r2
 801648c:	005b      	lsls	r3, r3, #1
 801648e:	4413      	add	r3, r2
 8016490:	00db      	lsls	r3, r3, #3
 8016492:	440b      	add	r3, r1
 8016494:	3314      	adds	r3, #20
 8016496:	781b      	ldrb	r3, [r3, #0]
 8016498:	2b03      	cmp	r3, #3
 801649a:	d10a      	bne.n	80164b2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801649c:	4925      	ldr	r1, [pc, #148]	@ (8016534 <etharp_tmr+0x14c>)
 801649e:	687a      	ldr	r2, [r7, #4]
 80164a0:	4613      	mov	r3, r2
 80164a2:	005b      	lsls	r3, r3, #1
 80164a4:	4413      	add	r3, r2
 80164a6:	00db      	lsls	r3, r3, #3
 80164a8:	440b      	add	r3, r1
 80164aa:	3314      	adds	r3, #20
 80164ac:	2204      	movs	r2, #4
 80164ae:	701a      	strb	r2, [r3, #0]
 80164b0:	e034      	b.n	801651c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80164b2:	4920      	ldr	r1, [pc, #128]	@ (8016534 <etharp_tmr+0x14c>)
 80164b4:	687a      	ldr	r2, [r7, #4]
 80164b6:	4613      	mov	r3, r2
 80164b8:	005b      	lsls	r3, r3, #1
 80164ba:	4413      	add	r3, r2
 80164bc:	00db      	lsls	r3, r3, #3
 80164be:	440b      	add	r3, r1
 80164c0:	3314      	adds	r3, #20
 80164c2:	781b      	ldrb	r3, [r3, #0]
 80164c4:	2b04      	cmp	r3, #4
 80164c6:	d10a      	bne.n	80164de <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80164c8:	491a      	ldr	r1, [pc, #104]	@ (8016534 <etharp_tmr+0x14c>)
 80164ca:	687a      	ldr	r2, [r7, #4]
 80164cc:	4613      	mov	r3, r2
 80164ce:	005b      	lsls	r3, r3, #1
 80164d0:	4413      	add	r3, r2
 80164d2:	00db      	lsls	r3, r3, #3
 80164d4:	440b      	add	r3, r1
 80164d6:	3314      	adds	r3, #20
 80164d8:	2202      	movs	r2, #2
 80164da:	701a      	strb	r2, [r3, #0]
 80164dc:	e01e      	b.n	801651c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80164de:	4915      	ldr	r1, [pc, #84]	@ (8016534 <etharp_tmr+0x14c>)
 80164e0:	687a      	ldr	r2, [r7, #4]
 80164e2:	4613      	mov	r3, r2
 80164e4:	005b      	lsls	r3, r3, #1
 80164e6:	4413      	add	r3, r2
 80164e8:	00db      	lsls	r3, r3, #3
 80164ea:	440b      	add	r3, r1
 80164ec:	3314      	adds	r3, #20
 80164ee:	781b      	ldrb	r3, [r3, #0]
 80164f0:	2b01      	cmp	r3, #1
 80164f2:	d113      	bne.n	801651c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80164f4:	490f      	ldr	r1, [pc, #60]	@ (8016534 <etharp_tmr+0x14c>)
 80164f6:	687a      	ldr	r2, [r7, #4]
 80164f8:	4613      	mov	r3, r2
 80164fa:	005b      	lsls	r3, r3, #1
 80164fc:	4413      	add	r3, r2
 80164fe:	00db      	lsls	r3, r3, #3
 8016500:	440b      	add	r3, r1
 8016502:	3308      	adds	r3, #8
 8016504:	6818      	ldr	r0, [r3, #0]
 8016506:	687a      	ldr	r2, [r7, #4]
 8016508:	4613      	mov	r3, r2
 801650a:	005b      	lsls	r3, r3, #1
 801650c:	4413      	add	r3, r2
 801650e:	00db      	lsls	r3, r3, #3
 8016510:	4a08      	ldr	r2, [pc, #32]	@ (8016534 <etharp_tmr+0x14c>)
 8016512:	4413      	add	r3, r2
 8016514:	3304      	adds	r3, #4
 8016516:	4619      	mov	r1, r3
 8016518:	f000 fe6e 	bl	80171f8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	3301      	adds	r3, #1
 8016520:	607b      	str	r3, [r7, #4]
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	2b09      	cmp	r3, #9
 8016526:	f77f af65 	ble.w	80163f4 <etharp_tmr+0xc>
      }
    }
  }
}
 801652a:	bf00      	nop
 801652c:	bf00      	nop
 801652e:	3708      	adds	r7, #8
 8016530:	46bd      	mov	sp, r7
 8016532:	bd80      	pop	{r7, pc}
 8016534:	20010364 	.word	0x20010364

08016538 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016538:	b580      	push	{r7, lr}
 801653a:	b08a      	sub	sp, #40	@ 0x28
 801653c:	af00      	add	r7, sp, #0
 801653e:	60f8      	str	r0, [r7, #12]
 8016540:	460b      	mov	r3, r1
 8016542:	607a      	str	r2, [r7, #4]
 8016544:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016546:	230a      	movs	r3, #10
 8016548:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801654a:	230a      	movs	r3, #10
 801654c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801654e:	230a      	movs	r3, #10
 8016550:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8016552:	2300      	movs	r3, #0
 8016554:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016556:	230a      	movs	r3, #10
 8016558:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801655a:	2300      	movs	r3, #0
 801655c:	83bb      	strh	r3, [r7, #28]
 801655e:	2300      	movs	r3, #0
 8016560:	837b      	strh	r3, [r7, #26]
 8016562:	2300      	movs	r3, #0
 8016564:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016566:	2300      	movs	r3, #0
 8016568:	843b      	strh	r3, [r7, #32]
 801656a:	e0ae      	b.n	80166ca <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801656c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016570:	49a6      	ldr	r1, [pc, #664]	@ (801680c <etharp_find_entry+0x2d4>)
 8016572:	4613      	mov	r3, r2
 8016574:	005b      	lsls	r3, r3, #1
 8016576:	4413      	add	r3, r2
 8016578:	00db      	lsls	r3, r3, #3
 801657a:	440b      	add	r3, r1
 801657c:	3314      	adds	r3, #20
 801657e:	781b      	ldrb	r3, [r3, #0]
 8016580:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016582:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016586:	2b0a      	cmp	r3, #10
 8016588:	d105      	bne.n	8016596 <etharp_find_entry+0x5e>
 801658a:	7dfb      	ldrb	r3, [r7, #23]
 801658c:	2b00      	cmp	r3, #0
 801658e:	d102      	bne.n	8016596 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016590:	8c3b      	ldrh	r3, [r7, #32]
 8016592:	847b      	strh	r3, [r7, #34]	@ 0x22
 8016594:	e095      	b.n	80166c2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016596:	7dfb      	ldrb	r3, [r7, #23]
 8016598:	2b00      	cmp	r3, #0
 801659a:	f000 8092 	beq.w	80166c2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801659e:	7dfb      	ldrb	r3, [r7, #23]
 80165a0:	2b01      	cmp	r3, #1
 80165a2:	d009      	beq.n	80165b8 <etharp_find_entry+0x80>
 80165a4:	7dfb      	ldrb	r3, [r7, #23]
 80165a6:	2b01      	cmp	r3, #1
 80165a8:	d806      	bhi.n	80165b8 <etharp_find_entry+0x80>
 80165aa:	4b99      	ldr	r3, [pc, #612]	@ (8016810 <etharp_find_entry+0x2d8>)
 80165ac:	f240 1223 	movw	r2, #291	@ 0x123
 80165b0:	4998      	ldr	r1, [pc, #608]	@ (8016814 <etharp_find_entry+0x2dc>)
 80165b2:	4899      	ldr	r0, [pc, #612]	@ (8016818 <etharp_find_entry+0x2e0>)
 80165b4:	f011 fcbe 	bl	8027f34 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d020      	beq.n	8016600 <etharp_find_entry+0xc8>
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	6819      	ldr	r1, [r3, #0]
 80165c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165c6:	4891      	ldr	r0, [pc, #580]	@ (801680c <etharp_find_entry+0x2d4>)
 80165c8:	4613      	mov	r3, r2
 80165ca:	005b      	lsls	r3, r3, #1
 80165cc:	4413      	add	r3, r2
 80165ce:	00db      	lsls	r3, r3, #3
 80165d0:	4403      	add	r3, r0
 80165d2:	3304      	adds	r3, #4
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	4299      	cmp	r1, r3
 80165d8:	d112      	bne.n	8016600 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d00c      	beq.n	80165fa <etharp_find_entry+0xc2>
 80165e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165e4:	4989      	ldr	r1, [pc, #548]	@ (801680c <etharp_find_entry+0x2d4>)
 80165e6:	4613      	mov	r3, r2
 80165e8:	005b      	lsls	r3, r3, #1
 80165ea:	4413      	add	r3, r2
 80165ec:	00db      	lsls	r3, r3, #3
 80165ee:	440b      	add	r3, r1
 80165f0:	3308      	adds	r3, #8
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	687a      	ldr	r2, [r7, #4]
 80165f6:	429a      	cmp	r2, r3
 80165f8:	d102      	bne.n	8016600 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80165fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80165fe:	e100      	b.n	8016802 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016600:	7dfb      	ldrb	r3, [r7, #23]
 8016602:	2b01      	cmp	r3, #1
 8016604:	d140      	bne.n	8016688 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016606:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801660a:	4980      	ldr	r1, [pc, #512]	@ (801680c <etharp_find_entry+0x2d4>)
 801660c:	4613      	mov	r3, r2
 801660e:	005b      	lsls	r3, r3, #1
 8016610:	4413      	add	r3, r2
 8016612:	00db      	lsls	r3, r3, #3
 8016614:	440b      	add	r3, r1
 8016616:	681b      	ldr	r3, [r3, #0]
 8016618:	2b00      	cmp	r3, #0
 801661a:	d01a      	beq.n	8016652 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801661c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016620:	497a      	ldr	r1, [pc, #488]	@ (801680c <etharp_find_entry+0x2d4>)
 8016622:	4613      	mov	r3, r2
 8016624:	005b      	lsls	r3, r3, #1
 8016626:	4413      	add	r3, r2
 8016628:	00db      	lsls	r3, r3, #3
 801662a:	440b      	add	r3, r1
 801662c:	3312      	adds	r3, #18
 801662e:	881b      	ldrh	r3, [r3, #0]
 8016630:	8bba      	ldrh	r2, [r7, #28]
 8016632:	429a      	cmp	r2, r3
 8016634:	d845      	bhi.n	80166c2 <etharp_find_entry+0x18a>
            old_queue = i;
 8016636:	8c3b      	ldrh	r3, [r7, #32]
 8016638:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801663a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801663e:	4973      	ldr	r1, [pc, #460]	@ (801680c <etharp_find_entry+0x2d4>)
 8016640:	4613      	mov	r3, r2
 8016642:	005b      	lsls	r3, r3, #1
 8016644:	4413      	add	r3, r2
 8016646:	00db      	lsls	r3, r3, #3
 8016648:	440b      	add	r3, r1
 801664a:	3312      	adds	r3, #18
 801664c:	881b      	ldrh	r3, [r3, #0]
 801664e:	83bb      	strh	r3, [r7, #28]
 8016650:	e037      	b.n	80166c2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016652:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016656:	496d      	ldr	r1, [pc, #436]	@ (801680c <etharp_find_entry+0x2d4>)
 8016658:	4613      	mov	r3, r2
 801665a:	005b      	lsls	r3, r3, #1
 801665c:	4413      	add	r3, r2
 801665e:	00db      	lsls	r3, r3, #3
 8016660:	440b      	add	r3, r1
 8016662:	3312      	adds	r3, #18
 8016664:	881b      	ldrh	r3, [r3, #0]
 8016666:	8b7a      	ldrh	r2, [r7, #26]
 8016668:	429a      	cmp	r2, r3
 801666a:	d82a      	bhi.n	80166c2 <etharp_find_entry+0x18a>
            old_pending = i;
 801666c:	8c3b      	ldrh	r3, [r7, #32]
 801666e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8016670:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016674:	4965      	ldr	r1, [pc, #404]	@ (801680c <etharp_find_entry+0x2d4>)
 8016676:	4613      	mov	r3, r2
 8016678:	005b      	lsls	r3, r3, #1
 801667a:	4413      	add	r3, r2
 801667c:	00db      	lsls	r3, r3, #3
 801667e:	440b      	add	r3, r1
 8016680:	3312      	adds	r3, #18
 8016682:	881b      	ldrh	r3, [r3, #0]
 8016684:	837b      	strh	r3, [r7, #26]
 8016686:	e01c      	b.n	80166c2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016688:	7dfb      	ldrb	r3, [r7, #23]
 801668a:	2b01      	cmp	r3, #1
 801668c:	d919      	bls.n	80166c2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801668e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016692:	495e      	ldr	r1, [pc, #376]	@ (801680c <etharp_find_entry+0x2d4>)
 8016694:	4613      	mov	r3, r2
 8016696:	005b      	lsls	r3, r3, #1
 8016698:	4413      	add	r3, r2
 801669a:	00db      	lsls	r3, r3, #3
 801669c:	440b      	add	r3, r1
 801669e:	3312      	adds	r3, #18
 80166a0:	881b      	ldrh	r3, [r3, #0]
 80166a2:	8b3a      	ldrh	r2, [r7, #24]
 80166a4:	429a      	cmp	r2, r3
 80166a6:	d80c      	bhi.n	80166c2 <etharp_find_entry+0x18a>
            old_stable = i;
 80166a8:	8c3b      	ldrh	r3, [r7, #32]
 80166aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80166ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80166b0:	4956      	ldr	r1, [pc, #344]	@ (801680c <etharp_find_entry+0x2d4>)
 80166b2:	4613      	mov	r3, r2
 80166b4:	005b      	lsls	r3, r3, #1
 80166b6:	4413      	add	r3, r2
 80166b8:	00db      	lsls	r3, r3, #3
 80166ba:	440b      	add	r3, r1
 80166bc:	3312      	adds	r3, #18
 80166be:	881b      	ldrh	r3, [r3, #0]
 80166c0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80166c2:	8c3b      	ldrh	r3, [r7, #32]
 80166c4:	3301      	adds	r3, #1
 80166c6:	b29b      	uxth	r3, r3
 80166c8:	843b      	strh	r3, [r7, #32]
 80166ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80166ce:	2b09      	cmp	r3, #9
 80166d0:	f77f af4c 	ble.w	801656c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80166d4:	7afb      	ldrb	r3, [r7, #11]
 80166d6:	f003 0302 	and.w	r3, r3, #2
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d108      	bne.n	80166f0 <etharp_find_entry+0x1b8>
 80166de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80166e2:	2b0a      	cmp	r3, #10
 80166e4:	d107      	bne.n	80166f6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80166e6:	7afb      	ldrb	r3, [r7, #11]
 80166e8:	f003 0301 	and.w	r3, r3, #1
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d102      	bne.n	80166f6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80166f0:	f04f 33ff 	mov.w	r3, #4294967295
 80166f4:	e085      	b.n	8016802 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80166f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80166fa:	2b09      	cmp	r3, #9
 80166fc:	dc02      	bgt.n	8016704 <etharp_find_entry+0x1cc>
    i = empty;
 80166fe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016700:	843b      	strh	r3, [r7, #32]
 8016702:	e039      	b.n	8016778 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016704:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8016708:	2b09      	cmp	r3, #9
 801670a:	dc14      	bgt.n	8016736 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801670c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801670e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016710:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016714:	493d      	ldr	r1, [pc, #244]	@ (801680c <etharp_find_entry+0x2d4>)
 8016716:	4613      	mov	r3, r2
 8016718:	005b      	lsls	r3, r3, #1
 801671a:	4413      	add	r3, r2
 801671c:	00db      	lsls	r3, r3, #3
 801671e:	440b      	add	r3, r1
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	2b00      	cmp	r3, #0
 8016724:	d018      	beq.n	8016758 <etharp_find_entry+0x220>
 8016726:	4b3a      	ldr	r3, [pc, #232]	@ (8016810 <etharp_find_entry+0x2d8>)
 8016728:	f240 126d 	movw	r2, #365	@ 0x16d
 801672c:	493b      	ldr	r1, [pc, #236]	@ (801681c <etharp_find_entry+0x2e4>)
 801672e:	483a      	ldr	r0, [pc, #232]	@ (8016818 <etharp_find_entry+0x2e0>)
 8016730:	f011 fc00 	bl	8027f34 <iprintf>
 8016734:	e010      	b.n	8016758 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016736:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801673a:	2b09      	cmp	r3, #9
 801673c:	dc02      	bgt.n	8016744 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801673e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016740:	843b      	strh	r3, [r7, #32]
 8016742:	e009      	b.n	8016758 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016744:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016748:	2b09      	cmp	r3, #9
 801674a:	dc02      	bgt.n	8016752 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801674c:	8bfb      	ldrh	r3, [r7, #30]
 801674e:	843b      	strh	r3, [r7, #32]
 8016750:	e002      	b.n	8016758 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016752:	f04f 33ff 	mov.w	r3, #4294967295
 8016756:	e054      	b.n	8016802 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016758:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801675c:	2b09      	cmp	r3, #9
 801675e:	dd06      	ble.n	801676e <etharp_find_entry+0x236>
 8016760:	4b2b      	ldr	r3, [pc, #172]	@ (8016810 <etharp_find_entry+0x2d8>)
 8016762:	f240 127f 	movw	r2, #383	@ 0x17f
 8016766:	492e      	ldr	r1, [pc, #184]	@ (8016820 <etharp_find_entry+0x2e8>)
 8016768:	482b      	ldr	r0, [pc, #172]	@ (8016818 <etharp_find_entry+0x2e0>)
 801676a:	f011 fbe3 	bl	8027f34 <iprintf>
    etharp_free_entry(i);
 801676e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016772:	4618      	mov	r0, r3
 8016774:	f7ff fe06 	bl	8016384 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016778:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801677c:	2b09      	cmp	r3, #9
 801677e:	dd06      	ble.n	801678e <etharp_find_entry+0x256>
 8016780:	4b23      	ldr	r3, [pc, #140]	@ (8016810 <etharp_find_entry+0x2d8>)
 8016782:	f240 1283 	movw	r2, #387	@ 0x183
 8016786:	4926      	ldr	r1, [pc, #152]	@ (8016820 <etharp_find_entry+0x2e8>)
 8016788:	4823      	ldr	r0, [pc, #140]	@ (8016818 <etharp_find_entry+0x2e0>)
 801678a:	f011 fbd3 	bl	8027f34 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801678e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016792:	491e      	ldr	r1, [pc, #120]	@ (801680c <etharp_find_entry+0x2d4>)
 8016794:	4613      	mov	r3, r2
 8016796:	005b      	lsls	r3, r3, #1
 8016798:	4413      	add	r3, r2
 801679a:	00db      	lsls	r3, r3, #3
 801679c:	440b      	add	r3, r1
 801679e:	3314      	adds	r3, #20
 80167a0:	781b      	ldrb	r3, [r3, #0]
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d006      	beq.n	80167b4 <etharp_find_entry+0x27c>
 80167a6:	4b1a      	ldr	r3, [pc, #104]	@ (8016810 <etharp_find_entry+0x2d8>)
 80167a8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80167ac:	491d      	ldr	r1, [pc, #116]	@ (8016824 <etharp_find_entry+0x2ec>)
 80167ae:	481a      	ldr	r0, [pc, #104]	@ (8016818 <etharp_find_entry+0x2e0>)
 80167b0:	f011 fbc0 	bl	8027f34 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d00b      	beq.n	80167d2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80167ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	6819      	ldr	r1, [r3, #0]
 80167c2:	4812      	ldr	r0, [pc, #72]	@ (801680c <etharp_find_entry+0x2d4>)
 80167c4:	4613      	mov	r3, r2
 80167c6:	005b      	lsls	r3, r3, #1
 80167c8:	4413      	add	r3, r2
 80167ca:	00db      	lsls	r3, r3, #3
 80167cc:	4403      	add	r3, r0
 80167ce:	3304      	adds	r3, #4
 80167d0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80167d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80167d6:	490d      	ldr	r1, [pc, #52]	@ (801680c <etharp_find_entry+0x2d4>)
 80167d8:	4613      	mov	r3, r2
 80167da:	005b      	lsls	r3, r3, #1
 80167dc:	4413      	add	r3, r2
 80167de:	00db      	lsls	r3, r3, #3
 80167e0:	440b      	add	r3, r1
 80167e2:	3312      	adds	r3, #18
 80167e4:	2200      	movs	r2, #0
 80167e6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80167e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80167ec:	4907      	ldr	r1, [pc, #28]	@ (801680c <etharp_find_entry+0x2d4>)
 80167ee:	4613      	mov	r3, r2
 80167f0:	005b      	lsls	r3, r3, #1
 80167f2:	4413      	add	r3, r2
 80167f4:	00db      	lsls	r3, r3, #3
 80167f6:	440b      	add	r3, r1
 80167f8:	3308      	adds	r3, #8
 80167fa:	687a      	ldr	r2, [r7, #4]
 80167fc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80167fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016802:	4618      	mov	r0, r3
 8016804:	3728      	adds	r7, #40	@ 0x28
 8016806:	46bd      	mov	sp, r7
 8016808:	bd80      	pop	{r7, pc}
 801680a:	bf00      	nop
 801680c:	20010364 	.word	0x20010364
 8016810:	0802c584 	.word	0x0802c584
 8016814:	0802c5bc 	.word	0x0802c5bc
 8016818:	0802c5fc 	.word	0x0802c5fc
 801681c:	0802c624 	.word	0x0802c624
 8016820:	0802c63c 	.word	0x0802c63c
 8016824:	0802c650 	.word	0x0802c650

08016828 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016828:	b580      	push	{r7, lr}
 801682a:	b088      	sub	sp, #32
 801682c:	af02      	add	r7, sp, #8
 801682e:	60f8      	str	r0, [r7, #12]
 8016830:	60b9      	str	r1, [r7, #8]
 8016832:	607a      	str	r2, [r7, #4]
 8016834:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801683c:	2b06      	cmp	r3, #6
 801683e:	d006      	beq.n	801684e <etharp_update_arp_entry+0x26>
 8016840:	4b48      	ldr	r3, [pc, #288]	@ (8016964 <etharp_update_arp_entry+0x13c>)
 8016842:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8016846:	4948      	ldr	r1, [pc, #288]	@ (8016968 <etharp_update_arp_entry+0x140>)
 8016848:	4848      	ldr	r0, [pc, #288]	@ (801696c <etharp_update_arp_entry+0x144>)
 801684a:	f011 fb73 	bl	8027f34 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801684e:	68bb      	ldr	r3, [r7, #8]
 8016850:	2b00      	cmp	r3, #0
 8016852:	d012      	beq.n	801687a <etharp_update_arp_entry+0x52>
 8016854:	68bb      	ldr	r3, [r7, #8]
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	2b00      	cmp	r3, #0
 801685a:	d00e      	beq.n	801687a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801685c:	68bb      	ldr	r3, [r7, #8]
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	68f9      	ldr	r1, [r7, #12]
 8016862:	4618      	mov	r0, r3
 8016864:	f001 f8fe 	bl	8017a64 <ip4_addr_isbroadcast_u32>
 8016868:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801686a:	2b00      	cmp	r3, #0
 801686c:	d105      	bne.n	801687a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801686e:	68bb      	ldr	r3, [r7, #8]
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016876:	2be0      	cmp	r3, #224	@ 0xe0
 8016878:	d102      	bne.n	8016880 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801687a:	f06f 030f 	mvn.w	r3, #15
 801687e:	e06c      	b.n	801695a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016880:	78fb      	ldrb	r3, [r7, #3]
 8016882:	68fa      	ldr	r2, [r7, #12]
 8016884:	4619      	mov	r1, r3
 8016886:	68b8      	ldr	r0, [r7, #8]
 8016888:	f7ff fe56 	bl	8016538 <etharp_find_entry>
 801688c:	4603      	mov	r3, r0
 801688e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016890:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016894:	2b00      	cmp	r3, #0
 8016896:	da02      	bge.n	801689e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016898:	8afb      	ldrh	r3, [r7, #22]
 801689a:	b25b      	sxtb	r3, r3
 801689c:	e05d      	b.n	801695a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801689e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80168a2:	4933      	ldr	r1, [pc, #204]	@ (8016970 <etharp_update_arp_entry+0x148>)
 80168a4:	4613      	mov	r3, r2
 80168a6:	005b      	lsls	r3, r3, #1
 80168a8:	4413      	add	r3, r2
 80168aa:	00db      	lsls	r3, r3, #3
 80168ac:	440b      	add	r3, r1
 80168ae:	3314      	adds	r3, #20
 80168b0:	2202      	movs	r2, #2
 80168b2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80168b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80168b8:	492d      	ldr	r1, [pc, #180]	@ (8016970 <etharp_update_arp_entry+0x148>)
 80168ba:	4613      	mov	r3, r2
 80168bc:	005b      	lsls	r3, r3, #1
 80168be:	4413      	add	r3, r2
 80168c0:	00db      	lsls	r3, r3, #3
 80168c2:	440b      	add	r3, r1
 80168c4:	3308      	adds	r3, #8
 80168c6:	68fa      	ldr	r2, [r7, #12]
 80168c8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80168ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80168ce:	4613      	mov	r3, r2
 80168d0:	005b      	lsls	r3, r3, #1
 80168d2:	4413      	add	r3, r2
 80168d4:	00db      	lsls	r3, r3, #3
 80168d6:	3308      	adds	r3, #8
 80168d8:	4a25      	ldr	r2, [pc, #148]	@ (8016970 <etharp_update_arp_entry+0x148>)
 80168da:	4413      	add	r3, r2
 80168dc:	3304      	adds	r3, #4
 80168de:	2206      	movs	r2, #6
 80168e0:	6879      	ldr	r1, [r7, #4]
 80168e2:	4618      	mov	r0, r3
 80168e4:	f011 fdd3 	bl	802848e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80168e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80168ec:	4920      	ldr	r1, [pc, #128]	@ (8016970 <etharp_update_arp_entry+0x148>)
 80168ee:	4613      	mov	r3, r2
 80168f0:	005b      	lsls	r3, r3, #1
 80168f2:	4413      	add	r3, r2
 80168f4:	00db      	lsls	r3, r3, #3
 80168f6:	440b      	add	r3, r1
 80168f8:	3312      	adds	r3, #18
 80168fa:	2200      	movs	r2, #0
 80168fc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80168fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016902:	491b      	ldr	r1, [pc, #108]	@ (8016970 <etharp_update_arp_entry+0x148>)
 8016904:	4613      	mov	r3, r2
 8016906:	005b      	lsls	r3, r3, #1
 8016908:	4413      	add	r3, r2
 801690a:	00db      	lsls	r3, r3, #3
 801690c:	440b      	add	r3, r1
 801690e:	681b      	ldr	r3, [r3, #0]
 8016910:	2b00      	cmp	r3, #0
 8016912:	d021      	beq.n	8016958 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016914:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016918:	4915      	ldr	r1, [pc, #84]	@ (8016970 <etharp_update_arp_entry+0x148>)
 801691a:	4613      	mov	r3, r2
 801691c:	005b      	lsls	r3, r3, #1
 801691e:	4413      	add	r3, r2
 8016920:	00db      	lsls	r3, r3, #3
 8016922:	440b      	add	r3, r1
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016928:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801692c:	4910      	ldr	r1, [pc, #64]	@ (8016970 <etharp_update_arp_entry+0x148>)
 801692e:	4613      	mov	r3, r2
 8016930:	005b      	lsls	r3, r3, #1
 8016932:	4413      	add	r3, r2
 8016934:	00db      	lsls	r3, r3, #3
 8016936:	440b      	add	r3, r1
 8016938:	2200      	movs	r2, #0
 801693a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8016942:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016946:	9300      	str	r3, [sp, #0]
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	6939      	ldr	r1, [r7, #16]
 801694c:	68f8      	ldr	r0, [r7, #12]
 801694e:	f002 f8d5 	bl	8018afc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016952:	6938      	ldr	r0, [r7, #16]
 8016954:	f7f8 fc1c 	bl	800f190 <pbuf_free>
  }
  return ERR_OK;
 8016958:	2300      	movs	r3, #0
}
 801695a:	4618      	mov	r0, r3
 801695c:	3718      	adds	r7, #24
 801695e:	46bd      	mov	sp, r7
 8016960:	bd80      	pop	{r7, pc}
 8016962:	bf00      	nop
 8016964:	0802c584 	.word	0x0802c584
 8016968:	0802c67c 	.word	0x0802c67c
 801696c:	0802c5fc 	.word	0x0802c5fc
 8016970:	20010364 	.word	0x20010364

08016974 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016974:	b580      	push	{r7, lr}
 8016976:	b084      	sub	sp, #16
 8016978:	af00      	add	r7, sp, #0
 801697a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801697c:	2300      	movs	r3, #0
 801697e:	60fb      	str	r3, [r7, #12]
 8016980:	e01e      	b.n	80169c0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016982:	4913      	ldr	r1, [pc, #76]	@ (80169d0 <etharp_cleanup_netif+0x5c>)
 8016984:	68fa      	ldr	r2, [r7, #12]
 8016986:	4613      	mov	r3, r2
 8016988:	005b      	lsls	r3, r3, #1
 801698a:	4413      	add	r3, r2
 801698c:	00db      	lsls	r3, r3, #3
 801698e:	440b      	add	r3, r1
 8016990:	3314      	adds	r3, #20
 8016992:	781b      	ldrb	r3, [r3, #0]
 8016994:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016996:	7afb      	ldrb	r3, [r7, #11]
 8016998:	2b00      	cmp	r3, #0
 801699a:	d00e      	beq.n	80169ba <etharp_cleanup_netif+0x46>
 801699c:	490c      	ldr	r1, [pc, #48]	@ (80169d0 <etharp_cleanup_netif+0x5c>)
 801699e:	68fa      	ldr	r2, [r7, #12]
 80169a0:	4613      	mov	r3, r2
 80169a2:	005b      	lsls	r3, r3, #1
 80169a4:	4413      	add	r3, r2
 80169a6:	00db      	lsls	r3, r3, #3
 80169a8:	440b      	add	r3, r1
 80169aa:	3308      	adds	r3, #8
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	687a      	ldr	r2, [r7, #4]
 80169b0:	429a      	cmp	r2, r3
 80169b2:	d102      	bne.n	80169ba <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80169b4:	68f8      	ldr	r0, [r7, #12]
 80169b6:	f7ff fce5 	bl	8016384 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	3301      	adds	r3, #1
 80169be:	60fb      	str	r3, [r7, #12]
 80169c0:	68fb      	ldr	r3, [r7, #12]
 80169c2:	2b09      	cmp	r3, #9
 80169c4:	dddd      	ble.n	8016982 <etharp_cleanup_netif+0xe>
    }
  }
}
 80169c6:	bf00      	nop
 80169c8:	bf00      	nop
 80169ca:	3710      	adds	r7, #16
 80169cc:	46bd      	mov	sp, r7
 80169ce:	bd80      	pop	{r7, pc}
 80169d0:	20010364 	.word	0x20010364

080169d4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80169d4:	b5b0      	push	{r4, r5, r7, lr}
 80169d6:	b08a      	sub	sp, #40	@ 0x28
 80169d8:	af04      	add	r7, sp, #16
 80169da:	6078      	str	r0, [r7, #4]
 80169dc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80169de:	683b      	ldr	r3, [r7, #0]
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d107      	bne.n	80169f4 <etharp_input+0x20>
 80169e4:	4b3d      	ldr	r3, [pc, #244]	@ (8016adc <etharp_input+0x108>)
 80169e6:	f240 228a 	movw	r2, #650	@ 0x28a
 80169ea:	493d      	ldr	r1, [pc, #244]	@ (8016ae0 <etharp_input+0x10c>)
 80169ec:	483d      	ldr	r0, [pc, #244]	@ (8016ae4 <etharp_input+0x110>)
 80169ee:	f011 faa1 	bl	8027f34 <iprintf>
 80169f2:	e06f      	b.n	8016ad4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	685b      	ldr	r3, [r3, #4]
 80169f8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80169fa:	693b      	ldr	r3, [r7, #16]
 80169fc:	881b      	ldrh	r3, [r3, #0]
 80169fe:	b29b      	uxth	r3, r3
 8016a00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016a04:	d10c      	bne.n	8016a20 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016a06:	693b      	ldr	r3, [r7, #16]
 8016a08:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016a0a:	2b06      	cmp	r3, #6
 8016a0c:	d108      	bne.n	8016a20 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016a0e:	693b      	ldr	r3, [r7, #16]
 8016a10:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016a12:	2b04      	cmp	r3, #4
 8016a14:	d104      	bne.n	8016a20 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016a16:	693b      	ldr	r3, [r7, #16]
 8016a18:	885b      	ldrh	r3, [r3, #2]
 8016a1a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016a1c:	2b08      	cmp	r3, #8
 8016a1e:	d003      	beq.n	8016a28 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016a20:	6878      	ldr	r0, [r7, #4]
 8016a22:	f7f8 fbb5 	bl	800f190 <pbuf_free>
    return;
 8016a26:	e055      	b.n	8016ad4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016a28:	693b      	ldr	r3, [r7, #16]
 8016a2a:	330e      	adds	r3, #14
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016a30:	693b      	ldr	r3, [r7, #16]
 8016a32:	3318      	adds	r3, #24
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016a38:	683b      	ldr	r3, [r7, #0]
 8016a3a:	3304      	adds	r3, #4
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d102      	bne.n	8016a48 <etharp_input+0x74>
    for_us = 0;
 8016a42:	2300      	movs	r3, #0
 8016a44:	75fb      	strb	r3, [r7, #23]
 8016a46:	e009      	b.n	8016a5c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016a48:	68ba      	ldr	r2, [r7, #8]
 8016a4a:	683b      	ldr	r3, [r7, #0]
 8016a4c:	3304      	adds	r3, #4
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	429a      	cmp	r2, r3
 8016a52:	bf0c      	ite	eq
 8016a54:	2301      	moveq	r3, #1
 8016a56:	2300      	movne	r3, #0
 8016a58:	b2db      	uxtb	r3, r3
 8016a5a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016a5c:	693b      	ldr	r3, [r7, #16]
 8016a5e:	f103 0208 	add.w	r2, r3, #8
 8016a62:	7dfb      	ldrb	r3, [r7, #23]
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d001      	beq.n	8016a6c <etharp_input+0x98>
 8016a68:	2301      	movs	r3, #1
 8016a6a:	e000      	b.n	8016a6e <etharp_input+0x9a>
 8016a6c:	2302      	movs	r3, #2
 8016a6e:	f107 010c 	add.w	r1, r7, #12
 8016a72:	6838      	ldr	r0, [r7, #0]
 8016a74:	f7ff fed8 	bl	8016828 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016a78:	693b      	ldr	r3, [r7, #16]
 8016a7a:	88db      	ldrh	r3, [r3, #6]
 8016a7c:	b29b      	uxth	r3, r3
 8016a7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016a82:	d003      	beq.n	8016a8c <etharp_input+0xb8>
 8016a84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016a88:	d01e      	beq.n	8016ac8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016a8a:	e020      	b.n	8016ace <etharp_input+0xfa>
      if (for_us) {
 8016a8c:	7dfb      	ldrb	r3, [r7, #23]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d01c      	beq.n	8016acc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016a92:	683b      	ldr	r3, [r7, #0]
 8016a94:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8016a98:	693b      	ldr	r3, [r7, #16]
 8016a9a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016a9e:	683b      	ldr	r3, [r7, #0]
 8016aa0:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8016aa4:	683b      	ldr	r3, [r7, #0]
 8016aa6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016aa8:	693a      	ldr	r2, [r7, #16]
 8016aaa:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016aac:	2102      	movs	r1, #2
 8016aae:	9103      	str	r1, [sp, #12]
 8016ab0:	f107 010c 	add.w	r1, r7, #12
 8016ab4:	9102      	str	r1, [sp, #8]
 8016ab6:	9201      	str	r2, [sp, #4]
 8016ab8:	9300      	str	r3, [sp, #0]
 8016aba:	462b      	mov	r3, r5
 8016abc:	4622      	mov	r2, r4
 8016abe:	4601      	mov	r1, r0
 8016ac0:	6838      	ldr	r0, [r7, #0]
 8016ac2:	f000 faeb 	bl	801709c <etharp_raw>
      break;
 8016ac6:	e001      	b.n	8016acc <etharp_input+0xf8>
      break;
 8016ac8:	bf00      	nop
 8016aca:	e000      	b.n	8016ace <etharp_input+0xfa>
      break;
 8016acc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016ace:	6878      	ldr	r0, [r7, #4]
 8016ad0:	f7f8 fb5e 	bl	800f190 <pbuf_free>
}
 8016ad4:	3718      	adds	r7, #24
 8016ad6:	46bd      	mov	sp, r7
 8016ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8016ada:	bf00      	nop
 8016adc:	0802c584 	.word	0x0802c584
 8016ae0:	0802c6d4 	.word	0x0802c6d4
 8016ae4:	0802c5fc 	.word	0x0802c5fc

08016ae8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016ae8:	b580      	push	{r7, lr}
 8016aea:	b086      	sub	sp, #24
 8016aec:	af02      	add	r7, sp, #8
 8016aee:	60f8      	str	r0, [r7, #12]
 8016af0:	60b9      	str	r1, [r7, #8]
 8016af2:	4613      	mov	r3, r2
 8016af4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016af6:	79fa      	ldrb	r2, [r7, #7]
 8016af8:	4944      	ldr	r1, [pc, #272]	@ (8016c0c <etharp_output_to_arp_index+0x124>)
 8016afa:	4613      	mov	r3, r2
 8016afc:	005b      	lsls	r3, r3, #1
 8016afe:	4413      	add	r3, r2
 8016b00:	00db      	lsls	r3, r3, #3
 8016b02:	440b      	add	r3, r1
 8016b04:	3314      	adds	r3, #20
 8016b06:	781b      	ldrb	r3, [r3, #0]
 8016b08:	2b01      	cmp	r3, #1
 8016b0a:	d806      	bhi.n	8016b1a <etharp_output_to_arp_index+0x32>
 8016b0c:	4b40      	ldr	r3, [pc, #256]	@ (8016c10 <etharp_output_to_arp_index+0x128>)
 8016b0e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8016b12:	4940      	ldr	r1, [pc, #256]	@ (8016c14 <etharp_output_to_arp_index+0x12c>)
 8016b14:	4840      	ldr	r0, [pc, #256]	@ (8016c18 <etharp_output_to_arp_index+0x130>)
 8016b16:	f011 fa0d 	bl	8027f34 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016b1a:	79fa      	ldrb	r2, [r7, #7]
 8016b1c:	493b      	ldr	r1, [pc, #236]	@ (8016c0c <etharp_output_to_arp_index+0x124>)
 8016b1e:	4613      	mov	r3, r2
 8016b20:	005b      	lsls	r3, r3, #1
 8016b22:	4413      	add	r3, r2
 8016b24:	00db      	lsls	r3, r3, #3
 8016b26:	440b      	add	r3, r1
 8016b28:	3314      	adds	r3, #20
 8016b2a:	781b      	ldrb	r3, [r3, #0]
 8016b2c:	2b02      	cmp	r3, #2
 8016b2e:	d153      	bne.n	8016bd8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016b30:	79fa      	ldrb	r2, [r7, #7]
 8016b32:	4936      	ldr	r1, [pc, #216]	@ (8016c0c <etharp_output_to_arp_index+0x124>)
 8016b34:	4613      	mov	r3, r2
 8016b36:	005b      	lsls	r3, r3, #1
 8016b38:	4413      	add	r3, r2
 8016b3a:	00db      	lsls	r3, r3, #3
 8016b3c:	440b      	add	r3, r1
 8016b3e:	3312      	adds	r3, #18
 8016b40:	881b      	ldrh	r3, [r3, #0]
 8016b42:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8016b46:	d919      	bls.n	8016b7c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016b48:	79fa      	ldrb	r2, [r7, #7]
 8016b4a:	4613      	mov	r3, r2
 8016b4c:	005b      	lsls	r3, r3, #1
 8016b4e:	4413      	add	r3, r2
 8016b50:	00db      	lsls	r3, r3, #3
 8016b52:	4a2e      	ldr	r2, [pc, #184]	@ (8016c0c <etharp_output_to_arp_index+0x124>)
 8016b54:	4413      	add	r3, r2
 8016b56:	3304      	adds	r3, #4
 8016b58:	4619      	mov	r1, r3
 8016b5a:	68f8      	ldr	r0, [r7, #12]
 8016b5c:	f000 fb4c 	bl	80171f8 <etharp_request>
 8016b60:	4603      	mov	r3, r0
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d138      	bne.n	8016bd8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016b66:	79fa      	ldrb	r2, [r7, #7]
 8016b68:	4928      	ldr	r1, [pc, #160]	@ (8016c0c <etharp_output_to_arp_index+0x124>)
 8016b6a:	4613      	mov	r3, r2
 8016b6c:	005b      	lsls	r3, r3, #1
 8016b6e:	4413      	add	r3, r2
 8016b70:	00db      	lsls	r3, r3, #3
 8016b72:	440b      	add	r3, r1
 8016b74:	3314      	adds	r3, #20
 8016b76:	2203      	movs	r2, #3
 8016b78:	701a      	strb	r2, [r3, #0]
 8016b7a:	e02d      	b.n	8016bd8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016b7c:	79fa      	ldrb	r2, [r7, #7]
 8016b7e:	4923      	ldr	r1, [pc, #140]	@ (8016c0c <etharp_output_to_arp_index+0x124>)
 8016b80:	4613      	mov	r3, r2
 8016b82:	005b      	lsls	r3, r3, #1
 8016b84:	4413      	add	r3, r2
 8016b86:	00db      	lsls	r3, r3, #3
 8016b88:	440b      	add	r3, r1
 8016b8a:	3312      	adds	r3, #18
 8016b8c:	881b      	ldrh	r3, [r3, #0]
 8016b8e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8016b92:	d321      	bcc.n	8016bd8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016b94:	79fa      	ldrb	r2, [r7, #7]
 8016b96:	4613      	mov	r3, r2
 8016b98:	005b      	lsls	r3, r3, #1
 8016b9a:	4413      	add	r3, r2
 8016b9c:	00db      	lsls	r3, r3, #3
 8016b9e:	4a1b      	ldr	r2, [pc, #108]	@ (8016c0c <etharp_output_to_arp_index+0x124>)
 8016ba0:	4413      	add	r3, r2
 8016ba2:	1d19      	adds	r1, r3, #4
 8016ba4:	79fa      	ldrb	r2, [r7, #7]
 8016ba6:	4613      	mov	r3, r2
 8016ba8:	005b      	lsls	r3, r3, #1
 8016baa:	4413      	add	r3, r2
 8016bac:	00db      	lsls	r3, r3, #3
 8016bae:	3308      	adds	r3, #8
 8016bb0:	4a16      	ldr	r2, [pc, #88]	@ (8016c0c <etharp_output_to_arp_index+0x124>)
 8016bb2:	4413      	add	r3, r2
 8016bb4:	3304      	adds	r3, #4
 8016bb6:	461a      	mov	r2, r3
 8016bb8:	68f8      	ldr	r0, [r7, #12]
 8016bba:	f000 fafb 	bl	80171b4 <etharp_request_dst>
 8016bbe:	4603      	mov	r3, r0
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d109      	bne.n	8016bd8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016bc4:	79fa      	ldrb	r2, [r7, #7]
 8016bc6:	4911      	ldr	r1, [pc, #68]	@ (8016c0c <etharp_output_to_arp_index+0x124>)
 8016bc8:	4613      	mov	r3, r2
 8016bca:	005b      	lsls	r3, r3, #1
 8016bcc:	4413      	add	r3, r2
 8016bce:	00db      	lsls	r3, r3, #3
 8016bd0:	440b      	add	r3, r1
 8016bd2:	3314      	adds	r3, #20
 8016bd4:	2203      	movs	r2, #3
 8016bd6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8016bde:	79fa      	ldrb	r2, [r7, #7]
 8016be0:	4613      	mov	r3, r2
 8016be2:	005b      	lsls	r3, r3, #1
 8016be4:	4413      	add	r3, r2
 8016be6:	00db      	lsls	r3, r3, #3
 8016be8:	3308      	adds	r3, #8
 8016bea:	4a08      	ldr	r2, [pc, #32]	@ (8016c0c <etharp_output_to_arp_index+0x124>)
 8016bec:	4413      	add	r3, r2
 8016bee:	3304      	adds	r3, #4
 8016bf0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016bf4:	9200      	str	r2, [sp, #0]
 8016bf6:	460a      	mov	r2, r1
 8016bf8:	68b9      	ldr	r1, [r7, #8]
 8016bfa:	68f8      	ldr	r0, [r7, #12]
 8016bfc:	f001 ff7e 	bl	8018afc <ethernet_output>
 8016c00:	4603      	mov	r3, r0
}
 8016c02:	4618      	mov	r0, r3
 8016c04:	3710      	adds	r7, #16
 8016c06:	46bd      	mov	sp, r7
 8016c08:	bd80      	pop	{r7, pc}
 8016c0a:	bf00      	nop
 8016c0c:	20010364 	.word	0x20010364
 8016c10:	0802c584 	.word	0x0802c584
 8016c14:	0802c6f4 	.word	0x0802c6f4
 8016c18:	0802c5fc 	.word	0x0802c5fc

08016c1c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b08a      	sub	sp, #40	@ 0x28
 8016c20:	af02      	add	r7, sp, #8
 8016c22:	60f8      	str	r0, [r7, #12]
 8016c24:	60b9      	str	r1, [r7, #8]
 8016c26:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d106      	bne.n	8016c40 <etharp_output+0x24>
 8016c32:	4b73      	ldr	r3, [pc, #460]	@ (8016e00 <etharp_output+0x1e4>)
 8016c34:	f240 321e 	movw	r2, #798	@ 0x31e
 8016c38:	4972      	ldr	r1, [pc, #456]	@ (8016e04 <etharp_output+0x1e8>)
 8016c3a:	4873      	ldr	r0, [pc, #460]	@ (8016e08 <etharp_output+0x1ec>)
 8016c3c:	f011 f97a 	bl	8027f34 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016c40:	68bb      	ldr	r3, [r7, #8]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d106      	bne.n	8016c54 <etharp_output+0x38>
 8016c46:	4b6e      	ldr	r3, [pc, #440]	@ (8016e00 <etharp_output+0x1e4>)
 8016c48:	f240 321f 	movw	r2, #799	@ 0x31f
 8016c4c:	496f      	ldr	r1, [pc, #444]	@ (8016e0c <etharp_output+0x1f0>)
 8016c4e:	486e      	ldr	r0, [pc, #440]	@ (8016e08 <etharp_output+0x1ec>)
 8016c50:	f011 f970 	bl	8027f34 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d106      	bne.n	8016c68 <etharp_output+0x4c>
 8016c5a:	4b69      	ldr	r3, [pc, #420]	@ (8016e00 <etharp_output+0x1e4>)
 8016c5c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8016c60:	496b      	ldr	r1, [pc, #428]	@ (8016e10 <etharp_output+0x1f4>)
 8016c62:	4869      	ldr	r0, [pc, #420]	@ (8016e08 <etharp_output+0x1ec>)
 8016c64:	f011 f966 	bl	8027f34 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	68f9      	ldr	r1, [r7, #12]
 8016c6e:	4618      	mov	r0, r3
 8016c70:	f000 fef8 	bl	8017a64 <ip4_addr_isbroadcast_u32>
 8016c74:	4603      	mov	r3, r0
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d002      	beq.n	8016c80 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016c7a:	4b66      	ldr	r3, [pc, #408]	@ (8016e14 <etharp_output+0x1f8>)
 8016c7c:	61fb      	str	r3, [r7, #28]
 8016c7e:	e0af      	b.n	8016de0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	681b      	ldr	r3, [r3, #0]
 8016c84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016c88:	2be0      	cmp	r3, #224	@ 0xe0
 8016c8a:	d118      	bne.n	8016cbe <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016c8c:	2301      	movs	r3, #1
 8016c8e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016c90:	2300      	movs	r3, #0
 8016c92:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016c94:	235e      	movs	r3, #94	@ 0x5e
 8016c96:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	3301      	adds	r3, #1
 8016c9c:	781b      	ldrb	r3, [r3, #0]
 8016c9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016ca2:	b2db      	uxtb	r3, r3
 8016ca4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	3302      	adds	r3, #2
 8016caa:	781b      	ldrb	r3, [r3, #0]
 8016cac:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	3303      	adds	r3, #3
 8016cb2:	781b      	ldrb	r3, [r3, #0]
 8016cb4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016cb6:	f107 0310 	add.w	r3, r7, #16
 8016cba:	61fb      	str	r3, [r7, #28]
 8016cbc:	e090      	b.n	8016de0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	681a      	ldr	r2, [r3, #0]
 8016cc2:	68fb      	ldr	r3, [r7, #12]
 8016cc4:	3304      	adds	r3, #4
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	405a      	eors	r2, r3
 8016cca:	68fb      	ldr	r3, [r7, #12]
 8016ccc:	3308      	adds	r3, #8
 8016cce:	681b      	ldr	r3, [r3, #0]
 8016cd0:	4013      	ands	r3, r2
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d012      	beq.n	8016cfc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016cdc:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8016ce0:	4293      	cmp	r3, r2
 8016ce2:	d00b      	beq.n	8016cfc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016ce4:	68fb      	ldr	r3, [r7, #12]
 8016ce6:	330c      	adds	r3, #12
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d003      	beq.n	8016cf6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	330c      	adds	r3, #12
 8016cf2:	61bb      	str	r3, [r7, #24]
 8016cf4:	e002      	b.n	8016cfc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016cf6:	f06f 0303 	mvn.w	r3, #3
 8016cfa:	e07d      	b.n	8016df8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016cfc:	4b46      	ldr	r3, [pc, #280]	@ (8016e18 <etharp_output+0x1fc>)
 8016cfe:	781b      	ldrb	r3, [r3, #0]
 8016d00:	4619      	mov	r1, r3
 8016d02:	4a46      	ldr	r2, [pc, #280]	@ (8016e1c <etharp_output+0x200>)
 8016d04:	460b      	mov	r3, r1
 8016d06:	005b      	lsls	r3, r3, #1
 8016d08:	440b      	add	r3, r1
 8016d0a:	00db      	lsls	r3, r3, #3
 8016d0c:	4413      	add	r3, r2
 8016d0e:	3314      	adds	r3, #20
 8016d10:	781b      	ldrb	r3, [r3, #0]
 8016d12:	2b01      	cmp	r3, #1
 8016d14:	d925      	bls.n	8016d62 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016d16:	4b40      	ldr	r3, [pc, #256]	@ (8016e18 <etharp_output+0x1fc>)
 8016d18:	781b      	ldrb	r3, [r3, #0]
 8016d1a:	4619      	mov	r1, r3
 8016d1c:	4a3f      	ldr	r2, [pc, #252]	@ (8016e1c <etharp_output+0x200>)
 8016d1e:	460b      	mov	r3, r1
 8016d20:	005b      	lsls	r3, r3, #1
 8016d22:	440b      	add	r3, r1
 8016d24:	00db      	lsls	r3, r3, #3
 8016d26:	4413      	add	r3, r2
 8016d28:	3308      	adds	r3, #8
 8016d2a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016d2c:	68fa      	ldr	r2, [r7, #12]
 8016d2e:	429a      	cmp	r2, r3
 8016d30:	d117      	bne.n	8016d62 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016d32:	69bb      	ldr	r3, [r7, #24]
 8016d34:	681a      	ldr	r2, [r3, #0]
 8016d36:	4b38      	ldr	r3, [pc, #224]	@ (8016e18 <etharp_output+0x1fc>)
 8016d38:	781b      	ldrb	r3, [r3, #0]
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	4937      	ldr	r1, [pc, #220]	@ (8016e1c <etharp_output+0x200>)
 8016d3e:	4603      	mov	r3, r0
 8016d40:	005b      	lsls	r3, r3, #1
 8016d42:	4403      	add	r3, r0
 8016d44:	00db      	lsls	r3, r3, #3
 8016d46:	440b      	add	r3, r1
 8016d48:	3304      	adds	r3, #4
 8016d4a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016d4c:	429a      	cmp	r2, r3
 8016d4e:	d108      	bne.n	8016d62 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016d50:	4b31      	ldr	r3, [pc, #196]	@ (8016e18 <etharp_output+0x1fc>)
 8016d52:	781b      	ldrb	r3, [r3, #0]
 8016d54:	461a      	mov	r2, r3
 8016d56:	68b9      	ldr	r1, [r7, #8]
 8016d58:	68f8      	ldr	r0, [r7, #12]
 8016d5a:	f7ff fec5 	bl	8016ae8 <etharp_output_to_arp_index>
 8016d5e:	4603      	mov	r3, r0
 8016d60:	e04a      	b.n	8016df8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016d62:	2300      	movs	r3, #0
 8016d64:	75fb      	strb	r3, [r7, #23]
 8016d66:	e031      	b.n	8016dcc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016d68:	7dfa      	ldrb	r2, [r7, #23]
 8016d6a:	492c      	ldr	r1, [pc, #176]	@ (8016e1c <etharp_output+0x200>)
 8016d6c:	4613      	mov	r3, r2
 8016d6e:	005b      	lsls	r3, r3, #1
 8016d70:	4413      	add	r3, r2
 8016d72:	00db      	lsls	r3, r3, #3
 8016d74:	440b      	add	r3, r1
 8016d76:	3314      	adds	r3, #20
 8016d78:	781b      	ldrb	r3, [r3, #0]
 8016d7a:	2b01      	cmp	r3, #1
 8016d7c:	d923      	bls.n	8016dc6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016d7e:	7dfa      	ldrb	r2, [r7, #23]
 8016d80:	4926      	ldr	r1, [pc, #152]	@ (8016e1c <etharp_output+0x200>)
 8016d82:	4613      	mov	r3, r2
 8016d84:	005b      	lsls	r3, r3, #1
 8016d86:	4413      	add	r3, r2
 8016d88:	00db      	lsls	r3, r3, #3
 8016d8a:	440b      	add	r3, r1
 8016d8c:	3308      	adds	r3, #8
 8016d8e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016d90:	68fa      	ldr	r2, [r7, #12]
 8016d92:	429a      	cmp	r2, r3
 8016d94:	d117      	bne.n	8016dc6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016d96:	69bb      	ldr	r3, [r7, #24]
 8016d98:	6819      	ldr	r1, [r3, #0]
 8016d9a:	7dfa      	ldrb	r2, [r7, #23]
 8016d9c:	481f      	ldr	r0, [pc, #124]	@ (8016e1c <etharp_output+0x200>)
 8016d9e:	4613      	mov	r3, r2
 8016da0:	005b      	lsls	r3, r3, #1
 8016da2:	4413      	add	r3, r2
 8016da4:	00db      	lsls	r3, r3, #3
 8016da6:	4403      	add	r3, r0
 8016da8:	3304      	adds	r3, #4
 8016daa:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016dac:	4299      	cmp	r1, r3
 8016dae:	d10a      	bne.n	8016dc6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016db0:	4a19      	ldr	r2, [pc, #100]	@ (8016e18 <etharp_output+0x1fc>)
 8016db2:	7dfb      	ldrb	r3, [r7, #23]
 8016db4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016db6:	7dfb      	ldrb	r3, [r7, #23]
 8016db8:	461a      	mov	r2, r3
 8016dba:	68b9      	ldr	r1, [r7, #8]
 8016dbc:	68f8      	ldr	r0, [r7, #12]
 8016dbe:	f7ff fe93 	bl	8016ae8 <etharp_output_to_arp_index>
 8016dc2:	4603      	mov	r3, r0
 8016dc4:	e018      	b.n	8016df8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016dc6:	7dfb      	ldrb	r3, [r7, #23]
 8016dc8:	3301      	adds	r3, #1
 8016dca:	75fb      	strb	r3, [r7, #23]
 8016dcc:	7dfb      	ldrb	r3, [r7, #23]
 8016dce:	2b09      	cmp	r3, #9
 8016dd0:	d9ca      	bls.n	8016d68 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016dd2:	68ba      	ldr	r2, [r7, #8]
 8016dd4:	69b9      	ldr	r1, [r7, #24]
 8016dd6:	68f8      	ldr	r0, [r7, #12]
 8016dd8:	f000 f822 	bl	8016e20 <etharp_query>
 8016ddc:	4603      	mov	r3, r0
 8016dde:	e00b      	b.n	8016df8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016de0:	68fb      	ldr	r3, [r7, #12]
 8016de2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8016de6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016dea:	9300      	str	r3, [sp, #0]
 8016dec:	69fb      	ldr	r3, [r7, #28]
 8016dee:	68b9      	ldr	r1, [r7, #8]
 8016df0:	68f8      	ldr	r0, [r7, #12]
 8016df2:	f001 fe83 	bl	8018afc <ethernet_output>
 8016df6:	4603      	mov	r3, r0
}
 8016df8:	4618      	mov	r0, r3
 8016dfa:	3720      	adds	r7, #32
 8016dfc:	46bd      	mov	sp, r7
 8016dfe:	bd80      	pop	{r7, pc}
 8016e00:	0802c584 	.word	0x0802c584
 8016e04:	0802c6d4 	.word	0x0802c6d4
 8016e08:	0802c5fc 	.word	0x0802c5fc
 8016e0c:	0802c724 	.word	0x0802c724
 8016e10:	0802c6c4 	.word	0x0802c6c4
 8016e14:	0802ce58 	.word	0x0802ce58
 8016e18:	20010454 	.word	0x20010454
 8016e1c:	20010364 	.word	0x20010364

08016e20 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016e20:	b580      	push	{r7, lr}
 8016e22:	b08c      	sub	sp, #48	@ 0x30
 8016e24:	af02      	add	r7, sp, #8
 8016e26:	60f8      	str	r0, [r7, #12]
 8016e28:	60b9      	str	r1, [r7, #8]
 8016e2a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	3326      	adds	r3, #38	@ 0x26
 8016e30:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016e32:	23ff      	movs	r3, #255	@ 0xff
 8016e34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8016e38:	2300      	movs	r3, #0
 8016e3a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016e3c:	68bb      	ldr	r3, [r7, #8]
 8016e3e:	681b      	ldr	r3, [r3, #0]
 8016e40:	68f9      	ldr	r1, [r7, #12]
 8016e42:	4618      	mov	r0, r3
 8016e44:	f000 fe0e 	bl	8017a64 <ip4_addr_isbroadcast_u32>
 8016e48:	4603      	mov	r3, r0
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d10c      	bne.n	8016e68 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016e4e:	68bb      	ldr	r3, [r7, #8]
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016e56:	2be0      	cmp	r3, #224	@ 0xe0
 8016e58:	d006      	beq.n	8016e68 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016e5a:	68bb      	ldr	r3, [r7, #8]
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d003      	beq.n	8016e68 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016e60:	68bb      	ldr	r3, [r7, #8]
 8016e62:	681b      	ldr	r3, [r3, #0]
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d102      	bne.n	8016e6e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016e68:	f06f 030f 	mvn.w	r3, #15
 8016e6c:	e101      	b.n	8017072 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016e6e:	68fa      	ldr	r2, [r7, #12]
 8016e70:	2101      	movs	r1, #1
 8016e72:	68b8      	ldr	r0, [r7, #8]
 8016e74:	f7ff fb60 	bl	8016538 <etharp_find_entry>
 8016e78:	4603      	mov	r3, r0
 8016e7a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016e7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	da02      	bge.n	8016e8a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016e84:	8a7b      	ldrh	r3, [r7, #18]
 8016e86:	b25b      	sxtb	r3, r3
 8016e88:	e0f3      	b.n	8017072 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016e8a:	8a7b      	ldrh	r3, [r7, #18]
 8016e8c:	2b7e      	cmp	r3, #126	@ 0x7e
 8016e8e:	d906      	bls.n	8016e9e <etharp_query+0x7e>
 8016e90:	4b7a      	ldr	r3, [pc, #488]	@ (801707c <etharp_query+0x25c>)
 8016e92:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8016e96:	497a      	ldr	r1, [pc, #488]	@ (8017080 <etharp_query+0x260>)
 8016e98:	487a      	ldr	r0, [pc, #488]	@ (8017084 <etharp_query+0x264>)
 8016e9a:	f011 f84b 	bl	8027f34 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016e9e:	8a7b      	ldrh	r3, [r7, #18]
 8016ea0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016ea2:	7c7a      	ldrb	r2, [r7, #17]
 8016ea4:	4978      	ldr	r1, [pc, #480]	@ (8017088 <etharp_query+0x268>)
 8016ea6:	4613      	mov	r3, r2
 8016ea8:	005b      	lsls	r3, r3, #1
 8016eaa:	4413      	add	r3, r2
 8016eac:	00db      	lsls	r3, r3, #3
 8016eae:	440b      	add	r3, r1
 8016eb0:	3314      	adds	r3, #20
 8016eb2:	781b      	ldrb	r3, [r3, #0]
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d115      	bne.n	8016ee4 <etharp_query+0xc4>
    is_new_entry = 1;
 8016eb8:	2301      	movs	r3, #1
 8016eba:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016ebc:	7c7a      	ldrb	r2, [r7, #17]
 8016ebe:	4972      	ldr	r1, [pc, #456]	@ (8017088 <etharp_query+0x268>)
 8016ec0:	4613      	mov	r3, r2
 8016ec2:	005b      	lsls	r3, r3, #1
 8016ec4:	4413      	add	r3, r2
 8016ec6:	00db      	lsls	r3, r3, #3
 8016ec8:	440b      	add	r3, r1
 8016eca:	3314      	adds	r3, #20
 8016ecc:	2201      	movs	r2, #1
 8016ece:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016ed0:	7c7a      	ldrb	r2, [r7, #17]
 8016ed2:	496d      	ldr	r1, [pc, #436]	@ (8017088 <etharp_query+0x268>)
 8016ed4:	4613      	mov	r3, r2
 8016ed6:	005b      	lsls	r3, r3, #1
 8016ed8:	4413      	add	r3, r2
 8016eda:	00db      	lsls	r3, r3, #3
 8016edc:	440b      	add	r3, r1
 8016ede:	3308      	adds	r3, #8
 8016ee0:	68fa      	ldr	r2, [r7, #12]
 8016ee2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016ee4:	7c7a      	ldrb	r2, [r7, #17]
 8016ee6:	4968      	ldr	r1, [pc, #416]	@ (8017088 <etharp_query+0x268>)
 8016ee8:	4613      	mov	r3, r2
 8016eea:	005b      	lsls	r3, r3, #1
 8016eec:	4413      	add	r3, r2
 8016eee:	00db      	lsls	r3, r3, #3
 8016ef0:	440b      	add	r3, r1
 8016ef2:	3314      	adds	r3, #20
 8016ef4:	781b      	ldrb	r3, [r3, #0]
 8016ef6:	2b01      	cmp	r3, #1
 8016ef8:	d011      	beq.n	8016f1e <etharp_query+0xfe>
 8016efa:	7c7a      	ldrb	r2, [r7, #17]
 8016efc:	4962      	ldr	r1, [pc, #392]	@ (8017088 <etharp_query+0x268>)
 8016efe:	4613      	mov	r3, r2
 8016f00:	005b      	lsls	r3, r3, #1
 8016f02:	4413      	add	r3, r2
 8016f04:	00db      	lsls	r3, r3, #3
 8016f06:	440b      	add	r3, r1
 8016f08:	3314      	adds	r3, #20
 8016f0a:	781b      	ldrb	r3, [r3, #0]
 8016f0c:	2b01      	cmp	r3, #1
 8016f0e:	d806      	bhi.n	8016f1e <etharp_query+0xfe>
 8016f10:	4b5a      	ldr	r3, [pc, #360]	@ (801707c <etharp_query+0x25c>)
 8016f12:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8016f16:	495d      	ldr	r1, [pc, #372]	@ (801708c <etharp_query+0x26c>)
 8016f18:	485a      	ldr	r0, [pc, #360]	@ (8017084 <etharp_query+0x264>)
 8016f1a:	f011 f80b 	bl	8027f34 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016f1e:	6a3b      	ldr	r3, [r7, #32]
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d102      	bne.n	8016f2a <etharp_query+0x10a>
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d10c      	bne.n	8016f44 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016f2a:	68b9      	ldr	r1, [r7, #8]
 8016f2c:	68f8      	ldr	r0, [r7, #12]
 8016f2e:	f000 f963 	bl	80171f8 <etharp_request>
 8016f32:	4603      	mov	r3, r0
 8016f34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d102      	bne.n	8016f44 <etharp_query+0x124>
      return result;
 8016f3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8016f42:	e096      	b.n	8017072 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d106      	bne.n	8016f58 <etharp_query+0x138>
 8016f4a:	4b4c      	ldr	r3, [pc, #304]	@ (801707c <etharp_query+0x25c>)
 8016f4c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8016f50:	494f      	ldr	r1, [pc, #316]	@ (8017090 <etharp_query+0x270>)
 8016f52:	484c      	ldr	r0, [pc, #304]	@ (8017084 <etharp_query+0x264>)
 8016f54:	f010 ffee 	bl	8027f34 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016f58:	7c7a      	ldrb	r2, [r7, #17]
 8016f5a:	494b      	ldr	r1, [pc, #300]	@ (8017088 <etharp_query+0x268>)
 8016f5c:	4613      	mov	r3, r2
 8016f5e:	005b      	lsls	r3, r3, #1
 8016f60:	4413      	add	r3, r2
 8016f62:	00db      	lsls	r3, r3, #3
 8016f64:	440b      	add	r3, r1
 8016f66:	3314      	adds	r3, #20
 8016f68:	781b      	ldrb	r3, [r3, #0]
 8016f6a:	2b01      	cmp	r3, #1
 8016f6c:	d917      	bls.n	8016f9e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016f6e:	4a49      	ldr	r2, [pc, #292]	@ (8017094 <etharp_query+0x274>)
 8016f70:	7c7b      	ldrb	r3, [r7, #17]
 8016f72:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016f74:	7c7a      	ldrb	r2, [r7, #17]
 8016f76:	4613      	mov	r3, r2
 8016f78:	005b      	lsls	r3, r3, #1
 8016f7a:	4413      	add	r3, r2
 8016f7c:	00db      	lsls	r3, r3, #3
 8016f7e:	3308      	adds	r3, #8
 8016f80:	4a41      	ldr	r2, [pc, #260]	@ (8017088 <etharp_query+0x268>)
 8016f82:	4413      	add	r3, r2
 8016f84:	3304      	adds	r3, #4
 8016f86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016f8a:	9200      	str	r2, [sp, #0]
 8016f8c:	697a      	ldr	r2, [r7, #20]
 8016f8e:	6879      	ldr	r1, [r7, #4]
 8016f90:	68f8      	ldr	r0, [r7, #12]
 8016f92:	f001 fdb3 	bl	8018afc <ethernet_output>
 8016f96:	4603      	mov	r3, r0
 8016f98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016f9c:	e067      	b.n	801706e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016f9e:	7c7a      	ldrb	r2, [r7, #17]
 8016fa0:	4939      	ldr	r1, [pc, #228]	@ (8017088 <etharp_query+0x268>)
 8016fa2:	4613      	mov	r3, r2
 8016fa4:	005b      	lsls	r3, r3, #1
 8016fa6:	4413      	add	r3, r2
 8016fa8:	00db      	lsls	r3, r3, #3
 8016faa:	440b      	add	r3, r1
 8016fac:	3314      	adds	r3, #20
 8016fae:	781b      	ldrb	r3, [r3, #0]
 8016fb0:	2b01      	cmp	r3, #1
 8016fb2:	d15c      	bne.n	801706e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016fbc:	e01c      	b.n	8016ff8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016fbe:	69fb      	ldr	r3, [r7, #28]
 8016fc0:	895a      	ldrh	r2, [r3, #10]
 8016fc2:	69fb      	ldr	r3, [r7, #28]
 8016fc4:	891b      	ldrh	r3, [r3, #8]
 8016fc6:	429a      	cmp	r2, r3
 8016fc8:	d10a      	bne.n	8016fe0 <etharp_query+0x1c0>
 8016fca:	69fb      	ldr	r3, [r7, #28]
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d006      	beq.n	8016fe0 <etharp_query+0x1c0>
 8016fd2:	4b2a      	ldr	r3, [pc, #168]	@ (801707c <etharp_query+0x25c>)
 8016fd4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8016fd8:	492f      	ldr	r1, [pc, #188]	@ (8017098 <etharp_query+0x278>)
 8016fda:	482a      	ldr	r0, [pc, #168]	@ (8017084 <etharp_query+0x264>)
 8016fdc:	f010 ffaa 	bl	8027f34 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016fe0:	69fb      	ldr	r3, [r7, #28]
 8016fe2:	7b1b      	ldrb	r3, [r3, #12]
 8016fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d002      	beq.n	8016ff2 <etharp_query+0x1d2>
        copy_needed = 1;
 8016fec:	2301      	movs	r3, #1
 8016fee:	61bb      	str	r3, [r7, #24]
        break;
 8016ff0:	e005      	b.n	8016ffe <etharp_query+0x1de>
      }
      p = p->next;
 8016ff2:	69fb      	ldr	r3, [r7, #28]
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016ff8:	69fb      	ldr	r3, [r7, #28]
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d1df      	bne.n	8016fbe <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016ffe:	69bb      	ldr	r3, [r7, #24]
 8017000:	2b00      	cmp	r3, #0
 8017002:	d007      	beq.n	8017014 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8017004:	687a      	ldr	r2, [r7, #4]
 8017006:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801700a:	200e      	movs	r0, #14
 801700c:	f7f8 fb38 	bl	800f680 <pbuf_clone>
 8017010:	61f8      	str	r0, [r7, #28]
 8017012:	e004      	b.n	801701e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017018:	69f8      	ldr	r0, [r7, #28]
 801701a:	f7f8 f95f 	bl	800f2dc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801701e:	69fb      	ldr	r3, [r7, #28]
 8017020:	2b00      	cmp	r3, #0
 8017022:	d021      	beq.n	8017068 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017024:	7c7a      	ldrb	r2, [r7, #17]
 8017026:	4918      	ldr	r1, [pc, #96]	@ (8017088 <etharp_query+0x268>)
 8017028:	4613      	mov	r3, r2
 801702a:	005b      	lsls	r3, r3, #1
 801702c:	4413      	add	r3, r2
 801702e:	00db      	lsls	r3, r3, #3
 8017030:	440b      	add	r3, r1
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	2b00      	cmp	r3, #0
 8017036:	d00a      	beq.n	801704e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017038:	7c7a      	ldrb	r2, [r7, #17]
 801703a:	4913      	ldr	r1, [pc, #76]	@ (8017088 <etharp_query+0x268>)
 801703c:	4613      	mov	r3, r2
 801703e:	005b      	lsls	r3, r3, #1
 8017040:	4413      	add	r3, r2
 8017042:	00db      	lsls	r3, r3, #3
 8017044:	440b      	add	r3, r1
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	4618      	mov	r0, r3
 801704a:	f7f8 f8a1 	bl	800f190 <pbuf_free>
      }
      arp_table[i].q = p;
 801704e:	7c7a      	ldrb	r2, [r7, #17]
 8017050:	490d      	ldr	r1, [pc, #52]	@ (8017088 <etharp_query+0x268>)
 8017052:	4613      	mov	r3, r2
 8017054:	005b      	lsls	r3, r3, #1
 8017056:	4413      	add	r3, r2
 8017058:	00db      	lsls	r3, r3, #3
 801705a:	440b      	add	r3, r1
 801705c:	69fa      	ldr	r2, [r7, #28]
 801705e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017060:	2300      	movs	r3, #0
 8017062:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017066:	e002      	b.n	801706e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017068:	23ff      	movs	r3, #255	@ 0xff
 801706a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801706e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8017072:	4618      	mov	r0, r3
 8017074:	3728      	adds	r7, #40	@ 0x28
 8017076:	46bd      	mov	sp, r7
 8017078:	bd80      	pop	{r7, pc}
 801707a:	bf00      	nop
 801707c:	0802c584 	.word	0x0802c584
 8017080:	0802c730 	.word	0x0802c730
 8017084:	0802c5fc 	.word	0x0802c5fc
 8017088:	20010364 	.word	0x20010364
 801708c:	0802c740 	.word	0x0802c740
 8017090:	0802c724 	.word	0x0802c724
 8017094:	20010454 	.word	0x20010454
 8017098:	0802c768 	.word	0x0802c768

0801709c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801709c:	b580      	push	{r7, lr}
 801709e:	b08a      	sub	sp, #40	@ 0x28
 80170a0:	af02      	add	r7, sp, #8
 80170a2:	60f8      	str	r0, [r7, #12]
 80170a4:	60b9      	str	r1, [r7, #8]
 80170a6:	607a      	str	r2, [r7, #4]
 80170a8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80170aa:	2300      	movs	r3, #0
 80170ac:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d106      	bne.n	80170c2 <etharp_raw+0x26>
 80170b4:	4b3a      	ldr	r3, [pc, #232]	@ (80171a0 <etharp_raw+0x104>)
 80170b6:	f240 4257 	movw	r2, #1111	@ 0x457
 80170ba:	493a      	ldr	r1, [pc, #232]	@ (80171a4 <etharp_raw+0x108>)
 80170bc:	483a      	ldr	r0, [pc, #232]	@ (80171a8 <etharp_raw+0x10c>)
 80170be:	f010 ff39 	bl	8027f34 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80170c2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80170c6:	211c      	movs	r1, #28
 80170c8:	200e      	movs	r0, #14
 80170ca:	f7f7 fd4b 	bl	800eb64 <pbuf_alloc>
 80170ce:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80170d0:	69bb      	ldr	r3, [r7, #24]
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d102      	bne.n	80170dc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80170d6:	f04f 33ff 	mov.w	r3, #4294967295
 80170da:	e05d      	b.n	8017198 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80170dc:	69bb      	ldr	r3, [r7, #24]
 80170de:	895b      	ldrh	r3, [r3, #10]
 80170e0:	2b1b      	cmp	r3, #27
 80170e2:	d806      	bhi.n	80170f2 <etharp_raw+0x56>
 80170e4:	4b2e      	ldr	r3, [pc, #184]	@ (80171a0 <etharp_raw+0x104>)
 80170e6:	f240 4262 	movw	r2, #1122	@ 0x462
 80170ea:	4930      	ldr	r1, [pc, #192]	@ (80171ac <etharp_raw+0x110>)
 80170ec:	482e      	ldr	r0, [pc, #184]	@ (80171a8 <etharp_raw+0x10c>)
 80170ee:	f010 ff21 	bl	8027f34 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80170f2:	69bb      	ldr	r3, [r7, #24]
 80170f4:	685b      	ldr	r3, [r3, #4]
 80170f6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80170f8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80170fa:	4618      	mov	r0, r3
 80170fc:	f7f6 fbf0 	bl	800d8e0 <lwip_htons>
 8017100:	4603      	mov	r3, r0
 8017102:	461a      	mov	r2, r3
 8017104:	697b      	ldr	r3, [r7, #20]
 8017106:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801710e:	2b06      	cmp	r3, #6
 8017110:	d006      	beq.n	8017120 <etharp_raw+0x84>
 8017112:	4b23      	ldr	r3, [pc, #140]	@ (80171a0 <etharp_raw+0x104>)
 8017114:	f240 4269 	movw	r2, #1129	@ 0x469
 8017118:	4925      	ldr	r1, [pc, #148]	@ (80171b0 <etharp_raw+0x114>)
 801711a:	4823      	ldr	r0, [pc, #140]	@ (80171a8 <etharp_raw+0x10c>)
 801711c:	f010 ff0a 	bl	8027f34 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017120:	697b      	ldr	r3, [r7, #20]
 8017122:	3308      	adds	r3, #8
 8017124:	2206      	movs	r2, #6
 8017126:	6839      	ldr	r1, [r7, #0]
 8017128:	4618      	mov	r0, r3
 801712a:	f011 f9b0 	bl	802848e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801712e:	697b      	ldr	r3, [r7, #20]
 8017130:	3312      	adds	r3, #18
 8017132:	2206      	movs	r2, #6
 8017134:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017136:	4618      	mov	r0, r3
 8017138:	f011 f9a9 	bl	802848e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801713c:	697b      	ldr	r3, [r7, #20]
 801713e:	330e      	adds	r3, #14
 8017140:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017142:	6812      	ldr	r2, [r2, #0]
 8017144:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017146:	697b      	ldr	r3, [r7, #20]
 8017148:	3318      	adds	r3, #24
 801714a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801714c:	6812      	ldr	r2, [r2, #0]
 801714e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017150:	697b      	ldr	r3, [r7, #20]
 8017152:	2200      	movs	r2, #0
 8017154:	701a      	strb	r2, [r3, #0]
 8017156:	2200      	movs	r2, #0
 8017158:	f042 0201 	orr.w	r2, r2, #1
 801715c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801715e:	697b      	ldr	r3, [r7, #20]
 8017160:	2200      	movs	r2, #0
 8017162:	f042 0208 	orr.w	r2, r2, #8
 8017166:	709a      	strb	r2, [r3, #2]
 8017168:	2200      	movs	r2, #0
 801716a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801716c:	697b      	ldr	r3, [r7, #20]
 801716e:	2206      	movs	r2, #6
 8017170:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017172:	697b      	ldr	r3, [r7, #20]
 8017174:	2204      	movs	r2, #4
 8017176:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017178:	f640 0306 	movw	r3, #2054	@ 0x806
 801717c:	9300      	str	r3, [sp, #0]
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	68ba      	ldr	r2, [r7, #8]
 8017182:	69b9      	ldr	r1, [r7, #24]
 8017184:	68f8      	ldr	r0, [r7, #12]
 8017186:	f001 fcb9 	bl	8018afc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801718a:	69b8      	ldr	r0, [r7, #24]
 801718c:	f7f8 f800 	bl	800f190 <pbuf_free>
  p = NULL;
 8017190:	2300      	movs	r3, #0
 8017192:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017194:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017198:	4618      	mov	r0, r3
 801719a:	3720      	adds	r7, #32
 801719c:	46bd      	mov	sp, r7
 801719e:	bd80      	pop	{r7, pc}
 80171a0:	0802c584 	.word	0x0802c584
 80171a4:	0802c6d4 	.word	0x0802c6d4
 80171a8:	0802c5fc 	.word	0x0802c5fc
 80171ac:	0802c784 	.word	0x0802c784
 80171b0:	0802c7b8 	.word	0x0802c7b8

080171b4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80171b4:	b580      	push	{r7, lr}
 80171b6:	b088      	sub	sp, #32
 80171b8:	af04      	add	r7, sp, #16
 80171ba:	60f8      	str	r0, [r7, #12]
 80171bc:	60b9      	str	r1, [r7, #8]
 80171be:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80171d0:	2201      	movs	r2, #1
 80171d2:	9203      	str	r2, [sp, #12]
 80171d4:	68ba      	ldr	r2, [r7, #8]
 80171d6:	9202      	str	r2, [sp, #8]
 80171d8:	4a06      	ldr	r2, [pc, #24]	@ (80171f4 <etharp_request_dst+0x40>)
 80171da:	9201      	str	r2, [sp, #4]
 80171dc:	9300      	str	r3, [sp, #0]
 80171de:	4603      	mov	r3, r0
 80171e0:	687a      	ldr	r2, [r7, #4]
 80171e2:	68f8      	ldr	r0, [r7, #12]
 80171e4:	f7ff ff5a 	bl	801709c <etharp_raw>
 80171e8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80171ea:	4618      	mov	r0, r3
 80171ec:	3710      	adds	r7, #16
 80171ee:	46bd      	mov	sp, r7
 80171f0:	bd80      	pop	{r7, pc}
 80171f2:	bf00      	nop
 80171f4:	0802ce60 	.word	0x0802ce60

080171f8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80171f8:	b580      	push	{r7, lr}
 80171fa:	b082      	sub	sp, #8
 80171fc:	af00      	add	r7, sp, #0
 80171fe:	6078      	str	r0, [r7, #4]
 8017200:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017202:	4a05      	ldr	r2, [pc, #20]	@ (8017218 <etharp_request+0x20>)
 8017204:	6839      	ldr	r1, [r7, #0]
 8017206:	6878      	ldr	r0, [r7, #4]
 8017208:	f7ff ffd4 	bl	80171b4 <etharp_request_dst>
 801720c:	4603      	mov	r3, r0
}
 801720e:	4618      	mov	r0, r3
 8017210:	3708      	adds	r7, #8
 8017212:	46bd      	mov	sp, r7
 8017214:	bd80      	pop	{r7, pc}
 8017216:	bf00      	nop
 8017218:	0802ce58 	.word	0x0802ce58

0801721c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801721c:	b580      	push	{r7, lr}
 801721e:	b08e      	sub	sp, #56	@ 0x38
 8017220:	af04      	add	r7, sp, #16
 8017222:	6078      	str	r0, [r7, #4]
 8017224:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017226:	4b79      	ldr	r3, [pc, #484]	@ (801740c <icmp_input+0x1f0>)
 8017228:	689b      	ldr	r3, [r3, #8]
 801722a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801722c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801722e:	781b      	ldrb	r3, [r3, #0]
 8017230:	f003 030f 	and.w	r3, r3, #15
 8017234:	b2db      	uxtb	r3, r3
 8017236:	009b      	lsls	r3, r3, #2
 8017238:	b2db      	uxtb	r3, r3
 801723a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801723c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801723e:	2b13      	cmp	r3, #19
 8017240:	f240 80cd 	bls.w	80173de <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	895b      	ldrh	r3, [r3, #10]
 8017248:	2b03      	cmp	r3, #3
 801724a:	f240 80ca 	bls.w	80173e2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	685b      	ldr	r3, [r3, #4]
 8017252:	781b      	ldrb	r3, [r3, #0]
 8017254:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017258:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801725c:	2b00      	cmp	r3, #0
 801725e:	f000 80b7 	beq.w	80173d0 <icmp_input+0x1b4>
 8017262:	2b08      	cmp	r3, #8
 8017264:	f040 80b7 	bne.w	80173d6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017268:	4b69      	ldr	r3, [pc, #420]	@ (8017410 <icmp_input+0x1f4>)
 801726a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801726c:	4b67      	ldr	r3, [pc, #412]	@ (801740c <icmp_input+0x1f0>)
 801726e:	695b      	ldr	r3, [r3, #20]
 8017270:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017274:	2be0      	cmp	r3, #224	@ 0xe0
 8017276:	f000 80bb 	beq.w	80173f0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801727a:	4b64      	ldr	r3, [pc, #400]	@ (801740c <icmp_input+0x1f0>)
 801727c:	695b      	ldr	r3, [r3, #20]
 801727e:	4a63      	ldr	r2, [pc, #396]	@ (801740c <icmp_input+0x1f0>)
 8017280:	6812      	ldr	r2, [r2, #0]
 8017282:	4611      	mov	r1, r2
 8017284:	4618      	mov	r0, r3
 8017286:	f000 fbed 	bl	8017a64 <ip4_addr_isbroadcast_u32>
 801728a:	4603      	mov	r3, r0
 801728c:	2b00      	cmp	r3, #0
 801728e:	f040 80b1 	bne.w	80173f4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	891b      	ldrh	r3, [r3, #8]
 8017296:	2b07      	cmp	r3, #7
 8017298:	f240 80a5 	bls.w	80173e6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801729c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801729e:	330e      	adds	r3, #14
 80172a0:	4619      	mov	r1, r3
 80172a2:	6878      	ldr	r0, [r7, #4]
 80172a4:	f7f7 feac 	bl	800f000 <pbuf_add_header>
 80172a8:	4603      	mov	r3, r0
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d04b      	beq.n	8017346 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	891a      	ldrh	r2, [r3, #8]
 80172b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80172b4:	4413      	add	r3, r2
 80172b6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	891b      	ldrh	r3, [r3, #8]
 80172bc:	8b7a      	ldrh	r2, [r7, #26]
 80172be:	429a      	cmp	r2, r3
 80172c0:	f0c0 809a 	bcc.w	80173f8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80172c4:	8b7b      	ldrh	r3, [r7, #26]
 80172c6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80172ca:	4619      	mov	r1, r3
 80172cc:	200e      	movs	r0, #14
 80172ce:	f7f7 fc49 	bl	800eb64 <pbuf_alloc>
 80172d2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80172d4:	697b      	ldr	r3, [r7, #20]
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	f000 8090 	beq.w	80173fc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80172dc:	697b      	ldr	r3, [r7, #20]
 80172de:	895b      	ldrh	r3, [r3, #10]
 80172e0:	461a      	mov	r2, r3
 80172e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80172e4:	3308      	adds	r3, #8
 80172e6:	429a      	cmp	r2, r3
 80172e8:	d203      	bcs.n	80172f2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80172ea:	6978      	ldr	r0, [r7, #20]
 80172ec:	f7f7 ff50 	bl	800f190 <pbuf_free>
          goto icmperr;
 80172f0:	e085      	b.n	80173fe <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80172f2:	697b      	ldr	r3, [r7, #20]
 80172f4:	685b      	ldr	r3, [r3, #4]
 80172f6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80172f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80172fa:	4618      	mov	r0, r3
 80172fc:	f011 f8c7 	bl	802848e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017300:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017302:	4619      	mov	r1, r3
 8017304:	6978      	ldr	r0, [r7, #20]
 8017306:	f7f7 fe8b 	bl	800f020 <pbuf_remove_header>
 801730a:	4603      	mov	r3, r0
 801730c:	2b00      	cmp	r3, #0
 801730e:	d009      	beq.n	8017324 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017310:	4b40      	ldr	r3, [pc, #256]	@ (8017414 <icmp_input+0x1f8>)
 8017312:	22b6      	movs	r2, #182	@ 0xb6
 8017314:	4940      	ldr	r1, [pc, #256]	@ (8017418 <icmp_input+0x1fc>)
 8017316:	4841      	ldr	r0, [pc, #260]	@ (801741c <icmp_input+0x200>)
 8017318:	f010 fe0c 	bl	8027f34 <iprintf>
          pbuf_free(r);
 801731c:	6978      	ldr	r0, [r7, #20]
 801731e:	f7f7 ff37 	bl	800f190 <pbuf_free>
          goto icmperr;
 8017322:	e06c      	b.n	80173fe <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017324:	6879      	ldr	r1, [r7, #4]
 8017326:	6978      	ldr	r0, [r7, #20]
 8017328:	f7f8 f866 	bl	800f3f8 <pbuf_copy>
 801732c:	4603      	mov	r3, r0
 801732e:	2b00      	cmp	r3, #0
 8017330:	d003      	beq.n	801733a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8017332:	6978      	ldr	r0, [r7, #20]
 8017334:	f7f7 ff2c 	bl	800f190 <pbuf_free>
          goto icmperr;
 8017338:	e061      	b.n	80173fe <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801733a:	6878      	ldr	r0, [r7, #4]
 801733c:	f7f7 ff28 	bl	800f190 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017340:	697b      	ldr	r3, [r7, #20]
 8017342:	607b      	str	r3, [r7, #4]
 8017344:	e00f      	b.n	8017366 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017346:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017348:	330e      	adds	r3, #14
 801734a:	4619      	mov	r1, r3
 801734c:	6878      	ldr	r0, [r7, #4]
 801734e:	f7f7 fe67 	bl	800f020 <pbuf_remove_header>
 8017352:	4603      	mov	r3, r0
 8017354:	2b00      	cmp	r3, #0
 8017356:	d006      	beq.n	8017366 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017358:	4b2e      	ldr	r3, [pc, #184]	@ (8017414 <icmp_input+0x1f8>)
 801735a:	22c7      	movs	r2, #199	@ 0xc7
 801735c:	4930      	ldr	r1, [pc, #192]	@ (8017420 <icmp_input+0x204>)
 801735e:	482f      	ldr	r0, [pc, #188]	@ (801741c <icmp_input+0x200>)
 8017360:	f010 fde8 	bl	8027f34 <iprintf>
          goto icmperr;
 8017364:	e04b      	b.n	80173fe <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	685b      	ldr	r3, [r3, #4]
 801736a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801736c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801736e:	4619      	mov	r1, r3
 8017370:	6878      	ldr	r0, [r7, #4]
 8017372:	f7f7 fe45 	bl	800f000 <pbuf_add_header>
 8017376:	4603      	mov	r3, r0
 8017378:	2b00      	cmp	r3, #0
 801737a:	d12b      	bne.n	80173d4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	685b      	ldr	r3, [r3, #4]
 8017380:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017382:	69fb      	ldr	r3, [r7, #28]
 8017384:	681a      	ldr	r2, [r3, #0]
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801738a:	4b20      	ldr	r3, [pc, #128]	@ (801740c <icmp_input+0x1f0>)
 801738c:	691a      	ldr	r2, [r3, #16]
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017392:	693b      	ldr	r3, [r7, #16]
 8017394:	2200      	movs	r2, #0
 8017396:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8017398:	693b      	ldr	r3, [r7, #16]
 801739a:	2200      	movs	r2, #0
 801739c:	709a      	strb	r2, [r3, #2]
 801739e:	2200      	movs	r2, #0
 80173a0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80173a2:	68fb      	ldr	r3, [r7, #12]
 80173a4:	22ff      	movs	r2, #255	@ 0xff
 80173a6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	2200      	movs	r2, #0
 80173ac:	729a      	strb	r2, [r3, #10]
 80173ae:	2200      	movs	r2, #0
 80173b0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80173b2:	683b      	ldr	r3, [r7, #0]
 80173b4:	9302      	str	r3, [sp, #8]
 80173b6:	2301      	movs	r3, #1
 80173b8:	9301      	str	r3, [sp, #4]
 80173ba:	2300      	movs	r3, #0
 80173bc:	9300      	str	r3, [sp, #0]
 80173be:	23ff      	movs	r3, #255	@ 0xff
 80173c0:	2200      	movs	r2, #0
 80173c2:	69f9      	ldr	r1, [r7, #28]
 80173c4:	6878      	ldr	r0, [r7, #4]
 80173c6:	f000 fa75 	bl	80178b4 <ip4_output_if>
 80173ca:	4603      	mov	r3, r0
 80173cc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80173ce:	e001      	b.n	80173d4 <icmp_input+0x1b8>
      break;
 80173d0:	bf00      	nop
 80173d2:	e000      	b.n	80173d6 <icmp_input+0x1ba>
      break;
 80173d4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80173d6:	6878      	ldr	r0, [r7, #4]
 80173d8:	f7f7 feda 	bl	800f190 <pbuf_free>
  return;
 80173dc:	e013      	b.n	8017406 <icmp_input+0x1ea>
    goto lenerr;
 80173de:	bf00      	nop
 80173e0:	e002      	b.n	80173e8 <icmp_input+0x1cc>
    goto lenerr;
 80173e2:	bf00      	nop
 80173e4:	e000      	b.n	80173e8 <icmp_input+0x1cc>
        goto lenerr;
 80173e6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80173e8:	6878      	ldr	r0, [r7, #4]
 80173ea:	f7f7 fed1 	bl	800f190 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80173ee:	e00a      	b.n	8017406 <icmp_input+0x1ea>
        goto icmperr;
 80173f0:	bf00      	nop
 80173f2:	e004      	b.n	80173fe <icmp_input+0x1e2>
        goto icmperr;
 80173f4:	bf00      	nop
 80173f6:	e002      	b.n	80173fe <icmp_input+0x1e2>
          goto icmperr;
 80173f8:	bf00      	nop
 80173fa:	e000      	b.n	80173fe <icmp_input+0x1e2>
          goto icmperr;
 80173fc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80173fe:	6878      	ldr	r0, [r7, #4]
 8017400:	f7f7 fec6 	bl	800f190 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017404:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017406:	3728      	adds	r7, #40	@ 0x28
 8017408:	46bd      	mov	sp, r7
 801740a:	bd80      	pop	{r7, pc}
 801740c:	2000d094 	.word	0x2000d094
 8017410:	2000d0a8 	.word	0x2000d0a8
 8017414:	0802c7fc 	.word	0x0802c7fc
 8017418:	0802c834 	.word	0x0802c834
 801741c:	0802c86c 	.word	0x0802c86c
 8017420:	0802c894 	.word	0x0802c894

08017424 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017424:	b580      	push	{r7, lr}
 8017426:	b082      	sub	sp, #8
 8017428:	af00      	add	r7, sp, #0
 801742a:	6078      	str	r0, [r7, #4]
 801742c:	460b      	mov	r3, r1
 801742e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017430:	78fb      	ldrb	r3, [r7, #3]
 8017432:	461a      	mov	r2, r3
 8017434:	2103      	movs	r1, #3
 8017436:	6878      	ldr	r0, [r7, #4]
 8017438:	f000 f814 	bl	8017464 <icmp_send_response>
}
 801743c:	bf00      	nop
 801743e:	3708      	adds	r7, #8
 8017440:	46bd      	mov	sp, r7
 8017442:	bd80      	pop	{r7, pc}

08017444 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017444:	b580      	push	{r7, lr}
 8017446:	b082      	sub	sp, #8
 8017448:	af00      	add	r7, sp, #0
 801744a:	6078      	str	r0, [r7, #4]
 801744c:	460b      	mov	r3, r1
 801744e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017450:	78fb      	ldrb	r3, [r7, #3]
 8017452:	461a      	mov	r2, r3
 8017454:	210b      	movs	r1, #11
 8017456:	6878      	ldr	r0, [r7, #4]
 8017458:	f000 f804 	bl	8017464 <icmp_send_response>
}
 801745c:	bf00      	nop
 801745e:	3708      	adds	r7, #8
 8017460:	46bd      	mov	sp, r7
 8017462:	bd80      	pop	{r7, pc}

08017464 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017464:	b580      	push	{r7, lr}
 8017466:	b08c      	sub	sp, #48	@ 0x30
 8017468:	af04      	add	r7, sp, #16
 801746a:	6078      	str	r0, [r7, #4]
 801746c:	460b      	mov	r3, r1
 801746e:	70fb      	strb	r3, [r7, #3]
 8017470:	4613      	mov	r3, r2
 8017472:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017474:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017478:	2124      	movs	r1, #36	@ 0x24
 801747a:	2022      	movs	r0, #34	@ 0x22
 801747c:	f7f7 fb72 	bl	800eb64 <pbuf_alloc>
 8017480:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017482:	69fb      	ldr	r3, [r7, #28]
 8017484:	2b00      	cmp	r3, #0
 8017486:	d04c      	beq.n	8017522 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017488:	69fb      	ldr	r3, [r7, #28]
 801748a:	895b      	ldrh	r3, [r3, #10]
 801748c:	2b23      	cmp	r3, #35	@ 0x23
 801748e:	d806      	bhi.n	801749e <icmp_send_response+0x3a>
 8017490:	4b26      	ldr	r3, [pc, #152]	@ (801752c <icmp_send_response+0xc8>)
 8017492:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8017496:	4926      	ldr	r1, [pc, #152]	@ (8017530 <icmp_send_response+0xcc>)
 8017498:	4826      	ldr	r0, [pc, #152]	@ (8017534 <icmp_send_response+0xd0>)
 801749a:	f010 fd4b 	bl	8027f34 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	685b      	ldr	r3, [r3, #4]
 80174a2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80174a4:	69fb      	ldr	r3, [r7, #28]
 80174a6:	685b      	ldr	r3, [r3, #4]
 80174a8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80174aa:	697b      	ldr	r3, [r7, #20]
 80174ac:	78fa      	ldrb	r2, [r7, #3]
 80174ae:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80174b0:	697b      	ldr	r3, [r7, #20]
 80174b2:	78ba      	ldrb	r2, [r7, #2]
 80174b4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80174b6:	697b      	ldr	r3, [r7, #20]
 80174b8:	2200      	movs	r2, #0
 80174ba:	711a      	strb	r2, [r3, #4]
 80174bc:	2200      	movs	r2, #0
 80174be:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80174c0:	697b      	ldr	r3, [r7, #20]
 80174c2:	2200      	movs	r2, #0
 80174c4:	719a      	strb	r2, [r3, #6]
 80174c6:	2200      	movs	r2, #0
 80174c8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80174ca:	69fb      	ldr	r3, [r7, #28]
 80174cc:	685b      	ldr	r3, [r3, #4]
 80174ce:	f103 0008 	add.w	r0, r3, #8
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	685b      	ldr	r3, [r3, #4]
 80174d6:	221c      	movs	r2, #28
 80174d8:	4619      	mov	r1, r3
 80174da:	f010 ffd8 	bl	802848e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80174de:	69bb      	ldr	r3, [r7, #24]
 80174e0:	68db      	ldr	r3, [r3, #12]
 80174e2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80174e4:	f107 030c 	add.w	r3, r7, #12
 80174e8:	4618      	mov	r0, r3
 80174ea:	f000 f825 	bl	8017538 <ip4_route>
 80174ee:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80174f0:	693b      	ldr	r3, [r7, #16]
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d011      	beq.n	801751a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80174f6:	697b      	ldr	r3, [r7, #20]
 80174f8:	2200      	movs	r2, #0
 80174fa:	709a      	strb	r2, [r3, #2]
 80174fc:	2200      	movs	r2, #0
 80174fe:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017500:	f107 020c 	add.w	r2, r7, #12
 8017504:	693b      	ldr	r3, [r7, #16]
 8017506:	9302      	str	r3, [sp, #8]
 8017508:	2301      	movs	r3, #1
 801750a:	9301      	str	r3, [sp, #4]
 801750c:	2300      	movs	r3, #0
 801750e:	9300      	str	r3, [sp, #0]
 8017510:	23ff      	movs	r3, #255	@ 0xff
 8017512:	2100      	movs	r1, #0
 8017514:	69f8      	ldr	r0, [r7, #28]
 8017516:	f000 f9cd 	bl	80178b4 <ip4_output_if>
  }
  pbuf_free(q);
 801751a:	69f8      	ldr	r0, [r7, #28]
 801751c:	f7f7 fe38 	bl	800f190 <pbuf_free>
 8017520:	e000      	b.n	8017524 <icmp_send_response+0xc0>
    return;
 8017522:	bf00      	nop
}
 8017524:	3720      	adds	r7, #32
 8017526:	46bd      	mov	sp, r7
 8017528:	bd80      	pop	{r7, pc}
 801752a:	bf00      	nop
 801752c:	0802c7fc 	.word	0x0802c7fc
 8017530:	0802c8c8 	.word	0x0802c8c8
 8017534:	0802c86c 	.word	0x0802c86c

08017538 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017538:	b480      	push	{r7}
 801753a:	b085      	sub	sp, #20
 801753c:	af00      	add	r7, sp, #0
 801753e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017540:	4b33      	ldr	r3, [pc, #204]	@ (8017610 <ip4_route+0xd8>)
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	60fb      	str	r3, [r7, #12]
 8017546:	e036      	b.n	80175b6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801754e:	f003 0301 	and.w	r3, r3, #1
 8017552:	b2db      	uxtb	r3, r3
 8017554:	2b00      	cmp	r3, #0
 8017556:	d02b      	beq.n	80175b0 <ip4_route+0x78>
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801755e:	089b      	lsrs	r3, r3, #2
 8017560:	f003 0301 	and.w	r3, r3, #1
 8017564:	b2db      	uxtb	r3, r3
 8017566:	2b00      	cmp	r3, #0
 8017568:	d022      	beq.n	80175b0 <ip4_route+0x78>
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	3304      	adds	r3, #4
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	2b00      	cmp	r3, #0
 8017572:	d01d      	beq.n	80175b0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	681a      	ldr	r2, [r3, #0]
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	3304      	adds	r3, #4
 801757c:	681b      	ldr	r3, [r3, #0]
 801757e:	405a      	eors	r2, r3
 8017580:	68fb      	ldr	r3, [r7, #12]
 8017582:	3308      	adds	r3, #8
 8017584:	681b      	ldr	r3, [r3, #0]
 8017586:	4013      	ands	r3, r2
 8017588:	2b00      	cmp	r3, #0
 801758a:	d101      	bne.n	8017590 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801758c:	68fb      	ldr	r3, [r7, #12]
 801758e:	e038      	b.n	8017602 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017590:	68fb      	ldr	r3, [r7, #12]
 8017592:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017596:	f003 0302 	and.w	r3, r3, #2
 801759a:	2b00      	cmp	r3, #0
 801759c:	d108      	bne.n	80175b0 <ip4_route+0x78>
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	681a      	ldr	r2, [r3, #0]
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	330c      	adds	r3, #12
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	429a      	cmp	r2, r3
 80175aa:	d101      	bne.n	80175b0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80175ac:	68fb      	ldr	r3, [r7, #12]
 80175ae:	e028      	b.n	8017602 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	60fb      	str	r3, [r7, #12]
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d1c5      	bne.n	8017548 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80175bc:	4b15      	ldr	r3, [pc, #84]	@ (8017614 <ip4_route+0xdc>)
 80175be:	681b      	ldr	r3, [r3, #0]
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d01a      	beq.n	80175fa <ip4_route+0xc2>
 80175c4:	4b13      	ldr	r3, [pc, #76]	@ (8017614 <ip4_route+0xdc>)
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80175cc:	f003 0301 	and.w	r3, r3, #1
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d012      	beq.n	80175fa <ip4_route+0xc2>
 80175d4:	4b0f      	ldr	r3, [pc, #60]	@ (8017614 <ip4_route+0xdc>)
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80175dc:	f003 0304 	and.w	r3, r3, #4
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d00a      	beq.n	80175fa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80175e4:	4b0b      	ldr	r3, [pc, #44]	@ (8017614 <ip4_route+0xdc>)
 80175e6:	681b      	ldr	r3, [r3, #0]
 80175e8:	3304      	adds	r3, #4
 80175ea:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d004      	beq.n	80175fa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	681b      	ldr	r3, [r3, #0]
 80175f4:	b2db      	uxtb	r3, r3
 80175f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80175f8:	d101      	bne.n	80175fe <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80175fa:	2300      	movs	r3, #0
 80175fc:	e001      	b.n	8017602 <ip4_route+0xca>
  }

  return netif_default;
 80175fe:	4b05      	ldr	r3, [pc, #20]	@ (8017614 <ip4_route+0xdc>)
 8017600:	681b      	ldr	r3, [r3, #0]
}
 8017602:	4618      	mov	r0, r3
 8017604:	3714      	adds	r7, #20
 8017606:	46bd      	mov	sp, r7
 8017608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801760c:	4770      	bx	lr
 801760e:	bf00      	nop
 8017610:	200102f8 	.word	0x200102f8
 8017614:	200102fc 	.word	0x200102fc

08017618 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017618:	b580      	push	{r7, lr}
 801761a:	b082      	sub	sp, #8
 801761c:	af00      	add	r7, sp, #0
 801761e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017626:	f003 0301 	and.w	r3, r3, #1
 801762a:	b2db      	uxtb	r3, r3
 801762c:	2b00      	cmp	r3, #0
 801762e:	d016      	beq.n	801765e <ip4_input_accept+0x46>
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	3304      	adds	r3, #4
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	2b00      	cmp	r3, #0
 8017638:	d011      	beq.n	801765e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801763a:	4b0b      	ldr	r3, [pc, #44]	@ (8017668 <ip4_input_accept+0x50>)
 801763c:	695a      	ldr	r2, [r3, #20]
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	3304      	adds	r3, #4
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	429a      	cmp	r2, r3
 8017646:	d008      	beq.n	801765a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017648:	4b07      	ldr	r3, [pc, #28]	@ (8017668 <ip4_input_accept+0x50>)
 801764a:	695b      	ldr	r3, [r3, #20]
 801764c:	6879      	ldr	r1, [r7, #4]
 801764e:	4618      	mov	r0, r3
 8017650:	f000 fa08 	bl	8017a64 <ip4_addr_isbroadcast_u32>
 8017654:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017656:	2b00      	cmp	r3, #0
 8017658:	d001      	beq.n	801765e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801765a:	2301      	movs	r3, #1
 801765c:	e000      	b.n	8017660 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801765e:	2300      	movs	r3, #0
}
 8017660:	4618      	mov	r0, r3
 8017662:	3708      	adds	r7, #8
 8017664:	46bd      	mov	sp, r7
 8017666:	bd80      	pop	{r7, pc}
 8017668:	2000d094 	.word	0x2000d094

0801766c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801766c:	b580      	push	{r7, lr}
 801766e:	b086      	sub	sp, #24
 8017670:	af00      	add	r7, sp, #0
 8017672:	6078      	str	r0, [r7, #4]
 8017674:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	685b      	ldr	r3, [r3, #4]
 801767a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801767c:	697b      	ldr	r3, [r7, #20]
 801767e:	781b      	ldrb	r3, [r3, #0]
 8017680:	091b      	lsrs	r3, r3, #4
 8017682:	b2db      	uxtb	r3, r3
 8017684:	2b04      	cmp	r3, #4
 8017686:	d004      	beq.n	8017692 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017688:	6878      	ldr	r0, [r7, #4]
 801768a:	f7f7 fd81 	bl	800f190 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801768e:	2300      	movs	r3, #0
 8017690:	e107      	b.n	80178a2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017692:	697b      	ldr	r3, [r7, #20]
 8017694:	781b      	ldrb	r3, [r3, #0]
 8017696:	f003 030f 	and.w	r3, r3, #15
 801769a:	b2db      	uxtb	r3, r3
 801769c:	009b      	lsls	r3, r3, #2
 801769e:	b2db      	uxtb	r3, r3
 80176a0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80176a2:	697b      	ldr	r3, [r7, #20]
 80176a4:	885b      	ldrh	r3, [r3, #2]
 80176a6:	b29b      	uxth	r3, r3
 80176a8:	4618      	mov	r0, r3
 80176aa:	f7f6 f919 	bl	800d8e0 <lwip_htons>
 80176ae:	4603      	mov	r3, r0
 80176b0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	891b      	ldrh	r3, [r3, #8]
 80176b6:	89ba      	ldrh	r2, [r7, #12]
 80176b8:	429a      	cmp	r2, r3
 80176ba:	d204      	bcs.n	80176c6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80176bc:	89bb      	ldrh	r3, [r7, #12]
 80176be:	4619      	mov	r1, r3
 80176c0:	6878      	ldr	r0, [r7, #4]
 80176c2:	f7f7 fbad 	bl	800ee20 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	895b      	ldrh	r3, [r3, #10]
 80176ca:	89fa      	ldrh	r2, [r7, #14]
 80176cc:	429a      	cmp	r2, r3
 80176ce:	d807      	bhi.n	80176e0 <ip4_input+0x74>
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	891b      	ldrh	r3, [r3, #8]
 80176d4:	89ba      	ldrh	r2, [r7, #12]
 80176d6:	429a      	cmp	r2, r3
 80176d8:	d802      	bhi.n	80176e0 <ip4_input+0x74>
 80176da:	89fb      	ldrh	r3, [r7, #14]
 80176dc:	2b13      	cmp	r3, #19
 80176de:	d804      	bhi.n	80176ea <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80176e0:	6878      	ldr	r0, [r7, #4]
 80176e2:	f7f7 fd55 	bl	800f190 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80176e6:	2300      	movs	r3, #0
 80176e8:	e0db      	b.n	80178a2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80176ea:	697b      	ldr	r3, [r7, #20]
 80176ec:	691b      	ldr	r3, [r3, #16]
 80176ee:	4a6f      	ldr	r2, [pc, #444]	@ (80178ac <ip4_input+0x240>)
 80176f0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80176f2:	697b      	ldr	r3, [r7, #20]
 80176f4:	68db      	ldr	r3, [r3, #12]
 80176f6:	4a6d      	ldr	r2, [pc, #436]	@ (80178ac <ip4_input+0x240>)
 80176f8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80176fa:	4b6c      	ldr	r3, [pc, #432]	@ (80178ac <ip4_input+0x240>)
 80176fc:	695b      	ldr	r3, [r3, #20]
 80176fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017702:	2be0      	cmp	r3, #224	@ 0xe0
 8017704:	d112      	bne.n	801772c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017706:	683b      	ldr	r3, [r7, #0]
 8017708:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801770c:	f003 0301 	and.w	r3, r3, #1
 8017710:	b2db      	uxtb	r3, r3
 8017712:	2b00      	cmp	r3, #0
 8017714:	d007      	beq.n	8017726 <ip4_input+0xba>
 8017716:	683b      	ldr	r3, [r7, #0]
 8017718:	3304      	adds	r3, #4
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	2b00      	cmp	r3, #0
 801771e:	d002      	beq.n	8017726 <ip4_input+0xba>
      netif = inp;
 8017720:	683b      	ldr	r3, [r7, #0]
 8017722:	613b      	str	r3, [r7, #16]
 8017724:	e02a      	b.n	801777c <ip4_input+0x110>
    } else {
      netif = NULL;
 8017726:	2300      	movs	r3, #0
 8017728:	613b      	str	r3, [r7, #16]
 801772a:	e027      	b.n	801777c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801772c:	6838      	ldr	r0, [r7, #0]
 801772e:	f7ff ff73 	bl	8017618 <ip4_input_accept>
 8017732:	4603      	mov	r3, r0
 8017734:	2b00      	cmp	r3, #0
 8017736:	d002      	beq.n	801773e <ip4_input+0xd2>
      netif = inp;
 8017738:	683b      	ldr	r3, [r7, #0]
 801773a:	613b      	str	r3, [r7, #16]
 801773c:	e01e      	b.n	801777c <ip4_input+0x110>
    } else {
      netif = NULL;
 801773e:	2300      	movs	r3, #0
 8017740:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017742:	4b5a      	ldr	r3, [pc, #360]	@ (80178ac <ip4_input+0x240>)
 8017744:	695b      	ldr	r3, [r3, #20]
 8017746:	b2db      	uxtb	r3, r3
 8017748:	2b7f      	cmp	r3, #127	@ 0x7f
 801774a:	d017      	beq.n	801777c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801774c:	4b58      	ldr	r3, [pc, #352]	@ (80178b0 <ip4_input+0x244>)
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	613b      	str	r3, [r7, #16]
 8017752:	e00e      	b.n	8017772 <ip4_input+0x106>
          if (netif == inp) {
 8017754:	693a      	ldr	r2, [r7, #16]
 8017756:	683b      	ldr	r3, [r7, #0]
 8017758:	429a      	cmp	r2, r3
 801775a:	d006      	beq.n	801776a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801775c:	6938      	ldr	r0, [r7, #16]
 801775e:	f7ff ff5b 	bl	8017618 <ip4_input_accept>
 8017762:	4603      	mov	r3, r0
 8017764:	2b00      	cmp	r3, #0
 8017766:	d108      	bne.n	801777a <ip4_input+0x10e>
 8017768:	e000      	b.n	801776c <ip4_input+0x100>
            continue;
 801776a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801776c:	693b      	ldr	r3, [r7, #16]
 801776e:	681b      	ldr	r3, [r3, #0]
 8017770:	613b      	str	r3, [r7, #16]
 8017772:	693b      	ldr	r3, [r7, #16]
 8017774:	2b00      	cmp	r3, #0
 8017776:	d1ed      	bne.n	8017754 <ip4_input+0xe8>
 8017778:	e000      	b.n	801777c <ip4_input+0x110>
            break;
 801777a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801777c:	4b4b      	ldr	r3, [pc, #300]	@ (80178ac <ip4_input+0x240>)
 801777e:	691b      	ldr	r3, [r3, #16]
 8017780:	6839      	ldr	r1, [r7, #0]
 8017782:	4618      	mov	r0, r3
 8017784:	f000 f96e 	bl	8017a64 <ip4_addr_isbroadcast_u32>
 8017788:	4603      	mov	r3, r0
 801778a:	2b00      	cmp	r3, #0
 801778c:	d105      	bne.n	801779a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801778e:	4b47      	ldr	r3, [pc, #284]	@ (80178ac <ip4_input+0x240>)
 8017790:	691b      	ldr	r3, [r3, #16]
 8017792:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017796:	2be0      	cmp	r3, #224	@ 0xe0
 8017798:	d104      	bne.n	80177a4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801779a:	6878      	ldr	r0, [r7, #4]
 801779c:	f7f7 fcf8 	bl	800f190 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80177a0:	2300      	movs	r3, #0
 80177a2:	e07e      	b.n	80178a2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80177a4:	693b      	ldr	r3, [r7, #16]
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d104      	bne.n	80177b4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80177aa:	6878      	ldr	r0, [r7, #4]
 80177ac:	f7f7 fcf0 	bl	800f190 <pbuf_free>
    return ERR_OK;
 80177b0:	2300      	movs	r3, #0
 80177b2:	e076      	b.n	80178a2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80177b4:	697b      	ldr	r3, [r7, #20]
 80177b6:	88db      	ldrh	r3, [r3, #6]
 80177b8:	b29b      	uxth	r3, r3
 80177ba:	461a      	mov	r2, r3
 80177bc:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80177c0:	4013      	ands	r3, r2
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d00b      	beq.n	80177de <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80177c6:	6878      	ldr	r0, [r7, #4]
 80177c8:	f000 fdd0 	bl	801836c <ip4_reass>
 80177cc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d101      	bne.n	80177d8 <ip4_input+0x16c>
      return ERR_OK;
 80177d4:	2300      	movs	r3, #0
 80177d6:	e064      	b.n	80178a2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	685b      	ldr	r3, [r3, #4]
 80177dc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80177de:	4a33      	ldr	r2, [pc, #204]	@ (80178ac <ip4_input+0x240>)
 80177e0:	693b      	ldr	r3, [r7, #16]
 80177e2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80177e4:	4a31      	ldr	r2, [pc, #196]	@ (80178ac <ip4_input+0x240>)
 80177e6:	683b      	ldr	r3, [r7, #0]
 80177e8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80177ea:	4a30      	ldr	r2, [pc, #192]	@ (80178ac <ip4_input+0x240>)
 80177ec:	697b      	ldr	r3, [r7, #20]
 80177ee:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80177f0:	697b      	ldr	r3, [r7, #20]
 80177f2:	781b      	ldrb	r3, [r3, #0]
 80177f4:	f003 030f 	and.w	r3, r3, #15
 80177f8:	b2db      	uxtb	r3, r3
 80177fa:	009b      	lsls	r3, r3, #2
 80177fc:	b2db      	uxtb	r3, r3
 80177fe:	461a      	mov	r2, r3
 8017800:	4b2a      	ldr	r3, [pc, #168]	@ (80178ac <ip4_input+0x240>)
 8017802:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017804:	89fb      	ldrh	r3, [r7, #14]
 8017806:	4619      	mov	r1, r3
 8017808:	6878      	ldr	r0, [r7, #4]
 801780a:	f7f7 fc09 	bl	800f020 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801780e:	697b      	ldr	r3, [r7, #20]
 8017810:	7a5b      	ldrb	r3, [r3, #9]
 8017812:	2b11      	cmp	r3, #17
 8017814:	d006      	beq.n	8017824 <ip4_input+0x1b8>
 8017816:	2b11      	cmp	r3, #17
 8017818:	dc13      	bgt.n	8017842 <ip4_input+0x1d6>
 801781a:	2b01      	cmp	r3, #1
 801781c:	d00c      	beq.n	8017838 <ip4_input+0x1cc>
 801781e:	2b06      	cmp	r3, #6
 8017820:	d005      	beq.n	801782e <ip4_input+0x1c2>
 8017822:	e00e      	b.n	8017842 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017824:	6839      	ldr	r1, [r7, #0]
 8017826:	6878      	ldr	r0, [r7, #4]
 8017828:	f7fe f956 	bl	8015ad8 <udp_input>
        break;
 801782c:	e026      	b.n	801787c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801782e:	6839      	ldr	r1, [r7, #0]
 8017830:	6878      	ldr	r0, [r7, #4]
 8017832:	f7f9 fd15 	bl	8011260 <tcp_input>
        break;
 8017836:	e021      	b.n	801787c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017838:	6839      	ldr	r1, [r7, #0]
 801783a:	6878      	ldr	r0, [r7, #4]
 801783c:	f7ff fcee 	bl	801721c <icmp_input>
        break;
 8017840:	e01c      	b.n	801787c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017842:	4b1a      	ldr	r3, [pc, #104]	@ (80178ac <ip4_input+0x240>)
 8017844:	695b      	ldr	r3, [r3, #20]
 8017846:	6939      	ldr	r1, [r7, #16]
 8017848:	4618      	mov	r0, r3
 801784a:	f000 f90b 	bl	8017a64 <ip4_addr_isbroadcast_u32>
 801784e:	4603      	mov	r3, r0
 8017850:	2b00      	cmp	r3, #0
 8017852:	d10f      	bne.n	8017874 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017854:	4b15      	ldr	r3, [pc, #84]	@ (80178ac <ip4_input+0x240>)
 8017856:	695b      	ldr	r3, [r3, #20]
 8017858:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801785c:	2be0      	cmp	r3, #224	@ 0xe0
 801785e:	d009      	beq.n	8017874 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017860:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017864:	4619      	mov	r1, r3
 8017866:	6878      	ldr	r0, [r7, #4]
 8017868:	f7f7 fc4d 	bl	800f106 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801786c:	2102      	movs	r1, #2
 801786e:	6878      	ldr	r0, [r7, #4]
 8017870:	f7ff fdd8 	bl	8017424 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017874:	6878      	ldr	r0, [r7, #4]
 8017876:	f7f7 fc8b 	bl	800f190 <pbuf_free>
        break;
 801787a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801787c:	4b0b      	ldr	r3, [pc, #44]	@ (80178ac <ip4_input+0x240>)
 801787e:	2200      	movs	r2, #0
 8017880:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017882:	4b0a      	ldr	r3, [pc, #40]	@ (80178ac <ip4_input+0x240>)
 8017884:	2200      	movs	r2, #0
 8017886:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017888:	4b08      	ldr	r3, [pc, #32]	@ (80178ac <ip4_input+0x240>)
 801788a:	2200      	movs	r2, #0
 801788c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801788e:	4b07      	ldr	r3, [pc, #28]	@ (80178ac <ip4_input+0x240>)
 8017890:	2200      	movs	r2, #0
 8017892:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017894:	4b05      	ldr	r3, [pc, #20]	@ (80178ac <ip4_input+0x240>)
 8017896:	2200      	movs	r2, #0
 8017898:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801789a:	4b04      	ldr	r3, [pc, #16]	@ (80178ac <ip4_input+0x240>)
 801789c:	2200      	movs	r2, #0
 801789e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80178a0:	2300      	movs	r3, #0
}
 80178a2:	4618      	mov	r0, r3
 80178a4:	3718      	adds	r7, #24
 80178a6:	46bd      	mov	sp, r7
 80178a8:	bd80      	pop	{r7, pc}
 80178aa:	bf00      	nop
 80178ac:	2000d094 	.word	0x2000d094
 80178b0:	200102f8 	.word	0x200102f8

080178b4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80178b4:	b580      	push	{r7, lr}
 80178b6:	b08a      	sub	sp, #40	@ 0x28
 80178b8:	af04      	add	r7, sp, #16
 80178ba:	60f8      	str	r0, [r7, #12]
 80178bc:	60b9      	str	r1, [r7, #8]
 80178be:	607a      	str	r2, [r7, #4]
 80178c0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80178c2:	68bb      	ldr	r3, [r7, #8]
 80178c4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d009      	beq.n	80178e0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80178cc:	68bb      	ldr	r3, [r7, #8]
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	d003      	beq.n	80178da <ip4_output_if+0x26>
 80178d2:	68bb      	ldr	r3, [r7, #8]
 80178d4:	681b      	ldr	r3, [r3, #0]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d102      	bne.n	80178e0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80178da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178dc:	3304      	adds	r3, #4
 80178de:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80178e0:	78fa      	ldrb	r2, [r7, #3]
 80178e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178e4:	9302      	str	r3, [sp, #8]
 80178e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80178ea:	9301      	str	r3, [sp, #4]
 80178ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80178f0:	9300      	str	r3, [sp, #0]
 80178f2:	4613      	mov	r3, r2
 80178f4:	687a      	ldr	r2, [r7, #4]
 80178f6:	6979      	ldr	r1, [r7, #20]
 80178f8:	68f8      	ldr	r0, [r7, #12]
 80178fa:	f000 f805 	bl	8017908 <ip4_output_if_src>
 80178fe:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017900:	4618      	mov	r0, r3
 8017902:	3718      	adds	r7, #24
 8017904:	46bd      	mov	sp, r7
 8017906:	bd80      	pop	{r7, pc}

08017908 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017908:	b580      	push	{r7, lr}
 801790a:	b088      	sub	sp, #32
 801790c:	af00      	add	r7, sp, #0
 801790e:	60f8      	str	r0, [r7, #12]
 8017910:	60b9      	str	r1, [r7, #8]
 8017912:	607a      	str	r2, [r7, #4]
 8017914:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	7b9b      	ldrb	r3, [r3, #14]
 801791a:	2b01      	cmp	r3, #1
 801791c:	d006      	beq.n	801792c <ip4_output_if_src+0x24>
 801791e:	4b4b      	ldr	r3, [pc, #300]	@ (8017a4c <ip4_output_if_src+0x144>)
 8017920:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8017924:	494a      	ldr	r1, [pc, #296]	@ (8017a50 <ip4_output_if_src+0x148>)
 8017926:	484b      	ldr	r0, [pc, #300]	@ (8017a54 <ip4_output_if_src+0x14c>)
 8017928:	f010 fb04 	bl	8027f34 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	2b00      	cmp	r3, #0
 8017930:	d060      	beq.n	80179f4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017932:	2314      	movs	r3, #20
 8017934:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017936:	2114      	movs	r1, #20
 8017938:	68f8      	ldr	r0, [r7, #12]
 801793a:	f7f7 fb61 	bl	800f000 <pbuf_add_header>
 801793e:	4603      	mov	r3, r0
 8017940:	2b00      	cmp	r3, #0
 8017942:	d002      	beq.n	801794a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017944:	f06f 0301 	mvn.w	r3, #1
 8017948:	e07c      	b.n	8017a44 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801794a:	68fb      	ldr	r3, [r7, #12]
 801794c:	685b      	ldr	r3, [r3, #4]
 801794e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017950:	68fb      	ldr	r3, [r7, #12]
 8017952:	895b      	ldrh	r3, [r3, #10]
 8017954:	2b13      	cmp	r3, #19
 8017956:	d806      	bhi.n	8017966 <ip4_output_if_src+0x5e>
 8017958:	4b3c      	ldr	r3, [pc, #240]	@ (8017a4c <ip4_output_if_src+0x144>)
 801795a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801795e:	493e      	ldr	r1, [pc, #248]	@ (8017a58 <ip4_output_if_src+0x150>)
 8017960:	483c      	ldr	r0, [pc, #240]	@ (8017a54 <ip4_output_if_src+0x14c>)
 8017962:	f010 fae7 	bl	8027f34 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017966:	69fb      	ldr	r3, [r7, #28]
 8017968:	78fa      	ldrb	r2, [r7, #3]
 801796a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801796c:	69fb      	ldr	r3, [r7, #28]
 801796e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8017972:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	681a      	ldr	r2, [r3, #0]
 8017978:	69fb      	ldr	r3, [r7, #28]
 801797a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801797c:	8b7b      	ldrh	r3, [r7, #26]
 801797e:	089b      	lsrs	r3, r3, #2
 8017980:	b29b      	uxth	r3, r3
 8017982:	b2db      	uxtb	r3, r3
 8017984:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017988:	b2da      	uxtb	r2, r3
 801798a:	69fb      	ldr	r3, [r7, #28]
 801798c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801798e:	69fb      	ldr	r3, [r7, #28]
 8017990:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8017994:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	891b      	ldrh	r3, [r3, #8]
 801799a:	4618      	mov	r0, r3
 801799c:	f7f5 ffa0 	bl	800d8e0 <lwip_htons>
 80179a0:	4603      	mov	r3, r0
 80179a2:	461a      	mov	r2, r3
 80179a4:	69fb      	ldr	r3, [r7, #28]
 80179a6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80179a8:	69fb      	ldr	r3, [r7, #28]
 80179aa:	2200      	movs	r2, #0
 80179ac:	719a      	strb	r2, [r3, #6]
 80179ae:	2200      	movs	r2, #0
 80179b0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80179b2:	4b2a      	ldr	r3, [pc, #168]	@ (8017a5c <ip4_output_if_src+0x154>)
 80179b4:	881b      	ldrh	r3, [r3, #0]
 80179b6:	4618      	mov	r0, r3
 80179b8:	f7f5 ff92 	bl	800d8e0 <lwip_htons>
 80179bc:	4603      	mov	r3, r0
 80179be:	461a      	mov	r2, r3
 80179c0:	69fb      	ldr	r3, [r7, #28]
 80179c2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80179c4:	4b25      	ldr	r3, [pc, #148]	@ (8017a5c <ip4_output_if_src+0x154>)
 80179c6:	881b      	ldrh	r3, [r3, #0]
 80179c8:	3301      	adds	r3, #1
 80179ca:	b29a      	uxth	r2, r3
 80179cc:	4b23      	ldr	r3, [pc, #140]	@ (8017a5c <ip4_output_if_src+0x154>)
 80179ce:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80179d0:	68bb      	ldr	r3, [r7, #8]
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d104      	bne.n	80179e0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80179d6:	4b22      	ldr	r3, [pc, #136]	@ (8017a60 <ip4_output_if_src+0x158>)
 80179d8:	681a      	ldr	r2, [r3, #0]
 80179da:	69fb      	ldr	r3, [r7, #28]
 80179dc:	60da      	str	r2, [r3, #12]
 80179de:	e003      	b.n	80179e8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80179e0:	68bb      	ldr	r3, [r7, #8]
 80179e2:	681a      	ldr	r2, [r3, #0]
 80179e4:	69fb      	ldr	r3, [r7, #28]
 80179e6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80179e8:	69fb      	ldr	r3, [r7, #28]
 80179ea:	2200      	movs	r2, #0
 80179ec:	729a      	strb	r2, [r3, #10]
 80179ee:	2200      	movs	r2, #0
 80179f0:	72da      	strb	r2, [r3, #11]
 80179f2:	e00f      	b.n	8017a14 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80179f4:	68fb      	ldr	r3, [r7, #12]
 80179f6:	895b      	ldrh	r3, [r3, #10]
 80179f8:	2b13      	cmp	r3, #19
 80179fa:	d802      	bhi.n	8017a02 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80179fc:	f06f 0301 	mvn.w	r3, #1
 8017a00:	e020      	b.n	8017a44 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017a02:	68fb      	ldr	r3, [r7, #12]
 8017a04:	685b      	ldr	r3, [r3, #4]
 8017a06:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017a08:	69fb      	ldr	r3, [r7, #28]
 8017a0a:	691b      	ldr	r3, [r3, #16]
 8017a0c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017a0e:	f107 0314 	add.w	r3, r7, #20
 8017a12:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a16:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d00c      	beq.n	8017a36 <ip4_output_if_src+0x12e>
 8017a1c:	68fb      	ldr	r3, [r7, #12]
 8017a1e:	891a      	ldrh	r2, [r3, #8]
 8017a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a22:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8017a24:	429a      	cmp	r2, r3
 8017a26:	d906      	bls.n	8017a36 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017a28:	687a      	ldr	r2, [r7, #4]
 8017a2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017a2c:	68f8      	ldr	r0, [r7, #12]
 8017a2e:	f000 fe91 	bl	8018754 <ip4_frag>
 8017a32:	4603      	mov	r3, r0
 8017a34:	e006      	b.n	8017a44 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a38:	695b      	ldr	r3, [r3, #20]
 8017a3a:	687a      	ldr	r2, [r7, #4]
 8017a3c:	68f9      	ldr	r1, [r7, #12]
 8017a3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017a40:	4798      	blx	r3
 8017a42:	4603      	mov	r3, r0
}
 8017a44:	4618      	mov	r0, r3
 8017a46:	3720      	adds	r7, #32
 8017a48:	46bd      	mov	sp, r7
 8017a4a:	bd80      	pop	{r7, pc}
 8017a4c:	0802c8f4 	.word	0x0802c8f4
 8017a50:	0802c928 	.word	0x0802c928
 8017a54:	0802c934 	.word	0x0802c934
 8017a58:	0802c95c 	.word	0x0802c95c
 8017a5c:	20010456 	.word	0x20010456
 8017a60:	0802ce54 	.word	0x0802ce54

08017a64 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017a64:	b480      	push	{r7}
 8017a66:	b085      	sub	sp, #20
 8017a68:	af00      	add	r7, sp, #0
 8017a6a:	6078      	str	r0, [r7, #4]
 8017a6c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a78:	d002      	beq.n	8017a80 <ip4_addr_isbroadcast_u32+0x1c>
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d101      	bne.n	8017a84 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017a80:	2301      	movs	r3, #1
 8017a82:	e02a      	b.n	8017ada <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017a84:	683b      	ldr	r3, [r7, #0]
 8017a86:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017a8a:	f003 0302 	and.w	r3, r3, #2
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d101      	bne.n	8017a96 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017a92:	2300      	movs	r3, #0
 8017a94:	e021      	b.n	8017ada <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017a96:	683b      	ldr	r3, [r7, #0]
 8017a98:	3304      	adds	r3, #4
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	687a      	ldr	r2, [r7, #4]
 8017a9e:	429a      	cmp	r2, r3
 8017aa0:	d101      	bne.n	8017aa6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017aa2:	2300      	movs	r3, #0
 8017aa4:	e019      	b.n	8017ada <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017aa6:	68fa      	ldr	r2, [r7, #12]
 8017aa8:	683b      	ldr	r3, [r7, #0]
 8017aaa:	3304      	adds	r3, #4
 8017aac:	681b      	ldr	r3, [r3, #0]
 8017aae:	405a      	eors	r2, r3
 8017ab0:	683b      	ldr	r3, [r7, #0]
 8017ab2:	3308      	adds	r3, #8
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	4013      	ands	r3, r2
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d10d      	bne.n	8017ad8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017abc:	683b      	ldr	r3, [r7, #0]
 8017abe:	3308      	adds	r3, #8
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	43da      	mvns	r2, r3
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017ac8:	683b      	ldr	r3, [r7, #0]
 8017aca:	3308      	adds	r3, #8
 8017acc:	681b      	ldr	r3, [r3, #0]
 8017ace:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017ad0:	429a      	cmp	r2, r3
 8017ad2:	d101      	bne.n	8017ad8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017ad4:	2301      	movs	r3, #1
 8017ad6:	e000      	b.n	8017ada <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017ad8:	2300      	movs	r3, #0
  }
}
 8017ada:	4618      	mov	r0, r3
 8017adc:	3714      	adds	r7, #20
 8017ade:	46bd      	mov	sp, r7
 8017ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ae4:	4770      	bx	lr

08017ae6 <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 8017ae6:	b580      	push	{r7, lr}
 8017ae8:	b084      	sub	sp, #16
 8017aea:	af00      	add	r7, sp, #0
 8017aec:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 8017aee:	f107 030c 	add.w	r3, r7, #12
 8017af2:	4619      	mov	r1, r3
 8017af4:	6878      	ldr	r0, [r7, #4]
 8017af6:	f000 f80b 	bl	8017b10 <ip4addr_aton>
 8017afa:	4603      	mov	r3, r0
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d001      	beq.n	8017b04 <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 8017b00:	68fb      	ldr	r3, [r7, #12]
 8017b02:	e001      	b.n	8017b08 <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 8017b04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017b08:	4618      	mov	r0, r3
 8017b0a:	3710      	adds	r7, #16
 8017b0c:	46bd      	mov	sp, r7
 8017b0e:	bd80      	pop	{r7, pc}

08017b10 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8017b10:	b580      	push	{r7, lr}
 8017b12:	b08a      	sub	sp, #40	@ 0x28
 8017b14:	af00      	add	r7, sp, #0
 8017b16:	6078      	str	r0, [r7, #4]
 8017b18:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8017b1a:	f107 030c 	add.w	r3, r7, #12
 8017b1e:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	781b      	ldrb	r3, [r3, #0]
 8017b24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8017b28:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017b2c:	3301      	adds	r3, #1
 8017b2e:	4a89      	ldr	r2, [pc, #548]	@ (8017d54 <ip4addr_aton+0x244>)
 8017b30:	4413      	add	r3, r2
 8017b32:	781b      	ldrb	r3, [r3, #0]
 8017b34:	f003 0304 	and.w	r3, r3, #4
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d101      	bne.n	8017b40 <ip4addr_aton+0x30>
      return 0;
 8017b3c:	2300      	movs	r3, #0
 8017b3e:	e105      	b.n	8017d4c <ip4addr_aton+0x23c>
    }
    val = 0;
 8017b40:	2300      	movs	r3, #0
 8017b42:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 8017b44:	230a      	movs	r3, #10
 8017b46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 8017b4a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017b4e:	2b30      	cmp	r3, #48	@ 0x30
 8017b50:	d11c      	bne.n	8017b8c <ip4addr_aton+0x7c>
      c = *++cp;
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	3301      	adds	r3, #1
 8017b56:	607b      	str	r3, [r7, #4]
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	781b      	ldrb	r3, [r3, #0]
 8017b5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 8017b60:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017b64:	2b78      	cmp	r3, #120	@ 0x78
 8017b66:	d003      	beq.n	8017b70 <ip4addr_aton+0x60>
 8017b68:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017b6c:	2b58      	cmp	r3, #88	@ 0x58
 8017b6e:	d10a      	bne.n	8017b86 <ip4addr_aton+0x76>
        base = 16;
 8017b70:	2310      	movs	r3, #16
 8017b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	3301      	adds	r3, #1
 8017b7a:	607b      	str	r3, [r7, #4]
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	781b      	ldrb	r3, [r3, #0]
 8017b80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8017b84:	e002      	b.n	8017b8c <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8017b86:	2308      	movs	r3, #8
 8017b88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8017b8c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017b90:	3301      	adds	r3, #1
 8017b92:	4a70      	ldr	r2, [pc, #448]	@ (8017d54 <ip4addr_aton+0x244>)
 8017b94:	4413      	add	r3, r2
 8017b96:	781b      	ldrb	r3, [r3, #0]
 8017b98:	f003 0304 	and.w	r3, r3, #4
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d011      	beq.n	8017bc4 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8017ba0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017ba6:	fb03 f202 	mul.w	r2, r3, r2
 8017baa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017bae:	4413      	add	r3, r2
 8017bb0:	3b30      	subs	r3, #48	@ 0x30
 8017bb2:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	3301      	adds	r3, #1
 8017bb8:	607b      	str	r3, [r7, #4]
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	781b      	ldrb	r3, [r3, #0]
 8017bbe:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8017bc2:	e7e3      	b.n	8017b8c <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8017bc4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017bc8:	2b10      	cmp	r3, #16
 8017bca:	d127      	bne.n	8017c1c <ip4addr_aton+0x10c>
 8017bcc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017bd0:	3301      	adds	r3, #1
 8017bd2:	4a60      	ldr	r2, [pc, #384]	@ (8017d54 <ip4addr_aton+0x244>)
 8017bd4:	4413      	add	r3, r2
 8017bd6:	781b      	ldrb	r3, [r3, #0]
 8017bd8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	d01d      	beq.n	8017c1c <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8017be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017be2:	011b      	lsls	r3, r3, #4
 8017be4:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017be8:	f102 010a 	add.w	r1, r2, #10
 8017bec:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017bf0:	3201      	adds	r2, #1
 8017bf2:	4858      	ldr	r0, [pc, #352]	@ (8017d54 <ip4addr_aton+0x244>)
 8017bf4:	4402      	add	r2, r0
 8017bf6:	7812      	ldrb	r2, [r2, #0]
 8017bf8:	f002 0203 	and.w	r2, r2, #3
 8017bfc:	2a02      	cmp	r2, #2
 8017bfe:	d101      	bne.n	8017c04 <ip4addr_aton+0xf4>
 8017c00:	2261      	movs	r2, #97	@ 0x61
 8017c02:	e000      	b.n	8017c06 <ip4addr_aton+0xf6>
 8017c04:	2241      	movs	r2, #65	@ 0x41
 8017c06:	1a8a      	subs	r2, r1, r2
 8017c08:	4313      	orrs	r3, r2
 8017c0a:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	3301      	adds	r3, #1
 8017c10:	607b      	str	r3, [r7, #4]
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	781b      	ldrb	r3, [r3, #0]
 8017c16:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (lwip_isdigit(c)) {
 8017c1a:	e7b7      	b.n	8017b8c <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8017c1c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017c20:	2b2e      	cmp	r3, #46	@ 0x2e
 8017c22:	d114      	bne.n	8017c4e <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8017c24:	f107 030c 	add.w	r3, r7, #12
 8017c28:	330c      	adds	r3, #12
 8017c2a:	69fa      	ldr	r2, [r7, #28]
 8017c2c:	429a      	cmp	r2, r3
 8017c2e:	d301      	bcc.n	8017c34 <ip4addr_aton+0x124>
        return 0;
 8017c30:	2300      	movs	r3, #0
 8017c32:	e08b      	b.n	8017d4c <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8017c34:	69fb      	ldr	r3, [r7, #28]
 8017c36:	1d1a      	adds	r2, r3, #4
 8017c38:	61fa      	str	r2, [r7, #28]
 8017c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017c3c:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	3301      	adds	r3, #1
 8017c42:	607b      	str	r3, [r7, #4]
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	781b      	ldrb	r3, [r3, #0]
 8017c48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!lwip_isdigit(c)) {
 8017c4c:	e76c      	b.n	8017b28 <ip4addr_aton+0x18>
    } else {
      break;
 8017c4e:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8017c50:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d00b      	beq.n	8017c70 <ip4addr_aton+0x160>
 8017c58:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017c5c:	3301      	adds	r3, #1
 8017c5e:	4a3d      	ldr	r2, [pc, #244]	@ (8017d54 <ip4addr_aton+0x244>)
 8017c60:	4413      	add	r3, r2
 8017c62:	781b      	ldrb	r3, [r3, #0]
 8017c64:	f003 0308 	and.w	r3, r3, #8
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d101      	bne.n	8017c70 <ip4addr_aton+0x160>
    return 0;
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	e06d      	b.n	8017d4c <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8017c70:	f107 030c 	add.w	r3, r7, #12
 8017c74:	69fa      	ldr	r2, [r7, #28]
 8017c76:	1ad3      	subs	r3, r2, r3
 8017c78:	109b      	asrs	r3, r3, #2
 8017c7a:	3301      	adds	r3, #1
 8017c7c:	2b04      	cmp	r3, #4
 8017c7e:	d853      	bhi.n	8017d28 <ip4addr_aton+0x218>
 8017c80:	a201      	add	r2, pc, #4	@ (adr r2, 8017c88 <ip4addr_aton+0x178>)
 8017c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c86:	bf00      	nop
 8017c88:	08017c9d 	.word	0x08017c9d
 8017c8c:	08017d37 	.word	0x08017d37
 8017c90:	08017ca1 	.word	0x08017ca1
 8017c94:	08017cc3 	.word	0x08017cc3
 8017c98:	08017cf1 	.word	0x08017cf1

    case 0:
      return 0;       /* initial nondigit */
 8017c9c:	2300      	movs	r3, #0
 8017c9e:	e055      	b.n	8017d4c <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8017ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ca2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017ca6:	d301      	bcc.n	8017cac <ip4addr_aton+0x19c>
        return 0;
 8017ca8:	2300      	movs	r3, #0
 8017caa:	e04f      	b.n	8017d4c <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8017cac:	68fb      	ldr	r3, [r7, #12]
 8017cae:	2bff      	cmp	r3, #255	@ 0xff
 8017cb0:	d901      	bls.n	8017cb6 <ip4addr_aton+0x1a6>
        return 0;
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	e04a      	b.n	8017d4c <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 8017cb6:	68fb      	ldr	r3, [r7, #12]
 8017cb8:	061b      	lsls	r3, r3, #24
 8017cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017cbc:	4313      	orrs	r3, r2
 8017cbe:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8017cc0:	e03a      	b.n	8017d38 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 8017cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017cc8:	d301      	bcc.n	8017cce <ip4addr_aton+0x1be>
        return 0;
 8017cca:	2300      	movs	r3, #0
 8017ccc:	e03e      	b.n	8017d4c <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	2bff      	cmp	r3, #255	@ 0xff
 8017cd2:	d802      	bhi.n	8017cda <ip4addr_aton+0x1ca>
 8017cd4:	693b      	ldr	r3, [r7, #16]
 8017cd6:	2bff      	cmp	r3, #255	@ 0xff
 8017cd8:	d901      	bls.n	8017cde <ip4addr_aton+0x1ce>
        return 0;
 8017cda:	2300      	movs	r3, #0
 8017cdc:	e036      	b.n	8017d4c <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8017cde:	68fb      	ldr	r3, [r7, #12]
 8017ce0:	061a      	lsls	r2, r3, #24
 8017ce2:	693b      	ldr	r3, [r7, #16]
 8017ce4:	041b      	lsls	r3, r3, #16
 8017ce6:	4313      	orrs	r3, r2
 8017ce8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017cea:	4313      	orrs	r3, r2
 8017cec:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8017cee:	e023      	b.n	8017d38 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8017cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cf2:	2bff      	cmp	r3, #255	@ 0xff
 8017cf4:	d901      	bls.n	8017cfa <ip4addr_aton+0x1ea>
        return 0;
 8017cf6:	2300      	movs	r3, #0
 8017cf8:	e028      	b.n	8017d4c <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8017cfa:	68fb      	ldr	r3, [r7, #12]
 8017cfc:	2bff      	cmp	r3, #255	@ 0xff
 8017cfe:	d805      	bhi.n	8017d0c <ip4addr_aton+0x1fc>
 8017d00:	693b      	ldr	r3, [r7, #16]
 8017d02:	2bff      	cmp	r3, #255	@ 0xff
 8017d04:	d802      	bhi.n	8017d0c <ip4addr_aton+0x1fc>
 8017d06:	697b      	ldr	r3, [r7, #20]
 8017d08:	2bff      	cmp	r3, #255	@ 0xff
 8017d0a:	d901      	bls.n	8017d10 <ip4addr_aton+0x200>
        return 0;
 8017d0c:	2300      	movs	r3, #0
 8017d0e:	e01d      	b.n	8017d4c <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	061a      	lsls	r2, r3, #24
 8017d14:	693b      	ldr	r3, [r7, #16]
 8017d16:	041b      	lsls	r3, r3, #16
 8017d18:	431a      	orrs	r2, r3
 8017d1a:	697b      	ldr	r3, [r7, #20]
 8017d1c:	021b      	lsls	r3, r3, #8
 8017d1e:	4313      	orrs	r3, r2
 8017d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017d22:	4313      	orrs	r3, r2
 8017d24:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8017d26:	e007      	b.n	8017d38 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8017d28:	4b0b      	ldr	r3, [pc, #44]	@ (8017d58 <ip4addr_aton+0x248>)
 8017d2a:	22f9      	movs	r2, #249	@ 0xf9
 8017d2c:	490b      	ldr	r1, [pc, #44]	@ (8017d5c <ip4addr_aton+0x24c>)
 8017d2e:	480c      	ldr	r0, [pc, #48]	@ (8017d60 <ip4addr_aton+0x250>)
 8017d30:	f010 f900 	bl	8027f34 <iprintf>
      break;
 8017d34:	e000      	b.n	8017d38 <ip4addr_aton+0x228>
      break;
 8017d36:	bf00      	nop
  }
  if (addr) {
 8017d38:	683b      	ldr	r3, [r7, #0]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d005      	beq.n	8017d4a <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8017d3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017d40:	f7f5 fde4 	bl	800d90c <lwip_htonl>
 8017d44:	4602      	mov	r2, r0
 8017d46:	683b      	ldr	r3, [r7, #0]
 8017d48:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8017d4a:	2301      	movs	r3, #1
}
 8017d4c:	4618      	mov	r0, r3
 8017d4e:	3728      	adds	r7, #40	@ 0x28
 8017d50:	46bd      	mov	sp, r7
 8017d52:	bd80      	pop	{r7, pc}
 8017d54:	0802def2 	.word	0x0802def2
 8017d58:	0802c98c 	.word	0x0802c98c
 8017d5c:	0802c9c8 	.word	0x0802c9c8
 8017d60:	0802c9d4 	.word	0x0802c9d4

08017d64 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017d64:	b580      	push	{r7, lr}
 8017d66:	b084      	sub	sp, #16
 8017d68:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017d6a:	2300      	movs	r3, #0
 8017d6c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017d6e:	4b12      	ldr	r3, [pc, #72]	@ (8017db8 <ip_reass_tmr+0x54>)
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017d74:	e018      	b.n	8017da8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	7fdb      	ldrb	r3, [r3, #31]
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d00b      	beq.n	8017d96 <ip_reass_tmr+0x32>
      r->timer--;
 8017d7e:	68fb      	ldr	r3, [r7, #12]
 8017d80:	7fdb      	ldrb	r3, [r3, #31]
 8017d82:	3b01      	subs	r3, #1
 8017d84:	b2da      	uxtb	r2, r3
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017d8a:	68fb      	ldr	r3, [r7, #12]
 8017d8c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	681b      	ldr	r3, [r3, #0]
 8017d92:	60fb      	str	r3, [r7, #12]
 8017d94:	e008      	b.n	8017da8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017d96:	68fb      	ldr	r3, [r7, #12]
 8017d98:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017d9a:	68fb      	ldr	r3, [r7, #12]
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017da0:	68b9      	ldr	r1, [r7, #8]
 8017da2:	6878      	ldr	r0, [r7, #4]
 8017da4:	f000 f80a 	bl	8017dbc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017da8:	68fb      	ldr	r3, [r7, #12]
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d1e3      	bne.n	8017d76 <ip_reass_tmr+0x12>
    }
  }
}
 8017dae:	bf00      	nop
 8017db0:	bf00      	nop
 8017db2:	3710      	adds	r7, #16
 8017db4:	46bd      	mov	sp, r7
 8017db6:	bd80      	pop	{r7, pc}
 8017db8:	20010458 	.word	0x20010458

08017dbc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017dbc:	b580      	push	{r7, lr}
 8017dbe:	b088      	sub	sp, #32
 8017dc0:	af00      	add	r7, sp, #0
 8017dc2:	6078      	str	r0, [r7, #4]
 8017dc4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017dca:	683a      	ldr	r2, [r7, #0]
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	429a      	cmp	r2, r3
 8017dd0:	d105      	bne.n	8017dde <ip_reass_free_complete_datagram+0x22>
 8017dd2:	4b45      	ldr	r3, [pc, #276]	@ (8017ee8 <ip_reass_free_complete_datagram+0x12c>)
 8017dd4:	22ab      	movs	r2, #171	@ 0xab
 8017dd6:	4945      	ldr	r1, [pc, #276]	@ (8017eec <ip_reass_free_complete_datagram+0x130>)
 8017dd8:	4845      	ldr	r0, [pc, #276]	@ (8017ef0 <ip_reass_free_complete_datagram+0x134>)
 8017dda:	f010 f8ab 	bl	8027f34 <iprintf>
  if (prev != NULL) {
 8017dde:	683b      	ldr	r3, [r7, #0]
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	d00a      	beq.n	8017dfa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017de4:	683b      	ldr	r3, [r7, #0]
 8017de6:	681b      	ldr	r3, [r3, #0]
 8017de8:	687a      	ldr	r2, [r7, #4]
 8017dea:	429a      	cmp	r2, r3
 8017dec:	d005      	beq.n	8017dfa <ip_reass_free_complete_datagram+0x3e>
 8017dee:	4b3e      	ldr	r3, [pc, #248]	@ (8017ee8 <ip_reass_free_complete_datagram+0x12c>)
 8017df0:	22ad      	movs	r2, #173	@ 0xad
 8017df2:	4940      	ldr	r1, [pc, #256]	@ (8017ef4 <ip_reass_free_complete_datagram+0x138>)
 8017df4:	483e      	ldr	r0, [pc, #248]	@ (8017ef0 <ip_reass_free_complete_datagram+0x134>)
 8017df6:	f010 f89d 	bl	8027f34 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	685b      	ldr	r3, [r3, #4]
 8017dfe:	685b      	ldr	r3, [r3, #4]
 8017e00:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017e02:	697b      	ldr	r3, [r7, #20]
 8017e04:	889b      	ldrh	r3, [r3, #4]
 8017e06:	b29b      	uxth	r3, r3
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d12a      	bne.n	8017e62 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	685b      	ldr	r3, [r3, #4]
 8017e10:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017e12:	697b      	ldr	r3, [r7, #20]
 8017e14:	681a      	ldr	r2, [r3, #0]
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017e1a:	69bb      	ldr	r3, [r7, #24]
 8017e1c:	6858      	ldr	r0, [r3, #4]
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	3308      	adds	r3, #8
 8017e22:	2214      	movs	r2, #20
 8017e24:	4619      	mov	r1, r3
 8017e26:	f010 fb32 	bl	802848e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017e2a:	2101      	movs	r1, #1
 8017e2c:	69b8      	ldr	r0, [r7, #24]
 8017e2e:	f7ff fb09 	bl	8017444 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017e32:	69b8      	ldr	r0, [r7, #24]
 8017e34:	f7f7 fa3a 	bl	800f2ac <pbuf_clen>
 8017e38:	4603      	mov	r3, r0
 8017e3a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017e3c:	8bfa      	ldrh	r2, [r7, #30]
 8017e3e:	8a7b      	ldrh	r3, [r7, #18]
 8017e40:	4413      	add	r3, r2
 8017e42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017e46:	db05      	blt.n	8017e54 <ip_reass_free_complete_datagram+0x98>
 8017e48:	4b27      	ldr	r3, [pc, #156]	@ (8017ee8 <ip_reass_free_complete_datagram+0x12c>)
 8017e4a:	22bc      	movs	r2, #188	@ 0xbc
 8017e4c:	492a      	ldr	r1, [pc, #168]	@ (8017ef8 <ip_reass_free_complete_datagram+0x13c>)
 8017e4e:	4828      	ldr	r0, [pc, #160]	@ (8017ef0 <ip_reass_free_complete_datagram+0x134>)
 8017e50:	f010 f870 	bl	8027f34 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017e54:	8bfa      	ldrh	r2, [r7, #30]
 8017e56:	8a7b      	ldrh	r3, [r7, #18]
 8017e58:	4413      	add	r3, r2
 8017e5a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017e5c:	69b8      	ldr	r0, [r7, #24]
 8017e5e:	f7f7 f997 	bl	800f190 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	685b      	ldr	r3, [r3, #4]
 8017e66:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017e68:	e01f      	b.n	8017eaa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017e6a:	69bb      	ldr	r3, [r7, #24]
 8017e6c:	685b      	ldr	r3, [r3, #4]
 8017e6e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017e70:	69bb      	ldr	r3, [r7, #24]
 8017e72:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017e74:	697b      	ldr	r3, [r7, #20]
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017e7a:	68f8      	ldr	r0, [r7, #12]
 8017e7c:	f7f7 fa16 	bl	800f2ac <pbuf_clen>
 8017e80:	4603      	mov	r3, r0
 8017e82:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017e84:	8bfa      	ldrh	r2, [r7, #30]
 8017e86:	8a7b      	ldrh	r3, [r7, #18]
 8017e88:	4413      	add	r3, r2
 8017e8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017e8e:	db05      	blt.n	8017e9c <ip_reass_free_complete_datagram+0xe0>
 8017e90:	4b15      	ldr	r3, [pc, #84]	@ (8017ee8 <ip_reass_free_complete_datagram+0x12c>)
 8017e92:	22cc      	movs	r2, #204	@ 0xcc
 8017e94:	4918      	ldr	r1, [pc, #96]	@ (8017ef8 <ip_reass_free_complete_datagram+0x13c>)
 8017e96:	4816      	ldr	r0, [pc, #88]	@ (8017ef0 <ip_reass_free_complete_datagram+0x134>)
 8017e98:	f010 f84c 	bl	8027f34 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017e9c:	8bfa      	ldrh	r2, [r7, #30]
 8017e9e:	8a7b      	ldrh	r3, [r7, #18]
 8017ea0:	4413      	add	r3, r2
 8017ea2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017ea4:	68f8      	ldr	r0, [r7, #12]
 8017ea6:	f7f7 f973 	bl	800f190 <pbuf_free>
  while (p != NULL) {
 8017eaa:	69bb      	ldr	r3, [r7, #24]
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d1dc      	bne.n	8017e6a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017eb0:	6839      	ldr	r1, [r7, #0]
 8017eb2:	6878      	ldr	r0, [r7, #4]
 8017eb4:	f000 f8c2 	bl	801803c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017eb8:	4b10      	ldr	r3, [pc, #64]	@ (8017efc <ip_reass_free_complete_datagram+0x140>)
 8017eba:	881b      	ldrh	r3, [r3, #0]
 8017ebc:	8bfa      	ldrh	r2, [r7, #30]
 8017ebe:	429a      	cmp	r2, r3
 8017ec0:	d905      	bls.n	8017ece <ip_reass_free_complete_datagram+0x112>
 8017ec2:	4b09      	ldr	r3, [pc, #36]	@ (8017ee8 <ip_reass_free_complete_datagram+0x12c>)
 8017ec4:	22d2      	movs	r2, #210	@ 0xd2
 8017ec6:	490e      	ldr	r1, [pc, #56]	@ (8017f00 <ip_reass_free_complete_datagram+0x144>)
 8017ec8:	4809      	ldr	r0, [pc, #36]	@ (8017ef0 <ip_reass_free_complete_datagram+0x134>)
 8017eca:	f010 f833 	bl	8027f34 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017ece:	4b0b      	ldr	r3, [pc, #44]	@ (8017efc <ip_reass_free_complete_datagram+0x140>)
 8017ed0:	881a      	ldrh	r2, [r3, #0]
 8017ed2:	8bfb      	ldrh	r3, [r7, #30]
 8017ed4:	1ad3      	subs	r3, r2, r3
 8017ed6:	b29a      	uxth	r2, r3
 8017ed8:	4b08      	ldr	r3, [pc, #32]	@ (8017efc <ip_reass_free_complete_datagram+0x140>)
 8017eda:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017edc:	8bfb      	ldrh	r3, [r7, #30]
}
 8017ede:	4618      	mov	r0, r3
 8017ee0:	3720      	adds	r7, #32
 8017ee2:	46bd      	mov	sp, r7
 8017ee4:	bd80      	pop	{r7, pc}
 8017ee6:	bf00      	nop
 8017ee8:	0802c9fc 	.word	0x0802c9fc
 8017eec:	0802ca38 	.word	0x0802ca38
 8017ef0:	0802ca44 	.word	0x0802ca44
 8017ef4:	0802ca6c 	.word	0x0802ca6c
 8017ef8:	0802ca80 	.word	0x0802ca80
 8017efc:	2001045c 	.word	0x2001045c
 8017f00:	0802caa0 	.word	0x0802caa0

08017f04 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017f04:	b580      	push	{r7, lr}
 8017f06:	b08a      	sub	sp, #40	@ 0x28
 8017f08:	af00      	add	r7, sp, #0
 8017f0a:	6078      	str	r0, [r7, #4]
 8017f0c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017f0e:	2300      	movs	r3, #0
 8017f10:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017f12:	2300      	movs	r3, #0
 8017f14:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017f16:	2300      	movs	r3, #0
 8017f18:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017f1a:	2300      	movs	r3, #0
 8017f1c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017f1e:	2300      	movs	r3, #0
 8017f20:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017f22:	4b28      	ldr	r3, [pc, #160]	@ (8017fc4 <ip_reass_remove_oldest_datagram+0xc0>)
 8017f24:	681b      	ldr	r3, [r3, #0]
 8017f26:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8017f28:	e030      	b.n	8017f8c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f2c:	695a      	ldr	r2, [r3, #20]
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	68db      	ldr	r3, [r3, #12]
 8017f32:	429a      	cmp	r2, r3
 8017f34:	d10c      	bne.n	8017f50 <ip_reass_remove_oldest_datagram+0x4c>
 8017f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f38:	699a      	ldr	r2, [r3, #24]
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	691b      	ldr	r3, [r3, #16]
 8017f3e:	429a      	cmp	r2, r3
 8017f40:	d106      	bne.n	8017f50 <ip_reass_remove_oldest_datagram+0x4c>
 8017f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f44:	899a      	ldrh	r2, [r3, #12]
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	889b      	ldrh	r3, [r3, #4]
 8017f4a:	b29b      	uxth	r3, r3
 8017f4c:	429a      	cmp	r2, r3
 8017f4e:	d014      	beq.n	8017f7a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017f50:	693b      	ldr	r3, [r7, #16]
 8017f52:	3301      	adds	r3, #1
 8017f54:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017f56:	6a3b      	ldr	r3, [r7, #32]
 8017f58:	2b00      	cmp	r3, #0
 8017f5a:	d104      	bne.n	8017f66 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f5e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017f60:	69fb      	ldr	r3, [r7, #28]
 8017f62:	61bb      	str	r3, [r7, #24]
 8017f64:	e009      	b.n	8017f7a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f68:	7fda      	ldrb	r2, [r3, #31]
 8017f6a:	6a3b      	ldr	r3, [r7, #32]
 8017f6c:	7fdb      	ldrb	r3, [r3, #31]
 8017f6e:	429a      	cmp	r2, r3
 8017f70:	d803      	bhi.n	8017f7a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f74:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017f76:	69fb      	ldr	r3, [r7, #28]
 8017f78:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d001      	beq.n	8017f86 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f84:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8017f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d1cb      	bne.n	8017f2a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017f92:	6a3b      	ldr	r3, [r7, #32]
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d008      	beq.n	8017faa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017f98:	69b9      	ldr	r1, [r7, #24]
 8017f9a:	6a38      	ldr	r0, [r7, #32]
 8017f9c:	f7ff ff0e 	bl	8017dbc <ip_reass_free_complete_datagram>
 8017fa0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017fa2:	697a      	ldr	r2, [r7, #20]
 8017fa4:	68fb      	ldr	r3, [r7, #12]
 8017fa6:	4413      	add	r3, r2
 8017fa8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017faa:	697a      	ldr	r2, [r7, #20]
 8017fac:	683b      	ldr	r3, [r7, #0]
 8017fae:	429a      	cmp	r2, r3
 8017fb0:	da02      	bge.n	8017fb8 <ip_reass_remove_oldest_datagram+0xb4>
 8017fb2:	693b      	ldr	r3, [r7, #16]
 8017fb4:	2b01      	cmp	r3, #1
 8017fb6:	dcac      	bgt.n	8017f12 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017fb8:	697b      	ldr	r3, [r7, #20]
}
 8017fba:	4618      	mov	r0, r3
 8017fbc:	3728      	adds	r7, #40	@ 0x28
 8017fbe:	46bd      	mov	sp, r7
 8017fc0:	bd80      	pop	{r7, pc}
 8017fc2:	bf00      	nop
 8017fc4:	20010458 	.word	0x20010458

08017fc8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017fc8:	b580      	push	{r7, lr}
 8017fca:	b084      	sub	sp, #16
 8017fcc:	af00      	add	r7, sp, #0
 8017fce:	6078      	str	r0, [r7, #4]
 8017fd0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017fd2:	2004      	movs	r0, #4
 8017fd4:	f7f6 f958 	bl	800e288 <memp_malloc>
 8017fd8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d110      	bne.n	8018002 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017fe0:	6839      	ldr	r1, [r7, #0]
 8017fe2:	6878      	ldr	r0, [r7, #4]
 8017fe4:	f7ff ff8e 	bl	8017f04 <ip_reass_remove_oldest_datagram>
 8017fe8:	4602      	mov	r2, r0
 8017fea:	683b      	ldr	r3, [r7, #0]
 8017fec:	4293      	cmp	r3, r2
 8017fee:	dc03      	bgt.n	8017ff8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017ff0:	2004      	movs	r0, #4
 8017ff2:	f7f6 f949 	bl	800e288 <memp_malloc>
 8017ff6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017ff8:	68fb      	ldr	r3, [r7, #12]
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d101      	bne.n	8018002 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017ffe:	2300      	movs	r3, #0
 8018000:	e016      	b.n	8018030 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8018002:	2220      	movs	r2, #32
 8018004:	2100      	movs	r1, #0
 8018006:	68f8      	ldr	r0, [r7, #12]
 8018008:	f010 f91a 	bl	8028240 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801800c:	68fb      	ldr	r3, [r7, #12]
 801800e:	220f      	movs	r2, #15
 8018010:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8018012:	4b09      	ldr	r3, [pc, #36]	@ (8018038 <ip_reass_enqueue_new_datagram+0x70>)
 8018014:	681a      	ldr	r2, [r3, #0]
 8018016:	68fb      	ldr	r3, [r7, #12]
 8018018:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801801a:	4a07      	ldr	r2, [pc, #28]	@ (8018038 <ip_reass_enqueue_new_datagram+0x70>)
 801801c:	68fb      	ldr	r3, [r7, #12]
 801801e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018020:	68fb      	ldr	r3, [r7, #12]
 8018022:	3308      	adds	r3, #8
 8018024:	2214      	movs	r2, #20
 8018026:	6879      	ldr	r1, [r7, #4]
 8018028:	4618      	mov	r0, r3
 801802a:	f010 fa30 	bl	802848e <memcpy>
  return ipr;
 801802e:	68fb      	ldr	r3, [r7, #12]
}
 8018030:	4618      	mov	r0, r3
 8018032:	3710      	adds	r7, #16
 8018034:	46bd      	mov	sp, r7
 8018036:	bd80      	pop	{r7, pc}
 8018038:	20010458 	.word	0x20010458

0801803c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801803c:	b580      	push	{r7, lr}
 801803e:	b082      	sub	sp, #8
 8018040:	af00      	add	r7, sp, #0
 8018042:	6078      	str	r0, [r7, #4]
 8018044:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018046:	4b10      	ldr	r3, [pc, #64]	@ (8018088 <ip_reass_dequeue_datagram+0x4c>)
 8018048:	681b      	ldr	r3, [r3, #0]
 801804a:	687a      	ldr	r2, [r7, #4]
 801804c:	429a      	cmp	r2, r3
 801804e:	d104      	bne.n	801805a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	681b      	ldr	r3, [r3, #0]
 8018054:	4a0c      	ldr	r2, [pc, #48]	@ (8018088 <ip_reass_dequeue_datagram+0x4c>)
 8018056:	6013      	str	r3, [r2, #0]
 8018058:	e00d      	b.n	8018076 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801805a:	683b      	ldr	r3, [r7, #0]
 801805c:	2b00      	cmp	r3, #0
 801805e:	d106      	bne.n	801806e <ip_reass_dequeue_datagram+0x32>
 8018060:	4b0a      	ldr	r3, [pc, #40]	@ (801808c <ip_reass_dequeue_datagram+0x50>)
 8018062:	f240 1245 	movw	r2, #325	@ 0x145
 8018066:	490a      	ldr	r1, [pc, #40]	@ (8018090 <ip_reass_dequeue_datagram+0x54>)
 8018068:	480a      	ldr	r0, [pc, #40]	@ (8018094 <ip_reass_dequeue_datagram+0x58>)
 801806a:	f00f ff63 	bl	8027f34 <iprintf>
    prev->next = ipr->next;
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	681a      	ldr	r2, [r3, #0]
 8018072:	683b      	ldr	r3, [r7, #0]
 8018074:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8018076:	6879      	ldr	r1, [r7, #4]
 8018078:	2004      	movs	r0, #4
 801807a:	f7f6 f97b 	bl	800e374 <memp_free>
}
 801807e:	bf00      	nop
 8018080:	3708      	adds	r7, #8
 8018082:	46bd      	mov	sp, r7
 8018084:	bd80      	pop	{r7, pc}
 8018086:	bf00      	nop
 8018088:	20010458 	.word	0x20010458
 801808c:	0802c9fc 	.word	0x0802c9fc
 8018090:	0802cac4 	.word	0x0802cac4
 8018094:	0802ca44 	.word	0x0802ca44

08018098 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018098:	b580      	push	{r7, lr}
 801809a:	b08c      	sub	sp, #48	@ 0x30
 801809c:	af00      	add	r7, sp, #0
 801809e:	60f8      	str	r0, [r7, #12]
 80180a0:	60b9      	str	r1, [r7, #8]
 80180a2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80180a4:	2300      	movs	r3, #0
 80180a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80180a8:	2301      	movs	r3, #1
 80180aa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80180ac:	68bb      	ldr	r3, [r7, #8]
 80180ae:	685b      	ldr	r3, [r3, #4]
 80180b0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80180b2:	69fb      	ldr	r3, [r7, #28]
 80180b4:	885b      	ldrh	r3, [r3, #2]
 80180b6:	b29b      	uxth	r3, r3
 80180b8:	4618      	mov	r0, r3
 80180ba:	f7f5 fc11 	bl	800d8e0 <lwip_htons>
 80180be:	4603      	mov	r3, r0
 80180c0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80180c2:	69fb      	ldr	r3, [r7, #28]
 80180c4:	781b      	ldrb	r3, [r3, #0]
 80180c6:	f003 030f 	and.w	r3, r3, #15
 80180ca:	b2db      	uxtb	r3, r3
 80180cc:	009b      	lsls	r3, r3, #2
 80180ce:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80180d0:	7e7b      	ldrb	r3, [r7, #25]
 80180d2:	b29b      	uxth	r3, r3
 80180d4:	8b7a      	ldrh	r2, [r7, #26]
 80180d6:	429a      	cmp	r2, r3
 80180d8:	d202      	bcs.n	80180e0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80180da:	f04f 33ff 	mov.w	r3, #4294967295
 80180de:	e135      	b.n	801834c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80180e0:	7e7b      	ldrb	r3, [r7, #25]
 80180e2:	b29b      	uxth	r3, r3
 80180e4:	8b7a      	ldrh	r2, [r7, #26]
 80180e6:	1ad3      	subs	r3, r2, r3
 80180e8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80180ea:	69fb      	ldr	r3, [r7, #28]
 80180ec:	88db      	ldrh	r3, [r3, #6]
 80180ee:	b29b      	uxth	r3, r3
 80180f0:	4618      	mov	r0, r3
 80180f2:	f7f5 fbf5 	bl	800d8e0 <lwip_htons>
 80180f6:	4603      	mov	r3, r0
 80180f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80180fc:	b29b      	uxth	r3, r3
 80180fe:	00db      	lsls	r3, r3, #3
 8018100:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8018102:	68bb      	ldr	r3, [r7, #8]
 8018104:	685b      	ldr	r3, [r3, #4]
 8018106:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8018108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801810a:	2200      	movs	r2, #0
 801810c:	701a      	strb	r2, [r3, #0]
 801810e:	2200      	movs	r2, #0
 8018110:	705a      	strb	r2, [r3, #1]
 8018112:	2200      	movs	r2, #0
 8018114:	709a      	strb	r2, [r3, #2]
 8018116:	2200      	movs	r2, #0
 8018118:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801811a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801811c:	8afa      	ldrh	r2, [r7, #22]
 801811e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018120:	8afa      	ldrh	r2, [r7, #22]
 8018122:	8b7b      	ldrh	r3, [r7, #26]
 8018124:	4413      	add	r3, r2
 8018126:	b29a      	uxth	r2, r3
 8018128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801812a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801812c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801812e:	88db      	ldrh	r3, [r3, #6]
 8018130:	b29b      	uxth	r3, r3
 8018132:	8afa      	ldrh	r2, [r7, #22]
 8018134:	429a      	cmp	r2, r3
 8018136:	d902      	bls.n	801813e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018138:	f04f 33ff 	mov.w	r3, #4294967295
 801813c:	e106      	b.n	801834c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	685b      	ldr	r3, [r3, #4]
 8018142:	627b      	str	r3, [r7, #36]	@ 0x24
 8018144:	e068      	b.n	8018218 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8018146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018148:	685b      	ldr	r3, [r3, #4]
 801814a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801814c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801814e:	889b      	ldrh	r3, [r3, #4]
 8018150:	b29a      	uxth	r2, r3
 8018152:	693b      	ldr	r3, [r7, #16]
 8018154:	889b      	ldrh	r3, [r3, #4]
 8018156:	b29b      	uxth	r3, r3
 8018158:	429a      	cmp	r2, r3
 801815a:	d235      	bcs.n	80181c8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801815c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801815e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018160:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8018162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018164:	2b00      	cmp	r3, #0
 8018166:	d020      	beq.n	80181aa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801816a:	889b      	ldrh	r3, [r3, #4]
 801816c:	b29a      	uxth	r2, r3
 801816e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018170:	88db      	ldrh	r3, [r3, #6]
 8018172:	b29b      	uxth	r3, r3
 8018174:	429a      	cmp	r2, r3
 8018176:	d307      	bcc.n	8018188 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8018178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801817a:	88db      	ldrh	r3, [r3, #6]
 801817c:	b29a      	uxth	r2, r3
 801817e:	693b      	ldr	r3, [r7, #16]
 8018180:	889b      	ldrh	r3, [r3, #4]
 8018182:	b29b      	uxth	r3, r3
 8018184:	429a      	cmp	r2, r3
 8018186:	d902      	bls.n	801818e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018188:	f04f 33ff 	mov.w	r3, #4294967295
 801818c:	e0de      	b.n	801834c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801818e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018190:	68ba      	ldr	r2, [r7, #8]
 8018192:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018196:	88db      	ldrh	r3, [r3, #6]
 8018198:	b29a      	uxth	r2, r3
 801819a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801819c:	889b      	ldrh	r3, [r3, #4]
 801819e:	b29b      	uxth	r3, r3
 80181a0:	429a      	cmp	r2, r3
 80181a2:	d03d      	beq.n	8018220 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80181a4:	2300      	movs	r3, #0
 80181a6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80181a8:	e03a      	b.n	8018220 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80181aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80181ac:	88db      	ldrh	r3, [r3, #6]
 80181ae:	b29a      	uxth	r2, r3
 80181b0:	693b      	ldr	r3, [r7, #16]
 80181b2:	889b      	ldrh	r3, [r3, #4]
 80181b4:	b29b      	uxth	r3, r3
 80181b6:	429a      	cmp	r2, r3
 80181b8:	d902      	bls.n	80181c0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80181ba:	f04f 33ff 	mov.w	r3, #4294967295
 80181be:	e0c5      	b.n	801834c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80181c0:	68fb      	ldr	r3, [r7, #12]
 80181c2:	68ba      	ldr	r2, [r7, #8]
 80181c4:	605a      	str	r2, [r3, #4]
      break;
 80181c6:	e02b      	b.n	8018220 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80181c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80181ca:	889b      	ldrh	r3, [r3, #4]
 80181cc:	b29a      	uxth	r2, r3
 80181ce:	693b      	ldr	r3, [r7, #16]
 80181d0:	889b      	ldrh	r3, [r3, #4]
 80181d2:	b29b      	uxth	r3, r3
 80181d4:	429a      	cmp	r2, r3
 80181d6:	d102      	bne.n	80181de <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80181d8:	f04f 33ff 	mov.w	r3, #4294967295
 80181dc:	e0b6      	b.n	801834c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80181de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80181e0:	889b      	ldrh	r3, [r3, #4]
 80181e2:	b29a      	uxth	r2, r3
 80181e4:	693b      	ldr	r3, [r7, #16]
 80181e6:	88db      	ldrh	r3, [r3, #6]
 80181e8:	b29b      	uxth	r3, r3
 80181ea:	429a      	cmp	r2, r3
 80181ec:	d202      	bcs.n	80181f4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80181ee:	f04f 33ff 	mov.w	r3, #4294967295
 80181f2:	e0ab      	b.n	801834c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80181f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d009      	beq.n	801820e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80181fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181fc:	88db      	ldrh	r3, [r3, #6]
 80181fe:	b29a      	uxth	r2, r3
 8018200:	693b      	ldr	r3, [r7, #16]
 8018202:	889b      	ldrh	r3, [r3, #4]
 8018204:	b29b      	uxth	r3, r3
 8018206:	429a      	cmp	r2, r3
 8018208:	d001      	beq.n	801820e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801820a:	2300      	movs	r3, #0
 801820c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801820e:	693b      	ldr	r3, [r7, #16]
 8018210:	681b      	ldr	r3, [r3, #0]
 8018212:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8018214:	693b      	ldr	r3, [r7, #16]
 8018216:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8018218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801821a:	2b00      	cmp	r3, #0
 801821c:	d193      	bne.n	8018146 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801821e:	e000      	b.n	8018222 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8018220:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8018222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018224:	2b00      	cmp	r3, #0
 8018226:	d12d      	bne.n	8018284 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801822a:	2b00      	cmp	r3, #0
 801822c:	d01c      	beq.n	8018268 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801822e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018230:	88db      	ldrh	r3, [r3, #6]
 8018232:	b29a      	uxth	r2, r3
 8018234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018236:	889b      	ldrh	r3, [r3, #4]
 8018238:	b29b      	uxth	r3, r3
 801823a:	429a      	cmp	r2, r3
 801823c:	d906      	bls.n	801824c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801823e:	4b45      	ldr	r3, [pc, #276]	@ (8018354 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018240:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8018244:	4944      	ldr	r1, [pc, #272]	@ (8018358 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018246:	4845      	ldr	r0, [pc, #276]	@ (801835c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018248:	f00f fe74 	bl	8027f34 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801824c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801824e:	68ba      	ldr	r2, [r7, #8]
 8018250:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8018252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018254:	88db      	ldrh	r3, [r3, #6]
 8018256:	b29a      	uxth	r2, r3
 8018258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801825a:	889b      	ldrh	r3, [r3, #4]
 801825c:	b29b      	uxth	r3, r3
 801825e:	429a      	cmp	r2, r3
 8018260:	d010      	beq.n	8018284 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8018262:	2300      	movs	r3, #0
 8018264:	623b      	str	r3, [r7, #32]
 8018266:	e00d      	b.n	8018284 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018268:	68fb      	ldr	r3, [r7, #12]
 801826a:	685b      	ldr	r3, [r3, #4]
 801826c:	2b00      	cmp	r3, #0
 801826e:	d006      	beq.n	801827e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018270:	4b38      	ldr	r3, [pc, #224]	@ (8018354 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018272:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8018276:	493a      	ldr	r1, [pc, #232]	@ (8018360 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018278:	4838      	ldr	r0, [pc, #224]	@ (801835c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801827a:	f00f fe5b 	bl	8027f34 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801827e:	68fb      	ldr	r3, [r7, #12]
 8018280:	68ba      	ldr	r2, [r7, #8]
 8018282:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	2b00      	cmp	r3, #0
 8018288:	d105      	bne.n	8018296 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	7f9b      	ldrb	r3, [r3, #30]
 801828e:	f003 0301 	and.w	r3, r3, #1
 8018292:	2b00      	cmp	r3, #0
 8018294:	d059      	beq.n	801834a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018296:	6a3b      	ldr	r3, [r7, #32]
 8018298:	2b00      	cmp	r3, #0
 801829a:	d04f      	beq.n	801833c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801829c:	68fb      	ldr	r3, [r7, #12]
 801829e:	685b      	ldr	r3, [r3, #4]
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	d006      	beq.n	80182b2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80182a4:	68fb      	ldr	r3, [r7, #12]
 80182a6:	685b      	ldr	r3, [r3, #4]
 80182a8:	685b      	ldr	r3, [r3, #4]
 80182aa:	889b      	ldrh	r3, [r3, #4]
 80182ac:	b29b      	uxth	r3, r3
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d002      	beq.n	80182b8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80182b2:	2300      	movs	r3, #0
 80182b4:	623b      	str	r3, [r7, #32]
 80182b6:	e041      	b.n	801833c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80182b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182ba:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80182bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80182c2:	e012      	b.n	80182ea <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80182c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182c6:	685b      	ldr	r3, [r3, #4]
 80182c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 80182ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80182cc:	88db      	ldrh	r3, [r3, #6]
 80182ce:	b29a      	uxth	r2, r3
 80182d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182d2:	889b      	ldrh	r3, [r3, #4]
 80182d4:	b29b      	uxth	r3, r3
 80182d6:	429a      	cmp	r2, r3
 80182d8:	d002      	beq.n	80182e0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80182da:	2300      	movs	r3, #0
 80182dc:	623b      	str	r3, [r7, #32]
            break;
 80182de:	e007      	b.n	80182f0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80182e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182e2:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80182e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80182ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	d1e9      	bne.n	80182c4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80182f0:	6a3b      	ldr	r3, [r7, #32]
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d022      	beq.n	801833c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80182f6:	68fb      	ldr	r3, [r7, #12]
 80182f8:	685b      	ldr	r3, [r3, #4]
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d106      	bne.n	801830c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80182fe:	4b15      	ldr	r3, [pc, #84]	@ (8018354 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018300:	f240 12df 	movw	r2, #479	@ 0x1df
 8018304:	4917      	ldr	r1, [pc, #92]	@ (8018364 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018306:	4815      	ldr	r0, [pc, #84]	@ (801835c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018308:	f00f fe14 	bl	8027f34 <iprintf>
          LWIP_ASSERT("sanity check",
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	685b      	ldr	r3, [r3, #4]
 8018310:	685b      	ldr	r3, [r3, #4]
 8018312:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018314:	429a      	cmp	r2, r3
 8018316:	d106      	bne.n	8018326 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018318:	4b0e      	ldr	r3, [pc, #56]	@ (8018354 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801831a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801831e:	4911      	ldr	r1, [pc, #68]	@ (8018364 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018320:	480e      	ldr	r0, [pc, #56]	@ (801835c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018322:	f00f fe07 	bl	8027f34 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	2b00      	cmp	r3, #0
 801832c:	d006      	beq.n	801833c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801832e:	4b09      	ldr	r3, [pc, #36]	@ (8018354 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018330:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8018334:	490c      	ldr	r1, [pc, #48]	@ (8018368 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018336:	4809      	ldr	r0, [pc, #36]	@ (801835c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018338:	f00f fdfc 	bl	8027f34 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801833c:	6a3b      	ldr	r3, [r7, #32]
 801833e:	2b00      	cmp	r3, #0
 8018340:	bf14      	ite	ne
 8018342:	2301      	movne	r3, #1
 8018344:	2300      	moveq	r3, #0
 8018346:	b2db      	uxtb	r3, r3
 8018348:	e000      	b.n	801834c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801834a:	2300      	movs	r3, #0
}
 801834c:	4618      	mov	r0, r3
 801834e:	3730      	adds	r7, #48	@ 0x30
 8018350:	46bd      	mov	sp, r7
 8018352:	bd80      	pop	{r7, pc}
 8018354:	0802c9fc 	.word	0x0802c9fc
 8018358:	0802cae0 	.word	0x0802cae0
 801835c:	0802ca44 	.word	0x0802ca44
 8018360:	0802cb00 	.word	0x0802cb00
 8018364:	0802cb38 	.word	0x0802cb38
 8018368:	0802cb48 	.word	0x0802cb48

0801836c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801836c:	b580      	push	{r7, lr}
 801836e:	b08e      	sub	sp, #56	@ 0x38
 8018370:	af00      	add	r7, sp, #0
 8018372:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	685b      	ldr	r3, [r3, #4]
 8018378:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801837a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801837c:	781b      	ldrb	r3, [r3, #0]
 801837e:	f003 030f 	and.w	r3, r3, #15
 8018382:	b2db      	uxtb	r3, r3
 8018384:	009b      	lsls	r3, r3, #2
 8018386:	b2db      	uxtb	r3, r3
 8018388:	2b14      	cmp	r3, #20
 801838a:	f040 8171 	bne.w	8018670 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801838e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018390:	88db      	ldrh	r3, [r3, #6]
 8018392:	b29b      	uxth	r3, r3
 8018394:	4618      	mov	r0, r3
 8018396:	f7f5 faa3 	bl	800d8e0 <lwip_htons>
 801839a:	4603      	mov	r3, r0
 801839c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80183a0:	b29b      	uxth	r3, r3
 80183a2:	00db      	lsls	r3, r3, #3
 80183a4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80183a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80183a8:	885b      	ldrh	r3, [r3, #2]
 80183aa:	b29b      	uxth	r3, r3
 80183ac:	4618      	mov	r0, r3
 80183ae:	f7f5 fa97 	bl	800d8e0 <lwip_htons>
 80183b2:	4603      	mov	r3, r0
 80183b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80183b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80183b8:	781b      	ldrb	r3, [r3, #0]
 80183ba:	f003 030f 	and.w	r3, r3, #15
 80183be:	b2db      	uxtb	r3, r3
 80183c0:	009b      	lsls	r3, r3, #2
 80183c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 80183c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80183ca:	b29b      	uxth	r3, r3
 80183cc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80183ce:	429a      	cmp	r2, r3
 80183d0:	f0c0 8150 	bcc.w	8018674 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80183d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80183d8:	b29b      	uxth	r3, r3
 80183da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80183dc:	1ad3      	subs	r3, r2, r3
 80183de:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80183e0:	6878      	ldr	r0, [r7, #4]
 80183e2:	f7f6 ff63 	bl	800f2ac <pbuf_clen>
 80183e6:	4603      	mov	r3, r0
 80183e8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80183ea:	4b8c      	ldr	r3, [pc, #560]	@ (801861c <ip4_reass+0x2b0>)
 80183ec:	881b      	ldrh	r3, [r3, #0]
 80183ee:	461a      	mov	r2, r3
 80183f0:	8c3b      	ldrh	r3, [r7, #32]
 80183f2:	4413      	add	r3, r2
 80183f4:	2b0a      	cmp	r3, #10
 80183f6:	dd10      	ble.n	801841a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80183f8:	8c3b      	ldrh	r3, [r7, #32]
 80183fa:	4619      	mov	r1, r3
 80183fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80183fe:	f7ff fd81 	bl	8017f04 <ip_reass_remove_oldest_datagram>
 8018402:	4603      	mov	r3, r0
 8018404:	2b00      	cmp	r3, #0
 8018406:	f000 8137 	beq.w	8018678 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801840a:	4b84      	ldr	r3, [pc, #528]	@ (801861c <ip4_reass+0x2b0>)
 801840c:	881b      	ldrh	r3, [r3, #0]
 801840e:	461a      	mov	r2, r3
 8018410:	8c3b      	ldrh	r3, [r7, #32]
 8018412:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018414:	2b0a      	cmp	r3, #10
 8018416:	f300 812f 	bgt.w	8018678 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801841a:	4b81      	ldr	r3, [pc, #516]	@ (8018620 <ip4_reass+0x2b4>)
 801841c:	681b      	ldr	r3, [r3, #0]
 801841e:	633b      	str	r3, [r7, #48]	@ 0x30
 8018420:	e015      	b.n	801844e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018424:	695a      	ldr	r2, [r3, #20]
 8018426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018428:	68db      	ldr	r3, [r3, #12]
 801842a:	429a      	cmp	r2, r3
 801842c:	d10c      	bne.n	8018448 <ip4_reass+0xdc>
 801842e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018430:	699a      	ldr	r2, [r3, #24]
 8018432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018434:	691b      	ldr	r3, [r3, #16]
 8018436:	429a      	cmp	r2, r3
 8018438:	d106      	bne.n	8018448 <ip4_reass+0xdc>
 801843a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801843c:	899a      	ldrh	r2, [r3, #12]
 801843e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018440:	889b      	ldrh	r3, [r3, #4]
 8018442:	b29b      	uxth	r3, r3
 8018444:	429a      	cmp	r2, r3
 8018446:	d006      	beq.n	8018456 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801844a:	681b      	ldr	r3, [r3, #0]
 801844c:	633b      	str	r3, [r7, #48]	@ 0x30
 801844e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018450:	2b00      	cmp	r3, #0
 8018452:	d1e6      	bne.n	8018422 <ip4_reass+0xb6>
 8018454:	e000      	b.n	8018458 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018456:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801845a:	2b00      	cmp	r3, #0
 801845c:	d109      	bne.n	8018472 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801845e:	8c3b      	ldrh	r3, [r7, #32]
 8018460:	4619      	mov	r1, r3
 8018462:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018464:	f7ff fdb0 	bl	8017fc8 <ip_reass_enqueue_new_datagram>
 8018468:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801846a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801846c:	2b00      	cmp	r3, #0
 801846e:	d11c      	bne.n	80184aa <ip4_reass+0x13e>
      goto nullreturn;
 8018470:	e105      	b.n	801867e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018474:	88db      	ldrh	r3, [r3, #6]
 8018476:	b29b      	uxth	r3, r3
 8018478:	4618      	mov	r0, r3
 801847a:	f7f5 fa31 	bl	800d8e0 <lwip_htons>
 801847e:	4603      	mov	r3, r0
 8018480:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018484:	2b00      	cmp	r3, #0
 8018486:	d110      	bne.n	80184aa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801848a:	89db      	ldrh	r3, [r3, #14]
 801848c:	4618      	mov	r0, r3
 801848e:	f7f5 fa27 	bl	800d8e0 <lwip_htons>
 8018492:	4603      	mov	r3, r0
 8018494:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018498:	2b00      	cmp	r3, #0
 801849a:	d006      	beq.n	80184aa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801849c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801849e:	3308      	adds	r3, #8
 80184a0:	2214      	movs	r2, #20
 80184a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80184a4:	4618      	mov	r0, r3
 80184a6:	f00f fff2 	bl	802848e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80184aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184ac:	88db      	ldrh	r3, [r3, #6]
 80184ae:	b29b      	uxth	r3, r3
 80184b0:	f003 0320 	and.w	r3, r3, #32
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	bf0c      	ite	eq
 80184b8:	2301      	moveq	r3, #1
 80184ba:	2300      	movne	r3, #0
 80184bc:	b2db      	uxtb	r3, r3
 80184be:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80184c0:	69fb      	ldr	r3, [r7, #28]
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	d00e      	beq.n	80184e4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80184c6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80184c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80184ca:	4413      	add	r3, r2
 80184cc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80184ce:	8b7a      	ldrh	r2, [r7, #26]
 80184d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80184d2:	429a      	cmp	r2, r3
 80184d4:	f0c0 80a0 	bcc.w	8018618 <ip4_reass+0x2ac>
 80184d8:	8b7b      	ldrh	r3, [r7, #26]
 80184da:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 80184de:	4293      	cmp	r3, r2
 80184e0:	f200 809a 	bhi.w	8018618 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80184e4:	69fa      	ldr	r2, [r7, #28]
 80184e6:	6879      	ldr	r1, [r7, #4]
 80184e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80184ea:	f7ff fdd5 	bl	8018098 <ip_reass_chain_frag_into_datagram_and_validate>
 80184ee:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80184f0:	697b      	ldr	r3, [r7, #20]
 80184f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80184f6:	f000 809b 	beq.w	8018630 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80184fa:	4b48      	ldr	r3, [pc, #288]	@ (801861c <ip4_reass+0x2b0>)
 80184fc:	881a      	ldrh	r2, [r3, #0]
 80184fe:	8c3b      	ldrh	r3, [r7, #32]
 8018500:	4413      	add	r3, r2
 8018502:	b29a      	uxth	r2, r3
 8018504:	4b45      	ldr	r3, [pc, #276]	@ (801861c <ip4_reass+0x2b0>)
 8018506:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018508:	69fb      	ldr	r3, [r7, #28]
 801850a:	2b00      	cmp	r3, #0
 801850c:	d00d      	beq.n	801852a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801850e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8018510:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018512:	4413      	add	r3, r2
 8018514:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018518:	8a7a      	ldrh	r2, [r7, #18]
 801851a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801851c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801851e:	7f9b      	ldrb	r3, [r3, #30]
 8018520:	f043 0301 	orr.w	r3, r3, #1
 8018524:	b2da      	uxtb	r2, r3
 8018526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018528:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801852a:	697b      	ldr	r3, [r7, #20]
 801852c:	2b01      	cmp	r3, #1
 801852e:	d171      	bne.n	8018614 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018532:	8b9b      	ldrh	r3, [r3, #28]
 8018534:	3314      	adds	r3, #20
 8018536:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801853a:	685b      	ldr	r3, [r3, #4]
 801853c:	685b      	ldr	r3, [r3, #4]
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018544:	685b      	ldr	r3, [r3, #4]
 8018546:	685b      	ldr	r3, [r3, #4]
 8018548:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801854a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801854c:	3308      	adds	r3, #8
 801854e:	2214      	movs	r2, #20
 8018550:	4619      	mov	r1, r3
 8018552:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018554:	f00f ff9b 	bl	802848e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018558:	8a3b      	ldrh	r3, [r7, #16]
 801855a:	4618      	mov	r0, r3
 801855c:	f7f5 f9c0 	bl	800d8e0 <lwip_htons>
 8018560:	4603      	mov	r3, r0
 8018562:	461a      	mov	r2, r3
 8018564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018566:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801856a:	2200      	movs	r2, #0
 801856c:	719a      	strb	r2, [r3, #6]
 801856e:	2200      	movs	r2, #0
 8018570:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018574:	2200      	movs	r2, #0
 8018576:	729a      	strb	r2, [r3, #10]
 8018578:	2200      	movs	r2, #0
 801857a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801857c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801857e:	685b      	ldr	r3, [r3, #4]
 8018580:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018582:	e00d      	b.n	80185a0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018586:	685b      	ldr	r3, [r3, #4]
 8018588:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801858a:	2114      	movs	r1, #20
 801858c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801858e:	f7f6 fd47 	bl	800f020 <pbuf_remove_header>
      pbuf_cat(p, r);
 8018592:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8018594:	6878      	ldr	r0, [r7, #4]
 8018596:	f7f6 fec9 	bl	800f32c <pbuf_cat>
      r = iprh->next_pbuf;
 801859a:	68fb      	ldr	r3, [r7, #12]
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80185a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d1ee      	bne.n	8018584 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80185a6:	4b1e      	ldr	r3, [pc, #120]	@ (8018620 <ip4_reass+0x2b4>)
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80185ac:	429a      	cmp	r2, r3
 80185ae:	d102      	bne.n	80185b6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80185b0:	2300      	movs	r3, #0
 80185b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80185b4:	e010      	b.n	80185d8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80185b6:	4b1a      	ldr	r3, [pc, #104]	@ (8018620 <ip4_reass+0x2b4>)
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80185bc:	e007      	b.n	80185ce <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80185be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80185c0:	681b      	ldr	r3, [r3, #0]
 80185c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80185c4:	429a      	cmp	r2, r3
 80185c6:	d006      	beq.n	80185d6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80185c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80185ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d1f4      	bne.n	80185be <ip4_reass+0x252>
 80185d4:	e000      	b.n	80185d8 <ip4_reass+0x26c>
          break;
 80185d6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80185d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80185da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80185dc:	f7ff fd2e 	bl	801803c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80185e0:	6878      	ldr	r0, [r7, #4]
 80185e2:	f7f6 fe63 	bl	800f2ac <pbuf_clen>
 80185e6:	4603      	mov	r3, r0
 80185e8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80185ea:	4b0c      	ldr	r3, [pc, #48]	@ (801861c <ip4_reass+0x2b0>)
 80185ec:	881b      	ldrh	r3, [r3, #0]
 80185ee:	8c3a      	ldrh	r2, [r7, #32]
 80185f0:	429a      	cmp	r2, r3
 80185f2:	d906      	bls.n	8018602 <ip4_reass+0x296>
 80185f4:	4b0b      	ldr	r3, [pc, #44]	@ (8018624 <ip4_reass+0x2b8>)
 80185f6:	f240 229b 	movw	r2, #667	@ 0x29b
 80185fa:	490b      	ldr	r1, [pc, #44]	@ (8018628 <ip4_reass+0x2bc>)
 80185fc:	480b      	ldr	r0, [pc, #44]	@ (801862c <ip4_reass+0x2c0>)
 80185fe:	f00f fc99 	bl	8027f34 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018602:	4b06      	ldr	r3, [pc, #24]	@ (801861c <ip4_reass+0x2b0>)
 8018604:	881a      	ldrh	r2, [r3, #0]
 8018606:	8c3b      	ldrh	r3, [r7, #32]
 8018608:	1ad3      	subs	r3, r2, r3
 801860a:	b29a      	uxth	r2, r3
 801860c:	4b03      	ldr	r3, [pc, #12]	@ (801861c <ip4_reass+0x2b0>)
 801860e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	e038      	b.n	8018686 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018614:	2300      	movs	r3, #0
 8018616:	e036      	b.n	8018686 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018618:	bf00      	nop
 801861a:	e00a      	b.n	8018632 <ip4_reass+0x2c6>
 801861c:	2001045c 	.word	0x2001045c
 8018620:	20010458 	.word	0x20010458
 8018624:	0802c9fc 	.word	0x0802c9fc
 8018628:	0802cb6c 	.word	0x0802cb6c
 801862c:	0802ca44 	.word	0x0802ca44
    goto nullreturn_ipr;
 8018630:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018634:	2b00      	cmp	r3, #0
 8018636:	d106      	bne.n	8018646 <ip4_reass+0x2da>
 8018638:	4b15      	ldr	r3, [pc, #84]	@ (8018690 <ip4_reass+0x324>)
 801863a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801863e:	4915      	ldr	r1, [pc, #84]	@ (8018694 <ip4_reass+0x328>)
 8018640:	4815      	ldr	r0, [pc, #84]	@ (8018698 <ip4_reass+0x32c>)
 8018642:	f00f fc77 	bl	8027f34 <iprintf>
  if (ipr->p == NULL) {
 8018646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018648:	685b      	ldr	r3, [r3, #4]
 801864a:	2b00      	cmp	r3, #0
 801864c:	d116      	bne.n	801867c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801864e:	4b13      	ldr	r3, [pc, #76]	@ (801869c <ip4_reass+0x330>)
 8018650:	681b      	ldr	r3, [r3, #0]
 8018652:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018654:	429a      	cmp	r2, r3
 8018656:	d006      	beq.n	8018666 <ip4_reass+0x2fa>
 8018658:	4b0d      	ldr	r3, [pc, #52]	@ (8018690 <ip4_reass+0x324>)
 801865a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801865e:	4910      	ldr	r1, [pc, #64]	@ (80186a0 <ip4_reass+0x334>)
 8018660:	480d      	ldr	r0, [pc, #52]	@ (8018698 <ip4_reass+0x32c>)
 8018662:	f00f fc67 	bl	8027f34 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018666:	2100      	movs	r1, #0
 8018668:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801866a:	f7ff fce7 	bl	801803c <ip_reass_dequeue_datagram>
 801866e:	e006      	b.n	801867e <ip4_reass+0x312>
    goto nullreturn;
 8018670:	bf00      	nop
 8018672:	e004      	b.n	801867e <ip4_reass+0x312>
    goto nullreturn;
 8018674:	bf00      	nop
 8018676:	e002      	b.n	801867e <ip4_reass+0x312>
      goto nullreturn;
 8018678:	bf00      	nop
 801867a:	e000      	b.n	801867e <ip4_reass+0x312>
  }

nullreturn:
 801867c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801867e:	6878      	ldr	r0, [r7, #4]
 8018680:	f7f6 fd86 	bl	800f190 <pbuf_free>
  return NULL;
 8018684:	2300      	movs	r3, #0
}
 8018686:	4618      	mov	r0, r3
 8018688:	3738      	adds	r7, #56	@ 0x38
 801868a:	46bd      	mov	sp, r7
 801868c:	bd80      	pop	{r7, pc}
 801868e:	bf00      	nop
 8018690:	0802c9fc 	.word	0x0802c9fc
 8018694:	0802cb88 	.word	0x0802cb88
 8018698:	0802ca44 	.word	0x0802ca44
 801869c:	20010458 	.word	0x20010458
 80186a0:	0802cb94 	.word	0x0802cb94

080186a4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80186a4:	b580      	push	{r7, lr}
 80186a6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80186a8:	2005      	movs	r0, #5
 80186aa:	f7f5 fded 	bl	800e288 <memp_malloc>
 80186ae:	4603      	mov	r3, r0
}
 80186b0:	4618      	mov	r0, r3
 80186b2:	bd80      	pop	{r7, pc}

080186b4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80186b4:	b580      	push	{r7, lr}
 80186b6:	b082      	sub	sp, #8
 80186b8:	af00      	add	r7, sp, #0
 80186ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d106      	bne.n	80186d0 <ip_frag_free_pbuf_custom_ref+0x1c>
 80186c2:	4b07      	ldr	r3, [pc, #28]	@ (80186e0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80186c4:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80186c8:	4906      	ldr	r1, [pc, #24]	@ (80186e4 <ip_frag_free_pbuf_custom_ref+0x30>)
 80186ca:	4807      	ldr	r0, [pc, #28]	@ (80186e8 <ip_frag_free_pbuf_custom_ref+0x34>)
 80186cc:	f00f fc32 	bl	8027f34 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80186d0:	6879      	ldr	r1, [r7, #4]
 80186d2:	2005      	movs	r0, #5
 80186d4:	f7f5 fe4e 	bl	800e374 <memp_free>
}
 80186d8:	bf00      	nop
 80186da:	3708      	adds	r7, #8
 80186dc:	46bd      	mov	sp, r7
 80186de:	bd80      	pop	{r7, pc}
 80186e0:	0802c9fc 	.word	0x0802c9fc
 80186e4:	0802cbb4 	.word	0x0802cbb4
 80186e8:	0802ca44 	.word	0x0802ca44

080186ec <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80186ec:	b580      	push	{r7, lr}
 80186ee:	b084      	sub	sp, #16
 80186f0:	af00      	add	r7, sp, #0
 80186f2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80186f8:	68fb      	ldr	r3, [r7, #12]
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d106      	bne.n	801870c <ipfrag_free_pbuf_custom+0x20>
 80186fe:	4b11      	ldr	r3, [pc, #68]	@ (8018744 <ipfrag_free_pbuf_custom+0x58>)
 8018700:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8018704:	4910      	ldr	r1, [pc, #64]	@ (8018748 <ipfrag_free_pbuf_custom+0x5c>)
 8018706:	4811      	ldr	r0, [pc, #68]	@ (801874c <ipfrag_free_pbuf_custom+0x60>)
 8018708:	f00f fc14 	bl	8027f34 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801870c:	68fa      	ldr	r2, [r7, #12]
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	429a      	cmp	r2, r3
 8018712:	d006      	beq.n	8018722 <ipfrag_free_pbuf_custom+0x36>
 8018714:	4b0b      	ldr	r3, [pc, #44]	@ (8018744 <ipfrag_free_pbuf_custom+0x58>)
 8018716:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801871a:	490d      	ldr	r1, [pc, #52]	@ (8018750 <ipfrag_free_pbuf_custom+0x64>)
 801871c:	480b      	ldr	r0, [pc, #44]	@ (801874c <ipfrag_free_pbuf_custom+0x60>)
 801871e:	f00f fc09 	bl	8027f34 <iprintf>
  if (pcr->original != NULL) {
 8018722:	68fb      	ldr	r3, [r7, #12]
 8018724:	695b      	ldr	r3, [r3, #20]
 8018726:	2b00      	cmp	r3, #0
 8018728:	d004      	beq.n	8018734 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	695b      	ldr	r3, [r3, #20]
 801872e:	4618      	mov	r0, r3
 8018730:	f7f6 fd2e 	bl	800f190 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018734:	68f8      	ldr	r0, [r7, #12]
 8018736:	f7ff ffbd 	bl	80186b4 <ip_frag_free_pbuf_custom_ref>
}
 801873a:	bf00      	nop
 801873c:	3710      	adds	r7, #16
 801873e:	46bd      	mov	sp, r7
 8018740:	bd80      	pop	{r7, pc}
 8018742:	bf00      	nop
 8018744:	0802c9fc 	.word	0x0802c9fc
 8018748:	0802cbc0 	.word	0x0802cbc0
 801874c:	0802ca44 	.word	0x0802ca44
 8018750:	0802cbcc 	.word	0x0802cbcc

08018754 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018754:	b580      	push	{r7, lr}
 8018756:	b094      	sub	sp, #80	@ 0x50
 8018758:	af02      	add	r7, sp, #8
 801875a:	60f8      	str	r0, [r7, #12]
 801875c:	60b9      	str	r1, [r7, #8]
 801875e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018760:	2300      	movs	r3, #0
 8018762:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018766:	68bb      	ldr	r3, [r7, #8]
 8018768:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801876a:	3b14      	subs	r3, #20
 801876c:	2b00      	cmp	r3, #0
 801876e:	da00      	bge.n	8018772 <ip4_frag+0x1e>
 8018770:	3307      	adds	r3, #7
 8018772:	10db      	asrs	r3, r3, #3
 8018774:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018776:	2314      	movs	r3, #20
 8018778:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801877a:	68fb      	ldr	r3, [r7, #12]
 801877c:	685b      	ldr	r3, [r3, #4]
 801877e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8018780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018782:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018786:	781b      	ldrb	r3, [r3, #0]
 8018788:	f003 030f 	and.w	r3, r3, #15
 801878c:	b2db      	uxtb	r3, r3
 801878e:	009b      	lsls	r3, r3, #2
 8018790:	b2db      	uxtb	r3, r3
 8018792:	2b14      	cmp	r3, #20
 8018794:	d002      	beq.n	801879c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018796:	f06f 0305 	mvn.w	r3, #5
 801879a:	e110      	b.n	80189be <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	895b      	ldrh	r3, [r3, #10]
 80187a0:	2b13      	cmp	r3, #19
 80187a2:	d809      	bhi.n	80187b8 <ip4_frag+0x64>
 80187a4:	4b88      	ldr	r3, [pc, #544]	@ (80189c8 <ip4_frag+0x274>)
 80187a6:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80187aa:	4988      	ldr	r1, [pc, #544]	@ (80189cc <ip4_frag+0x278>)
 80187ac:	4888      	ldr	r0, [pc, #544]	@ (80189d0 <ip4_frag+0x27c>)
 80187ae:	f00f fbc1 	bl	8027f34 <iprintf>
 80187b2:	f06f 0305 	mvn.w	r3, #5
 80187b6:	e102      	b.n	80189be <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80187b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187ba:	88db      	ldrh	r3, [r3, #6]
 80187bc:	b29b      	uxth	r3, r3
 80187be:	4618      	mov	r0, r3
 80187c0:	f7f5 f88e 	bl	800d8e0 <lwip_htons>
 80187c4:	4603      	mov	r3, r0
 80187c6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 80187c8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80187ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80187ce:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80187d2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80187d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80187d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80187da:	68fb      	ldr	r3, [r7, #12]
 80187dc:	891b      	ldrh	r3, [r3, #8]
 80187de:	3b14      	subs	r3, #20
 80187e0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 80187e4:	e0e1      	b.n	80189aa <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80187e6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80187e8:	00db      	lsls	r3, r3, #3
 80187ea:	b29b      	uxth	r3, r3
 80187ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80187f0:	4293      	cmp	r3, r2
 80187f2:	bf28      	it	cs
 80187f4:	4613      	movcs	r3, r2
 80187f6:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80187f8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80187fc:	2114      	movs	r1, #20
 80187fe:	200e      	movs	r0, #14
 8018800:	f7f6 f9b0 	bl	800eb64 <pbuf_alloc>
 8018804:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8018806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018808:	2b00      	cmp	r3, #0
 801880a:	f000 80d5 	beq.w	80189b8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801880e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018810:	895b      	ldrh	r3, [r3, #10]
 8018812:	2b13      	cmp	r3, #19
 8018814:	d806      	bhi.n	8018824 <ip4_frag+0xd0>
 8018816:	4b6c      	ldr	r3, [pc, #432]	@ (80189c8 <ip4_frag+0x274>)
 8018818:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801881c:	496d      	ldr	r1, [pc, #436]	@ (80189d4 <ip4_frag+0x280>)
 801881e:	486c      	ldr	r0, [pc, #432]	@ (80189d0 <ip4_frag+0x27c>)
 8018820:	f00f fb88 	bl	8027f34 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018826:	685b      	ldr	r3, [r3, #4]
 8018828:	2214      	movs	r2, #20
 801882a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801882c:	4618      	mov	r0, r3
 801882e:	f00f fe2e 	bl	802848e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018834:	685b      	ldr	r3, [r3, #4]
 8018836:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8018838:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801883a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801883e:	e064      	b.n	801890a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018840:	68fb      	ldr	r3, [r7, #12]
 8018842:	895a      	ldrh	r2, [r3, #10]
 8018844:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018846:	1ad3      	subs	r3, r2, r3
 8018848:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801884a:	68fb      	ldr	r3, [r7, #12]
 801884c:	895b      	ldrh	r3, [r3, #10]
 801884e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8018850:	429a      	cmp	r2, r3
 8018852:	d906      	bls.n	8018862 <ip4_frag+0x10e>
 8018854:	4b5c      	ldr	r3, [pc, #368]	@ (80189c8 <ip4_frag+0x274>)
 8018856:	f240 322d 	movw	r2, #813	@ 0x32d
 801885a:	495f      	ldr	r1, [pc, #380]	@ (80189d8 <ip4_frag+0x284>)
 801885c:	485c      	ldr	r0, [pc, #368]	@ (80189d0 <ip4_frag+0x27c>)
 801885e:	f00f fb69 	bl	8027f34 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018862:	8bfa      	ldrh	r2, [r7, #30]
 8018864:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018868:	4293      	cmp	r3, r2
 801886a:	bf28      	it	cs
 801886c:	4613      	movcs	r3, r2
 801886e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018872:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018876:	2b00      	cmp	r3, #0
 8018878:	d105      	bne.n	8018886 <ip4_frag+0x132>
        poff = 0;
 801887a:	2300      	movs	r3, #0
 801887c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801887e:	68fb      	ldr	r3, [r7, #12]
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	60fb      	str	r3, [r7, #12]
        continue;
 8018884:	e041      	b.n	801890a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018886:	f7ff ff0d 	bl	80186a4 <ip_frag_alloc_pbuf_custom_ref>
 801888a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801888c:	69bb      	ldr	r3, [r7, #24]
 801888e:	2b00      	cmp	r3, #0
 8018890:	d103      	bne.n	801889a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018892:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018894:	f7f6 fc7c 	bl	800f190 <pbuf_free>
        goto memerr;
 8018898:	e08f      	b.n	80189ba <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801889a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801889c:	68fb      	ldr	r3, [r7, #12]
 801889e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80188a0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80188a2:	4413      	add	r3, r2
 80188a4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80188a8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80188ac:	9201      	str	r2, [sp, #4]
 80188ae:	9300      	str	r3, [sp, #0]
 80188b0:	4603      	mov	r3, r0
 80188b2:	2241      	movs	r2, #65	@ 0x41
 80188b4:	2000      	movs	r0, #0
 80188b6:	f7f6 fa7f 	bl	800edb8 <pbuf_alloced_custom>
 80188ba:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80188bc:	697b      	ldr	r3, [r7, #20]
 80188be:	2b00      	cmp	r3, #0
 80188c0:	d106      	bne.n	80188d0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80188c2:	69b8      	ldr	r0, [r7, #24]
 80188c4:	f7ff fef6 	bl	80186b4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80188c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80188ca:	f7f6 fc61 	bl	800f190 <pbuf_free>
        goto memerr;
 80188ce:	e074      	b.n	80189ba <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80188d0:	68f8      	ldr	r0, [r7, #12]
 80188d2:	f7f6 fd03 	bl	800f2dc <pbuf_ref>
      pcr->original = p;
 80188d6:	69bb      	ldr	r3, [r7, #24]
 80188d8:	68fa      	ldr	r2, [r7, #12]
 80188da:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80188dc:	69bb      	ldr	r3, [r7, #24]
 80188de:	4a3f      	ldr	r2, [pc, #252]	@ (80189dc <ip4_frag+0x288>)
 80188e0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80188e2:	6979      	ldr	r1, [r7, #20]
 80188e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80188e6:	f7f6 fd21 	bl	800f32c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80188ea:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80188ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80188f2:	1ad3      	subs	r3, r2, r3
 80188f4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 80188f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d004      	beq.n	801890a <ip4_frag+0x1b6>
        poff = 0;
 8018900:	2300      	movs	r3, #0
 8018902:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8018904:	68fb      	ldr	r3, [r7, #12]
 8018906:	681b      	ldr	r3, [r3, #0]
 8018908:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801890a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801890e:	2b00      	cmp	r3, #0
 8018910:	d196      	bne.n	8018840 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018912:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8018914:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018918:	4413      	add	r3, r2
 801891a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801891c:	68bb      	ldr	r3, [r7, #8]
 801891e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8018920:	f1a3 0213 	sub.w	r2, r3, #19
 8018924:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018928:	429a      	cmp	r2, r3
 801892a:	bfcc      	ite	gt
 801892c:	2301      	movgt	r3, #1
 801892e:	2300      	movle	r3, #0
 8018930:	b2db      	uxtb	r3, r3
 8018932:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018934:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018938:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801893c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801893e:	6a3b      	ldr	r3, [r7, #32]
 8018940:	2b00      	cmp	r3, #0
 8018942:	d002      	beq.n	801894a <ip4_frag+0x1f6>
 8018944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018946:	2b00      	cmp	r3, #0
 8018948:	d003      	beq.n	8018952 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801894a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801894c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8018950:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018952:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018954:	4618      	mov	r0, r3
 8018956:	f7f4 ffc3 	bl	800d8e0 <lwip_htons>
 801895a:	4603      	mov	r3, r0
 801895c:	461a      	mov	r2, r3
 801895e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018960:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018962:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018964:	3314      	adds	r3, #20
 8018966:	b29b      	uxth	r3, r3
 8018968:	4618      	mov	r0, r3
 801896a:	f7f4 ffb9 	bl	800d8e0 <lwip_htons>
 801896e:	4603      	mov	r3, r0
 8018970:	461a      	mov	r2, r3
 8018972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018974:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018978:	2200      	movs	r2, #0
 801897a:	729a      	strb	r2, [r3, #10]
 801897c:	2200      	movs	r2, #0
 801897e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018980:	68bb      	ldr	r3, [r7, #8]
 8018982:	695b      	ldr	r3, [r3, #20]
 8018984:	687a      	ldr	r2, [r7, #4]
 8018986:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018988:	68b8      	ldr	r0, [r7, #8]
 801898a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801898c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801898e:	f7f6 fbff 	bl	800f190 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018992:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018996:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018998:	1ad3      	subs	r3, r2, r3
 801899a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801899e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80189a2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80189a4:	4413      	add	r3, r2
 80189a6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80189aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	f47f af19 	bne.w	80187e6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80189b4:	2300      	movs	r3, #0
 80189b6:	e002      	b.n	80189be <ip4_frag+0x26a>
      goto memerr;
 80189b8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80189ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80189be:	4618      	mov	r0, r3
 80189c0:	3748      	adds	r7, #72	@ 0x48
 80189c2:	46bd      	mov	sp, r7
 80189c4:	bd80      	pop	{r7, pc}
 80189c6:	bf00      	nop
 80189c8:	0802c9fc 	.word	0x0802c9fc
 80189cc:	0802cbd8 	.word	0x0802cbd8
 80189d0:	0802ca44 	.word	0x0802ca44
 80189d4:	0802cbf4 	.word	0x0802cbf4
 80189d8:	0802cc14 	.word	0x0802cc14
 80189dc:	080186ed 	.word	0x080186ed

080189e0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80189e0:	b580      	push	{r7, lr}
 80189e2:	b086      	sub	sp, #24
 80189e4:	af00      	add	r7, sp, #0
 80189e6:	6078      	str	r0, [r7, #4]
 80189e8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80189ea:	230e      	movs	r3, #14
 80189ec:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	895b      	ldrh	r3, [r3, #10]
 80189f2:	2b0e      	cmp	r3, #14
 80189f4:	d96e      	bls.n	8018ad4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	7bdb      	ldrb	r3, [r3, #15]
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d106      	bne.n	8018a0c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80189fe:	683b      	ldr	r3, [r7, #0]
 8018a00:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018a04:	3301      	adds	r3, #1
 8018a06:	b2da      	uxtb	r2, r3
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	685b      	ldr	r3, [r3, #4]
 8018a10:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018a12:	693b      	ldr	r3, [r7, #16]
 8018a14:	7b1a      	ldrb	r2, [r3, #12]
 8018a16:	7b5b      	ldrb	r3, [r3, #13]
 8018a18:	021b      	lsls	r3, r3, #8
 8018a1a:	4313      	orrs	r3, r2
 8018a1c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018a1e:	693b      	ldr	r3, [r7, #16]
 8018a20:	781b      	ldrb	r3, [r3, #0]
 8018a22:	f003 0301 	and.w	r3, r3, #1
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d023      	beq.n	8018a72 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018a2a:	693b      	ldr	r3, [r7, #16]
 8018a2c:	781b      	ldrb	r3, [r3, #0]
 8018a2e:	2b01      	cmp	r3, #1
 8018a30:	d10f      	bne.n	8018a52 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018a32:	693b      	ldr	r3, [r7, #16]
 8018a34:	785b      	ldrb	r3, [r3, #1]
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	d11b      	bne.n	8018a72 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018a3a:	693b      	ldr	r3, [r7, #16]
 8018a3c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018a3e:	2b5e      	cmp	r3, #94	@ 0x5e
 8018a40:	d117      	bne.n	8018a72 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	7b5b      	ldrb	r3, [r3, #13]
 8018a46:	f043 0310 	orr.w	r3, r3, #16
 8018a4a:	b2da      	uxtb	r2, r3
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	735a      	strb	r2, [r3, #13]
 8018a50:	e00f      	b.n	8018a72 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018a52:	693b      	ldr	r3, [r7, #16]
 8018a54:	2206      	movs	r2, #6
 8018a56:	4928      	ldr	r1, [pc, #160]	@ (8018af8 <ethernet_input+0x118>)
 8018a58:	4618      	mov	r0, r3
 8018a5a:	f00f fbc7 	bl	80281ec <memcmp>
 8018a5e:	4603      	mov	r3, r0
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d106      	bne.n	8018a72 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	7b5b      	ldrb	r3, [r3, #13]
 8018a68:	f043 0308 	orr.w	r3, r3, #8
 8018a6c:	b2da      	uxtb	r2, r3
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018a72:	89fb      	ldrh	r3, [r7, #14]
 8018a74:	2b08      	cmp	r3, #8
 8018a76:	d003      	beq.n	8018a80 <ethernet_input+0xa0>
 8018a78:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8018a7c:	d014      	beq.n	8018aa8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018a7e:	e032      	b.n	8018ae6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018a80:	683b      	ldr	r3, [r7, #0]
 8018a82:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018a86:	f003 0308 	and.w	r3, r3, #8
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d024      	beq.n	8018ad8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018a8e:	8afb      	ldrh	r3, [r7, #22]
 8018a90:	4619      	mov	r1, r3
 8018a92:	6878      	ldr	r0, [r7, #4]
 8018a94:	f7f6 fac4 	bl	800f020 <pbuf_remove_header>
 8018a98:	4603      	mov	r3, r0
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	d11e      	bne.n	8018adc <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018a9e:	6839      	ldr	r1, [r7, #0]
 8018aa0:	6878      	ldr	r0, [r7, #4]
 8018aa2:	f7fe fde3 	bl	801766c <ip4_input>
      break;
 8018aa6:	e013      	b.n	8018ad0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018aa8:	683b      	ldr	r3, [r7, #0]
 8018aaa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018aae:	f003 0308 	and.w	r3, r3, #8
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d014      	beq.n	8018ae0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018ab6:	8afb      	ldrh	r3, [r7, #22]
 8018ab8:	4619      	mov	r1, r3
 8018aba:	6878      	ldr	r0, [r7, #4]
 8018abc:	f7f6 fab0 	bl	800f020 <pbuf_remove_header>
 8018ac0:	4603      	mov	r3, r0
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	d10e      	bne.n	8018ae4 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018ac6:	6839      	ldr	r1, [r7, #0]
 8018ac8:	6878      	ldr	r0, [r7, #4]
 8018aca:	f7fd ff83 	bl	80169d4 <etharp_input>
      break;
 8018ace:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018ad0:	2300      	movs	r3, #0
 8018ad2:	e00c      	b.n	8018aee <ethernet_input+0x10e>
    goto free_and_return;
 8018ad4:	bf00      	nop
 8018ad6:	e006      	b.n	8018ae6 <ethernet_input+0x106>
        goto free_and_return;
 8018ad8:	bf00      	nop
 8018ada:	e004      	b.n	8018ae6 <ethernet_input+0x106>
        goto free_and_return;
 8018adc:	bf00      	nop
 8018ade:	e002      	b.n	8018ae6 <ethernet_input+0x106>
        goto free_and_return;
 8018ae0:	bf00      	nop
 8018ae2:	e000      	b.n	8018ae6 <ethernet_input+0x106>
        goto free_and_return;
 8018ae4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018ae6:	6878      	ldr	r0, [r7, #4]
 8018ae8:	f7f6 fb52 	bl	800f190 <pbuf_free>
  return ERR_OK;
 8018aec:	2300      	movs	r3, #0
}
 8018aee:	4618      	mov	r0, r3
 8018af0:	3718      	adds	r7, #24
 8018af2:	46bd      	mov	sp, r7
 8018af4:	bd80      	pop	{r7, pc}
 8018af6:	bf00      	nop
 8018af8:	0802ce58 	.word	0x0802ce58

08018afc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018afc:	b580      	push	{r7, lr}
 8018afe:	b086      	sub	sp, #24
 8018b00:	af00      	add	r7, sp, #0
 8018b02:	60f8      	str	r0, [r7, #12]
 8018b04:	60b9      	str	r1, [r7, #8]
 8018b06:	607a      	str	r2, [r7, #4]
 8018b08:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018b0a:	8c3b      	ldrh	r3, [r7, #32]
 8018b0c:	4618      	mov	r0, r3
 8018b0e:	f7f4 fee7 	bl	800d8e0 <lwip_htons>
 8018b12:	4603      	mov	r3, r0
 8018b14:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018b16:	210e      	movs	r1, #14
 8018b18:	68b8      	ldr	r0, [r7, #8]
 8018b1a:	f7f6 fa71 	bl	800f000 <pbuf_add_header>
 8018b1e:	4603      	mov	r3, r0
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d125      	bne.n	8018b70 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018b24:	68bb      	ldr	r3, [r7, #8]
 8018b26:	685b      	ldr	r3, [r3, #4]
 8018b28:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018b2a:	693b      	ldr	r3, [r7, #16]
 8018b2c:	8afa      	ldrh	r2, [r7, #22]
 8018b2e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018b30:	693b      	ldr	r3, [r7, #16]
 8018b32:	2206      	movs	r2, #6
 8018b34:	6839      	ldr	r1, [r7, #0]
 8018b36:	4618      	mov	r0, r3
 8018b38:	f00f fca9 	bl	802848e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018b3c:	693b      	ldr	r3, [r7, #16]
 8018b3e:	3306      	adds	r3, #6
 8018b40:	2206      	movs	r2, #6
 8018b42:	6879      	ldr	r1, [r7, #4]
 8018b44:	4618      	mov	r0, r3
 8018b46:	f00f fca2 	bl	802848e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018b4a:	68fb      	ldr	r3, [r7, #12]
 8018b4c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018b50:	2b06      	cmp	r3, #6
 8018b52:	d006      	beq.n	8018b62 <ethernet_output+0x66>
 8018b54:	4b0a      	ldr	r3, [pc, #40]	@ (8018b80 <ethernet_output+0x84>)
 8018b56:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8018b5a:	490a      	ldr	r1, [pc, #40]	@ (8018b84 <ethernet_output+0x88>)
 8018b5c:	480a      	ldr	r0, [pc, #40]	@ (8018b88 <ethernet_output+0x8c>)
 8018b5e:	f00f f9e9 	bl	8027f34 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018b62:	68fb      	ldr	r3, [r7, #12]
 8018b64:	699b      	ldr	r3, [r3, #24]
 8018b66:	68b9      	ldr	r1, [r7, #8]
 8018b68:	68f8      	ldr	r0, [r7, #12]
 8018b6a:	4798      	blx	r3
 8018b6c:	4603      	mov	r3, r0
 8018b6e:	e002      	b.n	8018b76 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018b70:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018b72:	f06f 0301 	mvn.w	r3, #1
}
 8018b76:	4618      	mov	r0, r3
 8018b78:	3718      	adds	r7, #24
 8018b7a:	46bd      	mov	sp, r7
 8018b7c:	bd80      	pop	{r7, pc}
 8018b7e:	bf00      	nop
 8018b80:	0802cc24 	.word	0x0802cc24
 8018b84:	0802cc5c 	.word	0x0802cc5c
 8018b88:	0802cc90 	.word	0x0802cc90

08018b8c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018b8c:	b580      	push	{r7, lr}
 8018b8e:	b086      	sub	sp, #24
 8018b90:	af00      	add	r7, sp, #0
 8018b92:	6078      	str	r0, [r7, #4]
 8018b94:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8018b96:	683b      	ldr	r3, [r7, #0]
 8018b98:	60bb      	str	r3, [r7, #8]
 8018b9a:	2304      	movs	r3, #4
 8018b9c:	60fb      	str	r3, [r7, #12]
 8018b9e:	2300      	movs	r3, #0
 8018ba0:	613b      	str	r3, [r7, #16]
 8018ba2:	2300      	movs	r3, #0
 8018ba4:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8018ba6:	f107 0308 	add.w	r3, r7, #8
 8018baa:	2100      	movs	r1, #0
 8018bac:	4618      	mov	r0, r3
 8018bae:	f7ee fa4a 	bl	8007046 <osMessageCreate>
 8018bb2:	4602      	mov	r2, r0
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	681b      	ldr	r3, [r3, #0]
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	d102      	bne.n	8018bc6 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8018bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8018bc4:	e000      	b.n	8018bc8 <sys_mbox_new+0x3c>

  return ERR_OK;
 8018bc6:	2300      	movs	r3, #0
}
 8018bc8:	4618      	mov	r0, r3
 8018bca:	3718      	adds	r7, #24
 8018bcc:	46bd      	mov	sp, r7
 8018bce:	bd80      	pop	{r7, pc}

08018bd0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8018bd0:	b580      	push	{r7, lr}
 8018bd2:	b082      	sub	sp, #8
 8018bd4:	af00      	add	r7, sp, #0
 8018bd6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	681b      	ldr	r3, [r3, #0]
 8018bdc:	4618      	mov	r0, r3
 8018bde:	f7ee fb0f 	bl	8007200 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	681b      	ldr	r3, [r3, #0]
 8018be6:	4618      	mov	r0, r3
 8018be8:	f7ee fb20 	bl	800722c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8018bec:	bf00      	nop
 8018bee:	3708      	adds	r7, #8
 8018bf0:	46bd      	mov	sp, r7
 8018bf2:	bd80      	pop	{r7, pc}

08018bf4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018bf4:	b580      	push	{r7, lr}
 8018bf6:	b084      	sub	sp, #16
 8018bf8:	af00      	add	r7, sp, #0
 8018bfa:	6078      	str	r0, [r7, #4]
 8018bfc:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	681b      	ldr	r3, [r3, #0]
 8018c02:	6839      	ldr	r1, [r7, #0]
 8018c04:	2200      	movs	r2, #0
 8018c06:	4618      	mov	r0, r3
 8018c08:	f7ee fa46 	bl	8007098 <osMessagePut>
 8018c0c:	4603      	mov	r3, r0
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d102      	bne.n	8018c18 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8018c12:	2300      	movs	r3, #0
 8018c14:	73fb      	strb	r3, [r7, #15]
 8018c16:	e001      	b.n	8018c1c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018c18:	23ff      	movs	r3, #255	@ 0xff
 8018c1a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018c20:	4618      	mov	r0, r3
 8018c22:	3710      	adds	r7, #16
 8018c24:	46bd      	mov	sp, r7
 8018c26:	bd80      	pop	{r7, pc}

08018c28 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018c28:	b580      	push	{r7, lr}
 8018c2a:	b08c      	sub	sp, #48	@ 0x30
 8018c2c:	af00      	add	r7, sp, #0
 8018c2e:	61f8      	str	r0, [r7, #28]
 8018c30:	61b9      	str	r1, [r7, #24]
 8018c32:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8018c34:	f7ee f825 	bl	8006c82 <osKernelSysTick>
 8018c38:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018c3a:	697b      	ldr	r3, [r7, #20]
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d017      	beq.n	8018c70 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8018c40:	69fb      	ldr	r3, [r7, #28]
 8018c42:	6819      	ldr	r1, [r3, #0]
 8018c44:	f107 0320 	add.w	r3, r7, #32
 8018c48:	697a      	ldr	r2, [r7, #20]
 8018c4a:	4618      	mov	r0, r3
 8018c4c:	f7ee fa64 	bl	8007118 <osMessageGet>

    if(event.status == osEventMessage)
 8018c50:	6a3b      	ldr	r3, [r7, #32]
 8018c52:	2b10      	cmp	r3, #16
 8018c54:	d109      	bne.n	8018c6a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8018c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c58:	461a      	mov	r2, r3
 8018c5a:	69bb      	ldr	r3, [r7, #24]
 8018c5c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8018c5e:	f7ee f810 	bl	8006c82 <osKernelSysTick>
 8018c62:	4602      	mov	r2, r0
 8018c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018c66:	1ad3      	subs	r3, r2, r3
 8018c68:	e019      	b.n	8018c9e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8018c6e:	e016      	b.n	8018c9e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8018c70:	69fb      	ldr	r3, [r7, #28]
 8018c72:	6819      	ldr	r1, [r3, #0]
 8018c74:	463b      	mov	r3, r7
 8018c76:	f04f 32ff 	mov.w	r2, #4294967295
 8018c7a:	4618      	mov	r0, r3
 8018c7c:	f7ee fa4c 	bl	8007118 <osMessageGet>
 8018c80:	f107 0320 	add.w	r3, r7, #32
 8018c84:	463a      	mov	r2, r7
 8018c86:	ca07      	ldmia	r2, {r0, r1, r2}
 8018c88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8018c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c8e:	461a      	mov	r2, r3
 8018c90:	69bb      	ldr	r3, [r7, #24]
 8018c92:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8018c94:	f7ed fff5 	bl	8006c82 <osKernelSysTick>
 8018c98:	4602      	mov	r2, r0
 8018c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018c9c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018c9e:	4618      	mov	r0, r3
 8018ca0:	3730      	adds	r7, #48	@ 0x30
 8018ca2:	46bd      	mov	sp, r7
 8018ca4:	bd80      	pop	{r7, pc}

08018ca6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8018ca6:	b580      	push	{r7, lr}
 8018ca8:	b086      	sub	sp, #24
 8018caa:	af00      	add	r7, sp, #0
 8018cac:	6078      	str	r0, [r7, #4]
 8018cae:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	6819      	ldr	r1, [r3, #0]
 8018cb4:	f107 030c 	add.w	r3, r7, #12
 8018cb8:	2200      	movs	r2, #0
 8018cba:	4618      	mov	r0, r3
 8018cbc:	f7ee fa2c 	bl	8007118 <osMessageGet>

  if(event.status == osEventMessage)
 8018cc0:	68fb      	ldr	r3, [r7, #12]
 8018cc2:	2b10      	cmp	r3, #16
 8018cc4:	d105      	bne.n	8018cd2 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8018cc6:	693b      	ldr	r3, [r7, #16]
 8018cc8:	461a      	mov	r2, r3
 8018cca:	683b      	ldr	r3, [r7, #0]
 8018ccc:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8018cce:	2300      	movs	r3, #0
 8018cd0:	e001      	b.n	8018cd6 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8018cd2:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8018cd6:	4618      	mov	r0, r3
 8018cd8:	3718      	adds	r7, #24
 8018cda:	46bd      	mov	sp, r7
 8018cdc:	bd80      	pop	{r7, pc}

08018cde <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018cde:	b480      	push	{r7}
 8018ce0:	b083      	sub	sp, #12
 8018ce2:	af00      	add	r7, sp, #0
 8018ce4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	681b      	ldr	r3, [r3, #0]
 8018cea:	2b00      	cmp	r3, #0
 8018cec:	d101      	bne.n	8018cf2 <sys_mbox_valid+0x14>
    return 0;
 8018cee:	2300      	movs	r3, #0
 8018cf0:	e000      	b.n	8018cf4 <sys_mbox_valid+0x16>
  else
    return 1;
 8018cf2:	2301      	movs	r3, #1
}
 8018cf4:	4618      	mov	r0, r3
 8018cf6:	370c      	adds	r7, #12
 8018cf8:	46bd      	mov	sp, r7
 8018cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cfe:	4770      	bx	lr

08018d00 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018d00:	b480      	push	{r7}
 8018d02:	b083      	sub	sp, #12
 8018d04:	af00      	add	r7, sp, #0
 8018d06:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	2200      	movs	r2, #0
 8018d0c:	601a      	str	r2, [r3, #0]
}
 8018d0e:	bf00      	nop
 8018d10:	370c      	adds	r7, #12
 8018d12:	46bd      	mov	sp, r7
 8018d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d18:	4770      	bx	lr

08018d1a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018d1a:	b580      	push	{r7, lr}
 8018d1c:	b084      	sub	sp, #16
 8018d1e:	af00      	add	r7, sp, #0
 8018d20:	6078      	str	r0, [r7, #4]
 8018d22:	460b      	mov	r3, r1
 8018d24:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8018d26:	2300      	movs	r3, #0
 8018d28:	60bb      	str	r3, [r7, #8]
 8018d2a:	2300      	movs	r3, #0
 8018d2c:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8018d2e:	f107 0308 	add.w	r3, r7, #8
 8018d32:	2101      	movs	r1, #1
 8018d34:	4618      	mov	r0, r3
 8018d36:	f7ee f8bd 	bl	8006eb4 <osSemaphoreCreate>
 8018d3a:	4602      	mov	r2, r0
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d102      	bne.n	8018d4e <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018d48:	f04f 33ff 	mov.w	r3, #4294967295
 8018d4c:	e009      	b.n	8018d62 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8018d4e:	78fb      	ldrb	r3, [r7, #3]
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	d105      	bne.n	8018d60 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	681b      	ldr	r3, [r3, #0]
 8018d58:	2100      	movs	r1, #0
 8018d5a:	4618      	mov	r0, r3
 8018d5c:	f7ee f8dc 	bl	8006f18 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018d60:	2300      	movs	r3, #0
}
 8018d62:	4618      	mov	r0, r3
 8018d64:	3710      	adds	r7, #16
 8018d66:	46bd      	mov	sp, r7
 8018d68:	bd80      	pop	{r7, pc}

08018d6a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8018d6a:	b580      	push	{r7, lr}
 8018d6c:	b084      	sub	sp, #16
 8018d6e:	af00      	add	r7, sp, #0
 8018d70:	6078      	str	r0, [r7, #4]
 8018d72:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8018d74:	f7ed ff85 	bl	8006c82 <osKernelSysTick>
 8018d78:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018d7a:	683b      	ldr	r3, [r7, #0]
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d011      	beq.n	8018da4 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	6839      	ldr	r1, [r7, #0]
 8018d86:	4618      	mov	r0, r3
 8018d88:	f7ee f8c6 	bl	8006f18 <osSemaphoreWait>
 8018d8c:	4603      	mov	r3, r0
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	d105      	bne.n	8018d9e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8018d92:	f7ed ff76 	bl	8006c82 <osKernelSysTick>
 8018d96:	4602      	mov	r2, r0
 8018d98:	68fb      	ldr	r3, [r7, #12]
 8018d9a:	1ad3      	subs	r3, r2, r3
 8018d9c:	e012      	b.n	8018dc4 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8018da2:	e00f      	b.n	8018dc4 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8018da4:	bf00      	nop
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	681b      	ldr	r3, [r3, #0]
 8018daa:	f04f 31ff 	mov.w	r1, #4294967295
 8018dae:	4618      	mov	r0, r3
 8018db0:	f7ee f8b2 	bl	8006f18 <osSemaphoreWait>
 8018db4:	4603      	mov	r3, r0
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d1f5      	bne.n	8018da6 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8018dba:	f7ed ff62 	bl	8006c82 <osKernelSysTick>
 8018dbe:	4602      	mov	r2, r0
 8018dc0:	68fb      	ldr	r3, [r7, #12]
 8018dc2:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018dc4:	4618      	mov	r0, r3
 8018dc6:	3710      	adds	r7, #16
 8018dc8:	46bd      	mov	sp, r7
 8018dca:	bd80      	pop	{r7, pc}

08018dcc <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8018dcc:	b580      	push	{r7, lr}
 8018dce:	b082      	sub	sp, #8
 8018dd0:	af00      	add	r7, sp, #0
 8018dd2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	681b      	ldr	r3, [r3, #0]
 8018dd8:	4618      	mov	r0, r3
 8018dda:	f7ee f8eb 	bl	8006fb4 <osSemaphoreRelease>
}
 8018dde:	bf00      	nop
 8018de0:	3708      	adds	r7, #8
 8018de2:	46bd      	mov	sp, r7
 8018de4:	bd80      	pop	{r7, pc}

08018de6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8018de6:	b580      	push	{r7, lr}
 8018de8:	b082      	sub	sp, #8
 8018dea:	af00      	add	r7, sp, #0
 8018dec:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	681b      	ldr	r3, [r3, #0]
 8018df2:	4618      	mov	r0, r3
 8018df4:	f7ee f914 	bl	8007020 <osSemaphoreDelete>
}
 8018df8:	bf00      	nop
 8018dfa:	3708      	adds	r7, #8
 8018dfc:	46bd      	mov	sp, r7
 8018dfe:	bd80      	pop	{r7, pc}

08018e00 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018e00:	b480      	push	{r7}
 8018e02:	b083      	sub	sp, #12
 8018e04:	af00      	add	r7, sp, #0
 8018e06:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	2b00      	cmp	r3, #0
 8018e0e:	d101      	bne.n	8018e14 <sys_sem_valid+0x14>
    return 0;
 8018e10:	2300      	movs	r3, #0
 8018e12:	e000      	b.n	8018e16 <sys_sem_valid+0x16>
  else
    return 1;
 8018e14:	2301      	movs	r3, #1
}
 8018e16:	4618      	mov	r0, r3
 8018e18:	370c      	adds	r7, #12
 8018e1a:	46bd      	mov	sp, r7
 8018e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e20:	4770      	bx	lr

08018e22 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8018e22:	b480      	push	{r7}
 8018e24:	b083      	sub	sp, #12
 8018e26:	af00      	add	r7, sp, #0
 8018e28:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	2200      	movs	r2, #0
 8018e2e:	601a      	str	r2, [r3, #0]
}
 8018e30:	bf00      	nop
 8018e32:	370c      	adds	r7, #12
 8018e34:	46bd      	mov	sp, r7
 8018e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e3a:	4770      	bx	lr

08018e3c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018e3c:	b580      	push	{r7, lr}
 8018e3e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8018e40:	4803      	ldr	r0, [pc, #12]	@ (8018e50 <sys_init+0x14>)
 8018e42:	f7ed ff9a 	bl	8006d7a <osMutexCreate>
 8018e46:	4603      	mov	r3, r0
 8018e48:	4a02      	ldr	r2, [pc, #8]	@ (8018e54 <sys_init+0x18>)
 8018e4a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8018e4c:	bf00      	nop
 8018e4e:	bd80      	pop	{r7, pc}
 8018e50:	0802ce68 	.word	0x0802ce68
 8018e54:	20010460 	.word	0x20010460

08018e58 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018e58:	b580      	push	{r7, lr}
 8018e5a:	b084      	sub	sp, #16
 8018e5c:	af00      	add	r7, sp, #0
 8018e5e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8018e60:	2300      	movs	r3, #0
 8018e62:	60bb      	str	r3, [r7, #8]
 8018e64:	2300      	movs	r3, #0
 8018e66:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018e68:	f107 0308 	add.w	r3, r7, #8
 8018e6c:	4618      	mov	r0, r3
 8018e6e:	f7ed ff84 	bl	8006d7a <osMutexCreate>
 8018e72:	4602      	mov	r2, r0
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	d102      	bne.n	8018e86 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018e80:	f04f 33ff 	mov.w	r3, #4294967295
 8018e84:	e000      	b.n	8018e88 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018e86:	2300      	movs	r3, #0
}
 8018e88:	4618      	mov	r0, r3
 8018e8a:	3710      	adds	r7, #16
 8018e8c:	46bd      	mov	sp, r7
 8018e8e:	bd80      	pop	{r7, pc}

08018e90 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018e90:	b580      	push	{r7, lr}
 8018e92:	b082      	sub	sp, #8
 8018e94:	af00      	add	r7, sp, #0
 8018e96:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	681b      	ldr	r3, [r3, #0]
 8018e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8018ea0:	4618      	mov	r0, r3
 8018ea2:	f7ed ff83 	bl	8006dac <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8018ea6:	bf00      	nop
 8018ea8:	3708      	adds	r7, #8
 8018eaa:	46bd      	mov	sp, r7
 8018eac:	bd80      	pop	{r7, pc}

08018eae <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018eae:	b580      	push	{r7, lr}
 8018eb0:	b082      	sub	sp, #8
 8018eb2:	af00      	add	r7, sp, #0
 8018eb4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	4618      	mov	r0, r3
 8018ebc:	f7ed ffc4 	bl	8006e48 <osMutexRelease>
}
 8018ec0:	bf00      	nop
 8018ec2:	3708      	adds	r7, #8
 8018ec4:	46bd      	mov	sp, r7
 8018ec6:	bd80      	pop	{r7, pc}

08018ec8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018ec8:	b580      	push	{r7, lr}
 8018eca:	b08c      	sub	sp, #48	@ 0x30
 8018ecc:	af00      	add	r7, sp, #0
 8018ece:	60f8      	str	r0, [r7, #12]
 8018ed0:	60b9      	str	r1, [r7, #8]
 8018ed2:	607a      	str	r2, [r7, #4]
 8018ed4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8018ed6:	f107 0314 	add.w	r3, r7, #20
 8018eda:	2200      	movs	r2, #0
 8018edc:	601a      	str	r2, [r3, #0]
 8018ede:	605a      	str	r2, [r3, #4]
 8018ee0:	609a      	str	r2, [r3, #8]
 8018ee2:	60da      	str	r2, [r3, #12]
 8018ee4:	611a      	str	r2, [r3, #16]
 8018ee6:	615a      	str	r2, [r3, #20]
 8018ee8:	619a      	str	r2, [r3, #24]
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	617b      	str	r3, [r7, #20]
 8018eee:	68bb      	ldr	r3, [r7, #8]
 8018ef0:	61bb      	str	r3, [r7, #24]
 8018ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ef4:	b21b      	sxth	r3, r3
 8018ef6:	83bb      	strh	r3, [r7, #28]
 8018ef8:	683b      	ldr	r3, [r7, #0]
 8018efa:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018efc:	f107 0314 	add.w	r3, r7, #20
 8018f00:	6879      	ldr	r1, [r7, #4]
 8018f02:	4618      	mov	r0, r3
 8018f04:	f7ed fecd 	bl	8006ca2 <osThreadCreate>
 8018f08:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8018f0a:	4618      	mov	r0, r3
 8018f0c:	3730      	adds	r7, #48	@ 0x30
 8018f0e:	46bd      	mov	sp, r7
 8018f10:	bd80      	pop	{r7, pc}
	...

08018f14 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018f14:	b580      	push	{r7, lr}
 8018f16:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018f18:	4b04      	ldr	r3, [pc, #16]	@ (8018f2c <sys_arch_protect+0x18>)
 8018f1a:	681b      	ldr	r3, [r3, #0]
 8018f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8018f20:	4618      	mov	r0, r3
 8018f22:	f7ed ff43 	bl	8006dac <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018f26:	2301      	movs	r3, #1
}
 8018f28:	4618      	mov	r0, r3
 8018f2a:	bd80      	pop	{r7, pc}
 8018f2c:	20010460 	.word	0x20010460

08018f30 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018f30:	b580      	push	{r7, lr}
 8018f32:	b082      	sub	sp, #8
 8018f34:	af00      	add	r7, sp, #0
 8018f36:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018f38:	4b04      	ldr	r3, [pc, #16]	@ (8018f4c <sys_arch_unprotect+0x1c>)
 8018f3a:	681b      	ldr	r3, [r3, #0]
 8018f3c:	4618      	mov	r0, r3
 8018f3e:	f7ed ff83 	bl	8006e48 <osMutexRelease>
}
 8018f42:	bf00      	nop
 8018f44:	3708      	adds	r7, #8
 8018f46:	46bd      	mov	sp, r7
 8018f48:	bd80      	pop	{r7, pc}
 8018f4a:	bf00      	nop
 8018f4c:	20010460 	.word	0x20010460

08018f50 <rosidl_typesupport_c__get_message_type_support_handle__control_msgs__msg__JointJog>:
 8018f50:	4b04      	ldr	r3, [pc, #16]	@ (8018f64 <rosidl_typesupport_c__get_message_type_support_handle__control_msgs__msg__JointJog+0x14>)
 8018f52:	681a      	ldr	r2, [r3, #0]
 8018f54:	b10a      	cbz	r2, 8018f5a <rosidl_typesupport_c__get_message_type_support_handle__control_msgs__msg__JointJog+0xa>
 8018f56:	4803      	ldr	r0, [pc, #12]	@ (8018f64 <rosidl_typesupport_c__get_message_type_support_handle__control_msgs__msg__JointJog+0x14>)
 8018f58:	4770      	bx	lr
 8018f5a:	4a03      	ldr	r2, [pc, #12]	@ (8018f68 <rosidl_typesupport_c__get_message_type_support_handle__control_msgs__msg__JointJog+0x18>)
 8018f5c:	4801      	ldr	r0, [pc, #4]	@ (8018f64 <rosidl_typesupport_c__get_message_type_support_handle__control_msgs__msg__JointJog+0x14>)
 8018f5e:	6812      	ldr	r2, [r2, #0]
 8018f60:	601a      	str	r2, [r3, #0]
 8018f62:	4770      	bx	lr
 8018f64:	20000040 	.word	0x20000040
 8018f68:	200001c0 	.word	0x200001c0

08018f6c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__control_msgs__msg__JointJog>:
 8018f6c:	4a02      	ldr	r2, [pc, #8]	@ (8018f78 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__control_msgs__msg__JointJog+0xc>)
 8018f6e:	4b03      	ldr	r3, [pc, #12]	@ (8018f7c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__control_msgs__msg__JointJog+0x10>)
 8018f70:	6812      	ldr	r2, [r2, #0]
 8018f72:	601a      	str	r2, [r3, #0]
 8018f74:	4770      	bx	lr
 8018f76:	bf00      	nop
 8018f78:	200001c0 	.word	0x200001c0
 8018f7c:	20000040 	.word	0x20000040

08018f80 <control_msgs__msg__JointJog__rosidl_typesupport_introspection_c__size_function__JointJog__joint_names>:
 8018f80:	6840      	ldr	r0, [r0, #4]
 8018f82:	4770      	bx	lr

08018f84 <control_msgs__msg__JointJog__rosidl_typesupport_introspection_c__get_const_function__JointJog__joint_names>:
 8018f84:	6800      	ldr	r0, [r0, #0]
 8018f86:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018f8a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8018f8e:	4770      	bx	lr

08018f90 <control_msgs__msg__JointJog__rosidl_typesupport_introspection_c__fetch_function__JointJog__joint_names>:
 8018f90:	6803      	ldr	r3, [r0, #0]
 8018f92:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018f96:	4694      	mov	ip, r2
 8018f98:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8018f9c:	c907      	ldmia	r1, {r0, r1, r2}
 8018f9e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8018fa2:	4770      	bx	lr

08018fa4 <control_msgs__msg__JointJog__rosidl_typesupport_introspection_c__assign_function__JointJog__joint_names>:
 8018fa4:	6803      	ldr	r3, [r0, #0]
 8018fa6:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8018faa:	ca07      	ldmia	r2, {r0, r1, r2}
 8018fac:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8018fb0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018fb4:	4770      	bx	lr
 8018fb6:	bf00      	nop

08018fb8 <control_msgs__msg__JointJog__rosidl_typesupport_introspection_c__size_function__JointJog__displacements>:
 8018fb8:	6840      	ldr	r0, [r0, #4]
 8018fba:	4770      	bx	lr

08018fbc <control_msgs__msg__JointJog__rosidl_typesupport_introspection_c__get_const_function__JointJog__displacements>:
 8018fbc:	6800      	ldr	r0, [r0, #0]
 8018fbe:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8018fc2:	4770      	bx	lr

08018fc4 <control_msgs__msg__JointJog__rosidl_typesupport_introspection_c__fetch_function__JointJog__displacements>:
 8018fc4:	6803      	ldr	r3, [r0, #0]
 8018fc6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8018fca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018fce:	e9c2 0100 	strd	r0, r1, [r2]
 8018fd2:	4770      	bx	lr

08018fd4 <control_msgs__msg__JointJog__rosidl_typesupport_introspection_c__assign_function__JointJog__displacements>:
 8018fd4:	6803      	ldr	r3, [r0, #0]
 8018fd6:	ed92 7b00 	vldr	d7, [r2]
 8018fda:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8018fde:	ed81 7b00 	vstr	d7, [r1]
 8018fe2:	4770      	bx	lr

08018fe4 <control_msgs__msg__JointJog__rosidl_typesupport_introspection_c__JointJog_init_function>:
 8018fe4:	f004 bcf4 	b.w	801d9d0 <control_msgs__msg__JointJog__init>

08018fe8 <control_msgs__msg__JointJog__rosidl_typesupport_introspection_c__JointJog_fini_function>:
 8018fe8:	f004 bd4c 	b.w	801da84 <control_msgs__msg__JointJog__fini>

08018fec <control_msgs__msg__JointJog__rosidl_typesupport_introspection_c__resize_function__JointJog__joint_names>:
 8018fec:	b510      	push	{r4, lr}
 8018fee:	4604      	mov	r4, r0
 8018ff0:	b082      	sub	sp, #8
 8018ff2:	9101      	str	r1, [sp, #4]
 8018ff4:	f003 fcac 	bl	801c950 <rosidl_runtime_c__String__Sequence__fini>
 8018ff8:	9901      	ldr	r1, [sp, #4]
 8018ffa:	4620      	mov	r0, r4
 8018ffc:	b002      	add	sp, #8
 8018ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019002:	f003 bc5d 	b.w	801c8c0 <rosidl_runtime_c__String__Sequence__init>
 8019006:	bf00      	nop

08019008 <control_msgs__msg__JointJog__rosidl_typesupport_introspection_c__resize_function__JointJog__displacements>:
 8019008:	b510      	push	{r4, lr}
 801900a:	4604      	mov	r4, r0
 801900c:	b082      	sub	sp, #8
 801900e:	9101      	str	r1, [sp, #4]
 8019010:	f003 fbe4 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 8019014:	9901      	ldr	r1, [sp, #4]
 8019016:	4620      	mov	r0, r4
 8019018:	b002      	add	sp, #8
 801901a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801901e:	f003 bbc5 	b.w	801c7ac <rosidl_runtime_c__double__Sequence__init>
 8019022:	bf00      	nop

08019024 <control_msgs__msg__JointJog__rosidl_typesupport_introspection_c__size_function__JointJog__velocities>:
 8019024:	6840      	ldr	r0, [r0, #4]
 8019026:	4770      	bx	lr

08019028 <control_msgs__msg__JointJog__rosidl_typesupport_introspection_c__get_const_function__JointJog__velocities>:
 8019028:	6800      	ldr	r0, [r0, #0]
 801902a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801902e:	4770      	bx	lr

08019030 <control_msgs__msg__JointJog__rosidl_typesupport_introspection_c__get_function__JointJog__velocities>:
 8019030:	6800      	ldr	r0, [r0, #0]
 8019032:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8019036:	4770      	bx	lr

08019038 <control_msgs__msg__JointJog__rosidl_typesupport_introspection_c__get_function__JointJog__joint_names>:
 8019038:	6800      	ldr	r0, [r0, #0]
 801903a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801903e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8019042:	4770      	bx	lr

08019044 <control_msgs__msg__JointJog__rosidl_typesupport_introspection_c__get_function__JointJog__displacements>:
 8019044:	6800      	ldr	r0, [r0, #0]
 8019046:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801904a:	4770      	bx	lr

0801904c <control_msgs__msg__JointJog__rosidl_typesupport_introspection_c__fetch_function__JointJog__velocities>:
 801904c:	6803      	ldr	r3, [r0, #0]
 801904e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8019052:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019056:	e9c2 0100 	strd	r0, r1, [r2]
 801905a:	4770      	bx	lr

0801905c <control_msgs__msg__JointJog__rosidl_typesupport_introspection_c__assign_function__JointJog__velocities>:
 801905c:	6803      	ldr	r3, [r0, #0]
 801905e:	ed92 7b00 	vldr	d7, [r2]
 8019062:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8019066:	ed81 7b00 	vstr	d7, [r1]
 801906a:	4770      	bx	lr

0801906c <control_msgs__msg__JointJog__rosidl_typesupport_introspection_c__resize_function__JointJog__velocities>:
 801906c:	b510      	push	{r4, lr}
 801906e:	4604      	mov	r4, r0
 8019070:	b082      	sub	sp, #8
 8019072:	9101      	str	r1, [sp, #4]
 8019074:	f003 fbb2 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 8019078:	9901      	ldr	r1, [sp, #4]
 801907a:	4620      	mov	r0, r4
 801907c:	b002      	add	sp, #8
 801907e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019082:	f003 bb93 	b.w	801c7ac <rosidl_runtime_c__double__Sequence__init>
 8019086:	bf00      	nop

08019088 <rosidl_typesupport_introspection_c__get_message_type_support_handle__control_msgs__msg__JointJog>:
 8019088:	b508      	push	{r3, lr}
 801908a:	f003 ff47 	bl	801cf1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 801908e:	4b06      	ldr	r3, [pc, #24]	@ (80190a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__control_msgs__msg__JointJog+0x20>)
 8019090:	4906      	ldr	r1, [pc, #24]	@ (80190ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__control_msgs__msg__JointJog+0x24>)
 8019092:	681a      	ldr	r2, [r3, #0]
 8019094:	60c8      	str	r0, [r1, #12]
 8019096:	b10a      	cbz	r2, 801909c <rosidl_typesupport_introspection_c__get_message_type_support_handle__control_msgs__msg__JointJog+0x14>
 8019098:	4803      	ldr	r0, [pc, #12]	@ (80190a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__control_msgs__msg__JointJog+0x20>)
 801909a:	bd08      	pop	{r3, pc}
 801909c:	4a04      	ldr	r2, [pc, #16]	@ (80190b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__control_msgs__msg__JointJog+0x28>)
 801909e:	4802      	ldr	r0, [pc, #8]	@ (80190a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__control_msgs__msg__JointJog+0x20>)
 80190a0:	6812      	ldr	r2, [r2, #0]
 80190a2:	601a      	str	r2, [r3, #0]
 80190a4:	bd08      	pop	{r3, pc}
 80190a6:	bf00      	nop
 80190a8:	20000178 	.word	0x20000178
 80190ac:	2000004c 	.word	0x2000004c
 80190b0:	200001c4 	.word	0x200001c4

080190b4 <get_serialized_size_control_msgs__msg__JointJog.part.0>:
 80190b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190b8:	460f      	mov	r7, r1
 80190ba:	4605      	mov	r5, r0
 80190bc:	f003 ff52 	bl	801cf64 <get_serialized_size_std_msgs__msg__Header>
 80190c0:	2104      	movs	r1, #4
 80190c2:	183c      	adds	r4, r7, r0
 80190c4:	69ae      	ldr	r6, [r5, #24]
 80190c6:	4620      	mov	r0, r4
 80190c8:	f001 fc5a 	bl	801a980 <ucdr_alignment>
 80190cc:	3004      	adds	r0, #4
 80190ce:	4404      	add	r4, r0
 80190d0:	b196      	cbz	r6, 80190f8 <get_serialized_size_control_msgs__msg__JointJog.part.0+0x44>
 80190d2:	f04f 0800 	mov.w	r8, #0
 80190d6:	4620      	mov	r0, r4
 80190d8:	2104      	movs	r1, #4
 80190da:	f001 fc51 	bl	801a980 <ucdr_alignment>
 80190de:	696b      	ldr	r3, [r5, #20]
 80190e0:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 80190e4:	4420      	add	r0, r4
 80190e6:	f108 0801 	add.w	r8, r8, #1
 80190ea:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80190ee:	1d43      	adds	r3, r0, #5
 80190f0:	4546      	cmp	r6, r8
 80190f2:	6854      	ldr	r4, [r2, #4]
 80190f4:	441c      	add	r4, r3
 80190f6:	d1ee      	bne.n	80190d6 <get_serialized_size_control_msgs__msg__JointJog.part.0+0x22>
 80190f8:	4620      	mov	r0, r4
 80190fa:	2104      	movs	r1, #4
 80190fc:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 80190fe:	f001 fc3f 	bl	801a980 <ucdr_alignment>
 8019102:	4420      	add	r0, r4
 8019104:	1d04      	adds	r4, r0, #4
 8019106:	b98e      	cbnz	r6, 801912c <get_serialized_size_control_msgs__msg__JointJog.part.0+0x78>
 8019108:	4620      	mov	r0, r4
 801910a:	2104      	movs	r1, #4
 801910c:	6b2d      	ldr	r5, [r5, #48]	@ 0x30
 801910e:	f001 fc37 	bl	801a980 <ucdr_alignment>
 8019112:	4420      	add	r0, r4
 8019114:	1d04      	adds	r4, r0, #4
 8019116:	b98d      	cbnz	r5, 801913c <get_serialized_size_control_msgs__msg__JointJog.part.0+0x88>
 8019118:	f1c7 0708 	rsb	r7, r7, #8
 801911c:	4620      	mov	r0, r4
 801911e:	2108      	movs	r1, #8
 8019120:	443c      	add	r4, r7
 8019122:	f001 fc2d 	bl	801a980 <ucdr_alignment>
 8019126:	4420      	add	r0, r4
 8019128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801912c:	4620      	mov	r0, r4
 801912e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8019132:	2108      	movs	r1, #8
 8019134:	f001 fc24 	bl	801a980 <ucdr_alignment>
 8019138:	4404      	add	r4, r0
 801913a:	e7e5      	b.n	8019108 <get_serialized_size_control_msgs__msg__JointJog.part.0+0x54>
 801913c:	4620      	mov	r0, r4
 801913e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8019142:	2108      	movs	r1, #8
 8019144:	f001 fc1c 	bl	801a980 <ucdr_alignment>
 8019148:	4404      	add	r4, r0
 801914a:	e7e5      	b.n	8019118 <get_serialized_size_control_msgs__msg__JointJog.part.0+0x64>

0801914c <get_serialized_size_control_msgs__msg__JointJog>:
 801914c:	b108      	cbz	r0, 8019152 <get_serialized_size_control_msgs__msg__JointJog+0x6>
 801914e:	f7ff bfb1 	b.w	80190b4 <get_serialized_size_control_msgs__msg__JointJog.part.0>
 8019152:	4770      	bx	lr

08019154 <_JointJog__get_serialized_size>:
 8019154:	b110      	cbz	r0, 801915c <_JointJog__get_serialized_size+0x8>
 8019156:	2100      	movs	r1, #0
 8019158:	f7ff bfac 	b.w	80190b4 <get_serialized_size_control_msgs__msg__JointJog.part.0>
 801915c:	4770      	bx	lr
 801915e:	bf00      	nop

08019160 <_JointJog__cdr_deserialize>:
 8019160:	2900      	cmp	r1, #0
 8019162:	f000 8089 	beq.w	8019278 <_JointJog__cdr_deserialize+0x118>
 8019166:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801916a:	b083      	sub	sp, #12
 801916c:	4606      	mov	r6, r0
 801916e:	460d      	mov	r5, r1
 8019170:	f003 ff7c 	bl	801d06c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8019174:	4603      	mov	r3, r0
 8019176:	4630      	mov	r0, r6
 8019178:	4629      	mov	r1, r5
 801917a:	685b      	ldr	r3, [r3, #4]
 801917c:	68db      	ldr	r3, [r3, #12]
 801917e:	4798      	blx	r3
 8019180:	4669      	mov	r1, sp
 8019182:	4630      	mov	r0, r6
 8019184:	f000 fc5c 	bl	8019a40 <ucdr_deserialize_uint32_t>
 8019188:	9900      	ldr	r1, [sp, #0]
 801918a:	69eb      	ldr	r3, [r5, #28]
 801918c:	428b      	cmp	r3, r1
 801918e:	d322      	bcc.n	80191d6 <_JointJog__cdr_deserialize+0x76>
 8019190:	61a9      	str	r1, [r5, #24]
 8019192:	2800      	cmp	r0, #0
 8019194:	d072      	beq.n	801927c <_JointJog__cdr_deserialize+0x11c>
 8019196:	2400      	movs	r4, #0
 8019198:	f10d 0804 	add.w	r8, sp, #4
 801919c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80191a0:	42a1      	cmp	r1, r4
 80191a2:	4643      	mov	r3, r8
 80191a4:	4630      	mov	r0, r6
 80191a6:	ea4f 0782 	mov.w	r7, r2, lsl #2
 80191aa:	f104 0401 	add.w	r4, r4, #1
 80191ae:	d919      	bls.n	80191e4 <_JointJog__cdr_deserialize+0x84>
 80191b0:	6969      	ldr	r1, [r5, #20]
 80191b2:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 80191b6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80191ba:	f8dc 9008 	ldr.w	r9, [ip, #8]
 80191be:	464a      	mov	r2, r9
 80191c0:	f001 fc60 	bl	801aa84 <ucdr_deserialize_sequence_char>
 80191c4:	b158      	cbz	r0, 80191de <_JointJog__cdr_deserialize+0x7e>
 80191c6:	9a01      	ldr	r2, [sp, #4]
 80191c8:	b102      	cbz	r2, 80191cc <_JointJog__cdr_deserialize+0x6c>
 80191ca:	3a01      	subs	r2, #1
 80191cc:	696b      	ldr	r3, [r5, #20]
 80191ce:	9900      	ldr	r1, [sp, #0]
 80191d0:	443b      	add	r3, r7
 80191d2:	605a      	str	r2, [r3, #4]
 80191d4:	e7e2      	b.n	801919c <_JointJog__cdr_deserialize+0x3c>
 80191d6:	2000      	movs	r0, #0
 80191d8:	b003      	add	sp, #12
 80191da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80191de:	9b01      	ldr	r3, [sp, #4]
 80191e0:	4599      	cmp	r9, r3
 80191e2:	d31b      	bcc.n	801921c <_JointJog__cdr_deserialize+0xbc>
 80191e4:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 80191e6:	4643      	mov	r3, r8
 80191e8:	6a29      	ldr	r1, [r5, #32]
 80191ea:	4630      	mov	r0, r6
 80191ec:	4622      	mov	r2, r4
 80191ee:	f001 fca1 	bl	801ab34 <ucdr_deserialize_sequence_double>
 80191f2:	9b01      	ldr	r3, [sp, #4]
 80191f4:	b380      	cbz	r0, 8019258 <_JointJog__cdr_deserialize+0xf8>
 80191f6:	626b      	str	r3, [r5, #36]	@ 0x24
 80191f8:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
 80191fa:	4643      	mov	r3, r8
 80191fc:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 80191fe:	4630      	mov	r0, r6
 8019200:	4622      	mov	r2, r4
 8019202:	f001 fc97 	bl	801ab34 <ucdr_deserialize_sequence_double>
 8019206:	9b01      	ldr	r3, [sp, #4]
 8019208:	b1b0      	cbz	r0, 8019238 <_JointJog__cdr_deserialize+0xd8>
 801920a:	632b      	str	r3, [r5, #48]	@ 0x30
 801920c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8019210:	4630      	mov	r0, r6
 8019212:	b003      	add	sp, #12
 8019214:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019218:	f001 b9c6 	b.w	801a5a8 <ucdr_deserialize_double>
 801921c:	2101      	movs	r1, #1
 801921e:	75b0      	strb	r0, [r6, #22]
 8019220:	7571      	strb	r1, [r6, #21]
 8019222:	696b      	ldr	r3, [r5, #20]
 8019224:	443b      	add	r3, r7
 8019226:	6058      	str	r0, [r3, #4]
 8019228:	4630      	mov	r0, r6
 801922a:	f001 fbc1 	bl	801a9b0 <ucdr_align_to>
 801922e:	9901      	ldr	r1, [sp, #4]
 8019230:	4630      	mov	r0, r6
 8019232:	f001 fbf5 	bl	801aa20 <ucdr_advance_buffer>
 8019236:	e7d5      	b.n	80191e4 <_JointJog__cdr_deserialize+0x84>
 8019238:	429c      	cmp	r4, r3
 801923a:	d2e7      	bcs.n	801920c <_JointJog__cdr_deserialize+0xac>
 801923c:	2301      	movs	r3, #1
 801923e:	75b0      	strb	r0, [r6, #22]
 8019240:	2108      	movs	r1, #8
 8019242:	7573      	strb	r3, [r6, #21]
 8019244:	6328      	str	r0, [r5, #48]	@ 0x30
 8019246:	4630      	mov	r0, r6
 8019248:	f001 fbb2 	bl	801a9b0 <ucdr_align_to>
 801924c:	9901      	ldr	r1, [sp, #4]
 801924e:	4630      	mov	r0, r6
 8019250:	00c9      	lsls	r1, r1, #3
 8019252:	f001 fbe5 	bl	801aa20 <ucdr_advance_buffer>
 8019256:	e7d9      	b.n	801920c <_JointJog__cdr_deserialize+0xac>
 8019258:	429c      	cmp	r4, r3
 801925a:	d2cd      	bcs.n	80191f8 <_JointJog__cdr_deserialize+0x98>
 801925c:	2301      	movs	r3, #1
 801925e:	75b0      	strb	r0, [r6, #22]
 8019260:	2108      	movs	r1, #8
 8019262:	7573      	strb	r3, [r6, #21]
 8019264:	6268      	str	r0, [r5, #36]	@ 0x24
 8019266:	4630      	mov	r0, r6
 8019268:	f001 fba2 	bl	801a9b0 <ucdr_align_to>
 801926c:	9901      	ldr	r1, [sp, #4]
 801926e:	4630      	mov	r0, r6
 8019270:	00c9      	lsls	r1, r1, #3
 8019272:	f001 fbd5 	bl	801aa20 <ucdr_advance_buffer>
 8019276:	e7bf      	b.n	80191f8 <_JointJog__cdr_deserialize+0x98>
 8019278:	2000      	movs	r0, #0
 801927a:	4770      	bx	lr
 801927c:	f10d 0804 	add.w	r8, sp, #4
 8019280:	e7b0      	b.n	80191e4 <_JointJog__cdr_deserialize+0x84>
 8019282:	bf00      	nop

08019284 <_JointJog__cdr_serialize>:
 8019284:	2800      	cmp	r0, #0
 8019286:	d04b      	beq.n	8019320 <_JointJog__cdr_serialize+0x9c>
 8019288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801928c:	4681      	mov	r9, r0
 801928e:	460f      	mov	r7, r1
 8019290:	f003 feec 	bl	801d06c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8019294:	4603      	mov	r3, r0
 8019296:	4639      	mov	r1, r7
 8019298:	4648      	mov	r0, r9
 801929a:	685b      	ldr	r3, [r3, #4]
 801929c:	689b      	ldr	r3, [r3, #8]
 801929e:	4798      	blx	r3
 80192a0:	f8d9 8018 	ldr.w	r8, [r9, #24]
 80192a4:	4638      	mov	r0, r7
 80192a6:	4641      	mov	r1, r8
 80192a8:	f000 fa9a 	bl	80197e0 <ucdr_serialize_uint32_t>
 80192ac:	f1b8 0f00 	cmp.w	r8, #0
 80192b0:	d019      	beq.n	80192e6 <_JointJog__cdr_serialize+0x62>
 80192b2:	b1c0      	cbz	r0, 80192e6 <_JointJog__cdr_serialize+0x62>
 80192b4:	2400      	movs	r4, #0
 80192b6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80192ba:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80192be:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80192c2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80192c6:	4630      	mov	r0, r6
 80192c8:	b1f6      	cbz	r6, 8019308 <_JointJog__cdr_serialize+0x84>
 80192ca:	f7e6 ffc3 	bl	8000254 <strlen>
 80192ce:	4603      	mov	r3, r0
 80192d0:	3401      	adds	r4, #1
 80192d2:	4631      	mov	r1, r6
 80192d4:	4638      	mov	r0, r7
 80192d6:	1c5a      	adds	r2, r3, #1
 80192d8:	606b      	str	r3, [r5, #4]
 80192da:	f001 fbc1 	bl	801aa60 <ucdr_serialize_sequence_char>
 80192de:	45a0      	cmp	r8, r4
 80192e0:	d901      	bls.n	80192e6 <_JointJog__cdr_serialize+0x62>
 80192e2:	2800      	cmp	r0, #0
 80192e4:	d1e7      	bne.n	80192b6 <_JointJog__cdr_serialize+0x32>
 80192e6:	e9d9 1208 	ldrd	r1, r2, [r9, #32]
 80192ea:	4638      	mov	r0, r7
 80192ec:	f001 fc10 	bl	801ab10 <ucdr_serialize_sequence_double>
 80192f0:	4638      	mov	r0, r7
 80192f2:	e9d9 120b 	ldrd	r1, r2, [r9, #44]	@ 0x2c
 80192f6:	f001 fc0b 	bl	801ab10 <ucdr_serialize_sequence_double>
 80192fa:	4638      	mov	r0, r7
 80192fc:	ed99 0b0e 	vldr	d0, [r9, #56]	@ 0x38
 8019300:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019304:	f000 bfae 	b.w	801a264 <ucdr_serialize_double>
 8019308:	3401      	adds	r4, #1
 801930a:	4632      	mov	r2, r6
 801930c:	4631      	mov	r1, r6
 801930e:	4638      	mov	r0, r7
 8019310:	606e      	str	r6, [r5, #4]
 8019312:	f001 fba5 	bl	801aa60 <ucdr_serialize_sequence_char>
 8019316:	45a0      	cmp	r8, r4
 8019318:	d9e5      	bls.n	80192e6 <_JointJog__cdr_serialize+0x62>
 801931a:	2800      	cmp	r0, #0
 801931c:	d1cb      	bne.n	80192b6 <_JointJog__cdr_serialize+0x32>
 801931e:	e7e2      	b.n	80192e6 <_JointJog__cdr_serialize+0x62>
 8019320:	4770      	bx	lr
 8019322:	bf00      	nop

08019324 <_JointJog__max_serialized_size>:
 8019324:	b510      	push	{r4, lr}
 8019326:	b082      	sub	sp, #8
 8019328:	2301      	movs	r3, #1
 801932a:	2100      	movs	r1, #0
 801932c:	f10d 0007 	add.w	r0, sp, #7
 8019330:	f88d 3007 	strb.w	r3, [sp, #7]
 8019334:	f003 fe90 	bl	801d058 <max_serialized_size_std_msgs__msg__Header>
 8019338:	2300      	movs	r3, #0
 801933a:	4604      	mov	r4, r0
 801933c:	2108      	movs	r1, #8
 801933e:	f88d 3007 	strb.w	r3, [sp, #7]
 8019342:	f001 fb1d 	bl	801a980 <ucdr_alignment>
 8019346:	4420      	add	r0, r4
 8019348:	3008      	adds	r0, #8
 801934a:	b002      	add	sp, #8
 801934c:	bd10      	pop	{r4, pc}
 801934e:	bf00      	nop

08019350 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__control_msgs__msg__JointJog>:
 8019350:	4800      	ldr	r0, [pc, #0]	@ (8019354 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__control_msgs__msg__JointJog+0x4>)
 8019352:	4770      	bx	lr
 8019354:	20000184 	.word	0x20000184

08019358 <ucdr_serialize_bool>:
 8019358:	b538      	push	{r3, r4, r5, lr}
 801935a:	460d      	mov	r5, r1
 801935c:	2101      	movs	r1, #1
 801935e:	4604      	mov	r4, r0
 8019360:	f001 fac2 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 8019364:	b148      	cbz	r0, 801937a <ucdr_serialize_bool+0x22>
 8019366:	68a3      	ldr	r3, [r4, #8]
 8019368:	2101      	movs	r1, #1
 801936a:	701d      	strb	r5, [r3, #0]
 801936c:	68a2      	ldr	r2, [r4, #8]
 801936e:	6923      	ldr	r3, [r4, #16]
 8019370:	440a      	add	r2, r1
 8019372:	7561      	strb	r1, [r4, #21]
 8019374:	440b      	add	r3, r1
 8019376:	60a2      	str	r2, [r4, #8]
 8019378:	6123      	str	r3, [r4, #16]
 801937a:	7da0      	ldrb	r0, [r4, #22]
 801937c:	f080 0001 	eor.w	r0, r0, #1
 8019380:	bd38      	pop	{r3, r4, r5, pc}
 8019382:	bf00      	nop

08019384 <ucdr_deserialize_bool>:
 8019384:	b538      	push	{r3, r4, r5, lr}
 8019386:	460d      	mov	r5, r1
 8019388:	2101      	movs	r1, #1
 801938a:	4604      	mov	r4, r0
 801938c:	f001 faac 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 8019390:	b160      	cbz	r0, 80193ac <ucdr_deserialize_bool+0x28>
 8019392:	68a2      	ldr	r2, [r4, #8]
 8019394:	2101      	movs	r1, #1
 8019396:	6923      	ldr	r3, [r4, #16]
 8019398:	f812 0b01 	ldrb.w	r0, [r2], #1
 801939c:	440b      	add	r3, r1
 801939e:	3800      	subs	r0, #0
 80193a0:	bf18      	it	ne
 80193a2:	2001      	movne	r0, #1
 80193a4:	7028      	strb	r0, [r5, #0]
 80193a6:	60a2      	str	r2, [r4, #8]
 80193a8:	6123      	str	r3, [r4, #16]
 80193aa:	7561      	strb	r1, [r4, #21]
 80193ac:	7da0      	ldrb	r0, [r4, #22]
 80193ae:	f080 0001 	eor.w	r0, r0, #1
 80193b2:	bd38      	pop	{r3, r4, r5, pc}

080193b4 <ucdr_serialize_uint8_t>:
 80193b4:	b538      	push	{r3, r4, r5, lr}
 80193b6:	460d      	mov	r5, r1
 80193b8:	2101      	movs	r1, #1
 80193ba:	4604      	mov	r4, r0
 80193bc:	f001 fa94 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 80193c0:	b148      	cbz	r0, 80193d6 <ucdr_serialize_uint8_t+0x22>
 80193c2:	68a3      	ldr	r3, [r4, #8]
 80193c4:	2101      	movs	r1, #1
 80193c6:	701d      	strb	r5, [r3, #0]
 80193c8:	68a2      	ldr	r2, [r4, #8]
 80193ca:	6923      	ldr	r3, [r4, #16]
 80193cc:	440a      	add	r2, r1
 80193ce:	7561      	strb	r1, [r4, #21]
 80193d0:	440b      	add	r3, r1
 80193d2:	60a2      	str	r2, [r4, #8]
 80193d4:	6123      	str	r3, [r4, #16]
 80193d6:	7da0      	ldrb	r0, [r4, #22]
 80193d8:	f080 0001 	eor.w	r0, r0, #1
 80193dc:	bd38      	pop	{r3, r4, r5, pc}
 80193de:	bf00      	nop

080193e0 <ucdr_deserialize_uint8_t>:
 80193e0:	b538      	push	{r3, r4, r5, lr}
 80193e2:	460d      	mov	r5, r1
 80193e4:	2101      	movs	r1, #1
 80193e6:	4604      	mov	r4, r0
 80193e8:	f001 fa7e 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 80193ec:	b150      	cbz	r0, 8019404 <ucdr_deserialize_uint8_t+0x24>
 80193ee:	68a3      	ldr	r3, [r4, #8]
 80193f0:	2101      	movs	r1, #1
 80193f2:	781b      	ldrb	r3, [r3, #0]
 80193f4:	702b      	strb	r3, [r5, #0]
 80193f6:	68a2      	ldr	r2, [r4, #8]
 80193f8:	6923      	ldr	r3, [r4, #16]
 80193fa:	440a      	add	r2, r1
 80193fc:	7561      	strb	r1, [r4, #21]
 80193fe:	440b      	add	r3, r1
 8019400:	60a2      	str	r2, [r4, #8]
 8019402:	6123      	str	r3, [r4, #16]
 8019404:	7da0      	ldrb	r0, [r4, #22]
 8019406:	f080 0001 	eor.w	r0, r0, #1
 801940a:	bd38      	pop	{r3, r4, r5, pc}

0801940c <ucdr_serialize_uint16_t>:
 801940c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019410:	460b      	mov	r3, r1
 8019412:	b082      	sub	sp, #8
 8019414:	4604      	mov	r4, r0
 8019416:	2102      	movs	r1, #2
 8019418:	f8ad 3006 	strh.w	r3, [sp, #6]
 801941c:	f001 fab8 	bl	801a990 <ucdr_buffer_alignment>
 8019420:	4601      	mov	r1, r0
 8019422:	4620      	mov	r0, r4
 8019424:	7d67      	ldrb	r7, [r4, #21]
 8019426:	f001 fafb 	bl	801aa20 <ucdr_advance_buffer>
 801942a:	2102      	movs	r1, #2
 801942c:	4620      	mov	r0, r4
 801942e:	f001 fa4f 	bl	801a8d0 <ucdr_check_buffer_available_for>
 8019432:	bb78      	cbnz	r0, 8019494 <ucdr_serialize_uint16_t+0x88>
 8019434:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8019438:	42ab      	cmp	r3, r5
 801943a:	d926      	bls.n	801948a <ucdr_serialize_uint16_t+0x7e>
 801943c:	1b5e      	subs	r6, r3, r5
 801943e:	60a3      	str	r3, [r4, #8]
 8019440:	6923      	ldr	r3, [r4, #16]
 8019442:	4620      	mov	r0, r4
 8019444:	f1c6 0802 	rsb	r8, r6, #2
 8019448:	4433      	add	r3, r6
 801944a:	4641      	mov	r1, r8
 801944c:	6123      	str	r3, [r4, #16]
 801944e:	f001 fa4b 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 8019452:	2800      	cmp	r0, #0
 8019454:	d03b      	beq.n	80194ce <ucdr_serialize_uint16_t+0xc2>
 8019456:	7d23      	ldrb	r3, [r4, #20]
 8019458:	2b01      	cmp	r3, #1
 801945a:	d04a      	beq.n	80194f2 <ucdr_serialize_uint16_t+0xe6>
 801945c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8019460:	702b      	strb	r3, [r5, #0]
 8019462:	2e00      	cmp	r6, #0
 8019464:	d040      	beq.n	80194e8 <ucdr_serialize_uint16_t+0xdc>
 8019466:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801946a:	706b      	strb	r3, [r5, #1]
 801946c:	6923      	ldr	r3, [r4, #16]
 801946e:	2102      	movs	r1, #2
 8019470:	68a2      	ldr	r2, [r4, #8]
 8019472:	3302      	adds	r3, #2
 8019474:	7da0      	ldrb	r0, [r4, #22]
 8019476:	4442      	add	r2, r8
 8019478:	7561      	strb	r1, [r4, #21]
 801947a:	1b9e      	subs	r6, r3, r6
 801947c:	f080 0001 	eor.w	r0, r0, #1
 8019480:	60a2      	str	r2, [r4, #8]
 8019482:	6126      	str	r6, [r4, #16]
 8019484:	b002      	add	sp, #8
 8019486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801948a:	2102      	movs	r1, #2
 801948c:	4620      	mov	r0, r4
 801948e:	f001 fa2b 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 8019492:	b190      	cbz	r0, 80194ba <ucdr_serialize_uint16_t+0xae>
 8019494:	7d23      	ldrb	r3, [r4, #20]
 8019496:	2b01      	cmp	r3, #1
 8019498:	68a3      	ldr	r3, [r4, #8]
 801949a:	d014      	beq.n	80194c6 <ucdr_serialize_uint16_t+0xba>
 801949c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80194a0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80194a4:	7019      	strb	r1, [r3, #0]
 80194a6:	68a3      	ldr	r3, [r4, #8]
 80194a8:	705a      	strb	r2, [r3, #1]
 80194aa:	2102      	movs	r1, #2
 80194ac:	68a2      	ldr	r2, [r4, #8]
 80194ae:	6923      	ldr	r3, [r4, #16]
 80194b0:	440a      	add	r2, r1
 80194b2:	7561      	strb	r1, [r4, #21]
 80194b4:	440b      	add	r3, r1
 80194b6:	60a2      	str	r2, [r4, #8]
 80194b8:	6123      	str	r3, [r4, #16]
 80194ba:	7da0      	ldrb	r0, [r4, #22]
 80194bc:	f080 0001 	eor.w	r0, r0, #1
 80194c0:	b002      	add	sp, #8
 80194c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194c6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80194ca:	801a      	strh	r2, [r3, #0]
 80194cc:	e7ed      	b.n	80194aa <ucdr_serialize_uint16_t+0x9e>
 80194ce:	68a2      	ldr	r2, [r4, #8]
 80194d0:	6923      	ldr	r3, [r4, #16]
 80194d2:	7da0      	ldrb	r0, [r4, #22]
 80194d4:	1b92      	subs	r2, r2, r6
 80194d6:	1b9b      	subs	r3, r3, r6
 80194d8:	7567      	strb	r7, [r4, #21]
 80194da:	f080 0001 	eor.w	r0, r0, #1
 80194de:	60a2      	str	r2, [r4, #8]
 80194e0:	6123      	str	r3, [r4, #16]
 80194e2:	b002      	add	sp, #8
 80194e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194e8:	68a3      	ldr	r3, [r4, #8]
 80194ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80194ee:	701a      	strb	r2, [r3, #0]
 80194f0:	e7bc      	b.n	801946c <ucdr_serialize_uint16_t+0x60>
 80194f2:	4628      	mov	r0, r5
 80194f4:	f10d 0506 	add.w	r5, sp, #6
 80194f8:	4632      	mov	r2, r6
 80194fa:	4629      	mov	r1, r5
 80194fc:	f00e ffc7 	bl	802848e <memcpy>
 8019500:	4642      	mov	r2, r8
 8019502:	19a9      	adds	r1, r5, r6
 8019504:	68a0      	ldr	r0, [r4, #8]
 8019506:	f00e ffc2 	bl	802848e <memcpy>
 801950a:	e7af      	b.n	801946c <ucdr_serialize_uint16_t+0x60>

0801950c <ucdr_serialize_endian_uint16_t>:
 801950c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019510:	4604      	mov	r4, r0
 8019512:	b083      	sub	sp, #12
 8019514:	460d      	mov	r5, r1
 8019516:	2102      	movs	r1, #2
 8019518:	f8ad 2006 	strh.w	r2, [sp, #6]
 801951c:	f001 fa38 	bl	801a990 <ucdr_buffer_alignment>
 8019520:	4601      	mov	r1, r0
 8019522:	4620      	mov	r0, r4
 8019524:	f894 8015 	ldrb.w	r8, [r4, #21]
 8019528:	f001 fa7a 	bl	801aa20 <ucdr_advance_buffer>
 801952c:	2102      	movs	r1, #2
 801952e:	4620      	mov	r0, r4
 8019530:	f001 f9ce 	bl	801a8d0 <ucdr_check_buffer_available_for>
 8019534:	bb70      	cbnz	r0, 8019594 <ucdr_serialize_endian_uint16_t+0x88>
 8019536:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801953a:	42be      	cmp	r6, r7
 801953c:	d925      	bls.n	801958a <ucdr_serialize_endian_uint16_t+0x7e>
 801953e:	6923      	ldr	r3, [r4, #16]
 8019540:	4620      	mov	r0, r4
 8019542:	60a6      	str	r6, [r4, #8]
 8019544:	1bf6      	subs	r6, r6, r7
 8019546:	4433      	add	r3, r6
 8019548:	f1c6 0902 	rsb	r9, r6, #2
 801954c:	6123      	str	r3, [r4, #16]
 801954e:	4649      	mov	r1, r9
 8019550:	f001 f9ca 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 8019554:	2800      	cmp	r0, #0
 8019556:	d039      	beq.n	80195cc <ucdr_serialize_endian_uint16_t+0xc0>
 8019558:	2d01      	cmp	r5, #1
 801955a:	d04a      	beq.n	80195f2 <ucdr_serialize_endian_uint16_t+0xe6>
 801955c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8019560:	703b      	strb	r3, [r7, #0]
 8019562:	2e00      	cmp	r6, #0
 8019564:	d040      	beq.n	80195e8 <ucdr_serialize_endian_uint16_t+0xdc>
 8019566:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801956a:	707b      	strb	r3, [r7, #1]
 801956c:	6923      	ldr	r3, [r4, #16]
 801956e:	2102      	movs	r1, #2
 8019570:	68a2      	ldr	r2, [r4, #8]
 8019572:	7da0      	ldrb	r0, [r4, #22]
 8019574:	3302      	adds	r3, #2
 8019576:	444a      	add	r2, r9
 8019578:	7561      	strb	r1, [r4, #21]
 801957a:	1b9b      	subs	r3, r3, r6
 801957c:	f080 0001 	eor.w	r0, r0, #1
 8019580:	60a2      	str	r2, [r4, #8]
 8019582:	6123      	str	r3, [r4, #16]
 8019584:	b003      	add	sp, #12
 8019586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801958a:	2102      	movs	r1, #2
 801958c:	4620      	mov	r0, r4
 801958e:	f001 f9ab 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 8019592:	b188      	cbz	r0, 80195b8 <ucdr_serialize_endian_uint16_t+0xac>
 8019594:	2d01      	cmp	r5, #1
 8019596:	68a3      	ldr	r3, [r4, #8]
 8019598:	d014      	beq.n	80195c4 <ucdr_serialize_endian_uint16_t+0xb8>
 801959a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801959e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80195a2:	7019      	strb	r1, [r3, #0]
 80195a4:	68a3      	ldr	r3, [r4, #8]
 80195a6:	705a      	strb	r2, [r3, #1]
 80195a8:	2102      	movs	r1, #2
 80195aa:	68a2      	ldr	r2, [r4, #8]
 80195ac:	6923      	ldr	r3, [r4, #16]
 80195ae:	440a      	add	r2, r1
 80195b0:	7561      	strb	r1, [r4, #21]
 80195b2:	440b      	add	r3, r1
 80195b4:	60a2      	str	r2, [r4, #8]
 80195b6:	6123      	str	r3, [r4, #16]
 80195b8:	7da0      	ldrb	r0, [r4, #22]
 80195ba:	f080 0001 	eor.w	r0, r0, #1
 80195be:	b003      	add	sp, #12
 80195c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80195c4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80195c8:	801a      	strh	r2, [r3, #0]
 80195ca:	e7ed      	b.n	80195a8 <ucdr_serialize_endian_uint16_t+0x9c>
 80195cc:	68a2      	ldr	r2, [r4, #8]
 80195ce:	6923      	ldr	r3, [r4, #16]
 80195d0:	7da0      	ldrb	r0, [r4, #22]
 80195d2:	1b92      	subs	r2, r2, r6
 80195d4:	1b9b      	subs	r3, r3, r6
 80195d6:	f884 8015 	strb.w	r8, [r4, #21]
 80195da:	f080 0001 	eor.w	r0, r0, #1
 80195de:	60a2      	str	r2, [r4, #8]
 80195e0:	6123      	str	r3, [r4, #16]
 80195e2:	b003      	add	sp, #12
 80195e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80195e8:	68a3      	ldr	r3, [r4, #8]
 80195ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80195ee:	701a      	strb	r2, [r3, #0]
 80195f0:	e7bc      	b.n	801956c <ucdr_serialize_endian_uint16_t+0x60>
 80195f2:	f10d 0506 	add.w	r5, sp, #6
 80195f6:	4632      	mov	r2, r6
 80195f8:	4638      	mov	r0, r7
 80195fa:	4629      	mov	r1, r5
 80195fc:	f00e ff47 	bl	802848e <memcpy>
 8019600:	464a      	mov	r2, r9
 8019602:	19a9      	adds	r1, r5, r6
 8019604:	68a0      	ldr	r0, [r4, #8]
 8019606:	f00e ff42 	bl	802848e <memcpy>
 801960a:	e7af      	b.n	801956c <ucdr_serialize_endian_uint16_t+0x60>

0801960c <ucdr_deserialize_uint16_t>:
 801960c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019610:	4604      	mov	r4, r0
 8019612:	460d      	mov	r5, r1
 8019614:	2102      	movs	r1, #2
 8019616:	f001 f9bb 	bl	801a990 <ucdr_buffer_alignment>
 801961a:	4601      	mov	r1, r0
 801961c:	4620      	mov	r0, r4
 801961e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8019622:	f001 f9fd 	bl	801aa20 <ucdr_advance_buffer>
 8019626:	2102      	movs	r1, #2
 8019628:	4620      	mov	r0, r4
 801962a:	f001 f951 	bl	801a8d0 <ucdr_check_buffer_available_for>
 801962e:	bb60      	cbnz	r0, 801968a <ucdr_deserialize_uint16_t+0x7e>
 8019630:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8019634:	42be      	cmp	r6, r7
 8019636:	d923      	bls.n	8019680 <ucdr_deserialize_uint16_t+0x74>
 8019638:	6923      	ldr	r3, [r4, #16]
 801963a:	4620      	mov	r0, r4
 801963c:	60a6      	str	r6, [r4, #8]
 801963e:	1bf6      	subs	r6, r6, r7
 8019640:	4433      	add	r3, r6
 8019642:	f1c6 0902 	rsb	r9, r6, #2
 8019646:	6123      	str	r3, [r4, #16]
 8019648:	4649      	mov	r1, r9
 801964a:	f001 f94d 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 801964e:	2800      	cmp	r0, #0
 8019650:	d034      	beq.n	80196bc <ucdr_deserialize_uint16_t+0xb0>
 8019652:	7d23      	ldrb	r3, [r4, #20]
 8019654:	2b01      	cmp	r3, #1
 8019656:	d042      	beq.n	80196de <ucdr_deserialize_uint16_t+0xd2>
 8019658:	787b      	ldrb	r3, [r7, #1]
 801965a:	702b      	strb	r3, [r5, #0]
 801965c:	2e00      	cmp	r6, #0
 801965e:	d03a      	beq.n	80196d6 <ucdr_deserialize_uint16_t+0xca>
 8019660:	783b      	ldrb	r3, [r7, #0]
 8019662:	706b      	strb	r3, [r5, #1]
 8019664:	6923      	ldr	r3, [r4, #16]
 8019666:	2102      	movs	r1, #2
 8019668:	68a2      	ldr	r2, [r4, #8]
 801966a:	3302      	adds	r3, #2
 801966c:	7da0      	ldrb	r0, [r4, #22]
 801966e:	444a      	add	r2, r9
 8019670:	7561      	strb	r1, [r4, #21]
 8019672:	1b9b      	subs	r3, r3, r6
 8019674:	f080 0001 	eor.w	r0, r0, #1
 8019678:	60a2      	str	r2, [r4, #8]
 801967a:	6123      	str	r3, [r4, #16]
 801967c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019680:	2102      	movs	r1, #2
 8019682:	4620      	mov	r0, r4
 8019684:	f001 f930 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 8019688:	b180      	cbz	r0, 80196ac <ucdr_deserialize_uint16_t+0xa0>
 801968a:	7d23      	ldrb	r3, [r4, #20]
 801968c:	2b01      	cmp	r3, #1
 801968e:	68a3      	ldr	r3, [r4, #8]
 8019690:	d011      	beq.n	80196b6 <ucdr_deserialize_uint16_t+0xaa>
 8019692:	785b      	ldrb	r3, [r3, #1]
 8019694:	702b      	strb	r3, [r5, #0]
 8019696:	68a3      	ldr	r3, [r4, #8]
 8019698:	781b      	ldrb	r3, [r3, #0]
 801969a:	706b      	strb	r3, [r5, #1]
 801969c:	2102      	movs	r1, #2
 801969e:	68a2      	ldr	r2, [r4, #8]
 80196a0:	6923      	ldr	r3, [r4, #16]
 80196a2:	440a      	add	r2, r1
 80196a4:	7561      	strb	r1, [r4, #21]
 80196a6:	440b      	add	r3, r1
 80196a8:	60a2      	str	r2, [r4, #8]
 80196aa:	6123      	str	r3, [r4, #16]
 80196ac:	7da0      	ldrb	r0, [r4, #22]
 80196ae:	f080 0001 	eor.w	r0, r0, #1
 80196b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80196b6:	881b      	ldrh	r3, [r3, #0]
 80196b8:	802b      	strh	r3, [r5, #0]
 80196ba:	e7ef      	b.n	801969c <ucdr_deserialize_uint16_t+0x90>
 80196bc:	68a2      	ldr	r2, [r4, #8]
 80196be:	6923      	ldr	r3, [r4, #16]
 80196c0:	1b92      	subs	r2, r2, r6
 80196c2:	7da0      	ldrb	r0, [r4, #22]
 80196c4:	1b9b      	subs	r3, r3, r6
 80196c6:	f884 8015 	strb.w	r8, [r4, #21]
 80196ca:	f080 0001 	eor.w	r0, r0, #1
 80196ce:	60a2      	str	r2, [r4, #8]
 80196d0:	6123      	str	r3, [r4, #16]
 80196d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80196d6:	68a3      	ldr	r3, [r4, #8]
 80196d8:	781b      	ldrb	r3, [r3, #0]
 80196da:	706b      	strb	r3, [r5, #1]
 80196dc:	e7c2      	b.n	8019664 <ucdr_deserialize_uint16_t+0x58>
 80196de:	4639      	mov	r1, r7
 80196e0:	4632      	mov	r2, r6
 80196e2:	4628      	mov	r0, r5
 80196e4:	f00e fed3 	bl	802848e <memcpy>
 80196e8:	464a      	mov	r2, r9
 80196ea:	19a8      	adds	r0, r5, r6
 80196ec:	68a1      	ldr	r1, [r4, #8]
 80196ee:	f00e fece 	bl	802848e <memcpy>
 80196f2:	e7b7      	b.n	8019664 <ucdr_deserialize_uint16_t+0x58>

080196f4 <ucdr_deserialize_endian_uint16_t>:
 80196f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80196f8:	4604      	mov	r4, r0
 80196fa:	460e      	mov	r6, r1
 80196fc:	2102      	movs	r1, #2
 80196fe:	4615      	mov	r5, r2
 8019700:	f001 f946 	bl	801a990 <ucdr_buffer_alignment>
 8019704:	4601      	mov	r1, r0
 8019706:	4620      	mov	r0, r4
 8019708:	f894 8015 	ldrb.w	r8, [r4, #21]
 801970c:	f001 f988 	bl	801aa20 <ucdr_advance_buffer>
 8019710:	2102      	movs	r1, #2
 8019712:	4620      	mov	r0, r4
 8019714:	f001 f8dc 	bl	801a8d0 <ucdr_check_buffer_available_for>
 8019718:	bb70      	cbnz	r0, 8019778 <ucdr_deserialize_endian_uint16_t+0x84>
 801971a:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 801971e:	454f      	cmp	r7, r9
 8019720:	d925      	bls.n	801976e <ucdr_deserialize_endian_uint16_t+0x7a>
 8019722:	6923      	ldr	r3, [r4, #16]
 8019724:	4620      	mov	r0, r4
 8019726:	60a7      	str	r7, [r4, #8]
 8019728:	eba7 0709 	sub.w	r7, r7, r9
 801972c:	443b      	add	r3, r7
 801972e:	f1c7 0a02 	rsb	sl, r7, #2
 8019732:	6123      	str	r3, [r4, #16]
 8019734:	4651      	mov	r1, sl
 8019736:	f001 f8d7 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 801973a:	2800      	cmp	r0, #0
 801973c:	d034      	beq.n	80197a8 <ucdr_deserialize_endian_uint16_t+0xb4>
 801973e:	2e01      	cmp	r6, #1
 8019740:	d043      	beq.n	80197ca <ucdr_deserialize_endian_uint16_t+0xd6>
 8019742:	f899 3001 	ldrb.w	r3, [r9, #1]
 8019746:	702b      	strb	r3, [r5, #0]
 8019748:	2f00      	cmp	r7, #0
 801974a:	d03a      	beq.n	80197c2 <ucdr_deserialize_endian_uint16_t+0xce>
 801974c:	f899 3000 	ldrb.w	r3, [r9]
 8019750:	706b      	strb	r3, [r5, #1]
 8019752:	6923      	ldr	r3, [r4, #16]
 8019754:	2102      	movs	r1, #2
 8019756:	68a2      	ldr	r2, [r4, #8]
 8019758:	3302      	adds	r3, #2
 801975a:	7da0      	ldrb	r0, [r4, #22]
 801975c:	4452      	add	r2, sl
 801975e:	7561      	strb	r1, [r4, #21]
 8019760:	1bdb      	subs	r3, r3, r7
 8019762:	f080 0001 	eor.w	r0, r0, #1
 8019766:	60a2      	str	r2, [r4, #8]
 8019768:	6123      	str	r3, [r4, #16]
 801976a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801976e:	2102      	movs	r1, #2
 8019770:	4620      	mov	r0, r4
 8019772:	f001 f8b9 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 8019776:	b178      	cbz	r0, 8019798 <ucdr_deserialize_endian_uint16_t+0xa4>
 8019778:	2e01      	cmp	r6, #1
 801977a:	68a3      	ldr	r3, [r4, #8]
 801977c:	d011      	beq.n	80197a2 <ucdr_deserialize_endian_uint16_t+0xae>
 801977e:	785b      	ldrb	r3, [r3, #1]
 8019780:	702b      	strb	r3, [r5, #0]
 8019782:	68a3      	ldr	r3, [r4, #8]
 8019784:	781b      	ldrb	r3, [r3, #0]
 8019786:	706b      	strb	r3, [r5, #1]
 8019788:	2102      	movs	r1, #2
 801978a:	68a2      	ldr	r2, [r4, #8]
 801978c:	6923      	ldr	r3, [r4, #16]
 801978e:	440a      	add	r2, r1
 8019790:	7561      	strb	r1, [r4, #21]
 8019792:	440b      	add	r3, r1
 8019794:	60a2      	str	r2, [r4, #8]
 8019796:	6123      	str	r3, [r4, #16]
 8019798:	7da0      	ldrb	r0, [r4, #22]
 801979a:	f080 0001 	eor.w	r0, r0, #1
 801979e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197a2:	881b      	ldrh	r3, [r3, #0]
 80197a4:	802b      	strh	r3, [r5, #0]
 80197a6:	e7ef      	b.n	8019788 <ucdr_deserialize_endian_uint16_t+0x94>
 80197a8:	68a2      	ldr	r2, [r4, #8]
 80197aa:	6923      	ldr	r3, [r4, #16]
 80197ac:	1bd2      	subs	r2, r2, r7
 80197ae:	7da0      	ldrb	r0, [r4, #22]
 80197b0:	1bdb      	subs	r3, r3, r7
 80197b2:	f884 8015 	strb.w	r8, [r4, #21]
 80197b6:	f080 0001 	eor.w	r0, r0, #1
 80197ba:	60a2      	str	r2, [r4, #8]
 80197bc:	6123      	str	r3, [r4, #16]
 80197be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197c2:	68a3      	ldr	r3, [r4, #8]
 80197c4:	781b      	ldrb	r3, [r3, #0]
 80197c6:	706b      	strb	r3, [r5, #1]
 80197c8:	e7c3      	b.n	8019752 <ucdr_deserialize_endian_uint16_t+0x5e>
 80197ca:	4649      	mov	r1, r9
 80197cc:	463a      	mov	r2, r7
 80197ce:	4628      	mov	r0, r5
 80197d0:	f00e fe5d 	bl	802848e <memcpy>
 80197d4:	4652      	mov	r2, sl
 80197d6:	19e8      	adds	r0, r5, r7
 80197d8:	68a1      	ldr	r1, [r4, #8]
 80197da:	f00e fe58 	bl	802848e <memcpy>
 80197de:	e7b8      	b.n	8019752 <ucdr_deserialize_endian_uint16_t+0x5e>

080197e0 <ucdr_serialize_uint32_t>:
 80197e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197e4:	b082      	sub	sp, #8
 80197e6:	4604      	mov	r4, r0
 80197e8:	9101      	str	r1, [sp, #4]
 80197ea:	2104      	movs	r1, #4
 80197ec:	f001 f8d0 	bl	801a990 <ucdr_buffer_alignment>
 80197f0:	4601      	mov	r1, r0
 80197f2:	4620      	mov	r0, r4
 80197f4:	7d67      	ldrb	r7, [r4, #21]
 80197f6:	f001 f913 	bl	801aa20 <ucdr_advance_buffer>
 80197fa:	2104      	movs	r1, #4
 80197fc:	4620      	mov	r0, r4
 80197fe:	f001 f867 	bl	801a8d0 <ucdr_check_buffer_available_for>
 8019802:	2800      	cmp	r0, #0
 8019804:	d139      	bne.n	801987a <ucdr_serialize_uint32_t+0x9a>
 8019806:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801980a:	42ab      	cmp	r3, r5
 801980c:	d930      	bls.n	8019870 <ucdr_serialize_uint32_t+0x90>
 801980e:	1b5e      	subs	r6, r3, r5
 8019810:	60a3      	str	r3, [r4, #8]
 8019812:	6923      	ldr	r3, [r4, #16]
 8019814:	4620      	mov	r0, r4
 8019816:	f1c6 0804 	rsb	r8, r6, #4
 801981a:	4433      	add	r3, r6
 801981c:	4641      	mov	r1, r8
 801981e:	6123      	str	r3, [r4, #16]
 8019820:	f001 f862 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 8019824:	2800      	cmp	r0, #0
 8019826:	d04c      	beq.n	80198c2 <ucdr_serialize_uint32_t+0xe2>
 8019828:	7d23      	ldrb	r3, [r4, #20]
 801982a:	2b01      	cmp	r3, #1
 801982c:	d063      	beq.n	80198f6 <ucdr_serialize_uint32_t+0x116>
 801982e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8019832:	702b      	strb	r3, [r5, #0]
 8019834:	2e00      	cmp	r6, #0
 8019836:	d051      	beq.n	80198dc <ucdr_serialize_uint32_t+0xfc>
 8019838:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801983c:	2e01      	cmp	r6, #1
 801983e:	706b      	strb	r3, [r5, #1]
 8019840:	d050      	beq.n	80198e4 <ucdr_serialize_uint32_t+0x104>
 8019842:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8019846:	2e02      	cmp	r6, #2
 8019848:	70ab      	strb	r3, [r5, #2]
 801984a:	d04f      	beq.n	80198ec <ucdr_serialize_uint32_t+0x10c>
 801984c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8019850:	70eb      	strb	r3, [r5, #3]
 8019852:	6923      	ldr	r3, [r4, #16]
 8019854:	2104      	movs	r1, #4
 8019856:	68a2      	ldr	r2, [r4, #8]
 8019858:	3304      	adds	r3, #4
 801985a:	7da0      	ldrb	r0, [r4, #22]
 801985c:	4442      	add	r2, r8
 801985e:	7561      	strb	r1, [r4, #21]
 8019860:	1b9e      	subs	r6, r3, r6
 8019862:	f080 0001 	eor.w	r0, r0, #1
 8019866:	60a2      	str	r2, [r4, #8]
 8019868:	6126      	str	r6, [r4, #16]
 801986a:	b002      	add	sp, #8
 801986c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019870:	2104      	movs	r1, #4
 8019872:	4620      	mov	r0, r4
 8019874:	f001 f838 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 8019878:	b1d0      	cbz	r0, 80198b0 <ucdr_serialize_uint32_t+0xd0>
 801987a:	7d23      	ldrb	r3, [r4, #20]
 801987c:	2b01      	cmp	r3, #1
 801987e:	68a3      	ldr	r3, [r4, #8]
 8019880:	d01c      	beq.n	80198bc <ucdr_serialize_uint32_t+0xdc>
 8019882:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8019886:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801988a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801988e:	7018      	strb	r0, [r3, #0]
 8019890:	68a3      	ldr	r3, [r4, #8]
 8019892:	705a      	strb	r2, [r3, #1]
 8019894:	68a3      	ldr	r3, [r4, #8]
 8019896:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801989a:	7099      	strb	r1, [r3, #2]
 801989c:	68a3      	ldr	r3, [r4, #8]
 801989e:	70da      	strb	r2, [r3, #3]
 80198a0:	2104      	movs	r1, #4
 80198a2:	68a2      	ldr	r2, [r4, #8]
 80198a4:	6923      	ldr	r3, [r4, #16]
 80198a6:	440a      	add	r2, r1
 80198a8:	7561      	strb	r1, [r4, #21]
 80198aa:	440b      	add	r3, r1
 80198ac:	60a2      	str	r2, [r4, #8]
 80198ae:	6123      	str	r3, [r4, #16]
 80198b0:	7da0      	ldrb	r0, [r4, #22]
 80198b2:	f080 0001 	eor.w	r0, r0, #1
 80198b6:	b002      	add	sp, #8
 80198b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198bc:	9a01      	ldr	r2, [sp, #4]
 80198be:	601a      	str	r2, [r3, #0]
 80198c0:	e7ee      	b.n	80198a0 <ucdr_serialize_uint32_t+0xc0>
 80198c2:	68a2      	ldr	r2, [r4, #8]
 80198c4:	6923      	ldr	r3, [r4, #16]
 80198c6:	7da0      	ldrb	r0, [r4, #22]
 80198c8:	1b92      	subs	r2, r2, r6
 80198ca:	1b9b      	subs	r3, r3, r6
 80198cc:	7567      	strb	r7, [r4, #21]
 80198ce:	f080 0001 	eor.w	r0, r0, #1
 80198d2:	60a2      	str	r2, [r4, #8]
 80198d4:	6123      	str	r3, [r4, #16]
 80198d6:	b002      	add	sp, #8
 80198d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198dc:	68a3      	ldr	r3, [r4, #8]
 80198de:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80198e2:	701a      	strb	r2, [r3, #0]
 80198e4:	68a3      	ldr	r3, [r4, #8]
 80198e6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80198ea:	701a      	strb	r2, [r3, #0]
 80198ec:	68a3      	ldr	r3, [r4, #8]
 80198ee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80198f2:	701a      	strb	r2, [r3, #0]
 80198f4:	e7ad      	b.n	8019852 <ucdr_serialize_uint32_t+0x72>
 80198f6:	4628      	mov	r0, r5
 80198f8:	ad01      	add	r5, sp, #4
 80198fa:	4632      	mov	r2, r6
 80198fc:	4629      	mov	r1, r5
 80198fe:	f00e fdc6 	bl	802848e <memcpy>
 8019902:	4642      	mov	r2, r8
 8019904:	19a9      	adds	r1, r5, r6
 8019906:	68a0      	ldr	r0, [r4, #8]
 8019908:	f00e fdc1 	bl	802848e <memcpy>
 801990c:	e7a1      	b.n	8019852 <ucdr_serialize_uint32_t+0x72>
 801990e:	bf00      	nop

08019910 <ucdr_serialize_endian_uint32_t>:
 8019910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019914:	4604      	mov	r4, r0
 8019916:	b083      	sub	sp, #12
 8019918:	460d      	mov	r5, r1
 801991a:	2104      	movs	r1, #4
 801991c:	9201      	str	r2, [sp, #4]
 801991e:	f001 f837 	bl	801a990 <ucdr_buffer_alignment>
 8019922:	4601      	mov	r1, r0
 8019924:	4620      	mov	r0, r4
 8019926:	f894 8015 	ldrb.w	r8, [r4, #21]
 801992a:	f001 f879 	bl	801aa20 <ucdr_advance_buffer>
 801992e:	2104      	movs	r1, #4
 8019930:	4620      	mov	r0, r4
 8019932:	f000 ffcd 	bl	801a8d0 <ucdr_check_buffer_available_for>
 8019936:	2800      	cmp	r0, #0
 8019938:	d138      	bne.n	80199ac <ucdr_serialize_endian_uint32_t+0x9c>
 801993a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801993e:	42b7      	cmp	r7, r6
 8019940:	d92f      	bls.n	80199a2 <ucdr_serialize_endian_uint32_t+0x92>
 8019942:	6923      	ldr	r3, [r4, #16]
 8019944:	4620      	mov	r0, r4
 8019946:	60a7      	str	r7, [r4, #8]
 8019948:	1bbf      	subs	r7, r7, r6
 801994a:	443b      	add	r3, r7
 801994c:	f1c7 0904 	rsb	r9, r7, #4
 8019950:	6123      	str	r3, [r4, #16]
 8019952:	4649      	mov	r1, r9
 8019954:	f000 ffc8 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 8019958:	2800      	cmp	r0, #0
 801995a:	d04a      	beq.n	80199f2 <ucdr_serialize_endian_uint32_t+0xe2>
 801995c:	2d01      	cmp	r5, #1
 801995e:	d063      	beq.n	8019a28 <ucdr_serialize_endian_uint32_t+0x118>
 8019960:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8019964:	7033      	strb	r3, [r6, #0]
 8019966:	2f00      	cmp	r7, #0
 8019968:	d051      	beq.n	8019a0e <ucdr_serialize_endian_uint32_t+0xfe>
 801996a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801996e:	2f01      	cmp	r7, #1
 8019970:	7073      	strb	r3, [r6, #1]
 8019972:	d050      	beq.n	8019a16 <ucdr_serialize_endian_uint32_t+0x106>
 8019974:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8019978:	2f02      	cmp	r7, #2
 801997a:	70b3      	strb	r3, [r6, #2]
 801997c:	d04f      	beq.n	8019a1e <ucdr_serialize_endian_uint32_t+0x10e>
 801997e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8019982:	70f3      	strb	r3, [r6, #3]
 8019984:	6923      	ldr	r3, [r4, #16]
 8019986:	2104      	movs	r1, #4
 8019988:	68a2      	ldr	r2, [r4, #8]
 801998a:	7da0      	ldrb	r0, [r4, #22]
 801998c:	3304      	adds	r3, #4
 801998e:	444a      	add	r2, r9
 8019990:	7561      	strb	r1, [r4, #21]
 8019992:	1bdb      	subs	r3, r3, r7
 8019994:	f080 0001 	eor.w	r0, r0, #1
 8019998:	60a2      	str	r2, [r4, #8]
 801999a:	6123      	str	r3, [r4, #16]
 801999c:	b003      	add	sp, #12
 801999e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80199a2:	2104      	movs	r1, #4
 80199a4:	4620      	mov	r0, r4
 80199a6:	f000 ff9f 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 80199aa:	b1c8      	cbz	r0, 80199e0 <ucdr_serialize_endian_uint32_t+0xd0>
 80199ac:	2d01      	cmp	r5, #1
 80199ae:	68a3      	ldr	r3, [r4, #8]
 80199b0:	d01c      	beq.n	80199ec <ucdr_serialize_endian_uint32_t+0xdc>
 80199b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80199b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80199ba:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80199be:	7018      	strb	r0, [r3, #0]
 80199c0:	68a3      	ldr	r3, [r4, #8]
 80199c2:	705a      	strb	r2, [r3, #1]
 80199c4:	68a3      	ldr	r3, [r4, #8]
 80199c6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80199ca:	7099      	strb	r1, [r3, #2]
 80199cc:	68a3      	ldr	r3, [r4, #8]
 80199ce:	70da      	strb	r2, [r3, #3]
 80199d0:	2104      	movs	r1, #4
 80199d2:	68a2      	ldr	r2, [r4, #8]
 80199d4:	6923      	ldr	r3, [r4, #16]
 80199d6:	440a      	add	r2, r1
 80199d8:	7561      	strb	r1, [r4, #21]
 80199da:	440b      	add	r3, r1
 80199dc:	60a2      	str	r2, [r4, #8]
 80199de:	6123      	str	r3, [r4, #16]
 80199e0:	7da0      	ldrb	r0, [r4, #22]
 80199e2:	f080 0001 	eor.w	r0, r0, #1
 80199e6:	b003      	add	sp, #12
 80199e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80199ec:	9a01      	ldr	r2, [sp, #4]
 80199ee:	601a      	str	r2, [r3, #0]
 80199f0:	e7ee      	b.n	80199d0 <ucdr_serialize_endian_uint32_t+0xc0>
 80199f2:	68a2      	ldr	r2, [r4, #8]
 80199f4:	6923      	ldr	r3, [r4, #16]
 80199f6:	7da0      	ldrb	r0, [r4, #22]
 80199f8:	1bd2      	subs	r2, r2, r7
 80199fa:	1bdb      	subs	r3, r3, r7
 80199fc:	f884 8015 	strb.w	r8, [r4, #21]
 8019a00:	f080 0001 	eor.w	r0, r0, #1
 8019a04:	60a2      	str	r2, [r4, #8]
 8019a06:	6123      	str	r3, [r4, #16]
 8019a08:	b003      	add	sp, #12
 8019a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019a0e:	68a3      	ldr	r3, [r4, #8]
 8019a10:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8019a14:	701a      	strb	r2, [r3, #0]
 8019a16:	68a3      	ldr	r3, [r4, #8]
 8019a18:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8019a1c:	701a      	strb	r2, [r3, #0]
 8019a1e:	68a3      	ldr	r3, [r4, #8]
 8019a20:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8019a24:	701a      	strb	r2, [r3, #0]
 8019a26:	e7ad      	b.n	8019984 <ucdr_serialize_endian_uint32_t+0x74>
 8019a28:	ad01      	add	r5, sp, #4
 8019a2a:	463a      	mov	r2, r7
 8019a2c:	4630      	mov	r0, r6
 8019a2e:	4629      	mov	r1, r5
 8019a30:	f00e fd2d 	bl	802848e <memcpy>
 8019a34:	464a      	mov	r2, r9
 8019a36:	19e9      	adds	r1, r5, r7
 8019a38:	68a0      	ldr	r0, [r4, #8]
 8019a3a:	f00e fd28 	bl	802848e <memcpy>
 8019a3e:	e7a1      	b.n	8019984 <ucdr_serialize_endian_uint32_t+0x74>

08019a40 <ucdr_deserialize_uint32_t>:
 8019a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a44:	4604      	mov	r4, r0
 8019a46:	460d      	mov	r5, r1
 8019a48:	2104      	movs	r1, #4
 8019a4a:	f000 ffa1 	bl	801a990 <ucdr_buffer_alignment>
 8019a4e:	4601      	mov	r1, r0
 8019a50:	4620      	mov	r0, r4
 8019a52:	f894 8015 	ldrb.w	r8, [r4, #21]
 8019a56:	f000 ffe3 	bl	801aa20 <ucdr_advance_buffer>
 8019a5a:	2104      	movs	r1, #4
 8019a5c:	4620      	mov	r0, r4
 8019a5e:	f000 ff37 	bl	801a8d0 <ucdr_check_buffer_available_for>
 8019a62:	2800      	cmp	r0, #0
 8019a64:	d138      	bne.n	8019ad8 <ucdr_deserialize_uint32_t+0x98>
 8019a66:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8019a6a:	42b7      	cmp	r7, r6
 8019a6c:	d92f      	bls.n	8019ace <ucdr_deserialize_uint32_t+0x8e>
 8019a6e:	6923      	ldr	r3, [r4, #16]
 8019a70:	4620      	mov	r0, r4
 8019a72:	60a7      	str	r7, [r4, #8]
 8019a74:	1bbf      	subs	r7, r7, r6
 8019a76:	443b      	add	r3, r7
 8019a78:	f1c7 0904 	rsb	r9, r7, #4
 8019a7c:	6123      	str	r3, [r4, #16]
 8019a7e:	4649      	mov	r1, r9
 8019a80:	f000 ff32 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 8019a84:	2800      	cmp	r0, #0
 8019a86:	d046      	beq.n	8019b16 <ucdr_deserialize_uint32_t+0xd6>
 8019a88:	7d23      	ldrb	r3, [r4, #20]
 8019a8a:	2b01      	cmp	r3, #1
 8019a8c:	d05c      	beq.n	8019b48 <ucdr_deserialize_uint32_t+0x108>
 8019a8e:	78f3      	ldrb	r3, [r6, #3]
 8019a90:	702b      	strb	r3, [r5, #0]
 8019a92:	2f00      	cmp	r7, #0
 8019a94:	d04c      	beq.n	8019b30 <ucdr_deserialize_uint32_t+0xf0>
 8019a96:	78b3      	ldrb	r3, [r6, #2]
 8019a98:	2f01      	cmp	r7, #1
 8019a9a:	706b      	strb	r3, [r5, #1]
 8019a9c:	f105 0302 	add.w	r3, r5, #2
 8019aa0:	d04a      	beq.n	8019b38 <ucdr_deserialize_uint32_t+0xf8>
 8019aa2:	7873      	ldrb	r3, [r6, #1]
 8019aa4:	2f02      	cmp	r7, #2
 8019aa6:	70ab      	strb	r3, [r5, #2]
 8019aa8:	f105 0303 	add.w	r3, r5, #3
 8019aac:	d048      	beq.n	8019b40 <ucdr_deserialize_uint32_t+0x100>
 8019aae:	7833      	ldrb	r3, [r6, #0]
 8019ab0:	70eb      	strb	r3, [r5, #3]
 8019ab2:	6923      	ldr	r3, [r4, #16]
 8019ab4:	2104      	movs	r1, #4
 8019ab6:	68a2      	ldr	r2, [r4, #8]
 8019ab8:	3304      	adds	r3, #4
 8019aba:	7da0      	ldrb	r0, [r4, #22]
 8019abc:	444a      	add	r2, r9
 8019abe:	7561      	strb	r1, [r4, #21]
 8019ac0:	1bdb      	subs	r3, r3, r7
 8019ac2:	f080 0001 	eor.w	r0, r0, #1
 8019ac6:	60a2      	str	r2, [r4, #8]
 8019ac8:	6123      	str	r3, [r4, #16]
 8019aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019ace:	2104      	movs	r1, #4
 8019ad0:	4620      	mov	r0, r4
 8019ad2:	f000 ff09 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 8019ad6:	b1b0      	cbz	r0, 8019b06 <ucdr_deserialize_uint32_t+0xc6>
 8019ad8:	7d23      	ldrb	r3, [r4, #20]
 8019ada:	2b01      	cmp	r3, #1
 8019adc:	68a3      	ldr	r3, [r4, #8]
 8019ade:	d017      	beq.n	8019b10 <ucdr_deserialize_uint32_t+0xd0>
 8019ae0:	78db      	ldrb	r3, [r3, #3]
 8019ae2:	702b      	strb	r3, [r5, #0]
 8019ae4:	68a3      	ldr	r3, [r4, #8]
 8019ae6:	789b      	ldrb	r3, [r3, #2]
 8019ae8:	706b      	strb	r3, [r5, #1]
 8019aea:	68a3      	ldr	r3, [r4, #8]
 8019aec:	785b      	ldrb	r3, [r3, #1]
 8019aee:	70ab      	strb	r3, [r5, #2]
 8019af0:	68a3      	ldr	r3, [r4, #8]
 8019af2:	781b      	ldrb	r3, [r3, #0]
 8019af4:	70eb      	strb	r3, [r5, #3]
 8019af6:	2104      	movs	r1, #4
 8019af8:	68a2      	ldr	r2, [r4, #8]
 8019afa:	6923      	ldr	r3, [r4, #16]
 8019afc:	440a      	add	r2, r1
 8019afe:	7561      	strb	r1, [r4, #21]
 8019b00:	440b      	add	r3, r1
 8019b02:	60a2      	str	r2, [r4, #8]
 8019b04:	6123      	str	r3, [r4, #16]
 8019b06:	7da0      	ldrb	r0, [r4, #22]
 8019b08:	f080 0001 	eor.w	r0, r0, #1
 8019b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019b10:	681b      	ldr	r3, [r3, #0]
 8019b12:	602b      	str	r3, [r5, #0]
 8019b14:	e7ef      	b.n	8019af6 <ucdr_deserialize_uint32_t+0xb6>
 8019b16:	68a2      	ldr	r2, [r4, #8]
 8019b18:	6923      	ldr	r3, [r4, #16]
 8019b1a:	1bd2      	subs	r2, r2, r7
 8019b1c:	7da0      	ldrb	r0, [r4, #22]
 8019b1e:	1bdb      	subs	r3, r3, r7
 8019b20:	f884 8015 	strb.w	r8, [r4, #21]
 8019b24:	f080 0001 	eor.w	r0, r0, #1
 8019b28:	60a2      	str	r2, [r4, #8]
 8019b2a:	6123      	str	r3, [r4, #16]
 8019b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019b30:	68a3      	ldr	r3, [r4, #8]
 8019b32:	789b      	ldrb	r3, [r3, #2]
 8019b34:	706b      	strb	r3, [r5, #1]
 8019b36:	1cab      	adds	r3, r5, #2
 8019b38:	68a2      	ldr	r2, [r4, #8]
 8019b3a:	7852      	ldrb	r2, [r2, #1]
 8019b3c:	f803 2b01 	strb.w	r2, [r3], #1
 8019b40:	68a2      	ldr	r2, [r4, #8]
 8019b42:	7812      	ldrb	r2, [r2, #0]
 8019b44:	701a      	strb	r2, [r3, #0]
 8019b46:	e7b4      	b.n	8019ab2 <ucdr_deserialize_uint32_t+0x72>
 8019b48:	4631      	mov	r1, r6
 8019b4a:	463a      	mov	r2, r7
 8019b4c:	4628      	mov	r0, r5
 8019b4e:	f00e fc9e 	bl	802848e <memcpy>
 8019b52:	464a      	mov	r2, r9
 8019b54:	19e8      	adds	r0, r5, r7
 8019b56:	68a1      	ldr	r1, [r4, #8]
 8019b58:	f00e fc99 	bl	802848e <memcpy>
 8019b5c:	e7a9      	b.n	8019ab2 <ucdr_deserialize_uint32_t+0x72>
 8019b5e:	bf00      	nop

08019b60 <ucdr_deserialize_endian_uint32_t>:
 8019b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b64:	4604      	mov	r4, r0
 8019b66:	460e      	mov	r6, r1
 8019b68:	2104      	movs	r1, #4
 8019b6a:	4615      	mov	r5, r2
 8019b6c:	f000 ff10 	bl	801a990 <ucdr_buffer_alignment>
 8019b70:	4601      	mov	r1, r0
 8019b72:	4620      	mov	r0, r4
 8019b74:	f894 8015 	ldrb.w	r8, [r4, #21]
 8019b78:	f000 ff52 	bl	801aa20 <ucdr_advance_buffer>
 8019b7c:	2104      	movs	r1, #4
 8019b7e:	4620      	mov	r0, r4
 8019b80:	f000 fea6 	bl	801a8d0 <ucdr_check_buffer_available_for>
 8019b84:	2800      	cmp	r0, #0
 8019b86:	d13c      	bne.n	8019c02 <ucdr_deserialize_endian_uint32_t+0xa2>
 8019b88:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8019b8c:	42bb      	cmp	r3, r7
 8019b8e:	d933      	bls.n	8019bf8 <ucdr_deserialize_endian_uint32_t+0x98>
 8019b90:	eba3 0907 	sub.w	r9, r3, r7
 8019b94:	60a3      	str	r3, [r4, #8]
 8019b96:	6923      	ldr	r3, [r4, #16]
 8019b98:	4620      	mov	r0, r4
 8019b9a:	f1c9 0a04 	rsb	sl, r9, #4
 8019b9e:	444b      	add	r3, r9
 8019ba0:	4651      	mov	r1, sl
 8019ba2:	6123      	str	r3, [r4, #16]
 8019ba4:	f000 fea0 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 8019ba8:	2800      	cmp	r0, #0
 8019baa:	d048      	beq.n	8019c3e <ucdr_deserialize_endian_uint32_t+0xde>
 8019bac:	2e01      	cmp	r6, #1
 8019bae:	d061      	beq.n	8019c74 <ucdr_deserialize_endian_uint32_t+0x114>
 8019bb0:	78fb      	ldrb	r3, [r7, #3]
 8019bb2:	702b      	strb	r3, [r5, #0]
 8019bb4:	f1b9 0f00 	cmp.w	r9, #0
 8019bb8:	d050      	beq.n	8019c5c <ucdr_deserialize_endian_uint32_t+0xfc>
 8019bba:	78bb      	ldrb	r3, [r7, #2]
 8019bbc:	f1b9 0f01 	cmp.w	r9, #1
 8019bc0:	706b      	strb	r3, [r5, #1]
 8019bc2:	f105 0302 	add.w	r3, r5, #2
 8019bc6:	d04d      	beq.n	8019c64 <ucdr_deserialize_endian_uint32_t+0x104>
 8019bc8:	787b      	ldrb	r3, [r7, #1]
 8019bca:	f1b9 0f02 	cmp.w	r9, #2
 8019bce:	70ab      	strb	r3, [r5, #2]
 8019bd0:	f105 0303 	add.w	r3, r5, #3
 8019bd4:	d04a      	beq.n	8019c6c <ucdr_deserialize_endian_uint32_t+0x10c>
 8019bd6:	783b      	ldrb	r3, [r7, #0]
 8019bd8:	70eb      	strb	r3, [r5, #3]
 8019bda:	6923      	ldr	r3, [r4, #16]
 8019bdc:	2104      	movs	r1, #4
 8019bde:	68a2      	ldr	r2, [r4, #8]
 8019be0:	3304      	adds	r3, #4
 8019be2:	7da0      	ldrb	r0, [r4, #22]
 8019be4:	4452      	add	r2, sl
 8019be6:	7561      	strb	r1, [r4, #21]
 8019be8:	eba3 0309 	sub.w	r3, r3, r9
 8019bec:	f080 0001 	eor.w	r0, r0, #1
 8019bf0:	60a2      	str	r2, [r4, #8]
 8019bf2:	6123      	str	r3, [r4, #16]
 8019bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019bf8:	2104      	movs	r1, #4
 8019bfa:	4620      	mov	r0, r4
 8019bfc:	f000 fe74 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 8019c00:	b1a8      	cbz	r0, 8019c2e <ucdr_deserialize_endian_uint32_t+0xce>
 8019c02:	2e01      	cmp	r6, #1
 8019c04:	68a3      	ldr	r3, [r4, #8]
 8019c06:	d017      	beq.n	8019c38 <ucdr_deserialize_endian_uint32_t+0xd8>
 8019c08:	78db      	ldrb	r3, [r3, #3]
 8019c0a:	702b      	strb	r3, [r5, #0]
 8019c0c:	68a3      	ldr	r3, [r4, #8]
 8019c0e:	789b      	ldrb	r3, [r3, #2]
 8019c10:	706b      	strb	r3, [r5, #1]
 8019c12:	68a3      	ldr	r3, [r4, #8]
 8019c14:	785b      	ldrb	r3, [r3, #1]
 8019c16:	70ab      	strb	r3, [r5, #2]
 8019c18:	68a3      	ldr	r3, [r4, #8]
 8019c1a:	781b      	ldrb	r3, [r3, #0]
 8019c1c:	70eb      	strb	r3, [r5, #3]
 8019c1e:	2104      	movs	r1, #4
 8019c20:	68a2      	ldr	r2, [r4, #8]
 8019c22:	6923      	ldr	r3, [r4, #16]
 8019c24:	440a      	add	r2, r1
 8019c26:	7561      	strb	r1, [r4, #21]
 8019c28:	440b      	add	r3, r1
 8019c2a:	60a2      	str	r2, [r4, #8]
 8019c2c:	6123      	str	r3, [r4, #16]
 8019c2e:	7da0      	ldrb	r0, [r4, #22]
 8019c30:	f080 0001 	eor.w	r0, r0, #1
 8019c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c38:	681b      	ldr	r3, [r3, #0]
 8019c3a:	602b      	str	r3, [r5, #0]
 8019c3c:	e7ef      	b.n	8019c1e <ucdr_deserialize_endian_uint32_t+0xbe>
 8019c3e:	68a2      	ldr	r2, [r4, #8]
 8019c40:	6923      	ldr	r3, [r4, #16]
 8019c42:	eba2 0209 	sub.w	r2, r2, r9
 8019c46:	7da0      	ldrb	r0, [r4, #22]
 8019c48:	eba3 0309 	sub.w	r3, r3, r9
 8019c4c:	f884 8015 	strb.w	r8, [r4, #21]
 8019c50:	f080 0001 	eor.w	r0, r0, #1
 8019c54:	60a2      	str	r2, [r4, #8]
 8019c56:	6123      	str	r3, [r4, #16]
 8019c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c5c:	68a3      	ldr	r3, [r4, #8]
 8019c5e:	789b      	ldrb	r3, [r3, #2]
 8019c60:	706b      	strb	r3, [r5, #1]
 8019c62:	1cab      	adds	r3, r5, #2
 8019c64:	68a2      	ldr	r2, [r4, #8]
 8019c66:	7852      	ldrb	r2, [r2, #1]
 8019c68:	f803 2b01 	strb.w	r2, [r3], #1
 8019c6c:	68a2      	ldr	r2, [r4, #8]
 8019c6e:	7812      	ldrb	r2, [r2, #0]
 8019c70:	701a      	strb	r2, [r3, #0]
 8019c72:	e7b2      	b.n	8019bda <ucdr_deserialize_endian_uint32_t+0x7a>
 8019c74:	4639      	mov	r1, r7
 8019c76:	464a      	mov	r2, r9
 8019c78:	4628      	mov	r0, r5
 8019c7a:	f00e fc08 	bl	802848e <memcpy>
 8019c7e:	4652      	mov	r2, sl
 8019c80:	eb05 0009 	add.w	r0, r5, r9
 8019c84:	68a1      	ldr	r1, [r4, #8]
 8019c86:	f00e fc02 	bl	802848e <memcpy>
 8019c8a:	e7a6      	b.n	8019bda <ucdr_deserialize_endian_uint32_t+0x7a>

08019c8c <ucdr_serialize_uint64_t>:
 8019c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c90:	4604      	mov	r4, r0
 8019c92:	b082      	sub	sp, #8
 8019c94:	2108      	movs	r1, #8
 8019c96:	e9cd 2300 	strd	r2, r3, [sp]
 8019c9a:	f000 fe79 	bl	801a990 <ucdr_buffer_alignment>
 8019c9e:	4601      	mov	r1, r0
 8019ca0:	4620      	mov	r0, r4
 8019ca2:	7d67      	ldrb	r7, [r4, #21]
 8019ca4:	f000 febc 	bl	801aa20 <ucdr_advance_buffer>
 8019ca8:	2108      	movs	r1, #8
 8019caa:	4620      	mov	r0, r4
 8019cac:	f000 fe10 	bl	801a8d0 <ucdr_check_buffer_available_for>
 8019cb0:	2800      	cmp	r0, #0
 8019cb2:	d14e      	bne.n	8019d52 <ucdr_serialize_uint64_t+0xc6>
 8019cb4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8019cb8:	42ab      	cmp	r3, r5
 8019cba:	d945      	bls.n	8019d48 <ucdr_serialize_uint64_t+0xbc>
 8019cbc:	1b5e      	subs	r6, r3, r5
 8019cbe:	60a3      	str	r3, [r4, #8]
 8019cc0:	6923      	ldr	r3, [r4, #16]
 8019cc2:	4620      	mov	r0, r4
 8019cc4:	f1c6 0808 	rsb	r8, r6, #8
 8019cc8:	4433      	add	r3, r6
 8019cca:	4641      	mov	r1, r8
 8019ccc:	6123      	str	r3, [r4, #16]
 8019cce:	f000 fe0b 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 8019cd2:	2800      	cmp	r0, #0
 8019cd4:	d074      	beq.n	8019dc0 <ucdr_serialize_uint64_t+0x134>
 8019cd6:	7d23      	ldrb	r3, [r4, #20]
 8019cd8:	2b01      	cmp	r3, #1
 8019cda:	f000 809b 	beq.w	8019e14 <ucdr_serialize_uint64_t+0x188>
 8019cde:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8019ce2:	702b      	strb	r3, [r5, #0]
 8019ce4:	2e00      	cmp	r6, #0
 8019ce6:	d078      	beq.n	8019dda <ucdr_serialize_uint64_t+0x14e>
 8019ce8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8019cec:	2e01      	cmp	r6, #1
 8019cee:	706b      	strb	r3, [r5, #1]
 8019cf0:	d077      	beq.n	8019de2 <ucdr_serialize_uint64_t+0x156>
 8019cf2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8019cf6:	2e02      	cmp	r6, #2
 8019cf8:	70ab      	strb	r3, [r5, #2]
 8019cfa:	d076      	beq.n	8019dea <ucdr_serialize_uint64_t+0x15e>
 8019cfc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8019d00:	2e03      	cmp	r6, #3
 8019d02:	70eb      	strb	r3, [r5, #3]
 8019d04:	d075      	beq.n	8019df2 <ucdr_serialize_uint64_t+0x166>
 8019d06:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8019d0a:	2e04      	cmp	r6, #4
 8019d0c:	712b      	strb	r3, [r5, #4]
 8019d0e:	d074      	beq.n	8019dfa <ucdr_serialize_uint64_t+0x16e>
 8019d10:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8019d14:	2e05      	cmp	r6, #5
 8019d16:	716b      	strb	r3, [r5, #5]
 8019d18:	d073      	beq.n	8019e02 <ucdr_serialize_uint64_t+0x176>
 8019d1a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8019d1e:	2e06      	cmp	r6, #6
 8019d20:	71ab      	strb	r3, [r5, #6]
 8019d22:	d072      	beq.n	8019e0a <ucdr_serialize_uint64_t+0x17e>
 8019d24:	f89d 3000 	ldrb.w	r3, [sp]
 8019d28:	71eb      	strb	r3, [r5, #7]
 8019d2a:	6923      	ldr	r3, [r4, #16]
 8019d2c:	2108      	movs	r1, #8
 8019d2e:	68a2      	ldr	r2, [r4, #8]
 8019d30:	3308      	adds	r3, #8
 8019d32:	7da0      	ldrb	r0, [r4, #22]
 8019d34:	4442      	add	r2, r8
 8019d36:	7561      	strb	r1, [r4, #21]
 8019d38:	1b9e      	subs	r6, r3, r6
 8019d3a:	f080 0001 	eor.w	r0, r0, #1
 8019d3e:	60a2      	str	r2, [r4, #8]
 8019d40:	6126      	str	r6, [r4, #16]
 8019d42:	b002      	add	sp, #8
 8019d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d48:	2108      	movs	r1, #8
 8019d4a:	4620      	mov	r0, r4
 8019d4c:	f000 fdcc 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 8019d50:	b350      	cbz	r0, 8019da8 <ucdr_serialize_uint64_t+0x11c>
 8019d52:	7d23      	ldrb	r3, [r4, #20]
 8019d54:	2b01      	cmp	r3, #1
 8019d56:	d02d      	beq.n	8019db4 <ucdr_serialize_uint64_t+0x128>
 8019d58:	68a3      	ldr	r3, [r4, #8]
 8019d5a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8019d5e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8019d62:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8019d66:	7018      	strb	r0, [r3, #0]
 8019d68:	68a3      	ldr	r3, [r4, #8]
 8019d6a:	705a      	strb	r2, [r3, #1]
 8019d6c:	68a3      	ldr	r3, [r4, #8]
 8019d6e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8019d72:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8019d76:	7099      	strb	r1, [r3, #2]
 8019d78:	68a3      	ldr	r3, [r4, #8]
 8019d7a:	70da      	strb	r2, [r3, #3]
 8019d7c:	68a3      	ldr	r3, [r4, #8]
 8019d7e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8019d82:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8019d86:	7118      	strb	r0, [r3, #4]
 8019d88:	68a3      	ldr	r3, [r4, #8]
 8019d8a:	715a      	strb	r2, [r3, #5]
 8019d8c:	68a3      	ldr	r3, [r4, #8]
 8019d8e:	f89d 2000 	ldrb.w	r2, [sp]
 8019d92:	7199      	strb	r1, [r3, #6]
 8019d94:	68a3      	ldr	r3, [r4, #8]
 8019d96:	71da      	strb	r2, [r3, #7]
 8019d98:	2108      	movs	r1, #8
 8019d9a:	68a2      	ldr	r2, [r4, #8]
 8019d9c:	6923      	ldr	r3, [r4, #16]
 8019d9e:	440a      	add	r2, r1
 8019da0:	7561      	strb	r1, [r4, #21]
 8019da2:	440b      	add	r3, r1
 8019da4:	60a2      	str	r2, [r4, #8]
 8019da6:	6123      	str	r3, [r4, #16]
 8019da8:	7da0      	ldrb	r0, [r4, #22]
 8019daa:	f080 0001 	eor.w	r0, r0, #1
 8019dae:	b002      	add	sp, #8
 8019db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019db4:	466b      	mov	r3, sp
 8019db6:	68a2      	ldr	r2, [r4, #8]
 8019db8:	cb03      	ldmia	r3!, {r0, r1}
 8019dba:	6010      	str	r0, [r2, #0]
 8019dbc:	6051      	str	r1, [r2, #4]
 8019dbe:	e7eb      	b.n	8019d98 <ucdr_serialize_uint64_t+0x10c>
 8019dc0:	68a2      	ldr	r2, [r4, #8]
 8019dc2:	6923      	ldr	r3, [r4, #16]
 8019dc4:	7da0      	ldrb	r0, [r4, #22]
 8019dc6:	1b92      	subs	r2, r2, r6
 8019dc8:	1b9b      	subs	r3, r3, r6
 8019dca:	7567      	strb	r7, [r4, #21]
 8019dcc:	f080 0001 	eor.w	r0, r0, #1
 8019dd0:	60a2      	str	r2, [r4, #8]
 8019dd2:	6123      	str	r3, [r4, #16]
 8019dd4:	b002      	add	sp, #8
 8019dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019dda:	68a3      	ldr	r3, [r4, #8]
 8019ddc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8019de0:	701a      	strb	r2, [r3, #0]
 8019de2:	68a3      	ldr	r3, [r4, #8]
 8019de4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8019de8:	701a      	strb	r2, [r3, #0]
 8019dea:	68a3      	ldr	r3, [r4, #8]
 8019dec:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8019df0:	701a      	strb	r2, [r3, #0]
 8019df2:	68a3      	ldr	r3, [r4, #8]
 8019df4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8019df8:	701a      	strb	r2, [r3, #0]
 8019dfa:	68a3      	ldr	r3, [r4, #8]
 8019dfc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8019e00:	701a      	strb	r2, [r3, #0]
 8019e02:	68a3      	ldr	r3, [r4, #8]
 8019e04:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8019e08:	701a      	strb	r2, [r3, #0]
 8019e0a:	68a3      	ldr	r3, [r4, #8]
 8019e0c:	f89d 2000 	ldrb.w	r2, [sp]
 8019e10:	701a      	strb	r2, [r3, #0]
 8019e12:	e78a      	b.n	8019d2a <ucdr_serialize_uint64_t+0x9e>
 8019e14:	4628      	mov	r0, r5
 8019e16:	466d      	mov	r5, sp
 8019e18:	4632      	mov	r2, r6
 8019e1a:	4629      	mov	r1, r5
 8019e1c:	f00e fb37 	bl	802848e <memcpy>
 8019e20:	4642      	mov	r2, r8
 8019e22:	19a9      	adds	r1, r5, r6
 8019e24:	68a0      	ldr	r0, [r4, #8]
 8019e26:	f00e fb32 	bl	802848e <memcpy>
 8019e2a:	e77e      	b.n	8019d2a <ucdr_serialize_uint64_t+0x9e>

08019e2c <ucdr_serialize_int16_t>:
 8019e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e30:	460b      	mov	r3, r1
 8019e32:	b082      	sub	sp, #8
 8019e34:	4604      	mov	r4, r0
 8019e36:	2102      	movs	r1, #2
 8019e38:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019e3c:	f000 fda8 	bl	801a990 <ucdr_buffer_alignment>
 8019e40:	4601      	mov	r1, r0
 8019e42:	4620      	mov	r0, r4
 8019e44:	7d67      	ldrb	r7, [r4, #21]
 8019e46:	f000 fdeb 	bl	801aa20 <ucdr_advance_buffer>
 8019e4a:	2102      	movs	r1, #2
 8019e4c:	4620      	mov	r0, r4
 8019e4e:	f000 fd3f 	bl	801a8d0 <ucdr_check_buffer_available_for>
 8019e52:	bb78      	cbnz	r0, 8019eb4 <ucdr_serialize_int16_t+0x88>
 8019e54:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8019e58:	42ab      	cmp	r3, r5
 8019e5a:	d926      	bls.n	8019eaa <ucdr_serialize_int16_t+0x7e>
 8019e5c:	1b5e      	subs	r6, r3, r5
 8019e5e:	60a3      	str	r3, [r4, #8]
 8019e60:	6923      	ldr	r3, [r4, #16]
 8019e62:	4620      	mov	r0, r4
 8019e64:	f1c6 0802 	rsb	r8, r6, #2
 8019e68:	4433      	add	r3, r6
 8019e6a:	4641      	mov	r1, r8
 8019e6c:	6123      	str	r3, [r4, #16]
 8019e6e:	f000 fd3b 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 8019e72:	2800      	cmp	r0, #0
 8019e74:	d03b      	beq.n	8019eee <ucdr_serialize_int16_t+0xc2>
 8019e76:	7d23      	ldrb	r3, [r4, #20]
 8019e78:	2b01      	cmp	r3, #1
 8019e7a:	d04a      	beq.n	8019f12 <ucdr_serialize_int16_t+0xe6>
 8019e7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8019e80:	702b      	strb	r3, [r5, #0]
 8019e82:	2e00      	cmp	r6, #0
 8019e84:	d040      	beq.n	8019f08 <ucdr_serialize_int16_t+0xdc>
 8019e86:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8019e8a:	706b      	strb	r3, [r5, #1]
 8019e8c:	6923      	ldr	r3, [r4, #16]
 8019e8e:	2102      	movs	r1, #2
 8019e90:	68a2      	ldr	r2, [r4, #8]
 8019e92:	3302      	adds	r3, #2
 8019e94:	7da0      	ldrb	r0, [r4, #22]
 8019e96:	4442      	add	r2, r8
 8019e98:	7561      	strb	r1, [r4, #21]
 8019e9a:	1b9e      	subs	r6, r3, r6
 8019e9c:	f080 0001 	eor.w	r0, r0, #1
 8019ea0:	60a2      	str	r2, [r4, #8]
 8019ea2:	6126      	str	r6, [r4, #16]
 8019ea4:	b002      	add	sp, #8
 8019ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019eaa:	2102      	movs	r1, #2
 8019eac:	4620      	mov	r0, r4
 8019eae:	f000 fd1b 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 8019eb2:	b190      	cbz	r0, 8019eda <ucdr_serialize_int16_t+0xae>
 8019eb4:	7d23      	ldrb	r3, [r4, #20]
 8019eb6:	2b01      	cmp	r3, #1
 8019eb8:	68a3      	ldr	r3, [r4, #8]
 8019eba:	d014      	beq.n	8019ee6 <ucdr_serialize_int16_t+0xba>
 8019ebc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8019ec0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8019ec4:	7019      	strb	r1, [r3, #0]
 8019ec6:	68a3      	ldr	r3, [r4, #8]
 8019ec8:	705a      	strb	r2, [r3, #1]
 8019eca:	2102      	movs	r1, #2
 8019ecc:	68a2      	ldr	r2, [r4, #8]
 8019ece:	6923      	ldr	r3, [r4, #16]
 8019ed0:	440a      	add	r2, r1
 8019ed2:	7561      	strb	r1, [r4, #21]
 8019ed4:	440b      	add	r3, r1
 8019ed6:	60a2      	str	r2, [r4, #8]
 8019ed8:	6123      	str	r3, [r4, #16]
 8019eda:	7da0      	ldrb	r0, [r4, #22]
 8019edc:	f080 0001 	eor.w	r0, r0, #1
 8019ee0:	b002      	add	sp, #8
 8019ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ee6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8019eea:	801a      	strh	r2, [r3, #0]
 8019eec:	e7ed      	b.n	8019eca <ucdr_serialize_int16_t+0x9e>
 8019eee:	68a2      	ldr	r2, [r4, #8]
 8019ef0:	6923      	ldr	r3, [r4, #16]
 8019ef2:	7da0      	ldrb	r0, [r4, #22]
 8019ef4:	1b92      	subs	r2, r2, r6
 8019ef6:	1b9b      	subs	r3, r3, r6
 8019ef8:	7567      	strb	r7, [r4, #21]
 8019efa:	f080 0001 	eor.w	r0, r0, #1
 8019efe:	60a2      	str	r2, [r4, #8]
 8019f00:	6123      	str	r3, [r4, #16]
 8019f02:	b002      	add	sp, #8
 8019f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f08:	68a3      	ldr	r3, [r4, #8]
 8019f0a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8019f0e:	701a      	strb	r2, [r3, #0]
 8019f10:	e7bc      	b.n	8019e8c <ucdr_serialize_int16_t+0x60>
 8019f12:	4628      	mov	r0, r5
 8019f14:	f10d 0506 	add.w	r5, sp, #6
 8019f18:	4632      	mov	r2, r6
 8019f1a:	4629      	mov	r1, r5
 8019f1c:	f00e fab7 	bl	802848e <memcpy>
 8019f20:	4642      	mov	r2, r8
 8019f22:	19a9      	adds	r1, r5, r6
 8019f24:	68a0      	ldr	r0, [r4, #8]
 8019f26:	f00e fab2 	bl	802848e <memcpy>
 8019f2a:	e7af      	b.n	8019e8c <ucdr_serialize_int16_t+0x60>

08019f2c <ucdr_deserialize_int16_t>:
 8019f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f30:	4604      	mov	r4, r0
 8019f32:	460d      	mov	r5, r1
 8019f34:	2102      	movs	r1, #2
 8019f36:	f000 fd2b 	bl	801a990 <ucdr_buffer_alignment>
 8019f3a:	4601      	mov	r1, r0
 8019f3c:	4620      	mov	r0, r4
 8019f3e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8019f42:	f000 fd6d 	bl	801aa20 <ucdr_advance_buffer>
 8019f46:	2102      	movs	r1, #2
 8019f48:	4620      	mov	r0, r4
 8019f4a:	f000 fcc1 	bl	801a8d0 <ucdr_check_buffer_available_for>
 8019f4e:	bb60      	cbnz	r0, 8019faa <ucdr_deserialize_int16_t+0x7e>
 8019f50:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8019f54:	42be      	cmp	r6, r7
 8019f56:	d923      	bls.n	8019fa0 <ucdr_deserialize_int16_t+0x74>
 8019f58:	6923      	ldr	r3, [r4, #16]
 8019f5a:	4620      	mov	r0, r4
 8019f5c:	60a6      	str	r6, [r4, #8]
 8019f5e:	1bf6      	subs	r6, r6, r7
 8019f60:	4433      	add	r3, r6
 8019f62:	f1c6 0902 	rsb	r9, r6, #2
 8019f66:	6123      	str	r3, [r4, #16]
 8019f68:	4649      	mov	r1, r9
 8019f6a:	f000 fcbd 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 8019f6e:	2800      	cmp	r0, #0
 8019f70:	d034      	beq.n	8019fdc <ucdr_deserialize_int16_t+0xb0>
 8019f72:	7d23      	ldrb	r3, [r4, #20]
 8019f74:	2b01      	cmp	r3, #1
 8019f76:	d042      	beq.n	8019ffe <ucdr_deserialize_int16_t+0xd2>
 8019f78:	787b      	ldrb	r3, [r7, #1]
 8019f7a:	702b      	strb	r3, [r5, #0]
 8019f7c:	2e00      	cmp	r6, #0
 8019f7e:	d03a      	beq.n	8019ff6 <ucdr_deserialize_int16_t+0xca>
 8019f80:	783b      	ldrb	r3, [r7, #0]
 8019f82:	706b      	strb	r3, [r5, #1]
 8019f84:	6923      	ldr	r3, [r4, #16]
 8019f86:	2102      	movs	r1, #2
 8019f88:	68a2      	ldr	r2, [r4, #8]
 8019f8a:	3302      	adds	r3, #2
 8019f8c:	7da0      	ldrb	r0, [r4, #22]
 8019f8e:	444a      	add	r2, r9
 8019f90:	7561      	strb	r1, [r4, #21]
 8019f92:	1b9b      	subs	r3, r3, r6
 8019f94:	f080 0001 	eor.w	r0, r0, #1
 8019f98:	60a2      	str	r2, [r4, #8]
 8019f9a:	6123      	str	r3, [r4, #16]
 8019f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019fa0:	2102      	movs	r1, #2
 8019fa2:	4620      	mov	r0, r4
 8019fa4:	f000 fca0 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 8019fa8:	b180      	cbz	r0, 8019fcc <ucdr_deserialize_int16_t+0xa0>
 8019faa:	7d23      	ldrb	r3, [r4, #20]
 8019fac:	2b01      	cmp	r3, #1
 8019fae:	68a3      	ldr	r3, [r4, #8]
 8019fb0:	d011      	beq.n	8019fd6 <ucdr_deserialize_int16_t+0xaa>
 8019fb2:	785b      	ldrb	r3, [r3, #1]
 8019fb4:	702b      	strb	r3, [r5, #0]
 8019fb6:	68a3      	ldr	r3, [r4, #8]
 8019fb8:	781b      	ldrb	r3, [r3, #0]
 8019fba:	706b      	strb	r3, [r5, #1]
 8019fbc:	2102      	movs	r1, #2
 8019fbe:	68a2      	ldr	r2, [r4, #8]
 8019fc0:	6923      	ldr	r3, [r4, #16]
 8019fc2:	440a      	add	r2, r1
 8019fc4:	7561      	strb	r1, [r4, #21]
 8019fc6:	440b      	add	r3, r1
 8019fc8:	60a2      	str	r2, [r4, #8]
 8019fca:	6123      	str	r3, [r4, #16]
 8019fcc:	7da0      	ldrb	r0, [r4, #22]
 8019fce:	f080 0001 	eor.w	r0, r0, #1
 8019fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019fd6:	881b      	ldrh	r3, [r3, #0]
 8019fd8:	802b      	strh	r3, [r5, #0]
 8019fda:	e7ef      	b.n	8019fbc <ucdr_deserialize_int16_t+0x90>
 8019fdc:	68a2      	ldr	r2, [r4, #8]
 8019fde:	6923      	ldr	r3, [r4, #16]
 8019fe0:	1b92      	subs	r2, r2, r6
 8019fe2:	7da0      	ldrb	r0, [r4, #22]
 8019fe4:	1b9b      	subs	r3, r3, r6
 8019fe6:	f884 8015 	strb.w	r8, [r4, #21]
 8019fea:	f080 0001 	eor.w	r0, r0, #1
 8019fee:	60a2      	str	r2, [r4, #8]
 8019ff0:	6123      	str	r3, [r4, #16]
 8019ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019ff6:	68a3      	ldr	r3, [r4, #8]
 8019ff8:	781b      	ldrb	r3, [r3, #0]
 8019ffa:	706b      	strb	r3, [r5, #1]
 8019ffc:	e7c2      	b.n	8019f84 <ucdr_deserialize_int16_t+0x58>
 8019ffe:	4639      	mov	r1, r7
 801a000:	4632      	mov	r2, r6
 801a002:	4628      	mov	r0, r5
 801a004:	f00e fa43 	bl	802848e <memcpy>
 801a008:	464a      	mov	r2, r9
 801a00a:	19a8      	adds	r0, r5, r6
 801a00c:	68a1      	ldr	r1, [r4, #8]
 801a00e:	f00e fa3e 	bl	802848e <memcpy>
 801a012:	e7b7      	b.n	8019f84 <ucdr_deserialize_int16_t+0x58>

0801a014 <ucdr_serialize_int32_t>:
 801a014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a018:	b082      	sub	sp, #8
 801a01a:	4604      	mov	r4, r0
 801a01c:	9101      	str	r1, [sp, #4]
 801a01e:	2104      	movs	r1, #4
 801a020:	f000 fcb6 	bl	801a990 <ucdr_buffer_alignment>
 801a024:	4601      	mov	r1, r0
 801a026:	4620      	mov	r0, r4
 801a028:	7d67      	ldrb	r7, [r4, #21]
 801a02a:	f000 fcf9 	bl	801aa20 <ucdr_advance_buffer>
 801a02e:	2104      	movs	r1, #4
 801a030:	4620      	mov	r0, r4
 801a032:	f000 fc4d 	bl	801a8d0 <ucdr_check_buffer_available_for>
 801a036:	2800      	cmp	r0, #0
 801a038:	d139      	bne.n	801a0ae <ucdr_serialize_int32_t+0x9a>
 801a03a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801a03e:	42ab      	cmp	r3, r5
 801a040:	d930      	bls.n	801a0a4 <ucdr_serialize_int32_t+0x90>
 801a042:	1b5e      	subs	r6, r3, r5
 801a044:	60a3      	str	r3, [r4, #8]
 801a046:	6923      	ldr	r3, [r4, #16]
 801a048:	4620      	mov	r0, r4
 801a04a:	f1c6 0804 	rsb	r8, r6, #4
 801a04e:	4433      	add	r3, r6
 801a050:	4641      	mov	r1, r8
 801a052:	6123      	str	r3, [r4, #16]
 801a054:	f000 fc48 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 801a058:	2800      	cmp	r0, #0
 801a05a:	d04c      	beq.n	801a0f6 <ucdr_serialize_int32_t+0xe2>
 801a05c:	7d23      	ldrb	r3, [r4, #20]
 801a05e:	2b01      	cmp	r3, #1
 801a060:	d063      	beq.n	801a12a <ucdr_serialize_int32_t+0x116>
 801a062:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801a066:	702b      	strb	r3, [r5, #0]
 801a068:	2e00      	cmp	r6, #0
 801a06a:	d051      	beq.n	801a110 <ucdr_serialize_int32_t+0xfc>
 801a06c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801a070:	2e01      	cmp	r6, #1
 801a072:	706b      	strb	r3, [r5, #1]
 801a074:	d050      	beq.n	801a118 <ucdr_serialize_int32_t+0x104>
 801a076:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801a07a:	2e02      	cmp	r6, #2
 801a07c:	70ab      	strb	r3, [r5, #2]
 801a07e:	d04f      	beq.n	801a120 <ucdr_serialize_int32_t+0x10c>
 801a080:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801a084:	70eb      	strb	r3, [r5, #3]
 801a086:	6923      	ldr	r3, [r4, #16]
 801a088:	2104      	movs	r1, #4
 801a08a:	68a2      	ldr	r2, [r4, #8]
 801a08c:	3304      	adds	r3, #4
 801a08e:	7da0      	ldrb	r0, [r4, #22]
 801a090:	4442      	add	r2, r8
 801a092:	7561      	strb	r1, [r4, #21]
 801a094:	1b9e      	subs	r6, r3, r6
 801a096:	f080 0001 	eor.w	r0, r0, #1
 801a09a:	60a2      	str	r2, [r4, #8]
 801a09c:	6126      	str	r6, [r4, #16]
 801a09e:	b002      	add	sp, #8
 801a0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0a4:	2104      	movs	r1, #4
 801a0a6:	4620      	mov	r0, r4
 801a0a8:	f000 fc1e 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 801a0ac:	b1d0      	cbz	r0, 801a0e4 <ucdr_serialize_int32_t+0xd0>
 801a0ae:	7d23      	ldrb	r3, [r4, #20]
 801a0b0:	2b01      	cmp	r3, #1
 801a0b2:	68a3      	ldr	r3, [r4, #8]
 801a0b4:	d01c      	beq.n	801a0f0 <ucdr_serialize_int32_t+0xdc>
 801a0b6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801a0ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801a0be:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801a0c2:	7018      	strb	r0, [r3, #0]
 801a0c4:	68a3      	ldr	r3, [r4, #8]
 801a0c6:	705a      	strb	r2, [r3, #1]
 801a0c8:	68a3      	ldr	r3, [r4, #8]
 801a0ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801a0ce:	7099      	strb	r1, [r3, #2]
 801a0d0:	68a3      	ldr	r3, [r4, #8]
 801a0d2:	70da      	strb	r2, [r3, #3]
 801a0d4:	2104      	movs	r1, #4
 801a0d6:	68a2      	ldr	r2, [r4, #8]
 801a0d8:	6923      	ldr	r3, [r4, #16]
 801a0da:	440a      	add	r2, r1
 801a0dc:	7561      	strb	r1, [r4, #21]
 801a0de:	440b      	add	r3, r1
 801a0e0:	60a2      	str	r2, [r4, #8]
 801a0e2:	6123      	str	r3, [r4, #16]
 801a0e4:	7da0      	ldrb	r0, [r4, #22]
 801a0e6:	f080 0001 	eor.w	r0, r0, #1
 801a0ea:	b002      	add	sp, #8
 801a0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0f0:	9a01      	ldr	r2, [sp, #4]
 801a0f2:	601a      	str	r2, [r3, #0]
 801a0f4:	e7ee      	b.n	801a0d4 <ucdr_serialize_int32_t+0xc0>
 801a0f6:	68a2      	ldr	r2, [r4, #8]
 801a0f8:	6923      	ldr	r3, [r4, #16]
 801a0fa:	7da0      	ldrb	r0, [r4, #22]
 801a0fc:	1b92      	subs	r2, r2, r6
 801a0fe:	1b9b      	subs	r3, r3, r6
 801a100:	7567      	strb	r7, [r4, #21]
 801a102:	f080 0001 	eor.w	r0, r0, #1
 801a106:	60a2      	str	r2, [r4, #8]
 801a108:	6123      	str	r3, [r4, #16]
 801a10a:	b002      	add	sp, #8
 801a10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a110:	68a3      	ldr	r3, [r4, #8]
 801a112:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801a116:	701a      	strb	r2, [r3, #0]
 801a118:	68a3      	ldr	r3, [r4, #8]
 801a11a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801a11e:	701a      	strb	r2, [r3, #0]
 801a120:	68a3      	ldr	r3, [r4, #8]
 801a122:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801a126:	701a      	strb	r2, [r3, #0]
 801a128:	e7ad      	b.n	801a086 <ucdr_serialize_int32_t+0x72>
 801a12a:	4628      	mov	r0, r5
 801a12c:	ad01      	add	r5, sp, #4
 801a12e:	4632      	mov	r2, r6
 801a130:	4629      	mov	r1, r5
 801a132:	f00e f9ac 	bl	802848e <memcpy>
 801a136:	4642      	mov	r2, r8
 801a138:	19a9      	adds	r1, r5, r6
 801a13a:	68a0      	ldr	r0, [r4, #8]
 801a13c:	f00e f9a7 	bl	802848e <memcpy>
 801a140:	e7a1      	b.n	801a086 <ucdr_serialize_int32_t+0x72>
 801a142:	bf00      	nop

0801a144 <ucdr_deserialize_int32_t>:
 801a144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a148:	4604      	mov	r4, r0
 801a14a:	460d      	mov	r5, r1
 801a14c:	2104      	movs	r1, #4
 801a14e:	f000 fc1f 	bl	801a990 <ucdr_buffer_alignment>
 801a152:	4601      	mov	r1, r0
 801a154:	4620      	mov	r0, r4
 801a156:	f894 8015 	ldrb.w	r8, [r4, #21]
 801a15a:	f000 fc61 	bl	801aa20 <ucdr_advance_buffer>
 801a15e:	2104      	movs	r1, #4
 801a160:	4620      	mov	r0, r4
 801a162:	f000 fbb5 	bl	801a8d0 <ucdr_check_buffer_available_for>
 801a166:	2800      	cmp	r0, #0
 801a168:	d138      	bne.n	801a1dc <ucdr_deserialize_int32_t+0x98>
 801a16a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801a16e:	42b7      	cmp	r7, r6
 801a170:	d92f      	bls.n	801a1d2 <ucdr_deserialize_int32_t+0x8e>
 801a172:	6923      	ldr	r3, [r4, #16]
 801a174:	4620      	mov	r0, r4
 801a176:	60a7      	str	r7, [r4, #8]
 801a178:	1bbf      	subs	r7, r7, r6
 801a17a:	443b      	add	r3, r7
 801a17c:	f1c7 0904 	rsb	r9, r7, #4
 801a180:	6123      	str	r3, [r4, #16]
 801a182:	4649      	mov	r1, r9
 801a184:	f000 fbb0 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 801a188:	2800      	cmp	r0, #0
 801a18a:	d046      	beq.n	801a21a <ucdr_deserialize_int32_t+0xd6>
 801a18c:	7d23      	ldrb	r3, [r4, #20]
 801a18e:	2b01      	cmp	r3, #1
 801a190:	d05c      	beq.n	801a24c <ucdr_deserialize_int32_t+0x108>
 801a192:	78f3      	ldrb	r3, [r6, #3]
 801a194:	702b      	strb	r3, [r5, #0]
 801a196:	2f00      	cmp	r7, #0
 801a198:	d04c      	beq.n	801a234 <ucdr_deserialize_int32_t+0xf0>
 801a19a:	78b3      	ldrb	r3, [r6, #2]
 801a19c:	2f01      	cmp	r7, #1
 801a19e:	706b      	strb	r3, [r5, #1]
 801a1a0:	f105 0302 	add.w	r3, r5, #2
 801a1a4:	d04a      	beq.n	801a23c <ucdr_deserialize_int32_t+0xf8>
 801a1a6:	7873      	ldrb	r3, [r6, #1]
 801a1a8:	2f02      	cmp	r7, #2
 801a1aa:	70ab      	strb	r3, [r5, #2]
 801a1ac:	f105 0303 	add.w	r3, r5, #3
 801a1b0:	d048      	beq.n	801a244 <ucdr_deserialize_int32_t+0x100>
 801a1b2:	7833      	ldrb	r3, [r6, #0]
 801a1b4:	70eb      	strb	r3, [r5, #3]
 801a1b6:	6923      	ldr	r3, [r4, #16]
 801a1b8:	2104      	movs	r1, #4
 801a1ba:	68a2      	ldr	r2, [r4, #8]
 801a1bc:	3304      	adds	r3, #4
 801a1be:	7da0      	ldrb	r0, [r4, #22]
 801a1c0:	444a      	add	r2, r9
 801a1c2:	7561      	strb	r1, [r4, #21]
 801a1c4:	1bdb      	subs	r3, r3, r7
 801a1c6:	f080 0001 	eor.w	r0, r0, #1
 801a1ca:	60a2      	str	r2, [r4, #8]
 801a1cc:	6123      	str	r3, [r4, #16]
 801a1ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a1d2:	2104      	movs	r1, #4
 801a1d4:	4620      	mov	r0, r4
 801a1d6:	f000 fb87 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 801a1da:	b1b0      	cbz	r0, 801a20a <ucdr_deserialize_int32_t+0xc6>
 801a1dc:	7d23      	ldrb	r3, [r4, #20]
 801a1de:	2b01      	cmp	r3, #1
 801a1e0:	68a3      	ldr	r3, [r4, #8]
 801a1e2:	d017      	beq.n	801a214 <ucdr_deserialize_int32_t+0xd0>
 801a1e4:	78db      	ldrb	r3, [r3, #3]
 801a1e6:	702b      	strb	r3, [r5, #0]
 801a1e8:	68a3      	ldr	r3, [r4, #8]
 801a1ea:	789b      	ldrb	r3, [r3, #2]
 801a1ec:	706b      	strb	r3, [r5, #1]
 801a1ee:	68a3      	ldr	r3, [r4, #8]
 801a1f0:	785b      	ldrb	r3, [r3, #1]
 801a1f2:	70ab      	strb	r3, [r5, #2]
 801a1f4:	68a3      	ldr	r3, [r4, #8]
 801a1f6:	781b      	ldrb	r3, [r3, #0]
 801a1f8:	70eb      	strb	r3, [r5, #3]
 801a1fa:	2104      	movs	r1, #4
 801a1fc:	68a2      	ldr	r2, [r4, #8]
 801a1fe:	6923      	ldr	r3, [r4, #16]
 801a200:	440a      	add	r2, r1
 801a202:	7561      	strb	r1, [r4, #21]
 801a204:	440b      	add	r3, r1
 801a206:	60a2      	str	r2, [r4, #8]
 801a208:	6123      	str	r3, [r4, #16]
 801a20a:	7da0      	ldrb	r0, [r4, #22]
 801a20c:	f080 0001 	eor.w	r0, r0, #1
 801a210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a214:	681b      	ldr	r3, [r3, #0]
 801a216:	602b      	str	r3, [r5, #0]
 801a218:	e7ef      	b.n	801a1fa <ucdr_deserialize_int32_t+0xb6>
 801a21a:	68a2      	ldr	r2, [r4, #8]
 801a21c:	6923      	ldr	r3, [r4, #16]
 801a21e:	1bd2      	subs	r2, r2, r7
 801a220:	7da0      	ldrb	r0, [r4, #22]
 801a222:	1bdb      	subs	r3, r3, r7
 801a224:	f884 8015 	strb.w	r8, [r4, #21]
 801a228:	f080 0001 	eor.w	r0, r0, #1
 801a22c:	60a2      	str	r2, [r4, #8]
 801a22e:	6123      	str	r3, [r4, #16]
 801a230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a234:	68a3      	ldr	r3, [r4, #8]
 801a236:	789b      	ldrb	r3, [r3, #2]
 801a238:	706b      	strb	r3, [r5, #1]
 801a23a:	1cab      	adds	r3, r5, #2
 801a23c:	68a2      	ldr	r2, [r4, #8]
 801a23e:	7852      	ldrb	r2, [r2, #1]
 801a240:	f803 2b01 	strb.w	r2, [r3], #1
 801a244:	68a2      	ldr	r2, [r4, #8]
 801a246:	7812      	ldrb	r2, [r2, #0]
 801a248:	701a      	strb	r2, [r3, #0]
 801a24a:	e7b4      	b.n	801a1b6 <ucdr_deserialize_int32_t+0x72>
 801a24c:	4631      	mov	r1, r6
 801a24e:	463a      	mov	r2, r7
 801a250:	4628      	mov	r0, r5
 801a252:	f00e f91c 	bl	802848e <memcpy>
 801a256:	464a      	mov	r2, r9
 801a258:	19e8      	adds	r0, r5, r7
 801a25a:	68a1      	ldr	r1, [r4, #8]
 801a25c:	f00e f917 	bl	802848e <memcpy>
 801a260:	e7a9      	b.n	801a1b6 <ucdr_deserialize_int32_t+0x72>
 801a262:	bf00      	nop

0801a264 <ucdr_serialize_double>:
 801a264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a268:	4604      	mov	r4, r0
 801a26a:	b082      	sub	sp, #8
 801a26c:	2108      	movs	r1, #8
 801a26e:	ed8d 0b00 	vstr	d0, [sp]
 801a272:	f000 fb8d 	bl	801a990 <ucdr_buffer_alignment>
 801a276:	4601      	mov	r1, r0
 801a278:	4620      	mov	r0, r4
 801a27a:	7d67      	ldrb	r7, [r4, #21]
 801a27c:	f000 fbd0 	bl	801aa20 <ucdr_advance_buffer>
 801a280:	2108      	movs	r1, #8
 801a282:	4620      	mov	r0, r4
 801a284:	f000 fb24 	bl	801a8d0 <ucdr_check_buffer_available_for>
 801a288:	2800      	cmp	r0, #0
 801a28a:	d14e      	bne.n	801a32a <ucdr_serialize_double+0xc6>
 801a28c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801a290:	42ab      	cmp	r3, r5
 801a292:	d945      	bls.n	801a320 <ucdr_serialize_double+0xbc>
 801a294:	1b5e      	subs	r6, r3, r5
 801a296:	60a3      	str	r3, [r4, #8]
 801a298:	6923      	ldr	r3, [r4, #16]
 801a29a:	4620      	mov	r0, r4
 801a29c:	f1c6 0808 	rsb	r8, r6, #8
 801a2a0:	4433      	add	r3, r6
 801a2a2:	4641      	mov	r1, r8
 801a2a4:	6123      	str	r3, [r4, #16]
 801a2a6:	f000 fb1f 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 801a2aa:	2800      	cmp	r0, #0
 801a2ac:	d074      	beq.n	801a398 <ucdr_serialize_double+0x134>
 801a2ae:	7d23      	ldrb	r3, [r4, #20]
 801a2b0:	2b01      	cmp	r3, #1
 801a2b2:	f000 809b 	beq.w	801a3ec <ucdr_serialize_double+0x188>
 801a2b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801a2ba:	702b      	strb	r3, [r5, #0]
 801a2bc:	2e00      	cmp	r6, #0
 801a2be:	d078      	beq.n	801a3b2 <ucdr_serialize_double+0x14e>
 801a2c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801a2c4:	2e01      	cmp	r6, #1
 801a2c6:	706b      	strb	r3, [r5, #1]
 801a2c8:	d077      	beq.n	801a3ba <ucdr_serialize_double+0x156>
 801a2ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801a2ce:	2e02      	cmp	r6, #2
 801a2d0:	70ab      	strb	r3, [r5, #2]
 801a2d2:	d076      	beq.n	801a3c2 <ucdr_serialize_double+0x15e>
 801a2d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801a2d8:	2e03      	cmp	r6, #3
 801a2da:	70eb      	strb	r3, [r5, #3]
 801a2dc:	d075      	beq.n	801a3ca <ucdr_serialize_double+0x166>
 801a2de:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801a2e2:	2e04      	cmp	r6, #4
 801a2e4:	712b      	strb	r3, [r5, #4]
 801a2e6:	d074      	beq.n	801a3d2 <ucdr_serialize_double+0x16e>
 801a2e8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801a2ec:	2e05      	cmp	r6, #5
 801a2ee:	716b      	strb	r3, [r5, #5]
 801a2f0:	d073      	beq.n	801a3da <ucdr_serialize_double+0x176>
 801a2f2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801a2f6:	2e06      	cmp	r6, #6
 801a2f8:	71ab      	strb	r3, [r5, #6]
 801a2fa:	d072      	beq.n	801a3e2 <ucdr_serialize_double+0x17e>
 801a2fc:	f89d 3000 	ldrb.w	r3, [sp]
 801a300:	71eb      	strb	r3, [r5, #7]
 801a302:	6923      	ldr	r3, [r4, #16]
 801a304:	2108      	movs	r1, #8
 801a306:	68a2      	ldr	r2, [r4, #8]
 801a308:	3308      	adds	r3, #8
 801a30a:	7da0      	ldrb	r0, [r4, #22]
 801a30c:	4442      	add	r2, r8
 801a30e:	7561      	strb	r1, [r4, #21]
 801a310:	1b9e      	subs	r6, r3, r6
 801a312:	f080 0001 	eor.w	r0, r0, #1
 801a316:	60a2      	str	r2, [r4, #8]
 801a318:	6126      	str	r6, [r4, #16]
 801a31a:	b002      	add	sp, #8
 801a31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a320:	2108      	movs	r1, #8
 801a322:	4620      	mov	r0, r4
 801a324:	f000 fae0 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 801a328:	b350      	cbz	r0, 801a380 <ucdr_serialize_double+0x11c>
 801a32a:	7d23      	ldrb	r3, [r4, #20]
 801a32c:	2b01      	cmp	r3, #1
 801a32e:	d02d      	beq.n	801a38c <ucdr_serialize_double+0x128>
 801a330:	68a3      	ldr	r3, [r4, #8]
 801a332:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801a336:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801a33a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801a33e:	7018      	strb	r0, [r3, #0]
 801a340:	68a3      	ldr	r3, [r4, #8]
 801a342:	705a      	strb	r2, [r3, #1]
 801a344:	68a3      	ldr	r3, [r4, #8]
 801a346:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801a34a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 801a34e:	7099      	strb	r1, [r3, #2]
 801a350:	68a3      	ldr	r3, [r4, #8]
 801a352:	70da      	strb	r2, [r3, #3]
 801a354:	68a3      	ldr	r3, [r4, #8]
 801a356:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801a35a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 801a35e:	7118      	strb	r0, [r3, #4]
 801a360:	68a3      	ldr	r3, [r4, #8]
 801a362:	715a      	strb	r2, [r3, #5]
 801a364:	68a3      	ldr	r3, [r4, #8]
 801a366:	f89d 2000 	ldrb.w	r2, [sp]
 801a36a:	7199      	strb	r1, [r3, #6]
 801a36c:	68a3      	ldr	r3, [r4, #8]
 801a36e:	71da      	strb	r2, [r3, #7]
 801a370:	2108      	movs	r1, #8
 801a372:	68a2      	ldr	r2, [r4, #8]
 801a374:	6923      	ldr	r3, [r4, #16]
 801a376:	440a      	add	r2, r1
 801a378:	7561      	strb	r1, [r4, #21]
 801a37a:	440b      	add	r3, r1
 801a37c:	60a2      	str	r2, [r4, #8]
 801a37e:	6123      	str	r3, [r4, #16]
 801a380:	7da0      	ldrb	r0, [r4, #22]
 801a382:	f080 0001 	eor.w	r0, r0, #1
 801a386:	b002      	add	sp, #8
 801a388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a38c:	466b      	mov	r3, sp
 801a38e:	68a2      	ldr	r2, [r4, #8]
 801a390:	cb03      	ldmia	r3!, {r0, r1}
 801a392:	6010      	str	r0, [r2, #0]
 801a394:	6051      	str	r1, [r2, #4]
 801a396:	e7eb      	b.n	801a370 <ucdr_serialize_double+0x10c>
 801a398:	68a2      	ldr	r2, [r4, #8]
 801a39a:	6923      	ldr	r3, [r4, #16]
 801a39c:	7da0      	ldrb	r0, [r4, #22]
 801a39e:	1b92      	subs	r2, r2, r6
 801a3a0:	1b9b      	subs	r3, r3, r6
 801a3a2:	7567      	strb	r7, [r4, #21]
 801a3a4:	f080 0001 	eor.w	r0, r0, #1
 801a3a8:	60a2      	str	r2, [r4, #8]
 801a3aa:	6123      	str	r3, [r4, #16]
 801a3ac:	b002      	add	sp, #8
 801a3ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3b2:	68a3      	ldr	r3, [r4, #8]
 801a3b4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801a3b8:	701a      	strb	r2, [r3, #0]
 801a3ba:	68a3      	ldr	r3, [r4, #8]
 801a3bc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801a3c0:	701a      	strb	r2, [r3, #0]
 801a3c2:	68a3      	ldr	r3, [r4, #8]
 801a3c4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801a3c8:	701a      	strb	r2, [r3, #0]
 801a3ca:	68a3      	ldr	r3, [r4, #8]
 801a3cc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801a3d0:	701a      	strb	r2, [r3, #0]
 801a3d2:	68a3      	ldr	r3, [r4, #8]
 801a3d4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801a3d8:	701a      	strb	r2, [r3, #0]
 801a3da:	68a3      	ldr	r3, [r4, #8]
 801a3dc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801a3e0:	701a      	strb	r2, [r3, #0]
 801a3e2:	68a3      	ldr	r3, [r4, #8]
 801a3e4:	f89d 2000 	ldrb.w	r2, [sp]
 801a3e8:	701a      	strb	r2, [r3, #0]
 801a3ea:	e78a      	b.n	801a302 <ucdr_serialize_double+0x9e>
 801a3ec:	4628      	mov	r0, r5
 801a3ee:	466d      	mov	r5, sp
 801a3f0:	4632      	mov	r2, r6
 801a3f2:	4629      	mov	r1, r5
 801a3f4:	f00e f84b 	bl	802848e <memcpy>
 801a3f8:	4642      	mov	r2, r8
 801a3fa:	19a9      	adds	r1, r5, r6
 801a3fc:	68a0      	ldr	r0, [r4, #8]
 801a3fe:	f00e f846 	bl	802848e <memcpy>
 801a402:	e77e      	b.n	801a302 <ucdr_serialize_double+0x9e>

0801a404 <ucdr_serialize_endian_double>:
 801a404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a408:	4604      	mov	r4, r0
 801a40a:	b083      	sub	sp, #12
 801a40c:	460e      	mov	r6, r1
 801a40e:	2108      	movs	r1, #8
 801a410:	ed8d 0b00 	vstr	d0, [sp]
 801a414:	f000 fabc 	bl	801a990 <ucdr_buffer_alignment>
 801a418:	4601      	mov	r1, r0
 801a41a:	4620      	mov	r0, r4
 801a41c:	f894 8015 	ldrb.w	r8, [r4, #21]
 801a420:	f000 fafe 	bl	801aa20 <ucdr_advance_buffer>
 801a424:	2108      	movs	r1, #8
 801a426:	4620      	mov	r0, r4
 801a428:	f000 fa52 	bl	801a8d0 <ucdr_check_buffer_available_for>
 801a42c:	2800      	cmp	r0, #0
 801a42e:	d14d      	bne.n	801a4cc <ucdr_serialize_endian_double+0xc8>
 801a430:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 801a434:	42bd      	cmp	r5, r7
 801a436:	d944      	bls.n	801a4c2 <ucdr_serialize_endian_double+0xbe>
 801a438:	6923      	ldr	r3, [r4, #16]
 801a43a:	4620      	mov	r0, r4
 801a43c:	60a5      	str	r5, [r4, #8]
 801a43e:	1bed      	subs	r5, r5, r7
 801a440:	442b      	add	r3, r5
 801a442:	f1c5 0908 	rsb	r9, r5, #8
 801a446:	6123      	str	r3, [r4, #16]
 801a448:	4649      	mov	r1, r9
 801a44a:	f000 fa4d 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 801a44e:	2800      	cmp	r0, #0
 801a450:	d072      	beq.n	801a538 <ucdr_serialize_endian_double+0x134>
 801a452:	2e01      	cmp	r6, #1
 801a454:	f000 809b 	beq.w	801a58e <ucdr_serialize_endian_double+0x18a>
 801a458:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801a45c:	703b      	strb	r3, [r7, #0]
 801a45e:	2d00      	cmp	r5, #0
 801a460:	d078      	beq.n	801a554 <ucdr_serialize_endian_double+0x150>
 801a462:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801a466:	2d01      	cmp	r5, #1
 801a468:	707b      	strb	r3, [r7, #1]
 801a46a:	d077      	beq.n	801a55c <ucdr_serialize_endian_double+0x158>
 801a46c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801a470:	2d02      	cmp	r5, #2
 801a472:	70bb      	strb	r3, [r7, #2]
 801a474:	d076      	beq.n	801a564 <ucdr_serialize_endian_double+0x160>
 801a476:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801a47a:	2d03      	cmp	r5, #3
 801a47c:	70fb      	strb	r3, [r7, #3]
 801a47e:	d075      	beq.n	801a56c <ucdr_serialize_endian_double+0x168>
 801a480:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801a484:	2d04      	cmp	r5, #4
 801a486:	713b      	strb	r3, [r7, #4]
 801a488:	d074      	beq.n	801a574 <ucdr_serialize_endian_double+0x170>
 801a48a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801a48e:	2d05      	cmp	r5, #5
 801a490:	717b      	strb	r3, [r7, #5]
 801a492:	d073      	beq.n	801a57c <ucdr_serialize_endian_double+0x178>
 801a494:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801a498:	2d06      	cmp	r5, #6
 801a49a:	71bb      	strb	r3, [r7, #6]
 801a49c:	d072      	beq.n	801a584 <ucdr_serialize_endian_double+0x180>
 801a49e:	f89d 3000 	ldrb.w	r3, [sp]
 801a4a2:	71fb      	strb	r3, [r7, #7]
 801a4a4:	6923      	ldr	r3, [r4, #16]
 801a4a6:	2108      	movs	r1, #8
 801a4a8:	68a2      	ldr	r2, [r4, #8]
 801a4aa:	3308      	adds	r3, #8
 801a4ac:	7da0      	ldrb	r0, [r4, #22]
 801a4ae:	444a      	add	r2, r9
 801a4b0:	7561      	strb	r1, [r4, #21]
 801a4b2:	1b5d      	subs	r5, r3, r5
 801a4b4:	f080 0001 	eor.w	r0, r0, #1
 801a4b8:	60a2      	str	r2, [r4, #8]
 801a4ba:	6125      	str	r5, [r4, #16]
 801a4bc:	b003      	add	sp, #12
 801a4be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a4c2:	2108      	movs	r1, #8
 801a4c4:	4620      	mov	r0, r4
 801a4c6:	f000 fa0f 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 801a4ca:	b348      	cbz	r0, 801a520 <ucdr_serialize_endian_double+0x11c>
 801a4cc:	2e01      	cmp	r6, #1
 801a4ce:	d02d      	beq.n	801a52c <ucdr_serialize_endian_double+0x128>
 801a4d0:	68a3      	ldr	r3, [r4, #8]
 801a4d2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801a4d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801a4da:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801a4de:	7018      	strb	r0, [r3, #0]
 801a4e0:	68a3      	ldr	r3, [r4, #8]
 801a4e2:	705a      	strb	r2, [r3, #1]
 801a4e4:	68a3      	ldr	r3, [r4, #8]
 801a4e6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801a4ea:	f89d 0003 	ldrb.w	r0, [sp, #3]
 801a4ee:	7099      	strb	r1, [r3, #2]
 801a4f0:	68a3      	ldr	r3, [r4, #8]
 801a4f2:	70da      	strb	r2, [r3, #3]
 801a4f4:	68a3      	ldr	r3, [r4, #8]
 801a4f6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801a4fa:	f89d 1001 	ldrb.w	r1, [sp, #1]
 801a4fe:	7118      	strb	r0, [r3, #4]
 801a500:	68a3      	ldr	r3, [r4, #8]
 801a502:	715a      	strb	r2, [r3, #5]
 801a504:	68a3      	ldr	r3, [r4, #8]
 801a506:	f89d 2000 	ldrb.w	r2, [sp]
 801a50a:	7199      	strb	r1, [r3, #6]
 801a50c:	68a3      	ldr	r3, [r4, #8]
 801a50e:	71da      	strb	r2, [r3, #7]
 801a510:	2108      	movs	r1, #8
 801a512:	68a2      	ldr	r2, [r4, #8]
 801a514:	6923      	ldr	r3, [r4, #16]
 801a516:	440a      	add	r2, r1
 801a518:	7561      	strb	r1, [r4, #21]
 801a51a:	440b      	add	r3, r1
 801a51c:	60a2      	str	r2, [r4, #8]
 801a51e:	6123      	str	r3, [r4, #16]
 801a520:	7da0      	ldrb	r0, [r4, #22]
 801a522:	f080 0001 	eor.w	r0, r0, #1
 801a526:	b003      	add	sp, #12
 801a528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a52c:	466b      	mov	r3, sp
 801a52e:	68a2      	ldr	r2, [r4, #8]
 801a530:	cb03      	ldmia	r3!, {r0, r1}
 801a532:	6010      	str	r0, [r2, #0]
 801a534:	6051      	str	r1, [r2, #4]
 801a536:	e7eb      	b.n	801a510 <ucdr_serialize_endian_double+0x10c>
 801a538:	68a2      	ldr	r2, [r4, #8]
 801a53a:	6923      	ldr	r3, [r4, #16]
 801a53c:	7da0      	ldrb	r0, [r4, #22]
 801a53e:	1b52      	subs	r2, r2, r5
 801a540:	1b5b      	subs	r3, r3, r5
 801a542:	f884 8015 	strb.w	r8, [r4, #21]
 801a546:	f080 0001 	eor.w	r0, r0, #1
 801a54a:	60a2      	str	r2, [r4, #8]
 801a54c:	6123      	str	r3, [r4, #16]
 801a54e:	b003      	add	sp, #12
 801a550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a554:	68a3      	ldr	r3, [r4, #8]
 801a556:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801a55a:	701a      	strb	r2, [r3, #0]
 801a55c:	68a3      	ldr	r3, [r4, #8]
 801a55e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801a562:	701a      	strb	r2, [r3, #0]
 801a564:	68a3      	ldr	r3, [r4, #8]
 801a566:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801a56a:	701a      	strb	r2, [r3, #0]
 801a56c:	68a3      	ldr	r3, [r4, #8]
 801a56e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801a572:	701a      	strb	r2, [r3, #0]
 801a574:	68a3      	ldr	r3, [r4, #8]
 801a576:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801a57a:	701a      	strb	r2, [r3, #0]
 801a57c:	68a3      	ldr	r3, [r4, #8]
 801a57e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801a582:	701a      	strb	r2, [r3, #0]
 801a584:	68a3      	ldr	r3, [r4, #8]
 801a586:	f89d 2000 	ldrb.w	r2, [sp]
 801a58a:	701a      	strb	r2, [r3, #0]
 801a58c:	e78a      	b.n	801a4a4 <ucdr_serialize_endian_double+0xa0>
 801a58e:	466e      	mov	r6, sp
 801a590:	462a      	mov	r2, r5
 801a592:	4638      	mov	r0, r7
 801a594:	4631      	mov	r1, r6
 801a596:	f00d ff7a 	bl	802848e <memcpy>
 801a59a:	464a      	mov	r2, r9
 801a59c:	1971      	adds	r1, r6, r5
 801a59e:	68a0      	ldr	r0, [r4, #8]
 801a5a0:	f00d ff75 	bl	802848e <memcpy>
 801a5a4:	e77e      	b.n	801a4a4 <ucdr_serialize_endian_double+0xa0>
 801a5a6:	bf00      	nop

0801a5a8 <ucdr_deserialize_double>:
 801a5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a5ac:	4604      	mov	r4, r0
 801a5ae:	460d      	mov	r5, r1
 801a5b0:	2108      	movs	r1, #8
 801a5b2:	f000 f9ed 	bl	801a990 <ucdr_buffer_alignment>
 801a5b6:	4601      	mov	r1, r0
 801a5b8:	4620      	mov	r0, r4
 801a5ba:	f894 8015 	ldrb.w	r8, [r4, #21]
 801a5be:	f000 fa2f 	bl	801aa20 <ucdr_advance_buffer>
 801a5c2:	2108      	movs	r1, #8
 801a5c4:	4620      	mov	r0, r4
 801a5c6:	f000 f983 	bl	801a8d0 <ucdr_check_buffer_available_for>
 801a5ca:	2800      	cmp	r0, #0
 801a5cc:	d151      	bne.n	801a672 <ucdr_deserialize_double+0xca>
 801a5ce:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801a5d2:	42be      	cmp	r6, r7
 801a5d4:	d948      	bls.n	801a668 <ucdr_deserialize_double+0xc0>
 801a5d6:	6923      	ldr	r3, [r4, #16]
 801a5d8:	4620      	mov	r0, r4
 801a5da:	60a6      	str	r6, [r4, #8]
 801a5dc:	1bf6      	subs	r6, r6, r7
 801a5de:	4433      	add	r3, r6
 801a5e0:	f1c6 0908 	rsb	r9, r6, #8
 801a5e4:	6123      	str	r3, [r4, #16]
 801a5e6:	4649      	mov	r1, r9
 801a5e8:	f000 f97e 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 801a5ec:	2800      	cmp	r0, #0
 801a5ee:	d06d      	beq.n	801a6cc <ucdr_deserialize_double+0x124>
 801a5f0:	7d23      	ldrb	r3, [r4, #20]
 801a5f2:	2b01      	cmp	r3, #1
 801a5f4:	f000 8093 	beq.w	801a71e <ucdr_deserialize_double+0x176>
 801a5f8:	79fb      	ldrb	r3, [r7, #7]
 801a5fa:	702b      	strb	r3, [r5, #0]
 801a5fc:	2e00      	cmp	r6, #0
 801a5fe:	d072      	beq.n	801a6e6 <ucdr_deserialize_double+0x13e>
 801a600:	79bb      	ldrb	r3, [r7, #6]
 801a602:	2e01      	cmp	r6, #1
 801a604:	706b      	strb	r3, [r5, #1]
 801a606:	f105 0302 	add.w	r3, r5, #2
 801a60a:	d070      	beq.n	801a6ee <ucdr_deserialize_double+0x146>
 801a60c:	797b      	ldrb	r3, [r7, #5]
 801a60e:	2e02      	cmp	r6, #2
 801a610:	70ab      	strb	r3, [r5, #2]
 801a612:	f105 0303 	add.w	r3, r5, #3
 801a616:	d06e      	beq.n	801a6f6 <ucdr_deserialize_double+0x14e>
 801a618:	793b      	ldrb	r3, [r7, #4]
 801a61a:	2e03      	cmp	r6, #3
 801a61c:	70eb      	strb	r3, [r5, #3]
 801a61e:	f105 0304 	add.w	r3, r5, #4
 801a622:	d06c      	beq.n	801a6fe <ucdr_deserialize_double+0x156>
 801a624:	78fb      	ldrb	r3, [r7, #3]
 801a626:	2e04      	cmp	r6, #4
 801a628:	712b      	strb	r3, [r5, #4]
 801a62a:	f105 0305 	add.w	r3, r5, #5
 801a62e:	d06a      	beq.n	801a706 <ucdr_deserialize_double+0x15e>
 801a630:	78bb      	ldrb	r3, [r7, #2]
 801a632:	2e05      	cmp	r6, #5
 801a634:	716b      	strb	r3, [r5, #5]
 801a636:	f105 0306 	add.w	r3, r5, #6
 801a63a:	d068      	beq.n	801a70e <ucdr_deserialize_double+0x166>
 801a63c:	787b      	ldrb	r3, [r7, #1]
 801a63e:	2e06      	cmp	r6, #6
 801a640:	71ab      	strb	r3, [r5, #6]
 801a642:	f105 0307 	add.w	r3, r5, #7
 801a646:	d066      	beq.n	801a716 <ucdr_deserialize_double+0x16e>
 801a648:	783b      	ldrb	r3, [r7, #0]
 801a64a:	71eb      	strb	r3, [r5, #7]
 801a64c:	6923      	ldr	r3, [r4, #16]
 801a64e:	2108      	movs	r1, #8
 801a650:	68a2      	ldr	r2, [r4, #8]
 801a652:	3308      	adds	r3, #8
 801a654:	7da0      	ldrb	r0, [r4, #22]
 801a656:	444a      	add	r2, r9
 801a658:	7561      	strb	r1, [r4, #21]
 801a65a:	1b9e      	subs	r6, r3, r6
 801a65c:	f080 0001 	eor.w	r0, r0, #1
 801a660:	60a2      	str	r2, [r4, #8]
 801a662:	6126      	str	r6, [r4, #16]
 801a664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a668:	2108      	movs	r1, #8
 801a66a:	4620      	mov	r0, r4
 801a66c:	f000 f93c 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 801a670:	b310      	cbz	r0, 801a6b8 <ucdr_deserialize_double+0x110>
 801a672:	7d23      	ldrb	r3, [r4, #20]
 801a674:	2b01      	cmp	r3, #1
 801a676:	68a3      	ldr	r3, [r4, #8]
 801a678:	d023      	beq.n	801a6c2 <ucdr_deserialize_double+0x11a>
 801a67a:	79db      	ldrb	r3, [r3, #7]
 801a67c:	702b      	strb	r3, [r5, #0]
 801a67e:	68a3      	ldr	r3, [r4, #8]
 801a680:	799b      	ldrb	r3, [r3, #6]
 801a682:	706b      	strb	r3, [r5, #1]
 801a684:	68a3      	ldr	r3, [r4, #8]
 801a686:	795b      	ldrb	r3, [r3, #5]
 801a688:	70ab      	strb	r3, [r5, #2]
 801a68a:	68a3      	ldr	r3, [r4, #8]
 801a68c:	791b      	ldrb	r3, [r3, #4]
 801a68e:	70eb      	strb	r3, [r5, #3]
 801a690:	68a3      	ldr	r3, [r4, #8]
 801a692:	78db      	ldrb	r3, [r3, #3]
 801a694:	712b      	strb	r3, [r5, #4]
 801a696:	68a3      	ldr	r3, [r4, #8]
 801a698:	789b      	ldrb	r3, [r3, #2]
 801a69a:	716b      	strb	r3, [r5, #5]
 801a69c:	68a3      	ldr	r3, [r4, #8]
 801a69e:	785b      	ldrb	r3, [r3, #1]
 801a6a0:	71ab      	strb	r3, [r5, #6]
 801a6a2:	68a3      	ldr	r3, [r4, #8]
 801a6a4:	781b      	ldrb	r3, [r3, #0]
 801a6a6:	71eb      	strb	r3, [r5, #7]
 801a6a8:	2108      	movs	r1, #8
 801a6aa:	68a2      	ldr	r2, [r4, #8]
 801a6ac:	6923      	ldr	r3, [r4, #16]
 801a6ae:	440a      	add	r2, r1
 801a6b0:	7561      	strb	r1, [r4, #21]
 801a6b2:	440b      	add	r3, r1
 801a6b4:	60a2      	str	r2, [r4, #8]
 801a6b6:	6123      	str	r3, [r4, #16]
 801a6b8:	7da0      	ldrb	r0, [r4, #22]
 801a6ba:	f080 0001 	eor.w	r0, r0, #1
 801a6be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a6c2:	681a      	ldr	r2, [r3, #0]
 801a6c4:	685b      	ldr	r3, [r3, #4]
 801a6c6:	602a      	str	r2, [r5, #0]
 801a6c8:	606b      	str	r3, [r5, #4]
 801a6ca:	e7ed      	b.n	801a6a8 <ucdr_deserialize_double+0x100>
 801a6cc:	68a2      	ldr	r2, [r4, #8]
 801a6ce:	6923      	ldr	r3, [r4, #16]
 801a6d0:	1b92      	subs	r2, r2, r6
 801a6d2:	7da0      	ldrb	r0, [r4, #22]
 801a6d4:	1b9b      	subs	r3, r3, r6
 801a6d6:	f884 8015 	strb.w	r8, [r4, #21]
 801a6da:	f080 0001 	eor.w	r0, r0, #1
 801a6de:	60a2      	str	r2, [r4, #8]
 801a6e0:	6123      	str	r3, [r4, #16]
 801a6e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a6e6:	68a3      	ldr	r3, [r4, #8]
 801a6e8:	799b      	ldrb	r3, [r3, #6]
 801a6ea:	706b      	strb	r3, [r5, #1]
 801a6ec:	1cab      	adds	r3, r5, #2
 801a6ee:	68a2      	ldr	r2, [r4, #8]
 801a6f0:	7952      	ldrb	r2, [r2, #5]
 801a6f2:	f803 2b01 	strb.w	r2, [r3], #1
 801a6f6:	68a2      	ldr	r2, [r4, #8]
 801a6f8:	7912      	ldrb	r2, [r2, #4]
 801a6fa:	f803 2b01 	strb.w	r2, [r3], #1
 801a6fe:	68a2      	ldr	r2, [r4, #8]
 801a700:	78d2      	ldrb	r2, [r2, #3]
 801a702:	f803 2b01 	strb.w	r2, [r3], #1
 801a706:	68a2      	ldr	r2, [r4, #8]
 801a708:	7892      	ldrb	r2, [r2, #2]
 801a70a:	f803 2b01 	strb.w	r2, [r3], #1
 801a70e:	68a2      	ldr	r2, [r4, #8]
 801a710:	7852      	ldrb	r2, [r2, #1]
 801a712:	f803 2b01 	strb.w	r2, [r3], #1
 801a716:	68a2      	ldr	r2, [r4, #8]
 801a718:	7812      	ldrb	r2, [r2, #0]
 801a71a:	701a      	strb	r2, [r3, #0]
 801a71c:	e796      	b.n	801a64c <ucdr_deserialize_double+0xa4>
 801a71e:	4639      	mov	r1, r7
 801a720:	4632      	mov	r2, r6
 801a722:	4628      	mov	r0, r5
 801a724:	f00d feb3 	bl	802848e <memcpy>
 801a728:	464a      	mov	r2, r9
 801a72a:	19a8      	adds	r0, r5, r6
 801a72c:	68a1      	ldr	r1, [r4, #8]
 801a72e:	f00d feae 	bl	802848e <memcpy>
 801a732:	e78b      	b.n	801a64c <ucdr_deserialize_double+0xa4>

0801a734 <ucdr_deserialize_endian_double>:
 801a734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a738:	4604      	mov	r4, r0
 801a73a:	460f      	mov	r7, r1
 801a73c:	2108      	movs	r1, #8
 801a73e:	4615      	mov	r5, r2
 801a740:	f000 f926 	bl	801a990 <ucdr_buffer_alignment>
 801a744:	4601      	mov	r1, r0
 801a746:	4620      	mov	r0, r4
 801a748:	f894 8015 	ldrb.w	r8, [r4, #21]
 801a74c:	f000 f968 	bl	801aa20 <ucdr_advance_buffer>
 801a750:	2108      	movs	r1, #8
 801a752:	4620      	mov	r0, r4
 801a754:	f000 f8bc 	bl	801a8d0 <ucdr_check_buffer_available_for>
 801a758:	2800      	cmp	r0, #0
 801a75a:	d159      	bne.n	801a810 <ucdr_deserialize_endian_double+0xdc>
 801a75c:	e9d4 6901 	ldrd	r6, r9, [r4, #4]
 801a760:	454e      	cmp	r6, r9
 801a762:	d950      	bls.n	801a806 <ucdr_deserialize_endian_double+0xd2>
 801a764:	6923      	ldr	r3, [r4, #16]
 801a766:	4620      	mov	r0, r4
 801a768:	60a6      	str	r6, [r4, #8]
 801a76a:	eba6 0609 	sub.w	r6, r6, r9
 801a76e:	4433      	add	r3, r6
 801a770:	f1c6 0a08 	rsb	sl, r6, #8
 801a774:	6123      	str	r3, [r4, #16]
 801a776:	4651      	mov	r1, sl
 801a778:	f000 f8b6 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 801a77c:	2800      	cmp	r0, #0
 801a77e:	d073      	beq.n	801a868 <ucdr_deserialize_endian_double+0x134>
 801a780:	2f01      	cmp	r7, #1
 801a782:	f000 809a 	beq.w	801a8ba <ucdr_deserialize_endian_double+0x186>
 801a786:	f899 3007 	ldrb.w	r3, [r9, #7]
 801a78a:	702b      	strb	r3, [r5, #0]
 801a78c:	2e00      	cmp	r6, #0
 801a78e:	d078      	beq.n	801a882 <ucdr_deserialize_endian_double+0x14e>
 801a790:	f899 3006 	ldrb.w	r3, [r9, #6]
 801a794:	2e01      	cmp	r6, #1
 801a796:	706b      	strb	r3, [r5, #1]
 801a798:	f105 0302 	add.w	r3, r5, #2
 801a79c:	d075      	beq.n	801a88a <ucdr_deserialize_endian_double+0x156>
 801a79e:	f899 3005 	ldrb.w	r3, [r9, #5]
 801a7a2:	2e02      	cmp	r6, #2
 801a7a4:	70ab      	strb	r3, [r5, #2]
 801a7a6:	f105 0303 	add.w	r3, r5, #3
 801a7aa:	d072      	beq.n	801a892 <ucdr_deserialize_endian_double+0x15e>
 801a7ac:	f899 3004 	ldrb.w	r3, [r9, #4]
 801a7b0:	2e03      	cmp	r6, #3
 801a7b2:	70eb      	strb	r3, [r5, #3]
 801a7b4:	f105 0304 	add.w	r3, r5, #4
 801a7b8:	d06f      	beq.n	801a89a <ucdr_deserialize_endian_double+0x166>
 801a7ba:	f899 3003 	ldrb.w	r3, [r9, #3]
 801a7be:	2e04      	cmp	r6, #4
 801a7c0:	712b      	strb	r3, [r5, #4]
 801a7c2:	f105 0305 	add.w	r3, r5, #5
 801a7c6:	d06c      	beq.n	801a8a2 <ucdr_deserialize_endian_double+0x16e>
 801a7c8:	f899 3002 	ldrb.w	r3, [r9, #2]
 801a7cc:	2e05      	cmp	r6, #5
 801a7ce:	716b      	strb	r3, [r5, #5]
 801a7d0:	f105 0306 	add.w	r3, r5, #6
 801a7d4:	d069      	beq.n	801a8aa <ucdr_deserialize_endian_double+0x176>
 801a7d6:	f899 3001 	ldrb.w	r3, [r9, #1]
 801a7da:	2e06      	cmp	r6, #6
 801a7dc:	71ab      	strb	r3, [r5, #6]
 801a7de:	f105 0307 	add.w	r3, r5, #7
 801a7e2:	d066      	beq.n	801a8b2 <ucdr_deserialize_endian_double+0x17e>
 801a7e4:	f899 3000 	ldrb.w	r3, [r9]
 801a7e8:	71eb      	strb	r3, [r5, #7]
 801a7ea:	6923      	ldr	r3, [r4, #16]
 801a7ec:	2108      	movs	r1, #8
 801a7ee:	68a2      	ldr	r2, [r4, #8]
 801a7f0:	3308      	adds	r3, #8
 801a7f2:	7da0      	ldrb	r0, [r4, #22]
 801a7f4:	4452      	add	r2, sl
 801a7f6:	7561      	strb	r1, [r4, #21]
 801a7f8:	1b9e      	subs	r6, r3, r6
 801a7fa:	f080 0001 	eor.w	r0, r0, #1
 801a7fe:	60a2      	str	r2, [r4, #8]
 801a800:	6126      	str	r6, [r4, #16]
 801a802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a806:	2108      	movs	r1, #8
 801a808:	4620      	mov	r0, r4
 801a80a:	f000 f86d 	bl	801a8e8 <ucdr_check_final_buffer_behavior>
 801a80e:	b308      	cbz	r0, 801a854 <ucdr_deserialize_endian_double+0x120>
 801a810:	2f01      	cmp	r7, #1
 801a812:	68a3      	ldr	r3, [r4, #8]
 801a814:	d023      	beq.n	801a85e <ucdr_deserialize_endian_double+0x12a>
 801a816:	79db      	ldrb	r3, [r3, #7]
 801a818:	702b      	strb	r3, [r5, #0]
 801a81a:	68a3      	ldr	r3, [r4, #8]
 801a81c:	799b      	ldrb	r3, [r3, #6]
 801a81e:	706b      	strb	r3, [r5, #1]
 801a820:	68a3      	ldr	r3, [r4, #8]
 801a822:	795b      	ldrb	r3, [r3, #5]
 801a824:	70ab      	strb	r3, [r5, #2]
 801a826:	68a3      	ldr	r3, [r4, #8]
 801a828:	791b      	ldrb	r3, [r3, #4]
 801a82a:	70eb      	strb	r3, [r5, #3]
 801a82c:	68a3      	ldr	r3, [r4, #8]
 801a82e:	78db      	ldrb	r3, [r3, #3]
 801a830:	712b      	strb	r3, [r5, #4]
 801a832:	68a3      	ldr	r3, [r4, #8]
 801a834:	789b      	ldrb	r3, [r3, #2]
 801a836:	716b      	strb	r3, [r5, #5]
 801a838:	68a3      	ldr	r3, [r4, #8]
 801a83a:	785b      	ldrb	r3, [r3, #1]
 801a83c:	71ab      	strb	r3, [r5, #6]
 801a83e:	68a3      	ldr	r3, [r4, #8]
 801a840:	781b      	ldrb	r3, [r3, #0]
 801a842:	71eb      	strb	r3, [r5, #7]
 801a844:	2108      	movs	r1, #8
 801a846:	68a2      	ldr	r2, [r4, #8]
 801a848:	6923      	ldr	r3, [r4, #16]
 801a84a:	440a      	add	r2, r1
 801a84c:	7561      	strb	r1, [r4, #21]
 801a84e:	440b      	add	r3, r1
 801a850:	60a2      	str	r2, [r4, #8]
 801a852:	6123      	str	r3, [r4, #16]
 801a854:	7da0      	ldrb	r0, [r4, #22]
 801a856:	f080 0001 	eor.w	r0, r0, #1
 801a85a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a85e:	681a      	ldr	r2, [r3, #0]
 801a860:	685b      	ldr	r3, [r3, #4]
 801a862:	602a      	str	r2, [r5, #0]
 801a864:	606b      	str	r3, [r5, #4]
 801a866:	e7ed      	b.n	801a844 <ucdr_deserialize_endian_double+0x110>
 801a868:	68a2      	ldr	r2, [r4, #8]
 801a86a:	6923      	ldr	r3, [r4, #16]
 801a86c:	1b92      	subs	r2, r2, r6
 801a86e:	7da0      	ldrb	r0, [r4, #22]
 801a870:	1b9b      	subs	r3, r3, r6
 801a872:	f884 8015 	strb.w	r8, [r4, #21]
 801a876:	f080 0001 	eor.w	r0, r0, #1
 801a87a:	60a2      	str	r2, [r4, #8]
 801a87c:	6123      	str	r3, [r4, #16]
 801a87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a882:	68a3      	ldr	r3, [r4, #8]
 801a884:	799b      	ldrb	r3, [r3, #6]
 801a886:	706b      	strb	r3, [r5, #1]
 801a888:	1cab      	adds	r3, r5, #2
 801a88a:	68a2      	ldr	r2, [r4, #8]
 801a88c:	7952      	ldrb	r2, [r2, #5]
 801a88e:	f803 2b01 	strb.w	r2, [r3], #1
 801a892:	68a2      	ldr	r2, [r4, #8]
 801a894:	7912      	ldrb	r2, [r2, #4]
 801a896:	f803 2b01 	strb.w	r2, [r3], #1
 801a89a:	68a2      	ldr	r2, [r4, #8]
 801a89c:	78d2      	ldrb	r2, [r2, #3]
 801a89e:	f803 2b01 	strb.w	r2, [r3], #1
 801a8a2:	68a2      	ldr	r2, [r4, #8]
 801a8a4:	7892      	ldrb	r2, [r2, #2]
 801a8a6:	f803 2b01 	strb.w	r2, [r3], #1
 801a8aa:	68a2      	ldr	r2, [r4, #8]
 801a8ac:	7852      	ldrb	r2, [r2, #1]
 801a8ae:	f803 2b01 	strb.w	r2, [r3], #1
 801a8b2:	68a2      	ldr	r2, [r4, #8]
 801a8b4:	7812      	ldrb	r2, [r2, #0]
 801a8b6:	701a      	strb	r2, [r3, #0]
 801a8b8:	e797      	b.n	801a7ea <ucdr_deserialize_endian_double+0xb6>
 801a8ba:	4649      	mov	r1, r9
 801a8bc:	4632      	mov	r2, r6
 801a8be:	4628      	mov	r0, r5
 801a8c0:	f00d fde5 	bl	802848e <memcpy>
 801a8c4:	4652      	mov	r2, sl
 801a8c6:	19a8      	adds	r0, r5, r6
 801a8c8:	68a1      	ldr	r1, [r4, #8]
 801a8ca:	f00d fde0 	bl	802848e <memcpy>
 801a8ce:	e78c      	b.n	801a7ea <ucdr_deserialize_endian_double+0xb6>

0801a8d0 <ucdr_check_buffer_available_for>:
 801a8d0:	7d83      	ldrb	r3, [r0, #22]
 801a8d2:	b93b      	cbnz	r3, 801a8e4 <ucdr_check_buffer_available_for+0x14>
 801a8d4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 801a8d8:	4419      	add	r1, r3
 801a8da:	4288      	cmp	r0, r1
 801a8dc:	bf34      	ite	cc
 801a8de:	2000      	movcc	r0, #0
 801a8e0:	2001      	movcs	r0, #1
 801a8e2:	4770      	bx	lr
 801a8e4:	2000      	movs	r0, #0
 801a8e6:	4770      	bx	lr

0801a8e8 <ucdr_check_final_buffer_behavior>:
 801a8e8:	7d83      	ldrb	r3, [r0, #22]
 801a8ea:	b943      	cbnz	r3, 801a8fe <ucdr_check_final_buffer_behavior+0x16>
 801a8ec:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 801a8f0:	b510      	push	{r4, lr}
 801a8f2:	4291      	cmp	r1, r2
 801a8f4:	4604      	mov	r4, r0
 801a8f6:	d205      	bcs.n	801a904 <ucdr_check_final_buffer_behavior+0x1c>
 801a8f8:	2301      	movs	r3, #1
 801a8fa:	4618      	mov	r0, r3
 801a8fc:	bd10      	pop	{r4, pc}
 801a8fe:	2300      	movs	r3, #0
 801a900:	4618      	mov	r0, r3
 801a902:	4770      	bx	lr
 801a904:	6982      	ldr	r2, [r0, #24]
 801a906:	b13a      	cbz	r2, 801a918 <ucdr_check_final_buffer_behavior+0x30>
 801a908:	69c1      	ldr	r1, [r0, #28]
 801a90a:	4790      	blx	r2
 801a90c:	f080 0301 	eor.w	r3, r0, #1
 801a910:	75a0      	strb	r0, [r4, #22]
 801a912:	b2db      	uxtb	r3, r3
 801a914:	4618      	mov	r0, r3
 801a916:	bd10      	pop	{r4, pc}
 801a918:	2001      	movs	r0, #1
 801a91a:	75a0      	strb	r0, [r4, #22]
 801a91c:	e7fa      	b.n	801a914 <ucdr_check_final_buffer_behavior+0x2c>
 801a91e:	bf00      	nop

0801a920 <ucdr_set_on_full_buffer_callback>:
 801a920:	e9c0 1206 	strd	r1, r2, [r0, #24]
 801a924:	4770      	bx	lr
 801a926:	bf00      	nop

0801a928 <ucdr_init_buffer_origin_offset_endian>:
 801a928:	b410      	push	{r4}
 801a92a:	9c01      	ldr	r4, [sp, #4]
 801a92c:	440a      	add	r2, r1
 801a92e:	6001      	str	r1, [r0, #0]
 801a930:	6042      	str	r2, [r0, #4]
 801a932:	190a      	adds	r2, r1, r4
 801a934:	441c      	add	r4, r3
 801a936:	6082      	str	r2, [r0, #8]
 801a938:	2200      	movs	r2, #0
 801a93a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 801a93e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801a942:	7542      	strb	r2, [r0, #21]
 801a944:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a948:	7582      	strb	r2, [r0, #22]
 801a94a:	7503      	strb	r3, [r0, #20]
 801a94c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801a950:	4770      	bx	lr
 801a952:	bf00      	nop

0801a954 <ucdr_init_buffer_origin_offset>:
 801a954:	b510      	push	{r4, lr}
 801a956:	b082      	sub	sp, #8
 801a958:	9c04      	ldr	r4, [sp, #16]
 801a95a:	9400      	str	r4, [sp, #0]
 801a95c:	2401      	movs	r4, #1
 801a95e:	9401      	str	r4, [sp, #4]
 801a960:	f7ff ffe2 	bl	801a928 <ucdr_init_buffer_origin_offset_endian>
 801a964:	b002      	add	sp, #8
 801a966:	bd10      	pop	{r4, pc}

0801a968 <ucdr_init_buffer_origin>:
 801a968:	b510      	push	{r4, lr}
 801a96a:	2400      	movs	r4, #0
 801a96c:	b082      	sub	sp, #8
 801a96e:	9400      	str	r4, [sp, #0]
 801a970:	f7ff fff0 	bl	801a954 <ucdr_init_buffer_origin_offset>
 801a974:	b002      	add	sp, #8
 801a976:	bd10      	pop	{r4, pc}

0801a978 <ucdr_init_buffer>:
 801a978:	2300      	movs	r3, #0
 801a97a:	f7ff bff5 	b.w	801a968 <ucdr_init_buffer_origin>
 801a97e:	bf00      	nop

0801a980 <ucdr_alignment>:
 801a980:	fbb0 f2f1 	udiv	r2, r0, r1
 801a984:	fb02 0011 	mls	r0, r2, r1, r0
 801a988:	1e4b      	subs	r3, r1, #1
 801a98a:	1a08      	subs	r0, r1, r0
 801a98c:	4018      	ands	r0, r3
 801a98e:	4770      	bx	lr

0801a990 <ucdr_buffer_alignment>:
 801a990:	7d43      	ldrb	r3, [r0, #21]
 801a992:	428b      	cmp	r3, r1
 801a994:	d209      	bcs.n	801a9aa <ucdr_buffer_alignment+0x1a>
 801a996:	6903      	ldr	r3, [r0, #16]
 801a998:	1e4a      	subs	r2, r1, #1
 801a99a:	fbb3 f0f1 	udiv	r0, r3, r1
 801a99e:	fb01 3010 	mls	r0, r1, r0, r3
 801a9a2:	1a09      	subs	r1, r1, r0
 801a9a4:	ea01 0002 	and.w	r0, r1, r2
 801a9a8:	4770      	bx	lr
 801a9aa:	2000      	movs	r0, #0
 801a9ac:	4770      	bx	lr
 801a9ae:	bf00      	nop

0801a9b0 <ucdr_align_to>:
 801a9b0:	b538      	push	{r3, r4, r5, lr}
 801a9b2:	4604      	mov	r4, r0
 801a9b4:	460d      	mov	r5, r1
 801a9b6:	f7ff ffeb 	bl	801a990 <ucdr_buffer_alignment>
 801a9ba:	68a3      	ldr	r3, [r4, #8]
 801a9bc:	7565      	strb	r5, [r4, #21]
 801a9be:	181a      	adds	r2, r3, r0
 801a9c0:	6923      	ldr	r3, [r4, #16]
 801a9c2:	4418      	add	r0, r3
 801a9c4:	6863      	ldr	r3, [r4, #4]
 801a9c6:	4293      	cmp	r3, r2
 801a9c8:	6120      	str	r0, [r4, #16]
 801a9ca:	bf28      	it	cs
 801a9cc:	4613      	movcs	r3, r2
 801a9ce:	60a3      	str	r3, [r4, #8]
 801a9d0:	bd38      	pop	{r3, r4, r5, pc}
 801a9d2:	bf00      	nop

0801a9d4 <ucdr_buffer_length>:
 801a9d4:	6882      	ldr	r2, [r0, #8]
 801a9d6:	6800      	ldr	r0, [r0, #0]
 801a9d8:	1a10      	subs	r0, r2, r0
 801a9da:	4770      	bx	lr

0801a9dc <ucdr_buffer_remaining>:
 801a9dc:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 801a9e0:	1a10      	subs	r0, r2, r0
 801a9e2:	4770      	bx	lr

0801a9e4 <ucdr_check_final_buffer_behavior_array>:
 801a9e4:	b538      	push	{r3, r4, r5, lr}
 801a9e6:	7d83      	ldrb	r3, [r0, #22]
 801a9e8:	b9a3      	cbnz	r3, 801aa14 <ucdr_check_final_buffer_behavior_array+0x30>
 801a9ea:	4604      	mov	r4, r0
 801a9ec:	460d      	mov	r5, r1
 801a9ee:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801a9f2:	429a      	cmp	r2, r3
 801a9f4:	d300      	bcc.n	801a9f8 <ucdr_check_final_buffer_behavior_array+0x14>
 801a9f6:	b931      	cbnz	r1, 801aa06 <ucdr_check_final_buffer_behavior_array+0x22>
 801a9f8:	4620      	mov	r0, r4
 801a9fa:	f7ff ffef 	bl	801a9dc <ucdr_buffer_remaining>
 801a9fe:	42a8      	cmp	r0, r5
 801aa00:	bf28      	it	cs
 801aa02:	4628      	movcs	r0, r5
 801aa04:	bd38      	pop	{r3, r4, r5, pc}
 801aa06:	6983      	ldr	r3, [r0, #24]
 801aa08:	b133      	cbz	r3, 801aa18 <ucdr_check_final_buffer_behavior_array+0x34>
 801aa0a:	69c1      	ldr	r1, [r0, #28]
 801aa0c:	4798      	blx	r3
 801aa0e:	75a0      	strb	r0, [r4, #22]
 801aa10:	2800      	cmp	r0, #0
 801aa12:	d0f1      	beq.n	801a9f8 <ucdr_check_final_buffer_behavior_array+0x14>
 801aa14:	2000      	movs	r0, #0
 801aa16:	bd38      	pop	{r3, r4, r5, pc}
 801aa18:	2301      	movs	r3, #1
 801aa1a:	7583      	strb	r3, [r0, #22]
 801aa1c:	e7fa      	b.n	801aa14 <ucdr_check_final_buffer_behavior_array+0x30>
 801aa1e:	bf00      	nop

0801aa20 <ucdr_advance_buffer>:
 801aa20:	b538      	push	{r3, r4, r5, lr}
 801aa22:	4604      	mov	r4, r0
 801aa24:	460d      	mov	r5, r1
 801aa26:	f7ff ff53 	bl	801a8d0 <ucdr_check_buffer_available_for>
 801aa2a:	b178      	cbz	r0, 801aa4c <ucdr_advance_buffer+0x2c>
 801aa2c:	6923      	ldr	r3, [r4, #16]
 801aa2e:	68a2      	ldr	r2, [r4, #8]
 801aa30:	442b      	add	r3, r5
 801aa32:	442a      	add	r2, r5
 801aa34:	6123      	str	r3, [r4, #16]
 801aa36:	2301      	movs	r3, #1
 801aa38:	60a2      	str	r2, [r4, #8]
 801aa3a:	7563      	strb	r3, [r4, #21]
 801aa3c:	bd38      	pop	{r3, r4, r5, pc}
 801aa3e:	68a2      	ldr	r2, [r4, #8]
 801aa40:	1a2d      	subs	r5, r5, r0
 801aa42:	6923      	ldr	r3, [r4, #16]
 801aa44:	4402      	add	r2, r0
 801aa46:	4418      	add	r0, r3
 801aa48:	60a2      	str	r2, [r4, #8]
 801aa4a:	6120      	str	r0, [r4, #16]
 801aa4c:	4629      	mov	r1, r5
 801aa4e:	2201      	movs	r2, #1
 801aa50:	4620      	mov	r0, r4
 801aa52:	f7ff ffc7 	bl	801a9e4 <ucdr_check_final_buffer_behavior_array>
 801aa56:	2800      	cmp	r0, #0
 801aa58:	d1f1      	bne.n	801aa3e <ucdr_advance_buffer+0x1e>
 801aa5a:	2301      	movs	r3, #1
 801aa5c:	7563      	strb	r3, [r4, #21]
 801aa5e:	bd38      	pop	{r3, r4, r5, pc}

0801aa60 <ucdr_serialize_sequence_char>:
 801aa60:	b570      	push	{r4, r5, r6, lr}
 801aa62:	4615      	mov	r5, r2
 801aa64:	460e      	mov	r6, r1
 801aa66:	7d01      	ldrb	r1, [r0, #20]
 801aa68:	4604      	mov	r4, r0
 801aa6a:	f7fe ff51 	bl	8019910 <ucdr_serialize_endian_uint32_t>
 801aa6e:	b90d      	cbnz	r5, 801aa74 <ucdr_serialize_sequence_char+0x14>
 801aa70:	2001      	movs	r0, #1
 801aa72:	bd70      	pop	{r4, r5, r6, pc}
 801aa74:	462b      	mov	r3, r5
 801aa76:	4632      	mov	r2, r6
 801aa78:	7d21      	ldrb	r1, [r4, #20]
 801aa7a:	4620      	mov	r0, r4
 801aa7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aa80:	f003 b814 	b.w	801daac <ucdr_serialize_endian_array_char>

0801aa84 <ucdr_deserialize_sequence_char>:
 801aa84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa88:	461d      	mov	r5, r3
 801aa8a:	4616      	mov	r6, r2
 801aa8c:	460f      	mov	r7, r1
 801aa8e:	461a      	mov	r2, r3
 801aa90:	7d01      	ldrb	r1, [r0, #20]
 801aa92:	4604      	mov	r4, r0
 801aa94:	f7ff f864 	bl	8019b60 <ucdr_deserialize_endian_uint32_t>
 801aa98:	682b      	ldr	r3, [r5, #0]
 801aa9a:	429e      	cmp	r6, r3
 801aa9c:	d201      	bcs.n	801aaa2 <ucdr_deserialize_sequence_char+0x1e>
 801aa9e:	2201      	movs	r2, #1
 801aaa0:	75a2      	strb	r2, [r4, #22]
 801aaa2:	b913      	cbnz	r3, 801aaaa <ucdr_deserialize_sequence_char+0x26>
 801aaa4:	2001      	movs	r0, #1
 801aaa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aaaa:	463a      	mov	r2, r7
 801aaac:	7d21      	ldrb	r1, [r4, #20]
 801aaae:	4620      	mov	r0, r4
 801aab0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aab4:	f003 b82c 	b.w	801db10 <ucdr_deserialize_endian_array_char>

0801aab8 <ucdr_serialize_sequence_uint8_t>:
 801aab8:	b570      	push	{r4, r5, r6, lr}
 801aaba:	4615      	mov	r5, r2
 801aabc:	460e      	mov	r6, r1
 801aabe:	7d01      	ldrb	r1, [r0, #20]
 801aac0:	4604      	mov	r4, r0
 801aac2:	f7fe ff25 	bl	8019910 <ucdr_serialize_endian_uint32_t>
 801aac6:	b90d      	cbnz	r5, 801aacc <ucdr_serialize_sequence_uint8_t+0x14>
 801aac8:	2001      	movs	r0, #1
 801aaca:	bd70      	pop	{r4, r5, r6, pc}
 801aacc:	462b      	mov	r3, r5
 801aace:	4632      	mov	r2, r6
 801aad0:	7d21      	ldrb	r1, [r4, #20]
 801aad2:	4620      	mov	r0, r4
 801aad4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aad8:	f003 b880 	b.w	801dbdc <ucdr_serialize_endian_array_uint8_t>

0801aadc <ucdr_deserialize_sequence_uint8_t>:
 801aadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aae0:	461d      	mov	r5, r3
 801aae2:	4616      	mov	r6, r2
 801aae4:	460f      	mov	r7, r1
 801aae6:	461a      	mov	r2, r3
 801aae8:	7d01      	ldrb	r1, [r0, #20]
 801aaea:	4604      	mov	r4, r0
 801aaec:	f7ff f838 	bl	8019b60 <ucdr_deserialize_endian_uint32_t>
 801aaf0:	682b      	ldr	r3, [r5, #0]
 801aaf2:	429e      	cmp	r6, r3
 801aaf4:	d201      	bcs.n	801aafa <ucdr_deserialize_sequence_uint8_t+0x1e>
 801aaf6:	2201      	movs	r2, #1
 801aaf8:	75a2      	strb	r2, [r4, #22]
 801aafa:	b913      	cbnz	r3, 801ab02 <ucdr_deserialize_sequence_uint8_t+0x26>
 801aafc:	2001      	movs	r0, #1
 801aafe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ab02:	463a      	mov	r2, r7
 801ab04:	7d21      	ldrb	r1, [r4, #20]
 801ab06:	4620      	mov	r0, r4
 801ab08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ab0c:	f003 b8cc 	b.w	801dca8 <ucdr_deserialize_endian_array_uint8_t>

0801ab10 <ucdr_serialize_sequence_double>:
 801ab10:	b570      	push	{r4, r5, r6, lr}
 801ab12:	4615      	mov	r5, r2
 801ab14:	460e      	mov	r6, r1
 801ab16:	7d01      	ldrb	r1, [r0, #20]
 801ab18:	4604      	mov	r4, r0
 801ab1a:	f7fe fef9 	bl	8019910 <ucdr_serialize_endian_uint32_t>
 801ab1e:	b90d      	cbnz	r5, 801ab24 <ucdr_serialize_sequence_double+0x14>
 801ab20:	2001      	movs	r0, #1
 801ab22:	bd70      	pop	{r4, r5, r6, pc}
 801ab24:	462b      	mov	r3, r5
 801ab26:	4632      	mov	r2, r6
 801ab28:	7d21      	ldrb	r1, [r4, #20]
 801ab2a:	4620      	mov	r0, r4
 801ab2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab30:	f003 b8ee 	b.w	801dd10 <ucdr_serialize_endian_array_double>

0801ab34 <ucdr_deserialize_sequence_double>:
 801ab34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab38:	461d      	mov	r5, r3
 801ab3a:	4616      	mov	r6, r2
 801ab3c:	460f      	mov	r7, r1
 801ab3e:	461a      	mov	r2, r3
 801ab40:	7d01      	ldrb	r1, [r0, #20]
 801ab42:	4604      	mov	r4, r0
 801ab44:	f7ff f80c 	bl	8019b60 <ucdr_deserialize_endian_uint32_t>
 801ab48:	682b      	ldr	r3, [r5, #0]
 801ab4a:	429e      	cmp	r6, r3
 801ab4c:	d201      	bcs.n	801ab52 <ucdr_deserialize_sequence_double+0x1e>
 801ab4e:	2201      	movs	r2, #1
 801ab50:	75a2      	strb	r2, [r4, #22]
 801ab52:	b913      	cbnz	r3, 801ab5a <ucdr_deserialize_sequence_double+0x26>
 801ab54:	2001      	movs	r0, #1
 801ab56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ab5a:	463a      	mov	r2, r7
 801ab5c:	7d21      	ldrb	r1, [r4, #20]
 801ab5e:	4620      	mov	r0, r4
 801ab60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ab64:	f003 b928 	b.w	801ddb8 <ucdr_deserialize_endian_array_double>

0801ab68 <rcl_get_zero_initialized_publisher>:
 801ab68:	4b01      	ldr	r3, [pc, #4]	@ (801ab70 <rcl_get_zero_initialized_publisher+0x8>)
 801ab6a:	6818      	ldr	r0, [r3, #0]
 801ab6c:	4770      	bx	lr
 801ab6e:	bf00      	nop
 801ab70:	0802d81c 	.word	0x0802d81c

0801ab74 <rcl_publisher_init>:
 801ab74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab78:	b088      	sub	sp, #32
 801ab7a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801ab7c:	2e00      	cmp	r6, #0
 801ab7e:	d06b      	beq.n	801ac58 <rcl_publisher_init+0xe4>
 801ab80:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 801ab84:	4605      	mov	r5, r0
 801ab86:	460f      	mov	r7, r1
 801ab88:	4690      	mov	r8, r2
 801ab8a:	4650      	mov	r0, sl
 801ab8c:	4699      	mov	r9, r3
 801ab8e:	f001 f83d 	bl	801bc0c <rcutils_allocator_is_valid>
 801ab92:	f080 0401 	eor.w	r4, r0, #1
 801ab96:	b2e4      	uxtb	r4, r4
 801ab98:	2c00      	cmp	r4, #0
 801ab9a:	d15d      	bne.n	801ac58 <rcl_publisher_init+0xe4>
 801ab9c:	2d00      	cmp	r5, #0
 801ab9e:	d05b      	beq.n	801ac58 <rcl_publisher_init+0xe4>
 801aba0:	682b      	ldr	r3, [r5, #0]
 801aba2:	b123      	cbz	r3, 801abae <rcl_publisher_init+0x3a>
 801aba4:	2464      	movs	r4, #100	@ 0x64
 801aba6:	4620      	mov	r0, r4
 801aba8:	b008      	add	sp, #32
 801abaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801abae:	4638      	mov	r0, r7
 801abb0:	f006 fc64 	bl	802147c <rcl_node_is_valid>
 801abb4:	2800      	cmp	r0, #0
 801abb6:	d054      	beq.n	801ac62 <rcl_publisher_init+0xee>
 801abb8:	f1b8 0f00 	cmp.w	r8, #0
 801abbc:	d04c      	beq.n	801ac58 <rcl_publisher_init+0xe4>
 801abbe:	fab9 f389 	clz	r3, r9
 801abc2:	095b      	lsrs	r3, r3, #5
 801abc4:	f1b9 0f00 	cmp.w	r9, #0
 801abc8:	d046      	beq.n	801ac58 <rcl_publisher_init+0xe4>
 801abca:	aa07      	add	r2, sp, #28
 801abcc:	9307      	str	r3, [sp, #28]
 801abce:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801abd2:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 801abd6:	9205      	str	r2, [sp, #20]
 801abd8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801abdc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801abe0:	4649      	mov	r1, r9
 801abe2:	4638      	mov	r0, r7
 801abe4:	e89a 000c 	ldmia.w	sl, {r2, r3}
 801abe8:	f006 fca0 	bl	802152c <rcl_node_resolve_name>
 801abec:	2800      	cmp	r0, #0
 801abee:	d14f      	bne.n	801ac90 <rcl_publisher_init+0x11c>
 801abf0:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 801abf2:	20c8      	movs	r0, #200	@ 0xc8
 801abf4:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801abf6:	4798      	blx	r3
 801abf8:	6028      	str	r0, [r5, #0]
 801abfa:	2800      	cmp	r0, #0
 801abfc:	d050      	beq.n	801aca0 <rcl_publisher_init+0x12c>
 801abfe:	4638      	mov	r0, r7
 801ac00:	f006 fc5e 	bl	80214c0 <rcl_node_get_rmw_handle>
 801ac04:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 801ac08:	4641      	mov	r1, r8
 801ac0a:	9a07      	ldr	r2, [sp, #28]
 801ac0c:	9300      	str	r3, [sp, #0]
 801ac0e:	4633      	mov	r3, r6
 801ac10:	682c      	ldr	r4, [r5, #0]
 801ac12:	f001 f907 	bl	801be24 <rmw_create_publisher>
 801ac16:	682b      	ldr	r3, [r5, #0]
 801ac18:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 801ac1c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 801ac20:	b370      	cbz	r0, 801ac80 <rcl_publisher_init+0x10c>
 801ac22:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 801ac26:	f001 f9e1 	bl	801bfec <rmw_publisher_get_actual_qos>
 801ac2a:	682b      	ldr	r3, [r5, #0]
 801ac2c:	4604      	mov	r4, r0
 801ac2e:	b9d0      	cbnz	r0, 801ac66 <rcl_publisher_init+0xf2>
 801ac30:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 801ac34:	4631      	mov	r1, r6
 801ac36:	4618      	mov	r0, r3
 801ac38:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 801ac3c:	2270      	movs	r2, #112	@ 0x70
 801ac3e:	f00d fc26 	bl	802848e <memcpy>
 801ac42:	683a      	ldr	r2, [r7, #0]
 801ac44:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 801ac48:	9807      	ldr	r0, [sp, #28]
 801ac4a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 801ac4c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801ac4e:	4798      	blx	r3
 801ac50:	4620      	mov	r0, r4
 801ac52:	b008      	add	sp, #32
 801ac54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac58:	240b      	movs	r4, #11
 801ac5a:	4620      	mov	r0, r4
 801ac5c:	b008      	add	sp, #32
 801ac5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac62:	24c8      	movs	r4, #200	@ 0xc8
 801ac64:	e79f      	b.n	801aba6 <rcl_publisher_init+0x32>
 801ac66:	b1cb      	cbz	r3, 801ac9c <rcl_publisher_init+0x128>
 801ac68:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 801ac6c:	b142      	cbz	r2, 801ac80 <rcl_publisher_init+0x10c>
 801ac6e:	4638      	mov	r0, r7
 801ac70:	f006 fc26 	bl	80214c0 <rcl_node_get_rmw_handle>
 801ac74:	682b      	ldr	r3, [r5, #0]
 801ac76:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 801ac7a:	f001 f9cb 	bl	801c014 <rmw_destroy_publisher>
 801ac7e:	682b      	ldr	r3, [r5, #0]
 801ac80:	4618      	mov	r0, r3
 801ac82:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 801ac84:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801ac86:	2401      	movs	r4, #1
 801ac88:	4790      	blx	r2
 801ac8a:	2300      	movs	r3, #0
 801ac8c:	602b      	str	r3, [r5, #0]
 801ac8e:	e7db      	b.n	801ac48 <rcl_publisher_init+0xd4>
 801ac90:	2867      	cmp	r0, #103	@ 0x67
 801ac92:	d007      	beq.n	801aca4 <rcl_publisher_init+0x130>
 801ac94:	2869      	cmp	r0, #105	@ 0x69
 801ac96:	d005      	beq.n	801aca4 <rcl_publisher_init+0x130>
 801ac98:	280a      	cmp	r0, #10
 801ac9a:	d001      	beq.n	801aca0 <rcl_publisher_init+0x12c>
 801ac9c:	2401      	movs	r4, #1
 801ac9e:	e7d3      	b.n	801ac48 <rcl_publisher_init+0xd4>
 801aca0:	240a      	movs	r4, #10
 801aca2:	e7d1      	b.n	801ac48 <rcl_publisher_init+0xd4>
 801aca4:	2467      	movs	r4, #103	@ 0x67
 801aca6:	e7cf      	b.n	801ac48 <rcl_publisher_init+0xd4>

0801aca8 <rcl_publisher_get_default_options>:
 801aca8:	b570      	push	{r4, r5, r6, lr}
 801acaa:	4d14      	ldr	r5, [pc, #80]	@ (801acfc <rcl_publisher_get_default_options+0x54>)
 801acac:	b088      	sub	sp, #32
 801acae:	4604      	mov	r4, r0
 801acb0:	2250      	movs	r2, #80	@ 0x50
 801acb2:	4913      	ldr	r1, [pc, #76]	@ (801ad00 <rcl_publisher_get_default_options+0x58>)
 801acb4:	4628      	mov	r0, r5
 801acb6:	f00d fbea 	bl	802848e <memcpy>
 801acba:	a802      	add	r0, sp, #8
 801acbc:	f000 ff98 	bl	801bbf0 <rcutils_get_default_allocator>
 801acc0:	f10d 0c08 	add.w	ip, sp, #8
 801acc4:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 801acc8:	466e      	mov	r6, sp
 801acca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801acce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801acd2:	f8dc 3000 	ldr.w	r3, [ip]
 801acd6:	4630      	mov	r0, r6
 801acd8:	f8ce 3000 	str.w	r3, [lr]
 801acdc:	f001 f824 	bl	801bd28 <rmw_get_default_publisher_options>
 801ace0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 801ace4:	2270      	movs	r2, #112	@ 0x70
 801ace6:	e896 0003 	ldmia.w	r6, {r0, r1}
 801acea:	e883 0003 	stmia.w	r3, {r0, r1}
 801acee:	4629      	mov	r1, r5
 801acf0:	4620      	mov	r0, r4
 801acf2:	f00d fbcc 	bl	802848e <memcpy>
 801acf6:	4620      	mov	r0, r4
 801acf8:	b008      	add	sp, #32
 801acfa:	bd70      	pop	{r4, r5, r6, pc}
 801acfc:	20010468 	.word	0x20010468
 801ad00:	0802d820 	.word	0x0802d820

0801ad04 <rcl_publish>:
 801ad04:	b1f8      	cbz	r0, 801ad46 <rcl_publish+0x42>
 801ad06:	6803      	ldr	r3, [r0, #0]
 801ad08:	b570      	push	{r4, r5, r6, lr}
 801ad0a:	4604      	mov	r4, r0
 801ad0c:	b1b3      	cbz	r3, 801ad3c <rcl_publish+0x38>
 801ad0e:	4616      	mov	r6, r2
 801ad10:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 801ad14:	b192      	cbz	r2, 801ad3c <rcl_publish+0x38>
 801ad16:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 801ad1a:	460d      	mov	r5, r1
 801ad1c:	f005 ffe4 	bl	8020ce8 <rcl_context_is_valid>
 801ad20:	b160      	cbz	r0, 801ad3c <rcl_publish+0x38>
 801ad22:	6823      	ldr	r3, [r4, #0]
 801ad24:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 801ad28:	b140      	cbz	r0, 801ad3c <rcl_publish+0x38>
 801ad2a:	b155      	cbz	r5, 801ad42 <rcl_publish+0x3e>
 801ad2c:	4632      	mov	r2, r6
 801ad2e:	4629      	mov	r1, r5
 801ad30:	f001 f818 	bl	801bd64 <rmw_publish>
 801ad34:	3800      	subs	r0, #0
 801ad36:	bf18      	it	ne
 801ad38:	2001      	movne	r0, #1
 801ad3a:	bd70      	pop	{r4, r5, r6, pc}
 801ad3c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 801ad40:	bd70      	pop	{r4, r5, r6, pc}
 801ad42:	200b      	movs	r0, #11
 801ad44:	bd70      	pop	{r4, r5, r6, pc}
 801ad46:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 801ad4a:	4770      	bx	lr

0801ad4c <rcl_publisher_is_valid>:
 801ad4c:	b1a0      	cbz	r0, 801ad78 <rcl_publisher_is_valid+0x2c>
 801ad4e:	6803      	ldr	r3, [r0, #0]
 801ad50:	b510      	push	{r4, lr}
 801ad52:	4604      	mov	r4, r0
 801ad54:	b173      	cbz	r3, 801ad74 <rcl_publisher_is_valid+0x28>
 801ad56:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 801ad5a:	b15a      	cbz	r2, 801ad74 <rcl_publisher_is_valid+0x28>
 801ad5c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 801ad60:	f005 ffc2 	bl	8020ce8 <rcl_context_is_valid>
 801ad64:	b130      	cbz	r0, 801ad74 <rcl_publisher_is_valid+0x28>
 801ad66:	6823      	ldr	r3, [r4, #0]
 801ad68:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 801ad6c:	3800      	subs	r0, #0
 801ad6e:	bf18      	it	ne
 801ad70:	2001      	movne	r0, #1
 801ad72:	bd10      	pop	{r4, pc}
 801ad74:	2000      	movs	r0, #0
 801ad76:	bd10      	pop	{r4, pc}
 801ad78:	2000      	movs	r0, #0
 801ad7a:	4770      	bx	lr

0801ad7c <rcl_publisher_is_valid_except_context>:
 801ad7c:	b130      	cbz	r0, 801ad8c <rcl_publisher_is_valid_except_context+0x10>
 801ad7e:	6800      	ldr	r0, [r0, #0]
 801ad80:	b120      	cbz	r0, 801ad8c <rcl_publisher_is_valid_except_context+0x10>
 801ad82:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 801ad86:	3800      	subs	r0, #0
 801ad88:	bf18      	it	ne
 801ad8a:	2001      	movne	r0, #1
 801ad8c:	4770      	bx	lr
 801ad8e:	bf00      	nop

0801ad90 <_rclc_check_for_new_data>:
 801ad90:	2800      	cmp	r0, #0
 801ad92:	d046      	beq.n	801ae22 <_rclc_check_for_new_data+0x92>
 801ad94:	4603      	mov	r3, r0
 801ad96:	b530      	push	{r4, r5, lr}
 801ad98:	7802      	ldrb	r2, [r0, #0]
 801ad9a:	b085      	sub	sp, #20
 801ad9c:	2a0a      	cmp	r2, #10
 801ad9e:	d842      	bhi.n	801ae26 <_rclc_check_for_new_data+0x96>
 801ada0:	e8df f002 	tbb	[pc, r2]
 801ada4:	14181212 	.word	0x14181212
 801ada8:	06060614 	.word	0x06060614
 801adac:	2e1a      	.short	0x2e1a
 801adae:	16          	.byte	0x16
 801adaf:	00          	.byte	0x00
 801adb0:	6a0a      	ldr	r2, [r1, #32]
 801adb2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801adb4:	2000      	movs	r0, #0
 801adb6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801adba:	1a12      	subs	r2, r2, r0
 801adbc:	bf18      	it	ne
 801adbe:	2201      	movne	r2, #1
 801adc0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 801adc4:	b005      	add	sp, #20
 801adc6:	bd30      	pop	{r4, r5, pc}
 801adc8:	680a      	ldr	r2, [r1, #0]
 801adca:	e7f2      	b.n	801adb2 <_rclc_check_for_new_data+0x22>
 801adcc:	698a      	ldr	r2, [r1, #24]
 801adce:	e7f0      	b.n	801adb2 <_rclc_check_for_new_data+0x22>
 801add0:	688a      	ldr	r2, [r1, #8]
 801add2:	e7ee      	b.n	801adb2 <_rclc_check_for_new_data+0x22>
 801add4:	690a      	ldr	r2, [r1, #16]
 801add6:	e7ec      	b.n	801adb2 <_rclc_check_for_new_data+0x22>
 801add8:	685c      	ldr	r4, [r3, #4]
 801adda:	4608      	mov	r0, r1
 801addc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801ade0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ade4:	f104 0542 	add.w	r5, r4, #66	@ 0x42
 801ade8:	f104 0110 	add.w	r1, r4, #16
 801adec:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801adf0:	9500      	str	r5, [sp, #0]
 801adf2:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 801adf6:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801adfa:	f007 ff45 	bl	8022c88 <rcl_action_client_wait_set_get_entities_ready>
 801adfe:	e7e1      	b.n	801adc4 <_rclc_check_for_new_data+0x34>
 801ae00:	685c      	ldr	r4, [r3, #4]
 801ae02:	4608      	mov	r0, r1
 801ae04:	f104 0222 	add.w	r2, r4, #34	@ 0x22
 801ae08:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 801ae0c:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 801ae10:	e9cd 2100 	strd	r2, r1, [sp]
 801ae14:	f104 0220 	add.w	r2, r4, #32
 801ae18:	f104 0110 	add.w	r1, r4, #16
 801ae1c:	f008 f94e 	bl	80230bc <rcl_action_server_wait_set_get_entities_ready>
 801ae20:	e7d0      	b.n	801adc4 <_rclc_check_for_new_data+0x34>
 801ae22:	200b      	movs	r0, #11
 801ae24:	4770      	bx	lr
 801ae26:	2001      	movs	r0, #1
 801ae28:	e7cc      	b.n	801adc4 <_rclc_check_for_new_data+0x34>
 801ae2a:	bf00      	nop

0801ae2c <_rclc_take_new_data>:
 801ae2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae2e:	b09b      	sub	sp, #108	@ 0x6c
 801ae30:	2800      	cmp	r0, #0
 801ae32:	f000 8088 	beq.w	801af46 <_rclc_take_new_data+0x11a>
 801ae36:	7803      	ldrb	r3, [r0, #0]
 801ae38:	4604      	mov	r4, r0
 801ae3a:	2b0a      	cmp	r3, #10
 801ae3c:	f200 8167 	bhi.w	801b10e <_rclc_take_new_data+0x2e2>
 801ae40:	e8df f003 	tbb	[pc, r3]
 801ae44:	44152d2d 	.word	0x44152d2d
 801ae48:	19191944 	.word	0x19191944
 801ae4c:	065a      	.short	0x065a
 801ae4e:	15          	.byte	0x15
 801ae4f:	00          	.byte	0x00
 801ae50:	6840      	ldr	r0, [r0, #4]
 801ae52:	f890 3020 	ldrb.w	r3, [r0, #32]
 801ae56:	2b00      	cmp	r3, #0
 801ae58:	f040 80b2 	bne.w	801afc0 <_rclc_take_new_data+0x194>
 801ae5c:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 801ae60:	2b00      	cmp	r3, #0
 801ae62:	f040 80e4 	bne.w	801b02e <_rclc_take_new_data+0x202>
 801ae66:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 801ae6a:	2b00      	cmp	r3, #0
 801ae6c:	d16f      	bne.n	801af4e <_rclc_take_new_data+0x122>
 801ae6e:	2500      	movs	r5, #0
 801ae70:	4628      	mov	r0, r5
 801ae72:	b01b      	add	sp, #108	@ 0x6c
 801ae74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae76:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 801ae78:	6a0b      	ldr	r3, [r1, #32]
 801ae7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ae7e:	2b00      	cmp	r3, #0
 801ae80:	d0f5      	beq.n	801ae6e <_rclc_take_new_data+0x42>
 801ae82:	6882      	ldr	r2, [r0, #8]
 801ae84:	f100 0110 	add.w	r1, r0, #16
 801ae88:	6840      	ldr	r0, [r0, #4]
 801ae8a:	f006 fc2b 	bl	80216e4 <rcl_take_request>
 801ae8e:	4605      	mov	r5, r0
 801ae90:	2800      	cmp	r0, #0
 801ae92:	d0ec      	beq.n	801ae6e <_rclc_take_new_data+0x42>
 801ae94:	f240 2359 	movw	r3, #601	@ 0x259
 801ae98:	4298      	cmp	r0, r3
 801ae9a:	d013      	beq.n	801aec4 <_rclc_take_new_data+0x98>
 801ae9c:	e029      	b.n	801aef2 <_rclc_take_new_data+0xc6>
 801ae9e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 801aea0:	680b      	ldr	r3, [r1, #0]
 801aea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801aea6:	2b00      	cmp	r3, #0
 801aea8:	d0e1      	beq.n	801ae6e <_rclc_take_new_data+0x42>
 801aeaa:	2300      	movs	r3, #0
 801aeac:	aa0a      	add	r2, sp, #40	@ 0x28
 801aeae:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 801aeb2:	f006 fd5b 	bl	802196c <rcl_take>
 801aeb6:	4605      	mov	r5, r0
 801aeb8:	2800      	cmp	r0, #0
 801aeba:	d0d9      	beq.n	801ae70 <_rclc_take_new_data+0x44>
 801aebc:	f240 1391 	movw	r3, #401	@ 0x191
 801aec0:	4298      	cmp	r0, r3
 801aec2:	d116      	bne.n	801aef2 <_rclc_take_new_data+0xc6>
 801aec4:	2300      	movs	r3, #0
 801aec6:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 801aeca:	e7d1      	b.n	801ae70 <_rclc_take_new_data+0x44>
 801aecc:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 801aece:	698b      	ldr	r3, [r1, #24]
 801aed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d0ca      	beq.n	801ae6e <_rclc_take_new_data+0x42>
 801aed8:	6882      	ldr	r2, [r0, #8]
 801aeda:	f100 0110 	add.w	r1, r0, #16
 801aede:	6840      	ldr	r0, [r0, #4]
 801aee0:	f005 fe92 	bl	8020c08 <rcl_take_response>
 801aee4:	4605      	mov	r5, r0
 801aee6:	2800      	cmp	r0, #0
 801aee8:	d0c1      	beq.n	801ae6e <_rclc_take_new_data+0x42>
 801aeea:	f240 13f5 	movw	r3, #501	@ 0x1f5
 801aeee:	4298      	cmp	r0, r3
 801aef0:	d0be      	beq.n	801ae70 <_rclc_take_new_data+0x44>
 801aef2:	f000 feb1 	bl	801bc58 <rcutils_reset_error>
 801aef6:	e7bb      	b.n	801ae70 <_rclc_take_new_data+0x44>
 801aef8:	6840      	ldr	r0, [r0, #4]
 801aefa:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 801aefe:	2b00      	cmp	r3, #0
 801af00:	d17d      	bne.n	801affe <_rclc_take_new_data+0x1d2>
 801af02:	69c3      	ldr	r3, [r0, #28]
 801af04:	b11b      	cbz	r3, 801af0e <_rclc_take_new_data+0xe2>
 801af06:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801af0a:	2b00      	cmp	r3, #0
 801af0c:	d144      	bne.n	801af98 <_rclc_take_new_data+0x16c>
 801af0e:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 801af12:	2b00      	cmp	r3, #0
 801af14:	f040 80ac 	bne.w	801b070 <_rclc_take_new_data+0x244>
 801af18:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 801af1c:	2b00      	cmp	r3, #0
 801af1e:	d0a6      	beq.n	801ae6e <_rclc_take_new_data+0x42>
 801af20:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801af22:	a90a      	add	r1, sp, #40	@ 0x28
 801af24:	3010      	adds	r0, #16
 801af26:	f007 fd87 	bl	8022a38 <rcl_action_take_result_response>
 801af2a:	4605      	mov	r5, r0
 801af2c:	2800      	cmp	r0, #0
 801af2e:	d1e0      	bne.n	801aef2 <_rclc_take_new_data+0xc6>
 801af30:	6860      	ldr	r0, [r4, #4]
 801af32:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801af36:	f008 f9f1 	bl	802331c <rclc_action_find_handle_by_result_request_sequence_number>
 801af3a:	2800      	cmp	r0, #0
 801af3c:	d098      	beq.n	801ae70 <_rclc_take_new_data+0x44>
 801af3e:	2301      	movs	r3, #1
 801af40:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 801af44:	e794      	b.n	801ae70 <_rclc_take_new_data+0x44>
 801af46:	250b      	movs	r5, #11
 801af48:	4628      	mov	r0, r5
 801af4a:	b01b      	add	sp, #108	@ 0x6c
 801af4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af4e:	ae04      	add	r6, sp, #16
 801af50:	3010      	adds	r0, #16
 801af52:	aa0a      	add	r2, sp, #40	@ 0x28
 801af54:	4631      	mov	r1, r6
 801af56:	f007 ffe5 	bl	8022f24 <rcl_action_take_cancel_request>
 801af5a:	4605      	mov	r5, r0
 801af5c:	2800      	cmp	r0, #0
 801af5e:	d1c8      	bne.n	801aef2 <_rclc_take_new_data+0xc6>
 801af60:	a90a      	add	r1, sp, #40	@ 0x28
 801af62:	6860      	ldr	r0, [r4, #4]
 801af64:	f008 f99a 	bl	802329c <rclc_action_find_goal_handle_by_uuid>
 801af68:	4607      	mov	r7, r0
 801af6a:	2800      	cmp	r0, #0
 801af6c:	f000 80bb 	beq.w	801b0e6 <_rclc_take_new_data+0x2ba>
 801af70:	2101      	movs	r1, #1
 801af72:	f990 0008 	ldrsb.w	r0, [r0, #8]
 801af76:	f008 f91b 	bl	80231b0 <rcl_action_transition_goal_state>
 801af7a:	2803      	cmp	r0, #3
 801af7c:	4684      	mov	ip, r0
 801af7e:	f040 80a7 	bne.w	801b0d0 <_rclc_take_new_data+0x2a4>
 801af82:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 801af86:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801af88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801af8a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801af8e:	e884 0003 	stmia.w	r4, {r0, r1}
 801af92:	f887 c008 	strb.w	ip, [r7, #8]
 801af96:	e76b      	b.n	801ae70 <_rclc_take_new_data+0x44>
 801af98:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 801af9a:	3010      	adds	r0, #16
 801af9c:	f007 fdcc 	bl	8022b38 <rcl_action_take_feedback>
 801afa0:	4605      	mov	r5, r0
 801afa2:	2800      	cmp	r0, #0
 801afa4:	d1a5      	bne.n	801aef2 <_rclc_take_new_data+0xc6>
 801afa6:	6860      	ldr	r0, [r4, #4]
 801afa8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 801afaa:	f008 f977 	bl	802329c <rclc_action_find_goal_handle_by_uuid>
 801afae:	4603      	mov	r3, r0
 801afb0:	2800      	cmp	r0, #0
 801afb2:	f000 80a3 	beq.w	801b0fc <_rclc_take_new_data+0x2d0>
 801afb6:	2201      	movs	r2, #1
 801afb8:	6860      	ldr	r0, [r4, #4]
 801afba:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 801afbe:	e7a6      	b.n	801af0e <_rclc_take_new_data+0xe2>
 801afc0:	f008 f946 	bl	8023250 <rclc_action_take_goal_handle>
 801afc4:	4606      	mov	r6, r0
 801afc6:	6860      	ldr	r0, [r4, #4]
 801afc8:	2e00      	cmp	r6, #0
 801afca:	f43f af47 	beq.w	801ae5c <_rclc_take_new_data+0x30>
 801afce:	6070      	str	r0, [r6, #4]
 801afd0:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 801afd4:	69f2      	ldr	r2, [r6, #28]
 801afd6:	3010      	adds	r0, #16
 801afd8:	f007 feec 	bl	8022db4 <rcl_action_take_goal_request>
 801afdc:	4605      	mov	r5, r0
 801afde:	2800      	cmp	r0, #0
 801afe0:	f040 808e 	bne.w	801b100 <_rclc_take_new_data+0x2d4>
 801afe4:	69f7      	ldr	r7, [r6, #28]
 801afe6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801afe8:	7235      	strb	r5, [r6, #8]
 801afea:	f8c6 0009 	str.w	r0, [r6, #9]
 801afee:	f8c6 100d 	str.w	r1, [r6, #13]
 801aff2:	6860      	ldr	r0, [r4, #4]
 801aff4:	f8c6 2011 	str.w	r2, [r6, #17]
 801aff8:	f8c6 3015 	str.w	r3, [r6, #21]
 801affc:	e72e      	b.n	801ae5c <_rclc_take_new_data+0x30>
 801affe:	aa04      	add	r2, sp, #16
 801b000:	a90a      	add	r1, sp, #40	@ 0x28
 801b002:	3010      	adds	r0, #16
 801b004:	f007 fca0 	bl	8022948 <rcl_action_take_goal_response>
 801b008:	4605      	mov	r5, r0
 801b00a:	2800      	cmp	r0, #0
 801b00c:	f47f af71 	bne.w	801aef2 <_rclc_take_new_data+0xc6>
 801b010:	6860      	ldr	r0, [r4, #4]
 801b012:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801b016:	f008 f96f 	bl	80232f8 <rclc_action_find_handle_by_goal_request_sequence_number>
 801b01a:	b130      	cbz	r0, 801b02a <_rclc_take_new_data+0x1fe>
 801b01c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801b020:	2201      	movs	r2, #1
 801b022:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 801b026:	f880 2020 	strb.w	r2, [r0, #32]
 801b02a:	6860      	ldr	r0, [r4, #4]
 801b02c:	e769      	b.n	801af02 <_rclc_take_new_data+0xd6>
 801b02e:	3010      	adds	r0, #16
 801b030:	aa04      	add	r2, sp, #16
 801b032:	a90a      	add	r1, sp, #40	@ 0x28
 801b034:	f007 ff36 	bl	8022ea4 <rcl_action_take_result_request>
 801b038:	4605      	mov	r5, r0
 801b03a:	2800      	cmp	r0, #0
 801b03c:	f47f af59 	bne.w	801aef2 <_rclc_take_new_data+0xc6>
 801b040:	a904      	add	r1, sp, #16
 801b042:	6860      	ldr	r0, [r4, #4]
 801b044:	f008 f92a 	bl	802329c <rclc_action_find_goal_handle_by_uuid>
 801b048:	4607      	mov	r7, r0
 801b04a:	b160      	cbz	r0, 801b066 <_rclc_take_new_data+0x23a>
 801b04c:	ad0a      	add	r5, sp, #40	@ 0x28
 801b04e:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 801b052:	f04f 0c02 	mov.w	ip, #2
 801b056:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b058:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801b05a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b05e:	e886 0003 	stmia.w	r6, {r0, r1}
 801b062:	f887 c008 	strb.w	ip, [r7, #8]
 801b066:	6860      	ldr	r0, [r4, #4]
 801b068:	2300      	movs	r3, #0
 801b06a:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 801b06e:	e6fa      	b.n	801ae66 <_rclc_take_new_data+0x3a>
 801b070:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 801b074:	a90a      	add	r1, sp, #40	@ 0x28
 801b076:	3010      	adds	r0, #16
 801b078:	f007 fd1e 	bl	8022ab8 <rcl_action_take_cancel_response>
 801b07c:	4605      	mov	r5, r0
 801b07e:	2800      	cmp	r0, #0
 801b080:	f47f af37 	bne.w	801aef2 <_rclc_take_new_data+0xc6>
 801b084:	6860      	ldr	r0, [r4, #4]
 801b086:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801b08a:	f008 f959 	bl	8023340 <rclc_action_find_handle_by_cancel_request_sequence_number>
 801b08e:	4606      	mov	r6, r0
 801b090:	6860      	ldr	r0, [r4, #4]
 801b092:	2e00      	cmp	r6, #0
 801b094:	f43f af40 	beq.w	801af18 <_rclc_take_new_data+0xec>
 801b098:	2701      	movs	r7, #1
 801b09a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801b09c:	84b7      	strh	r7, [r6, #36]	@ 0x24
 801b09e:	2b00      	cmp	r3, #0
 801b0a0:	f43f af3a 	beq.w	801af18 <_rclc_take_new_data+0xec>
 801b0a4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801b0a6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801b0aa:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801b0ae:	f008 f8f5 	bl	802329c <rclc_action_find_goal_handle_by_uuid>
 801b0b2:	b138      	cbz	r0, 801b0c4 <_rclc_take_new_data+0x298>
 801b0b4:	6860      	ldr	r0, [r4, #4]
 801b0b6:	3501      	adds	r5, #1
 801b0b8:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 801b0bc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801b0be:	42ab      	cmp	r3, r5
 801b0c0:	d8f0      	bhi.n	801b0a4 <_rclc_take_new_data+0x278>
 801b0c2:	e729      	b.n	801af18 <_rclc_take_new_data+0xec>
 801b0c4:	6860      	ldr	r0, [r4, #4]
 801b0c6:	3501      	adds	r5, #1
 801b0c8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801b0ca:	42ab      	cmp	r3, r5
 801b0cc:	d8ea      	bhi.n	801b0a4 <_rclc_take_new_data+0x278>
 801b0ce:	e723      	b.n	801af18 <_rclc_take_new_data+0xec>
 801b0d0:	ab06      	add	r3, sp, #24
 801b0d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b0d4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801b0d8:	2103      	movs	r1, #3
 801b0da:	6860      	ldr	r0, [r4, #4]
 801b0dc:	e896 000c 	ldmia.w	r6, {r2, r3}
 801b0e0:	f008 f9a2 	bl	8023428 <rclc_action_server_goal_cancel_reject>
 801b0e4:	e6c4      	b.n	801ae70 <_rclc_take_new_data+0x44>
 801b0e6:	ab06      	add	r3, sp, #24
 801b0e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b0ea:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801b0ee:	2102      	movs	r1, #2
 801b0f0:	6860      	ldr	r0, [r4, #4]
 801b0f2:	e896 000c 	ldmia.w	r6, {r2, r3}
 801b0f6:	f008 f997 	bl	8023428 <rclc_action_server_goal_cancel_reject>
 801b0fa:	e6b9      	b.n	801ae70 <_rclc_take_new_data+0x44>
 801b0fc:	6860      	ldr	r0, [r4, #4]
 801b0fe:	e706      	b.n	801af0e <_rclc_take_new_data+0xe2>
 801b100:	4631      	mov	r1, r6
 801b102:	6860      	ldr	r0, [r4, #4]
 801b104:	f008 f8b4 	bl	8023270 <rclc_action_remove_used_goal_handle>
 801b108:	f000 fda6 	bl	801bc58 <rcutils_reset_error>
 801b10c:	e6b0      	b.n	801ae70 <_rclc_take_new_data+0x44>
 801b10e:	2501      	movs	r5, #1
 801b110:	e6ae      	b.n	801ae70 <_rclc_take_new_data+0x44>
 801b112:	bf00      	nop

0801b114 <_rclc_execute.part.0>:
 801b114:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b116:	7803      	ldrb	r3, [r0, #0]
 801b118:	b085      	sub	sp, #20
 801b11a:	4604      	mov	r4, r0
 801b11c:	2b0a      	cmp	r3, #10
 801b11e:	f200 8139 	bhi.w	801b394 <_rclc_execute.part.0+0x280>
 801b122:	e8df f003 	tbb	[pc, r3]
 801b126:	4268      	.short	0x4268
 801b128:	06a75b4d 	.word	0x06a75b4d
 801b12c:	721d0606 	.word	0x721d0606
 801b130:	62          	.byte	0x62
 801b131:	00          	.byte	0x00
 801b132:	2b06      	cmp	r3, #6
 801b134:	f000 8126 	beq.w	801b384 <_rclc_execute.part.0+0x270>
 801b138:	2b07      	cmp	r3, #7
 801b13a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801b13c:	f040 811c 	bne.w	801b378 <_rclc_execute.part.0+0x264>
 801b140:	f104 0510 	add.w	r5, r4, #16
 801b144:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 801b148:	6880      	ldr	r0, [r0, #8]
 801b14a:	4798      	blx	r3
 801b14c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801b14e:	4629      	mov	r1, r5
 801b150:	6860      	ldr	r0, [r4, #4]
 801b152:	f006 fb07 	bl	8021764 <rcl_send_response>
 801b156:	4604      	mov	r4, r0
 801b158:	b378      	cbz	r0, 801b1ba <_rclc_execute.part.0+0xa6>
 801b15a:	f000 fd7d 	bl	801bc58 <rcutils_reset_error>
 801b15e:	e02c      	b.n	801b1ba <_rclc_execute.part.0+0xa6>
 801b160:	6840      	ldr	r0, [r0, #4]
 801b162:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 801b166:	2b00      	cmp	r3, #0
 801b168:	f000 808e 	beq.w	801b288 <_rclc_execute.part.0+0x174>
 801b16c:	2600      	movs	r6, #0
 801b16e:	2701      	movs	r7, #1
 801b170:	e004      	b.n	801b17c <_rclc_execute.part.0+0x68>
 801b172:	f008 f847 	bl	8023204 <rclc_action_send_result_request>
 801b176:	b998      	cbnz	r0, 801b1a0 <_rclc_execute.part.0+0x8c>
 801b178:	722f      	strb	r7, [r5, #8]
 801b17a:	6860      	ldr	r0, [r4, #4]
 801b17c:	f008 f8f2 	bl	8023364 <rclc_action_find_first_handle_with_goal_response>
 801b180:	4605      	mov	r5, r0
 801b182:	2800      	cmp	r0, #0
 801b184:	d07f      	beq.n	801b286 <_rclc_execute.part.0+0x172>
 801b186:	6863      	ldr	r3, [r4, #4]
 801b188:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801b18a:	699b      	ldr	r3, [r3, #24]
 801b18c:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 801b190:	f885 6020 	strb.w	r6, [r5, #32]
 801b194:	4798      	blx	r3
 801b196:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 801b19a:	4628      	mov	r0, r5
 801b19c:	2b00      	cmp	r3, #0
 801b19e:	d1e8      	bne.n	801b172 <_rclc_execute.part.0+0x5e>
 801b1a0:	6860      	ldr	r0, [r4, #4]
 801b1a2:	4629      	mov	r1, r5
 801b1a4:	f008 f864 	bl	8023270 <rclc_action_remove_used_goal_handle>
 801b1a8:	e7e7      	b.n	801b17a <_rclc_execute.part.0+0x66>
 801b1aa:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 801b1ae:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 801b1b2:	b100      	cbz	r0, 801b1b6 <_rclc_execute.part.0+0xa2>
 801b1b4:	68a0      	ldr	r0, [r4, #8]
 801b1b6:	2400      	movs	r4, #0
 801b1b8:	4798      	blx	r3
 801b1ba:	4620      	mov	r0, r4
 801b1bc:	b005      	add	sp, #20
 801b1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b1c0:	6840      	ldr	r0, [r0, #4]
 801b1c2:	f006 fce7 	bl	8021b94 <rcl_timer_call>
 801b1c6:	f240 3321 	movw	r3, #801	@ 0x321
 801b1ca:	4604      	mov	r4, r0
 801b1cc:	4298      	cmp	r0, r3
 801b1ce:	d001      	beq.n	801b1d4 <_rclc_execute.part.0+0xc0>
 801b1d0:	2800      	cmp	r0, #0
 801b1d2:	d1c2      	bne.n	801b15a <_rclc_execute.part.0+0x46>
 801b1d4:	2400      	movs	r4, #0
 801b1d6:	4620      	mov	r0, r4
 801b1d8:	b005      	add	sp, #20
 801b1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b1dc:	2400      	movs	r4, #0
 801b1de:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801b1e0:	6880      	ldr	r0, [r0, #8]
 801b1e2:	4798      	blx	r3
 801b1e4:	4620      	mov	r0, r4
 801b1e6:	b005      	add	sp, #20
 801b1e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b1ea:	2400      	movs	r4, #0
 801b1ec:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801b1ee:	4798      	blx	r3
 801b1f0:	4620      	mov	r0, r4
 801b1f2:	b005      	add	sp, #20
 801b1f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b1f6:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 801b1fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b1fc:	b100      	cbz	r0, 801b200 <_rclc_execute.part.0+0xec>
 801b1fe:	68a0      	ldr	r0, [r4, #8]
 801b200:	2400      	movs	r4, #0
 801b202:	4798      	blx	r3
 801b204:	4620      	mov	r0, r4
 801b206:	b005      	add	sp, #20
 801b208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b20a:	6840      	ldr	r0, [r0, #4]
 801b20c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 801b210:	bb3b      	cbnz	r3, 801b262 <_rclc_execute.part.0+0x14e>
 801b212:	f890 3020 	ldrb.w	r3, [r0, #32]
 801b216:	2b00      	cmp	r3, #0
 801b218:	d07d      	beq.n	801b316 <_rclc_execute.part.0+0x202>
 801b21a:	f640 0634 	movw	r6, #2100	@ 0x834
 801b21e:	2701      	movs	r7, #1
 801b220:	e007      	b.n	801b232 <_rclc_execute.part.0+0x11e>
 801b222:	4628      	mov	r0, r5
 801b224:	f008 f8b6 	bl	8023394 <rclc_action_server_response_goal_request>
 801b228:	4629      	mov	r1, r5
 801b22a:	6860      	ldr	r0, [r4, #4]
 801b22c:	f008 f820 	bl	8023270 <rclc_action_remove_used_goal_handle>
 801b230:	6860      	ldr	r0, [r4, #4]
 801b232:	2100      	movs	r1, #0
 801b234:	f008 f848 	bl	80232c8 <rclc_action_find_first_handle_by_status>
 801b238:	4605      	mov	r5, r0
 801b23a:	2800      	cmp	r0, #0
 801b23c:	d068      	beq.n	801b310 <_rclc_execute.part.0+0x1fc>
 801b23e:	6863      	ldr	r3, [r4, #4]
 801b240:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801b242:	699b      	ldr	r3, [r3, #24]
 801b244:	4798      	blx	r3
 801b246:	42b0      	cmp	r0, r6
 801b248:	f04f 0100 	mov.w	r1, #0
 801b24c:	d1e9      	bne.n	801b222 <_rclc_execute.part.0+0x10e>
 801b24e:	2101      	movs	r1, #1
 801b250:	4628      	mov	r0, r5
 801b252:	f008 f89f 	bl	8023394 <rclc_action_server_response_goal_request>
 801b256:	722f      	strb	r7, [r5, #8]
 801b258:	e7ea      	b.n	801b230 <_rclc_execute.part.0+0x11c>
 801b25a:	6848      	ldr	r0, [r1, #4]
 801b25c:	f008 f808 	bl	8023270 <rclc_action_remove_used_goal_handle>
 801b260:	6860      	ldr	r0, [r4, #4]
 801b262:	f008 f83d 	bl	80232e0 <rclc_action_find_first_terminated_handle>
 801b266:	4601      	mov	r1, r0
 801b268:	2800      	cmp	r0, #0
 801b26a:	d1f6      	bne.n	801b25a <_rclc_execute.part.0+0x146>
 801b26c:	6860      	ldr	r0, [r4, #4]
 801b26e:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 801b272:	e7ce      	b.n	801b212 <_rclc_execute.part.0+0xfe>
 801b274:	2400      	movs	r4, #0
 801b276:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801b278:	f100 0110 	add.w	r1, r0, #16
 801b27c:	6880      	ldr	r0, [r0, #8]
 801b27e:	4798      	blx	r3
 801b280:	4620      	mov	r0, r4
 801b282:	b005      	add	sp, #20
 801b284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b286:	6860      	ldr	r0, [r4, #4]
 801b288:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801b28c:	b18b      	cbz	r3, 801b2b2 <_rclc_execute.part.0+0x19e>
 801b28e:	68c5      	ldr	r5, [r0, #12]
 801b290:	b32d      	cbz	r5, 801b2de <_rclc_execute.part.0+0x1ca>
 801b292:	2600      	movs	r6, #0
 801b294:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 801b298:	b143      	cbz	r3, 801b2ac <_rclc_execute.part.0+0x198>
 801b29a:	69c3      	ldr	r3, [r0, #28]
 801b29c:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 801b2a0:	b123      	cbz	r3, 801b2ac <_rclc_execute.part.0+0x198>
 801b2a2:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 801b2a4:	4628      	mov	r0, r5
 801b2a6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801b2a8:	4798      	blx	r3
 801b2aa:	6860      	ldr	r0, [r4, #4]
 801b2ac:	682d      	ldr	r5, [r5, #0]
 801b2ae:	2d00      	cmp	r5, #0
 801b2b0:	d1f0      	bne.n	801b294 <_rclc_execute.part.0+0x180>
 801b2b2:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 801b2b6:	b193      	cbz	r3, 801b2de <_rclc_execute.part.0+0x1ca>
 801b2b8:	68c5      	ldr	r5, [r0, #12]
 801b2ba:	b185      	cbz	r5, 801b2de <_rclc_execute.part.0+0x1ca>
 801b2bc:	2600      	movs	r6, #0
 801b2be:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 801b2c2:	b14b      	cbz	r3, 801b2d8 <_rclc_execute.part.0+0x1c4>
 801b2c4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801b2c6:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 801b2ca:	b12b      	cbz	r3, 801b2d8 <_rclc_execute.part.0+0x1c4>
 801b2cc:	4628      	mov	r0, r5
 801b2ce:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 801b2d2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801b2d4:	4798      	blx	r3
 801b2d6:	6860      	ldr	r0, [r4, #4]
 801b2d8:	682d      	ldr	r5, [r5, #0]
 801b2da:	2d00      	cmp	r5, #0
 801b2dc:	d1ef      	bne.n	801b2be <_rclc_execute.part.0+0x1aa>
 801b2de:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 801b2e2:	2b00      	cmp	r3, #0
 801b2e4:	f43f af76 	beq.w	801b1d4 <_rclc_execute.part.0+0xc0>
 801b2e8:	2700      	movs	r7, #0
 801b2ea:	e00b      	b.n	801b304 <_rclc_execute.part.0+0x1f0>
 801b2ec:	6863      	ldr	r3, [r4, #4]
 801b2ee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801b2f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801b2f2:	6a1e      	ldr	r6, [r3, #32]
 801b2f4:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 801b2f8:	47b0      	blx	r6
 801b2fa:	6860      	ldr	r0, [r4, #4]
 801b2fc:	4629      	mov	r1, r5
 801b2fe:	f007 ffb7 	bl	8023270 <rclc_action_remove_used_goal_handle>
 801b302:	6860      	ldr	r0, [r4, #4]
 801b304:	f008 f83a 	bl	802337c <rclc_action_find_first_handle_with_result_response>
 801b308:	4605      	mov	r5, r0
 801b30a:	2800      	cmp	r0, #0
 801b30c:	d1ee      	bne.n	801b2ec <_rclc_execute.part.0+0x1d8>
 801b30e:	e761      	b.n	801b1d4 <_rclc_execute.part.0+0xc0>
 801b310:	6860      	ldr	r0, [r4, #4]
 801b312:	f880 5020 	strb.w	r5, [r0, #32]
 801b316:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	f43f af5a 	beq.w	801b1d4 <_rclc_execute.part.0+0xc0>
 801b320:	68c5      	ldr	r5, [r0, #12]
 801b322:	b1b5      	cbz	r5, 801b352 <_rclc_execute.part.0+0x23e>
 801b324:	2602      	movs	r6, #2
 801b326:	e001      	b.n	801b32c <_rclc_execute.part.0+0x218>
 801b328:	682d      	ldr	r5, [r5, #0]
 801b32a:	b195      	cbz	r5, 801b352 <_rclc_execute.part.0+0x23e>
 801b32c:	f995 3008 	ldrsb.w	r3, [r5, #8]
 801b330:	2b03      	cmp	r3, #3
 801b332:	d1f9      	bne.n	801b328 <_rclc_execute.part.0+0x214>
 801b334:	69c3      	ldr	r3, [r0, #28]
 801b336:	4628      	mov	r0, r5
 801b338:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801b33a:	4798      	blx	r3
 801b33c:	4603      	mov	r3, r0
 801b33e:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 801b342:	4628      	mov	r0, r5
 801b344:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 801b348:	b143      	cbz	r3, 801b35c <_rclc_execute.part.0+0x248>
 801b34a:	f008 f841 	bl	80233d0 <rclc_action_server_goal_cancel_accept>
 801b34e:	6860      	ldr	r0, [r4, #4]
 801b350:	e7ea      	b.n	801b328 <_rclc_execute.part.0+0x214>
 801b352:	2300      	movs	r3, #0
 801b354:	461c      	mov	r4, r3
 801b356:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 801b35a:	e72e      	b.n	801b1ba <_rclc_execute.part.0+0xa6>
 801b35c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801b35e:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 801b362:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801b366:	2101      	movs	r1, #1
 801b368:	6860      	ldr	r0, [r4, #4]
 801b36a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b36e:	f008 f85b 	bl	8023428 <rclc_action_server_goal_cancel_reject>
 801b372:	722e      	strb	r6, [r5, #8]
 801b374:	6860      	ldr	r0, [r4, #4]
 801b376:	e7d7      	b.n	801b328 <_rclc_execute.part.0+0x214>
 801b378:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 801b37a:	f104 0510 	add.w	r5, r4, #16
 801b37e:	6880      	ldr	r0, [r0, #8]
 801b380:	4798      	blx	r3
 801b382:	e6e3      	b.n	801b14c <_rclc_execute.part.0+0x38>
 801b384:	f100 0510 	add.w	r5, r0, #16
 801b388:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801b38a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 801b38c:	4629      	mov	r1, r5
 801b38e:	6880      	ldr	r0, [r0, #8]
 801b390:	4798      	blx	r3
 801b392:	e6db      	b.n	801b14c <_rclc_execute.part.0+0x38>
 801b394:	2401      	movs	r4, #1
 801b396:	e710      	b.n	801b1ba <_rclc_execute.part.0+0xa6>

0801b398 <rclc_executor_trigger_any>:
 801b398:	2800      	cmp	r0, #0
 801b39a:	d03d      	beq.n	801b418 <rclc_executor_trigger_any+0x80>
 801b39c:	2900      	cmp	r1, #0
 801b39e:	d03c      	beq.n	801b41a <rclc_executor_trigger_any+0x82>
 801b3a0:	4603      	mov	r3, r0
 801b3a2:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 801b3a6:	2200      	movs	r2, #0
 801b3a8:	2800      	cmp	r0, #0
 801b3aa:	d035      	beq.n	801b418 <rclc_executor_trigger_any+0x80>
 801b3ac:	b430      	push	{r4, r5}
 801b3ae:	f893 c000 	ldrb.w	ip, [r3]
 801b3b2:	f1bc 0f08 	cmp.w	ip, #8
 801b3b6:	d11d      	bne.n	801b3f4 <rclc_executor_trigger_any+0x5c>
 801b3b8:	685c      	ldr	r4, [r3, #4]
 801b3ba:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 801b3bc:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 801b3c0:	d105      	bne.n	801b3ce <rclc_executor_trigger_any+0x36>
 801b3c2:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 801b3c6:	b910      	cbnz	r0, 801b3ce <rclc_executor_trigger_any+0x36>
 801b3c8:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 801b3cc:	b128      	cbz	r0, 801b3da <rclc_executor_trigger_any+0x42>
 801b3ce:	bc30      	pop	{r4, r5}
 801b3d0:	4770      	bx	lr
 801b3d2:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 801b3d6:	2800      	cmp	r0, #0
 801b3d8:	d1f9      	bne.n	801b3ce <rclc_executor_trigger_any+0x36>
 801b3da:	3201      	adds	r2, #1
 801b3dc:	3340      	adds	r3, #64	@ 0x40
 801b3de:	4291      	cmp	r1, r2
 801b3e0:	d017      	beq.n	801b412 <rclc_executor_trigger_any+0x7a>
 801b3e2:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 801b3e6:	2800      	cmp	r0, #0
 801b3e8:	d0f1      	beq.n	801b3ce <rclc_executor_trigger_any+0x36>
 801b3ea:	f893 c000 	ldrb.w	ip, [r3]
 801b3ee:	f1bc 0f08 	cmp.w	ip, #8
 801b3f2:	d0e1      	beq.n	801b3b8 <rclc_executor_trigger_any+0x20>
 801b3f4:	f1bc 0f09 	cmp.w	ip, #9
 801b3f8:	d1eb      	bne.n	801b3d2 <rclc_executor_trigger_any+0x3a>
 801b3fa:	685c      	ldr	r4, [r3, #4]
 801b3fc:	6a25      	ldr	r5, [r4, #32]
 801b3fe:	2d00      	cmp	r5, #0
 801b400:	d1e5      	bne.n	801b3ce <rclc_executor_trigger_any+0x36>
 801b402:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 801b406:	2800      	cmp	r0, #0
 801b408:	d1e1      	bne.n	801b3ce <rclc_executor_trigger_any+0x36>
 801b40a:	3201      	adds	r2, #1
 801b40c:	3340      	adds	r3, #64	@ 0x40
 801b40e:	4291      	cmp	r1, r2
 801b410:	d1e7      	bne.n	801b3e2 <rclc_executor_trigger_any+0x4a>
 801b412:	2000      	movs	r0, #0
 801b414:	bc30      	pop	{r4, r5}
 801b416:	4770      	bx	lr
 801b418:	4770      	bx	lr
 801b41a:	4608      	mov	r0, r1
 801b41c:	4770      	bx	lr
 801b41e:	bf00      	nop

0801b420 <rclc_executor_init>:
 801b420:	2900      	cmp	r1, #0
 801b422:	d06a      	beq.n	801b4fa <rclc_executor_init+0xda>
 801b424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b428:	4605      	mov	r5, r0
 801b42a:	b0b0      	sub	sp, #192	@ 0xc0
 801b42c:	2800      	cmp	r0, #0
 801b42e:	d05c      	beq.n	801b4ea <rclc_executor_init+0xca>
 801b430:	4616      	mov	r6, r2
 801b432:	4618      	mov	r0, r3
 801b434:	4688      	mov	r8, r1
 801b436:	461f      	mov	r7, r3
 801b438:	f000 fbe8 	bl	801bc0c <rcutils_allocator_is_valid>
 801b43c:	2e00      	cmp	r6, #0
 801b43e:	d054      	beq.n	801b4ea <rclc_executor_init+0xca>
 801b440:	f080 0401 	eor.w	r4, r0, #1
 801b444:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 801b448:	d14f      	bne.n	801b4ea <rclc_executor_init+0xca>
 801b44a:	2288      	movs	r2, #136	@ 0x88
 801b44c:	4930      	ldr	r1, [pc, #192]	@ (801b510 <rclc_executor_init+0xf0>)
 801b44e:	a80e      	add	r0, sp, #56	@ 0x38
 801b450:	f00d f81d 	bl	802848e <memcpy>
 801b454:	a90e      	add	r1, sp, #56	@ 0x38
 801b456:	2288      	movs	r2, #136	@ 0x88
 801b458:	4628      	mov	r0, r5
 801b45a:	f00d f818 	bl	802848e <memcpy>
 801b45e:	4668      	mov	r0, sp
 801b460:	f8c5 8000 	str.w	r8, [r5]
 801b464:	60ae      	str	r6, [r5, #8]
 801b466:	f006 fc9d 	bl	8021da4 <rcl_get_zero_initialized_wait_set>
 801b46a:	46ec      	mov	ip, sp
 801b46c:	f105 0e14 	add.w	lr, r5, #20
 801b470:	f8d7 8000 	ldr.w	r8, [r7]
 801b474:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b478:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b47c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b480:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b484:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b488:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 801b508 <rclc_executor_init+0xe8>
 801b48c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b490:	f8dc 3000 	ldr.w	r3, [ip]
 801b494:	01b0      	lsls	r0, r6, #6
 801b496:	6939      	ldr	r1, [r7, #16]
 801b498:	f8ce 3000 	str.w	r3, [lr]
 801b49c:	612f      	str	r7, [r5, #16]
 801b49e:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 801b4a2:	47c0      	blx	r8
 801b4a4:	6068      	str	r0, [r5, #4]
 801b4a6:	b908      	cbnz	r0, 801b4ac <rclc_executor_init+0x8c>
 801b4a8:	e029      	b.n	801b4fe <rclc_executor_init+0xde>
 801b4aa:	6868      	ldr	r0, [r5, #4]
 801b4ac:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 801b4b0:	3401      	adds	r4, #1
 801b4b2:	4631      	mov	r1, r6
 801b4b4:	f000 fa7c 	bl	801b9b0 <rclc_executor_handle_init>
 801b4b8:	42a6      	cmp	r6, r4
 801b4ba:	d8f6      	bhi.n	801b4aa <rclc_executor_init+0x8a>
 801b4bc:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 801b4c0:	f000 fa6a 	bl	801b998 <rclc_executor_handle_counters_zero_init>
 801b4c4:	4a13      	ldr	r2, [pc, #76]	@ (801b514 <rclc_executor_init+0xf4>)
 801b4c6:	2300      	movs	r3, #0
 801b4c8:	6868      	ldr	r0, [r5, #4]
 801b4ca:	e9c5 231e 	strd	r2, r3, [r5, #120]	@ 0x78
 801b4ce:	b168      	cbz	r0, 801b4ec <rclc_executor_init+0xcc>
 801b4d0:	68ab      	ldr	r3, [r5, #8]
 801b4d2:	b173      	cbz	r3, 801b4f2 <rclc_executor_init+0xd2>
 801b4d4:	692a      	ldr	r2, [r5, #16]
 801b4d6:	fab2 f382 	clz	r3, r2
 801b4da:	095b      	lsrs	r3, r3, #5
 801b4dc:	b14a      	cbz	r2, 801b4f2 <rclc_executor_init+0xd2>
 801b4de:	4618      	mov	r0, r3
 801b4e0:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
 801b4e4:	b030      	add	sp, #192	@ 0xc0
 801b4e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4ea:	200b      	movs	r0, #11
 801b4ec:	b030      	add	sp, #192	@ 0xc0
 801b4ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4f2:	2000      	movs	r0, #0
 801b4f4:	b030      	add	sp, #192	@ 0xc0
 801b4f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4fa:	200b      	movs	r0, #11
 801b4fc:	4770      	bx	lr
 801b4fe:	200a      	movs	r0, #10
 801b500:	e7f4      	b.n	801b4ec <rclc_executor_init+0xcc>
 801b502:	bf00      	nop
 801b504:	f3af 8000 	nop.w
 801b508:	3b9aca00 	.word	0x3b9aca00
 801b50c:	00000000 	.word	0x00000000
 801b510:	0802d870 	.word	0x0802d870
 801b514:	0801b399 	.word	0x0801b399

0801b518 <rclc_executor_add_subscription>:
 801b518:	2b00      	cmp	r3, #0
 801b51a:	bf18      	it	ne
 801b51c:	2a00      	cmpne	r2, #0
 801b51e:	b570      	push	{r4, r5, r6, lr}
 801b520:	4604      	mov	r4, r0
 801b522:	bf0c      	ite	eq
 801b524:	2001      	moveq	r0, #1
 801b526:	2000      	movne	r0, #0
 801b528:	f89d c010 	ldrb.w	ip, [sp, #16]
 801b52c:	2900      	cmp	r1, #0
 801b52e:	bf08      	it	eq
 801b530:	f040 0001 	orreq.w	r0, r0, #1
 801b534:	bb28      	cbnz	r0, 801b582 <rclc_executor_add_subscription+0x6a>
 801b536:	fab4 f584 	clz	r5, r4
 801b53a:	096d      	lsrs	r5, r5, #5
 801b53c:	b30c      	cbz	r4, 801b582 <rclc_executor_add_subscription+0x6a>
 801b53e:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 801b542:	4286      	cmp	r6, r0
 801b544:	d301      	bcc.n	801b54a <rclc_executor_add_subscription+0x32>
 801b546:	2001      	movs	r0, #1
 801b548:	bd70      	pop	{r4, r5, r6, pc}
 801b54a:	6860      	ldr	r0, [r4, #4]
 801b54c:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 801b550:	f800 500e 	strb.w	r5, [r0, lr]
 801b554:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 801b558:	3601      	adds	r6, #1
 801b55a:	6303      	str	r3, [r0, #48]	@ 0x30
 801b55c:	2301      	movs	r3, #1
 801b55e:	62c5      	str	r5, [r0, #44]	@ 0x2c
 801b560:	f104 0514 	add.w	r5, r4, #20
 801b564:	f880 c001 	strb.w	ip, [r0, #1]
 801b568:	8703      	strh	r3, [r0, #56]	@ 0x38
 801b56a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 801b56e:	4628      	mov	r0, r5
 801b570:	60e6      	str	r6, [r4, #12]
 801b572:	f006 fc2b 	bl	8021dcc <rcl_wait_set_is_valid>
 801b576:	b930      	cbnz	r0, 801b586 <rclc_executor_add_subscription+0x6e>
 801b578:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 801b57a:	2000      	movs	r0, #0
 801b57c:	3301      	adds	r3, #1
 801b57e:	64a3      	str	r3, [r4, #72]	@ 0x48
 801b580:	bd70      	pop	{r4, r5, r6, pc}
 801b582:	200b      	movs	r0, #11
 801b584:	bd70      	pop	{r4, r5, r6, pc}
 801b586:	4628      	mov	r0, r5
 801b588:	f006 fc26 	bl	8021dd8 <rcl_wait_set_fini>
 801b58c:	2800      	cmp	r0, #0
 801b58e:	d0f3      	beq.n	801b578 <rclc_executor_add_subscription+0x60>
 801b590:	bd70      	pop	{r4, r5, r6, pc}
 801b592:	bf00      	nop

0801b594 <rclc_executor_prepare>:
 801b594:	2800      	cmp	r0, #0
 801b596:	d044      	beq.n	801b622 <rclc_executor_prepare+0x8e>
 801b598:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b59a:	f100 0514 	add.w	r5, r0, #20
 801b59e:	b09b      	sub	sp, #108	@ 0x6c
 801b5a0:	4604      	mov	r4, r0
 801b5a2:	4628      	mov	r0, r5
 801b5a4:	f006 fc12 	bl	8021dcc <rcl_wait_set_is_valid>
 801b5a8:	b110      	cbz	r0, 801b5b0 <rclc_executor_prepare+0x1c>
 801b5aa:	2000      	movs	r0, #0
 801b5ac:	b01b      	add	sp, #108	@ 0x6c
 801b5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b5b0:	4628      	mov	r0, r5
 801b5b2:	f006 fc11 	bl	8021dd8 <rcl_wait_set_fini>
 801b5b6:	2800      	cmp	r0, #0
 801b5b8:	d130      	bne.n	801b61c <rclc_executor_prepare+0x88>
 801b5ba:	a80c      	add	r0, sp, #48	@ 0x30
 801b5bc:	ae04      	add	r6, sp, #16
 801b5be:	f006 fbf1 	bl	8021da4 <rcl_get_zero_initialized_wait_set>
 801b5c2:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801b5c6:	46ae      	mov	lr, r5
 801b5c8:	6927      	ldr	r7, [r4, #16]
 801b5ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b5ce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b5d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b5d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b5da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b5de:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b5e2:	f8dc 3000 	ldr.w	r3, [ip]
 801b5e6:	f8ce 3000 	str.w	r3, [lr]
 801b5ea:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801b5ec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801b5ee:	683b      	ldr	r3, [r7, #0]
 801b5f0:	4628      	mov	r0, r5
 801b5f2:	6822      	ldr	r2, [r4, #0]
 801b5f4:	6033      	str	r3, [r6, #0]
 801b5f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b5f8:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 801b5fa:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801b5fe:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 801b602:	e9cd 2100 	strd	r2, r1, [sp]
 801b606:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801b608:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801b60a:	f006 fee5 	bl	80223d8 <rcl_wait_set_init>
 801b60e:	2800      	cmp	r0, #0
 801b610:	d0cc      	beq.n	801b5ac <rclc_executor_prepare+0x18>
 801b612:	900b      	str	r0, [sp, #44]	@ 0x2c
 801b614:	f000 fb20 	bl	801bc58 <rcutils_reset_error>
 801b618:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801b61a:	e7c7      	b.n	801b5ac <rclc_executor_prepare+0x18>
 801b61c:	f000 fb1c 	bl	801bc58 <rcutils_reset_error>
 801b620:	e7cb      	b.n	801b5ba <rclc_executor_prepare+0x26>
 801b622:	200b      	movs	r0, #11
 801b624:	4770      	bx	lr
 801b626:	bf00      	nop

0801b628 <rclc_executor_spin_some.part.0>:
 801b628:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b62c:	4605      	mov	r5, r0
 801b62e:	4691      	mov	r9, r2
 801b630:	4698      	mov	r8, r3
 801b632:	f7ff ffaf 	bl	801b594 <rclc_executor_prepare>
 801b636:	f105 0614 	add.w	r6, r5, #20
 801b63a:	4630      	mov	r0, r6
 801b63c:	f006 fc98 	bl	8021f70 <rcl_wait_set_clear>
 801b640:	4607      	mov	r7, r0
 801b642:	2800      	cmp	r0, #0
 801b644:	f040 80a8 	bne.w	801b798 <rclc_executor_spin_some.part.0+0x170>
 801b648:	68ab      	ldr	r3, [r5, #8]
 801b64a:	b30b      	cbz	r3, 801b690 <rclc_executor_spin_some.part.0+0x68>
 801b64c:	4604      	mov	r4, r0
 801b64e:	6869      	ldr	r1, [r5, #4]
 801b650:	01a2      	lsls	r2, r4, #6
 801b652:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 801b656:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 801b65a:	b1cb      	cbz	r3, 801b690 <rclc_executor_spin_some.part.0+0x68>
 801b65c:	5c8b      	ldrb	r3, [r1, r2]
 801b65e:	2b0a      	cmp	r3, #10
 801b660:	f200 80de 	bhi.w	801b820 <rclc_executor_spin_some.part.0+0x1f8>
 801b664:	e8df f003 	tbb	[pc, r3]
 801b668:	8da99d9d 	.word	0x8da99d9d
 801b66c:	0606068d 	.word	0x0606068d
 801b670:	c1ce      	.short	0xc1ce
 801b672:	b5          	.byte	0xb5
 801b673:	00          	.byte	0x00
 801b674:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801b678:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801b67c:	4630      	mov	r0, r6
 801b67e:	f006 ffc7 	bl	8022610 <rcl_wait_set_add_service>
 801b682:	2800      	cmp	r0, #0
 801b684:	f040 8087 	bne.w	801b796 <rclc_executor_spin_some.part.0+0x16e>
 801b688:	3401      	adds	r4, #1
 801b68a:	68ab      	ldr	r3, [r5, #8]
 801b68c:	429c      	cmp	r4, r3
 801b68e:	d3de      	bcc.n	801b64e <rclc_executor_spin_some.part.0+0x26>
 801b690:	4643      	mov	r3, r8
 801b692:	464a      	mov	r2, r9
 801b694:	4630      	mov	r0, r6
 801b696:	f006 ffe7 	bl	8022668 <rcl_wait>
 801b69a:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 801b69e:	2b00      	cmp	r3, #0
 801b6a0:	f000 80c6 	beq.w	801b830 <rclc_executor_spin_some.part.0+0x208>
 801b6a4:	2b01      	cmp	r3, #1
 801b6a6:	f040 80bb 	bne.w	801b820 <rclc_executor_spin_some.part.0+0x1f8>
 801b6aa:	68ab      	ldr	r3, [r5, #8]
 801b6ac:	2b00      	cmp	r3, #0
 801b6ae:	f000 8159 	beq.w	801b964 <rclc_executor_spin_some.part.0+0x33c>
 801b6b2:	2400      	movs	r4, #0
 801b6b4:	f240 1991 	movw	r9, #401	@ 0x191
 801b6b8:	46a0      	mov	r8, r4
 801b6ba:	e00a      	b.n	801b6d2 <rclc_executor_spin_some.part.0+0xaa>
 801b6bc:	f7ff fb68 	bl	801ad90 <_rclc_check_for_new_data>
 801b6c0:	4604      	mov	r4, r0
 801b6c2:	b110      	cbz	r0, 801b6ca <rclc_executor_spin_some.part.0+0xa2>
 801b6c4:	4548      	cmp	r0, r9
 801b6c6:	f040 80b1 	bne.w	801b82c <rclc_executor_spin_some.part.0+0x204>
 801b6ca:	68ab      	ldr	r3, [r5, #8]
 801b6cc:	4598      	cmp	r8, r3
 801b6ce:	f080 8126 	bcs.w	801b91e <rclc_executor_spin_some.part.0+0x2f6>
 801b6d2:	686a      	ldr	r2, [r5, #4]
 801b6d4:	4631      	mov	r1, r6
 801b6d6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 801b6da:	f108 0801 	add.w	r8, r8, #1
 801b6de:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 801b6e2:	f1bc 0f00 	cmp.w	ip, #0
 801b6e6:	d1e9      	bne.n	801b6bc <rclc_executor_spin_some.part.0+0x94>
 801b6e8:	4619      	mov	r1, r3
 801b6ea:	4610      	mov	r0, r2
 801b6ec:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 801b6f0:	4798      	blx	r3
 801b6f2:	2800      	cmp	r0, #0
 801b6f4:	f000 809a 	beq.w	801b82c <rclc_executor_spin_some.part.0+0x204>
 801b6f8:	68ab      	ldr	r3, [r5, #8]
 801b6fa:	2b00      	cmp	r3, #0
 801b6fc:	f000 8096 	beq.w	801b82c <rclc_executor_spin_some.part.0+0x204>
 801b700:	f04f 0800 	mov.w	r8, #0
 801b704:	f240 1991 	movw	r9, #401	@ 0x191
 801b708:	e009      	b.n	801b71e <rclc_executor_spin_some.part.0+0xf6>
 801b70a:	f7ff fb8f 	bl	801ae2c <_rclc_take_new_data>
 801b70e:	4604      	mov	r4, r0
 801b710:	b110      	cbz	r0, 801b718 <rclc_executor_spin_some.part.0+0xf0>
 801b712:	4548      	cmp	r0, r9
 801b714:	f040 808a 	bne.w	801b82c <rclc_executor_spin_some.part.0+0x204>
 801b718:	68ab      	ldr	r3, [r5, #8]
 801b71a:	4598      	cmp	r8, r3
 801b71c:	d209      	bcs.n	801b732 <rclc_executor_spin_some.part.0+0x10a>
 801b71e:	6868      	ldr	r0, [r5, #4]
 801b720:	4631      	mov	r1, r6
 801b722:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 801b726:	f108 0801 	add.w	r8, r8, #1
 801b72a:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 801b72e:	2a00      	cmp	r2, #0
 801b730:	d1eb      	bne.n	801b70a <rclc_executor_spin_some.part.0+0xe2>
 801b732:	2b00      	cmp	r3, #0
 801b734:	d07a      	beq.n	801b82c <rclc_executor_spin_some.part.0+0x204>
 801b736:	2600      	movs	r6, #0
 801b738:	e00e      	b.n	801b758 <rclc_executor_spin_some.part.0+0x130>
 801b73a:	f812 200c 	ldrb.w	r2, [r2, ip]
 801b73e:	2a08      	cmp	r2, #8
 801b740:	f000 80fc 	beq.w	801b93c <rclc_executor_spin_some.part.0+0x314>
 801b744:	2a09      	cmp	r2, #9
 801b746:	f000 80ee 	beq.w	801b926 <rclc_executor_spin_some.part.0+0x2fe>
 801b74a:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 801b74e:	b98a      	cbnz	r2, 801b774 <rclc_executor_spin_some.part.0+0x14c>
 801b750:	3601      	adds	r6, #1
 801b752:	429e      	cmp	r6, r3
 801b754:	d267      	bcs.n	801b826 <rclc_executor_spin_some.part.0+0x1fe>
 801b756:	2400      	movs	r4, #0
 801b758:	686a      	ldr	r2, [r5, #4]
 801b75a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 801b75e:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 801b762:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 801b766:	2900      	cmp	r1, #0
 801b768:	d060      	beq.n	801b82c <rclc_executor_spin_some.part.0+0x204>
 801b76a:	7841      	ldrb	r1, [r0, #1]
 801b76c:	2900      	cmp	r1, #0
 801b76e:	d0e4      	beq.n	801b73a <rclc_executor_spin_some.part.0+0x112>
 801b770:	2901      	cmp	r1, #1
 801b772:	d1ed      	bne.n	801b750 <rclc_executor_spin_some.part.0+0x128>
 801b774:	f7ff fcce 	bl	801b114 <_rclc_execute.part.0>
 801b778:	2800      	cmp	r0, #0
 801b77a:	f040 80b5 	bne.w	801b8e8 <rclc_executor_spin_some.part.0+0x2c0>
 801b77e:	68ab      	ldr	r3, [r5, #8]
 801b780:	e7e6      	b.n	801b750 <rclc_executor_spin_some.part.0+0x128>
 801b782:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801b786:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801b78a:	4630      	mov	r0, r6
 801b78c:	f006 ff14 	bl	80225b8 <rcl_wait_set_add_client>
 801b790:	2800      	cmp	r0, #0
 801b792:	f43f af79 	beq.w	801b688 <rclc_executor_spin_some.part.0+0x60>
 801b796:	4607      	mov	r7, r0
 801b798:	f000 fa5e 	bl	801bc58 <rcutils_reset_error>
 801b79c:	4638      	mov	r0, r7
 801b79e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7a2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801b7a6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801b7aa:	4630      	mov	r0, r6
 801b7ac:	f006 fbb4 	bl	8021f18 <rcl_wait_set_add_subscription>
 801b7b0:	2800      	cmp	r0, #0
 801b7b2:	f43f af69 	beq.w	801b688 <rclc_executor_spin_some.part.0+0x60>
 801b7b6:	4607      	mov	r7, r0
 801b7b8:	e7ee      	b.n	801b798 <rclc_executor_spin_some.part.0+0x170>
 801b7ba:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801b7be:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801b7c2:	4630      	mov	r0, r6
 801b7c4:	f006 fec8 	bl	8022558 <rcl_wait_set_add_timer>
 801b7c8:	2800      	cmp	r0, #0
 801b7ca:	f43f af5d 	beq.w	801b688 <rclc_executor_spin_some.part.0+0x60>
 801b7ce:	4607      	mov	r7, r0
 801b7d0:	e7e2      	b.n	801b798 <rclc_executor_spin_some.part.0+0x170>
 801b7d2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801b7d6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801b7da:	4630      	mov	r0, r6
 801b7dc:	f006 fe90 	bl	8022500 <rcl_wait_set_add_guard_condition>
 801b7e0:	2800      	cmp	r0, #0
 801b7e2:	f43f af51 	beq.w	801b688 <rclc_executor_spin_some.part.0+0x60>
 801b7e6:	4607      	mov	r7, r0
 801b7e8:	e7d6      	b.n	801b798 <rclc_executor_spin_some.part.0+0x170>
 801b7ea:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801b7ee:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801b7f2:	4630      	mov	r0, r6
 801b7f4:	3110      	adds	r1, #16
 801b7f6:	f007 fc0d 	bl	8023014 <rcl_action_wait_set_add_action_server>
 801b7fa:	2800      	cmp	r0, #0
 801b7fc:	f43f af44 	beq.w	801b688 <rclc_executor_spin_some.part.0+0x60>
 801b800:	4607      	mov	r7, r0
 801b802:	e7c9      	b.n	801b798 <rclc_executor_spin_some.part.0+0x170>
 801b804:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801b808:	2300      	movs	r3, #0
 801b80a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801b80e:	4630      	mov	r0, r6
 801b810:	3110      	adds	r1, #16
 801b812:	f007 f9d5 	bl	8022bc0 <rcl_action_wait_set_add_action_client>
 801b816:	2800      	cmp	r0, #0
 801b818:	f43f af36 	beq.w	801b688 <rclc_executor_spin_some.part.0+0x60>
 801b81c:	4607      	mov	r7, r0
 801b81e:	e7bb      	b.n	801b798 <rclc_executor_spin_some.part.0+0x170>
 801b820:	2701      	movs	r7, #1
 801b822:	f000 fa19 	bl	801bc58 <rcutils_reset_error>
 801b826:	4638      	mov	r0, r7
 801b828:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b82c:	4627      	mov	r7, r4
 801b82e:	e7fa      	b.n	801b826 <rclc_executor_spin_some.part.0+0x1fe>
 801b830:	68ab      	ldr	r3, [r5, #8]
 801b832:	2b00      	cmp	r3, #0
 801b834:	f000 8093 	beq.w	801b95e <rclc_executor_spin_some.part.0+0x336>
 801b838:	2400      	movs	r4, #0
 801b83a:	f240 1991 	movw	r9, #401	@ 0x191
 801b83e:	46a0      	mov	r8, r4
 801b840:	e008      	b.n	801b854 <rclc_executor_spin_some.part.0+0x22c>
 801b842:	f7ff faa5 	bl	801ad90 <_rclc_check_for_new_data>
 801b846:	4604      	mov	r4, r0
 801b848:	b108      	cbz	r0, 801b84e <rclc_executor_spin_some.part.0+0x226>
 801b84a:	4548      	cmp	r0, r9
 801b84c:	d1ee      	bne.n	801b82c <rclc_executor_spin_some.part.0+0x204>
 801b84e:	68ab      	ldr	r3, [r5, #8]
 801b850:	4598      	cmp	r8, r3
 801b852:	d266      	bcs.n	801b922 <rclc_executor_spin_some.part.0+0x2fa>
 801b854:	686a      	ldr	r2, [r5, #4]
 801b856:	4631      	mov	r1, r6
 801b858:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 801b85c:	f108 0801 	add.w	r8, r8, #1
 801b860:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 801b864:	f1bc 0f00 	cmp.w	ip, #0
 801b868:	d1eb      	bne.n	801b842 <rclc_executor_spin_some.part.0+0x21a>
 801b86a:	4619      	mov	r1, r3
 801b86c:	4610      	mov	r0, r2
 801b86e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 801b872:	4798      	blx	r3
 801b874:	2800      	cmp	r0, #0
 801b876:	d0d9      	beq.n	801b82c <rclc_executor_spin_some.part.0+0x204>
 801b878:	68ab      	ldr	r3, [r5, #8]
 801b87a:	2b00      	cmp	r3, #0
 801b87c:	d0d6      	beq.n	801b82c <rclc_executor_spin_some.part.0+0x204>
 801b87e:	f04f 0a00 	mov.w	sl, #0
 801b882:	f240 1891 	movw	r8, #401	@ 0x191
 801b886:	f240 2959 	movw	r9, #601	@ 0x259
 801b88a:	e00e      	b.n	801b8aa <rclc_executor_spin_some.part.0+0x282>
 801b88c:	f813 300b 	ldrb.w	r3, [r3, fp]
 801b890:	2b08      	cmp	r3, #8
 801b892:	d034      	beq.n	801b8fe <rclc_executor_spin_some.part.0+0x2d6>
 801b894:	2b09      	cmp	r3, #9
 801b896:	d029      	beq.n	801b8ec <rclc_executor_spin_some.part.0+0x2c4>
 801b898:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 801b89c:	bb03      	cbnz	r3, 801b8e0 <rclc_executor_spin_some.part.0+0x2b8>
 801b89e:	f10a 0a01 	add.w	sl, sl, #1
 801b8a2:	68ab      	ldr	r3, [r5, #8]
 801b8a4:	459a      	cmp	sl, r3
 801b8a6:	d2be      	bcs.n	801b826 <rclc_executor_spin_some.part.0+0x1fe>
 801b8a8:	2400      	movs	r4, #0
 801b8aa:	6868      	ldr	r0, [r5, #4]
 801b8ac:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 801b8b0:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 801b8b4:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 801b8b8:	2b00      	cmp	r3, #0
 801b8ba:	d0b7      	beq.n	801b82c <rclc_executor_spin_some.part.0+0x204>
 801b8bc:	4631      	mov	r1, r6
 801b8be:	f7ff fab5 	bl	801ae2c <_rclc_take_new_data>
 801b8c2:	2800      	cmp	r0, #0
 801b8c4:	bf18      	it	ne
 801b8c6:	4540      	cmpne	r0, r8
 801b8c8:	d001      	beq.n	801b8ce <rclc_executor_spin_some.part.0+0x2a6>
 801b8ca:	4548      	cmp	r0, r9
 801b8cc:	d10c      	bne.n	801b8e8 <rclc_executor_spin_some.part.0+0x2c0>
 801b8ce:	686b      	ldr	r3, [r5, #4]
 801b8d0:	eb13 000b 	adds.w	r0, r3, fp
 801b8d4:	d021      	beq.n	801b91a <rclc_executor_spin_some.part.0+0x2f2>
 801b8d6:	7842      	ldrb	r2, [r0, #1]
 801b8d8:	2a00      	cmp	r2, #0
 801b8da:	d0d7      	beq.n	801b88c <rclc_executor_spin_some.part.0+0x264>
 801b8dc:	2a01      	cmp	r2, #1
 801b8de:	d1de      	bne.n	801b89e <rclc_executor_spin_some.part.0+0x276>
 801b8e0:	f7ff fc18 	bl	801b114 <_rclc_execute.part.0>
 801b8e4:	2800      	cmp	r0, #0
 801b8e6:	d0da      	beq.n	801b89e <rclc_executor_spin_some.part.0+0x276>
 801b8e8:	4607      	mov	r7, r0
 801b8ea:	e79c      	b.n	801b826 <rclc_executor_spin_some.part.0+0x1fe>
 801b8ec:	6843      	ldr	r3, [r0, #4]
 801b8ee:	6a1a      	ldr	r2, [r3, #32]
 801b8f0:	2a00      	cmp	r2, #0
 801b8f2:	d1f5      	bne.n	801b8e0 <rclc_executor_spin_some.part.0+0x2b8>
 801b8f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801b8f8:	2b00      	cmp	r3, #0
 801b8fa:	d0d0      	beq.n	801b89e <rclc_executor_spin_some.part.0+0x276>
 801b8fc:	e7f0      	b.n	801b8e0 <rclc_executor_spin_some.part.0+0x2b8>
 801b8fe:	6843      	ldr	r3, [r0, #4]
 801b900:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801b902:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 801b906:	d1eb      	bne.n	801b8e0 <rclc_executor_spin_some.part.0+0x2b8>
 801b908:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 801b90c:	2a00      	cmp	r2, #0
 801b90e:	d1e7      	bne.n	801b8e0 <rclc_executor_spin_some.part.0+0x2b8>
 801b910:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801b914:	2b00      	cmp	r3, #0
 801b916:	d0c2      	beq.n	801b89e <rclc_executor_spin_some.part.0+0x276>
 801b918:	e7e2      	b.n	801b8e0 <rclc_executor_spin_some.part.0+0x2b8>
 801b91a:	270b      	movs	r7, #11
 801b91c:	e783      	b.n	801b826 <rclc_executor_spin_some.part.0+0x1fe>
 801b91e:	686a      	ldr	r2, [r5, #4]
 801b920:	e6e2      	b.n	801b6e8 <rclc_executor_spin_some.part.0+0xc0>
 801b922:	686a      	ldr	r2, [r5, #4]
 801b924:	e7a1      	b.n	801b86a <rclc_executor_spin_some.part.0+0x242>
 801b926:	6842      	ldr	r2, [r0, #4]
 801b928:	6a11      	ldr	r1, [r2, #32]
 801b92a:	2900      	cmp	r1, #0
 801b92c:	f47f af22 	bne.w	801b774 <rclc_executor_spin_some.part.0+0x14c>
 801b930:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 801b934:	2a00      	cmp	r2, #0
 801b936:	f43f af0b 	beq.w	801b750 <rclc_executor_spin_some.part.0+0x128>
 801b93a:	e71b      	b.n	801b774 <rclc_executor_spin_some.part.0+0x14c>
 801b93c:	6842      	ldr	r2, [r0, #4]
 801b93e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 801b940:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 801b944:	f47f af16 	bne.w	801b774 <rclc_executor_spin_some.part.0+0x14c>
 801b948:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 801b94c:	2900      	cmp	r1, #0
 801b94e:	f47f af11 	bne.w	801b774 <rclc_executor_spin_some.part.0+0x14c>
 801b952:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 801b956:	2a00      	cmp	r2, #0
 801b958:	f43f aefa 	beq.w	801b750 <rclc_executor_spin_some.part.0+0x128>
 801b95c:	e70a      	b.n	801b774 <rclc_executor_spin_some.part.0+0x14c>
 801b95e:	686a      	ldr	r2, [r5, #4]
 801b960:	461c      	mov	r4, r3
 801b962:	e782      	b.n	801b86a <rclc_executor_spin_some.part.0+0x242>
 801b964:	686a      	ldr	r2, [r5, #4]
 801b966:	461c      	mov	r4, r3
 801b968:	e6be      	b.n	801b6e8 <rclc_executor_spin_some.part.0+0xc0>
 801b96a:	bf00      	nop

0801b96c <rclc_executor_spin_some>:
 801b96c:	b190      	cbz	r0, 801b994 <rclc_executor_spin_some+0x28>
 801b96e:	b570      	push	{r4, r5, r6, lr}
 801b970:	4604      	mov	r4, r0
 801b972:	6800      	ldr	r0, [r0, #0]
 801b974:	4616      	mov	r6, r2
 801b976:	461d      	mov	r5, r3
 801b978:	f005 f9b6 	bl	8020ce8 <rcl_context_is_valid>
 801b97c:	b130      	cbz	r0, 801b98c <rclc_executor_spin_some+0x20>
 801b97e:	4632      	mov	r2, r6
 801b980:	462b      	mov	r3, r5
 801b982:	4620      	mov	r0, r4
 801b984:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b988:	f7ff be4e 	b.w	801b628 <rclc_executor_spin_some.part.0>
 801b98c:	f000 f964 	bl	801bc58 <rcutils_reset_error>
 801b990:	2001      	movs	r0, #1
 801b992:	bd70      	pop	{r4, r5, r6, pc}
 801b994:	200b      	movs	r0, #11
 801b996:	4770      	bx	lr

0801b998 <rclc_executor_handle_counters_zero_init>:
 801b998:	b130      	cbz	r0, 801b9a8 <rclc_executor_handle_counters_zero_init+0x10>
 801b99a:	2220      	movs	r2, #32
 801b99c:	2100      	movs	r1, #0
 801b99e:	b508      	push	{r3, lr}
 801b9a0:	f00c fc4e 	bl	8028240 <memset>
 801b9a4:	2000      	movs	r0, #0
 801b9a6:	bd08      	pop	{r3, pc}
 801b9a8:	200b      	movs	r0, #11
 801b9aa:	4770      	bx	lr
 801b9ac:	0000      	movs	r0, r0
	...

0801b9b0 <rclc_executor_handle_init>:
 801b9b0:	4603      	mov	r3, r0
 801b9b2:	b178      	cbz	r0, 801b9d4 <rclc_executor_handle_init+0x24>
 801b9b4:	2200      	movs	r2, #0
 801b9b6:	f04f 0c0b 	mov.w	ip, #11
 801b9ba:	6341      	str	r1, [r0, #52]	@ 0x34
 801b9bc:	4610      	mov	r0, r2
 801b9be:	f8a3 c000 	strh.w	ip, [r3]
 801b9c2:	631a      	str	r2, [r3, #48]	@ 0x30
 801b9c4:	871a      	strh	r2, [r3, #56]	@ 0x38
 801b9c6:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 801b9d8 <rclc_executor_handle_init+0x28>
 801b9ca:	e9c3 2201 	strd	r2, r2, [r3, #4]
 801b9ce:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 801b9d2:	4770      	bx	lr
 801b9d4:	200b      	movs	r0, #11
 801b9d6:	4770      	bx	lr
	...

0801b9e0 <rclc_support_init>:
 801b9e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b9e4:	b086      	sub	sp, #24
 801b9e6:	b3bb      	cbz	r3, 801ba58 <rclc_support_init+0x78>
 801b9e8:	4606      	mov	r6, r0
 801b9ea:	b3a8      	cbz	r0, 801ba58 <rclc_support_init+0x78>
 801b9ec:	461c      	mov	r4, r3
 801b9ee:	460f      	mov	r7, r1
 801b9f0:	4690      	mov	r8, r2
 801b9f2:	f005 facf 	bl	8020f94 <rcl_get_zero_initialized_init_options>
 801b9f6:	f104 050c 	add.w	r5, r4, #12
 801b9fa:	9005      	str	r0, [sp, #20]
 801b9fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 801ba00:	e88d 0003 	stmia.w	sp, {r0, r1}
 801ba04:	a805      	add	r0, sp, #20
 801ba06:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801ba0a:	f005 fac5 	bl	8020f98 <rcl_init_options_init>
 801ba0e:	4605      	mov	r5, r0
 801ba10:	b9e0      	cbnz	r0, 801ba4c <rclc_support_init+0x6c>
 801ba12:	ad02      	add	r5, sp, #8
 801ba14:	4628      	mov	r0, r5
 801ba16:	f005 f95d 	bl	8020cd4 <rcl_get_zero_initialized_context>
 801ba1a:	4633      	mov	r3, r6
 801ba1c:	aa05      	add	r2, sp, #20
 801ba1e:	e895 0003 	ldmia.w	r5, {r0, r1}
 801ba22:	e886 0003 	stmia.w	r6, {r0, r1}
 801ba26:	4641      	mov	r1, r8
 801ba28:	4638      	mov	r0, r7
 801ba2a:	f005 f9c3 	bl	8020db4 <rcl_init>
 801ba2e:	4605      	mov	r5, r0
 801ba30:	b9b8      	cbnz	r0, 801ba62 <rclc_support_init+0x82>
 801ba32:	4622      	mov	r2, r4
 801ba34:	f106 010c 	add.w	r1, r6, #12
 801ba38:	2003      	movs	r0, #3
 801ba3a:	60b4      	str	r4, [r6, #8]
 801ba3c:	f006 f816 	bl	8021a6c <rcl_clock_init>
 801ba40:	4605      	mov	r5, r0
 801ba42:	b970      	cbnz	r0, 801ba62 <rclc_support_init+0x82>
 801ba44:	a805      	add	r0, sp, #20
 801ba46:	f005 fb0d 	bl	8021064 <rcl_init_options_fini>
 801ba4a:	b108      	cbz	r0, 801ba50 <rclc_support_init+0x70>
 801ba4c:	f000 f904 	bl	801bc58 <rcutils_reset_error>
 801ba50:	4628      	mov	r0, r5
 801ba52:	b006      	add	sp, #24
 801ba54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba58:	250b      	movs	r5, #11
 801ba5a:	4628      	mov	r0, r5
 801ba5c:	b006      	add	sp, #24
 801ba5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba62:	f000 f8f9 	bl	801bc58 <rcutils_reset_error>
 801ba66:	a805      	add	r0, sp, #20
 801ba68:	f005 fafc 	bl	8021064 <rcl_init_options_fini>
 801ba6c:	2800      	cmp	r0, #0
 801ba6e:	d0ef      	beq.n	801ba50 <rclc_support_init+0x70>
 801ba70:	e7ec      	b.n	801ba4c <rclc_support_init+0x6c>
 801ba72:	bf00      	nop

0801ba74 <rclc_node_init_default>:
 801ba74:	2b00      	cmp	r3, #0
 801ba76:	bf18      	it	ne
 801ba78:	2a00      	cmpne	r2, #0
 801ba7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ba7e:	4616      	mov	r6, r2
 801ba80:	bf0c      	ite	eq
 801ba82:	2201      	moveq	r2, #1
 801ba84:	2200      	movne	r2, #0
 801ba86:	b0a1      	sub	sp, #132	@ 0x84
 801ba88:	2900      	cmp	r1, #0
 801ba8a:	bf08      	it	eq
 801ba8c:	f042 0201 	orreq.w	r2, r2, #1
 801ba90:	bb22      	cbnz	r2, 801badc <rclc_node_init_default+0x68>
 801ba92:	4604      	mov	r4, r0
 801ba94:	b310      	cbz	r0, 801badc <rclc_node_init_default+0x68>
 801ba96:	f10d 0810 	add.w	r8, sp, #16
 801ba9a:	461f      	mov	r7, r3
 801ba9c:	460d      	mov	r5, r1
 801ba9e:	f10d 0918 	add.w	r9, sp, #24
 801baa2:	4640      	mov	r0, r8
 801baa4:	f005 fb98 	bl	80211d8 <rcl_get_zero_initialized_node>
 801baa8:	e898 0003 	ldmia.w	r8, {r0, r1}
 801baac:	e884 0003 	stmia.w	r4, {r0, r1}
 801bab0:	4648      	mov	r0, r9
 801bab2:	f005 fd0b 	bl	80214cc <rcl_node_get_default_options>
 801bab6:	4640      	mov	r0, r8
 801bab8:	f005 fb8e 	bl	80211d8 <rcl_get_zero_initialized_node>
 801babc:	f8cd 9000 	str.w	r9, [sp]
 801bac0:	463b      	mov	r3, r7
 801bac2:	4632      	mov	r2, r6
 801bac4:	e898 0003 	ldmia.w	r8, {r0, r1}
 801bac8:	e884 0003 	stmia.w	r4, {r0, r1}
 801bacc:	4629      	mov	r1, r5
 801bace:	4620      	mov	r0, r4
 801bad0:	f005 fb8c 	bl	80211ec <rcl_node_init>
 801bad4:	b930      	cbnz	r0, 801bae4 <rclc_node_init_default+0x70>
 801bad6:	b021      	add	sp, #132	@ 0x84
 801bad8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801badc:	200b      	movs	r0, #11
 801bade:	b021      	add	sp, #132	@ 0x84
 801bae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bae4:	9003      	str	r0, [sp, #12]
 801bae6:	f000 f8b7 	bl	801bc58 <rcutils_reset_error>
 801baea:	f000 f8b5 	bl	801bc58 <rcutils_reset_error>
 801baee:	9803      	ldr	r0, [sp, #12]
 801baf0:	b021      	add	sp, #132	@ 0x84
 801baf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801baf6:	bf00      	nop

0801baf8 <rclc_publisher_init_default>:
 801baf8:	2b00      	cmp	r3, #0
 801bafa:	bf18      	it	ne
 801bafc:	2a00      	cmpne	r2, #0
 801bafe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb02:	4616      	mov	r6, r2
 801bb04:	bf0c      	ite	eq
 801bb06:	2201      	moveq	r2, #1
 801bb08:	2200      	movne	r2, #0
 801bb0a:	b0a0      	sub	sp, #128	@ 0x80
 801bb0c:	2900      	cmp	r1, #0
 801bb0e:	bf08      	it	eq
 801bb10:	f042 0201 	orreq.w	r2, r2, #1
 801bb14:	bb1a      	cbnz	r2, 801bb5e <rclc_publisher_init_default+0x66>
 801bb16:	4604      	mov	r4, r0
 801bb18:	b308      	cbz	r0, 801bb5e <rclc_publisher_init_default+0x66>
 801bb1a:	f10d 0810 	add.w	r8, sp, #16
 801bb1e:	461f      	mov	r7, r3
 801bb20:	460d      	mov	r5, r1
 801bb22:	f7ff f821 	bl	801ab68 <rcl_get_zero_initialized_publisher>
 801bb26:	6020      	str	r0, [r4, #0]
 801bb28:	4640      	mov	r0, r8
 801bb2a:	f7ff f8bd 	bl	801aca8 <rcl_publisher_get_default_options>
 801bb2e:	2250      	movs	r2, #80	@ 0x50
 801bb30:	490d      	ldr	r1, [pc, #52]	@ (801bb68 <rclc_publisher_init_default+0x70>)
 801bb32:	4640      	mov	r0, r8
 801bb34:	f00c fcab 	bl	802848e <memcpy>
 801bb38:	463b      	mov	r3, r7
 801bb3a:	4632      	mov	r2, r6
 801bb3c:	4629      	mov	r1, r5
 801bb3e:	4620      	mov	r0, r4
 801bb40:	f8cd 8000 	str.w	r8, [sp]
 801bb44:	f7ff f816 	bl	801ab74 <rcl_publisher_init>
 801bb48:	b910      	cbnz	r0, 801bb50 <rclc_publisher_init_default+0x58>
 801bb4a:	b020      	add	sp, #128	@ 0x80
 801bb4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb50:	9003      	str	r0, [sp, #12]
 801bb52:	f000 f881 	bl	801bc58 <rcutils_reset_error>
 801bb56:	9803      	ldr	r0, [sp, #12]
 801bb58:	b020      	add	sp, #128	@ 0x80
 801bb5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb5e:	200b      	movs	r0, #11
 801bb60:	b020      	add	sp, #128	@ 0x80
 801bb62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb66:	bf00      	nop
 801bb68:	0802d8f8 	.word	0x0802d8f8

0801bb6c <rclc_subscription_init_default>:
 801bb6c:	2b00      	cmp	r3, #0
 801bb6e:	bf18      	it	ne
 801bb70:	2a00      	cmpne	r2, #0
 801bb72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb76:	4616      	mov	r6, r2
 801bb78:	bf0c      	ite	eq
 801bb7a:	2201      	moveq	r2, #1
 801bb7c:	2200      	movne	r2, #0
 801bb7e:	b0a0      	sub	sp, #128	@ 0x80
 801bb80:	2900      	cmp	r1, #0
 801bb82:	bf08      	it	eq
 801bb84:	f042 0201 	orreq.w	r2, r2, #1
 801bb88:	bb1a      	cbnz	r2, 801bbd2 <rclc_subscription_init_default+0x66>
 801bb8a:	4604      	mov	r4, r0
 801bb8c:	b308      	cbz	r0, 801bbd2 <rclc_subscription_init_default+0x66>
 801bb8e:	f10d 0810 	add.w	r8, sp, #16
 801bb92:	461f      	mov	r7, r3
 801bb94:	460d      	mov	r5, r1
 801bb96:	f005 fe07 	bl	80217a8 <rcl_get_zero_initialized_subscription>
 801bb9a:	6020      	str	r0, [r4, #0]
 801bb9c:	4640      	mov	r0, r8
 801bb9e:	f005 feb7 	bl	8021910 <rcl_subscription_get_default_options>
 801bba2:	2250      	movs	r2, #80	@ 0x50
 801bba4:	490d      	ldr	r1, [pc, #52]	@ (801bbdc <rclc_subscription_init_default+0x70>)
 801bba6:	4640      	mov	r0, r8
 801bba8:	f00c fc71 	bl	802848e <memcpy>
 801bbac:	463b      	mov	r3, r7
 801bbae:	4632      	mov	r2, r6
 801bbb0:	4629      	mov	r1, r5
 801bbb2:	4620      	mov	r0, r4
 801bbb4:	f8cd 8000 	str.w	r8, [sp]
 801bbb8:	f005 fdfc 	bl	80217b4 <rcl_subscription_init>
 801bbbc:	b910      	cbnz	r0, 801bbc4 <rclc_subscription_init_default+0x58>
 801bbbe:	b020      	add	sp, #128	@ 0x80
 801bbc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbc4:	9003      	str	r0, [sp, #12]
 801bbc6:	f000 f847 	bl	801bc58 <rcutils_reset_error>
 801bbca:	9803      	ldr	r0, [sp, #12]
 801bbcc:	b020      	add	sp, #128	@ 0x80
 801bbce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbd2:	200b      	movs	r0, #11
 801bbd4:	b020      	add	sp, #128	@ 0x80
 801bbd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbda:	bf00      	nop
 801bbdc:	0802d948 	.word	0x0802d948

0801bbe0 <__default_zero_allocate>:
 801bbe0:	f00b bdba 	b.w	8027758 <calloc>

0801bbe4 <__default_reallocate>:
 801bbe4:	f00b bf58 	b.w	8027a98 <realloc>

0801bbe8 <__default_deallocate>:
 801bbe8:	f00b be34 	b.w	8027854 <free>

0801bbec <__default_allocate>:
 801bbec:	f00b be2a 	b.w	8027844 <malloc>

0801bbf0 <rcutils_get_default_allocator>:
 801bbf0:	b510      	push	{r4, lr}
 801bbf2:	4c05      	ldr	r4, [pc, #20]	@ (801bc08 <rcutils_get_default_allocator+0x18>)
 801bbf4:	4686      	mov	lr, r0
 801bbf6:	4684      	mov	ip, r0
 801bbf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bbfa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bbfe:	6823      	ldr	r3, [r4, #0]
 801bc00:	4670      	mov	r0, lr
 801bc02:	f8cc 3000 	str.w	r3, [ip]
 801bc06:	bd10      	pop	{r4, pc}
 801bc08:	200001ac 	.word	0x200001ac

0801bc0c <rcutils_allocator_is_valid>:
 801bc0c:	b158      	cbz	r0, 801bc26 <rcutils_allocator_is_valid+0x1a>
 801bc0e:	6803      	ldr	r3, [r0, #0]
 801bc10:	b143      	cbz	r3, 801bc24 <rcutils_allocator_is_valid+0x18>
 801bc12:	6843      	ldr	r3, [r0, #4]
 801bc14:	b133      	cbz	r3, 801bc24 <rcutils_allocator_is_valid+0x18>
 801bc16:	68c3      	ldr	r3, [r0, #12]
 801bc18:	b123      	cbz	r3, 801bc24 <rcutils_allocator_is_valid+0x18>
 801bc1a:	6880      	ldr	r0, [r0, #8]
 801bc1c:	3800      	subs	r0, #0
 801bc1e:	bf18      	it	ne
 801bc20:	2001      	movne	r0, #1
 801bc22:	4770      	bx	lr
 801bc24:	4618      	mov	r0, r3
 801bc26:	4770      	bx	lr

0801bc28 <rcutils_get_error_string>:
 801bc28:	4b06      	ldr	r3, [pc, #24]	@ (801bc44 <rcutils_get_error_string+0x1c>)
 801bc2a:	781b      	ldrb	r3, [r3, #0]
 801bc2c:	b13b      	cbz	r3, 801bc3e <rcutils_get_error_string+0x16>
 801bc2e:	4b06      	ldr	r3, [pc, #24]	@ (801bc48 <rcutils_get_error_string+0x20>)
 801bc30:	781a      	ldrb	r2, [r3, #0]
 801bc32:	b90a      	cbnz	r2, 801bc38 <rcutils_get_error_string+0x10>
 801bc34:	2201      	movs	r2, #1
 801bc36:	701a      	strb	r2, [r3, #0]
 801bc38:	4b04      	ldr	r3, [pc, #16]	@ (801bc4c <rcutils_get_error_string+0x24>)
 801bc3a:	7818      	ldrb	r0, [r3, #0]
 801bc3c:	4770      	bx	lr
 801bc3e:	4b04      	ldr	r3, [pc, #16]	@ (801bc50 <rcutils_get_error_string+0x28>)
 801bc40:	7818      	ldrb	r0, [r3, #0]
 801bc42:	4770      	bx	lr
 801bc44:	200104d8 	.word	0x200104d8
 801bc48:	200104f1 	.word	0x200104f1
 801bc4c:	200104f0 	.word	0x200104f0
 801bc50:	0802d18c 	.word	0x0802d18c
 801bc54:	00000000 	.word	0x00000000

0801bc58 <rcutils_reset_error>:
 801bc58:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801bc78 <rcutils_reset_error+0x20>
 801bc5c:	2300      	movs	r3, #0
 801bc5e:	4a08      	ldr	r2, [pc, #32]	@ (801bc80 <rcutils_reset_error+0x28>)
 801bc60:	4808      	ldr	r0, [pc, #32]	@ (801bc84 <rcutils_reset_error+0x2c>)
 801bc62:	8013      	strh	r3, [r2, #0]
 801bc64:	4908      	ldr	r1, [pc, #32]	@ (801bc88 <rcutils_reset_error+0x30>)
 801bc66:	7003      	strb	r3, [r0, #0]
 801bc68:	700b      	strb	r3, [r1, #0]
 801bc6a:	ed82 7b02 	vstr	d7, [r2, #8]
 801bc6e:	4a07      	ldr	r2, [pc, #28]	@ (801bc8c <rcutils_reset_error+0x34>)
 801bc70:	7013      	strb	r3, [r2, #0]
 801bc72:	4770      	bx	lr
 801bc74:	f3af 8000 	nop.w
	...
 801bc80:	200104e0 	.word	0x200104e0
 801bc84:	200104f1 	.word	0x200104f1
 801bc88:	200104f0 	.word	0x200104f0
 801bc8c:	200104d8 	.word	0x200104d8

0801bc90 <rcutils_system_time_now>:
 801bc90:	b300      	cbz	r0, 801bcd4 <rcutils_system_time_now+0x44>
 801bc92:	b570      	push	{r4, r5, r6, lr}
 801bc94:	b084      	sub	sp, #16
 801bc96:	4604      	mov	r4, r0
 801bc98:	2001      	movs	r0, #1
 801bc9a:	4669      	mov	r1, sp
 801bc9c:	f7e4 fd70 	bl	8000780 <clock_gettime>
 801bca0:	e9dd 3100 	ldrd	r3, r1, [sp]
 801bca4:	2900      	cmp	r1, #0
 801bca6:	db12      	blt.n	801bcce <rcutils_system_time_now+0x3e>
 801bca8:	ea53 0201 	orrs.w	r2, r3, r1
 801bcac:	9d02      	ldr	r5, [sp, #8]
 801bcae:	d101      	bne.n	801bcb4 <rcutils_system_time_now+0x24>
 801bcb0:	2d00      	cmp	r5, #0
 801bcb2:	db0c      	blt.n	801bcce <rcutils_system_time_now+0x3e>
 801bcb4:	4e08      	ldr	r6, [pc, #32]	@ (801bcd8 <rcutils_system_time_now+0x48>)
 801bcb6:	2000      	movs	r0, #0
 801bcb8:	fba3 3206 	umull	r3, r2, r3, r6
 801bcbc:	195b      	adds	r3, r3, r5
 801bcbe:	fb06 2201 	mla	r2, r6, r1, r2
 801bcc2:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 801bcc6:	e9c4 3200 	strd	r3, r2, [r4]
 801bcca:	b004      	add	sp, #16
 801bccc:	bd70      	pop	{r4, r5, r6, pc}
 801bcce:	2002      	movs	r0, #2
 801bcd0:	b004      	add	sp, #16
 801bcd2:	bd70      	pop	{r4, r5, r6, pc}
 801bcd4:	200b      	movs	r0, #11
 801bcd6:	4770      	bx	lr
 801bcd8:	3b9aca00 	.word	0x3b9aca00

0801bcdc <rcutils_steady_time_now>:
 801bcdc:	b300      	cbz	r0, 801bd20 <rcutils_steady_time_now+0x44>
 801bcde:	b570      	push	{r4, r5, r6, lr}
 801bce0:	b084      	sub	sp, #16
 801bce2:	4604      	mov	r4, r0
 801bce4:	2000      	movs	r0, #0
 801bce6:	4669      	mov	r1, sp
 801bce8:	f7e4 fd4a 	bl	8000780 <clock_gettime>
 801bcec:	e9dd 3100 	ldrd	r3, r1, [sp]
 801bcf0:	2900      	cmp	r1, #0
 801bcf2:	db12      	blt.n	801bd1a <rcutils_steady_time_now+0x3e>
 801bcf4:	ea53 0201 	orrs.w	r2, r3, r1
 801bcf8:	9d02      	ldr	r5, [sp, #8]
 801bcfa:	d101      	bne.n	801bd00 <rcutils_steady_time_now+0x24>
 801bcfc:	2d00      	cmp	r5, #0
 801bcfe:	db0c      	blt.n	801bd1a <rcutils_steady_time_now+0x3e>
 801bd00:	4e08      	ldr	r6, [pc, #32]	@ (801bd24 <rcutils_steady_time_now+0x48>)
 801bd02:	2000      	movs	r0, #0
 801bd04:	fba3 3206 	umull	r3, r2, r3, r6
 801bd08:	195b      	adds	r3, r3, r5
 801bd0a:	fb06 2201 	mla	r2, r6, r1, r2
 801bd0e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 801bd12:	e9c4 3200 	strd	r3, r2, [r4]
 801bd16:	b004      	add	sp, #16
 801bd18:	bd70      	pop	{r4, r5, r6, pc}
 801bd1a:	2002      	movs	r0, #2
 801bd1c:	b004      	add	sp, #16
 801bd1e:	bd70      	pop	{r4, r5, r6, pc}
 801bd20:	200b      	movs	r0, #11
 801bd22:	4770      	bx	lr
 801bd24:	3b9aca00 	.word	0x3b9aca00

0801bd28 <rmw_get_default_publisher_options>:
 801bd28:	2200      	movs	r2, #0
 801bd2a:	6002      	str	r2, [r0, #0]
 801bd2c:	7102      	strb	r2, [r0, #4]
 801bd2e:	4770      	bx	lr

0801bd30 <rmw_uros_set_custom_transport>:
 801bd30:	b470      	push	{r4, r5, r6}
 801bd32:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 801bd36:	b162      	cbz	r2, 801bd52 <rmw_uros_set_custom_transport+0x22>
 801bd38:	b15b      	cbz	r3, 801bd52 <rmw_uros_set_custom_transport+0x22>
 801bd3a:	b155      	cbz	r5, 801bd52 <rmw_uros_set_custom_transport+0x22>
 801bd3c:	b14e      	cbz	r6, 801bd52 <rmw_uros_set_custom_transport+0x22>
 801bd3e:	4c06      	ldr	r4, [pc, #24]	@ (801bd58 <rmw_uros_set_custom_transport+0x28>)
 801bd40:	7020      	strb	r0, [r4, #0]
 801bd42:	2000      	movs	r0, #0
 801bd44:	6166      	str	r6, [r4, #20]
 801bd46:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801bd4a:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801bd4e:	bc70      	pop	{r4, r5, r6}
 801bd50:	4770      	bx	lr
 801bd52:	200b      	movs	r0, #11
 801bd54:	bc70      	pop	{r4, r5, r6}
 801bd56:	4770      	bx	lr
 801bd58:	200104f4 	.word	0x200104f4

0801bd5c <flush_session>:
 801bd5c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 801bd5e:	f002 bf8f 	b.w	801ec80 <uxr_run_session_until_confirm_delivery>
 801bd62:	bf00      	nop

0801bd64 <rmw_publish>:
 801bd64:	2800      	cmp	r0, #0
 801bd66:	d053      	beq.n	801be10 <rmw_publish+0xac>
 801bd68:	b570      	push	{r4, r5, r6, lr}
 801bd6a:	460d      	mov	r5, r1
 801bd6c:	b08e      	sub	sp, #56	@ 0x38
 801bd6e:	2900      	cmp	r1, #0
 801bd70:	d04b      	beq.n	801be0a <rmw_publish+0xa6>
 801bd72:	4604      	mov	r4, r0
 801bd74:	6800      	ldr	r0, [r0, #0]
 801bd76:	f000 fcff 	bl	801c778 <is_uxrce_rmw_identifier_valid>
 801bd7a:	2800      	cmp	r0, #0
 801bd7c:	d045      	beq.n	801be0a <rmw_publish+0xa6>
 801bd7e:	6866      	ldr	r6, [r4, #4]
 801bd80:	2e00      	cmp	r6, #0
 801bd82:	d042      	beq.n	801be0a <rmw_publish+0xa6>
 801bd84:	69b4      	ldr	r4, [r6, #24]
 801bd86:	4628      	mov	r0, r5
 801bd88:	6923      	ldr	r3, [r4, #16]
 801bd8a:	4798      	blx	r3
 801bd8c:	69f3      	ldr	r3, [r6, #28]
 801bd8e:	9005      	str	r0, [sp, #20]
 801bd90:	b113      	cbz	r3, 801bd98 <rmw_publish+0x34>
 801bd92:	a805      	add	r0, sp, #20
 801bd94:	4798      	blx	r3
 801bd96:	9805      	ldr	r0, [sp, #20]
 801bd98:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801bd9c:	691b      	ldr	r3, [r3, #16]
 801bd9e:	9000      	str	r0, [sp, #0]
 801bda0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801bda4:	6972      	ldr	r2, [r6, #20]
 801bda6:	ab06      	add	r3, sp, #24
 801bda8:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 801bdaa:	f003 fd67 	bl	801f87c <uxr_prepare_output_stream>
 801bdae:	b1d8      	cbz	r0, 801bde8 <rmw_publish+0x84>
 801bdb0:	68a3      	ldr	r3, [r4, #8]
 801bdb2:	a906      	add	r1, sp, #24
 801bdb4:	4628      	mov	r0, r5
 801bdb6:	4798      	blx	r3
 801bdb8:	6a33      	ldr	r3, [r6, #32]
 801bdba:	4604      	mov	r4, r0
 801bdbc:	b10b      	cbz	r3, 801bdc2 <rmw_publish+0x5e>
 801bdbe:	a806      	add	r0, sp, #24
 801bdc0:	4798      	blx	r3
 801bdc2:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 801bdc6:	2b01      	cmp	r3, #1
 801bdc8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801bdcc:	d022      	beq.n	801be14 <rmw_publish+0xb0>
 801bdce:	6918      	ldr	r0, [r3, #16]
 801bdd0:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 801bdd2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801bdd6:	f002 ff53 	bl	801ec80 <uxr_run_session_until_confirm_delivery>
 801bdda:	4020      	ands	r0, r4
 801bddc:	b2c4      	uxtb	r4, r0
 801bdde:	f084 0001 	eor.w	r0, r4, #1
 801bde2:	b2c0      	uxtb	r0, r0
 801bde4:	b00e      	add	sp, #56	@ 0x38
 801bde6:	bd70      	pop	{r4, r5, r6, pc}
 801bde8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801bdec:	6918      	ldr	r0, [r3, #16]
 801bdee:	9b05      	ldr	r3, [sp, #20]
 801bdf0:	9602      	str	r6, [sp, #8]
 801bdf2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801bdf6:	9300      	str	r3, [sp, #0]
 801bdf8:	4b09      	ldr	r3, [pc, #36]	@ (801be20 <rmw_publish+0xbc>)
 801bdfa:	9301      	str	r3, [sp, #4]
 801bdfc:	ab06      	add	r3, sp, #24
 801bdfe:	6972      	ldr	r2, [r6, #20]
 801be00:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 801be02:	f003 fd6b 	bl	801f8dc <uxr_prepare_output_stream_fragmented>
 801be06:	2800      	cmp	r0, #0
 801be08:	d1d2      	bne.n	801bdb0 <rmw_publish+0x4c>
 801be0a:	2001      	movs	r0, #1
 801be0c:	b00e      	add	sp, #56	@ 0x38
 801be0e:	bd70      	pop	{r4, r5, r6, pc}
 801be10:	2001      	movs	r0, #1
 801be12:	4770      	bx	lr
 801be14:	6918      	ldr	r0, [r3, #16]
 801be16:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801be1a:	f002 fb77 	bl	801e50c <uxr_flash_output_streams>
 801be1e:	e7de      	b.n	801bdde <rmw_publish+0x7a>
 801be20:	0801bd5d 	.word	0x0801bd5d

0801be24 <rmw_create_publisher>:
 801be24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be28:	b087      	sub	sp, #28
 801be2a:	2800      	cmp	r0, #0
 801be2c:	f000 80d2 	beq.w	801bfd4 <rmw_create_publisher+0x1b0>
 801be30:	460e      	mov	r6, r1
 801be32:	2900      	cmp	r1, #0
 801be34:	f000 80ce 	beq.w	801bfd4 <rmw_create_publisher+0x1b0>
 801be38:	4604      	mov	r4, r0
 801be3a:	6800      	ldr	r0, [r0, #0]
 801be3c:	4615      	mov	r5, r2
 801be3e:	461f      	mov	r7, r3
 801be40:	f000 fc9a 	bl	801c778 <is_uxrce_rmw_identifier_valid>
 801be44:	f080 0001 	eor.w	r0, r0, #1
 801be48:	b2c0      	uxtb	r0, r0
 801be4a:	2800      	cmp	r0, #0
 801be4c:	f040 80c2 	bne.w	801bfd4 <rmw_create_publisher+0x1b0>
 801be50:	2d00      	cmp	r5, #0
 801be52:	f000 80bf 	beq.w	801bfd4 <rmw_create_publisher+0x1b0>
 801be56:	782b      	ldrb	r3, [r5, #0]
 801be58:	2b00      	cmp	r3, #0
 801be5a:	f000 80bb 	beq.w	801bfd4 <rmw_create_publisher+0x1b0>
 801be5e:	2f00      	cmp	r7, #0
 801be60:	f000 80b8 	beq.w	801bfd4 <rmw_create_publisher+0x1b0>
 801be64:	485e      	ldr	r0, [pc, #376]	@ (801bfe0 <rmw_create_publisher+0x1bc>)
 801be66:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801be6a:	f008 f88f 	bl	8023f8c <get_memory>
 801be6e:	2800      	cmp	r0, #0
 801be70:	f000 80b0 	beq.w	801bfd4 <rmw_create_publisher+0x1b0>
 801be74:	6884      	ldr	r4, [r0, #8]
 801be76:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 801be7a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 801be7e:	f008 f8ed 	bl	802405c <rmw_get_implementation_identifier>
 801be82:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 801be86:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 801be8a:	4628      	mov	r0, r5
 801be8c:	f7e4 f9e2 	bl	8000254 <strlen>
 801be90:	3001      	adds	r0, #1
 801be92:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 801be96:	283c      	cmp	r0, #60	@ 0x3c
 801be98:	f200 808f 	bhi.w	801bfba <rmw_create_publisher+0x196>
 801be9c:	462b      	mov	r3, r5
 801be9e:	4a51      	ldr	r2, [pc, #324]	@ (801bfe4 <rmw_create_publisher+0x1c0>)
 801bea0:	213c      	movs	r1, #60	@ 0x3c
 801bea2:	4650      	mov	r0, sl
 801bea4:	f00c f858 	bl	8027f58 <sniprintf>
 801bea8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801beac:	4639      	mov	r1, r7
 801beae:	2250      	movs	r2, #80	@ 0x50
 801beb0:	67e3      	str	r3, [r4, #124]	@ 0x7c
 801beb2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801beb6:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 801beba:	f00c fae8 	bl	802848e <memcpy>
 801bebe:	7a3b      	ldrb	r3, [r7, #8]
 801bec0:	4630      	mov	r0, r6
 801bec2:	4949      	ldr	r1, [pc, #292]	@ (801bfe8 <rmw_create_publisher+0x1c4>)
 801bec4:	2b02      	cmp	r3, #2
 801bec6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801beca:	bf0c      	ite	eq
 801becc:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 801bed0:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 801bed4:	67a3      	str	r3, [r4, #120]	@ 0x78
 801bed6:	2300      	movs	r3, #0
 801bed8:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801bedc:	f000 fc5a 	bl	801c794 <get_message_typesupport_handle>
 801bee0:	2800      	cmp	r0, #0
 801bee2:	d06a      	beq.n	801bfba <rmw_create_publisher+0x196>
 801bee4:	6842      	ldr	r2, [r0, #4]
 801bee6:	61a2      	str	r2, [r4, #24]
 801bee8:	2a00      	cmp	r2, #0
 801beea:	d066      	beq.n	801bfba <rmw_create_publisher+0x196>
 801beec:	4629      	mov	r1, r5
 801beee:	463b      	mov	r3, r7
 801bef0:	4648      	mov	r0, r9
 801bef2:	f008 fb41 	bl	8024578 <create_topic>
 801bef6:	6260      	str	r0, [r4, #36]	@ 0x24
 801bef8:	2800      	cmp	r0, #0
 801befa:	d062      	beq.n	801bfc2 <rmw_create_publisher+0x19e>
 801befc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801bf00:	2103      	movs	r1, #3
 801bf02:	2506      	movs	r5, #6
 801bf04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801bf08:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 801bf0c:	1c42      	adds	r2, r0, #1
 801bf0e:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 801bf12:	f002 f9a9 	bl	801e268 <uxr_object_id>
 801bf16:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 801bf1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801bf1e:	6120      	str	r0, [r4, #16]
 801bf20:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 801bf24:	6910      	ldr	r0, [r2, #16]
 801bf26:	9500      	str	r5, [sp, #0]
 801bf28:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801bf2c:	6819      	ldr	r1, [r3, #0]
 801bf2e:	6922      	ldr	r2, [r4, #16]
 801bf30:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801bf34:	f002 f84a 	bl	801dfcc <uxr_buffer_create_publisher_bin>
 801bf38:	4602      	mov	r2, r0
 801bf3a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801bf3e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801bf42:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801bf46:	f000 fb9d 	bl	801c684 <run_xrce_session>
 801bf4a:	b3b0      	cbz	r0, 801bfba <rmw_create_publisher+0x196>
 801bf4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801bf50:	2105      	movs	r1, #5
 801bf52:	f10d 0a10 	add.w	sl, sp, #16
 801bf56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801bf5a:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 801bf5e:	1c42      	adds	r2, r0, #1
 801bf60:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 801bf64:	f002 f980 	bl	801e268 <uxr_object_id>
 801bf68:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801bf6c:	4639      	mov	r1, r7
 801bf6e:	6160      	str	r0, [r4, #20]
 801bf70:	691e      	ldr	r6, [r3, #16]
 801bf72:	4650      	mov	r0, sl
 801bf74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801bf78:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 801bf7c:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 801bf80:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 801bf84:	f000 fb9a 	bl	801c6bc <convert_qos_profile>
 801bf88:	9503      	str	r5, [sp, #12]
 801bf8a:	e89a 0003 	ldmia.w	sl, {r0, r1}
 801bf8e:	9001      	str	r0, [sp, #4]
 801bf90:	4630      	mov	r0, r6
 801bf92:	f8ad 1008 	strh.w	r1, [sp, #8]
 801bf96:	f8db 3010 	ldr.w	r3, [fp, #16]
 801bf9a:	9300      	str	r3, [sp, #0]
 801bf9c:	6839      	ldr	r1, [r7, #0]
 801bf9e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801bfa2:	f002 f873 	bl	801e08c <uxr_buffer_create_datawriter_bin>
 801bfa6:	4602      	mov	r2, r0
 801bfa8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801bfac:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801bfb0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801bfb4:	f000 fb66 	bl	801c684 <run_xrce_session>
 801bfb8:	b970      	cbnz	r0, 801bfd8 <rmw_create_publisher+0x1b4>
 801bfba:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801bfbc:	b108      	cbz	r0, 801bfc2 <rmw_create_publisher+0x19e>
 801bfbe:	f000 fa53 	bl	801c468 <rmw_uxrce_fini_topic_memory>
 801bfc2:	4640      	mov	r0, r8
 801bfc4:	f04f 0800 	mov.w	r8, #0
 801bfc8:	f000 f9f6 	bl	801c3b8 <rmw_uxrce_fini_publisher_memory>
 801bfcc:	4640      	mov	r0, r8
 801bfce:	b007      	add	sp, #28
 801bfd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfd4:	f04f 0800 	mov.w	r8, #0
 801bfd8:	4640      	mov	r0, r8
 801bfda:	b007      	add	sp, #28
 801bfdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfe0:	20014dec 	.word	0x20014dec
 801bfe4:	0802d000 	.word	0x0802d000
 801bfe8:	0802cf68 	.word	0x0802cf68

0801bfec <rmw_publisher_get_actual_qos>:
 801bfec:	b178      	cbz	r0, 801c00e <rmw_publisher_get_actual_qos+0x22>
 801bfee:	b510      	push	{r4, lr}
 801bff0:	fab1 f481 	clz	r4, r1
 801bff4:	0964      	lsrs	r4, r4, #5
 801bff6:	b141      	cbz	r1, 801c00a <rmw_publisher_get_actual_qos+0x1e>
 801bff8:	6843      	ldr	r3, [r0, #4]
 801bffa:	2250      	movs	r2, #80	@ 0x50
 801bffc:	4608      	mov	r0, r1
 801bffe:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 801c002:	f00c fa44 	bl	802848e <memcpy>
 801c006:	4620      	mov	r0, r4
 801c008:	bd10      	pop	{r4, pc}
 801c00a:	200b      	movs	r0, #11
 801c00c:	bd10      	pop	{r4, pc}
 801c00e:	200b      	movs	r0, #11
 801c010:	4770      	bx	lr
 801c012:	bf00      	nop

0801c014 <rmw_destroy_publisher>:
 801c014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c018:	b128      	cbz	r0, 801c026 <rmw_destroy_publisher+0x12>
 801c01a:	4604      	mov	r4, r0
 801c01c:	6800      	ldr	r0, [r0, #0]
 801c01e:	460d      	mov	r5, r1
 801c020:	f000 fbaa 	bl	801c778 <is_uxrce_rmw_identifier_valid>
 801c024:	b918      	cbnz	r0, 801c02e <rmw_destroy_publisher+0x1a>
 801c026:	2401      	movs	r4, #1
 801c028:	4620      	mov	r0, r4
 801c02a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c02e:	6863      	ldr	r3, [r4, #4]
 801c030:	2b00      	cmp	r3, #0
 801c032:	d0f8      	beq.n	801c026 <rmw_destroy_publisher+0x12>
 801c034:	fab5 f485 	clz	r4, r5
 801c038:	0964      	lsrs	r4, r4, #5
 801c03a:	2d00      	cmp	r5, #0
 801c03c:	d0f3      	beq.n	801c026 <rmw_destroy_publisher+0x12>
 801c03e:	6828      	ldr	r0, [r5, #0]
 801c040:	f000 fb9a 	bl	801c778 <is_uxrce_rmw_identifier_valid>
 801c044:	2800      	cmp	r0, #0
 801c046:	d0ee      	beq.n	801c026 <rmw_destroy_publisher+0x12>
 801c048:	686e      	ldr	r6, [r5, #4]
 801c04a:	2e00      	cmp	r6, #0
 801c04c:	d0eb      	beq.n	801c026 <rmw_destroy_publisher+0x12>
 801c04e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 801c050:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 801c054:	f008 fae0 	bl	8024618 <destroy_topic>
 801c058:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801c05c:	6972      	ldr	r2, [r6, #20]
 801c05e:	6918      	ldr	r0, [r3, #16]
 801c060:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801c064:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801c068:	6819      	ldr	r1, [r3, #0]
 801c06a:	f001 fefb 	bl	801de64 <uxr_buffer_delete_entity>
 801c06e:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801c072:	4680      	mov	r8, r0
 801c074:	6932      	ldr	r2, [r6, #16]
 801c076:	6918      	ldr	r0, [r3, #16]
 801c078:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801c07c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801c080:	6819      	ldr	r1, [r3, #0]
 801c082:	f001 feef 	bl	801de64 <uxr_buffer_delete_entity>
 801c086:	4606      	mov	r6, r0
 801c088:	6938      	ldr	r0, [r7, #16]
 801c08a:	4642      	mov	r2, r8
 801c08c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801c090:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801c094:	f000 faf6 	bl	801c684 <run_xrce_session>
 801c098:	693f      	ldr	r7, [r7, #16]
 801c09a:	4632      	mov	r2, r6
 801c09c:	4606      	mov	r6, r0
 801c09e:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801c0a2:	4638      	mov	r0, r7
 801c0a4:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 801c0a8:	f000 faec 	bl	801c684 <run_xrce_session>
 801c0ac:	b126      	cbz	r6, 801c0b8 <rmw_destroy_publisher+0xa4>
 801c0ae:	b118      	cbz	r0, 801c0b8 <rmw_destroy_publisher+0xa4>
 801c0b0:	4628      	mov	r0, r5
 801c0b2:	f000 f981 	bl	801c3b8 <rmw_uxrce_fini_publisher_memory>
 801c0b6:	e7b7      	b.n	801c028 <rmw_destroy_publisher+0x14>
 801c0b8:	2402      	movs	r4, #2
 801c0ba:	e7f9      	b.n	801c0b0 <rmw_destroy_publisher+0x9c>

0801c0bc <rmw_uxrce_init_service_memory>:
 801c0bc:	b1e2      	cbz	r2, 801c0f8 <rmw_uxrce_init_service_memory+0x3c>
 801c0be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c0c2:	7b05      	ldrb	r5, [r0, #12]
 801c0c4:	4606      	mov	r6, r0
 801c0c6:	b9ad      	cbnz	r5, 801c0f4 <rmw_uxrce_init_service_memory+0x38>
 801c0c8:	23c8      	movs	r3, #200	@ 0xc8
 801c0ca:	4617      	mov	r7, r2
 801c0cc:	460c      	mov	r4, r1
 801c0ce:	46a8      	mov	r8, r5
 801c0d0:	6083      	str	r3, [r0, #8]
 801c0d2:	f240 1301 	movw	r3, #257	@ 0x101
 801c0d6:	e9c0 5500 	strd	r5, r5, [r0]
 801c0da:	8183      	strh	r3, [r0, #12]
 801c0dc:	3501      	adds	r5, #1
 801c0de:	4621      	mov	r1, r4
 801c0e0:	4630      	mov	r0, r6
 801c0e2:	f007 ff63 	bl	8023fac <put_memory>
 801c0e6:	42af      	cmp	r7, r5
 801c0e8:	60a4      	str	r4, [r4, #8]
 801c0ea:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 801c0ee:	f804 8cbc 	strb.w	r8, [r4, #-188]
 801c0f2:	d1f3      	bne.n	801c0dc <rmw_uxrce_init_service_memory+0x20>
 801c0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c0f8:	4770      	bx	lr
 801c0fa:	bf00      	nop

0801c0fc <rmw_uxrce_init_client_memory>:
 801c0fc:	b1e2      	cbz	r2, 801c138 <rmw_uxrce_init_client_memory+0x3c>
 801c0fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c102:	7b05      	ldrb	r5, [r0, #12]
 801c104:	4606      	mov	r6, r0
 801c106:	b9ad      	cbnz	r5, 801c134 <rmw_uxrce_init_client_memory+0x38>
 801c108:	23c8      	movs	r3, #200	@ 0xc8
 801c10a:	4617      	mov	r7, r2
 801c10c:	460c      	mov	r4, r1
 801c10e:	46a8      	mov	r8, r5
 801c110:	6083      	str	r3, [r0, #8]
 801c112:	f240 1301 	movw	r3, #257	@ 0x101
 801c116:	e9c0 5500 	strd	r5, r5, [r0]
 801c11a:	8183      	strh	r3, [r0, #12]
 801c11c:	3501      	adds	r5, #1
 801c11e:	4621      	mov	r1, r4
 801c120:	4630      	mov	r0, r6
 801c122:	f007 ff43 	bl	8023fac <put_memory>
 801c126:	42af      	cmp	r7, r5
 801c128:	60a4      	str	r4, [r4, #8]
 801c12a:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 801c12e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 801c132:	d1f3      	bne.n	801c11c <rmw_uxrce_init_client_memory+0x20>
 801c134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c138:	4770      	bx	lr
 801c13a:	bf00      	nop

0801c13c <rmw_uxrce_init_publisher_memory>:
 801c13c:	b1e2      	cbz	r2, 801c178 <rmw_uxrce_init_publisher_memory+0x3c>
 801c13e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c142:	7b05      	ldrb	r5, [r0, #12]
 801c144:	4606      	mov	r6, r0
 801c146:	b9ad      	cbnz	r5, 801c174 <rmw_uxrce_init_publisher_memory+0x38>
 801c148:	23d8      	movs	r3, #216	@ 0xd8
 801c14a:	4617      	mov	r7, r2
 801c14c:	460c      	mov	r4, r1
 801c14e:	46a8      	mov	r8, r5
 801c150:	6083      	str	r3, [r0, #8]
 801c152:	f240 1301 	movw	r3, #257	@ 0x101
 801c156:	e9c0 5500 	strd	r5, r5, [r0]
 801c15a:	8183      	strh	r3, [r0, #12]
 801c15c:	3501      	adds	r5, #1
 801c15e:	4621      	mov	r1, r4
 801c160:	4630      	mov	r0, r6
 801c162:	f007 ff23 	bl	8023fac <put_memory>
 801c166:	42af      	cmp	r7, r5
 801c168:	60a4      	str	r4, [r4, #8]
 801c16a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 801c16e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 801c172:	d1f3      	bne.n	801c15c <rmw_uxrce_init_publisher_memory+0x20>
 801c174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c178:	4770      	bx	lr
 801c17a:	bf00      	nop

0801c17c <rmw_uxrce_init_subscription_memory>:
 801c17c:	b1e2      	cbz	r2, 801c1b8 <rmw_uxrce_init_subscription_memory+0x3c>
 801c17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c182:	7b05      	ldrb	r5, [r0, #12]
 801c184:	4606      	mov	r6, r0
 801c186:	b9ad      	cbnz	r5, 801c1b4 <rmw_uxrce_init_subscription_memory+0x38>
 801c188:	23d8      	movs	r3, #216	@ 0xd8
 801c18a:	4617      	mov	r7, r2
 801c18c:	460c      	mov	r4, r1
 801c18e:	46a8      	mov	r8, r5
 801c190:	6083      	str	r3, [r0, #8]
 801c192:	f240 1301 	movw	r3, #257	@ 0x101
 801c196:	e9c0 5500 	strd	r5, r5, [r0]
 801c19a:	8183      	strh	r3, [r0, #12]
 801c19c:	3501      	adds	r5, #1
 801c19e:	4621      	mov	r1, r4
 801c1a0:	4630      	mov	r0, r6
 801c1a2:	f007 ff03 	bl	8023fac <put_memory>
 801c1a6:	42af      	cmp	r7, r5
 801c1a8:	60a4      	str	r4, [r4, #8]
 801c1aa:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 801c1ae:	f804 8ccc 	strb.w	r8, [r4, #-204]
 801c1b2:	d1f3      	bne.n	801c19c <rmw_uxrce_init_subscription_memory+0x20>
 801c1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c1b8:	4770      	bx	lr
 801c1ba:	bf00      	nop

0801c1bc <rmw_uxrce_init_node_memory>:
 801c1bc:	b1e2      	cbz	r2, 801c1f8 <rmw_uxrce_init_node_memory+0x3c>
 801c1be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c1c2:	7b05      	ldrb	r5, [r0, #12]
 801c1c4:	4606      	mov	r6, r0
 801c1c6:	b9ad      	cbnz	r5, 801c1f4 <rmw_uxrce_init_node_memory+0x38>
 801c1c8:	23a4      	movs	r3, #164	@ 0xa4
 801c1ca:	4617      	mov	r7, r2
 801c1cc:	460c      	mov	r4, r1
 801c1ce:	46a8      	mov	r8, r5
 801c1d0:	6083      	str	r3, [r0, #8]
 801c1d2:	f240 1301 	movw	r3, #257	@ 0x101
 801c1d6:	e9c0 5500 	strd	r5, r5, [r0]
 801c1da:	8183      	strh	r3, [r0, #12]
 801c1dc:	3501      	adds	r5, #1
 801c1de:	4621      	mov	r1, r4
 801c1e0:	4630      	mov	r0, r6
 801c1e2:	f007 fee3 	bl	8023fac <put_memory>
 801c1e6:	42af      	cmp	r7, r5
 801c1e8:	60a4      	str	r4, [r4, #8]
 801c1ea:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 801c1ee:	f804 8c98 	strb.w	r8, [r4, #-152]
 801c1f2:	d1f3      	bne.n	801c1dc <rmw_uxrce_init_node_memory+0x20>
 801c1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c1f8:	4770      	bx	lr
 801c1fa:	bf00      	nop

0801c1fc <rmw_uxrce_init_session_memory>:
 801c1fc:	b1ea      	cbz	r2, 801c23a <rmw_uxrce_init_session_memory+0x3e>
 801c1fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c202:	7b05      	ldrb	r5, [r0, #12]
 801c204:	4606      	mov	r6, r0
 801c206:	b9b5      	cbnz	r5, 801c236 <rmw_uxrce_init_session_memory+0x3a>
 801c208:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 801c20c:	f240 1301 	movw	r3, #257	@ 0x101
 801c210:	4617      	mov	r7, r2
 801c212:	460c      	mov	r4, r1
 801c214:	46a9      	mov	r9, r5
 801c216:	f8c0 8008 	str.w	r8, [r0, #8]
 801c21a:	8183      	strh	r3, [r0, #12]
 801c21c:	e9c0 5500 	strd	r5, r5, [r0]
 801c220:	3501      	adds	r5, #1
 801c222:	4621      	mov	r1, r4
 801c224:	4630      	mov	r0, r6
 801c226:	f007 fec1 	bl	8023fac <put_memory>
 801c22a:	42af      	cmp	r7, r5
 801c22c:	60a4      	str	r4, [r4, #8]
 801c22e:	f884 900c 	strb.w	r9, [r4, #12]
 801c232:	4444      	add	r4, r8
 801c234:	d1f4      	bne.n	801c220 <rmw_uxrce_init_session_memory+0x24>
 801c236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c23a:	4770      	bx	lr

0801c23c <rmw_uxrce_init_topic_memory>:
 801c23c:	b1e2      	cbz	r2, 801c278 <rmw_uxrce_init_topic_memory+0x3c>
 801c23e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c242:	7b05      	ldrb	r5, [r0, #12]
 801c244:	4606      	mov	r6, r0
 801c246:	b9ad      	cbnz	r5, 801c274 <rmw_uxrce_init_topic_memory+0x38>
 801c248:	231c      	movs	r3, #28
 801c24a:	4617      	mov	r7, r2
 801c24c:	460c      	mov	r4, r1
 801c24e:	46a8      	mov	r8, r5
 801c250:	6083      	str	r3, [r0, #8]
 801c252:	f240 1301 	movw	r3, #257	@ 0x101
 801c256:	e9c0 5500 	strd	r5, r5, [r0]
 801c25a:	8183      	strh	r3, [r0, #12]
 801c25c:	3501      	adds	r5, #1
 801c25e:	4621      	mov	r1, r4
 801c260:	4630      	mov	r0, r6
 801c262:	f007 fea3 	bl	8023fac <put_memory>
 801c266:	42af      	cmp	r7, r5
 801c268:	60a4      	str	r4, [r4, #8]
 801c26a:	f104 041c 	add.w	r4, r4, #28
 801c26e:	f804 8c10 	strb.w	r8, [r4, #-16]
 801c272:	d1f3      	bne.n	801c25c <rmw_uxrce_init_topic_memory+0x20>
 801c274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c278:	4770      	bx	lr
 801c27a:	bf00      	nop

0801c27c <rmw_uxrce_init_static_input_buffer_memory>:
 801c27c:	b1ea      	cbz	r2, 801c2ba <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 801c27e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c282:	7b05      	ldrb	r5, [r0, #12]
 801c284:	4606      	mov	r6, r0
 801c286:	b9b5      	cbnz	r5, 801c2b6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 801c288:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 801c28c:	4617      	mov	r7, r2
 801c28e:	460c      	mov	r4, r1
 801c290:	46a8      	mov	r8, r5
 801c292:	6083      	str	r3, [r0, #8]
 801c294:	f240 1301 	movw	r3, #257	@ 0x101
 801c298:	e9c0 5500 	strd	r5, r5, [r0]
 801c29c:	8183      	strh	r3, [r0, #12]
 801c29e:	3501      	adds	r5, #1
 801c2a0:	4621      	mov	r1, r4
 801c2a2:	4630      	mov	r0, r6
 801c2a4:	f007 fe82 	bl	8023fac <put_memory>
 801c2a8:	42af      	cmp	r7, r5
 801c2aa:	60a4      	str	r4, [r4, #8]
 801c2ac:	f884 800c 	strb.w	r8, [r4, #12]
 801c2b0:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 801c2b4:	d1f3      	bne.n	801c29e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 801c2b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c2ba:	4770      	bx	lr

0801c2bc <rmw_uxrce_init_init_options_impl_memory>:
 801c2bc:	b1e2      	cbz	r2, 801c2f8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 801c2be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c2c2:	7b05      	ldrb	r5, [r0, #12]
 801c2c4:	4606      	mov	r6, r0
 801c2c6:	b9ad      	cbnz	r5, 801c2f4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 801c2c8:	232c      	movs	r3, #44	@ 0x2c
 801c2ca:	4617      	mov	r7, r2
 801c2cc:	460c      	mov	r4, r1
 801c2ce:	46a8      	mov	r8, r5
 801c2d0:	6083      	str	r3, [r0, #8]
 801c2d2:	f240 1301 	movw	r3, #257	@ 0x101
 801c2d6:	e9c0 5500 	strd	r5, r5, [r0]
 801c2da:	8183      	strh	r3, [r0, #12]
 801c2dc:	3501      	adds	r5, #1
 801c2de:	4621      	mov	r1, r4
 801c2e0:	4630      	mov	r0, r6
 801c2e2:	f007 fe63 	bl	8023fac <put_memory>
 801c2e6:	42af      	cmp	r7, r5
 801c2e8:	60a4      	str	r4, [r4, #8]
 801c2ea:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 801c2ee:	f804 8c20 	strb.w	r8, [r4, #-32]
 801c2f2:	d1f3      	bne.n	801c2dc <rmw_uxrce_init_init_options_impl_memory+0x20>
 801c2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c2f8:	4770      	bx	lr
 801c2fa:	bf00      	nop

0801c2fc <rmw_uxrce_init_wait_set_memory>:
 801c2fc:	b1e2      	cbz	r2, 801c338 <rmw_uxrce_init_wait_set_memory+0x3c>
 801c2fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c302:	7b05      	ldrb	r5, [r0, #12]
 801c304:	4606      	mov	r6, r0
 801c306:	b9ad      	cbnz	r5, 801c334 <rmw_uxrce_init_wait_set_memory+0x38>
 801c308:	231c      	movs	r3, #28
 801c30a:	4617      	mov	r7, r2
 801c30c:	460c      	mov	r4, r1
 801c30e:	46a8      	mov	r8, r5
 801c310:	6083      	str	r3, [r0, #8]
 801c312:	f240 1301 	movw	r3, #257	@ 0x101
 801c316:	e9c0 5500 	strd	r5, r5, [r0]
 801c31a:	8183      	strh	r3, [r0, #12]
 801c31c:	3501      	adds	r5, #1
 801c31e:	4621      	mov	r1, r4
 801c320:	4630      	mov	r0, r6
 801c322:	f007 fe43 	bl	8023fac <put_memory>
 801c326:	42af      	cmp	r7, r5
 801c328:	60a4      	str	r4, [r4, #8]
 801c32a:	f104 041c 	add.w	r4, r4, #28
 801c32e:	f804 8c10 	strb.w	r8, [r4, #-16]
 801c332:	d1f3      	bne.n	801c31c <rmw_uxrce_init_wait_set_memory+0x20>
 801c334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c338:	4770      	bx	lr
 801c33a:	bf00      	nop

0801c33c <rmw_uxrce_init_guard_condition_memory>:
 801c33c:	b1e2      	cbz	r2, 801c378 <rmw_uxrce_init_guard_condition_memory+0x3c>
 801c33e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c342:	7b05      	ldrb	r5, [r0, #12]
 801c344:	4606      	mov	r6, r0
 801c346:	b9ad      	cbnz	r5, 801c374 <rmw_uxrce_init_guard_condition_memory+0x38>
 801c348:	2320      	movs	r3, #32
 801c34a:	4617      	mov	r7, r2
 801c34c:	460c      	mov	r4, r1
 801c34e:	46a8      	mov	r8, r5
 801c350:	6083      	str	r3, [r0, #8]
 801c352:	f240 1301 	movw	r3, #257	@ 0x101
 801c356:	e9c0 5500 	strd	r5, r5, [r0]
 801c35a:	8183      	strh	r3, [r0, #12]
 801c35c:	3501      	adds	r5, #1
 801c35e:	4621      	mov	r1, r4
 801c360:	4630      	mov	r0, r6
 801c362:	f007 fe23 	bl	8023fac <put_memory>
 801c366:	42af      	cmp	r7, r5
 801c368:	60a4      	str	r4, [r4, #8]
 801c36a:	f104 0420 	add.w	r4, r4, #32
 801c36e:	f804 8c14 	strb.w	r8, [r4, #-20]
 801c372:	d1f3      	bne.n	801c35c <rmw_uxrce_init_guard_condition_memory+0x20>
 801c374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c378:	4770      	bx	lr
 801c37a:	bf00      	nop

0801c37c <rmw_uxrce_fini_session_memory>:
 801c37c:	4601      	mov	r1, r0
 801c37e:	4801      	ldr	r0, [pc, #4]	@ (801c384 <rmw_uxrce_fini_session_memory+0x8>)
 801c380:	f007 be14 	b.w	8023fac <put_memory>
 801c384:	20014e0c 	.word	0x20014e0c

0801c388 <rmw_uxrce_fini_node_memory>:
 801c388:	b538      	push	{r3, r4, r5, lr}
 801c38a:	4604      	mov	r4, r0
 801c38c:	6800      	ldr	r0, [r0, #0]
 801c38e:	b128      	cbz	r0, 801c39c <rmw_uxrce_fini_node_memory+0x14>
 801c390:	4b07      	ldr	r3, [pc, #28]	@ (801c3b0 <rmw_uxrce_fini_node_memory+0x28>)
 801c392:	6819      	ldr	r1, [r3, #0]
 801c394:	f7e3 ff54 	bl	8000240 <strcmp>
 801c398:	b940      	cbnz	r0, 801c3ac <rmw_uxrce_fini_node_memory+0x24>
 801c39a:	6020      	str	r0, [r4, #0]
 801c39c:	6861      	ldr	r1, [r4, #4]
 801c39e:	b129      	cbz	r1, 801c3ac <rmw_uxrce_fini_node_memory+0x24>
 801c3a0:	2500      	movs	r5, #0
 801c3a2:	4804      	ldr	r0, [pc, #16]	@ (801c3b4 <rmw_uxrce_fini_node_memory+0x2c>)
 801c3a4:	610d      	str	r5, [r1, #16]
 801c3a6:	f007 fe01 	bl	8023fac <put_memory>
 801c3aa:	6065      	str	r5, [r4, #4]
 801c3ac:	bd38      	pop	{r3, r4, r5, pc}
 801c3ae:	bf00      	nop
 801c3b0:	0802dc08 	.word	0x0802dc08
 801c3b4:	20014ddc 	.word	0x20014ddc

0801c3b8 <rmw_uxrce_fini_publisher_memory>:
 801c3b8:	b510      	push	{r4, lr}
 801c3ba:	4604      	mov	r4, r0
 801c3bc:	6800      	ldr	r0, [r0, #0]
 801c3be:	b128      	cbz	r0, 801c3cc <rmw_uxrce_fini_publisher_memory+0x14>
 801c3c0:	4b06      	ldr	r3, [pc, #24]	@ (801c3dc <rmw_uxrce_fini_publisher_memory+0x24>)
 801c3c2:	6819      	ldr	r1, [r3, #0]
 801c3c4:	f7e3 ff3c 	bl	8000240 <strcmp>
 801c3c8:	b938      	cbnz	r0, 801c3da <rmw_uxrce_fini_publisher_memory+0x22>
 801c3ca:	6020      	str	r0, [r4, #0]
 801c3cc:	6861      	ldr	r1, [r4, #4]
 801c3ce:	b121      	cbz	r1, 801c3da <rmw_uxrce_fini_publisher_memory+0x22>
 801c3d0:	4803      	ldr	r0, [pc, #12]	@ (801c3e0 <rmw_uxrce_fini_publisher_memory+0x28>)
 801c3d2:	f007 fdeb 	bl	8023fac <put_memory>
 801c3d6:	2300      	movs	r3, #0
 801c3d8:	6063      	str	r3, [r4, #4]
 801c3da:	bd10      	pop	{r4, pc}
 801c3dc:	0802dc08 	.word	0x0802dc08
 801c3e0:	20014dec 	.word	0x20014dec

0801c3e4 <rmw_uxrce_fini_subscription_memory>:
 801c3e4:	b510      	push	{r4, lr}
 801c3e6:	4604      	mov	r4, r0
 801c3e8:	6800      	ldr	r0, [r0, #0]
 801c3ea:	b128      	cbz	r0, 801c3f8 <rmw_uxrce_fini_subscription_memory+0x14>
 801c3ec:	4b06      	ldr	r3, [pc, #24]	@ (801c408 <rmw_uxrce_fini_subscription_memory+0x24>)
 801c3ee:	6819      	ldr	r1, [r3, #0]
 801c3f0:	f7e3 ff26 	bl	8000240 <strcmp>
 801c3f4:	b938      	cbnz	r0, 801c406 <rmw_uxrce_fini_subscription_memory+0x22>
 801c3f6:	6020      	str	r0, [r4, #0]
 801c3f8:	6861      	ldr	r1, [r4, #4]
 801c3fa:	b121      	cbz	r1, 801c406 <rmw_uxrce_fini_subscription_memory+0x22>
 801c3fc:	4803      	ldr	r0, [pc, #12]	@ (801c40c <rmw_uxrce_fini_subscription_memory+0x28>)
 801c3fe:	f007 fdd5 	bl	8023fac <put_memory>
 801c402:	2300      	movs	r3, #0
 801c404:	6063      	str	r3, [r4, #4]
 801c406:	bd10      	pop	{r4, pc}
 801c408:	0802dc08 	.word	0x0802dc08
 801c40c:	20014e2c 	.word	0x20014e2c

0801c410 <rmw_uxrce_fini_service_memory>:
 801c410:	b510      	push	{r4, lr}
 801c412:	4604      	mov	r4, r0
 801c414:	6800      	ldr	r0, [r0, #0]
 801c416:	b128      	cbz	r0, 801c424 <rmw_uxrce_fini_service_memory+0x14>
 801c418:	4b06      	ldr	r3, [pc, #24]	@ (801c434 <rmw_uxrce_fini_service_memory+0x24>)
 801c41a:	6819      	ldr	r1, [r3, #0]
 801c41c:	f7e3 ff10 	bl	8000240 <strcmp>
 801c420:	b938      	cbnz	r0, 801c432 <rmw_uxrce_fini_service_memory+0x22>
 801c422:	6020      	str	r0, [r4, #0]
 801c424:	6861      	ldr	r1, [r4, #4]
 801c426:	b121      	cbz	r1, 801c432 <rmw_uxrce_fini_service_memory+0x22>
 801c428:	4803      	ldr	r0, [pc, #12]	@ (801c438 <rmw_uxrce_fini_service_memory+0x28>)
 801c42a:	f007 fdbf 	bl	8023fac <put_memory>
 801c42e:	2300      	movs	r3, #0
 801c430:	6063      	str	r3, [r4, #4]
 801c432:	bd10      	pop	{r4, pc}
 801c434:	0802dc08 	.word	0x0802dc08
 801c438:	20014dfc 	.word	0x20014dfc

0801c43c <rmw_uxrce_fini_client_memory>:
 801c43c:	b510      	push	{r4, lr}
 801c43e:	4604      	mov	r4, r0
 801c440:	6800      	ldr	r0, [r0, #0]
 801c442:	b128      	cbz	r0, 801c450 <rmw_uxrce_fini_client_memory+0x14>
 801c444:	4b06      	ldr	r3, [pc, #24]	@ (801c460 <rmw_uxrce_fini_client_memory+0x24>)
 801c446:	6819      	ldr	r1, [r3, #0]
 801c448:	f7e3 fefa 	bl	8000240 <strcmp>
 801c44c:	b938      	cbnz	r0, 801c45e <rmw_uxrce_fini_client_memory+0x22>
 801c44e:	6020      	str	r0, [r4, #0]
 801c450:	6861      	ldr	r1, [r4, #4]
 801c452:	b121      	cbz	r1, 801c45e <rmw_uxrce_fini_client_memory+0x22>
 801c454:	4803      	ldr	r0, [pc, #12]	@ (801c464 <rmw_uxrce_fini_client_memory+0x28>)
 801c456:	f007 fda9 	bl	8023fac <put_memory>
 801c45a:	2300      	movs	r3, #0
 801c45c:	6063      	str	r3, [r4, #4]
 801c45e:	bd10      	pop	{r4, pc}
 801c460:	0802dc08 	.word	0x0802dc08
 801c464:	20010510 	.word	0x20010510

0801c468 <rmw_uxrce_fini_topic_memory>:
 801c468:	b510      	push	{r4, lr}
 801c46a:	4604      	mov	r4, r0
 801c46c:	4803      	ldr	r0, [pc, #12]	@ (801c47c <rmw_uxrce_fini_topic_memory+0x14>)
 801c46e:	4621      	mov	r1, r4
 801c470:	f007 fd9c 	bl	8023fac <put_memory>
 801c474:	2300      	movs	r3, #0
 801c476:	61a3      	str	r3, [r4, #24]
 801c478:	bd10      	pop	{r4, pc}
 801c47a:	bf00      	nop
 801c47c:	20014e3c 	.word	0x20014e3c

0801c480 <rmw_uxrce_get_static_input_buffer_for_entity>:
 801c480:	b082      	sub	sp, #8
 801c482:	492b      	ldr	r1, [pc, #172]	@ (801c530 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 801c484:	b530      	push	{r4, r5, lr}
 801c486:	680d      	ldr	r5, [r1, #0]
 801c488:	ac03      	add	r4, sp, #12
 801c48a:	e884 000c 	stmia.w	r4, {r2, r3}
 801c48e:	461c      	mov	r4, r3
 801c490:	2d00      	cmp	r5, #0
 801c492:	d04b      	beq.n	801c52c <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 801c494:	462b      	mov	r3, r5
 801c496:	2100      	movs	r1, #0
 801c498:	689a      	ldr	r2, [r3, #8]
 801c49a:	685b      	ldr	r3, [r3, #4]
 801c49c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 801c4a0:	4290      	cmp	r0, r2
 801c4a2:	bf08      	it	eq
 801c4a4:	3101      	addeq	r1, #1
 801c4a6:	2b00      	cmp	r3, #0
 801c4a8:	d1f6      	bne.n	801c498 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 801c4aa:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801c4ae:	2b02      	cmp	r3, #2
 801c4b0:	d029      	beq.n	801c506 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 801c4b2:	d820      	bhi.n	801c4f6 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 801c4b4:	428c      	cmp	r4, r1
 801c4b6:	d828      	bhi.n	801c50a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 801c4b8:	fab4 f284 	clz	r2, r4
 801c4bc:	0952      	lsrs	r2, r2, #5
 801c4be:	b324      	cbz	r4, 801c50a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 801c4c0:	b1dd      	cbz	r5, 801c4fa <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 801c4c2:	f04f 3cff 	mov.w	ip, #4294967295
 801c4c6:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 801c4ca:	e001      	b.n	801c4d0 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 801c4cc:	686d      	ldr	r5, [r5, #4]
 801c4ce:	b1ad      	cbz	r5, 801c4fc <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 801c4d0:	68ab      	ldr	r3, [r5, #8]
 801c4d2:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 801c4d6:	4288      	cmp	r0, r1
 801c4d8:	d1f8      	bne.n	801c4cc <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801c4da:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 801c4de:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 801c4e2:	4561      	cmp	r1, ip
 801c4e4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801c4e8:	eb73 0e04 	sbcs.w	lr, r3, r4
 801c4ec:	daee      	bge.n	801c4cc <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801c4ee:	468c      	mov	ip, r1
 801c4f0:	461c      	mov	r4, r3
 801c4f2:	462a      	mov	r2, r5
 801c4f4:	e7ea      	b.n	801c4cc <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801c4f6:	2b03      	cmp	r3, #3
 801c4f8:	d0dc      	beq.n	801c4b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 801c4fa:	2200      	movs	r2, #0
 801c4fc:	4610      	mov	r0, r2
 801c4fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c502:	b002      	add	sp, #8
 801c504:	4770      	bx	lr
 801c506:	428c      	cmp	r4, r1
 801c508:	d905      	bls.n	801c516 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 801c50a:	4809      	ldr	r0, [pc, #36]	@ (801c530 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 801c50c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c510:	b002      	add	sp, #8
 801c512:	f007 bd3b 	b.w	8023f8c <get_memory>
 801c516:	fab4 f284 	clz	r2, r4
 801c51a:	0952      	lsrs	r2, r2, #5
 801c51c:	2c00      	cmp	r4, #0
 801c51e:	d1ed      	bne.n	801c4fc <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 801c520:	4803      	ldr	r0, [pc, #12]	@ (801c530 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 801c522:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c526:	b002      	add	sp, #8
 801c528:	f007 bd30 	b.w	8023f8c <get_memory>
 801c52c:	4629      	mov	r1, r5
 801c52e:	e7bc      	b.n	801c4aa <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 801c530:	20014e1c 	.word	0x20014e1c

0801c534 <rmw_uxrce_find_static_input_buffer_by_owner>:
 801c534:	4b12      	ldr	r3, [pc, #72]	@ (801c580 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 801c536:	681b      	ldr	r3, [r3, #0]
 801c538:	b530      	push	{r4, r5, lr}
 801c53a:	b1f3      	cbz	r3, 801c57a <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 801c53c:	f04f 3eff 	mov.w	lr, #4294967295
 801c540:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 801c544:	2400      	movs	r4, #0
 801c546:	e001      	b.n	801c54c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 801c548:	685b      	ldr	r3, [r3, #4]
 801c54a:	b1a3      	cbz	r3, 801c576 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 801c54c:	689a      	ldr	r2, [r3, #8]
 801c54e:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 801c552:	4288      	cmp	r0, r1
 801c554:	d1f8      	bne.n	801c548 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 801c556:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 801c55a:	f502 6202 	add.w	r2, r2, #2080	@ 0x820
 801c55e:	4571      	cmp	r1, lr
 801c560:	f852 2c04 	ldr.w	r2, [r2, #-4]
 801c564:	eb72 050c 	sbcs.w	r5, r2, ip
 801c568:	daee      	bge.n	801c548 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 801c56a:	461c      	mov	r4, r3
 801c56c:	685b      	ldr	r3, [r3, #4]
 801c56e:	468e      	mov	lr, r1
 801c570:	4694      	mov	ip, r2
 801c572:	2b00      	cmp	r3, #0
 801c574:	d1ea      	bne.n	801c54c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 801c576:	4620      	mov	r0, r4
 801c578:	bd30      	pop	{r4, r5, pc}
 801c57a:	461c      	mov	r4, r3
 801c57c:	4620      	mov	r0, r4
 801c57e:	bd30      	pop	{r4, r5, pc}
 801c580:	20014e1c 	.word	0x20014e1c
 801c584:	00000000 	.word	0x00000000

0801c588 <rmw_uxrce_clean_expired_static_input_buffer>:
 801c588:	4b3d      	ldr	r3, [pc, #244]	@ (801c680 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 801c58a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c58e:	681f      	ldr	r7, [r3, #0]
 801c590:	ed2d 8b06 	vpush	{d8-d10}
 801c594:	b08d      	sub	sp, #52	@ 0x34
 801c596:	f008 fe65 	bl	8025264 <rmw_uros_epoch_nanos>
 801c59a:	2f00      	cmp	r7, #0
 801c59c:	d05d      	beq.n	801c65a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 801c59e:	46b8      	mov	r8, r7
 801c5a0:	4681      	mov	r9, r0
 801c5a2:	468a      	mov	sl, r1
 801c5a4:	ac04      	add	r4, sp, #16
 801c5a6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801c5aa:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801c5ae:	2b04      	cmp	r3, #4
 801c5b0:	ed9f 8b2d 	vldr	d8, [pc, #180]	@ 801c668 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 801c5b4:	ed9f ab2e 	vldr	d10, [pc, #184]	@ 801c670 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 801c5b8:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 801c678 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 801c5bc:	d03f      	beq.n	801c63e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801c5be:	2b05      	cmp	r3, #5
 801c5c0:	d044      	beq.n	801c64c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 801c5c2:	2b03      	cmp	r3, #3
 801c5c4:	d03b      	beq.n	801c63e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801c5c6:	ed8d 8b04 	vstr	d8, [sp, #16]
 801c5ca:	ed8d ab06 	vstr	d10, [sp, #24]
 801c5ce:	ab08      	add	r3, sp, #32
 801c5d0:	ed8d 8b08 	vstr	d8, [sp, #32]
 801c5d4:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 801c5d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c5da:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801c5de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801c5e2:	f007 faf5 	bl	8023bd0 <rmw_time_equal>
 801c5e6:	b118      	cbz	r0, 801c5f0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 801c5e8:	ed8d 9b04 	vstr	d9, [sp, #16]
 801c5ec:	ed8d 8b06 	vstr	d8, [sp, #24]
 801c5f0:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 801c5f4:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 801c5f8:	f855 7c04 	ldr.w	r7, [r5, #-4]
 801c5fc:	f8d8 b004 	ldr.w	fp, [r8, #4]
 801c600:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801c604:	f007 fb3a 	bl	8023c7c <rmw_time_total_nsec>
 801c608:	1830      	adds	r0, r6, r0
 801c60a:	eb47 0101 	adc.w	r1, r7, r1
 801c60e:	4548      	cmp	r0, r9
 801c610:	eb71 030a 	sbcs.w	r3, r1, sl
 801c614:	db05      	blt.n	801c622 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 801c616:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 801c61a:	4591      	cmp	r9, r2
 801c61c:	eb7a 0303 	sbcs.w	r3, sl, r3
 801c620:	da03      	bge.n	801c62a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 801c622:	4641      	mov	r1, r8
 801c624:	4816      	ldr	r0, [pc, #88]	@ (801c680 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 801c626:	f007 fcc1 	bl	8023fac <put_memory>
 801c62a:	f1bb 0f00 	cmp.w	fp, #0
 801c62e:	d014      	beq.n	801c65a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 801c630:	46d8      	mov	r8, fp
 801c632:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801c636:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801c63a:	2b04      	cmp	r3, #4
 801c63c:	d1bf      	bne.n	801c5be <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 801c63e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 801c642:	3340      	adds	r3, #64	@ 0x40
 801c644:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c646:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801c64a:	e7c0      	b.n	801c5ce <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801c64c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 801c650:	3348      	adds	r3, #72	@ 0x48
 801c652:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c654:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801c658:	e7b9      	b.n	801c5ce <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801c65a:	b00d      	add	sp, #52	@ 0x34
 801c65c:	ecbd 8b06 	vpop	{d8-d10}
 801c660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c664:	f3af 8000 	nop.w
	...
 801c670:	00000001 	.word	0x00000001
 801c674:	00000000 	.word	0x00000000
 801c678:	0000001e 	.word	0x0000001e
 801c67c:	00000000 	.word	0x00000000
 801c680:	20014e1c 	.word	0x20014e1c

0801c684 <run_xrce_session>:
 801c684:	b510      	push	{r4, lr}
 801c686:	788c      	ldrb	r4, [r1, #2]
 801c688:	b086      	sub	sp, #24
 801c68a:	2c01      	cmp	r4, #1
 801c68c:	f8ad 200e 	strh.w	r2, [sp, #14]
 801c690:	d00c      	beq.n	801c6ac <run_xrce_session+0x28>
 801c692:	2401      	movs	r4, #1
 801c694:	4619      	mov	r1, r3
 801c696:	f10d 020e 	add.w	r2, sp, #14
 801c69a:	f10d 0317 	add.w	r3, sp, #23
 801c69e:	9400      	str	r4, [sp, #0]
 801c6a0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801c6a4:	f002 fb10 	bl	801ecc8 <uxr_run_session_until_all_status>
 801c6a8:	b006      	add	sp, #24
 801c6aa:	bd10      	pop	{r4, pc}
 801c6ac:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801c6b0:	f001 ff2c 	bl	801e50c <uxr_flash_output_streams>
 801c6b4:	4620      	mov	r0, r4
 801c6b6:	b006      	add	sp, #24
 801c6b8:	bd10      	pop	{r4, pc}
 801c6ba:	bf00      	nop

0801c6bc <convert_qos_profile>:
 801c6bc:	7a4a      	ldrb	r2, [r1, #9]
 801c6be:	f891 c008 	ldrb.w	ip, [r1, #8]
 801c6c2:	2a02      	cmp	r2, #2
 801c6c4:	bf18      	it	ne
 801c6c6:	2200      	movne	r2, #0
 801c6c8:	7002      	strb	r2, [r0, #0]
 801c6ca:	f1ac 0202 	sub.w	r2, ip, #2
 801c6ce:	fab2 f282 	clz	r2, r2
 801c6d2:	0952      	lsrs	r2, r2, #5
 801c6d4:	7042      	strb	r2, [r0, #1]
 801c6d6:	780a      	ldrb	r2, [r1, #0]
 801c6d8:	8889      	ldrh	r1, [r1, #4]
 801c6da:	f1a2 0202 	sub.w	r2, r2, #2
 801c6de:	8081      	strh	r1, [r0, #4]
 801c6e0:	fab2 f282 	clz	r2, r2
 801c6e4:	0952      	lsrs	r2, r2, #5
 801c6e6:	7082      	strb	r2, [r0, #2]
 801c6e8:	4770      	bx	lr
 801c6ea:	bf00      	nop

0801c6ec <generate_type_name>:
 801c6ec:	2300      	movs	r3, #0
 801c6ee:	b530      	push	{r4, r5, lr}
 801c6f0:	700b      	strb	r3, [r1, #0]
 801c6f2:	b087      	sub	sp, #28
 801c6f4:	6803      	ldr	r3, [r0, #0]
 801c6f6:	4614      	mov	r4, r2
 801c6f8:	b1bb      	cbz	r3, 801c72a <generate_type_name+0x3e>
 801c6fa:	4a0e      	ldr	r2, [pc, #56]	@ (801c734 <generate_type_name+0x48>)
 801c6fc:	4615      	mov	r5, r2
 801c6fe:	9500      	str	r5, [sp, #0]
 801c700:	9203      	str	r2, [sp, #12]
 801c702:	4d0d      	ldr	r5, [pc, #52]	@ (801c738 <generate_type_name+0x4c>)
 801c704:	6842      	ldr	r2, [r0, #4]
 801c706:	4608      	mov	r0, r1
 801c708:	490c      	ldr	r1, [pc, #48]	@ (801c73c <generate_type_name+0x50>)
 801c70a:	9204      	str	r2, [sp, #16]
 801c70c:	9105      	str	r1, [sp, #20]
 801c70e:	9102      	str	r1, [sp, #8]
 801c710:	4621      	mov	r1, r4
 801c712:	4a0b      	ldr	r2, [pc, #44]	@ (801c740 <generate_type_name+0x54>)
 801c714:	9501      	str	r5, [sp, #4]
 801c716:	f00b fc1f 	bl	8027f58 <sniprintf>
 801c71a:	2800      	cmp	r0, #0
 801c71c:	bfa8      	it	ge
 801c71e:	4284      	cmpge	r4, r0
 801c720:	bfcc      	ite	gt
 801c722:	2001      	movgt	r0, #1
 801c724:	2000      	movle	r0, #0
 801c726:	b007      	add	sp, #28
 801c728:	bd30      	pop	{r4, r5, pc}
 801c72a:	4b06      	ldr	r3, [pc, #24]	@ (801c744 <generate_type_name+0x58>)
 801c72c:	4a01      	ldr	r2, [pc, #4]	@ (801c734 <generate_type_name+0x48>)
 801c72e:	461d      	mov	r5, r3
 801c730:	e7e5      	b.n	801c6fe <generate_type_name+0x12>
 801c732:	bf00      	nop
 801c734:	0802cff0 	.word	0x0802cff0
 801c738:	0802d008 	.word	0x0802d008
 801c73c:	0802d004 	.word	0x0802d004
 801c740:	0802cff4 	.word	0x0802cff4
 801c744:	0802d060 	.word	0x0802d060

0801c748 <generate_topic_name>:
 801c748:	b530      	push	{r4, r5, lr}
 801c74a:	4614      	mov	r4, r2
 801c74c:	b083      	sub	sp, #12
 801c74e:	4605      	mov	r5, r0
 801c750:	4b07      	ldr	r3, [pc, #28]	@ (801c770 <generate_topic_name+0x28>)
 801c752:	4a08      	ldr	r2, [pc, #32]	@ (801c774 <generate_topic_name+0x2c>)
 801c754:	4608      	mov	r0, r1
 801c756:	9500      	str	r5, [sp, #0]
 801c758:	4621      	mov	r1, r4
 801c75a:	f00b fbfd 	bl	8027f58 <sniprintf>
 801c75e:	2800      	cmp	r0, #0
 801c760:	bfa8      	it	ge
 801c762:	4284      	cmpge	r4, r0
 801c764:	bfcc      	ite	gt
 801c766:	2001      	movgt	r0, #1
 801c768:	2000      	movle	r0, #0
 801c76a:	b003      	add	sp, #12
 801c76c:	bd30      	pop	{r4, r5, pc}
 801c76e:	bf00      	nop
 801c770:	0802d998 	.word	0x0802d998
 801c774:	0802d00c 	.word	0x0802d00c

0801c778 <is_uxrce_rmw_identifier_valid>:
 801c778:	b510      	push	{r4, lr}
 801c77a:	4604      	mov	r4, r0
 801c77c:	b140      	cbz	r0, 801c790 <is_uxrce_rmw_identifier_valid+0x18>
 801c77e:	f007 fc6d 	bl	802405c <rmw_get_implementation_identifier>
 801c782:	4601      	mov	r1, r0
 801c784:	4620      	mov	r0, r4
 801c786:	f7e3 fd5b 	bl	8000240 <strcmp>
 801c78a:	fab0 f080 	clz	r0, r0
 801c78e:	0940      	lsrs	r0, r0, #5
 801c790:	bd10      	pop	{r4, pc}
 801c792:	bf00      	nop

0801c794 <get_message_typesupport_handle>:
 801c794:	6883      	ldr	r3, [r0, #8]
 801c796:	4718      	bx	r3

0801c798 <get_message_typesupport_handle_function>:
 801c798:	b510      	push	{r4, lr}
 801c79a:	4604      	mov	r4, r0
 801c79c:	6800      	ldr	r0, [r0, #0]
 801c79e:	f7e3 fd4f 	bl	8000240 <strcmp>
 801c7a2:	2800      	cmp	r0, #0
 801c7a4:	bf0c      	ite	eq
 801c7a6:	4620      	moveq	r0, r4
 801c7a8:	2000      	movne	r0, #0
 801c7aa:	bd10      	pop	{r4, pc}

0801c7ac <rosidl_runtime_c__double__Sequence__init>:
 801c7ac:	b530      	push	{r4, r5, lr}
 801c7ae:	4604      	mov	r4, r0
 801c7b0:	b087      	sub	sp, #28
 801c7b2:	b130      	cbz	r0, 801c7c2 <rosidl_runtime_c__double__Sequence__init+0x16>
 801c7b4:	460d      	mov	r5, r1
 801c7b6:	b931      	cbnz	r1, 801c7c6 <rosidl_runtime_c__double__Sequence__init+0x1a>
 801c7b8:	460b      	mov	r3, r1
 801c7ba:	2001      	movs	r0, #1
 801c7bc:	60a5      	str	r5, [r4, #8]
 801c7be:	e9c4 3500 	strd	r3, r5, [r4]
 801c7c2:	b007      	add	sp, #28
 801c7c4:	bd30      	pop	{r4, r5, pc}
 801c7c6:	a801      	add	r0, sp, #4
 801c7c8:	f7ff fa12 	bl	801bbf0 <rcutils_get_default_allocator>
 801c7cc:	9b01      	ldr	r3, [sp, #4]
 801c7ce:	9905      	ldr	r1, [sp, #20]
 801c7d0:	00e8      	lsls	r0, r5, #3
 801c7d2:	4798      	blx	r3
 801c7d4:	4603      	mov	r3, r0
 801c7d6:	2800      	cmp	r0, #0
 801c7d8:	d1ef      	bne.n	801c7ba <rosidl_runtime_c__double__Sequence__init+0xe>
 801c7da:	e7f2      	b.n	801c7c2 <rosidl_runtime_c__double__Sequence__init+0x16>

0801c7dc <rosidl_runtime_c__double__Sequence__fini>:
 801c7dc:	b188      	cbz	r0, 801c802 <rosidl_runtime_c__double__Sequence__fini+0x26>
 801c7de:	6803      	ldr	r3, [r0, #0]
 801c7e0:	b510      	push	{r4, lr}
 801c7e2:	4604      	mov	r4, r0
 801c7e4:	b086      	sub	sp, #24
 801c7e6:	b153      	cbz	r3, 801c7fe <rosidl_runtime_c__double__Sequence__fini+0x22>
 801c7e8:	a801      	add	r0, sp, #4
 801c7ea:	f7ff fa01 	bl	801bbf0 <rcutils_get_default_allocator>
 801c7ee:	9b02      	ldr	r3, [sp, #8]
 801c7f0:	9905      	ldr	r1, [sp, #20]
 801c7f2:	6820      	ldr	r0, [r4, #0]
 801c7f4:	4798      	blx	r3
 801c7f6:	2300      	movs	r3, #0
 801c7f8:	e9c4 3300 	strd	r3, r3, [r4]
 801c7fc:	60a3      	str	r3, [r4, #8]
 801c7fe:	b006      	add	sp, #24
 801c800:	bd10      	pop	{r4, pc}
 801c802:	4770      	bx	lr

0801c804 <rosidl_runtime_c__String__init>:
 801c804:	b510      	push	{r4, lr}
 801c806:	4604      	mov	r4, r0
 801c808:	b086      	sub	sp, #24
 801c80a:	b170      	cbz	r0, 801c82a <rosidl_runtime_c__String__init+0x26>
 801c80c:	a801      	add	r0, sp, #4
 801c80e:	f7ff f9ef 	bl	801bbf0 <rcutils_get_default_allocator>
 801c812:	9b01      	ldr	r3, [sp, #4]
 801c814:	9905      	ldr	r1, [sp, #20]
 801c816:	2001      	movs	r0, #1
 801c818:	4798      	blx	r3
 801c81a:	6020      	str	r0, [r4, #0]
 801c81c:	b128      	cbz	r0, 801c82a <rosidl_runtime_c__String__init+0x26>
 801c81e:	2100      	movs	r1, #0
 801c820:	2201      	movs	r2, #1
 801c822:	7001      	strb	r1, [r0, #0]
 801c824:	4610      	mov	r0, r2
 801c826:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801c82a:	b006      	add	sp, #24
 801c82c:	bd10      	pop	{r4, pc}
 801c82e:	bf00      	nop

0801c830 <rosidl_runtime_c__String__fini>:
 801c830:	b320      	cbz	r0, 801c87c <rosidl_runtime_c__String__fini+0x4c>
 801c832:	6803      	ldr	r3, [r0, #0]
 801c834:	b510      	push	{r4, lr}
 801c836:	4604      	mov	r4, r0
 801c838:	b086      	sub	sp, #24
 801c83a:	b173      	cbz	r3, 801c85a <rosidl_runtime_c__String__fini+0x2a>
 801c83c:	6883      	ldr	r3, [r0, #8]
 801c83e:	b1f3      	cbz	r3, 801c87e <rosidl_runtime_c__String__fini+0x4e>
 801c840:	a801      	add	r0, sp, #4
 801c842:	f7ff f9d5 	bl	801bbf0 <rcutils_get_default_allocator>
 801c846:	9b02      	ldr	r3, [sp, #8]
 801c848:	9905      	ldr	r1, [sp, #20]
 801c84a:	6820      	ldr	r0, [r4, #0]
 801c84c:	4798      	blx	r3
 801c84e:	2300      	movs	r3, #0
 801c850:	e9c4 3300 	strd	r3, r3, [r4]
 801c854:	60a3      	str	r3, [r4, #8]
 801c856:	b006      	add	sp, #24
 801c858:	bd10      	pop	{r4, pc}
 801c85a:	6843      	ldr	r3, [r0, #4]
 801c85c:	b9db      	cbnz	r3, 801c896 <rosidl_runtime_c__String__fini+0x66>
 801c85e:	6883      	ldr	r3, [r0, #8]
 801c860:	2b00      	cmp	r3, #0
 801c862:	d0f8      	beq.n	801c856 <rosidl_runtime_c__String__fini+0x26>
 801c864:	4b12      	ldr	r3, [pc, #72]	@ (801c8b0 <rosidl_runtime_c__String__fini+0x80>)
 801c866:	2251      	movs	r2, #81	@ 0x51
 801c868:	2101      	movs	r1, #1
 801c86a:	4812      	ldr	r0, [pc, #72]	@ (801c8b4 <rosidl_runtime_c__String__fini+0x84>)
 801c86c:	681b      	ldr	r3, [r3, #0]
 801c86e:	68db      	ldr	r3, [r3, #12]
 801c870:	f00b fb52 	bl	8027f18 <fwrite>
 801c874:	f04f 30ff 	mov.w	r0, #4294967295
 801c878:	f00a ff8a 	bl	8027790 <exit>
 801c87c:	4770      	bx	lr
 801c87e:	4b0c      	ldr	r3, [pc, #48]	@ (801c8b0 <rosidl_runtime_c__String__fini+0x80>)
 801c880:	224c      	movs	r2, #76	@ 0x4c
 801c882:	2101      	movs	r1, #1
 801c884:	480c      	ldr	r0, [pc, #48]	@ (801c8b8 <rosidl_runtime_c__String__fini+0x88>)
 801c886:	681b      	ldr	r3, [r3, #0]
 801c888:	68db      	ldr	r3, [r3, #12]
 801c88a:	f00b fb45 	bl	8027f18 <fwrite>
 801c88e:	f04f 30ff 	mov.w	r0, #4294967295
 801c892:	f00a ff7d 	bl	8027790 <exit>
 801c896:	4b06      	ldr	r3, [pc, #24]	@ (801c8b0 <rosidl_runtime_c__String__fini+0x80>)
 801c898:	224e      	movs	r2, #78	@ 0x4e
 801c89a:	2101      	movs	r1, #1
 801c89c:	4807      	ldr	r0, [pc, #28]	@ (801c8bc <rosidl_runtime_c__String__fini+0x8c>)
 801c89e:	681b      	ldr	r3, [r3, #0]
 801c8a0:	68db      	ldr	r3, [r3, #12]
 801c8a2:	f00b fb39 	bl	8027f18 <fwrite>
 801c8a6:	f04f 30ff 	mov.w	r0, #4294967295
 801c8aa:	f00a ff71 	bl	8027790 <exit>
 801c8ae:	bf00      	nop
 801c8b0:	200007a8 	.word	0x200007a8
 801c8b4:	0802d0b4 	.word	0x0802d0b4
 801c8b8:	0802d014 	.word	0x0802d014
 801c8bc:	0802d064 	.word	0x0802d064

0801c8c0 <rosidl_runtime_c__String__Sequence__init>:
 801c8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8c4:	4680      	mov	r8, r0
 801c8c6:	b08b      	sub	sp, #44	@ 0x2c
 801c8c8:	b138      	cbz	r0, 801c8da <rosidl_runtime_c__String__Sequence__init+0x1a>
 801c8ca:	468a      	mov	sl, r1
 801c8cc:	b941      	cbnz	r1, 801c8e0 <rosidl_runtime_c__String__Sequence__init+0x20>
 801c8ce:	460e      	mov	r6, r1
 801c8d0:	2001      	movs	r0, #1
 801c8d2:	f8c8 a008 	str.w	sl, [r8, #8]
 801c8d6:	e9c8 6a00 	strd	r6, sl, [r8]
 801c8da:	b00b      	add	sp, #44	@ 0x2c
 801c8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8e0:	4668      	mov	r0, sp
 801c8e2:	f7ff f985 	bl	801bbf0 <rcutils_get_default_allocator>
 801c8e6:	210c      	movs	r1, #12
 801c8e8:	4650      	mov	r0, sl
 801c8ea:	e9dd 3703 	ldrd	r3, r7, [sp, #12]
 801c8ee:	463a      	mov	r2, r7
 801c8f0:	4798      	blx	r3
 801c8f2:	4606      	mov	r6, r0
 801c8f4:	b340      	cbz	r0, 801c948 <rosidl_runtime_c__String__Sequence__init+0x88>
 801c8f6:	2400      	movs	r4, #0
 801c8f8:	4605      	mov	r5, r0
 801c8fa:	f04f 0901 	mov.w	r9, #1
 801c8fe:	46a3      	mov	fp, r4
 801c900:	e007      	b.n	801c912 <rosidl_runtime_c__String__Sequence__init+0x52>
 801c902:	3401      	adds	r4, #1
 801c904:	350c      	adds	r5, #12
 801c906:	f880 b000 	strb.w	fp, [r0]
 801c90a:	45a2      	cmp	sl, r4
 801c90c:	e945 b902 	strd	fp, r9, [r5, #-8]
 801c910:	d0de      	beq.n	801c8d0 <rosidl_runtime_c__String__Sequence__init+0x10>
 801c912:	a805      	add	r0, sp, #20
 801c914:	f7ff f96c 	bl	801bbf0 <rcutils_get_default_allocator>
 801c918:	9b05      	ldr	r3, [sp, #20]
 801c91a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c91c:	2001      	movs	r0, #1
 801c91e:	4798      	blx	r3
 801c920:	6028      	str	r0, [r5, #0]
 801c922:	2800      	cmp	r0, #0
 801c924:	d1ed      	bne.n	801c902 <rosidl_runtime_c__String__Sequence__init+0x42>
 801c926:	b15c      	cbz	r4, 801c940 <rosidl_runtime_c__String__Sequence__init+0x80>
 801c928:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c92c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 801c930:	3c0c      	subs	r4, #12
 801c932:	4620      	mov	r0, r4
 801c934:	f7ff ff7c 	bl	801c830 <rosidl_runtime_c__String__fini>
 801c938:	42a6      	cmp	r6, r4
 801c93a:	f1a4 040c 	sub.w	r4, r4, #12
 801c93e:	d1f8      	bne.n	801c932 <rosidl_runtime_c__String__Sequence__init+0x72>
 801c940:	9b01      	ldr	r3, [sp, #4]
 801c942:	4639      	mov	r1, r7
 801c944:	4630      	mov	r0, r6
 801c946:	4798      	blx	r3
 801c948:	2000      	movs	r0, #0
 801c94a:	b00b      	add	sp, #44	@ 0x2c
 801c94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c950 <rosidl_runtime_c__String__Sequence__fini>:
 801c950:	2800      	cmp	r0, #0
 801c952:	d044      	beq.n	801c9de <rosidl_runtime_c__String__Sequence__fini+0x8e>
 801c954:	6803      	ldr	r3, [r0, #0]
 801c956:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c958:	4606      	mov	r6, r0
 801c95a:	b087      	sub	sp, #28
 801c95c:	2b00      	cmp	r3, #0
 801c95e:	d03c      	beq.n	801c9da <rosidl_runtime_c__String__Sequence__fini+0x8a>
 801c960:	6881      	ldr	r1, [r0, #8]
 801c962:	2900      	cmp	r1, #0
 801c964:	d02e      	beq.n	801c9c4 <rosidl_runtime_c__String__Sequence__fini+0x74>
 801c966:	2400      	movs	r4, #0
 801c968:	4627      	mov	r7, r4
 801c96a:	e011      	b.n	801c990 <rosidl_runtime_c__String__Sequence__fini+0x40>
 801c96c:	68ab      	ldr	r3, [r5, #8]
 801c96e:	2b00      	cmp	r3, #0
 801c970:	d036      	beq.n	801c9e0 <rosidl_runtime_c__String__Sequence__fini+0x90>
 801c972:	a801      	add	r0, sp, #4
 801c974:	f7ff f93c 	bl	801bbf0 <rcutils_get_default_allocator>
 801c978:	9905      	ldr	r1, [sp, #20]
 801c97a:	9b02      	ldr	r3, [sp, #8]
 801c97c:	6828      	ldr	r0, [r5, #0]
 801c97e:	4798      	blx	r3
 801c980:	68b1      	ldr	r1, [r6, #8]
 801c982:	60af      	str	r7, [r5, #8]
 801c984:	e9c5 7700 	strd	r7, r7, [r5]
 801c988:	3401      	adds	r4, #1
 801c98a:	428c      	cmp	r4, r1
 801c98c:	d21a      	bcs.n	801c9c4 <rosidl_runtime_c__String__Sequence__fini+0x74>
 801c98e:	6833      	ldr	r3, [r6, #0]
 801c990:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801c994:	eb13 0582 	adds.w	r5, r3, r2, lsl #2
 801c998:	d0f6      	beq.n	801c988 <rosidl_runtime_c__String__Sequence__fini+0x38>
 801c99a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	d1e4      	bne.n	801c96c <rosidl_runtime_c__String__Sequence__fini+0x1c>
 801c9a2:	686b      	ldr	r3, [r5, #4]
 801c9a4:	bb43      	cbnz	r3, 801c9f8 <rosidl_runtime_c__String__Sequence__fini+0xa8>
 801c9a6:	68ab      	ldr	r3, [r5, #8]
 801c9a8:	2b00      	cmp	r3, #0
 801c9aa:	d0ed      	beq.n	801c988 <rosidl_runtime_c__String__Sequence__fini+0x38>
 801c9ac:	4b18      	ldr	r3, [pc, #96]	@ (801ca10 <rosidl_runtime_c__String__Sequence__fini+0xc0>)
 801c9ae:	2251      	movs	r2, #81	@ 0x51
 801c9b0:	2101      	movs	r1, #1
 801c9b2:	4818      	ldr	r0, [pc, #96]	@ (801ca14 <rosidl_runtime_c__String__Sequence__fini+0xc4>)
 801c9b4:	681b      	ldr	r3, [r3, #0]
 801c9b6:	68db      	ldr	r3, [r3, #12]
 801c9b8:	f00b faae 	bl	8027f18 <fwrite>
 801c9bc:	f04f 30ff 	mov.w	r0, #4294967295
 801c9c0:	f00a fee6 	bl	8027790 <exit>
 801c9c4:	a801      	add	r0, sp, #4
 801c9c6:	f7ff f913 	bl	801bbf0 <rcutils_get_default_allocator>
 801c9ca:	9b02      	ldr	r3, [sp, #8]
 801c9cc:	9905      	ldr	r1, [sp, #20]
 801c9ce:	6830      	ldr	r0, [r6, #0]
 801c9d0:	4798      	blx	r3
 801c9d2:	2300      	movs	r3, #0
 801c9d4:	e9c6 3300 	strd	r3, r3, [r6]
 801c9d8:	60b3      	str	r3, [r6, #8]
 801c9da:	b007      	add	sp, #28
 801c9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c9de:	4770      	bx	lr
 801c9e0:	4b0b      	ldr	r3, [pc, #44]	@ (801ca10 <rosidl_runtime_c__String__Sequence__fini+0xc0>)
 801c9e2:	224c      	movs	r2, #76	@ 0x4c
 801c9e4:	2101      	movs	r1, #1
 801c9e6:	480c      	ldr	r0, [pc, #48]	@ (801ca18 <rosidl_runtime_c__String__Sequence__fini+0xc8>)
 801c9e8:	681b      	ldr	r3, [r3, #0]
 801c9ea:	68db      	ldr	r3, [r3, #12]
 801c9ec:	f00b fa94 	bl	8027f18 <fwrite>
 801c9f0:	f04f 30ff 	mov.w	r0, #4294967295
 801c9f4:	f00a fecc 	bl	8027790 <exit>
 801c9f8:	4b05      	ldr	r3, [pc, #20]	@ (801ca10 <rosidl_runtime_c__String__Sequence__fini+0xc0>)
 801c9fa:	224e      	movs	r2, #78	@ 0x4e
 801c9fc:	2101      	movs	r1, #1
 801c9fe:	4807      	ldr	r0, [pc, #28]	@ (801ca1c <rosidl_runtime_c__String__Sequence__fini+0xcc>)
 801ca00:	681b      	ldr	r3, [r3, #0]
 801ca02:	68db      	ldr	r3, [r3, #12]
 801ca04:	f00b fa88 	bl	8027f18 <fwrite>
 801ca08:	f04f 30ff 	mov.w	r0, #4294967295
 801ca0c:	f00a fec0 	bl	8027790 <exit>
 801ca10:	200007a8 	.word	0x200007a8
 801ca14:	0802d0b4 	.word	0x0802d0b4
 801ca18:	0802d014 	.word	0x0802d014
 801ca1c:	0802d064 	.word	0x0802d064

0801ca20 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 801ca20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca24:	6805      	ldr	r5, [r0, #0]
 801ca26:	4604      	mov	r4, r0
 801ca28:	460e      	mov	r6, r1
 801ca2a:	4628      	mov	r0, r5
 801ca2c:	f7e3 fc08 	bl	8000240 <strcmp>
 801ca30:	b1c8      	cbz	r0, 801ca66 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801ca32:	4b11      	ldr	r3, [pc, #68]	@ (801ca78 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 801ca34:	681b      	ldr	r3, [r3, #0]
 801ca36:	429d      	cmp	r5, r3
 801ca38:	d112      	bne.n	801ca60 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801ca3a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801ca3e:	f8d8 4000 	ldr.w	r4, [r8]
 801ca42:	b16c      	cbz	r4, 801ca60 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801ca44:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801ca48:	2700      	movs	r7, #0
 801ca4a:	3d04      	subs	r5, #4
 801ca4c:	4631      	mov	r1, r6
 801ca4e:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801ca52:	f7e3 fbf5 	bl	8000240 <strcmp>
 801ca56:	00bb      	lsls	r3, r7, #2
 801ca58:	b140      	cbz	r0, 801ca6c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801ca5a:	3701      	adds	r7, #1
 801ca5c:	42bc      	cmp	r4, r7
 801ca5e:	d1f5      	bne.n	801ca4c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 801ca60:	2000      	movs	r0, #0
 801ca62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ca66:	4620      	mov	r0, r4
 801ca68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ca6c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801ca70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ca74:	58d3      	ldr	r3, [r2, r3]
 801ca76:	4718      	bx	r3
 801ca78:	200001c0 	.word	0x200001c0

0801ca7c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState>:
 801ca7c:	4b04      	ldr	r3, [pc, #16]	@ (801ca90 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x14>)
 801ca7e:	681a      	ldr	r2, [r3, #0]
 801ca80:	b10a      	cbz	r2, 801ca86 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0xa>
 801ca82:	4803      	ldr	r0, [pc, #12]	@ (801ca90 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x14>)
 801ca84:	4770      	bx	lr
 801ca86:	4a03      	ldr	r2, [pc, #12]	@ (801ca94 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x18>)
 801ca88:	4801      	ldr	r0, [pc, #4]	@ (801ca90 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x14>)
 801ca8a:	6812      	ldr	r2, [r2, #0]
 801ca8c:	601a      	str	r2, [r3, #0]
 801ca8e:	4770      	bx	lr
 801ca90:	200001d0 	.word	0x200001d0
 801ca94:	200001c0 	.word	0x200001c0

0801ca98 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState>:
 801ca98:	4a02      	ldr	r2, [pc, #8]	@ (801caa4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0xc>)
 801ca9a:	4b03      	ldr	r3, [pc, #12]	@ (801caa8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x10>)
 801ca9c:	6812      	ldr	r2, [r2, #0]
 801ca9e:	601a      	str	r2, [r3, #0]
 801caa0:	4770      	bx	lr
 801caa2:	bf00      	nop
 801caa4:	200001c0 	.word	0x200001c0
 801caa8:	200001d0 	.word	0x200001d0

0801caac <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__size_function__JointState__name>:
 801caac:	6840      	ldr	r0, [r0, #4]
 801caae:	4770      	bx	lr

0801cab0 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__get_const_function__JointState__name>:
 801cab0:	6800      	ldr	r0, [r0, #0]
 801cab2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801cab6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801caba:	4770      	bx	lr

0801cabc <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__fetch_function__JointState__name>:
 801cabc:	6803      	ldr	r3, [r0, #0]
 801cabe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801cac2:	4694      	mov	ip, r2
 801cac4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801cac8:	c907      	ldmia	r1, {r0, r1, r2}
 801caca:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 801cace:	4770      	bx	lr

0801cad0 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__assign_function__JointState__name>:
 801cad0:	6803      	ldr	r3, [r0, #0]
 801cad2:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801cad6:	ca07      	ldmia	r2, {r0, r1, r2}
 801cad8:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 801cadc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801cae0:	4770      	bx	lr
 801cae2:	bf00      	nop

0801cae4 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__size_function__JointState__position>:
 801cae4:	6840      	ldr	r0, [r0, #4]
 801cae6:	4770      	bx	lr

0801cae8 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__get_const_function__JointState__position>:
 801cae8:	6800      	ldr	r0, [r0, #0]
 801caea:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801caee:	4770      	bx	lr

0801caf0 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__fetch_function__JointState__position>:
 801caf0:	6803      	ldr	r3, [r0, #0]
 801caf2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801caf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cafa:	e9c2 0100 	strd	r0, r1, [r2]
 801cafe:	4770      	bx	lr

0801cb00 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__assign_function__JointState__position>:
 801cb00:	6803      	ldr	r3, [r0, #0]
 801cb02:	ed92 7b00 	vldr	d7, [r2]
 801cb06:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801cb0a:	ed81 7b00 	vstr	d7, [r1]
 801cb0e:	4770      	bx	lr

0801cb10 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__JointState_init_function>:
 801cb10:	f008 bbb6 	b.w	8025280 <sensor_msgs__msg__JointState__init>

0801cb14 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__JointState_fini_function>:
 801cb14:	f008 bc26 	b.w	8025364 <sensor_msgs__msg__JointState__fini>

0801cb18 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__resize_function__JointState__name>:
 801cb18:	b510      	push	{r4, lr}
 801cb1a:	4604      	mov	r4, r0
 801cb1c:	b082      	sub	sp, #8
 801cb1e:	9101      	str	r1, [sp, #4]
 801cb20:	f7ff ff16 	bl	801c950 <rosidl_runtime_c__String__Sequence__fini>
 801cb24:	9901      	ldr	r1, [sp, #4]
 801cb26:	4620      	mov	r0, r4
 801cb28:	b002      	add	sp, #8
 801cb2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cb2e:	f7ff bec7 	b.w	801c8c0 <rosidl_runtime_c__String__Sequence__init>
 801cb32:	bf00      	nop

0801cb34 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__resize_function__JointState__position>:
 801cb34:	b510      	push	{r4, lr}
 801cb36:	4604      	mov	r4, r0
 801cb38:	b082      	sub	sp, #8
 801cb3a:	9101      	str	r1, [sp, #4]
 801cb3c:	f7ff fe4e 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 801cb40:	9901      	ldr	r1, [sp, #4]
 801cb42:	4620      	mov	r0, r4
 801cb44:	b002      	add	sp, #8
 801cb46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cb4a:	f7ff be2f 	b.w	801c7ac <rosidl_runtime_c__double__Sequence__init>
 801cb4e:	bf00      	nop

0801cb50 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__size_function__JointState__effort>:
 801cb50:	6840      	ldr	r0, [r0, #4]
 801cb52:	4770      	bx	lr

0801cb54 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__size_function__JointState__velocity>:
 801cb54:	6840      	ldr	r0, [r0, #4]
 801cb56:	4770      	bx	lr

0801cb58 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__get_function__JointState__effort>:
 801cb58:	6800      	ldr	r0, [r0, #0]
 801cb5a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801cb5e:	4770      	bx	lr

0801cb60 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__get_const_function__JointState__effort>:
 801cb60:	6800      	ldr	r0, [r0, #0]
 801cb62:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801cb66:	4770      	bx	lr

0801cb68 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__get_const_function__JointState__velocity>:
 801cb68:	6800      	ldr	r0, [r0, #0]
 801cb6a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801cb6e:	4770      	bx	lr

0801cb70 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__get_function__JointState__name>:
 801cb70:	6800      	ldr	r0, [r0, #0]
 801cb72:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801cb76:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801cb7a:	4770      	bx	lr

0801cb7c <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__get_function__JointState__position>:
 801cb7c:	6800      	ldr	r0, [r0, #0]
 801cb7e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801cb82:	4770      	bx	lr

0801cb84 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__get_function__JointState__velocity>:
 801cb84:	6800      	ldr	r0, [r0, #0]
 801cb86:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801cb8a:	4770      	bx	lr

0801cb8c <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__assign_function__JointState__effort>:
 801cb8c:	6803      	ldr	r3, [r0, #0]
 801cb8e:	ed92 7b00 	vldr	d7, [r2]
 801cb92:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801cb96:	ed81 7b00 	vstr	d7, [r1]
 801cb9a:	4770      	bx	lr

0801cb9c <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__fetch_function__JointState__effort>:
 801cb9c:	6803      	ldr	r3, [r0, #0]
 801cb9e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801cba2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cba6:	e9c2 0100 	strd	r0, r1, [r2]
 801cbaa:	4770      	bx	lr

0801cbac <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__fetch_function__JointState__velocity>:
 801cbac:	6803      	ldr	r3, [r0, #0]
 801cbae:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801cbb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cbb6:	e9c2 0100 	strd	r0, r1, [r2]
 801cbba:	4770      	bx	lr

0801cbbc <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__assign_function__JointState__velocity>:
 801cbbc:	6803      	ldr	r3, [r0, #0]
 801cbbe:	ed92 7b00 	vldr	d7, [r2]
 801cbc2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801cbc6:	ed81 7b00 	vstr	d7, [r1]
 801cbca:	4770      	bx	lr

0801cbcc <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__resize_function__JointState__effort>:
 801cbcc:	b510      	push	{r4, lr}
 801cbce:	4604      	mov	r4, r0
 801cbd0:	b082      	sub	sp, #8
 801cbd2:	9101      	str	r1, [sp, #4]
 801cbd4:	f7ff fe02 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 801cbd8:	9901      	ldr	r1, [sp, #4]
 801cbda:	4620      	mov	r0, r4
 801cbdc:	b002      	add	sp, #8
 801cbde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cbe2:	f7ff bde3 	b.w	801c7ac <rosidl_runtime_c__double__Sequence__init>
 801cbe6:	bf00      	nop

0801cbe8 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__resize_function__JointState__velocity>:
 801cbe8:	b510      	push	{r4, lr}
 801cbea:	4604      	mov	r4, r0
 801cbec:	b082      	sub	sp, #8
 801cbee:	9101      	str	r1, [sp, #4]
 801cbf0:	f7ff fdf4 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 801cbf4:	9901      	ldr	r1, [sp, #4]
 801cbf6:	4620      	mov	r0, r4
 801cbf8:	b002      	add	sp, #8
 801cbfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cbfe:	f7ff bdd5 	b.w	801c7ac <rosidl_runtime_c__double__Sequence__init>
 801cc02:	bf00      	nop

0801cc04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__JointState>:
 801cc04:	b508      	push	{r3, lr}
 801cc06:	f000 f989 	bl	801cf1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 801cc0a:	4b06      	ldr	r3, [pc, #24]	@ (801cc24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x20>)
 801cc0c:	4906      	ldr	r1, [pc, #24]	@ (801cc28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x24>)
 801cc0e:	681a      	ldr	r2, [r3, #0]
 801cc10:	60c8      	str	r0, [r1, #12]
 801cc12:	b10a      	cbz	r2, 801cc18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x14>
 801cc14:	4803      	ldr	r0, [pc, #12]	@ (801cc24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x20>)
 801cc16:	bd08      	pop	{r3, pc}
 801cc18:	4a04      	ldr	r2, [pc, #16]	@ (801cc2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x28>)
 801cc1a:	4802      	ldr	r0, [pc, #8]	@ (801cc24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x20>)
 801cc1c:	6812      	ldr	r2, [r2, #0]
 801cc1e:	601a      	str	r2, [r3, #0]
 801cc20:	bd08      	pop	{r3, pc}
 801cc22:	bf00      	nop
 801cc24:	20000308 	.word	0x20000308
 801cc28:	200001dc 	.word	0x200001dc
 801cc2c:	200001c4 	.word	0x200001c4

0801cc30 <_JointState__max_serialized_size>:
 801cc30:	b500      	push	{lr}
 801cc32:	b083      	sub	sp, #12
 801cc34:	2301      	movs	r3, #1
 801cc36:	2100      	movs	r1, #0
 801cc38:	f10d 0007 	add.w	r0, sp, #7
 801cc3c:	f88d 3007 	strb.w	r3, [sp, #7]
 801cc40:	f000 fa0a 	bl	801d058 <max_serialized_size_std_msgs__msg__Header>
 801cc44:	b003      	add	sp, #12
 801cc46:	f85d fb04 	ldr.w	pc, [sp], #4
 801cc4a:	bf00      	nop

0801cc4c <get_serialized_size_sensor_msgs__msg__JointState.part.0>:
 801cc4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc50:	460f      	mov	r7, r1
 801cc52:	4605      	mov	r5, r0
 801cc54:	f000 f986 	bl	801cf64 <get_serialized_size_std_msgs__msg__Header>
 801cc58:	2104      	movs	r1, #4
 801cc5a:	183c      	adds	r4, r7, r0
 801cc5c:	69ae      	ldr	r6, [r5, #24]
 801cc5e:	4620      	mov	r0, r4
 801cc60:	f7fd fe8e 	bl	801a980 <ucdr_alignment>
 801cc64:	3004      	adds	r0, #4
 801cc66:	4404      	add	r4, r0
 801cc68:	b196      	cbz	r6, 801cc90 <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x44>
 801cc6a:	f04f 0800 	mov.w	r8, #0
 801cc6e:	4620      	mov	r0, r4
 801cc70:	2104      	movs	r1, #4
 801cc72:	f7fd fe85 	bl	801a980 <ucdr_alignment>
 801cc76:	696b      	ldr	r3, [r5, #20]
 801cc78:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 801cc7c:	4420      	add	r0, r4
 801cc7e:	f108 0801 	add.w	r8, r8, #1
 801cc82:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801cc86:	1d43      	adds	r3, r0, #5
 801cc88:	4546      	cmp	r6, r8
 801cc8a:	6854      	ldr	r4, [r2, #4]
 801cc8c:	441c      	add	r4, r3
 801cc8e:	d1ee      	bne.n	801cc6e <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x22>
 801cc90:	4620      	mov	r0, r4
 801cc92:	2104      	movs	r1, #4
 801cc94:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 801cc96:	f7fd fe73 	bl	801a980 <ucdr_alignment>
 801cc9a:	4420      	add	r0, r4
 801cc9c:	1d04      	adds	r4, r0, #4
 801cc9e:	b996      	cbnz	r6, 801ccc6 <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x7a>
 801cca0:	4620      	mov	r0, r4
 801cca2:	2104      	movs	r1, #4
 801cca4:	6b2e      	ldr	r6, [r5, #48]	@ 0x30
 801cca6:	f7fd fe6b 	bl	801a980 <ucdr_alignment>
 801ccaa:	4404      	add	r4, r0
 801ccac:	3404      	adds	r4, #4
 801ccae:	b9e6      	cbnz	r6, 801ccea <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x9e>
 801ccb0:	4620      	mov	r0, r4
 801ccb2:	2104      	movs	r1, #4
 801ccb4:	6bed      	ldr	r5, [r5, #60]	@ 0x3c
 801ccb6:	f7fd fe63 	bl	801a980 <ucdr_alignment>
 801ccba:	4404      	add	r4, r0
 801ccbc:	3404      	adds	r4, #4
 801ccbe:	b955      	cbnz	r5, 801ccd6 <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x8a>
 801ccc0:	1be0      	subs	r0, r4, r7
 801ccc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ccc6:	4620      	mov	r0, r4
 801ccc8:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801cccc:	2108      	movs	r1, #8
 801ccce:	f7fd fe57 	bl	801a980 <ucdr_alignment>
 801ccd2:	4404      	add	r4, r0
 801ccd4:	e7e4      	b.n	801cca0 <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x54>
 801ccd6:	4620      	mov	r0, r4
 801ccd8:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801ccdc:	2108      	movs	r1, #8
 801ccde:	f7fd fe4f 	bl	801a980 <ucdr_alignment>
 801cce2:	4404      	add	r4, r0
 801cce4:	1be0      	subs	r0, r4, r7
 801cce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ccea:	4620      	mov	r0, r4
 801ccec:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801ccf0:	2108      	movs	r1, #8
 801ccf2:	f7fd fe45 	bl	801a980 <ucdr_alignment>
 801ccf6:	4404      	add	r4, r0
 801ccf8:	e7da      	b.n	801ccb0 <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x64>
 801ccfa:	bf00      	nop

0801ccfc <get_serialized_size_sensor_msgs__msg__JointState>:
 801ccfc:	b108      	cbz	r0, 801cd02 <get_serialized_size_sensor_msgs__msg__JointState+0x6>
 801ccfe:	f7ff bfa5 	b.w	801cc4c <get_serialized_size_sensor_msgs__msg__JointState.part.0>
 801cd02:	4770      	bx	lr

0801cd04 <_JointState__get_serialized_size>:
 801cd04:	b110      	cbz	r0, 801cd0c <_JointState__get_serialized_size+0x8>
 801cd06:	2100      	movs	r1, #0
 801cd08:	f7ff bfa0 	b.w	801cc4c <get_serialized_size_sensor_msgs__msg__JointState.part.0>
 801cd0c:	4770      	bx	lr
 801cd0e:	bf00      	nop

0801cd10 <_JointState__cdr_deserialize>:
 801cd10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cd14:	460d      	mov	r5, r1
 801cd16:	b083      	sub	sp, #12
 801cd18:	2900      	cmp	r1, #0
 801cd1a:	d06e      	beq.n	801cdfa <_JointState__cdr_deserialize+0xea>
 801cd1c:	4606      	mov	r6, r0
 801cd1e:	f000 f9a5 	bl	801d06c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801cd22:	4603      	mov	r3, r0
 801cd24:	4629      	mov	r1, r5
 801cd26:	4630      	mov	r0, r6
 801cd28:	685b      	ldr	r3, [r3, #4]
 801cd2a:	68db      	ldr	r3, [r3, #12]
 801cd2c:	4798      	blx	r3
 801cd2e:	4669      	mov	r1, sp
 801cd30:	4630      	mov	r0, r6
 801cd32:	f7fc fe85 	bl	8019a40 <ucdr_deserialize_uint32_t>
 801cd36:	9900      	ldr	r1, [sp, #0]
 801cd38:	69eb      	ldr	r3, [r5, #28]
 801cd3a:	428b      	cmp	r3, r1
 801cd3c:	d323      	bcc.n	801cd86 <_JointState__cdr_deserialize+0x76>
 801cd3e:	61a9      	str	r1, [r5, #24]
 801cd40:	2800      	cmp	r0, #0
 801cd42:	f000 808f 	beq.w	801ce64 <_JointState__cdr_deserialize+0x154>
 801cd46:	2400      	movs	r4, #0
 801cd48:	f10d 0804 	add.w	r8, sp, #4
 801cd4c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801cd50:	428c      	cmp	r4, r1
 801cd52:	4643      	mov	r3, r8
 801cd54:	4630      	mov	r0, r6
 801cd56:	ea4f 0782 	mov.w	r7, r2, lsl #2
 801cd5a:	f104 0401 	add.w	r4, r4, #1
 801cd5e:	d21a      	bcs.n	801cd96 <_JointState__cdr_deserialize+0x86>
 801cd60:	6969      	ldr	r1, [r5, #20]
 801cd62:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801cd66:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cd6a:	f8dc 9008 	ldr.w	r9, [ip, #8]
 801cd6e:	464a      	mov	r2, r9
 801cd70:	f7fd fe88 	bl	801aa84 <ucdr_deserialize_sequence_char>
 801cd74:	b160      	cbz	r0, 801cd90 <_JointState__cdr_deserialize+0x80>
 801cd76:	9a01      	ldr	r2, [sp, #4]
 801cd78:	b102      	cbz	r2, 801cd7c <_JointState__cdr_deserialize+0x6c>
 801cd7a:	3a01      	subs	r2, #1
 801cd7c:	696b      	ldr	r3, [r5, #20]
 801cd7e:	9900      	ldr	r1, [sp, #0]
 801cd80:	443b      	add	r3, r7
 801cd82:	605a      	str	r2, [r3, #4]
 801cd84:	e7e2      	b.n	801cd4c <_JointState__cdr_deserialize+0x3c>
 801cd86:	2400      	movs	r4, #0
 801cd88:	4620      	mov	r0, r4
 801cd8a:	b003      	add	sp, #12
 801cd8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cd90:	9b01      	ldr	r3, [sp, #4]
 801cd92:	4599      	cmp	r9, r3
 801cd94:	d323      	bcc.n	801cdde <_JointState__cdr_deserialize+0xce>
 801cd96:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 801cd98:	4643      	mov	r3, r8
 801cd9a:	6a29      	ldr	r1, [r5, #32]
 801cd9c:	4630      	mov	r0, r6
 801cd9e:	4622      	mov	r2, r4
 801cda0:	f7fd fec8 	bl	801ab34 <ucdr_deserialize_sequence_double>
 801cda4:	9b01      	ldr	r3, [sp, #4]
 801cda6:	2800      	cmp	r0, #0
 801cda8:	d04c      	beq.n	801ce44 <_JointState__cdr_deserialize+0x134>
 801cdaa:	626b      	str	r3, [r5, #36]	@ 0x24
 801cdac:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
 801cdae:	4643      	mov	r3, r8
 801cdb0:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 801cdb2:	4630      	mov	r0, r6
 801cdb4:	4622      	mov	r2, r4
 801cdb6:	f7fd febd 	bl	801ab34 <ucdr_deserialize_sequence_double>
 801cdba:	9b01      	ldr	r3, [sp, #4]
 801cdbc:	b390      	cbz	r0, 801ce24 <_JointState__cdr_deserialize+0x114>
 801cdbe:	632b      	str	r3, [r5, #48]	@ 0x30
 801cdc0:	6c2f      	ldr	r7, [r5, #64]	@ 0x40
 801cdc2:	4643      	mov	r3, r8
 801cdc4:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 801cdc6:	4630      	mov	r0, r6
 801cdc8:	463a      	mov	r2, r7
 801cdca:	f7fd feb3 	bl	801ab34 <ucdr_deserialize_sequence_double>
 801cdce:	9b01      	ldr	r3, [sp, #4]
 801cdd0:	4604      	mov	r4, r0
 801cdd2:	b1b8      	cbz	r0, 801ce04 <_JointState__cdr_deserialize+0xf4>
 801cdd4:	4620      	mov	r0, r4
 801cdd6:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801cdd8:	b003      	add	sp, #12
 801cdda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cdde:	2101      	movs	r1, #1
 801cde0:	75b0      	strb	r0, [r6, #22]
 801cde2:	7571      	strb	r1, [r6, #21]
 801cde4:	696b      	ldr	r3, [r5, #20]
 801cde6:	443b      	add	r3, r7
 801cde8:	6058      	str	r0, [r3, #4]
 801cdea:	4630      	mov	r0, r6
 801cdec:	f7fd fde0 	bl	801a9b0 <ucdr_align_to>
 801cdf0:	9901      	ldr	r1, [sp, #4]
 801cdf2:	4630      	mov	r0, r6
 801cdf4:	f7fd fe14 	bl	801aa20 <ucdr_advance_buffer>
 801cdf8:	e7cd      	b.n	801cd96 <_JointState__cdr_deserialize+0x86>
 801cdfa:	460c      	mov	r4, r1
 801cdfc:	4620      	mov	r0, r4
 801cdfe:	b003      	add	sp, #12
 801ce00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ce04:	429f      	cmp	r7, r3
 801ce06:	d2bf      	bcs.n	801cd88 <_JointState__cdr_deserialize+0x78>
 801ce08:	2301      	movs	r3, #1
 801ce0a:	4630      	mov	r0, r6
 801ce0c:	75b4      	strb	r4, [r6, #22]
 801ce0e:	2108      	movs	r1, #8
 801ce10:	7573      	strb	r3, [r6, #21]
 801ce12:	63ec      	str	r4, [r5, #60]	@ 0x3c
 801ce14:	f7fd fdcc 	bl	801a9b0 <ucdr_align_to>
 801ce18:	9901      	ldr	r1, [sp, #4]
 801ce1a:	4630      	mov	r0, r6
 801ce1c:	00c9      	lsls	r1, r1, #3
 801ce1e:	f7fd fdff 	bl	801aa20 <ucdr_advance_buffer>
 801ce22:	e7b1      	b.n	801cd88 <_JointState__cdr_deserialize+0x78>
 801ce24:	429c      	cmp	r4, r3
 801ce26:	d2cb      	bcs.n	801cdc0 <_JointState__cdr_deserialize+0xb0>
 801ce28:	2301      	movs	r3, #1
 801ce2a:	75b0      	strb	r0, [r6, #22]
 801ce2c:	2108      	movs	r1, #8
 801ce2e:	7573      	strb	r3, [r6, #21]
 801ce30:	6328      	str	r0, [r5, #48]	@ 0x30
 801ce32:	4630      	mov	r0, r6
 801ce34:	f7fd fdbc 	bl	801a9b0 <ucdr_align_to>
 801ce38:	9901      	ldr	r1, [sp, #4]
 801ce3a:	4630      	mov	r0, r6
 801ce3c:	00c9      	lsls	r1, r1, #3
 801ce3e:	f7fd fdef 	bl	801aa20 <ucdr_advance_buffer>
 801ce42:	e7bd      	b.n	801cdc0 <_JointState__cdr_deserialize+0xb0>
 801ce44:	429c      	cmp	r4, r3
 801ce46:	d2b1      	bcs.n	801cdac <_JointState__cdr_deserialize+0x9c>
 801ce48:	2301      	movs	r3, #1
 801ce4a:	75b0      	strb	r0, [r6, #22]
 801ce4c:	2108      	movs	r1, #8
 801ce4e:	7573      	strb	r3, [r6, #21]
 801ce50:	6268      	str	r0, [r5, #36]	@ 0x24
 801ce52:	4630      	mov	r0, r6
 801ce54:	f7fd fdac 	bl	801a9b0 <ucdr_align_to>
 801ce58:	9901      	ldr	r1, [sp, #4]
 801ce5a:	4630      	mov	r0, r6
 801ce5c:	00c9      	lsls	r1, r1, #3
 801ce5e:	f7fd fddf 	bl	801aa20 <ucdr_advance_buffer>
 801ce62:	e7a3      	b.n	801cdac <_JointState__cdr_deserialize+0x9c>
 801ce64:	f10d 0804 	add.w	r8, sp, #4
 801ce68:	e795      	b.n	801cd96 <_JointState__cdr_deserialize+0x86>
 801ce6a:	bf00      	nop

0801ce6c <_JointState__cdr_serialize>:
 801ce6c:	2800      	cmp	r0, #0
 801ce6e:	d04b      	beq.n	801cf08 <_JointState__cdr_serialize+0x9c>
 801ce70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ce74:	4681      	mov	r9, r0
 801ce76:	460f      	mov	r7, r1
 801ce78:	f000 f8f8 	bl	801d06c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801ce7c:	4603      	mov	r3, r0
 801ce7e:	4639      	mov	r1, r7
 801ce80:	4648      	mov	r0, r9
 801ce82:	685b      	ldr	r3, [r3, #4]
 801ce84:	689b      	ldr	r3, [r3, #8]
 801ce86:	4798      	blx	r3
 801ce88:	f8d9 8018 	ldr.w	r8, [r9, #24]
 801ce8c:	4638      	mov	r0, r7
 801ce8e:	4641      	mov	r1, r8
 801ce90:	f7fc fca6 	bl	80197e0 <ucdr_serialize_uint32_t>
 801ce94:	f1b8 0f00 	cmp.w	r8, #0
 801ce98:	d019      	beq.n	801cece <_JointState__cdr_serialize+0x62>
 801ce9a:	b1c0      	cbz	r0, 801cece <_JointState__cdr_serialize+0x62>
 801ce9c:	2400      	movs	r4, #0
 801ce9e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801cea2:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801cea6:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 801ceaa:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 801ceae:	4630      	mov	r0, r6
 801ceb0:	b1f6      	cbz	r6, 801cef0 <_JointState__cdr_serialize+0x84>
 801ceb2:	f7e3 f9cf 	bl	8000254 <strlen>
 801ceb6:	4603      	mov	r3, r0
 801ceb8:	3401      	adds	r4, #1
 801ceba:	4631      	mov	r1, r6
 801cebc:	4638      	mov	r0, r7
 801cebe:	1c5a      	adds	r2, r3, #1
 801cec0:	606b      	str	r3, [r5, #4]
 801cec2:	f7fd fdcd 	bl	801aa60 <ucdr_serialize_sequence_char>
 801cec6:	45a0      	cmp	r8, r4
 801cec8:	d901      	bls.n	801cece <_JointState__cdr_serialize+0x62>
 801ceca:	2800      	cmp	r0, #0
 801cecc:	d1e7      	bne.n	801ce9e <_JointState__cdr_serialize+0x32>
 801cece:	e9d9 1208 	ldrd	r1, r2, [r9, #32]
 801ced2:	4638      	mov	r0, r7
 801ced4:	f7fd fe1c 	bl	801ab10 <ucdr_serialize_sequence_double>
 801ced8:	4638      	mov	r0, r7
 801ceda:	e9d9 120b 	ldrd	r1, r2, [r9, #44]	@ 0x2c
 801cede:	f7fd fe17 	bl	801ab10 <ucdr_serialize_sequence_double>
 801cee2:	4638      	mov	r0, r7
 801cee4:	e9d9 120e 	ldrd	r1, r2, [r9, #56]	@ 0x38
 801cee8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ceec:	f7fd be10 	b.w	801ab10 <ucdr_serialize_sequence_double>
 801cef0:	3401      	adds	r4, #1
 801cef2:	4632      	mov	r2, r6
 801cef4:	4631      	mov	r1, r6
 801cef6:	4638      	mov	r0, r7
 801cef8:	606e      	str	r6, [r5, #4]
 801cefa:	f7fd fdb1 	bl	801aa60 <ucdr_serialize_sequence_char>
 801cefe:	45a0      	cmp	r8, r4
 801cf00:	d9e5      	bls.n	801cece <_JointState__cdr_serialize+0x62>
 801cf02:	2800      	cmp	r0, #0
 801cf04:	d1cb      	bne.n	801ce9e <_JointState__cdr_serialize+0x32>
 801cf06:	e7e2      	b.n	801cece <_JointState__cdr_serialize+0x62>
 801cf08:	4770      	bx	lr
 801cf0a:	bf00      	nop

0801cf0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__JointState>:
 801cf0c:	4800      	ldr	r0, [pc, #0]	@ (801cf10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x4>)
 801cf0e:	4770      	bx	lr
 801cf10:	20000314 	.word	0x20000314

0801cf14 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 801cf14:	f008 ba3e 	b.w	8025394 <std_msgs__msg__Header__init>

0801cf18 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 801cf18:	f008 ba60 	b.w	80253dc <std_msgs__msg__Header__fini>

0801cf1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 801cf1c:	b508      	push	{r3, lr}
 801cf1e:	f000 fc79 	bl	801d814 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801cf22:	4b06      	ldr	r3, [pc, #24]	@ (801cf3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 801cf24:	4906      	ldr	r1, [pc, #24]	@ (801cf40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 801cf26:	681a      	ldr	r2, [r3, #0]
 801cf28:	60c8      	str	r0, [r1, #12]
 801cf2a:	b10a      	cbz	r2, 801cf30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 801cf2c:	4803      	ldr	r0, [pc, #12]	@ (801cf3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 801cf2e:	bd08      	pop	{r3, pc}
 801cf30:	4a04      	ldr	r2, [pc, #16]	@ (801cf44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 801cf32:	4802      	ldr	r0, [pc, #8]	@ (801cf3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 801cf34:	6812      	ldr	r2, [r2, #0]
 801cf36:	601a      	str	r2, [r3, #0]
 801cf38:	bd08      	pop	{r3, pc}
 801cf3a:	bf00      	nop
 801cf3c:	200003b4 	.word	0x200003b4
 801cf40:	2000033c 	.word	0x2000033c
 801cf44:	200001c4 	.word	0x200001c4

0801cf48 <_Header__max_serialized_size>:
 801cf48:	b500      	push	{lr}
 801cf4a:	b083      	sub	sp, #12
 801cf4c:	2301      	movs	r3, #1
 801cf4e:	2100      	movs	r1, #0
 801cf50:	f10d 0007 	add.w	r0, sp, #7
 801cf54:	f88d 3007 	strb.w	r3, [sp, #7]
 801cf58:	f000 fd22 	bl	801d9a0 <max_serialized_size_builtin_interfaces__msg__Time>
 801cf5c:	b003      	add	sp, #12
 801cf5e:	f85d fb04 	ldr.w	pc, [sp], #4
 801cf62:	bf00      	nop

0801cf64 <get_serialized_size_std_msgs__msg__Header>:
 801cf64:	b570      	push	{r4, r5, r6, lr}
 801cf66:	4605      	mov	r5, r0
 801cf68:	b168      	cbz	r0, 801cf86 <get_serialized_size_std_msgs__msg__Header+0x22>
 801cf6a:	460c      	mov	r4, r1
 801cf6c:	f000 fcc8 	bl	801d900 <get_serialized_size_builtin_interfaces__msg__Time>
 801cf70:	2104      	movs	r1, #4
 801cf72:	1826      	adds	r6, r4, r0
 801cf74:	f1c4 0405 	rsb	r4, r4, #5
 801cf78:	4630      	mov	r0, r6
 801cf7a:	f7fd fd01 	bl	801a980 <ucdr_alignment>
 801cf7e:	68e9      	ldr	r1, [r5, #12]
 801cf80:	440c      	add	r4, r1
 801cf82:	4404      	add	r4, r0
 801cf84:	19a0      	adds	r0, r4, r6
 801cf86:	bd70      	pop	{r4, r5, r6, pc}

0801cf88 <_Header__cdr_deserialize>:
 801cf88:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf8a:	460c      	mov	r4, r1
 801cf8c:	b083      	sub	sp, #12
 801cf8e:	b1e9      	cbz	r1, 801cfcc <_Header__cdr_deserialize+0x44>
 801cf90:	4606      	mov	r6, r0
 801cf92:	f000 fd19 	bl	801d9c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801cf96:	4603      	mov	r3, r0
 801cf98:	4621      	mov	r1, r4
 801cf9a:	4630      	mov	r0, r6
 801cf9c:	685b      	ldr	r3, [r3, #4]
 801cf9e:	68db      	ldr	r3, [r3, #12]
 801cfa0:	4798      	blx	r3
 801cfa2:	6927      	ldr	r7, [r4, #16]
 801cfa4:	ab01      	add	r3, sp, #4
 801cfa6:	68a1      	ldr	r1, [r4, #8]
 801cfa8:	463a      	mov	r2, r7
 801cfaa:	4630      	mov	r0, r6
 801cfac:	f7fd fd6a 	bl	801aa84 <ucdr_deserialize_sequence_char>
 801cfb0:	9b01      	ldr	r3, [sp, #4]
 801cfb2:	4605      	mov	r5, r0
 801cfb4:	b920      	cbnz	r0, 801cfc0 <_Header__cdr_deserialize+0x38>
 801cfb6:	429f      	cmp	r7, r3
 801cfb8:	d30c      	bcc.n	801cfd4 <_Header__cdr_deserialize+0x4c>
 801cfba:	4628      	mov	r0, r5
 801cfbc:	b003      	add	sp, #12
 801cfbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cfc0:	b103      	cbz	r3, 801cfc4 <_Header__cdr_deserialize+0x3c>
 801cfc2:	3b01      	subs	r3, #1
 801cfc4:	4628      	mov	r0, r5
 801cfc6:	60e3      	str	r3, [r4, #12]
 801cfc8:	b003      	add	sp, #12
 801cfca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cfcc:	460d      	mov	r5, r1
 801cfce:	4628      	mov	r0, r5
 801cfd0:	b003      	add	sp, #12
 801cfd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cfd4:	2101      	movs	r1, #1
 801cfd6:	4630      	mov	r0, r6
 801cfd8:	75b5      	strb	r5, [r6, #22]
 801cfda:	7571      	strb	r1, [r6, #21]
 801cfdc:	60e5      	str	r5, [r4, #12]
 801cfde:	f7fd fce7 	bl	801a9b0 <ucdr_align_to>
 801cfe2:	4630      	mov	r0, r6
 801cfe4:	9901      	ldr	r1, [sp, #4]
 801cfe6:	f7fd fd1b 	bl	801aa20 <ucdr_advance_buffer>
 801cfea:	4628      	mov	r0, r5
 801cfec:	b003      	add	sp, #12
 801cfee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cff0 <_Header__cdr_serialize>:
 801cff0:	b308      	cbz	r0, 801d036 <_Header__cdr_serialize+0x46>
 801cff2:	b570      	push	{r4, r5, r6, lr}
 801cff4:	4604      	mov	r4, r0
 801cff6:	460d      	mov	r5, r1
 801cff8:	f000 fce6 	bl	801d9c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801cffc:	4603      	mov	r3, r0
 801cffe:	4629      	mov	r1, r5
 801d000:	4620      	mov	r0, r4
 801d002:	685b      	ldr	r3, [r3, #4]
 801d004:	689b      	ldr	r3, [r3, #8]
 801d006:	4798      	blx	r3
 801d008:	68a6      	ldr	r6, [r4, #8]
 801d00a:	b15e      	cbz	r6, 801d024 <_Header__cdr_serialize+0x34>
 801d00c:	4630      	mov	r0, r6
 801d00e:	f7e3 f921 	bl	8000254 <strlen>
 801d012:	4603      	mov	r3, r0
 801d014:	1c42      	adds	r2, r0, #1
 801d016:	4631      	mov	r1, r6
 801d018:	4628      	mov	r0, r5
 801d01a:	60e3      	str	r3, [r4, #12]
 801d01c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d020:	f7fd bd1e 	b.w	801aa60 <ucdr_serialize_sequence_char>
 801d024:	4633      	mov	r3, r6
 801d026:	4632      	mov	r2, r6
 801d028:	4631      	mov	r1, r6
 801d02a:	4628      	mov	r0, r5
 801d02c:	60e3      	str	r3, [r4, #12]
 801d02e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d032:	f7fd bd15 	b.w	801aa60 <ucdr_serialize_sequence_char>
 801d036:	4770      	bx	lr

0801d038 <_Header__get_serialized_size>:
 801d038:	b538      	push	{r3, r4, r5, lr}
 801d03a:	4604      	mov	r4, r0
 801d03c:	b150      	cbz	r0, 801d054 <_Header__get_serialized_size+0x1c>
 801d03e:	2100      	movs	r1, #0
 801d040:	f000 fc5e 	bl	801d900 <get_serialized_size_builtin_interfaces__msg__Time>
 801d044:	2104      	movs	r1, #4
 801d046:	4605      	mov	r5, r0
 801d048:	f7fd fc9a 	bl	801a980 <ucdr_alignment>
 801d04c:	68e2      	ldr	r2, [r4, #12]
 801d04e:	3205      	adds	r2, #5
 801d050:	1953      	adds	r3, r2, r5
 801d052:	4418      	add	r0, r3
 801d054:	bd38      	pop	{r3, r4, r5, pc}
 801d056:	bf00      	nop

0801d058 <max_serialized_size_std_msgs__msg__Header>:
 801d058:	2301      	movs	r3, #1
 801d05a:	b510      	push	{r4, lr}
 801d05c:	7003      	strb	r3, [r0, #0]
 801d05e:	4604      	mov	r4, r0
 801d060:	f000 fc9e 	bl	801d9a0 <max_serialized_size_builtin_interfaces__msg__Time>
 801d064:	2300      	movs	r3, #0
 801d066:	7023      	strb	r3, [r4, #0]
 801d068:	bd10      	pop	{r4, pc}
 801d06a:	bf00      	nop

0801d06c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 801d06c:	4800      	ldr	r0, [pc, #0]	@ (801d070 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 801d06e:	4770      	bx	lr
 801d070:	200003c0 	.word	0x200003c0

0801d074 <rosidl_typesupport_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectory>:
 801d074:	4b04      	ldr	r3, [pc, #16]	@ (801d088 <rosidl_typesupport_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectory+0x14>)
 801d076:	681a      	ldr	r2, [r3, #0]
 801d078:	b10a      	cbz	r2, 801d07e <rosidl_typesupport_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectory+0xa>
 801d07a:	4803      	ldr	r0, [pc, #12]	@ (801d088 <rosidl_typesupport_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectory+0x14>)
 801d07c:	4770      	bx	lr
 801d07e:	4a03      	ldr	r2, [pc, #12]	@ (801d08c <rosidl_typesupport_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectory+0x18>)
 801d080:	4801      	ldr	r0, [pc, #4]	@ (801d088 <rosidl_typesupport_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectory+0x14>)
 801d082:	6812      	ldr	r2, [r2, #0]
 801d084:	601a      	str	r2, [r3, #0]
 801d086:	4770      	bx	lr
 801d088:	200003f0 	.word	0x200003f0
 801d08c:	200001c0 	.word	0x200001c0

0801d090 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectory>:
 801d090:	4a02      	ldr	r2, [pc, #8]	@ (801d09c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectory+0xc>)
 801d092:	4b03      	ldr	r3, [pc, #12]	@ (801d0a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectory+0x10>)
 801d094:	6812      	ldr	r2, [r2, #0]
 801d096:	601a      	str	r2, [r3, #0]
 801d098:	4770      	bx	lr
 801d09a:	bf00      	nop
 801d09c:	200001c0 	.word	0x200001c0
 801d0a0:	200003f0 	.word	0x200003f0

0801d0a4 <trajectory_msgs__msg__JointTrajectory__rosidl_typesupport_introspection_c__size_function__JointTrajectory__joint_names>:
 801d0a4:	6840      	ldr	r0, [r0, #4]
 801d0a6:	4770      	bx	lr

0801d0a8 <trajectory_msgs__msg__JointTrajectory__rosidl_typesupport_introspection_c__get_const_function__JointTrajectory__joint_names>:
 801d0a8:	6800      	ldr	r0, [r0, #0]
 801d0aa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d0ae:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801d0b2:	4770      	bx	lr

0801d0b4 <trajectory_msgs__msg__JointTrajectory__rosidl_typesupport_introspection_c__fetch_function__JointTrajectory__joint_names>:
 801d0b4:	6803      	ldr	r3, [r0, #0]
 801d0b6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d0ba:	4694      	mov	ip, r2
 801d0bc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801d0c0:	c907      	ldmia	r1, {r0, r1, r2}
 801d0c2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 801d0c6:	4770      	bx	lr

0801d0c8 <trajectory_msgs__msg__JointTrajectory__rosidl_typesupport_introspection_c__assign_function__JointTrajectory__joint_names>:
 801d0c8:	6803      	ldr	r3, [r0, #0]
 801d0ca:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801d0ce:	ca07      	ldmia	r2, {r0, r1, r2}
 801d0d0:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 801d0d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801d0d8:	4770      	bx	lr
 801d0da:	bf00      	nop

0801d0dc <trajectory_msgs__msg__JointTrajectory__rosidl_typesupport_introspection_c__size_function__JointTrajectory__points>:
 801d0dc:	6840      	ldr	r0, [r0, #4]
 801d0de:	4770      	bx	lr

0801d0e0 <trajectory_msgs__msg__JointTrajectory__rosidl_typesupport_introspection_c__get_const_function__JointTrajectory__points>:
 801d0e0:	6800      	ldr	r0, [r0, #0]
 801d0e2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801d0e6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801d0ea:	4770      	bx	lr

0801d0ec <trajectory_msgs__msg__JointTrajectory__rosidl_typesupport_introspection_c__fetch_function__JointTrajectory__points>:
 801d0ec:	6803      	ldr	r3, [r0, #0]
 801d0ee:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801d0f2:	4694      	mov	ip, r2
 801d0f4:	b500      	push	{lr}
 801d0f6:	eb03 0ec1 	add.w	lr, r3, r1, lsl #3
 801d0fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d0fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d102:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d106:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d10a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d10e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d112:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801d116:	e88c 0003 	stmia.w	ip, {r0, r1}
 801d11a:	f85d fb04 	ldr.w	pc, [sp], #4
 801d11e:	bf00      	nop

0801d120 <trajectory_msgs__msg__JointTrajectory__rosidl_typesupport_introspection_c__assign_function__JointTrajectory__points>:
 801d120:	6803      	ldr	r3, [r0, #0]
 801d122:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801d126:	b500      	push	{lr}
 801d128:	4696      	mov	lr, r2
 801d12a:	eb03 0cc1 	add.w	ip, r3, r1, lsl #3
 801d12e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d132:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d136:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d13a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d13e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d142:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d146:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801d14a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801d14e:	f85d fb04 	ldr.w	pc, [sp], #4
 801d152:	bf00      	nop

0801d154 <trajectory_msgs__msg__JointTrajectory__rosidl_typesupport_introspection_c__JointTrajectory_init_function>:
 801d154:	f008 b94e 	b.w	80253f4 <trajectory_msgs__msg__JointTrajectory__init>

0801d158 <trajectory_msgs__msg__JointTrajectory__rosidl_typesupport_introspection_c__JointTrajectory_fini_function>:
 801d158:	f008 b98c 	b.w	8025474 <trajectory_msgs__msg__JointTrajectory__fini>

0801d15c <trajectory_msgs__msg__JointTrajectory__rosidl_typesupport_introspection_c__resize_function__JointTrajectory__joint_names>:
 801d15c:	b510      	push	{r4, lr}
 801d15e:	4604      	mov	r4, r0
 801d160:	b082      	sub	sp, #8
 801d162:	9101      	str	r1, [sp, #4]
 801d164:	f7ff fbf4 	bl	801c950 <rosidl_runtime_c__String__Sequence__fini>
 801d168:	9901      	ldr	r1, [sp, #4]
 801d16a:	4620      	mov	r0, r4
 801d16c:	b002      	add	sp, #8
 801d16e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d172:	f7ff bba5 	b.w	801c8c0 <rosidl_runtime_c__String__Sequence__init>
 801d176:	bf00      	nop

0801d178 <trajectory_msgs__msg__JointTrajectory__rosidl_typesupport_introspection_c__resize_function__JointTrajectory__points>:
 801d178:	b510      	push	{r4, lr}
 801d17a:	4604      	mov	r4, r0
 801d17c:	b082      	sub	sp, #8
 801d17e:	9101      	str	r1, [sp, #4]
 801d180:	f008 fa6a 	bl	8025658 <trajectory_msgs__msg__JointTrajectoryPoint__Sequence__fini>
 801d184:	9901      	ldr	r1, [sp, #4]
 801d186:	4620      	mov	r0, r4
 801d188:	b002      	add	sp, #8
 801d18a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d18e:	f008 ba5f 	b.w	8025650 <trajectory_msgs__msg__JointTrajectoryPoint__Sequence__init>
 801d192:	bf00      	nop

0801d194 <trajectory_msgs__msg__JointTrajectory__rosidl_typesupport_introspection_c__get_function__JointTrajectory__points>:
 801d194:	6800      	ldr	r0, [r0, #0]
 801d196:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801d19a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801d19e:	4770      	bx	lr

0801d1a0 <trajectory_msgs__msg__JointTrajectory__rosidl_typesupport_introspection_c__get_function__JointTrajectory__joint_names>:
 801d1a0:	6800      	ldr	r0, [r0, #0]
 801d1a2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d1a6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801d1aa:	4770      	bx	lr

0801d1ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectory>:
 801d1ac:	b510      	push	{r4, lr}
 801d1ae:	4c09      	ldr	r4, [pc, #36]	@ (801d1d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectory+0x28>)
 801d1b0:	f7ff feb4 	bl	801cf1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 801d1b4:	60e0      	str	r0, [r4, #12]
 801d1b6:	f000 f8b7 	bl	801d328 <rosidl_typesupport_introspection_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectoryPoint>
 801d1ba:	4b07      	ldr	r3, [pc, #28]	@ (801d1d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectory+0x2c>)
 801d1bc:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 801d1c0:	681a      	ldr	r2, [r3, #0]
 801d1c2:	b10a      	cbz	r2, 801d1c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectory+0x1c>
 801d1c4:	4804      	ldr	r0, [pc, #16]	@ (801d1d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectory+0x2c>)
 801d1c6:	bd10      	pop	{r4, pc}
 801d1c8:	4a04      	ldr	r2, [pc, #16]	@ (801d1dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectory+0x30>)
 801d1ca:	4803      	ldr	r0, [pc, #12]	@ (801d1d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectory+0x2c>)
 801d1cc:	6812      	ldr	r2, [r2, #0]
 801d1ce:	601a      	str	r2, [r3, #0]
 801d1d0:	bd10      	pop	{r4, pc}
 801d1d2:	bf00      	nop
 801d1d4:	200003fc 	.word	0x200003fc
 801d1d8:	200004b0 	.word	0x200004b0
 801d1dc:	200001c4 	.word	0x200001c4

0801d1e0 <trajectory_msgs__msg__JointTrajectoryPoint__rosidl_typesupport_introspection_c__size_function__JointTrajectoryPoint__positions>:
 801d1e0:	6840      	ldr	r0, [r0, #4]
 801d1e2:	4770      	bx	lr

0801d1e4 <trajectory_msgs__msg__JointTrajectoryPoint__rosidl_typesupport_introspection_c__get_const_function__JointTrajectoryPoint__positions>:
 801d1e4:	6800      	ldr	r0, [r0, #0]
 801d1e6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801d1ea:	4770      	bx	lr

0801d1ec <trajectory_msgs__msg__JointTrajectoryPoint__rosidl_typesupport_introspection_c__fetch_function__JointTrajectoryPoint__positions>:
 801d1ec:	6803      	ldr	r3, [r0, #0]
 801d1ee:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801d1f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d1f6:	e9c2 0100 	strd	r0, r1, [r2]
 801d1fa:	4770      	bx	lr

0801d1fc <trajectory_msgs__msg__JointTrajectoryPoint__rosidl_typesupport_introspection_c__assign_function__JointTrajectoryPoint__positions>:
 801d1fc:	6803      	ldr	r3, [r0, #0]
 801d1fe:	ed92 7b00 	vldr	d7, [r2]
 801d202:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801d206:	ed81 7b00 	vstr	d7, [r1]
 801d20a:	4770      	bx	lr

0801d20c <trajectory_msgs__msg__JointTrajectoryPoint__rosidl_typesupport_introspection_c__JointTrajectoryPoint_init_function>:
 801d20c:	f008 b942 	b.w	8025494 <trajectory_msgs__msg__JointTrajectoryPoint__init>

0801d210 <trajectory_msgs__msg__JointTrajectoryPoint__rosidl_typesupport_introspection_c__JointTrajectoryPoint_fini_function>:
 801d210:	f008 ba06 	b.w	8025620 <trajectory_msgs__msg__JointTrajectoryPoint__fini>

0801d214 <trajectory_msgs__msg__JointTrajectoryPoint__rosidl_typesupport_introspection_c__resize_function__JointTrajectoryPoint__positions>:
 801d214:	b510      	push	{r4, lr}
 801d216:	4604      	mov	r4, r0
 801d218:	b082      	sub	sp, #8
 801d21a:	9101      	str	r1, [sp, #4]
 801d21c:	f7ff fade 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 801d220:	9901      	ldr	r1, [sp, #4]
 801d222:	4620      	mov	r0, r4
 801d224:	b002      	add	sp, #8
 801d226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d22a:	f7ff babf 	b.w	801c7ac <rosidl_runtime_c__double__Sequence__init>
 801d22e:	bf00      	nop

0801d230 <trajectory_msgs__msg__JointTrajectoryPoint__rosidl_typesupport_introspection_c__size_function__JointTrajectoryPoint__effort>:
 801d230:	6840      	ldr	r0, [r0, #4]
 801d232:	4770      	bx	lr

0801d234 <trajectory_msgs__msg__JointTrajectoryPoint__rosidl_typesupport_introspection_c__size_function__JointTrajectoryPoint__velocities>:
 801d234:	6840      	ldr	r0, [r0, #4]
 801d236:	4770      	bx	lr

0801d238 <trajectory_msgs__msg__JointTrajectoryPoint__rosidl_typesupport_introspection_c__size_function__JointTrajectoryPoint__accelerations>:
 801d238:	6840      	ldr	r0, [r0, #4]
 801d23a:	4770      	bx	lr

0801d23c <trajectory_msgs__msg__JointTrajectoryPoint__rosidl_typesupport_introspection_c__get_const_function__JointTrajectoryPoint__velocities>:
 801d23c:	6800      	ldr	r0, [r0, #0]
 801d23e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801d242:	4770      	bx	lr

0801d244 <trajectory_msgs__msg__JointTrajectoryPoint__rosidl_typesupport_introspection_c__get_const_function__JointTrajectoryPoint__accelerations>:
 801d244:	6800      	ldr	r0, [r0, #0]
 801d246:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801d24a:	4770      	bx	lr

0801d24c <trajectory_msgs__msg__JointTrajectoryPoint__rosidl_typesupport_introspection_c__get_function__JointTrajectoryPoint__accelerations>:
 801d24c:	6800      	ldr	r0, [r0, #0]
 801d24e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801d252:	4770      	bx	lr

0801d254 <trajectory_msgs__msg__JointTrajectoryPoint__rosidl_typesupport_introspection_c__get_const_function__JointTrajectoryPoint__effort>:
 801d254:	6800      	ldr	r0, [r0, #0]
 801d256:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801d25a:	4770      	bx	lr

0801d25c <trajectory_msgs__msg__JointTrajectoryPoint__rosidl_typesupport_introspection_c__get_function__JointTrajectoryPoint__effort>:
 801d25c:	6800      	ldr	r0, [r0, #0]
 801d25e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801d262:	4770      	bx	lr

0801d264 <trajectory_msgs__msg__JointTrajectoryPoint__rosidl_typesupport_introspection_c__get_function__JointTrajectoryPoint__velocities>:
 801d264:	6800      	ldr	r0, [r0, #0]
 801d266:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801d26a:	4770      	bx	lr

0801d26c <trajectory_msgs__msg__JointTrajectoryPoint__rosidl_typesupport_introspection_c__get_function__JointTrajectoryPoint__positions>:
 801d26c:	6800      	ldr	r0, [r0, #0]
 801d26e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801d272:	4770      	bx	lr

0801d274 <trajectory_msgs__msg__JointTrajectoryPoint__rosidl_typesupport_introspection_c__fetch_function__JointTrajectoryPoint__accelerations>:
 801d274:	6803      	ldr	r3, [r0, #0]
 801d276:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801d27a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d27e:	e9c2 0100 	strd	r0, r1, [r2]
 801d282:	4770      	bx	lr

0801d284 <trajectory_msgs__msg__JointTrajectoryPoint__rosidl_typesupport_introspection_c__fetch_function__JointTrajectoryPoint__velocities>:
 801d284:	6803      	ldr	r3, [r0, #0]
 801d286:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801d28a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d28e:	e9c2 0100 	strd	r0, r1, [r2]
 801d292:	4770      	bx	lr

0801d294 <trajectory_msgs__msg__JointTrajectoryPoint__rosidl_typesupport_introspection_c__fetch_function__JointTrajectoryPoint__effort>:
 801d294:	6803      	ldr	r3, [r0, #0]
 801d296:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801d29a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d29e:	e9c2 0100 	strd	r0, r1, [r2]
 801d2a2:	4770      	bx	lr

0801d2a4 <trajectory_msgs__msg__JointTrajectoryPoint__rosidl_typesupport_introspection_c__assign_function__JointTrajectoryPoint__effort>:
 801d2a4:	6803      	ldr	r3, [r0, #0]
 801d2a6:	ed92 7b00 	vldr	d7, [r2]
 801d2aa:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801d2ae:	ed81 7b00 	vstr	d7, [r1]
 801d2b2:	4770      	bx	lr

0801d2b4 <trajectory_msgs__msg__JointTrajectoryPoint__rosidl_typesupport_introspection_c__assign_function__JointTrajectoryPoint__velocities>:
 801d2b4:	6803      	ldr	r3, [r0, #0]
 801d2b6:	ed92 7b00 	vldr	d7, [r2]
 801d2ba:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801d2be:	ed81 7b00 	vstr	d7, [r1]
 801d2c2:	4770      	bx	lr

0801d2c4 <trajectory_msgs__msg__JointTrajectoryPoint__rosidl_typesupport_introspection_c__assign_function__JointTrajectoryPoint__accelerations>:
 801d2c4:	6803      	ldr	r3, [r0, #0]
 801d2c6:	ed92 7b00 	vldr	d7, [r2]
 801d2ca:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801d2ce:	ed81 7b00 	vstr	d7, [r1]
 801d2d2:	4770      	bx	lr

0801d2d4 <trajectory_msgs__msg__JointTrajectoryPoint__rosidl_typesupport_introspection_c__resize_function__JointTrajectoryPoint__accelerations>:
 801d2d4:	b510      	push	{r4, lr}
 801d2d6:	4604      	mov	r4, r0
 801d2d8:	b082      	sub	sp, #8
 801d2da:	9101      	str	r1, [sp, #4]
 801d2dc:	f7ff fa7e 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 801d2e0:	9901      	ldr	r1, [sp, #4]
 801d2e2:	4620      	mov	r0, r4
 801d2e4:	b002      	add	sp, #8
 801d2e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d2ea:	f7ff ba5f 	b.w	801c7ac <rosidl_runtime_c__double__Sequence__init>
 801d2ee:	bf00      	nop

0801d2f0 <trajectory_msgs__msg__JointTrajectoryPoint__rosidl_typesupport_introspection_c__resize_function__JointTrajectoryPoint__effort>:
 801d2f0:	b510      	push	{r4, lr}
 801d2f2:	4604      	mov	r4, r0
 801d2f4:	b082      	sub	sp, #8
 801d2f6:	9101      	str	r1, [sp, #4]
 801d2f8:	f7ff fa70 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 801d2fc:	9901      	ldr	r1, [sp, #4]
 801d2fe:	4620      	mov	r0, r4
 801d300:	b002      	add	sp, #8
 801d302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d306:	f7ff ba51 	b.w	801c7ac <rosidl_runtime_c__double__Sequence__init>
 801d30a:	bf00      	nop

0801d30c <trajectory_msgs__msg__JointTrajectoryPoint__rosidl_typesupport_introspection_c__resize_function__JointTrajectoryPoint__velocities>:
 801d30c:	b510      	push	{r4, lr}
 801d30e:	4604      	mov	r4, r0
 801d310:	b082      	sub	sp, #8
 801d312:	9101      	str	r1, [sp, #4]
 801d314:	f7ff fa62 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 801d318:	9901      	ldr	r1, [sp, #4]
 801d31a:	4620      	mov	r0, r4
 801d31c:	b002      	add	sp, #8
 801d31e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d322:	f7ff ba43 	b.w	801c7ac <rosidl_runtime_c__double__Sequence__init>
 801d326:	bf00      	nop

0801d328 <rosidl_typesupport_introspection_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectoryPoint>:
 801d328:	b508      	push	{r3, lr}
 801d32a:	f000 fa61 	bl	801d7f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Duration>
 801d32e:	4b06      	ldr	r3, [pc, #24]	@ (801d348 <rosidl_typesupport_introspection_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectoryPoint+0x20>)
 801d330:	4906      	ldr	r1, [pc, #24]	@ (801d34c <rosidl_typesupport_introspection_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectoryPoint+0x24>)
 801d332:	681a      	ldr	r2, [r3, #0]
 801d334:	f8c1 00fc 	str.w	r0, [r1, #252]	@ 0xfc
 801d338:	b10a      	cbz	r2, 801d33e <rosidl_typesupport_introspection_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectoryPoint+0x16>
 801d33a:	4803      	ldr	r0, [pc, #12]	@ (801d348 <rosidl_typesupport_introspection_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectoryPoint+0x20>)
 801d33c:	bd08      	pop	{r3, pc}
 801d33e:	4a04      	ldr	r2, [pc, #16]	@ (801d350 <rosidl_typesupport_introspection_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectoryPoint+0x28>)
 801d340:	4801      	ldr	r0, [pc, #4]	@ (801d348 <rosidl_typesupport_introspection_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectoryPoint+0x20>)
 801d342:	6812      	ldr	r2, [r2, #0]
 801d344:	601a      	str	r2, [r3, #0]
 801d346:	bd08      	pop	{r3, pc}
 801d348:	200005e8 	.word	0x200005e8
 801d34c:	200004bc 	.word	0x200004bc
 801d350:	200001c4 	.word	0x200001c4

0801d354 <_JointTrajectory__max_serialized_size>:
 801d354:	b500      	push	{lr}
 801d356:	b083      	sub	sp, #12
 801d358:	2301      	movs	r3, #1
 801d35a:	2100      	movs	r1, #0
 801d35c:	f10d 0007 	add.w	r0, sp, #7
 801d360:	f88d 3007 	strb.w	r3, [sp, #7]
 801d364:	f7ff fe78 	bl	801d058 <max_serialized_size_std_msgs__msg__Header>
 801d368:	b003      	add	sp, #12
 801d36a:	f85d fb04 	ldr.w	pc, [sp], #4
 801d36e:	bf00      	nop

0801d370 <get_serialized_size_trajectory_msgs__msg__JointTrajectory.part.0>:
 801d370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d374:	460e      	mov	r6, r1
 801d376:	4605      	mov	r5, r0
 801d378:	f7ff fdf4 	bl	801cf64 <get_serialized_size_std_msgs__msg__Header>
 801d37c:	2104      	movs	r1, #4
 801d37e:	1834      	adds	r4, r6, r0
 801d380:	69af      	ldr	r7, [r5, #24]
 801d382:	4620      	mov	r0, r4
 801d384:	f7fd fafc 	bl	801a980 <ucdr_alignment>
 801d388:	3004      	adds	r0, #4
 801d38a:	4404      	add	r4, r0
 801d38c:	b197      	cbz	r7, 801d3b4 <get_serialized_size_trajectory_msgs__msg__JointTrajectory.part.0+0x44>
 801d38e:	f04f 0800 	mov.w	r8, #0
 801d392:	4620      	mov	r0, r4
 801d394:	2104      	movs	r1, #4
 801d396:	f7fd faf3 	bl	801a980 <ucdr_alignment>
 801d39a:	696b      	ldr	r3, [r5, #20]
 801d39c:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 801d3a0:	4420      	add	r0, r4
 801d3a2:	f108 0801 	add.w	r8, r8, #1
 801d3a6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801d3aa:	1d43      	adds	r3, r0, #5
 801d3ac:	4547      	cmp	r7, r8
 801d3ae:	6854      	ldr	r4, [r2, #4]
 801d3b0:	441c      	add	r4, r3
 801d3b2:	d1ee      	bne.n	801d392 <get_serialized_size_trajectory_msgs__msg__JointTrajectory.part.0+0x22>
 801d3b4:	2104      	movs	r1, #4
 801d3b6:	4620      	mov	r0, r4
 801d3b8:	f8d5 8024 	ldr.w	r8, [r5, #36]	@ 0x24
 801d3bc:	f7fd fae0 	bl	801a980 <ucdr_alignment>
 801d3c0:	4420      	add	r0, r4
 801d3c2:	f100 0904 	add.w	r9, r0, #4
 801d3c6:	f1b8 0f00 	cmp.w	r8, #0
 801d3ca:	d018      	beq.n	801d3fe <get_serialized_size_trajectory_msgs__msg__JointTrajectory.part.0+0x8e>
 801d3cc:	2700      	movs	r7, #0
 801d3ce:	f000 fa07 	bl	801d7e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectoryPoint>
 801d3d2:	6a2a      	ldr	r2, [r5, #32]
 801d3d4:	ebc7 04c7 	rsb	r4, r7, r7, lsl #3
 801d3d8:	6843      	ldr	r3, [r0, #4]
 801d3da:	4649      	mov	r1, r9
 801d3dc:	3701      	adds	r7, #1
 801d3de:	eb02 00c4 	add.w	r0, r2, r4, lsl #3
 801d3e2:	695b      	ldr	r3, [r3, #20]
 801d3e4:	4798      	blx	r3
 801d3e6:	4604      	mov	r4, r0
 801d3e8:	4648      	mov	r0, r9
 801d3ea:	2c04      	cmp	r4, #4
 801d3ec:	4621      	mov	r1, r4
 801d3ee:	bf28      	it	cs
 801d3f0:	2104      	movcs	r1, #4
 801d3f2:	f7fd fac5 	bl	801a980 <ucdr_alignment>
 801d3f6:	45b8      	cmp	r8, r7
 801d3f8:	4420      	add	r0, r4
 801d3fa:	4481      	add	r9, r0
 801d3fc:	d1e7      	bne.n	801d3ce <get_serialized_size_trajectory_msgs__msg__JointTrajectory.part.0+0x5e>
 801d3fe:	eba9 0006 	sub.w	r0, r9, r6
 801d402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d406:	bf00      	nop

0801d408 <get_serialized_size_trajectory_msgs__msg__JointTrajectory>:
 801d408:	b108      	cbz	r0, 801d40e <get_serialized_size_trajectory_msgs__msg__JointTrajectory+0x6>
 801d40a:	f7ff bfb1 	b.w	801d370 <get_serialized_size_trajectory_msgs__msg__JointTrajectory.part.0>
 801d40e:	4770      	bx	lr

0801d410 <_JointTrajectory__get_serialized_size>:
 801d410:	b110      	cbz	r0, 801d418 <_JointTrajectory__get_serialized_size+0x8>
 801d412:	2100      	movs	r1, #0
 801d414:	f7ff bfac 	b.w	801d370 <get_serialized_size_trajectory_msgs__msg__JointTrajectory.part.0>
 801d418:	4770      	bx	lr
 801d41a:	bf00      	nop

0801d41c <_JointTrajectory__cdr_deserialize>:
 801d41c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d420:	460d      	mov	r5, r1
 801d422:	b083      	sub	sp, #12
 801d424:	2900      	cmp	r1, #0
 801d426:	d068      	beq.n	801d4fa <_JointTrajectory__cdr_deserialize+0xde>
 801d428:	4606      	mov	r6, r0
 801d42a:	f7ff fe1f 	bl	801d06c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801d42e:	4603      	mov	r3, r0
 801d430:	4629      	mov	r1, r5
 801d432:	4630      	mov	r0, r6
 801d434:	685b      	ldr	r3, [r3, #4]
 801d436:	68db      	ldr	r3, [r3, #12]
 801d438:	4798      	blx	r3
 801d43a:	4669      	mov	r1, sp
 801d43c:	4630      	mov	r0, r6
 801d43e:	f7fc faff 	bl	8019a40 <ucdr_deserialize_uint32_t>
 801d442:	9900      	ldr	r1, [sp, #0]
 801d444:	69eb      	ldr	r3, [r5, #28]
 801d446:	428b      	cmp	r3, r1
 801d448:	d322      	bcc.n	801d490 <_JointTrajectory__cdr_deserialize+0x74>
 801d44a:	61a9      	str	r1, [r5, #24]
 801d44c:	2800      	cmp	r0, #0
 801d44e:	d058      	beq.n	801d502 <_JointTrajectory__cdr_deserialize+0xe6>
 801d450:	2400      	movs	r4, #0
 801d452:	f10d 0804 	add.w	r8, sp, #4
 801d456:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801d45a:	42a1      	cmp	r1, r4
 801d45c:	4643      	mov	r3, r8
 801d45e:	4630      	mov	r0, r6
 801d460:	ea4f 0782 	mov.w	r7, r2, lsl #2
 801d464:	f104 0401 	add.w	r4, r4, #1
 801d468:	d919      	bls.n	801d49e <_JointTrajectory__cdr_deserialize+0x82>
 801d46a:	6969      	ldr	r1, [r5, #20]
 801d46c:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801d470:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801d474:	f8dc 9008 	ldr.w	r9, [ip, #8]
 801d478:	464a      	mov	r2, r9
 801d47a:	f7fd fb03 	bl	801aa84 <ucdr_deserialize_sequence_char>
 801d47e:	b158      	cbz	r0, 801d498 <_JointTrajectory__cdr_deserialize+0x7c>
 801d480:	9a01      	ldr	r2, [sp, #4]
 801d482:	b102      	cbz	r2, 801d486 <_JointTrajectory__cdr_deserialize+0x6a>
 801d484:	3a01      	subs	r2, #1
 801d486:	696b      	ldr	r3, [r5, #20]
 801d488:	9900      	ldr	r1, [sp, #0]
 801d48a:	443b      	add	r3, r7
 801d48c:	605a      	str	r2, [r3, #4]
 801d48e:	e7e2      	b.n	801d456 <_JointTrajectory__cdr_deserialize+0x3a>
 801d490:	2000      	movs	r0, #0
 801d492:	b003      	add	sp, #12
 801d494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d498:	9b01      	ldr	r3, [sp, #4]
 801d49a:	4599      	cmp	r9, r3
 801d49c:	d31f      	bcc.n	801d4de <_JointTrajectory__cdr_deserialize+0xc2>
 801d49e:	4641      	mov	r1, r8
 801d4a0:	4630      	mov	r0, r6
 801d4a2:	f7fc facd 	bl	8019a40 <ucdr_deserialize_uint32_t>
 801d4a6:	9b01      	ldr	r3, [sp, #4]
 801d4a8:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 801d4aa:	429a      	cmp	r2, r3
 801d4ac:	d3f0      	bcc.n	801d490 <_JointTrajectory__cdr_deserialize+0x74>
 801d4ae:	626b      	str	r3, [r5, #36]	@ 0x24
 801d4b0:	2b00      	cmp	r3, #0
 801d4b2:	d0ee      	beq.n	801d492 <_JointTrajectory__cdr_deserialize+0x76>
 801d4b4:	2400      	movs	r4, #0
 801d4b6:	4627      	mov	r7, r4
 801d4b8:	e002      	b.n	801d4c0 <_JointTrajectory__cdr_deserialize+0xa4>
 801d4ba:	9b01      	ldr	r3, [sp, #4]
 801d4bc:	429f      	cmp	r7, r3
 801d4be:	d2e8      	bcs.n	801d492 <_JointTrajectory__cdr_deserialize+0x76>
 801d4c0:	f000 f98e 	bl	801d7e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectoryPoint>
 801d4c4:	6a29      	ldr	r1, [r5, #32]
 801d4c6:	6843      	ldr	r3, [r0, #4]
 801d4c8:	4630      	mov	r0, r6
 801d4ca:	4421      	add	r1, r4
 801d4cc:	3701      	adds	r7, #1
 801d4ce:	68db      	ldr	r3, [r3, #12]
 801d4d0:	3438      	adds	r4, #56	@ 0x38
 801d4d2:	4798      	blx	r3
 801d4d4:	2800      	cmp	r0, #0
 801d4d6:	d1f0      	bne.n	801d4ba <_JointTrajectory__cdr_deserialize+0x9e>
 801d4d8:	b003      	add	sp, #12
 801d4da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d4de:	2101      	movs	r1, #1
 801d4e0:	75b0      	strb	r0, [r6, #22]
 801d4e2:	7571      	strb	r1, [r6, #21]
 801d4e4:	696b      	ldr	r3, [r5, #20]
 801d4e6:	443b      	add	r3, r7
 801d4e8:	6058      	str	r0, [r3, #4]
 801d4ea:	4630      	mov	r0, r6
 801d4ec:	f7fd fa60 	bl	801a9b0 <ucdr_align_to>
 801d4f0:	9901      	ldr	r1, [sp, #4]
 801d4f2:	4630      	mov	r0, r6
 801d4f4:	f7fd fa94 	bl	801aa20 <ucdr_advance_buffer>
 801d4f8:	e7d1      	b.n	801d49e <_JointTrajectory__cdr_deserialize+0x82>
 801d4fa:	4608      	mov	r0, r1
 801d4fc:	b003      	add	sp, #12
 801d4fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d502:	f10d 0804 	add.w	r8, sp, #4
 801d506:	e7ca      	b.n	801d49e <_JointTrajectory__cdr_deserialize+0x82>

0801d508 <_JointTrajectory__cdr_serialize>:
 801d508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d50c:	2800      	cmp	r0, #0
 801d50e:	d045      	beq.n	801d59c <_JointTrajectory__cdr_serialize+0x94>
 801d510:	4607      	mov	r7, r0
 801d512:	4688      	mov	r8, r1
 801d514:	f7ff fdaa 	bl	801d06c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801d518:	4603      	mov	r3, r0
 801d51a:	4641      	mov	r1, r8
 801d51c:	4638      	mov	r0, r7
 801d51e:	685b      	ldr	r3, [r3, #4]
 801d520:	689b      	ldr	r3, [r3, #8]
 801d522:	4798      	blx	r3
 801d524:	f8d7 9018 	ldr.w	r9, [r7, #24]
 801d528:	4640      	mov	r0, r8
 801d52a:	4649      	mov	r1, r9
 801d52c:	f7fc f958 	bl	80197e0 <ucdr_serialize_uint32_t>
 801d530:	f1b9 0f00 	cmp.w	r9, #0
 801d534:	d018      	beq.n	801d568 <_JointTrajectory__cdr_serialize+0x60>
 801d536:	b1b8      	cbz	r0, 801d568 <_JointTrajectory__cdr_serialize+0x60>
 801d538:	2400      	movs	r4, #0
 801d53a:	697b      	ldr	r3, [r7, #20]
 801d53c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801d540:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 801d544:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 801d548:	4630      	mov	r0, r6
 801d54a:	b35e      	cbz	r6, 801d5a4 <_JointTrajectory__cdr_serialize+0x9c>
 801d54c:	f7e2 fe82 	bl	8000254 <strlen>
 801d550:	4603      	mov	r3, r0
 801d552:	3401      	adds	r4, #1
 801d554:	4631      	mov	r1, r6
 801d556:	4640      	mov	r0, r8
 801d558:	1c5a      	adds	r2, r3, #1
 801d55a:	606b      	str	r3, [r5, #4]
 801d55c:	f7fd fa80 	bl	801aa60 <ucdr_serialize_sequence_char>
 801d560:	45a1      	cmp	r9, r4
 801d562:	d901      	bls.n	801d568 <_JointTrajectory__cdr_serialize+0x60>
 801d564:	2800      	cmp	r0, #0
 801d566:	d1e8      	bne.n	801d53a <_JointTrajectory__cdr_serialize+0x32>
 801d568:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 801d56a:	4640      	mov	r0, r8
 801d56c:	4629      	mov	r1, r5
 801d56e:	f7fc f937 	bl	80197e0 <ucdr_serialize_uint32_t>
 801d572:	4606      	mov	r6, r0
 801d574:	b190      	cbz	r0, 801d59c <_JointTrajectory__cdr_serialize+0x94>
 801d576:	b195      	cbz	r5, 801d59e <_JointTrajectory__cdr_serialize+0x96>
 801d578:	2400      	movs	r4, #0
 801d57a:	e001      	b.n	801d580 <_JointTrajectory__cdr_serialize+0x78>
 801d57c:	42a5      	cmp	r5, r4
 801d57e:	d00e      	beq.n	801d59e <_JointTrajectory__cdr_serialize+0x96>
 801d580:	f000 f92e 	bl	801d7e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectoryPoint>
 801d584:	6a3a      	ldr	r2, [r7, #32]
 801d586:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 801d58a:	6843      	ldr	r3, [r0, #4]
 801d58c:	4641      	mov	r1, r8
 801d58e:	3401      	adds	r4, #1
 801d590:	eb02 00cc 	add.w	r0, r2, ip, lsl #3
 801d594:	689b      	ldr	r3, [r3, #8]
 801d596:	4798      	blx	r3
 801d598:	2800      	cmp	r0, #0
 801d59a:	d1ef      	bne.n	801d57c <_JointTrajectory__cdr_serialize+0x74>
 801d59c:	2600      	movs	r6, #0
 801d59e:	4630      	mov	r0, r6
 801d5a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d5a4:	3401      	adds	r4, #1
 801d5a6:	4632      	mov	r2, r6
 801d5a8:	4631      	mov	r1, r6
 801d5aa:	4640      	mov	r0, r8
 801d5ac:	606e      	str	r6, [r5, #4]
 801d5ae:	f7fd fa57 	bl	801aa60 <ucdr_serialize_sequence_char>
 801d5b2:	45a1      	cmp	r9, r4
 801d5b4:	d9d8      	bls.n	801d568 <_JointTrajectory__cdr_serialize+0x60>
 801d5b6:	2800      	cmp	r0, #0
 801d5b8:	d1bf      	bne.n	801d53a <_JointTrajectory__cdr_serialize+0x32>
 801d5ba:	e7d5      	b.n	801d568 <_JointTrajectory__cdr_serialize+0x60>

0801d5bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectory>:
 801d5bc:	4800      	ldr	r0, [pc, #0]	@ (801d5c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectory+0x4>)
 801d5be:	4770      	bx	lr
 801d5c0:	200005f4 	.word	0x200005f4

0801d5c4 <_JointTrajectoryPoint__max_serialized_size>:
 801d5c4:	b500      	push	{lr}
 801d5c6:	b083      	sub	sp, #12
 801d5c8:	2100      	movs	r1, #0
 801d5ca:	f10d 0007 	add.w	r0, sp, #7
 801d5ce:	f88d 1007 	strb.w	r1, [sp, #7]
 801d5d2:	f000 f97d 	bl	801d8d0 <max_serialized_size_builtin_interfaces__msg__Duration>
 801d5d6:	b003      	add	sp, #12
 801d5d8:	f85d fb04 	ldr.w	pc, [sp], #4

0801d5dc <get_serialized_size_trajectory_msgs__msg__JointTrajectoryPoint.part.0>:
 801d5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d5e0:	460e      	mov	r6, r1
 801d5e2:	4607      	mov	r7, r0
 801d5e4:	2104      	movs	r1, #4
 801d5e6:	687c      	ldr	r4, [r7, #4]
 801d5e8:	1d35      	adds	r5, r6, #4
 801d5ea:	4630      	mov	r0, r6
 801d5ec:	f7fd f9c8 	bl	801a980 <ucdr_alignment>
 801d5f0:	4405      	add	r5, r0
 801d5f2:	bb34      	cbnz	r4, 801d642 <get_serialized_size_trajectory_msgs__msg__JointTrajectoryPoint.part.0+0x66>
 801d5f4:	2104      	movs	r1, #4
 801d5f6:	4628      	mov	r0, r5
 801d5f8:	f8d7 8010 	ldr.w	r8, [r7, #16]
 801d5fc:	f7fd f9c0 	bl	801a980 <ucdr_alignment>
 801d600:	4428      	add	r0, r5
 801d602:	1d04      	adds	r4, r0, #4
 801d604:	f1b8 0f00 	cmp.w	r8, #0
 801d608:	d133      	bne.n	801d672 <get_serialized_size_trajectory_msgs__msg__JointTrajectoryPoint.part.0+0x96>
 801d60a:	4620      	mov	r0, r4
 801d60c:	2104      	movs	r1, #4
 801d60e:	69fd      	ldr	r5, [r7, #28]
 801d610:	f7fd f9b6 	bl	801a980 <ucdr_alignment>
 801d614:	4404      	add	r4, r0
 801d616:	3404      	adds	r4, #4
 801d618:	bb1d      	cbnz	r5, 801d662 <get_serialized_size_trajectory_msgs__msg__JointTrajectoryPoint.part.0+0x86>
 801d61a:	4620      	mov	r0, r4
 801d61c:	2104      	movs	r1, #4
 801d61e:	f8d7 8028 	ldr.w	r8, [r7, #40]	@ 0x28
 801d622:	f7fd f9ad 	bl	801a980 <ucdr_alignment>
 801d626:	4404      	add	r4, r0
 801d628:	3404      	adds	r4, #4
 801d62a:	f1b8 0f00 	cmp.w	r8, #0
 801d62e:	d110      	bne.n	801d652 <get_serialized_size_trajectory_msgs__msg__JointTrajectoryPoint.part.0+0x76>
 801d630:	4621      	mov	r1, r4
 801d632:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 801d636:	f000 f8fb 	bl	801d830 <get_serialized_size_builtin_interfaces__msg__Duration>
 801d63a:	4420      	add	r0, r4
 801d63c:	1b80      	subs	r0, r0, r6
 801d63e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d642:	4628      	mov	r0, r5
 801d644:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801d648:	2108      	movs	r1, #8
 801d64a:	f7fd f999 	bl	801a980 <ucdr_alignment>
 801d64e:	4405      	add	r5, r0
 801d650:	e7d0      	b.n	801d5f4 <get_serialized_size_trajectory_msgs__msg__JointTrajectoryPoint.part.0+0x18>
 801d652:	4620      	mov	r0, r4
 801d654:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
 801d658:	2108      	movs	r1, #8
 801d65a:	f7fd f991 	bl	801a980 <ucdr_alignment>
 801d65e:	4404      	add	r4, r0
 801d660:	e7e6      	b.n	801d630 <get_serialized_size_trajectory_msgs__msg__JointTrajectoryPoint.part.0+0x54>
 801d662:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 801d666:	4620      	mov	r0, r4
 801d668:	2108      	movs	r1, #8
 801d66a:	f7fd f989 	bl	801a980 <ucdr_alignment>
 801d66e:	1944      	adds	r4, r0, r5
 801d670:	e7d3      	b.n	801d61a <get_serialized_size_trajectory_msgs__msg__JointTrajectoryPoint.part.0+0x3e>
 801d672:	4620      	mov	r0, r4
 801d674:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
 801d678:	2108      	movs	r1, #8
 801d67a:	f7fd f981 	bl	801a980 <ucdr_alignment>
 801d67e:	4404      	add	r4, r0
 801d680:	e7c3      	b.n	801d60a <get_serialized_size_trajectory_msgs__msg__JointTrajectoryPoint.part.0+0x2e>
 801d682:	bf00      	nop

0801d684 <get_serialized_size_trajectory_msgs__msg__JointTrajectoryPoint>:
 801d684:	b108      	cbz	r0, 801d68a <get_serialized_size_trajectory_msgs__msg__JointTrajectoryPoint+0x6>
 801d686:	f7ff bfa9 	b.w	801d5dc <get_serialized_size_trajectory_msgs__msg__JointTrajectoryPoint.part.0>
 801d68a:	4770      	bx	lr

0801d68c <_JointTrajectoryPoint__get_serialized_size>:
 801d68c:	b110      	cbz	r0, 801d694 <_JointTrajectoryPoint__get_serialized_size+0x8>
 801d68e:	2100      	movs	r1, #0
 801d690:	f7ff bfa4 	b.w	801d5dc <get_serialized_size_trajectory_msgs__msg__JointTrajectoryPoint.part.0>
 801d694:	4770      	bx	lr
 801d696:	bf00      	nop

0801d698 <_JointTrajectoryPoint__cdr_deserialize>:
 801d698:	b570      	push	{r4, r5, r6, lr}
 801d69a:	460c      	mov	r4, r1
 801d69c:	b082      	sub	sp, #8
 801d69e:	2900      	cmp	r1, #0
 801d6a0:	d068      	beq.n	801d774 <_JointTrajectoryPoint__cdr_deserialize+0xdc>
 801d6a2:	688e      	ldr	r6, [r1, #8]
 801d6a4:	ab01      	add	r3, sp, #4
 801d6a6:	6809      	ldr	r1, [r1, #0]
 801d6a8:	4605      	mov	r5, r0
 801d6aa:	4632      	mov	r2, r6
 801d6ac:	f7fd fa42 	bl	801ab34 <ucdr_deserialize_sequence_double>
 801d6b0:	9b01      	ldr	r3, [sp, #4]
 801d6b2:	2800      	cmp	r0, #0
 801d6b4:	d12c      	bne.n	801d710 <_JointTrajectoryPoint__cdr_deserialize+0x78>
 801d6b6:	429e      	cmp	r6, r3
 801d6b8:	d35f      	bcc.n	801d77a <_JointTrajectoryPoint__cdr_deserialize+0xe2>
 801d6ba:	6966      	ldr	r6, [r4, #20]
 801d6bc:	ab01      	add	r3, sp, #4
 801d6be:	68e1      	ldr	r1, [r4, #12]
 801d6c0:	4628      	mov	r0, r5
 801d6c2:	4632      	mov	r2, r6
 801d6c4:	f7fd fa36 	bl	801ab34 <ucdr_deserialize_sequence_double>
 801d6c8:	9b01      	ldr	r3, [sp, #4]
 801d6ca:	2800      	cmp	r0, #0
 801d6cc:	d042      	beq.n	801d754 <_JointTrajectoryPoint__cdr_deserialize+0xbc>
 801d6ce:	6123      	str	r3, [r4, #16]
 801d6d0:	6a26      	ldr	r6, [r4, #32]
 801d6d2:	ab01      	add	r3, sp, #4
 801d6d4:	69a1      	ldr	r1, [r4, #24]
 801d6d6:	4628      	mov	r0, r5
 801d6d8:	4632      	mov	r2, r6
 801d6da:	f7fd fa2b 	bl	801ab34 <ucdr_deserialize_sequence_double>
 801d6de:	9b01      	ldr	r3, [sp, #4]
 801d6e0:	b340      	cbz	r0, 801d734 <_JointTrajectoryPoint__cdr_deserialize+0x9c>
 801d6e2:	61e3      	str	r3, [r4, #28]
 801d6e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d6e6:	ab01      	add	r3, sp, #4
 801d6e8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801d6ea:	4628      	mov	r0, r5
 801d6ec:	4632      	mov	r2, r6
 801d6ee:	f7fd fa21 	bl	801ab34 <ucdr_deserialize_sequence_double>
 801d6f2:	9b01      	ldr	r3, [sp, #4]
 801d6f4:	b170      	cbz	r0, 801d714 <_JointTrajectoryPoint__cdr_deserialize+0x7c>
 801d6f6:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d6f8:	f000 f8fe 	bl	801d8f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Duration>
 801d6fc:	4603      	mov	r3, r0
 801d6fe:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801d702:	4628      	mov	r0, r5
 801d704:	685b      	ldr	r3, [r3, #4]
 801d706:	68db      	ldr	r3, [r3, #12]
 801d708:	b002      	add	sp, #8
 801d70a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d70e:	4718      	bx	r3
 801d710:	6063      	str	r3, [r4, #4]
 801d712:	e7d2      	b.n	801d6ba <_JointTrajectoryPoint__cdr_deserialize+0x22>
 801d714:	429e      	cmp	r6, r3
 801d716:	d2ef      	bcs.n	801d6f8 <_JointTrajectoryPoint__cdr_deserialize+0x60>
 801d718:	2301      	movs	r3, #1
 801d71a:	75a8      	strb	r0, [r5, #22]
 801d71c:	2108      	movs	r1, #8
 801d71e:	756b      	strb	r3, [r5, #21]
 801d720:	62a0      	str	r0, [r4, #40]	@ 0x28
 801d722:	4628      	mov	r0, r5
 801d724:	f7fd f944 	bl	801a9b0 <ucdr_align_to>
 801d728:	9901      	ldr	r1, [sp, #4]
 801d72a:	4628      	mov	r0, r5
 801d72c:	00c9      	lsls	r1, r1, #3
 801d72e:	f7fd f977 	bl	801aa20 <ucdr_advance_buffer>
 801d732:	e7e1      	b.n	801d6f8 <_JointTrajectoryPoint__cdr_deserialize+0x60>
 801d734:	429e      	cmp	r6, r3
 801d736:	d2d5      	bcs.n	801d6e4 <_JointTrajectoryPoint__cdr_deserialize+0x4c>
 801d738:	2301      	movs	r3, #1
 801d73a:	75a8      	strb	r0, [r5, #22]
 801d73c:	2108      	movs	r1, #8
 801d73e:	756b      	strb	r3, [r5, #21]
 801d740:	61e0      	str	r0, [r4, #28]
 801d742:	4628      	mov	r0, r5
 801d744:	f7fd f934 	bl	801a9b0 <ucdr_align_to>
 801d748:	9901      	ldr	r1, [sp, #4]
 801d74a:	4628      	mov	r0, r5
 801d74c:	00c9      	lsls	r1, r1, #3
 801d74e:	f7fd f967 	bl	801aa20 <ucdr_advance_buffer>
 801d752:	e7c7      	b.n	801d6e4 <_JointTrajectoryPoint__cdr_deserialize+0x4c>
 801d754:	429e      	cmp	r6, r3
 801d756:	d2bb      	bcs.n	801d6d0 <_JointTrajectoryPoint__cdr_deserialize+0x38>
 801d758:	2301      	movs	r3, #1
 801d75a:	75a8      	strb	r0, [r5, #22]
 801d75c:	2108      	movs	r1, #8
 801d75e:	756b      	strb	r3, [r5, #21]
 801d760:	6120      	str	r0, [r4, #16]
 801d762:	4628      	mov	r0, r5
 801d764:	f7fd f924 	bl	801a9b0 <ucdr_align_to>
 801d768:	9901      	ldr	r1, [sp, #4]
 801d76a:	4628      	mov	r0, r5
 801d76c:	00c9      	lsls	r1, r1, #3
 801d76e:	f7fd f957 	bl	801aa20 <ucdr_advance_buffer>
 801d772:	e7ad      	b.n	801d6d0 <_JointTrajectoryPoint__cdr_deserialize+0x38>
 801d774:	4608      	mov	r0, r1
 801d776:	b002      	add	sp, #8
 801d778:	bd70      	pop	{r4, r5, r6, pc}
 801d77a:	2301      	movs	r3, #1
 801d77c:	75a8      	strb	r0, [r5, #22]
 801d77e:	2108      	movs	r1, #8
 801d780:	756b      	strb	r3, [r5, #21]
 801d782:	6060      	str	r0, [r4, #4]
 801d784:	4628      	mov	r0, r5
 801d786:	f7fd f913 	bl	801a9b0 <ucdr_align_to>
 801d78a:	9901      	ldr	r1, [sp, #4]
 801d78c:	4628      	mov	r0, r5
 801d78e:	00c9      	lsls	r1, r1, #3
 801d790:	f7fd f946 	bl	801aa20 <ucdr_advance_buffer>
 801d794:	e791      	b.n	801d6ba <_JointTrajectoryPoint__cdr_deserialize+0x22>
 801d796:	bf00      	nop

0801d798 <_JointTrajectoryPoint__cdr_serialize>:
 801d798:	b308      	cbz	r0, 801d7de <_JointTrajectoryPoint__cdr_serialize+0x46>
 801d79a:	b570      	push	{r4, r5, r6, lr}
 801d79c:	460d      	mov	r5, r1
 801d79e:	4604      	mov	r4, r0
 801d7a0:	e9d0 1200 	ldrd	r1, r2, [r0]
 801d7a4:	4628      	mov	r0, r5
 801d7a6:	f7fd f9b3 	bl	801ab10 <ucdr_serialize_sequence_double>
 801d7aa:	4628      	mov	r0, r5
 801d7ac:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801d7b0:	f7fd f9ae 	bl	801ab10 <ucdr_serialize_sequence_double>
 801d7b4:	4628      	mov	r0, r5
 801d7b6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801d7ba:	f7fd f9a9 	bl	801ab10 <ucdr_serialize_sequence_double>
 801d7be:	4628      	mov	r0, r5
 801d7c0:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	@ 0x24
 801d7c4:	f7fd f9a4 	bl	801ab10 <ucdr_serialize_sequence_double>
 801d7c8:	f000 f896 	bl	801d8f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Duration>
 801d7cc:	4603      	mov	r3, r0
 801d7ce:	4629      	mov	r1, r5
 801d7d0:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 801d7d4:	685b      	ldr	r3, [r3, #4]
 801d7d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d7da:	689b      	ldr	r3, [r3, #8]
 801d7dc:	4718      	bx	r3
 801d7de:	4770      	bx	lr

0801d7e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectoryPoint>:
 801d7e0:	4800      	ldr	r0, [pc, #0]	@ (801d7e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectoryPoint+0x4>)
 801d7e2:	4770      	bx	lr
 801d7e4:	2000061c 	.word	0x2000061c

0801d7e8 <builtin_interfaces__msg__Duration__rosidl_typesupport_introspection_c__Duration_init_function>:
 801d7e8:	f007 bf70 	b.w	80256cc <builtin_interfaces__msg__Duration__init>

0801d7ec <builtin_interfaces__msg__Duration__rosidl_typesupport_introspection_c__Duration_fini_function>:
 801d7ec:	f007 bf72 	b.w	80256d4 <builtin_interfaces__msg__Duration__fini>

0801d7f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Duration>:
 801d7f0:	4b04      	ldr	r3, [pc, #16]	@ (801d804 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Duration+0x14>)
 801d7f2:	681a      	ldr	r2, [r3, #0]
 801d7f4:	b10a      	cbz	r2, 801d7fa <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Duration+0xa>
 801d7f6:	4803      	ldr	r0, [pc, #12]	@ (801d804 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Duration+0x14>)
 801d7f8:	4770      	bx	lr
 801d7fa:	4a03      	ldr	r2, [pc, #12]	@ (801d808 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Duration+0x18>)
 801d7fc:	4801      	ldr	r0, [pc, #4]	@ (801d804 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Duration+0x14>)
 801d7fe:	6812      	ldr	r2, [r2, #0]
 801d800:	601a      	str	r2, [r3, #0]
 801d802:	4770      	bx	lr
 801d804:	200006bc 	.word	0x200006bc
 801d808:	200001c4 	.word	0x200001c4

0801d80c <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 801d80c:	f007 bf64 	b.w	80256d8 <builtin_interfaces__msg__Time__init>

0801d810 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 801d810:	f007 bf66 	b.w	80256e0 <builtin_interfaces__msg__Time__fini>

0801d814 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 801d814:	4b04      	ldr	r3, [pc, #16]	@ (801d828 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 801d816:	681a      	ldr	r2, [r3, #0]
 801d818:	b10a      	cbz	r2, 801d81e <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 801d81a:	4803      	ldr	r0, [pc, #12]	@ (801d828 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 801d81c:	4770      	bx	lr
 801d81e:	4a03      	ldr	r2, [pc, #12]	@ (801d82c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 801d820:	4801      	ldr	r0, [pc, #4]	@ (801d828 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 801d822:	6812      	ldr	r2, [r2, #0]
 801d824:	601a      	str	r2, [r3, #0]
 801d826:	4770      	bx	lr
 801d828:	20000740 	.word	0x20000740
 801d82c:	200001c4 	.word	0x200001c4

0801d830 <get_serialized_size_builtin_interfaces__msg__Duration>:
 801d830:	b180      	cbz	r0, 801d854 <get_serialized_size_builtin_interfaces__msg__Duration+0x24>
 801d832:	b538      	push	{r3, r4, r5, lr}
 801d834:	460d      	mov	r5, r1
 801d836:	2104      	movs	r1, #4
 801d838:	4628      	mov	r0, r5
 801d83a:	f7fd f8a1 	bl	801a980 <ucdr_alignment>
 801d83e:	1d2b      	adds	r3, r5, #4
 801d840:	f1c5 0504 	rsb	r5, r5, #4
 801d844:	2104      	movs	r1, #4
 801d846:	181c      	adds	r4, r3, r0
 801d848:	4620      	mov	r0, r4
 801d84a:	f7fd f899 	bl	801a980 <ucdr_alignment>
 801d84e:	4428      	add	r0, r5
 801d850:	4420      	add	r0, r4
 801d852:	bd38      	pop	{r3, r4, r5, pc}
 801d854:	4770      	bx	lr
 801d856:	bf00      	nop

0801d858 <_Duration__cdr_deserialize>:
 801d858:	b538      	push	{r3, r4, r5, lr}
 801d85a:	460c      	mov	r4, r1
 801d85c:	b141      	cbz	r1, 801d870 <_Duration__cdr_deserialize+0x18>
 801d85e:	4605      	mov	r5, r0
 801d860:	f7fc fc70 	bl	801a144 <ucdr_deserialize_int32_t>
 801d864:	1d21      	adds	r1, r4, #4
 801d866:	4628      	mov	r0, r5
 801d868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d86c:	f7fc b8e8 	b.w	8019a40 <ucdr_deserialize_uint32_t>
 801d870:	4608      	mov	r0, r1
 801d872:	bd38      	pop	{r3, r4, r5, pc}

0801d874 <_Duration__cdr_serialize>:
 801d874:	b160      	cbz	r0, 801d890 <_Duration__cdr_serialize+0x1c>
 801d876:	b538      	push	{r3, r4, r5, lr}
 801d878:	460d      	mov	r5, r1
 801d87a:	4604      	mov	r4, r0
 801d87c:	6801      	ldr	r1, [r0, #0]
 801d87e:	4628      	mov	r0, r5
 801d880:	f7fc fbc8 	bl	801a014 <ucdr_serialize_int32_t>
 801d884:	6861      	ldr	r1, [r4, #4]
 801d886:	4628      	mov	r0, r5
 801d888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d88c:	f7fb bfa8 	b.w	80197e0 <ucdr_serialize_uint32_t>
 801d890:	4770      	bx	lr
 801d892:	bf00      	nop

0801d894 <_Duration__get_serialized_size>:
 801d894:	b160      	cbz	r0, 801d8b0 <_Duration__get_serialized_size+0x1c>
 801d896:	2104      	movs	r1, #4
 801d898:	2000      	movs	r0, #0
 801d89a:	b510      	push	{r4, lr}
 801d89c:	f7fd f870 	bl	801a980 <ucdr_alignment>
 801d8a0:	2104      	movs	r1, #4
 801d8a2:	1844      	adds	r4, r0, r1
 801d8a4:	4620      	mov	r0, r4
 801d8a6:	f7fd f86b 	bl	801a980 <ucdr_alignment>
 801d8aa:	3004      	adds	r0, #4
 801d8ac:	4420      	add	r0, r4
 801d8ae:	bd10      	pop	{r4, pc}
 801d8b0:	4770      	bx	lr
 801d8b2:	bf00      	nop

0801d8b4 <_Duration__max_serialized_size>:
 801d8b4:	b510      	push	{r4, lr}
 801d8b6:	2104      	movs	r1, #4
 801d8b8:	2000      	movs	r0, #0
 801d8ba:	f7fd f861 	bl	801a980 <ucdr_alignment>
 801d8be:	2104      	movs	r1, #4
 801d8c0:	1844      	adds	r4, r0, r1
 801d8c2:	4620      	mov	r0, r4
 801d8c4:	f7fd f85c 	bl	801a980 <ucdr_alignment>
 801d8c8:	3004      	adds	r0, #4
 801d8ca:	4420      	add	r0, r4
 801d8cc:	bd10      	pop	{r4, pc}
 801d8ce:	bf00      	nop

0801d8d0 <max_serialized_size_builtin_interfaces__msg__Duration>:
 801d8d0:	b538      	push	{r3, r4, r5, lr}
 801d8d2:	460c      	mov	r4, r1
 801d8d4:	2301      	movs	r3, #1
 801d8d6:	2104      	movs	r1, #4
 801d8d8:	1d25      	adds	r5, r4, #4
 801d8da:	7003      	strb	r3, [r0, #0]
 801d8dc:	4620      	mov	r0, r4
 801d8de:	f1c4 0404 	rsb	r4, r4, #4
 801d8e2:	f7fd f84d 	bl	801a980 <ucdr_alignment>
 801d8e6:	4405      	add	r5, r0
 801d8e8:	2104      	movs	r1, #4
 801d8ea:	4628      	mov	r0, r5
 801d8ec:	f7fd f848 	bl	801a980 <ucdr_alignment>
 801d8f0:	4420      	add	r0, r4
 801d8f2:	4428      	add	r0, r5
 801d8f4:	bd38      	pop	{r3, r4, r5, pc}
 801d8f6:	bf00      	nop

0801d8f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Duration>:
 801d8f8:	4800      	ldr	r0, [pc, #0]	@ (801d8fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Duration+0x4>)
 801d8fa:	4770      	bx	lr
 801d8fc:	2000074c 	.word	0x2000074c

0801d900 <get_serialized_size_builtin_interfaces__msg__Time>:
 801d900:	b180      	cbz	r0, 801d924 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 801d902:	b538      	push	{r3, r4, r5, lr}
 801d904:	460d      	mov	r5, r1
 801d906:	2104      	movs	r1, #4
 801d908:	4628      	mov	r0, r5
 801d90a:	f7fd f839 	bl	801a980 <ucdr_alignment>
 801d90e:	1d2b      	adds	r3, r5, #4
 801d910:	f1c5 0504 	rsb	r5, r5, #4
 801d914:	2104      	movs	r1, #4
 801d916:	181c      	adds	r4, r3, r0
 801d918:	4620      	mov	r0, r4
 801d91a:	f7fd f831 	bl	801a980 <ucdr_alignment>
 801d91e:	4428      	add	r0, r5
 801d920:	4420      	add	r0, r4
 801d922:	bd38      	pop	{r3, r4, r5, pc}
 801d924:	4770      	bx	lr
 801d926:	bf00      	nop

0801d928 <_Time__cdr_deserialize>:
 801d928:	b538      	push	{r3, r4, r5, lr}
 801d92a:	460c      	mov	r4, r1
 801d92c:	b141      	cbz	r1, 801d940 <_Time__cdr_deserialize+0x18>
 801d92e:	4605      	mov	r5, r0
 801d930:	f7fc fc08 	bl	801a144 <ucdr_deserialize_int32_t>
 801d934:	1d21      	adds	r1, r4, #4
 801d936:	4628      	mov	r0, r5
 801d938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d93c:	f7fc b880 	b.w	8019a40 <ucdr_deserialize_uint32_t>
 801d940:	4608      	mov	r0, r1
 801d942:	bd38      	pop	{r3, r4, r5, pc}

0801d944 <_Time__cdr_serialize>:
 801d944:	b160      	cbz	r0, 801d960 <_Time__cdr_serialize+0x1c>
 801d946:	b538      	push	{r3, r4, r5, lr}
 801d948:	460d      	mov	r5, r1
 801d94a:	4604      	mov	r4, r0
 801d94c:	6801      	ldr	r1, [r0, #0]
 801d94e:	4628      	mov	r0, r5
 801d950:	f7fc fb60 	bl	801a014 <ucdr_serialize_int32_t>
 801d954:	6861      	ldr	r1, [r4, #4]
 801d956:	4628      	mov	r0, r5
 801d958:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d95c:	f7fb bf40 	b.w	80197e0 <ucdr_serialize_uint32_t>
 801d960:	4770      	bx	lr
 801d962:	bf00      	nop

0801d964 <_Time__get_serialized_size>:
 801d964:	b160      	cbz	r0, 801d980 <_Time__get_serialized_size+0x1c>
 801d966:	2104      	movs	r1, #4
 801d968:	2000      	movs	r0, #0
 801d96a:	b510      	push	{r4, lr}
 801d96c:	f7fd f808 	bl	801a980 <ucdr_alignment>
 801d970:	2104      	movs	r1, #4
 801d972:	1844      	adds	r4, r0, r1
 801d974:	4620      	mov	r0, r4
 801d976:	f7fd f803 	bl	801a980 <ucdr_alignment>
 801d97a:	3004      	adds	r0, #4
 801d97c:	4420      	add	r0, r4
 801d97e:	bd10      	pop	{r4, pc}
 801d980:	4770      	bx	lr
 801d982:	bf00      	nop

0801d984 <_Time__max_serialized_size>:
 801d984:	b510      	push	{r4, lr}
 801d986:	2104      	movs	r1, #4
 801d988:	2000      	movs	r0, #0
 801d98a:	f7fc fff9 	bl	801a980 <ucdr_alignment>
 801d98e:	2104      	movs	r1, #4
 801d990:	1844      	adds	r4, r0, r1
 801d992:	4620      	mov	r0, r4
 801d994:	f7fc fff4 	bl	801a980 <ucdr_alignment>
 801d998:	3004      	adds	r0, #4
 801d99a:	4420      	add	r0, r4
 801d99c:	bd10      	pop	{r4, pc}
 801d99e:	bf00      	nop

0801d9a0 <max_serialized_size_builtin_interfaces__msg__Time>:
 801d9a0:	b538      	push	{r3, r4, r5, lr}
 801d9a2:	460c      	mov	r4, r1
 801d9a4:	2301      	movs	r3, #1
 801d9a6:	2104      	movs	r1, #4
 801d9a8:	1d25      	adds	r5, r4, #4
 801d9aa:	7003      	strb	r3, [r0, #0]
 801d9ac:	4620      	mov	r0, r4
 801d9ae:	f1c4 0404 	rsb	r4, r4, #4
 801d9b2:	f7fc ffe5 	bl	801a980 <ucdr_alignment>
 801d9b6:	4405      	add	r5, r0
 801d9b8:	2104      	movs	r1, #4
 801d9ba:	4628      	mov	r0, r5
 801d9bc:	f7fc ffe0 	bl	801a980 <ucdr_alignment>
 801d9c0:	4420      	add	r0, r4
 801d9c2:	4428      	add	r0, r5
 801d9c4:	bd38      	pop	{r3, r4, r5, pc}
 801d9c6:	bf00      	nop

0801d9c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 801d9c8:	4800      	ldr	r0, [pc, #0]	@ (801d9cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 801d9ca:	4770      	bx	lr
 801d9cc:	20000774 	.word	0x20000774

0801d9d0 <control_msgs__msg__JointJog__init>:
 801d9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d9d4:	4605      	mov	r5, r0
 801d9d6:	b3d8      	cbz	r0, 801da50 <control_msgs__msg__JointJog__init+0x80>
 801d9d8:	f007 fcdc 	bl	8025394 <std_msgs__msg__Header__init>
 801d9dc:	4604      	mov	r4, r0
 801d9de:	b328      	cbz	r0, 801da2c <control_msgs__msg__JointJog__init+0x5c>
 801d9e0:	f105 0614 	add.w	r6, r5, #20
 801d9e4:	2100      	movs	r1, #0
 801d9e6:	4630      	mov	r0, r6
 801d9e8:	f7fe ff6a 	bl	801c8c0 <rosidl_runtime_c__String__Sequence__init>
 801d9ec:	4604      	mov	r4, r0
 801d9ee:	2800      	cmp	r0, #0
 801d9f0:	d042      	beq.n	801da78 <control_msgs__msg__JointJog__init+0xa8>
 801d9f2:	f105 0720 	add.w	r7, r5, #32
 801d9f6:	2100      	movs	r1, #0
 801d9f8:	4638      	mov	r0, r7
 801d9fa:	f7fe fed7 	bl	801c7ac <rosidl_runtime_c__double__Sequence__init>
 801d9fe:	4604      	mov	r4, r0
 801da00:	b350      	cbz	r0, 801da58 <control_msgs__msg__JointJog__init+0x88>
 801da02:	f105 082c 	add.w	r8, r5, #44	@ 0x2c
 801da06:	2100      	movs	r1, #0
 801da08:	4640      	mov	r0, r8
 801da0a:	f7fe fecf 	bl	801c7ac <rosidl_runtime_c__double__Sequence__init>
 801da0e:	4604      	mov	r4, r0
 801da10:	b9d8      	cbnz	r0, 801da4a <control_msgs__msg__JointJog__init+0x7a>
 801da12:	4628      	mov	r0, r5
 801da14:	f007 fce2 	bl	80253dc <std_msgs__msg__Header__fini>
 801da18:	4630      	mov	r0, r6
 801da1a:	f7fe ff99 	bl	801c950 <rosidl_runtime_c__String__Sequence__fini>
 801da1e:	4638      	mov	r0, r7
 801da20:	f7fe fedc 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 801da24:	4640      	mov	r0, r8
 801da26:	f7fe fed9 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 801da2a:	e00e      	b.n	801da4a <control_msgs__msg__JointJog__init+0x7a>
 801da2c:	4628      	mov	r0, r5
 801da2e:	f007 fcd5 	bl	80253dc <std_msgs__msg__Header__fini>
 801da32:	f105 0014 	add.w	r0, r5, #20
 801da36:	f7fe ff8b 	bl	801c950 <rosidl_runtime_c__String__Sequence__fini>
 801da3a:	f105 0020 	add.w	r0, r5, #32
 801da3e:	f7fe fecd 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 801da42:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 801da46:	f7fe fec9 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 801da4a:	4620      	mov	r0, r4
 801da4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da50:	4604      	mov	r4, r0
 801da52:	4620      	mov	r0, r4
 801da54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da58:	4628      	mov	r0, r5
 801da5a:	f007 fcbf 	bl	80253dc <std_msgs__msg__Header__fini>
 801da5e:	4630      	mov	r0, r6
 801da60:	f7fe ff76 	bl	801c950 <rosidl_runtime_c__String__Sequence__fini>
 801da64:	4638      	mov	r0, r7
 801da66:	f7fe feb9 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 801da6a:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 801da6e:	f7fe feb5 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 801da72:	4620      	mov	r0, r4
 801da74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da78:	4628      	mov	r0, r5
 801da7a:	f007 fcaf 	bl	80253dc <std_msgs__msg__Header__fini>
 801da7e:	4630      	mov	r0, r6
 801da80:	e7d9      	b.n	801da36 <control_msgs__msg__JointJog__init+0x66>
 801da82:	bf00      	nop

0801da84 <control_msgs__msg__JointJog__fini>:
 801da84:	b188      	cbz	r0, 801daaa <control_msgs__msg__JointJog__fini+0x26>
 801da86:	b510      	push	{r4, lr}
 801da88:	4604      	mov	r4, r0
 801da8a:	f007 fca7 	bl	80253dc <std_msgs__msg__Header__fini>
 801da8e:	f104 0014 	add.w	r0, r4, #20
 801da92:	f7fe ff5d 	bl	801c950 <rosidl_runtime_c__String__Sequence__fini>
 801da96:	f104 0020 	add.w	r0, r4, #32
 801da9a:	f7fe fe9f 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 801da9e:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 801daa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801daa6:	f7fe be99 	b.w	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 801daaa:	4770      	bx	lr

0801daac <ucdr_serialize_endian_array_char>:
 801daac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dab0:	4619      	mov	r1, r3
 801dab2:	461f      	mov	r7, r3
 801dab4:	4605      	mov	r5, r0
 801dab6:	4690      	mov	r8, r2
 801dab8:	f7fc ff0a 	bl	801a8d0 <ucdr_check_buffer_available_for>
 801dabc:	b9e0      	cbnz	r0, 801daf8 <ucdr_serialize_endian_array_char+0x4c>
 801dabe:	463e      	mov	r6, r7
 801dac0:	e00b      	b.n	801dada <ucdr_serialize_endian_array_char+0x2e>
 801dac2:	4441      	add	r1, r8
 801dac4:	68a8      	ldr	r0, [r5, #8]
 801dac6:	4622      	mov	r2, r4
 801dac8:	1b36      	subs	r6, r6, r4
 801daca:	f00a fce0 	bl	802848e <memcpy>
 801dace:	68ab      	ldr	r3, [r5, #8]
 801dad0:	6928      	ldr	r0, [r5, #16]
 801dad2:	4423      	add	r3, r4
 801dad4:	4420      	add	r0, r4
 801dad6:	60ab      	str	r3, [r5, #8]
 801dad8:	6128      	str	r0, [r5, #16]
 801dada:	4631      	mov	r1, r6
 801dadc:	2201      	movs	r2, #1
 801dade:	4628      	mov	r0, r5
 801dae0:	f7fc ff80 	bl	801a9e4 <ucdr_check_final_buffer_behavior_array>
 801dae4:	1bb9      	subs	r1, r7, r6
 801dae6:	4604      	mov	r4, r0
 801dae8:	2800      	cmp	r0, #0
 801daea:	d1ea      	bne.n	801dac2 <ucdr_serialize_endian_array_char+0x16>
 801daec:	2301      	movs	r3, #1
 801daee:	7da8      	ldrb	r0, [r5, #22]
 801daf0:	756b      	strb	r3, [r5, #21]
 801daf2:	4058      	eors	r0, r3
 801daf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801daf8:	463a      	mov	r2, r7
 801dafa:	4641      	mov	r1, r8
 801dafc:	68a8      	ldr	r0, [r5, #8]
 801dafe:	f00a fcc6 	bl	802848e <memcpy>
 801db02:	68aa      	ldr	r2, [r5, #8]
 801db04:	692b      	ldr	r3, [r5, #16]
 801db06:	443a      	add	r2, r7
 801db08:	443b      	add	r3, r7
 801db0a:	60aa      	str	r2, [r5, #8]
 801db0c:	612b      	str	r3, [r5, #16]
 801db0e:	e7ed      	b.n	801daec <ucdr_serialize_endian_array_char+0x40>

0801db10 <ucdr_deserialize_endian_array_char>:
 801db10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db14:	4619      	mov	r1, r3
 801db16:	461f      	mov	r7, r3
 801db18:	4605      	mov	r5, r0
 801db1a:	4690      	mov	r8, r2
 801db1c:	f7fc fed8 	bl	801a8d0 <ucdr_check_buffer_available_for>
 801db20:	b9e8      	cbnz	r0, 801db5e <ucdr_deserialize_endian_array_char+0x4e>
 801db22:	463e      	mov	r6, r7
 801db24:	e00c      	b.n	801db40 <ucdr_deserialize_endian_array_char+0x30>
 801db26:	eb08 0003 	add.w	r0, r8, r3
 801db2a:	68a9      	ldr	r1, [r5, #8]
 801db2c:	4622      	mov	r2, r4
 801db2e:	1b36      	subs	r6, r6, r4
 801db30:	f00a fcad 	bl	802848e <memcpy>
 801db34:	68ab      	ldr	r3, [r5, #8]
 801db36:	6928      	ldr	r0, [r5, #16]
 801db38:	4423      	add	r3, r4
 801db3a:	4420      	add	r0, r4
 801db3c:	60ab      	str	r3, [r5, #8]
 801db3e:	6128      	str	r0, [r5, #16]
 801db40:	4631      	mov	r1, r6
 801db42:	2201      	movs	r2, #1
 801db44:	4628      	mov	r0, r5
 801db46:	f7fc ff4d 	bl	801a9e4 <ucdr_check_final_buffer_behavior_array>
 801db4a:	1bbb      	subs	r3, r7, r6
 801db4c:	4604      	mov	r4, r0
 801db4e:	2800      	cmp	r0, #0
 801db50:	d1e9      	bne.n	801db26 <ucdr_deserialize_endian_array_char+0x16>
 801db52:	2301      	movs	r3, #1
 801db54:	7da8      	ldrb	r0, [r5, #22]
 801db56:	756b      	strb	r3, [r5, #21]
 801db58:	4058      	eors	r0, r3
 801db5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db5e:	463a      	mov	r2, r7
 801db60:	68a9      	ldr	r1, [r5, #8]
 801db62:	4640      	mov	r0, r8
 801db64:	f00a fc93 	bl	802848e <memcpy>
 801db68:	68aa      	ldr	r2, [r5, #8]
 801db6a:	692b      	ldr	r3, [r5, #16]
 801db6c:	443a      	add	r2, r7
 801db6e:	443b      	add	r3, r7
 801db70:	60aa      	str	r2, [r5, #8]
 801db72:	612b      	str	r3, [r5, #16]
 801db74:	e7ed      	b.n	801db52 <ucdr_deserialize_endian_array_char+0x42>
 801db76:	bf00      	nop

0801db78 <ucdr_serialize_array_uint8_t>:
 801db78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db7c:	4688      	mov	r8, r1
 801db7e:	4611      	mov	r1, r2
 801db80:	4617      	mov	r7, r2
 801db82:	4605      	mov	r5, r0
 801db84:	f7fc fea4 	bl	801a8d0 <ucdr_check_buffer_available_for>
 801db88:	b9e0      	cbnz	r0, 801dbc4 <ucdr_serialize_array_uint8_t+0x4c>
 801db8a:	463e      	mov	r6, r7
 801db8c:	e00b      	b.n	801dba6 <ucdr_serialize_array_uint8_t+0x2e>
 801db8e:	4441      	add	r1, r8
 801db90:	68a8      	ldr	r0, [r5, #8]
 801db92:	4622      	mov	r2, r4
 801db94:	1b36      	subs	r6, r6, r4
 801db96:	f00a fc7a 	bl	802848e <memcpy>
 801db9a:	68ab      	ldr	r3, [r5, #8]
 801db9c:	6928      	ldr	r0, [r5, #16]
 801db9e:	4423      	add	r3, r4
 801dba0:	4420      	add	r0, r4
 801dba2:	60ab      	str	r3, [r5, #8]
 801dba4:	6128      	str	r0, [r5, #16]
 801dba6:	4631      	mov	r1, r6
 801dba8:	2201      	movs	r2, #1
 801dbaa:	4628      	mov	r0, r5
 801dbac:	f7fc ff1a 	bl	801a9e4 <ucdr_check_final_buffer_behavior_array>
 801dbb0:	1bb9      	subs	r1, r7, r6
 801dbb2:	4604      	mov	r4, r0
 801dbb4:	2800      	cmp	r0, #0
 801dbb6:	d1ea      	bne.n	801db8e <ucdr_serialize_array_uint8_t+0x16>
 801dbb8:	2301      	movs	r3, #1
 801dbba:	7da8      	ldrb	r0, [r5, #22]
 801dbbc:	756b      	strb	r3, [r5, #21]
 801dbbe:	4058      	eors	r0, r3
 801dbc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dbc4:	463a      	mov	r2, r7
 801dbc6:	4641      	mov	r1, r8
 801dbc8:	68a8      	ldr	r0, [r5, #8]
 801dbca:	f00a fc60 	bl	802848e <memcpy>
 801dbce:	68aa      	ldr	r2, [r5, #8]
 801dbd0:	692b      	ldr	r3, [r5, #16]
 801dbd2:	443a      	add	r2, r7
 801dbd4:	443b      	add	r3, r7
 801dbd6:	60aa      	str	r2, [r5, #8]
 801dbd8:	612b      	str	r3, [r5, #16]
 801dbda:	e7ed      	b.n	801dbb8 <ucdr_serialize_array_uint8_t+0x40>

0801dbdc <ucdr_serialize_endian_array_uint8_t>:
 801dbdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dbe0:	4619      	mov	r1, r3
 801dbe2:	461f      	mov	r7, r3
 801dbe4:	4605      	mov	r5, r0
 801dbe6:	4690      	mov	r8, r2
 801dbe8:	f7fc fe72 	bl	801a8d0 <ucdr_check_buffer_available_for>
 801dbec:	b9e0      	cbnz	r0, 801dc28 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801dbee:	463e      	mov	r6, r7
 801dbf0:	e00b      	b.n	801dc0a <ucdr_serialize_endian_array_uint8_t+0x2e>
 801dbf2:	4441      	add	r1, r8
 801dbf4:	68a8      	ldr	r0, [r5, #8]
 801dbf6:	4622      	mov	r2, r4
 801dbf8:	1b36      	subs	r6, r6, r4
 801dbfa:	f00a fc48 	bl	802848e <memcpy>
 801dbfe:	68ab      	ldr	r3, [r5, #8]
 801dc00:	6928      	ldr	r0, [r5, #16]
 801dc02:	4423      	add	r3, r4
 801dc04:	4420      	add	r0, r4
 801dc06:	60ab      	str	r3, [r5, #8]
 801dc08:	6128      	str	r0, [r5, #16]
 801dc0a:	4631      	mov	r1, r6
 801dc0c:	2201      	movs	r2, #1
 801dc0e:	4628      	mov	r0, r5
 801dc10:	f7fc fee8 	bl	801a9e4 <ucdr_check_final_buffer_behavior_array>
 801dc14:	1bb9      	subs	r1, r7, r6
 801dc16:	4604      	mov	r4, r0
 801dc18:	2800      	cmp	r0, #0
 801dc1a:	d1ea      	bne.n	801dbf2 <ucdr_serialize_endian_array_uint8_t+0x16>
 801dc1c:	2301      	movs	r3, #1
 801dc1e:	7da8      	ldrb	r0, [r5, #22]
 801dc20:	756b      	strb	r3, [r5, #21]
 801dc22:	4058      	eors	r0, r3
 801dc24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc28:	463a      	mov	r2, r7
 801dc2a:	4641      	mov	r1, r8
 801dc2c:	68a8      	ldr	r0, [r5, #8]
 801dc2e:	f00a fc2e 	bl	802848e <memcpy>
 801dc32:	68aa      	ldr	r2, [r5, #8]
 801dc34:	692b      	ldr	r3, [r5, #16]
 801dc36:	443a      	add	r2, r7
 801dc38:	443b      	add	r3, r7
 801dc3a:	60aa      	str	r2, [r5, #8]
 801dc3c:	612b      	str	r3, [r5, #16]
 801dc3e:	e7ed      	b.n	801dc1c <ucdr_serialize_endian_array_uint8_t+0x40>

0801dc40 <ucdr_deserialize_array_uint8_t>:
 801dc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc44:	4688      	mov	r8, r1
 801dc46:	4611      	mov	r1, r2
 801dc48:	4617      	mov	r7, r2
 801dc4a:	4605      	mov	r5, r0
 801dc4c:	f7fc fe40 	bl	801a8d0 <ucdr_check_buffer_available_for>
 801dc50:	b9e8      	cbnz	r0, 801dc8e <ucdr_deserialize_array_uint8_t+0x4e>
 801dc52:	463e      	mov	r6, r7
 801dc54:	e00c      	b.n	801dc70 <ucdr_deserialize_array_uint8_t+0x30>
 801dc56:	eb08 0003 	add.w	r0, r8, r3
 801dc5a:	68a9      	ldr	r1, [r5, #8]
 801dc5c:	4622      	mov	r2, r4
 801dc5e:	1b36      	subs	r6, r6, r4
 801dc60:	f00a fc15 	bl	802848e <memcpy>
 801dc64:	68ab      	ldr	r3, [r5, #8]
 801dc66:	6928      	ldr	r0, [r5, #16]
 801dc68:	4423      	add	r3, r4
 801dc6a:	4420      	add	r0, r4
 801dc6c:	60ab      	str	r3, [r5, #8]
 801dc6e:	6128      	str	r0, [r5, #16]
 801dc70:	4631      	mov	r1, r6
 801dc72:	2201      	movs	r2, #1
 801dc74:	4628      	mov	r0, r5
 801dc76:	f7fc feb5 	bl	801a9e4 <ucdr_check_final_buffer_behavior_array>
 801dc7a:	1bbb      	subs	r3, r7, r6
 801dc7c:	4604      	mov	r4, r0
 801dc7e:	2800      	cmp	r0, #0
 801dc80:	d1e9      	bne.n	801dc56 <ucdr_deserialize_array_uint8_t+0x16>
 801dc82:	2301      	movs	r3, #1
 801dc84:	7da8      	ldrb	r0, [r5, #22]
 801dc86:	756b      	strb	r3, [r5, #21]
 801dc88:	4058      	eors	r0, r3
 801dc8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc8e:	463a      	mov	r2, r7
 801dc90:	68a9      	ldr	r1, [r5, #8]
 801dc92:	4640      	mov	r0, r8
 801dc94:	f00a fbfb 	bl	802848e <memcpy>
 801dc98:	68aa      	ldr	r2, [r5, #8]
 801dc9a:	692b      	ldr	r3, [r5, #16]
 801dc9c:	443a      	add	r2, r7
 801dc9e:	443b      	add	r3, r7
 801dca0:	60aa      	str	r2, [r5, #8]
 801dca2:	612b      	str	r3, [r5, #16]
 801dca4:	e7ed      	b.n	801dc82 <ucdr_deserialize_array_uint8_t+0x42>
 801dca6:	bf00      	nop

0801dca8 <ucdr_deserialize_endian_array_uint8_t>:
 801dca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dcac:	4619      	mov	r1, r3
 801dcae:	461f      	mov	r7, r3
 801dcb0:	4605      	mov	r5, r0
 801dcb2:	4690      	mov	r8, r2
 801dcb4:	f7fc fe0c 	bl	801a8d0 <ucdr_check_buffer_available_for>
 801dcb8:	b9e8      	cbnz	r0, 801dcf6 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 801dcba:	463e      	mov	r6, r7
 801dcbc:	e00c      	b.n	801dcd8 <ucdr_deserialize_endian_array_uint8_t+0x30>
 801dcbe:	eb08 0003 	add.w	r0, r8, r3
 801dcc2:	68a9      	ldr	r1, [r5, #8]
 801dcc4:	4622      	mov	r2, r4
 801dcc6:	1b36      	subs	r6, r6, r4
 801dcc8:	f00a fbe1 	bl	802848e <memcpy>
 801dccc:	68ab      	ldr	r3, [r5, #8]
 801dcce:	6928      	ldr	r0, [r5, #16]
 801dcd0:	4423      	add	r3, r4
 801dcd2:	4420      	add	r0, r4
 801dcd4:	60ab      	str	r3, [r5, #8]
 801dcd6:	6128      	str	r0, [r5, #16]
 801dcd8:	4631      	mov	r1, r6
 801dcda:	2201      	movs	r2, #1
 801dcdc:	4628      	mov	r0, r5
 801dcde:	f7fc fe81 	bl	801a9e4 <ucdr_check_final_buffer_behavior_array>
 801dce2:	1bbb      	subs	r3, r7, r6
 801dce4:	4604      	mov	r4, r0
 801dce6:	2800      	cmp	r0, #0
 801dce8:	d1e9      	bne.n	801dcbe <ucdr_deserialize_endian_array_uint8_t+0x16>
 801dcea:	2301      	movs	r3, #1
 801dcec:	7da8      	ldrb	r0, [r5, #22]
 801dcee:	756b      	strb	r3, [r5, #21]
 801dcf0:	4058      	eors	r0, r3
 801dcf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dcf6:	463a      	mov	r2, r7
 801dcf8:	68a9      	ldr	r1, [r5, #8]
 801dcfa:	4640      	mov	r0, r8
 801dcfc:	f00a fbc7 	bl	802848e <memcpy>
 801dd00:	68aa      	ldr	r2, [r5, #8]
 801dd02:	692b      	ldr	r3, [r5, #16]
 801dd04:	443a      	add	r2, r7
 801dd06:	443b      	add	r3, r7
 801dd08:	60aa      	str	r2, [r5, #8]
 801dd0a:	612b      	str	r3, [r5, #16]
 801dd0c:	e7ed      	b.n	801dcea <ucdr_deserialize_endian_array_uint8_t+0x42>
 801dd0e:	bf00      	nop

0801dd10 <ucdr_serialize_endian_array_double>:
 801dd10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd14:	4604      	mov	r4, r0
 801dd16:	4688      	mov	r8, r1
 801dd18:	2108      	movs	r1, #8
 801dd1a:	4616      	mov	r6, r2
 801dd1c:	461f      	mov	r7, r3
 801dd1e:	f7fc fe37 	bl	801a990 <ucdr_buffer_alignment>
 801dd22:	4601      	mov	r1, r0
 801dd24:	4620      	mov	r0, r4
 801dd26:	7d65      	ldrb	r5, [r4, #21]
 801dd28:	f7fc fe7a 	bl	801aa20 <ucdr_advance_buffer>
 801dd2c:	f1b8 0f01 	cmp.w	r8, #1
 801dd30:	7565      	strb	r5, [r4, #21]
 801dd32:	d00f      	beq.n	801dd54 <ucdr_serialize_endian_array_double+0x44>
 801dd34:	b14f      	cbz	r7, 801dd4a <ucdr_serialize_endian_array_double+0x3a>
 801dd36:	2500      	movs	r5, #0
 801dd38:	3501      	adds	r5, #1
 801dd3a:	4641      	mov	r1, r8
 801dd3c:	4620      	mov	r0, r4
 801dd3e:	ecb6 0b02 	vldmia	r6!, {d0}
 801dd42:	f7fc fb5f 	bl	801a404 <ucdr_serialize_endian_double>
 801dd46:	42af      	cmp	r7, r5
 801dd48:	d1f6      	bne.n	801dd38 <ucdr_serialize_endian_array_double+0x28>
 801dd4a:	7da0      	ldrb	r0, [r4, #22]
 801dd4c:	f080 0001 	eor.w	r0, r0, #1
 801dd50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd54:	00ff      	lsls	r7, r7, #3
 801dd56:	4620      	mov	r0, r4
 801dd58:	4639      	mov	r1, r7
 801dd5a:	f7fc fdb9 	bl	801a8d0 <ucdr_check_buffer_available_for>
 801dd5e:	b9f8      	cbnz	r0, 801dda0 <ucdr_serialize_endian_array_double+0x90>
 801dd60:	46b8      	mov	r8, r7
 801dd62:	e00c      	b.n	801dd7e <ucdr_serialize_endian_array_double+0x6e>
 801dd64:	462a      	mov	r2, r5
 801dd66:	4431      	add	r1, r6
 801dd68:	68a0      	ldr	r0, [r4, #8]
 801dd6a:	eba8 0805 	sub.w	r8, r8, r5
 801dd6e:	f00a fb8e 	bl	802848e <memcpy>
 801dd72:	68a2      	ldr	r2, [r4, #8]
 801dd74:	6923      	ldr	r3, [r4, #16]
 801dd76:	442a      	add	r2, r5
 801dd78:	442b      	add	r3, r5
 801dd7a:	60a2      	str	r2, [r4, #8]
 801dd7c:	6123      	str	r3, [r4, #16]
 801dd7e:	4641      	mov	r1, r8
 801dd80:	2208      	movs	r2, #8
 801dd82:	4620      	mov	r0, r4
 801dd84:	f7fc fe2e 	bl	801a9e4 <ucdr_check_final_buffer_behavior_array>
 801dd88:	eba7 0108 	sub.w	r1, r7, r8
 801dd8c:	4605      	mov	r5, r0
 801dd8e:	2800      	cmp	r0, #0
 801dd90:	d1e8      	bne.n	801dd64 <ucdr_serialize_endian_array_double+0x54>
 801dd92:	2308      	movs	r3, #8
 801dd94:	7da0      	ldrb	r0, [r4, #22]
 801dd96:	7563      	strb	r3, [r4, #21]
 801dd98:	f080 0001 	eor.w	r0, r0, #1
 801dd9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dda0:	463a      	mov	r2, r7
 801dda2:	4631      	mov	r1, r6
 801dda4:	68a0      	ldr	r0, [r4, #8]
 801dda6:	f00a fb72 	bl	802848e <memcpy>
 801ddaa:	68a2      	ldr	r2, [r4, #8]
 801ddac:	6923      	ldr	r3, [r4, #16]
 801ddae:	443a      	add	r2, r7
 801ddb0:	441f      	add	r7, r3
 801ddb2:	60a2      	str	r2, [r4, #8]
 801ddb4:	6127      	str	r7, [r4, #16]
 801ddb6:	e7ec      	b.n	801dd92 <ucdr_serialize_endian_array_double+0x82>

0801ddb8 <ucdr_deserialize_endian_array_double>:
 801ddb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ddbc:	4605      	mov	r5, r0
 801ddbe:	4688      	mov	r8, r1
 801ddc0:	2108      	movs	r1, #8
 801ddc2:	4614      	mov	r4, r2
 801ddc4:	461f      	mov	r7, r3
 801ddc6:	f7fc fde3 	bl	801a990 <ucdr_buffer_alignment>
 801ddca:	4601      	mov	r1, r0
 801ddcc:	4628      	mov	r0, r5
 801ddce:	7d6e      	ldrb	r6, [r5, #21]
 801ddd0:	f7fc fe26 	bl	801aa20 <ucdr_advance_buffer>
 801ddd4:	f1b8 0f01 	cmp.w	r8, #1
 801ddd8:	756e      	strb	r6, [r5, #21]
 801ddda:	d010      	beq.n	801ddfe <ucdr_deserialize_endian_array_double+0x46>
 801dddc:	b157      	cbz	r7, 801ddf4 <ucdr_deserialize_endian_array_double+0x3c>
 801ddde:	2600      	movs	r6, #0
 801dde0:	3601      	adds	r6, #1
 801dde2:	4622      	mov	r2, r4
 801dde4:	4641      	mov	r1, r8
 801dde6:	4628      	mov	r0, r5
 801dde8:	f7fc fca4 	bl	801a734 <ucdr_deserialize_endian_double>
 801ddec:	42b7      	cmp	r7, r6
 801ddee:	f104 0408 	add.w	r4, r4, #8
 801ddf2:	d1f5      	bne.n	801dde0 <ucdr_deserialize_endian_array_double+0x28>
 801ddf4:	7da8      	ldrb	r0, [r5, #22]
 801ddf6:	f080 0001 	eor.w	r0, r0, #1
 801ddfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ddfe:	00ff      	lsls	r7, r7, #3
 801de00:	4628      	mov	r0, r5
 801de02:	4639      	mov	r1, r7
 801de04:	f7fc fd64 	bl	801a8d0 <ucdr_check_buffer_available_for>
 801de08:	b9f8      	cbnz	r0, 801de4a <ucdr_deserialize_endian_array_double+0x92>
 801de0a:	46b8      	mov	r8, r7
 801de0c:	e00c      	b.n	801de28 <ucdr_deserialize_endian_array_double+0x70>
 801de0e:	18e0      	adds	r0, r4, r3
 801de10:	4632      	mov	r2, r6
 801de12:	68a9      	ldr	r1, [r5, #8]
 801de14:	eba8 0806 	sub.w	r8, r8, r6
 801de18:	f00a fb39 	bl	802848e <memcpy>
 801de1c:	68aa      	ldr	r2, [r5, #8]
 801de1e:	692b      	ldr	r3, [r5, #16]
 801de20:	4432      	add	r2, r6
 801de22:	4433      	add	r3, r6
 801de24:	60aa      	str	r2, [r5, #8]
 801de26:	612b      	str	r3, [r5, #16]
 801de28:	4641      	mov	r1, r8
 801de2a:	2208      	movs	r2, #8
 801de2c:	4628      	mov	r0, r5
 801de2e:	f7fc fdd9 	bl	801a9e4 <ucdr_check_final_buffer_behavior_array>
 801de32:	eba7 0308 	sub.w	r3, r7, r8
 801de36:	4606      	mov	r6, r0
 801de38:	2800      	cmp	r0, #0
 801de3a:	d1e8      	bne.n	801de0e <ucdr_deserialize_endian_array_double+0x56>
 801de3c:	2308      	movs	r3, #8
 801de3e:	7da8      	ldrb	r0, [r5, #22]
 801de40:	756b      	strb	r3, [r5, #21]
 801de42:	f080 0001 	eor.w	r0, r0, #1
 801de46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de4a:	463a      	mov	r2, r7
 801de4c:	68a9      	ldr	r1, [r5, #8]
 801de4e:	4620      	mov	r0, r4
 801de50:	f00a fb1d 	bl	802848e <memcpy>
 801de54:	68aa      	ldr	r2, [r5, #8]
 801de56:	692b      	ldr	r3, [r5, #16]
 801de58:	443a      	add	r2, r7
 801de5a:	441f      	add	r7, r3
 801de5c:	60aa      	str	r2, [r5, #8]
 801de5e:	612f      	str	r7, [r5, #16]
 801de60:	e7ec      	b.n	801de3c <ucdr_deserialize_endian_array_double+0x84>
 801de62:	bf00      	nop

0801de64 <uxr_buffer_delete_entity>:
 801de64:	b510      	push	{r4, lr}
 801de66:	2300      	movs	r3, #0
 801de68:	b08e      	sub	sp, #56	@ 0x38
 801de6a:	4604      	mov	r4, r0
 801de6c:	9103      	str	r1, [sp, #12]
 801de6e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801de72:	2303      	movs	r3, #3
 801de74:	2204      	movs	r2, #4
 801de76:	9300      	str	r3, [sp, #0]
 801de78:	ab06      	add	r3, sp, #24
 801de7a:	f001 f951 	bl	801f120 <uxr_prepare_stream_to_write_submessage>
 801de7e:	b918      	cbnz	r0, 801de88 <uxr_buffer_delete_entity+0x24>
 801de80:	4604      	mov	r4, r0
 801de82:	4620      	mov	r0, r4
 801de84:	b00e      	add	sp, #56	@ 0x38
 801de86:	bd10      	pop	{r4, pc}
 801de88:	9902      	ldr	r1, [sp, #8]
 801de8a:	aa05      	add	r2, sp, #20
 801de8c:	4620      	mov	r0, r4
 801de8e:	f001 fa83 	bl	801f398 <uxr_init_base_object_request>
 801de92:	4604      	mov	r4, r0
 801de94:	a905      	add	r1, sp, #20
 801de96:	a806      	add	r0, sp, #24
 801de98:	f002 fcd8 	bl	802084c <uxr_serialize_DELETE_Payload>
 801de9c:	4620      	mov	r0, r4
 801de9e:	b00e      	add	sp, #56	@ 0x38
 801dea0:	bd10      	pop	{r4, pc}
 801dea2:	bf00      	nop

0801dea4 <uxr_common_create_entity>:
 801dea4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801dea8:	b510      	push	{r4, lr}
 801deaa:	f1bc 0f01 	cmp.w	ip, #1
 801deae:	b08c      	sub	sp, #48	@ 0x30
 801deb0:	4604      	mov	r4, r0
 801deb2:	9202      	str	r2, [sp, #8]
 801deb4:	bf0c      	ite	eq
 801deb6:	f003 0201 	andeq.w	r2, r3, #1
 801deba:	2200      	movne	r2, #0
 801debc:	330e      	adds	r3, #14
 801debe:	9103      	str	r1, [sp, #12]
 801dec0:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 801dec4:	441a      	add	r2, r3
 801dec6:	ab04      	add	r3, sp, #16
 801dec8:	9101      	str	r1, [sp, #4]
 801deca:	2101      	movs	r1, #1
 801decc:	b292      	uxth	r2, r2
 801dece:	9100      	str	r1, [sp, #0]
 801ded0:	9903      	ldr	r1, [sp, #12]
 801ded2:	f001 f925 	bl	801f120 <uxr_prepare_stream_to_write_submessage>
 801ded6:	b918      	cbnz	r0, 801dee0 <uxr_common_create_entity+0x3c>
 801ded8:	4604      	mov	r4, r0
 801deda:	4620      	mov	r0, r4
 801dedc:	b00c      	add	sp, #48	@ 0x30
 801dede:	bd10      	pop	{r4, pc}
 801dee0:	9902      	ldr	r1, [sp, #8]
 801dee2:	4620      	mov	r0, r4
 801dee4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801dee6:	f001 fa57 	bl	801f398 <uxr_init_base_object_request>
 801deea:	4604      	mov	r4, r0
 801deec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801deee:	a804      	add	r0, sp, #16
 801def0:	f002 fc06 	bl	8020700 <uxr_serialize_CREATE_Payload>
 801def4:	4620      	mov	r0, r4
 801def6:	b00c      	add	sp, #48	@ 0x30
 801def8:	bd10      	pop	{r4, pc}
 801defa:	bf00      	nop

0801defc <uxr_buffer_create_participant_bin>:
 801defc:	b570      	push	{r4, r5, r6, lr}
 801defe:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 801df02:	4605      	mov	r5, r0
 801df04:	ac11      	add	r4, sp, #68	@ 0x44
 801df06:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 801df0a:	2303      	movs	r3, #3
 801df0c:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 801df10:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801df14:	7223      	strb	r3, [r4, #8]
 801df16:	2300      	movs	r3, #0
 801df18:	2201      	movs	r2, #1
 801df1a:	f88d 3014 	strb.w	r3, [sp, #20]
 801df1e:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 801df20:	7122      	strb	r2, [r4, #4]
 801df22:	b1cb      	cbz	r3, 801df58 <uxr_buffer_create_participant_bin+0x5c>
 801df24:	f88d 201c 	strb.w	r2, [sp, #28]
 801df28:	9308      	str	r3, [sp, #32]
 801df2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801df2e:	a915      	add	r1, sp, #84	@ 0x54
 801df30:	a809      	add	r0, sp, #36	@ 0x24
 801df32:	f7fc fd21 	bl	801a978 <ucdr_init_buffer>
 801df36:	a905      	add	r1, sp, #20
 801df38:	a809      	add	r0, sp, #36	@ 0x24
 801df3a:	f001 ffcb 	bl	801fed4 <uxr_serialize_OBJK_DomainParticipant_Binary>
 801df3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801df40:	9600      	str	r6, [sp, #0]
 801df42:	4628      	mov	r0, r5
 801df44:	9401      	str	r4, [sp, #4]
 801df46:	60e3      	str	r3, [r4, #12]
 801df48:	b29b      	uxth	r3, r3
 801df4a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801df4e:	f7ff ffa9 	bl	801dea4 <uxr_common_create_entity>
 801df52:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 801df56:	bd70      	pop	{r4, r5, r6, pc}
 801df58:	f88d 301c 	strb.w	r3, [sp, #28]
 801df5c:	e7e5      	b.n	801df2a <uxr_buffer_create_participant_bin+0x2e>
 801df5e:	bf00      	nop

0801df60 <uxr_buffer_create_topic_bin>:
 801df60:	b570      	push	{r4, r5, r6, lr}
 801df62:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 801df66:	4605      	mov	r5, r0
 801df68:	4618      	mov	r0, r3
 801df6a:	9105      	str	r1, [sp, #20]
 801df6c:	a997      	add	r1, sp, #604	@ 0x25c
 801df6e:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 801df72:	ac13      	add	r4, sp, #76	@ 0x4c
 801df74:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801df78:	2302      	movs	r3, #2
 801df7a:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 801df7e:	f000 f995 	bl	801e2ac <uxr_object_id_to_raw>
 801df82:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 801df84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801df88:	a917      	add	r1, sp, #92	@ 0x5c
 801df8a:	a80b      	add	r0, sp, #44	@ 0x2c
 801df8c:	9306      	str	r3, [sp, #24]
 801df8e:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 801df90:	930a      	str	r3, [sp, #40]	@ 0x28
 801df92:	2303      	movs	r3, #3
 801df94:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801df98:	2301      	movs	r3, #1
 801df9a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801df9e:	2300      	movs	r3, #0
 801dfa0:	f88d 301c 	strb.w	r3, [sp, #28]
 801dfa4:	f7fc fce8 	bl	801a978 <ucdr_init_buffer>
 801dfa8:	a906      	add	r1, sp, #24
 801dfaa:	a80b      	add	r0, sp, #44	@ 0x2c
 801dfac:	f001 ffb4 	bl	801ff18 <uxr_serialize_OBJK_Topic_Binary>
 801dfb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dfb2:	4628      	mov	r0, r5
 801dfb4:	9600      	str	r6, [sp, #0]
 801dfb6:	9316      	str	r3, [sp, #88]	@ 0x58
 801dfb8:	b29b      	uxth	r3, r3
 801dfba:	9401      	str	r4, [sp, #4]
 801dfbc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801dfc0:	f7ff ff70 	bl	801dea4 <uxr_common_create_entity>
 801dfc4:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 801dfc8:	bd70      	pop	{r4, r5, r6, pc}
 801dfca:	bf00      	nop

0801dfcc <uxr_buffer_create_publisher_bin>:
 801dfcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dfce:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 801dfd2:	2603      	movs	r6, #3
 801dfd4:	4605      	mov	r5, r0
 801dfd6:	4618      	mov	r0, r3
 801dfd8:	9105      	str	r1, [sp, #20]
 801dfda:	a992      	add	r1, sp, #584	@ 0x248
 801dfdc:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 801dfe0:	ac0e      	add	r4, sp, #56	@ 0x38
 801dfe2:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 801dfe6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801dfea:	f000 f95f 	bl	801e2ac <uxr_object_id_to_raw>
 801dfee:	2300      	movs	r3, #0
 801dff0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801dff4:	a912      	add	r1, sp, #72	@ 0x48
 801dff6:	a806      	add	r0, sp, #24
 801dff8:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 801dffc:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 801e000:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 801e004:	f7fc fcb8 	bl	801a978 <ucdr_init_buffer>
 801e008:	a993      	add	r1, sp, #588	@ 0x24c
 801e00a:	a806      	add	r0, sp, #24
 801e00c:	f002 f838 	bl	8020080 <uxr_serialize_OBJK_Publisher_Binary>
 801e010:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e012:	4628      	mov	r0, r5
 801e014:	9700      	str	r7, [sp, #0]
 801e016:	9311      	str	r3, [sp, #68]	@ 0x44
 801e018:	b29b      	uxth	r3, r3
 801e01a:	9401      	str	r4, [sp, #4]
 801e01c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801e020:	f7ff ff40 	bl	801dea4 <uxr_common_create_entity>
 801e024:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 801e028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e02a:	bf00      	nop

0801e02c <uxr_buffer_create_subscriber_bin>:
 801e02c:	b570      	push	{r4, r5, r6, lr}
 801e02e:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 801e032:	4605      	mov	r5, r0
 801e034:	4618      	mov	r0, r3
 801e036:	9105      	str	r1, [sp, #20]
 801e038:	a992      	add	r1, sp, #584	@ 0x248
 801e03a:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 801e03e:	ac0e      	add	r4, sp, #56	@ 0x38
 801e040:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801e044:	2304      	movs	r3, #4
 801e046:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 801e04a:	f000 f92f 	bl	801e2ac <uxr_object_id_to_raw>
 801e04e:	2300      	movs	r3, #0
 801e050:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801e054:	a912      	add	r1, sp, #72	@ 0x48
 801e056:	a806      	add	r0, sp, #24
 801e058:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 801e05c:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 801e060:	2303      	movs	r3, #3
 801e062:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 801e066:	f7fc fc87 	bl	801a978 <ucdr_init_buffer>
 801e06a:	a993      	add	r1, sp, #588	@ 0x24c
 801e06c:	a806      	add	r0, sp, #24
 801e06e:	f002 f8b7 	bl	80201e0 <uxr_serialize_OBJK_Subscriber_Binary>
 801e072:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e074:	4628      	mov	r0, r5
 801e076:	9600      	str	r6, [sp, #0]
 801e078:	9311      	str	r3, [sp, #68]	@ 0x44
 801e07a:	b29b      	uxth	r3, r3
 801e07c:	9401      	str	r4, [sp, #4]
 801e07e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801e082:	f7ff ff0f 	bl	801dea4 <uxr_common_create_entity>
 801e086:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 801e08a:	bd70      	pop	{r4, r5, r6, pc}

0801e08c <uxr_buffer_create_datawriter_bin>:
 801e08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e090:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801e094:	4606      	mov	r6, r0
 801e096:	4618      	mov	r0, r3
 801e098:	2703      	movs	r7, #3
 801e09a:	ac1d      	add	r4, sp, #116	@ 0x74
 801e09c:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 801e0a0:	9105      	str	r1, [sp, #20]
 801e0a2:	a9a1      	add	r1, sp, #644	@ 0x284
 801e0a4:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 801e0a8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801e0ac:	2305      	movs	r3, #5
 801e0ae:	7123      	strb	r3, [r4, #4]
 801e0b0:	f000 f8fc 	bl	801e2ac <uxr_object_id_to_raw>
 801e0b4:	a90e      	add	r1, sp, #56	@ 0x38
 801e0b6:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 801e0b8:	7227      	strb	r7, [r4, #8]
 801e0ba:	f000 f8f7 	bl	801e2ac <uxr_object_id_to_raw>
 801e0be:	2300      	movs	r3, #0
 801e0c0:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 801e0c4:	3d00      	subs	r5, #0
 801e0c6:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 801e0ca:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801e0ce:	bf18      	it	ne
 801e0d0:	2501      	movne	r5, #1
 801e0d2:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 801e0d6:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 801e0da:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801e0de:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801e0e2:	2301      	movs	r3, #1
 801e0e4:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 801e0e8:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 801e0ec:	bb8a      	cbnz	r2, 801e152 <uxr_buffer_create_datawriter_bin+0xc6>
 801e0ee:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801e0f2:	f04f 0c13 	mov.w	ip, #19
 801e0f6:	250b      	movs	r5, #11
 801e0f8:	2221      	movs	r2, #33	@ 0x21
 801e0fa:	2111      	movs	r1, #17
 801e0fc:	2009      	movs	r0, #9
 801e0fe:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801e102:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 801e106:	b923      	cbnz	r3, 801e112 <uxr_buffer_create_datawriter_bin+0x86>
 801e108:	4672      	mov	r2, lr
 801e10a:	4661      	mov	r1, ip
 801e10c:	4628      	mov	r0, r5
 801e10e:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801e112:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 801e116:	2b01      	cmp	r3, #1
 801e118:	d025      	beq.n	801e166 <uxr_buffer_create_datawriter_bin+0xda>
 801e11a:	2b03      	cmp	r3, #3
 801e11c:	d029      	beq.n	801e172 <uxr_buffer_create_datawriter_bin+0xe6>
 801e11e:	b32b      	cbz	r3, 801e16c <uxr_buffer_create_datawriter_bin+0xe0>
 801e120:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801e124:	a921      	add	r1, sp, #132	@ 0x84
 801e126:	a806      	add	r0, sp, #24
 801e128:	f7fc fc26 	bl	801a978 <ucdr_init_buffer>
 801e12c:	a90e      	add	r1, sp, #56	@ 0x38
 801e12e:	a806      	add	r0, sp, #24
 801e130:	f002 f908 	bl	8020344 <uxr_serialize_OBJK_DataWriter_Binary>
 801e134:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e136:	f8cd 8000 	str.w	r8, [sp]
 801e13a:	4630      	mov	r0, r6
 801e13c:	9401      	str	r4, [sp, #4]
 801e13e:	60e3      	str	r3, [r4, #12]
 801e140:	b29b      	uxth	r3, r3
 801e142:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801e146:	f7ff fead 	bl	801dea4 <uxr_common_create_entity>
 801e14a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801e14e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e152:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801e156:	f04f 0c12 	mov.w	ip, #18
 801e15a:	250a      	movs	r5, #10
 801e15c:	2220      	movs	r2, #32
 801e15e:	2110      	movs	r1, #16
 801e160:	2008      	movs	r0, #8
 801e162:	2702      	movs	r7, #2
 801e164:	e7cd      	b.n	801e102 <uxr_buffer_create_datawriter_bin+0x76>
 801e166:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801e16a:	e7d9      	b.n	801e120 <uxr_buffer_create_datawriter_bin+0x94>
 801e16c:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801e170:	e7d6      	b.n	801e120 <uxr_buffer_create_datawriter_bin+0x94>
 801e172:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801e176:	e7d3      	b.n	801e120 <uxr_buffer_create_datawriter_bin+0x94>

0801e178 <uxr_buffer_create_datareader_bin>:
 801e178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e17c:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801e180:	4606      	mov	r6, r0
 801e182:	4618      	mov	r0, r3
 801e184:	2703      	movs	r7, #3
 801e186:	ac1f      	add	r4, sp, #124	@ 0x7c
 801e188:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 801e18c:	9105      	str	r1, [sp, #20]
 801e18e:	a9a3      	add	r1, sp, #652	@ 0x28c
 801e190:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 801e194:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801e198:	2306      	movs	r3, #6
 801e19a:	7123      	strb	r3, [r4, #4]
 801e19c:	f000 f886 	bl	801e2ac <uxr_object_id_to_raw>
 801e1a0:	a90e      	add	r1, sp, #56	@ 0x38
 801e1a2:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 801e1a4:	7227      	strb	r7, [r4, #8]
 801e1a6:	f000 f881 	bl	801e2ac <uxr_object_id_to_raw>
 801e1aa:	2300      	movs	r3, #0
 801e1ac:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 801e1b0:	3d00      	subs	r5, #0
 801e1b2:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 801e1b6:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 801e1ba:	bf18      	it	ne
 801e1bc:	2501      	movne	r5, #1
 801e1be:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801e1c2:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 801e1c6:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 801e1ca:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801e1ce:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801e1d2:	2301      	movs	r3, #1
 801e1d4:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 801e1d8:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 801e1dc:	bb8a      	cbnz	r2, 801e242 <uxr_buffer_create_datareader_bin+0xca>
 801e1de:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801e1e2:	f04f 0c13 	mov.w	ip, #19
 801e1e6:	250b      	movs	r5, #11
 801e1e8:	2221      	movs	r2, #33	@ 0x21
 801e1ea:	2111      	movs	r1, #17
 801e1ec:	2009      	movs	r0, #9
 801e1ee:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801e1f2:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 801e1f6:	b923      	cbnz	r3, 801e202 <uxr_buffer_create_datareader_bin+0x8a>
 801e1f8:	4672      	mov	r2, lr
 801e1fa:	4661      	mov	r1, ip
 801e1fc:	4628      	mov	r0, r5
 801e1fe:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801e202:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 801e206:	2b01      	cmp	r3, #1
 801e208:	d025      	beq.n	801e256 <uxr_buffer_create_datareader_bin+0xde>
 801e20a:	2b03      	cmp	r3, #3
 801e20c:	d029      	beq.n	801e262 <uxr_buffer_create_datareader_bin+0xea>
 801e20e:	b32b      	cbz	r3, 801e25c <uxr_buffer_create_datareader_bin+0xe4>
 801e210:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801e214:	a923      	add	r1, sp, #140	@ 0x8c
 801e216:	a806      	add	r0, sp, #24
 801e218:	f7fc fbae 	bl	801a978 <ucdr_init_buffer>
 801e21c:	a90e      	add	r1, sp, #56	@ 0x38
 801e21e:	a806      	add	r0, sp, #24
 801e220:	f002 f854 	bl	80202cc <uxr_serialize_OBJK_DataReader_Binary>
 801e224:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e226:	f8cd 8000 	str.w	r8, [sp]
 801e22a:	4630      	mov	r0, r6
 801e22c:	9401      	str	r4, [sp, #4]
 801e22e:	60e3      	str	r3, [r4, #12]
 801e230:	b29b      	uxth	r3, r3
 801e232:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801e236:	f7ff fe35 	bl	801dea4 <uxr_common_create_entity>
 801e23a:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801e23e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e242:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801e246:	f04f 0c12 	mov.w	ip, #18
 801e24a:	250a      	movs	r5, #10
 801e24c:	2220      	movs	r2, #32
 801e24e:	2110      	movs	r1, #16
 801e250:	2008      	movs	r0, #8
 801e252:	2702      	movs	r7, #2
 801e254:	e7cd      	b.n	801e1f2 <uxr_buffer_create_datareader_bin+0x7a>
 801e256:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801e25a:	e7d9      	b.n	801e210 <uxr_buffer_create_datareader_bin+0x98>
 801e25c:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801e260:	e7d6      	b.n	801e210 <uxr_buffer_create_datareader_bin+0x98>
 801e262:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801e266:	e7d3      	b.n	801e210 <uxr_buffer_create_datareader_bin+0x98>

0801e268 <uxr_object_id>:
 801e268:	b082      	sub	sp, #8
 801e26a:	2300      	movs	r3, #0
 801e26c:	f88d 1006 	strb.w	r1, [sp, #6]
 801e270:	f360 030f 	bfi	r3, r0, #0, #16
 801e274:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801e278:	f362 431f 	bfi	r3, r2, #16, #16
 801e27c:	4618      	mov	r0, r3
 801e27e:	b002      	add	sp, #8
 801e280:	4770      	bx	lr
 801e282:	bf00      	nop

0801e284 <uxr_object_id_from_raw>:
 801e284:	7843      	ldrb	r3, [r0, #1]
 801e286:	b082      	sub	sp, #8
 801e288:	7801      	ldrb	r1, [r0, #0]
 801e28a:	2000      	movs	r0, #0
 801e28c:	091a      	lsrs	r2, r3, #4
 801e28e:	f003 030f 	and.w	r3, r3, #15
 801e292:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 801e296:	f88d 3006 	strb.w	r3, [sp, #6]
 801e29a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801e29e:	f362 000f 	bfi	r0, r2, #0, #16
 801e2a2:	f363 401f 	bfi	r0, r3, #16, #16
 801e2a6:	b002      	add	sp, #8
 801e2a8:	4770      	bx	lr
 801e2aa:	bf00      	nop

0801e2ac <uxr_object_id_to_raw>:
 801e2ac:	4602      	mov	r2, r0
 801e2ae:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801e2b2:	b082      	sub	sp, #8
 801e2b4:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 801e2b8:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 801e2bc:	f881 c000 	strb.w	ip, [r1]
 801e2c0:	7048      	strb	r0, [r1, #1]
 801e2c2:	b002      	add	sp, #8
 801e2c4:	4770      	bx	lr
 801e2c6:	bf00      	nop

0801e2c8 <on_get_fragmentation_info>:
 801e2c8:	b500      	push	{lr}
 801e2ca:	b08b      	sub	sp, #44	@ 0x2c
 801e2cc:	4601      	mov	r1, r0
 801e2ce:	2204      	movs	r2, #4
 801e2d0:	a802      	add	r0, sp, #8
 801e2d2:	f7fc fb51 	bl	801a978 <ucdr_init_buffer>
 801e2d6:	f10d 0305 	add.w	r3, sp, #5
 801e2da:	f10d 0206 	add.w	r2, sp, #6
 801e2de:	a901      	add	r1, sp, #4
 801e2e0:	a802      	add	r0, sp, #8
 801e2e2:	f001 f9e3 	bl	801f6ac <uxr_read_submessage_header>
 801e2e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801e2ea:	2b0d      	cmp	r3, #13
 801e2ec:	d003      	beq.n	801e2f6 <on_get_fragmentation_info+0x2e>
 801e2ee:	2000      	movs	r0, #0
 801e2f0:	b00b      	add	sp, #44	@ 0x2c
 801e2f2:	f85d fb04 	ldr.w	pc, [sp], #4
 801e2f6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801e2fa:	f013 0f02 	tst.w	r3, #2
 801e2fe:	bf14      	ite	ne
 801e300:	2002      	movne	r0, #2
 801e302:	2001      	moveq	r0, #1
 801e304:	b00b      	add	sp, #44	@ 0x2c
 801e306:	f85d fb04 	ldr.w	pc, [sp], #4
 801e30a:	bf00      	nop

0801e30c <read_submessage_get_info>:
 801e30c:	b570      	push	{r4, r5, r6, lr}
 801e30e:	2500      	movs	r5, #0
 801e310:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 801e314:	460e      	mov	r6, r1
 801e316:	4604      	mov	r4, r0
 801e318:	f44f 7224 	mov.w	r2, #656	@ 0x290
 801e31c:	4629      	mov	r1, r5
 801e31e:	a810      	add	r0, sp, #64	@ 0x40
 801e320:	9503      	str	r5, [sp, #12]
 801e322:	9504      	str	r5, [sp, #16]
 801e324:	f009 ff8c 	bl	8028240 <memset>
 801e328:	a903      	add	r1, sp, #12
 801e32a:	4630      	mov	r0, r6
 801e32c:	f002 fa78 	bl	8020820 <uxr_deserialize_GET_INFO_Payload>
 801e330:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801e334:	4620      	mov	r0, r4
 801e336:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801e33a:	f001 f825 	bl	801f388 <uxr_session_header_offset>
 801e33e:	462b      	mov	r3, r5
 801e340:	220c      	movs	r2, #12
 801e342:	a905      	add	r1, sp, #20
 801e344:	9000      	str	r0, [sp, #0]
 801e346:	a808      	add	r0, sp, #32
 801e348:	f7fc fb04 	bl	801a954 <ucdr_init_buffer_origin_offset>
 801e34c:	a910      	add	r1, sp, #64	@ 0x40
 801e34e:	a808      	add	r0, sp, #32
 801e350:	f002 fada 	bl	8020908 <uxr_serialize_INFO_Payload>
 801e354:	9b08      	ldr	r3, [sp, #32]
 801e356:	462a      	mov	r2, r5
 801e358:	4629      	mov	r1, r5
 801e35a:	4620      	mov	r0, r4
 801e35c:	f000 ffc0 	bl	801f2e0 <uxr_stamp_session_header>
 801e360:	a808      	add	r0, sp, #32
 801e362:	f7fc fb37 	bl	801a9d4 <ucdr_buffer_length>
 801e366:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801e368:	4602      	mov	r2, r0
 801e36a:	a905      	add	r1, sp, #20
 801e36c:	e9d3 0400 	ldrd	r0, r4, [r3]
 801e370:	47a0      	blx	r4
 801e372:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801e376:	bd70      	pop	{r4, r5, r6, pc}

0801e378 <write_submessage_acknack.isra.0>:
 801e378:	b570      	push	{r4, r5, r6, lr}
 801e37a:	b092      	sub	sp, #72	@ 0x48
 801e37c:	4605      	mov	r5, r0
 801e37e:	460e      	mov	r6, r1
 801e380:	4614      	mov	r4, r2
 801e382:	f001 f801 	bl	801f388 <uxr_session_header_offset>
 801e386:	a905      	add	r1, sp, #20
 801e388:	9000      	str	r0, [sp, #0]
 801e38a:	2300      	movs	r3, #0
 801e38c:	a80a      	add	r0, sp, #40	@ 0x28
 801e38e:	2211      	movs	r2, #17
 801e390:	f7fc fae0 	bl	801a954 <ucdr_init_buffer_origin_offset>
 801e394:	2218      	movs	r2, #24
 801e396:	2300      	movs	r3, #0
 801e398:	210a      	movs	r1, #10
 801e39a:	fb02 5404 	mla	r4, r2, r4, r5
 801e39e:	a80a      	add	r0, sp, #40	@ 0x28
 801e3a0:	2205      	movs	r2, #5
 801e3a2:	3450      	adds	r4, #80	@ 0x50
 801e3a4:	f001 f968 	bl	801f678 <uxr_buffer_submessage_header>
 801e3a8:	a903      	add	r1, sp, #12
 801e3aa:	4620      	mov	r0, r4
 801e3ac:	f007 fc0a 	bl	8025bc4 <uxr_compute_acknack>
 801e3b0:	ba40      	rev16	r0, r0
 801e3b2:	a903      	add	r1, sp, #12
 801e3b4:	f88d 6010 	strb.w	r6, [sp, #16]
 801e3b8:	f8ad 000e 	strh.w	r0, [sp, #14]
 801e3bc:	a80a      	add	r0, sp, #40	@ 0x28
 801e3be:	f002 fb15 	bl	80209ec <uxr_serialize_ACKNACK_Payload>
 801e3c2:	2200      	movs	r2, #0
 801e3c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e3c6:	4628      	mov	r0, r5
 801e3c8:	4611      	mov	r1, r2
 801e3ca:	f000 ff89 	bl	801f2e0 <uxr_stamp_session_header>
 801e3ce:	a80a      	add	r0, sp, #40	@ 0x28
 801e3d0:	f7fc fb00 	bl	801a9d4 <ucdr_buffer_length>
 801e3d4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801e3d6:	4602      	mov	r2, r0
 801e3d8:	a905      	add	r1, sp, #20
 801e3da:	e9d3 0400 	ldrd	r0, r4, [r3]
 801e3de:	47a0      	blx	r4
 801e3e0:	b012      	add	sp, #72	@ 0x48
 801e3e2:	bd70      	pop	{r4, r5, r6, pc}
 801e3e4:	0000      	movs	r0, r0
	...

0801e3e8 <uxr_init_session>:
 801e3e8:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801e420 <uxr_init_session+0x38>
 801e3ec:	2300      	movs	r3, #0
 801e3ee:	b510      	push	{r4, lr}
 801e3f0:	4604      	mov	r4, r0
 801e3f2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 801e3f6:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 801e3fa:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 801e3fe:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 801e402:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 801e406:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 801e40a:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 801e40e:	2181      	movs	r1, #129	@ 0x81
 801e410:	f000 feca 	bl	801f1a8 <uxr_init_session_info>
 801e414:	f104 0008 	add.w	r0, r4, #8
 801e418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e41c:	f001 b848 	b.w	801f4b0 <uxr_init_stream_storage>
	...

0801e428 <uxr_set_status_callback>:
 801e428:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 801e42c:	4770      	bx	lr
 801e42e:	bf00      	nop

0801e430 <uxr_set_topic_callback>:
 801e430:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 801e434:	4770      	bx	lr
 801e436:	bf00      	nop

0801e438 <uxr_set_request_callback>:
 801e438:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 801e43c:	4770      	bx	lr
 801e43e:	bf00      	nop

0801e440 <uxr_set_reply_callback>:
 801e440:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 801e444:	4770      	bx	lr
 801e446:	bf00      	nop

0801e448 <uxr_create_output_best_effort_stream>:
 801e448:	b510      	push	{r4, lr}
 801e44a:	4604      	mov	r4, r0
 801e44c:	b084      	sub	sp, #16
 801e44e:	e9cd 2100 	strd	r2, r1, [sp]
 801e452:	f000 ff99 	bl	801f388 <uxr_session_header_offset>
 801e456:	4603      	mov	r3, r0
 801e458:	f104 0008 	add.w	r0, r4, #8
 801e45c:	e9dd 2100 	ldrd	r2, r1, [sp]
 801e460:	b004      	add	sp, #16
 801e462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e466:	f001 b869 	b.w	801f53c <uxr_add_output_best_effort_buffer>
 801e46a:	bf00      	nop

0801e46c <uxr_create_output_reliable_stream>:
 801e46c:	b530      	push	{r4, r5, lr}
 801e46e:	b089      	sub	sp, #36	@ 0x24
 801e470:	4604      	mov	r4, r0
 801e472:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801e476:	9303      	str	r3, [sp, #12]
 801e478:	f000 ff86 	bl	801f388 <uxr_session_header_offset>
 801e47c:	4605      	mov	r5, r0
 801e47e:	9905      	ldr	r1, [sp, #20]
 801e480:	f104 0008 	add.w	r0, r4, #8
 801e484:	9500      	str	r5, [sp, #0]
 801e486:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 801e48a:	f001 f86b 	bl	801f564 <uxr_add_output_reliable_buffer>
 801e48e:	2200      	movs	r2, #0
 801e490:	fa5f fc80 	uxtb.w	ip, r0
 801e494:	f3c0 2407 	ubfx	r4, r0, #8, #8
 801e498:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801e49c:	0e03      	lsrs	r3, r0, #24
 801e49e:	f36c 0207 	bfi	r2, ip, #0, #8
 801e4a2:	f364 220f 	bfi	r2, r4, #8, #8
 801e4a6:	f361 4217 	bfi	r2, r1, #16, #8
 801e4aa:	f363 621f 	bfi	r2, r3, #24, #8
 801e4ae:	4610      	mov	r0, r2
 801e4b0:	b009      	add	sp, #36	@ 0x24
 801e4b2:	bd30      	pop	{r4, r5, pc}

0801e4b4 <uxr_create_input_best_effort_stream>:
 801e4b4:	b082      	sub	sp, #8
 801e4b6:	3008      	adds	r0, #8
 801e4b8:	b002      	add	sp, #8
 801e4ba:	f001 b86d 	b.w	801f598 <uxr_add_input_best_effort_buffer>
 801e4be:	bf00      	nop

0801e4c0 <uxr_create_input_reliable_stream>:
 801e4c0:	b510      	push	{r4, lr}
 801e4c2:	4c0c      	ldr	r4, [pc, #48]	@ (801e4f4 <uxr_create_input_reliable_stream+0x34>)
 801e4c4:	b084      	sub	sp, #16
 801e4c6:	3008      	adds	r0, #8
 801e4c8:	9400      	str	r4, [sp, #0]
 801e4ca:	f001 f87b 	bl	801f5c4 <uxr_add_input_reliable_buffer>
 801e4ce:	2200      	movs	r2, #0
 801e4d0:	fa5f fe80 	uxtb.w	lr, r0
 801e4d4:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 801e4d8:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801e4dc:	0e03      	lsrs	r3, r0, #24
 801e4de:	f36e 0207 	bfi	r2, lr, #0, #8
 801e4e2:	f36c 220f 	bfi	r2, ip, #8, #8
 801e4e6:	f361 4217 	bfi	r2, r1, #16, #8
 801e4ea:	f363 621f 	bfi	r2, r3, #24, #8
 801e4ee:	4610      	mov	r0, r2
 801e4f0:	b004      	add	sp, #16
 801e4f2:	bd10      	pop	{r4, pc}
 801e4f4:	0801e2c9 	.word	0x0801e2c9

0801e4f8 <uxr_epoch_nanos>:
 801e4f8:	b510      	push	{r4, lr}
 801e4fa:	4604      	mov	r4, r0
 801e4fc:	f001 f91e 	bl	801f73c <uxr_nanos>
 801e500:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 801e504:	1ac0      	subs	r0, r0, r3
 801e506:	eb61 0102 	sbc.w	r1, r1, r2
 801e50a:	bd10      	pop	{r4, pc}

0801e50c <uxr_flash_output_streams>:
 801e50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e510:	7e03      	ldrb	r3, [r0, #24]
 801e512:	b084      	sub	sp, #16
 801e514:	4604      	mov	r4, r0
 801e516:	b1fb      	cbz	r3, 801e558 <uxr_flash_output_streams+0x4c>
 801e518:	f04f 0900 	mov.w	r9, #0
 801e51c:	f10d 0802 	add.w	r8, sp, #2
 801e520:	af03      	add	r7, sp, #12
 801e522:	ae02      	add	r6, sp, #8
 801e524:	4648      	mov	r0, r9
 801e526:	2201      	movs	r2, #1
 801e528:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801e52c:	4611      	mov	r1, r2
 801e52e:	3508      	adds	r5, #8
 801e530:	f000 ff64 	bl	801f3fc <uxr_stream_id>
 801e534:	4684      	mov	ip, r0
 801e536:	4643      	mov	r3, r8
 801e538:	463a      	mov	r2, r7
 801e53a:	4631      	mov	r1, r6
 801e53c:	4628      	mov	r0, r5
 801e53e:	f8cd c004 	str.w	ip, [sp, #4]
 801e542:	f007 fbc9 	bl	8025cd8 <uxr_prepare_best_effort_buffer_to_send>
 801e546:	2800      	cmp	r0, #0
 801e548:	d13d      	bne.n	801e5c6 <uxr_flash_output_streams+0xba>
 801e54a:	f109 0901 	add.w	r9, r9, #1
 801e54e:	7e23      	ldrb	r3, [r4, #24]
 801e550:	fa5f f089 	uxtb.w	r0, r9
 801e554:	4283      	cmp	r3, r0
 801e556:	d8e6      	bhi.n	801e526 <uxr_flash_output_streams+0x1a>
 801e558:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801e55c:	b383      	cbz	r3, 801e5c0 <uxr_flash_output_streams+0xb4>
 801e55e:	f04f 0900 	mov.w	r9, #0
 801e562:	f10d 0802 	add.w	r8, sp, #2
 801e566:	af03      	add	r7, sp, #12
 801e568:	ae02      	add	r6, sp, #8
 801e56a:	4648      	mov	r0, r9
 801e56c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 801e570:	2201      	movs	r2, #1
 801e572:	2102      	movs	r1, #2
 801e574:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 801e578:	f000 ff40 	bl	801f3fc <uxr_stream_id>
 801e57c:	9001      	str	r0, [sp, #4]
 801e57e:	3520      	adds	r5, #32
 801e580:	e00c      	b.n	801e59c <uxr_flash_output_streams+0x90>
 801e582:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801e586:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801e58a:	9b02      	ldr	r3, [sp, #8]
 801e58c:	f000 fea8 	bl	801f2e0 <uxr_stamp_session_header>
 801e590:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801e592:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801e596:	e9d3 0a00 	ldrd	r0, sl, [r3]
 801e59a:	47d0      	blx	sl
 801e59c:	4643      	mov	r3, r8
 801e59e:	463a      	mov	r2, r7
 801e5a0:	4631      	mov	r1, r6
 801e5a2:	4628      	mov	r0, r5
 801e5a4:	f007 fdbc 	bl	8026120 <uxr_prepare_next_reliable_buffer_to_send>
 801e5a8:	4603      	mov	r3, r0
 801e5aa:	4620      	mov	r0, r4
 801e5ac:	2b00      	cmp	r3, #0
 801e5ae:	d1e8      	bne.n	801e582 <uxr_flash_output_streams+0x76>
 801e5b0:	f109 0901 	add.w	r9, r9, #1
 801e5b4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801e5b8:	fa5f f089 	uxtb.w	r0, r9
 801e5bc:	4283      	cmp	r3, r0
 801e5be:	d8d5      	bhi.n	801e56c <uxr_flash_output_streams+0x60>
 801e5c0:	b004      	add	sp, #16
 801e5c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e5c6:	9b02      	ldr	r3, [sp, #8]
 801e5c8:	4620      	mov	r0, r4
 801e5ca:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801e5ce:	f109 0901 	add.w	r9, r9, #1
 801e5d2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801e5d6:	f000 fe83 	bl	801f2e0 <uxr_stamp_session_header>
 801e5da:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801e5dc:	9a03      	ldr	r2, [sp, #12]
 801e5de:	685d      	ldr	r5, [r3, #4]
 801e5e0:	6818      	ldr	r0, [r3, #0]
 801e5e2:	9902      	ldr	r1, [sp, #8]
 801e5e4:	47a8      	blx	r5
 801e5e6:	7e23      	ldrb	r3, [r4, #24]
 801e5e8:	fa5f f089 	uxtb.w	r0, r9
 801e5ec:	4283      	cmp	r3, r0
 801e5ee:	d89a      	bhi.n	801e526 <uxr_flash_output_streams+0x1a>
 801e5f0:	e7b2      	b.n	801e558 <uxr_flash_output_streams+0x4c>
 801e5f2:	bf00      	nop

0801e5f4 <read_submessage_info>:
 801e5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e5f8:	460d      	mov	r5, r1
 801e5fa:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801e5fe:	4606      	mov	r6, r0
 801e600:	4669      	mov	r1, sp
 801e602:	4628      	mov	r0, r5
 801e604:	f002 f81e 	bl	8020644 <uxr_deserialize_BaseObjectReply>
 801e608:	4604      	mov	r4, r0
 801e60a:	a902      	add	r1, sp, #8
 801e60c:	4628      	mov	r0, r5
 801e60e:	f89d 7005 	ldrb.w	r7, [sp, #5]
 801e612:	f7fa feb7 	bl	8019384 <ucdr_deserialize_bool>
 801e616:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801e61a:	4004      	ands	r4, r0
 801e61c:	b2e4      	uxtb	r4, r4
 801e61e:	b95b      	cbnz	r3, 801e638 <read_submessage_info+0x44>
 801e620:	a987      	add	r1, sp, #540	@ 0x21c
 801e622:	4628      	mov	r0, r5
 801e624:	f7fa feae 	bl	8019384 <ucdr_deserialize_bool>
 801e628:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 801e62c:	4680      	mov	r8, r0
 801e62e:	b94b      	cbnz	r3, 801e644 <read_submessage_info+0x50>
 801e630:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801e634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e638:	a903      	add	r1, sp, #12
 801e63a:	4628      	mov	r0, r5
 801e63c:	f001 feae 	bl	802039c <uxr_deserialize_ObjectVariant>
 801e640:	4004      	ands	r4, r0
 801e642:	e7ed      	b.n	801e620 <read_submessage_info+0x2c>
 801e644:	a988      	add	r1, sp, #544	@ 0x220
 801e646:	4628      	mov	r0, r5
 801e648:	f7fa feca 	bl	80193e0 <ucdr_deserialize_uint8_t>
 801e64c:	ea14 0f08 	tst.w	r4, r8
 801e650:	d0ee      	beq.n	801e630 <read_submessage_info+0x3c>
 801e652:	2800      	cmp	r0, #0
 801e654:	d0ec      	beq.n	801e630 <read_submessage_info+0x3c>
 801e656:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 801e65a:	2b0d      	cmp	r3, #13
 801e65c:	d1e8      	bne.n	801e630 <read_submessage_info+0x3c>
 801e65e:	a98a      	add	r1, sp, #552	@ 0x228
 801e660:	4628      	mov	r0, r5
 801e662:	f7fb fc63 	bl	8019f2c <ucdr_deserialize_int16_t>
 801e666:	b138      	cbz	r0, 801e678 <read_submessage_info+0x84>
 801e668:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 801e66c:	2b00      	cmp	r3, #0
 801e66e:	dd06      	ble.n	801e67e <read_submessage_info+0x8a>
 801e670:	2f00      	cmp	r7, #0
 801e672:	bf14      	ite	ne
 801e674:	2001      	movne	r0, #1
 801e676:	2002      	moveq	r0, #2
 801e678:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 801e67c:	e7d8      	b.n	801e630 <read_submessage_info+0x3c>
 801e67e:	2000      	movs	r0, #0
 801e680:	e7fa      	b.n	801e678 <read_submessage_info+0x84>
 801e682:	bf00      	nop

0801e684 <read_submessage_list>:
 801e684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e688:	4604      	mov	r4, r0
 801e68a:	b097      	sub	sp, #92	@ 0x5c
 801e68c:	460d      	mov	r5, r1
 801e68e:	4ec1      	ldr	r6, [pc, #772]	@ (801e994 <read_submessage_list+0x310>)
 801e690:	9209      	str	r2, [sp, #36]	@ 0x24
 801e692:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801e696:	aa0c      	add	r2, sp, #48	@ 0x30
 801e698:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 801e69c:	4628      	mov	r0, r5
 801e69e:	f001 f805 	bl	801f6ac <uxr_read_submessage_header>
 801e6a2:	2800      	cmp	r0, #0
 801e6a4:	f000 8142 	beq.w	801e92c <read_submessage_list+0x2a8>
 801e6a8:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 801e6ac:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 801e6b0:	3b02      	subs	r3, #2
 801e6b2:	2b0d      	cmp	r3, #13
 801e6b4:	d8ed      	bhi.n	801e692 <read_submessage_list+0xe>
 801e6b6:	a101      	add	r1, pc, #4	@ (adr r1, 801e6bc <read_submessage_list+0x38>)
 801e6b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e6bc:	0801e923 	.word	0x0801e923
 801e6c0:	0801e693 	.word	0x0801e693
 801e6c4:	0801e913 	.word	0x0801e913
 801e6c8:	0801e8b1 	.word	0x0801e8b1
 801e6cc:	0801e8a7 	.word	0x0801e8a7
 801e6d0:	0801e693 	.word	0x0801e693
 801e6d4:	0801e693 	.word	0x0801e693
 801e6d8:	0801e7fd 	.word	0x0801e7fd
 801e6dc:	0801e78f 	.word	0x0801e78f
 801e6e0:	0801e74f 	.word	0x0801e74f
 801e6e4:	0801e693 	.word	0x0801e693
 801e6e8:	0801e693 	.word	0x0801e693
 801e6ec:	0801e693 	.word	0x0801e693
 801e6f0:	0801e6f5 	.word	0x0801e6f5
 801e6f4:	a910      	add	r1, sp, #64	@ 0x40
 801e6f6:	4628      	mov	r0, r5
 801e6f8:	f002 f9cc 	bl	8020a94 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 801e6fc:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 801e700:	f1b8 0f00 	cmp.w	r8, #0
 801e704:	f000 811a 	beq.w	801e93c <read_submessage_list+0x2b8>
 801e708:	f001 f818 	bl	801f73c <uxr_nanos>
 801e70c:	4602      	mov	r2, r0
 801e70e:	460b      	mov	r3, r1
 801e710:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 801e714:	2100      	movs	r1, #0
 801e716:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801e718:	9006      	str	r0, [sp, #24]
 801e71a:	468c      	mov	ip, r1
 801e71c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801e71e:	fbc7 0c06 	smlal	r0, ip, r7, r6
 801e722:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801e724:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 801e728:	468c      	mov	ip, r1
 801e72a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801e72c:	fbc7 0c06 	smlal	r0, ip, r7, r6
 801e730:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 801e734:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 801e738:	fbc7 0106 	smlal	r0, r1, r7, r6
 801e73c:	e9cd 0100 	strd	r0, r1, [sp]
 801e740:	4620      	mov	r0, r4
 801e742:	47c0      	blx	r8
 801e744:	f04f 0301 	mov.w	r3, #1
 801e748:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 801e74c:	e7a1      	b.n	801e692 <read_submessage_list+0xe>
 801e74e:	a910      	add	r1, sp, #64	@ 0x40
 801e750:	4628      	mov	r0, r5
 801e752:	f002 f98b 	bl	8020a6c <uxr_deserialize_HEARTBEAT_Payload>
 801e756:	2100      	movs	r1, #0
 801e758:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801e75c:	f000 fe7c 	bl	801f458 <uxr_stream_id_from_raw>
 801e760:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801e764:	900f      	str	r0, [sp, #60]	@ 0x3c
 801e766:	f104 0008 	add.w	r0, r4, #8
 801e76a:	4641      	mov	r1, r8
 801e76c:	f000 ff62 	bl	801f634 <uxr_get_input_reliable_stream>
 801e770:	2800      	cmp	r0, #0
 801e772:	d08e      	beq.n	801e692 <read_submessage_list+0xe>
 801e774:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801e778:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 801e77c:	f007 fa16 	bl	8025bac <uxr_process_heartbeat>
 801e780:	4642      	mov	r2, r8
 801e782:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 801e786:	4620      	mov	r0, r4
 801e788:	f7ff fdf6 	bl	801e378 <write_submessage_acknack.isra.0>
 801e78c:	e781      	b.n	801e692 <read_submessage_list+0xe>
 801e78e:	a910      	add	r1, sp, #64	@ 0x40
 801e790:	4628      	mov	r0, r5
 801e792:	f002 f943 	bl	8020a1c <uxr_deserialize_ACKNACK_Payload>
 801e796:	2100      	movs	r1, #0
 801e798:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801e79c:	f000 fe5c 	bl	801f458 <uxr_stream_id_from_raw>
 801e7a0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801e7a4:	900d      	str	r0, [sp, #52]	@ 0x34
 801e7a6:	f104 0008 	add.w	r0, r4, #8
 801e7aa:	f000 ff2d 	bl	801f608 <uxr_get_output_reliable_stream>
 801e7ae:	4680      	mov	r8, r0
 801e7b0:	2800      	cmp	r0, #0
 801e7b2:	f43f af6e 	beq.w	801e692 <read_submessage_list+0xe>
 801e7b6:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 801e7ba:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801e7be:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 801e7c2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801e7c6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801e7ca:	b289      	uxth	r1, r1
 801e7cc:	f007 fd50 	bl	8026270 <uxr_process_acknack>
 801e7d0:	4640      	mov	r0, r8
 801e7d2:	f007 fd11 	bl	80261f8 <uxr_begin_output_nack_buffer_it>
 801e7d6:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801e7da:	e005      	b.n	801e7e8 <read_submessage_list+0x164>
 801e7dc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801e7de:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 801e7e2:	e9d3 0900 	ldrd	r0, r9, [r3]
 801e7e6:	47c8      	blx	r9
 801e7e8:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 801e7ec:	aa0f      	add	r2, sp, #60	@ 0x3c
 801e7ee:	4651      	mov	r1, sl
 801e7f0:	4640      	mov	r0, r8
 801e7f2:	f007 fd03 	bl	80261fc <uxr_next_reliable_nack_buffer_to_send>
 801e7f6:	2800      	cmp	r0, #0
 801e7f8:	d1f0      	bne.n	801e7dc <read_submessage_list+0x158>
 801e7fa:	e74a      	b.n	801e692 <read_submessage_list+0xe>
 801e7fc:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 801e800:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801e804:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 801e808:	4628      	mov	r0, r5
 801e80a:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 801e80e:	4651      	mov	r1, sl
 801e810:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 801e814:	f1a8 0804 	sub.w	r8, r8, #4
 801e818:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 801e81c:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 801e820:	fa1f f888 	uxth.w	r8, r8
 801e824:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801e828:	f009 090e 	and.w	r9, r9, #14
 801e82c:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 801e830:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 801e834:	f001 fe54 	bl	80204e0 <uxr_deserialize_BaseObjectRequest>
 801e838:	4650      	mov	r0, sl
 801e83a:	a90f      	add	r1, sp, #60	@ 0x3c
 801e83c:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801e840:	f000 fdca 	bl	801f3d8 <uxr_parse_base_object_request>
 801e844:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e846:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 801e84a:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 801e84e:	9110      	str	r1, [sp, #64]	@ 0x40
 801e850:	f1bb 0f00 	cmp.w	fp, #0
 801e854:	d006      	beq.n	801e864 <read_submessage_list+0x1e0>
 801e856:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801e85a:	4652      	mov	r2, sl
 801e85c:	4620      	mov	r0, r4
 801e85e:	9300      	str	r3, [sp, #0]
 801e860:	2300      	movs	r3, #0
 801e862:	47d8      	blx	fp
 801e864:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801e866:	b182      	cbz	r2, 801e88a <read_submessage_list+0x206>
 801e868:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801e86a:	f04f 0c00 	mov.w	ip, #0
 801e86e:	3902      	subs	r1, #2
 801e870:	e003      	b.n	801e87a <read_submessage_list+0x1f6>
 801e872:	f10c 0c01 	add.w	ip, ip, #1
 801e876:	4594      	cmp	ip, r2
 801e878:	d007      	beq.n	801e88a <read_submessage_list+0x206>
 801e87a:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 801e87e:	4553      	cmp	r3, sl
 801e880:	d1f7      	bne.n	801e872 <read_submessage_list+0x1ee>
 801e882:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801e884:	2200      	movs	r2, #0
 801e886:	f803 200c 	strb.w	r2, [r3, ip]
 801e88a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801e88e:	464b      	mov	r3, r9
 801e890:	4642      	mov	r2, r8
 801e892:	4620      	mov	r0, r4
 801e894:	9102      	str	r1, [sp, #8]
 801e896:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e898:	9101      	str	r1, [sp, #4]
 801e89a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801e89c:	9100      	str	r1, [sp, #0]
 801e89e:	4629      	mov	r1, r5
 801e8a0:	f007 fda8 	bl	80263f4 <read_submessage_format>
 801e8a4:	e6f5      	b.n	801e692 <read_submessage_list+0xe>
 801e8a6:	4629      	mov	r1, r5
 801e8a8:	4620      	mov	r0, r4
 801e8aa:	f7ff fea3 	bl	801e5f4 <read_submessage_info>
 801e8ae:	e6f0      	b.n	801e692 <read_submessage_list+0xe>
 801e8b0:	2a00      	cmp	r2, #0
 801e8b2:	d03e      	beq.n	801e932 <read_submessage_list+0x2ae>
 801e8b4:	a910      	add	r1, sp, #64	@ 0x40
 801e8b6:	4628      	mov	r0, r5
 801e8b8:	f002 f808 	bl	80208cc <uxr_deserialize_STATUS_Payload>
 801e8bc:	a90e      	add	r1, sp, #56	@ 0x38
 801e8be:	aa0d      	add	r2, sp, #52	@ 0x34
 801e8c0:	a810      	add	r0, sp, #64	@ 0x40
 801e8c2:	f000 fd89 	bl	801f3d8 <uxr_parse_base_object_request>
 801e8c6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801e8c8:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 801e8cc:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 801e8d0:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 801e8d4:	910f      	str	r1, [sp, #60]	@ 0x3c
 801e8d6:	f1ba 0f00 	cmp.w	sl, #0
 801e8da:	d006      	beq.n	801e8ea <read_submessage_list+0x266>
 801e8dc:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801e8e0:	4642      	mov	r2, r8
 801e8e2:	4620      	mov	r0, r4
 801e8e4:	9300      	str	r3, [sp, #0]
 801e8e6:	464b      	mov	r3, r9
 801e8e8:	47d0      	blx	sl
 801e8ea:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801e8ec:	2a00      	cmp	r2, #0
 801e8ee:	f43f aed0 	beq.w	801e692 <read_submessage_list+0xe>
 801e8f2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801e8f4:	2100      	movs	r1, #0
 801e8f6:	3802      	subs	r0, #2
 801e8f8:	e003      	b.n	801e902 <read_submessage_list+0x27e>
 801e8fa:	3101      	adds	r1, #1
 801e8fc:	4291      	cmp	r1, r2
 801e8fe:	f43f aec8 	beq.w	801e692 <read_submessage_list+0xe>
 801e902:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801e906:	4543      	cmp	r3, r8
 801e908:	d1f7      	bne.n	801e8fa <read_submessage_list+0x276>
 801e90a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801e90c:	f803 9001 	strb.w	r9, [r3, r1]
 801e910:	e6bf      	b.n	801e692 <read_submessage_list+0xe>
 801e912:	2a00      	cmp	r2, #0
 801e914:	f47f aebd 	bne.w	801e692 <read_submessage_list+0xe>
 801e918:	4629      	mov	r1, r5
 801e91a:	4620      	mov	r0, r4
 801e91c:	f000 fca0 	bl	801f260 <uxr_read_create_session_status>
 801e920:	e6b7      	b.n	801e692 <read_submessage_list+0xe>
 801e922:	4629      	mov	r1, r5
 801e924:	4620      	mov	r0, r4
 801e926:	f7ff fcf1 	bl	801e30c <read_submessage_get_info>
 801e92a:	e6b2      	b.n	801e692 <read_submessage_list+0xe>
 801e92c:	b017      	add	sp, #92	@ 0x5c
 801e92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e932:	4629      	mov	r1, r5
 801e934:	4620      	mov	r0, r4
 801e936:	f000 fca1 	bl	801f27c <uxr_read_delete_session_status>
 801e93a:	e6aa      	b.n	801e692 <read_submessage_list+0xe>
 801e93c:	f000 fefe 	bl	801f73c <uxr_nanos>
 801e940:	4642      	mov	r2, r8
 801e942:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801e944:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e946:	fbc7 3206 	smlal	r3, r2, r7, r6
 801e94a:	1818      	adds	r0, r3, r0
 801e94c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801e94e:	eb42 0101 	adc.w	r1, r2, r1
 801e952:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e954:	4642      	mov	r2, r8
 801e956:	fbc7 3206 	smlal	r3, r2, r7, r6
 801e95a:	469c      	mov	ip, r3
 801e95c:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 801e960:	fbc3 7806 	smlal	r7, r8, r3, r6
 801e964:	4643      	mov	r3, r8
 801e966:	eb1c 0c07 	adds.w	ip, ip, r7
 801e96a:	eb42 0203 	adc.w	r2, r2, r3
 801e96e:	ebb0 030c 	subs.w	r3, r0, ip
 801e972:	eb61 0202 	sbc.w	r2, r1, r2
 801e976:	2a00      	cmp	r2, #0
 801e978:	db08      	blt.n	801e98c <read_submessage_list+0x308>
 801e97a:	085b      	lsrs	r3, r3, #1
 801e97c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 801e980:	1052      	asrs	r2, r2, #1
 801e982:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 801e986:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 801e98a:	e6db      	b.n	801e744 <read_submessage_list+0xc0>
 801e98c:	3301      	adds	r3, #1
 801e98e:	f142 0200 	adc.w	r2, r2, #0
 801e992:	e7f2      	b.n	801e97a <read_submessage_list+0x2f6>
 801e994:	3b9aca00 	.word	0x3b9aca00

0801e998 <listen_message_reliably>:
 801e998:	1e0b      	subs	r3, r1, #0
 801e99a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e99e:	bfb8      	it	lt
 801e9a0:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 801e9a4:	b09d      	sub	sp, #116	@ 0x74
 801e9a6:	4680      	mov	r8, r0
 801e9a8:	9305      	str	r3, [sp, #20]
 801e9aa:	f000 feab 	bl	801f704 <uxr_millis>
 801e9ae:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 801e9b2:	4681      	mov	r9, r0
 801e9b4:	2a00      	cmp	r2, #0
 801e9b6:	f000 809a 	beq.w	801eaee <listen_message_reliably+0x156>
 801e9ba:	2600      	movs	r6, #0
 801e9bc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801e9c0:	f04f 3bff 	mov.w	fp, #4294967295
 801e9c4:	460f      	mov	r7, r1
 801e9c6:	4630      	mov	r0, r6
 801e9c8:	9303      	str	r3, [sp, #12]
 801e9ca:	e00e      	b.n	801e9ea <listen_message_reliably+0x52>
 801e9cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801e9ce:	3601      	adds	r6, #1
 801e9d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e9d2:	455a      	cmp	r2, fp
 801e9d4:	9903      	ldr	r1, [sp, #12]
 801e9d6:	b2f0      	uxtb	r0, r6
 801e9d8:	eb73 0101 	sbcs.w	r1, r3, r1
 801e9dc:	da01      	bge.n	801e9e2 <listen_message_reliably+0x4a>
 801e9de:	4693      	mov	fp, r2
 801e9e0:	9303      	str	r3, [sp, #12]
 801e9e2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801e9e6:	4283      	cmp	r3, r0
 801e9e8:	d95f      	bls.n	801eaaa <listen_message_reliably+0x112>
 801e9ea:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801e9ee:	2102      	movs	r1, #2
 801e9f0:	2201      	movs	r2, #1
 801e9f2:	00e4      	lsls	r4, r4, #3
 801e9f4:	f000 fd02 	bl	801f3fc <uxr_stream_id>
 801e9f8:	4601      	mov	r1, r0
 801e9fa:	f104 0520 	add.w	r5, r4, #32
 801e9fe:	463b      	mov	r3, r7
 801ea00:	464a      	mov	r2, r9
 801ea02:	9109      	str	r1, [sp, #36]	@ 0x24
 801ea04:	4445      	add	r5, r8
 801ea06:	4628      	mov	r0, r5
 801ea08:	f007 fbca 	bl	80261a0 <uxr_update_output_stream_heartbeat_timestamp>
 801ea0c:	eb08 0304 	add.w	r3, r8, r4
 801ea10:	2800      	cmp	r0, #0
 801ea12:	d0db      	beq.n	801e9cc <listen_message_reliably+0x34>
 801ea14:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 801ea18:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 801ea1c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801ea20:	4640      	mov	r0, r8
 801ea22:	3501      	adds	r5, #1
 801ea24:	4444      	add	r4, r8
 801ea26:	9304      	str	r3, [sp, #16]
 801ea28:	f000 fcae 	bl	801f388 <uxr_session_header_offset>
 801ea2c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801ea30:	2300      	movs	r3, #0
 801ea32:	2211      	movs	r2, #17
 801ea34:	a90c      	add	r1, sp, #48	@ 0x30
 801ea36:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 801ea3a:	9000      	str	r0, [sp, #0]
 801ea3c:	4650      	mov	r0, sl
 801ea3e:	3601      	adds	r6, #1
 801ea40:	f7fb ff88 	bl	801a954 <ucdr_init_buffer_origin_offset>
 801ea44:	2300      	movs	r3, #0
 801ea46:	2205      	movs	r2, #5
 801ea48:	210b      	movs	r1, #11
 801ea4a:	4650      	mov	r0, sl
 801ea4c:	f000 fe14 	bl	801f678 <uxr_buffer_submessage_header>
 801ea50:	2101      	movs	r1, #1
 801ea52:	8968      	ldrh	r0, [r5, #10]
 801ea54:	f007 fd98 	bl	8026588 <uxr_seq_num_add>
 801ea58:	892b      	ldrh	r3, [r5, #8]
 801ea5a:	4602      	mov	r2, r0
 801ea5c:	a90a      	add	r1, sp, #40	@ 0x28
 801ea5e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801ea62:	4650      	mov	r0, sl
 801ea64:	9b04      	ldr	r3, [sp, #16]
 801ea66:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801ea6a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801ea6e:	f001 ffe9 	bl	8020a44 <uxr_serialize_HEARTBEAT_Payload>
 801ea72:	2200      	movs	r2, #0
 801ea74:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ea76:	4640      	mov	r0, r8
 801ea78:	4611      	mov	r1, r2
 801ea7a:	f000 fc31 	bl	801f2e0 <uxr_stamp_session_header>
 801ea7e:	4650      	mov	r0, sl
 801ea80:	f7fb ffa8 	bl	801a9d4 <ucdr_buffer_length>
 801ea84:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 801ea88:	4602      	mov	r2, r0
 801ea8a:	a90c      	add	r1, sp, #48	@ 0x30
 801ea8c:	e9d3 0500 	ldrd	r0, r5, [r3]
 801ea90:	47a8      	blx	r5
 801ea92:	9903      	ldr	r1, [sp, #12]
 801ea94:	b2f0      	uxtb	r0, r6
 801ea96:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 801ea9a:	455a      	cmp	r2, fp
 801ea9c:	eb73 0101 	sbcs.w	r1, r3, r1
 801eaa0:	db9d      	blt.n	801e9de <listen_message_reliably+0x46>
 801eaa2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801eaa6:	4283      	cmp	r3, r0
 801eaa8:	d89f      	bhi.n	801e9ea <listen_message_reliably+0x52>
 801eaaa:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801eaae:	9a03      	ldr	r2, [sp, #12]
 801eab0:	429a      	cmp	r2, r3
 801eab2:	bf08      	it	eq
 801eab4:	f1bb 3fff 	cmpeq.w	fp, #4294967295
 801eab8:	d019      	beq.n	801eaee <listen_message_reliably+0x156>
 801eaba:	ebab 0309 	sub.w	r3, fp, r9
 801eabe:	2b00      	cmp	r3, #0
 801eac0:	9d05      	ldr	r5, [sp, #20]
 801eac2:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 801eac6:	aa08      	add	r2, sp, #32
 801eac8:	bf08      	it	eq
 801eaca:	2301      	moveq	r3, #1
 801eacc:	a907      	add	r1, sp, #28
 801eace:	6884      	ldr	r4, [r0, #8]
 801ead0:	429d      	cmp	r5, r3
 801ead2:	6800      	ldr	r0, [r0, #0]
 801ead4:	bfa8      	it	ge
 801ead6:	461d      	movge	r5, r3
 801ead8:	462b      	mov	r3, r5
 801eada:	47a0      	blx	r4
 801eadc:	b948      	cbnz	r0, 801eaf2 <listen_message_reliably+0x15a>
 801eade:	9b05      	ldr	r3, [sp, #20]
 801eae0:	1b5b      	subs	r3, r3, r5
 801eae2:	2b00      	cmp	r3, #0
 801eae4:	9305      	str	r3, [sp, #20]
 801eae6:	f73f af60 	bgt.w	801e9aa <listen_message_reliably+0x12>
 801eaea:	4604      	mov	r4, r0
 801eaec:	e012      	b.n	801eb14 <listen_message_reliably+0x17c>
 801eaee:	9b05      	ldr	r3, [sp, #20]
 801eaf0:	e7e5      	b.n	801eabe <listen_message_reliably+0x126>
 801eaf2:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801eaf6:	4604      	mov	r4, r0
 801eaf8:	2500      	movs	r5, #0
 801eafa:	a80c      	add	r0, sp, #48	@ 0x30
 801eafc:	f7fb ff3c 	bl	801a978 <ucdr_init_buffer>
 801eb00:	f10d 031a 	add.w	r3, sp, #26
 801eb04:	aa06      	add	r2, sp, #24
 801eb06:	a90c      	add	r1, sp, #48	@ 0x30
 801eb08:	4640      	mov	r0, r8
 801eb0a:	f88d 5018 	strb.w	r5, [sp, #24]
 801eb0e:	f000 fbfb 	bl	801f308 <uxr_read_session_header>
 801eb12:	b918      	cbnz	r0, 801eb1c <listen_message_reliably+0x184>
 801eb14:	4620      	mov	r0, r4
 801eb16:	b01d      	add	sp, #116	@ 0x74
 801eb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb1c:	4629      	mov	r1, r5
 801eb1e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801eb22:	f000 fc99 	bl	801f458 <uxr_stream_id_from_raw>
 801eb26:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801eb2a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 801eb2e:	f3c0 2507 	ubfx	r5, r0, #8, #8
 801eb32:	2e01      	cmp	r6, #1
 801eb34:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801eb38:	d04b      	beq.n	801ebd2 <listen_message_reliably+0x23a>
 801eb3a:	2e02      	cmp	r6, #2
 801eb3c:	d00f      	beq.n	801eb5e <listen_message_reliably+0x1c6>
 801eb3e:	2e00      	cmp	r6, #0
 801eb40:	d1e8      	bne.n	801eb14 <listen_message_reliably+0x17c>
 801eb42:	4631      	mov	r1, r6
 801eb44:	4630      	mov	r0, r6
 801eb46:	f000 fc87 	bl	801f458 <uxr_stream_id_from_raw>
 801eb4a:	4602      	mov	r2, r0
 801eb4c:	a90c      	add	r1, sp, #48	@ 0x30
 801eb4e:	4640      	mov	r0, r8
 801eb50:	920a      	str	r2, [sp, #40]	@ 0x28
 801eb52:	f7ff fd97 	bl	801e684 <read_submessage_list>
 801eb56:	4620      	mov	r0, r4
 801eb58:	b01d      	add	sp, #116	@ 0x74
 801eb5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb5e:	4629      	mov	r1, r5
 801eb60:	f108 0008 	add.w	r0, r8, #8
 801eb64:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 801eb68:	f000 fd64 	bl	801f634 <uxr_get_input_reliable_stream>
 801eb6c:	4607      	mov	r7, r0
 801eb6e:	b338      	cbz	r0, 801ebc0 <listen_message_reliably+0x228>
 801eb70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801eb72:	a80c      	add	r0, sp, #48	@ 0x30
 801eb74:	9203      	str	r2, [sp, #12]
 801eb76:	f7fb ff31 	bl	801a9dc <ucdr_buffer_remaining>
 801eb7a:	4603      	mov	r3, r0
 801eb7c:	f10d 0019 	add.w	r0, sp, #25
 801eb80:	9a03      	ldr	r2, [sp, #12]
 801eb82:	4651      	mov	r1, sl
 801eb84:	9000      	str	r0, [sp, #0]
 801eb86:	4638      	mov	r0, r7
 801eb88:	f006 ff14 	bl	80259b4 <uxr_receive_reliable_message>
 801eb8c:	b1c0      	cbz	r0, 801ebc0 <listen_message_reliably+0x228>
 801eb8e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801eb92:	b393      	cbz	r3, 801ebfa <listen_message_reliably+0x262>
 801eb94:	ae14      	add	r6, sp, #80	@ 0x50
 801eb96:	f04f 0a02 	mov.w	sl, #2
 801eb9a:	e00a      	b.n	801ebb2 <listen_message_reliably+0x21a>
 801eb9c:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 801eba0:	4631      	mov	r1, r6
 801eba2:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 801eba6:	4640      	mov	r0, r8
 801eba8:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 801ebac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ebae:	f7ff fd69 	bl	801e684 <read_submessage_list>
 801ebb2:	2204      	movs	r2, #4
 801ebb4:	4631      	mov	r1, r6
 801ebb6:	4638      	mov	r0, r7
 801ebb8:	f006 ff7e 	bl	8025ab8 <uxr_next_input_reliable_buffer_available>
 801ebbc:	2800      	cmp	r0, #0
 801ebbe:	d1ed      	bne.n	801eb9c <listen_message_reliably+0x204>
 801ebc0:	4640      	mov	r0, r8
 801ebc2:	462a      	mov	r2, r5
 801ebc4:	4649      	mov	r1, r9
 801ebc6:	f7ff fbd7 	bl	801e378 <write_submessage_acknack.isra.0>
 801ebca:	4620      	mov	r0, r4
 801ebcc:	b01d      	add	sp, #116	@ 0x74
 801ebce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ebd2:	4629      	mov	r1, r5
 801ebd4:	f108 0008 	add.w	r0, r8, #8
 801ebd8:	f000 fd22 	bl	801f620 <uxr_get_input_best_effort_stream>
 801ebdc:	2800      	cmp	r0, #0
 801ebde:	d099      	beq.n	801eb14 <listen_message_reliably+0x17c>
 801ebe0:	4651      	mov	r1, sl
 801ebe2:	f006 fe5d 	bl	80258a0 <uxr_receive_best_effort_message>
 801ebe6:	2800      	cmp	r0, #0
 801ebe8:	d094      	beq.n	801eb14 <listen_message_reliably+0x17c>
 801ebea:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801ebee:	a90c      	add	r1, sp, #48	@ 0x30
 801ebf0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ebf2:	4640      	mov	r0, r8
 801ebf4:	f7ff fd46 	bl	801e684 <read_submessage_list>
 801ebf8:	e78c      	b.n	801eb14 <listen_message_reliably+0x17c>
 801ebfa:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801ebfe:	a90c      	add	r1, sp, #48	@ 0x30
 801ec00:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ec02:	4640      	mov	r0, r8
 801ec04:	f7ff fd3e 	bl	801e684 <read_submessage_list>
 801ec08:	e7c4      	b.n	801eb94 <listen_message_reliably+0x1fc>
 801ec0a:	bf00      	nop

0801ec0c <uxr_run_session_timeout>:
 801ec0c:	b570      	push	{r4, r5, r6, lr}
 801ec0e:	4604      	mov	r4, r0
 801ec10:	460d      	mov	r5, r1
 801ec12:	f000 fd77 	bl	801f704 <uxr_millis>
 801ec16:	4606      	mov	r6, r0
 801ec18:	4620      	mov	r0, r4
 801ec1a:	f7ff fc77 	bl	801e50c <uxr_flash_output_streams>
 801ec1e:	4629      	mov	r1, r5
 801ec20:	4620      	mov	r0, r4
 801ec22:	f7ff feb9 	bl	801e998 <listen_message_reliably>
 801ec26:	f000 fd6d 	bl	801f704 <uxr_millis>
 801ec2a:	1b83      	subs	r3, r0, r6
 801ec2c:	1ae9      	subs	r1, r5, r3
 801ec2e:	2900      	cmp	r1, #0
 801ec30:	dcf6      	bgt.n	801ec20 <uxr_run_session_timeout+0x14>
 801ec32:	f104 0008 	add.w	r0, r4, #8
 801ec36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ec3a:	f000 bd07 	b.w	801f64c <uxr_output_streams_confirmed>
 801ec3e:	bf00      	nop

0801ec40 <uxr_run_session_until_data>:
 801ec40:	b570      	push	{r4, r5, r6, lr}
 801ec42:	4604      	mov	r4, r0
 801ec44:	460d      	mov	r5, r1
 801ec46:	f000 fd5d 	bl	801f704 <uxr_millis>
 801ec4a:	4606      	mov	r6, r0
 801ec4c:	4620      	mov	r0, r4
 801ec4e:	f7ff fc5d 	bl	801e50c <uxr_flash_output_streams>
 801ec52:	2300      	movs	r3, #0
 801ec54:	4629      	mov	r1, r5
 801ec56:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 801ec5a:	e005      	b.n	801ec68 <uxr_run_session_until_data+0x28>
 801ec5c:	f000 fd52 	bl	801f704 <uxr_millis>
 801ec60:	1b83      	subs	r3, r0, r6
 801ec62:	1ae9      	subs	r1, r5, r3
 801ec64:	2900      	cmp	r1, #0
 801ec66:	dd07      	ble.n	801ec78 <uxr_run_session_until_data+0x38>
 801ec68:	4620      	mov	r0, r4
 801ec6a:	f7ff fe95 	bl	801e998 <listen_message_reliably>
 801ec6e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801ec72:	2800      	cmp	r0, #0
 801ec74:	d0f2      	beq.n	801ec5c <uxr_run_session_until_data+0x1c>
 801ec76:	bd70      	pop	{r4, r5, r6, pc}
 801ec78:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801ec7c:	bd70      	pop	{r4, r5, r6, pc}
 801ec7e:	bf00      	nop

0801ec80 <uxr_run_session_until_confirm_delivery>:
 801ec80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec84:	4606      	mov	r6, r0
 801ec86:	460d      	mov	r5, r1
 801ec88:	f000 fd3c 	bl	801f704 <uxr_millis>
 801ec8c:	4607      	mov	r7, r0
 801ec8e:	4630      	mov	r0, r6
 801ec90:	f106 0808 	add.w	r8, r6, #8
 801ec94:	f7ff fc3a 	bl	801e50c <uxr_flash_output_streams>
 801ec98:	2d00      	cmp	r5, #0
 801ec9a:	db10      	blt.n	801ecbe <uxr_run_session_until_confirm_delivery+0x3e>
 801ec9c:	462c      	mov	r4, r5
 801ec9e:	e006      	b.n	801ecae <uxr_run_session_until_confirm_delivery+0x2e>
 801eca0:	f7ff fe7a 	bl	801e998 <listen_message_reliably>
 801eca4:	f000 fd2e 	bl	801f704 <uxr_millis>
 801eca8:	1bc3      	subs	r3, r0, r7
 801ecaa:	1aec      	subs	r4, r5, r3
 801ecac:	d407      	bmi.n	801ecbe <uxr_run_session_until_confirm_delivery+0x3e>
 801ecae:	4640      	mov	r0, r8
 801ecb0:	f000 fccc 	bl	801f64c <uxr_output_streams_confirmed>
 801ecb4:	4603      	mov	r3, r0
 801ecb6:	4621      	mov	r1, r4
 801ecb8:	4630      	mov	r0, r6
 801ecba:	2b00      	cmp	r3, #0
 801ecbc:	d0f0      	beq.n	801eca0 <uxr_run_session_until_confirm_delivery+0x20>
 801ecbe:	4640      	mov	r0, r8
 801ecc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ecc4:	f000 bcc2 	b.w	801f64c <uxr_output_streams_confirmed>

0801ecc8 <uxr_run_session_until_all_status>:
 801ecc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eccc:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 801ecd0:	4606      	mov	r6, r0
 801ecd2:	4688      	mov	r8, r1
 801ecd4:	4692      	mov	sl, r2
 801ecd6:	461f      	mov	r7, r3
 801ecd8:	f7ff fc18 	bl	801e50c <uxr_flash_output_streams>
 801ecdc:	f1bb 0f00 	cmp.w	fp, #0
 801ece0:	d004      	beq.n	801ecec <uxr_run_session_until_all_status+0x24>
 801ece2:	465a      	mov	r2, fp
 801ece4:	21ff      	movs	r1, #255	@ 0xff
 801ece6:	4638      	mov	r0, r7
 801ece8:	f009 faaa 	bl	8028240 <memset>
 801ecec:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 801ecf0:	1e7d      	subs	r5, r7, #1
 801ecf2:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 801ecf6:	f000 fd05 	bl	801f704 <uxr_millis>
 801ecfa:	4641      	mov	r1, r8
 801ecfc:	4681      	mov	r9, r0
 801ecfe:	4630      	mov	r0, r6
 801ed00:	f7ff fe4a 	bl	801e998 <listen_message_reliably>
 801ed04:	f000 fcfe 	bl	801f704 <uxr_millis>
 801ed08:	eba0 0009 	sub.w	r0, r0, r9
 801ed0c:	eba8 0100 	sub.w	r1, r8, r0
 801ed10:	f1bb 0f00 	cmp.w	fp, #0
 801ed14:	d029      	beq.n	801ed6a <uxr_run_session_until_all_status+0xa2>
 801ed16:	46ae      	mov	lr, r5
 801ed18:	f04f 0c00 	mov.w	ip, #0
 801ed1c:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 801ed20:	2cff      	cmp	r4, #255	@ 0xff
 801ed22:	d015      	beq.n	801ed50 <uxr_run_session_until_all_status+0x88>
 801ed24:	f10c 0c01 	add.w	ip, ip, #1
 801ed28:	45e3      	cmp	fp, ip
 801ed2a:	d8f7      	bhi.n	801ed1c <uxr_run_session_until_all_status+0x54>
 801ed2c:	2300      	movs	r3, #0
 801ed2e:	67f3      	str	r3, [r6, #124]	@ 0x7c
 801ed30:	e000      	b.n	801ed34 <uxr_run_session_until_all_status+0x6c>
 801ed32:	b158      	cbz	r0, 801ed4c <uxr_run_session_until_all_status+0x84>
 801ed34:	462b      	mov	r3, r5
 801ed36:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 801ed3a:	3302      	adds	r3, #2
 801ed3c:	2801      	cmp	r0, #1
 801ed3e:	eba3 0307 	sub.w	r3, r3, r7
 801ed42:	bf8c      	ite	hi
 801ed44:	2000      	movhi	r0, #0
 801ed46:	2001      	movls	r0, #1
 801ed48:	459b      	cmp	fp, r3
 801ed4a:	d8f2      	bhi.n	801ed32 <uxr_run_session_until_all_status+0x6a>
 801ed4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed50:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 801ed54:	f10c 0c01 	add.w	ip, ip, #1
 801ed58:	45dc      	cmp	ip, fp
 801ed5a:	d201      	bcs.n	801ed60 <uxr_run_session_until_all_status+0x98>
 801ed5c:	2b00      	cmp	r3, #0
 801ed5e:	d0dd      	beq.n	801ed1c <uxr_run_session_until_all_status+0x54>
 801ed60:	2900      	cmp	r1, #0
 801ed62:	dde3      	ble.n	801ed2c <uxr_run_session_until_all_status+0x64>
 801ed64:	2b00      	cmp	r3, #0
 801ed66:	d1ca      	bne.n	801ecfe <uxr_run_session_until_all_status+0x36>
 801ed68:	e7e0      	b.n	801ed2c <uxr_run_session_until_all_status+0x64>
 801ed6a:	2001      	movs	r0, #1
 801ed6c:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 801ed70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ed74 <wait_session_status>:
 801ed74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed78:	4604      	mov	r4, r0
 801ed7a:	b09d      	sub	sp, #116	@ 0x74
 801ed7c:	20ff      	movs	r0, #255	@ 0xff
 801ed7e:	9303      	str	r3, [sp, #12]
 801ed80:	7160      	strb	r0, [r4, #5]
 801ed82:	2b00      	cmp	r3, #0
 801ed84:	f000 80b6 	beq.w	801eef4 <wait_session_status+0x180>
 801ed88:	4689      	mov	r9, r1
 801ed8a:	4692      	mov	sl, r2
 801ed8c:	f04f 0b00 	mov.w	fp, #0
 801ed90:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801ed92:	4652      	mov	r2, sl
 801ed94:	4649      	mov	r1, r9
 801ed96:	e9d3 0500 	ldrd	r0, r5, [r3]
 801ed9a:	47a8      	blx	r5
 801ed9c:	f000 fcb2 	bl	801f704 <uxr_millis>
 801eda0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801eda4:	4605      	mov	r5, r0
 801eda6:	e009      	b.n	801edbc <wait_session_status+0x48>
 801eda8:	f000 fcac 	bl	801f704 <uxr_millis>
 801edac:	1b40      	subs	r0, r0, r5
 801edae:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801edb2:	2b00      	cmp	r3, #0
 801edb4:	dd40      	ble.n	801ee38 <wait_session_status+0xc4>
 801edb6:	7960      	ldrb	r0, [r4, #5]
 801edb8:	28ff      	cmp	r0, #255	@ 0xff
 801edba:	d145      	bne.n	801ee48 <wait_session_status+0xd4>
 801edbc:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801edbe:	a908      	add	r1, sp, #32
 801edc0:	6896      	ldr	r6, [r2, #8]
 801edc2:	6810      	ldr	r0, [r2, #0]
 801edc4:	aa09      	add	r2, sp, #36	@ 0x24
 801edc6:	47b0      	blx	r6
 801edc8:	2800      	cmp	r0, #0
 801edca:	d0ed      	beq.n	801eda8 <wait_session_status+0x34>
 801edcc:	a80c      	add	r0, sp, #48	@ 0x30
 801edce:	2600      	movs	r6, #0
 801edd0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801edd4:	f7fb fdd0 	bl	801a978 <ucdr_init_buffer>
 801edd8:	f10d 031e 	add.w	r3, sp, #30
 801eddc:	aa07      	add	r2, sp, #28
 801edde:	a90c      	add	r1, sp, #48	@ 0x30
 801ede0:	4620      	mov	r0, r4
 801ede2:	f88d 601c 	strb.w	r6, [sp, #28]
 801ede6:	f000 fa8f 	bl	801f308 <uxr_read_session_header>
 801edea:	2800      	cmp	r0, #0
 801edec:	d0dc      	beq.n	801eda8 <wait_session_status+0x34>
 801edee:	4631      	mov	r1, r6
 801edf0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801edf4:	f000 fb30 	bl	801f458 <uxr_stream_id_from_raw>
 801edf8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801edfc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801ee00:	f3c0 2607 	ubfx	r6, r0, #8, #8
 801ee04:	2f01      	cmp	r7, #1
 801ee06:	9302      	str	r3, [sp, #8]
 801ee08:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 801ee0c:	d05c      	beq.n	801eec8 <wait_session_status+0x154>
 801ee0e:	2f02      	cmp	r7, #2
 801ee10:	d020      	beq.n	801ee54 <wait_session_status+0xe0>
 801ee12:	2f00      	cmp	r7, #0
 801ee14:	d1c8      	bne.n	801eda8 <wait_session_status+0x34>
 801ee16:	4639      	mov	r1, r7
 801ee18:	4638      	mov	r0, r7
 801ee1a:	f000 fb1d 	bl	801f458 <uxr_stream_id_from_raw>
 801ee1e:	a90c      	add	r1, sp, #48	@ 0x30
 801ee20:	4602      	mov	r2, r0
 801ee22:	900b      	str	r0, [sp, #44]	@ 0x2c
 801ee24:	4620      	mov	r0, r4
 801ee26:	f7ff fc2d 	bl	801e684 <read_submessage_list>
 801ee2a:	f000 fc6b 	bl	801f704 <uxr_millis>
 801ee2e:	1b40      	subs	r0, r0, r5
 801ee30:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801ee34:	2b00      	cmp	r3, #0
 801ee36:	dcbe      	bgt.n	801edb6 <wait_session_status+0x42>
 801ee38:	f10b 0b01 	add.w	fp, fp, #1
 801ee3c:	9b03      	ldr	r3, [sp, #12]
 801ee3e:	7960      	ldrb	r0, [r4, #5]
 801ee40:	455b      	cmp	r3, fp
 801ee42:	d001      	beq.n	801ee48 <wait_session_status+0xd4>
 801ee44:	28ff      	cmp	r0, #255	@ 0xff
 801ee46:	d0a3      	beq.n	801ed90 <wait_session_status+0x1c>
 801ee48:	38ff      	subs	r0, #255	@ 0xff
 801ee4a:	bf18      	it	ne
 801ee4c:	2001      	movne	r0, #1
 801ee4e:	b01d      	add	sp, #116	@ 0x74
 801ee50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee54:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 801ee58:	4631      	mov	r1, r6
 801ee5a:	f104 0008 	add.w	r0, r4, #8
 801ee5e:	9304      	str	r3, [sp, #16]
 801ee60:	f000 fbe8 	bl	801f634 <uxr_get_input_reliable_stream>
 801ee64:	4680      	mov	r8, r0
 801ee66:	b348      	cbz	r0, 801eebc <wait_session_status+0x148>
 801ee68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ee6a:	a80c      	add	r0, sp, #48	@ 0x30
 801ee6c:	9205      	str	r2, [sp, #20]
 801ee6e:	f7fb fdb5 	bl	801a9dc <ucdr_buffer_remaining>
 801ee72:	4603      	mov	r3, r0
 801ee74:	f10d 001d 	add.w	r0, sp, #29
 801ee78:	9a05      	ldr	r2, [sp, #20]
 801ee7a:	9000      	str	r0, [sp, #0]
 801ee7c:	4640      	mov	r0, r8
 801ee7e:	9902      	ldr	r1, [sp, #8]
 801ee80:	f006 fd98 	bl	80259b4 <uxr_receive_reliable_message>
 801ee84:	b1d0      	cbz	r0, 801eebc <wait_session_status+0x148>
 801ee86:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801ee8a:	2b00      	cmp	r3, #0
 801ee8c:	d03a      	beq.n	801ef04 <wait_session_status+0x190>
 801ee8e:	9f04      	ldr	r7, [sp, #16]
 801ee90:	e00a      	b.n	801eea8 <wait_session_status+0x134>
 801ee92:	f04f 0302 	mov.w	r3, #2
 801ee96:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 801ee9a:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801ee9e:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 801eea2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801eea4:	f7ff fbee 	bl	801e684 <read_submessage_list>
 801eea8:	a914      	add	r1, sp, #80	@ 0x50
 801eeaa:	2204      	movs	r2, #4
 801eeac:	4640      	mov	r0, r8
 801eeae:	f006 fe03 	bl	8025ab8 <uxr_next_input_reliable_buffer_available>
 801eeb2:	4603      	mov	r3, r0
 801eeb4:	a914      	add	r1, sp, #80	@ 0x50
 801eeb6:	4620      	mov	r0, r4
 801eeb8:	2b00      	cmp	r3, #0
 801eeba:	d1ea      	bne.n	801ee92 <wait_session_status+0x11e>
 801eebc:	4632      	mov	r2, r6
 801eebe:	9904      	ldr	r1, [sp, #16]
 801eec0:	4620      	mov	r0, r4
 801eec2:	f7ff fa59 	bl	801e378 <write_submessage_acknack.isra.0>
 801eec6:	e76f      	b.n	801eda8 <wait_session_status+0x34>
 801eec8:	4631      	mov	r1, r6
 801eeca:	f104 0008 	add.w	r0, r4, #8
 801eece:	f000 fba7 	bl	801f620 <uxr_get_input_best_effort_stream>
 801eed2:	2800      	cmp	r0, #0
 801eed4:	f43f af68 	beq.w	801eda8 <wait_session_status+0x34>
 801eed8:	9902      	ldr	r1, [sp, #8]
 801eeda:	f006 fce1 	bl	80258a0 <uxr_receive_best_effort_message>
 801eede:	2800      	cmp	r0, #0
 801eee0:	f43f af62 	beq.w	801eda8 <wait_session_status+0x34>
 801eee4:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801eee8:	a90c      	add	r1, sp, #48	@ 0x30
 801eeea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801eeec:	4620      	mov	r0, r4
 801eeee:	f7ff fbc9 	bl	801e684 <read_submessage_list>
 801eef2:	e759      	b.n	801eda8 <wait_session_status+0x34>
 801eef4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801eef6:	e9d3 0400 	ldrd	r0, r4, [r3]
 801eefa:	47a0      	blx	r4
 801eefc:	2001      	movs	r0, #1
 801eefe:	b01d      	add	sp, #116	@ 0x74
 801ef00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef04:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801ef08:	a90c      	add	r1, sp, #48	@ 0x30
 801ef0a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801ef0c:	4620      	mov	r0, r4
 801ef0e:	f7ff fbb9 	bl	801e684 <read_submessage_list>
 801ef12:	e7bc      	b.n	801ee8e <wait_session_status+0x11a>

0801ef14 <uxr_delete_session_retries>:
 801ef14:	b530      	push	{r4, r5, lr}
 801ef16:	b08f      	sub	sp, #60	@ 0x3c
 801ef18:	4604      	mov	r4, r0
 801ef1a:	460d      	mov	r5, r1
 801ef1c:	f000 fa34 	bl	801f388 <uxr_session_header_offset>
 801ef20:	2300      	movs	r3, #0
 801ef22:	2210      	movs	r2, #16
 801ef24:	a902      	add	r1, sp, #8
 801ef26:	9000      	str	r0, [sp, #0]
 801ef28:	a806      	add	r0, sp, #24
 801ef2a:	f7fb fd13 	bl	801a954 <ucdr_init_buffer_origin_offset>
 801ef2e:	a906      	add	r1, sp, #24
 801ef30:	4620      	mov	r0, r4
 801ef32:	f000 f979 	bl	801f228 <uxr_buffer_delete_session>
 801ef36:	2200      	movs	r2, #0
 801ef38:	9b06      	ldr	r3, [sp, #24]
 801ef3a:	4620      	mov	r0, r4
 801ef3c:	4611      	mov	r1, r2
 801ef3e:	f000 f9cf 	bl	801f2e0 <uxr_stamp_session_header>
 801ef42:	a806      	add	r0, sp, #24
 801ef44:	f7fb fd46 	bl	801a9d4 <ucdr_buffer_length>
 801ef48:	462b      	mov	r3, r5
 801ef4a:	4602      	mov	r2, r0
 801ef4c:	a902      	add	r1, sp, #8
 801ef4e:	4620      	mov	r0, r4
 801ef50:	f7ff ff10 	bl	801ed74 <wait_session_status>
 801ef54:	b118      	cbz	r0, 801ef5e <uxr_delete_session_retries+0x4a>
 801ef56:	7960      	ldrb	r0, [r4, #5]
 801ef58:	fab0 f080 	clz	r0, r0
 801ef5c:	0940      	lsrs	r0, r0, #5
 801ef5e:	b00f      	add	sp, #60	@ 0x3c
 801ef60:	bd30      	pop	{r4, r5, pc}
 801ef62:	bf00      	nop

0801ef64 <uxr_create_session>:
 801ef64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef68:	f100 0b08 	add.w	fp, r0, #8
 801ef6c:	4604      	mov	r4, r0
 801ef6e:	b0ab      	sub	sp, #172	@ 0xac
 801ef70:	4658      	mov	r0, fp
 801ef72:	465e      	mov	r6, fp
 801ef74:	f000 faa6 	bl	801f4c4 <uxr_reset_stream_storage>
 801ef78:	4620      	mov	r0, r4
 801ef7a:	f000 fa05 	bl	801f388 <uxr_session_header_offset>
 801ef7e:	2300      	movs	r3, #0
 801ef80:	221c      	movs	r2, #28
 801ef82:	a90b      	add	r1, sp, #44	@ 0x2c
 801ef84:	9000      	str	r0, [sp, #0]
 801ef86:	a812      	add	r0, sp, #72	@ 0x48
 801ef88:	f7fb fce4 	bl	801a954 <ucdr_init_buffer_origin_offset>
 801ef8c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801ef8e:	a912      	add	r1, sp, #72	@ 0x48
 801ef90:	4620      	mov	r0, r4
 801ef92:	8a1a      	ldrh	r2, [r3, #16]
 801ef94:	3a04      	subs	r2, #4
 801ef96:	b292      	uxth	r2, r2
 801ef98:	f000 f91c 	bl	801f1d4 <uxr_buffer_create_session>
 801ef9c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801ef9e:	4620      	mov	r0, r4
 801efa0:	f000 f98a 	bl	801f2b8 <uxr_stamp_create_session_header>
 801efa4:	a812      	add	r0, sp, #72	@ 0x48
 801efa6:	f7fb fd15 	bl	801a9d4 <ucdr_buffer_length>
 801efaa:	23ff      	movs	r3, #255	@ 0xff
 801efac:	4681      	mov	r9, r0
 801efae:	7163      	strb	r3, [r4, #5]
 801efb0:	230a      	movs	r3, #10
 801efb2:	9303      	str	r3, [sp, #12]
 801efb4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801efb6:	464a      	mov	r2, r9
 801efb8:	a90b      	add	r1, sp, #44	@ 0x2c
 801efba:	e9d3 0500 	ldrd	r0, r5, [r3]
 801efbe:	47a8      	blx	r5
 801efc0:	f000 fba0 	bl	801f704 <uxr_millis>
 801efc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801efc8:	4605      	mov	r5, r0
 801efca:	e009      	b.n	801efe0 <uxr_create_session+0x7c>
 801efcc:	f000 fb9a 	bl	801f704 <uxr_millis>
 801efd0:	1b40      	subs	r0, r0, r5
 801efd2:	7962      	ldrb	r2, [r4, #5]
 801efd4:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801efd8:	2b00      	cmp	r3, #0
 801efda:	dd38      	ble.n	801f04e <uxr_create_session+0xea>
 801efdc:	2aff      	cmp	r2, #255	@ 0xff
 801efde:	d13c      	bne.n	801f05a <uxr_create_session+0xf6>
 801efe0:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801efe2:	a907      	add	r1, sp, #28
 801efe4:	6897      	ldr	r7, [r2, #8]
 801efe6:	6810      	ldr	r0, [r2, #0]
 801efe8:	aa08      	add	r2, sp, #32
 801efea:	47b8      	blx	r7
 801efec:	2800      	cmp	r0, #0
 801efee:	d0ed      	beq.n	801efcc <uxr_create_session+0x68>
 801eff0:	a81a      	add	r0, sp, #104	@ 0x68
 801eff2:	2700      	movs	r7, #0
 801eff4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801eff8:	f7fb fcbe 	bl	801a978 <ucdr_init_buffer>
 801effc:	f10d 031a 	add.w	r3, sp, #26
 801f000:	aa06      	add	r2, sp, #24
 801f002:	a91a      	add	r1, sp, #104	@ 0x68
 801f004:	4620      	mov	r0, r4
 801f006:	f88d 7018 	strb.w	r7, [sp, #24]
 801f00a:	f000 f97d 	bl	801f308 <uxr_read_session_header>
 801f00e:	2800      	cmp	r0, #0
 801f010:	d0dc      	beq.n	801efcc <uxr_create_session+0x68>
 801f012:	4639      	mov	r1, r7
 801f014:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801f018:	f000 fa1e 	bl	801f458 <uxr_stream_id_from_raw>
 801f01c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801f020:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 801f024:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801f028:	2f01      	cmp	r7, #1
 801f02a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801f02e:	d053      	beq.n	801f0d8 <uxr_create_session+0x174>
 801f030:	2f02      	cmp	r7, #2
 801f032:	d018      	beq.n	801f066 <uxr_create_session+0x102>
 801f034:	2f00      	cmp	r7, #0
 801f036:	d1c9      	bne.n	801efcc <uxr_create_session+0x68>
 801f038:	4639      	mov	r1, r7
 801f03a:	4638      	mov	r0, r7
 801f03c:	f000 fa0c 	bl	801f458 <uxr_stream_id_from_raw>
 801f040:	a91a      	add	r1, sp, #104	@ 0x68
 801f042:	4602      	mov	r2, r0
 801f044:	900a      	str	r0, [sp, #40]	@ 0x28
 801f046:	4620      	mov	r0, r4
 801f048:	f7ff fb1c 	bl	801e684 <read_submessage_list>
 801f04c:	e7be      	b.n	801efcc <uxr_create_session+0x68>
 801f04e:	9b03      	ldr	r3, [sp, #12]
 801f050:	3b01      	subs	r3, #1
 801f052:	9303      	str	r3, [sp, #12]
 801f054:	d001      	beq.n	801f05a <uxr_create_session+0xf6>
 801f056:	2aff      	cmp	r2, #255	@ 0xff
 801f058:	d0ac      	beq.n	801efb4 <uxr_create_session+0x50>
 801f05a:	2a00      	cmp	r2, #0
 801f05c:	d051      	beq.n	801f102 <uxr_create_session+0x19e>
 801f05e:	2000      	movs	r0, #0
 801f060:	b02b      	add	sp, #172	@ 0xac
 801f062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f066:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801f06a:	4641      	mov	r1, r8
 801f06c:	4630      	mov	r0, r6
 801f06e:	9304      	str	r3, [sp, #16]
 801f070:	f000 fae0 	bl	801f634 <uxr_get_input_reliable_stream>
 801f074:	4682      	mov	sl, r0
 801f076:	b348      	cbz	r0, 801f0cc <uxr_create_session+0x168>
 801f078:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801f07a:	a81a      	add	r0, sp, #104	@ 0x68
 801f07c:	9205      	str	r2, [sp, #20]
 801f07e:	f7fb fcad 	bl	801a9dc <ucdr_buffer_remaining>
 801f082:	4603      	mov	r3, r0
 801f084:	f10d 0019 	add.w	r0, sp, #25
 801f088:	9a05      	ldr	r2, [sp, #20]
 801f08a:	4659      	mov	r1, fp
 801f08c:	9000      	str	r0, [sp, #0]
 801f08e:	4650      	mov	r0, sl
 801f090:	f006 fc90 	bl	80259b4 <uxr_receive_reliable_message>
 801f094:	b1d0      	cbz	r0, 801f0cc <uxr_create_session+0x168>
 801f096:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801f09a:	2b00      	cmp	r3, #0
 801f09c:	d038      	beq.n	801f110 <uxr_create_session+0x1ac>
 801f09e:	9f04      	ldr	r7, [sp, #16]
 801f0a0:	e00a      	b.n	801f0b8 <uxr_create_session+0x154>
 801f0a2:	f04f 0302 	mov.w	r3, #2
 801f0a6:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 801f0aa:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 801f0ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801f0b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f0b4:	f7ff fae6 	bl	801e684 <read_submessage_list>
 801f0b8:	a922      	add	r1, sp, #136	@ 0x88
 801f0ba:	2204      	movs	r2, #4
 801f0bc:	4650      	mov	r0, sl
 801f0be:	f006 fcfb 	bl	8025ab8 <uxr_next_input_reliable_buffer_available>
 801f0c2:	4603      	mov	r3, r0
 801f0c4:	a922      	add	r1, sp, #136	@ 0x88
 801f0c6:	4620      	mov	r0, r4
 801f0c8:	2b00      	cmp	r3, #0
 801f0ca:	d1ea      	bne.n	801f0a2 <uxr_create_session+0x13e>
 801f0cc:	4642      	mov	r2, r8
 801f0ce:	9904      	ldr	r1, [sp, #16]
 801f0d0:	4620      	mov	r0, r4
 801f0d2:	f7ff f951 	bl	801e378 <write_submessage_acknack.isra.0>
 801f0d6:	e779      	b.n	801efcc <uxr_create_session+0x68>
 801f0d8:	4641      	mov	r1, r8
 801f0da:	4630      	mov	r0, r6
 801f0dc:	f000 faa0 	bl	801f620 <uxr_get_input_best_effort_stream>
 801f0e0:	2800      	cmp	r0, #0
 801f0e2:	f43f af73 	beq.w	801efcc <uxr_create_session+0x68>
 801f0e6:	4659      	mov	r1, fp
 801f0e8:	f006 fbda 	bl	80258a0 <uxr_receive_best_effort_message>
 801f0ec:	2800      	cmp	r0, #0
 801f0ee:	f43f af6d 	beq.w	801efcc <uxr_create_session+0x68>
 801f0f2:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 801f0f6:	a91a      	add	r1, sp, #104	@ 0x68
 801f0f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f0fa:	4620      	mov	r0, r4
 801f0fc:	f7ff fac2 	bl	801e684 <read_submessage_list>
 801f100:	e764      	b.n	801efcc <uxr_create_session+0x68>
 801f102:	4630      	mov	r0, r6
 801f104:	f000 f9de 	bl	801f4c4 <uxr_reset_stream_storage>
 801f108:	2001      	movs	r0, #1
 801f10a:	b02b      	add	sp, #172	@ 0xac
 801f10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f110:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 801f114:	a91a      	add	r1, sp, #104	@ 0x68
 801f116:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f118:	4620      	mov	r0, r4
 801f11a:	f7ff fab3 	bl	801e684 <read_submessage_list>
 801f11e:	e7be      	b.n	801f09e <uxr_create_session+0x13a>

0801f120 <uxr_prepare_stream_to_write_submessage>:
 801f120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f124:	b082      	sub	sp, #8
 801f126:	4604      	mov	r4, r0
 801f128:	4610      	mov	r0, r2
 801f12a:	4615      	mov	r5, r2
 801f12c:	461e      	mov	r6, r3
 801f12e:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 801f132:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 801f136:	f105 0904 	add.w	r9, r5, #4
 801f13a:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801f13e:	9101      	str	r1, [sp, #4]
 801f140:	f000 fada 	bl	801f6f8 <uxr_submessage_padding>
 801f144:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801f148:	4481      	add	r9, r0
 801f14a:	2b01      	cmp	r3, #1
 801f14c:	d01d      	beq.n	801f18a <uxr_prepare_stream_to_write_submessage+0x6a>
 801f14e:	2b02      	cmp	r3, #2
 801f150:	d116      	bne.n	801f180 <uxr_prepare_stream_to_write_submessage+0x60>
 801f152:	f104 0008 	add.w	r0, r4, #8
 801f156:	4651      	mov	r1, sl
 801f158:	f000 fa56 	bl	801f608 <uxr_get_output_reliable_stream>
 801f15c:	4604      	mov	r4, r0
 801f15e:	b158      	cbz	r0, 801f178 <uxr_prepare_stream_to_write_submessage+0x58>
 801f160:	4649      	mov	r1, r9
 801f162:	4632      	mov	r2, r6
 801f164:	f006 fe6e 	bl	8025e44 <uxr_prepare_reliable_buffer_to_write>
 801f168:	4604      	mov	r4, r0
 801f16a:	b12c      	cbz	r4, 801f178 <uxr_prepare_stream_to_write_submessage+0x58>
 801f16c:	4643      	mov	r3, r8
 801f16e:	b2aa      	uxth	r2, r5
 801f170:	4639      	mov	r1, r7
 801f172:	4630      	mov	r0, r6
 801f174:	f000 fa80 	bl	801f678 <uxr_buffer_submessage_header>
 801f178:	4620      	mov	r0, r4
 801f17a:	b002      	add	sp, #8
 801f17c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f180:	2400      	movs	r4, #0
 801f182:	4620      	mov	r0, r4
 801f184:	b002      	add	sp, #8
 801f186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f18a:	f104 0008 	add.w	r0, r4, #8
 801f18e:	4651      	mov	r1, sl
 801f190:	f000 fa32 	bl	801f5f8 <uxr_get_output_best_effort_stream>
 801f194:	4604      	mov	r4, r0
 801f196:	2800      	cmp	r0, #0
 801f198:	d0ee      	beq.n	801f178 <uxr_prepare_stream_to_write_submessage+0x58>
 801f19a:	4649      	mov	r1, r9
 801f19c:	4632      	mov	r2, r6
 801f19e:	f006 fd7b 	bl	8025c98 <uxr_prepare_best_effort_buffer_to_write>
 801f1a2:	4604      	mov	r4, r0
 801f1a4:	e7e1      	b.n	801f16a <uxr_prepare_stream_to_write_submessage+0x4a>
 801f1a6:	bf00      	nop

0801f1a8 <uxr_init_session_info>:
 801f1a8:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801f1ac:	23ff      	movs	r3, #255	@ 0xff
 801f1ae:	7102      	strb	r2, [r0, #4]
 801f1b0:	f880 c001 	strb.w	ip, [r0, #1]
 801f1b4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801f1b8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801f1bc:	7001      	strb	r1, [r0, #0]
 801f1be:	f880 c002 	strb.w	ip, [r0, #2]
 801f1c2:	7143      	strb	r3, [r0, #5]
 801f1c4:	70c2      	strb	r2, [r0, #3]
 801f1c6:	b500      	push	{lr}
 801f1c8:	f04f 0e09 	mov.w	lr, #9
 801f1cc:	f8a0 e006 	strh.w	lr, [r0, #6]
 801f1d0:	f85d fb04 	ldr.w	pc, [sp], #4

0801f1d4 <uxr_buffer_create_session>:
 801f1d4:	b530      	push	{r4, r5, lr}
 801f1d6:	2300      	movs	r3, #0
 801f1d8:	b089      	sub	sp, #36	@ 0x24
 801f1da:	4d12      	ldr	r5, [pc, #72]	@ (801f224 <uxr_buffer_create_session+0x50>)
 801f1dc:	460c      	mov	r4, r1
 801f1de:	9307      	str	r3, [sp, #28]
 801f1e0:	4619      	mov	r1, r3
 801f1e2:	f8ad 201c 	strh.w	r2, [sp, #28]
 801f1e6:	2201      	movs	r2, #1
 801f1e8:	9301      	str	r3, [sp, #4]
 801f1ea:	80c2      	strh	r2, [r0, #6]
 801f1ec:	f88d 2004 	strb.w	r2, [sp, #4]
 801f1f0:	682a      	ldr	r2, [r5, #0]
 801f1f2:	9303      	str	r3, [sp, #12]
 801f1f4:	9200      	str	r2, [sp, #0]
 801f1f6:	88aa      	ldrh	r2, [r5, #4]
 801f1f8:	9306      	str	r3, [sp, #24]
 801f1fa:	f8ad 2006 	strh.w	r2, [sp, #6]
 801f1fe:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801f202:	9202      	str	r2, [sp, #8]
 801f204:	7802      	ldrb	r2, [r0, #0]
 801f206:	4620      	mov	r0, r4
 801f208:	f88d 200c 	strb.w	r2, [sp, #12]
 801f20c:	2210      	movs	r2, #16
 801f20e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801f212:	f000 fa31 	bl	801f678 <uxr_buffer_submessage_header>
 801f216:	4669      	mov	r1, sp
 801f218:	4620      	mov	r0, r4
 801f21a:	f001 fa6f 	bl	80206fc <uxr_serialize_CREATE_CLIENT_Payload>
 801f21e:	b009      	add	sp, #36	@ 0x24
 801f220:	bd30      	pop	{r4, r5, pc}
 801f222:	bf00      	nop
 801f224:	0802ccb8 	.word	0x0802ccb8

0801f228 <uxr_buffer_delete_session>:
 801f228:	4a0c      	ldr	r2, [pc, #48]	@ (801f25c <uxr_buffer_delete_session+0x34>)
 801f22a:	2302      	movs	r3, #2
 801f22c:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 801f230:	b510      	push	{r4, lr}
 801f232:	460c      	mov	r4, r1
 801f234:	b082      	sub	sp, #8
 801f236:	8911      	ldrh	r1, [r2, #8]
 801f238:	2204      	movs	r2, #4
 801f23a:	80c3      	strh	r3, [r0, #6]
 801f23c:	2300      	movs	r3, #0
 801f23e:	f8ad 1006 	strh.w	r1, [sp, #6]
 801f242:	4620      	mov	r0, r4
 801f244:	2103      	movs	r1, #3
 801f246:	f8ad c004 	strh.w	ip, [sp, #4]
 801f24a:	f000 fa15 	bl	801f678 <uxr_buffer_submessage_header>
 801f24e:	a901      	add	r1, sp, #4
 801f250:	4620      	mov	r0, r4
 801f252:	f001 fafb 	bl	802084c <uxr_serialize_DELETE_Payload>
 801f256:	b002      	add	sp, #8
 801f258:	bd10      	pop	{r4, pc}
 801f25a:	bf00      	nop
 801f25c:	0802ccb8 	.word	0x0802ccb8

0801f260 <uxr_read_create_session_status>:
 801f260:	b510      	push	{r4, lr}
 801f262:	460b      	mov	r3, r1
 801f264:	b088      	sub	sp, #32
 801f266:	4604      	mov	r4, r0
 801f268:	a901      	add	r1, sp, #4
 801f26a:	4618      	mov	r0, r3
 801f26c:	f001 fafe 	bl	802086c <uxr_deserialize_STATUS_AGENT_Payload>
 801f270:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801f274:	7163      	strb	r3, [r4, #5]
 801f276:	b008      	add	sp, #32
 801f278:	bd10      	pop	{r4, pc}
 801f27a:	bf00      	nop

0801f27c <uxr_read_delete_session_status>:
 801f27c:	b510      	push	{r4, lr}
 801f27e:	b084      	sub	sp, #16
 801f280:	4604      	mov	r4, r0
 801f282:	4608      	mov	r0, r1
 801f284:	a902      	add	r1, sp, #8
 801f286:	f001 fb21 	bl	80208cc <uxr_deserialize_STATUS_Payload>
 801f28a:	88e3      	ldrh	r3, [r4, #6]
 801f28c:	2b02      	cmp	r3, #2
 801f28e:	d001      	beq.n	801f294 <uxr_read_delete_session_status+0x18>
 801f290:	b004      	add	sp, #16
 801f292:	bd10      	pop	{r4, pc}
 801f294:	f10d 000a 	add.w	r0, sp, #10
 801f298:	f7fe fff4 	bl	801e284 <uxr_object_id_from_raw>
 801f29c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801f2a0:	f89d 3009 	ldrb.w	r3, [sp, #9]
 801f2a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801f2a8:	b29b      	uxth	r3, r3
 801f2aa:	2b02      	cmp	r3, #2
 801f2ac:	d1f0      	bne.n	801f290 <uxr_read_delete_session_status+0x14>
 801f2ae:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801f2b2:	7163      	strb	r3, [r4, #5]
 801f2b4:	e7ec      	b.n	801f290 <uxr_read_delete_session_status+0x14>
 801f2b6:	bf00      	nop

0801f2b8 <uxr_stamp_create_session_header>:
 801f2b8:	b510      	push	{r4, lr}
 801f2ba:	2208      	movs	r2, #8
 801f2bc:	b08a      	sub	sp, #40	@ 0x28
 801f2be:	4604      	mov	r4, r0
 801f2c0:	eb0d 0002 	add.w	r0, sp, r2
 801f2c4:	f7fb fb58 	bl	801a978 <ucdr_init_buffer>
 801f2c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f2cc:	2300      	movs	r3, #0
 801f2ce:	a802      	add	r0, sp, #8
 801f2d0:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801f2d4:	9400      	str	r4, [sp, #0]
 801f2d6:	461a      	mov	r2, r3
 801f2d8:	f000 fbca 	bl	801fa70 <uxr_serialize_message_header>
 801f2dc:	b00a      	add	sp, #40	@ 0x28
 801f2de:	bd10      	pop	{r4, pc}

0801f2e0 <uxr_stamp_session_header>:
 801f2e0:	b530      	push	{r4, r5, lr}
 801f2e2:	b08d      	sub	sp, #52	@ 0x34
 801f2e4:	4604      	mov	r4, r0
 801f2e6:	460d      	mov	r5, r1
 801f2e8:	4619      	mov	r1, r3
 801f2ea:	a804      	add	r0, sp, #16
 801f2ec:	9203      	str	r2, [sp, #12]
 801f2ee:	2208      	movs	r2, #8
 801f2f0:	f7fb fb42 	bl	801a978 <ucdr_init_buffer>
 801f2f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f2f8:	9b03      	ldr	r3, [sp, #12]
 801f2fa:	462a      	mov	r2, r5
 801f2fc:	a804      	add	r0, sp, #16
 801f2fe:	9400      	str	r4, [sp, #0]
 801f300:	f000 fbb6 	bl	801fa70 <uxr_serialize_message_header>
 801f304:	b00d      	add	sp, #52	@ 0x34
 801f306:	bd30      	pop	{r4, r5, pc}

0801f308 <uxr_read_session_header>:
 801f308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f30c:	4607      	mov	r7, r0
 801f30e:	b084      	sub	sp, #16
 801f310:	4608      	mov	r0, r1
 801f312:	460c      	mov	r4, r1
 801f314:	4615      	mov	r5, r2
 801f316:	461e      	mov	r6, r3
 801f318:	f7fb fb60 	bl	801a9dc <ucdr_buffer_remaining>
 801f31c:	2808      	cmp	r0, #8
 801f31e:	d803      	bhi.n	801f328 <uxr_read_session_header+0x20>
 801f320:	2000      	movs	r0, #0
 801f322:	b004      	add	sp, #16
 801f324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f328:	f10d 080c 	add.w	r8, sp, #12
 801f32c:	4633      	mov	r3, r6
 801f32e:	462a      	mov	r2, r5
 801f330:	4620      	mov	r0, r4
 801f332:	f10d 010b 	add.w	r1, sp, #11
 801f336:	f8cd 8000 	str.w	r8, [sp]
 801f33a:	f000 fbb7 	bl	801faac <uxr_deserialize_message_header>
 801f33e:	783a      	ldrb	r2, [r7, #0]
 801f340:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801f344:	4293      	cmp	r3, r2
 801f346:	d1eb      	bne.n	801f320 <uxr_read_session_header+0x18>
 801f348:	061b      	lsls	r3, r3, #24
 801f34a:	d41b      	bmi.n	801f384 <uxr_read_session_header+0x7c>
 801f34c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801f350:	787b      	ldrb	r3, [r7, #1]
 801f352:	429a      	cmp	r2, r3
 801f354:	d003      	beq.n	801f35e <uxr_read_session_header+0x56>
 801f356:	2001      	movs	r0, #1
 801f358:	f080 0001 	eor.w	r0, r0, #1
 801f35c:	e7e1      	b.n	801f322 <uxr_read_session_header+0x1a>
 801f35e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801f362:	1cb8      	adds	r0, r7, #2
 801f364:	78bb      	ldrb	r3, [r7, #2]
 801f366:	429a      	cmp	r2, r3
 801f368:	d1f5      	bne.n	801f356 <uxr_read_session_header+0x4e>
 801f36a:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801f36e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801f372:	429a      	cmp	r2, r3
 801f374:	d1ef      	bne.n	801f356 <uxr_read_session_header+0x4e>
 801f376:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801f37a:	7843      	ldrb	r3, [r0, #1]
 801f37c:	429a      	cmp	r2, r3
 801f37e:	d1ea      	bne.n	801f356 <uxr_read_session_header+0x4e>
 801f380:	2000      	movs	r0, #0
 801f382:	e7e9      	b.n	801f358 <uxr_read_session_header+0x50>
 801f384:	2001      	movs	r0, #1
 801f386:	e7cc      	b.n	801f322 <uxr_read_session_header+0x1a>

0801f388 <uxr_session_header_offset>:
 801f388:	f990 3000 	ldrsb.w	r3, [r0]
 801f38c:	2b00      	cmp	r3, #0
 801f38e:	bfac      	ite	ge
 801f390:	2008      	movge	r0, #8
 801f392:	2004      	movlt	r0, #4
 801f394:	4770      	bx	lr
 801f396:	bf00      	nop

0801f398 <uxr_init_base_object_request>:
 801f398:	b510      	push	{r4, lr}
 801f39a:	b082      	sub	sp, #8
 801f39c:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 801f3a0:	9101      	str	r1, [sp, #4]
 801f3a2:	88c3      	ldrh	r3, [r0, #6]
 801f3a4:	f1a3 010a 	sub.w	r1, r3, #10
 801f3a8:	b289      	uxth	r1, r1
 801f3aa:	42a1      	cmp	r1, r4
 801f3ac:	d80f      	bhi.n	801f3ce <uxr_init_base_object_request+0x36>
 801f3ae:	3301      	adds	r3, #1
 801f3b0:	b29c      	uxth	r4, r3
 801f3b2:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 801f3b6:	b2db      	uxtb	r3, r3
 801f3b8:	80c4      	strh	r4, [r0, #6]
 801f3ba:	1c91      	adds	r1, r2, #2
 801f3bc:	9801      	ldr	r0, [sp, #4]
 801f3be:	f882 c000 	strb.w	ip, [r2]
 801f3c2:	7053      	strb	r3, [r2, #1]
 801f3c4:	f7fe ff72 	bl	801e2ac <uxr_object_id_to_raw>
 801f3c8:	4620      	mov	r0, r4
 801f3ca:	b002      	add	sp, #8
 801f3cc:	bd10      	pop	{r4, pc}
 801f3ce:	230a      	movs	r3, #10
 801f3d0:	f04f 0c00 	mov.w	ip, #0
 801f3d4:	461c      	mov	r4, r3
 801f3d6:	e7ef      	b.n	801f3b8 <uxr_init_base_object_request+0x20>

0801f3d8 <uxr_parse_base_object_request>:
 801f3d8:	b570      	push	{r4, r5, r6, lr}
 801f3da:	4604      	mov	r4, r0
 801f3dc:	3002      	adds	r0, #2
 801f3de:	460d      	mov	r5, r1
 801f3e0:	4616      	mov	r6, r2
 801f3e2:	f7fe ff4f 	bl	801e284 <uxr_object_id_from_raw>
 801f3e6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801f3ea:	8028      	strh	r0, [r5, #0]
 801f3ec:	806b      	strh	r3, [r5, #2]
 801f3ee:	7822      	ldrb	r2, [r4, #0]
 801f3f0:	7863      	ldrb	r3, [r4, #1]
 801f3f2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801f3f6:	8033      	strh	r3, [r6, #0]
 801f3f8:	bd70      	pop	{r4, r5, r6, pc}
 801f3fa:	bf00      	nop

0801f3fc <uxr_stream_id>:
 801f3fc:	2901      	cmp	r1, #1
 801f3fe:	4684      	mov	ip, r0
 801f400:	b500      	push	{lr}
 801f402:	b083      	sub	sp, #12
 801f404:	d01f      	beq.n	801f446 <uxr_stream_id+0x4a>
 801f406:	2902      	cmp	r1, #2
 801f408:	f04f 0e00 	mov.w	lr, #0
 801f40c:	d020      	beq.n	801f450 <uxr_stream_id+0x54>
 801f40e:	2300      	movs	r3, #0
 801f410:	2000      	movs	r0, #0
 801f412:	f36e 0307 	bfi	r3, lr, #0, #8
 801f416:	f36c 230f 	bfi	r3, ip, #8, #8
 801f41a:	f361 4317 	bfi	r3, r1, #16, #8
 801f41e:	f362 631f 	bfi	r3, r2, #24, #8
 801f422:	fa5f fc83 	uxtb.w	ip, r3
 801f426:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801f42a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801f42e:	0e1b      	lsrs	r3, r3, #24
 801f430:	f36c 0007 	bfi	r0, ip, #0, #8
 801f434:	f361 200f 	bfi	r0, r1, #8, #8
 801f438:	f362 4017 	bfi	r0, r2, #16, #8
 801f43c:	f363 601f 	bfi	r0, r3, #24, #8
 801f440:	b003      	add	sp, #12
 801f442:	f85d fb04 	ldr.w	pc, [sp], #4
 801f446:	f100 0e01 	add.w	lr, r0, #1
 801f44a:	fa5f fe8e 	uxtb.w	lr, lr
 801f44e:	e7de      	b.n	801f40e <uxr_stream_id+0x12>
 801f450:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 801f454:	e7db      	b.n	801f40e <uxr_stream_id+0x12>
 801f456:	bf00      	nop

0801f458 <uxr_stream_id_from_raw>:
 801f458:	b082      	sub	sp, #8
 801f45a:	b130      	cbz	r0, 801f46a <uxr_stream_id_from_raw+0x12>
 801f45c:	0603      	lsls	r3, r0, #24
 801f45e:	d421      	bmi.n	801f4a4 <uxr_stream_id_from_raw+0x4c>
 801f460:	1e42      	subs	r2, r0, #1
 801f462:	f04f 0c01 	mov.w	ip, #1
 801f466:	b2d2      	uxtb	r2, r2
 801f468:	e001      	b.n	801f46e <uxr_stream_id_from_raw+0x16>
 801f46a:	4684      	mov	ip, r0
 801f46c:	4602      	mov	r2, r0
 801f46e:	2300      	movs	r3, #0
 801f470:	f360 0307 	bfi	r3, r0, #0, #8
 801f474:	2000      	movs	r0, #0
 801f476:	f362 230f 	bfi	r3, r2, #8, #8
 801f47a:	f36c 4317 	bfi	r3, ip, #16, #8
 801f47e:	f361 631f 	bfi	r3, r1, #24, #8
 801f482:	fa5f fc83 	uxtb.w	ip, r3
 801f486:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801f48a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801f48e:	0e1b      	lsrs	r3, r3, #24
 801f490:	f36c 0007 	bfi	r0, ip, #0, #8
 801f494:	f361 200f 	bfi	r0, r1, #8, #8
 801f498:	f362 4017 	bfi	r0, r2, #16, #8
 801f49c:	f363 601f 	bfi	r0, r3, #24, #8
 801f4a0:	b002      	add	sp, #8
 801f4a2:	4770      	bx	lr
 801f4a4:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801f4a8:	f04f 0c02 	mov.w	ip, #2
 801f4ac:	e7df      	b.n	801f46e <uxr_stream_id_from_raw+0x16>
 801f4ae:	bf00      	nop

0801f4b0 <uxr_init_stream_storage>:
 801f4b0:	2300      	movs	r3, #0
 801f4b2:	7403      	strb	r3, [r0, #16]
 801f4b4:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 801f4b8:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 801f4bc:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 801f4c0:	4770      	bx	lr
 801f4c2:	bf00      	nop

0801f4c4 <uxr_reset_stream_storage>:
 801f4c4:	b570      	push	{r4, r5, r6, lr}
 801f4c6:	7c03      	ldrb	r3, [r0, #16]
 801f4c8:	4604      	mov	r4, r0
 801f4ca:	b14b      	cbz	r3, 801f4e0 <uxr_reset_stream_storage+0x1c>
 801f4cc:	4606      	mov	r6, r0
 801f4ce:	2500      	movs	r5, #0
 801f4d0:	4630      	mov	r0, r6
 801f4d2:	3501      	adds	r5, #1
 801f4d4:	f006 fbda 	bl	8025c8c <uxr_reset_output_best_effort_stream>
 801f4d8:	7c23      	ldrb	r3, [r4, #16]
 801f4da:	3610      	adds	r6, #16
 801f4dc:	42ab      	cmp	r3, r5
 801f4de:	d8f7      	bhi.n	801f4d0 <uxr_reset_stream_storage+0xc>
 801f4e0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801f4e4:	b15b      	cbz	r3, 801f4fe <uxr_reset_stream_storage+0x3a>
 801f4e6:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801f4ea:	2500      	movs	r5, #0
 801f4ec:	4630      	mov	r0, r6
 801f4ee:	3501      	adds	r5, #1
 801f4f0:	f006 f9d2 	bl	8025898 <uxr_reset_input_best_effort_stream>
 801f4f4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801f4f8:	3602      	adds	r6, #2
 801f4fa:	42ab      	cmp	r3, r5
 801f4fc:	d8f6      	bhi.n	801f4ec <uxr_reset_stream_storage+0x28>
 801f4fe:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801f502:	b15b      	cbz	r3, 801f51c <uxr_reset_stream_storage+0x58>
 801f504:	f104 0618 	add.w	r6, r4, #24
 801f508:	2500      	movs	r5, #0
 801f50a:	4630      	mov	r0, r6
 801f50c:	3501      	adds	r5, #1
 801f50e:	f006 fc6b 	bl	8025de8 <uxr_reset_output_reliable_stream>
 801f512:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801f516:	3628      	adds	r6, #40	@ 0x28
 801f518:	42ab      	cmp	r3, r5
 801f51a:	d8f6      	bhi.n	801f50a <uxr_reset_stream_storage+0x46>
 801f51c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801f520:	b15b      	cbz	r3, 801f53a <uxr_reset_stream_storage+0x76>
 801f522:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 801f526:	2500      	movs	r5, #0
 801f528:	4630      	mov	r0, r6
 801f52a:	3501      	adds	r5, #1
 801f52c:	f006 fa20 	bl	8025970 <uxr_reset_input_reliable_stream>
 801f530:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801f534:	3618      	adds	r6, #24
 801f536:	42ab      	cmp	r3, r5
 801f538:	d8f6      	bhi.n	801f528 <uxr_reset_stream_storage+0x64>
 801f53a:	bd70      	pop	{r4, r5, r6, pc}

0801f53c <uxr_add_output_best_effort_buffer>:
 801f53c:	b510      	push	{r4, lr}
 801f53e:	7c04      	ldrb	r4, [r0, #16]
 801f540:	b082      	sub	sp, #8
 801f542:	f104 0c01 	add.w	ip, r4, #1
 801f546:	f880 c010 	strb.w	ip, [r0, #16]
 801f54a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801f54e:	f006 fb93 	bl	8025c78 <uxr_init_output_best_effort_stream>
 801f552:	2201      	movs	r2, #1
 801f554:	4620      	mov	r0, r4
 801f556:	4611      	mov	r1, r2
 801f558:	b002      	add	sp, #8
 801f55a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f55e:	f7ff bf4d 	b.w	801f3fc <uxr_stream_id>
 801f562:	bf00      	nop

0801f564 <uxr_add_output_reliable_buffer>:
 801f564:	b510      	push	{r4, lr}
 801f566:	b084      	sub	sp, #16
 801f568:	4684      	mov	ip, r0
 801f56a:	2028      	movs	r0, #40	@ 0x28
 801f56c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 801f570:	9400      	str	r4, [sp, #0]
 801f572:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 801f576:	fb00 c004 	mla	r0, r0, r4, ip
 801f57a:	f104 0e01 	add.w	lr, r4, #1
 801f57e:	3018      	adds	r0, #24
 801f580:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 801f584:	f006 fbf8 	bl	8025d78 <uxr_init_output_reliable_stream>
 801f588:	2201      	movs	r2, #1
 801f58a:	2102      	movs	r1, #2
 801f58c:	4620      	mov	r0, r4
 801f58e:	b004      	add	sp, #16
 801f590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f594:	f7ff bf32 	b.w	801f3fc <uxr_stream_id>

0801f598 <uxr_add_input_best_effort_buffer>:
 801f598:	b510      	push	{r4, lr}
 801f59a:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 801f59e:	b082      	sub	sp, #8
 801f5a0:	1c62      	adds	r2, r4, #1
 801f5a2:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 801f5a6:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 801f5aa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f5ae:	f006 f96f 	bl	8025890 <uxr_init_input_best_effort_stream>
 801f5b2:	2200      	movs	r2, #0
 801f5b4:	2101      	movs	r1, #1
 801f5b6:	4620      	mov	r0, r4
 801f5b8:	b002      	add	sp, #8
 801f5ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f5be:	f7ff bf1d 	b.w	801f3fc <uxr_stream_id>
 801f5c2:	bf00      	nop

0801f5c4 <uxr_add_input_reliable_buffer>:
 801f5c4:	b510      	push	{r4, lr}
 801f5c6:	b084      	sub	sp, #16
 801f5c8:	4684      	mov	ip, r0
 801f5ca:	2018      	movs	r0, #24
 801f5cc:	9c06      	ldr	r4, [sp, #24]
 801f5ce:	9400      	str	r4, [sp, #0]
 801f5d0:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 801f5d4:	fb00 c004 	mla	r0, r0, r4, ip
 801f5d8:	f104 0e01 	add.w	lr, r4, #1
 801f5dc:	3048      	adds	r0, #72	@ 0x48
 801f5de:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801f5e2:	f006 f99f 	bl	8025924 <uxr_init_input_reliable_stream>
 801f5e6:	2200      	movs	r2, #0
 801f5e8:	2102      	movs	r1, #2
 801f5ea:	4620      	mov	r0, r4
 801f5ec:	b004      	add	sp, #16
 801f5ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f5f2:	f7ff bf03 	b.w	801f3fc <uxr_stream_id>
 801f5f6:	bf00      	nop

0801f5f8 <uxr_get_output_best_effort_stream>:
 801f5f8:	7c03      	ldrb	r3, [r0, #16]
 801f5fa:	428b      	cmp	r3, r1
 801f5fc:	bf8c      	ite	hi
 801f5fe:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801f602:	2000      	movls	r0, #0
 801f604:	4770      	bx	lr
 801f606:	bf00      	nop

0801f608 <uxr_get_output_reliable_stream>:
 801f608:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801f60c:	428b      	cmp	r3, r1
 801f60e:	d904      	bls.n	801f61a <uxr_get_output_reliable_stream+0x12>
 801f610:	2328      	movs	r3, #40	@ 0x28
 801f612:	fb03 0001 	mla	r0, r3, r1, r0
 801f616:	3018      	adds	r0, #24
 801f618:	4770      	bx	lr
 801f61a:	2000      	movs	r0, #0
 801f61c:	4770      	bx	lr
 801f61e:	bf00      	nop

0801f620 <uxr_get_input_best_effort_stream>:
 801f620:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 801f624:	428b      	cmp	r3, r1
 801f626:	d903      	bls.n	801f630 <uxr_get_input_best_effort_stream+0x10>
 801f628:	3121      	adds	r1, #33	@ 0x21
 801f62a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801f62e:	4770      	bx	lr
 801f630:	2000      	movs	r0, #0
 801f632:	4770      	bx	lr

0801f634 <uxr_get_input_reliable_stream>:
 801f634:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 801f638:	428b      	cmp	r3, r1
 801f63a:	d904      	bls.n	801f646 <uxr_get_input_reliable_stream+0x12>
 801f63c:	2318      	movs	r3, #24
 801f63e:	fb03 0001 	mla	r0, r3, r1, r0
 801f642:	3048      	adds	r0, #72	@ 0x48
 801f644:	4770      	bx	lr
 801f646:	2000      	movs	r0, #0
 801f648:	4770      	bx	lr
 801f64a:	bf00      	nop

0801f64c <uxr_output_streams_confirmed>:
 801f64c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801f650:	b183      	cbz	r3, 801f674 <uxr_output_streams_confirmed+0x28>
 801f652:	b570      	push	{r4, r5, r6, lr}
 801f654:	4606      	mov	r6, r0
 801f656:	f100 0518 	add.w	r5, r0, #24
 801f65a:	2400      	movs	r4, #0
 801f65c:	e000      	b.n	801f660 <uxr_output_streams_confirmed+0x14>
 801f65e:	b140      	cbz	r0, 801f672 <uxr_output_streams_confirmed+0x26>
 801f660:	4628      	mov	r0, r5
 801f662:	3401      	adds	r4, #1
 801f664:	f006 fe34 	bl	80262d0 <uxr_is_output_up_to_date>
 801f668:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 801f66c:	3528      	adds	r5, #40	@ 0x28
 801f66e:	42a3      	cmp	r3, r4
 801f670:	d8f5      	bhi.n	801f65e <uxr_output_streams_confirmed+0x12>
 801f672:	bd70      	pop	{r4, r5, r6, pc}
 801f674:	2001      	movs	r0, #1
 801f676:	4770      	bx	lr

0801f678 <uxr_buffer_submessage_header>:
 801f678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f67a:	460e      	mov	r6, r1
 801f67c:	2104      	movs	r1, #4
 801f67e:	4604      	mov	r4, r0
 801f680:	4615      	mov	r5, r2
 801f682:	461f      	mov	r7, r3
 801f684:	f7fb f994 	bl	801a9b0 <ucdr_align_to>
 801f688:	2301      	movs	r3, #1
 801f68a:	4631      	mov	r1, r6
 801f68c:	4620      	mov	r0, r4
 801f68e:	ea47 0203 	orr.w	r2, r7, r3
 801f692:	7523      	strb	r3, [r4, #20]
 801f694:	462b      	mov	r3, r5
 801f696:	f000 fa29 	bl	801faec <uxr_serialize_submessage_header>
 801f69a:	4620      	mov	r0, r4
 801f69c:	f7fb f99e 	bl	801a9dc <ucdr_buffer_remaining>
 801f6a0:	42a8      	cmp	r0, r5
 801f6a2:	bf34      	ite	cc
 801f6a4:	2000      	movcc	r0, #0
 801f6a6:	2001      	movcs	r0, #1
 801f6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f6aa:	bf00      	nop

0801f6ac <uxr_read_submessage_header>:
 801f6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f6b0:	4604      	mov	r4, r0
 801f6b2:	460d      	mov	r5, r1
 801f6b4:	2104      	movs	r1, #4
 801f6b6:	4616      	mov	r6, r2
 801f6b8:	4698      	mov	r8, r3
 801f6ba:	f7fb f979 	bl	801a9b0 <ucdr_align_to>
 801f6be:	4620      	mov	r0, r4
 801f6c0:	f7fb f98c 	bl	801a9dc <ucdr_buffer_remaining>
 801f6c4:	2803      	cmp	r0, #3
 801f6c6:	bf8c      	ite	hi
 801f6c8:	2701      	movhi	r7, #1
 801f6ca:	2700      	movls	r7, #0
 801f6cc:	d802      	bhi.n	801f6d4 <uxr_read_submessage_header+0x28>
 801f6ce:	4638      	mov	r0, r7
 801f6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f6d4:	4633      	mov	r3, r6
 801f6d6:	4642      	mov	r2, r8
 801f6d8:	4620      	mov	r0, r4
 801f6da:	4629      	mov	r1, r5
 801f6dc:	f000 fa1a 	bl	801fb14 <uxr_deserialize_submessage_header>
 801f6e0:	f898 3000 	ldrb.w	r3, [r8]
 801f6e4:	4638      	mov	r0, r7
 801f6e6:	f003 0201 	and.w	r2, r3, #1
 801f6ea:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 801f6ee:	f888 3000 	strb.w	r3, [r8]
 801f6f2:	7522      	strb	r2, [r4, #20]
 801f6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f6f8 <uxr_submessage_padding>:
 801f6f8:	f010 0003 	ands.w	r0, r0, #3
 801f6fc:	bf18      	it	ne
 801f6fe:	f1c0 0004 	rsbne	r0, r0, #4
 801f702:	4770      	bx	lr

0801f704 <uxr_millis>:
 801f704:	b510      	push	{r4, lr}
 801f706:	b084      	sub	sp, #16
 801f708:	2001      	movs	r0, #1
 801f70a:	4669      	mov	r1, sp
 801f70c:	f7e1 f838 	bl	8000780 <clock_gettime>
 801f710:	4908      	ldr	r1, [pc, #32]	@ (801f734 <uxr_millis+0x30>)
 801f712:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 801f716:	fba0 0301 	umull	r0, r3, r0, r1
 801f71a:	1900      	adds	r0, r0, r4
 801f71c:	fb01 3102 	mla	r1, r1, r2, r3
 801f720:	4a05      	ldr	r2, [pc, #20]	@ (801f738 <uxr_millis+0x34>)
 801f722:	f04f 0300 	mov.w	r3, #0
 801f726:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801f72a:	f7e0 fdf1 	bl	8000310 <__aeabi_ldivmod>
 801f72e:	b004      	add	sp, #16
 801f730:	bd10      	pop	{r4, pc}
 801f732:	bf00      	nop
 801f734:	3b9aca00 	.word	0x3b9aca00
 801f738:	000f4240 	.word	0x000f4240

0801f73c <uxr_nanos>:
 801f73c:	b510      	push	{r4, lr}
 801f73e:	b084      	sub	sp, #16
 801f740:	2001      	movs	r0, #1
 801f742:	4669      	mov	r1, sp
 801f744:	f7e1 f81c 	bl	8000780 <clock_gettime>
 801f748:	4a06      	ldr	r2, [pc, #24]	@ (801f764 <uxr_nanos+0x28>)
 801f74a:	9800      	ldr	r0, [sp, #0]
 801f74c:	9902      	ldr	r1, [sp, #8]
 801f74e:	fba0 0302 	umull	r0, r3, r0, r2
 801f752:	9c01      	ldr	r4, [sp, #4]
 801f754:	1840      	adds	r0, r0, r1
 801f756:	fb02 3304 	mla	r3, r2, r4, r3
 801f75a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801f75e:	b004      	add	sp, #16
 801f760:	bd10      	pop	{r4, pc}
 801f762:	bf00      	nop
 801f764:	3b9aca00 	.word	0x3b9aca00

0801f768 <on_full_output_buffer_fragmented>:
 801f768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f76c:	460c      	mov	r4, r1
 801f76e:	b08a      	sub	sp, #40	@ 0x28
 801f770:	4606      	mov	r6, r0
 801f772:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 801f776:	f104 0008 	add.w	r0, r4, #8
 801f77a:	f7ff ff45 	bl	801f608 <uxr_get_output_reliable_stream>
 801f77e:	4605      	mov	r5, r0
 801f780:	f006 fdb0 	bl	80262e4 <get_available_free_slots>
 801f784:	b968      	cbnz	r0, 801f7a2 <on_full_output_buffer_fragmented+0x3a>
 801f786:	4620      	mov	r0, r4
 801f788:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 801f78c:	4798      	blx	r3
 801f78e:	b918      	cbnz	r0, 801f798 <on_full_output_buffer_fragmented+0x30>
 801f790:	2001      	movs	r0, #1
 801f792:	b00a      	add	sp, #40	@ 0x28
 801f794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f798:	4628      	mov	r0, r5
 801f79a:	f006 fda3 	bl	80262e4 <get_available_free_slots>
 801f79e:	2800      	cmp	r0, #0
 801f7a0:	d0f6      	beq.n	801f790 <on_full_output_buffer_fragmented+0x28>
 801f7a2:	8929      	ldrh	r1, [r5, #8]
 801f7a4:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801f7a8:	89eb      	ldrh	r3, [r5, #14]
 801f7aa:	7b28      	ldrb	r0, [r5, #12]
 801f7ac:	686f      	ldr	r7, [r5, #4]
 801f7ae:	1a12      	subs	r2, r2, r0
 801f7b0:	fbb3 f0f1 	udiv	r0, r3, r1
 801f7b4:	fbb7 f7f1 	udiv	r7, r7, r1
 801f7b8:	fb01 3110 	mls	r1, r1, r0, r3
 801f7bc:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 801f7c0:	b289      	uxth	r1, r1
 801f7c2:	fb07 f101 	mul.w	r1, r7, r1
 801f7c6:	3f04      	subs	r7, #4
 801f7c8:	443a      	add	r2, r7
 801f7ca:	3104      	adds	r1, #4
 801f7cc:	fa1f f882 	uxth.w	r8, r2
 801f7d0:	463a      	mov	r2, r7
 801f7d2:	eba3 0308 	sub.w	r3, r3, r8
 801f7d6:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 801f7da:	682b      	ldr	r3, [r5, #0]
 801f7dc:	4419      	add	r1, r3
 801f7de:	2300      	movs	r3, #0
 801f7e0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801f7e4:	9000      	str	r0, [sp, #0]
 801f7e6:	a802      	add	r0, sp, #8
 801f7e8:	f7fb f8b4 	bl	801a954 <ucdr_init_buffer_origin_offset>
 801f7ec:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801f7f0:	f102 0308 	add.w	r3, r2, #8
 801f7f4:	42bb      	cmp	r3, r7
 801f7f6:	d927      	bls.n	801f848 <on_full_output_buffer_fragmented+0xe0>
 801f7f8:	4642      	mov	r2, r8
 801f7fa:	2300      	movs	r3, #0
 801f7fc:	210d      	movs	r1, #13
 801f7fe:	a802      	add	r0, sp, #8
 801f800:	f7ff ff3a 	bl	801f678 <uxr_buffer_submessage_header>
 801f804:	8929      	ldrh	r1, [r5, #8]
 801f806:	89eb      	ldrh	r3, [r5, #14]
 801f808:	686a      	ldr	r2, [r5, #4]
 801f80a:	fbb3 f0f1 	udiv	r0, r3, r1
 801f80e:	fbb2 f2f1 	udiv	r2, r2, r1
 801f812:	fb01 3310 	mls	r3, r1, r0, r3
 801f816:	b29b      	uxth	r3, r3
 801f818:	fb02 f303 	mul.w	r3, r2, r3
 801f81c:	682a      	ldr	r2, [r5, #0]
 801f81e:	50d7      	str	r7, [r2, r3]
 801f820:	2101      	movs	r1, #1
 801f822:	89e8      	ldrh	r0, [r5, #14]
 801f824:	f006 feb0 	bl	8026588 <uxr_seq_num_add>
 801f828:	9904      	ldr	r1, [sp, #16]
 801f82a:	9a03      	ldr	r2, [sp, #12]
 801f82c:	81e8      	strh	r0, [r5, #14]
 801f82e:	4630      	mov	r0, r6
 801f830:	1a52      	subs	r2, r2, r1
 801f832:	f7fb f8a1 	bl	801a978 <ucdr_init_buffer>
 801f836:	4630      	mov	r0, r6
 801f838:	4622      	mov	r2, r4
 801f83a:	490f      	ldr	r1, [pc, #60]	@ (801f878 <on_full_output_buffer_fragmented+0x110>)
 801f83c:	f7fb f870 	bl	801a920 <ucdr_set_on_full_buffer_callback>
 801f840:	2000      	movs	r0, #0
 801f842:	b00a      	add	sp, #40	@ 0x28
 801f844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f848:	b292      	uxth	r2, r2
 801f84a:	2302      	movs	r3, #2
 801f84c:	210d      	movs	r1, #13
 801f84e:	a802      	add	r0, sp, #8
 801f850:	f7ff ff12 	bl	801f678 <uxr_buffer_submessage_header>
 801f854:	8928      	ldrh	r0, [r5, #8]
 801f856:	89eb      	ldrh	r3, [r5, #14]
 801f858:	6869      	ldr	r1, [r5, #4]
 801f85a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801f85e:	fbb3 f7f0 	udiv	r7, r3, r0
 801f862:	fbb1 f1f0 	udiv	r1, r1, r0
 801f866:	fb00 3317 	mls	r3, r0, r7, r3
 801f86a:	3208      	adds	r2, #8
 801f86c:	b29b      	uxth	r3, r3
 801f86e:	fb01 f303 	mul.w	r3, r1, r3
 801f872:	6829      	ldr	r1, [r5, #0]
 801f874:	50ca      	str	r2, [r1, r3]
 801f876:	e7d3      	b.n	801f820 <on_full_output_buffer_fragmented+0xb8>
 801f878:	0801f769 	.word	0x0801f769

0801f87c <uxr_prepare_output_stream>:
 801f87c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f87e:	b087      	sub	sp, #28
 801f880:	2707      	movs	r7, #7
 801f882:	2500      	movs	r5, #0
 801f884:	461c      	mov	r4, r3
 801f886:	4606      	mov	r6, r0
 801f888:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801f88c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f88e:	e9cd 7500 	strd	r7, r5, [sp]
 801f892:	3204      	adds	r2, #4
 801f894:	f7ff fc44 	bl	801f120 <uxr_prepare_stream_to_write_submessage>
 801f898:	f080 0201 	eor.w	r2, r0, #1
 801f89c:	b2d2      	uxtb	r2, r2
 801f89e:	75a2      	strb	r2, [r4, #22]
 801f8a0:	b112      	cbz	r2, 801f8a8 <uxr_prepare_output_stream+0x2c>
 801f8a2:	4628      	mov	r0, r5
 801f8a4:	b007      	add	sp, #28
 801f8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f8a8:	aa05      	add	r2, sp, #20
 801f8aa:	9902      	ldr	r1, [sp, #8]
 801f8ac:	4630      	mov	r0, r6
 801f8ae:	f7ff fd73 	bl	801f398 <uxr_init_base_object_request>
 801f8b2:	a905      	add	r1, sp, #20
 801f8b4:	4605      	mov	r5, r0
 801f8b6:	4620      	mov	r0, r4
 801f8b8:	f001 f888 	bl	80209cc <uxr_serialize_WRITE_DATA_Payload_Data>
 801f8bc:	69a6      	ldr	r6, [r4, #24]
 801f8be:	69e7      	ldr	r7, [r4, #28]
 801f8c0:	4620      	mov	r0, r4
 801f8c2:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801f8c6:	1a52      	subs	r2, r2, r1
 801f8c8:	f7fb f856 	bl	801a978 <ucdr_init_buffer>
 801f8cc:	4620      	mov	r0, r4
 801f8ce:	463a      	mov	r2, r7
 801f8d0:	4631      	mov	r1, r6
 801f8d2:	f7fb f825 	bl	801a920 <ucdr_set_on_full_buffer_callback>
 801f8d6:	4628      	mov	r0, r5
 801f8d8:	b007      	add	sp, #28
 801f8da:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f8dc <uxr_prepare_output_stream_fragmented>:
 801f8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8e0:	b091      	sub	sp, #68	@ 0x44
 801f8e2:	4605      	mov	r5, r0
 801f8e4:	3008      	adds	r0, #8
 801f8e6:	461e      	mov	r6, r3
 801f8e8:	9105      	str	r1, [sp, #20]
 801f8ea:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f8ee:	9204      	str	r2, [sp, #16]
 801f8f0:	f7ff fe8a 	bl	801f608 <uxr_get_output_reliable_stream>
 801f8f4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 801f8f8:	2b01      	cmp	r3, #1
 801f8fa:	f000 8093 	beq.w	801fa24 <uxr_prepare_output_stream_fragmented+0x148>
 801f8fe:	4604      	mov	r4, r0
 801f900:	2800      	cmp	r0, #0
 801f902:	f000 808f 	beq.w	801fa24 <uxr_prepare_output_stream_fragmented+0x148>
 801f906:	f006 fced 	bl	80262e4 <get_available_free_slots>
 801f90a:	2800      	cmp	r0, #0
 801f90c:	f000 8085 	beq.w	801fa1a <uxr_prepare_output_stream_fragmented+0x13e>
 801f910:	8923      	ldrh	r3, [r4, #8]
 801f912:	89e7      	ldrh	r7, [r4, #14]
 801f914:	6862      	ldr	r2, [r4, #4]
 801f916:	fbb7 f9f3 	udiv	r9, r7, r3
 801f91a:	fbb2 f2f3 	udiv	r2, r2, r3
 801f91e:	fb03 7919 	mls	r9, r3, r9, r7
 801f922:	6823      	ldr	r3, [r4, #0]
 801f924:	f1a2 0b04 	sub.w	fp, r2, #4
 801f928:	9203      	str	r2, [sp, #12]
 801f92a:	fa1f f989 	uxth.w	r9, r9
 801f92e:	fb02 f909 	mul.w	r9, r2, r9
 801f932:	f109 0904 	add.w	r9, r9, #4
 801f936:	4499      	add	r9, r3
 801f938:	7b23      	ldrb	r3, [r4, #12]
 801f93a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801f93e:	4543      	cmp	r3, r8
 801f940:	d37c      	bcc.n	801fa3c <uxr_prepare_output_stream_fragmented+0x160>
 801f942:	f1ab 0a04 	sub.w	sl, fp, #4
 801f946:	465a      	mov	r2, fp
 801f948:	4649      	mov	r1, r9
 801f94a:	a808      	add	r0, sp, #32
 801f94c:	ebaa 0a03 	sub.w	sl, sl, r3
 801f950:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801f952:	f8cd 8000 	str.w	r8, [sp]
 801f956:	3308      	adds	r3, #8
 801f958:	fa1f fa8a 	uxth.w	sl, sl
 801f95c:	9302      	str	r3, [sp, #8]
 801f95e:	2300      	movs	r3, #0
 801f960:	f7fa fff8 	bl	801a954 <ucdr_init_buffer_origin_offset>
 801f964:	9b02      	ldr	r3, [sp, #8]
 801f966:	4652      	mov	r2, sl
 801f968:	210d      	movs	r1, #13
 801f96a:	455b      	cmp	r3, fp
 801f96c:	bf34      	ite	cc
 801f96e:	2302      	movcc	r3, #2
 801f970:	2300      	movcs	r3, #0
 801f972:	a808      	add	r0, sp, #32
 801f974:	f7ff fe80 	bl	801f678 <uxr_buffer_submessage_header>
 801f978:	8921      	ldrh	r1, [r4, #8]
 801f97a:	6863      	ldr	r3, [r4, #4]
 801f97c:	4638      	mov	r0, r7
 801f97e:	fbb7 f2f1 	udiv	r2, r7, r1
 801f982:	fbb3 f3f1 	udiv	r3, r3, r1
 801f986:	fb01 7212 	mls	r2, r1, r2, r7
 801f98a:	2101      	movs	r1, #1
 801f98c:	b292      	uxth	r2, r2
 801f98e:	fb02 f303 	mul.w	r3, r2, r3
 801f992:	6822      	ldr	r2, [r4, #0]
 801f994:	f842 b003 	str.w	fp, [r2, r3]
 801f998:	f006 fdf6 	bl	8026588 <uxr_seq_num_add>
 801f99c:	9b03      	ldr	r3, [sp, #12]
 801f99e:	f108 0104 	add.w	r1, r8, #4
 801f9a2:	4607      	mov	r7, r0
 801f9a4:	f1a3 0208 	sub.w	r2, r3, #8
 801f9a8:	4630      	mov	r0, r6
 801f9aa:	4449      	add	r1, r9
 801f9ac:	eba2 0208 	sub.w	r2, r2, r8
 801f9b0:	f7fa ffe2 	bl	801a978 <ucdr_init_buffer>
 801f9b4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801f9b6:	2107      	movs	r1, #7
 801f9b8:	81e7      	strh	r7, [r4, #14]
 801f9ba:	1d1a      	adds	r2, r3, #4
 801f9bc:	2300      	movs	r3, #0
 801f9be:	4630      	mov	r0, r6
 801f9c0:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 801f9c4:	bf28      	it	cs
 801f9c6:	461a      	movcs	r2, r3
 801f9c8:	b292      	uxth	r2, r2
 801f9ca:	f7ff fe55 	bl	801f678 <uxr_buffer_submessage_header>
 801f9ce:	aa07      	add	r2, sp, #28
 801f9d0:	9904      	ldr	r1, [sp, #16]
 801f9d2:	4628      	mov	r0, r5
 801f9d4:	f7ff fce0 	bl	801f398 <uxr_init_base_object_request>
 801f9d8:	4604      	mov	r4, r0
 801f9da:	b320      	cbz	r0, 801fa26 <uxr_prepare_output_stream_fragmented+0x14a>
 801f9dc:	a907      	add	r1, sp, #28
 801f9de:	4630      	mov	r0, r6
 801f9e0:	f000 fff4 	bl	80209cc <uxr_serialize_WRITE_DATA_Payload_Data>
 801f9e4:	4630      	mov	r0, r6
 801f9e6:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801f9ea:	1a52      	subs	r2, r2, r1
 801f9ec:	f7fa ffc4 	bl	801a978 <ucdr_init_buffer>
 801f9f0:	9b05      	ldr	r3, [sp, #20]
 801f9f2:	9a02      	ldr	r2, [sp, #8]
 801f9f4:	4630      	mov	r0, r6
 801f9f6:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 801f9fa:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f9fc:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 801fa00:	462a      	mov	r2, r5
 801fa02:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 801fa06:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801fa08:	4918      	ldr	r1, [pc, #96]	@ (801fa6c <uxr_prepare_output_stream_fragmented+0x190>)
 801fa0a:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 801fa0e:	f7fa ff87 	bl	801a920 <ucdr_set_on_full_buffer_callback>
 801fa12:	4620      	mov	r0, r4
 801fa14:	b011      	add	sp, #68	@ 0x44
 801fa16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa1a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801fa1c:	4628      	mov	r0, r5
 801fa1e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801fa20:	4798      	blx	r3
 801fa22:	b920      	cbnz	r0, 801fa2e <uxr_prepare_output_stream_fragmented+0x152>
 801fa24:	2400      	movs	r4, #0
 801fa26:	4620      	mov	r0, r4
 801fa28:	b011      	add	sp, #68	@ 0x44
 801fa2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa2e:	4620      	mov	r0, r4
 801fa30:	f006 fc58 	bl	80262e4 <get_available_free_slots>
 801fa34:	2800      	cmp	r0, #0
 801fa36:	f47f af6b 	bne.w	801f910 <uxr_prepare_output_stream_fragmented+0x34>
 801fa3a:	e7f3      	b.n	801fa24 <uxr_prepare_output_stream_fragmented+0x148>
 801fa3c:	4638      	mov	r0, r7
 801fa3e:	2101      	movs	r1, #1
 801fa40:	f006 fda2 	bl	8026588 <uxr_seq_num_add>
 801fa44:	8922      	ldrh	r2, [r4, #8]
 801fa46:	6863      	ldr	r3, [r4, #4]
 801fa48:	4607      	mov	r7, r0
 801fa4a:	fbb3 f9f2 	udiv	r9, r3, r2
 801fa4e:	fbb0 f3f2 	udiv	r3, r0, r2
 801fa52:	fb02 0313 	mls	r3, r2, r3, r0
 801fa56:	b29b      	uxth	r3, r3
 801fa58:	fb03 f909 	mul.w	r9, r3, r9
 801fa5c:	6823      	ldr	r3, [r4, #0]
 801fa5e:	f109 0904 	add.w	r9, r9, #4
 801fa62:	4499      	add	r9, r3
 801fa64:	7b23      	ldrb	r3, [r4, #12]
 801fa66:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801fa6a:	e76a      	b.n	801f942 <uxr_prepare_output_stream_fragmented+0x66>
 801fa6c:	0801f769 	.word	0x0801f769

0801fa70 <uxr_serialize_message_header>:
 801fa70:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fa72:	4616      	mov	r6, r2
 801fa74:	b083      	sub	sp, #12
 801fa76:	4604      	mov	r4, r0
 801fa78:	460d      	mov	r5, r1
 801fa7a:	9301      	str	r3, [sp, #4]
 801fa7c:	9f08      	ldr	r7, [sp, #32]
 801fa7e:	f7f9 fc99 	bl	80193b4 <ucdr_serialize_uint8_t>
 801fa82:	4631      	mov	r1, r6
 801fa84:	4620      	mov	r0, r4
 801fa86:	f7f9 fc95 	bl	80193b4 <ucdr_serialize_uint8_t>
 801fa8a:	9a01      	ldr	r2, [sp, #4]
 801fa8c:	2101      	movs	r1, #1
 801fa8e:	4620      	mov	r0, r4
 801fa90:	f7f9 fd3c 	bl	801950c <ucdr_serialize_endian_uint16_t>
 801fa94:	062b      	lsls	r3, r5, #24
 801fa96:	d501      	bpl.n	801fa9c <uxr_serialize_message_header+0x2c>
 801fa98:	b003      	add	sp, #12
 801fa9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fa9c:	2204      	movs	r2, #4
 801fa9e:	4639      	mov	r1, r7
 801faa0:	4620      	mov	r0, r4
 801faa2:	b003      	add	sp, #12
 801faa4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801faa8:	f7fe b866 	b.w	801db78 <ucdr_serialize_array_uint8_t>

0801faac <uxr_deserialize_message_header>:
 801faac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801faae:	4616      	mov	r6, r2
 801fab0:	b083      	sub	sp, #12
 801fab2:	4604      	mov	r4, r0
 801fab4:	460d      	mov	r5, r1
 801fab6:	9301      	str	r3, [sp, #4]
 801fab8:	9f08      	ldr	r7, [sp, #32]
 801faba:	f7f9 fc91 	bl	80193e0 <ucdr_deserialize_uint8_t>
 801fabe:	4631      	mov	r1, r6
 801fac0:	4620      	mov	r0, r4
 801fac2:	f7f9 fc8d 	bl	80193e0 <ucdr_deserialize_uint8_t>
 801fac6:	9a01      	ldr	r2, [sp, #4]
 801fac8:	2101      	movs	r1, #1
 801faca:	4620      	mov	r0, r4
 801facc:	f7f9 fe12 	bl	80196f4 <ucdr_deserialize_endian_uint16_t>
 801fad0:	f995 3000 	ldrsb.w	r3, [r5]
 801fad4:	2b00      	cmp	r3, #0
 801fad6:	da01      	bge.n	801fadc <uxr_deserialize_message_header+0x30>
 801fad8:	b003      	add	sp, #12
 801fada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fadc:	2204      	movs	r2, #4
 801fade:	4639      	mov	r1, r7
 801fae0:	4620      	mov	r0, r4
 801fae2:	b003      	add	sp, #12
 801fae4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801fae8:	f7fe b8aa 	b.w	801dc40 <ucdr_deserialize_array_uint8_t>

0801faec <uxr_serialize_submessage_header>:
 801faec:	b530      	push	{r4, r5, lr}
 801faee:	4615      	mov	r5, r2
 801faf0:	b083      	sub	sp, #12
 801faf2:	4604      	mov	r4, r0
 801faf4:	9301      	str	r3, [sp, #4]
 801faf6:	f7f9 fc5d 	bl	80193b4 <ucdr_serialize_uint8_t>
 801fafa:	4629      	mov	r1, r5
 801fafc:	4620      	mov	r0, r4
 801fafe:	f7f9 fc59 	bl	80193b4 <ucdr_serialize_uint8_t>
 801fb02:	9a01      	ldr	r2, [sp, #4]
 801fb04:	2101      	movs	r1, #1
 801fb06:	4620      	mov	r0, r4
 801fb08:	b003      	add	sp, #12
 801fb0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801fb0e:	f7f9 bcfd 	b.w	801950c <ucdr_serialize_endian_uint16_t>
 801fb12:	bf00      	nop

0801fb14 <uxr_deserialize_submessage_header>:
 801fb14:	b530      	push	{r4, r5, lr}
 801fb16:	4615      	mov	r5, r2
 801fb18:	b083      	sub	sp, #12
 801fb1a:	4604      	mov	r4, r0
 801fb1c:	9301      	str	r3, [sp, #4]
 801fb1e:	f7f9 fc5f 	bl	80193e0 <ucdr_deserialize_uint8_t>
 801fb22:	4629      	mov	r1, r5
 801fb24:	4620      	mov	r0, r4
 801fb26:	f7f9 fc5b 	bl	80193e0 <ucdr_deserialize_uint8_t>
 801fb2a:	9a01      	ldr	r2, [sp, #4]
 801fb2c:	2101      	movs	r1, #1
 801fb2e:	4620      	mov	r0, r4
 801fb30:	b003      	add	sp, #12
 801fb32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801fb36:	f7f9 bddd 	b.w	80196f4 <ucdr_deserialize_endian_uint16_t>
 801fb3a:	bf00      	nop

0801fb3c <uxr_serialize_CLIENT_Representation>:
 801fb3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fb40:	2204      	movs	r2, #4
 801fb42:	460e      	mov	r6, r1
 801fb44:	4605      	mov	r5, r0
 801fb46:	f7fe f817 	bl	801db78 <ucdr_serialize_array_uint8_t>
 801fb4a:	4607      	mov	r7, r0
 801fb4c:	2202      	movs	r2, #2
 801fb4e:	1d31      	adds	r1, r6, #4
 801fb50:	4628      	mov	r0, r5
 801fb52:	f7fe f811 	bl	801db78 <ucdr_serialize_array_uint8_t>
 801fb56:	4038      	ands	r0, r7
 801fb58:	2202      	movs	r2, #2
 801fb5a:	1db1      	adds	r1, r6, #6
 801fb5c:	b2c7      	uxtb	r7, r0
 801fb5e:	4628      	mov	r0, r5
 801fb60:	f7fe f80a 	bl	801db78 <ucdr_serialize_array_uint8_t>
 801fb64:	2204      	movs	r2, #4
 801fb66:	4007      	ands	r7, r0
 801fb68:	f106 0108 	add.w	r1, r6, #8
 801fb6c:	4628      	mov	r0, r5
 801fb6e:	f7fe f803 	bl	801db78 <ucdr_serialize_array_uint8_t>
 801fb72:	4007      	ands	r7, r0
 801fb74:	7b31      	ldrb	r1, [r6, #12]
 801fb76:	4628      	mov	r0, r5
 801fb78:	f7f9 fc1c 	bl	80193b4 <ucdr_serialize_uint8_t>
 801fb7c:	7b71      	ldrb	r1, [r6, #13]
 801fb7e:	4007      	ands	r7, r0
 801fb80:	4628      	mov	r0, r5
 801fb82:	f7f9 fbe9 	bl	8019358 <ucdr_serialize_bool>
 801fb86:	7b73      	ldrb	r3, [r6, #13]
 801fb88:	ea07 0800 	and.w	r8, r7, r0
 801fb8c:	b93b      	cbnz	r3, 801fb9e <uxr_serialize_CLIENT_Representation+0x62>
 801fb8e:	8bb1      	ldrh	r1, [r6, #28]
 801fb90:	4628      	mov	r0, r5
 801fb92:	f7f9 fc3b 	bl	801940c <ucdr_serialize_uint16_t>
 801fb96:	ea08 0000 	and.w	r0, r8, r0
 801fb9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fb9e:	6931      	ldr	r1, [r6, #16]
 801fba0:	4628      	mov	r0, r5
 801fba2:	f7f9 fe1d 	bl	80197e0 <ucdr_serialize_uint32_t>
 801fba6:	6933      	ldr	r3, [r6, #16]
 801fba8:	b1e3      	cbz	r3, 801fbe4 <uxr_serialize_CLIENT_Representation+0xa8>
 801fbaa:	b1c0      	cbz	r0, 801fbde <uxr_serialize_CLIENT_Representation+0xa2>
 801fbac:	4637      	mov	r7, r6
 801fbae:	f04f 0900 	mov.w	r9, #0
 801fbb2:	e000      	b.n	801fbb6 <uxr_serialize_CLIENT_Representation+0x7a>
 801fbb4:	b19c      	cbz	r4, 801fbde <uxr_serialize_CLIENT_Representation+0xa2>
 801fbb6:	6979      	ldr	r1, [r7, #20]
 801fbb8:	4628      	mov	r0, r5
 801fbba:	f005 fd93 	bl	80256e4 <ucdr_serialize_string>
 801fbbe:	69b9      	ldr	r1, [r7, #24]
 801fbc0:	4604      	mov	r4, r0
 801fbc2:	4628      	mov	r0, r5
 801fbc4:	f005 fd8e 	bl	80256e4 <ucdr_serialize_string>
 801fbc8:	f109 0901 	add.w	r9, r9, #1
 801fbcc:	6933      	ldr	r3, [r6, #16]
 801fbce:	4004      	ands	r4, r0
 801fbd0:	3708      	adds	r7, #8
 801fbd2:	4599      	cmp	r9, r3
 801fbd4:	b2e4      	uxtb	r4, r4
 801fbd6:	d3ed      	bcc.n	801fbb4 <uxr_serialize_CLIENT_Representation+0x78>
 801fbd8:	ea08 0804 	and.w	r8, r8, r4
 801fbdc:	e7d7      	b.n	801fb8e <uxr_serialize_CLIENT_Representation+0x52>
 801fbde:	f04f 0800 	mov.w	r8, #0
 801fbe2:	e7d4      	b.n	801fb8e <uxr_serialize_CLIENT_Representation+0x52>
 801fbe4:	ea08 0800 	and.w	r8, r8, r0
 801fbe8:	e7d1      	b.n	801fb8e <uxr_serialize_CLIENT_Representation+0x52>
 801fbea:	bf00      	nop

0801fbec <uxr_deserialize_CLIENT_Representation>:
 801fbec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fbf0:	2204      	movs	r2, #4
 801fbf2:	460c      	mov	r4, r1
 801fbf4:	4605      	mov	r5, r0
 801fbf6:	f7fe f823 	bl	801dc40 <ucdr_deserialize_array_uint8_t>
 801fbfa:	4607      	mov	r7, r0
 801fbfc:	2202      	movs	r2, #2
 801fbfe:	1d21      	adds	r1, r4, #4
 801fc00:	4628      	mov	r0, r5
 801fc02:	f7fe f81d 	bl	801dc40 <ucdr_deserialize_array_uint8_t>
 801fc06:	4038      	ands	r0, r7
 801fc08:	2202      	movs	r2, #2
 801fc0a:	1da1      	adds	r1, r4, #6
 801fc0c:	b2c6      	uxtb	r6, r0
 801fc0e:	4628      	mov	r0, r5
 801fc10:	f7fe f816 	bl	801dc40 <ucdr_deserialize_array_uint8_t>
 801fc14:	2204      	movs	r2, #4
 801fc16:	4006      	ands	r6, r0
 801fc18:	f104 0108 	add.w	r1, r4, #8
 801fc1c:	4628      	mov	r0, r5
 801fc1e:	f7fe f80f 	bl	801dc40 <ucdr_deserialize_array_uint8_t>
 801fc22:	4006      	ands	r6, r0
 801fc24:	f104 010c 	add.w	r1, r4, #12
 801fc28:	4628      	mov	r0, r5
 801fc2a:	f7f9 fbd9 	bl	80193e0 <ucdr_deserialize_uint8_t>
 801fc2e:	f104 010d 	add.w	r1, r4, #13
 801fc32:	ea06 0700 	and.w	r7, r6, r0
 801fc36:	4628      	mov	r0, r5
 801fc38:	f7f9 fba4 	bl	8019384 <ucdr_deserialize_bool>
 801fc3c:	7b63      	ldrb	r3, [r4, #13]
 801fc3e:	4007      	ands	r7, r0
 801fc40:	b93b      	cbnz	r3, 801fc52 <uxr_deserialize_CLIENT_Representation+0x66>
 801fc42:	f104 011c 	add.w	r1, r4, #28
 801fc46:	4628      	mov	r0, r5
 801fc48:	f7f9 fce0 	bl	801960c <ucdr_deserialize_uint16_t>
 801fc4c:	4038      	ands	r0, r7
 801fc4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fc52:	f104 0110 	add.w	r1, r4, #16
 801fc56:	4628      	mov	r0, r5
 801fc58:	f7f9 fef2 	bl	8019a40 <ucdr_deserialize_uint32_t>
 801fc5c:	6923      	ldr	r3, [r4, #16]
 801fc5e:	2b01      	cmp	r3, #1
 801fc60:	d903      	bls.n	801fc6a <uxr_deserialize_CLIENT_Representation+0x7e>
 801fc62:	2301      	movs	r3, #1
 801fc64:	2700      	movs	r7, #0
 801fc66:	75ab      	strb	r3, [r5, #22]
 801fc68:	e7eb      	b.n	801fc42 <uxr_deserialize_CLIENT_Representation+0x56>
 801fc6a:	b30b      	cbz	r3, 801fcb0 <uxr_deserialize_CLIENT_Representation+0xc4>
 801fc6c:	b1f0      	cbz	r0, 801fcac <uxr_deserialize_CLIENT_Representation+0xc0>
 801fc6e:	46a0      	mov	r8, r4
 801fc70:	f04f 0900 	mov.w	r9, #0
 801fc74:	e000      	b.n	801fc78 <uxr_deserialize_CLIENT_Representation+0x8c>
 801fc76:	b1ce      	cbz	r6, 801fcac <uxr_deserialize_CLIENT_Representation+0xc0>
 801fc78:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801fc7c:	f108 0808 	add.w	r8, r8, #8
 801fc80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801fc84:	4628      	mov	r0, r5
 801fc86:	f005 fd3d 	bl	8025704 <ucdr_deserialize_string>
 801fc8a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801fc8e:	4606      	mov	r6, r0
 801fc90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801fc94:	4628      	mov	r0, r5
 801fc96:	f109 0901 	add.w	r9, r9, #1
 801fc9a:	f005 fd33 	bl	8025704 <ucdr_deserialize_string>
 801fc9e:	6923      	ldr	r3, [r4, #16]
 801fca0:	4006      	ands	r6, r0
 801fca2:	4599      	cmp	r9, r3
 801fca4:	b2f6      	uxtb	r6, r6
 801fca6:	d3e6      	bcc.n	801fc76 <uxr_deserialize_CLIENT_Representation+0x8a>
 801fca8:	4037      	ands	r7, r6
 801fcaa:	e7ca      	b.n	801fc42 <uxr_deserialize_CLIENT_Representation+0x56>
 801fcac:	2700      	movs	r7, #0
 801fcae:	e7c8      	b.n	801fc42 <uxr_deserialize_CLIENT_Representation+0x56>
 801fcb0:	4007      	ands	r7, r0
 801fcb2:	e7c6      	b.n	801fc42 <uxr_deserialize_CLIENT_Representation+0x56>

0801fcb4 <uxr_serialize_AGENT_Representation>:
 801fcb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fcb8:	2204      	movs	r2, #4
 801fcba:	460f      	mov	r7, r1
 801fcbc:	4605      	mov	r5, r0
 801fcbe:	f7fd ff5b 	bl	801db78 <ucdr_serialize_array_uint8_t>
 801fcc2:	4604      	mov	r4, r0
 801fcc4:	2202      	movs	r2, #2
 801fcc6:	1d39      	adds	r1, r7, #4
 801fcc8:	4628      	mov	r0, r5
 801fcca:	f7fd ff55 	bl	801db78 <ucdr_serialize_array_uint8_t>
 801fcce:	4020      	ands	r0, r4
 801fcd0:	2202      	movs	r2, #2
 801fcd2:	1db9      	adds	r1, r7, #6
 801fcd4:	b2c4      	uxtb	r4, r0
 801fcd6:	4628      	mov	r0, r5
 801fcd8:	f7fd ff4e 	bl	801db78 <ucdr_serialize_array_uint8_t>
 801fcdc:	7a39      	ldrb	r1, [r7, #8]
 801fcde:	4004      	ands	r4, r0
 801fce0:	4628      	mov	r0, r5
 801fce2:	f7f9 fb39 	bl	8019358 <ucdr_serialize_bool>
 801fce6:	7a3b      	ldrb	r3, [r7, #8]
 801fce8:	ea00 0804 	and.w	r8, r0, r4
 801fcec:	b913      	cbnz	r3, 801fcf4 <uxr_serialize_AGENT_Representation+0x40>
 801fcee:	4640      	mov	r0, r8
 801fcf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fcf4:	68f9      	ldr	r1, [r7, #12]
 801fcf6:	4628      	mov	r0, r5
 801fcf8:	f7f9 fd72 	bl	80197e0 <ucdr_serialize_uint32_t>
 801fcfc:	68fb      	ldr	r3, [r7, #12]
 801fcfe:	b303      	cbz	r3, 801fd42 <uxr_serialize_AGENT_Representation+0x8e>
 801fd00:	b1d0      	cbz	r0, 801fd38 <uxr_serialize_AGENT_Representation+0x84>
 801fd02:	463e      	mov	r6, r7
 801fd04:	f04f 0900 	mov.w	r9, #0
 801fd08:	e000      	b.n	801fd0c <uxr_serialize_AGENT_Representation+0x58>
 801fd0a:	b1ac      	cbz	r4, 801fd38 <uxr_serialize_AGENT_Representation+0x84>
 801fd0c:	6931      	ldr	r1, [r6, #16]
 801fd0e:	4628      	mov	r0, r5
 801fd10:	f005 fce8 	bl	80256e4 <ucdr_serialize_string>
 801fd14:	6971      	ldr	r1, [r6, #20]
 801fd16:	4604      	mov	r4, r0
 801fd18:	4628      	mov	r0, r5
 801fd1a:	f005 fce3 	bl	80256e4 <ucdr_serialize_string>
 801fd1e:	f109 0901 	add.w	r9, r9, #1
 801fd22:	68fb      	ldr	r3, [r7, #12]
 801fd24:	4004      	ands	r4, r0
 801fd26:	3608      	adds	r6, #8
 801fd28:	4599      	cmp	r9, r3
 801fd2a:	b2e4      	uxtb	r4, r4
 801fd2c:	d3ed      	bcc.n	801fd0a <uxr_serialize_AGENT_Representation+0x56>
 801fd2e:	ea08 0804 	and.w	r8, r8, r4
 801fd32:	4640      	mov	r0, r8
 801fd34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fd38:	f04f 0800 	mov.w	r8, #0
 801fd3c:	4640      	mov	r0, r8
 801fd3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fd42:	ea08 0800 	and.w	r8, r8, r0
 801fd46:	e7d2      	b.n	801fcee <uxr_serialize_AGENT_Representation+0x3a>

0801fd48 <uxr_serialize_DATAWRITER_Representation>:
 801fd48:	b570      	push	{r4, r5, r6, lr}
 801fd4a:	460d      	mov	r5, r1
 801fd4c:	7809      	ldrb	r1, [r1, #0]
 801fd4e:	4606      	mov	r6, r0
 801fd50:	f7f9 fb30 	bl	80193b4 <ucdr_serialize_uint8_t>
 801fd54:	4604      	mov	r4, r0
 801fd56:	b130      	cbz	r0, 801fd66 <uxr_serialize_DATAWRITER_Representation+0x1e>
 801fd58:	782b      	ldrb	r3, [r5, #0]
 801fd5a:	2b02      	cmp	r3, #2
 801fd5c:	d00c      	beq.n	801fd78 <uxr_serialize_DATAWRITER_Representation+0x30>
 801fd5e:	2b03      	cmp	r3, #3
 801fd60:	d010      	beq.n	801fd84 <uxr_serialize_DATAWRITER_Representation+0x3c>
 801fd62:	2b01      	cmp	r3, #1
 801fd64:	d008      	beq.n	801fd78 <uxr_serialize_DATAWRITER_Representation+0x30>
 801fd66:	2202      	movs	r2, #2
 801fd68:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801fd6c:	4630      	mov	r0, r6
 801fd6e:	f7fd ff03 	bl	801db78 <ucdr_serialize_array_uint8_t>
 801fd72:	4020      	ands	r0, r4
 801fd74:	b2c0      	uxtb	r0, r0
 801fd76:	bd70      	pop	{r4, r5, r6, pc}
 801fd78:	6869      	ldr	r1, [r5, #4]
 801fd7a:	4630      	mov	r0, r6
 801fd7c:	f005 fcb2 	bl	80256e4 <ucdr_serialize_string>
 801fd80:	4604      	mov	r4, r0
 801fd82:	e7f0      	b.n	801fd66 <uxr_serialize_DATAWRITER_Representation+0x1e>
 801fd84:	4629      	mov	r1, r5
 801fd86:	4630      	mov	r0, r6
 801fd88:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801fd8c:	3104      	adds	r1, #4
 801fd8e:	f7fa fe93 	bl	801aab8 <ucdr_serialize_sequence_uint8_t>
 801fd92:	4604      	mov	r4, r0
 801fd94:	e7e7      	b.n	801fd66 <uxr_serialize_DATAWRITER_Representation+0x1e>
 801fd96:	bf00      	nop

0801fd98 <uxr_serialize_ObjectVariant.part.0>:
 801fd98:	b570      	push	{r4, r5, r6, lr}
 801fd9a:	780b      	ldrb	r3, [r1, #0]
 801fd9c:	460c      	mov	r4, r1
 801fd9e:	4605      	mov	r5, r0
 801fda0:	3b01      	subs	r3, #1
 801fda2:	2b0d      	cmp	r3, #13
 801fda4:	d854      	bhi.n	801fe50 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801fda6:	e8df f003 	tbb	[pc, r3]
 801fdaa:	0730      	.short	0x0730
 801fdac:	07071b1b 	.word	0x07071b1b
 801fdb0:	0c530707 	.word	0x0c530707
 801fdb4:	494e0c0c 	.word	0x494e0c0c
 801fdb8:	3104      	adds	r1, #4
 801fdba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fdbe:	f7ff bfc3 	b.w	801fd48 <uxr_serialize_DATAWRITER_Representation>
 801fdc2:	7909      	ldrb	r1, [r1, #4]
 801fdc4:	f7f9 faf6 	bl	80193b4 <ucdr_serialize_uint8_t>
 801fdc8:	b1e8      	cbz	r0, 801fe06 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801fdca:	7923      	ldrb	r3, [r4, #4]
 801fdcc:	2b01      	cmp	r3, #1
 801fdce:	d001      	beq.n	801fdd4 <uxr_serialize_ObjectVariant.part.0+0x3c>
 801fdd0:	2b02      	cmp	r3, #2
 801fdd2:	d13d      	bne.n	801fe50 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801fdd4:	68a1      	ldr	r1, [r4, #8]
 801fdd6:	4628      	mov	r0, r5
 801fdd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fddc:	f005 bc82 	b.w	80256e4 <ucdr_serialize_string>
 801fde0:	7909      	ldrb	r1, [r1, #4]
 801fde2:	f7f9 fae7 	bl	80193b4 <ucdr_serialize_uint8_t>
 801fde6:	4606      	mov	r6, r0
 801fde8:	b120      	cbz	r0, 801fdf4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801fdea:	7923      	ldrb	r3, [r4, #4]
 801fdec:	2b02      	cmp	r3, #2
 801fdee:	d039      	beq.n	801fe64 <uxr_serialize_ObjectVariant.part.0+0xcc>
 801fdf0:	2b03      	cmp	r3, #3
 801fdf2:	d02f      	beq.n	801fe54 <uxr_serialize_ObjectVariant.part.0+0xbc>
 801fdf4:	2202      	movs	r2, #2
 801fdf6:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801fdfa:	4628      	mov	r0, r5
 801fdfc:	f7fd febc 	bl	801db78 <ucdr_serialize_array_uint8_t>
 801fe00:	4030      	ands	r0, r6
 801fe02:	b2c0      	uxtb	r0, r0
 801fe04:	bd70      	pop	{r4, r5, r6, pc}
 801fe06:	2000      	movs	r0, #0
 801fe08:	bd70      	pop	{r4, r5, r6, pc}
 801fe0a:	7909      	ldrb	r1, [r1, #4]
 801fe0c:	f7f9 fad2 	bl	80193b4 <ucdr_serialize_uint8_t>
 801fe10:	4606      	mov	r6, r0
 801fe12:	b158      	cbz	r0, 801fe2c <uxr_serialize_ObjectVariant.part.0+0x94>
 801fe14:	7923      	ldrb	r3, [r4, #4]
 801fe16:	2b02      	cmp	r3, #2
 801fe18:	d003      	beq.n	801fe22 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801fe1a:	2b03      	cmp	r3, #3
 801fe1c:	d028      	beq.n	801fe70 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801fe1e:	2b01      	cmp	r3, #1
 801fe20:	d104      	bne.n	801fe2c <uxr_serialize_ObjectVariant.part.0+0x94>
 801fe22:	68a1      	ldr	r1, [r4, #8]
 801fe24:	4628      	mov	r0, r5
 801fe26:	f005 fc5d 	bl	80256e4 <ucdr_serialize_string>
 801fe2a:	4606      	mov	r6, r0
 801fe2c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 801fe30:	4628      	mov	r0, r5
 801fe32:	f7f9 fffb 	bl	8019e2c <ucdr_serialize_int16_t>
 801fe36:	4030      	ands	r0, r6
 801fe38:	b2c0      	uxtb	r0, r0
 801fe3a:	bd70      	pop	{r4, r5, r6, pc}
 801fe3c:	3104      	adds	r1, #4
 801fe3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fe42:	f7ff be7b 	b.w	801fb3c <uxr_serialize_CLIENT_Representation>
 801fe46:	3104      	adds	r1, #4
 801fe48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fe4c:	f7ff bf32 	b.w	801fcb4 <uxr_serialize_AGENT_Representation>
 801fe50:	2001      	movs	r0, #1
 801fe52:	bd70      	pop	{r4, r5, r6, pc}
 801fe54:	68a2      	ldr	r2, [r4, #8]
 801fe56:	f104 010c 	add.w	r1, r4, #12
 801fe5a:	4628      	mov	r0, r5
 801fe5c:	f7fa fe2c 	bl	801aab8 <ucdr_serialize_sequence_uint8_t>
 801fe60:	4606      	mov	r6, r0
 801fe62:	e7c7      	b.n	801fdf4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801fe64:	68a1      	ldr	r1, [r4, #8]
 801fe66:	4628      	mov	r0, r5
 801fe68:	f005 fc3c 	bl	80256e4 <ucdr_serialize_string>
 801fe6c:	4606      	mov	r6, r0
 801fe6e:	e7c1      	b.n	801fdf4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801fe70:	68a2      	ldr	r2, [r4, #8]
 801fe72:	f104 010c 	add.w	r1, r4, #12
 801fe76:	4628      	mov	r0, r5
 801fe78:	f7fa fe1e 	bl	801aab8 <ucdr_serialize_sequence_uint8_t>
 801fe7c:	4606      	mov	r6, r0
 801fe7e:	e7d5      	b.n	801fe2c <uxr_serialize_ObjectVariant.part.0+0x94>

0801fe80 <uxr_deserialize_DATAWRITER_Representation>:
 801fe80:	b570      	push	{r4, r5, r6, lr}
 801fe82:	4606      	mov	r6, r0
 801fe84:	460d      	mov	r5, r1
 801fe86:	f7f9 faab 	bl	80193e0 <ucdr_deserialize_uint8_t>
 801fe8a:	4604      	mov	r4, r0
 801fe8c:	b130      	cbz	r0, 801fe9c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801fe8e:	782b      	ldrb	r3, [r5, #0]
 801fe90:	2b02      	cmp	r3, #2
 801fe92:	d00c      	beq.n	801feae <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801fe94:	2b03      	cmp	r3, #3
 801fe96:	d012      	beq.n	801febe <uxr_deserialize_DATAWRITER_Representation+0x3e>
 801fe98:	2b01      	cmp	r3, #1
 801fe9a:	d008      	beq.n	801feae <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801fe9c:	2202      	movs	r2, #2
 801fe9e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801fea2:	4630      	mov	r0, r6
 801fea4:	f7fd fecc 	bl	801dc40 <ucdr_deserialize_array_uint8_t>
 801fea8:	4020      	ands	r0, r4
 801feaa:	b2c0      	uxtb	r0, r0
 801feac:	bd70      	pop	{r4, r5, r6, pc}
 801feae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801feb2:	6869      	ldr	r1, [r5, #4]
 801feb4:	4630      	mov	r0, r6
 801feb6:	f005 fc25 	bl	8025704 <ucdr_deserialize_string>
 801feba:	4604      	mov	r4, r0
 801febc:	e7ee      	b.n	801fe9c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801febe:	1d2b      	adds	r3, r5, #4
 801fec0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801fec4:	f105 0108 	add.w	r1, r5, #8
 801fec8:	4630      	mov	r0, r6
 801feca:	f7fa fe07 	bl	801aadc <ucdr_deserialize_sequence_uint8_t>
 801fece:	4604      	mov	r4, r0
 801fed0:	e7e4      	b.n	801fe9c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801fed2:	bf00      	nop

0801fed4 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801fed4:	b570      	push	{r4, r5, r6, lr}
 801fed6:	460d      	mov	r5, r1
 801fed8:	7809      	ldrb	r1, [r1, #0]
 801feda:	4606      	mov	r6, r0
 801fedc:	f7f9 fa3c 	bl	8019358 <ucdr_serialize_bool>
 801fee0:	782b      	ldrb	r3, [r5, #0]
 801fee2:	4604      	mov	r4, r0
 801fee4:	b94b      	cbnz	r3, 801fefa <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801fee6:	7a29      	ldrb	r1, [r5, #8]
 801fee8:	4630      	mov	r0, r6
 801feea:	f7f9 fa35 	bl	8019358 <ucdr_serialize_bool>
 801feee:	7a2b      	ldrb	r3, [r5, #8]
 801fef0:	4004      	ands	r4, r0
 801fef2:	b2e4      	uxtb	r4, r4
 801fef4:	b943      	cbnz	r3, 801ff08 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801fef6:	4620      	mov	r0, r4
 801fef8:	bd70      	pop	{r4, r5, r6, pc}
 801fefa:	6869      	ldr	r1, [r5, #4]
 801fefc:	4630      	mov	r0, r6
 801fefe:	f005 fbf1 	bl	80256e4 <ucdr_serialize_string>
 801ff02:	4004      	ands	r4, r0
 801ff04:	b2e4      	uxtb	r4, r4
 801ff06:	e7ee      	b.n	801fee6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801ff08:	68e9      	ldr	r1, [r5, #12]
 801ff0a:	4630      	mov	r0, r6
 801ff0c:	f005 fbea 	bl	80256e4 <ucdr_serialize_string>
 801ff10:	4004      	ands	r4, r0
 801ff12:	4620      	mov	r0, r4
 801ff14:	bd70      	pop	{r4, r5, r6, pc}
 801ff16:	bf00      	nop

0801ff18 <uxr_serialize_OBJK_Topic_Binary>:
 801ff18:	b570      	push	{r4, r5, r6, lr}
 801ff1a:	460d      	mov	r5, r1
 801ff1c:	4606      	mov	r6, r0
 801ff1e:	6809      	ldr	r1, [r1, #0]
 801ff20:	f005 fbe0 	bl	80256e4 <ucdr_serialize_string>
 801ff24:	4604      	mov	r4, r0
 801ff26:	7929      	ldrb	r1, [r5, #4]
 801ff28:	4630      	mov	r0, r6
 801ff2a:	f7f9 fa15 	bl	8019358 <ucdr_serialize_bool>
 801ff2e:	792b      	ldrb	r3, [r5, #4]
 801ff30:	4004      	ands	r4, r0
 801ff32:	b2e4      	uxtb	r4, r4
 801ff34:	b943      	cbnz	r3, 801ff48 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801ff36:	7b29      	ldrb	r1, [r5, #12]
 801ff38:	4630      	mov	r0, r6
 801ff3a:	f7f9 fa0d 	bl	8019358 <ucdr_serialize_bool>
 801ff3e:	7b2b      	ldrb	r3, [r5, #12]
 801ff40:	4004      	ands	r4, r0
 801ff42:	b93b      	cbnz	r3, 801ff54 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801ff44:	4620      	mov	r0, r4
 801ff46:	bd70      	pop	{r4, r5, r6, pc}
 801ff48:	68a9      	ldr	r1, [r5, #8]
 801ff4a:	4630      	mov	r0, r6
 801ff4c:	f005 fbca 	bl	80256e4 <ucdr_serialize_string>
 801ff50:	4004      	ands	r4, r0
 801ff52:	e7f0      	b.n	801ff36 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801ff54:	6929      	ldr	r1, [r5, #16]
 801ff56:	4630      	mov	r0, r6
 801ff58:	f005 fbc4 	bl	80256e4 <ucdr_serialize_string>
 801ff5c:	4004      	ands	r4, r0
 801ff5e:	b2e4      	uxtb	r4, r4
 801ff60:	4620      	mov	r0, r4
 801ff62:	bd70      	pop	{r4, r5, r6, pc}

0801ff64 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801ff64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff68:	460c      	mov	r4, r1
 801ff6a:	7809      	ldrb	r1, [r1, #0]
 801ff6c:	4606      	mov	r6, r0
 801ff6e:	f7f9 f9f3 	bl	8019358 <ucdr_serialize_bool>
 801ff72:	7823      	ldrb	r3, [r4, #0]
 801ff74:	4605      	mov	r5, r0
 801ff76:	b96b      	cbnz	r3, 801ff94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 801ff78:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801ff7c:	4630      	mov	r0, r6
 801ff7e:	f7f9 f9eb 	bl	8019358 <ucdr_serialize_bool>
 801ff82:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801ff86:	4005      	ands	r5, r0
 801ff88:	b2ed      	uxtb	r5, r5
 801ff8a:	2b00      	cmp	r3, #0
 801ff8c:	d169      	bne.n	8020062 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801ff8e:	4628      	mov	r0, r5
 801ff90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff94:	6861      	ldr	r1, [r4, #4]
 801ff96:	4630      	mov	r0, r6
 801ff98:	f7f9 fc22 	bl	80197e0 <ucdr_serialize_uint32_t>
 801ff9c:	6863      	ldr	r3, [r4, #4]
 801ff9e:	2b00      	cmp	r3, #0
 801ffa0:	d06b      	beq.n	802007a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801ffa2:	2800      	cmp	r0, #0
 801ffa4:	d067      	beq.n	8020076 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801ffa6:	68a1      	ldr	r1, [r4, #8]
 801ffa8:	4630      	mov	r0, r6
 801ffaa:	f005 fb9b 	bl	80256e4 <ucdr_serialize_string>
 801ffae:	6863      	ldr	r3, [r4, #4]
 801ffb0:	2b01      	cmp	r3, #1
 801ffb2:	d953      	bls.n	802005c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801ffb4:	2800      	cmp	r0, #0
 801ffb6:	d05e      	beq.n	8020076 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801ffb8:	68e1      	ldr	r1, [r4, #12]
 801ffba:	4630      	mov	r0, r6
 801ffbc:	f005 fb92 	bl	80256e4 <ucdr_serialize_string>
 801ffc0:	6863      	ldr	r3, [r4, #4]
 801ffc2:	2b02      	cmp	r3, #2
 801ffc4:	d94a      	bls.n	802005c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801ffc6:	2800      	cmp	r0, #0
 801ffc8:	d055      	beq.n	8020076 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801ffca:	6921      	ldr	r1, [r4, #16]
 801ffcc:	4630      	mov	r0, r6
 801ffce:	f005 fb89 	bl	80256e4 <ucdr_serialize_string>
 801ffd2:	6863      	ldr	r3, [r4, #4]
 801ffd4:	2b03      	cmp	r3, #3
 801ffd6:	d941      	bls.n	802005c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801ffd8:	2800      	cmp	r0, #0
 801ffda:	d04c      	beq.n	8020076 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801ffdc:	6961      	ldr	r1, [r4, #20]
 801ffde:	4630      	mov	r0, r6
 801ffe0:	f005 fb80 	bl	80256e4 <ucdr_serialize_string>
 801ffe4:	6863      	ldr	r3, [r4, #4]
 801ffe6:	2b04      	cmp	r3, #4
 801ffe8:	d938      	bls.n	802005c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801ffea:	2800      	cmp	r0, #0
 801ffec:	d043      	beq.n	8020076 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801ffee:	69a1      	ldr	r1, [r4, #24]
 801fff0:	4630      	mov	r0, r6
 801fff2:	f005 fb77 	bl	80256e4 <ucdr_serialize_string>
 801fff6:	6863      	ldr	r3, [r4, #4]
 801fff8:	2b05      	cmp	r3, #5
 801fffa:	d92f      	bls.n	802005c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801fffc:	2800      	cmp	r0, #0
 801fffe:	d03a      	beq.n	8020076 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8020000:	69e1      	ldr	r1, [r4, #28]
 8020002:	4630      	mov	r0, r6
 8020004:	f005 fb6e 	bl	80256e4 <ucdr_serialize_string>
 8020008:	6863      	ldr	r3, [r4, #4]
 802000a:	2b06      	cmp	r3, #6
 802000c:	d926      	bls.n	802005c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 802000e:	b390      	cbz	r0, 8020076 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8020010:	6a21      	ldr	r1, [r4, #32]
 8020012:	4630      	mov	r0, r6
 8020014:	f005 fb66 	bl	80256e4 <ucdr_serialize_string>
 8020018:	6863      	ldr	r3, [r4, #4]
 802001a:	2b07      	cmp	r3, #7
 802001c:	d91e      	bls.n	802005c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 802001e:	b350      	cbz	r0, 8020076 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8020020:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8020022:	4630      	mov	r0, r6
 8020024:	f005 fb5e 	bl	80256e4 <ucdr_serialize_string>
 8020028:	6863      	ldr	r3, [r4, #4]
 802002a:	2b08      	cmp	r3, #8
 802002c:	d916      	bls.n	802005c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 802002e:	b310      	cbz	r0, 8020076 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8020030:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8020032:	4630      	mov	r0, r6
 8020034:	f005 fb56 	bl	80256e4 <ucdr_serialize_string>
 8020038:	6863      	ldr	r3, [r4, #4]
 802003a:	2b09      	cmp	r3, #9
 802003c:	d90e      	bls.n	802005c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 802003e:	b1d0      	cbz	r0, 8020076 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8020040:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8020044:	2709      	movs	r7, #9
 8020046:	e000      	b.n	802004a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8020048:	b1a8      	cbz	r0, 8020076 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 802004a:	f858 1b04 	ldr.w	r1, [r8], #4
 802004e:	4630      	mov	r0, r6
 8020050:	f005 fb48 	bl	80256e4 <ucdr_serialize_string>
 8020054:	3701      	adds	r7, #1
 8020056:	6862      	ldr	r2, [r4, #4]
 8020058:	4297      	cmp	r7, r2
 802005a:	d3f5      	bcc.n	8020048 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 802005c:	4005      	ands	r5, r0
 802005e:	b2ed      	uxtb	r5, r5
 8020060:	e78a      	b.n	801ff78 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8020062:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8020064:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8020068:	4630      	mov	r0, r6
 802006a:	f7fa fd25 	bl	801aab8 <ucdr_serialize_sequence_uint8_t>
 802006e:	4005      	ands	r5, r0
 8020070:	4628      	mov	r0, r5
 8020072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020076:	2500      	movs	r5, #0
 8020078:	e77e      	b.n	801ff78 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 802007a:	4028      	ands	r0, r5
 802007c:	b2c5      	uxtb	r5, r0
 802007e:	e77b      	b.n	801ff78 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08020080 <uxr_serialize_OBJK_Publisher_Binary>:
 8020080:	b570      	push	{r4, r5, r6, lr}
 8020082:	460d      	mov	r5, r1
 8020084:	7809      	ldrb	r1, [r1, #0]
 8020086:	4606      	mov	r6, r0
 8020088:	f7f9 f966 	bl	8019358 <ucdr_serialize_bool>
 802008c:	782b      	ldrb	r3, [r5, #0]
 802008e:	4604      	mov	r4, r0
 8020090:	b94b      	cbnz	r3, 80200a6 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8020092:	7a29      	ldrb	r1, [r5, #8]
 8020094:	4630      	mov	r0, r6
 8020096:	f7f9 f95f 	bl	8019358 <ucdr_serialize_bool>
 802009a:	7a2b      	ldrb	r3, [r5, #8]
 802009c:	4004      	ands	r4, r0
 802009e:	b2e4      	uxtb	r4, r4
 80200a0:	b943      	cbnz	r3, 80200b4 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80200a2:	4620      	mov	r0, r4
 80200a4:	bd70      	pop	{r4, r5, r6, pc}
 80200a6:	6869      	ldr	r1, [r5, #4]
 80200a8:	4630      	mov	r0, r6
 80200aa:	f005 fb1b 	bl	80256e4 <ucdr_serialize_string>
 80200ae:	4004      	ands	r4, r0
 80200b0:	b2e4      	uxtb	r4, r4
 80200b2:	e7ee      	b.n	8020092 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80200b4:	f105 010c 	add.w	r1, r5, #12
 80200b8:	4630      	mov	r0, r6
 80200ba:	f7ff ff53 	bl	801ff64 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80200be:	4004      	ands	r4, r0
 80200c0:	4620      	mov	r0, r4
 80200c2:	bd70      	pop	{r4, r5, r6, pc}

080200c4 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 80200c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80200c8:	460c      	mov	r4, r1
 80200ca:	7809      	ldrb	r1, [r1, #0]
 80200cc:	4606      	mov	r6, r0
 80200ce:	f7f9 f943 	bl	8019358 <ucdr_serialize_bool>
 80200d2:	7823      	ldrb	r3, [r4, #0]
 80200d4:	4605      	mov	r5, r0
 80200d6:	b96b      	cbnz	r3, 80200f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 80200d8:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80200dc:	4630      	mov	r0, r6
 80200de:	f7f9 f93b 	bl	8019358 <ucdr_serialize_bool>
 80200e2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80200e6:	4005      	ands	r5, r0
 80200e8:	b2ed      	uxtb	r5, r5
 80200ea:	2b00      	cmp	r3, #0
 80200ec:	d169      	bne.n	80201c2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 80200ee:	4628      	mov	r0, r5
 80200f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80200f4:	6861      	ldr	r1, [r4, #4]
 80200f6:	4630      	mov	r0, r6
 80200f8:	f7f9 fb72 	bl	80197e0 <ucdr_serialize_uint32_t>
 80200fc:	6863      	ldr	r3, [r4, #4]
 80200fe:	2b00      	cmp	r3, #0
 8020100:	d06b      	beq.n	80201da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8020102:	2800      	cmp	r0, #0
 8020104:	d067      	beq.n	80201d6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8020106:	68a1      	ldr	r1, [r4, #8]
 8020108:	4630      	mov	r0, r6
 802010a:	f005 faeb 	bl	80256e4 <ucdr_serialize_string>
 802010e:	6863      	ldr	r3, [r4, #4]
 8020110:	2b01      	cmp	r3, #1
 8020112:	d953      	bls.n	80201bc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8020114:	2800      	cmp	r0, #0
 8020116:	d05e      	beq.n	80201d6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8020118:	68e1      	ldr	r1, [r4, #12]
 802011a:	4630      	mov	r0, r6
 802011c:	f005 fae2 	bl	80256e4 <ucdr_serialize_string>
 8020120:	6863      	ldr	r3, [r4, #4]
 8020122:	2b02      	cmp	r3, #2
 8020124:	d94a      	bls.n	80201bc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8020126:	2800      	cmp	r0, #0
 8020128:	d055      	beq.n	80201d6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 802012a:	6921      	ldr	r1, [r4, #16]
 802012c:	4630      	mov	r0, r6
 802012e:	f005 fad9 	bl	80256e4 <ucdr_serialize_string>
 8020132:	6863      	ldr	r3, [r4, #4]
 8020134:	2b03      	cmp	r3, #3
 8020136:	d941      	bls.n	80201bc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8020138:	2800      	cmp	r0, #0
 802013a:	d04c      	beq.n	80201d6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 802013c:	6961      	ldr	r1, [r4, #20]
 802013e:	4630      	mov	r0, r6
 8020140:	f005 fad0 	bl	80256e4 <ucdr_serialize_string>
 8020144:	6863      	ldr	r3, [r4, #4]
 8020146:	2b04      	cmp	r3, #4
 8020148:	d938      	bls.n	80201bc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 802014a:	2800      	cmp	r0, #0
 802014c:	d043      	beq.n	80201d6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 802014e:	69a1      	ldr	r1, [r4, #24]
 8020150:	4630      	mov	r0, r6
 8020152:	f005 fac7 	bl	80256e4 <ucdr_serialize_string>
 8020156:	6863      	ldr	r3, [r4, #4]
 8020158:	2b05      	cmp	r3, #5
 802015a:	d92f      	bls.n	80201bc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 802015c:	2800      	cmp	r0, #0
 802015e:	d03a      	beq.n	80201d6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8020160:	69e1      	ldr	r1, [r4, #28]
 8020162:	4630      	mov	r0, r6
 8020164:	f005 fabe 	bl	80256e4 <ucdr_serialize_string>
 8020168:	6863      	ldr	r3, [r4, #4]
 802016a:	2b06      	cmp	r3, #6
 802016c:	d926      	bls.n	80201bc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 802016e:	b390      	cbz	r0, 80201d6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8020170:	6a21      	ldr	r1, [r4, #32]
 8020172:	4630      	mov	r0, r6
 8020174:	f005 fab6 	bl	80256e4 <ucdr_serialize_string>
 8020178:	6863      	ldr	r3, [r4, #4]
 802017a:	2b07      	cmp	r3, #7
 802017c:	d91e      	bls.n	80201bc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 802017e:	b350      	cbz	r0, 80201d6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8020180:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8020182:	4630      	mov	r0, r6
 8020184:	f005 faae 	bl	80256e4 <ucdr_serialize_string>
 8020188:	6863      	ldr	r3, [r4, #4]
 802018a:	2b08      	cmp	r3, #8
 802018c:	d916      	bls.n	80201bc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 802018e:	b310      	cbz	r0, 80201d6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8020190:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8020192:	4630      	mov	r0, r6
 8020194:	f005 faa6 	bl	80256e4 <ucdr_serialize_string>
 8020198:	6863      	ldr	r3, [r4, #4]
 802019a:	2b09      	cmp	r3, #9
 802019c:	d90e      	bls.n	80201bc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 802019e:	b1d0      	cbz	r0, 80201d6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80201a0:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80201a4:	2709      	movs	r7, #9
 80201a6:	e000      	b.n	80201aa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 80201a8:	b1a8      	cbz	r0, 80201d6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80201aa:	f858 1b04 	ldr.w	r1, [r8], #4
 80201ae:	4630      	mov	r0, r6
 80201b0:	f005 fa98 	bl	80256e4 <ucdr_serialize_string>
 80201b4:	3701      	adds	r7, #1
 80201b6:	6862      	ldr	r2, [r4, #4]
 80201b8:	4297      	cmp	r7, r2
 80201ba:	d3f5      	bcc.n	80201a8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 80201bc:	4005      	ands	r5, r0
 80201be:	b2ed      	uxtb	r5, r5
 80201c0:	e78a      	b.n	80200d8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80201c2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80201c4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80201c8:	4630      	mov	r0, r6
 80201ca:	f7fa fc75 	bl	801aab8 <ucdr_serialize_sequence_uint8_t>
 80201ce:	4005      	ands	r5, r0
 80201d0:	4628      	mov	r0, r5
 80201d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80201d6:	2500      	movs	r5, #0
 80201d8:	e77e      	b.n	80200d8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80201da:	4028      	ands	r0, r5
 80201dc:	b2c5      	uxtb	r5, r0
 80201de:	e77b      	b.n	80200d8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

080201e0 <uxr_serialize_OBJK_Subscriber_Binary>:
 80201e0:	b570      	push	{r4, r5, r6, lr}
 80201e2:	460d      	mov	r5, r1
 80201e4:	7809      	ldrb	r1, [r1, #0]
 80201e6:	4606      	mov	r6, r0
 80201e8:	f7f9 f8b6 	bl	8019358 <ucdr_serialize_bool>
 80201ec:	782b      	ldrb	r3, [r5, #0]
 80201ee:	4604      	mov	r4, r0
 80201f0:	b94b      	cbnz	r3, 8020206 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 80201f2:	7a29      	ldrb	r1, [r5, #8]
 80201f4:	4630      	mov	r0, r6
 80201f6:	f7f9 f8af 	bl	8019358 <ucdr_serialize_bool>
 80201fa:	7a2b      	ldrb	r3, [r5, #8]
 80201fc:	4004      	ands	r4, r0
 80201fe:	b2e4      	uxtb	r4, r4
 8020200:	b943      	cbnz	r3, 8020214 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8020202:	4620      	mov	r0, r4
 8020204:	bd70      	pop	{r4, r5, r6, pc}
 8020206:	6869      	ldr	r1, [r5, #4]
 8020208:	4630      	mov	r0, r6
 802020a:	f005 fa6b 	bl	80256e4 <ucdr_serialize_string>
 802020e:	4004      	ands	r4, r0
 8020210:	b2e4      	uxtb	r4, r4
 8020212:	e7ee      	b.n	80201f2 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8020214:	f105 010c 	add.w	r1, r5, #12
 8020218:	4630      	mov	r0, r6
 802021a:	f7ff ff53 	bl	80200c4 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 802021e:	4004      	ands	r4, r0
 8020220:	4620      	mov	r0, r4
 8020222:	bd70      	pop	{r4, r5, r6, pc}

08020224 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8020224:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8020228:	4688      	mov	r8, r1
 802022a:	4681      	mov	r9, r0
 802022c:	8809      	ldrh	r1, [r1, #0]
 802022e:	f7f9 f8ed 	bl	801940c <ucdr_serialize_uint16_t>
 8020232:	4606      	mov	r6, r0
 8020234:	f898 1002 	ldrb.w	r1, [r8, #2]
 8020238:	4648      	mov	r0, r9
 802023a:	f7f9 f88d 	bl	8019358 <ucdr_serialize_bool>
 802023e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8020242:	4006      	ands	r6, r0
 8020244:	b2f5      	uxtb	r5, r6
 8020246:	b9eb      	cbnz	r3, 8020284 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8020248:	f898 1006 	ldrb.w	r1, [r8, #6]
 802024c:	4648      	mov	r0, r9
 802024e:	f7f9 f883 	bl	8019358 <ucdr_serialize_bool>
 8020252:	f898 3006 	ldrb.w	r3, [r8, #6]
 8020256:	4005      	ands	r5, r0
 8020258:	bb7b      	cbnz	r3, 80202ba <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 802025a:	f898 100c 	ldrb.w	r1, [r8, #12]
 802025e:	4648      	mov	r0, r9
 8020260:	f7f9 f87a 	bl	8019358 <ucdr_serialize_bool>
 8020264:	f898 300c 	ldrb.w	r3, [r8, #12]
 8020268:	4005      	ands	r5, r0
 802026a:	b9f3      	cbnz	r3, 80202aa <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 802026c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8020270:	4648      	mov	r0, r9
 8020272:	f7f9 f871 	bl	8019358 <ucdr_serialize_bool>
 8020276:	f898 3014 	ldrb.w	r3, [r8, #20]
 802027a:	4005      	ands	r5, r0
 802027c:	b94b      	cbnz	r3, 8020292 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 802027e:	4628      	mov	r0, r5
 8020280:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8020284:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8020288:	4648      	mov	r0, r9
 802028a:	f7f9 f8bf 	bl	801940c <ucdr_serialize_uint16_t>
 802028e:	4005      	ands	r5, r0
 8020290:	e7da      	b.n	8020248 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8020292:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8020296:	f108 011c 	add.w	r1, r8, #28
 802029a:	4648      	mov	r0, r9
 802029c:	f7fa fc0c 	bl	801aab8 <ucdr_serialize_sequence_uint8_t>
 80202a0:	4028      	ands	r0, r5
 80202a2:	b2c5      	uxtb	r5, r0
 80202a4:	4628      	mov	r0, r5
 80202a6:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80202aa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80202ae:	4648      	mov	r0, r9
 80202b0:	f7f9 fa96 	bl	80197e0 <ucdr_serialize_uint32_t>
 80202b4:	4028      	ands	r0, r5
 80202b6:	b2c5      	uxtb	r5, r0
 80202b8:	e7d8      	b.n	802026c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80202ba:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80202be:	4648      	mov	r0, r9
 80202c0:	f7f9 fa8e 	bl	80197e0 <ucdr_serialize_uint32_t>
 80202c4:	4028      	ands	r0, r5
 80202c6:	b2c5      	uxtb	r5, r0
 80202c8:	e7c7      	b.n	802025a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 80202ca:	bf00      	nop

080202cc <uxr_serialize_OBJK_DataReader_Binary>:
 80202cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80202ce:	2202      	movs	r2, #2
 80202d0:	460c      	mov	r4, r1
 80202d2:	4606      	mov	r6, r0
 80202d4:	f7fd fc50 	bl	801db78 <ucdr_serialize_array_uint8_t>
 80202d8:	4605      	mov	r5, r0
 80202da:	78a1      	ldrb	r1, [r4, #2]
 80202dc:	4630      	mov	r0, r6
 80202de:	f7f9 f83b 	bl	8019358 <ucdr_serialize_bool>
 80202e2:	78a3      	ldrb	r3, [r4, #2]
 80202e4:	4005      	ands	r5, r0
 80202e6:	b2ed      	uxtb	r5, r5
 80202e8:	b90b      	cbnz	r3, 80202ee <uxr_serialize_OBJK_DataReader_Binary+0x22>
 80202ea:	4628      	mov	r0, r5
 80202ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80202ee:	f104 0108 	add.w	r1, r4, #8
 80202f2:	4630      	mov	r0, r6
 80202f4:	f7ff ff96 	bl	8020224 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80202f8:	4607      	mov	r7, r0
 80202fa:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80202fe:	4630      	mov	r0, r6
 8020300:	f7f9 f82a 	bl	8019358 <ucdr_serialize_bool>
 8020304:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8020308:	4038      	ands	r0, r7
 802030a:	b2c7      	uxtb	r7, r0
 802030c:	b95b      	cbnz	r3, 8020326 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 802030e:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8020312:	4630      	mov	r0, r6
 8020314:	f7f9 f820 	bl	8019358 <ucdr_serialize_bool>
 8020318:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 802031c:	4007      	ands	r7, r0
 802031e:	b94b      	cbnz	r3, 8020334 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8020320:	403d      	ands	r5, r7
 8020322:	4628      	mov	r0, r5
 8020324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020326:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 802032a:	4630      	mov	r0, r6
 802032c:	f7f9 fcae 	bl	8019c8c <ucdr_serialize_uint64_t>
 8020330:	4007      	ands	r7, r0
 8020332:	e7ec      	b.n	802030e <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8020334:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8020336:	4630      	mov	r0, r6
 8020338:	f005 f9d4 	bl	80256e4 <ucdr_serialize_string>
 802033c:	4007      	ands	r7, r0
 802033e:	b2ff      	uxtb	r7, r7
 8020340:	e7ee      	b.n	8020320 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8020342:	bf00      	nop

08020344 <uxr_serialize_OBJK_DataWriter_Binary>:
 8020344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020346:	2202      	movs	r2, #2
 8020348:	460d      	mov	r5, r1
 802034a:	4606      	mov	r6, r0
 802034c:	f7fd fc14 	bl	801db78 <ucdr_serialize_array_uint8_t>
 8020350:	4604      	mov	r4, r0
 8020352:	78a9      	ldrb	r1, [r5, #2]
 8020354:	4630      	mov	r0, r6
 8020356:	f7f8 ffff 	bl	8019358 <ucdr_serialize_bool>
 802035a:	78ab      	ldrb	r3, [r5, #2]
 802035c:	4004      	ands	r4, r0
 802035e:	b2e4      	uxtb	r4, r4
 8020360:	b90b      	cbnz	r3, 8020366 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8020362:	4620      	mov	r0, r4
 8020364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020366:	f105 0108 	add.w	r1, r5, #8
 802036a:	4630      	mov	r0, r6
 802036c:	f7ff ff5a 	bl	8020224 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8020370:	4607      	mov	r7, r0
 8020372:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8020376:	4630      	mov	r0, r6
 8020378:	f7f8 ffee 	bl	8019358 <ucdr_serialize_bool>
 802037c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8020380:	4038      	ands	r0, r7
 8020382:	b2c7      	uxtb	r7, r0
 8020384:	b913      	cbnz	r3, 802038c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8020386:	403c      	ands	r4, r7
 8020388:	4620      	mov	r0, r4
 802038a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802038c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8020390:	4630      	mov	r0, r6
 8020392:	f7f9 fc7b 	bl	8019c8c <ucdr_serialize_uint64_t>
 8020396:	4007      	ands	r7, r0
 8020398:	e7f5      	b.n	8020386 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 802039a:	bf00      	nop

0802039c <uxr_deserialize_ObjectVariant>:
 802039c:	b570      	push	{r4, r5, r6, lr}
 802039e:	4605      	mov	r5, r0
 80203a0:	460e      	mov	r6, r1
 80203a2:	f7f9 f81d 	bl	80193e0 <ucdr_deserialize_uint8_t>
 80203a6:	b168      	cbz	r0, 80203c4 <uxr_deserialize_ObjectVariant+0x28>
 80203a8:	7833      	ldrb	r3, [r6, #0]
 80203aa:	4604      	mov	r4, r0
 80203ac:	3b01      	subs	r3, #1
 80203ae:	2b0d      	cmp	r3, #13
 80203b0:	d809      	bhi.n	80203c6 <uxr_deserialize_ObjectVariant+0x2a>
 80203b2:	e8df f003 	tbb	[pc, r3]
 80203b6:	0a41      	.short	0x0a41
 80203b8:	0a0a2323 	.word	0x0a0a2323
 80203bc:	10080a0a 	.word	0x10080a0a
 80203c0:	565c1010 	.word	0x565c1010
 80203c4:	2400      	movs	r4, #0
 80203c6:	4620      	mov	r0, r4
 80203c8:	bd70      	pop	{r4, r5, r6, pc}
 80203ca:	1d31      	adds	r1, r6, #4
 80203cc:	4628      	mov	r0, r5
 80203ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80203d2:	f7ff bd55 	b.w	801fe80 <uxr_deserialize_DATAWRITER_Representation>
 80203d6:	1d31      	adds	r1, r6, #4
 80203d8:	4628      	mov	r0, r5
 80203da:	f7f9 f801 	bl	80193e0 <ucdr_deserialize_uint8_t>
 80203de:	2800      	cmp	r0, #0
 80203e0:	d0f0      	beq.n	80203c4 <uxr_deserialize_ObjectVariant+0x28>
 80203e2:	7933      	ldrb	r3, [r6, #4]
 80203e4:	2b01      	cmp	r3, #1
 80203e6:	d001      	beq.n	80203ec <uxr_deserialize_ObjectVariant+0x50>
 80203e8:	2b02      	cmp	r3, #2
 80203ea:	d1ec      	bne.n	80203c6 <uxr_deserialize_ObjectVariant+0x2a>
 80203ec:	68b1      	ldr	r1, [r6, #8]
 80203ee:	4628      	mov	r0, r5
 80203f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80203f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80203f8:	f005 b984 	b.w	8025704 <ucdr_deserialize_string>
 80203fc:	1d31      	adds	r1, r6, #4
 80203fe:	4628      	mov	r0, r5
 8020400:	f7f8 ffee 	bl	80193e0 <ucdr_deserialize_uint8_t>
 8020404:	4604      	mov	r4, r0
 8020406:	b170      	cbz	r0, 8020426 <uxr_deserialize_ObjectVariant+0x8a>
 8020408:	7933      	ldrb	r3, [r6, #4]
 802040a:	2b02      	cmp	r3, #2
 802040c:	d04c      	beq.n	80204a8 <uxr_deserialize_ObjectVariant+0x10c>
 802040e:	2b03      	cmp	r3, #3
 8020410:	d109      	bne.n	8020426 <uxr_deserialize_ObjectVariant+0x8a>
 8020412:	f106 0308 	add.w	r3, r6, #8
 8020416:	f44f 7200 	mov.w	r2, #512	@ 0x200
 802041a:	f106 010c 	add.w	r1, r6, #12
 802041e:	4628      	mov	r0, r5
 8020420:	f7fa fb5c 	bl	801aadc <ucdr_deserialize_sequence_uint8_t>
 8020424:	4604      	mov	r4, r0
 8020426:	2202      	movs	r2, #2
 8020428:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 802042c:	4628      	mov	r0, r5
 802042e:	f7fd fc07 	bl	801dc40 <ucdr_deserialize_array_uint8_t>
 8020432:	4020      	ands	r0, r4
 8020434:	b2c4      	uxtb	r4, r0
 8020436:	e7c6      	b.n	80203c6 <uxr_deserialize_ObjectVariant+0x2a>
 8020438:	1d31      	adds	r1, r6, #4
 802043a:	4628      	mov	r0, r5
 802043c:	f7f8 ffd0 	bl	80193e0 <ucdr_deserialize_uint8_t>
 8020440:	4604      	mov	r4, r0
 8020442:	b130      	cbz	r0, 8020452 <uxr_deserialize_ObjectVariant+0xb6>
 8020444:	7933      	ldrb	r3, [r6, #4]
 8020446:	2b02      	cmp	r3, #2
 8020448:	d036      	beq.n	80204b8 <uxr_deserialize_ObjectVariant+0x11c>
 802044a:	2b03      	cmp	r3, #3
 802044c:	d03c      	beq.n	80204c8 <uxr_deserialize_ObjectVariant+0x12c>
 802044e:	2b01      	cmp	r3, #1
 8020450:	d032      	beq.n	80204b8 <uxr_deserialize_ObjectVariant+0x11c>
 8020452:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8020456:	4628      	mov	r0, r5
 8020458:	f7f9 fd68 	bl	8019f2c <ucdr_deserialize_int16_t>
 802045c:	4020      	ands	r0, r4
 802045e:	b2c4      	uxtb	r4, r0
 8020460:	e7b1      	b.n	80203c6 <uxr_deserialize_ObjectVariant+0x2a>
 8020462:	1d31      	adds	r1, r6, #4
 8020464:	4628      	mov	r0, r5
 8020466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802046a:	f7ff bbbf 	b.w	801fbec <uxr_deserialize_CLIENT_Representation>
 802046e:	2204      	movs	r2, #4
 8020470:	4628      	mov	r0, r5
 8020472:	18b1      	adds	r1, r6, r2
 8020474:	f7fd fbe4 	bl	801dc40 <ucdr_deserialize_array_uint8_t>
 8020478:	4604      	mov	r4, r0
 802047a:	2202      	movs	r2, #2
 802047c:	f106 0108 	add.w	r1, r6, #8
 8020480:	4628      	mov	r0, r5
 8020482:	f7fd fbdd 	bl	801dc40 <ucdr_deserialize_array_uint8_t>
 8020486:	4004      	ands	r4, r0
 8020488:	2202      	movs	r2, #2
 802048a:	f106 010a 	add.w	r1, r6, #10
 802048e:	4628      	mov	r0, r5
 8020490:	b2e4      	uxtb	r4, r4
 8020492:	f7fd fbd5 	bl	801dc40 <ucdr_deserialize_array_uint8_t>
 8020496:	4603      	mov	r3, r0
 8020498:	f106 010c 	add.w	r1, r6, #12
 802049c:	4628      	mov	r0, r5
 802049e:	401c      	ands	r4, r3
 80204a0:	f7f8 ff70 	bl	8019384 <ucdr_deserialize_bool>
 80204a4:	4004      	ands	r4, r0
 80204a6:	e78e      	b.n	80203c6 <uxr_deserialize_ObjectVariant+0x2a>
 80204a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80204ac:	68b1      	ldr	r1, [r6, #8]
 80204ae:	4628      	mov	r0, r5
 80204b0:	f005 f928 	bl	8025704 <ucdr_deserialize_string>
 80204b4:	4604      	mov	r4, r0
 80204b6:	e7b6      	b.n	8020426 <uxr_deserialize_ObjectVariant+0x8a>
 80204b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80204bc:	68b1      	ldr	r1, [r6, #8]
 80204be:	4628      	mov	r0, r5
 80204c0:	f005 f920 	bl	8025704 <ucdr_deserialize_string>
 80204c4:	4604      	mov	r4, r0
 80204c6:	e7c4      	b.n	8020452 <uxr_deserialize_ObjectVariant+0xb6>
 80204c8:	f106 0308 	add.w	r3, r6, #8
 80204cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80204d0:	f106 010c 	add.w	r1, r6, #12
 80204d4:	4628      	mov	r0, r5
 80204d6:	f7fa fb01 	bl	801aadc <ucdr_deserialize_sequence_uint8_t>
 80204da:	4604      	mov	r4, r0
 80204dc:	e7b9      	b.n	8020452 <uxr_deserialize_ObjectVariant+0xb6>
 80204de:	bf00      	nop

080204e0 <uxr_deserialize_BaseObjectRequest>:
 80204e0:	b570      	push	{r4, r5, r6, lr}
 80204e2:	2202      	movs	r2, #2
 80204e4:	4605      	mov	r5, r0
 80204e6:	460e      	mov	r6, r1
 80204e8:	f7fd fbaa 	bl	801dc40 <ucdr_deserialize_array_uint8_t>
 80204ec:	2202      	movs	r2, #2
 80204ee:	4604      	mov	r4, r0
 80204f0:	4628      	mov	r0, r5
 80204f2:	18b1      	adds	r1, r6, r2
 80204f4:	f7fd fba4 	bl	801dc40 <ucdr_deserialize_array_uint8_t>
 80204f8:	4020      	ands	r0, r4
 80204fa:	b2c0      	uxtb	r0, r0
 80204fc:	bd70      	pop	{r4, r5, r6, pc}
 80204fe:	bf00      	nop

08020500 <uxr_serialize_ActivityInfoVariant>:
 8020500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020504:	460e      	mov	r6, r1
 8020506:	7809      	ldrb	r1, [r1, #0]
 8020508:	4680      	mov	r8, r0
 802050a:	f7f8 ff53 	bl	80193b4 <ucdr_serialize_uint8_t>
 802050e:	4607      	mov	r7, r0
 8020510:	b138      	cbz	r0, 8020522 <uxr_serialize_ActivityInfoVariant+0x22>
 8020512:	7833      	ldrb	r3, [r6, #0]
 8020514:	2b06      	cmp	r3, #6
 8020516:	f000 8081 	beq.w	802061c <uxr_serialize_ActivityInfoVariant+0x11c>
 802051a:	2b0d      	cmp	r3, #13
 802051c:	d014      	beq.n	8020548 <uxr_serialize_ActivityInfoVariant+0x48>
 802051e:	2b05      	cmp	r3, #5
 8020520:	d002      	beq.n	8020528 <uxr_serialize_ActivityInfoVariant+0x28>
 8020522:	4638      	mov	r0, r7
 8020524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020528:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 802052c:	4640      	mov	r0, r8
 802052e:	f7f9 fc7d 	bl	8019e2c <ucdr_serialize_int16_t>
 8020532:	4607      	mov	r7, r0
 8020534:	4640      	mov	r0, r8
 8020536:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 802053a:	f7f9 fba7 	bl	8019c8c <ucdr_serialize_uint64_t>
 802053e:	4038      	ands	r0, r7
 8020540:	b2c7      	uxtb	r7, r0
 8020542:	4638      	mov	r0, r7
 8020544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020548:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 802054c:	4640      	mov	r0, r8
 802054e:	f7f9 fc6d 	bl	8019e2c <ucdr_serialize_int16_t>
 8020552:	68f1      	ldr	r1, [r6, #12]
 8020554:	4607      	mov	r7, r0
 8020556:	4640      	mov	r0, r8
 8020558:	f7f9 f942 	bl	80197e0 <ucdr_serialize_uint32_t>
 802055c:	68f3      	ldr	r3, [r6, #12]
 802055e:	2b00      	cmp	r3, #0
 8020560:	d0ed      	beq.n	802053e <uxr_serialize_ActivityInfoVariant+0x3e>
 8020562:	b318      	cbz	r0, 80205ac <uxr_serialize_ActivityInfoVariant+0xac>
 8020564:	f106 090c 	add.w	r9, r6, #12
 8020568:	2400      	movs	r4, #0
 802056a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 802056e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8020572:	7c29      	ldrb	r1, [r5, #16]
 8020574:	4640      	mov	r0, r8
 8020576:	f7f8 ff1d 	bl	80193b4 <ucdr_serialize_uint8_t>
 802057a:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 802057e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8020582:	2800      	cmp	r0, #0
 8020584:	d051      	beq.n	802062a <uxr_serialize_ActivityInfoVariant+0x12a>
 8020586:	7c2b      	ldrb	r3, [r5, #16]
 8020588:	00c9      	lsls	r1, r1, #3
 802058a:	2b03      	cmp	r3, #3
 802058c:	d854      	bhi.n	8020638 <uxr_serialize_ActivityInfoVariant+0x138>
 802058e:	e8df f003 	tbb	[pc, r3]
 8020592:	2133      	.short	0x2133
 8020594:	020f      	.short	0x020f
 8020596:	4449      	add	r1, r9
 8020598:	4640      	mov	r0, r8
 802059a:	6889      	ldr	r1, [r1, #8]
 802059c:	f005 f8a2 	bl	80256e4 <ucdr_serialize_string>
 80205a0:	3401      	adds	r4, #1
 80205a2:	68f2      	ldr	r2, [r6, #12]
 80205a4:	4294      	cmp	r4, r2
 80205a6:	d244      	bcs.n	8020632 <uxr_serialize_ActivityInfoVariant+0x132>
 80205a8:	2800      	cmp	r0, #0
 80205aa:	d1de      	bne.n	802056a <uxr_serialize_ActivityInfoVariant+0x6a>
 80205ac:	2700      	movs	r7, #0
 80205ae:	e7b8      	b.n	8020522 <uxr_serialize_ActivityInfoVariant+0x22>
 80205b0:	3108      	adds	r1, #8
 80205b2:	44a2      	add	sl, r4
 80205b4:	2210      	movs	r2, #16
 80205b6:	4640      	mov	r0, r8
 80205b8:	4449      	add	r1, r9
 80205ba:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80205be:	f7fd fadb 	bl	801db78 <ucdr_serialize_array_uint8_t>
 80205c2:	4605      	mov	r5, r0
 80205c4:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 80205c8:	4640      	mov	r0, r8
 80205ca:	f7f9 f909 	bl	80197e0 <ucdr_serialize_uint32_t>
 80205ce:	4028      	ands	r0, r5
 80205d0:	b2c0      	uxtb	r0, r0
 80205d2:	e7e5      	b.n	80205a0 <uxr_serialize_ActivityInfoVariant+0xa0>
 80205d4:	3108      	adds	r1, #8
 80205d6:	44a2      	add	sl, r4
 80205d8:	2204      	movs	r2, #4
 80205da:	4640      	mov	r0, r8
 80205dc:	4449      	add	r1, r9
 80205de:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80205e2:	f7fd fac9 	bl	801db78 <ucdr_serialize_array_uint8_t>
 80205e6:	4605      	mov	r5, r0
 80205e8:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 80205ec:	4640      	mov	r0, r8
 80205ee:	f7f8 ff0d 	bl	801940c <ucdr_serialize_uint16_t>
 80205f2:	4028      	ands	r0, r5
 80205f4:	b2c0      	uxtb	r0, r0
 80205f6:	e7d3      	b.n	80205a0 <uxr_serialize_ActivityInfoVariant+0xa0>
 80205f8:	3108      	adds	r1, #8
 80205fa:	44a2      	add	sl, r4
 80205fc:	2202      	movs	r2, #2
 80205fe:	4640      	mov	r0, r8
 8020600:	4449      	add	r1, r9
 8020602:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8020606:	f7fd fab7 	bl	801db78 <ucdr_serialize_array_uint8_t>
 802060a:	4605      	mov	r5, r0
 802060c:	f89a 1016 	ldrb.w	r1, [sl, #22]
 8020610:	4640      	mov	r0, r8
 8020612:	f7f8 fecf 	bl	80193b4 <ucdr_serialize_uint8_t>
 8020616:	4028      	ands	r0, r5
 8020618:	b2c0      	uxtb	r0, r0
 802061a:	e7c1      	b.n	80205a0 <uxr_serialize_ActivityInfoVariant+0xa0>
 802061c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8020620:	4640      	mov	r0, r8
 8020622:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020626:	f7f9 bc01 	b.w	8019e2c <ucdr_serialize_int16_t>
 802062a:	3401      	adds	r4, #1
 802062c:	68f2      	ldr	r2, [r6, #12]
 802062e:	42a2      	cmp	r2, r4
 8020630:	d8bc      	bhi.n	80205ac <uxr_serialize_ActivityInfoVariant+0xac>
 8020632:	4007      	ands	r7, r0
 8020634:	b2ff      	uxtb	r7, r7
 8020636:	e774      	b.n	8020522 <uxr_serialize_ActivityInfoVariant+0x22>
 8020638:	3401      	adds	r4, #1
 802063a:	68f3      	ldr	r3, [r6, #12]
 802063c:	3518      	adds	r5, #24
 802063e:	429c      	cmp	r4, r3
 8020640:	d397      	bcc.n	8020572 <uxr_serialize_ActivityInfoVariant+0x72>
 8020642:	e76e      	b.n	8020522 <uxr_serialize_ActivityInfoVariant+0x22>

08020644 <uxr_deserialize_BaseObjectReply>:
 8020644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020648:	2202      	movs	r2, #2
 802064a:	4606      	mov	r6, r0
 802064c:	460f      	mov	r7, r1
 802064e:	f7fd faf7 	bl	801dc40 <ucdr_deserialize_array_uint8_t>
 8020652:	2202      	movs	r2, #2
 8020654:	4605      	mov	r5, r0
 8020656:	4630      	mov	r0, r6
 8020658:	18b9      	adds	r1, r7, r2
 802065a:	f7fd faf1 	bl	801dc40 <ucdr_deserialize_array_uint8_t>
 802065e:	4680      	mov	r8, r0
 8020660:	1d39      	adds	r1, r7, #4
 8020662:	4630      	mov	r0, r6
 8020664:	f7f8 febc 	bl	80193e0 <ucdr_deserialize_uint8_t>
 8020668:	ea05 0508 	and.w	r5, r5, r8
 802066c:	4604      	mov	r4, r0
 802066e:	1d79      	adds	r1, r7, #5
 8020670:	4630      	mov	r0, r6
 8020672:	402c      	ands	r4, r5
 8020674:	f7f8 feb4 	bl	80193e0 <ucdr_deserialize_uint8_t>
 8020678:	4020      	ands	r0, r4
 802067a:	b2c0      	uxtb	r0, r0
 802067c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020680 <uxr_serialize_ReadSpecification>:
 8020680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020682:	460e      	mov	r6, r1
 8020684:	4607      	mov	r7, r0
 8020686:	7809      	ldrb	r1, [r1, #0]
 8020688:	f7f8 fe94 	bl	80193b4 <ucdr_serialize_uint8_t>
 802068c:	4604      	mov	r4, r0
 802068e:	7871      	ldrb	r1, [r6, #1]
 8020690:	4638      	mov	r0, r7
 8020692:	f7f8 fe8f 	bl	80193b4 <ucdr_serialize_uint8_t>
 8020696:	4004      	ands	r4, r0
 8020698:	78b1      	ldrb	r1, [r6, #2]
 802069a:	4638      	mov	r0, r7
 802069c:	f7f8 fe5c 	bl	8019358 <ucdr_serialize_bool>
 80206a0:	78b3      	ldrb	r3, [r6, #2]
 80206a2:	b2e4      	uxtb	r4, r4
 80206a4:	4004      	ands	r4, r0
 80206a6:	b943      	cbnz	r3, 80206ba <uxr_serialize_ReadSpecification+0x3a>
 80206a8:	7a31      	ldrb	r1, [r6, #8]
 80206aa:	4638      	mov	r0, r7
 80206ac:	f7f8 fe54 	bl	8019358 <ucdr_serialize_bool>
 80206b0:	7a33      	ldrb	r3, [r6, #8]
 80206b2:	4004      	ands	r4, r0
 80206b4:	b93b      	cbnz	r3, 80206c6 <uxr_serialize_ReadSpecification+0x46>
 80206b6:	4620      	mov	r0, r4
 80206b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80206ba:	6871      	ldr	r1, [r6, #4]
 80206bc:	4638      	mov	r0, r7
 80206be:	f005 f811 	bl	80256e4 <ucdr_serialize_string>
 80206c2:	4004      	ands	r4, r0
 80206c4:	e7f0      	b.n	80206a8 <uxr_serialize_ReadSpecification+0x28>
 80206c6:	8971      	ldrh	r1, [r6, #10]
 80206c8:	4638      	mov	r0, r7
 80206ca:	f7f8 fe9f 	bl	801940c <ucdr_serialize_uint16_t>
 80206ce:	4605      	mov	r5, r0
 80206d0:	89b1      	ldrh	r1, [r6, #12]
 80206d2:	4638      	mov	r0, r7
 80206d4:	f7f8 fe9a 	bl	801940c <ucdr_serialize_uint16_t>
 80206d8:	4005      	ands	r5, r0
 80206da:	89f1      	ldrh	r1, [r6, #14]
 80206dc:	4638      	mov	r0, r7
 80206de:	b2ed      	uxtb	r5, r5
 80206e0:	f7f8 fe94 	bl	801940c <ucdr_serialize_uint16_t>
 80206e4:	8a31      	ldrh	r1, [r6, #16]
 80206e6:	4025      	ands	r5, r4
 80206e8:	4604      	mov	r4, r0
 80206ea:	4638      	mov	r0, r7
 80206ec:	4025      	ands	r5, r4
 80206ee:	f7f8 fe8d 	bl	801940c <ucdr_serialize_uint16_t>
 80206f2:	ea00 0405 	and.w	r4, r0, r5
 80206f6:	4620      	mov	r0, r4
 80206f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80206fa:	bf00      	nop

080206fc <uxr_serialize_CREATE_CLIENT_Payload>:
 80206fc:	f7ff ba1e 	b.w	801fb3c <uxr_serialize_CLIENT_Representation>

08020700 <uxr_serialize_CREATE_Payload>:
 8020700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020702:	2202      	movs	r2, #2
 8020704:	4607      	mov	r7, r0
 8020706:	460e      	mov	r6, r1
 8020708:	f7fd fa36 	bl	801db78 <ucdr_serialize_array_uint8_t>
 802070c:	2202      	movs	r2, #2
 802070e:	4605      	mov	r5, r0
 8020710:	4638      	mov	r0, r7
 8020712:	18b1      	adds	r1, r6, r2
 8020714:	f7fd fa30 	bl	801db78 <ucdr_serialize_array_uint8_t>
 8020718:	7931      	ldrb	r1, [r6, #4]
 802071a:	4604      	mov	r4, r0
 802071c:	4638      	mov	r0, r7
 802071e:	f7f8 fe49 	bl	80193b4 <ucdr_serialize_uint8_t>
 8020722:	b170      	cbz	r0, 8020742 <uxr_serialize_CREATE_Payload+0x42>
 8020724:	7933      	ldrb	r3, [r6, #4]
 8020726:	402c      	ands	r4, r5
 8020728:	3b01      	subs	r3, #1
 802072a:	b2e4      	uxtb	r4, r4
 802072c:	2b0d      	cmp	r3, #13
 802072e:	d809      	bhi.n	8020744 <uxr_serialize_CREATE_Payload+0x44>
 8020730:	e8df f003 	tbb	[pc, r3]
 8020734:	23230a4c 	.word	0x23230a4c
 8020738:	0a0a0a0a 	.word	0x0a0a0a0a
 802073c:	12121208 	.word	0x12121208
 8020740:	3e45      	.short	0x3e45
 8020742:	2400      	movs	r4, #0
 8020744:	4620      	mov	r0, r4
 8020746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020748:	f106 0108 	add.w	r1, r6, #8
 802074c:	4638      	mov	r0, r7
 802074e:	f7ff fafb 	bl	801fd48 <uxr_serialize_DATAWRITER_Representation>
 8020752:	4004      	ands	r4, r0
 8020754:	4620      	mov	r0, r4
 8020756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020758:	7a31      	ldrb	r1, [r6, #8]
 802075a:	4638      	mov	r0, r7
 802075c:	f7f8 fe2a 	bl	80193b4 <ucdr_serialize_uint8_t>
 8020760:	2800      	cmp	r0, #0
 8020762:	d0ee      	beq.n	8020742 <uxr_serialize_CREATE_Payload+0x42>
 8020764:	7a33      	ldrb	r3, [r6, #8]
 8020766:	2b01      	cmp	r3, #1
 8020768:	d001      	beq.n	802076e <uxr_serialize_CREATE_Payload+0x6e>
 802076a:	2b02      	cmp	r3, #2
 802076c:	d1ea      	bne.n	8020744 <uxr_serialize_CREATE_Payload+0x44>
 802076e:	68f1      	ldr	r1, [r6, #12]
 8020770:	4638      	mov	r0, r7
 8020772:	f004 ffb7 	bl	80256e4 <ucdr_serialize_string>
 8020776:	4004      	ands	r4, r0
 8020778:	e7e4      	b.n	8020744 <uxr_serialize_CREATE_Payload+0x44>
 802077a:	7a31      	ldrb	r1, [r6, #8]
 802077c:	4638      	mov	r0, r7
 802077e:	f7f8 fe19 	bl	80193b4 <ucdr_serialize_uint8_t>
 8020782:	4605      	mov	r5, r0
 8020784:	b158      	cbz	r0, 802079e <uxr_serialize_CREATE_Payload+0x9e>
 8020786:	7a33      	ldrb	r3, [r6, #8]
 8020788:	2b02      	cmp	r3, #2
 802078a:	d034      	beq.n	80207f6 <uxr_serialize_CREATE_Payload+0xf6>
 802078c:	2b03      	cmp	r3, #3
 802078e:	d106      	bne.n	802079e <uxr_serialize_CREATE_Payload+0x9e>
 8020790:	68f2      	ldr	r2, [r6, #12]
 8020792:	f106 0110 	add.w	r1, r6, #16
 8020796:	4638      	mov	r0, r7
 8020798:	f7fa f98e 	bl	801aab8 <ucdr_serialize_sequence_uint8_t>
 802079c:	4605      	mov	r5, r0
 802079e:	2202      	movs	r2, #2
 80207a0:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 80207a4:	4638      	mov	r0, r7
 80207a6:	f7fd f9e7 	bl	801db78 <ucdr_serialize_array_uint8_t>
 80207aa:	4028      	ands	r0, r5
 80207ac:	4004      	ands	r4, r0
 80207ae:	e7c9      	b.n	8020744 <uxr_serialize_CREATE_Payload+0x44>
 80207b0:	f106 0108 	add.w	r1, r6, #8
 80207b4:	4638      	mov	r0, r7
 80207b6:	f7ff f9c1 	bl	801fb3c <uxr_serialize_CLIENT_Representation>
 80207ba:	4004      	ands	r4, r0
 80207bc:	e7c2      	b.n	8020744 <uxr_serialize_CREATE_Payload+0x44>
 80207be:	f106 0108 	add.w	r1, r6, #8
 80207c2:	4638      	mov	r0, r7
 80207c4:	f7ff fa76 	bl	801fcb4 <uxr_serialize_AGENT_Representation>
 80207c8:	4004      	ands	r4, r0
 80207ca:	e7bb      	b.n	8020744 <uxr_serialize_CREATE_Payload+0x44>
 80207cc:	7a31      	ldrb	r1, [r6, #8]
 80207ce:	4638      	mov	r0, r7
 80207d0:	f7f8 fdf0 	bl	80193b4 <ucdr_serialize_uint8_t>
 80207d4:	4605      	mov	r5, r0
 80207d6:	b130      	cbz	r0, 80207e6 <uxr_serialize_CREATE_Payload+0xe6>
 80207d8:	7a33      	ldrb	r3, [r6, #8]
 80207da:	2b02      	cmp	r3, #2
 80207dc:	d011      	beq.n	8020802 <uxr_serialize_CREATE_Payload+0x102>
 80207de:	2b03      	cmp	r3, #3
 80207e0:	d015      	beq.n	802080e <uxr_serialize_CREATE_Payload+0x10e>
 80207e2:	2b01      	cmp	r3, #1
 80207e4:	d00d      	beq.n	8020802 <uxr_serialize_CREATE_Payload+0x102>
 80207e6:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 80207ea:	4638      	mov	r0, r7
 80207ec:	f7f9 fb1e 	bl	8019e2c <ucdr_serialize_int16_t>
 80207f0:	4028      	ands	r0, r5
 80207f2:	4004      	ands	r4, r0
 80207f4:	e7a6      	b.n	8020744 <uxr_serialize_CREATE_Payload+0x44>
 80207f6:	68f1      	ldr	r1, [r6, #12]
 80207f8:	4638      	mov	r0, r7
 80207fa:	f004 ff73 	bl	80256e4 <ucdr_serialize_string>
 80207fe:	4605      	mov	r5, r0
 8020800:	e7cd      	b.n	802079e <uxr_serialize_CREATE_Payload+0x9e>
 8020802:	68f1      	ldr	r1, [r6, #12]
 8020804:	4638      	mov	r0, r7
 8020806:	f004 ff6d 	bl	80256e4 <ucdr_serialize_string>
 802080a:	4605      	mov	r5, r0
 802080c:	e7eb      	b.n	80207e6 <uxr_serialize_CREATE_Payload+0xe6>
 802080e:	68f2      	ldr	r2, [r6, #12]
 8020810:	f106 0110 	add.w	r1, r6, #16
 8020814:	4638      	mov	r0, r7
 8020816:	f7fa f94f 	bl	801aab8 <ucdr_serialize_sequence_uint8_t>
 802081a:	4605      	mov	r5, r0
 802081c:	e7e3      	b.n	80207e6 <uxr_serialize_CREATE_Payload+0xe6>
 802081e:	bf00      	nop

08020820 <uxr_deserialize_GET_INFO_Payload>:
 8020820:	b570      	push	{r4, r5, r6, lr}
 8020822:	2202      	movs	r2, #2
 8020824:	4605      	mov	r5, r0
 8020826:	460e      	mov	r6, r1
 8020828:	f7fd fa0a 	bl	801dc40 <ucdr_deserialize_array_uint8_t>
 802082c:	2202      	movs	r2, #2
 802082e:	4604      	mov	r4, r0
 8020830:	4628      	mov	r0, r5
 8020832:	18b1      	adds	r1, r6, r2
 8020834:	f7fd fa04 	bl	801dc40 <ucdr_deserialize_array_uint8_t>
 8020838:	4603      	mov	r3, r0
 802083a:	1d31      	adds	r1, r6, #4
 802083c:	4628      	mov	r0, r5
 802083e:	401c      	ands	r4, r3
 8020840:	f7f9 f8fe 	bl	8019a40 <ucdr_deserialize_uint32_t>
 8020844:	b2e4      	uxtb	r4, r4
 8020846:	4020      	ands	r0, r4
 8020848:	bd70      	pop	{r4, r5, r6, pc}
 802084a:	bf00      	nop

0802084c <uxr_serialize_DELETE_Payload>:
 802084c:	b570      	push	{r4, r5, r6, lr}
 802084e:	2202      	movs	r2, #2
 8020850:	4605      	mov	r5, r0
 8020852:	460e      	mov	r6, r1
 8020854:	f7fd f990 	bl	801db78 <ucdr_serialize_array_uint8_t>
 8020858:	2202      	movs	r2, #2
 802085a:	4604      	mov	r4, r0
 802085c:	4628      	mov	r0, r5
 802085e:	18b1      	adds	r1, r6, r2
 8020860:	f7fd f98a 	bl	801db78 <ucdr_serialize_array_uint8_t>
 8020864:	4020      	ands	r0, r4
 8020866:	b2c0      	uxtb	r0, r0
 8020868:	bd70      	pop	{r4, r5, r6, pc}
 802086a:	bf00      	nop

0802086c <uxr_deserialize_STATUS_AGENT_Payload>:
 802086c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020870:	460e      	mov	r6, r1
 8020872:	4605      	mov	r5, r0
 8020874:	f7f8 fdb4 	bl	80193e0 <ucdr_deserialize_uint8_t>
 8020878:	4604      	mov	r4, r0
 802087a:	1c71      	adds	r1, r6, #1
 802087c:	4628      	mov	r0, r5
 802087e:	f7f8 fdaf 	bl	80193e0 <ucdr_deserialize_uint8_t>
 8020882:	2204      	movs	r2, #4
 8020884:	4681      	mov	r9, r0
 8020886:	4628      	mov	r0, r5
 8020888:	18b1      	adds	r1, r6, r2
 802088a:	f7fd f9d9 	bl	801dc40 <ucdr_deserialize_array_uint8_t>
 802088e:	f106 0108 	add.w	r1, r6, #8
 8020892:	4680      	mov	r8, r0
 8020894:	2202      	movs	r2, #2
 8020896:	4628      	mov	r0, r5
 8020898:	f7fd f9d2 	bl	801dc40 <ucdr_deserialize_array_uint8_t>
 802089c:	ea04 0309 	and.w	r3, r4, r9
 80208a0:	4607      	mov	r7, r0
 80208a2:	2202      	movs	r2, #2
 80208a4:	b2db      	uxtb	r3, r3
 80208a6:	f106 010a 	add.w	r1, r6, #10
 80208aa:	4628      	mov	r0, r5
 80208ac:	ea03 0408 	and.w	r4, r3, r8
 80208b0:	f7fd f9c6 	bl	801dc40 <ucdr_deserialize_array_uint8_t>
 80208b4:	4603      	mov	r3, r0
 80208b6:	4628      	mov	r0, r5
 80208b8:	403c      	ands	r4, r7
 80208ba:	f106 010c 	add.w	r1, r6, #12
 80208be:	461d      	mov	r5, r3
 80208c0:	f7f8 fd60 	bl	8019384 <ucdr_deserialize_bool>
 80208c4:	4025      	ands	r5, r4
 80208c6:	4028      	ands	r0, r5
 80208c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080208cc <uxr_deserialize_STATUS_Payload>:
 80208cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80208d0:	2202      	movs	r2, #2
 80208d2:	4606      	mov	r6, r0
 80208d4:	460f      	mov	r7, r1
 80208d6:	f7fd f9b3 	bl	801dc40 <ucdr_deserialize_array_uint8_t>
 80208da:	2202      	movs	r2, #2
 80208dc:	4605      	mov	r5, r0
 80208de:	4630      	mov	r0, r6
 80208e0:	18b9      	adds	r1, r7, r2
 80208e2:	f7fd f9ad 	bl	801dc40 <ucdr_deserialize_array_uint8_t>
 80208e6:	4680      	mov	r8, r0
 80208e8:	1d39      	adds	r1, r7, #4
 80208ea:	4630      	mov	r0, r6
 80208ec:	f7f8 fd78 	bl	80193e0 <ucdr_deserialize_uint8_t>
 80208f0:	ea05 0508 	and.w	r5, r5, r8
 80208f4:	4604      	mov	r4, r0
 80208f6:	1d79      	adds	r1, r7, #5
 80208f8:	4630      	mov	r0, r6
 80208fa:	402c      	ands	r4, r5
 80208fc:	f7f8 fd70 	bl	80193e0 <ucdr_deserialize_uint8_t>
 8020900:	4020      	ands	r0, r4
 8020902:	b2c0      	uxtb	r0, r0
 8020904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020908 <uxr_serialize_INFO_Payload>:
 8020908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802090c:	2202      	movs	r2, #2
 802090e:	460c      	mov	r4, r1
 8020910:	4605      	mov	r5, r0
 8020912:	f7fd f931 	bl	801db78 <ucdr_serialize_array_uint8_t>
 8020916:	2202      	movs	r2, #2
 8020918:	4680      	mov	r8, r0
 802091a:	4628      	mov	r0, r5
 802091c:	18a1      	adds	r1, r4, r2
 802091e:	f7fd f92b 	bl	801db78 <ucdr_serialize_array_uint8_t>
 8020922:	4607      	mov	r7, r0
 8020924:	7921      	ldrb	r1, [r4, #4]
 8020926:	4628      	mov	r0, r5
 8020928:	f7f8 fd44 	bl	80193b4 <ucdr_serialize_uint8_t>
 802092c:	ea08 0807 	and.w	r8, r8, r7
 8020930:	4606      	mov	r6, r0
 8020932:	7961      	ldrb	r1, [r4, #5]
 8020934:	4628      	mov	r0, r5
 8020936:	ea06 0608 	and.w	r6, r6, r8
 802093a:	f7f8 fd3b 	bl	80193b4 <ucdr_serialize_uint8_t>
 802093e:	7a21      	ldrb	r1, [r4, #8]
 8020940:	4030      	ands	r0, r6
 8020942:	b2c7      	uxtb	r7, r0
 8020944:	4628      	mov	r0, r5
 8020946:	f7f8 fd07 	bl	8019358 <ucdr_serialize_bool>
 802094a:	7a23      	ldrb	r3, [r4, #8]
 802094c:	4606      	mov	r6, r0
 802094e:	b96b      	cbnz	r3, 802096c <uxr_serialize_INFO_Payload+0x64>
 8020950:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8020954:	4628      	mov	r0, r5
 8020956:	f7f8 fcff 	bl	8019358 <ucdr_serialize_bool>
 802095a:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 802095e:	4030      	ands	r0, r6
 8020960:	b2c6      	uxtb	r6, r0
 8020962:	b983      	cbnz	r3, 8020986 <uxr_serialize_INFO_Payload+0x7e>
 8020964:	ea06 0007 	and.w	r0, r6, r7
 8020968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802096c:	7b21      	ldrb	r1, [r4, #12]
 802096e:	4628      	mov	r0, r5
 8020970:	f7f8 fd20 	bl	80193b4 <ucdr_serialize_uint8_t>
 8020974:	b188      	cbz	r0, 802099a <uxr_serialize_INFO_Payload+0x92>
 8020976:	f104 010c 	add.w	r1, r4, #12
 802097a:	4628      	mov	r0, r5
 802097c:	f7ff fa0c 	bl	801fd98 <uxr_serialize_ObjectVariant.part.0>
 8020980:	4030      	ands	r0, r6
 8020982:	b2c6      	uxtb	r6, r0
 8020984:	e7e4      	b.n	8020950 <uxr_serialize_INFO_Payload+0x48>
 8020986:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 802098a:	4628      	mov	r0, r5
 802098c:	f7ff fdb8 	bl	8020500 <uxr_serialize_ActivityInfoVariant>
 8020990:	4006      	ands	r6, r0
 8020992:	ea06 0007 	and.w	r0, r6, r7
 8020996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802099a:	4606      	mov	r6, r0
 802099c:	e7d8      	b.n	8020950 <uxr_serialize_INFO_Payload+0x48>
 802099e:	bf00      	nop

080209a0 <uxr_serialize_READ_DATA_Payload>:
 80209a0:	b570      	push	{r4, r5, r6, lr}
 80209a2:	2202      	movs	r2, #2
 80209a4:	4605      	mov	r5, r0
 80209a6:	460e      	mov	r6, r1
 80209a8:	f7fd f8e6 	bl	801db78 <ucdr_serialize_array_uint8_t>
 80209ac:	2202      	movs	r2, #2
 80209ae:	4604      	mov	r4, r0
 80209b0:	4628      	mov	r0, r5
 80209b2:	18b1      	adds	r1, r6, r2
 80209b4:	f7fd f8e0 	bl	801db78 <ucdr_serialize_array_uint8_t>
 80209b8:	4603      	mov	r3, r0
 80209ba:	1d31      	adds	r1, r6, #4
 80209bc:	4628      	mov	r0, r5
 80209be:	401c      	ands	r4, r3
 80209c0:	f7ff fe5e 	bl	8020680 <uxr_serialize_ReadSpecification>
 80209c4:	b2e4      	uxtb	r4, r4
 80209c6:	4020      	ands	r0, r4
 80209c8:	bd70      	pop	{r4, r5, r6, pc}
 80209ca:	bf00      	nop

080209cc <uxr_serialize_WRITE_DATA_Payload_Data>:
 80209cc:	b570      	push	{r4, r5, r6, lr}
 80209ce:	2202      	movs	r2, #2
 80209d0:	4605      	mov	r5, r0
 80209d2:	460e      	mov	r6, r1
 80209d4:	f7fd f8d0 	bl	801db78 <ucdr_serialize_array_uint8_t>
 80209d8:	2202      	movs	r2, #2
 80209da:	4604      	mov	r4, r0
 80209dc:	4628      	mov	r0, r5
 80209de:	18b1      	adds	r1, r6, r2
 80209e0:	f7fd f8ca 	bl	801db78 <ucdr_serialize_array_uint8_t>
 80209e4:	4020      	ands	r0, r4
 80209e6:	b2c0      	uxtb	r0, r0
 80209e8:	bd70      	pop	{r4, r5, r6, pc}
 80209ea:	bf00      	nop

080209ec <uxr_serialize_ACKNACK_Payload>:
 80209ec:	b570      	push	{r4, r5, r6, lr}
 80209ee:	460c      	mov	r4, r1
 80209f0:	4605      	mov	r5, r0
 80209f2:	460e      	mov	r6, r1
 80209f4:	f834 1b02 	ldrh.w	r1, [r4], #2
 80209f8:	f7f8 fd08 	bl	801940c <ucdr_serialize_uint16_t>
 80209fc:	2202      	movs	r2, #2
 80209fe:	4621      	mov	r1, r4
 8020a00:	4604      	mov	r4, r0
 8020a02:	4628      	mov	r0, r5
 8020a04:	f7fd f8b8 	bl	801db78 <ucdr_serialize_array_uint8_t>
 8020a08:	4603      	mov	r3, r0
 8020a0a:	7931      	ldrb	r1, [r6, #4]
 8020a0c:	4628      	mov	r0, r5
 8020a0e:	401c      	ands	r4, r3
 8020a10:	f7f8 fcd0 	bl	80193b4 <ucdr_serialize_uint8_t>
 8020a14:	b2e4      	uxtb	r4, r4
 8020a16:	4020      	ands	r0, r4
 8020a18:	bd70      	pop	{r4, r5, r6, pc}
 8020a1a:	bf00      	nop

08020a1c <uxr_deserialize_ACKNACK_Payload>:
 8020a1c:	b570      	push	{r4, r5, r6, lr}
 8020a1e:	460e      	mov	r6, r1
 8020a20:	4605      	mov	r5, r0
 8020a22:	f7f8 fdf3 	bl	801960c <ucdr_deserialize_uint16_t>
 8020a26:	2202      	movs	r2, #2
 8020a28:	4604      	mov	r4, r0
 8020a2a:	4628      	mov	r0, r5
 8020a2c:	18b1      	adds	r1, r6, r2
 8020a2e:	f7fd f907 	bl	801dc40 <ucdr_deserialize_array_uint8_t>
 8020a32:	4603      	mov	r3, r0
 8020a34:	1d31      	adds	r1, r6, #4
 8020a36:	4628      	mov	r0, r5
 8020a38:	401c      	ands	r4, r3
 8020a3a:	f7f8 fcd1 	bl	80193e0 <ucdr_deserialize_uint8_t>
 8020a3e:	b2e4      	uxtb	r4, r4
 8020a40:	4020      	ands	r0, r4
 8020a42:	bd70      	pop	{r4, r5, r6, pc}

08020a44 <uxr_serialize_HEARTBEAT_Payload>:
 8020a44:	b570      	push	{r4, r5, r6, lr}
 8020a46:	460d      	mov	r5, r1
 8020a48:	4606      	mov	r6, r0
 8020a4a:	8809      	ldrh	r1, [r1, #0]
 8020a4c:	f7f8 fcde 	bl	801940c <ucdr_serialize_uint16_t>
 8020a50:	8869      	ldrh	r1, [r5, #2]
 8020a52:	4604      	mov	r4, r0
 8020a54:	4630      	mov	r0, r6
 8020a56:	f7f8 fcd9 	bl	801940c <ucdr_serialize_uint16_t>
 8020a5a:	4603      	mov	r3, r0
 8020a5c:	7929      	ldrb	r1, [r5, #4]
 8020a5e:	4630      	mov	r0, r6
 8020a60:	401c      	ands	r4, r3
 8020a62:	f7f8 fca7 	bl	80193b4 <ucdr_serialize_uint8_t>
 8020a66:	b2e4      	uxtb	r4, r4
 8020a68:	4020      	ands	r0, r4
 8020a6a:	bd70      	pop	{r4, r5, r6, pc}

08020a6c <uxr_deserialize_HEARTBEAT_Payload>:
 8020a6c:	b570      	push	{r4, r5, r6, lr}
 8020a6e:	460e      	mov	r6, r1
 8020a70:	4605      	mov	r5, r0
 8020a72:	f7f8 fdcb 	bl	801960c <ucdr_deserialize_uint16_t>
 8020a76:	4604      	mov	r4, r0
 8020a78:	1cb1      	adds	r1, r6, #2
 8020a7a:	4628      	mov	r0, r5
 8020a7c:	f7f8 fdc6 	bl	801960c <ucdr_deserialize_uint16_t>
 8020a80:	4603      	mov	r3, r0
 8020a82:	1d31      	adds	r1, r6, #4
 8020a84:	4628      	mov	r0, r5
 8020a86:	401c      	ands	r4, r3
 8020a88:	f7f8 fcaa 	bl	80193e0 <ucdr_deserialize_uint8_t>
 8020a8c:	b2e4      	uxtb	r4, r4
 8020a8e:	4020      	ands	r0, r4
 8020a90:	bd70      	pop	{r4, r5, r6, pc}
 8020a92:	bf00      	nop

08020a94 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8020a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020a98:	460e      	mov	r6, r1
 8020a9a:	4605      	mov	r5, r0
 8020a9c:	f7f9 fb52 	bl	801a144 <ucdr_deserialize_int32_t>
 8020aa0:	4607      	mov	r7, r0
 8020aa2:	1d31      	adds	r1, r6, #4
 8020aa4:	4628      	mov	r0, r5
 8020aa6:	f7f8 ffcb 	bl	8019a40 <ucdr_deserialize_uint32_t>
 8020aaa:	4680      	mov	r8, r0
 8020aac:	f106 0108 	add.w	r1, r6, #8
 8020ab0:	4628      	mov	r0, r5
 8020ab2:	f7f9 fb47 	bl	801a144 <ucdr_deserialize_int32_t>
 8020ab6:	ea07 0708 	and.w	r7, r7, r8
 8020aba:	4604      	mov	r4, r0
 8020abc:	f106 010c 	add.w	r1, r6, #12
 8020ac0:	4628      	mov	r0, r5
 8020ac2:	403c      	ands	r4, r7
 8020ac4:	f7f8 ffbc 	bl	8019a40 <ucdr_deserialize_uint32_t>
 8020ac8:	f106 0110 	add.w	r1, r6, #16
 8020acc:	4004      	ands	r4, r0
 8020ace:	4628      	mov	r0, r5
 8020ad0:	f7f9 fb38 	bl	801a144 <ucdr_deserialize_int32_t>
 8020ad4:	4603      	mov	r3, r0
 8020ad6:	b2e4      	uxtb	r4, r4
 8020ad8:	4628      	mov	r0, r5
 8020ada:	461d      	mov	r5, r3
 8020adc:	f106 0114 	add.w	r1, r6, #20
 8020ae0:	f7f8 ffae 	bl	8019a40 <ucdr_deserialize_uint32_t>
 8020ae4:	402c      	ands	r4, r5
 8020ae6:	4020      	ands	r0, r4
 8020ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020aec <uxr_serialize_SampleIdentity>:
 8020aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020af0:	4604      	mov	r4, r0
 8020af2:	460d      	mov	r5, r1
 8020af4:	220c      	movs	r2, #12
 8020af6:	f7fd f83f 	bl	801db78 <ucdr_serialize_array_uint8_t>
 8020afa:	2203      	movs	r2, #3
 8020afc:	f105 010c 	add.w	r1, r5, #12
 8020b00:	4607      	mov	r7, r0
 8020b02:	4620      	mov	r0, r4
 8020b04:	f7fd f838 	bl	801db78 <ucdr_serialize_array_uint8_t>
 8020b08:	7be9      	ldrb	r1, [r5, #15]
 8020b0a:	4680      	mov	r8, r0
 8020b0c:	4620      	mov	r0, r4
 8020b0e:	f7f8 fc51 	bl	80193b4 <ucdr_serialize_uint8_t>
 8020b12:	6929      	ldr	r1, [r5, #16]
 8020b14:	4606      	mov	r6, r0
 8020b16:	4620      	mov	r0, r4
 8020b18:	f7f9 fa7c 	bl	801a014 <ucdr_serialize_int32_t>
 8020b1c:	ea07 0708 	and.w	r7, r7, r8
 8020b20:	4603      	mov	r3, r0
 8020b22:	4620      	mov	r0, r4
 8020b24:	403e      	ands	r6, r7
 8020b26:	6969      	ldr	r1, [r5, #20]
 8020b28:	461c      	mov	r4, r3
 8020b2a:	f7f8 fe59 	bl	80197e0 <ucdr_serialize_uint32_t>
 8020b2e:	4034      	ands	r4, r6
 8020b30:	4020      	ands	r0, r4
 8020b32:	b2c0      	uxtb	r0, r0
 8020b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020b38 <uxr_deserialize_SampleIdentity>:
 8020b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020b3c:	4604      	mov	r4, r0
 8020b3e:	460d      	mov	r5, r1
 8020b40:	220c      	movs	r2, #12
 8020b42:	f7fd f87d 	bl	801dc40 <ucdr_deserialize_array_uint8_t>
 8020b46:	2203      	movs	r2, #3
 8020b48:	f105 010c 	add.w	r1, r5, #12
 8020b4c:	4607      	mov	r7, r0
 8020b4e:	4620      	mov	r0, r4
 8020b50:	f7fd f876 	bl	801dc40 <ucdr_deserialize_array_uint8_t>
 8020b54:	f105 010f 	add.w	r1, r5, #15
 8020b58:	4680      	mov	r8, r0
 8020b5a:	4620      	mov	r0, r4
 8020b5c:	f7f8 fc40 	bl	80193e0 <ucdr_deserialize_uint8_t>
 8020b60:	f105 0110 	add.w	r1, r5, #16
 8020b64:	4606      	mov	r6, r0
 8020b66:	4620      	mov	r0, r4
 8020b68:	f7f9 faec 	bl	801a144 <ucdr_deserialize_int32_t>
 8020b6c:	ea07 0708 	and.w	r7, r7, r8
 8020b70:	4603      	mov	r3, r0
 8020b72:	4620      	mov	r0, r4
 8020b74:	403e      	ands	r6, r7
 8020b76:	f105 0114 	add.w	r1, r5, #20
 8020b7a:	461c      	mov	r4, r3
 8020b7c:	f7f8 ff60 	bl	8019a40 <ucdr_deserialize_uint32_t>
 8020b80:	4034      	ands	r4, r6
 8020b82:	4020      	ands	r0, r4
 8020b84:	b2c0      	uxtb	r0, r0
 8020b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020b8a:	bf00      	nop

08020b8c <rcl_client_get_rmw_handle>:
 8020b8c:	b118      	cbz	r0, 8020b96 <rcl_client_get_rmw_handle+0xa>
 8020b8e:	6800      	ldr	r0, [r0, #0]
 8020b90:	b108      	cbz	r0, 8020b96 <rcl_client_get_rmw_handle+0xa>
 8020b92:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8020b96:	4770      	bx	lr

08020b98 <rcl_send_request>:
 8020b98:	b570      	push	{r4, r5, r6, lr}
 8020b9a:	b082      	sub	sp, #8
 8020b9c:	b1f8      	cbz	r0, 8020bde <rcl_send_request+0x46>
 8020b9e:	4604      	mov	r4, r0
 8020ba0:	6800      	ldr	r0, [r0, #0]
 8020ba2:	b1e0      	cbz	r0, 8020bde <rcl_send_request+0x46>
 8020ba4:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8020ba8:	b1cb      	cbz	r3, 8020bde <rcl_send_request+0x46>
 8020baa:	460e      	mov	r6, r1
 8020bac:	b1e1      	cbz	r1, 8020be8 <rcl_send_request+0x50>
 8020bae:	4615      	mov	r5, r2
 8020bb0:	b1d2      	cbz	r2, 8020be8 <rcl_send_request+0x50>
 8020bb2:	2105      	movs	r1, #5
 8020bb4:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8020bb8:	f002 fc56 	bl	8023468 <__atomic_load_8>
 8020bbc:	4602      	mov	r2, r0
 8020bbe:	460b      	mov	r3, r1
 8020bc0:	4631      	mov	r1, r6
 8020bc2:	e9c5 2300 	strd	r2, r3, [r5]
 8020bc6:	6823      	ldr	r3, [r4, #0]
 8020bc8:	462a      	mov	r2, r5
 8020bca:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8020bce:	f003 fe5b 	bl	8024888 <rmw_send_request>
 8020bd2:	4606      	mov	r6, r0
 8020bd4:	b160      	cbz	r0, 8020bf0 <rcl_send_request+0x58>
 8020bd6:	2601      	movs	r6, #1
 8020bd8:	4630      	mov	r0, r6
 8020bda:	b002      	add	sp, #8
 8020bdc:	bd70      	pop	{r4, r5, r6, pc}
 8020bde:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8020be2:	4630      	mov	r0, r6
 8020be4:	b002      	add	sp, #8
 8020be6:	bd70      	pop	{r4, r5, r6, pc}
 8020be8:	260b      	movs	r6, #11
 8020bea:	4630      	mov	r0, r6
 8020bec:	b002      	add	sp, #8
 8020bee:	bd70      	pop	{r4, r5, r6, pc}
 8020bf0:	6820      	ldr	r0, [r4, #0]
 8020bf2:	2105      	movs	r1, #5
 8020bf4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8020bf8:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8020bfc:	9100      	str	r1, [sp, #0]
 8020bfe:	f002 fc9f 	bl	8023540 <__atomic_exchange_8>
 8020c02:	4630      	mov	r0, r6
 8020c04:	b002      	add	sp, #8
 8020c06:	bd70      	pop	{r4, r5, r6, pc}

08020c08 <rcl_take_response>:
 8020c08:	b570      	push	{r4, r5, r6, lr}
 8020c0a:	468e      	mov	lr, r1
 8020c0c:	b08c      	sub	sp, #48	@ 0x30
 8020c0e:	460c      	mov	r4, r1
 8020c10:	4616      	mov	r6, r2
 8020c12:	f10d 0c18 	add.w	ip, sp, #24
 8020c16:	4605      	mov	r5, r0
 8020c18:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8020c1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8020c20:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8020c24:	e88c 0003 	stmia.w	ip, {r0, r1}
 8020c28:	b35d      	cbz	r5, 8020c82 <rcl_take_response+0x7a>
 8020c2a:	682b      	ldr	r3, [r5, #0]
 8020c2c:	b34b      	cbz	r3, 8020c82 <rcl_take_response+0x7a>
 8020c2e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8020c32:	b330      	cbz	r0, 8020c82 <rcl_take_response+0x7a>
 8020c34:	b346      	cbz	r6, 8020c88 <rcl_take_response+0x80>
 8020c36:	2300      	movs	r3, #0
 8020c38:	4632      	mov	r2, r6
 8020c3a:	a902      	add	r1, sp, #8
 8020c3c:	f88d 3007 	strb.w	r3, [sp, #7]
 8020c40:	f10d 0307 	add.w	r3, sp, #7
 8020c44:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8020c90 <rcl_take_response+0x88>
 8020c48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8020c4c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8020c50:	f003 ff22 	bl	8024a98 <rmw_take_response>
 8020c54:	4605      	mov	r5, r0
 8020c56:	b9c8      	cbnz	r0, 8020c8c <rcl_take_response+0x84>
 8020c58:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8020c5c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8020c60:	2a00      	cmp	r2, #0
 8020c62:	bf08      	it	eq
 8020c64:	461d      	moveq	r5, r3
 8020c66:	f10d 0e18 	add.w	lr, sp, #24
 8020c6a:	46a4      	mov	ip, r4
 8020c6c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8020c70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8020c74:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8020c78:	e88c 0003 	stmia.w	ip, {r0, r1}
 8020c7c:	4628      	mov	r0, r5
 8020c7e:	b00c      	add	sp, #48	@ 0x30
 8020c80:	bd70      	pop	{r4, r5, r6, pc}
 8020c82:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8020c86:	e7ee      	b.n	8020c66 <rcl_take_response+0x5e>
 8020c88:	250b      	movs	r5, #11
 8020c8a:	e7ec      	b.n	8020c66 <rcl_take_response+0x5e>
 8020c8c:	2501      	movs	r5, #1
 8020c8e:	e7ea      	b.n	8020c66 <rcl_take_response+0x5e>
	...

08020c98 <rcl_client_is_valid>:
 8020c98:	b130      	cbz	r0, 8020ca8 <rcl_client_is_valid+0x10>
 8020c9a:	6800      	ldr	r0, [r0, #0]
 8020c9c:	b120      	cbz	r0, 8020ca8 <rcl_client_is_valid+0x10>
 8020c9e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8020ca2:	3800      	subs	r0, #0
 8020ca4:	bf18      	it	ne
 8020ca6:	2001      	movne	r0, #1
 8020ca8:	4770      	bx	lr
 8020caa:	bf00      	nop

08020cac <rcl_convert_rmw_ret_to_rcl_ret>:
 8020cac:	280b      	cmp	r0, #11
 8020cae:	dc0d      	bgt.n	8020ccc <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8020cb0:	2800      	cmp	r0, #0
 8020cb2:	db09      	blt.n	8020cc8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8020cb4:	280b      	cmp	r0, #11
 8020cb6:	d807      	bhi.n	8020cc8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8020cb8:	e8df f000 	tbb	[pc, r0]
 8020cbc:	07060607 	.word	0x07060607
 8020cc0:	06060606 	.word	0x06060606
 8020cc4:	07070606 	.word	0x07070606
 8020cc8:	2001      	movs	r0, #1
 8020cca:	4770      	bx	lr
 8020ccc:	28cb      	cmp	r0, #203	@ 0xcb
 8020cce:	bf18      	it	ne
 8020cd0:	2001      	movne	r0, #1
 8020cd2:	4770      	bx	lr

08020cd4 <rcl_get_zero_initialized_context>:
 8020cd4:	4a03      	ldr	r2, [pc, #12]	@ (8020ce4 <rcl_get_zero_initialized_context+0x10>)
 8020cd6:	4603      	mov	r3, r0
 8020cd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8020cdc:	e883 0003 	stmia.w	r3, {r0, r1}
 8020ce0:	4618      	mov	r0, r3
 8020ce2:	4770      	bx	lr
 8020ce4:	0802da8c 	.word	0x0802da8c

08020ce8 <rcl_context_is_valid>:
 8020ce8:	b118      	cbz	r0, 8020cf2 <rcl_context_is_valid+0xa>
 8020cea:	6840      	ldr	r0, [r0, #4]
 8020cec:	3800      	subs	r0, #0
 8020cee:	bf18      	it	ne
 8020cf0:	2001      	movne	r0, #1
 8020cf2:	4770      	bx	lr

08020cf4 <__cleanup_context>:
 8020cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020cf8:	4606      	mov	r6, r0
 8020cfa:	2300      	movs	r3, #0
 8020cfc:	6800      	ldr	r0, [r0, #0]
 8020cfe:	6073      	str	r3, [r6, #4]
 8020d00:	2800      	cmp	r0, #0
 8020d02:	d049      	beq.n	8020d98 <__cleanup_context+0xa4>
 8020d04:	6947      	ldr	r7, [r0, #20]
 8020d06:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8020d0a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8020d0e:	b137      	cbz	r7, 8020d1e <__cleanup_context+0x2a>
 8020d10:	3014      	adds	r0, #20
 8020d12:	f000 f9a7 	bl	8021064 <rcl_init_options_fini>
 8020d16:	4607      	mov	r7, r0
 8020d18:	2800      	cmp	r0, #0
 8020d1a:	d144      	bne.n	8020da6 <__cleanup_context+0xb2>
 8020d1c:	6830      	ldr	r0, [r6, #0]
 8020d1e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8020d20:	b143      	cbz	r3, 8020d34 <__cleanup_context+0x40>
 8020d22:	3028      	adds	r0, #40	@ 0x28
 8020d24:	f003 fbf6 	bl	8024514 <rmw_context_fini>
 8020d28:	b118      	cbz	r0, 8020d32 <__cleanup_context+0x3e>
 8020d2a:	2f00      	cmp	r7, #0
 8020d2c:	d03e      	beq.n	8020dac <__cleanup_context+0xb8>
 8020d2e:	f7fa ff93 	bl	801bc58 <rcutils_reset_error>
 8020d32:	6830      	ldr	r0, [r6, #0]
 8020d34:	6a03      	ldr	r3, [r0, #32]
 8020d36:	b1db      	cbz	r3, 8020d70 <__cleanup_context+0x7c>
 8020d38:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8020d3c:	2a01      	cmp	r2, #1
 8020d3e:	f17c 0100 	sbcs.w	r1, ip, #0
 8020d42:	db11      	blt.n	8020d68 <__cleanup_context+0x74>
 8020d44:	2400      	movs	r4, #0
 8020d46:	4625      	mov	r5, r4
 8020d48:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8020d4c:	4649      	mov	r1, r9
 8020d4e:	b1b8      	cbz	r0, 8020d80 <__cleanup_context+0x8c>
 8020d50:	47c0      	blx	r8
 8020d52:	6833      	ldr	r3, [r6, #0]
 8020d54:	3401      	adds	r4, #1
 8020d56:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8020d5a:	f145 0500 	adc.w	r5, r5, #0
 8020d5e:	6a1b      	ldr	r3, [r3, #32]
 8020d60:	4294      	cmp	r4, r2
 8020d62:	eb75 010c 	sbcs.w	r1, r5, ip
 8020d66:	dbef      	blt.n	8020d48 <__cleanup_context+0x54>
 8020d68:	4618      	mov	r0, r3
 8020d6a:	4649      	mov	r1, r9
 8020d6c:	47c0      	blx	r8
 8020d6e:	6830      	ldr	r0, [r6, #0]
 8020d70:	4649      	mov	r1, r9
 8020d72:	47c0      	blx	r8
 8020d74:	2300      	movs	r3, #0
 8020d76:	4638      	mov	r0, r7
 8020d78:	e9c6 3300 	strd	r3, r3, [r6]
 8020d7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020d80:	3401      	adds	r4, #1
 8020d82:	f145 0500 	adc.w	r5, r5, #0
 8020d86:	4294      	cmp	r4, r2
 8020d88:	eb75 010c 	sbcs.w	r1, r5, ip
 8020d8c:	dbdc      	blt.n	8020d48 <__cleanup_context+0x54>
 8020d8e:	4618      	mov	r0, r3
 8020d90:	4649      	mov	r1, r9
 8020d92:	47c0      	blx	r8
 8020d94:	6830      	ldr	r0, [r6, #0]
 8020d96:	e7eb      	b.n	8020d70 <__cleanup_context+0x7c>
 8020d98:	4607      	mov	r7, r0
 8020d9a:	2300      	movs	r3, #0
 8020d9c:	4638      	mov	r0, r7
 8020d9e:	e9c6 3300 	strd	r3, r3, [r6]
 8020da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020da6:	f7fa ff57 	bl	801bc58 <rcutils_reset_error>
 8020daa:	e7b7      	b.n	8020d1c <__cleanup_context+0x28>
 8020dac:	f7ff ff7e 	bl	8020cac <rcl_convert_rmw_ret_to_rcl_ret>
 8020db0:	4607      	mov	r7, r0
 8020db2:	e7bc      	b.n	8020d2e <__cleanup_context+0x3a>

08020db4 <rcl_init>:
 8020db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020db8:	1e05      	subs	r5, r0, #0
 8020dba:	b09c      	sub	sp, #112	@ 0x70
 8020dbc:	460e      	mov	r6, r1
 8020dbe:	4690      	mov	r8, r2
 8020dc0:	461f      	mov	r7, r3
 8020dc2:	f340 809c 	ble.w	8020efe <rcl_init+0x14a>
 8020dc6:	2900      	cmp	r1, #0
 8020dc8:	f000 809c 	beq.w	8020f04 <rcl_init+0x150>
 8020dcc:	f1a1 0e04 	sub.w	lr, r1, #4
 8020dd0:	f04f 0c00 	mov.w	ip, #0
 8020dd4:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8020dd8:	f10c 0c01 	add.w	ip, ip, #1
 8020ddc:	2c00      	cmp	r4, #0
 8020dde:	f000 8091 	beq.w	8020f04 <rcl_init+0x150>
 8020de2:	4565      	cmp	r5, ip
 8020de4:	d1f6      	bne.n	8020dd4 <rcl_init+0x20>
 8020de6:	f1b8 0f00 	cmp.w	r8, #0
 8020dea:	f000 808b 	beq.w	8020f04 <rcl_init+0x150>
 8020dee:	f8d8 4000 	ldr.w	r4, [r8]
 8020df2:	2c00      	cmp	r4, #0
 8020df4:	f000 8086 	beq.w	8020f04 <rcl_init+0x150>
 8020df8:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8020dfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8020dfe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8020e02:	6823      	ldr	r3, [r4, #0]
 8020e04:	a817      	add	r0, sp, #92	@ 0x5c
 8020e06:	f8cc 3000 	str.w	r3, [ip]
 8020e0a:	f7fa feff 	bl	801bc0c <rcutils_allocator_is_valid>
 8020e0e:	f080 0001 	eor.w	r0, r0, #1
 8020e12:	b2c0      	uxtb	r0, r0
 8020e14:	2800      	cmp	r0, #0
 8020e16:	d175      	bne.n	8020f04 <rcl_init+0x150>
 8020e18:	2f00      	cmp	r7, #0
 8020e1a:	d073      	beq.n	8020f04 <rcl_init+0x150>
 8020e1c:	683b      	ldr	r3, [r7, #0]
 8020e1e:	2b00      	cmp	r3, #0
 8020e20:	d175      	bne.n	8020f0e <rcl_init+0x15a>
 8020e22:	2178      	movs	r1, #120	@ 0x78
 8020e24:	2001      	movs	r0, #1
 8020e26:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8020e2a:	4798      	blx	r3
 8020e2c:	4604      	mov	r4, r0
 8020e2e:	6038      	str	r0, [r7, #0]
 8020e30:	2800      	cmp	r0, #0
 8020e32:	f000 80a0 	beq.w	8020f76 <rcl_init+0x1c2>
 8020e36:	a802      	add	r0, sp, #8
 8020e38:	f002 fe82 	bl	8023b40 <rmw_get_zero_initialized_context>
 8020e3c:	a902      	add	r1, sp, #8
 8020e3e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8020e42:	2250      	movs	r2, #80	@ 0x50
 8020e44:	f007 fb23 	bl	802848e <memcpy>
 8020e48:	ac17      	add	r4, sp, #92	@ 0x5c
 8020e4a:	f8d7 e000 	ldr.w	lr, [r7]
 8020e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8020e50:	46f4      	mov	ip, lr
 8020e52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8020e56:	6823      	ldr	r3, [r4, #0]
 8020e58:	f10e 0114 	add.w	r1, lr, #20
 8020e5c:	4640      	mov	r0, r8
 8020e5e:	f8cc 3000 	str.w	r3, [ip]
 8020e62:	f000 f929 	bl	80210b8 <rcl_init_options_copy>
 8020e66:	4604      	mov	r4, r0
 8020e68:	2800      	cmp	r0, #0
 8020e6a:	d144      	bne.n	8020ef6 <rcl_init+0x142>
 8020e6c:	f8d7 9000 	ldr.w	r9, [r7]
 8020e70:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8020e74:	f8c9 0020 	str.w	r0, [r9, #32]
 8020e78:	f8c9 5018 	str.w	r5, [r9, #24]
 8020e7c:	f8c9 801c 	str.w	r8, [r9, #28]
 8020e80:	2d00      	cmp	r5, #0
 8020e82:	d04b      	beq.n	8020f1c <rcl_init+0x168>
 8020e84:	2e00      	cmp	r6, #0
 8020e86:	d049      	beq.n	8020f1c <rcl_init+0x168>
 8020e88:	2104      	movs	r1, #4
 8020e8a:	4628      	mov	r0, r5
 8020e8c:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8020e90:	4798      	blx	r3
 8020e92:	f8c9 0020 	str.w	r0, [r9, #32]
 8020e96:	f8d7 9000 	ldr.w	r9, [r7]
 8020e9a:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8020e9e:	46ca      	mov	sl, r9
 8020ea0:	b343      	cbz	r3, 8020ef4 <rcl_init+0x140>
 8020ea2:	2d01      	cmp	r5, #1
 8020ea4:	f178 0300 	sbcs.w	r3, r8, #0
 8020ea8:	db38      	blt.n	8020f1c <rcl_init+0x168>
 8020eaa:	2400      	movs	r4, #0
 8020eac:	3e04      	subs	r6, #4
 8020eae:	46a1      	mov	r9, r4
 8020eb0:	e00b      	b.n	8020eca <rcl_init+0x116>
 8020eb2:	6831      	ldr	r1, [r6, #0]
 8020eb4:	f007 faeb 	bl	802848e <memcpy>
 8020eb8:	3401      	adds	r4, #1
 8020eba:	f149 0900 	adc.w	r9, r9, #0
 8020ebe:	45c8      	cmp	r8, r9
 8020ec0:	bf08      	it	eq
 8020ec2:	42a5      	cmpeq	r5, r4
 8020ec4:	d028      	beq.n	8020f18 <rcl_init+0x164>
 8020ec6:	f8d7 a000 	ldr.w	sl, [r7]
 8020eca:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8020ece:	f7df f9c1 	bl	8000254 <strlen>
 8020ed2:	1c42      	adds	r2, r0, #1
 8020ed4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020ed6:	4610      	mov	r0, r2
 8020ed8:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8020eda:	f8da a020 	ldr.w	sl, [sl, #32]
 8020ede:	9201      	str	r2, [sp, #4]
 8020ee0:	4798      	blx	r3
 8020ee2:	683b      	ldr	r3, [r7, #0]
 8020ee4:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8020ee8:	6a1b      	ldr	r3, [r3, #32]
 8020eea:	9a01      	ldr	r2, [sp, #4]
 8020eec:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8020ef0:	2800      	cmp	r0, #0
 8020ef2:	d1de      	bne.n	8020eb2 <rcl_init+0xfe>
 8020ef4:	240a      	movs	r4, #10
 8020ef6:	4638      	mov	r0, r7
 8020ef8:	f7ff fefc 	bl	8020cf4 <__cleanup_context>
 8020efc:	e003      	b.n	8020f06 <rcl_init+0x152>
 8020efe:	2900      	cmp	r1, #0
 8020f00:	f43f af71 	beq.w	8020de6 <rcl_init+0x32>
 8020f04:	240b      	movs	r4, #11
 8020f06:	4620      	mov	r0, r4
 8020f08:	b01c      	add	sp, #112	@ 0x70
 8020f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020f0e:	2464      	movs	r4, #100	@ 0x64
 8020f10:	4620      	mov	r0, r4
 8020f12:	b01c      	add	sp, #112	@ 0x70
 8020f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020f18:	f8d7 9000 	ldr.w	r9, [r7]
 8020f1c:	491c      	ldr	r1, [pc, #112]	@ (8020f90 <rcl_init+0x1dc>)
 8020f1e:	680b      	ldr	r3, [r1, #0]
 8020f20:	3301      	adds	r3, #1
 8020f22:	d023      	beq.n	8020f6c <rcl_init+0x1b8>
 8020f24:	461a      	mov	r2, r3
 8020f26:	2400      	movs	r4, #0
 8020f28:	600b      	str	r3, [r1, #0]
 8020f2a:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8020f2e:	607b      	str	r3, [r7, #4]
 8020f30:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8020f32:	6182      	str	r2, [r0, #24]
 8020f34:	3301      	adds	r3, #1
 8020f36:	61c4      	str	r4, [r0, #28]
 8020f38:	d01f      	beq.n	8020f7a <rcl_init+0x1c6>
 8020f3a:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8020f3e:	b94b      	cbnz	r3, 8020f54 <rcl_init+0x1a0>
 8020f40:	3030      	adds	r0, #48	@ 0x30
 8020f42:	f000 f927 	bl	8021194 <rcl_get_localhost_only>
 8020f46:	4604      	mov	r4, r0
 8020f48:	2800      	cmp	r0, #0
 8020f4a:	d1d4      	bne.n	8020ef6 <rcl_init+0x142>
 8020f4c:	f8d7 9000 	ldr.w	r9, [r7]
 8020f50:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8020f54:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 8020f58:	3018      	adds	r0, #24
 8020f5a:	f003 f9a5 	bl	80242a8 <rmw_init>
 8020f5e:	4604      	mov	r4, r0
 8020f60:	2800      	cmp	r0, #0
 8020f62:	d0d0      	beq.n	8020f06 <rcl_init+0x152>
 8020f64:	f7ff fea2 	bl	8020cac <rcl_convert_rmw_ret_to_rcl_ret>
 8020f68:	4604      	mov	r4, r0
 8020f6a:	e7c4      	b.n	8020ef6 <rcl_init+0x142>
 8020f6c:	2201      	movs	r2, #1
 8020f6e:	461c      	mov	r4, r3
 8020f70:	600a      	str	r2, [r1, #0]
 8020f72:	4613      	mov	r3, r2
 8020f74:	e7d9      	b.n	8020f2a <rcl_init+0x176>
 8020f76:	240a      	movs	r4, #10
 8020f78:	e7c5      	b.n	8020f06 <rcl_init+0x152>
 8020f7a:	3024      	adds	r0, #36	@ 0x24
 8020f7c:	f005 ffa0 	bl	8026ec0 <rcl_get_default_domain_id>
 8020f80:	4604      	mov	r4, r0
 8020f82:	2800      	cmp	r0, #0
 8020f84:	d1b7      	bne.n	8020ef6 <rcl_init+0x142>
 8020f86:	f8d7 9000 	ldr.w	r9, [r7]
 8020f8a:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8020f8e:	e7d4      	b.n	8020f3a <rcl_init+0x186>
 8020f90:	20014e5c 	.word	0x20014e5c

08020f94 <rcl_get_zero_initialized_init_options>:
 8020f94:	2000      	movs	r0, #0
 8020f96:	4770      	bx	lr

08020f98 <rcl_init_options_init>:
 8020f98:	b084      	sub	sp, #16
 8020f9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020f9c:	b097      	sub	sp, #92	@ 0x5c
 8020f9e:	ae1d      	add	r6, sp, #116	@ 0x74
 8020fa0:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8020fa4:	2800      	cmp	r0, #0
 8020fa6:	d058      	beq.n	802105a <rcl_init_options_init+0xc2>
 8020fa8:	6803      	ldr	r3, [r0, #0]
 8020faa:	4605      	mov	r5, r0
 8020fac:	b133      	cbz	r3, 8020fbc <rcl_init_options_init+0x24>
 8020fae:	2464      	movs	r4, #100	@ 0x64
 8020fb0:	4620      	mov	r0, r4
 8020fb2:	b017      	add	sp, #92	@ 0x5c
 8020fb4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8020fb8:	b004      	add	sp, #16
 8020fba:	4770      	bx	lr
 8020fbc:	4630      	mov	r0, r6
 8020fbe:	f7fa fe25 	bl	801bc0c <rcutils_allocator_is_valid>
 8020fc2:	2800      	cmp	r0, #0
 8020fc4:	d049      	beq.n	802105a <rcl_init_options_init+0xc2>
 8020fc6:	46b4      	mov	ip, r6
 8020fc8:	ac11      	add	r4, sp, #68	@ 0x44
 8020fca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8020fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020fd0:	f8dc 3000 	ldr.w	r3, [ip]
 8020fd4:	2050      	movs	r0, #80	@ 0x50
 8020fd6:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8020fd8:	6023      	str	r3, [r4, #0]
 8020fda:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8020fdc:	4798      	blx	r3
 8020fde:	4604      	mov	r4, r0
 8020fe0:	6028      	str	r0, [r5, #0]
 8020fe2:	2800      	cmp	r0, #0
 8020fe4:	d03b      	beq.n	802105e <rcl_init_options_init+0xc6>
 8020fe6:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8020fea:	4686      	mov	lr, r0
 8020fec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8020ff0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8020ff4:	f8dc 3000 	ldr.w	r3, [ip]
 8020ff8:	a802      	add	r0, sp, #8
 8020ffa:	f8ce 3000 	str.w	r3, [lr]
 8020ffe:	f002 fdb3 	bl	8023b68 <rmw_get_zero_initialized_init_options>
 8021002:	f10d 0e08 	add.w	lr, sp, #8
 8021006:	f104 0c18 	add.w	ip, r4, #24
 802100a:	682f      	ldr	r7, [r5, #0]
 802100c:	ac20      	add	r4, sp, #128	@ 0x80
 802100e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8021012:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021016:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 802101a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802101e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8021022:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021026:	e89e 0003 	ldmia.w	lr, {r0, r1}
 802102a:	e88c 0003 	stmia.w	ip, {r0, r1}
 802102e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8021032:	e88d 0003 	stmia.w	sp, {r0, r1}
 8021036:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 802103a:	f107 0018 	add.w	r0, r7, #24
 802103e:	f003 f813 	bl	8024068 <rmw_init_options_init>
 8021042:	4604      	mov	r4, r0
 8021044:	2800      	cmp	r0, #0
 8021046:	d0b3      	beq.n	8020fb0 <rcl_init_options_init+0x18>
 8021048:	9921      	ldr	r1, [sp, #132]	@ 0x84
 802104a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802104c:	6828      	ldr	r0, [r5, #0]
 802104e:	4798      	blx	r3
 8021050:	4620      	mov	r0, r4
 8021052:	f7ff fe2b 	bl	8020cac <rcl_convert_rmw_ret_to_rcl_ret>
 8021056:	4604      	mov	r4, r0
 8021058:	e7aa      	b.n	8020fb0 <rcl_init_options_init+0x18>
 802105a:	240b      	movs	r4, #11
 802105c:	e7a8      	b.n	8020fb0 <rcl_init_options_init+0x18>
 802105e:	240a      	movs	r4, #10
 8021060:	e7a6      	b.n	8020fb0 <rcl_init_options_init+0x18>
 8021062:	bf00      	nop

08021064 <rcl_init_options_fini>:
 8021064:	b530      	push	{r4, r5, lr}
 8021066:	b087      	sub	sp, #28
 8021068:	b1f0      	cbz	r0, 80210a8 <rcl_init_options_fini+0x44>
 802106a:	6803      	ldr	r3, [r0, #0]
 802106c:	4604      	mov	r4, r0
 802106e:	b1db      	cbz	r3, 80210a8 <rcl_init_options_fini+0x44>
 8021070:	469c      	mov	ip, r3
 8021072:	f10d 0e04 	add.w	lr, sp, #4
 8021076:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 802107a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 802107e:	f8dc 3000 	ldr.w	r3, [ip]
 8021082:	a801      	add	r0, sp, #4
 8021084:	f8ce 3000 	str.w	r3, [lr]
 8021088:	f7fa fdc0 	bl	801bc0c <rcutils_allocator_is_valid>
 802108c:	b160      	cbz	r0, 80210a8 <rcl_init_options_fini+0x44>
 802108e:	6820      	ldr	r0, [r4, #0]
 8021090:	3018      	adds	r0, #24
 8021092:	f003 f8c1 	bl	8024218 <rmw_init_options_fini>
 8021096:	4605      	mov	r5, r0
 8021098:	b950      	cbnz	r0, 80210b0 <rcl_init_options_fini+0x4c>
 802109a:	6820      	ldr	r0, [r4, #0]
 802109c:	9b02      	ldr	r3, [sp, #8]
 802109e:	9905      	ldr	r1, [sp, #20]
 80210a0:	4798      	blx	r3
 80210a2:	4628      	mov	r0, r5
 80210a4:	b007      	add	sp, #28
 80210a6:	bd30      	pop	{r4, r5, pc}
 80210a8:	250b      	movs	r5, #11
 80210aa:	4628      	mov	r0, r5
 80210ac:	b007      	add	sp, #28
 80210ae:	bd30      	pop	{r4, r5, pc}
 80210b0:	f7ff fdfc 	bl	8020cac <rcl_convert_rmw_ret_to_rcl_ret>
 80210b4:	4605      	mov	r5, r0
 80210b6:	e7f8      	b.n	80210aa <rcl_init_options_fini+0x46>

080210b8 <rcl_init_options_copy>:
 80210b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80210bc:	b094      	sub	sp, #80	@ 0x50
 80210be:	2800      	cmp	r0, #0
 80210c0:	d05b      	beq.n	802117a <rcl_init_options_copy+0xc2>
 80210c2:	4604      	mov	r4, r0
 80210c4:	6800      	ldr	r0, [r0, #0]
 80210c6:	2800      	cmp	r0, #0
 80210c8:	d057      	beq.n	802117a <rcl_init_options_copy+0xc2>
 80210ca:	460e      	mov	r6, r1
 80210cc:	f7fa fd9e 	bl	801bc0c <rcutils_allocator_is_valid>
 80210d0:	2e00      	cmp	r6, #0
 80210d2:	d052      	beq.n	802117a <rcl_init_options_copy+0xc2>
 80210d4:	f080 0001 	eor.w	r0, r0, #1
 80210d8:	b2c0      	uxtb	r0, r0
 80210da:	2800      	cmp	r0, #0
 80210dc:	d14d      	bne.n	802117a <rcl_init_options_copy+0xc2>
 80210de:	6833      	ldr	r3, [r6, #0]
 80210e0:	b123      	cbz	r3, 80210ec <rcl_init_options_copy+0x34>
 80210e2:	2464      	movs	r4, #100	@ 0x64
 80210e4:	4620      	mov	r0, r4
 80210e6:	b014      	add	sp, #80	@ 0x50
 80210e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80210ec:	6827      	ldr	r7, [r4, #0]
 80210ee:	ad0f      	add	r5, sp, #60	@ 0x3c
 80210f0:	46bc      	mov	ip, r7
 80210f2:	f8d7 8000 	ldr.w	r8, [r7]
 80210f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80210fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80210fc:	f8dc 3000 	ldr.w	r3, [ip]
 8021100:	2050      	movs	r0, #80	@ 0x50
 8021102:	4619      	mov	r1, r3
 8021104:	602b      	str	r3, [r5, #0]
 8021106:	47c0      	blx	r8
 8021108:	4605      	mov	r5, r0
 802110a:	6030      	str	r0, [r6, #0]
 802110c:	b3d0      	cbz	r0, 8021184 <rcl_init_options_copy+0xcc>
 802110e:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8021112:	4686      	mov	lr, r0
 8021114:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8021118:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 802111c:	f8dc 3000 	ldr.w	r3, [ip]
 8021120:	4668      	mov	r0, sp
 8021122:	f8ce 3000 	str.w	r3, [lr]
 8021126:	f002 fd1f 	bl	8023b68 <rmw_get_zero_initialized_init_options>
 802112a:	46ee      	mov	lr, sp
 802112c:	f105 0c18 	add.w	ip, r5, #24
 8021130:	6824      	ldr	r4, [r4, #0]
 8021132:	6835      	ldr	r5, [r6, #0]
 8021134:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8021138:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802113c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8021140:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021144:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8021148:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802114c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8021150:	e88c 0003 	stmia.w	ip, {r0, r1}
 8021154:	f104 0018 	add.w	r0, r4, #24
 8021158:	f105 0118 	add.w	r1, r5, #24
 802115c:	f002 ffe6 	bl	802412c <rmw_init_options_copy>
 8021160:	4604      	mov	r4, r0
 8021162:	2800      	cmp	r0, #0
 8021164:	d0be      	beq.n	80210e4 <rcl_init_options_copy+0x2c>
 8021166:	f7fa fd5f 	bl	801bc28 <rcutils_get_error_string>
 802116a:	f7fa fd75 	bl	801bc58 <rcutils_reset_error>
 802116e:	4630      	mov	r0, r6
 8021170:	f7ff ff78 	bl	8021064 <rcl_init_options_fini>
 8021174:	b140      	cbz	r0, 8021188 <rcl_init_options_copy+0xd0>
 8021176:	4604      	mov	r4, r0
 8021178:	e7b4      	b.n	80210e4 <rcl_init_options_copy+0x2c>
 802117a:	240b      	movs	r4, #11
 802117c:	4620      	mov	r0, r4
 802117e:	b014      	add	sp, #80	@ 0x50
 8021180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021184:	240a      	movs	r4, #10
 8021186:	e7ad      	b.n	80210e4 <rcl_init_options_copy+0x2c>
 8021188:	4620      	mov	r0, r4
 802118a:	b014      	add	sp, #80	@ 0x50
 802118c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021190:	f7ff bd8c 	b.w	8020cac <rcl_convert_rmw_ret_to_rcl_ret>

08021194 <rcl_get_localhost_only>:
 8021194:	b510      	push	{r4, lr}
 8021196:	2300      	movs	r3, #0
 8021198:	b082      	sub	sp, #8
 802119a:	9301      	str	r3, [sp, #4]
 802119c:	b1b8      	cbz	r0, 80211ce <rcl_get_localhost_only+0x3a>
 802119e:	4604      	mov	r4, r0
 80211a0:	a901      	add	r1, sp, #4
 80211a2:	480c      	ldr	r0, [pc, #48]	@ (80211d4 <rcl_get_localhost_only+0x40>)
 80211a4:	f002 fa04 	bl	80235b0 <rcutils_get_env>
 80211a8:	b110      	cbz	r0, 80211b0 <rcl_get_localhost_only+0x1c>
 80211aa:	2001      	movs	r0, #1
 80211ac:	b002      	add	sp, #8
 80211ae:	bd10      	pop	{r4, pc}
 80211b0:	9b01      	ldr	r3, [sp, #4]
 80211b2:	b113      	cbz	r3, 80211ba <rcl_get_localhost_only+0x26>
 80211b4:	781a      	ldrb	r2, [r3, #0]
 80211b6:	2a31      	cmp	r2, #49	@ 0x31
 80211b8:	d004      	beq.n	80211c4 <rcl_get_localhost_only+0x30>
 80211ba:	2302      	movs	r3, #2
 80211bc:	2000      	movs	r0, #0
 80211be:	7023      	strb	r3, [r4, #0]
 80211c0:	b002      	add	sp, #8
 80211c2:	bd10      	pop	{r4, pc}
 80211c4:	785b      	ldrb	r3, [r3, #1]
 80211c6:	2b00      	cmp	r3, #0
 80211c8:	d1f7      	bne.n	80211ba <rcl_get_localhost_only+0x26>
 80211ca:	2301      	movs	r3, #1
 80211cc:	e7f6      	b.n	80211bc <rcl_get_localhost_only+0x28>
 80211ce:	200b      	movs	r0, #11
 80211d0:	b002      	add	sp, #8
 80211d2:	bd10      	pop	{r4, pc}
 80211d4:	0802d44c 	.word	0x0802d44c

080211d8 <rcl_get_zero_initialized_node>:
 80211d8:	4a03      	ldr	r2, [pc, #12]	@ (80211e8 <rcl_get_zero_initialized_node+0x10>)
 80211da:	4603      	mov	r3, r0
 80211dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80211e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80211e4:	4618      	mov	r0, r3
 80211e6:	4770      	bx	lr
 80211e8:	0802da94 	.word	0x0802da94

080211ec <rcl_node_init>:
 80211ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211f0:	b0a9      	sub	sp, #164	@ 0xa4
 80211f2:	4604      	mov	r4, r0
 80211f4:	460e      	mov	r6, r1
 80211f6:	4615      	mov	r5, r2
 80211f8:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 80211fc:	a823      	add	r0, sp, #140	@ 0x8c
 80211fe:	461f      	mov	r7, r3
 8021200:	f006 f884 	bl	802730c <rcl_guard_condition_get_default_options>
 8021204:	f1b8 0f00 	cmp.w	r8, #0
 8021208:	f000 80f3 	beq.w	80213f2 <rcl_node_init+0x206>
 802120c:	4640      	mov	r0, r8
 802120e:	f7fa fcfd 	bl	801bc0c <rcutils_allocator_is_valid>
 8021212:	2d00      	cmp	r5, #0
 8021214:	bf18      	it	ne
 8021216:	2c00      	cmpne	r4, #0
 8021218:	f080 0001 	eor.w	r0, r0, #1
 802121c:	bf0c      	ite	eq
 802121e:	f04f 0c01 	moveq.w	ip, #1
 8021222:	f04f 0c00 	movne.w	ip, #0
 8021226:	2e00      	cmp	r6, #0
 8021228:	bf08      	it	eq
 802122a:	f04c 0c01 	orreq.w	ip, ip, #1
 802122e:	ea4c 0c00 	orr.w	ip, ip, r0
 8021232:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 8021236:	f040 80dc 	bne.w	80213f2 <rcl_node_init+0x206>
 802123a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 802123e:	f1ba 0f00 	cmp.w	sl, #0
 8021242:	f040 80fc 	bne.w	802143e <rcl_node_init+0x252>
 8021246:	2f00      	cmp	r7, #0
 8021248:	f000 80d3 	beq.w	80213f2 <rcl_node_init+0x206>
 802124c:	4638      	mov	r0, r7
 802124e:	f7ff fd4b 	bl	8020ce8 <rcl_context_is_valid>
 8021252:	4683      	mov	fp, r0
 8021254:	2800      	cmp	r0, #0
 8021256:	f000 80d2 	beq.w	80213fe <rcl_node_init+0x212>
 802125a:	4652      	mov	r2, sl
 802125c:	4630      	mov	r0, r6
 802125e:	a922      	add	r1, sp, #136	@ 0x88
 8021260:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 8021264:	f002 fe32 	bl	8023ecc <rmw_validate_node_name>
 8021268:	4682      	mov	sl, r0
 802126a:	2800      	cmp	r0, #0
 802126c:	f040 80c3 	bne.w	80213f6 <rcl_node_init+0x20a>
 8021270:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8021272:	2800      	cmp	r0, #0
 8021274:	f040 80f1 	bne.w	802145a <rcl_node_init+0x26e>
 8021278:	4628      	mov	r0, r5
 802127a:	f7de ffeb 	bl	8000254 <strlen>
 802127e:	2800      	cmp	r0, #0
 8021280:	f040 80c0 	bne.w	8021404 <rcl_node_init+0x218>
 8021284:	4d79      	ldr	r5, [pc, #484]	@ (802146c <rcl_node_init+0x280>)
 8021286:	a922      	add	r1, sp, #136	@ 0x88
 8021288:	2200      	movs	r2, #0
 802128a:	4628      	mov	r0, r5
 802128c:	f002 fe00 	bl	8023e90 <rmw_validate_namespace>
 8021290:	4682      	mov	sl, r0
 8021292:	2800      	cmp	r0, #0
 8021294:	f040 80af 	bne.w	80213f6 <rcl_node_init+0x20a>
 8021298:	9822      	ldr	r0, [sp, #136]	@ 0x88
 802129a:	2800      	cmp	r0, #0
 802129c:	f040 80d5 	bne.w	802144a <rcl_node_init+0x25e>
 80212a0:	f8d8 3000 	ldr.w	r3, [r8]
 80212a4:	2078      	movs	r0, #120	@ 0x78
 80212a6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80212aa:	4798      	blx	r3
 80212ac:	4682      	mov	sl, r0
 80212ae:	6060      	str	r0, [r4, #4]
 80212b0:	2800      	cmp	r0, #0
 80212b2:	f000 80cf 	beq.w	8021454 <rcl_node_init+0x268>
 80212b6:	2200      	movs	r2, #0
 80212b8:	2300      	movs	r3, #0
 80212ba:	a808      	add	r0, sp, #32
 80212bc:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 80212c0:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 80212c4:	f000 f902 	bl	80214cc <rcl_node_get_default_options>
 80212c8:	a908      	add	r1, sp, #32
 80212ca:	4650      	mov	r0, sl
 80212cc:	2268      	movs	r2, #104	@ 0x68
 80212ce:	f007 f8de 	bl	802848e <memcpy>
 80212d2:	6861      	ldr	r1, [r4, #4]
 80212d4:	4640      	mov	r0, r8
 80212d6:	6027      	str	r7, [r4, #0]
 80212d8:	f000 f906 	bl	80214e8 <rcl_node_options_copy>
 80212dc:	2800      	cmp	r0, #0
 80212de:	d158      	bne.n	8021392 <rcl_node_init+0x1a6>
 80212e0:	4628      	mov	r0, r5
 80212e2:	f7de ffb7 	bl	8000254 <strlen>
 80212e6:	4428      	add	r0, r5
 80212e8:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80212ec:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80212f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80212f2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80212f6:	9300      	str	r3, [sp, #0]
 80212f8:	bf0c      	ite	eq
 80212fa:	4b5d      	ldreq	r3, [pc, #372]	@ (8021470 <rcl_node_init+0x284>)
 80212fc:	4b5d      	ldrne	r3, [pc, #372]	@ (8021474 <rcl_node_init+0x288>)
 80212fe:	9302      	str	r3, [sp, #8]
 8021300:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8021304:	9301      	str	r3, [sp, #4]
 8021306:	f8d4 a004 	ldr.w	sl, [r4, #4]
 802130a:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 802130e:	f002 f967 	bl	80235e0 <rcutils_format_string_limit>
 8021312:	6823      	ldr	r3, [r4, #0]
 8021314:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 8021318:	4631      	mov	r1, r6
 802131a:	6818      	ldr	r0, [r3, #0]
 802131c:	462a      	mov	r2, r5
 802131e:	6866      	ldr	r6, [r4, #4]
 8021320:	3028      	adds	r0, #40	@ 0x28
 8021322:	f003 fa1b 	bl	802475c <rmw_create_node>
 8021326:	6863      	ldr	r3, [r4, #4]
 8021328:	66b0      	str	r0, [r6, #104]	@ 0x68
 802132a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 802132c:	2800      	cmp	r0, #0
 802132e:	d032      	beq.n	8021396 <rcl_node_init+0x1aa>
 8021330:	f003 faa4 	bl	802487c <rmw_node_get_graph_guard_condition>
 8021334:	4682      	mov	sl, r0
 8021336:	b360      	cbz	r0, 8021392 <rcl_node_init+0x1a6>
 8021338:	f8d8 3000 	ldr.w	r3, [r8]
 802133c:	2008      	movs	r0, #8
 802133e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8021342:	6866      	ldr	r6, [r4, #4]
 8021344:	4798      	blx	r3
 8021346:	6863      	ldr	r3, [r4, #4]
 8021348:	66f0      	str	r0, [r6, #108]	@ 0x6c
 802134a:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 802134e:	f1bb 0f00 	cmp.w	fp, #0
 8021352:	d020      	beq.n	8021396 <rcl_node_init+0x1aa>
 8021354:	a806      	add	r0, sp, #24
 8021356:	ae23      	add	r6, sp, #140	@ 0x8c
 8021358:	f005 ff4c 	bl	80271f4 <rcl_get_zero_initialized_guard_condition>
 802135c:	a806      	add	r0, sp, #24
 802135e:	6863      	ldr	r3, [r4, #4]
 8021360:	46c4      	mov	ip, r8
 8021362:	c803      	ldmia	r0, {r0, r1}
 8021364:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8021368:	e88b 0003 	stmia.w	fp, {r0, r1}
 802136c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8021370:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8021372:	f8dc 3000 	ldr.w	r3, [ip]
 8021376:	6033      	str	r3, [r6, #0]
 8021378:	ab28      	add	r3, sp, #160	@ 0xa0
 802137a:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 802137e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8021382:	4651      	mov	r1, sl
 8021384:	463a      	mov	r2, r7
 8021386:	4670      	mov	r0, lr
 8021388:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802138a:	f005 ff3d 	bl	8027208 <rcl_guard_condition_init_from_rmw>
 802138e:	4682      	mov	sl, r0
 8021390:	b328      	cbz	r0, 80213de <rcl_node_init+0x1f2>
 8021392:	6863      	ldr	r3, [r4, #4]
 8021394:	b1f3      	cbz	r3, 80213d4 <rcl_node_init+0x1e8>
 8021396:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8021398:	b128      	cbz	r0, 80213a6 <rcl_node_init+0x1ba>
 802139a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 802139e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80213a2:	4798      	blx	r3
 80213a4:	6863      	ldr	r3, [r4, #4]
 80213a6:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80213a8:	b110      	cbz	r0, 80213b0 <rcl_node_init+0x1c4>
 80213aa:	f003 f9e9 	bl	8024780 <rmw_destroy_node>
 80213ae:	6863      	ldr	r3, [r4, #4]
 80213b0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80213b2:	b148      	cbz	r0, 80213c8 <rcl_node_init+0x1dc>
 80213b4:	f005 ff84 	bl	80272c0 <rcl_guard_condition_fini>
 80213b8:	6863      	ldr	r3, [r4, #4]
 80213ba:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80213be:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80213c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80213c4:	4798      	blx	r3
 80213c6:	6863      	ldr	r3, [r4, #4]
 80213c8:	4618      	mov	r0, r3
 80213ca:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80213ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80213d2:	4798      	blx	r3
 80213d4:	2300      	movs	r3, #0
 80213d6:	f04f 0a01 	mov.w	sl, #1
 80213da:	e9c4 3300 	strd	r3, r3, [r4]
 80213de:	f1b9 0f00 	cmp.w	r9, #0
 80213e2:	d008      	beq.n	80213f6 <rcl_node_init+0x20a>
 80213e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80213e8:	4628      	mov	r0, r5
 80213ea:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80213ee:	4798      	blx	r3
 80213f0:	e001      	b.n	80213f6 <rcl_node_init+0x20a>
 80213f2:	f04f 0a0b 	mov.w	sl, #11
 80213f6:	4650      	mov	r0, sl
 80213f8:	b029      	add	sp, #164	@ 0xa4
 80213fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213fe:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 8021402:	e7f8      	b.n	80213f6 <rcl_node_init+0x20a>
 8021404:	782b      	ldrb	r3, [r5, #0]
 8021406:	2b2f      	cmp	r3, #47	@ 0x2f
 8021408:	f43f af3d 	beq.w	8021286 <rcl_node_init+0x9a>
 802140c:	9503      	str	r5, [sp, #12]
 802140e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8021412:	9300      	str	r3, [sp, #0]
 8021414:	4b18      	ldr	r3, [pc, #96]	@ (8021478 <rcl_node_init+0x28c>)
 8021416:	9302      	str	r3, [sp, #8]
 8021418:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 802141c:	9301      	str	r3, [sp, #4]
 802141e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8021422:	f002 f8dd 	bl	80235e0 <rcutils_format_string_limit>
 8021426:	4605      	mov	r5, r0
 8021428:	b1e0      	cbz	r0, 8021464 <rcl_node_init+0x278>
 802142a:	2200      	movs	r2, #0
 802142c:	a922      	add	r1, sp, #136	@ 0x88
 802142e:	9222      	str	r2, [sp, #136]	@ 0x88
 8021430:	f002 fd2e 	bl	8023e90 <rmw_validate_namespace>
 8021434:	4682      	mov	sl, r0
 8021436:	2800      	cmp	r0, #0
 8021438:	d1d4      	bne.n	80213e4 <rcl_node_init+0x1f8>
 802143a:	46d9      	mov	r9, fp
 802143c:	e72c      	b.n	8021298 <rcl_node_init+0xac>
 802143e:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 8021442:	4650      	mov	r0, sl
 8021444:	b029      	add	sp, #164	@ 0xa4
 8021446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802144a:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 802144e:	f002 fd31 	bl	8023eb4 <rmw_namespace_validation_result_string>
 8021452:	e7c4      	b.n	80213de <rcl_node_init+0x1f2>
 8021454:	f04f 0a0a 	mov.w	sl, #10
 8021458:	e7c1      	b.n	80213de <rcl_node_init+0x1f2>
 802145a:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 802145e:	f002 fd89 	bl	8023f74 <rmw_node_name_validation_result_string>
 8021462:	e7c8      	b.n	80213f6 <rcl_node_init+0x20a>
 8021464:	f04f 0a0a 	mov.w	sl, #10
 8021468:	e7c5      	b.n	80213f6 <rcl_node_init+0x20a>
 802146a:	bf00      	nop
 802146c:	0802d464 	.word	0x0802d464
 8021470:	0802d00c 	.word	0x0802d00c
 8021474:	0802d46c 	.word	0x0802d46c
 8021478:	0802d468 	.word	0x0802d468

0802147c <rcl_node_is_valid>:
 802147c:	b130      	cbz	r0, 802148c <rcl_node_is_valid+0x10>
 802147e:	6843      	ldr	r3, [r0, #4]
 8021480:	b123      	cbz	r3, 802148c <rcl_node_is_valid+0x10>
 8021482:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8021484:	b113      	cbz	r3, 802148c <rcl_node_is_valid+0x10>
 8021486:	6800      	ldr	r0, [r0, #0]
 8021488:	f7ff bc2e 	b.w	8020ce8 <rcl_context_is_valid>
 802148c:	2000      	movs	r0, #0
 802148e:	4770      	bx	lr

08021490 <rcl_node_get_name>:
 8021490:	b120      	cbz	r0, 802149c <rcl_node_get_name+0xc>
 8021492:	6840      	ldr	r0, [r0, #4]
 8021494:	b110      	cbz	r0, 802149c <rcl_node_get_name+0xc>
 8021496:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8021498:	b100      	cbz	r0, 802149c <rcl_node_get_name+0xc>
 802149a:	6880      	ldr	r0, [r0, #8]
 802149c:	4770      	bx	lr
 802149e:	bf00      	nop

080214a0 <rcl_node_get_namespace>:
 80214a0:	b120      	cbz	r0, 80214ac <rcl_node_get_namespace+0xc>
 80214a2:	6840      	ldr	r0, [r0, #4]
 80214a4:	b110      	cbz	r0, 80214ac <rcl_node_get_namespace+0xc>
 80214a6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80214a8:	b100      	cbz	r0, 80214ac <rcl_node_get_namespace+0xc>
 80214aa:	68c0      	ldr	r0, [r0, #12]
 80214ac:	4770      	bx	lr
 80214ae:	bf00      	nop

080214b0 <rcl_node_get_options>:
 80214b0:	b128      	cbz	r0, 80214be <rcl_node_get_options+0xe>
 80214b2:	6840      	ldr	r0, [r0, #4]
 80214b4:	b118      	cbz	r0, 80214be <rcl_node_get_options+0xe>
 80214b6:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80214b8:	2b00      	cmp	r3, #0
 80214ba:	bf08      	it	eq
 80214bc:	2000      	moveq	r0, #0
 80214be:	4770      	bx	lr

080214c0 <rcl_node_get_rmw_handle>:
 80214c0:	b110      	cbz	r0, 80214c8 <rcl_node_get_rmw_handle+0x8>
 80214c2:	6840      	ldr	r0, [r0, #4]
 80214c4:	b100      	cbz	r0, 80214c8 <rcl_node_get_rmw_handle+0x8>
 80214c6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80214c8:	4770      	bx	lr
 80214ca:	bf00      	nop

080214cc <rcl_node_get_default_options>:
 80214cc:	b510      	push	{r4, lr}
 80214ce:	4604      	mov	r4, r0
 80214d0:	2268      	movs	r2, #104	@ 0x68
 80214d2:	2100      	movs	r1, #0
 80214d4:	f006 feb4 	bl	8028240 <memset>
 80214d8:	4620      	mov	r0, r4
 80214da:	f7fa fb89 	bl	801bbf0 <rcutils_get_default_allocator>
 80214de:	2301      	movs	r3, #1
 80214e0:	4620      	mov	r0, r4
 80214e2:	7523      	strb	r3, [r4, #20]
 80214e4:	bd10      	pop	{r4, pc}
 80214e6:	bf00      	nop

080214e8 <rcl_node_options_copy>:
 80214e8:	2800      	cmp	r0, #0
 80214ea:	bf18      	it	ne
 80214ec:	4288      	cmpne	r0, r1
 80214ee:	d01b      	beq.n	8021528 <rcl_node_options_copy+0x40>
 80214f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80214f2:	fab1 f681 	clz	r6, r1
 80214f6:	460c      	mov	r4, r1
 80214f8:	0976      	lsrs	r6, r6, #5
 80214fa:	b199      	cbz	r1, 8021524 <rcl_node_options_copy+0x3c>
 80214fc:	4605      	mov	r5, r0
 80214fe:	8a87      	ldrh	r7, [r0, #20]
 8021500:	4684      	mov	ip, r0
 8021502:	468e      	mov	lr, r1
 8021504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021506:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 802150a:	682b      	ldr	r3, [r5, #0]
 802150c:	2250      	movs	r2, #80	@ 0x50
 802150e:	f10c 0118 	add.w	r1, ip, #24
 8021512:	f104 0018 	add.w	r0, r4, #24
 8021516:	f8ce 3000 	str.w	r3, [lr]
 802151a:	82a7      	strh	r7, [r4, #20]
 802151c:	f006 ffb7 	bl	802848e <memcpy>
 8021520:	4630      	mov	r0, r6
 8021522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021524:	200b      	movs	r0, #11
 8021526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021528:	200b      	movs	r0, #11
 802152a:	4770      	bx	lr

0802152c <rcl_node_resolve_name>:
 802152c:	b082      	sub	sp, #8
 802152e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021532:	b091      	sub	sp, #68	@ 0x44
 8021534:	ac1a      	add	r4, sp, #104	@ 0x68
 8021536:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 802153a:	e884 000c 	stmia.w	r4, {r2, r3}
 802153e:	2800      	cmp	r0, #0
 8021540:	d03d      	beq.n	80215be <rcl_node_resolve_name+0x92>
 8021542:	460c      	mov	r4, r1
 8021544:	4605      	mov	r5, r0
 8021546:	f7ff ffb3 	bl	80214b0 <rcl_node_get_options>
 802154a:	2800      	cmp	r0, #0
 802154c:	d03a      	beq.n	80215c4 <rcl_node_resolve_name+0x98>
 802154e:	4628      	mov	r0, r5
 8021550:	f7ff ff9e 	bl	8021490 <rcl_node_get_name>
 8021554:	4606      	mov	r6, r0
 8021556:	4628      	mov	r0, r5
 8021558:	ad0b      	add	r5, sp, #44	@ 0x2c
 802155a:	f7ff ffa1 	bl	80214a0 <rcl_node_get_namespace>
 802155e:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8021562:	4607      	mov	r7, r0
 8021564:	46ac      	mov	ip, r5
 8021566:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 802156a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802156e:	f8de 3000 	ldr.w	r3, [lr]
 8021572:	f8cc 3000 	str.w	r3, [ip]
 8021576:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8021578:	b30b      	cbz	r3, 80215be <rcl_node_resolve_name+0x92>
 802157a:	4689      	mov	r9, r1
 802157c:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 8021580:	f002 f9ae 	bl	80238e0 <rcutils_get_zero_initialized_string_map>
 8021584:	ab10      	add	r3, sp, #64	@ 0x40
 8021586:	9008      	str	r0, [sp, #32]
 8021588:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 802158c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8021590:	2100      	movs	r1, #0
 8021592:	a808      	add	r0, sp, #32
 8021594:	e895 000c 	ldmia.w	r5, {r2, r3}
 8021598:	f002 fa18 	bl	80239cc <rcutils_string_map_init>
 802159c:	4683      	mov	fp, r0
 802159e:	b1a0      	cbz	r0, 80215ca <rcl_node_resolve_name+0x9e>
 80215a0:	f7fa fb42 	bl	801bc28 <rcutils_get_error_string>
 80215a4:	f7fa fb58 	bl	801bc58 <rcutils_reset_error>
 80215a8:	f1bb 0f0a 	cmp.w	fp, #10
 80215ac:	bf18      	it	ne
 80215ae:	f04f 0b01 	movne.w	fp, #1
 80215b2:	4658      	mov	r0, fp
 80215b4:	b011      	add	sp, #68	@ 0x44
 80215b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215ba:	b002      	add	sp, #8
 80215bc:	4770      	bx	lr
 80215be:	f04f 0b0b 	mov.w	fp, #11
 80215c2:	e7f6      	b.n	80215b2 <rcl_node_resolve_name+0x86>
 80215c4:	f04f 0b01 	mov.w	fp, #1
 80215c8:	e7f3      	b.n	80215b2 <rcl_node_resolve_name+0x86>
 80215ca:	9009      	str	r0, [sp, #36]	@ 0x24
 80215cc:	9007      	str	r0, [sp, #28]
 80215ce:	a808      	add	r0, sp, #32
 80215d0:	f005 fe0a 	bl	80271e8 <rcl_get_default_topic_name_substitutions>
 80215d4:	4683      	mov	fp, r0
 80215d6:	b180      	cbz	r0, 80215fa <rcl_node_resolve_name+0xce>
 80215d8:	280a      	cmp	r0, #10
 80215da:	a808      	add	r0, sp, #32
 80215dc:	bf18      	it	ne
 80215de:	f04f 0b01 	movne.w	fp, #1
 80215e2:	f002 fa33 	bl	8023a4c <rcutils_string_map_fini>
 80215e6:	4604      	mov	r4, r0
 80215e8:	2800      	cmp	r0, #0
 80215ea:	d15b      	bne.n	80216a4 <rcl_node_resolve_name+0x178>
 80215ec:	4651      	mov	r1, sl
 80215ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80215f0:	47c8      	blx	r9
 80215f2:	4651      	mov	r1, sl
 80215f4:	4620      	mov	r0, r4
 80215f6:	47c8      	blx	r9
 80215f8:	e7db      	b.n	80215b2 <rcl_node_resolve_name+0x86>
 80215fa:	ab09      	add	r3, sp, #36	@ 0x24
 80215fc:	46ec      	mov	ip, sp
 80215fe:	9305      	str	r3, [sp, #20]
 8021600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021602:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021606:	682b      	ldr	r3, [r5, #0]
 8021608:	463a      	mov	r2, r7
 802160a:	4631      	mov	r1, r6
 802160c:	4620      	mov	r0, r4
 802160e:	f8cc 3000 	str.w	r3, [ip]
 8021612:	ab08      	add	r3, sp, #32
 8021614:	f005 fc88 	bl	8026f28 <rcl_expand_topic_name>
 8021618:	4683      	mov	fp, r0
 802161a:	b9d8      	cbnz	r0, 8021654 <rcl_node_resolve_name+0x128>
 802161c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802161e:	4602      	mov	r2, r0
 8021620:	9009      	str	r0, [sp, #36]	@ 0x24
 8021622:	a90a      	add	r1, sp, #40	@ 0x28
 8021624:	4620      	mov	r0, r4
 8021626:	f002 fb63 	bl	8023cf0 <rmw_validate_full_topic_name>
 802162a:	bb50      	cbnz	r0, 8021682 <rcl_node_resolve_name+0x156>
 802162c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802162e:	2d00      	cmp	r5, #0
 8021630:	d140      	bne.n	80216b4 <rcl_node_resolve_name+0x188>
 8021632:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8021634:	a808      	add	r0, sp, #32
 8021636:	601c      	str	r4, [r3, #0]
 8021638:	f002 fa08 	bl	8023a4c <rcutils_string_map_fini>
 802163c:	4683      	mov	fp, r0
 802163e:	2800      	cmp	r0, #0
 8021640:	d043      	beq.n	80216ca <rcl_node_resolve_name+0x19e>
 8021642:	f7fa faf1 	bl	801bc28 <rcutils_get_error_string>
 8021646:	46a8      	mov	r8, r5
 8021648:	f04f 0b01 	mov.w	fp, #1
 802164c:	462c      	mov	r4, r5
 802164e:	f7fa fb03 	bl	801bc58 <rcutils_reset_error>
 8021652:	e00a      	b.n	802166a <rcl_node_resolve_name+0x13e>
 8021654:	2867      	cmp	r0, #103	@ 0x67
 8021656:	bf14      	ite	ne
 8021658:	f04f 0800 	movne.w	r8, #0
 802165c:	f008 0801 	andeq.w	r8, r8, #1
 8021660:	9c07      	ldr	r4, [sp, #28]
 8021662:	a808      	add	r0, sp, #32
 8021664:	f002 f9f2 	bl	8023a4c <rcutils_string_map_fini>
 8021668:	bb50      	cbnz	r0, 80216c0 <rcl_node_resolve_name+0x194>
 802166a:	4651      	mov	r1, sl
 802166c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802166e:	47c8      	blx	r9
 8021670:	4651      	mov	r1, sl
 8021672:	4620      	mov	r0, r4
 8021674:	47c8      	blx	r9
 8021676:	f1b8 0f00 	cmp.w	r8, #0
 802167a:	bf18      	it	ne
 802167c:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 8021680:	e797      	b.n	80215b2 <rcl_node_resolve_name+0x86>
 8021682:	f7fa fad1 	bl	801bc28 <rcutils_get_error_string>
 8021686:	f7fa fae7 	bl	801bc58 <rcutils_reset_error>
 802168a:	a808      	add	r0, sp, #32
 802168c:	f002 f9de 	bl	8023a4c <rcutils_string_map_fini>
 8021690:	b998      	cbnz	r0, 80216ba <rcl_node_resolve_name+0x18e>
 8021692:	4651      	mov	r1, sl
 8021694:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021696:	47c8      	blx	r9
 8021698:	4651      	mov	r1, sl
 802169a:	4620      	mov	r0, r4
 802169c:	f04f 0b01 	mov.w	fp, #1
 80216a0:	47c8      	blx	r9
 80216a2:	e786      	b.n	80215b2 <rcl_node_resolve_name+0x86>
 80216a4:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80216a8:	f7fa fabe 	bl	801bc28 <rcutils_get_error_string>
 80216ac:	f7fa fad4 	bl	801bc58 <rcutils_reset_error>
 80216b0:	4644      	mov	r4, r8
 80216b2:	e7da      	b.n	802166a <rcl_node_resolve_name+0x13e>
 80216b4:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 80216b8:	e7d3      	b.n	8021662 <rcl_node_resolve_name+0x136>
 80216ba:	46d8      	mov	r8, fp
 80216bc:	f04f 0b01 	mov.w	fp, #1
 80216c0:	f7fa fab2 	bl	801bc28 <rcutils_get_error_string>
 80216c4:	f7fa fac8 	bl	801bc58 <rcutils_reset_error>
 80216c8:	e7cf      	b.n	802166a <rcl_node_resolve_name+0x13e>
 80216ca:	4651      	mov	r1, sl
 80216cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80216ce:	47c8      	blx	r9
 80216d0:	4651      	mov	r1, sl
 80216d2:	4658      	mov	r0, fp
 80216d4:	47c8      	blx	r9
 80216d6:	e76c      	b.n	80215b2 <rcl_node_resolve_name+0x86>

080216d8 <rcl_service_get_rmw_handle>:
 80216d8:	b118      	cbz	r0, 80216e2 <rcl_service_get_rmw_handle+0xa>
 80216da:	6800      	ldr	r0, [r0, #0]
 80216dc:	b108      	cbz	r0, 80216e2 <rcl_service_get_rmw_handle+0xa>
 80216de:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80216e2:	4770      	bx	lr

080216e4 <rcl_take_request>:
 80216e4:	b570      	push	{r4, r5, r6, lr}
 80216e6:	468e      	mov	lr, r1
 80216e8:	b08c      	sub	sp, #48	@ 0x30
 80216ea:	460c      	mov	r4, r1
 80216ec:	4616      	mov	r6, r2
 80216ee:	f10d 0c18 	add.w	ip, sp, #24
 80216f2:	4605      	mov	r5, r0
 80216f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80216f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80216fc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8021700:	e88c 0003 	stmia.w	ip, {r0, r1}
 8021704:	b30d      	cbz	r5, 802174a <rcl_take_request+0x66>
 8021706:	682b      	ldr	r3, [r5, #0]
 8021708:	b1fb      	cbz	r3, 802174a <rcl_take_request+0x66>
 802170a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 802170e:	b1e0      	cbz	r0, 802174a <rcl_take_request+0x66>
 8021710:	b336      	cbz	r6, 8021760 <rcl_take_request+0x7c>
 8021712:	2300      	movs	r3, #0
 8021714:	4632      	mov	r2, r6
 8021716:	a902      	add	r1, sp, #8
 8021718:	f88d 3007 	strb.w	r3, [sp, #7]
 802171c:	f10d 0307 	add.w	r3, sp, #7
 8021720:	f003 f900 	bl	8024924 <rmw_take_request>
 8021724:	4605      	mov	r5, r0
 8021726:	b198      	cbz	r0, 8021750 <rcl_take_request+0x6c>
 8021728:	280a      	cmp	r0, #10
 802172a:	bf18      	it	ne
 802172c:	2501      	movne	r5, #1
 802172e:	f10d 0e18 	add.w	lr, sp, #24
 8021732:	46a4      	mov	ip, r4
 8021734:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8021738:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802173c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8021740:	e88c 0003 	stmia.w	ip, {r0, r1}
 8021744:	4628      	mov	r0, r5
 8021746:	b00c      	add	sp, #48	@ 0x30
 8021748:	bd70      	pop	{r4, r5, r6, pc}
 802174a:	f44f 7516 	mov.w	r5, #600	@ 0x258
 802174e:	e7ee      	b.n	802172e <rcl_take_request+0x4a>
 8021750:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8021754:	f240 2359 	movw	r3, #601	@ 0x259
 8021758:	2a00      	cmp	r2, #0
 802175a:	bf08      	it	eq
 802175c:	461d      	moveq	r5, r3
 802175e:	e7e6      	b.n	802172e <rcl_take_request+0x4a>
 8021760:	250b      	movs	r5, #11
 8021762:	e7e4      	b.n	802172e <rcl_take_request+0x4a>

08021764 <rcl_send_response>:
 8021764:	b170      	cbz	r0, 8021784 <rcl_send_response+0x20>
 8021766:	6800      	ldr	r0, [r0, #0]
 8021768:	b160      	cbz	r0, 8021784 <rcl_send_response+0x20>
 802176a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 802176e:	b148      	cbz	r0, 8021784 <rcl_send_response+0x20>
 8021770:	b169      	cbz	r1, 802178e <rcl_send_response+0x2a>
 8021772:	b510      	push	{r4, lr}
 8021774:	b14a      	cbz	r2, 802178a <rcl_send_response+0x26>
 8021776:	f003 f933 	bl	80249e0 <rmw_send_response>
 802177a:	b110      	cbz	r0, 8021782 <rcl_send_response+0x1e>
 802177c:	2802      	cmp	r0, #2
 802177e:	bf18      	it	ne
 8021780:	2001      	movne	r0, #1
 8021782:	bd10      	pop	{r4, pc}
 8021784:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8021788:	4770      	bx	lr
 802178a:	200b      	movs	r0, #11
 802178c:	bd10      	pop	{r4, pc}
 802178e:	200b      	movs	r0, #11
 8021790:	4770      	bx	lr
 8021792:	bf00      	nop

08021794 <rcl_service_is_valid>:
 8021794:	b130      	cbz	r0, 80217a4 <rcl_service_is_valid+0x10>
 8021796:	6800      	ldr	r0, [r0, #0]
 8021798:	b120      	cbz	r0, 80217a4 <rcl_service_is_valid+0x10>
 802179a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 802179e:	3800      	subs	r0, #0
 80217a0:	bf18      	it	ne
 80217a2:	2001      	movne	r0, #1
 80217a4:	4770      	bx	lr
 80217a6:	bf00      	nop

080217a8 <rcl_get_zero_initialized_subscription>:
 80217a8:	4b01      	ldr	r3, [pc, #4]	@ (80217b0 <rcl_get_zero_initialized_subscription+0x8>)
 80217aa:	6818      	ldr	r0, [r3, #0]
 80217ac:	4770      	bx	lr
 80217ae:	bf00      	nop
 80217b0:	0802da9c 	.word	0x0802da9c

080217b4 <rcl_subscription_init>:
 80217b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80217b8:	b088      	sub	sp, #32
 80217ba:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80217bc:	b1ff      	cbz	r7, 80217fe <rcl_subscription_init+0x4a>
 80217be:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 80217c2:	4605      	mov	r5, r0
 80217c4:	460e      	mov	r6, r1
 80217c6:	4691      	mov	r9, r2
 80217c8:	4650      	mov	r0, sl
 80217ca:	4698      	mov	r8, r3
 80217cc:	f7fa fa1e 	bl	801bc0c <rcutils_allocator_is_valid>
 80217d0:	f080 0401 	eor.w	r4, r0, #1
 80217d4:	b2e4      	uxtb	r4, r4
 80217d6:	b994      	cbnz	r4, 80217fe <rcl_subscription_init+0x4a>
 80217d8:	b18d      	cbz	r5, 80217fe <rcl_subscription_init+0x4a>
 80217da:	4630      	mov	r0, r6
 80217dc:	f7ff fe4e 	bl	802147c <rcl_node_is_valid>
 80217e0:	2800      	cmp	r0, #0
 80217e2:	d055      	beq.n	8021890 <rcl_subscription_init+0xdc>
 80217e4:	f1b9 0f00 	cmp.w	r9, #0
 80217e8:	d009      	beq.n	80217fe <rcl_subscription_init+0x4a>
 80217ea:	f1b8 0f00 	cmp.w	r8, #0
 80217ee:	d006      	beq.n	80217fe <rcl_subscription_init+0x4a>
 80217f0:	682b      	ldr	r3, [r5, #0]
 80217f2:	b14b      	cbz	r3, 8021808 <rcl_subscription_init+0x54>
 80217f4:	2464      	movs	r4, #100	@ 0x64
 80217f6:	4620      	mov	r0, r4
 80217f8:	b008      	add	sp, #32
 80217fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80217fe:	240b      	movs	r4, #11
 8021800:	4620      	mov	r0, r4
 8021802:	b008      	add	sp, #32
 8021804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021808:	e9cd 3303 	strd	r3, r3, [sp, #12]
 802180c:	aa07      	add	r2, sp, #28
 802180e:	9307      	str	r3, [sp, #28]
 8021810:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8021814:	9205      	str	r2, [sp, #20]
 8021816:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802181a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 802181e:	4641      	mov	r1, r8
 8021820:	4630      	mov	r0, r6
 8021822:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8021826:	f7ff fe81 	bl	802152c <rcl_node_resolve_name>
 802182a:	2800      	cmp	r0, #0
 802182c:	d15f      	bne.n	80218ee <rcl_subscription_init+0x13a>
 802182e:	21c8      	movs	r1, #200	@ 0xc8
 8021830:	2001      	movs	r0, #1
 8021832:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	@ 0x5c
 8021836:	4798      	blx	r3
 8021838:	6028      	str	r0, [r5, #0]
 802183a:	2800      	cmp	r0, #0
 802183c:	d05f      	beq.n	80218fe <rcl_subscription_init+0x14a>
 802183e:	4630      	mov	r0, r6
 8021840:	f7ff fe3e 	bl	80214c0 <rcl_node_get_rmw_handle>
 8021844:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8021848:	4649      	mov	r1, r9
 802184a:	9a07      	ldr	r2, [sp, #28]
 802184c:	9300      	str	r3, [sp, #0]
 802184e:	463b      	mov	r3, r7
 8021850:	682c      	ldr	r4, [r5, #0]
 8021852:	f003 f9ad 	bl	8024bb0 <rmw_create_subscription>
 8021856:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 802185a:	682c      	ldr	r4, [r5, #0]
 802185c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8021860:	b348      	cbz	r0, 80218b6 <rcl_subscription_init+0x102>
 8021862:	f104 0170 	add.w	r1, r4, #112	@ 0x70
 8021866:	f003 fa99 	bl	8024d9c <rmw_subscription_get_actual_qos>
 802186a:	4604      	mov	r4, r0
 802186c:	b9a8      	cbnz	r0, 802189a <rcl_subscription_init+0xe6>
 802186e:	6828      	ldr	r0, [r5, #0]
 8021870:	2270      	movs	r2, #112	@ 0x70
 8021872:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8021876:	4639      	mov	r1, r7
 8021878:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 802187c:	f006 fe07 	bl	802848e <memcpy>
 8021880:	9807      	ldr	r0, [sp, #28]
 8021882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021884:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8021886:	4798      	blx	r3
 8021888:	4620      	mov	r0, r4
 802188a:	b008      	add	sp, #32
 802188c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021890:	24c8      	movs	r4, #200	@ 0xc8
 8021892:	4620      	mov	r0, r4
 8021894:	b008      	add	sp, #32
 8021896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802189a:	682c      	ldr	r4, [r5, #0]
 802189c:	b36c      	cbz	r4, 80218fa <rcl_subscription_init+0x146>
 802189e:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 80218a2:	b14b      	cbz	r3, 80218b8 <rcl_subscription_init+0x104>
 80218a4:	4630      	mov	r0, r6
 80218a6:	f7ff fe0b 	bl	80214c0 <rcl_node_get_rmw_handle>
 80218aa:	682b      	ldr	r3, [r5, #0]
 80218ac:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80218b0:	f003 fa88 	bl	8024dc4 <rmw_destroy_subscription>
 80218b4:	682c      	ldr	r4, [r5, #0]
 80218b6:	b194      	cbz	r4, 80218de <rcl_subscription_init+0x12a>
 80218b8:	f104 0650 	add.w	r6, r4, #80	@ 0x50
 80218bc:	4630      	mov	r0, r6
 80218be:	f7fa f9a5 	bl	801bc0c <rcutils_allocator_is_valid>
 80218c2:	b158      	cbz	r0, 80218dc <rcl_subscription_init+0x128>
 80218c4:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80218c6:	b148      	cbz	r0, 80218dc <rcl_subscription_init+0x128>
 80218c8:	4631      	mov	r1, r6
 80218ca:	f002 f961 	bl	8023b90 <rmw_subscription_content_filter_options_fini>
 80218ce:	4606      	mov	r6, r0
 80218d0:	b9c8      	cbnz	r0, 8021906 <rcl_subscription_init+0x152>
 80218d2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80218d4:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 80218d6:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80218d8:	4798      	blx	r3
 80218da:	66e6      	str	r6, [r4, #108]	@ 0x6c
 80218dc:	682c      	ldr	r4, [r5, #0]
 80218de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80218e0:	4620      	mov	r0, r4
 80218e2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80218e4:	2401      	movs	r4, #1
 80218e6:	4798      	blx	r3
 80218e8:	2300      	movs	r3, #0
 80218ea:	602b      	str	r3, [r5, #0]
 80218ec:	e7c8      	b.n	8021880 <rcl_subscription_init+0xcc>
 80218ee:	2867      	cmp	r0, #103	@ 0x67
 80218f0:	d007      	beq.n	8021902 <rcl_subscription_init+0x14e>
 80218f2:	2869      	cmp	r0, #105	@ 0x69
 80218f4:	d005      	beq.n	8021902 <rcl_subscription_init+0x14e>
 80218f6:	280a      	cmp	r0, #10
 80218f8:	d001      	beq.n	80218fe <rcl_subscription_init+0x14a>
 80218fa:	2401      	movs	r4, #1
 80218fc:	e7c0      	b.n	8021880 <rcl_subscription_init+0xcc>
 80218fe:	240a      	movs	r4, #10
 8021900:	e7be      	b.n	8021880 <rcl_subscription_init+0xcc>
 8021902:	2467      	movs	r4, #103	@ 0x67
 8021904:	e7bc      	b.n	8021880 <rcl_subscription_init+0xcc>
 8021906:	f7ff f9d1 	bl	8020cac <rcl_convert_rmw_ret_to_rcl_ret>
 802190a:	682c      	ldr	r4, [r5, #0]
 802190c:	e7e7      	b.n	80218de <rcl_subscription_init+0x12a>
 802190e:	bf00      	nop

08021910 <rcl_subscription_get_default_options>:
 8021910:	b570      	push	{r4, r5, r6, lr}
 8021912:	4d14      	ldr	r5, [pc, #80]	@ (8021964 <rcl_subscription_get_default_options+0x54>)
 8021914:	b08a      	sub	sp, #40	@ 0x28
 8021916:	4604      	mov	r4, r0
 8021918:	2250      	movs	r2, #80	@ 0x50
 802191a:	4913      	ldr	r1, [pc, #76]	@ (8021968 <rcl_subscription_get_default_options+0x58>)
 802191c:	4628      	mov	r0, r5
 802191e:	f006 fdb6 	bl	802848e <memcpy>
 8021922:	a804      	add	r0, sp, #16
 8021924:	f7fa f964 	bl	801bbf0 <rcutils_get_default_allocator>
 8021928:	f10d 0c10 	add.w	ip, sp, #16
 802192c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8021930:	466e      	mov	r6, sp
 8021932:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8021936:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 802193a:	f8dc 3000 	ldr.w	r3, [ip]
 802193e:	4630      	mov	r0, r6
 8021940:	f8ce 3000 	str.w	r3, [lr]
 8021944:	f002 f93e 	bl	8023bc4 <rmw_get_default_subscription_options>
 8021948:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 802194c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8021950:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8021954:	2270      	movs	r2, #112	@ 0x70
 8021956:	4629      	mov	r1, r5
 8021958:	4620      	mov	r0, r4
 802195a:	f006 fd98 	bl	802848e <memcpy>
 802195e:	4620      	mov	r0, r4
 8021960:	b00a      	add	sp, #40	@ 0x28
 8021962:	bd70      	pop	{r4, r5, r6, pc}
 8021964:	20014e60 	.word	0x20014e60
 8021968:	0802daa0 	.word	0x0802daa0

0802196c <rcl_take>:
 802196c:	2800      	cmp	r0, #0
 802196e:	d049      	beq.n	8021a04 <rcl_take+0x98>
 8021970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021974:	4615      	mov	r5, r2
 8021976:	6802      	ldr	r2, [r0, #0]
 8021978:	b0a4      	sub	sp, #144	@ 0x90
 802197a:	4604      	mov	r4, r0
 802197c:	2a00      	cmp	r2, #0
 802197e:	d039      	beq.n	80219f4 <rcl_take+0x88>
 8021980:	461f      	mov	r7, r3
 8021982:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8021986:	b3ab      	cbz	r3, 80219f4 <rcl_take+0x88>
 8021988:	460e      	mov	r6, r1
 802198a:	2900      	cmp	r1, #0
 802198c:	d038      	beq.n	8021a00 <rcl_take+0x94>
 802198e:	2d00      	cmp	r5, #0
 8021990:	d03c      	beq.n	8021a0c <rcl_take+0xa0>
 8021992:	a802      	add	r0, sp, #8
 8021994:	f04f 0800 	mov.w	r8, #0
 8021998:	f002 f9a2 	bl	8023ce0 <rmw_get_zero_initialized_message_info>
 802199c:	f10d 0c08 	add.w	ip, sp, #8
 80219a0:	46ae      	mov	lr, r5
 80219a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80219a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80219aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80219ae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80219b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80219b6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80219ba:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80219be:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80219c2:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 80219c6:	462b      	mov	r3, r5
 80219c8:	6820      	ldr	r0, [r4, #0]
 80219ca:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 80219ce:	4631      	mov	r1, r6
 80219d0:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80219d4:	9700      	str	r7, [sp, #0]
 80219d6:	f003 fa57 	bl	8024e88 <rmw_take_with_info>
 80219da:	4603      	mov	r3, r0
 80219dc:	b9c0      	cbnz	r0, 8021a10 <rcl_take+0xa4>
 80219de:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 80219e2:	f240 1291 	movw	r2, #401	@ 0x191
 80219e6:	2900      	cmp	r1, #0
 80219e8:	bf08      	it	eq
 80219ea:	4613      	moveq	r3, r2
 80219ec:	4618      	mov	r0, r3
 80219ee:	b024      	add	sp, #144	@ 0x90
 80219f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80219f4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80219f8:	4618      	mov	r0, r3
 80219fa:	b024      	add	sp, #144	@ 0x90
 80219fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021a00:	230b      	movs	r3, #11
 8021a02:	e7f3      	b.n	80219ec <rcl_take+0x80>
 8021a04:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8021a08:	4618      	mov	r0, r3
 8021a0a:	4770      	bx	lr
 8021a0c:	ad14      	add	r5, sp, #80	@ 0x50
 8021a0e:	e7c0      	b.n	8021992 <rcl_take+0x26>
 8021a10:	f7ff f94c 	bl	8020cac <rcl_convert_rmw_ret_to_rcl_ret>
 8021a14:	4603      	mov	r3, r0
 8021a16:	e7e9      	b.n	80219ec <rcl_take+0x80>

08021a18 <rcl_subscription_get_rmw_handle>:
 8021a18:	b118      	cbz	r0, 8021a22 <rcl_subscription_get_rmw_handle+0xa>
 8021a1a:	6800      	ldr	r0, [r0, #0]
 8021a1c:	b108      	cbz	r0, 8021a22 <rcl_subscription_get_rmw_handle+0xa>
 8021a1e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8021a22:	4770      	bx	lr

08021a24 <rcl_subscription_is_valid>:
 8021a24:	b130      	cbz	r0, 8021a34 <rcl_subscription_is_valid+0x10>
 8021a26:	6800      	ldr	r0, [r0, #0]
 8021a28:	b120      	cbz	r0, 8021a34 <rcl_subscription_is_valid+0x10>
 8021a2a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8021a2e:	3800      	subs	r0, #0
 8021a30:	bf18      	it	ne
 8021a32:	2001      	movne	r0, #1
 8021a34:	4770      	bx	lr
 8021a36:	bf00      	nop

08021a38 <rcl_get_system_time>:
 8021a38:	4608      	mov	r0, r1
 8021a3a:	f7fa b929 	b.w	801bc90 <rcutils_system_time_now>
 8021a3e:	bf00      	nop

08021a40 <rcl_get_steady_time>:
 8021a40:	4608      	mov	r0, r1
 8021a42:	f7fa b94b 	b.w	801bcdc <rcutils_steady_time_now>
 8021a46:	bf00      	nop

08021a48 <rcl_get_ros_time>:
 8021a48:	7a03      	ldrb	r3, [r0, #8]
 8021a4a:	b510      	push	{r4, lr}
 8021a4c:	460c      	mov	r4, r1
 8021a4e:	b143      	cbz	r3, 8021a62 <rcl_get_ros_time+0x1a>
 8021a50:	2105      	movs	r1, #5
 8021a52:	f001 fd09 	bl	8023468 <__atomic_load_8>
 8021a56:	4602      	mov	r2, r0
 8021a58:	460b      	mov	r3, r1
 8021a5a:	2000      	movs	r0, #0
 8021a5c:	e9c4 2300 	strd	r2, r3, [r4]
 8021a60:	bd10      	pop	{r4, pc}
 8021a62:	4608      	mov	r0, r1
 8021a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021a68:	f7fa b912 	b.w	801bc90 <rcutils_system_time_now>

08021a6c <rcl_clock_init>:
 8021a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021a6e:	4605      	mov	r5, r0
 8021a70:	4610      	mov	r0, r2
 8021a72:	4614      	mov	r4, r2
 8021a74:	460e      	mov	r6, r1
 8021a76:	f7fa f8c9 	bl	801bc0c <rcutils_allocator_is_valid>
 8021a7a:	b128      	cbz	r0, 8021a88 <rcl_clock_init+0x1c>
 8021a7c:	2d03      	cmp	r5, #3
 8021a7e:	d803      	bhi.n	8021a88 <rcl_clock_init+0x1c>
 8021a80:	e8df f005 	tbb	[pc, r5]
 8021a84:	0659301f 	.word	0x0659301f
 8021a88:	f04f 0c0b 	mov.w	ip, #11
 8021a8c:	4660      	mov	r0, ip
 8021a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021a90:	2c00      	cmp	r4, #0
 8021a92:	d0f9      	beq.n	8021a88 <rcl_clock_init+0x1c>
 8021a94:	fab6 f386 	clz	r3, r6
 8021a98:	095b      	lsrs	r3, r3, #5
 8021a9a:	2e00      	cmp	r6, #0
 8021a9c:	d0f4      	beq.n	8021a88 <rcl_clock_init+0x1c>
 8021a9e:	6133      	str	r3, [r6, #16]
 8021aa0:	469c      	mov	ip, r3
 8021aa2:	f106 0514 	add.w	r5, r6, #20
 8021aa6:	4f32      	ldr	r7, [pc, #200]	@ (8021b70 <rcl_clock_init+0x104>)
 8021aa8:	f04f 0e03 	mov.w	lr, #3
 8021aac:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8021ab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8021ab2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8021ab4:	6823      	ldr	r3, [r4, #0]
 8021ab6:	4660      	mov	r0, ip
 8021ab8:	602b      	str	r3, [r5, #0]
 8021aba:	60f7      	str	r7, [r6, #12]
 8021abc:	f886 e000 	strb.w	lr, [r6]
 8021ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021ac2:	2e00      	cmp	r6, #0
 8021ac4:	d0e0      	beq.n	8021a88 <rcl_clock_init+0x1c>
 8021ac6:	2300      	movs	r3, #0
 8021ac8:	f106 0514 	add.w	r5, r6, #20
 8021acc:	7033      	strb	r3, [r6, #0]
 8021ace:	469c      	mov	ip, r3
 8021ad0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8021ad4:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8021ad8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8021ada:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8021adc:	6823      	ldr	r3, [r4, #0]
 8021ade:	4660      	mov	r0, ip
 8021ae0:	602b      	str	r3, [r5, #0]
 8021ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021ae4:	2c00      	cmp	r4, #0
 8021ae6:	d0cf      	beq.n	8021a88 <rcl_clock_init+0x1c>
 8021ae8:	fab6 f586 	clz	r5, r6
 8021aec:	096d      	lsrs	r5, r5, #5
 8021aee:	2e00      	cmp	r6, #0
 8021af0:	d0ca      	beq.n	8021a88 <rcl_clock_init+0x1c>
 8021af2:	46a6      	mov	lr, r4
 8021af4:	7035      	strb	r5, [r6, #0]
 8021af6:	f106 0c14 	add.w	ip, r6, #20
 8021afa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8021afe:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8021b02:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8021b06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021b0a:	f8de 3000 	ldr.w	r3, [lr]
 8021b0e:	2010      	movs	r0, #16
 8021b10:	f8cc 3000 	str.w	r3, [ip]
 8021b14:	6823      	ldr	r3, [r4, #0]
 8021b16:	6921      	ldr	r1, [r4, #16]
 8021b18:	4798      	blx	r3
 8021b1a:	6130      	str	r0, [r6, #16]
 8021b1c:	b320      	cbz	r0, 8021b68 <rcl_clock_init+0xfc>
 8021b1e:	2200      	movs	r2, #0
 8021b20:	2300      	movs	r3, #0
 8021b22:	46ac      	mov	ip, r5
 8021b24:	7205      	strb	r5, [r0, #8]
 8021b26:	e9c0 2300 	strd	r2, r3, [r0]
 8021b2a:	4a12      	ldr	r2, [pc, #72]	@ (8021b74 <rcl_clock_init+0x108>)
 8021b2c:	2301      	movs	r3, #1
 8021b2e:	4660      	mov	r0, ip
 8021b30:	60f2      	str	r2, [r6, #12]
 8021b32:	7033      	strb	r3, [r6, #0]
 8021b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021b36:	2c00      	cmp	r4, #0
 8021b38:	d0a6      	beq.n	8021a88 <rcl_clock_init+0x1c>
 8021b3a:	fab6 f386 	clz	r3, r6
 8021b3e:	095b      	lsrs	r3, r3, #5
 8021b40:	2e00      	cmp	r6, #0
 8021b42:	d0a1      	beq.n	8021a88 <rcl_clock_init+0x1c>
 8021b44:	6133      	str	r3, [r6, #16]
 8021b46:	469c      	mov	ip, r3
 8021b48:	f106 0514 	add.w	r5, r6, #20
 8021b4c:	f8df e028 	ldr.w	lr, [pc, #40]	@ 8021b78 <rcl_clock_init+0x10c>
 8021b50:	2702      	movs	r7, #2
 8021b52:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8021b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8021b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8021b5a:	6823      	ldr	r3, [r4, #0]
 8021b5c:	4660      	mov	r0, ip
 8021b5e:	602b      	str	r3, [r5, #0]
 8021b60:	f8c6 e00c 	str.w	lr, [r6, #12]
 8021b64:	7037      	strb	r7, [r6, #0]
 8021b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021b68:	f04f 0c0a 	mov.w	ip, #10
 8021b6c:	e78e      	b.n	8021a8c <rcl_clock_init+0x20>
 8021b6e:	bf00      	nop
 8021b70:	08021a41 	.word	0x08021a41
 8021b74:	08021a49 	.word	0x08021a49
 8021b78:	08021a39 	.word	0x08021a39

08021b7c <rcl_clock_get_now>:
 8021b7c:	b140      	cbz	r0, 8021b90 <rcl_clock_get_now+0x14>
 8021b7e:	b139      	cbz	r1, 8021b90 <rcl_clock_get_now+0x14>
 8021b80:	7803      	ldrb	r3, [r0, #0]
 8021b82:	b11b      	cbz	r3, 8021b8c <rcl_clock_get_now+0x10>
 8021b84:	68c3      	ldr	r3, [r0, #12]
 8021b86:	b10b      	cbz	r3, 8021b8c <rcl_clock_get_now+0x10>
 8021b88:	6900      	ldr	r0, [r0, #16]
 8021b8a:	4718      	bx	r3
 8021b8c:	2001      	movs	r0, #1
 8021b8e:	4770      	bx	lr
 8021b90:	200b      	movs	r0, #11
 8021b92:	4770      	bx	lr

08021b94 <rcl_timer_call>:
 8021b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b98:	b087      	sub	sp, #28
 8021b9a:	2800      	cmp	r0, #0
 8021b9c:	d06c      	beq.n	8021c78 <rcl_timer_call+0xe4>
 8021b9e:	6803      	ldr	r3, [r0, #0]
 8021ba0:	4604      	mov	r4, r0
 8021ba2:	2b00      	cmp	r3, #0
 8021ba4:	d062      	beq.n	8021c6c <rcl_timer_call+0xd8>
 8021ba6:	f3bf 8f5b 	dmb	ish
 8021baa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8021bae:	f3bf 8f5b 	dmb	ish
 8021bb2:	2b00      	cmp	r3, #0
 8021bb4:	d14f      	bne.n	8021c56 <rcl_timer_call+0xc2>
 8021bb6:	6803      	ldr	r3, [r0, #0]
 8021bb8:	a904      	add	r1, sp, #16
 8021bba:	6818      	ldr	r0, [r3, #0]
 8021bbc:	f7ff ffde 	bl	8021b7c <rcl_clock_get_now>
 8021bc0:	4605      	mov	r5, r0
 8021bc2:	2800      	cmp	r0, #0
 8021bc4:	d149      	bne.n	8021c5a <rcl_timer_call+0xc6>
 8021bc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8021bca:	2b00      	cmp	r3, #0
 8021bcc:	db49      	blt.n	8021c62 <rcl_timer_call+0xce>
 8021bce:	2605      	movs	r6, #5
 8021bd0:	6820      	ldr	r0, [r4, #0]
 8021bd2:	9600      	str	r6, [sp, #0]
 8021bd4:	3020      	adds	r0, #32
 8021bd6:	f001 fcb3 	bl	8023540 <__atomic_exchange_8>
 8021bda:	6823      	ldr	r3, [r4, #0]
 8021bdc:	4680      	mov	r8, r0
 8021bde:	f3bf 8f5b 	dmb	ish
 8021be2:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8021be6:	f3bf 8f5b 	dmb	ish
 8021bea:	6820      	ldr	r0, [r4, #0]
 8021bec:	4689      	mov	r9, r1
 8021bee:	4631      	mov	r1, r6
 8021bf0:	3028      	adds	r0, #40	@ 0x28
 8021bf2:	f001 fc39 	bl	8023468 <__atomic_load_8>
 8021bf6:	460f      	mov	r7, r1
 8021bf8:	4631      	mov	r1, r6
 8021bfa:	4606      	mov	r6, r0
 8021bfc:	6820      	ldr	r0, [r4, #0]
 8021bfe:	3018      	adds	r0, #24
 8021c00:	f001 fc32 	bl	8023468 <__atomic_load_8>
 8021c04:	4602      	mov	r2, r0
 8021c06:	9804      	ldr	r0, [sp, #16]
 8021c08:	460b      	mov	r3, r1
 8021c0a:	18b6      	adds	r6, r6, r2
 8021c0c:	f8dd c014 	ldr.w	ip, [sp, #20]
 8021c10:	4692      	mov	sl, r2
 8021c12:	eb47 0701 	adc.w	r7, r7, r1
 8021c16:	4286      	cmp	r6, r0
 8021c18:	eb77 010c 	sbcs.w	r1, r7, ip
 8021c1c:	da04      	bge.n	8021c28 <rcl_timer_call+0x94>
 8021c1e:	ea53 0102 	orrs.w	r1, r3, r2
 8021c22:	d12e      	bne.n	8021c82 <rcl_timer_call+0xee>
 8021c24:	4606      	mov	r6, r0
 8021c26:	4667      	mov	r7, ip
 8021c28:	6820      	ldr	r0, [r4, #0]
 8021c2a:	2105      	movs	r1, #5
 8021c2c:	4632      	mov	r2, r6
 8021c2e:	463b      	mov	r3, r7
 8021c30:	3028      	adds	r0, #40	@ 0x28
 8021c32:	9100      	str	r1, [sp, #0]
 8021c34:	f001 fc4e 	bl	80234d4 <__atomic_store_8>
 8021c38:	f1bb 0f00 	cmp.w	fp, #0
 8021c3c:	d00d      	beq.n	8021c5a <rcl_timer_call+0xc6>
 8021c3e:	9a04      	ldr	r2, [sp, #16]
 8021c40:	4620      	mov	r0, r4
 8021c42:	9b05      	ldr	r3, [sp, #20]
 8021c44:	ebb2 0208 	subs.w	r2, r2, r8
 8021c48:	eb63 0309 	sbc.w	r3, r3, r9
 8021c4c:	47d8      	blx	fp
 8021c4e:	4628      	mov	r0, r5
 8021c50:	b007      	add	sp, #28
 8021c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c56:	f240 3521 	movw	r5, #801	@ 0x321
 8021c5a:	4628      	mov	r0, r5
 8021c5c:	b007      	add	sp, #28
 8021c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c62:	2501      	movs	r5, #1
 8021c64:	4628      	mov	r0, r5
 8021c66:	b007      	add	sp, #28
 8021c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c6c:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8021c70:	4628      	mov	r0, r5
 8021c72:	b007      	add	sp, #28
 8021c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c78:	250b      	movs	r5, #11
 8021c7a:	4628      	mov	r0, r5
 8021c7c:	b007      	add	sp, #28
 8021c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c82:	1b80      	subs	r0, r0, r6
 8021c84:	eb6c 0107 	sbc.w	r1, ip, r7
 8021c88:	3801      	subs	r0, #1
 8021c8a:	f161 0100 	sbc.w	r1, r1, #0
 8021c8e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8021c92:	f7de fb3d 	bl	8000310 <__aeabi_ldivmod>
 8021c96:	9b02      	ldr	r3, [sp, #8]
 8021c98:	3001      	adds	r0, #1
 8021c9a:	f141 0100 	adc.w	r1, r1, #0
 8021c9e:	fb00 f303 	mul.w	r3, r0, r3
 8021ca2:	fb01 330a 	mla	r3, r1, sl, r3
 8021ca6:	fba0 0a0a 	umull	r0, sl, r0, sl
 8021caa:	1986      	adds	r6, r0, r6
 8021cac:	4453      	add	r3, sl
 8021cae:	eb43 0707 	adc.w	r7, r3, r7
 8021cb2:	e7b9      	b.n	8021c28 <rcl_timer_call+0x94>

08021cb4 <rcl_timer_is_ready>:
 8021cb4:	b570      	push	{r4, r5, r6, lr}
 8021cb6:	b082      	sub	sp, #8
 8021cb8:	b380      	cbz	r0, 8021d1c <rcl_timer_is_ready+0x68>
 8021cba:	6803      	ldr	r3, [r0, #0]
 8021cbc:	4604      	mov	r4, r0
 8021cbe:	b38b      	cbz	r3, 8021d24 <rcl_timer_is_ready+0x70>
 8021cc0:	460d      	mov	r5, r1
 8021cc2:	b359      	cbz	r1, 8021d1c <rcl_timer_is_ready+0x68>
 8021cc4:	f3bf 8f5b 	dmb	ish
 8021cc8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8021ccc:	f3bf 8f5b 	dmb	ish
 8021cd0:	b953      	cbnz	r3, 8021ce8 <rcl_timer_is_ready+0x34>
 8021cd2:	6803      	ldr	r3, [r0, #0]
 8021cd4:	4669      	mov	r1, sp
 8021cd6:	6818      	ldr	r0, [r3, #0]
 8021cd8:	f7ff ff50 	bl	8021b7c <rcl_clock_get_now>
 8021cdc:	4606      	mov	r6, r0
 8021cde:	b148      	cbz	r0, 8021cf4 <rcl_timer_is_ready+0x40>
 8021ce0:	f240 3321 	movw	r3, #801	@ 0x321
 8021ce4:	4298      	cmp	r0, r3
 8021ce6:	d102      	bne.n	8021cee <rcl_timer_is_ready+0x3a>
 8021ce8:	2300      	movs	r3, #0
 8021cea:	461e      	mov	r6, r3
 8021cec:	702b      	strb	r3, [r5, #0]
 8021cee:	4630      	mov	r0, r6
 8021cf0:	b002      	add	sp, #8
 8021cf2:	bd70      	pop	{r4, r5, r6, pc}
 8021cf4:	6820      	ldr	r0, [r4, #0]
 8021cf6:	2105      	movs	r1, #5
 8021cf8:	3028      	adds	r0, #40	@ 0x28
 8021cfa:	f001 fbb5 	bl	8023468 <__atomic_load_8>
 8021cfe:	9b00      	ldr	r3, [sp, #0]
 8021d00:	1ac0      	subs	r0, r0, r3
 8021d02:	9b01      	ldr	r3, [sp, #4]
 8021d04:	eb61 0103 	sbc.w	r1, r1, r3
 8021d08:	2801      	cmp	r0, #1
 8021d0a:	4630      	mov	r0, r6
 8021d0c:	f171 0300 	sbcs.w	r3, r1, #0
 8021d10:	bfb4      	ite	lt
 8021d12:	2301      	movlt	r3, #1
 8021d14:	2300      	movge	r3, #0
 8021d16:	702b      	strb	r3, [r5, #0]
 8021d18:	b002      	add	sp, #8
 8021d1a:	bd70      	pop	{r4, r5, r6, pc}
 8021d1c:	260b      	movs	r6, #11
 8021d1e:	4630      	mov	r0, r6
 8021d20:	b002      	add	sp, #8
 8021d22:	bd70      	pop	{r4, r5, r6, pc}
 8021d24:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8021d28:	e7e1      	b.n	8021cee <rcl_timer_is_ready+0x3a>
 8021d2a:	bf00      	nop

08021d2c <rcl_timer_get_time_until_next_call>:
 8021d2c:	b570      	push	{r4, r5, r6, lr}
 8021d2e:	b082      	sub	sp, #8
 8021d30:	b330      	cbz	r0, 8021d80 <rcl_timer_get_time_until_next_call+0x54>
 8021d32:	6803      	ldr	r3, [r0, #0]
 8021d34:	4604      	mov	r4, r0
 8021d36:	b33b      	cbz	r3, 8021d88 <rcl_timer_get_time_until_next_call+0x5c>
 8021d38:	460d      	mov	r5, r1
 8021d3a:	b309      	cbz	r1, 8021d80 <rcl_timer_get_time_until_next_call+0x54>
 8021d3c:	f3bf 8f5b 	dmb	ish
 8021d40:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8021d44:	f3bf 8f5b 	dmb	ish
 8021d48:	b9ab      	cbnz	r3, 8021d76 <rcl_timer_get_time_until_next_call+0x4a>
 8021d4a:	6803      	ldr	r3, [r0, #0]
 8021d4c:	4669      	mov	r1, sp
 8021d4e:	6818      	ldr	r0, [r3, #0]
 8021d50:	f7ff ff14 	bl	8021b7c <rcl_clock_get_now>
 8021d54:	4606      	mov	r6, r0
 8021d56:	b958      	cbnz	r0, 8021d70 <rcl_timer_get_time_until_next_call+0x44>
 8021d58:	6820      	ldr	r0, [r4, #0]
 8021d5a:	2105      	movs	r1, #5
 8021d5c:	3028      	adds	r0, #40	@ 0x28
 8021d5e:	f001 fb83 	bl	8023468 <__atomic_load_8>
 8021d62:	9b00      	ldr	r3, [sp, #0]
 8021d64:	1ac0      	subs	r0, r0, r3
 8021d66:	9b01      	ldr	r3, [sp, #4]
 8021d68:	eb61 0103 	sbc.w	r1, r1, r3
 8021d6c:	6028      	str	r0, [r5, #0]
 8021d6e:	6069      	str	r1, [r5, #4]
 8021d70:	4630      	mov	r0, r6
 8021d72:	b002      	add	sp, #8
 8021d74:	bd70      	pop	{r4, r5, r6, pc}
 8021d76:	f240 3621 	movw	r6, #801	@ 0x321
 8021d7a:	4630      	mov	r0, r6
 8021d7c:	b002      	add	sp, #8
 8021d7e:	bd70      	pop	{r4, r5, r6, pc}
 8021d80:	260b      	movs	r6, #11
 8021d82:	4630      	mov	r0, r6
 8021d84:	b002      	add	sp, #8
 8021d86:	bd70      	pop	{r4, r5, r6, pc}
 8021d88:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8021d8c:	e7f0      	b.n	8021d70 <rcl_timer_get_time_until_next_call+0x44>
 8021d8e:	bf00      	nop

08021d90 <rcl_timer_get_guard_condition>:
 8021d90:	b130      	cbz	r0, 8021da0 <rcl_timer_get_guard_condition+0x10>
 8021d92:	6800      	ldr	r0, [r0, #0]
 8021d94:	b120      	cbz	r0, 8021da0 <rcl_timer_get_guard_condition+0x10>
 8021d96:	68c3      	ldr	r3, [r0, #12]
 8021d98:	b10b      	cbz	r3, 8021d9e <rcl_timer_get_guard_condition+0xe>
 8021d9a:	3008      	adds	r0, #8
 8021d9c:	4770      	bx	lr
 8021d9e:	4618      	mov	r0, r3
 8021da0:	4770      	bx	lr
 8021da2:	bf00      	nop

08021da4 <rcl_get_zero_initialized_wait_set>:
 8021da4:	b510      	push	{r4, lr}
 8021da6:	4c08      	ldr	r4, [pc, #32]	@ (8021dc8 <rcl_get_zero_initialized_wait_set+0x24>)
 8021da8:	4686      	mov	lr, r0
 8021daa:	4684      	mov	ip, r0
 8021dac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8021dae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021db2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8021db4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021db8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8021dba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021dbe:	6823      	ldr	r3, [r4, #0]
 8021dc0:	4670      	mov	r0, lr
 8021dc2:	f8cc 3000 	str.w	r3, [ip]
 8021dc6:	bd10      	pop	{r4, pc}
 8021dc8:	0802daf0 	.word	0x0802daf0

08021dcc <rcl_wait_set_is_valid>:
 8021dcc:	b118      	cbz	r0, 8021dd6 <rcl_wait_set_is_valid+0xa>
 8021dce:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8021dd0:	3800      	subs	r0, #0
 8021dd2:	bf18      	it	ne
 8021dd4:	2001      	movne	r0, #1
 8021dd6:	4770      	bx	lr

08021dd8 <rcl_wait_set_fini>:
 8021dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021ddc:	b082      	sub	sp, #8
 8021dde:	2800      	cmp	r0, #0
 8021de0:	f000 8095 	beq.w	8021f0e <rcl_wait_set_fini+0x136>
 8021de4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8021de6:	4604      	mov	r4, r0
 8021de8:	2e00      	cmp	r6, #0
 8021dea:	f000 808c 	beq.w	8021f06 <rcl_wait_set_fini+0x12e>
 8021dee:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8021df0:	f003 fa24 	bl	802523c <rmw_destroy_wait_set>
 8021df4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8021df6:	1e06      	subs	r6, r0, #0
 8021df8:	bf18      	it	ne
 8021dfa:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8021dfe:	2d00      	cmp	r5, #0
 8021e00:	f000 8081 	beq.w	8021f06 <rcl_wait_set_fini+0x12e>
 8021e04:	2700      	movs	r7, #0
 8021e06:	6820      	ldr	r0, [r4, #0]
 8021e08:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8021e0c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8021e0e:	6067      	str	r7, [r4, #4]
 8021e10:	602f      	str	r7, [r5, #0]
 8021e12:	b120      	cbz	r0, 8021e1e <rcl_wait_set_fini+0x46>
 8021e14:	9101      	str	r1, [sp, #4]
 8021e16:	47c0      	blx	r8
 8021e18:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8021e1a:	9901      	ldr	r1, [sp, #4]
 8021e1c:	6027      	str	r7, [r4, #0]
 8021e1e:	68a8      	ldr	r0, [r5, #8]
 8021e20:	b120      	cbz	r0, 8021e2c <rcl_wait_set_fini+0x54>
 8021e22:	47c0      	blx	r8
 8021e24:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8021e26:	2300      	movs	r3, #0
 8021e28:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8021e2c:	f04f 0800 	mov.w	r8, #0
 8021e30:	68a0      	ldr	r0, [r4, #8]
 8021e32:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8021e34:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8021e36:	f8c4 800c 	str.w	r8, [r4, #12]
 8021e3a:	f8c5 800c 	str.w	r8, [r5, #12]
 8021e3e:	b128      	cbz	r0, 8021e4c <rcl_wait_set_fini+0x74>
 8021e40:	47b8      	blx	r7
 8021e42:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8021e44:	f8c4 8008 	str.w	r8, [r4, #8]
 8021e48:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8021e4a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8021e4c:	f04f 0800 	mov.w	r8, #0
 8021e50:	6968      	ldr	r0, [r5, #20]
 8021e52:	f8c5 8010 	str.w	r8, [r5, #16]
 8021e56:	b128      	cbz	r0, 8021e64 <rcl_wait_set_fini+0x8c>
 8021e58:	47b8      	blx	r7
 8021e5a:	f8c5 8014 	str.w	r8, [r5, #20]
 8021e5e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8021e60:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8021e62:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8021e64:	f04f 0800 	mov.w	r8, #0
 8021e68:	6920      	ldr	r0, [r4, #16]
 8021e6a:	f8c4 8014 	str.w	r8, [r4, #20]
 8021e6e:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8021e72:	b128      	cbz	r0, 8021e80 <rcl_wait_set_fini+0xa8>
 8021e74:	47b8      	blx	r7
 8021e76:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8021e78:	f8c4 8010 	str.w	r8, [r4, #16]
 8021e7c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8021e7e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8021e80:	f04f 0800 	mov.w	r8, #0
 8021e84:	69a0      	ldr	r0, [r4, #24]
 8021e86:	f8c4 801c 	str.w	r8, [r4, #28]
 8021e8a:	f8c5 8018 	str.w	r8, [r5, #24]
 8021e8e:	b128      	cbz	r0, 8021e9c <rcl_wait_set_fini+0xc4>
 8021e90:	9101      	str	r1, [sp, #4]
 8021e92:	47b8      	blx	r7
 8021e94:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8021e96:	9901      	ldr	r1, [sp, #4]
 8021e98:	f8c4 8018 	str.w	r8, [r4, #24]
 8021e9c:	6a28      	ldr	r0, [r5, #32]
 8021e9e:	b120      	cbz	r0, 8021eaa <rcl_wait_set_fini+0xd2>
 8021ea0:	47b8      	blx	r7
 8021ea2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8021ea4:	2300      	movs	r3, #0
 8021ea6:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8021eaa:	2700      	movs	r7, #0
 8021eac:	6a20      	ldr	r0, [r4, #32]
 8021eae:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8021eb2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8021eb4:	6267      	str	r7, [r4, #36]	@ 0x24
 8021eb6:	626f      	str	r7, [r5, #36]	@ 0x24
 8021eb8:	b120      	cbz	r0, 8021ec4 <rcl_wait_set_fini+0xec>
 8021eba:	9101      	str	r1, [sp, #4]
 8021ebc:	47c0      	blx	r8
 8021ebe:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8021ec0:	9901      	ldr	r1, [sp, #4]
 8021ec2:	6227      	str	r7, [r4, #32]
 8021ec4:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8021ec6:	b120      	cbz	r0, 8021ed2 <rcl_wait_set_fini+0xfa>
 8021ec8:	47c0      	blx	r8
 8021eca:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8021ecc:	2300      	movs	r3, #0
 8021ece:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8021ed2:	2700      	movs	r7, #0
 8021ed4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8021ed6:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8021eda:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8021edc:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8021ede:	632f      	str	r7, [r5, #48]	@ 0x30
 8021ee0:	b120      	cbz	r0, 8021eec <rcl_wait_set_fini+0x114>
 8021ee2:	9101      	str	r1, [sp, #4]
 8021ee4:	47c0      	blx	r8
 8021ee6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8021ee8:	9901      	ldr	r1, [sp, #4]
 8021eea:	62a7      	str	r7, [r4, #40]	@ 0x28
 8021eec:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8021eee:	b120      	cbz	r0, 8021efa <rcl_wait_set_fini+0x122>
 8021ef0:	47c0      	blx	r8
 8021ef2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8021ef4:	2300      	movs	r3, #0
 8021ef6:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8021efa:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8021efc:	4628      	mov	r0, r5
 8021efe:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8021f00:	4798      	blx	r3
 8021f02:	2300      	movs	r3, #0
 8021f04:	6323      	str	r3, [r4, #48]	@ 0x30
 8021f06:	4630      	mov	r0, r6
 8021f08:	b002      	add	sp, #8
 8021f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021f0e:	260b      	movs	r6, #11
 8021f10:	4630      	mov	r0, r6
 8021f12:	b002      	add	sp, #8
 8021f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08021f18 <rcl_wait_set_add_subscription>:
 8021f18:	b318      	cbz	r0, 8021f62 <rcl_wait_set_add_subscription+0x4a>
 8021f1a:	b538      	push	{r3, r4, r5, lr}
 8021f1c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8021f1e:	4604      	mov	r4, r0
 8021f20:	b30b      	cbz	r3, 8021f66 <rcl_wait_set_add_subscription+0x4e>
 8021f22:	b319      	cbz	r1, 8021f6c <rcl_wait_set_add_subscription+0x54>
 8021f24:	681d      	ldr	r5, [r3, #0]
 8021f26:	6840      	ldr	r0, [r0, #4]
 8021f28:	4285      	cmp	r5, r0
 8021f2a:	d217      	bcs.n	8021f5c <rcl_wait_set_add_subscription+0x44>
 8021f2c:	1c68      	adds	r0, r5, #1
 8021f2e:	6018      	str	r0, [r3, #0]
 8021f30:	6823      	ldr	r3, [r4, #0]
 8021f32:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8021f36:	b102      	cbz	r2, 8021f3a <rcl_wait_set_add_subscription+0x22>
 8021f38:	6015      	str	r5, [r2, #0]
 8021f3a:	4608      	mov	r0, r1
 8021f3c:	f7ff fd6c 	bl	8021a18 <rcl_subscription_get_rmw_handle>
 8021f40:	b150      	cbz	r0, 8021f58 <rcl_wait_set_add_subscription+0x40>
 8021f42:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8021f44:	6842      	ldr	r2, [r0, #4]
 8021f46:	2000      	movs	r0, #0
 8021f48:	689b      	ldr	r3, [r3, #8]
 8021f4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8021f4e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8021f50:	6853      	ldr	r3, [r2, #4]
 8021f52:	3301      	adds	r3, #1
 8021f54:	6053      	str	r3, [r2, #4]
 8021f56:	bd38      	pop	{r3, r4, r5, pc}
 8021f58:	2001      	movs	r0, #1
 8021f5a:	bd38      	pop	{r3, r4, r5, pc}
 8021f5c:	f240 3086 	movw	r0, #902	@ 0x386
 8021f60:	bd38      	pop	{r3, r4, r5, pc}
 8021f62:	200b      	movs	r0, #11
 8021f64:	4770      	bx	lr
 8021f66:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8021f6a:	bd38      	pop	{r3, r4, r5, pc}
 8021f6c:	200b      	movs	r0, #11
 8021f6e:	bd38      	pop	{r3, r4, r5, pc}

08021f70 <rcl_wait_set_clear>:
 8021f70:	2800      	cmp	r0, #0
 8021f72:	d074      	beq.n	802205e <rcl_wait_set_clear+0xee>
 8021f74:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8021f76:	b510      	push	{r4, lr}
 8021f78:	4604      	mov	r4, r0
 8021f7a:	2b00      	cmp	r3, #0
 8021f7c:	d071      	beq.n	8022062 <rcl_wait_set_clear+0xf2>
 8021f7e:	6800      	ldr	r0, [r0, #0]
 8021f80:	b138      	cbz	r0, 8021f92 <rcl_wait_set_clear+0x22>
 8021f82:	6862      	ldr	r2, [r4, #4]
 8021f84:	2100      	movs	r1, #0
 8021f86:	0092      	lsls	r2, r2, #2
 8021f88:	f006 f95a 	bl	8028240 <memset>
 8021f8c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8021f8e:	2200      	movs	r2, #0
 8021f90:	601a      	str	r2, [r3, #0]
 8021f92:	68a0      	ldr	r0, [r4, #8]
 8021f94:	b138      	cbz	r0, 8021fa6 <rcl_wait_set_clear+0x36>
 8021f96:	68e2      	ldr	r2, [r4, #12]
 8021f98:	2100      	movs	r1, #0
 8021f9a:	0092      	lsls	r2, r2, #2
 8021f9c:	f006 f950 	bl	8028240 <memset>
 8021fa0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8021fa2:	2200      	movs	r2, #0
 8021fa4:	60da      	str	r2, [r3, #12]
 8021fa6:	69a0      	ldr	r0, [r4, #24]
 8021fa8:	b138      	cbz	r0, 8021fba <rcl_wait_set_clear+0x4a>
 8021faa:	69e2      	ldr	r2, [r4, #28]
 8021fac:	2100      	movs	r1, #0
 8021fae:	0092      	lsls	r2, r2, #2
 8021fb0:	f006 f946 	bl	8028240 <memset>
 8021fb4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8021fb6:	2200      	movs	r2, #0
 8021fb8:	619a      	str	r2, [r3, #24]
 8021fba:	6a20      	ldr	r0, [r4, #32]
 8021fbc:	b138      	cbz	r0, 8021fce <rcl_wait_set_clear+0x5e>
 8021fbe:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8021fc0:	2100      	movs	r1, #0
 8021fc2:	0092      	lsls	r2, r2, #2
 8021fc4:	f006 f93c 	bl	8028240 <memset>
 8021fc8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8021fca:	2200      	movs	r2, #0
 8021fcc:	625a      	str	r2, [r3, #36]	@ 0x24
 8021fce:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8021fd0:	b138      	cbz	r0, 8021fe2 <rcl_wait_set_clear+0x72>
 8021fd2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8021fd4:	2100      	movs	r1, #0
 8021fd6:	0092      	lsls	r2, r2, #2
 8021fd8:	f006 f932 	bl	8028240 <memset>
 8021fdc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8021fde:	2200      	movs	r2, #0
 8021fe0:	631a      	str	r2, [r3, #48]	@ 0x30
 8021fe2:	6920      	ldr	r0, [r4, #16]
 8021fe4:	b138      	cbz	r0, 8021ff6 <rcl_wait_set_clear+0x86>
 8021fe6:	6962      	ldr	r2, [r4, #20]
 8021fe8:	2100      	movs	r1, #0
 8021fea:	0092      	lsls	r2, r2, #2
 8021fec:	f006 f928 	bl	8028240 <memset>
 8021ff0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8021ff2:	2200      	movs	r2, #0
 8021ff4:	641a      	str	r2, [r3, #64]	@ 0x40
 8021ff6:	6898      	ldr	r0, [r3, #8]
 8021ff8:	b138      	cbz	r0, 802200a <rcl_wait_set_clear+0x9a>
 8021ffa:	685a      	ldr	r2, [r3, #4]
 8021ffc:	2100      	movs	r1, #0
 8021ffe:	0092      	lsls	r2, r2, #2
 8022000:	f006 f91e 	bl	8028240 <memset>
 8022004:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8022006:	2200      	movs	r2, #0
 8022008:	605a      	str	r2, [r3, #4]
 802200a:	6958      	ldr	r0, [r3, #20]
 802200c:	b138      	cbz	r0, 802201e <rcl_wait_set_clear+0xae>
 802200e:	691a      	ldr	r2, [r3, #16]
 8022010:	2100      	movs	r1, #0
 8022012:	0092      	lsls	r2, r2, #2
 8022014:	f006 f914 	bl	8028240 <memset>
 8022018:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802201a:	2200      	movs	r2, #0
 802201c:	611a      	str	r2, [r3, #16]
 802201e:	6a18      	ldr	r0, [r3, #32]
 8022020:	b138      	cbz	r0, 8022032 <rcl_wait_set_clear+0xc2>
 8022022:	69da      	ldr	r2, [r3, #28]
 8022024:	2100      	movs	r1, #0
 8022026:	0092      	lsls	r2, r2, #2
 8022028:	f006 f90a 	bl	8028240 <memset>
 802202c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802202e:	2200      	movs	r2, #0
 8022030:	61da      	str	r2, [r3, #28]
 8022032:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8022034:	b138      	cbz	r0, 8022046 <rcl_wait_set_clear+0xd6>
 8022036:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8022038:	2100      	movs	r1, #0
 802203a:	0092      	lsls	r2, r2, #2
 802203c:	f006 f900 	bl	8028240 <memset>
 8022040:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8022042:	2200      	movs	r2, #0
 8022044:	629a      	str	r2, [r3, #40]	@ 0x28
 8022046:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8022048:	b140      	cbz	r0, 802205c <rcl_wait_set_clear+0xec>
 802204a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802204c:	2100      	movs	r1, #0
 802204e:	0092      	lsls	r2, r2, #2
 8022050:	f006 f8f6 	bl	8028240 <memset>
 8022054:	2300      	movs	r3, #0
 8022056:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8022058:	4618      	mov	r0, r3
 802205a:	6353      	str	r3, [r2, #52]	@ 0x34
 802205c:	bd10      	pop	{r4, pc}
 802205e:	200b      	movs	r0, #11
 8022060:	4770      	bx	lr
 8022062:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8022066:	bd10      	pop	{r4, pc}

08022068 <rcl_wait_set_resize>:
 8022068:	2800      	cmp	r0, #0
 802206a:	f000 8180 	beq.w	802236e <rcl_wait_set_resize+0x306>
 802206e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022072:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8022074:	b083      	sub	sp, #12
 8022076:	4605      	mov	r5, r0
 8022078:	2c00      	cmp	r4, #0
 802207a:	f000 817a 	beq.w	8022372 <rcl_wait_set_resize+0x30a>
 802207e:	f04f 0900 	mov.w	r9, #0
 8022082:	461f      	mov	r7, r3
 8022084:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8022088:	4688      	mov	r8, r1
 802208a:	4616      	mov	r6, r2
 802208c:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8022090:	f8c0 9004 	str.w	r9, [r0, #4]
 8022094:	f8c4 9000 	str.w	r9, [r4]
 8022098:	2900      	cmp	r1, #0
 802209a:	f000 80bf 	beq.w	802221c <rcl_wait_set_resize+0x1b4>
 802209e:	008c      	lsls	r4, r1, #2
 80220a0:	4652      	mov	r2, sl
 80220a2:	6800      	ldr	r0, [r0, #0]
 80220a4:	4621      	mov	r1, r4
 80220a6:	9301      	str	r3, [sp, #4]
 80220a8:	4798      	blx	r3
 80220aa:	9b01      	ldr	r3, [sp, #4]
 80220ac:	6028      	str	r0, [r5, #0]
 80220ae:	2800      	cmp	r0, #0
 80220b0:	f000 80f6 	beq.w	80222a0 <rcl_wait_set_resize+0x238>
 80220b4:	4622      	mov	r2, r4
 80220b6:	4649      	mov	r1, r9
 80220b8:	9301      	str	r3, [sp, #4]
 80220ba:	f006 f8c1 	bl	8028240 <memset>
 80220be:	f8c5 8004 	str.w	r8, [r5, #4]
 80220c2:	4652      	mov	r2, sl
 80220c4:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 80220c8:	4621      	mov	r1, r4
 80220ca:	9b01      	ldr	r3, [sp, #4]
 80220cc:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80220d0:	f8c8 9004 	str.w	r9, [r8, #4]
 80220d4:	4798      	blx	r3
 80220d6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80220d8:	f8c8 0008 	str.w	r0, [r8, #8]
 80220dc:	689b      	ldr	r3, [r3, #8]
 80220de:	2b00      	cmp	r3, #0
 80220e0:	f000 814a 	beq.w	8022378 <rcl_wait_set_resize+0x310>
 80220e4:	4622      	mov	r2, r4
 80220e6:	4649      	mov	r1, r9
 80220e8:	4618      	mov	r0, r3
 80220ea:	f006 f8a9 	bl	8028240 <memset>
 80220ee:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80220f0:	f04f 0800 	mov.w	r8, #0
 80220f4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80220f8:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 80220fc:	f8c5 800c 	str.w	r8, [r5, #12]
 8022100:	f8c4 800c 	str.w	r8, [r4, #12]
 8022104:	2e00      	cmp	r6, #0
 8022106:	f040 809b 	bne.w	8022240 <rcl_wait_set_resize+0x1d8>
 802210a:	68a8      	ldr	r0, [r5, #8]
 802210c:	b128      	cbz	r0, 802211a <rcl_wait_set_resize+0xb2>
 802210e:	4649      	mov	r1, r9
 8022110:	4790      	blx	r2
 8022112:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8022114:	60ae      	str	r6, [r5, #8]
 8022116:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 802211a:	f04f 0800 	mov.w	r8, #0
 802211e:	19f6      	adds	r6, r6, r7
 8022120:	f8c4 8010 	str.w	r8, [r4, #16]
 8022124:	f040 80a2 	bne.w	802226c <rcl_wait_set_resize+0x204>
 8022128:	6960      	ldr	r0, [r4, #20]
 802212a:	b130      	cbz	r0, 802213a <rcl_wait_set_resize+0xd2>
 802212c:	4649      	mov	r1, r9
 802212e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8022130:	4798      	blx	r3
 8022132:	6166      	str	r6, [r4, #20]
 8022134:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8022136:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 802213a:	2600      	movs	r6, #0
 802213c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8022140:	616e      	str	r6, [r5, #20]
 8022142:	6426      	str	r6, [r4, #64]	@ 0x40
 8022144:	2f00      	cmp	r7, #0
 8022146:	f040 80af 	bne.w	80222a8 <rcl_wait_set_resize+0x240>
 802214a:	6928      	ldr	r0, [r5, #16]
 802214c:	b138      	cbz	r0, 802215e <rcl_wait_set_resize+0xf6>
 802214e:	4649      	mov	r1, r9
 8022150:	47d0      	blx	sl
 8022152:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8022154:	612f      	str	r7, [r5, #16]
 8022156:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 802215a:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 802215e:	2600      	movs	r6, #0
 8022160:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022162:	61ee      	str	r6, [r5, #28]
 8022164:	61a6      	str	r6, [r4, #24]
 8022166:	2b00      	cmp	r3, #0
 8022168:	f040 8093 	bne.w	8022292 <rcl_wait_set_resize+0x22a>
 802216c:	69a8      	ldr	r0, [r5, #24]
 802216e:	b120      	cbz	r0, 802217a <rcl_wait_set_resize+0x112>
 8022170:	4649      	mov	r1, r9
 8022172:	47d0      	blx	sl
 8022174:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022176:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8022178:	61ab      	str	r3, [r5, #24]
 802217a:	6a20      	ldr	r0, [r4, #32]
 802217c:	b128      	cbz	r0, 802218a <rcl_wait_set_resize+0x122>
 802217e:	4649      	mov	r1, r9
 8022180:	47d0      	blx	sl
 8022182:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8022184:	2300      	movs	r3, #0
 8022186:	e9c4 3307 	strd	r3, r3, [r4, #28]
 802218a:	2600      	movs	r6, #0
 802218c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802218e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8022190:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8022194:	626e      	str	r6, [r5, #36]	@ 0x24
 8022196:	6266      	str	r6, [r4, #36]	@ 0x24
 8022198:	2b00      	cmp	r3, #0
 802219a:	f000 8098 	beq.w	80222ce <rcl_wait_set_resize+0x266>
 802219e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80221a2:	463a      	mov	r2, r7
 80221a4:	6a28      	ldr	r0, [r5, #32]
 80221a6:	4651      	mov	r1, sl
 80221a8:	47c8      	blx	r9
 80221aa:	6228      	str	r0, [r5, #32]
 80221ac:	2800      	cmp	r0, #0
 80221ae:	d077      	beq.n	80222a0 <rcl_wait_set_resize+0x238>
 80221b0:	4652      	mov	r2, sl
 80221b2:	4631      	mov	r1, r6
 80221b4:	f006 f844 	bl	8028240 <memset>
 80221b8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80221ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80221bc:	463a      	mov	r2, r7
 80221be:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80221c0:	4651      	mov	r1, sl
 80221c2:	626b      	str	r3, [r5, #36]	@ 0x24
 80221c4:	62a6      	str	r6, [r4, #40]	@ 0x28
 80221c6:	47c8      	blx	r9
 80221c8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80221ca:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80221cc:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80221ce:	2c00      	cmp	r4, #0
 80221d0:	f000 80f2 	beq.w	80223b8 <rcl_wait_set_resize+0x350>
 80221d4:	4620      	mov	r0, r4
 80221d6:	4652      	mov	r2, sl
 80221d8:	4631      	mov	r1, r6
 80221da:	f006 f831 	bl	8028240 <memset>
 80221de:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80221e0:	2600      	movs	r6, #0
 80221e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80221e4:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80221e6:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80221ea:	62ee      	str	r6, [r5, #44]	@ 0x2c
 80221ec:	6326      	str	r6, [r4, #48]	@ 0x30
 80221ee:	2b00      	cmp	r3, #0
 80221f0:	f040 8097 	bne.w	8022322 <rcl_wait_set_resize+0x2ba>
 80221f4:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80221f6:	b120      	cbz	r0, 8022202 <rcl_wait_set_resize+0x19a>
 80221f8:	4639      	mov	r1, r7
 80221fa:	47c0      	blx	r8
 80221fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80221fe:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8022200:	62ab      	str	r3, [r5, #40]	@ 0x28
 8022202:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8022204:	2800      	cmp	r0, #0
 8022206:	d04c      	beq.n	80222a2 <rcl_wait_set_resize+0x23a>
 8022208:	4639      	mov	r1, r7
 802220a:	47c0      	blx	r8
 802220c:	2300      	movs	r3, #0
 802220e:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8022210:	4618      	mov	r0, r3
 8022212:	e9c2 330d 	strd	r3, r3, [r2, #52]	@ 0x34
 8022216:	b003      	add	sp, #12
 8022218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802221c:	6800      	ldr	r0, [r0, #0]
 802221e:	b120      	cbz	r0, 802222a <rcl_wait_set_resize+0x1c2>
 8022220:	4651      	mov	r1, sl
 8022222:	47d8      	blx	fp
 8022224:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8022226:	f8c5 8000 	str.w	r8, [r5]
 802222a:	68a0      	ldr	r0, [r4, #8]
 802222c:	2800      	cmp	r0, #0
 802222e:	f43f af5f 	beq.w	80220f0 <rcl_wait_set_resize+0x88>
 8022232:	4651      	mov	r1, sl
 8022234:	47d8      	blx	fp
 8022236:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8022238:	2300      	movs	r3, #0
 802223a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 802223e:	e757      	b.n	80220f0 <rcl_wait_set_resize+0x88>
 8022240:	00b4      	lsls	r4, r6, #2
 8022242:	464a      	mov	r2, r9
 8022244:	68a8      	ldr	r0, [r5, #8]
 8022246:	4621      	mov	r1, r4
 8022248:	4798      	blx	r3
 802224a:	60a8      	str	r0, [r5, #8]
 802224c:	b340      	cbz	r0, 80222a0 <rcl_wait_set_resize+0x238>
 802224e:	4622      	mov	r2, r4
 8022250:	4641      	mov	r1, r8
 8022252:	f005 fff5 	bl	8028240 <memset>
 8022256:	f04f 0800 	mov.w	r8, #0
 802225a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 802225c:	60ee      	str	r6, [r5, #12]
 802225e:	19f6      	adds	r6, r6, r7
 8022260:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8022264:	f8c4 8010 	str.w	r8, [r4, #16]
 8022268:	f43f af5e 	beq.w	8022128 <rcl_wait_set_resize+0xc0>
 802226c:	00b6      	lsls	r6, r6, #2
 802226e:	464a      	mov	r2, r9
 8022270:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8022272:	6960      	ldr	r0, [r4, #20]
 8022274:	4631      	mov	r1, r6
 8022276:	4798      	blx	r3
 8022278:	4681      	mov	r9, r0
 802227a:	6160      	str	r0, [r4, #20]
 802227c:	2800      	cmp	r0, #0
 802227e:	f000 8084 	beq.w	802238a <rcl_wait_set_resize+0x322>
 8022282:	4632      	mov	r2, r6
 8022284:	4641      	mov	r1, r8
 8022286:	f005 ffdb 	bl	8028240 <memset>
 802228a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 802228c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8022290:	e753      	b.n	802213a <rcl_wait_set_resize+0xd2>
 8022292:	009c      	lsls	r4, r3, #2
 8022294:	464a      	mov	r2, r9
 8022296:	69a8      	ldr	r0, [r5, #24]
 8022298:	4621      	mov	r1, r4
 802229a:	47c0      	blx	r8
 802229c:	61a8      	str	r0, [r5, #24]
 802229e:	bb40      	cbnz	r0, 80222f2 <rcl_wait_set_resize+0x28a>
 80222a0:	200a      	movs	r0, #10
 80222a2:	b003      	add	sp, #12
 80222a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80222a8:	00bc      	lsls	r4, r7, #2
 80222aa:	464a      	mov	r2, r9
 80222ac:	6928      	ldr	r0, [r5, #16]
 80222ae:	4621      	mov	r1, r4
 80222b0:	47c0      	blx	r8
 80222b2:	6128      	str	r0, [r5, #16]
 80222b4:	2800      	cmp	r0, #0
 80222b6:	d0f3      	beq.n	80222a0 <rcl_wait_set_resize+0x238>
 80222b8:	4622      	mov	r2, r4
 80222ba:	4631      	mov	r1, r6
 80222bc:	f005 ffc0 	bl	8028240 <memset>
 80222c0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80222c2:	616f      	str	r7, [r5, #20]
 80222c4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80222c8:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80222cc:	e747      	b.n	802215e <rcl_wait_set_resize+0xf6>
 80222ce:	6a28      	ldr	r0, [r5, #32]
 80222d0:	b120      	cbz	r0, 80222dc <rcl_wait_set_resize+0x274>
 80222d2:	4639      	mov	r1, r7
 80222d4:	47c0      	blx	r8
 80222d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80222d8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80222da:	622b      	str	r3, [r5, #32]
 80222dc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80222de:	2800      	cmp	r0, #0
 80222e0:	f43f af7e 	beq.w	80221e0 <rcl_wait_set_resize+0x178>
 80222e4:	4639      	mov	r1, r7
 80222e6:	47c0      	blx	r8
 80222e8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80222ea:	2300      	movs	r3, #0
 80222ec:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80222f0:	e776      	b.n	80221e0 <rcl_wait_set_resize+0x178>
 80222f2:	4622      	mov	r2, r4
 80222f4:	4631      	mov	r1, r6
 80222f6:	f005 ffa3 	bl	8028240 <memset>
 80222fa:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 80222fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80222fe:	464a      	mov	r2, r9
 8022300:	6a38      	ldr	r0, [r7, #32]
 8022302:	4621      	mov	r1, r4
 8022304:	61eb      	str	r3, [r5, #28]
 8022306:	61fe      	str	r6, [r7, #28]
 8022308:	47c0      	blx	r8
 802230a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 802230c:	6238      	str	r0, [r7, #32]
 802230e:	6a1f      	ldr	r7, [r3, #32]
 8022310:	2f00      	cmp	r7, #0
 8022312:	d04a      	beq.n	80223aa <rcl_wait_set_resize+0x342>
 8022314:	4622      	mov	r2, r4
 8022316:	4631      	mov	r1, r6
 8022318:	4638      	mov	r0, r7
 802231a:	f005 ff91 	bl	8028240 <memset>
 802231e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8022320:	e733      	b.n	802218a <rcl_wait_set_resize+0x122>
 8022322:	009c      	lsls	r4, r3, #2
 8022324:	463a      	mov	r2, r7
 8022326:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8022328:	4621      	mov	r1, r4
 802232a:	47c8      	blx	r9
 802232c:	62a8      	str	r0, [r5, #40]	@ 0x28
 802232e:	2800      	cmp	r0, #0
 8022330:	d0b6      	beq.n	80222a0 <rcl_wait_set_resize+0x238>
 8022332:	4622      	mov	r2, r4
 8022334:	4631      	mov	r1, r6
 8022336:	f005 ff83 	bl	8028240 <memset>
 802233a:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 802233e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022340:	463a      	mov	r2, r7
 8022342:	4621      	mov	r1, r4
 8022344:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8022348:	62eb      	str	r3, [r5, #44]	@ 0x2c
 802234a:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 802234e:	47c8      	blx	r9
 8022350:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8022352:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8022356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022358:	2b00      	cmp	r3, #0
 802235a:	d034      	beq.n	80223c6 <rcl_wait_set_resize+0x35e>
 802235c:	4622      	mov	r2, r4
 802235e:	4631      	mov	r1, r6
 8022360:	4618      	mov	r0, r3
 8022362:	f005 ff6d 	bl	8028240 <memset>
 8022366:	4630      	mov	r0, r6
 8022368:	b003      	add	sp, #12
 802236a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802236e:	200b      	movs	r0, #11
 8022370:	4770      	bx	lr
 8022372:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8022376:	e794      	b.n	80222a2 <rcl_wait_set_resize+0x23a>
 8022378:	6828      	ldr	r0, [r5, #0]
 802237a:	4651      	mov	r1, sl
 802237c:	9301      	str	r3, [sp, #4]
 802237e:	47d8      	blx	fp
 8022380:	9b01      	ldr	r3, [sp, #4]
 8022382:	200a      	movs	r0, #10
 8022384:	e9c5 3300 	strd	r3, r3, [r5]
 8022388:	e78b      	b.n	80222a2 <rcl_wait_set_resize+0x23a>
 802238a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 802238c:	68a8      	ldr	r0, [r5, #8]
 802238e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8022390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8022392:	4798      	blx	r3
 8022394:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8022396:	6928      	ldr	r0, [r5, #16]
 8022398:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 802239a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 802239c:	e9c5 9902 	strd	r9, r9, [r5, #8]
 80223a0:	4790      	blx	r2
 80223a2:	200a      	movs	r0, #10
 80223a4:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80223a8:	e77b      	b.n	80222a2 <rcl_wait_set_resize+0x23a>
 80223aa:	69a8      	ldr	r0, [r5, #24]
 80223ac:	4649      	mov	r1, r9
 80223ae:	47d0      	blx	sl
 80223b0:	200a      	movs	r0, #10
 80223b2:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80223b6:	e774      	b.n	80222a2 <rcl_wait_set_resize+0x23a>
 80223b8:	6a28      	ldr	r0, [r5, #32]
 80223ba:	4639      	mov	r1, r7
 80223bc:	47c0      	blx	r8
 80223be:	200a      	movs	r0, #10
 80223c0:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80223c4:	e76d      	b.n	80222a2 <rcl_wait_set_resize+0x23a>
 80223c6:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80223c8:	4639      	mov	r1, r7
 80223ca:	9301      	str	r3, [sp, #4]
 80223cc:	47c0      	blx	r8
 80223ce:	9b01      	ldr	r3, [sp, #4]
 80223d0:	200a      	movs	r0, #10
 80223d2:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80223d6:	e764      	b.n	80222a2 <rcl_wait_set_resize+0x23a>

080223d8 <rcl_wait_set_init>:
 80223d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223dc:	b085      	sub	sp, #20
 80223de:	4605      	mov	r5, r0
 80223e0:	460e      	mov	r6, r1
 80223e2:	4617      	mov	r7, r2
 80223e4:	a812      	add	r0, sp, #72	@ 0x48
 80223e6:	4698      	mov	r8, r3
 80223e8:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 80223ec:	f7f9 fc0e 	bl	801bc0c <rcutils_allocator_is_valid>
 80223f0:	2d00      	cmp	r5, #0
 80223f2:	d072      	beq.n	80224da <rcl_wait_set_init+0x102>
 80223f4:	f080 0001 	eor.w	r0, r0, #1
 80223f8:	b2c0      	uxtb	r0, r0
 80223fa:	2800      	cmp	r0, #0
 80223fc:	d16d      	bne.n	80224da <rcl_wait_set_init+0x102>
 80223fe:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8022402:	f1ba 0f00 	cmp.w	sl, #0
 8022406:	d004      	beq.n	8022412 <rcl_wait_set_init+0x3a>
 8022408:	2464      	movs	r4, #100	@ 0x64
 802240a:	4620      	mov	r0, r4
 802240c:	b005      	add	sp, #20
 802240e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022412:	f1b9 0f00 	cmp.w	r9, #0
 8022416:	d060      	beq.n	80224da <rcl_wait_set_init+0x102>
 8022418:	4648      	mov	r0, r9
 802241a:	f7fe fc65 	bl	8020ce8 <rcl_context_is_valid>
 802241e:	2800      	cmp	r0, #0
 8022420:	d068      	beq.n	80224f4 <rcl_wait_set_init+0x11c>
 8022422:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8022424:	205c      	movs	r0, #92	@ 0x5c
 8022426:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8022428:	4798      	blx	r3
 802242a:	6328      	str	r0, [r5, #48]	@ 0x30
 802242c:	2800      	cmp	r0, #0
 802242e:	d063      	beq.n	80224f8 <rcl_wait_set_init+0x120>
 8022430:	225c      	movs	r2, #92	@ 0x5c
 8022432:	4651      	mov	r1, sl
 8022434:	f005 ff04 	bl	8028240 <memset>
 8022438:	ac12      	add	r4, sp, #72	@ 0x48
 802243a:	f8d5 b030 	ldr.w	fp, [r5, #48]	@ 0x30
 802243e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8022442:	f10b 0c48 	add.w	ip, fp, #72	@ 0x48
 8022446:	f8cb 9044 	str.w	r9, [fp, #68]	@ 0x44
 802244a:	eb03 0e02 	add.w	lr, r3, r2
 802244e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022450:	f8d9 9000 	ldr.w	r9, [r9]
 8022454:	449e      	add	lr, r3
 8022456:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8022458:	e9cb aa01 	strd	sl, sl, [fp, #4]
 802245c:	e9cb aa04 	strd	sl, sl, [fp, #16]
 8022460:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8022464:	e9cb aa0a 	strd	sl, sl, [fp, #40]	@ 0x28
 8022468:	e9cb aa0d 	strd	sl, sl, [fp, #52]	@ 0x34
 802246c:	44be      	add	lr, r7
 802246e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8022472:	6823      	ldr	r3, [r4, #0]
 8022474:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 8022478:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 802247c:	f8cc 3000 	str.w	r3, [ip]
 8022480:	f002 fed2 	bl	8025228 <rmw_create_wait_set>
 8022484:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8022486:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 802248a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 802248c:	b350      	cbz	r0, 80224e4 <rcl_wait_set_init+0x10c>
 802248e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8022490:	4643      	mov	r3, r8
 8022492:	463a      	mov	r2, r7
 8022494:	4631      	mov	r1, r6
 8022496:	9402      	str	r4, [sp, #8]
 8022498:	4628      	mov	r0, r5
 802249a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802249c:	9401      	str	r4, [sp, #4]
 802249e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80224a0:	9400      	str	r4, [sp, #0]
 80224a2:	f7ff fde1 	bl	8022068 <rcl_wait_set_resize>
 80224a6:	4604      	mov	r4, r0
 80224a8:	2800      	cmp	r0, #0
 80224aa:	d0ae      	beq.n	802240a <rcl_wait_set_init+0x32>
 80224ac:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80224ae:	bb2b      	cbnz	r3, 80224fc <rcl_wait_set_init+0x124>
 80224b0:	2600      	movs	r6, #0
 80224b2:	4628      	mov	r0, r5
 80224b4:	4633      	mov	r3, r6
 80224b6:	4632      	mov	r2, r6
 80224b8:	4631      	mov	r1, r6
 80224ba:	9600      	str	r6, [sp, #0]
 80224bc:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80224c0:	f7ff fdd2 	bl	8022068 <rcl_wait_set_resize>
 80224c4:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80224c6:	2800      	cmp	r0, #0
 80224c8:	d09f      	beq.n	802240a <rcl_wait_set_init+0x32>
 80224ca:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80224cc:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80224ce:	4798      	blx	r3
 80224d0:	4620      	mov	r0, r4
 80224d2:	632e      	str	r6, [r5, #48]	@ 0x30
 80224d4:	b005      	add	sp, #20
 80224d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80224da:	240b      	movs	r4, #11
 80224dc:	4620      	mov	r0, r4
 80224de:	b005      	add	sp, #20
 80224e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80224e4:	2401      	movs	r4, #1
 80224e6:	f002 fea9 	bl	802523c <rmw_destroy_wait_set>
 80224ea:	2800      	cmp	r0, #0
 80224ec:	bf18      	it	ne
 80224ee:	f44f 7461 	movne.w	r4, #900	@ 0x384
 80224f2:	e7dd      	b.n	80224b0 <rcl_wait_set_init+0xd8>
 80224f4:	2465      	movs	r4, #101	@ 0x65
 80224f6:	e788      	b.n	802240a <rcl_wait_set_init+0x32>
 80224f8:	240a      	movs	r4, #10
 80224fa:	e786      	b.n	802240a <rcl_wait_set_init+0x32>
 80224fc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80224fe:	e7f2      	b.n	80224e6 <rcl_wait_set_init+0x10e>

08022500 <rcl_wait_set_add_guard_condition>:
 8022500:	b318      	cbz	r0, 802254a <rcl_wait_set_add_guard_condition+0x4a>
 8022502:	b538      	push	{r3, r4, r5, lr}
 8022504:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8022506:	4604      	mov	r4, r0
 8022508:	b30b      	cbz	r3, 802254e <rcl_wait_set_add_guard_condition+0x4e>
 802250a:	b319      	cbz	r1, 8022554 <rcl_wait_set_add_guard_condition+0x54>
 802250c:	68dd      	ldr	r5, [r3, #12]
 802250e:	68c0      	ldr	r0, [r0, #12]
 8022510:	4285      	cmp	r5, r0
 8022512:	d217      	bcs.n	8022544 <rcl_wait_set_add_guard_condition+0x44>
 8022514:	1c68      	adds	r0, r5, #1
 8022516:	60d8      	str	r0, [r3, #12]
 8022518:	68a3      	ldr	r3, [r4, #8]
 802251a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 802251e:	b102      	cbz	r2, 8022522 <rcl_wait_set_add_guard_condition+0x22>
 8022520:	6015      	str	r5, [r2, #0]
 8022522:	4608      	mov	r0, r1
 8022524:	f004 ff0e 	bl	8027344 <rcl_guard_condition_get_rmw_handle>
 8022528:	b150      	cbz	r0, 8022540 <rcl_wait_set_add_guard_condition+0x40>
 802252a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802252c:	6842      	ldr	r2, [r0, #4]
 802252e:	2000      	movs	r0, #0
 8022530:	695b      	ldr	r3, [r3, #20]
 8022532:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8022536:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8022538:	6913      	ldr	r3, [r2, #16]
 802253a:	3301      	adds	r3, #1
 802253c:	6113      	str	r3, [r2, #16]
 802253e:	bd38      	pop	{r3, r4, r5, pc}
 8022540:	2001      	movs	r0, #1
 8022542:	bd38      	pop	{r3, r4, r5, pc}
 8022544:	f240 3086 	movw	r0, #902	@ 0x386
 8022548:	bd38      	pop	{r3, r4, r5, pc}
 802254a:	200b      	movs	r0, #11
 802254c:	4770      	bx	lr
 802254e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8022552:	bd38      	pop	{r3, r4, r5, pc}
 8022554:	200b      	movs	r0, #11
 8022556:	bd38      	pop	{r3, r4, r5, pc}

08022558 <rcl_wait_set_add_timer>:
 8022558:	b328      	cbz	r0, 80225a6 <rcl_wait_set_add_timer+0x4e>
 802255a:	b538      	push	{r3, r4, r5, lr}
 802255c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 802255e:	4604      	mov	r4, r0
 8022560:	b31b      	cbz	r3, 80225aa <rcl_wait_set_add_timer+0x52>
 8022562:	b329      	cbz	r1, 80225b0 <rcl_wait_set_add_timer+0x58>
 8022564:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8022566:	6965      	ldr	r5, [r4, #20]
 8022568:	42a8      	cmp	r0, r5
 802256a:	d219      	bcs.n	80225a0 <rcl_wait_set_add_timer+0x48>
 802256c:	1c45      	adds	r5, r0, #1
 802256e:	641d      	str	r5, [r3, #64]	@ 0x40
 8022570:	6923      	ldr	r3, [r4, #16]
 8022572:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8022576:	b102      	cbz	r2, 802257a <rcl_wait_set_add_timer+0x22>
 8022578:	6010      	str	r0, [r2, #0]
 802257a:	4608      	mov	r0, r1
 802257c:	f7ff fc08 	bl	8021d90 <rcl_timer_get_guard_condition>
 8022580:	b168      	cbz	r0, 802259e <rcl_wait_set_add_timer+0x46>
 8022582:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8022584:	68e3      	ldr	r3, [r4, #12]
 8022586:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8022588:	3b01      	subs	r3, #1
 802258a:	441d      	add	r5, r3
 802258c:	f004 feda 	bl	8027344 <rcl_guard_condition_get_rmw_handle>
 8022590:	b180      	cbz	r0, 80225b4 <rcl_wait_set_add_timer+0x5c>
 8022592:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8022594:	6842      	ldr	r2, [r0, #4]
 8022596:	2000      	movs	r0, #0
 8022598:	695b      	ldr	r3, [r3, #20]
 802259a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802259e:	bd38      	pop	{r3, r4, r5, pc}
 80225a0:	f240 3086 	movw	r0, #902	@ 0x386
 80225a4:	bd38      	pop	{r3, r4, r5, pc}
 80225a6:	200b      	movs	r0, #11
 80225a8:	4770      	bx	lr
 80225aa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80225ae:	bd38      	pop	{r3, r4, r5, pc}
 80225b0:	200b      	movs	r0, #11
 80225b2:	bd38      	pop	{r3, r4, r5, pc}
 80225b4:	2001      	movs	r0, #1
 80225b6:	bd38      	pop	{r3, r4, r5, pc}

080225b8 <rcl_wait_set_add_client>:
 80225b8:	b318      	cbz	r0, 8022602 <rcl_wait_set_add_client+0x4a>
 80225ba:	b538      	push	{r3, r4, r5, lr}
 80225bc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80225be:	4604      	mov	r4, r0
 80225c0:	b30b      	cbz	r3, 8022606 <rcl_wait_set_add_client+0x4e>
 80225c2:	b319      	cbz	r1, 802260c <rcl_wait_set_add_client+0x54>
 80225c4:	699d      	ldr	r5, [r3, #24]
 80225c6:	69c0      	ldr	r0, [r0, #28]
 80225c8:	4285      	cmp	r5, r0
 80225ca:	d217      	bcs.n	80225fc <rcl_wait_set_add_client+0x44>
 80225cc:	1c68      	adds	r0, r5, #1
 80225ce:	6198      	str	r0, [r3, #24]
 80225d0:	69a3      	ldr	r3, [r4, #24]
 80225d2:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80225d6:	b102      	cbz	r2, 80225da <rcl_wait_set_add_client+0x22>
 80225d8:	6015      	str	r5, [r2, #0]
 80225da:	4608      	mov	r0, r1
 80225dc:	f7fe fad6 	bl	8020b8c <rcl_client_get_rmw_handle>
 80225e0:	b150      	cbz	r0, 80225f8 <rcl_wait_set_add_client+0x40>
 80225e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80225e4:	6842      	ldr	r2, [r0, #4]
 80225e6:	2000      	movs	r0, #0
 80225e8:	6a1b      	ldr	r3, [r3, #32]
 80225ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80225ee:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80225f0:	69d3      	ldr	r3, [r2, #28]
 80225f2:	3301      	adds	r3, #1
 80225f4:	61d3      	str	r3, [r2, #28]
 80225f6:	bd38      	pop	{r3, r4, r5, pc}
 80225f8:	2001      	movs	r0, #1
 80225fa:	bd38      	pop	{r3, r4, r5, pc}
 80225fc:	f240 3086 	movw	r0, #902	@ 0x386
 8022600:	bd38      	pop	{r3, r4, r5, pc}
 8022602:	200b      	movs	r0, #11
 8022604:	4770      	bx	lr
 8022606:	f44f 7061 	mov.w	r0, #900	@ 0x384
 802260a:	bd38      	pop	{r3, r4, r5, pc}
 802260c:	200b      	movs	r0, #11
 802260e:	bd38      	pop	{r3, r4, r5, pc}

08022610 <rcl_wait_set_add_service>:
 8022610:	b318      	cbz	r0, 802265a <rcl_wait_set_add_service+0x4a>
 8022612:	b538      	push	{r3, r4, r5, lr}
 8022614:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8022616:	4604      	mov	r4, r0
 8022618:	b30b      	cbz	r3, 802265e <rcl_wait_set_add_service+0x4e>
 802261a:	b319      	cbz	r1, 8022664 <rcl_wait_set_add_service+0x54>
 802261c:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 802261e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8022620:	4285      	cmp	r5, r0
 8022622:	d217      	bcs.n	8022654 <rcl_wait_set_add_service+0x44>
 8022624:	1c68      	adds	r0, r5, #1
 8022626:	6258      	str	r0, [r3, #36]	@ 0x24
 8022628:	6a23      	ldr	r3, [r4, #32]
 802262a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 802262e:	b102      	cbz	r2, 8022632 <rcl_wait_set_add_service+0x22>
 8022630:	6015      	str	r5, [r2, #0]
 8022632:	4608      	mov	r0, r1
 8022634:	f7ff f850 	bl	80216d8 <rcl_service_get_rmw_handle>
 8022638:	b150      	cbz	r0, 8022650 <rcl_wait_set_add_service+0x40>
 802263a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802263c:	6842      	ldr	r2, [r0, #4]
 802263e:	2000      	movs	r0, #0
 8022640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022642:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8022646:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8022648:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 802264a:	3301      	adds	r3, #1
 802264c:	6293      	str	r3, [r2, #40]	@ 0x28
 802264e:	bd38      	pop	{r3, r4, r5, pc}
 8022650:	2001      	movs	r0, #1
 8022652:	bd38      	pop	{r3, r4, r5, pc}
 8022654:	f240 3086 	movw	r0, #902	@ 0x386
 8022658:	bd38      	pop	{r3, r4, r5, pc}
 802265a:	200b      	movs	r0, #11
 802265c:	4770      	bx	lr
 802265e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8022662:	bd38      	pop	{r3, r4, r5, pc}
 8022664:	200b      	movs	r0, #11
 8022666:	bd38      	pop	{r3, r4, r5, pc}

08022668 <rcl_wait>:
 8022668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802266c:	ed2d 8b02 	vpush	{d8}
 8022670:	b08d      	sub	sp, #52	@ 0x34
 8022672:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8022676:	2800      	cmp	r0, #0
 8022678:	f000 814f 	beq.w	802291a <rcl_wait+0x2b2>
 802267c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 802267e:	4605      	mov	r5, r0
 8022680:	2e00      	cmp	r6, #0
 8022682:	f000 811a 	beq.w	80228ba <rcl_wait+0x252>
 8022686:	6843      	ldr	r3, [r0, #4]
 8022688:	b983      	cbnz	r3, 80226ac <rcl_wait+0x44>
 802268a:	68eb      	ldr	r3, [r5, #12]
 802268c:	b973      	cbnz	r3, 80226ac <rcl_wait+0x44>
 802268e:	696b      	ldr	r3, [r5, #20]
 8022690:	b963      	cbnz	r3, 80226ac <rcl_wait+0x44>
 8022692:	69eb      	ldr	r3, [r5, #28]
 8022694:	b953      	cbnz	r3, 80226ac <rcl_wait+0x44>
 8022696:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8022698:	b943      	cbnz	r3, 80226ac <rcl_wait+0x44>
 802269a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 802269c:	b933      	cbnz	r3, 80226ac <rcl_wait+0x44>
 802269e:	f240 3085 	movw	r0, #901	@ 0x385
 80226a2:	b00d      	add	sp, #52	@ 0x34
 80226a4:	ecbd 8b02 	vpop	{d8}
 80226a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226ac:	9b04      	ldr	r3, [sp, #16]
 80226ae:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80226b0:	2b01      	cmp	r3, #1
 80226b2:	9b05      	ldr	r3, [sp, #20]
 80226b4:	f173 0300 	sbcs.w	r3, r3, #0
 80226b8:	f2c0 80f8 	blt.w	80228ac <rcl_wait+0x244>
 80226bc:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 80226c0:	2a00      	cmp	r2, #0
 80226c2:	f000 810f 	beq.w	80228e4 <rcl_wait+0x27c>
 80226c6:	2400      	movs	r4, #0
 80226c8:	4613      	mov	r3, r2
 80226ca:	f240 3921 	movw	r9, #801	@ 0x321
 80226ce:	4632      	mov	r2, r6
 80226d0:	46a2      	mov	sl, r4
 80226d2:	46a3      	mov	fp, r4
 80226d4:	ed9f 8b98 	vldr	d8, [pc, #608]	@ 8022938 <rcl_wait+0x2d0>
 80226d8:	e014      	b.n	8022704 <rcl_wait+0x9c>
 80226da:	2800      	cmp	r0, #0
 80226dc:	d1e1      	bne.n	80226a2 <rcl_wait+0x3a>
 80226de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80226e2:	4542      	cmp	r2, r8
 80226e4:	eb73 0107 	sbcs.w	r1, r3, r7
 80226e8:	da03      	bge.n	80226f2 <rcl_wait+0x8a>
 80226ea:	4690      	mov	r8, r2
 80226ec:	461f      	mov	r7, r3
 80226ee:	f04f 0b01 	mov.w	fp, #1
 80226f2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80226f4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80226f6:	3401      	adds	r4, #1
 80226f8:	f14a 0a00 	adc.w	sl, sl, #0
 80226fc:	429c      	cmp	r4, r3
 80226fe:	f17a 0100 	sbcs.w	r1, sl, #0
 8022702:	d228      	bcs.n	8022756 <rcl_wait+0xee>
 8022704:	6928      	ldr	r0, [r5, #16]
 8022706:	a908      	add	r1, sp, #32
 8022708:	00a6      	lsls	r6, r4, #2
 802270a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 802270e:	2800      	cmp	r0, #0
 8022710:	d0f1      	beq.n	80226f6 <rcl_wait+0x8e>
 8022712:	68eb      	ldr	r3, [r5, #12]
 8022714:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8022718:	4423      	add	r3, r4
 802271a:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 802271e:	f1be 0f00 	cmp.w	lr, #0
 8022722:	d006      	beq.n	8022732 <rcl_wait+0xca>
 8022724:	6913      	ldr	r3, [r2, #16]
 8022726:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 802272a:	3301      	adds	r3, #1
 802272c:	6113      	str	r3, [r2, #16]
 802272e:	692b      	ldr	r3, [r5, #16]
 8022730:	5998      	ldr	r0, [r3, r6]
 8022732:	ed8d 8b08 	vstr	d8, [sp, #32]
 8022736:	f7ff faf9 	bl	8021d2c <rcl_timer_get_time_until_next_call>
 802273a:	4548      	cmp	r0, r9
 802273c:	d1cd      	bne.n	80226da <rcl_wait+0x72>
 802273e:	692b      	ldr	r3, [r5, #16]
 8022740:	2200      	movs	r2, #0
 8022742:	3401      	adds	r4, #1
 8022744:	519a      	str	r2, [r3, r6]
 8022746:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8022748:	f14a 0a00 	adc.w	sl, sl, #0
 802274c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 802274e:	429c      	cmp	r4, r3
 8022750:	f17a 0100 	sbcs.w	r1, sl, #0
 8022754:	d3d6      	bcc.n	8022704 <rcl_wait+0x9c>
 8022756:	4659      	mov	r1, fp
 8022758:	4616      	mov	r6, r2
 802275a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 802275e:	4313      	orrs	r3, r2
 8022760:	f040 80b4 	bne.w	80228cc <rcl_wait+0x264>
 8022764:	2300      	movs	r3, #0
 8022766:	2200      	movs	r2, #0
 8022768:	460c      	mov	r4, r1
 802276a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 802276e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8022772:	ab08      	add	r3, sp, #32
 8022774:	9302      	str	r3, [sp, #8]
 8022776:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 802277a:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 802277c:	f106 0110 	add.w	r1, r6, #16
 8022780:	9300      	str	r3, [sp, #0]
 8022782:	1d30      	adds	r0, r6, #4
 8022784:	f106 031c 	add.w	r3, r6, #28
 8022788:	9201      	str	r2, [sp, #4]
 802278a:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 802278e:	f002 fbe7 	bl	8024f60 <rmw_wait>
 8022792:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8022794:	4680      	mov	r8, r0
 8022796:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8022798:	b1e2      	cbz	r2, 80227d4 <rcl_wait+0x16c>
 802279a:	f04f 0900 	mov.w	r9, #0
 802279e:	464f      	mov	r7, r9
 80227a0:	692a      	ldr	r2, [r5, #16]
 80227a2:	f10d 011f 	add.w	r1, sp, #31
 80227a6:	ea4f 0689 	mov.w	r6, r9, lsl #2
 80227aa:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 80227ae:	b160      	cbz	r0, 80227ca <rcl_wait+0x162>
 80227b0:	f88d 701f 	strb.w	r7, [sp, #31]
 80227b4:	f7ff fa7e 	bl	8021cb4 <rcl_timer_is_ready>
 80227b8:	2800      	cmp	r0, #0
 80227ba:	f47f af72 	bne.w	80226a2 <rcl_wait+0x3a>
 80227be:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80227c2:	b90b      	cbnz	r3, 80227c8 <rcl_wait+0x160>
 80227c4:	692a      	ldr	r2, [r5, #16]
 80227c6:	5193      	str	r3, [r2, r6]
 80227c8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80227ca:	f109 0901 	add.w	r9, r9, #1
 80227ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80227d0:	454a      	cmp	r2, r9
 80227d2:	d8e5      	bhi.n	80227a0 <rcl_wait+0x138>
 80227d4:	f038 0002 	bics.w	r0, r8, #2
 80227d8:	d176      	bne.n	80228c8 <rcl_wait+0x260>
 80227da:	686f      	ldr	r7, [r5, #4]
 80227dc:	b17f      	cbz	r7, 80227fe <rcl_wait+0x196>
 80227de:	4602      	mov	r2, r0
 80227e0:	e002      	b.n	80227e8 <rcl_wait+0x180>
 80227e2:	3201      	adds	r2, #1
 80227e4:	42ba      	cmp	r2, r7
 80227e6:	d00a      	beq.n	80227fe <rcl_wait+0x196>
 80227e8:	6899      	ldr	r1, [r3, #8]
 80227ea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80227ee:	2900      	cmp	r1, #0
 80227f0:	d1f7      	bne.n	80227e2 <rcl_wait+0x17a>
 80227f2:	682e      	ldr	r6, [r5, #0]
 80227f4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80227f8:	3201      	adds	r2, #1
 80227fa:	42ba      	cmp	r2, r7
 80227fc:	d1f4      	bne.n	80227e8 <rcl_wait+0x180>
 80227fe:	68ef      	ldr	r7, [r5, #12]
 8022800:	b17f      	cbz	r7, 8022822 <rcl_wait+0x1ba>
 8022802:	2200      	movs	r2, #0
 8022804:	e002      	b.n	802280c <rcl_wait+0x1a4>
 8022806:	3201      	adds	r2, #1
 8022808:	42ba      	cmp	r2, r7
 802280a:	d00a      	beq.n	8022822 <rcl_wait+0x1ba>
 802280c:	6959      	ldr	r1, [r3, #20]
 802280e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8022812:	2900      	cmp	r1, #0
 8022814:	d1f7      	bne.n	8022806 <rcl_wait+0x19e>
 8022816:	68ae      	ldr	r6, [r5, #8]
 8022818:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 802281c:	3201      	adds	r2, #1
 802281e:	42ba      	cmp	r2, r7
 8022820:	d1f4      	bne.n	802280c <rcl_wait+0x1a4>
 8022822:	69ef      	ldr	r7, [r5, #28]
 8022824:	b17f      	cbz	r7, 8022846 <rcl_wait+0x1de>
 8022826:	2200      	movs	r2, #0
 8022828:	e002      	b.n	8022830 <rcl_wait+0x1c8>
 802282a:	3201      	adds	r2, #1
 802282c:	42ba      	cmp	r2, r7
 802282e:	d00a      	beq.n	8022846 <rcl_wait+0x1de>
 8022830:	6a19      	ldr	r1, [r3, #32]
 8022832:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8022836:	2900      	cmp	r1, #0
 8022838:	d1f7      	bne.n	802282a <rcl_wait+0x1c2>
 802283a:	69ae      	ldr	r6, [r5, #24]
 802283c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8022840:	3201      	adds	r2, #1
 8022842:	42ba      	cmp	r2, r7
 8022844:	d1f4      	bne.n	8022830 <rcl_wait+0x1c8>
 8022846:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 8022848:	b17f      	cbz	r7, 802286a <rcl_wait+0x202>
 802284a:	2200      	movs	r2, #0
 802284c:	e002      	b.n	8022854 <rcl_wait+0x1ec>
 802284e:	3201      	adds	r2, #1
 8022850:	42ba      	cmp	r2, r7
 8022852:	d00a      	beq.n	802286a <rcl_wait+0x202>
 8022854:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8022856:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 802285a:	2900      	cmp	r1, #0
 802285c:	d1f7      	bne.n	802284e <rcl_wait+0x1e6>
 802285e:	6a2e      	ldr	r6, [r5, #32]
 8022860:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8022864:	3201      	adds	r2, #1
 8022866:	42ba      	cmp	r2, r7
 8022868:	d1f4      	bne.n	8022854 <rcl_wait+0x1ec>
 802286a:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 802286c:	b17f      	cbz	r7, 802288e <rcl_wait+0x226>
 802286e:	2200      	movs	r2, #0
 8022870:	e002      	b.n	8022878 <rcl_wait+0x210>
 8022872:	3201      	adds	r2, #1
 8022874:	42ba      	cmp	r2, r7
 8022876:	d00a      	beq.n	802288e <rcl_wait+0x226>
 8022878:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 802287a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 802287e:	2900      	cmp	r1, #0
 8022880:	d1f7      	bne.n	8022872 <rcl_wait+0x20a>
 8022882:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 8022884:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8022888:	3201      	adds	r2, #1
 802288a:	42ba      	cmp	r2, r7
 802288c:	d1f4      	bne.n	8022878 <rcl_wait+0x210>
 802288e:	f1b8 0f02 	cmp.w	r8, #2
 8022892:	f47f af06 	bne.w	80226a2 <rcl_wait+0x3a>
 8022896:	f084 0301 	eor.w	r3, r4, #1
 802289a:	b2db      	uxtb	r3, r3
 802289c:	2b00      	cmp	r3, #0
 802289e:	bf18      	it	ne
 80228a0:	2002      	movne	r0, #2
 80228a2:	b00d      	add	sp, #52	@ 0x34
 80228a4:	ecbd 8b02 	vpop	{d8}
 80228a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80228ac:	2a00      	cmp	r2, #0
 80228ae:	d03a      	beq.n	8022926 <rcl_wait+0x2be>
 80228b0:	f04f 38ff 	mov.w	r8, #4294967295
 80228b4:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80228b8:	e705      	b.n	80226c6 <rcl_wait+0x5e>
 80228ba:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80228be:	b00d      	add	sp, #52	@ 0x34
 80228c0:	ecbd 8b02 	vpop	{d8}
 80228c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80228c8:	2001      	movs	r0, #1
 80228ca:	e6ea      	b.n	80226a2 <rcl_wait+0x3a>
 80228cc:	9b04      	ldr	r3, [sp, #16]
 80228ce:	460c      	mov	r4, r1
 80228d0:	2b01      	cmp	r3, #1
 80228d2:	9b05      	ldr	r3, [sp, #20]
 80228d4:	f173 0300 	sbcs.w	r3, r3, #0
 80228d8:	bfa8      	it	ge
 80228da:	f044 0401 	orrge.w	r4, r4, #1
 80228de:	b914      	cbnz	r4, 80228e6 <rcl_wait+0x27e>
 80228e0:	4623      	mov	r3, r4
 80228e2:	e747      	b.n	8022774 <rcl_wait+0x10c>
 80228e4:	4611      	mov	r1, r2
 80228e6:	2f00      	cmp	r7, #0
 80228e8:	da02      	bge.n	80228f0 <rcl_wait+0x288>
 80228ea:	f04f 0800 	mov.w	r8, #0
 80228ee:	4647      	mov	r7, r8
 80228f0:	460c      	mov	r4, r1
 80228f2:	4640      	mov	r0, r8
 80228f4:	4639      	mov	r1, r7
 80228f6:	a312      	add	r3, pc, #72	@ (adr r3, 8022940 <rcl_wait+0x2d8>)
 80228f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228fc:	f7dd fd08 	bl	8000310 <__aeabi_ldivmod>
 8022900:	a30f      	add	r3, pc, #60	@ (adr r3, 8022940 <rcl_wait+0x2d8>)
 8022902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022906:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802290a:	4640      	mov	r0, r8
 802290c:	4639      	mov	r1, r7
 802290e:	f7dd fcff 	bl	8000310 <__aeabi_ldivmod>
 8022912:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8022916:	ab08      	add	r3, sp, #32
 8022918:	e72c      	b.n	8022774 <rcl_wait+0x10c>
 802291a:	200b      	movs	r0, #11
 802291c:	b00d      	add	sp, #52	@ 0x34
 802291e:	ecbd 8b02 	vpop	{d8}
 8022922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022926:	4611      	mov	r1, r2
 8022928:	f04f 38ff 	mov.w	r8, #4294967295
 802292c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8022930:	e713      	b.n	802275a <rcl_wait+0xf2>
 8022932:	bf00      	nop
 8022934:	f3af 8000 	nop.w
 8022938:	ffffffff 	.word	0xffffffff
 802293c:	7fffffff 	.word	0x7fffffff
 8022940:	3b9aca00 	.word	0x3b9aca00
 8022944:	00000000 	.word	0x00000000

08022948 <rcl_action_take_goal_response>:
 8022948:	2800      	cmp	r0, #0
 802294a:	d039      	beq.n	80229c0 <rcl_action_take_goal_response+0x78>
 802294c:	b570      	push	{r4, r5, r6, lr}
 802294e:	4604      	mov	r4, r0
 8022950:	6800      	ldr	r0, [r0, #0]
 8022952:	b380      	cbz	r0, 80229b6 <rcl_action_take_goal_response+0x6e>
 8022954:	460e      	mov	r6, r1
 8022956:	4615      	mov	r5, r2
 8022958:	f7fe f99e 	bl	8020c98 <rcl_client_is_valid>
 802295c:	b330      	cbz	r0, 80229ac <rcl_action_take_goal_response+0x64>
 802295e:	6820      	ldr	r0, [r4, #0]
 8022960:	3004      	adds	r0, #4
 8022962:	f7fe f999 	bl	8020c98 <rcl_client_is_valid>
 8022966:	b308      	cbz	r0, 80229ac <rcl_action_take_goal_response+0x64>
 8022968:	6820      	ldr	r0, [r4, #0]
 802296a:	3008      	adds	r0, #8
 802296c:	f7fe f994 	bl	8020c98 <rcl_client_is_valid>
 8022970:	b1e0      	cbz	r0, 80229ac <rcl_action_take_goal_response+0x64>
 8022972:	6820      	ldr	r0, [r4, #0]
 8022974:	300c      	adds	r0, #12
 8022976:	f7ff f855 	bl	8021a24 <rcl_subscription_is_valid>
 802297a:	b1b8      	cbz	r0, 80229ac <rcl_action_take_goal_response+0x64>
 802297c:	6820      	ldr	r0, [r4, #0]
 802297e:	3010      	adds	r0, #16
 8022980:	f7ff f850 	bl	8021a24 <rcl_subscription_is_valid>
 8022984:	b190      	cbz	r0, 80229ac <rcl_action_take_goal_response+0x64>
 8022986:	b1cd      	cbz	r5, 80229bc <rcl_action_take_goal_response+0x74>
 8022988:	b1c6      	cbz	r6, 80229bc <rcl_action_take_goal_response+0x74>
 802298a:	462a      	mov	r2, r5
 802298c:	4631      	mov	r1, r6
 802298e:	6820      	ldr	r0, [r4, #0]
 8022990:	f7fe f93a 	bl	8020c08 <rcl_take_response>
 8022994:	b148      	cbz	r0, 80229aa <rcl_action_take_goal_response+0x62>
 8022996:	280a      	cmp	r0, #10
 8022998:	d007      	beq.n	80229aa <rcl_action_take_goal_response+0x62>
 802299a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 802299e:	f640 0337 	movw	r3, #2103	@ 0x837
 80229a2:	4290      	cmp	r0, r2
 80229a4:	bf0c      	ite	eq
 80229a6:	4618      	moveq	r0, r3
 80229a8:	2001      	movne	r0, #1
 80229aa:	bd70      	pop	{r4, r5, r6, pc}
 80229ac:	f7f9 f954 	bl	801bc58 <rcutils_reset_error>
 80229b0:	f640 0036 	movw	r0, #2102	@ 0x836
 80229b4:	bd70      	pop	{r4, r5, r6, pc}
 80229b6:	f640 0036 	movw	r0, #2102	@ 0x836
 80229ba:	bd70      	pop	{r4, r5, r6, pc}
 80229bc:	200b      	movs	r0, #11
 80229be:	bd70      	pop	{r4, r5, r6, pc}
 80229c0:	f640 0036 	movw	r0, #2102	@ 0x836
 80229c4:	4770      	bx	lr
 80229c6:	bf00      	nop

080229c8 <rcl_action_send_result_request>:
 80229c8:	b390      	cbz	r0, 8022a30 <rcl_action_send_result_request+0x68>
 80229ca:	b570      	push	{r4, r5, r6, lr}
 80229cc:	4604      	mov	r4, r0
 80229ce:	6800      	ldr	r0, [r0, #0]
 80229d0:	b348      	cbz	r0, 8022a26 <rcl_action_send_result_request+0x5e>
 80229d2:	460e      	mov	r6, r1
 80229d4:	4615      	mov	r5, r2
 80229d6:	f7fe f95f 	bl	8020c98 <rcl_client_is_valid>
 80229da:	b1f8      	cbz	r0, 8022a1c <rcl_action_send_result_request+0x54>
 80229dc:	6820      	ldr	r0, [r4, #0]
 80229de:	3004      	adds	r0, #4
 80229e0:	f7fe f95a 	bl	8020c98 <rcl_client_is_valid>
 80229e4:	b1d0      	cbz	r0, 8022a1c <rcl_action_send_result_request+0x54>
 80229e6:	6820      	ldr	r0, [r4, #0]
 80229e8:	3008      	adds	r0, #8
 80229ea:	f7fe f955 	bl	8020c98 <rcl_client_is_valid>
 80229ee:	b1a8      	cbz	r0, 8022a1c <rcl_action_send_result_request+0x54>
 80229f0:	6820      	ldr	r0, [r4, #0]
 80229f2:	300c      	adds	r0, #12
 80229f4:	f7ff f816 	bl	8021a24 <rcl_subscription_is_valid>
 80229f8:	b180      	cbz	r0, 8022a1c <rcl_action_send_result_request+0x54>
 80229fa:	6820      	ldr	r0, [r4, #0]
 80229fc:	3010      	adds	r0, #16
 80229fe:	f7ff f811 	bl	8021a24 <rcl_subscription_is_valid>
 8022a02:	b158      	cbz	r0, 8022a1c <rcl_action_send_result_request+0x54>
 8022a04:	b195      	cbz	r5, 8022a2c <rcl_action_send_result_request+0x64>
 8022a06:	b18e      	cbz	r6, 8022a2c <rcl_action_send_result_request+0x64>
 8022a08:	6820      	ldr	r0, [r4, #0]
 8022a0a:	462a      	mov	r2, r5
 8022a0c:	4631      	mov	r1, r6
 8022a0e:	3008      	adds	r0, #8
 8022a10:	f7fe f8c2 	bl	8020b98 <rcl_send_request>
 8022a14:	3800      	subs	r0, #0
 8022a16:	bf18      	it	ne
 8022a18:	2001      	movne	r0, #1
 8022a1a:	bd70      	pop	{r4, r5, r6, pc}
 8022a1c:	f7f9 f91c 	bl	801bc58 <rcutils_reset_error>
 8022a20:	f640 0036 	movw	r0, #2102	@ 0x836
 8022a24:	bd70      	pop	{r4, r5, r6, pc}
 8022a26:	f640 0036 	movw	r0, #2102	@ 0x836
 8022a2a:	bd70      	pop	{r4, r5, r6, pc}
 8022a2c:	200b      	movs	r0, #11
 8022a2e:	bd70      	pop	{r4, r5, r6, pc}
 8022a30:	f640 0036 	movw	r0, #2102	@ 0x836
 8022a34:	4770      	bx	lr
 8022a36:	bf00      	nop

08022a38 <rcl_action_take_result_response>:
 8022a38:	2800      	cmp	r0, #0
 8022a3a:	d03a      	beq.n	8022ab2 <rcl_action_take_result_response+0x7a>
 8022a3c:	b570      	push	{r4, r5, r6, lr}
 8022a3e:	4604      	mov	r4, r0
 8022a40:	6800      	ldr	r0, [r0, #0]
 8022a42:	b388      	cbz	r0, 8022aa8 <rcl_action_take_result_response+0x70>
 8022a44:	460e      	mov	r6, r1
 8022a46:	4615      	mov	r5, r2
 8022a48:	f7fe f926 	bl	8020c98 <rcl_client_is_valid>
 8022a4c:	b338      	cbz	r0, 8022a9e <rcl_action_take_result_response+0x66>
 8022a4e:	6820      	ldr	r0, [r4, #0]
 8022a50:	3004      	adds	r0, #4
 8022a52:	f7fe f921 	bl	8020c98 <rcl_client_is_valid>
 8022a56:	b310      	cbz	r0, 8022a9e <rcl_action_take_result_response+0x66>
 8022a58:	6820      	ldr	r0, [r4, #0]
 8022a5a:	3008      	adds	r0, #8
 8022a5c:	f7fe f91c 	bl	8020c98 <rcl_client_is_valid>
 8022a60:	b1e8      	cbz	r0, 8022a9e <rcl_action_take_result_response+0x66>
 8022a62:	6820      	ldr	r0, [r4, #0]
 8022a64:	300c      	adds	r0, #12
 8022a66:	f7fe ffdd 	bl	8021a24 <rcl_subscription_is_valid>
 8022a6a:	b1c0      	cbz	r0, 8022a9e <rcl_action_take_result_response+0x66>
 8022a6c:	6820      	ldr	r0, [r4, #0]
 8022a6e:	3010      	adds	r0, #16
 8022a70:	f7fe ffd8 	bl	8021a24 <rcl_subscription_is_valid>
 8022a74:	b198      	cbz	r0, 8022a9e <rcl_action_take_result_response+0x66>
 8022a76:	b1d5      	cbz	r5, 8022aae <rcl_action_take_result_response+0x76>
 8022a78:	b1ce      	cbz	r6, 8022aae <rcl_action_take_result_response+0x76>
 8022a7a:	6820      	ldr	r0, [r4, #0]
 8022a7c:	462a      	mov	r2, r5
 8022a7e:	4631      	mov	r1, r6
 8022a80:	3008      	adds	r0, #8
 8022a82:	f7fe f8c1 	bl	8020c08 <rcl_take_response>
 8022a86:	b148      	cbz	r0, 8022a9c <rcl_action_take_result_response+0x64>
 8022a88:	280a      	cmp	r0, #10
 8022a8a:	d007      	beq.n	8022a9c <rcl_action_take_result_response+0x64>
 8022a8c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8022a90:	f640 0337 	movw	r3, #2103	@ 0x837
 8022a94:	4290      	cmp	r0, r2
 8022a96:	bf0c      	ite	eq
 8022a98:	4618      	moveq	r0, r3
 8022a9a:	2001      	movne	r0, #1
 8022a9c:	bd70      	pop	{r4, r5, r6, pc}
 8022a9e:	f7f9 f8db 	bl	801bc58 <rcutils_reset_error>
 8022aa2:	f640 0036 	movw	r0, #2102	@ 0x836
 8022aa6:	bd70      	pop	{r4, r5, r6, pc}
 8022aa8:	f640 0036 	movw	r0, #2102	@ 0x836
 8022aac:	bd70      	pop	{r4, r5, r6, pc}
 8022aae:	200b      	movs	r0, #11
 8022ab0:	bd70      	pop	{r4, r5, r6, pc}
 8022ab2:	f640 0036 	movw	r0, #2102	@ 0x836
 8022ab6:	4770      	bx	lr

08022ab8 <rcl_action_take_cancel_response>:
 8022ab8:	2800      	cmp	r0, #0
 8022aba:	d03a      	beq.n	8022b32 <rcl_action_take_cancel_response+0x7a>
 8022abc:	b570      	push	{r4, r5, r6, lr}
 8022abe:	4604      	mov	r4, r0
 8022ac0:	6800      	ldr	r0, [r0, #0]
 8022ac2:	b388      	cbz	r0, 8022b28 <rcl_action_take_cancel_response+0x70>
 8022ac4:	460e      	mov	r6, r1
 8022ac6:	4615      	mov	r5, r2
 8022ac8:	f7fe f8e6 	bl	8020c98 <rcl_client_is_valid>
 8022acc:	b338      	cbz	r0, 8022b1e <rcl_action_take_cancel_response+0x66>
 8022ace:	6820      	ldr	r0, [r4, #0]
 8022ad0:	3004      	adds	r0, #4
 8022ad2:	f7fe f8e1 	bl	8020c98 <rcl_client_is_valid>
 8022ad6:	b310      	cbz	r0, 8022b1e <rcl_action_take_cancel_response+0x66>
 8022ad8:	6820      	ldr	r0, [r4, #0]
 8022ada:	3008      	adds	r0, #8
 8022adc:	f7fe f8dc 	bl	8020c98 <rcl_client_is_valid>
 8022ae0:	b1e8      	cbz	r0, 8022b1e <rcl_action_take_cancel_response+0x66>
 8022ae2:	6820      	ldr	r0, [r4, #0]
 8022ae4:	300c      	adds	r0, #12
 8022ae6:	f7fe ff9d 	bl	8021a24 <rcl_subscription_is_valid>
 8022aea:	b1c0      	cbz	r0, 8022b1e <rcl_action_take_cancel_response+0x66>
 8022aec:	6820      	ldr	r0, [r4, #0]
 8022aee:	3010      	adds	r0, #16
 8022af0:	f7fe ff98 	bl	8021a24 <rcl_subscription_is_valid>
 8022af4:	b198      	cbz	r0, 8022b1e <rcl_action_take_cancel_response+0x66>
 8022af6:	b1d5      	cbz	r5, 8022b2e <rcl_action_take_cancel_response+0x76>
 8022af8:	b1ce      	cbz	r6, 8022b2e <rcl_action_take_cancel_response+0x76>
 8022afa:	6820      	ldr	r0, [r4, #0]
 8022afc:	462a      	mov	r2, r5
 8022afe:	4631      	mov	r1, r6
 8022b00:	3004      	adds	r0, #4
 8022b02:	f7fe f881 	bl	8020c08 <rcl_take_response>
 8022b06:	b148      	cbz	r0, 8022b1c <rcl_action_take_cancel_response+0x64>
 8022b08:	280a      	cmp	r0, #10
 8022b0a:	d007      	beq.n	8022b1c <rcl_action_take_cancel_response+0x64>
 8022b0c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8022b10:	f640 0337 	movw	r3, #2103	@ 0x837
 8022b14:	4290      	cmp	r0, r2
 8022b16:	bf0c      	ite	eq
 8022b18:	4618      	moveq	r0, r3
 8022b1a:	2001      	movne	r0, #1
 8022b1c:	bd70      	pop	{r4, r5, r6, pc}
 8022b1e:	f7f9 f89b 	bl	801bc58 <rcutils_reset_error>
 8022b22:	f640 0036 	movw	r0, #2102	@ 0x836
 8022b26:	bd70      	pop	{r4, r5, r6, pc}
 8022b28:	f640 0036 	movw	r0, #2102	@ 0x836
 8022b2c:	bd70      	pop	{r4, r5, r6, pc}
 8022b2e:	200b      	movs	r0, #11
 8022b30:	bd70      	pop	{r4, r5, r6, pc}
 8022b32:	f640 0036 	movw	r0, #2102	@ 0x836
 8022b36:	4770      	bx	lr

08022b38 <rcl_action_take_feedback>:
 8022b38:	2800      	cmp	r0, #0
 8022b3a:	d038      	beq.n	8022bae <rcl_action_take_feedback+0x76>
 8022b3c:	b530      	push	{r4, r5, lr}
 8022b3e:	4604      	mov	r4, r0
 8022b40:	6800      	ldr	r0, [r0, #0]
 8022b42:	b091      	sub	sp, #68	@ 0x44
 8022b44:	b378      	cbz	r0, 8022ba6 <rcl_action_take_feedback+0x6e>
 8022b46:	460d      	mov	r5, r1
 8022b48:	f7fe f8a6 	bl	8020c98 <rcl_client_is_valid>
 8022b4c:	b328      	cbz	r0, 8022b9a <rcl_action_take_feedback+0x62>
 8022b4e:	6820      	ldr	r0, [r4, #0]
 8022b50:	3004      	adds	r0, #4
 8022b52:	f7fe f8a1 	bl	8020c98 <rcl_client_is_valid>
 8022b56:	b300      	cbz	r0, 8022b9a <rcl_action_take_feedback+0x62>
 8022b58:	6820      	ldr	r0, [r4, #0]
 8022b5a:	3008      	adds	r0, #8
 8022b5c:	f7fe f89c 	bl	8020c98 <rcl_client_is_valid>
 8022b60:	b1d8      	cbz	r0, 8022b9a <rcl_action_take_feedback+0x62>
 8022b62:	6820      	ldr	r0, [r4, #0]
 8022b64:	300c      	adds	r0, #12
 8022b66:	f7fe ff5d 	bl	8021a24 <rcl_subscription_is_valid>
 8022b6a:	b1b0      	cbz	r0, 8022b9a <rcl_action_take_feedback+0x62>
 8022b6c:	6820      	ldr	r0, [r4, #0]
 8022b6e:	3010      	adds	r0, #16
 8022b70:	f7fe ff58 	bl	8021a24 <rcl_subscription_is_valid>
 8022b74:	b188      	cbz	r0, 8022b9a <rcl_action_take_feedback+0x62>
 8022b76:	b1ed      	cbz	r5, 8022bb4 <rcl_action_take_feedback+0x7c>
 8022b78:	6820      	ldr	r0, [r4, #0]
 8022b7a:	2300      	movs	r3, #0
 8022b7c:	466a      	mov	r2, sp
 8022b7e:	4629      	mov	r1, r5
 8022b80:	300c      	adds	r0, #12
 8022b82:	f7fe fef3 	bl	802196c <rcl_take>
 8022b86:	b160      	cbz	r0, 8022ba2 <rcl_action_take_feedback+0x6a>
 8022b88:	f240 1391 	movw	r3, #401	@ 0x191
 8022b8c:	4298      	cmp	r0, r3
 8022b8e:	d014      	beq.n	8022bba <rcl_action_take_feedback+0x82>
 8022b90:	280a      	cmp	r0, #10
 8022b92:	bf18      	it	ne
 8022b94:	2001      	movne	r0, #1
 8022b96:	b011      	add	sp, #68	@ 0x44
 8022b98:	bd30      	pop	{r4, r5, pc}
 8022b9a:	f7f9 f85d 	bl	801bc58 <rcutils_reset_error>
 8022b9e:	f640 0036 	movw	r0, #2102	@ 0x836
 8022ba2:	b011      	add	sp, #68	@ 0x44
 8022ba4:	bd30      	pop	{r4, r5, pc}
 8022ba6:	f640 0036 	movw	r0, #2102	@ 0x836
 8022baa:	b011      	add	sp, #68	@ 0x44
 8022bac:	bd30      	pop	{r4, r5, pc}
 8022bae:	f640 0036 	movw	r0, #2102	@ 0x836
 8022bb2:	4770      	bx	lr
 8022bb4:	200b      	movs	r0, #11
 8022bb6:	b011      	add	sp, #68	@ 0x44
 8022bb8:	bd30      	pop	{r4, r5, pc}
 8022bba:	f640 0037 	movw	r0, #2103	@ 0x837
 8022bbe:	e7f0      	b.n	8022ba2 <rcl_action_take_feedback+0x6a>

08022bc0 <rcl_action_wait_set_add_action_client>:
 8022bc0:	2800      	cmp	r0, #0
 8022bc2:	d048      	beq.n	8022c56 <rcl_action_wait_set_add_action_client+0x96>
 8022bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022bc6:	460c      	mov	r4, r1
 8022bc8:	2900      	cmp	r1, #0
 8022bca:	d03c      	beq.n	8022c46 <rcl_action_wait_set_add_action_client+0x86>
 8022bcc:	4605      	mov	r5, r0
 8022bce:	6808      	ldr	r0, [r1, #0]
 8022bd0:	2800      	cmp	r0, #0
 8022bd2:	d038      	beq.n	8022c46 <rcl_action_wait_set_add_action_client+0x86>
 8022bd4:	4617      	mov	r7, r2
 8022bd6:	461e      	mov	r6, r3
 8022bd8:	f7fe f85e 	bl	8020c98 <rcl_client_is_valid>
 8022bdc:	b3b0      	cbz	r0, 8022c4c <rcl_action_wait_set_add_action_client+0x8c>
 8022bde:	6820      	ldr	r0, [r4, #0]
 8022be0:	3004      	adds	r0, #4
 8022be2:	f7fe f859 	bl	8020c98 <rcl_client_is_valid>
 8022be6:	b388      	cbz	r0, 8022c4c <rcl_action_wait_set_add_action_client+0x8c>
 8022be8:	6820      	ldr	r0, [r4, #0]
 8022bea:	3008      	adds	r0, #8
 8022bec:	f7fe f854 	bl	8020c98 <rcl_client_is_valid>
 8022bf0:	b360      	cbz	r0, 8022c4c <rcl_action_wait_set_add_action_client+0x8c>
 8022bf2:	6820      	ldr	r0, [r4, #0]
 8022bf4:	300c      	adds	r0, #12
 8022bf6:	f7fe ff15 	bl	8021a24 <rcl_subscription_is_valid>
 8022bfa:	b338      	cbz	r0, 8022c4c <rcl_action_wait_set_add_action_client+0x8c>
 8022bfc:	6820      	ldr	r0, [r4, #0]
 8022bfe:	3010      	adds	r0, #16
 8022c00:	f7fe ff10 	bl	8021a24 <rcl_subscription_is_valid>
 8022c04:	b310      	cbz	r0, 8022c4c <rcl_action_wait_set_add_action_client+0x8c>
 8022c06:	6821      	ldr	r1, [r4, #0]
 8022c08:	4628      	mov	r0, r5
 8022c0a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8022c0e:	f7ff fcd3 	bl	80225b8 <rcl_wait_set_add_client>
 8022c12:	b9b8      	cbnz	r0, 8022c44 <rcl_action_wait_set_add_action_client+0x84>
 8022c14:	6821      	ldr	r1, [r4, #0]
 8022c16:	4628      	mov	r0, r5
 8022c18:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8022c1c:	3104      	adds	r1, #4
 8022c1e:	f7ff fccb 	bl	80225b8 <rcl_wait_set_add_client>
 8022c22:	b978      	cbnz	r0, 8022c44 <rcl_action_wait_set_add_action_client+0x84>
 8022c24:	6821      	ldr	r1, [r4, #0]
 8022c26:	4628      	mov	r0, r5
 8022c28:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8022c2c:	3108      	adds	r1, #8
 8022c2e:	f7ff fcc3 	bl	80225b8 <rcl_wait_set_add_client>
 8022c32:	b938      	cbnz	r0, 8022c44 <rcl_action_wait_set_add_action_client+0x84>
 8022c34:	6821      	ldr	r1, [r4, #0]
 8022c36:	4628      	mov	r0, r5
 8022c38:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8022c3c:	310c      	adds	r1, #12
 8022c3e:	f7ff f96b 	bl	8021f18 <rcl_wait_set_add_subscription>
 8022c42:	b158      	cbz	r0, 8022c5c <rcl_action_wait_set_add_action_client+0x9c>
 8022c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022c46:	f640 0036 	movw	r0, #2102	@ 0x836
 8022c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022c4c:	f7f9 f804 	bl	801bc58 <rcutils_reset_error>
 8022c50:	f640 0036 	movw	r0, #2102	@ 0x836
 8022c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022c56:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8022c5a:	4770      	bx	lr
 8022c5c:	6821      	ldr	r1, [r4, #0]
 8022c5e:	4628      	mov	r0, r5
 8022c60:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8022c64:	3110      	adds	r1, #16
 8022c66:	f7ff f957 	bl	8021f18 <rcl_wait_set_add_subscription>
 8022c6a:	2800      	cmp	r0, #0
 8022c6c:	d1ea      	bne.n	8022c44 <rcl_action_wait_set_add_action_client+0x84>
 8022c6e:	b11f      	cbz	r7, 8022c78 <rcl_action_wait_set_add_action_client+0xb8>
 8022c70:	6823      	ldr	r3, [r4, #0]
 8022c72:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8022c76:	603b      	str	r3, [r7, #0]
 8022c78:	2e00      	cmp	r6, #0
 8022c7a:	d0e3      	beq.n	8022c44 <rcl_action_wait_set_add_action_client+0x84>
 8022c7c:	6823      	ldr	r3, [r4, #0]
 8022c7e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8022c82:	6033      	str	r3, [r6, #0]
 8022c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022c86:	bf00      	nop

08022c88 <rcl_action_client_wait_set_get_entities_ready>:
 8022c88:	2800      	cmp	r0, #0
 8022c8a:	d050      	beq.n	8022d2e <rcl_action_client_wait_set_get_entities_ready+0xa6>
 8022c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022c90:	460c      	mov	r4, r1
 8022c92:	2900      	cmp	r1, #0
 8022c94:	d03e      	beq.n	8022d14 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8022c96:	4605      	mov	r5, r0
 8022c98:	6808      	ldr	r0, [r1, #0]
 8022c9a:	2800      	cmp	r0, #0
 8022c9c:	d03a      	beq.n	8022d14 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8022c9e:	4616      	mov	r6, r2
 8022ca0:	461f      	mov	r7, r3
 8022ca2:	f7fd fff9 	bl	8020c98 <rcl_client_is_valid>
 8022ca6:	2800      	cmp	r0, #0
 8022ca8:	d038      	beq.n	8022d1c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8022caa:	6820      	ldr	r0, [r4, #0]
 8022cac:	3004      	adds	r0, #4
 8022cae:	f7fd fff3 	bl	8020c98 <rcl_client_is_valid>
 8022cb2:	2800      	cmp	r0, #0
 8022cb4:	d032      	beq.n	8022d1c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8022cb6:	6820      	ldr	r0, [r4, #0]
 8022cb8:	3008      	adds	r0, #8
 8022cba:	f7fd ffed 	bl	8020c98 <rcl_client_is_valid>
 8022cbe:	b368      	cbz	r0, 8022d1c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8022cc0:	6820      	ldr	r0, [r4, #0]
 8022cc2:	300c      	adds	r0, #12
 8022cc4:	f7fe feae 	bl	8021a24 <rcl_subscription_is_valid>
 8022cc8:	b340      	cbz	r0, 8022d1c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8022cca:	6820      	ldr	r0, [r4, #0]
 8022ccc:	3010      	adds	r0, #16
 8022cce:	f7fe fea9 	bl	8021a24 <rcl_subscription_is_valid>
 8022cd2:	b318      	cbz	r0, 8022d1c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8022cd4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
 8022cd8:	2a00      	cmp	r2, #0
 8022cda:	bf18      	it	ne
 8022cdc:	2b00      	cmpne	r3, #0
 8022cde:	9b08      	ldr	r3, [sp, #32]
 8022ce0:	bf0c      	ite	eq
 8022ce2:	2101      	moveq	r1, #1
 8022ce4:	2100      	movne	r1, #0
 8022ce6:	2b00      	cmp	r3, #0
 8022ce8:	bf08      	it	eq
 8022cea:	f041 0101 	orreq.w	r1, r1, #1
 8022cee:	2f00      	cmp	r7, #0
 8022cf0:	bf08      	it	eq
 8022cf2:	f041 0101 	orreq.w	r1, r1, #1
 8022cf6:	b9b9      	cbnz	r1, 8022d28 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8022cf8:	b1b6      	cbz	r6, 8022d28 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8022cfa:	6823      	ldr	r3, [r4, #0]
 8022cfc:	686c      	ldr	r4, [r5, #4]
 8022cfe:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	@ 0x1d0
 8022d02:	428a      	cmp	r2, r1
 8022d04:	4610      	mov	r0, r2
 8022d06:	bf38      	it	cc
 8022d08:	4608      	movcc	r0, r1
 8022d0a:	4284      	cmp	r4, r0
 8022d0c:	d812      	bhi.n	8022d34 <rcl_action_client_wait_set_get_entities_ready+0xac>
 8022d0e:	2001      	movs	r0, #1
 8022d10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022d14:	f640 0036 	movw	r0, #2102	@ 0x836
 8022d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022d1c:	f7f8 ff9c 	bl	801bc58 <rcutils_reset_error>
 8022d20:	f640 0036 	movw	r0, #2102	@ 0x836
 8022d24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022d28:	200b      	movs	r0, #11
 8022d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022d2e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8022d32:	4770      	bx	lr
 8022d34:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	@ 0x1c4
 8022d38:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	@ 0x1cc
 8022d3c:	45f0      	cmp	r8, lr
 8022d3e:	4640      	mov	r0, r8
 8022d40:	69ec      	ldr	r4, [r5, #28]
 8022d42:	bf38      	it	cc
 8022d44:	4670      	movcc	r0, lr
 8022d46:	4560      	cmp	r0, ip
 8022d48:	bf38      	it	cc
 8022d4a:	4660      	movcc	r0, ip
 8022d4c:	4284      	cmp	r4, r0
 8022d4e:	d9de      	bls.n	8022d0e <rcl_action_client_wait_set_get_entities_ready+0x86>
 8022d50:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8022d54:	682d      	ldr	r5, [r5, #0]
 8022d56:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 8022d5a:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 8022d5e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8022d62:	1a18      	subs	r0, r3, r0
 8022d64:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8022d68:	f103 0c0c 	add.w	ip, r3, #12
 8022d6c:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 8022d70:	fab0 f080 	clz	r0, r0
 8022d74:	eba5 050c 	sub.w	r5, r5, ip
 8022d78:	0940      	lsrs	r0, r0, #5
 8022d7a:	fab5 f585 	clz	r5, r5
 8022d7e:	096d      	lsrs	r5, r5, #5
 8022d80:	7035      	strb	r5, [r6, #0]
 8022d82:	f103 0510 	add.w	r5, r3, #16
 8022d86:	1b64      	subs	r4, r4, r5
 8022d88:	9d08      	ldr	r5, [sp, #32]
 8022d8a:	fab4 f484 	clz	r4, r4
 8022d8e:	0964      	lsrs	r4, r4, #5
 8022d90:	703c      	strb	r4, [r7, #0]
 8022d92:	1d1c      	adds	r4, r3, #4
 8022d94:	3308      	adds	r3, #8
 8022d96:	7028      	strb	r0, [r5, #0]
 8022d98:	1b09      	subs	r1, r1, r4
 8022d9a:	2000      	movs	r0, #0
 8022d9c:	1ad3      	subs	r3, r2, r3
 8022d9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022da0:	fab1 f181 	clz	r1, r1
 8022da4:	fab3 f383 	clz	r3, r3
 8022da8:	0949      	lsrs	r1, r1, #5
 8022daa:	095b      	lsrs	r3, r3, #5
 8022dac:	7011      	strb	r1, [r2, #0]
 8022dae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022db0:	7013      	strb	r3, [r2, #0]
 8022db2:	e7b1      	b.n	8022d18 <rcl_action_client_wait_set_get_entities_ready+0x90>

08022db4 <rcl_action_take_goal_request>:
 8022db4:	2800      	cmp	r0, #0
 8022db6:	d039      	beq.n	8022e2c <rcl_action_take_goal_request+0x78>
 8022db8:	b570      	push	{r4, r5, r6, lr}
 8022dba:	4604      	mov	r4, r0
 8022dbc:	6800      	ldr	r0, [r0, #0]
 8022dbe:	b380      	cbz	r0, 8022e22 <rcl_action_take_goal_request+0x6e>
 8022dc0:	460e      	mov	r6, r1
 8022dc2:	4615      	mov	r5, r2
 8022dc4:	f7fe fce6 	bl	8021794 <rcl_service_is_valid>
 8022dc8:	b330      	cbz	r0, 8022e18 <rcl_action_take_goal_request+0x64>
 8022dca:	6820      	ldr	r0, [r4, #0]
 8022dcc:	3004      	adds	r0, #4
 8022dce:	f7fe fce1 	bl	8021794 <rcl_service_is_valid>
 8022dd2:	b308      	cbz	r0, 8022e18 <rcl_action_take_goal_request+0x64>
 8022dd4:	6820      	ldr	r0, [r4, #0]
 8022dd6:	3008      	adds	r0, #8
 8022dd8:	f7fe fcdc 	bl	8021794 <rcl_service_is_valid>
 8022ddc:	b1e0      	cbz	r0, 8022e18 <rcl_action_take_goal_request+0x64>
 8022dde:	6820      	ldr	r0, [r4, #0]
 8022de0:	300c      	adds	r0, #12
 8022de2:	f7f7 ffb3 	bl	801ad4c <rcl_publisher_is_valid>
 8022de6:	b1b8      	cbz	r0, 8022e18 <rcl_action_take_goal_request+0x64>
 8022de8:	6820      	ldr	r0, [r4, #0]
 8022dea:	3010      	adds	r0, #16
 8022dec:	f7f7 ffae 	bl	801ad4c <rcl_publisher_is_valid>
 8022df0:	b190      	cbz	r0, 8022e18 <rcl_action_take_goal_request+0x64>
 8022df2:	b1cd      	cbz	r5, 8022e28 <rcl_action_take_goal_request+0x74>
 8022df4:	b1c6      	cbz	r6, 8022e28 <rcl_action_take_goal_request+0x74>
 8022df6:	462a      	mov	r2, r5
 8022df8:	4631      	mov	r1, r6
 8022dfa:	6820      	ldr	r0, [r4, #0]
 8022dfc:	f7fe fc72 	bl	80216e4 <rcl_take_request>
 8022e00:	b148      	cbz	r0, 8022e16 <rcl_action_take_goal_request+0x62>
 8022e02:	280a      	cmp	r0, #10
 8022e04:	d007      	beq.n	8022e16 <rcl_action_take_goal_request+0x62>
 8022e06:	f240 2259 	movw	r2, #601	@ 0x259
 8022e0a:	f640 0399 	movw	r3, #2201	@ 0x899
 8022e0e:	4290      	cmp	r0, r2
 8022e10:	bf0c      	ite	eq
 8022e12:	4618      	moveq	r0, r3
 8022e14:	2001      	movne	r0, #1
 8022e16:	bd70      	pop	{r4, r5, r6, pc}
 8022e18:	f7f8 ff1e 	bl	801bc58 <rcutils_reset_error>
 8022e1c:	f640 0098 	movw	r0, #2200	@ 0x898
 8022e20:	bd70      	pop	{r4, r5, r6, pc}
 8022e22:	f640 0098 	movw	r0, #2200	@ 0x898
 8022e26:	bd70      	pop	{r4, r5, r6, pc}
 8022e28:	200b      	movs	r0, #11
 8022e2a:	bd70      	pop	{r4, r5, r6, pc}
 8022e2c:	f640 0098 	movw	r0, #2200	@ 0x898
 8022e30:	4770      	bx	lr
 8022e32:	bf00      	nop

08022e34 <rcl_action_send_goal_response>:
 8022e34:	b390      	cbz	r0, 8022e9c <rcl_action_send_goal_response+0x68>
 8022e36:	b570      	push	{r4, r5, r6, lr}
 8022e38:	4604      	mov	r4, r0
 8022e3a:	6800      	ldr	r0, [r0, #0]
 8022e3c:	b348      	cbz	r0, 8022e92 <rcl_action_send_goal_response+0x5e>
 8022e3e:	460e      	mov	r6, r1
 8022e40:	4615      	mov	r5, r2
 8022e42:	f7fe fca7 	bl	8021794 <rcl_service_is_valid>
 8022e46:	b1f8      	cbz	r0, 8022e88 <rcl_action_send_goal_response+0x54>
 8022e48:	6820      	ldr	r0, [r4, #0]
 8022e4a:	3004      	adds	r0, #4
 8022e4c:	f7fe fca2 	bl	8021794 <rcl_service_is_valid>
 8022e50:	b1d0      	cbz	r0, 8022e88 <rcl_action_send_goal_response+0x54>
 8022e52:	6820      	ldr	r0, [r4, #0]
 8022e54:	3008      	adds	r0, #8
 8022e56:	f7fe fc9d 	bl	8021794 <rcl_service_is_valid>
 8022e5a:	b1a8      	cbz	r0, 8022e88 <rcl_action_send_goal_response+0x54>
 8022e5c:	6820      	ldr	r0, [r4, #0]
 8022e5e:	300c      	adds	r0, #12
 8022e60:	f7f7 ff74 	bl	801ad4c <rcl_publisher_is_valid>
 8022e64:	b180      	cbz	r0, 8022e88 <rcl_action_send_goal_response+0x54>
 8022e66:	6820      	ldr	r0, [r4, #0]
 8022e68:	3010      	adds	r0, #16
 8022e6a:	f7f7 ff6f 	bl	801ad4c <rcl_publisher_is_valid>
 8022e6e:	b158      	cbz	r0, 8022e88 <rcl_action_send_goal_response+0x54>
 8022e70:	b195      	cbz	r5, 8022e98 <rcl_action_send_goal_response+0x64>
 8022e72:	b18e      	cbz	r6, 8022e98 <rcl_action_send_goal_response+0x64>
 8022e74:	462a      	mov	r2, r5
 8022e76:	4631      	mov	r1, r6
 8022e78:	6820      	ldr	r0, [r4, #0]
 8022e7a:	f7fe fc73 	bl	8021764 <rcl_send_response>
 8022e7e:	b110      	cbz	r0, 8022e86 <rcl_action_send_goal_response+0x52>
 8022e80:	2802      	cmp	r0, #2
 8022e82:	bf18      	it	ne
 8022e84:	2001      	movne	r0, #1
 8022e86:	bd70      	pop	{r4, r5, r6, pc}
 8022e88:	f7f8 fee6 	bl	801bc58 <rcutils_reset_error>
 8022e8c:	f640 0098 	movw	r0, #2200	@ 0x898
 8022e90:	bd70      	pop	{r4, r5, r6, pc}
 8022e92:	f640 0098 	movw	r0, #2200	@ 0x898
 8022e96:	bd70      	pop	{r4, r5, r6, pc}
 8022e98:	200b      	movs	r0, #11
 8022e9a:	bd70      	pop	{r4, r5, r6, pc}
 8022e9c:	f640 0098 	movw	r0, #2200	@ 0x898
 8022ea0:	4770      	bx	lr
 8022ea2:	bf00      	nop

08022ea4 <rcl_action_take_result_request>:
 8022ea4:	2800      	cmp	r0, #0
 8022ea6:	d03a      	beq.n	8022f1e <rcl_action_take_result_request+0x7a>
 8022ea8:	b570      	push	{r4, r5, r6, lr}
 8022eaa:	4604      	mov	r4, r0
 8022eac:	6800      	ldr	r0, [r0, #0]
 8022eae:	b388      	cbz	r0, 8022f14 <rcl_action_take_result_request+0x70>
 8022eb0:	460e      	mov	r6, r1
 8022eb2:	4615      	mov	r5, r2
 8022eb4:	f7fe fc6e 	bl	8021794 <rcl_service_is_valid>
 8022eb8:	b338      	cbz	r0, 8022f0a <rcl_action_take_result_request+0x66>
 8022eba:	6820      	ldr	r0, [r4, #0]
 8022ebc:	3004      	adds	r0, #4
 8022ebe:	f7fe fc69 	bl	8021794 <rcl_service_is_valid>
 8022ec2:	b310      	cbz	r0, 8022f0a <rcl_action_take_result_request+0x66>
 8022ec4:	6820      	ldr	r0, [r4, #0]
 8022ec6:	3008      	adds	r0, #8
 8022ec8:	f7fe fc64 	bl	8021794 <rcl_service_is_valid>
 8022ecc:	b1e8      	cbz	r0, 8022f0a <rcl_action_take_result_request+0x66>
 8022ece:	6820      	ldr	r0, [r4, #0]
 8022ed0:	300c      	adds	r0, #12
 8022ed2:	f7f7 ff3b 	bl	801ad4c <rcl_publisher_is_valid>
 8022ed6:	b1c0      	cbz	r0, 8022f0a <rcl_action_take_result_request+0x66>
 8022ed8:	6820      	ldr	r0, [r4, #0]
 8022eda:	3010      	adds	r0, #16
 8022edc:	f7f7 ff36 	bl	801ad4c <rcl_publisher_is_valid>
 8022ee0:	b198      	cbz	r0, 8022f0a <rcl_action_take_result_request+0x66>
 8022ee2:	b1d5      	cbz	r5, 8022f1a <rcl_action_take_result_request+0x76>
 8022ee4:	b1ce      	cbz	r6, 8022f1a <rcl_action_take_result_request+0x76>
 8022ee6:	6820      	ldr	r0, [r4, #0]
 8022ee8:	462a      	mov	r2, r5
 8022eea:	4631      	mov	r1, r6
 8022eec:	3008      	adds	r0, #8
 8022eee:	f7fe fbf9 	bl	80216e4 <rcl_take_request>
 8022ef2:	b148      	cbz	r0, 8022f08 <rcl_action_take_result_request+0x64>
 8022ef4:	280a      	cmp	r0, #10
 8022ef6:	d007      	beq.n	8022f08 <rcl_action_take_result_request+0x64>
 8022ef8:	f240 2259 	movw	r2, #601	@ 0x259
 8022efc:	f640 0399 	movw	r3, #2201	@ 0x899
 8022f00:	4290      	cmp	r0, r2
 8022f02:	bf0c      	ite	eq
 8022f04:	4618      	moveq	r0, r3
 8022f06:	2001      	movne	r0, #1
 8022f08:	bd70      	pop	{r4, r5, r6, pc}
 8022f0a:	f7f8 fea5 	bl	801bc58 <rcutils_reset_error>
 8022f0e:	f640 0098 	movw	r0, #2200	@ 0x898
 8022f12:	bd70      	pop	{r4, r5, r6, pc}
 8022f14:	f640 0098 	movw	r0, #2200	@ 0x898
 8022f18:	bd70      	pop	{r4, r5, r6, pc}
 8022f1a:	200b      	movs	r0, #11
 8022f1c:	bd70      	pop	{r4, r5, r6, pc}
 8022f1e:	f640 0098 	movw	r0, #2200	@ 0x898
 8022f22:	4770      	bx	lr

08022f24 <rcl_action_take_cancel_request>:
 8022f24:	2800      	cmp	r0, #0
 8022f26:	d03a      	beq.n	8022f9e <rcl_action_take_cancel_request+0x7a>
 8022f28:	b570      	push	{r4, r5, r6, lr}
 8022f2a:	4604      	mov	r4, r0
 8022f2c:	6800      	ldr	r0, [r0, #0]
 8022f2e:	b388      	cbz	r0, 8022f94 <rcl_action_take_cancel_request+0x70>
 8022f30:	460e      	mov	r6, r1
 8022f32:	4615      	mov	r5, r2
 8022f34:	f7fe fc2e 	bl	8021794 <rcl_service_is_valid>
 8022f38:	b338      	cbz	r0, 8022f8a <rcl_action_take_cancel_request+0x66>
 8022f3a:	6820      	ldr	r0, [r4, #0]
 8022f3c:	3004      	adds	r0, #4
 8022f3e:	f7fe fc29 	bl	8021794 <rcl_service_is_valid>
 8022f42:	b310      	cbz	r0, 8022f8a <rcl_action_take_cancel_request+0x66>
 8022f44:	6820      	ldr	r0, [r4, #0]
 8022f46:	3008      	adds	r0, #8
 8022f48:	f7fe fc24 	bl	8021794 <rcl_service_is_valid>
 8022f4c:	b1e8      	cbz	r0, 8022f8a <rcl_action_take_cancel_request+0x66>
 8022f4e:	6820      	ldr	r0, [r4, #0]
 8022f50:	300c      	adds	r0, #12
 8022f52:	f7f7 fefb 	bl	801ad4c <rcl_publisher_is_valid>
 8022f56:	b1c0      	cbz	r0, 8022f8a <rcl_action_take_cancel_request+0x66>
 8022f58:	6820      	ldr	r0, [r4, #0]
 8022f5a:	3010      	adds	r0, #16
 8022f5c:	f7f7 fef6 	bl	801ad4c <rcl_publisher_is_valid>
 8022f60:	b198      	cbz	r0, 8022f8a <rcl_action_take_cancel_request+0x66>
 8022f62:	b1d5      	cbz	r5, 8022f9a <rcl_action_take_cancel_request+0x76>
 8022f64:	b1ce      	cbz	r6, 8022f9a <rcl_action_take_cancel_request+0x76>
 8022f66:	6820      	ldr	r0, [r4, #0]
 8022f68:	462a      	mov	r2, r5
 8022f6a:	4631      	mov	r1, r6
 8022f6c:	3004      	adds	r0, #4
 8022f6e:	f7fe fbb9 	bl	80216e4 <rcl_take_request>
 8022f72:	b148      	cbz	r0, 8022f88 <rcl_action_take_cancel_request+0x64>
 8022f74:	280a      	cmp	r0, #10
 8022f76:	d007      	beq.n	8022f88 <rcl_action_take_cancel_request+0x64>
 8022f78:	f240 2259 	movw	r2, #601	@ 0x259
 8022f7c:	f640 0399 	movw	r3, #2201	@ 0x899
 8022f80:	4290      	cmp	r0, r2
 8022f82:	bf0c      	ite	eq
 8022f84:	4618      	moveq	r0, r3
 8022f86:	2001      	movne	r0, #1
 8022f88:	bd70      	pop	{r4, r5, r6, pc}
 8022f8a:	f7f8 fe65 	bl	801bc58 <rcutils_reset_error>
 8022f8e:	f640 0098 	movw	r0, #2200	@ 0x898
 8022f92:	bd70      	pop	{r4, r5, r6, pc}
 8022f94:	f640 0098 	movw	r0, #2200	@ 0x898
 8022f98:	bd70      	pop	{r4, r5, r6, pc}
 8022f9a:	200b      	movs	r0, #11
 8022f9c:	bd70      	pop	{r4, r5, r6, pc}
 8022f9e:	f640 0098 	movw	r0, #2200	@ 0x898
 8022fa2:	4770      	bx	lr

08022fa4 <rcl_action_send_cancel_response>:
 8022fa4:	b398      	cbz	r0, 802300e <rcl_action_send_cancel_response+0x6a>
 8022fa6:	b570      	push	{r4, r5, r6, lr}
 8022fa8:	4604      	mov	r4, r0
 8022faa:	6800      	ldr	r0, [r0, #0]
 8022fac:	b350      	cbz	r0, 8023004 <rcl_action_send_cancel_response+0x60>
 8022fae:	460e      	mov	r6, r1
 8022fb0:	4615      	mov	r5, r2
 8022fb2:	f7fe fbef 	bl	8021794 <rcl_service_is_valid>
 8022fb6:	b300      	cbz	r0, 8022ffa <rcl_action_send_cancel_response+0x56>
 8022fb8:	6820      	ldr	r0, [r4, #0]
 8022fba:	3004      	adds	r0, #4
 8022fbc:	f7fe fbea 	bl	8021794 <rcl_service_is_valid>
 8022fc0:	b1d8      	cbz	r0, 8022ffa <rcl_action_send_cancel_response+0x56>
 8022fc2:	6820      	ldr	r0, [r4, #0]
 8022fc4:	3008      	adds	r0, #8
 8022fc6:	f7fe fbe5 	bl	8021794 <rcl_service_is_valid>
 8022fca:	b1b0      	cbz	r0, 8022ffa <rcl_action_send_cancel_response+0x56>
 8022fcc:	6820      	ldr	r0, [r4, #0]
 8022fce:	300c      	adds	r0, #12
 8022fd0:	f7f7 febc 	bl	801ad4c <rcl_publisher_is_valid>
 8022fd4:	b188      	cbz	r0, 8022ffa <rcl_action_send_cancel_response+0x56>
 8022fd6:	6820      	ldr	r0, [r4, #0]
 8022fd8:	3010      	adds	r0, #16
 8022fda:	f7f7 feb7 	bl	801ad4c <rcl_publisher_is_valid>
 8022fde:	b160      	cbz	r0, 8022ffa <rcl_action_send_cancel_response+0x56>
 8022fe0:	b19d      	cbz	r5, 802300a <rcl_action_send_cancel_response+0x66>
 8022fe2:	b196      	cbz	r6, 802300a <rcl_action_send_cancel_response+0x66>
 8022fe4:	6820      	ldr	r0, [r4, #0]
 8022fe6:	462a      	mov	r2, r5
 8022fe8:	4631      	mov	r1, r6
 8022fea:	3004      	adds	r0, #4
 8022fec:	f7fe fbba 	bl	8021764 <rcl_send_response>
 8022ff0:	b110      	cbz	r0, 8022ff8 <rcl_action_send_cancel_response+0x54>
 8022ff2:	2802      	cmp	r0, #2
 8022ff4:	bf18      	it	ne
 8022ff6:	2001      	movne	r0, #1
 8022ff8:	bd70      	pop	{r4, r5, r6, pc}
 8022ffa:	f7f8 fe2d 	bl	801bc58 <rcutils_reset_error>
 8022ffe:	f640 0098 	movw	r0, #2200	@ 0x898
 8023002:	bd70      	pop	{r4, r5, r6, pc}
 8023004:	f640 0098 	movw	r0, #2200	@ 0x898
 8023008:	bd70      	pop	{r4, r5, r6, pc}
 802300a:	200b      	movs	r0, #11
 802300c:	bd70      	pop	{r4, r5, r6, pc}
 802300e:	f640 0098 	movw	r0, #2200	@ 0x898
 8023012:	4770      	bx	lr

08023014 <rcl_action_wait_set_add_action_server>:
 8023014:	2800      	cmp	r0, #0
 8023016:	d04d      	beq.n	80230b4 <rcl_action_wait_set_add_action_server+0xa0>
 8023018:	b570      	push	{r4, r5, r6, lr}
 802301a:	460c      	mov	r4, r1
 802301c:	b159      	cbz	r1, 8023036 <rcl_action_wait_set_add_action_server+0x22>
 802301e:	4605      	mov	r5, r0
 8023020:	6808      	ldr	r0, [r1, #0]
 8023022:	b140      	cbz	r0, 8023036 <rcl_action_wait_set_add_action_server+0x22>
 8023024:	4616      	mov	r6, r2
 8023026:	f7fe fbb5 	bl	8021794 <rcl_service_is_valid>
 802302a:	b120      	cbz	r0, 8023036 <rcl_action_wait_set_add_action_server+0x22>
 802302c:	6820      	ldr	r0, [r4, #0]
 802302e:	3004      	adds	r0, #4
 8023030:	f7fe fbb0 	bl	8021794 <rcl_service_is_valid>
 8023034:	b910      	cbnz	r0, 802303c <rcl_action_wait_set_add_action_server+0x28>
 8023036:	f640 0098 	movw	r0, #2200	@ 0x898
 802303a:	bd70      	pop	{r4, r5, r6, pc}
 802303c:	6820      	ldr	r0, [r4, #0]
 802303e:	3008      	adds	r0, #8
 8023040:	f7fe fba8 	bl	8021794 <rcl_service_is_valid>
 8023044:	2800      	cmp	r0, #0
 8023046:	d0f6      	beq.n	8023036 <rcl_action_wait_set_add_action_server+0x22>
 8023048:	6820      	ldr	r0, [r4, #0]
 802304a:	300c      	adds	r0, #12
 802304c:	f7f7 fe96 	bl	801ad7c <rcl_publisher_is_valid_except_context>
 8023050:	2800      	cmp	r0, #0
 8023052:	d0f0      	beq.n	8023036 <rcl_action_wait_set_add_action_server+0x22>
 8023054:	6820      	ldr	r0, [r4, #0]
 8023056:	3010      	adds	r0, #16
 8023058:	f7f7 fe90 	bl	801ad7c <rcl_publisher_is_valid_except_context>
 802305c:	2800      	cmp	r0, #0
 802305e:	d0ea      	beq.n	8023036 <rcl_action_wait_set_add_action_server+0x22>
 8023060:	6821      	ldr	r1, [r4, #0]
 8023062:	4628      	mov	r0, r5
 8023064:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8023068:	f7ff fad2 	bl	8022610 <rcl_wait_set_add_service>
 802306c:	2800      	cmp	r0, #0
 802306e:	d1e4      	bne.n	802303a <rcl_action_wait_set_add_action_server+0x26>
 8023070:	6821      	ldr	r1, [r4, #0]
 8023072:	4628      	mov	r0, r5
 8023074:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8023078:	3104      	adds	r1, #4
 802307a:	f7ff fac9 	bl	8022610 <rcl_wait_set_add_service>
 802307e:	2800      	cmp	r0, #0
 8023080:	d1db      	bne.n	802303a <rcl_action_wait_set_add_action_server+0x26>
 8023082:	6821      	ldr	r1, [r4, #0]
 8023084:	4628      	mov	r0, r5
 8023086:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 802308a:	3108      	adds	r1, #8
 802308c:	f7ff fac0 	bl	8022610 <rcl_wait_set_add_service>
 8023090:	2800      	cmp	r0, #0
 8023092:	d1d2      	bne.n	802303a <rcl_action_wait_set_add_action_server+0x26>
 8023094:	6821      	ldr	r1, [r4, #0]
 8023096:	4628      	mov	r0, r5
 8023098:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 802309c:	3114      	adds	r1, #20
 802309e:	f7ff fa5b 	bl	8022558 <rcl_wait_set_add_timer>
 80230a2:	2800      	cmp	r0, #0
 80230a4:	d1c9      	bne.n	802303a <rcl_action_wait_set_add_action_server+0x26>
 80230a6:	2e00      	cmp	r6, #0
 80230a8:	d0c7      	beq.n	802303a <rcl_action_wait_set_add_action_server+0x26>
 80230aa:	6823      	ldr	r3, [r4, #0]
 80230ac:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80230b0:	6033      	str	r3, [r6, #0]
 80230b2:	bd70      	pop	{r4, r5, r6, pc}
 80230b4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80230b8:	4770      	bx	lr
 80230ba:	bf00      	nop

080230bc <rcl_action_server_wait_set_get_entities_ready>:
 80230bc:	2800      	cmp	r0, #0
 80230be:	d067      	beq.n	8023190 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 80230c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80230c4:	460c      	mov	r4, r1
 80230c6:	b161      	cbz	r1, 80230e2 <rcl_action_server_wait_set_get_entities_ready+0x26>
 80230c8:	4605      	mov	r5, r0
 80230ca:	6808      	ldr	r0, [r1, #0]
 80230cc:	b148      	cbz	r0, 80230e2 <rcl_action_server_wait_set_get_entities_ready+0x26>
 80230ce:	4616      	mov	r6, r2
 80230d0:	4698      	mov	r8, r3
 80230d2:	f7fe fb5f 	bl	8021794 <rcl_service_is_valid>
 80230d6:	b120      	cbz	r0, 80230e2 <rcl_action_server_wait_set_get_entities_ready+0x26>
 80230d8:	6820      	ldr	r0, [r4, #0]
 80230da:	3004      	adds	r0, #4
 80230dc:	f7fe fb5a 	bl	8021794 <rcl_service_is_valid>
 80230e0:	b918      	cbnz	r0, 80230ea <rcl_action_server_wait_set_get_entities_ready+0x2e>
 80230e2:	f640 0098 	movw	r0, #2200	@ 0x898
 80230e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80230ea:	6820      	ldr	r0, [r4, #0]
 80230ec:	3008      	adds	r0, #8
 80230ee:	f7fe fb51 	bl	8021794 <rcl_service_is_valid>
 80230f2:	2800      	cmp	r0, #0
 80230f4:	d0f5      	beq.n	80230e2 <rcl_action_server_wait_set_get_entities_ready+0x26>
 80230f6:	6820      	ldr	r0, [r4, #0]
 80230f8:	300c      	adds	r0, #12
 80230fa:	f7f7 fe3f 	bl	801ad7c <rcl_publisher_is_valid_except_context>
 80230fe:	2800      	cmp	r0, #0
 8023100:	d0ef      	beq.n	80230e2 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8023102:	6820      	ldr	r0, [r4, #0]
 8023104:	3010      	adds	r0, #16
 8023106:	f7f7 fe39 	bl	801ad7c <rcl_publisher_is_valid_except_context>
 802310a:	2800      	cmp	r0, #0
 802310c:	d0e9      	beq.n	80230e2 <rcl_action_server_wait_set_get_entities_ready+0x26>
 802310e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8023112:	2a00      	cmp	r2, #0
 8023114:	bf18      	it	ne
 8023116:	2b00      	cmpne	r3, #0
 8023118:	bf0c      	ite	eq
 802311a:	2101      	moveq	r1, #1
 802311c:	2100      	movne	r1, #0
 802311e:	f1b8 0f00 	cmp.w	r8, #0
 8023122:	bf08      	it	eq
 8023124:	f041 0101 	orreq.w	r1, r1, #1
 8023128:	bba9      	cbnz	r1, 8023196 <rcl_action_server_wait_set_get_entities_ready+0xda>
 802312a:	b3a6      	cbz	r6, 8023196 <rcl_action_server_wait_set_get_entities_ready+0xda>
 802312c:	6821      	ldr	r1, [r4, #0]
 802312e:	2000      	movs	r0, #0
 8023130:	692c      	ldr	r4, [r5, #16]
 8023132:	f8d1 21e8 	ldr.w	r2, [r1, #488]	@ 0x1e8
 8023136:	6a2f      	ldr	r7, [r5, #32]
 8023138:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802313c:	f8d1 41dc 	ldr.w	r4, [r1, #476]	@ 0x1dc
 8023140:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8023144:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 8023148:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 802314c:	1a64      	subs	r4, r4, r1
 802314e:	f8d1 31e4 	ldr.w	r3, [r1, #484]	@ 0x1e4
 8023152:	fab4 f484 	clz	r4, r4
 8023156:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 802315a:	0964      	lsrs	r4, r4, #5
 802315c:	7034      	strb	r4, [r6, #0]
 802315e:	1d0c      	adds	r4, r1, #4
 8023160:	1b2c      	subs	r4, r5, r4
 8023162:	fab4 f484 	clz	r4, r4
 8023166:	0964      	lsrs	r4, r4, #5
 8023168:	f888 4000 	strb.w	r4, [r8]
 802316c:	f101 0408 	add.w	r4, r1, #8
 8023170:	1b1b      	subs	r3, r3, r4
 8023172:	9c06      	ldr	r4, [sp, #24]
 8023174:	fab3 f383 	clz	r3, r3
 8023178:	095b      	lsrs	r3, r3, #5
 802317a:	7023      	strb	r3, [r4, #0]
 802317c:	f101 0314 	add.w	r3, r1, #20
 8023180:	1ad3      	subs	r3, r2, r3
 8023182:	9a07      	ldr	r2, [sp, #28]
 8023184:	fab3 f383 	clz	r3, r3
 8023188:	095b      	lsrs	r3, r3, #5
 802318a:	7013      	strb	r3, [r2, #0]
 802318c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023190:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8023194:	4770      	bx	lr
 8023196:	200b      	movs	r0, #11
 8023198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802319c <_execute_event_handler>:
 802319c:	2002      	movs	r0, #2
 802319e:	4770      	bx	lr

080231a0 <_cancel_goal_event_handler>:
 80231a0:	2003      	movs	r0, #3
 80231a2:	4770      	bx	lr

080231a4 <_succeed_event_handler>:
 80231a4:	2004      	movs	r0, #4
 80231a6:	4770      	bx	lr

080231a8 <_abort_event_handler>:
 80231a8:	2006      	movs	r0, #6
 80231aa:	4770      	bx	lr

080231ac <_canceled_event_handler>:
 80231ac:	2005      	movs	r0, #5
 80231ae:	4770      	bx	lr

080231b0 <rcl_action_transition_goal_state>:
 80231b0:	b2c2      	uxtb	r2, r0
 80231b2:	2a06      	cmp	r2, #6
 80231b4:	d810      	bhi.n	80231d8 <rcl_action_transition_goal_state+0x28>
 80231b6:	2904      	cmp	r1, #4
 80231b8:	d80e      	bhi.n	80231d8 <rcl_action_transition_goal_state+0x28>
 80231ba:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80231be:	b410      	push	{r4}
 80231c0:	1853      	adds	r3, r2, r1
 80231c2:	4c06      	ldr	r4, [pc, #24]	@ (80231dc <rcl_action_transition_goal_state+0x2c>)
 80231c4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80231c8:	b113      	cbz	r3, 80231d0 <rcl_action_transition_goal_state+0x20>
 80231ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80231ce:	4718      	bx	r3
 80231d0:	2000      	movs	r0, #0
 80231d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80231d6:	4770      	bx	lr
 80231d8:	2000      	movs	r0, #0
 80231da:	4770      	bx	lr
 80231dc:	0802db24 	.word	0x0802db24

080231e0 <rcl_action_get_zero_initialized_cancel_response>:
 80231e0:	b510      	push	{r4, lr}
 80231e2:	4c07      	ldr	r4, [pc, #28]	@ (8023200 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80231e4:	4686      	mov	lr, r0
 80231e6:	4684      	mov	ip, r0
 80231e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80231ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80231ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80231f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80231f4:	6823      	ldr	r3, [r4, #0]
 80231f6:	4670      	mov	r0, lr
 80231f8:	f8cc 3000 	str.w	r3, [ip]
 80231fc:	bd10      	pop	{r4, pc}
 80231fe:	bf00      	nop
 8023200:	0802dbb0 	.word	0x0802dbb0

08023204 <rclc_action_send_result_request>:
 8023204:	b1d0      	cbz	r0, 802323c <rclc_action_send_result_request+0x38>
 8023206:	4684      	mov	ip, r0
 8023208:	f8d0 0009 	ldr.w	r0, [r0, #9]
 802320c:	b500      	push	{lr}
 802320e:	b087      	sub	sp, #28
 8023210:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8023214:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8023218:	f8dc 3015 	ldr.w	r3, [ip, #21]
 802321c:	f10d 0e08 	add.w	lr, sp, #8
 8023220:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8023224:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8023228:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 802322c:	a902      	add	r1, sp, #8
 802322e:	3010      	adds	r0, #16
 8023230:	f7ff fbca 	bl	80229c8 <rcl_action_send_result_request>
 8023234:	b920      	cbnz	r0, 8023240 <rclc_action_send_result_request+0x3c>
 8023236:	b007      	add	sp, #28
 8023238:	f85d fb04 	ldr.w	pc, [sp], #4
 802323c:	200b      	movs	r0, #11
 802323e:	4770      	bx	lr
 8023240:	9001      	str	r0, [sp, #4]
 8023242:	f7f8 fd09 	bl	801bc58 <rcutils_reset_error>
 8023246:	9801      	ldr	r0, [sp, #4]
 8023248:	b007      	add	sp, #28
 802324a:	f85d fb04 	ldr.w	pc, [sp], #4
 802324e:	bf00      	nop

08023250 <rclc_action_take_goal_handle>:
 8023250:	b160      	cbz	r0, 802326c <rclc_action_take_goal_handle+0x1c>
 8023252:	6883      	ldr	r3, [r0, #8]
 8023254:	b143      	cbz	r3, 8023268 <rclc_action_take_goal_handle+0x18>
 8023256:	6819      	ldr	r1, [r3, #0]
 8023258:	2200      	movs	r2, #0
 802325a:	6081      	str	r1, [r0, #8]
 802325c:	721a      	strb	r2, [r3, #8]
 802325e:	68c1      	ldr	r1, [r0, #12]
 8023260:	621a      	str	r2, [r3, #32]
 8023262:	849a      	strh	r2, [r3, #36]	@ 0x24
 8023264:	6019      	str	r1, [r3, #0]
 8023266:	60c3      	str	r3, [r0, #12]
 8023268:	4618      	mov	r0, r3
 802326a:	4770      	bx	lr
 802326c:	4603      	mov	r3, r0
 802326e:	e7fb      	b.n	8023268 <rclc_action_take_goal_handle+0x18>

08023270 <rclc_action_remove_used_goal_handle>:
 8023270:	b180      	cbz	r0, 8023294 <rclc_action_remove_used_goal_handle+0x24>
 8023272:	b179      	cbz	r1, 8023294 <rclc_action_remove_used_goal_handle+0x24>
 8023274:	68c3      	ldr	r3, [r0, #12]
 8023276:	4299      	cmp	r1, r3
 8023278:	d00d      	beq.n	8023296 <rclc_action_remove_used_goal_handle+0x26>
 802327a:	b12b      	cbz	r3, 8023288 <rclc_action_remove_used_goal_handle+0x18>
 802327c:	681a      	ldr	r2, [r3, #0]
 802327e:	4291      	cmp	r1, r2
 8023280:	d003      	beq.n	802328a <rclc_action_remove_used_goal_handle+0x1a>
 8023282:	4613      	mov	r3, r2
 8023284:	2b00      	cmp	r3, #0
 8023286:	d1f9      	bne.n	802327c <rclc_action_remove_used_goal_handle+0xc>
 8023288:	4770      	bx	lr
 802328a:	680a      	ldr	r2, [r1, #0]
 802328c:	601a      	str	r2, [r3, #0]
 802328e:	6883      	ldr	r3, [r0, #8]
 8023290:	600b      	str	r3, [r1, #0]
 8023292:	6081      	str	r1, [r0, #8]
 8023294:	4770      	bx	lr
 8023296:	680b      	ldr	r3, [r1, #0]
 8023298:	60c3      	str	r3, [r0, #12]
 802329a:	e7f8      	b.n	802328e <rclc_action_remove_used_goal_handle+0x1e>

0802329c <rclc_action_find_goal_handle_by_uuid>:
 802329c:	b538      	push	{r3, r4, r5, lr}
 802329e:	b181      	cbz	r1, 80232c2 <rclc_action_find_goal_handle_by_uuid+0x26>
 80232a0:	b178      	cbz	r0, 80232c2 <rclc_action_find_goal_handle_by_uuid+0x26>
 80232a2:	68c4      	ldr	r4, [r0, #12]
 80232a4:	460d      	mov	r5, r1
 80232a6:	b914      	cbnz	r4, 80232ae <rclc_action_find_goal_handle_by_uuid+0x12>
 80232a8:	e009      	b.n	80232be <rclc_action_find_goal_handle_by_uuid+0x22>
 80232aa:	6824      	ldr	r4, [r4, #0]
 80232ac:	b13c      	cbz	r4, 80232be <rclc_action_find_goal_handle_by_uuid+0x22>
 80232ae:	f104 0009 	add.w	r0, r4, #9
 80232b2:	2210      	movs	r2, #16
 80232b4:	4629      	mov	r1, r5
 80232b6:	f004 ff99 	bl	80281ec <memcmp>
 80232ba:	2800      	cmp	r0, #0
 80232bc:	d1f5      	bne.n	80232aa <rclc_action_find_goal_handle_by_uuid+0xe>
 80232be:	4620      	mov	r0, r4
 80232c0:	bd38      	pop	{r3, r4, r5, pc}
 80232c2:	2400      	movs	r4, #0
 80232c4:	4620      	mov	r0, r4
 80232c6:	bd38      	pop	{r3, r4, r5, pc}

080232c8 <rclc_action_find_first_handle_by_status>:
 80232c8:	b140      	cbz	r0, 80232dc <rclc_action_find_first_handle_by_status+0x14>
 80232ca:	68c0      	ldr	r0, [r0, #12]
 80232cc:	b910      	cbnz	r0, 80232d4 <rclc_action_find_first_handle_by_status+0xc>
 80232ce:	e005      	b.n	80232dc <rclc_action_find_first_handle_by_status+0x14>
 80232d0:	6800      	ldr	r0, [r0, #0]
 80232d2:	b118      	cbz	r0, 80232dc <rclc_action_find_first_handle_by_status+0x14>
 80232d4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80232d8:	428b      	cmp	r3, r1
 80232da:	d1f9      	bne.n	80232d0 <rclc_action_find_first_handle_by_status+0x8>
 80232dc:	4770      	bx	lr
 80232de:	bf00      	nop

080232e0 <rclc_action_find_first_terminated_handle>:
 80232e0:	b140      	cbz	r0, 80232f4 <rclc_action_find_first_terminated_handle+0x14>
 80232e2:	68c0      	ldr	r0, [r0, #12]
 80232e4:	b910      	cbnz	r0, 80232ec <rclc_action_find_first_terminated_handle+0xc>
 80232e6:	e005      	b.n	80232f4 <rclc_action_find_first_terminated_handle+0x14>
 80232e8:	6800      	ldr	r0, [r0, #0]
 80232ea:	b118      	cbz	r0, 80232f4 <rclc_action_find_first_terminated_handle+0x14>
 80232ec:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80232f0:	2b03      	cmp	r3, #3
 80232f2:	ddf9      	ble.n	80232e8 <rclc_action_find_first_terminated_handle+0x8>
 80232f4:	4770      	bx	lr
 80232f6:	bf00      	nop

080232f8 <rclc_action_find_handle_by_goal_request_sequence_number>:
 80232f8:	b170      	cbz	r0, 8023318 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80232fa:	68c0      	ldr	r0, [r0, #12]
 80232fc:	b160      	cbz	r0, 8023318 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80232fe:	b410      	push	{r4}
 8023300:	e001      	b.n	8023306 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8023302:	6800      	ldr	r0, [r0, #0]
 8023304:	b128      	cbz	r0, 8023312 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8023306:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 802330a:	4299      	cmp	r1, r3
 802330c:	bf08      	it	eq
 802330e:	4294      	cmpeq	r4, r2
 8023310:	d1f7      	bne.n	8023302 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8023312:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023316:	4770      	bx	lr
 8023318:	4770      	bx	lr
 802331a:	bf00      	nop

0802331c <rclc_action_find_handle_by_result_request_sequence_number>:
 802331c:	b170      	cbz	r0, 802333c <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 802331e:	68c0      	ldr	r0, [r0, #12]
 8023320:	b160      	cbz	r0, 802333c <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8023322:	b410      	push	{r4}
 8023324:	e001      	b.n	802332a <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8023326:	6800      	ldr	r0, [r0, #0]
 8023328:	b128      	cbz	r0, 8023336 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 802332a:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 802332e:	4299      	cmp	r1, r3
 8023330:	bf08      	it	eq
 8023332:	4294      	cmpeq	r4, r2
 8023334:	d1f7      	bne.n	8023326 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8023336:	f85d 4b04 	ldr.w	r4, [sp], #4
 802333a:	4770      	bx	lr
 802333c:	4770      	bx	lr
 802333e:	bf00      	nop

08023340 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8023340:	b170      	cbz	r0, 8023360 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8023342:	68c0      	ldr	r0, [r0, #12]
 8023344:	b160      	cbz	r0, 8023360 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8023346:	b410      	push	{r4}
 8023348:	e001      	b.n	802334e <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 802334a:	6800      	ldr	r0, [r0, #0]
 802334c:	b128      	cbz	r0, 802335a <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 802334e:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8023352:	4299      	cmp	r1, r3
 8023354:	bf08      	it	eq
 8023356:	4294      	cmpeq	r4, r2
 8023358:	d1f7      	bne.n	802334a <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 802335a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802335e:	4770      	bx	lr
 8023360:	4770      	bx	lr
 8023362:	bf00      	nop

08023364 <rclc_action_find_first_handle_with_goal_response>:
 8023364:	b140      	cbz	r0, 8023378 <rclc_action_find_first_handle_with_goal_response+0x14>
 8023366:	68c0      	ldr	r0, [r0, #12]
 8023368:	b910      	cbnz	r0, 8023370 <rclc_action_find_first_handle_with_goal_response+0xc>
 802336a:	e005      	b.n	8023378 <rclc_action_find_first_handle_with_goal_response+0x14>
 802336c:	6800      	ldr	r0, [r0, #0]
 802336e:	b118      	cbz	r0, 8023378 <rclc_action_find_first_handle_with_goal_response+0x14>
 8023370:	f890 3020 	ldrb.w	r3, [r0, #32]
 8023374:	2b00      	cmp	r3, #0
 8023376:	d0f9      	beq.n	802336c <rclc_action_find_first_handle_with_goal_response+0x8>
 8023378:	4770      	bx	lr
 802337a:	bf00      	nop

0802337c <rclc_action_find_first_handle_with_result_response>:
 802337c:	b140      	cbz	r0, 8023390 <rclc_action_find_first_handle_with_result_response+0x14>
 802337e:	68c0      	ldr	r0, [r0, #12]
 8023380:	b910      	cbnz	r0, 8023388 <rclc_action_find_first_handle_with_result_response+0xc>
 8023382:	e005      	b.n	8023390 <rclc_action_find_first_handle_with_result_response+0x14>
 8023384:	6800      	ldr	r0, [r0, #0]
 8023386:	b118      	cbz	r0, 8023390 <rclc_action_find_first_handle_with_result_response+0x14>
 8023388:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 802338c:	2b00      	cmp	r3, #0
 802338e:	d0f9      	beq.n	8023384 <rclc_action_find_first_handle_with_result_response+0x8>
 8023390:	4770      	bx	lr
 8023392:	bf00      	nop

08023394 <rclc_action_server_response_goal_request>:
 8023394:	b198      	cbz	r0, 80233be <rclc_action_server_response_goal_request+0x2a>
 8023396:	2200      	movs	r2, #0
 8023398:	460b      	mov	r3, r1
 802339a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 802339e:	b510      	push	{r4, lr}
 80233a0:	6844      	ldr	r4, [r0, #4]
 80233a2:	b086      	sub	sp, #24
 80233a4:	f104 0010 	add.w	r0, r4, #16
 80233a8:	9205      	str	r2, [sp, #20]
 80233aa:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80233ae:	aa03      	add	r2, sp, #12
 80233b0:	f88d 300c 	strb.w	r3, [sp, #12]
 80233b4:	f7ff fd3e 	bl	8022e34 <rcl_action_send_goal_response>
 80233b8:	b918      	cbnz	r0, 80233c2 <rclc_action_server_response_goal_request+0x2e>
 80233ba:	b006      	add	sp, #24
 80233bc:	bd10      	pop	{r4, pc}
 80233be:	200b      	movs	r0, #11
 80233c0:	4770      	bx	lr
 80233c2:	9001      	str	r0, [sp, #4]
 80233c4:	f7f8 fc48 	bl	801bc58 <rcutils_reset_error>
 80233c8:	9801      	ldr	r0, [sp, #4]
 80233ca:	b006      	add	sp, #24
 80233cc:	bd10      	pop	{r4, pc}
 80233ce:	bf00      	nop

080233d0 <rclc_action_server_goal_cancel_accept>:
 80233d0:	b310      	cbz	r0, 8023418 <rclc_action_server_goal_cancel_accept+0x48>
 80233d2:	b510      	push	{r4, lr}
 80233d4:	b090      	sub	sp, #64	@ 0x40
 80233d6:	4604      	mov	r4, r0
 80233d8:	a806      	add	r0, sp, #24
 80233da:	f7ff ff01 	bl	80231e0 <rcl_action_get_zero_initialized_cancel_response>
 80233de:	2300      	movs	r3, #0
 80233e0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80233e4:	46ec      	mov	ip, sp
 80233e6:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80233ea:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80233ee:	f88d 3018 	strb.w	r3, [sp, #24]
 80233f2:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80233f6:	f8cd d01c 	str.w	sp, [sp, #28]
 80233fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80233fe:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8023420 <rclc_action_server_goal_cancel_accept+0x50>
 8023402:	6860      	ldr	r0, [r4, #4]
 8023404:	aa06      	add	r2, sp, #24
 8023406:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 802340a:	3010      	adds	r0, #16
 802340c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8023410:	f7ff fdc8 	bl	8022fa4 <rcl_action_send_cancel_response>
 8023414:	b010      	add	sp, #64	@ 0x40
 8023416:	bd10      	pop	{r4, pc}
 8023418:	200b      	movs	r0, #11
 802341a:	4770      	bx	lr
 802341c:	f3af 8000 	nop.w
 8023420:	00000001 	.word	0x00000001
 8023424:	00000001 	.word	0x00000001

08023428 <rclc_action_server_goal_cancel_reject>:
 8023428:	b082      	sub	sp, #8
 802342a:	b530      	push	{r4, r5, lr}
 802342c:	b08b      	sub	sp, #44	@ 0x2c
 802342e:	ac0e      	add	r4, sp, #56	@ 0x38
 8023430:	e884 000c 	stmia.w	r4, {r2, r3}
 8023434:	b188      	cbz	r0, 802345a <rclc_action_server_goal_cancel_reject+0x32>
 8023436:	4604      	mov	r4, r0
 8023438:	a801      	add	r0, sp, #4
 802343a:	460d      	mov	r5, r1
 802343c:	f7ff fed0 	bl	80231e0 <rcl_action_get_zero_initialized_cancel_response>
 8023440:	aa01      	add	r2, sp, #4
 8023442:	a90e      	add	r1, sp, #56	@ 0x38
 8023444:	f104 0010 	add.w	r0, r4, #16
 8023448:	f88d 5004 	strb.w	r5, [sp, #4]
 802344c:	f7ff fdaa 	bl	8022fa4 <rcl_action_send_cancel_response>
 8023450:	b00b      	add	sp, #44	@ 0x2c
 8023452:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023456:	b002      	add	sp, #8
 8023458:	4770      	bx	lr
 802345a:	200b      	movs	r0, #11
 802345c:	b00b      	add	sp, #44	@ 0x2c
 802345e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023462:	b002      	add	sp, #8
 8023464:	4770      	bx	lr
 8023466:	bf00      	nop

08023468 <__atomic_load_8>:
 8023468:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 802346c:	4a16      	ldr	r2, [pc, #88]	@ (80234c8 <__atomic_load_8+0x60>)
 802346e:	4b17      	ldr	r3, [pc, #92]	@ (80234cc <__atomic_load_8+0x64>)
 8023470:	f04f 0c01 	mov.w	ip, #1
 8023474:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8023478:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 802347c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8023480:	fb02 f101 	mul.w	r1, r2, r1
 8023484:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8023488:	fba3 2301 	umull	r2, r3, r3, r1
 802348c:	091b      	lsrs	r3, r3, #4
 802348e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8023492:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8023496:	b4d0      	push	{r4, r6, r7}
 8023498:	1ac9      	subs	r1, r1, r3
 802349a:	4c0d      	ldr	r4, [pc, #52]	@ (80234d0 <__atomic_load_8+0x68>)
 802349c:	1862      	adds	r2, r4, r1
 802349e:	e8d2 3f4f 	ldrexb	r3, [r2]
 80234a2:	e8c2 cf46 	strexb	r6, ip, [r2]
 80234a6:	2e00      	cmp	r6, #0
 80234a8:	d1f9      	bne.n	802349e <__atomic_load_8+0x36>
 80234aa:	b2db      	uxtb	r3, r3
 80234ac:	f3bf 8f5b 	dmb	ish
 80234b0:	2b00      	cmp	r3, #0
 80234b2:	d1f4      	bne.n	802349e <__atomic_load_8+0x36>
 80234b4:	e9d0 6700 	ldrd	r6, r7, [r0]
 80234b8:	f3bf 8f5b 	dmb	ish
 80234bc:	5463      	strb	r3, [r4, r1]
 80234be:	4630      	mov	r0, r6
 80234c0:	4639      	mov	r1, r7
 80234c2:	bcd0      	pop	{r4, r6, r7}
 80234c4:	4770      	bx	lr
 80234c6:	bf00      	nop
 80234c8:	27d4eb2d 	.word	0x27d4eb2d
 80234cc:	b21642c9 	.word	0xb21642c9
 80234d0:	20014ed0 	.word	0x20014ed0

080234d4 <__atomic_store_8>:
 80234d4:	b570      	push	{r4, r5, r6, lr}
 80234d6:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 80234da:	4916      	ldr	r1, [pc, #88]	@ (8023534 <__atomic_store_8+0x60>)
 80234dc:	4c16      	ldr	r4, [pc, #88]	@ (8023538 <__atomic_store_8+0x64>)
 80234de:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 80234e2:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 80234e6:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 80234ea:	fb01 fe0e 	mul.w	lr, r1, lr
 80234ee:	4913      	ldr	r1, [pc, #76]	@ (802353c <__atomic_store_8+0x68>)
 80234f0:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 80234f4:	fba1 510e 	umull	r5, r1, r1, lr
 80234f8:	f04f 0501 	mov.w	r5, #1
 80234fc:	0909      	lsrs	r1, r1, #4
 80234fe:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8023502:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 8023506:	ebae 0e01 	sub.w	lr, lr, r1
 802350a:	eb04 0c0e 	add.w	ip, r4, lr
 802350e:	e8dc 1f4f 	ldrexb	r1, [ip]
 8023512:	e8cc 5f46 	strexb	r6, r5, [ip]
 8023516:	2e00      	cmp	r6, #0
 8023518:	d1f9      	bne.n	802350e <__atomic_store_8+0x3a>
 802351a:	b2c9      	uxtb	r1, r1
 802351c:	f3bf 8f5b 	dmb	ish
 8023520:	2900      	cmp	r1, #0
 8023522:	d1f4      	bne.n	802350e <__atomic_store_8+0x3a>
 8023524:	e9c0 2300 	strd	r2, r3, [r0]
 8023528:	f3bf 8f5b 	dmb	ish
 802352c:	f804 100e 	strb.w	r1, [r4, lr]
 8023530:	bd70      	pop	{r4, r5, r6, pc}
 8023532:	bf00      	nop
 8023534:	27d4eb2d 	.word	0x27d4eb2d
 8023538:	20014ed0 	.word	0x20014ed0
 802353c:	b21642c9 	.word	0xb21642c9

08023540 <__atomic_exchange_8>:
 8023540:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8023544:	4917      	ldr	r1, [pc, #92]	@ (80235a4 <__atomic_exchange_8+0x64>)
 8023546:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 802354a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 802354e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8023552:	fb01 fc0c 	mul.w	ip, r1, ip
 8023556:	4914      	ldr	r1, [pc, #80]	@ (80235a8 <__atomic_exchange_8+0x68>)
 8023558:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 802355c:	b570      	push	{r4, r5, r6, lr}
 802355e:	4686      	mov	lr, r0
 8023560:	fba1 010c 	umull	r0, r1, r1, ip
 8023564:	4d11      	ldr	r5, [pc, #68]	@ (80235ac <__atomic_exchange_8+0x6c>)
 8023566:	f04f 0001 	mov.w	r0, #1
 802356a:	0909      	lsrs	r1, r1, #4
 802356c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8023570:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8023574:	ebac 0c01 	sub.w	ip, ip, r1
 8023578:	eb05 010c 	add.w	r1, r5, ip
 802357c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8023580:	e8c1 0f46 	strexb	r6, r0, [r1]
 8023584:	2e00      	cmp	r6, #0
 8023586:	d1f9      	bne.n	802357c <__atomic_exchange_8+0x3c>
 8023588:	b2e4      	uxtb	r4, r4
 802358a:	f3bf 8f5b 	dmb	ish
 802358e:	2c00      	cmp	r4, #0
 8023590:	d1f4      	bne.n	802357c <__atomic_exchange_8+0x3c>
 8023592:	e9de 0100 	ldrd	r0, r1, [lr]
 8023596:	e9ce 2300 	strd	r2, r3, [lr]
 802359a:	f3bf 8f5b 	dmb	ish
 802359e:	f805 400c 	strb.w	r4, [r5, ip]
 80235a2:	bd70      	pop	{r4, r5, r6, pc}
 80235a4:	27d4eb2d 	.word	0x27d4eb2d
 80235a8:	b21642c9 	.word	0xb21642c9
 80235ac:	20014ed0 	.word	0x20014ed0

080235b0 <rcutils_get_env>:
 80235b0:	b168      	cbz	r0, 80235ce <rcutils_get_env+0x1e>
 80235b2:	b510      	push	{r4, lr}
 80235b4:	460c      	mov	r4, r1
 80235b6:	b129      	cbz	r1, 80235c4 <rcutils_get_env+0x14>
 80235b8:	f004 f8fc 	bl	80277b4 <getenv>
 80235bc:	b120      	cbz	r0, 80235c8 <rcutils_get_env+0x18>
 80235be:	6020      	str	r0, [r4, #0]
 80235c0:	2000      	movs	r0, #0
 80235c2:	bd10      	pop	{r4, pc}
 80235c4:	4803      	ldr	r0, [pc, #12]	@ (80235d4 <rcutils_get_env+0x24>)
 80235c6:	bd10      	pop	{r4, pc}
 80235c8:	4b03      	ldr	r3, [pc, #12]	@ (80235d8 <rcutils_get_env+0x28>)
 80235ca:	6023      	str	r3, [r4, #0]
 80235cc:	bd10      	pop	{r4, pc}
 80235ce:	4803      	ldr	r0, [pc, #12]	@ (80235dc <rcutils_get_env+0x2c>)
 80235d0:	4770      	bx	lr
 80235d2:	bf00      	nop
 80235d4:	0802d490 	.word	0x0802d490
 80235d8:	0802d060 	.word	0x0802d060
 80235dc:	0802d474 	.word	0x0802d474

080235e0 <rcutils_format_string_limit>:
 80235e0:	b40f      	push	{r0, r1, r2, r3}
 80235e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80235e4:	b083      	sub	sp, #12
 80235e6:	ac08      	add	r4, sp, #32
 80235e8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80235ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80235ee:	b326      	cbz	r6, 802363a <rcutils_format_string_limit+0x5a>
 80235f0:	a808      	add	r0, sp, #32
 80235f2:	f7f8 fb0b 	bl	801bc0c <rcutils_allocator_is_valid>
 80235f6:	b300      	cbz	r0, 802363a <rcutils_format_string_limit+0x5a>
 80235f8:	2100      	movs	r1, #0
 80235fa:	ab0f      	add	r3, sp, #60	@ 0x3c
 80235fc:	4632      	mov	r2, r6
 80235fe:	4608      	mov	r0, r1
 8023600:	e9cd 3300 	strd	r3, r3, [sp]
 8023604:	f000 f906 	bl	8023814 <rcutils_vsnprintf>
 8023608:	1c43      	adds	r3, r0, #1
 802360a:	4605      	mov	r5, r0
 802360c:	d015      	beq.n	802363a <rcutils_format_string_limit+0x5a>
 802360e:	1c47      	adds	r7, r0, #1
 8023610:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023612:	429f      	cmp	r7, r3
 8023614:	d901      	bls.n	802361a <rcutils_format_string_limit+0x3a>
 8023616:	1e5d      	subs	r5, r3, #1
 8023618:	461f      	mov	r7, r3
 802361a:	9b08      	ldr	r3, [sp, #32]
 802361c:	4638      	mov	r0, r7
 802361e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8023620:	4798      	blx	r3
 8023622:	4604      	mov	r4, r0
 8023624:	b148      	cbz	r0, 802363a <rcutils_format_string_limit+0x5a>
 8023626:	4632      	mov	r2, r6
 8023628:	4639      	mov	r1, r7
 802362a:	9b01      	ldr	r3, [sp, #4]
 802362c:	f000 f8f2 	bl	8023814 <rcutils_vsnprintf>
 8023630:	2800      	cmp	r0, #0
 8023632:	db09      	blt.n	8023648 <rcutils_format_string_limit+0x68>
 8023634:	2300      	movs	r3, #0
 8023636:	5563      	strb	r3, [r4, r5]
 8023638:	e000      	b.n	802363c <rcutils_format_string_limit+0x5c>
 802363a:	2400      	movs	r4, #0
 802363c:	4620      	mov	r0, r4
 802363e:	b003      	add	sp, #12
 8023640:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8023644:	b004      	add	sp, #16
 8023646:	4770      	bx	lr
 8023648:	4620      	mov	r0, r4
 802364a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802364c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802364e:	2400      	movs	r4, #0
 8023650:	4798      	blx	r3
 8023652:	e7f3      	b.n	802363c <rcutils_format_string_limit+0x5c>

08023654 <rcutils_repl_str>:
 8023654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023658:	ed2d 8b02 	vpush	{d8}
 802365c:	b087      	sub	sp, #28
 802365e:	2600      	movs	r6, #0
 8023660:	4680      	mov	r8, r0
 8023662:	468a      	mov	sl, r1
 8023664:	9000      	str	r0, [sp, #0]
 8023666:	4608      	mov	r0, r1
 8023668:	ee08 2a10 	vmov	s16, r2
 802366c:	4699      	mov	r9, r3
 802366e:	2510      	movs	r5, #16
 8023670:	f7dc fdf0 	bl	8000254 <strlen>
 8023674:	4637      	mov	r7, r6
 8023676:	46b3      	mov	fp, r6
 8023678:	9001      	str	r0, [sp, #4]
 802367a:	e01e      	b.n	80236ba <rcutils_repl_str+0x66>
 802367c:	f10b 0b01 	add.w	fp, fp, #1
 8023680:	9b01      	ldr	r3, [sp, #4]
 8023682:	455e      	cmp	r6, fp
 8023684:	eb04 0803 	add.w	r8, r4, r3
 8023688:	d211      	bcs.n	80236ae <rcutils_repl_str+0x5a>
 802368a:	442e      	add	r6, r5
 802368c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8023690:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8023694:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023698:	00b1      	lsls	r1, r6, #2
 802369a:	4798      	blx	r3
 802369c:	2800      	cmp	r0, #0
 802369e:	f000 8088 	beq.w	80237b2 <rcutils_repl_str+0x15e>
 80236a2:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 80236a6:	4607      	mov	r7, r0
 80236a8:	bf28      	it	cs
 80236aa:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 80236ae:	9a00      	ldr	r2, [sp, #0]
 80236b0:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 80236b4:	1aa4      	subs	r4, r4, r2
 80236b6:	f843 4c04 	str.w	r4, [r3, #-4]
 80236ba:	4651      	mov	r1, sl
 80236bc:	4640      	mov	r0, r8
 80236be:	f004 fde6 	bl	802828e <strstr>
 80236c2:	4604      	mov	r4, r0
 80236c4:	4638      	mov	r0, r7
 80236c6:	2c00      	cmp	r4, #0
 80236c8:	d1d8      	bne.n	802367c <rcutils_repl_str+0x28>
 80236ca:	4640      	mov	r0, r8
 80236cc:	f7dc fdc2 	bl	8000254 <strlen>
 80236d0:	9b00      	ldr	r3, [sp, #0]
 80236d2:	eba8 0803 	sub.w	r8, r8, r3
 80236d6:	eb08 0400 	add.w	r4, r8, r0
 80236da:	9402      	str	r4, [sp, #8]
 80236dc:	f1bb 0f00 	cmp.w	fp, #0
 80236e0:	d045      	beq.n	802376e <rcutils_repl_str+0x11a>
 80236e2:	ee18 0a10 	vmov	r0, s16
 80236e6:	f7dc fdb5 	bl	8000254 <strlen>
 80236ea:	9a01      	ldr	r2, [sp, #4]
 80236ec:	4606      	mov	r6, r0
 80236ee:	f8d9 3000 	ldr.w	r3, [r9]
 80236f2:	1a82      	subs	r2, r0, r2
 80236f4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80236f8:	fb0b 4202 	mla	r2, fp, r2, r4
 80236fc:	1c50      	adds	r0, r2, #1
 80236fe:	9205      	str	r2, [sp, #20]
 8023700:	4798      	blx	r3
 8023702:	4682      	mov	sl, r0
 8023704:	2800      	cmp	r0, #0
 8023706:	d054      	beq.n	80237b2 <rcutils_repl_str+0x15e>
 8023708:	683a      	ldr	r2, [r7, #0]
 802370a:	463d      	mov	r5, r7
 802370c:	9900      	ldr	r1, [sp, #0]
 802370e:	2401      	movs	r4, #1
 8023710:	f004 febd 	bl	802848e <memcpy>
 8023714:	683b      	ldr	r3, [r7, #0]
 8023716:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 802371a:	eb0a 0803 	add.w	r8, sl, r3
 802371e:	ee18 7a10 	vmov	r7, s16
 8023722:	f8dd a000 	ldr.w	sl, [sp]
 8023726:	f8cd 9000 	str.w	r9, [sp]
 802372a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 802372e:	4632      	mov	r2, r6
 8023730:	4639      	mov	r1, r7
 8023732:	4640      	mov	r0, r8
 8023734:	44b0      	add	r8, r6
 8023736:	f004 feaa 	bl	802848e <memcpy>
 802373a:	f855 2b04 	ldr.w	r2, [r5], #4
 802373e:	45a3      	cmp	fp, r4
 8023740:	444a      	add	r2, r9
 8023742:	eb0a 0102 	add.w	r1, sl, r2
 8023746:	d02a      	beq.n	802379e <rcutils_repl_str+0x14a>
 8023748:	6828      	ldr	r0, [r5, #0]
 802374a:	1a82      	subs	r2, r0, r2
 802374c:	4640      	mov	r0, r8
 802374e:	4490      	add	r8, r2
 8023750:	f004 fe9d 	bl	802848e <memcpy>
 8023754:	1c62      	adds	r2, r4, #1
 8023756:	45a3      	cmp	fp, r4
 8023758:	4614      	mov	r4, r2
 802375a:	d8e8      	bhi.n	802372e <rcutils_repl_str+0xda>
 802375c:	f8dd 9000 	ldr.w	r9, [sp]
 8023760:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8023764:	2300      	movs	r3, #0
 8023766:	9a05      	ldr	r2, [sp, #20]
 8023768:	f80a 3002 	strb.w	r3, [sl, r2]
 802376c:	e00b      	b.n	8023786 <rcutils_repl_str+0x132>
 802376e:	4620      	mov	r0, r4
 8023770:	f8d9 3000 	ldr.w	r3, [r9]
 8023774:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8023778:	3001      	adds	r0, #1
 802377a:	4798      	blx	r3
 802377c:	4682      	mov	sl, r0
 802377e:	b110      	cbz	r0, 8023786 <rcutils_repl_str+0x132>
 8023780:	9900      	ldr	r1, [sp, #0]
 8023782:	f004 fe7c 	bl	802847e <strcpy>
 8023786:	4638      	mov	r0, r7
 8023788:	f8d9 3004 	ldr.w	r3, [r9, #4]
 802378c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8023790:	4798      	blx	r3
 8023792:	4650      	mov	r0, sl
 8023794:	b007      	add	sp, #28
 8023796:	ecbd 8b02 	vpop	{d8}
 802379a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802379e:	9b02      	ldr	r3, [sp, #8]
 80237a0:	4640      	mov	r0, r8
 80237a2:	f8dd 9000 	ldr.w	r9, [sp]
 80237a6:	1a9a      	subs	r2, r3, r2
 80237a8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 80237ac:	f004 fe6f 	bl	802848e <memcpy>
 80237b0:	e7d8      	b.n	8023764 <rcutils_repl_str+0x110>
 80237b2:	f04f 0a00 	mov.w	sl, #0
 80237b6:	e7e6      	b.n	8023786 <rcutils_repl_str+0x132>

080237b8 <rcutils_snprintf>:
 80237b8:	b40c      	push	{r2, r3}
 80237ba:	b530      	push	{r4, r5, lr}
 80237bc:	b083      	sub	sp, #12
 80237be:	ab06      	add	r3, sp, #24
 80237c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80237c4:	9301      	str	r3, [sp, #4]
 80237c6:	b1e2      	cbz	r2, 8023802 <rcutils_snprintf+0x4a>
 80237c8:	fab0 f480 	clz	r4, r0
 80237cc:	fab1 f581 	clz	r5, r1
 80237d0:	ea50 0c01 	orrs.w	ip, r0, r1
 80237d4:	ea4f 1454 	mov.w	r4, r4, lsr #5
 80237d8:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80237dc:	d008      	beq.n	80237f0 <rcutils_snprintf+0x38>
 80237de:	b984      	cbnz	r4, 8023802 <rcutils_snprintf+0x4a>
 80237e0:	b97d      	cbnz	r5, 8023802 <rcutils_snprintf+0x4a>
 80237e2:	f004 fc61 	bl	80280a8 <vsniprintf>
 80237e6:	b003      	add	sp, #12
 80237e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80237ec:	b002      	add	sp, #8
 80237ee:	4770      	bx	lr
 80237f0:	4661      	mov	r1, ip
 80237f2:	4660      	mov	r0, ip
 80237f4:	f004 fc58 	bl	80280a8 <vsniprintf>
 80237f8:	b003      	add	sp, #12
 80237fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80237fe:	b002      	add	sp, #8
 8023800:	4770      	bx	lr
 8023802:	4b03      	ldr	r3, [pc, #12]	@ (8023810 <rcutils_snprintf+0x58>)
 8023804:	2216      	movs	r2, #22
 8023806:	f04f 30ff 	mov.w	r0, #4294967295
 802380a:	601a      	str	r2, [r3, #0]
 802380c:	e7eb      	b.n	80237e6 <rcutils_snprintf+0x2e>
 802380e:	bf00      	nop
 8023810:	20015124 	.word	0x20015124

08023814 <rcutils_vsnprintf>:
 8023814:	b1f2      	cbz	r2, 8023854 <rcutils_vsnprintf+0x40>
 8023816:	ea50 0c01 	orrs.w	ip, r0, r1
 802381a:	b530      	push	{r4, r5, lr}
 802381c:	fab0 f480 	clz	r4, r0
 8023820:	fab1 f581 	clz	r5, r1
 8023824:	468e      	mov	lr, r1
 8023826:	ea4f 1454 	mov.w	r4, r4, lsr #5
 802382a:	ea4f 1555 	mov.w	r5, r5, lsr #5
 802382e:	d005      	beq.n	802383c <rcutils_vsnprintf+0x28>
 8023830:	b954      	cbnz	r4, 8023848 <rcutils_vsnprintf+0x34>
 8023832:	b94d      	cbnz	r5, 8023848 <rcutils_vsnprintf+0x34>
 8023834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023838:	f004 bc36 	b.w	80280a8 <vsniprintf>
 802383c:	4661      	mov	r1, ip
 802383e:	4660      	mov	r0, ip
 8023840:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023844:	f004 bc30 	b.w	80280a8 <vsniprintf>
 8023848:	4b05      	ldr	r3, [pc, #20]	@ (8023860 <rcutils_vsnprintf+0x4c>)
 802384a:	2216      	movs	r2, #22
 802384c:	f04f 30ff 	mov.w	r0, #4294967295
 8023850:	601a      	str	r2, [r3, #0]
 8023852:	bd30      	pop	{r4, r5, pc}
 8023854:	4b02      	ldr	r3, [pc, #8]	@ (8023860 <rcutils_vsnprintf+0x4c>)
 8023856:	2216      	movs	r2, #22
 8023858:	f04f 30ff 	mov.w	r0, #4294967295
 802385c:	601a      	str	r2, [r3, #0]
 802385e:	4770      	bx	lr
 8023860:	20015124 	.word	0x20015124

08023864 <rcutils_strdup>:
 8023864:	b084      	sub	sp, #16
 8023866:	b570      	push	{r4, r5, r6, lr}
 8023868:	b082      	sub	sp, #8
 802386a:	4605      	mov	r5, r0
 802386c:	ac07      	add	r4, sp, #28
 802386e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8023872:	b1b0      	cbz	r0, 80238a2 <rcutils_strdup+0x3e>
 8023874:	f7dc fcee 	bl	8000254 <strlen>
 8023878:	1c42      	adds	r2, r0, #1
 802387a:	9b07      	ldr	r3, [sp, #28]
 802387c:	4606      	mov	r6, r0
 802387e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8023880:	4610      	mov	r0, r2
 8023882:	9201      	str	r2, [sp, #4]
 8023884:	4798      	blx	r3
 8023886:	4604      	mov	r4, r0
 8023888:	b128      	cbz	r0, 8023896 <rcutils_strdup+0x32>
 802388a:	9a01      	ldr	r2, [sp, #4]
 802388c:	4629      	mov	r1, r5
 802388e:	f004 fdfe 	bl	802848e <memcpy>
 8023892:	2300      	movs	r3, #0
 8023894:	55a3      	strb	r3, [r4, r6]
 8023896:	4620      	mov	r0, r4
 8023898:	b002      	add	sp, #8
 802389a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802389e:	b004      	add	sp, #16
 80238a0:	4770      	bx	lr
 80238a2:	4604      	mov	r4, r0
 80238a4:	e7f7      	b.n	8023896 <rcutils_strdup+0x32>
 80238a6:	bf00      	nop

080238a8 <rcutils_strndup>:
 80238a8:	b082      	sub	sp, #8
 80238aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80238ac:	ac06      	add	r4, sp, #24
 80238ae:	4605      	mov	r5, r0
 80238b0:	e884 000c 	stmia.w	r4, {r2, r3}
 80238b4:	b188      	cbz	r0, 80238da <rcutils_strndup+0x32>
 80238b6:	1c4f      	adds	r7, r1, #1
 80238b8:	460e      	mov	r6, r1
 80238ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80238bc:	4638      	mov	r0, r7
 80238be:	4790      	blx	r2
 80238c0:	4604      	mov	r4, r0
 80238c2:	b128      	cbz	r0, 80238d0 <rcutils_strndup+0x28>
 80238c4:	463a      	mov	r2, r7
 80238c6:	4629      	mov	r1, r5
 80238c8:	f004 fde1 	bl	802848e <memcpy>
 80238cc:	2300      	movs	r3, #0
 80238ce:	55a3      	strb	r3, [r4, r6]
 80238d0:	4620      	mov	r0, r4
 80238d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80238d6:	b002      	add	sp, #8
 80238d8:	4770      	bx	lr
 80238da:	4604      	mov	r4, r0
 80238dc:	e7f8      	b.n	80238d0 <rcutils_strndup+0x28>
 80238de:	bf00      	nop

080238e0 <rcutils_get_zero_initialized_string_map>:
 80238e0:	2000      	movs	r0, #0
 80238e2:	4b01      	ldr	r3, [pc, #4]	@ (80238e8 <rcutils_get_zero_initialized_string_map+0x8>)
 80238e4:	6018      	str	r0, [r3, #0]
 80238e6:	4770      	bx	lr
 80238e8:	20014ee8 	.word	0x20014ee8

080238ec <rcutils_string_map_reserve>:
 80238ec:	2800      	cmp	r0, #0
 80238ee:	d05e      	beq.n	80239ae <rcutils_string_map_reserve+0xc2>
 80238f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80238f4:	460c      	mov	r4, r1
 80238f6:	6801      	ldr	r1, [r0, #0]
 80238f8:	b082      	sub	sp, #8
 80238fa:	4605      	mov	r5, r0
 80238fc:	b129      	cbz	r1, 802390a <rcutils_string_map_reserve+0x1e>
 80238fe:	68cb      	ldr	r3, [r1, #12]
 8023900:	42a3      	cmp	r3, r4
 8023902:	d906      	bls.n	8023912 <rcutils_string_map_reserve+0x26>
 8023904:	461c      	mov	r4, r3
 8023906:	2900      	cmp	r1, #0
 8023908:	d1f9      	bne.n	80238fe <rcutils_string_map_reserve+0x12>
 802390a:	201f      	movs	r0, #31
 802390c:	b002      	add	sp, #8
 802390e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023912:	688b      	ldr	r3, [r1, #8]
 8023914:	42a3      	cmp	r3, r4
 8023916:	d046      	beq.n	80239a6 <rcutils_string_map_reserve+0xba>
 8023918:	6a0e      	ldr	r6, [r1, #32]
 802391a:	2c00      	cmp	r4, #0
 802391c:	d033      	beq.n	8023986 <rcutils_string_map_reserve+0x9a>
 802391e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8023922:	d242      	bcs.n	80239aa <rcutils_string_map_reserve+0xbe>
 8023924:	00a7      	lsls	r7, r4, #2
 8023926:	f8d1 8018 	ldr.w	r8, [r1, #24]
 802392a:	6808      	ldr	r0, [r1, #0]
 802392c:	4632      	mov	r2, r6
 802392e:	4639      	mov	r1, r7
 8023930:	47c0      	blx	r8
 8023932:	2800      	cmp	r0, #0
 8023934:	d039      	beq.n	80239aa <rcutils_string_map_reserve+0xbe>
 8023936:	682b      	ldr	r3, [r5, #0]
 8023938:	4632      	mov	r2, r6
 802393a:	4639      	mov	r1, r7
 802393c:	6018      	str	r0, [r3, #0]
 802393e:	6858      	ldr	r0, [r3, #4]
 8023940:	47c0      	blx	r8
 8023942:	2800      	cmp	r0, #0
 8023944:	d031      	beq.n	80239aa <rcutils_string_map_reserve+0xbe>
 8023946:	682d      	ldr	r5, [r5, #0]
 8023948:	68ab      	ldr	r3, [r5, #8]
 802394a:	6068      	str	r0, [r5, #4]
 802394c:	42a3      	cmp	r3, r4
 802394e:	d225      	bcs.n	802399c <rcutils_string_map_reserve+0xb0>
 8023950:	682a      	ldr	r2, [r5, #0]
 8023952:	eb00 0c07 	add.w	ip, r0, r7
 8023956:	0099      	lsls	r1, r3, #2
 8023958:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 802395c:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8023960:	45e6      	cmp	lr, ip
 8023962:	d203      	bcs.n	802396c <rcutils_string_map_reserve+0x80>
 8023964:	eb02 0c07 	add.w	ip, r2, r7
 8023968:	4566      	cmp	r6, ip
 802396a:	d322      	bcc.n	80239b2 <rcutils_string_map_reserve+0xc6>
 802396c:	1ae3      	subs	r3, r4, r3
 802396e:	4670      	mov	r0, lr
 8023970:	2100      	movs	r1, #0
 8023972:	009a      	lsls	r2, r3, #2
 8023974:	9201      	str	r2, [sp, #4]
 8023976:	f004 fc63 	bl	8028240 <memset>
 802397a:	9a01      	ldr	r2, [sp, #4]
 802397c:	2100      	movs	r1, #0
 802397e:	4630      	mov	r0, r6
 8023980:	f004 fc5e 	bl	8028240 <memset>
 8023984:	e00a      	b.n	802399c <rcutils_string_map_reserve+0xb0>
 8023986:	694f      	ldr	r7, [r1, #20]
 8023988:	6808      	ldr	r0, [r1, #0]
 802398a:	4631      	mov	r1, r6
 802398c:	47b8      	blx	r7
 802398e:	682b      	ldr	r3, [r5, #0]
 8023990:	4631      	mov	r1, r6
 8023992:	6858      	ldr	r0, [r3, #4]
 8023994:	601c      	str	r4, [r3, #0]
 8023996:	47b8      	blx	r7
 8023998:	682d      	ldr	r5, [r5, #0]
 802399a:	606c      	str	r4, [r5, #4]
 802399c:	2000      	movs	r0, #0
 802399e:	60ac      	str	r4, [r5, #8]
 80239a0:	b002      	add	sp, #8
 80239a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80239a6:	2000      	movs	r0, #0
 80239a8:	e7b0      	b.n	802390c <rcutils_string_map_reserve+0x20>
 80239aa:	200a      	movs	r0, #10
 80239ac:	e7ae      	b.n	802390c <rcutils_string_map_reserve+0x20>
 80239ae:	200b      	movs	r0, #11
 80239b0:	4770      	bx	lr
 80239b2:	1f0b      	subs	r3, r1, #4
 80239b4:	4418      	add	r0, r3
 80239b6:	4413      	add	r3, r2
 80239b8:	3a04      	subs	r2, #4
 80239ba:	4417      	add	r7, r2
 80239bc:	2200      	movs	r2, #0
 80239be:	f843 2f04 	str.w	r2, [r3, #4]!
 80239c2:	42bb      	cmp	r3, r7
 80239c4:	f840 2f04 	str.w	r2, [r0, #4]!
 80239c8:	d1f9      	bne.n	80239be <rcutils_string_map_reserve+0xd2>
 80239ca:	e7e7      	b.n	802399c <rcutils_string_map_reserve+0xb0>

080239cc <rcutils_string_map_init>:
 80239cc:	b082      	sub	sp, #8
 80239ce:	b570      	push	{r4, r5, r6, lr}
 80239d0:	ac04      	add	r4, sp, #16
 80239d2:	e884 000c 	stmia.w	r4, {r2, r3}
 80239d6:	b380      	cbz	r0, 8023a3a <rcutils_string_map_init+0x6e>
 80239d8:	6806      	ldr	r6, [r0, #0]
 80239da:	4604      	mov	r4, r0
 80239dc:	b12e      	cbz	r6, 80239ea <rcutils_string_map_init+0x1e>
 80239de:	251e      	movs	r5, #30
 80239e0:	4628      	mov	r0, r5
 80239e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80239e6:	b002      	add	sp, #8
 80239e8:	4770      	bx	lr
 80239ea:	a804      	add	r0, sp, #16
 80239ec:	460d      	mov	r5, r1
 80239ee:	f7f8 f90d 	bl	801bc0c <rcutils_allocator_is_valid>
 80239f2:	b310      	cbz	r0, 8023a3a <rcutils_string_map_init+0x6e>
 80239f4:	9b04      	ldr	r3, [sp, #16]
 80239f6:	2024      	movs	r0, #36	@ 0x24
 80239f8:	9908      	ldr	r1, [sp, #32]
 80239fa:	4798      	blx	r3
 80239fc:	6020      	str	r0, [r4, #0]
 80239fe:	b310      	cbz	r0, 8023a46 <rcutils_string_map_init+0x7a>
 8023a00:	f10d 0e10 	add.w	lr, sp, #16
 8023a04:	f100 0c10 	add.w	ip, r0, #16
 8023a08:	e9c0 6600 	strd	r6, r6, [r0]
 8023a0c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8023a10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8023a14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8023a18:	f8de 3000 	ldr.w	r3, [lr]
 8023a1c:	4629      	mov	r1, r5
 8023a1e:	4620      	mov	r0, r4
 8023a20:	f8cc 3000 	str.w	r3, [ip]
 8023a24:	f7ff ff62 	bl	80238ec <rcutils_string_map_reserve>
 8023a28:	4605      	mov	r5, r0
 8023a2a:	2800      	cmp	r0, #0
 8023a2c:	d0d8      	beq.n	80239e0 <rcutils_string_map_init+0x14>
 8023a2e:	9b05      	ldr	r3, [sp, #20]
 8023a30:	9908      	ldr	r1, [sp, #32]
 8023a32:	6820      	ldr	r0, [r4, #0]
 8023a34:	4798      	blx	r3
 8023a36:	6026      	str	r6, [r4, #0]
 8023a38:	e7d2      	b.n	80239e0 <rcutils_string_map_init+0x14>
 8023a3a:	250b      	movs	r5, #11
 8023a3c:	4628      	mov	r0, r5
 8023a3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023a42:	b002      	add	sp, #8
 8023a44:	4770      	bx	lr
 8023a46:	250a      	movs	r5, #10
 8023a48:	e7ca      	b.n	80239e0 <rcutils_string_map_init+0x14>
 8023a4a:	bf00      	nop

08023a4c <rcutils_string_map_fini>:
 8023a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023a50:	b082      	sub	sp, #8
 8023a52:	2800      	cmp	r0, #0
 8023a54:	d03a      	beq.n	8023acc <rcutils_string_map_fini+0x80>
 8023a56:	6804      	ldr	r4, [r0, #0]
 8023a58:	4606      	mov	r6, r0
 8023a5a:	2c00      	cmp	r4, #0
 8023a5c:	d032      	beq.n	8023ac4 <rcutils_string_map_fini+0x78>
 8023a5e:	68a3      	ldr	r3, [r4, #8]
 8023a60:	b32b      	cbz	r3, 8023aae <rcutils_string_map_fini+0x62>
 8023a62:	2500      	movs	r5, #0
 8023a64:	6822      	ldr	r2, [r4, #0]
 8023a66:	462f      	mov	r7, r5
 8023a68:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8023a6c:	b1e0      	cbz	r0, 8023aa8 <rcutils_string_map_fini+0x5c>
 8023a6e:	6a21      	ldr	r1, [r4, #32]
 8023a70:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8023a74:	9101      	str	r1, [sp, #4]
 8023a76:	47c0      	blx	r8
 8023a78:	9901      	ldr	r1, [sp, #4]
 8023a7a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8023a7e:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 8023a82:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8023a86:	47c0      	blx	r8
 8023a88:	68e3      	ldr	r3, [r4, #12]
 8023a8a:	6862      	ldr	r2, [r4, #4]
 8023a8c:	3b01      	subs	r3, #1
 8023a8e:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8023a92:	3501      	adds	r5, #1
 8023a94:	60e3      	str	r3, [r4, #12]
 8023a96:	6834      	ldr	r4, [r6, #0]
 8023a98:	68a3      	ldr	r3, [r4, #8]
 8023a9a:	429d      	cmp	r5, r3
 8023a9c:	d207      	bcs.n	8023aae <rcutils_string_map_fini+0x62>
 8023a9e:	6822      	ldr	r2, [r4, #0]
 8023aa0:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8023aa4:	2800      	cmp	r0, #0
 8023aa6:	d1e2      	bne.n	8023a6e <rcutils_string_map_fini+0x22>
 8023aa8:	3501      	adds	r5, #1
 8023aaa:	429d      	cmp	r5, r3
 8023aac:	d3dc      	bcc.n	8023a68 <rcutils_string_map_fini+0x1c>
 8023aae:	2100      	movs	r1, #0
 8023ab0:	4630      	mov	r0, r6
 8023ab2:	f7ff ff1b 	bl	80238ec <rcutils_string_map_reserve>
 8023ab6:	4604      	mov	r4, r0
 8023ab8:	b920      	cbnz	r0, 8023ac4 <rcutils_string_map_fini+0x78>
 8023aba:	6830      	ldr	r0, [r6, #0]
 8023abc:	6943      	ldr	r3, [r0, #20]
 8023abe:	6a01      	ldr	r1, [r0, #32]
 8023ac0:	4798      	blx	r3
 8023ac2:	6034      	str	r4, [r6, #0]
 8023ac4:	4620      	mov	r0, r4
 8023ac6:	b002      	add	sp, #8
 8023ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023acc:	240b      	movs	r4, #11
 8023ace:	4620      	mov	r0, r4
 8023ad0:	b002      	add	sp, #8
 8023ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023ad6:	bf00      	nop

08023ad8 <rcutils_string_map_getn>:
 8023ad8:	b378      	cbz	r0, 8023b3a <rcutils_string_map_getn+0x62>
 8023ada:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ade:	f8d0 b000 	ldr.w	fp, [r0]
 8023ae2:	f1bb 0f00 	cmp.w	fp, #0
 8023ae6:	d01f      	beq.n	8023b28 <rcutils_string_map_getn+0x50>
 8023ae8:	fab1 f481 	clz	r4, r1
 8023aec:	4688      	mov	r8, r1
 8023aee:	0964      	lsrs	r4, r4, #5
 8023af0:	b1d1      	cbz	r1, 8023b28 <rcutils_string_map_getn+0x50>
 8023af2:	f8db 7008 	ldr.w	r7, [fp, #8]
 8023af6:	f8db 6000 	ldr.w	r6, [fp]
 8023afa:	b1af      	cbz	r7, 8023b28 <rcutils_string_map_getn+0x50>
 8023afc:	4691      	mov	r9, r2
 8023afe:	3e04      	subs	r6, #4
 8023b00:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8023b04:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8023b08:	3401      	adds	r4, #1
 8023b0a:	4628      	mov	r0, r5
 8023b0c:	b155      	cbz	r5, 8023b24 <rcutils_string_map_getn+0x4c>
 8023b0e:	f7dc fba1 	bl	8000254 <strlen>
 8023b12:	4602      	mov	r2, r0
 8023b14:	4629      	mov	r1, r5
 8023b16:	4640      	mov	r0, r8
 8023b18:	454a      	cmp	r2, r9
 8023b1a:	bf38      	it	cc
 8023b1c:	464a      	movcc	r2, r9
 8023b1e:	f004 fba4 	bl	802826a <strncmp>
 8023b22:	b120      	cbz	r0, 8023b2e <rcutils_string_map_getn+0x56>
 8023b24:	42a7      	cmp	r7, r4
 8023b26:	d1eb      	bne.n	8023b00 <rcutils_string_map_getn+0x28>
 8023b28:	2000      	movs	r0, #0
 8023b2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b2e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8023b32:	f853 000a 	ldr.w	r0, [r3, sl]
 8023b36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b3a:	4770      	bx	lr
 8023b3c:	0000      	movs	r0, r0
	...

08023b40 <rmw_get_zero_initialized_context>:
 8023b40:	b510      	push	{r4, lr}
 8023b42:	4604      	mov	r4, r0
 8023b44:	3010      	adds	r0, #16
 8023b46:	f000 f80f 	bl	8023b68 <rmw_get_zero_initialized_init_options>
 8023b4a:	2300      	movs	r3, #0
 8023b4c:	4620      	mov	r0, r4
 8023b4e:	60a3      	str	r3, [r4, #8]
 8023b50:	64a3      	str	r3, [r4, #72]	@ 0x48
 8023b52:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8023b54:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 8023b60 <rmw_get_zero_initialized_context+0x20>
 8023b58:	ed84 7b00 	vstr	d7, [r4]
 8023b5c:	bd10      	pop	{r4, pc}
 8023b5e:	bf00      	nop
	...

08023b68 <rmw_get_zero_initialized_init_options>:
 8023b68:	b510      	push	{r4, lr}
 8023b6a:	4604      	mov	r4, r0
 8023b6c:	2238      	movs	r2, #56	@ 0x38
 8023b6e:	2100      	movs	r1, #0
 8023b70:	f004 fb66 	bl	8028240 <memset>
 8023b74:	f104 0010 	add.w	r0, r4, #16
 8023b78:	f000 f806 	bl	8023b88 <rmw_get_default_security_options>
 8023b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8023b80:	4620      	mov	r0, r4
 8023b82:	60e3      	str	r3, [r4, #12]
 8023b84:	bd10      	pop	{r4, pc}
 8023b86:	bf00      	nop

08023b88 <rmw_get_default_security_options>:
 8023b88:	2200      	movs	r2, #0
 8023b8a:	7002      	strb	r2, [r0, #0]
 8023b8c:	6042      	str	r2, [r0, #4]
 8023b8e:	4770      	bx	lr

08023b90 <rmw_subscription_content_filter_options_fini>:
 8023b90:	b1b0      	cbz	r0, 8023bc0 <rmw_subscription_content_filter_options_fini+0x30>
 8023b92:	b538      	push	{r3, r4, r5, lr}
 8023b94:	4604      	mov	r4, r0
 8023b96:	4608      	mov	r0, r1
 8023b98:	460d      	mov	r5, r1
 8023b9a:	f7f8 f837 	bl	801bc0c <rcutils_allocator_is_valid>
 8023b9e:	b168      	cbz	r0, 8023bbc <rmw_subscription_content_filter_options_fini+0x2c>
 8023ba0:	6820      	ldr	r0, [r4, #0]
 8023ba2:	b120      	cbz	r0, 8023bae <rmw_subscription_content_filter_options_fini+0x1e>
 8023ba4:	686b      	ldr	r3, [r5, #4]
 8023ba6:	6929      	ldr	r1, [r5, #16]
 8023ba8:	4798      	blx	r3
 8023baa:	2300      	movs	r3, #0
 8023bac:	6023      	str	r3, [r4, #0]
 8023bae:	1d20      	adds	r0, r4, #4
 8023bb0:	f003 fc92 	bl	80274d8 <rcutils_string_array_fini>
 8023bb4:	3800      	subs	r0, #0
 8023bb6:	bf18      	it	ne
 8023bb8:	2001      	movne	r0, #1
 8023bba:	bd38      	pop	{r3, r4, r5, pc}
 8023bbc:	200b      	movs	r0, #11
 8023bbe:	bd38      	pop	{r3, r4, r5, pc}
 8023bc0:	200b      	movs	r0, #11
 8023bc2:	4770      	bx	lr

08023bc4 <rmw_get_default_subscription_options>:
 8023bc4:	2200      	movs	r2, #0
 8023bc6:	e9c0 2200 	strd	r2, r2, [r0]
 8023bca:	6082      	str	r2, [r0, #8]
 8023bcc:	4770      	bx	lr
 8023bce:	bf00      	nop

08023bd0 <rmw_time_equal>:
 8023bd0:	b4f0      	push	{r4, r5, r6, r7}
 8023bd2:	b084      	sub	sp, #16
 8023bd4:	ac04      	add	r4, sp, #16
 8023bd6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8023bda:	4603      	mov	r3, r0
 8023bdc:	4925      	ldr	r1, [pc, #148]	@ (8023c74 <rmw_time_equal+0xa4>)
 8023bde:	9d01      	ldr	r5, [sp, #4]
 8023be0:	4610      	mov	r0, r2
 8023be2:	4299      	cmp	r1, r3
 8023be4:	f04f 0202 	mov.w	r2, #2
 8023be8:	9e03      	ldr	r6, [sp, #12]
 8023bea:	41aa      	sbcs	r2, r5
 8023bec:	d330      	bcc.n	8023c50 <rmw_time_equal+0x80>
 8023bee:	4c22      	ldr	r4, [pc, #136]	@ (8023c78 <rmw_time_equal+0xa8>)
 8023bf0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8023bf4:	fba3 3204 	umull	r3, r2, r3, r4
 8023bf8:	fb04 2205 	mla	r2, r4, r5, r2
 8023bfc:	43dd      	mvns	r5, r3
 8023bfe:	1a8c      	subs	r4, r1, r2
 8023c00:	4285      	cmp	r5, r0
 8023c02:	41b4      	sbcs	r4, r6
 8023c04:	d332      	bcc.n	8023c6c <rmw_time_equal+0x9c>
 8023c06:	eb10 0c03 	adds.w	ip, r0, r3
 8023c0a:	eb42 0106 	adc.w	r1, r2, r6
 8023c0e:	4819      	ldr	r0, [pc, #100]	@ (8023c74 <rmw_time_equal+0xa4>)
 8023c10:	2202      	movs	r2, #2
 8023c12:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8023c14:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023c16:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8023c1a:	4298      	cmp	r0, r3
 8023c1c:	41b2      	sbcs	r2, r6
 8023c1e:	d31c      	bcc.n	8023c5a <rmw_time_equal+0x8a>
 8023c20:	4c15      	ldr	r4, [pc, #84]	@ (8023c78 <rmw_time_equal+0xa8>)
 8023c22:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8023c26:	fba3 3204 	umull	r3, r2, r3, r4
 8023c2a:	fb04 2206 	mla	r2, r4, r6, r2
 8023c2e:	43de      	mvns	r6, r3
 8023c30:	1a84      	subs	r4, r0, r2
 8023c32:	42ae      	cmp	r6, r5
 8023c34:	41bc      	sbcs	r4, r7
 8023c36:	d315      	bcc.n	8023c64 <rmw_time_equal+0x94>
 8023c38:	195b      	adds	r3, r3, r5
 8023c3a:	eb42 0207 	adc.w	r2, r2, r7
 8023c3e:	428a      	cmp	r2, r1
 8023c40:	bf08      	it	eq
 8023c42:	4563      	cmpeq	r3, ip
 8023c44:	bf0c      	ite	eq
 8023c46:	2001      	moveq	r0, #1
 8023c48:	2000      	movne	r0, #0
 8023c4a:	b004      	add	sp, #16
 8023c4c:	bcf0      	pop	{r4, r5, r6, r7}
 8023c4e:	4770      	bx	lr
 8023c50:	f04f 3cff 	mov.w	ip, #4294967295
 8023c54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8023c58:	e7d9      	b.n	8023c0e <rmw_time_equal+0x3e>
 8023c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8023c5e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8023c62:	e7ec      	b.n	8023c3e <rmw_time_equal+0x6e>
 8023c64:	f04f 33ff 	mov.w	r3, #4294967295
 8023c68:	4602      	mov	r2, r0
 8023c6a:	e7e8      	b.n	8023c3e <rmw_time_equal+0x6e>
 8023c6c:	f04f 3cff 	mov.w	ip, #4294967295
 8023c70:	e7cd      	b.n	8023c0e <rmw_time_equal+0x3e>
 8023c72:	bf00      	nop
 8023c74:	25c17d04 	.word	0x25c17d04
 8023c78:	3b9aca00 	.word	0x3b9aca00

08023c7c <rmw_time_total_nsec>:
 8023c7c:	b470      	push	{r4, r5, r6}
 8023c7e:	b085      	sub	sp, #20
 8023c80:	ac04      	add	r4, sp, #16
 8023c82:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8023c86:	4603      	mov	r3, r0
 8023c88:	4913      	ldr	r1, [pc, #76]	@ (8023cd8 <rmw_time_total_nsec+0x5c>)
 8023c8a:	9d01      	ldr	r5, [sp, #4]
 8023c8c:	4610      	mov	r0, r2
 8023c8e:	4299      	cmp	r1, r3
 8023c90:	f04f 0202 	mov.w	r2, #2
 8023c94:	9e03      	ldr	r6, [sp, #12]
 8023c96:	41aa      	sbcs	r2, r5
 8023c98:	d311      	bcc.n	8023cbe <rmw_time_total_nsec+0x42>
 8023c9a:	4c10      	ldr	r4, [pc, #64]	@ (8023cdc <rmw_time_total_nsec+0x60>)
 8023c9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8023ca0:	fba3 3204 	umull	r3, r2, r3, r4
 8023ca4:	fb04 2205 	mla	r2, r4, r5, r2
 8023ca8:	43dd      	mvns	r5, r3
 8023caa:	1a8c      	subs	r4, r1, r2
 8023cac:	4285      	cmp	r5, r0
 8023cae:	41b4      	sbcs	r4, r6
 8023cb0:	d30c      	bcc.n	8023ccc <rmw_time_total_nsec+0x50>
 8023cb2:	1818      	adds	r0, r3, r0
 8023cb4:	eb42 0106 	adc.w	r1, r2, r6
 8023cb8:	b005      	add	sp, #20
 8023cba:	bc70      	pop	{r4, r5, r6}
 8023cbc:	4770      	bx	lr
 8023cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8023cc2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8023cc6:	b005      	add	sp, #20
 8023cc8:	bc70      	pop	{r4, r5, r6}
 8023cca:	4770      	bx	lr
 8023ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8023cd0:	b005      	add	sp, #20
 8023cd2:	bc70      	pop	{r4, r5, r6}
 8023cd4:	4770      	bx	lr
 8023cd6:	bf00      	nop
 8023cd8:	25c17d04 	.word	0x25c17d04
 8023cdc:	3b9aca00 	.word	0x3b9aca00

08023ce0 <rmw_get_zero_initialized_message_info>:
 8023ce0:	b510      	push	{r4, lr}
 8023ce2:	4604      	mov	r4, r0
 8023ce4:	2240      	movs	r2, #64	@ 0x40
 8023ce6:	2100      	movs	r1, #0
 8023ce8:	f004 faaa 	bl	8028240 <memset>
 8023cec:	4620      	mov	r0, r4
 8023cee:	bd10      	pop	{r4, pc}

08023cf0 <rmw_validate_full_topic_name>:
 8023cf0:	2800      	cmp	r0, #0
 8023cf2:	d05d      	beq.n	8023db0 <rmw_validate_full_topic_name+0xc0>
 8023cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023cf8:	460d      	mov	r5, r1
 8023cfa:	2900      	cmp	r1, #0
 8023cfc:	d05a      	beq.n	8023db4 <rmw_validate_full_topic_name+0xc4>
 8023cfe:	4604      	mov	r4, r0
 8023d00:	4616      	mov	r6, r2
 8023d02:	f7dc faa7 	bl	8000254 <strlen>
 8023d06:	b150      	cbz	r0, 8023d1e <rmw_validate_full_topic_name+0x2e>
 8023d08:	7823      	ldrb	r3, [r4, #0]
 8023d0a:	2b2f      	cmp	r3, #47	@ 0x2f
 8023d0c:	d00e      	beq.n	8023d2c <rmw_validate_full_topic_name+0x3c>
 8023d0e:	2302      	movs	r3, #2
 8023d10:	602b      	str	r3, [r5, #0]
 8023d12:	b146      	cbz	r6, 8023d26 <rmw_validate_full_topic_name+0x36>
 8023d14:	2300      	movs	r3, #0
 8023d16:	4618      	mov	r0, r3
 8023d18:	6033      	str	r3, [r6, #0]
 8023d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023d1e:	2301      	movs	r3, #1
 8023d20:	602b      	str	r3, [r5, #0]
 8023d22:	2e00      	cmp	r6, #0
 8023d24:	d1f6      	bne.n	8023d14 <rmw_validate_full_topic_name+0x24>
 8023d26:	2000      	movs	r0, #0
 8023d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023d2c:	1e43      	subs	r3, r0, #1
 8023d2e:	5ce2      	ldrb	r2, [r4, r3]
 8023d30:	2a2f      	cmp	r2, #47	@ 0x2f
 8023d32:	d041      	beq.n	8023db8 <rmw_validate_full_topic_name+0xc8>
 8023d34:	1e62      	subs	r2, r4, #1
 8023d36:	f1c4 0e01 	rsb	lr, r4, #1
 8023d3a:	eb02 0800 	add.w	r8, r2, r0
 8023d3e:	eb0e 0702 	add.w	r7, lr, r2
 8023d42:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8023d46:	f023 0120 	bic.w	r1, r3, #32
 8023d4a:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 8023d4e:	3941      	subs	r1, #65	@ 0x41
 8023d50:	2919      	cmp	r1, #25
 8023d52:	d90f      	bls.n	8023d74 <rmw_validate_full_topic_name+0x84>
 8023d54:	f1bc 0f0a 	cmp.w	ip, #10
 8023d58:	d90c      	bls.n	8023d74 <rmw_validate_full_topic_name+0x84>
 8023d5a:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 8023d5e:	fab3 f383 	clz	r3, r3
 8023d62:	095b      	lsrs	r3, r3, #5
 8023d64:	b933      	cbnz	r3, 8023d74 <rmw_validate_full_topic_name+0x84>
 8023d66:	2204      	movs	r2, #4
 8023d68:	602a      	str	r2, [r5, #0]
 8023d6a:	2e00      	cmp	r6, #0
 8023d6c:	d0db      	beq.n	8023d26 <rmw_validate_full_topic_name+0x36>
 8023d6e:	4618      	mov	r0, r3
 8023d70:	6037      	str	r7, [r6, #0]
 8023d72:	e7d2      	b.n	8023d1a <rmw_validate_full_topic_name+0x2a>
 8023d74:	4542      	cmp	r2, r8
 8023d76:	d1e2      	bne.n	8023d3e <rmw_validate_full_topic_name+0x4e>
 8023d78:	2301      	movs	r3, #1
 8023d7a:	4f1a      	ldr	r7, [pc, #104]	@ (8023de4 <rmw_validate_full_topic_name+0xf4>)
 8023d7c:	e004      	b.n	8023d88 <rmw_validate_full_topic_name+0x98>
 8023d7e:	4298      	cmp	r0, r3
 8023d80:	f104 0401 	add.w	r4, r4, #1
 8023d84:	4613      	mov	r3, r2
 8023d86:	d91c      	bls.n	8023dc2 <rmw_validate_full_topic_name+0xd2>
 8023d88:	4298      	cmp	r0, r3
 8023d8a:	f103 0201 	add.w	r2, r3, #1
 8023d8e:	d0f6      	beq.n	8023d7e <rmw_validate_full_topic_name+0x8e>
 8023d90:	7821      	ldrb	r1, [r4, #0]
 8023d92:	292f      	cmp	r1, #47	@ 0x2f
 8023d94:	d1f3      	bne.n	8023d7e <rmw_validate_full_topic_name+0x8e>
 8023d96:	7861      	ldrb	r1, [r4, #1]
 8023d98:	292f      	cmp	r1, #47	@ 0x2f
 8023d9a:	d01e      	beq.n	8023dda <rmw_validate_full_topic_name+0xea>
 8023d9c:	5dc9      	ldrb	r1, [r1, r7]
 8023d9e:	0749      	lsls	r1, r1, #29
 8023da0:	d5ed      	bpl.n	8023d7e <rmw_validate_full_topic_name+0x8e>
 8023da2:	2206      	movs	r2, #6
 8023da4:	602a      	str	r2, [r5, #0]
 8023da6:	2e00      	cmp	r6, #0
 8023da8:	d0bd      	beq.n	8023d26 <rmw_validate_full_topic_name+0x36>
 8023daa:	2000      	movs	r0, #0
 8023dac:	6033      	str	r3, [r6, #0]
 8023dae:	e7b4      	b.n	8023d1a <rmw_validate_full_topic_name+0x2a>
 8023db0:	200b      	movs	r0, #11
 8023db2:	4770      	bx	lr
 8023db4:	200b      	movs	r0, #11
 8023db6:	e7b0      	b.n	8023d1a <rmw_validate_full_topic_name+0x2a>
 8023db8:	2203      	movs	r2, #3
 8023dba:	602a      	str	r2, [r5, #0]
 8023dbc:	2e00      	cmp	r6, #0
 8023dbe:	d1f4      	bne.n	8023daa <rmw_validate_full_topic_name+0xba>
 8023dc0:	e7b1      	b.n	8023d26 <rmw_validate_full_topic_name+0x36>
 8023dc2:	28f7      	cmp	r0, #247	@ 0xf7
 8023dc4:	d803      	bhi.n	8023dce <rmw_validate_full_topic_name+0xde>
 8023dc6:	2300      	movs	r3, #0
 8023dc8:	4618      	mov	r0, r3
 8023dca:	602b      	str	r3, [r5, #0]
 8023dcc:	e7a5      	b.n	8023d1a <rmw_validate_full_topic_name+0x2a>
 8023dce:	2307      	movs	r3, #7
 8023dd0:	602b      	str	r3, [r5, #0]
 8023dd2:	2e00      	cmp	r6, #0
 8023dd4:	d0a7      	beq.n	8023d26 <rmw_validate_full_topic_name+0x36>
 8023dd6:	23f6      	movs	r3, #246	@ 0xf6
 8023dd8:	e7e7      	b.n	8023daa <rmw_validate_full_topic_name+0xba>
 8023dda:	2205      	movs	r2, #5
 8023ddc:	602a      	str	r2, [r5, #0]
 8023dde:	2e00      	cmp	r6, #0
 8023de0:	d1e3      	bne.n	8023daa <rmw_validate_full_topic_name+0xba>
 8023de2:	e7a0      	b.n	8023d26 <rmw_validate_full_topic_name+0x36>
 8023de4:	0802def3 	.word	0x0802def3

08023de8 <rmw_validate_namespace_with_size>:
 8023de8:	2800      	cmp	r0, #0
 8023dea:	d043      	beq.n	8023e74 <rmw_validate_namespace_with_size+0x8c>
 8023dec:	b570      	push	{r4, r5, r6, lr}
 8023dee:	4614      	mov	r4, r2
 8023df0:	b0c2      	sub	sp, #264	@ 0x108
 8023df2:	b32a      	cbz	r2, 8023e40 <rmw_validate_namespace_with_size+0x58>
 8023df4:	2901      	cmp	r1, #1
 8023df6:	460d      	mov	r5, r1
 8023df8:	461e      	mov	r6, r3
 8023dfa:	d102      	bne.n	8023e02 <rmw_validate_namespace_with_size+0x1a>
 8023dfc:	7803      	ldrb	r3, [r0, #0]
 8023dfe:	2b2f      	cmp	r3, #47	@ 0x2f
 8023e00:	d012      	beq.n	8023e28 <rmw_validate_namespace_with_size+0x40>
 8023e02:	aa01      	add	r2, sp, #4
 8023e04:	4669      	mov	r1, sp
 8023e06:	f7ff ff73 	bl	8023cf0 <rmw_validate_full_topic_name>
 8023e0a:	b980      	cbnz	r0, 8023e2e <rmw_validate_namespace_with_size+0x46>
 8023e0c:	9a00      	ldr	r2, [sp, #0]
 8023e0e:	b14a      	cbz	r2, 8023e24 <rmw_validate_namespace_with_size+0x3c>
 8023e10:	2a07      	cmp	r2, #7
 8023e12:	d007      	beq.n	8023e24 <rmw_validate_namespace_with_size+0x3c>
 8023e14:	1e53      	subs	r3, r2, #1
 8023e16:	2b05      	cmp	r3, #5
 8023e18:	d82e      	bhi.n	8023e78 <rmw_validate_namespace_with_size+0x90>
 8023e1a:	e8df f003 	tbb	[pc, r3]
 8023e1e:	1f1c      	.short	0x1f1c
 8023e20:	14282522 	.word	0x14282522
 8023e24:	2df5      	cmp	r5, #245	@ 0xf5
 8023e26:	d804      	bhi.n	8023e32 <rmw_validate_namespace_with_size+0x4a>
 8023e28:	2300      	movs	r3, #0
 8023e2a:	4618      	mov	r0, r3
 8023e2c:	6023      	str	r3, [r4, #0]
 8023e2e:	b042      	add	sp, #264	@ 0x108
 8023e30:	bd70      	pop	{r4, r5, r6, pc}
 8023e32:	2307      	movs	r3, #7
 8023e34:	6023      	str	r3, [r4, #0]
 8023e36:	2e00      	cmp	r6, #0
 8023e38:	d0f9      	beq.n	8023e2e <rmw_validate_namespace_with_size+0x46>
 8023e3a:	23f4      	movs	r3, #244	@ 0xf4
 8023e3c:	6033      	str	r3, [r6, #0]
 8023e3e:	e7f6      	b.n	8023e2e <rmw_validate_namespace_with_size+0x46>
 8023e40:	200b      	movs	r0, #11
 8023e42:	b042      	add	sp, #264	@ 0x108
 8023e44:	bd70      	pop	{r4, r5, r6, pc}
 8023e46:	2306      	movs	r3, #6
 8023e48:	6023      	str	r3, [r4, #0]
 8023e4a:	2e00      	cmp	r6, #0
 8023e4c:	d0ef      	beq.n	8023e2e <rmw_validate_namespace_with_size+0x46>
 8023e4e:	9b01      	ldr	r3, [sp, #4]
 8023e50:	6033      	str	r3, [r6, #0]
 8023e52:	b042      	add	sp, #264	@ 0x108
 8023e54:	bd70      	pop	{r4, r5, r6, pc}
 8023e56:	2301      	movs	r3, #1
 8023e58:	6023      	str	r3, [r4, #0]
 8023e5a:	e7f6      	b.n	8023e4a <rmw_validate_namespace_with_size+0x62>
 8023e5c:	2302      	movs	r3, #2
 8023e5e:	6023      	str	r3, [r4, #0]
 8023e60:	e7f3      	b.n	8023e4a <rmw_validate_namespace_with_size+0x62>
 8023e62:	2303      	movs	r3, #3
 8023e64:	6023      	str	r3, [r4, #0]
 8023e66:	e7f0      	b.n	8023e4a <rmw_validate_namespace_with_size+0x62>
 8023e68:	2304      	movs	r3, #4
 8023e6a:	6023      	str	r3, [r4, #0]
 8023e6c:	e7ed      	b.n	8023e4a <rmw_validate_namespace_with_size+0x62>
 8023e6e:	2305      	movs	r3, #5
 8023e70:	6023      	str	r3, [r4, #0]
 8023e72:	e7ea      	b.n	8023e4a <rmw_validate_namespace_with_size+0x62>
 8023e74:	200b      	movs	r0, #11
 8023e76:	4770      	bx	lr
 8023e78:	4613      	mov	r3, r2
 8023e7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8023e7e:	4a03      	ldr	r2, [pc, #12]	@ (8023e8c <rmw_validate_namespace_with_size+0xa4>)
 8023e80:	a802      	add	r0, sp, #8
 8023e82:	f7ff fc99 	bl	80237b8 <rcutils_snprintf>
 8023e86:	2001      	movs	r0, #1
 8023e88:	e7d1      	b.n	8023e2e <rmw_validate_namespace_with_size+0x46>
 8023e8a:	bf00      	nop
 8023e8c:	0802d4ac 	.word	0x0802d4ac

08023e90 <rmw_validate_namespace>:
 8023e90:	b168      	cbz	r0, 8023eae <rmw_validate_namespace+0x1e>
 8023e92:	b570      	push	{r4, r5, r6, lr}
 8023e94:	460d      	mov	r5, r1
 8023e96:	4616      	mov	r6, r2
 8023e98:	4604      	mov	r4, r0
 8023e9a:	f7dc f9db 	bl	8000254 <strlen>
 8023e9e:	4633      	mov	r3, r6
 8023ea0:	4601      	mov	r1, r0
 8023ea2:	462a      	mov	r2, r5
 8023ea4:	4620      	mov	r0, r4
 8023ea6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023eaa:	f7ff bf9d 	b.w	8023de8 <rmw_validate_namespace_with_size>
 8023eae:	200b      	movs	r0, #11
 8023eb0:	4770      	bx	lr
 8023eb2:	bf00      	nop

08023eb4 <rmw_namespace_validation_result_string>:
 8023eb4:	2807      	cmp	r0, #7
 8023eb6:	d803      	bhi.n	8023ec0 <rmw_namespace_validation_result_string+0xc>
 8023eb8:	4b02      	ldr	r3, [pc, #8]	@ (8023ec4 <rmw_namespace_validation_result_string+0x10>)
 8023eba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8023ebe:	4770      	bx	lr
 8023ec0:	4801      	ldr	r0, [pc, #4]	@ (8023ec8 <rmw_namespace_validation_result_string+0x14>)
 8023ec2:	4770      	bx	lr
 8023ec4:	0802dbd4 	.word	0x0802dbd4
 8023ec8:	0802d4fc 	.word	0x0802d4fc

08023ecc <rmw_validate_node_name>:
 8023ecc:	2800      	cmp	r0, #0
 8023ece:	d042      	beq.n	8023f56 <rmw_validate_node_name+0x8a>
 8023ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023ed4:	460d      	mov	r5, r1
 8023ed6:	2900      	cmp	r1, #0
 8023ed8:	d03f      	beq.n	8023f5a <rmw_validate_node_name+0x8e>
 8023eda:	4604      	mov	r4, r0
 8023edc:	4616      	mov	r6, r2
 8023ede:	f7dc f9b9 	bl	8000254 <strlen>
 8023ee2:	b310      	cbz	r0, 8023f2a <rmw_validate_node_name+0x5e>
 8023ee4:	1e63      	subs	r3, r4, #1
 8023ee6:	f1c4 0101 	rsb	r1, r4, #1
 8023eea:	eb03 0800 	add.w	r8, r3, r0
 8023eee:	18cf      	adds	r7, r1, r3
 8023ef0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8023ef4:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8023ef8:	f02e 0c20 	bic.w	ip, lr, #32
 8023efc:	2a09      	cmp	r2, #9
 8023efe:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8023f02:	d905      	bls.n	8023f10 <rmw_validate_node_name+0x44>
 8023f04:	f1bc 0f19 	cmp.w	ip, #25
 8023f08:	d902      	bls.n	8023f10 <rmw_validate_node_name+0x44>
 8023f0a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8023f0e:	d114      	bne.n	8023f3a <rmw_validate_node_name+0x6e>
 8023f10:	4598      	cmp	r8, r3
 8023f12:	d1ec      	bne.n	8023eee <rmw_validate_node_name+0x22>
 8023f14:	7822      	ldrb	r2, [r4, #0]
 8023f16:	4b16      	ldr	r3, [pc, #88]	@ (8023f70 <rmw_validate_node_name+0xa4>)
 8023f18:	5cd3      	ldrb	r3, [r2, r3]
 8023f1a:	f013 0304 	ands.w	r3, r3, #4
 8023f1e:	d113      	bne.n	8023f48 <rmw_validate_node_name+0x7c>
 8023f20:	28ff      	cmp	r0, #255	@ 0xff
 8023f22:	d81c      	bhi.n	8023f5e <rmw_validate_node_name+0x92>
 8023f24:	4618      	mov	r0, r3
 8023f26:	602b      	str	r3, [r5, #0]
 8023f28:	e00c      	b.n	8023f44 <rmw_validate_node_name+0x78>
 8023f2a:	2301      	movs	r3, #1
 8023f2c:	602b      	str	r3, [r5, #0]
 8023f2e:	b17e      	cbz	r6, 8023f50 <rmw_validate_node_name+0x84>
 8023f30:	2300      	movs	r3, #0
 8023f32:	4618      	mov	r0, r3
 8023f34:	6033      	str	r3, [r6, #0]
 8023f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023f3a:	2302      	movs	r3, #2
 8023f3c:	602b      	str	r3, [r5, #0]
 8023f3e:	b13e      	cbz	r6, 8023f50 <rmw_validate_node_name+0x84>
 8023f40:	2000      	movs	r0, #0
 8023f42:	6037      	str	r7, [r6, #0]
 8023f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023f48:	2303      	movs	r3, #3
 8023f4a:	602b      	str	r3, [r5, #0]
 8023f4c:	2e00      	cmp	r6, #0
 8023f4e:	d1ef      	bne.n	8023f30 <rmw_validate_node_name+0x64>
 8023f50:	2000      	movs	r0, #0
 8023f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023f56:	200b      	movs	r0, #11
 8023f58:	4770      	bx	lr
 8023f5a:	200b      	movs	r0, #11
 8023f5c:	e7f2      	b.n	8023f44 <rmw_validate_node_name+0x78>
 8023f5e:	2204      	movs	r2, #4
 8023f60:	602a      	str	r2, [r5, #0]
 8023f62:	2e00      	cmp	r6, #0
 8023f64:	d0f4      	beq.n	8023f50 <rmw_validate_node_name+0x84>
 8023f66:	22fe      	movs	r2, #254	@ 0xfe
 8023f68:	4618      	mov	r0, r3
 8023f6a:	6032      	str	r2, [r6, #0]
 8023f6c:	e7ea      	b.n	8023f44 <rmw_validate_node_name+0x78>
 8023f6e:	bf00      	nop
 8023f70:	0802def3 	.word	0x0802def3

08023f74 <rmw_node_name_validation_result_string>:
 8023f74:	2804      	cmp	r0, #4
 8023f76:	d803      	bhi.n	8023f80 <rmw_node_name_validation_result_string+0xc>
 8023f78:	4b02      	ldr	r3, [pc, #8]	@ (8023f84 <rmw_node_name_validation_result_string+0x10>)
 8023f7a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8023f7e:	4770      	bx	lr
 8023f80:	4801      	ldr	r0, [pc, #4]	@ (8023f88 <rmw_node_name_validation_result_string+0x14>)
 8023f82:	4770      	bx	lr
 8023f84:	0802dbf4 	.word	0x0802dbf4
 8023f88:	0802d6a4 	.word	0x0802d6a4

08023f8c <get_memory>:
 8023f8c:	4603      	mov	r3, r0
 8023f8e:	6840      	ldr	r0, [r0, #4]
 8023f90:	b158      	cbz	r0, 8023faa <get_memory+0x1e>
 8023f92:	6842      	ldr	r2, [r0, #4]
 8023f94:	605a      	str	r2, [r3, #4]
 8023f96:	b10a      	cbz	r2, 8023f9c <get_memory+0x10>
 8023f98:	2100      	movs	r1, #0
 8023f9a:	6011      	str	r1, [r2, #0]
 8023f9c:	681a      	ldr	r2, [r3, #0]
 8023f9e:	6042      	str	r2, [r0, #4]
 8023fa0:	b102      	cbz	r2, 8023fa4 <get_memory+0x18>
 8023fa2:	6010      	str	r0, [r2, #0]
 8023fa4:	2200      	movs	r2, #0
 8023fa6:	6002      	str	r2, [r0, #0]
 8023fa8:	6018      	str	r0, [r3, #0]
 8023faa:	4770      	bx	lr

08023fac <put_memory>:
 8023fac:	680b      	ldr	r3, [r1, #0]
 8023fae:	b10b      	cbz	r3, 8023fb4 <put_memory+0x8>
 8023fb0:	684a      	ldr	r2, [r1, #4]
 8023fb2:	605a      	str	r2, [r3, #4]
 8023fb4:	684a      	ldr	r2, [r1, #4]
 8023fb6:	b102      	cbz	r2, 8023fba <put_memory+0xe>
 8023fb8:	6013      	str	r3, [r2, #0]
 8023fba:	6803      	ldr	r3, [r0, #0]
 8023fbc:	428b      	cmp	r3, r1
 8023fbe:	6843      	ldr	r3, [r0, #4]
 8023fc0:	bf08      	it	eq
 8023fc2:	6002      	streq	r2, [r0, #0]
 8023fc4:	604b      	str	r3, [r1, #4]
 8023fc6:	b103      	cbz	r3, 8023fca <put_memory+0x1e>
 8023fc8:	6019      	str	r1, [r3, #0]
 8023fca:	2300      	movs	r3, #0
 8023fcc:	600b      	str	r3, [r1, #0]
 8023fce:	6041      	str	r1, [r0, #4]
 8023fd0:	4770      	bx	lr
 8023fd2:	bf00      	nop

08023fd4 <rmw_destroy_client>:
 8023fd4:	b570      	push	{r4, r5, r6, lr}
 8023fd6:	b128      	cbz	r0, 8023fe4 <rmw_destroy_client+0x10>
 8023fd8:	4604      	mov	r4, r0
 8023fda:	6800      	ldr	r0, [r0, #0]
 8023fdc:	460d      	mov	r5, r1
 8023fde:	f7f8 fbcb 	bl	801c778 <is_uxrce_rmw_identifier_valid>
 8023fe2:	b910      	cbnz	r0, 8023fea <rmw_destroy_client+0x16>
 8023fe4:	2401      	movs	r4, #1
 8023fe6:	4620      	mov	r0, r4
 8023fe8:	bd70      	pop	{r4, r5, r6, pc}
 8023fea:	6863      	ldr	r3, [r4, #4]
 8023fec:	2b00      	cmp	r3, #0
 8023fee:	d0f9      	beq.n	8023fe4 <rmw_destroy_client+0x10>
 8023ff0:	2d00      	cmp	r5, #0
 8023ff2:	d0f7      	beq.n	8023fe4 <rmw_destroy_client+0x10>
 8023ff4:	6828      	ldr	r0, [r5, #0]
 8023ff6:	f7f8 fbbf 	bl	801c778 <is_uxrce_rmw_identifier_valid>
 8023ffa:	2800      	cmp	r0, #0
 8023ffc:	d0f2      	beq.n	8023fe4 <rmw_destroy_client+0x10>
 8023ffe:	686e      	ldr	r6, [r5, #4]
 8024000:	2e00      	cmp	r6, #0
 8024002:	d0ef      	beq.n	8023fe4 <rmw_destroy_client+0x10>
 8024004:	6864      	ldr	r4, [r4, #4]
 8024006:	6932      	ldr	r2, [r6, #16]
 8024008:	6920      	ldr	r0, [r4, #16]
 802400a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 802400e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8024012:	6819      	ldr	r1, [r3, #0]
 8024014:	f002 f9c2 	bl	802639c <uxr_buffer_cancel_data>
 8024018:	4602      	mov	r2, r0
 802401a:	6920      	ldr	r0, [r4, #16]
 802401c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8024020:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8024024:	f7f8 fb2e 	bl	801c684 <run_xrce_session>
 8024028:	6920      	ldr	r0, [r4, #16]
 802402a:	6932      	ldr	r2, [r6, #16]
 802402c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8024030:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8024034:	6819      	ldr	r1, [r3, #0]
 8024036:	f7f9 ff15 	bl	801de64 <uxr_buffer_delete_entity>
 802403a:	4602      	mov	r2, r0
 802403c:	6920      	ldr	r0, [r4, #16]
 802403e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8024042:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8024046:	f7f8 fb1d 	bl	801c684 <run_xrce_session>
 802404a:	4603      	mov	r3, r0
 802404c:	4628      	mov	r0, r5
 802404e:	2b00      	cmp	r3, #0
 8024050:	bf14      	ite	ne
 8024052:	2400      	movne	r4, #0
 8024054:	2402      	moveq	r4, #2
 8024056:	f7f8 f9f1 	bl	801c43c <rmw_uxrce_fini_client_memory>
 802405a:	e7c4      	b.n	8023fe6 <rmw_destroy_client+0x12>

0802405c <rmw_get_implementation_identifier>:
 802405c:	4b01      	ldr	r3, [pc, #4]	@ (8024064 <rmw_get_implementation_identifier+0x8>)
 802405e:	6818      	ldr	r0, [r3, #0]
 8024060:	4770      	bx	lr
 8024062:	bf00      	nop
 8024064:	0802dc08 	.word	0x0802dc08

08024068 <rmw_init_options_init>:
 8024068:	b084      	sub	sp, #16
 802406a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802406c:	b083      	sub	sp, #12
 802406e:	ad09      	add	r5, sp, #36	@ 0x24
 8024070:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8024074:	b130      	cbz	r0, 8024084 <rmw_init_options_init+0x1c>
 8024076:	4604      	mov	r4, r0
 8024078:	4628      	mov	r0, r5
 802407a:	f7f7 fdc7 	bl	801bc0c <rcutils_allocator_is_valid>
 802407e:	b108      	cbz	r0, 8024084 <rmw_init_options_init+0x1c>
 8024080:	68a6      	ldr	r6, [r4, #8]
 8024082:	b12e      	cbz	r6, 8024090 <rmw_init_options_init+0x28>
 8024084:	200b      	movs	r0, #11
 8024086:	b003      	add	sp, #12
 8024088:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802408c:	b004      	add	sp, #16
 802408e:	4770      	bx	lr
 8024090:	2200      	movs	r2, #0
 8024092:	2300      	movs	r3, #0
 8024094:	f104 0c20 	add.w	ip, r4, #32
 8024098:	466f      	mov	r7, sp
 802409a:	e9c4 2300 	strd	r2, r3, [r4]
 802409e:	4b1f      	ldr	r3, [pc, #124]	@ (802411c <rmw_init_options_init+0xb4>)
 80240a0:	681b      	ldr	r3, [r3, #0]
 80240a2:	60a3      	str	r3, [r4, #8]
 80240a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80240a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80240aa:	682b      	ldr	r3, [r5, #0]
 80240ac:	4638      	mov	r0, r7
 80240ae:	f8cc 3000 	str.w	r3, [ip]
 80240b2:	61e6      	str	r6, [r4, #28]
 80240b4:	60e6      	str	r6, [r4, #12]
 80240b6:	f7ff fd67 	bl	8023b88 <rmw_get_default_security_options>
 80240ba:	f104 0310 	add.w	r3, r4, #16
 80240be:	2203      	movs	r2, #3
 80240c0:	e897 0003 	ldmia.w	r7, {r0, r1}
 80240c4:	e883 0003 	stmia.w	r3, {r0, r1}
 80240c8:	4815      	ldr	r0, [pc, #84]	@ (8024120 <rmw_init_options_init+0xb8>)
 80240ca:	4916      	ldr	r1, [pc, #88]	@ (8024124 <rmw_init_options_init+0xbc>)
 80240cc:	7626      	strb	r6, [r4, #24]
 80240ce:	f7f8 f8f5 	bl	801c2bc <rmw_uxrce_init_init_options_impl_memory>
 80240d2:	4813      	ldr	r0, [pc, #76]	@ (8024120 <rmw_init_options_init+0xb8>)
 80240d4:	f7ff ff5a 	bl	8023f8c <get_memory>
 80240d8:	b1f0      	cbz	r0, 8024118 <rmw_init_options_init+0xb0>
 80240da:	4a13      	ldr	r2, [pc, #76]	@ (8024128 <rmw_init_options_init+0xc0>)
 80240dc:	6883      	ldr	r3, [r0, #8]
 80240de:	6851      	ldr	r1, [r2, #4]
 80240e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80240e2:	7810      	ldrb	r0, [r2, #0]
 80240e4:	6159      	str	r1, [r3, #20]
 80240e6:	68d1      	ldr	r1, [r2, #12]
 80240e8:	7418      	strb	r0, [r3, #16]
 80240ea:	61d9      	str	r1, [r3, #28]
 80240ec:	6911      	ldr	r1, [r2, #16]
 80240ee:	6219      	str	r1, [r3, #32]
 80240f0:	6951      	ldr	r1, [r2, #20]
 80240f2:	6892      	ldr	r2, [r2, #8]
 80240f4:	6259      	str	r1, [r3, #36]	@ 0x24
 80240f6:	619a      	str	r2, [r3, #24]
 80240f8:	f7fb fb20 	bl	801f73c <uxr_nanos>
 80240fc:	f003 fc60 	bl	80279c0 <srand>
 8024100:	f003 fc8c 	bl	8027a1c <rand>
 8024104:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8024106:	6298      	str	r0, [r3, #40]	@ 0x28
 8024108:	2800      	cmp	r0, #0
 802410a:	d0f9      	beq.n	8024100 <rmw_init_options_init+0x98>
 802410c:	2000      	movs	r0, #0
 802410e:	b003      	add	sp, #12
 8024110:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8024114:	b004      	add	sp, #16
 8024116:	4770      	bx	lr
 8024118:	2001      	movs	r0, #1
 802411a:	e7b4      	b.n	8024086 <rmw_init_options_init+0x1e>
 802411c:	0802dc08 	.word	0x0802dc08
 8024120:	20014dcc 	.word	0x20014dcc
 8024124:	20010668 	.word	0x20010668
 8024128:	200104f4 	.word	0x200104f4

0802412c <rmw_init_options_copy>:
 802412c:	b570      	push	{r4, r5, r6, lr}
 802412e:	b088      	sub	sp, #32
 8024130:	b160      	cbz	r0, 802414c <rmw_init_options_copy+0x20>
 8024132:	460d      	mov	r5, r1
 8024134:	b151      	cbz	r1, 802414c <rmw_init_options_copy+0x20>
 8024136:	4604      	mov	r4, r0
 8024138:	6880      	ldr	r0, [r0, #8]
 802413a:	b128      	cbz	r0, 8024148 <rmw_init_options_copy+0x1c>
 802413c:	4b34      	ldr	r3, [pc, #208]	@ (8024210 <rmw_init_options_copy+0xe4>)
 802413e:	6819      	ldr	r1, [r3, #0]
 8024140:	f7dc f87e 	bl	8000240 <strcmp>
 8024144:	2800      	cmp	r0, #0
 8024146:	d157      	bne.n	80241f8 <rmw_init_options_copy+0xcc>
 8024148:	68ab      	ldr	r3, [r5, #8]
 802414a:	b11b      	cbz	r3, 8024154 <rmw_init_options_copy+0x28>
 802414c:	240b      	movs	r4, #11
 802414e:	4620      	mov	r0, r4
 8024150:	b008      	add	sp, #32
 8024152:	bd70      	pop	{r4, r5, r6, pc}
 8024154:	4623      	mov	r3, r4
 8024156:	462a      	mov	r2, r5
 8024158:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 802415c:	f8d3 e000 	ldr.w	lr, [r3]
 8024160:	3310      	adds	r3, #16
 8024162:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8024166:	3210      	adds	r2, #16
 8024168:	f853 0c08 	ldr.w	r0, [r3, #-8]
 802416c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8024170:	42b3      	cmp	r3, r6
 8024172:	f842 ec10 	str.w	lr, [r2, #-16]
 8024176:	f842 cc0c 	str.w	ip, [r2, #-12]
 802417a:	f842 0c08 	str.w	r0, [r2, #-8]
 802417e:	f842 1c04 	str.w	r1, [r2, #-4]
 8024182:	d1eb      	bne.n	802415c <rmw_init_options_copy+0x30>
 8024184:	6819      	ldr	r1, [r3, #0]
 8024186:	f104 0e20 	add.w	lr, r4, #32
 802418a:	685b      	ldr	r3, [r3, #4]
 802418c:	f10d 0c0c 	add.w	ip, sp, #12
 8024190:	6011      	str	r1, [r2, #0]
 8024192:	6053      	str	r3, [r2, #4]
 8024194:	4666      	mov	r6, ip
 8024196:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 802419a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802419e:	f8de 3000 	ldr.w	r3, [lr]
 80241a2:	4630      	mov	r0, r6
 80241a4:	f8cc 3000 	str.w	r3, [ip]
 80241a8:	f7f7 fd30 	bl	801bc0c <rcutils_allocator_is_valid>
 80241ac:	2800      	cmp	r0, #0
 80241ae:	d0cd      	beq.n	802414c <rmw_init_options_copy+0x20>
 80241b0:	ab08      	add	r3, sp, #32
 80241b2:	e913 0003 	ldmdb	r3, {r0, r1}
 80241b6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80241ba:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80241be:	69e0      	ldr	r0, [r4, #28]
 80241c0:	f7ff fb50 	bl	8023864 <rcutils_strdup>
 80241c4:	61e8      	str	r0, [r5, #28]
 80241c6:	69e3      	ldr	r3, [r4, #28]
 80241c8:	b103      	cbz	r3, 80241cc <rmw_init_options_copy+0xa0>
 80241ca:	b1f8      	cbz	r0, 802420c <rmw_init_options_copy+0xe0>
 80241cc:	4811      	ldr	r0, [pc, #68]	@ (8024214 <rmw_init_options_copy+0xe8>)
 80241ce:	f7ff fedd 	bl	8023f8c <get_memory>
 80241d2:	b1a8      	cbz	r0, 8024200 <rmw_init_options_copy+0xd4>
 80241d4:	6883      	ldr	r3, [r0, #8]
 80241d6:	636b      	str	r3, [r5, #52]	@ 0x34
 80241d8:	f103 0510 	add.w	r5, r3, #16
 80241dc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80241de:	2400      	movs	r4, #0
 80241e0:	f102 0c10 	add.w	ip, r2, #16
 80241e4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80241e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80241ea:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80241ee:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80241f2:	4620      	mov	r0, r4
 80241f4:	b008      	add	sp, #32
 80241f6:	bd70      	pop	{r4, r5, r6, pc}
 80241f8:	240c      	movs	r4, #12
 80241fa:	4620      	mov	r0, r4
 80241fc:	b008      	add	sp, #32
 80241fe:	bd70      	pop	{r4, r5, r6, pc}
 8024200:	9b04      	ldr	r3, [sp, #16]
 8024202:	2401      	movs	r4, #1
 8024204:	9907      	ldr	r1, [sp, #28]
 8024206:	69e8      	ldr	r0, [r5, #28]
 8024208:	4798      	blx	r3
 802420a:	e7a0      	b.n	802414e <rmw_init_options_copy+0x22>
 802420c:	240a      	movs	r4, #10
 802420e:	e79e      	b.n	802414e <rmw_init_options_copy+0x22>
 8024210:	0802dc08 	.word	0x0802dc08
 8024214:	20014dcc 	.word	0x20014dcc

08024218 <rmw_init_options_fini>:
 8024218:	b510      	push	{r4, lr}
 802421a:	b08e      	sub	sp, #56	@ 0x38
 802421c:	2800      	cmp	r0, #0
 802421e:	d035      	beq.n	802428c <rmw_init_options_fini+0x74>
 8024220:	4604      	mov	r4, r0
 8024222:	3020      	adds	r0, #32
 8024224:	f7f7 fcf2 	bl	801bc0c <rcutils_allocator_is_valid>
 8024228:	b380      	cbz	r0, 802428c <rmw_init_options_fini+0x74>
 802422a:	68a0      	ldr	r0, [r4, #8]
 802422c:	b120      	cbz	r0, 8024238 <rmw_init_options_fini+0x20>
 802422e:	4b1c      	ldr	r3, [pc, #112]	@ (80242a0 <rmw_init_options_fini+0x88>)
 8024230:	6819      	ldr	r1, [r3, #0]
 8024232:	f7dc f805 	bl	8000240 <strcmp>
 8024236:	bb88      	cbnz	r0, 802429c <rmw_init_options_fini+0x84>
 8024238:	4b1a      	ldr	r3, [pc, #104]	@ (80242a4 <rmw_init_options_fini+0x8c>)
 802423a:	6819      	ldr	r1, [r3, #0]
 802423c:	b351      	cbz	r1, 8024294 <rmw_init_options_fini+0x7c>
 802423e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8024240:	e001      	b.n	8024246 <rmw_init_options_fini+0x2e>
 8024242:	6849      	ldr	r1, [r1, #4]
 8024244:	b331      	cbz	r1, 8024294 <rmw_init_options_fini+0x7c>
 8024246:	688b      	ldr	r3, [r1, #8]
 8024248:	429a      	cmp	r2, r3
 802424a:	d1fa      	bne.n	8024242 <rmw_init_options_fini+0x2a>
 802424c:	4815      	ldr	r0, [pc, #84]	@ (80242a4 <rmw_init_options_fini+0x8c>)
 802424e:	f7ff fead 	bl	8023fac <put_memory>
 8024252:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8024254:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8024256:	69e0      	ldr	r0, [r4, #28]
 8024258:	4798      	blx	r3
 802425a:	4668      	mov	r0, sp
 802425c:	f7ff fc84 	bl	8023b68 <rmw_get_zero_initialized_init_options>
 8024260:	46ee      	mov	lr, sp
 8024262:	46a4      	mov	ip, r4
 8024264:	2400      	movs	r4, #0
 8024266:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 802426a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802426e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8024272:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8024276:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 802427a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802427e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8024282:	e88c 0003 	stmia.w	ip, {r0, r1}
 8024286:	4620      	mov	r0, r4
 8024288:	b00e      	add	sp, #56	@ 0x38
 802428a:	bd10      	pop	{r4, pc}
 802428c:	240b      	movs	r4, #11
 802428e:	4620      	mov	r0, r4
 8024290:	b00e      	add	sp, #56	@ 0x38
 8024292:	bd10      	pop	{r4, pc}
 8024294:	2401      	movs	r4, #1
 8024296:	4620      	mov	r0, r4
 8024298:	b00e      	add	sp, #56	@ 0x38
 802429a:	bd10      	pop	{r4, pc}
 802429c:	240c      	movs	r4, #12
 802429e:	e7f2      	b.n	8024286 <rmw_init_options_fini+0x6e>
 80242a0:	0802dc08 	.word	0x0802dc08
 80242a4:	20014dcc 	.word	0x20014dcc

080242a8 <rmw_init>:
 80242a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80242ac:	b083      	sub	sp, #12
 80242ae:	2800      	cmp	r0, #0
 80242b0:	f000 80d3 	beq.w	802445a <rmw_init+0x1b2>
 80242b4:	460e      	mov	r6, r1
 80242b6:	2900      	cmp	r1, #0
 80242b8:	f000 80cf 	beq.w	802445a <rmw_init+0x1b2>
 80242bc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80242be:	4605      	mov	r5, r0
 80242c0:	2b00      	cmp	r3, #0
 80242c2:	f000 80ca 	beq.w	802445a <rmw_init+0x1b2>
 80242c6:	4b78      	ldr	r3, [pc, #480]	@ (80244a8 <rmw_init+0x200>)
 80242c8:	6880      	ldr	r0, [r0, #8]
 80242ca:	681f      	ldr	r7, [r3, #0]
 80242cc:	b128      	cbz	r0, 80242da <rmw_init+0x32>
 80242ce:	4639      	mov	r1, r7
 80242d0:	f7db ffb6 	bl	8000240 <strcmp>
 80242d4:	2800      	cmp	r0, #0
 80242d6:	f040 80ca 	bne.w	802446e <rmw_init+0x1c6>
 80242da:	4c74      	ldr	r4, [pc, #464]	@ (80244ac <rmw_init+0x204>)
 80242dc:	f04f 0800 	mov.w	r8, #0
 80242e0:	4973      	ldr	r1, [pc, #460]	@ (80244b0 <rmw_init+0x208>)
 80242e2:	4874      	ldr	r0, [pc, #464]	@ (80244b4 <rmw_init+0x20c>)
 80242e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80242e8:	60b7      	str	r7, [r6, #8]
 80242ea:	e9c6 2300 	strd	r2, r3, [r6]
 80242ee:	68eb      	ldr	r3, [r5, #12]
 80242f0:	2201      	movs	r2, #1
 80242f2:	64b3      	str	r3, [r6, #72]	@ 0x48
 80242f4:	f7f7 ff82 	bl	801c1fc <rmw_uxrce_init_session_memory>
 80242f8:	4620      	mov	r0, r4
 80242fa:	2204      	movs	r2, #4
 80242fc:	496e      	ldr	r1, [pc, #440]	@ (80244b8 <rmw_init+0x210>)
 80242fe:	f7f7 ffbd 	bl	801c27c <rmw_uxrce_init_static_input_buffer_memory>
 8024302:	486c      	ldr	r0, [pc, #432]	@ (80244b4 <rmw_init+0x20c>)
 8024304:	f884 800d 	strb.w	r8, [r4, #13]
 8024308:	f7ff fe40 	bl	8023f8c <get_memory>
 802430c:	2800      	cmp	r0, #0
 802430e:	f000 80a9 	beq.w	8024464 <rmw_init+0x1bc>
 8024312:	6884      	ldr	r4, [r0, #8]
 8024314:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8024316:	f104 0910 	add.w	r9, r4, #16
 802431a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 802431c:	f890 c010 	ldrb.w	ip, [r0, #16]
 8024320:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8024324:	9101      	str	r1, [sp, #4]
 8024326:	4661      	mov	r1, ip
 8024328:	6a00      	ldr	r0, [r0, #32]
 802432a:	9000      	str	r0, [sp, #0]
 802432c:	4648      	mov	r0, r9
 802432e:	f001 fa6d 	bl	802580c <uxr_set_custom_transport_callbacks>
 8024332:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8024336:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 802433a:	4960      	ldr	r1, [pc, #384]	@ (80244bc <rmw_init+0x214>)
 802433c:	4860      	ldr	r0, [pc, #384]	@ (80244c0 <rmw_init+0x218>)
 802433e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8024342:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8024346:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 802434a:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 802434e:	2201      	movs	r2, #1
 8024350:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8024354:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8024358:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 802435c:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8024360:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8024362:	f7f7 ff2b 	bl	801c1bc <rmw_uxrce_init_node_memory>
 8024366:	2205      	movs	r2, #5
 8024368:	4956      	ldr	r1, [pc, #344]	@ (80244c4 <rmw_init+0x21c>)
 802436a:	4857      	ldr	r0, [pc, #348]	@ (80244c8 <rmw_init+0x220>)
 802436c:	f7f7 ff06 	bl	801c17c <rmw_uxrce_init_subscription_memory>
 8024370:	220a      	movs	r2, #10
 8024372:	4956      	ldr	r1, [pc, #344]	@ (80244cc <rmw_init+0x224>)
 8024374:	4856      	ldr	r0, [pc, #344]	@ (80244d0 <rmw_init+0x228>)
 8024376:	f7f7 fee1 	bl	801c13c <rmw_uxrce_init_publisher_memory>
 802437a:	2201      	movs	r2, #1
 802437c:	4955      	ldr	r1, [pc, #340]	@ (80244d4 <rmw_init+0x22c>)
 802437e:	4856      	ldr	r0, [pc, #344]	@ (80244d8 <rmw_init+0x230>)
 8024380:	f7f7 fe9c 	bl	801c0bc <rmw_uxrce_init_service_memory>
 8024384:	2201      	movs	r2, #1
 8024386:	4955      	ldr	r1, [pc, #340]	@ (80244dc <rmw_init+0x234>)
 8024388:	4855      	ldr	r0, [pc, #340]	@ (80244e0 <rmw_init+0x238>)
 802438a:	f7f7 feb7 	bl	801c0fc <rmw_uxrce_init_client_memory>
 802438e:	220f      	movs	r2, #15
 8024390:	4954      	ldr	r1, [pc, #336]	@ (80244e4 <rmw_init+0x23c>)
 8024392:	4855      	ldr	r0, [pc, #340]	@ (80244e8 <rmw_init+0x240>)
 8024394:	f7f7 ff52 	bl	801c23c <rmw_uxrce_init_topic_memory>
 8024398:	2203      	movs	r2, #3
 802439a:	4954      	ldr	r1, [pc, #336]	@ (80244ec <rmw_init+0x244>)
 802439c:	4854      	ldr	r0, [pc, #336]	@ (80244f0 <rmw_init+0x248>)
 802439e:	f7f7 ff8d 	bl	801c2bc <rmw_uxrce_init_init_options_impl_memory>
 80243a2:	2204      	movs	r2, #4
 80243a4:	4953      	ldr	r1, [pc, #332]	@ (80244f4 <rmw_init+0x24c>)
 80243a6:	4854      	ldr	r0, [pc, #336]	@ (80244f8 <rmw_init+0x250>)
 80243a8:	f7f7 ffa8 	bl	801c2fc <rmw_uxrce_init_wait_set_memory>
 80243ac:	4953      	ldr	r1, [pc, #332]	@ (80244fc <rmw_init+0x254>)
 80243ae:	4854      	ldr	r0, [pc, #336]	@ (8024500 <rmw_init+0x258>)
 80243b0:	2204      	movs	r2, #4
 80243b2:	f7f7 ffc3 	bl	801c33c <rmw_uxrce_init_guard_condition_memory>
 80243b6:	4642      	mov	r2, r8
 80243b8:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80243ba:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 80243bc:	f000 fdb8 	bl	8024f30 <rmw_uxrce_transport_init>
 80243c0:	4607      	mov	r7, r0
 80243c2:	2800      	cmp	r0, #0
 80243c4:	d158      	bne.n	8024478 <rmw_init+0x1d0>
 80243c6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80243c8:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 80243cc:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 80243d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80243d2:	4628      	mov	r0, r5
 80243d4:	f7fa f808 	bl	801e3e8 <uxr_init_session>
 80243d8:	4622      	mov	r2, r4
 80243da:	494a      	ldr	r1, [pc, #296]	@ (8024504 <rmw_init+0x25c>)
 80243dc:	4628      	mov	r0, r5
 80243de:	f7fa f827 	bl	801e430 <uxr_set_topic_callback>
 80243e2:	463a      	mov	r2, r7
 80243e4:	4948      	ldr	r1, [pc, #288]	@ (8024508 <rmw_init+0x260>)
 80243e6:	4628      	mov	r0, r5
 80243e8:	f7fa f81e 	bl	801e428 <uxr_set_status_callback>
 80243ec:	463a      	mov	r2, r7
 80243ee:	4947      	ldr	r1, [pc, #284]	@ (802450c <rmw_init+0x264>)
 80243f0:	4628      	mov	r0, r5
 80243f2:	f7fa f821 	bl	801e438 <uxr_set_request_callback>
 80243f6:	463a      	mov	r2, r7
 80243f8:	4945      	ldr	r1, [pc, #276]	@ (8024510 <rmw_init+0x268>)
 80243fa:	4628      	mov	r0, r5
 80243fc:	f7fa f820 	bl	801e440 <uxr_set_reply_callback>
 8024400:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8024404:	2304      	movs	r3, #4
 8024406:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 802440a:	0092      	lsls	r2, r2, #2
 802440c:	4628      	mov	r0, r5
 802440e:	f7fa f857 	bl	801e4c0 <uxr_create_input_reliable_stream>
 8024412:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8024416:	2304      	movs	r3, #4
 8024418:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 802441c:	0092      	lsls	r2, r2, #2
 802441e:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8024422:	4628      	mov	r0, r5
 8024424:	f7fa f822 	bl	801e46c <uxr_create_output_reliable_stream>
 8024428:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 802442c:	4628      	mov	r0, r5
 802442e:	f7fa f841 	bl	801e4b4 <uxr_create_input_best_effort_stream>
 8024432:	f241 3194 	movw	r1, #5012	@ 0x1394
 8024436:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 802443a:	4628      	mov	r0, r5
 802443c:	4421      	add	r1, r4
 802443e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8024442:	f7fa f801 	bl	801e448 <uxr_create_output_best_effort_stream>
 8024446:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 802444a:	4628      	mov	r0, r5
 802444c:	f7fa fd8a 	bl	801ef64 <uxr_create_session>
 8024450:	b1f8      	cbz	r0, 8024492 <rmw_init+0x1ea>
 8024452:	4638      	mov	r0, r7
 8024454:	b003      	add	sp, #12
 8024456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802445a:	270b      	movs	r7, #11
 802445c:	4638      	mov	r0, r7
 802445e:	b003      	add	sp, #12
 8024460:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024464:	2701      	movs	r7, #1
 8024466:	4638      	mov	r0, r7
 8024468:	b003      	add	sp, #12
 802446a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802446e:	270c      	movs	r7, #12
 8024470:	4638      	mov	r0, r7
 8024472:	b003      	add	sp, #12
 8024474:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024478:	4648      	mov	r0, r9
 802447a:	f001 fa05 	bl	8025888 <uxr_close_custom_transport>
 802447e:	4621      	mov	r1, r4
 8024480:	480c      	ldr	r0, [pc, #48]	@ (80244b4 <rmw_init+0x20c>)
 8024482:	f7ff fd93 	bl	8023fac <put_memory>
 8024486:	4638      	mov	r0, r7
 8024488:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 802448c:	b003      	add	sp, #12
 802448e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024492:	4648      	mov	r0, r9
 8024494:	f001 f9f8 	bl	8025888 <uxr_close_custom_transport>
 8024498:	4621      	mov	r1, r4
 802449a:	4806      	ldr	r0, [pc, #24]	@ (80244b4 <rmw_init+0x20c>)
 802449c:	f7ff fd86 	bl	8023fac <put_memory>
 80244a0:	64f7      	str	r7, [r6, #76]	@ 0x4c
 80244a2:	2701      	movs	r7, #1
 80244a4:	e7d5      	b.n	8024452 <rmw_init+0x1aa>
 80244a6:	bf00      	nop
 80244a8:	0802dc08 	.word	0x0802dc08
 80244ac:	20014e1c 	.word	0x20014e1c
 80244b0:	200110c8 	.word	0x200110c8
 80244b4:	20014e0c 	.word	0x20014e0c
 80244b8:	20012670 	.word	0x20012670
 80244bc:	200106ec 	.word	0x200106ec
 80244c0:	20014ddc 	.word	0x20014ddc
 80244c4:	20014770 	.word	0x20014770
 80244c8:	20014e2c 	.word	0x20014e2c
 80244cc:	20010790 	.word	0x20010790
 80244d0:	20014dec 	.word	0x20014dec
 80244d4:	20011000 	.word	0x20011000
 80244d8:	20014dfc 	.word	0x20014dfc
 80244dc:	20010520 	.word	0x20010520
 80244e0:	20010510 	.word	0x20010510
 80244e4:	20014ba8 	.word	0x20014ba8
 80244e8:	20014e3c 	.word	0x20014e3c
 80244ec:	20010668 	.word	0x20010668
 80244f0:	20014dcc 	.word	0x20014dcc
 80244f4:	20014d4c 	.word	0x20014d4c
 80244f8:	20014e4c 	.word	0x20014e4c
 80244fc:	200105e8 	.word	0x200105e8
 8024500:	20014dbc 	.word	0x20014dbc
 8024504:	08027535 	.word	0x08027535
 8024508:	0802752d 	.word	0x0802752d
 802450c:	080275cd 	.word	0x080275cd
 8024510:	08027669 	.word	0x08027669

08024514 <rmw_context_fini>:
 8024514:	4b17      	ldr	r3, [pc, #92]	@ (8024574 <rmw_context_fini+0x60>)
 8024516:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8024518:	b570      	push	{r4, r5, r6, lr}
 802451a:	681c      	ldr	r4, [r3, #0]
 802451c:	4605      	mov	r5, r0
 802451e:	b334      	cbz	r4, 802456e <rmw_context_fini+0x5a>
 8024520:	2600      	movs	r6, #0
 8024522:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8024526:	6902      	ldr	r2, [r0, #16]
 8024528:	428a      	cmp	r2, r1
 802452a:	d018      	beq.n	802455e <rmw_context_fini+0x4a>
 802452c:	2c00      	cmp	r4, #0
 802452e:	d1f8      	bne.n	8024522 <rmw_context_fini+0xe>
 8024530:	b189      	cbz	r1, 8024556 <rmw_context_fini+0x42>
 8024532:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8024536:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 802453a:	789b      	ldrb	r3, [r3, #2]
 802453c:	2b01      	cmp	r3, #1
 802453e:	bf14      	ite	ne
 8024540:	210a      	movne	r1, #10
 8024542:	2100      	moveq	r1, #0
 8024544:	f7fa fce6 	bl	801ef14 <uxr_delete_session_retries>
 8024548:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 802454a:	f7f7 ff17 	bl	801c37c <rmw_uxrce_fini_session_memory>
 802454e:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8024550:	3010      	adds	r0, #16
 8024552:	f001 f999 	bl	8025888 <uxr_close_custom_transport>
 8024556:	2300      	movs	r3, #0
 8024558:	4630      	mov	r0, r6
 802455a:	64eb      	str	r3, [r5, #76]	@ 0x4c
 802455c:	bd70      	pop	{r4, r5, r6, pc}
 802455e:	3018      	adds	r0, #24
 8024560:	f000 f90e 	bl	8024780 <rmw_destroy_node>
 8024564:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8024566:	4606      	mov	r6, r0
 8024568:	2c00      	cmp	r4, #0
 802456a:	d1da      	bne.n	8024522 <rmw_context_fini+0xe>
 802456c:	e7e0      	b.n	8024530 <rmw_context_fini+0x1c>
 802456e:	4626      	mov	r6, r4
 8024570:	e7de      	b.n	8024530 <rmw_context_fini+0x1c>
 8024572:	bf00      	nop
 8024574:	20014ddc 	.word	0x20014ddc

08024578 <create_topic>:
 8024578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802457c:	4605      	mov	r5, r0
 802457e:	b084      	sub	sp, #16
 8024580:	4822      	ldr	r0, [pc, #136]	@ (802460c <create_topic+0x94>)
 8024582:	460f      	mov	r7, r1
 8024584:	4616      	mov	r6, r2
 8024586:	f7ff fd01 	bl	8023f8c <get_memory>
 802458a:	4604      	mov	r4, r0
 802458c:	2800      	cmp	r0, #0
 802458e:	d039      	beq.n	8024604 <create_topic+0x8c>
 8024590:	692b      	ldr	r3, [r5, #16]
 8024592:	2102      	movs	r1, #2
 8024594:	6884      	ldr	r4, [r0, #8]
 8024596:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 802459a:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 8024614 <create_topic+0x9c>
 802459e:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80245a2:	1c42      	adds	r2, r0, #1
 80245a4:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80245a8:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80245ac:	f7f9 fe5c 	bl	801e268 <uxr_object_id>
 80245b0:	223c      	movs	r2, #60	@ 0x3c
 80245b2:	6120      	str	r0, [r4, #16]
 80245b4:	4641      	mov	r1, r8
 80245b6:	4638      	mov	r0, r7
 80245b8:	f7f8 f8c6 	bl	801c748 <generate_topic_name>
 80245bc:	b1f0      	cbz	r0, 80245fc <create_topic+0x84>
 80245be:	4f14      	ldr	r7, [pc, #80]	@ (8024610 <create_topic+0x98>)
 80245c0:	4630      	mov	r0, r6
 80245c2:	2264      	movs	r2, #100	@ 0x64
 80245c4:	4639      	mov	r1, r7
 80245c6:	f7f8 f891 	bl	801c6ec <generate_type_name>
 80245ca:	b1b8      	cbz	r0, 80245fc <create_topic+0x84>
 80245cc:	6928      	ldr	r0, [r5, #16]
 80245ce:	2106      	movs	r1, #6
 80245d0:	696b      	ldr	r3, [r5, #20]
 80245d2:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80245d6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80245da:	f8cd 8000 	str.w	r8, [sp]
 80245de:	e9cd 7101 	strd	r7, r1, [sp, #4]
 80245e2:	6811      	ldr	r1, [r2, #0]
 80245e4:	6922      	ldr	r2, [r4, #16]
 80245e6:	f7f9 fcbb 	bl	801df60 <uxr_buffer_create_topic_bin>
 80245ea:	4602      	mov	r2, r0
 80245ec:	6928      	ldr	r0, [r5, #16]
 80245ee:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80245f2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80245f6:	f7f8 f845 	bl	801c684 <run_xrce_session>
 80245fa:	b918      	cbnz	r0, 8024604 <create_topic+0x8c>
 80245fc:	4620      	mov	r0, r4
 80245fe:	2400      	movs	r4, #0
 8024600:	f7f7 ff32 	bl	801c468 <rmw_uxrce_fini_topic_memory>
 8024604:	4620      	mov	r0, r4
 8024606:	b004      	add	sp, #16
 8024608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802460c:	20014e3c 	.word	0x20014e3c
 8024610:	20014f28 	.word	0x20014f28
 8024614:	20014eec 	.word	0x20014eec

08024618 <destroy_topic>:
 8024618:	b538      	push	{r3, r4, r5, lr}
 802461a:	6985      	ldr	r5, [r0, #24]
 802461c:	b1dd      	cbz	r5, 8024656 <destroy_topic+0x3e>
 802461e:	4604      	mov	r4, r0
 8024620:	6928      	ldr	r0, [r5, #16]
 8024622:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8024626:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 802462a:	6922      	ldr	r2, [r4, #16]
 802462c:	6819      	ldr	r1, [r3, #0]
 802462e:	f7f9 fc19 	bl	801de64 <uxr_buffer_delete_entity>
 8024632:	4602      	mov	r2, r0
 8024634:	6928      	ldr	r0, [r5, #16]
 8024636:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 802463a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 802463e:	f7f8 f821 	bl	801c684 <run_xrce_session>
 8024642:	4603      	mov	r3, r0
 8024644:	4620      	mov	r0, r4
 8024646:	2b00      	cmp	r3, #0
 8024648:	bf14      	ite	ne
 802464a:	2400      	movne	r4, #0
 802464c:	2402      	moveq	r4, #2
 802464e:	f7f7 ff0b 	bl	801c468 <rmw_uxrce_fini_topic_memory>
 8024652:	4620      	mov	r0, r4
 8024654:	bd38      	pop	{r3, r4, r5, pc}
 8024656:	2401      	movs	r4, #1
 8024658:	4620      	mov	r0, r4
 802465a:	bd38      	pop	{r3, r4, r5, pc}

0802465c <create_node>:
 802465c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024660:	b083      	sub	sp, #12
 8024662:	2b00      	cmp	r3, #0
 8024664:	d064      	beq.n	8024730 <create_node+0xd4>
 8024666:	4606      	mov	r6, r0
 8024668:	4838      	ldr	r0, [pc, #224]	@ (802474c <create_node+0xf0>)
 802466a:	460f      	mov	r7, r1
 802466c:	4690      	mov	r8, r2
 802466e:	461d      	mov	r5, r3
 8024670:	f7ff fc8c 	bl	8023f8c <get_memory>
 8024674:	2800      	cmp	r0, #0
 8024676:	d05b      	beq.n	8024730 <create_node+0xd4>
 8024678:	6884      	ldr	r4, [r0, #8]
 802467a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 802467c:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8024680:	f104 0518 	add.w	r5, r4, #24
 8024684:	6123      	str	r3, [r4, #16]
 8024686:	f7ff fce9 	bl	802405c <rmw_get_implementation_identifier>
 802468a:	f8c4 9020 	str.w	r9, [r4, #32]
 802468e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8024692:	4630      	mov	r0, r6
 8024694:	f7db fdde 	bl	8000254 <strlen>
 8024698:	1c42      	adds	r2, r0, #1
 802469a:	2a3c      	cmp	r2, #60	@ 0x3c
 802469c:	d840      	bhi.n	8024720 <create_node+0xc4>
 802469e:	4648      	mov	r0, r9
 80246a0:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 80246a4:	4631      	mov	r1, r6
 80246a6:	f003 fef2 	bl	802848e <memcpy>
 80246aa:	4638      	mov	r0, r7
 80246ac:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 80246b0:	f7db fdd0 	bl	8000254 <strlen>
 80246b4:	1c42      	adds	r2, r0, #1
 80246b6:	2a3c      	cmp	r2, #60	@ 0x3c
 80246b8:	d832      	bhi.n	8024720 <create_node+0xc4>
 80246ba:	4639      	mov	r1, r7
 80246bc:	4648      	mov	r0, r9
 80246be:	f003 fee6 	bl	802848e <memcpy>
 80246c2:	6923      	ldr	r3, [r4, #16]
 80246c4:	2101      	movs	r1, #1
 80246c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80246ca:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 80246ce:	1842      	adds	r2, r0, r1
 80246d0:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 80246d4:	f7f9 fdc8 	bl	801e268 <uxr_object_id>
 80246d8:	6160      	str	r0, [r4, #20]
 80246da:	783b      	ldrb	r3, [r7, #0]
 80246dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80246de:	d12c      	bne.n	802473a <create_node+0xde>
 80246e0:	787b      	ldrb	r3, [r7, #1]
 80246e2:	bb53      	cbnz	r3, 802473a <create_node+0xde>
 80246e4:	4633      	mov	r3, r6
 80246e6:	4a1a      	ldr	r2, [pc, #104]	@ (8024750 <create_node+0xf4>)
 80246e8:	213c      	movs	r1, #60	@ 0x3c
 80246ea:	481a      	ldr	r0, [pc, #104]	@ (8024754 <create_node+0xf8>)
 80246ec:	f003 fc34 	bl	8027f58 <sniprintf>
 80246f0:	6920      	ldr	r0, [r4, #16]
 80246f2:	2106      	movs	r1, #6
 80246f4:	fa1f f388 	uxth.w	r3, r8
 80246f8:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80246fc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8024700:	9101      	str	r1, [sp, #4]
 8024702:	4914      	ldr	r1, [pc, #80]	@ (8024754 <create_node+0xf8>)
 8024704:	9100      	str	r1, [sp, #0]
 8024706:	6811      	ldr	r1, [r2, #0]
 8024708:	6962      	ldr	r2, [r4, #20]
 802470a:	f7f9 fbf7 	bl	801defc <uxr_buffer_create_participant_bin>
 802470e:	4602      	mov	r2, r0
 8024710:	6920      	ldr	r0, [r4, #16]
 8024712:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8024716:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 802471a:	f7f7 ffb3 	bl	801c684 <run_xrce_session>
 802471e:	b918      	cbnz	r0, 8024728 <create_node+0xcc>
 8024720:	4628      	mov	r0, r5
 8024722:	2500      	movs	r5, #0
 8024724:	f7f7 fe30 	bl	801c388 <rmw_uxrce_fini_node_memory>
 8024728:	4628      	mov	r0, r5
 802472a:	b003      	add	sp, #12
 802472c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024730:	2500      	movs	r5, #0
 8024732:	4628      	mov	r0, r5
 8024734:	b003      	add	sp, #12
 8024736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802473a:	463b      	mov	r3, r7
 802473c:	4a06      	ldr	r2, [pc, #24]	@ (8024758 <create_node+0xfc>)
 802473e:	213c      	movs	r1, #60	@ 0x3c
 8024740:	9600      	str	r6, [sp, #0]
 8024742:	4804      	ldr	r0, [pc, #16]	@ (8024754 <create_node+0xf8>)
 8024744:	f003 fc08 	bl	8027f58 <sniprintf>
 8024748:	e7d2      	b.n	80246f0 <create_node+0x94>
 802474a:	bf00      	nop
 802474c:	20014ddc 	.word	0x20014ddc
 8024750:	0802d000 	.word	0x0802d000
 8024754:	20014f8c 	.word	0x20014f8c
 8024758:	0802d46c 	.word	0x0802d46c

0802475c <rmw_create_node>:
 802475c:	468c      	mov	ip, r1
 802475e:	4611      	mov	r1, r2
 8024760:	f1bc 0f00 	cmp.w	ip, #0
 8024764:	d00a      	beq.n	802477c <rmw_create_node+0x20>
 8024766:	f89c 3000 	ldrb.w	r3, [ip]
 802476a:	b13b      	cbz	r3, 802477c <rmw_create_node+0x20>
 802476c:	b132      	cbz	r2, 802477c <rmw_create_node+0x20>
 802476e:	7813      	ldrb	r3, [r2, #0]
 8024770:	b123      	cbz	r3, 802477c <rmw_create_node+0x20>
 8024772:	4603      	mov	r3, r0
 8024774:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8024776:	4660      	mov	r0, ip
 8024778:	f7ff bf70 	b.w	802465c <create_node>
 802477c:	2000      	movs	r0, #0
 802477e:	4770      	bx	lr

08024780 <rmw_destroy_node>:
 8024780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024782:	b328      	cbz	r0, 80247d0 <rmw_destroy_node+0x50>
 8024784:	4607      	mov	r7, r0
 8024786:	6800      	ldr	r0, [r0, #0]
 8024788:	b120      	cbz	r0, 8024794 <rmw_destroy_node+0x14>
 802478a:	4b37      	ldr	r3, [pc, #220]	@ (8024868 <rmw_destroy_node+0xe8>)
 802478c:	6819      	ldr	r1, [r3, #0]
 802478e:	f7db fd57 	bl	8000240 <strcmp>
 8024792:	b9e8      	cbnz	r0, 80247d0 <rmw_destroy_node+0x50>
 8024794:	687d      	ldr	r5, [r7, #4]
 8024796:	b1dd      	cbz	r5, 80247d0 <rmw_destroy_node+0x50>
 8024798:	4b34      	ldr	r3, [pc, #208]	@ (802486c <rmw_destroy_node+0xec>)
 802479a:	681c      	ldr	r4, [r3, #0]
 802479c:	2c00      	cmp	r4, #0
 802479e:	d060      	beq.n	8024862 <rmw_destroy_node+0xe2>
 80247a0:	2600      	movs	r6, #0
 80247a2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80247a6:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 80247aa:	429d      	cmp	r5, r3
 80247ac:	d013      	beq.n	80247d6 <rmw_destroy_node+0x56>
 80247ae:	2c00      	cmp	r4, #0
 80247b0:	d1f7      	bne.n	80247a2 <rmw_destroy_node+0x22>
 80247b2:	4b2f      	ldr	r3, [pc, #188]	@ (8024870 <rmw_destroy_node+0xf0>)
 80247b4:	681c      	ldr	r4, [r3, #0]
 80247b6:	b1c4      	cbz	r4, 80247ea <rmw_destroy_node+0x6a>
 80247b8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80247bc:	6a0b      	ldr	r3, [r1, #32]
 80247be:	429d      	cmp	r5, r3
 80247c0:	d1f9      	bne.n	80247b6 <rmw_destroy_node+0x36>
 80247c2:	317c      	adds	r1, #124	@ 0x7c
 80247c4:	4638      	mov	r0, r7
 80247c6:	f000 fafd 	bl	8024dc4 <rmw_destroy_subscription>
 80247ca:	2801      	cmp	r0, #1
 80247cc:	4606      	mov	r6, r0
 80247ce:	d1f2      	bne.n	80247b6 <rmw_destroy_node+0x36>
 80247d0:	2601      	movs	r6, #1
 80247d2:	4630      	mov	r0, r6
 80247d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80247d6:	3184      	adds	r1, #132	@ 0x84
 80247d8:	4638      	mov	r0, r7
 80247da:	f7f7 fc1b 	bl	801c014 <rmw_destroy_publisher>
 80247de:	2801      	cmp	r0, #1
 80247e0:	4606      	mov	r6, r0
 80247e2:	d0f5      	beq.n	80247d0 <rmw_destroy_node+0x50>
 80247e4:	2c00      	cmp	r4, #0
 80247e6:	d1dc      	bne.n	80247a2 <rmw_destroy_node+0x22>
 80247e8:	e7e3      	b.n	80247b2 <rmw_destroy_node+0x32>
 80247ea:	4b22      	ldr	r3, [pc, #136]	@ (8024874 <rmw_destroy_node+0xf4>)
 80247ec:	681c      	ldr	r4, [r3, #0]
 80247ee:	b16c      	cbz	r4, 802480c <rmw_destroy_node+0x8c>
 80247f0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80247f4:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80247f6:	429d      	cmp	r5, r3
 80247f8:	d1f9      	bne.n	80247ee <rmw_destroy_node+0x6e>
 80247fa:	317c      	adds	r1, #124	@ 0x7c
 80247fc:	4638      	mov	r0, r7
 80247fe:	f000 f993 	bl	8024b28 <rmw_destroy_service>
 8024802:	2801      	cmp	r0, #1
 8024804:	4606      	mov	r6, r0
 8024806:	d0e3      	beq.n	80247d0 <rmw_destroy_node+0x50>
 8024808:	2c00      	cmp	r4, #0
 802480a:	d1f1      	bne.n	80247f0 <rmw_destroy_node+0x70>
 802480c:	4b1a      	ldr	r3, [pc, #104]	@ (8024878 <rmw_destroy_node+0xf8>)
 802480e:	681c      	ldr	r4, [r3, #0]
 8024810:	b16c      	cbz	r4, 802482e <rmw_destroy_node+0xae>
 8024812:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8024816:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8024818:	429d      	cmp	r5, r3
 802481a:	d1f9      	bne.n	8024810 <rmw_destroy_node+0x90>
 802481c:	317c      	adds	r1, #124	@ 0x7c
 802481e:	4638      	mov	r0, r7
 8024820:	f7ff fbd8 	bl	8023fd4 <rmw_destroy_client>
 8024824:	2801      	cmp	r0, #1
 8024826:	4606      	mov	r6, r0
 8024828:	d0d2      	beq.n	80247d0 <rmw_destroy_node+0x50>
 802482a:	2c00      	cmp	r4, #0
 802482c:	d1f1      	bne.n	8024812 <rmw_destroy_node+0x92>
 802482e:	6928      	ldr	r0, [r5, #16]
 8024830:	696a      	ldr	r2, [r5, #20]
 8024832:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8024836:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 802483a:	6819      	ldr	r1, [r3, #0]
 802483c:	f7f9 fb12 	bl	801de64 <uxr_buffer_delete_entity>
 8024840:	4602      	mov	r2, r0
 8024842:	6928      	ldr	r0, [r5, #16]
 8024844:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8024848:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 802484c:	f7f7 ff1a 	bl	801c684 <run_xrce_session>
 8024850:	4603      	mov	r3, r0
 8024852:	4638      	mov	r0, r7
 8024854:	2b00      	cmp	r3, #0
 8024856:	bf08      	it	eq
 8024858:	2602      	moveq	r6, #2
 802485a:	f7f7 fd95 	bl	801c388 <rmw_uxrce_fini_node_memory>
 802485e:	4630      	mov	r0, r6
 8024860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024862:	4626      	mov	r6, r4
 8024864:	e7a5      	b.n	80247b2 <rmw_destroy_node+0x32>
 8024866:	bf00      	nop
 8024868:	0802dc08 	.word	0x0802dc08
 802486c:	20014dec 	.word	0x20014dec
 8024870:	20014e2c 	.word	0x20014e2c
 8024874:	20014dfc 	.word	0x20014dfc
 8024878:	20010510 	.word	0x20010510

0802487c <rmw_node_get_graph_guard_condition>:
 802487c:	6843      	ldr	r3, [r0, #4]
 802487e:	6918      	ldr	r0, [r3, #16]
 8024880:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8024884:	4770      	bx	lr
 8024886:	bf00      	nop

08024888 <rmw_send_request>:
 8024888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802488c:	4604      	mov	r4, r0
 802488e:	6800      	ldr	r0, [r0, #0]
 8024890:	b08b      	sub	sp, #44	@ 0x2c
 8024892:	460e      	mov	r6, r1
 8024894:	4615      	mov	r5, r2
 8024896:	b128      	cbz	r0, 80248a4 <rmw_send_request+0x1c>
 8024898:	4b21      	ldr	r3, [pc, #132]	@ (8024920 <rmw_send_request+0x98>)
 802489a:	6819      	ldr	r1, [r3, #0]
 802489c:	f7db fcd0 	bl	8000240 <strcmp>
 80248a0:	2800      	cmp	r0, #0
 80248a2:	d139      	bne.n	8024918 <rmw_send_request+0x90>
 80248a4:	6864      	ldr	r4, [r4, #4]
 80248a6:	2700      	movs	r7, #0
 80248a8:	6963      	ldr	r3, [r4, #20]
 80248aa:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 80248ae:	689b      	ldr	r3, [r3, #8]
 80248b0:	4798      	blx	r3
 80248b2:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80248b6:	4630      	mov	r0, r6
 80248b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80248bc:	4798      	blx	r3
 80248be:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80248c2:	9000      	str	r0, [sp, #0]
 80248c4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80248c8:	6922      	ldr	r2, [r4, #16]
 80248ca:	ab02      	add	r3, sp, #8
 80248cc:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80248ce:	f7fa ffd5 	bl	801f87c <uxr_prepare_output_stream>
 80248d2:	e9c5 0700 	strd	r0, r7, [r5]
 80248d6:	b198      	cbz	r0, 8024900 <rmw_send_request+0x78>
 80248d8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80248dc:	a902      	add	r1, sp, #8
 80248de:	4630      	mov	r0, r6
 80248e0:	4798      	blx	r3
 80248e2:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80248e6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80248ea:	2b01      	cmp	r3, #1
 80248ec:	d00c      	beq.n	8024908 <rmw_send_request+0x80>
 80248ee:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80248f0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80248f4:	f7fa f9c4 	bl	801ec80 <uxr_run_session_until_confirm_delivery>
 80248f8:	4638      	mov	r0, r7
 80248fa:	b00b      	add	sp, #44	@ 0x2c
 80248fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024900:	2001      	movs	r0, #1
 8024902:	b00b      	add	sp, #44	@ 0x2c
 8024904:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024908:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 802490c:	f7f9 fdfe 	bl	801e50c <uxr_flash_output_streams>
 8024910:	4638      	mov	r0, r7
 8024912:	b00b      	add	sp, #44	@ 0x2c
 8024914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024918:	200c      	movs	r0, #12
 802491a:	b00b      	add	sp, #44	@ 0x2c
 802491c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024920:	0802dc08 	.word	0x0802dc08

08024924 <rmw_take_request>:
 8024924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024928:	4605      	mov	r5, r0
 802492a:	6800      	ldr	r0, [r0, #0]
 802492c:	b089      	sub	sp, #36	@ 0x24
 802492e:	460c      	mov	r4, r1
 8024930:	4690      	mov	r8, r2
 8024932:	461e      	mov	r6, r3
 8024934:	b128      	cbz	r0, 8024942 <rmw_take_request+0x1e>
 8024936:	4b28      	ldr	r3, [pc, #160]	@ (80249d8 <rmw_take_request+0xb4>)
 8024938:	6819      	ldr	r1, [r3, #0]
 802493a:	f7db fc81 	bl	8000240 <strcmp>
 802493e:	2800      	cmp	r0, #0
 8024940:	d146      	bne.n	80249d0 <rmw_take_request+0xac>
 8024942:	b10e      	cbz	r6, 8024948 <rmw_take_request+0x24>
 8024944:	2300      	movs	r3, #0
 8024946:	7033      	strb	r3, [r6, #0]
 8024948:	f8d5 9004 	ldr.w	r9, [r5, #4]
 802494c:	f7f7 fe1c 	bl	801c588 <rmw_uxrce_clean_expired_static_input_buffer>
 8024950:	4648      	mov	r0, r9
 8024952:	f7f7 fdef 	bl	801c534 <rmw_uxrce_find_static_input_buffer_by_owner>
 8024956:	4607      	mov	r7, r0
 8024958:	b3b0      	cbz	r0, 80249c8 <rmw_take_request+0xa4>
 802495a:	6885      	ldr	r5, [r0, #8]
 802495c:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 8024960:	f8d5 383c 	ldr.w	r3, [r5, #2108]	@ 0x83c
 8024964:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8024968:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 802496c:	7423      	strb	r3, [r4, #16]
 802496e:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	@ 0x834
 8024972:	f895 3836 	ldrb.w	r3, [r5, #2102]	@ 0x836
 8024976:	f8a4 2011 	strh.w	r2, [r4, #17]
 802497a:	74e3      	strb	r3, [r4, #19]
 802497c:	f8d5 1828 	ldr.w	r1, [r5, #2088]	@ 0x828
 8024980:	f8d5 282c 	ldr.w	r2, [r5, #2092]	@ 0x82c
 8024984:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 8024988:	6161      	str	r1, [r4, #20]
 802498a:	61a2      	str	r2, [r4, #24]
 802498c:	61e3      	str	r3, [r4, #28]
 802498e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8024992:	689b      	ldr	r3, [r3, #8]
 8024994:	4798      	blx	r3
 8024996:	6844      	ldr	r4, [r0, #4]
 8024998:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 802499c:	f105 0110 	add.w	r1, r5, #16
 80249a0:	4668      	mov	r0, sp
 80249a2:	f7f5 ffe9 	bl	801a978 <ucdr_init_buffer>
 80249a6:	4641      	mov	r1, r8
 80249a8:	68e3      	ldr	r3, [r4, #12]
 80249aa:	4668      	mov	r0, sp
 80249ac:	4798      	blx	r3
 80249ae:	4639      	mov	r1, r7
 80249b0:	4604      	mov	r4, r0
 80249b2:	480a      	ldr	r0, [pc, #40]	@ (80249dc <rmw_take_request+0xb8>)
 80249b4:	f7ff fafa 	bl	8023fac <put_memory>
 80249b8:	b106      	cbz	r6, 80249bc <rmw_take_request+0x98>
 80249ba:	7034      	strb	r4, [r6, #0]
 80249bc:	f084 0001 	eor.w	r0, r4, #1
 80249c0:	b2c0      	uxtb	r0, r0
 80249c2:	b009      	add	sp, #36	@ 0x24
 80249c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80249c8:	2001      	movs	r0, #1
 80249ca:	b009      	add	sp, #36	@ 0x24
 80249cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80249d0:	200c      	movs	r0, #12
 80249d2:	b009      	add	sp, #36	@ 0x24
 80249d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80249d8:	0802dc08 	.word	0x0802dc08
 80249dc:	20014e1c 	.word	0x20014e1c

080249e0 <rmw_send_response>:
 80249e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80249e2:	4605      	mov	r5, r0
 80249e4:	6800      	ldr	r0, [r0, #0]
 80249e6:	b091      	sub	sp, #68	@ 0x44
 80249e8:	460c      	mov	r4, r1
 80249ea:	4616      	mov	r6, r2
 80249ec:	b128      	cbz	r0, 80249fa <rmw_send_response+0x1a>
 80249ee:	4b29      	ldr	r3, [pc, #164]	@ (8024a94 <rmw_send_response+0xb4>)
 80249f0:	6819      	ldr	r1, [r3, #0]
 80249f2:	f7db fc25 	bl	8000240 <strcmp>
 80249f6:	2800      	cmp	r0, #0
 80249f8:	d141      	bne.n	8024a7e <rmw_send_response+0x9e>
 80249fa:	686d      	ldr	r5, [r5, #4]
 80249fc:	68a1      	ldr	r1, [r4, #8]
 80249fe:	6860      	ldr	r0, [r4, #4]
 8024a00:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8024a02:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8024a06:	9307      	str	r3, [sp, #28]
 8024a08:	4623      	mov	r3, r4
 8024a0a:	9206      	str	r2, [sp, #24]
 8024a0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024a10:	789b      	ldrb	r3, [r3, #2]
 8024a12:	f88d 2017 	strb.w	r2, [sp, #23]
 8024a16:	f88d 3016 	strb.w	r3, [sp, #22]
 8024a1a:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8024a1e:	68e2      	ldr	r2, [r4, #12]
 8024a20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8024a24:	ab02      	add	r3, sp, #8
 8024a26:	696c      	ldr	r4, [r5, #20]
 8024a28:	c307      	stmia	r3!, {r0, r1, r2}
 8024a2a:	68e3      	ldr	r3, [r4, #12]
 8024a2c:	4798      	blx	r3
 8024a2e:	6844      	ldr	r4, [r0, #4]
 8024a30:	4630      	mov	r0, r6
 8024a32:	6923      	ldr	r3, [r4, #16]
 8024a34:	4798      	blx	r3
 8024a36:	f100 0318 	add.w	r3, r0, #24
 8024a3a:	6938      	ldr	r0, [r7, #16]
 8024a3c:	9300      	str	r3, [sp, #0]
 8024a3e:	ab08      	add	r3, sp, #32
 8024a40:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8024a44:	692a      	ldr	r2, [r5, #16]
 8024a46:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8024a48:	f7fa ff18 	bl	801f87c <uxr_prepare_output_stream>
 8024a4c:	b910      	cbnz	r0, 8024a54 <rmw_send_response+0x74>
 8024a4e:	2001      	movs	r0, #1
 8024a50:	b011      	add	sp, #68	@ 0x44
 8024a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024a54:	a902      	add	r1, sp, #8
 8024a56:	a808      	add	r0, sp, #32
 8024a58:	f7fc f848 	bl	8020aec <uxr_serialize_SampleIdentity>
 8024a5c:	68a3      	ldr	r3, [r4, #8]
 8024a5e:	a908      	add	r1, sp, #32
 8024a60:	4630      	mov	r0, r6
 8024a62:	4798      	blx	r3
 8024a64:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8024a68:	6938      	ldr	r0, [r7, #16]
 8024a6a:	2b01      	cmp	r3, #1
 8024a6c:	d00a      	beq.n	8024a84 <rmw_send_response+0xa4>
 8024a6e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8024a70:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8024a74:	f7fa f904 	bl	801ec80 <uxr_run_session_until_confirm_delivery>
 8024a78:	2000      	movs	r0, #0
 8024a7a:	b011      	add	sp, #68	@ 0x44
 8024a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024a7e:	200c      	movs	r0, #12
 8024a80:	b011      	add	sp, #68	@ 0x44
 8024a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024a84:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8024a88:	f7f9 fd40 	bl	801e50c <uxr_flash_output_streams>
 8024a8c:	2000      	movs	r0, #0
 8024a8e:	b011      	add	sp, #68	@ 0x44
 8024a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024a92:	bf00      	nop
 8024a94:	0802dc08 	.word	0x0802dc08

08024a98 <rmw_take_response>:
 8024a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024a9c:	4604      	mov	r4, r0
 8024a9e:	6800      	ldr	r0, [r0, #0]
 8024aa0:	b088      	sub	sp, #32
 8024aa2:	460f      	mov	r7, r1
 8024aa4:	4690      	mov	r8, r2
 8024aa6:	461d      	mov	r5, r3
 8024aa8:	b120      	cbz	r0, 8024ab4 <rmw_take_response+0x1c>
 8024aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8024b20 <rmw_take_response+0x88>)
 8024aac:	6819      	ldr	r1, [r3, #0]
 8024aae:	f7db fbc7 	bl	8000240 <strcmp>
 8024ab2:	bb68      	cbnz	r0, 8024b10 <rmw_take_response+0x78>
 8024ab4:	b10d      	cbz	r5, 8024aba <rmw_take_response+0x22>
 8024ab6:	2300      	movs	r3, #0
 8024ab8:	702b      	strb	r3, [r5, #0]
 8024aba:	6864      	ldr	r4, [r4, #4]
 8024abc:	f7f7 fd64 	bl	801c588 <rmw_uxrce_clean_expired_static_input_buffer>
 8024ac0:	4620      	mov	r0, r4
 8024ac2:	f7f7 fd37 	bl	801c534 <rmw_uxrce_find_static_input_buffer_by_owner>
 8024ac6:	4606      	mov	r6, r0
 8024ac8:	b330      	cbz	r0, 8024b18 <rmw_take_response+0x80>
 8024aca:	6963      	ldr	r3, [r4, #20]
 8024acc:	6884      	ldr	r4, [r0, #8]
 8024ace:	68db      	ldr	r3, [r3, #12]
 8024ad0:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8024ad4:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8024ad8:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8024adc:	4798      	blx	r3
 8024ade:	6847      	ldr	r7, [r0, #4]
 8024ae0:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8024ae4:	f104 0110 	add.w	r1, r4, #16
 8024ae8:	4668      	mov	r0, sp
 8024aea:	f7f5 ff45 	bl	801a978 <ucdr_init_buffer>
 8024aee:	4641      	mov	r1, r8
 8024af0:	68fb      	ldr	r3, [r7, #12]
 8024af2:	4668      	mov	r0, sp
 8024af4:	4798      	blx	r3
 8024af6:	4631      	mov	r1, r6
 8024af8:	4604      	mov	r4, r0
 8024afa:	480a      	ldr	r0, [pc, #40]	@ (8024b24 <rmw_take_response+0x8c>)
 8024afc:	f7ff fa56 	bl	8023fac <put_memory>
 8024b00:	b105      	cbz	r5, 8024b04 <rmw_take_response+0x6c>
 8024b02:	702c      	strb	r4, [r5, #0]
 8024b04:	f084 0001 	eor.w	r0, r4, #1
 8024b08:	b2c0      	uxtb	r0, r0
 8024b0a:	b008      	add	sp, #32
 8024b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024b10:	200c      	movs	r0, #12
 8024b12:	b008      	add	sp, #32
 8024b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024b18:	2001      	movs	r0, #1
 8024b1a:	b008      	add	sp, #32
 8024b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024b20:	0802dc08 	.word	0x0802dc08
 8024b24:	20014e1c 	.word	0x20014e1c

08024b28 <rmw_destroy_service>:
 8024b28:	b570      	push	{r4, r5, r6, lr}
 8024b2a:	b128      	cbz	r0, 8024b38 <rmw_destroy_service+0x10>
 8024b2c:	4604      	mov	r4, r0
 8024b2e:	6800      	ldr	r0, [r0, #0]
 8024b30:	460d      	mov	r5, r1
 8024b32:	f7f7 fe21 	bl	801c778 <is_uxrce_rmw_identifier_valid>
 8024b36:	b910      	cbnz	r0, 8024b3e <rmw_destroy_service+0x16>
 8024b38:	2401      	movs	r4, #1
 8024b3a:	4620      	mov	r0, r4
 8024b3c:	bd70      	pop	{r4, r5, r6, pc}
 8024b3e:	6863      	ldr	r3, [r4, #4]
 8024b40:	2b00      	cmp	r3, #0
 8024b42:	d0f9      	beq.n	8024b38 <rmw_destroy_service+0x10>
 8024b44:	2d00      	cmp	r5, #0
 8024b46:	d0f7      	beq.n	8024b38 <rmw_destroy_service+0x10>
 8024b48:	6828      	ldr	r0, [r5, #0]
 8024b4a:	f7f7 fe15 	bl	801c778 <is_uxrce_rmw_identifier_valid>
 8024b4e:	2800      	cmp	r0, #0
 8024b50:	d0f2      	beq.n	8024b38 <rmw_destroy_service+0x10>
 8024b52:	686e      	ldr	r6, [r5, #4]
 8024b54:	2e00      	cmp	r6, #0
 8024b56:	d0ef      	beq.n	8024b38 <rmw_destroy_service+0x10>
 8024b58:	6864      	ldr	r4, [r4, #4]
 8024b5a:	6932      	ldr	r2, [r6, #16]
 8024b5c:	6920      	ldr	r0, [r4, #16]
 8024b5e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8024b62:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8024b66:	6819      	ldr	r1, [r3, #0]
 8024b68:	f001 fc18 	bl	802639c <uxr_buffer_cancel_data>
 8024b6c:	4602      	mov	r2, r0
 8024b6e:	6920      	ldr	r0, [r4, #16]
 8024b70:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8024b74:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8024b78:	f7f7 fd84 	bl	801c684 <run_xrce_session>
 8024b7c:	6920      	ldr	r0, [r4, #16]
 8024b7e:	6932      	ldr	r2, [r6, #16]
 8024b80:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8024b84:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8024b88:	6819      	ldr	r1, [r3, #0]
 8024b8a:	f7f9 f96b 	bl	801de64 <uxr_buffer_delete_entity>
 8024b8e:	4602      	mov	r2, r0
 8024b90:	6920      	ldr	r0, [r4, #16]
 8024b92:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8024b96:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8024b9a:	f7f7 fd73 	bl	801c684 <run_xrce_session>
 8024b9e:	4603      	mov	r3, r0
 8024ba0:	4628      	mov	r0, r5
 8024ba2:	2b00      	cmp	r3, #0
 8024ba4:	bf14      	ite	ne
 8024ba6:	2400      	movne	r4, #0
 8024ba8:	2402      	moveq	r4, #2
 8024baa:	f7f7 fc31 	bl	801c410 <rmw_uxrce_fini_service_memory>
 8024bae:	e7c4      	b.n	8024b3a <rmw_destroy_service+0x12>

08024bb0 <rmw_create_subscription>:
 8024bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024bb4:	b08d      	sub	sp, #52	@ 0x34
 8024bb6:	2900      	cmp	r1, #0
 8024bb8:	f000 80d8 	beq.w	8024d6c <rmw_create_subscription+0x1bc>
 8024bbc:	4604      	mov	r4, r0
 8024bbe:	2800      	cmp	r0, #0
 8024bc0:	f000 80d4 	beq.w	8024d6c <rmw_create_subscription+0x1bc>
 8024bc4:	6800      	ldr	r0, [r0, #0]
 8024bc6:	460e      	mov	r6, r1
 8024bc8:	4615      	mov	r5, r2
 8024bca:	461f      	mov	r7, r3
 8024bcc:	f7f7 fdd4 	bl	801c778 <is_uxrce_rmw_identifier_valid>
 8024bd0:	f080 0001 	eor.w	r0, r0, #1
 8024bd4:	b2c0      	uxtb	r0, r0
 8024bd6:	2800      	cmp	r0, #0
 8024bd8:	f040 80c8 	bne.w	8024d6c <rmw_create_subscription+0x1bc>
 8024bdc:	2d00      	cmp	r5, #0
 8024bde:	f000 80c5 	beq.w	8024d6c <rmw_create_subscription+0x1bc>
 8024be2:	782b      	ldrb	r3, [r5, #0]
 8024be4:	2b00      	cmp	r3, #0
 8024be6:	f000 80c1 	beq.w	8024d6c <rmw_create_subscription+0x1bc>
 8024bea:	2f00      	cmp	r7, #0
 8024bec:	f000 80be 	beq.w	8024d6c <rmw_create_subscription+0x1bc>
 8024bf0:	4867      	ldr	r0, [pc, #412]	@ (8024d90 <rmw_create_subscription+0x1e0>)
 8024bf2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8024bf6:	f7ff f9c9 	bl	8023f8c <get_memory>
 8024bfa:	4604      	mov	r4, r0
 8024bfc:	2800      	cmp	r0, #0
 8024bfe:	f000 80b6 	beq.w	8024d6e <rmw_create_subscription+0x1be>
 8024c02:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8024c06:	f108 0a98 	add.w	sl, r8, #152	@ 0x98
 8024c0a:	f8c8 8080 	str.w	r8, [r8, #128]	@ 0x80
 8024c0e:	f7ff fa25 	bl	802405c <rmw_get_implementation_identifier>
 8024c12:	f8c8 007c 	str.w	r0, [r8, #124]	@ 0x7c
 8024c16:	f8c8 a084 	str.w	sl, [r8, #132]	@ 0x84
 8024c1a:	4628      	mov	r0, r5
 8024c1c:	f7db fb1a 	bl	8000254 <strlen>
 8024c20:	3001      	adds	r0, #1
 8024c22:	f108 047c 	add.w	r4, r8, #124	@ 0x7c
 8024c26:	283c      	cmp	r0, #60	@ 0x3c
 8024c28:	f200 80a5 	bhi.w	8024d76 <rmw_create_subscription+0x1c6>
 8024c2c:	462b      	mov	r3, r5
 8024c2e:	4a59      	ldr	r2, [pc, #356]	@ (8024d94 <rmw_create_subscription+0x1e4>)
 8024c30:	213c      	movs	r1, #60	@ 0x3c
 8024c32:	4650      	mov	r0, sl
 8024c34:	f003 f990 	bl	8027f58 <sniprintf>
 8024c38:	4639      	mov	r1, r7
 8024c3a:	2250      	movs	r2, #80	@ 0x50
 8024c3c:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 8024c40:	f8c8 9020 	str.w	r9, [r8, #32]
 8024c44:	f003 fc23 	bl	802848e <memcpy>
 8024c48:	4630      	mov	r0, r6
 8024c4a:	4953      	ldr	r1, [pc, #332]	@ (8024d98 <rmw_create_subscription+0x1e8>)
 8024c4c:	f7f7 fda2 	bl	801c794 <get_message_typesupport_handle>
 8024c50:	2800      	cmp	r0, #0
 8024c52:	f000 8090 	beq.w	8024d76 <rmw_create_subscription+0x1c6>
 8024c56:	6842      	ldr	r2, [r0, #4]
 8024c58:	f8c8 2018 	str.w	r2, [r8, #24]
 8024c5c:	2a00      	cmp	r2, #0
 8024c5e:	f000 808a 	beq.w	8024d76 <rmw_create_subscription+0x1c6>
 8024c62:	4629      	mov	r1, r5
 8024c64:	463b      	mov	r3, r7
 8024c66:	4648      	mov	r0, r9
 8024c68:	f7ff fc86 	bl	8024578 <create_topic>
 8024c6c:	f8c8 001c 	str.w	r0, [r8, #28]
 8024c70:	2800      	cmp	r0, #0
 8024c72:	f000 8085 	beq.w	8024d80 <rmw_create_subscription+0x1d0>
 8024c76:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8024c7a:	2104      	movs	r1, #4
 8024c7c:	2506      	movs	r5, #6
 8024c7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8024c82:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8024c86:	1c42      	adds	r2, r0, #1
 8024c88:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8024c8c:	f7f9 faec 	bl	801e268 <uxr_object_id>
 8024c90:	f8c8 0010 	str.w	r0, [r8, #16]
 8024c94:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8024c98:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8024c9c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8024ca0:	9500      	str	r5, [sp, #0]
 8024ca2:	6819      	ldr	r1, [r3, #0]
 8024ca4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8024ca8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8024cac:	f7f9 f9be 	bl	801e02c <uxr_buffer_create_subscriber_bin>
 8024cb0:	4602      	mov	r2, r0
 8024cb2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8024cb6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8024cba:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8024cbe:	f7f7 fce1 	bl	801c684 <run_xrce_session>
 8024cc2:	2800      	cmp	r0, #0
 8024cc4:	d057      	beq.n	8024d76 <rmw_create_subscription+0x1c6>
 8024cc6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8024cca:	4629      	mov	r1, r5
 8024ccc:	ae08      	add	r6, sp, #32
 8024cce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8024cd2:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8024cd6:	1c42      	adds	r2, r0, #1
 8024cd8:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8024cdc:	f7f9 fac4 	bl	801e268 <uxr_object_id>
 8024ce0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8024ce4:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8024ce8:	4639      	mov	r1, r7
 8024cea:	f8c8 0014 	str.w	r0, [r8, #20]
 8024cee:	4630      	mov	r0, r6
 8024cf0:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8024cf4:	9305      	str	r3, [sp, #20]
 8024cf6:	f7f7 fce1 	bl	801c6bc <convert_qos_profile>
 8024cfa:	9503      	str	r5, [sp, #12]
 8024cfc:	9b05      	ldr	r3, [sp, #20]
 8024cfe:	e896 0003 	ldmia.w	r6, {r0, r1}
 8024d02:	9001      	str	r0, [sp, #4]
 8024d04:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8024d08:	f8ad 1008 	strh.w	r1, [sp, #8]
 8024d0c:	691b      	ldr	r3, [r3, #16]
 8024d0e:	9300      	str	r3, [sp, #0]
 8024d10:	f8db 1000 	ldr.w	r1, [fp]
 8024d14:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 8024d18:	f7f9 fa2e 	bl	801e178 <uxr_buffer_create_datareader_bin>
 8024d1c:	4602      	mov	r2, r0
 8024d1e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8024d22:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8024d26:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8024d2a:	f7f7 fcab 	bl	801c684 <run_xrce_session>
 8024d2e:	b310      	cbz	r0, 8024d76 <rmw_create_subscription+0x1c6>
 8024d30:	7a3b      	ldrb	r3, [r7, #8]
 8024d32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8024d36:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8024d3a:	2b02      	cmp	r3, #2
 8024d3c:	920a      	str	r2, [sp, #40]	@ 0x28
 8024d3e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8024d42:	f04f 0200 	mov.w	r2, #0
 8024d46:	bf08      	it	eq
 8024d48:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8024d4c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8024d50:	bf18      	it	ne
 8024d52:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	@ 0xd4
 8024d56:	920b      	str	r2, [sp, #44]	@ 0x2c
 8024d58:	9307      	str	r3, [sp, #28]
 8024d5a:	ab0a      	add	r3, sp, #40	@ 0x28
 8024d5c:	9300      	str	r3, [sp, #0]
 8024d5e:	9b07      	ldr	r3, [sp, #28]
 8024d60:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8024d64:	6809      	ldr	r1, [r1, #0]
 8024d66:	f001 fadf 	bl	8026328 <uxr_buffer_request_data>
 8024d6a:	e000      	b.n	8024d6e <rmw_create_subscription+0x1be>
 8024d6c:	2400      	movs	r4, #0
 8024d6e:	4620      	mov	r0, r4
 8024d70:	b00d      	add	sp, #52	@ 0x34
 8024d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024d76:	f8d8 001c 	ldr.w	r0, [r8, #28]
 8024d7a:	b108      	cbz	r0, 8024d80 <rmw_create_subscription+0x1d0>
 8024d7c:	f7f7 fb74 	bl	801c468 <rmw_uxrce_fini_topic_memory>
 8024d80:	4620      	mov	r0, r4
 8024d82:	2400      	movs	r4, #0
 8024d84:	f7f7 fb2e 	bl	801c3e4 <rmw_uxrce_fini_subscription_memory>
 8024d88:	4620      	mov	r0, r4
 8024d8a:	b00d      	add	sp, #52	@ 0x34
 8024d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024d90:	20014e2c 	.word	0x20014e2c
 8024d94:	0802d000 	.word	0x0802d000
 8024d98:	0802cf68 	.word	0x0802cf68

08024d9c <rmw_subscription_get_actual_qos>:
 8024d9c:	b178      	cbz	r0, 8024dbe <rmw_subscription_get_actual_qos+0x22>
 8024d9e:	b510      	push	{r4, lr}
 8024da0:	fab1 f481 	clz	r4, r1
 8024da4:	0964      	lsrs	r4, r4, #5
 8024da6:	b141      	cbz	r1, 8024dba <rmw_subscription_get_actual_qos+0x1e>
 8024da8:	6843      	ldr	r3, [r0, #4]
 8024daa:	2250      	movs	r2, #80	@ 0x50
 8024dac:	4608      	mov	r0, r1
 8024dae:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8024db2:	f003 fb6c 	bl	802848e <memcpy>
 8024db6:	4620      	mov	r0, r4
 8024db8:	bd10      	pop	{r4, pc}
 8024dba:	200b      	movs	r0, #11
 8024dbc:	bd10      	pop	{r4, pc}
 8024dbe:	200b      	movs	r0, #11
 8024dc0:	4770      	bx	lr
 8024dc2:	bf00      	nop

08024dc4 <rmw_destroy_subscription>:
 8024dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024dc8:	b128      	cbz	r0, 8024dd6 <rmw_destroy_subscription+0x12>
 8024dca:	4604      	mov	r4, r0
 8024dcc:	6800      	ldr	r0, [r0, #0]
 8024dce:	460d      	mov	r5, r1
 8024dd0:	f7f7 fcd2 	bl	801c778 <is_uxrce_rmw_identifier_valid>
 8024dd4:	b918      	cbnz	r0, 8024dde <rmw_destroy_subscription+0x1a>
 8024dd6:	2401      	movs	r4, #1
 8024dd8:	4620      	mov	r0, r4
 8024dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024dde:	6863      	ldr	r3, [r4, #4]
 8024de0:	2b00      	cmp	r3, #0
 8024de2:	d0f8      	beq.n	8024dd6 <rmw_destroy_subscription+0x12>
 8024de4:	fab5 f485 	clz	r4, r5
 8024de8:	0964      	lsrs	r4, r4, #5
 8024dea:	2d00      	cmp	r5, #0
 8024dec:	d0f3      	beq.n	8024dd6 <rmw_destroy_subscription+0x12>
 8024dee:	6828      	ldr	r0, [r5, #0]
 8024df0:	f7f7 fcc2 	bl	801c778 <is_uxrce_rmw_identifier_valid>
 8024df4:	2800      	cmp	r0, #0
 8024df6:	d0ee      	beq.n	8024dd6 <rmw_destroy_subscription+0x12>
 8024df8:	686e      	ldr	r6, [r5, #4]
 8024dfa:	2e00      	cmp	r6, #0
 8024dfc:	d0eb      	beq.n	8024dd6 <rmw_destroy_subscription+0x12>
 8024dfe:	6a37      	ldr	r7, [r6, #32]
 8024e00:	6972      	ldr	r2, [r6, #20]
 8024e02:	6938      	ldr	r0, [r7, #16]
 8024e04:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8024e08:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8024e0c:	6819      	ldr	r1, [r3, #0]
 8024e0e:	f001 fac5 	bl	802639c <uxr_buffer_cancel_data>
 8024e12:	4602      	mov	r2, r0
 8024e14:	6938      	ldr	r0, [r7, #16]
 8024e16:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8024e1a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8024e1e:	f7f7 fc31 	bl	801c684 <run_xrce_session>
 8024e22:	69f0      	ldr	r0, [r6, #28]
 8024e24:	f7ff fbf8 	bl	8024618 <destroy_topic>
 8024e28:	6a33      	ldr	r3, [r6, #32]
 8024e2a:	6972      	ldr	r2, [r6, #20]
 8024e2c:	6918      	ldr	r0, [r3, #16]
 8024e2e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8024e32:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8024e36:	6819      	ldr	r1, [r3, #0]
 8024e38:	f7f9 f814 	bl	801de64 <uxr_buffer_delete_entity>
 8024e3c:	6a33      	ldr	r3, [r6, #32]
 8024e3e:	4680      	mov	r8, r0
 8024e40:	6932      	ldr	r2, [r6, #16]
 8024e42:	6918      	ldr	r0, [r3, #16]
 8024e44:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8024e48:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8024e4c:	6819      	ldr	r1, [r3, #0]
 8024e4e:	f7f9 f809 	bl	801de64 <uxr_buffer_delete_entity>
 8024e52:	4606      	mov	r6, r0
 8024e54:	6938      	ldr	r0, [r7, #16]
 8024e56:	4642      	mov	r2, r8
 8024e58:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8024e5c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8024e60:	f7f7 fc10 	bl	801c684 <run_xrce_session>
 8024e64:	693f      	ldr	r7, [r7, #16]
 8024e66:	4632      	mov	r2, r6
 8024e68:	4606      	mov	r6, r0
 8024e6a:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8024e6e:	4638      	mov	r0, r7
 8024e70:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8024e74:	f7f7 fc06 	bl	801c684 <run_xrce_session>
 8024e78:	b126      	cbz	r6, 8024e84 <rmw_destroy_subscription+0xc0>
 8024e7a:	b118      	cbz	r0, 8024e84 <rmw_destroy_subscription+0xc0>
 8024e7c:	4628      	mov	r0, r5
 8024e7e:	f7f7 fab1 	bl	801c3e4 <rmw_uxrce_fini_subscription_memory>
 8024e82:	e7a9      	b.n	8024dd8 <rmw_destroy_subscription+0x14>
 8024e84:	2402      	movs	r4, #2
 8024e86:	e7f9      	b.n	8024e7c <rmw_destroy_subscription+0xb8>

08024e88 <rmw_take_with_info>:
 8024e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024e8a:	4604      	mov	r4, r0
 8024e8c:	6800      	ldr	r0, [r0, #0]
 8024e8e:	b089      	sub	sp, #36	@ 0x24
 8024e90:	460f      	mov	r7, r1
 8024e92:	4615      	mov	r5, r2
 8024e94:	b128      	cbz	r0, 8024ea2 <rmw_take_with_info+0x1a>
 8024e96:	4b24      	ldr	r3, [pc, #144]	@ (8024f28 <rmw_take_with_info+0xa0>)
 8024e98:	6819      	ldr	r1, [r3, #0]
 8024e9a:	f7db f9d1 	bl	8000240 <strcmp>
 8024e9e:	2800      	cmp	r0, #0
 8024ea0:	d13e      	bne.n	8024f20 <rmw_take_with_info+0x98>
 8024ea2:	b305      	cbz	r5, 8024ee6 <rmw_take_with_info+0x5e>
 8024ea4:	2300      	movs	r3, #0
 8024ea6:	6864      	ldr	r4, [r4, #4]
 8024ea8:	702b      	strb	r3, [r5, #0]
 8024eaa:	f7f7 fb6d 	bl	801c588 <rmw_uxrce_clean_expired_static_input_buffer>
 8024eae:	4620      	mov	r0, r4
 8024eb0:	f7f7 fb40 	bl	801c534 <rmw_uxrce_find_static_input_buffer_by_owner>
 8024eb4:	4606      	mov	r6, r0
 8024eb6:	b1f0      	cbz	r0, 8024ef6 <rmw_take_with_info+0x6e>
 8024eb8:	6881      	ldr	r1, [r0, #8]
 8024eba:	4668      	mov	r0, sp
 8024ebc:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8024ec0:	3110      	adds	r1, #16
 8024ec2:	f7f5 fd59 	bl	801a978 <ucdr_init_buffer>
 8024ec6:	69a3      	ldr	r3, [r4, #24]
 8024ec8:	4639      	mov	r1, r7
 8024eca:	4668      	mov	r0, sp
 8024ecc:	68db      	ldr	r3, [r3, #12]
 8024ece:	4798      	blx	r3
 8024ed0:	4604      	mov	r4, r0
 8024ed2:	4631      	mov	r1, r6
 8024ed4:	4815      	ldr	r0, [pc, #84]	@ (8024f2c <rmw_take_with_info+0xa4>)
 8024ed6:	f7ff f869 	bl	8023fac <put_memory>
 8024eda:	702c      	strb	r4, [r5, #0]
 8024edc:	f084 0001 	eor.w	r0, r4, #1
 8024ee0:	b2c0      	uxtb	r0, r0
 8024ee2:	b009      	add	sp, #36	@ 0x24
 8024ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024ee6:	6864      	ldr	r4, [r4, #4]
 8024ee8:	f7f7 fb4e 	bl	801c588 <rmw_uxrce_clean_expired_static_input_buffer>
 8024eec:	4620      	mov	r0, r4
 8024eee:	f7f7 fb21 	bl	801c534 <rmw_uxrce_find_static_input_buffer_by_owner>
 8024ef2:	4605      	mov	r5, r0
 8024ef4:	b910      	cbnz	r0, 8024efc <rmw_take_with_info+0x74>
 8024ef6:	2001      	movs	r0, #1
 8024ef8:	b009      	add	sp, #36	@ 0x24
 8024efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024efc:	68a9      	ldr	r1, [r5, #8]
 8024efe:	4668      	mov	r0, sp
 8024f00:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8024f04:	3110      	adds	r1, #16
 8024f06:	f7f5 fd37 	bl	801a978 <ucdr_init_buffer>
 8024f0a:	69a3      	ldr	r3, [r4, #24]
 8024f0c:	4639      	mov	r1, r7
 8024f0e:	4668      	mov	r0, sp
 8024f10:	68db      	ldr	r3, [r3, #12]
 8024f12:	4798      	blx	r3
 8024f14:	4629      	mov	r1, r5
 8024f16:	4604      	mov	r4, r0
 8024f18:	4804      	ldr	r0, [pc, #16]	@ (8024f2c <rmw_take_with_info+0xa4>)
 8024f1a:	f7ff f847 	bl	8023fac <put_memory>
 8024f1e:	e7dd      	b.n	8024edc <rmw_take_with_info+0x54>
 8024f20:	200c      	movs	r0, #12
 8024f22:	b009      	add	sp, #36	@ 0x24
 8024f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024f26:	bf00      	nop
 8024f28:	0802dc08 	.word	0x0802dc08
 8024f2c:	20014e1c 	.word	0x20014e1c

08024f30 <rmw_uxrce_transport_init>:
 8024f30:	b508      	push	{r3, lr}
 8024f32:	b108      	cbz	r0, 8024f38 <rmw_uxrce_transport_init+0x8>
 8024f34:	f100 0210 	add.w	r2, r0, #16
 8024f38:	b139      	cbz	r1, 8024f4a <rmw_uxrce_transport_init+0x1a>
 8024f3a:	6949      	ldr	r1, [r1, #20]
 8024f3c:	4610      	mov	r0, r2
 8024f3e:	f000 fc6f 	bl	8025820 <uxr_init_custom_transport>
 8024f42:	f080 0001 	eor.w	r0, r0, #1
 8024f46:	b2c0      	uxtb	r0, r0
 8024f48:	bd08      	pop	{r3, pc}
 8024f4a:	4b04      	ldr	r3, [pc, #16]	@ (8024f5c <rmw_uxrce_transport_init+0x2c>)
 8024f4c:	4610      	mov	r0, r2
 8024f4e:	6859      	ldr	r1, [r3, #4]
 8024f50:	f000 fc66 	bl	8025820 <uxr_init_custom_transport>
 8024f54:	f080 0001 	eor.w	r0, r0, #1
 8024f58:	b2c0      	uxtb	r0, r0
 8024f5a:	bd08      	pop	{r3, pc}
 8024f5c:	200104f4 	.word	0x200104f4

08024f60 <rmw_wait>:
 8024f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024f64:	4698      	mov	r8, r3
 8024f66:	ea40 0301 	orr.w	r3, r0, r1
 8024f6a:	b089      	sub	sp, #36	@ 0x24
 8024f6c:	ea48 0303 	orr.w	r3, r8, r3
 8024f70:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8024f72:	4313      	orrs	r3, r2
 8024f74:	f000 8106 	beq.w	8025184 <rmw_wait+0x224>
 8024f78:	4605      	mov	r5, r0
 8024f7a:	460e      	mov	r6, r1
 8024f7c:	4691      	mov	r9, r2
 8024f7e:	b16c      	cbz	r4, 8024f9c <rmw_wait+0x3c>
 8024f80:	4ba6      	ldr	r3, [pc, #664]	@ (802521c <rmw_wait+0x2bc>)
 8024f82:	af04      	add	r7, sp, #16
 8024f84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024f86:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8024f8a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8024f8e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8024f92:	f7fe fe1d 	bl	8023bd0 <rmw_time_equal>
 8024f96:	2800      	cmp	r0, #0
 8024f98:	f000 810b 	beq.w	80251b2 <rmw_wait+0x252>
 8024f9c:	f04f 37ff 	mov.w	r7, #4294967295
 8024fa0:	f7f7 faf2 	bl	801c588 <rmw_uxrce_clean_expired_static_input_buffer>
 8024fa4:	4b9e      	ldr	r3, [pc, #632]	@ (8025220 <rmw_wait+0x2c0>)
 8024fa6:	681c      	ldr	r4, [r3, #0]
 8024fa8:	b14c      	cbz	r4, 8024fbe <rmw_wait+0x5e>
 8024faa:	4623      	mov	r3, r4
 8024fac:	2100      	movs	r1, #0
 8024fae:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8024fb2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8024fb6:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8024fba:	2b00      	cmp	r3, #0
 8024fbc:	d1f7      	bne.n	8024fae <rmw_wait+0x4e>
 8024fbe:	f1b9 0f00 	cmp.w	r9, #0
 8024fc2:	d011      	beq.n	8024fe8 <rmw_wait+0x88>
 8024fc4:	f8d9 1000 	ldr.w	r1, [r9]
 8024fc8:	b171      	cbz	r1, 8024fe8 <rmw_wait+0x88>
 8024fca:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8024fce:	2300      	movs	r3, #0
 8024fd0:	2001      	movs	r0, #1
 8024fd2:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8024fd6:	3301      	adds	r3, #1
 8024fd8:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8024fda:	4299      	cmp	r1, r3
 8024fdc:	6912      	ldr	r2, [r2, #16]
 8024fde:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8024fe2:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8024fe6:	d1f4      	bne.n	8024fd2 <rmw_wait+0x72>
 8024fe8:	f1b8 0f00 	cmp.w	r8, #0
 8024fec:	d011      	beq.n	8025012 <rmw_wait+0xb2>
 8024fee:	f8d8 1000 	ldr.w	r1, [r8]
 8024ff2:	b171      	cbz	r1, 8025012 <rmw_wait+0xb2>
 8024ff4:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8024ff8:	2300      	movs	r3, #0
 8024ffa:	2001      	movs	r0, #1
 8024ffc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8025000:	3301      	adds	r3, #1
 8025002:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8025004:	4299      	cmp	r1, r3
 8025006:	6912      	ldr	r2, [r2, #16]
 8025008:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 802500c:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8025010:	d1f4      	bne.n	8024ffc <rmw_wait+0x9c>
 8025012:	b185      	cbz	r5, 8025036 <rmw_wait+0xd6>
 8025014:	6829      	ldr	r1, [r5, #0]
 8025016:	b171      	cbz	r1, 8025036 <rmw_wait+0xd6>
 8025018:	f8d5 c004 	ldr.w	ip, [r5, #4]
 802501c:	2300      	movs	r3, #0
 802501e:	2001      	movs	r0, #1
 8025020:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8025024:	3301      	adds	r3, #1
 8025026:	6a12      	ldr	r2, [r2, #32]
 8025028:	4299      	cmp	r1, r3
 802502a:	6912      	ldr	r2, [r2, #16]
 802502c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8025030:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8025034:	d1f4      	bne.n	8025020 <rmw_wait+0xc0>
 8025036:	b344      	cbz	r4, 802508a <rmw_wait+0x12a>
 8025038:	4622      	mov	r2, r4
 802503a:	2300      	movs	r3, #0
 802503c:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8025040:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8025044:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8025048:	440b      	add	r3, r1
 802504a:	b2db      	uxtb	r3, r3
 802504c:	2a00      	cmp	r2, #0
 802504e:	d1f5      	bne.n	802503c <rmw_wait+0xdc>
 8025050:	2b00      	cmp	r3, #0
 8025052:	d05f      	beq.n	8025114 <rmw_wait+0x1b4>
 8025054:	1c7a      	adds	r2, r7, #1
 8025056:	d00d      	beq.n	8025074 <rmw_wait+0x114>
 8025058:	ee07 7a90 	vmov	s15, r7
 802505c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8025060:	ee07 3a90 	vmov	s15, r3
 8025064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8025068:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802506c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8025070:	ee17 7a90 	vmov	r7, s15
 8025074:	68a0      	ldr	r0, [r4, #8]
 8025076:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 802507a:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 802507e:	2b00      	cmp	r3, #0
 8025080:	f040 808d 	bne.w	802519e <rmw_wait+0x23e>
 8025084:	6864      	ldr	r4, [r4, #4]
 8025086:	2c00      	cmp	r4, #0
 8025088:	d1f4      	bne.n	8025074 <rmw_wait+0x114>
 802508a:	f1b9 0f00 	cmp.w	r9, #0
 802508e:	f000 80a1 	beq.w	80251d4 <rmw_wait+0x274>
 8025092:	f8d9 7000 	ldr.w	r7, [r9]
 8025096:	2f00      	cmp	r7, #0
 8025098:	f000 80a4 	beq.w	80251e4 <rmw_wait+0x284>
 802509c:	2400      	movs	r4, #0
 802509e:	4627      	mov	r7, r4
 80250a0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80250a4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80250a8:	f7f7 fa44 	bl	801c534 <rmw_uxrce_find_static_input_buffer_by_owner>
 80250ac:	2800      	cmp	r0, #0
 80250ae:	d03b      	beq.n	8025128 <rmw_wait+0x1c8>
 80250b0:	3401      	adds	r4, #1
 80250b2:	f8d9 3000 	ldr.w	r3, [r9]
 80250b6:	2701      	movs	r7, #1
 80250b8:	42a3      	cmp	r3, r4
 80250ba:	d8f1      	bhi.n	80250a0 <rmw_wait+0x140>
 80250bc:	2701      	movs	r7, #1
 80250be:	f1b8 0f00 	cmp.w	r8, #0
 80250c2:	d010      	beq.n	80250e6 <rmw_wait+0x186>
 80250c4:	f8d8 3000 	ldr.w	r3, [r8]
 80250c8:	b16b      	cbz	r3, 80250e6 <rmw_wait+0x186>
 80250ca:	2400      	movs	r4, #0
 80250cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80250d0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80250d4:	f7f7 fa2e 	bl	801c534 <rmw_uxrce_find_static_input_buffer_by_owner>
 80250d8:	b370      	cbz	r0, 8025138 <rmw_wait+0x1d8>
 80250da:	3401      	adds	r4, #1
 80250dc:	f8d8 3000 	ldr.w	r3, [r8]
 80250e0:	2701      	movs	r7, #1
 80250e2:	42a3      	cmp	r3, r4
 80250e4:	d8f2      	bhi.n	80250cc <rmw_wait+0x16c>
 80250e6:	2d00      	cmp	r5, #0
 80250e8:	d035      	beq.n	8025156 <rmw_wait+0x1f6>
 80250ea:	682b      	ldr	r3, [r5, #0]
 80250ec:	b39b      	cbz	r3, 8025156 <rmw_wait+0x1f6>
 80250ee:	2400      	movs	r4, #0
 80250f0:	686b      	ldr	r3, [r5, #4]
 80250f2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80250f6:	f7f7 fa1d 	bl	801c534 <rmw_uxrce_find_static_input_buffer_by_owner>
 80250fa:	b328      	cbz	r0, 8025148 <rmw_wait+0x1e8>
 80250fc:	3401      	adds	r4, #1
 80250fe:	682b      	ldr	r3, [r5, #0]
 8025100:	2701      	movs	r7, #1
 8025102:	42a3      	cmp	r3, r4
 8025104:	d8f4      	bhi.n	80250f0 <rmw_wait+0x190>
 8025106:	2e00      	cmp	r6, #0
 8025108:	d03c      	beq.n	8025184 <rmw_wait+0x224>
 802510a:	6834      	ldr	r4, [r6, #0]
 802510c:	2c00      	cmp	r4, #0
 802510e:	d039      	beq.n	8025184 <rmw_wait+0x224>
 8025110:	2701      	movs	r7, #1
 8025112:	e023      	b.n	802515c <rmw_wait+0x1fc>
 8025114:	68a0      	ldr	r0, [r4, #8]
 8025116:	2100      	movs	r1, #0
 8025118:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 802511c:	f7f9 fd76 	bl	801ec0c <uxr_run_session_timeout>
 8025120:	6864      	ldr	r4, [r4, #4]
 8025122:	2c00      	cmp	r4, #0
 8025124:	d1f6      	bne.n	8025114 <rmw_wait+0x1b4>
 8025126:	e7b0      	b.n	802508a <rmw_wait+0x12a>
 8025128:	e9d9 3200 	ldrd	r3, r2, [r9]
 802512c:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8025130:	3401      	adds	r4, #1
 8025132:	42a3      	cmp	r3, r4
 8025134:	d8b4      	bhi.n	80250a0 <rmw_wait+0x140>
 8025136:	e7c2      	b.n	80250be <rmw_wait+0x15e>
 8025138:	e9d8 3200 	ldrd	r3, r2, [r8]
 802513c:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8025140:	3401      	adds	r4, #1
 8025142:	429c      	cmp	r4, r3
 8025144:	d3c2      	bcc.n	80250cc <rmw_wait+0x16c>
 8025146:	e7ce      	b.n	80250e6 <rmw_wait+0x186>
 8025148:	e9d5 3200 	ldrd	r3, r2, [r5]
 802514c:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8025150:	3401      	adds	r4, #1
 8025152:	42a3      	cmp	r3, r4
 8025154:	d8cc      	bhi.n	80250f0 <rmw_wait+0x190>
 8025156:	b1a6      	cbz	r6, 8025182 <rmw_wait+0x222>
 8025158:	6834      	ldr	r4, [r6, #0]
 802515a:	b194      	cbz	r4, 8025182 <rmw_wait+0x222>
 802515c:	2300      	movs	r3, #0
 802515e:	461d      	mov	r5, r3
 8025160:	e004      	b.n	802516c <rmw_wait+0x20c>
 8025162:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8025166:	3301      	adds	r3, #1
 8025168:	42a3      	cmp	r3, r4
 802516a:	d00a      	beq.n	8025182 <rmw_wait+0x222>
 802516c:	6870      	ldr	r0, [r6, #4]
 802516e:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8025172:	7c0a      	ldrb	r2, [r1, #16]
 8025174:	2a00      	cmp	r2, #0
 8025176:	d0f4      	beq.n	8025162 <rmw_wait+0x202>
 8025178:	3301      	adds	r3, #1
 802517a:	4617      	mov	r7, r2
 802517c:	740d      	strb	r5, [r1, #16]
 802517e:	42a3      	cmp	r3, r4
 8025180:	d1f4      	bne.n	802516c <rmw_wait+0x20c>
 8025182:	b147      	cbz	r7, 8025196 <rmw_wait+0x236>
 8025184:	2000      	movs	r0, #0
 8025186:	b009      	add	sp, #36	@ 0x24
 8025188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802518c:	b11e      	cbz	r6, 8025196 <rmw_wait+0x236>
 802518e:	6834      	ldr	r4, [r6, #0]
 8025190:	462f      	mov	r7, r5
 8025192:	2c00      	cmp	r4, #0
 8025194:	d1e2      	bne.n	802515c <rmw_wait+0x1fc>
 8025196:	2002      	movs	r0, #2
 8025198:	b009      	add	sp, #36	@ 0x24
 802519a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802519e:	4639      	mov	r1, r7
 80251a0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80251a4:	f7f9 fd4c 	bl	801ec40 <uxr_run_session_until_data>
 80251a8:	6864      	ldr	r4, [r4, #4]
 80251aa:	2c00      	cmp	r4, #0
 80251ac:	f47f af62 	bne.w	8025074 <rmw_wait+0x114>
 80251b0:	e76b      	b.n	802508a <rmw_wait+0x12a>
 80251b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80251b6:	f7fe fd61 	bl	8023c7c <rmw_time_total_nsec>
 80251ba:	2300      	movs	r3, #0
 80251bc:	4a19      	ldr	r2, [pc, #100]	@ (8025224 <rmw_wait+0x2c4>)
 80251be:	f7db f8f7 	bl	80003b0 <__aeabi_uldivmod>
 80251c2:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80251c6:	4607      	mov	r7, r0
 80251c8:	f171 0300 	sbcs.w	r3, r1, #0
 80251cc:	bfa8      	it	ge
 80251ce:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 80251d2:	e6e5      	b.n	8024fa0 <rmw_wait+0x40>
 80251d4:	f1b8 0f00 	cmp.w	r8, #0
 80251d8:	d00f      	beq.n	80251fa <rmw_wait+0x29a>
 80251da:	f8d8 3000 	ldr.w	r3, [r8]
 80251de:	b193      	cbz	r3, 8025206 <rmw_wait+0x2a6>
 80251e0:	464f      	mov	r7, r9
 80251e2:	e772      	b.n	80250ca <rmw_wait+0x16a>
 80251e4:	f1b8 0f00 	cmp.w	r8, #0
 80251e8:	d007      	beq.n	80251fa <rmw_wait+0x29a>
 80251ea:	f8d8 3000 	ldr.w	r3, [r8]
 80251ee:	2b00      	cmp	r3, #0
 80251f0:	f47f af6b 	bne.w	80250ca <rmw_wait+0x16a>
 80251f4:	b155      	cbz	r5, 802520c <rmw_wait+0x2ac>
 80251f6:	461f      	mov	r7, r3
 80251f8:	e777      	b.n	80250ea <rmw_wait+0x18a>
 80251fa:	2d00      	cmp	r5, #0
 80251fc:	d0c6      	beq.n	802518c <rmw_wait+0x22c>
 80251fe:	682b      	ldr	r3, [r5, #0]
 8025200:	b143      	cbz	r3, 8025214 <rmw_wait+0x2b4>
 8025202:	4647      	mov	r7, r8
 8025204:	e773      	b.n	80250ee <rmw_wait+0x18e>
 8025206:	b10d      	cbz	r5, 802520c <rmw_wait+0x2ac>
 8025208:	464f      	mov	r7, r9
 802520a:	e76e      	b.n	80250ea <rmw_wait+0x18a>
 802520c:	462f      	mov	r7, r5
 802520e:	2e00      	cmp	r6, #0
 8025210:	d1a2      	bne.n	8025158 <rmw_wait+0x1f8>
 8025212:	e7c0      	b.n	8025196 <rmw_wait+0x236>
 8025214:	4647      	mov	r7, r8
 8025216:	2e00      	cmp	r6, #0
 8025218:	d19e      	bne.n	8025158 <rmw_wait+0x1f8>
 802521a:	e7bc      	b.n	8025196 <rmw_wait+0x236>
 802521c:	0802ccc8 	.word	0x0802ccc8
 8025220:	20014e0c 	.word	0x20014e0c
 8025224:	000f4240 	.word	0x000f4240

08025228 <rmw_create_wait_set>:
 8025228:	b508      	push	{r3, lr}
 802522a:	4803      	ldr	r0, [pc, #12]	@ (8025238 <rmw_create_wait_set+0x10>)
 802522c:	f7fe feae 	bl	8023f8c <get_memory>
 8025230:	b108      	cbz	r0, 8025236 <rmw_create_wait_set+0xe>
 8025232:	6880      	ldr	r0, [r0, #8]
 8025234:	3010      	adds	r0, #16
 8025236:	bd08      	pop	{r3, pc}
 8025238:	20014e4c 	.word	0x20014e4c

0802523c <rmw_destroy_wait_set>:
 802523c:	b508      	push	{r3, lr}
 802523e:	4b08      	ldr	r3, [pc, #32]	@ (8025260 <rmw_destroy_wait_set+0x24>)
 8025240:	6819      	ldr	r1, [r3, #0]
 8025242:	b911      	cbnz	r1, 802524a <rmw_destroy_wait_set+0xe>
 8025244:	e00a      	b.n	802525c <rmw_destroy_wait_set+0x20>
 8025246:	6849      	ldr	r1, [r1, #4]
 8025248:	b141      	cbz	r1, 802525c <rmw_destroy_wait_set+0x20>
 802524a:	688b      	ldr	r3, [r1, #8]
 802524c:	3310      	adds	r3, #16
 802524e:	4298      	cmp	r0, r3
 8025250:	d1f9      	bne.n	8025246 <rmw_destroy_wait_set+0xa>
 8025252:	4803      	ldr	r0, [pc, #12]	@ (8025260 <rmw_destroy_wait_set+0x24>)
 8025254:	f7fe feaa 	bl	8023fac <put_memory>
 8025258:	2000      	movs	r0, #0
 802525a:	bd08      	pop	{r3, pc}
 802525c:	2001      	movs	r0, #1
 802525e:	bd08      	pop	{r3, pc}
 8025260:	20014e4c 	.word	0x20014e4c

08025264 <rmw_uros_epoch_nanos>:
 8025264:	4b05      	ldr	r3, [pc, #20]	@ (802527c <rmw_uros_epoch_nanos+0x18>)
 8025266:	681b      	ldr	r3, [r3, #0]
 8025268:	b123      	cbz	r3, 8025274 <rmw_uros_epoch_nanos+0x10>
 802526a:	6898      	ldr	r0, [r3, #8]
 802526c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8025270:	f7f9 b942 	b.w	801e4f8 <uxr_epoch_nanos>
 8025274:	2000      	movs	r0, #0
 8025276:	2100      	movs	r1, #0
 8025278:	4770      	bx	lr
 802527a:	bf00      	nop
 802527c:	20014e0c 	.word	0x20014e0c

08025280 <sensor_msgs__msg__JointState__init>:
 8025280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025284:	4605      	mov	r5, r0
 8025286:	2800      	cmp	r0, #0
 8025288:	d04a      	beq.n	8025320 <sensor_msgs__msg__JointState__init+0xa0>
 802528a:	f000 f883 	bl	8025394 <std_msgs__msg__Header__init>
 802528e:	4604      	mov	r4, r0
 8025290:	b380      	cbz	r0, 80252f4 <sensor_msgs__msg__JointState__init+0x74>
 8025292:	f105 0614 	add.w	r6, r5, #20
 8025296:	2100      	movs	r1, #0
 8025298:	4630      	mov	r0, r6
 802529a:	f7f7 fb11 	bl	801c8c0 <rosidl_runtime_c__String__Sequence__init>
 802529e:	4604      	mov	r4, r0
 80252a0:	2800      	cmp	r0, #0
 80252a2:	d049      	beq.n	8025338 <sensor_msgs__msg__JointState__init+0xb8>
 80252a4:	f105 0720 	add.w	r7, r5, #32
 80252a8:	2100      	movs	r1, #0
 80252aa:	4638      	mov	r0, r7
 80252ac:	f7f7 fa7e 	bl	801c7ac <rosidl_runtime_c__double__Sequence__init>
 80252b0:	4604      	mov	r4, r0
 80252b2:	b3c8      	cbz	r0, 8025328 <sensor_msgs__msg__JointState__init+0xa8>
 80252b4:	f105 082c 	add.w	r8, r5, #44	@ 0x2c
 80252b8:	2100      	movs	r1, #0
 80252ba:	4640      	mov	r0, r8
 80252bc:	f7f7 fa76 	bl	801c7ac <rosidl_runtime_c__double__Sequence__init>
 80252c0:	4604      	mov	r4, r0
 80252c2:	b3f0      	cbz	r0, 8025342 <sensor_msgs__msg__JointState__init+0xc2>
 80252c4:	f105 0938 	add.w	r9, r5, #56	@ 0x38
 80252c8:	2100      	movs	r1, #0
 80252ca:	4648      	mov	r0, r9
 80252cc:	f7f7 fa6e 	bl	801c7ac <rosidl_runtime_c__double__Sequence__init>
 80252d0:	4604      	mov	r4, r0
 80252d2:	bb10      	cbnz	r0, 802531a <sensor_msgs__msg__JointState__init+0x9a>
 80252d4:	4628      	mov	r0, r5
 80252d6:	f000 f881 	bl	80253dc <std_msgs__msg__Header__fini>
 80252da:	4630      	mov	r0, r6
 80252dc:	f7f7 fb38 	bl	801c950 <rosidl_runtime_c__String__Sequence__fini>
 80252e0:	4638      	mov	r0, r7
 80252e2:	f7f7 fa7b 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 80252e6:	4640      	mov	r0, r8
 80252e8:	f7f7 fa78 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 80252ec:	4648      	mov	r0, r9
 80252ee:	f7f7 fa75 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 80252f2:	e012      	b.n	802531a <sensor_msgs__msg__JointState__init+0x9a>
 80252f4:	4628      	mov	r0, r5
 80252f6:	f000 f871 	bl	80253dc <std_msgs__msg__Header__fini>
 80252fa:	f105 0014 	add.w	r0, r5, #20
 80252fe:	f7f7 fb27 	bl	801c950 <rosidl_runtime_c__String__Sequence__fini>
 8025302:	f105 0020 	add.w	r0, r5, #32
 8025306:	f7f7 fa69 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 802530a:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 802530e:	f7f7 fa65 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 8025312:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 8025316:	f7f7 fa61 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 802531a:	4620      	mov	r0, r4
 802531c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025320:	4604      	mov	r4, r0
 8025322:	4620      	mov	r0, r4
 8025324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025328:	4628      	mov	r0, r5
 802532a:	f000 f857 	bl	80253dc <std_msgs__msg__Header__fini>
 802532e:	4630      	mov	r0, r6
 8025330:	f7f7 fb0e 	bl	801c950 <rosidl_runtime_c__String__Sequence__fini>
 8025334:	4638      	mov	r0, r7
 8025336:	e7e6      	b.n	8025306 <sensor_msgs__msg__JointState__init+0x86>
 8025338:	4628      	mov	r0, r5
 802533a:	f000 f84f 	bl	80253dc <std_msgs__msg__Header__fini>
 802533e:	4630      	mov	r0, r6
 8025340:	e7dd      	b.n	80252fe <sensor_msgs__msg__JointState__init+0x7e>
 8025342:	4628      	mov	r0, r5
 8025344:	f000 f84a 	bl	80253dc <std_msgs__msg__Header__fini>
 8025348:	4630      	mov	r0, r6
 802534a:	f7f7 fb01 	bl	801c950 <rosidl_runtime_c__String__Sequence__fini>
 802534e:	4638      	mov	r0, r7
 8025350:	f7f7 fa44 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 8025354:	4640      	mov	r0, r8
 8025356:	f7f7 fa41 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 802535a:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 802535e:	f7f7 fa3d 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 8025362:	e7da      	b.n	802531a <sensor_msgs__msg__JointState__init+0x9a>

08025364 <sensor_msgs__msg__JointState__fini>:
 8025364:	b1a8      	cbz	r0, 8025392 <sensor_msgs__msg__JointState__fini+0x2e>
 8025366:	b510      	push	{r4, lr}
 8025368:	4604      	mov	r4, r0
 802536a:	f000 f837 	bl	80253dc <std_msgs__msg__Header__fini>
 802536e:	f104 0014 	add.w	r0, r4, #20
 8025372:	f7f7 faed 	bl	801c950 <rosidl_runtime_c__String__Sequence__fini>
 8025376:	f104 0020 	add.w	r0, r4, #32
 802537a:	f7f7 fa2f 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 802537e:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8025382:	f7f7 fa2b 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 8025386:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 802538a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802538e:	f7f7 ba25 	b.w	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 8025392:	4770      	bx	lr

08025394 <std_msgs__msg__Header__init>:
 8025394:	b570      	push	{r4, r5, r6, lr}
 8025396:	4605      	mov	r5, r0
 8025398:	b1a8      	cbz	r0, 80253c6 <std_msgs__msg__Header__init+0x32>
 802539a:	f000 f99d 	bl	80256d8 <builtin_interfaces__msg__Time__init>
 802539e:	4604      	mov	r4, r0
 80253a0:	b140      	cbz	r0, 80253b4 <std_msgs__msg__Header__init+0x20>
 80253a2:	f105 0608 	add.w	r6, r5, #8
 80253a6:	4630      	mov	r0, r6
 80253a8:	f7f7 fa2c 	bl	801c804 <rosidl_runtime_c__String__init>
 80253ac:	4604      	mov	r4, r0
 80253ae:	b168      	cbz	r0, 80253cc <std_msgs__msg__Header__init+0x38>
 80253b0:	4620      	mov	r0, r4
 80253b2:	bd70      	pop	{r4, r5, r6, pc}
 80253b4:	4628      	mov	r0, r5
 80253b6:	f000 f993 	bl	80256e0 <builtin_interfaces__msg__Time__fini>
 80253ba:	f105 0008 	add.w	r0, r5, #8
 80253be:	f7f7 fa37 	bl	801c830 <rosidl_runtime_c__String__fini>
 80253c2:	4620      	mov	r0, r4
 80253c4:	bd70      	pop	{r4, r5, r6, pc}
 80253c6:	4604      	mov	r4, r0
 80253c8:	4620      	mov	r0, r4
 80253ca:	bd70      	pop	{r4, r5, r6, pc}
 80253cc:	4628      	mov	r0, r5
 80253ce:	f000 f987 	bl	80256e0 <builtin_interfaces__msg__Time__fini>
 80253d2:	4630      	mov	r0, r6
 80253d4:	f7f7 fa2c 	bl	801c830 <rosidl_runtime_c__String__fini>
 80253d8:	e7ea      	b.n	80253b0 <std_msgs__msg__Header__init+0x1c>
 80253da:	bf00      	nop

080253dc <std_msgs__msg__Header__fini>:
 80253dc:	b148      	cbz	r0, 80253f2 <std_msgs__msg__Header__fini+0x16>
 80253de:	b510      	push	{r4, lr}
 80253e0:	4604      	mov	r4, r0
 80253e2:	f000 f97d 	bl	80256e0 <builtin_interfaces__msg__Time__fini>
 80253e6:	f104 0008 	add.w	r0, r4, #8
 80253ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80253ee:	f7f7 ba1f 	b.w	801c830 <rosidl_runtime_c__String__fini>
 80253f2:	4770      	bx	lr

080253f4 <trajectory_msgs__msg__JointTrajectory__init>:
 80253f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80253f6:	4605      	mov	r5, r0
 80253f8:	b310      	cbz	r0, 8025440 <trajectory_msgs__msg__JointTrajectory__init+0x4c>
 80253fa:	f7ff ffcb 	bl	8025394 <std_msgs__msg__Header__init>
 80253fe:	4604      	mov	r4, r0
 8025400:	b188      	cbz	r0, 8025426 <trajectory_msgs__msg__JointTrajectory__init+0x32>
 8025402:	f105 0614 	add.w	r6, r5, #20
 8025406:	2100      	movs	r1, #0
 8025408:	4630      	mov	r0, r6
 802540a:	f7f7 fa59 	bl	801c8c0 <rosidl_runtime_c__String__Sequence__init>
 802540e:	4604      	mov	r4, r0
 8025410:	b1c8      	cbz	r0, 8025446 <trajectory_msgs__msg__JointTrajectory__init+0x52>
 8025412:	f105 0720 	add.w	r7, r5, #32
 8025416:	2100      	movs	r1, #0
 8025418:	4638      	mov	r0, r7
 802541a:	f000 f919 	bl	8025650 <trajectory_msgs__msg__JointTrajectoryPoint__Sequence__init>
 802541e:	4604      	mov	r4, r0
 8025420:	b1e8      	cbz	r0, 802545e <trajectory_msgs__msg__JointTrajectory__init+0x6a>
 8025422:	4620      	mov	r0, r4
 8025424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025426:	4628      	mov	r0, r5
 8025428:	f7ff ffd8 	bl	80253dc <std_msgs__msg__Header__fini>
 802542c:	f105 0014 	add.w	r0, r5, #20
 8025430:	f7f7 fa8e 	bl	801c950 <rosidl_runtime_c__String__Sequence__fini>
 8025434:	f105 0020 	add.w	r0, r5, #32
 8025438:	f000 f90e 	bl	8025658 <trajectory_msgs__msg__JointTrajectoryPoint__Sequence__fini>
 802543c:	4620      	mov	r0, r4
 802543e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025440:	4604      	mov	r4, r0
 8025442:	4620      	mov	r0, r4
 8025444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025446:	4628      	mov	r0, r5
 8025448:	f7ff ffc8 	bl	80253dc <std_msgs__msg__Header__fini>
 802544c:	4630      	mov	r0, r6
 802544e:	f7f7 fa7f 	bl	801c950 <rosidl_runtime_c__String__Sequence__fini>
 8025452:	f105 0020 	add.w	r0, r5, #32
 8025456:	f000 f8ff 	bl	8025658 <trajectory_msgs__msg__JointTrajectoryPoint__Sequence__fini>
 802545a:	4620      	mov	r0, r4
 802545c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802545e:	4628      	mov	r0, r5
 8025460:	f7ff ffbc 	bl	80253dc <std_msgs__msg__Header__fini>
 8025464:	4630      	mov	r0, r6
 8025466:	f7f7 fa73 	bl	801c950 <rosidl_runtime_c__String__Sequence__fini>
 802546a:	4638      	mov	r0, r7
 802546c:	f000 f8f4 	bl	8025658 <trajectory_msgs__msg__JointTrajectoryPoint__Sequence__fini>
 8025470:	e7d7      	b.n	8025422 <trajectory_msgs__msg__JointTrajectory__init+0x2e>
 8025472:	bf00      	nop

08025474 <trajectory_msgs__msg__JointTrajectory__fini>:
 8025474:	b168      	cbz	r0, 8025492 <trajectory_msgs__msg__JointTrajectory__fini+0x1e>
 8025476:	b510      	push	{r4, lr}
 8025478:	4604      	mov	r4, r0
 802547a:	f7ff ffaf 	bl	80253dc <std_msgs__msg__Header__fini>
 802547e:	f104 0014 	add.w	r0, r4, #20
 8025482:	f7f7 fa65 	bl	801c950 <rosidl_runtime_c__String__Sequence__fini>
 8025486:	f104 0020 	add.w	r0, r4, #32
 802548a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802548e:	f000 b8e3 	b.w	8025658 <trajectory_msgs__msg__JointTrajectoryPoint__Sequence__fini>
 8025492:	4770      	bx	lr

08025494 <trajectory_msgs__msg__JointTrajectoryPoint__init>:
 8025494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025498:	4605      	mov	r5, r0
 802549a:	2800      	cmp	r0, #0
 802549c:	d04a      	beq.n	8025534 <trajectory_msgs__msg__JointTrajectoryPoint__init+0xa0>
 802549e:	2100      	movs	r1, #0
 80254a0:	f7f7 f984 	bl	801c7ac <rosidl_runtime_c__double__Sequence__init>
 80254a4:	4604      	mov	r4, r0
 80254a6:	b378      	cbz	r0, 8025508 <trajectory_msgs__msg__JointTrajectoryPoint__init+0x74>
 80254a8:	f105 060c 	add.w	r6, r5, #12
 80254ac:	2100      	movs	r1, #0
 80254ae:	4630      	mov	r0, r6
 80254b0:	f7f7 f97c 	bl	801c7ac <rosidl_runtime_c__double__Sequence__init>
 80254b4:	4604      	mov	r4, r0
 80254b6:	2800      	cmp	r0, #0
 80254b8:	d048      	beq.n	802554c <trajectory_msgs__msg__JointTrajectoryPoint__init+0xb8>
 80254ba:	f105 0718 	add.w	r7, r5, #24
 80254be:	2100      	movs	r1, #0
 80254c0:	4638      	mov	r0, r7
 80254c2:	f7f7 f973 	bl	801c7ac <rosidl_runtime_c__double__Sequence__init>
 80254c6:	4604      	mov	r4, r0
 80254c8:	b3c0      	cbz	r0, 802553c <trajectory_msgs__msg__JointTrajectoryPoint__init+0xa8>
 80254ca:	f105 0824 	add.w	r8, r5, #36	@ 0x24
 80254ce:	2100      	movs	r1, #0
 80254d0:	4640      	mov	r0, r8
 80254d2:	f7f7 f96b 	bl	801c7ac <rosidl_runtime_c__double__Sequence__init>
 80254d6:	4604      	mov	r4, r0
 80254d8:	b3e8      	cbz	r0, 8025556 <trajectory_msgs__msg__JointTrajectoryPoint__init+0xc2>
 80254da:	f105 0930 	add.w	r9, r5, #48	@ 0x30
 80254de:	4648      	mov	r0, r9
 80254e0:	f000 f8f4 	bl	80256cc <builtin_interfaces__msg__Duration__init>
 80254e4:	4604      	mov	r4, r0
 80254e6:	bb10      	cbnz	r0, 802552e <trajectory_msgs__msg__JointTrajectoryPoint__init+0x9a>
 80254e8:	4628      	mov	r0, r5
 80254ea:	f7f7 f977 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 80254ee:	4630      	mov	r0, r6
 80254f0:	f7f7 f974 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 80254f4:	4638      	mov	r0, r7
 80254f6:	f7f7 f971 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 80254fa:	4640      	mov	r0, r8
 80254fc:	f7f7 f96e 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 8025500:	4648      	mov	r0, r9
 8025502:	f000 f8e7 	bl	80256d4 <builtin_interfaces__msg__Duration__fini>
 8025506:	e012      	b.n	802552e <trajectory_msgs__msg__JointTrajectoryPoint__init+0x9a>
 8025508:	4628      	mov	r0, r5
 802550a:	f7f7 f967 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 802550e:	f105 000c 	add.w	r0, r5, #12
 8025512:	f7f7 f963 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 8025516:	f105 0018 	add.w	r0, r5, #24
 802551a:	f7f7 f95f 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 802551e:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8025522:	f7f7 f95b 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 8025526:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 802552a:	f000 f8d3 	bl	80256d4 <builtin_interfaces__msg__Duration__fini>
 802552e:	4620      	mov	r0, r4
 8025530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025534:	4604      	mov	r4, r0
 8025536:	4620      	mov	r0, r4
 8025538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802553c:	4628      	mov	r0, r5
 802553e:	f7f7 f94d 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 8025542:	4630      	mov	r0, r6
 8025544:	f7f7 f94a 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 8025548:	4638      	mov	r0, r7
 802554a:	e7e6      	b.n	802551a <trajectory_msgs__msg__JointTrajectoryPoint__init+0x86>
 802554c:	4628      	mov	r0, r5
 802554e:	f7f7 f945 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 8025552:	4630      	mov	r0, r6
 8025554:	e7dd      	b.n	8025512 <trajectory_msgs__msg__JointTrajectoryPoint__init+0x7e>
 8025556:	4628      	mov	r0, r5
 8025558:	f7f7 f940 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 802555c:	4630      	mov	r0, r6
 802555e:	f7f7 f93d 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 8025562:	4638      	mov	r0, r7
 8025564:	f7f7 f93a 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 8025568:	4640      	mov	r0, r8
 802556a:	f7f7 f937 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 802556e:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8025572:	f000 f8af 	bl	80256d4 <builtin_interfaces__msg__Duration__fini>
 8025576:	e7da      	b.n	802552e <trajectory_msgs__msg__JointTrajectoryPoint__init+0x9a>

08025578 <trajectory_msgs__msg__JointTrajectoryPoint__Sequence__init.part.0>:
 8025578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802557c:	b086      	sub	sp, #24
 802557e:	4689      	mov	r9, r1
 8025580:	4682      	mov	sl, r0
 8025582:	a801      	add	r0, sp, #4
 8025584:	f7f6 fb34 	bl	801bbf0 <rcutils_get_default_allocator>
 8025588:	f1b9 0f00 	cmp.w	r9, #0
 802558c:	d03c      	beq.n	8025608 <trajectory_msgs__msg__JointTrajectoryPoint__Sequence__init.part.0+0x90>
 802558e:	2138      	movs	r1, #56	@ 0x38
 8025590:	4648      	mov	r0, r9
 8025592:	e9dd 3804 	ldrd	r3, r8, [sp, #16]
 8025596:	4642      	mov	r2, r8
 8025598:	4798      	blx	r3
 802559a:	4607      	mov	r7, r0
 802559c:	2800      	cmp	r0, #0
 802559e:	d03d      	beq.n	802561c <trajectory_msgs__msg__JointTrajectoryPoint__Sequence__init.part.0+0xa4>
 80255a0:	4606      	mov	r6, r0
 80255a2:	2400      	movs	r4, #0
 80255a4:	e002      	b.n	80255ac <trajectory_msgs__msg__JointTrajectoryPoint__Sequence__init.part.0+0x34>
 80255a6:	3401      	adds	r4, #1
 80255a8:	45a1      	cmp	r9, r4
 80255aa:	d02e      	beq.n	802560a <trajectory_msgs__msg__JointTrajectoryPoint__Sequence__init.part.0+0x92>
 80255ac:	4630      	mov	r0, r6
 80255ae:	3638      	adds	r6, #56	@ 0x38
 80255b0:	f7ff ff70 	bl	8025494 <trajectory_msgs__msg__JointTrajectoryPoint__init>
 80255b4:	4605      	mov	r5, r0
 80255b6:	2800      	cmp	r0, #0
 80255b8:	d1f5      	bne.n	80255a6 <trajectory_msgs__msg__JointTrajectoryPoint__Sequence__init.part.0+0x2e>
 80255ba:	45a1      	cmp	r9, r4
 80255bc:	d925      	bls.n	802560a <trajectory_msgs__msg__JointTrajectoryPoint__Sequence__init.part.0+0x92>
 80255be:	b1dc      	cbz	r4, 80255f8 <trajectory_msgs__msg__JointTrajectoryPoint__Sequence__init.part.0+0x80>
 80255c0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80255c4:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 80255c8:	3c38      	subs	r4, #56	@ 0x38
 80255ca:	4620      	mov	r0, r4
 80255cc:	f7f7 f906 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 80255d0:	f104 000c 	add.w	r0, r4, #12
 80255d4:	f7f7 f902 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 80255d8:	f104 0018 	add.w	r0, r4, #24
 80255dc:	f7f7 f8fe 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 80255e0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80255e4:	f7f7 f8fa 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 80255e8:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80255ec:	f000 f872 	bl	80256d4 <builtin_interfaces__msg__Duration__fini>
 80255f0:	42bc      	cmp	r4, r7
 80255f2:	f1a4 0438 	sub.w	r4, r4, #56	@ 0x38
 80255f6:	d1e8      	bne.n	80255ca <trajectory_msgs__msg__JointTrajectoryPoint__Sequence__init.part.0+0x52>
 80255f8:	4638      	mov	r0, r7
 80255fa:	9b02      	ldr	r3, [sp, #8]
 80255fc:	4641      	mov	r1, r8
 80255fe:	4798      	blx	r3
 8025600:	4628      	mov	r0, r5
 8025602:	b006      	add	sp, #24
 8025604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025608:	464f      	mov	r7, r9
 802560a:	2501      	movs	r5, #1
 802560c:	f8ca 9008 	str.w	r9, [sl, #8]
 8025610:	e9ca 7900 	strd	r7, r9, [sl]
 8025614:	4628      	mov	r0, r5
 8025616:	b006      	add	sp, #24
 8025618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802561c:	4605      	mov	r5, r0
 802561e:	e7f9      	b.n	8025614 <trajectory_msgs__msg__JointTrajectoryPoint__Sequence__init.part.0+0x9c>

08025620 <trajectory_msgs__msg__JointTrajectoryPoint__fini>:
 8025620:	b1a8      	cbz	r0, 802564e <trajectory_msgs__msg__JointTrajectoryPoint__fini+0x2e>
 8025622:	b510      	push	{r4, lr}
 8025624:	4604      	mov	r4, r0
 8025626:	f7f7 f8d9 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 802562a:	f104 000c 	add.w	r0, r4, #12
 802562e:	f7f7 f8d5 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 8025632:	f104 0018 	add.w	r0, r4, #24
 8025636:	f7f7 f8d1 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 802563a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 802563e:	f7f7 f8cd 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 8025642:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8025646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802564a:	f000 b843 	b.w	80256d4 <builtin_interfaces__msg__Duration__fini>
 802564e:	4770      	bx	lr

08025650 <trajectory_msgs__msg__JointTrajectoryPoint__Sequence__init>:
 8025650:	b108      	cbz	r0, 8025656 <trajectory_msgs__msg__JointTrajectoryPoint__Sequence__init+0x6>
 8025652:	f7ff bf91 	b.w	8025578 <trajectory_msgs__msg__JointTrajectoryPoint__Sequence__init.part.0>
 8025656:	4770      	bx	lr

08025658 <trajectory_msgs__msg__JointTrajectoryPoint__Sequence__fini>:
 8025658:	2800      	cmp	r0, #0
 802565a:	d035      	beq.n	80256c8 <trajectory_msgs__msg__JointTrajectoryPoint__Sequence__fini+0x70>
 802565c:	b570      	push	{r4, r5, r6, lr}
 802565e:	b086      	sub	sp, #24
 8025660:	4606      	mov	r6, r0
 8025662:	a801      	add	r0, sp, #4
 8025664:	f7f6 fac4 	bl	801bbf0 <rcutils_get_default_allocator>
 8025668:	6833      	ldr	r3, [r6, #0]
 802566a:	b33b      	cbz	r3, 80256bc <trajectory_msgs__msg__JointTrajectoryPoint__Sequence__fini+0x64>
 802566c:	68b2      	ldr	r2, [r6, #8]
 802566e:	b1ea      	cbz	r2, 80256ac <trajectory_msgs__msg__JointTrajectoryPoint__Sequence__fini+0x54>
 8025670:	2500      	movs	r5, #0
 8025672:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
 8025676:	eb13 04c4 	adds.w	r4, r3, r4, lsl #3
 802567a:	4620      	mov	r0, r4
 802567c:	d020      	beq.n	80256c0 <trajectory_msgs__msg__JointTrajectoryPoint__Sequence__fini+0x68>
 802567e:	f7f7 f8ad 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 8025682:	f104 000c 	add.w	r0, r4, #12
 8025686:	f7f7 f8a9 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 802568a:	f104 0018 	add.w	r0, r4, #24
 802568e:	f7f7 f8a5 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 8025692:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8025696:	f7f7 f8a1 	bl	801c7dc <rosidl_runtime_c__double__Sequence__fini>
 802569a:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 802569e:	f000 f819 	bl	80256d4 <builtin_interfaces__msg__Duration__fini>
 80256a2:	3501      	adds	r5, #1
 80256a4:	68b2      	ldr	r2, [r6, #8]
 80256a6:	6833      	ldr	r3, [r6, #0]
 80256a8:	4295      	cmp	r5, r2
 80256aa:	d3e2      	bcc.n	8025672 <trajectory_msgs__msg__JointTrajectoryPoint__Sequence__fini+0x1a>
 80256ac:	4618      	mov	r0, r3
 80256ae:	9a02      	ldr	r2, [sp, #8]
 80256b0:	9905      	ldr	r1, [sp, #20]
 80256b2:	4790      	blx	r2
 80256b4:	2300      	movs	r3, #0
 80256b6:	e9c6 3300 	strd	r3, r3, [r6]
 80256ba:	60b3      	str	r3, [r6, #8]
 80256bc:	b006      	add	sp, #24
 80256be:	bd70      	pop	{r4, r5, r6, pc}
 80256c0:	3501      	adds	r5, #1
 80256c2:	4295      	cmp	r5, r2
 80256c4:	d3d5      	bcc.n	8025672 <trajectory_msgs__msg__JointTrajectoryPoint__Sequence__fini+0x1a>
 80256c6:	e7f1      	b.n	80256ac <trajectory_msgs__msg__JointTrajectoryPoint__Sequence__fini+0x54>
 80256c8:	4770      	bx	lr
 80256ca:	bf00      	nop

080256cc <builtin_interfaces__msg__Duration__init>:
 80256cc:	3800      	subs	r0, #0
 80256ce:	bf18      	it	ne
 80256d0:	2001      	movne	r0, #1
 80256d2:	4770      	bx	lr

080256d4 <builtin_interfaces__msg__Duration__fini>:
 80256d4:	4770      	bx	lr
 80256d6:	bf00      	nop

080256d8 <builtin_interfaces__msg__Time__init>:
 80256d8:	3800      	subs	r0, #0
 80256da:	bf18      	it	ne
 80256dc:	2001      	movne	r0, #1
 80256de:	4770      	bx	lr

080256e0 <builtin_interfaces__msg__Time__fini>:
 80256e0:	4770      	bx	lr
 80256e2:	bf00      	nop

080256e4 <ucdr_serialize_string>:
 80256e4:	b510      	push	{r4, lr}
 80256e6:	b082      	sub	sp, #8
 80256e8:	4604      	mov	r4, r0
 80256ea:	4608      	mov	r0, r1
 80256ec:	9101      	str	r1, [sp, #4]
 80256ee:	f7da fdb1 	bl	8000254 <strlen>
 80256f2:	4602      	mov	r2, r0
 80256f4:	9901      	ldr	r1, [sp, #4]
 80256f6:	4620      	mov	r0, r4
 80256f8:	3201      	adds	r2, #1
 80256fa:	b002      	add	sp, #8
 80256fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025700:	f7f5 b9ae 	b.w	801aa60 <ucdr_serialize_sequence_char>

08025704 <ucdr_deserialize_string>:
 8025704:	b500      	push	{lr}
 8025706:	b083      	sub	sp, #12
 8025708:	ab01      	add	r3, sp, #4
 802570a:	f7f5 f9bb 	bl	801aa84 <ucdr_deserialize_sequence_char>
 802570e:	b003      	add	sp, #12
 8025710:	f85d fb04 	ldr.w	pc, [sp], #4

08025714 <get_custom_error>:
 8025714:	4b01      	ldr	r3, [pc, #4]	@ (802571c <get_custom_error+0x8>)
 8025716:	7818      	ldrb	r0, [r3, #0]
 8025718:	4770      	bx	lr
 802571a:	bf00      	nop
 802571c:	20014fc8 	.word	0x20014fc8

08025720 <recv_custom_msg>:
 8025720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025724:	4693      	mov	fp, r2
 8025726:	b089      	sub	sp, #36	@ 0x24
 8025728:	2200      	movs	r2, #0
 802572a:	4604      	mov	r4, r0
 802572c:	468a      	mov	sl, r1
 802572e:	9305      	str	r3, [sp, #20]
 8025730:	f88d 201e 	strb.w	r2, [sp, #30]
 8025734:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8025738:	b322      	cbz	r2, 8025784 <recv_custom_msg+0x64>
 802573a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 802573e:	f10d 081f 	add.w	r8, sp, #31
 8025742:	af05      	add	r7, sp, #20
 8025744:	f10d 061e 	add.w	r6, sp, #30
 8025748:	f44f 7500 	mov.w	r5, #512	@ 0x200
 802574c:	e002      	b.n	8025754 <recv_custom_msg+0x34>
 802574e:	9b05      	ldr	r3, [sp, #20]
 8025750:	2b00      	cmp	r3, #0
 8025752:	dd0f      	ble.n	8025774 <recv_custom_msg+0x54>
 8025754:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8025758:	4623      	mov	r3, r4
 802575a:	4622      	mov	r2, r4
 802575c:	4648      	mov	r0, r9
 802575e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8025762:	e9cd 5600 	strd	r5, r6, [sp]
 8025766:	f001 f913 	bl	8026990 <uxr_read_framed_msg>
 802576a:	2800      	cmp	r0, #0
 802576c:	d0ef      	beq.n	802574e <recv_custom_msg+0x2e>
 802576e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8025772:	b1b3      	cbz	r3, 80257a2 <recv_custom_msg+0x82>
 8025774:	4b0f      	ldr	r3, [pc, #60]	@ (80257b4 <recv_custom_msg+0x94>)
 8025776:	2000      	movs	r0, #0
 8025778:	f89d 201f 	ldrb.w	r2, [sp, #31]
 802577c:	701a      	strb	r2, [r3, #0]
 802577e:	b009      	add	sp, #36	@ 0x24
 8025780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025784:	f10d 021f 	add.w	r2, sp, #31
 8025788:	4601      	mov	r1, r0
 802578a:	9200      	str	r2, [sp, #0]
 802578c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8025790:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8025794:	47a8      	blx	r5
 8025796:	2800      	cmp	r0, #0
 8025798:	d0ec      	beq.n	8025774 <recv_custom_msg+0x54>
 802579a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 802579e:	2b00      	cmp	r3, #0
 80257a0:	d1e8      	bne.n	8025774 <recv_custom_msg+0x54>
 80257a2:	f8cb 0000 	str.w	r0, [fp]
 80257a6:	2001      	movs	r0, #1
 80257a8:	f8ca 4000 	str.w	r4, [sl]
 80257ac:	b009      	add	sp, #36	@ 0x24
 80257ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80257b2:	bf00      	nop
 80257b4:	20014fc8 	.word	0x20014fc8

080257b8 <send_custom_msg>:
 80257b8:	b530      	push	{r4, r5, lr}
 80257ba:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 80257be:	b087      	sub	sp, #28
 80257c0:	4614      	mov	r4, r2
 80257c2:	b995      	cbnz	r5, 80257ea <send_custom_msg+0x32>
 80257c4:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 80257c8:	f10d 0317 	add.w	r3, sp, #23
 80257cc:	47a8      	blx	r5
 80257ce:	1e03      	subs	r3, r0, #0
 80257d0:	bf18      	it	ne
 80257d2:	2301      	movne	r3, #1
 80257d4:	42a0      	cmp	r0, r4
 80257d6:	bf18      	it	ne
 80257d8:	2300      	movne	r3, #0
 80257da:	b91b      	cbnz	r3, 80257e4 <send_custom_msg+0x2c>
 80257dc:	4a0a      	ldr	r2, [pc, #40]	@ (8025808 <send_custom_msg+0x50>)
 80257de:	f89d 1017 	ldrb.w	r1, [sp, #23]
 80257e2:	7011      	strb	r1, [r2, #0]
 80257e4:	4618      	mov	r0, r3
 80257e6:	b007      	add	sp, #28
 80257e8:	bd30      	pop	{r4, r5, pc}
 80257ea:	460b      	mov	r3, r1
 80257ec:	2200      	movs	r2, #0
 80257ee:	f10d 0117 	add.w	r1, sp, #23
 80257f2:	9400      	str	r4, [sp, #0]
 80257f4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80257f8:	4602      	mov	r2, r0
 80257fa:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 80257fe:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8025802:	f000 fee7 	bl	80265d4 <uxr_write_framed_msg>
 8025806:	e7e2      	b.n	80257ce <send_custom_msg+0x16>
 8025808:	20014fc8 	.word	0x20014fc8

0802580c <uxr_set_custom_transport_callbacks>:
 802580c:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8025810:	9901      	ldr	r1, [sp, #4]
 8025812:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8025816:	9b00      	ldr	r3, [sp, #0]
 8025818:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 802581c:	4770      	bx	lr
 802581e:	bf00      	nop

08025820 <uxr_init_custom_transport>:
 8025820:	b538      	push	{r3, r4, r5, lr}
 8025822:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8025826:	b303      	cbz	r3, 802586a <uxr_init_custom_transport+0x4a>
 8025828:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 802582c:	4604      	mov	r4, r0
 802582e:	b1e2      	cbz	r2, 802586a <uxr_init_custom_transport+0x4a>
 8025830:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8025834:	b1ca      	cbz	r2, 802586a <uxr_init_custom_transport+0x4a>
 8025836:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 802583a:	b1b2      	cbz	r2, 802586a <uxr_init_custom_transport+0x4a>
 802583c:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8025840:	4798      	blx	r3
 8025842:	4605      	mov	r5, r0
 8025844:	b188      	cbz	r0, 802586a <uxr_init_custom_transport+0x4a>
 8025846:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 802584a:	b98b      	cbnz	r3, 8025870 <uxr_init_custom_transport+0x50>
 802584c:	4b0b      	ldr	r3, [pc, #44]	@ (802587c <uxr_init_custom_transport+0x5c>)
 802584e:	4628      	mov	r0, r5
 8025850:	490b      	ldr	r1, [pc, #44]	@ (8025880 <uxr_init_custom_transport+0x60>)
 8025852:	4a0c      	ldr	r2, [pc, #48]	@ (8025884 <uxr_init_custom_transport+0x64>)
 8025854:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8025858:	f44f 7300 	mov.w	r3, #512	@ 0x200
 802585c:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8025860:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8025864:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8025868:	bd38      	pop	{r3, r4, r5, pc}
 802586a:	2500      	movs	r5, #0
 802586c:	4628      	mov	r0, r5
 802586e:	bd38      	pop	{r3, r4, r5, pc}
 8025870:	2100      	movs	r1, #0
 8025872:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8025876:	f000 fea7 	bl	80265c8 <uxr_init_framing_io>
 802587a:	e7e7      	b.n	802584c <uxr_init_custom_transport+0x2c>
 802587c:	08025721 	.word	0x08025721
 8025880:	080257b9 	.word	0x080257b9
 8025884:	08025715 	.word	0x08025715

08025888 <uxr_close_custom_transport>:
 8025888:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 802588c:	4718      	bx	r3
 802588e:	bf00      	nop

08025890 <uxr_init_input_best_effort_stream>:
 8025890:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8025894:	8003      	strh	r3, [r0, #0]
 8025896:	4770      	bx	lr

08025898 <uxr_reset_input_best_effort_stream>:
 8025898:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802589c:	8003      	strh	r3, [r0, #0]
 802589e:	4770      	bx	lr

080258a0 <uxr_receive_best_effort_message>:
 80258a0:	b538      	push	{r3, r4, r5, lr}
 80258a2:	4604      	mov	r4, r0
 80258a4:	8800      	ldrh	r0, [r0, #0]
 80258a6:	460d      	mov	r5, r1
 80258a8:	f000 fe76 	bl	8026598 <uxr_seq_num_cmp>
 80258ac:	4603      	mov	r3, r0
 80258ae:	0fc0      	lsrs	r0, r0, #31
 80258b0:	2b00      	cmp	r3, #0
 80258b2:	bfb8      	it	lt
 80258b4:	8025      	strhlt	r5, [r4, #0]
 80258b6:	bd38      	pop	{r3, r4, r5, pc}

080258b8 <on_full_input_buffer>:
 80258b8:	b570      	push	{r4, r5, r6, lr}
 80258ba:	460c      	mov	r4, r1
 80258bc:	4605      	mov	r5, r0
 80258be:	8908      	ldrh	r0, [r1, #8]
 80258c0:	682b      	ldr	r3, [r5, #0]
 80258c2:	7d26      	ldrb	r6, [r4, #20]
 80258c4:	e9d1 1200 	ldrd	r1, r2, [r1]
 80258c8:	fbb2 f2f0 	udiv	r2, r2, r0
 80258cc:	eba3 0c01 	sub.w	ip, r3, r1
 80258d0:	fbbc fcf2 	udiv	ip, ip, r2
 80258d4:	f10c 0c01 	add.w	ip, ip, #1
 80258d8:	fa1f f38c 	uxth.w	r3, ip
 80258dc:	fbb3 fcf0 	udiv	ip, r3, r0
 80258e0:	fb00 331c 	mls	r3, r0, ip, r3
 80258e4:	b29b      	uxth	r3, r3
 80258e6:	fb02 f303 	mul.w	r3, r2, r3
 80258ea:	1d18      	adds	r0, r3, #4
 80258ec:	4408      	add	r0, r1
 80258ee:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80258f2:	b116      	cbz	r6, 80258fa <on_full_input_buffer+0x42>
 80258f4:	2600      	movs	r6, #0
 80258f6:	f840 6c04 	str.w	r6, [r0, #-4]
 80258fa:	2a03      	cmp	r2, #3
 80258fc:	d801      	bhi.n	8025902 <on_full_input_buffer+0x4a>
 80258fe:	2001      	movs	r0, #1
 8025900:	bd70      	pop	{r4, r5, r6, pc}
 8025902:	3308      	adds	r3, #8
 8025904:	4628      	mov	r0, r5
 8025906:	3a04      	subs	r2, #4
 8025908:	4419      	add	r1, r3
 802590a:	692b      	ldr	r3, [r5, #16]
 802590c:	f7f5 f82c 	bl	801a968 <ucdr_init_buffer_origin>
 8025910:	4628      	mov	r0, r5
 8025912:	4622      	mov	r2, r4
 8025914:	4902      	ldr	r1, [pc, #8]	@ (8025920 <on_full_input_buffer+0x68>)
 8025916:	f7f5 f803 	bl	801a920 <ucdr_set_on_full_buffer_callback>
 802591a:	2000      	movs	r0, #0
 802591c:	bd70      	pop	{r4, r5, r6, pc}
 802591e:	bf00      	nop
 8025920:	080258b9 	.word	0x080258b9

08025924 <uxr_init_input_reliable_stream>:
 8025924:	b510      	push	{r4, lr}
 8025926:	e9c0 1200 	strd	r1, r2, [r0]
 802592a:	2400      	movs	r4, #0
 802592c:	9a02      	ldr	r2, [sp, #8]
 802592e:	8103      	strh	r3, [r0, #8]
 8025930:	6102      	str	r2, [r0, #16]
 8025932:	7504      	strb	r4, [r0, #20]
 8025934:	b1c3      	cbz	r3, 8025968 <uxr_init_input_reliable_stream+0x44>
 8025936:	600c      	str	r4, [r1, #0]
 8025938:	8901      	ldrh	r1, [r0, #8]
 802593a:	2901      	cmp	r1, #1
 802593c:	d914      	bls.n	8025968 <uxr_init_input_reliable_stream+0x44>
 802593e:	f04f 0c01 	mov.w	ip, #1
 8025942:	6843      	ldr	r3, [r0, #4]
 8025944:	f10c 0e01 	add.w	lr, ip, #1
 8025948:	fbbc f2f1 	udiv	r2, ip, r1
 802594c:	fbb3 f3f1 	udiv	r3, r3, r1
 8025950:	fb01 c212 	mls	r2, r1, r2, ip
 8025954:	fa1f fc8e 	uxth.w	ip, lr
 8025958:	b292      	uxth	r2, r2
 802595a:	fb02 f303 	mul.w	r3, r2, r3
 802595e:	6802      	ldr	r2, [r0, #0]
 8025960:	50d4      	str	r4, [r2, r3]
 8025962:	8901      	ldrh	r1, [r0, #8]
 8025964:	4561      	cmp	r1, ip
 8025966:	d8ec      	bhi.n	8025942 <uxr_init_input_reliable_stream+0x1e>
 8025968:	f04f 33ff 	mov.w	r3, #4294967295
 802596c:	60c3      	str	r3, [r0, #12]
 802596e:	bd10      	pop	{r4, pc}

08025970 <uxr_reset_input_reliable_stream>:
 8025970:	8901      	ldrh	r1, [r0, #8]
 8025972:	b1d9      	cbz	r1, 80259ac <uxr_reset_input_reliable_stream+0x3c>
 8025974:	b510      	push	{r4, lr}
 8025976:	f04f 0e00 	mov.w	lr, #0
 802597a:	46f4      	mov	ip, lr
 802597c:	4674      	mov	r4, lr
 802597e:	6843      	ldr	r3, [r0, #4]
 8025980:	f10e 0e01 	add.w	lr, lr, #1
 8025984:	fbbc f2f1 	udiv	r2, ip, r1
 8025988:	fbb3 f3f1 	udiv	r3, r3, r1
 802598c:	fb01 c212 	mls	r2, r1, r2, ip
 8025990:	fa1f fc8e 	uxth.w	ip, lr
 8025994:	b292      	uxth	r2, r2
 8025996:	fb02 f303 	mul.w	r3, r2, r3
 802599a:	6802      	ldr	r2, [r0, #0]
 802599c:	50d4      	str	r4, [r2, r3]
 802599e:	8901      	ldrh	r1, [r0, #8]
 80259a0:	4561      	cmp	r1, ip
 80259a2:	d8ec      	bhi.n	802597e <uxr_reset_input_reliable_stream+0xe>
 80259a4:	f04f 33ff 	mov.w	r3, #4294967295
 80259a8:	60c3      	str	r3, [r0, #12]
 80259aa:	bd10      	pop	{r4, pc}
 80259ac:	f04f 33ff 	mov.w	r3, #4294967295
 80259b0:	60c3      	str	r3, [r0, #12]
 80259b2:	4770      	bx	lr

080259b4 <uxr_receive_reliable_message>:
 80259b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80259b8:	4604      	mov	r4, r0
 80259ba:	460d      	mov	r5, r1
 80259bc:	8901      	ldrh	r1, [r0, #8]
 80259be:	4617      	mov	r7, r2
 80259c0:	8980      	ldrh	r0, [r0, #12]
 80259c2:	4698      	mov	r8, r3
 80259c4:	f000 fde0 	bl	8026588 <uxr_seq_num_add>
 80259c8:	4629      	mov	r1, r5
 80259ca:	4606      	mov	r6, r0
 80259cc:	89a0      	ldrh	r0, [r4, #12]
 80259ce:	f000 fde3 	bl	8026598 <uxr_seq_num_cmp>
 80259d2:	2800      	cmp	r0, #0
 80259d4:	db0a      	blt.n	80259ec <uxr_receive_reliable_message+0x38>
 80259d6:	2600      	movs	r6, #0
 80259d8:	4629      	mov	r1, r5
 80259da:	89e0      	ldrh	r0, [r4, #14]
 80259dc:	f000 fddc 	bl	8026598 <uxr_seq_num_cmp>
 80259e0:	2800      	cmp	r0, #0
 80259e2:	da00      	bge.n	80259e6 <uxr_receive_reliable_message+0x32>
 80259e4:	81e5      	strh	r5, [r4, #14]
 80259e6:	4630      	mov	r0, r6
 80259e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80259ec:	4630      	mov	r0, r6
 80259ee:	4629      	mov	r1, r5
 80259f0:	f000 fdd2 	bl	8026598 <uxr_seq_num_cmp>
 80259f4:	2800      	cmp	r0, #0
 80259f6:	dbee      	blt.n	80259d6 <uxr_receive_reliable_message+0x22>
 80259f8:	6923      	ldr	r3, [r4, #16]
 80259fa:	4638      	mov	r0, r7
 80259fc:	4798      	blx	r3
 80259fe:	4681      	mov	r9, r0
 8025a00:	2101      	movs	r1, #1
 8025a02:	89a0      	ldrh	r0, [r4, #12]
 8025a04:	f000 fdc0 	bl	8026588 <uxr_seq_num_add>
 8025a08:	f1b9 0f00 	cmp.w	r9, #0
 8025a0c:	bf08      	it	eq
 8025a0e:	4285      	cmpeq	r5, r0
 8025a10:	bf0c      	ite	eq
 8025a12:	2601      	moveq	r6, #1
 8025a14:	2600      	movne	r6, #0
 8025a16:	d104      	bne.n	8025a22 <uxr_receive_reliable_message+0x6e>
 8025a18:	2300      	movs	r3, #0
 8025a1a:	9a08      	ldr	r2, [sp, #32]
 8025a1c:	81a0      	strh	r0, [r4, #12]
 8025a1e:	7013      	strb	r3, [r2, #0]
 8025a20:	e7da      	b.n	80259d8 <uxr_receive_reliable_message+0x24>
 8025a22:	8922      	ldrh	r2, [r4, #8]
 8025a24:	6863      	ldr	r3, [r4, #4]
 8025a26:	fbb5 f0f2 	udiv	r0, r5, r2
 8025a2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8025a2e:	fb02 5010 	mls	r0, r2, r0, r5
 8025a32:	b280      	uxth	r0, r0
 8025a34:	fb03 f000 	mul.w	r0, r3, r0
 8025a38:	6823      	ldr	r3, [r4, #0]
 8025a3a:	3004      	adds	r0, #4
 8025a3c:	4418      	add	r0, r3
 8025a3e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8025a42:	2b00      	cmp	r3, #0
 8025a44:	d1c7      	bne.n	80259d6 <uxr_receive_reliable_message+0x22>
 8025a46:	4639      	mov	r1, r7
 8025a48:	4642      	mov	r2, r8
 8025a4a:	f002 fd20 	bl	802848e <memcpy>
 8025a4e:	8921      	ldrh	r1, [r4, #8]
 8025a50:	6863      	ldr	r3, [r4, #4]
 8025a52:	fbb5 f2f1 	udiv	r2, r5, r1
 8025a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8025a5a:	fb01 5212 	mls	r2, r1, r2, r5
 8025a5e:	b292      	uxth	r2, r2
 8025a60:	fb02 f303 	mul.w	r3, r2, r3
 8025a64:	6822      	ldr	r2, [r4, #0]
 8025a66:	f842 8003 	str.w	r8, [r2, r3]
 8025a6a:	2301      	movs	r3, #1
 8025a6c:	9a08      	ldr	r2, [sp, #32]
 8025a6e:	7013      	strb	r3, [r2, #0]
 8025a70:	f1b9 0f00 	cmp.w	r9, #0
 8025a74:	d0af      	beq.n	80259d6 <uxr_receive_reliable_message+0x22>
 8025a76:	89a6      	ldrh	r6, [r4, #12]
 8025a78:	2101      	movs	r1, #1
 8025a7a:	4630      	mov	r0, r6
 8025a7c:	f000 fd84 	bl	8026588 <uxr_seq_num_add>
 8025a80:	8921      	ldrh	r1, [r4, #8]
 8025a82:	6863      	ldr	r3, [r4, #4]
 8025a84:	4606      	mov	r6, r0
 8025a86:	fbb0 f2f1 	udiv	r2, r0, r1
 8025a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8025a8e:	fb01 0212 	mls	r2, r1, r2, r0
 8025a92:	6820      	ldr	r0, [r4, #0]
 8025a94:	b292      	uxth	r2, r2
 8025a96:	fb02 f303 	mul.w	r3, r2, r3
 8025a9a:	3304      	adds	r3, #4
 8025a9c:	4418      	add	r0, r3
 8025a9e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8025aa2:	2b00      	cmp	r3, #0
 8025aa4:	d097      	beq.n	80259d6 <uxr_receive_reliable_message+0x22>
 8025aa6:	6923      	ldr	r3, [r4, #16]
 8025aa8:	4798      	blx	r3
 8025aaa:	2802      	cmp	r0, #2
 8025aac:	d002      	beq.n	8025ab4 <uxr_receive_reliable_message+0x100>
 8025aae:	2801      	cmp	r0, #1
 8025ab0:	d0e2      	beq.n	8025a78 <uxr_receive_reliable_message+0xc4>
 8025ab2:	e790      	b.n	80259d6 <uxr_receive_reliable_message+0x22>
 8025ab4:	2601      	movs	r6, #1
 8025ab6:	e78f      	b.n	80259d8 <uxr_receive_reliable_message+0x24>

08025ab8 <uxr_next_input_reliable_buffer_available>:
 8025ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025abc:	4604      	mov	r4, r0
 8025abe:	460f      	mov	r7, r1
 8025ac0:	8980      	ldrh	r0, [r0, #12]
 8025ac2:	2101      	movs	r1, #1
 8025ac4:	4690      	mov	r8, r2
 8025ac6:	f000 fd5f 	bl	8026588 <uxr_seq_num_add>
 8025aca:	8922      	ldrh	r2, [r4, #8]
 8025acc:	6866      	ldr	r6, [r4, #4]
 8025ace:	fbb0 f3f2 	udiv	r3, r0, r2
 8025ad2:	fbb6 f6f2 	udiv	r6, r6, r2
 8025ad6:	fb02 0313 	mls	r3, r2, r3, r0
 8025ada:	b29b      	uxth	r3, r3
 8025adc:	fb03 f606 	mul.w	r6, r3, r6
 8025ae0:	6823      	ldr	r3, [r4, #0]
 8025ae2:	3604      	adds	r6, #4
 8025ae4:	441e      	add	r6, r3
 8025ae6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8025aea:	f1b9 0f00 	cmp.w	r9, #0
 8025aee:	d023      	beq.n	8025b38 <uxr_next_input_reliable_buffer_available+0x80>
 8025af0:	4605      	mov	r5, r0
 8025af2:	6923      	ldr	r3, [r4, #16]
 8025af4:	4630      	mov	r0, r6
 8025af6:	4798      	blx	r3
 8025af8:	4682      	mov	sl, r0
 8025afa:	b300      	cbz	r0, 8025b3e <uxr_next_input_reliable_buffer_available+0x86>
 8025afc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8025b00:	2101      	movs	r1, #1
 8025b02:	4650      	mov	r0, sl
 8025b04:	f000 fd40 	bl	8026588 <uxr_seq_num_add>
 8025b08:	8921      	ldrh	r1, [r4, #8]
 8025b0a:	4682      	mov	sl, r0
 8025b0c:	6863      	ldr	r3, [r4, #4]
 8025b0e:	6820      	ldr	r0, [r4, #0]
 8025b10:	fbba f2f1 	udiv	r2, sl, r1
 8025b14:	fbb3 f3f1 	udiv	r3, r3, r1
 8025b18:	fb01 a212 	mls	r2, r1, r2, sl
 8025b1c:	b292      	uxth	r2, r2
 8025b1e:	fb02 f303 	mul.w	r3, r2, r3
 8025b22:	3304      	adds	r3, #4
 8025b24:	4418      	add	r0, r3
 8025b26:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8025b2a:	b12b      	cbz	r3, 8025b38 <uxr_next_input_reliable_buffer_available+0x80>
 8025b2c:	6923      	ldr	r3, [r4, #16]
 8025b2e:	4798      	blx	r3
 8025b30:	2802      	cmp	r0, #2
 8025b32:	d01b      	beq.n	8025b6c <uxr_next_input_reliable_buffer_available+0xb4>
 8025b34:	2801      	cmp	r0, #1
 8025b36:	d0e3      	beq.n	8025b00 <uxr_next_input_reliable_buffer_available+0x48>
 8025b38:	2000      	movs	r0, #0
 8025b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025b3e:	464a      	mov	r2, r9
 8025b40:	4631      	mov	r1, r6
 8025b42:	4638      	mov	r0, r7
 8025b44:	f7f4 ff18 	bl	801a978 <ucdr_init_buffer>
 8025b48:	8921      	ldrh	r1, [r4, #8]
 8025b4a:	6863      	ldr	r3, [r4, #4]
 8025b4c:	2001      	movs	r0, #1
 8025b4e:	fbb5 f2f1 	udiv	r2, r5, r1
 8025b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8025b56:	fb01 5212 	mls	r2, r1, r2, r5
 8025b5a:	b292      	uxth	r2, r2
 8025b5c:	fb02 f303 	mul.w	r3, r2, r3
 8025b60:	6822      	ldr	r2, [r4, #0]
 8025b62:	f842 a003 	str.w	sl, [r2, r3]
 8025b66:	81a5      	strh	r5, [r4, #12]
 8025b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025b6c:	8920      	ldrh	r0, [r4, #8]
 8025b6e:	eb06 0108 	add.w	r1, r6, r8
 8025b72:	6863      	ldr	r3, [r4, #4]
 8025b74:	eba9 0208 	sub.w	r2, r9, r8
 8025b78:	fbb5 f6f0 	udiv	r6, r5, r0
 8025b7c:	fbb3 f3f0 	udiv	r3, r3, r0
 8025b80:	fb00 5516 	mls	r5, r0, r6, r5
 8025b84:	2000      	movs	r0, #0
 8025b86:	b2ad      	uxth	r5, r5
 8025b88:	fb03 f505 	mul.w	r5, r3, r5
 8025b8c:	6823      	ldr	r3, [r4, #0]
 8025b8e:	5158      	str	r0, [r3, r5]
 8025b90:	4638      	mov	r0, r7
 8025b92:	f7f4 fef1 	bl	801a978 <ucdr_init_buffer>
 8025b96:	4638      	mov	r0, r7
 8025b98:	4622      	mov	r2, r4
 8025b9a:	4903      	ldr	r1, [pc, #12]	@ (8025ba8 <uxr_next_input_reliable_buffer_available+0xf0>)
 8025b9c:	f7f4 fec0 	bl	801a920 <ucdr_set_on_full_buffer_callback>
 8025ba0:	2001      	movs	r0, #1
 8025ba2:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8025ba6:	e7c8      	b.n	8025b3a <uxr_next_input_reliable_buffer_available+0x82>
 8025ba8:	080258b9 	.word	0x080258b9

08025bac <uxr_process_heartbeat>:
 8025bac:	b538      	push	{r3, r4, r5, lr}
 8025bae:	4611      	mov	r1, r2
 8025bb0:	4604      	mov	r4, r0
 8025bb2:	89c0      	ldrh	r0, [r0, #14]
 8025bb4:	4615      	mov	r5, r2
 8025bb6:	f000 fcef 	bl	8026598 <uxr_seq_num_cmp>
 8025bba:	2800      	cmp	r0, #0
 8025bbc:	bfb8      	it	lt
 8025bbe:	81e5      	strhlt	r5, [r4, #14]
 8025bc0:	bd38      	pop	{r3, r4, r5, pc}
 8025bc2:	bf00      	nop

08025bc4 <uxr_compute_acknack>:
 8025bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025bc8:	8903      	ldrh	r3, [r0, #8]
 8025bca:	4604      	mov	r4, r0
 8025bcc:	460f      	mov	r7, r1
 8025bce:	8985      	ldrh	r5, [r0, #12]
 8025bd0:	b1db      	cbz	r3, 8025c0a <uxr_compute_acknack+0x46>
 8025bd2:	4628      	mov	r0, r5
 8025bd4:	2601      	movs	r6, #1
 8025bd6:	e004      	b.n	8025be2 <uxr_compute_acknack+0x1e>
 8025bd8:	4566      	cmp	r6, ip
 8025bda:	f106 0601 	add.w	r6, r6, #1
 8025bde:	d214      	bcs.n	8025c0a <uxr_compute_acknack+0x46>
 8025be0:	89a0      	ldrh	r0, [r4, #12]
 8025be2:	b2b1      	uxth	r1, r6
 8025be4:	f000 fcd0 	bl	8026588 <uxr_seq_num_add>
 8025be8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8025bec:	fbb0 f2fc 	udiv	r2, r0, ip
 8025bf0:	e9d4 1300 	ldrd	r1, r3, [r4]
 8025bf4:	fb0c 0212 	mls	r2, ip, r2, r0
 8025bf8:	fbb3 f3fc 	udiv	r3, r3, ip
 8025bfc:	b292      	uxth	r2, r2
 8025bfe:	fb02 f303 	mul.w	r3, r2, r3
 8025c02:	58cb      	ldr	r3, [r1, r3]
 8025c04:	2b00      	cmp	r3, #0
 8025c06:	d1e7      	bne.n	8025bd8 <uxr_compute_acknack+0x14>
 8025c08:	4605      	mov	r5, r0
 8025c0a:	803d      	strh	r5, [r7, #0]
 8025c0c:	2101      	movs	r1, #1
 8025c0e:	89e6      	ldrh	r6, [r4, #14]
 8025c10:	4628      	mov	r0, r5
 8025c12:	f000 fcbd 	bl	8026590 <uxr_seq_num_sub>
 8025c16:	4601      	mov	r1, r0
 8025c18:	4630      	mov	r0, r6
 8025c1a:	f000 fcb9 	bl	8026590 <uxr_seq_num_sub>
 8025c1e:	4606      	mov	r6, r0
 8025c20:	b328      	cbz	r0, 8025c6e <uxr_compute_acknack+0xaa>
 8025c22:	f04f 0900 	mov.w	r9, #0
 8025c26:	f04f 0801 	mov.w	r8, #1
 8025c2a:	464d      	mov	r5, r9
 8025c2c:	fa1f f189 	uxth.w	r1, r9
 8025c30:	8838      	ldrh	r0, [r7, #0]
 8025c32:	f000 fca9 	bl	8026588 <uxr_seq_num_add>
 8025c36:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8025c3a:	6861      	ldr	r1, [r4, #4]
 8025c3c:	fa08 fe09 	lsl.w	lr, r8, r9
 8025c40:	6822      	ldr	r2, [r4, #0]
 8025c42:	f109 0901 	add.w	r9, r9, #1
 8025c46:	ea4e 0e05 	orr.w	lr, lr, r5
 8025c4a:	fbb0 f3fc 	udiv	r3, r0, ip
 8025c4e:	fbb1 f1fc 	udiv	r1, r1, ip
 8025c52:	fb03 001c 	mls	r0, r3, ip, r0
 8025c56:	b283      	uxth	r3, r0
 8025c58:	fb01 f303 	mul.w	r3, r1, r3
 8025c5c:	58d3      	ldr	r3, [r2, r3]
 8025c5e:	b90b      	cbnz	r3, 8025c64 <uxr_compute_acknack+0xa0>
 8025c60:	fa1f f58e 	uxth.w	r5, lr
 8025c64:	454e      	cmp	r6, r9
 8025c66:	d1e1      	bne.n	8025c2c <uxr_compute_acknack+0x68>
 8025c68:	4628      	mov	r0, r5
 8025c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025c6e:	4605      	mov	r5, r0
 8025c70:	4628      	mov	r0, r5
 8025c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025c76:	bf00      	nop

08025c78 <uxr_init_output_best_effort_stream>:
 8025c78:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8025c7c:	6001      	str	r1, [r0, #0]
 8025c7e:	7303      	strb	r3, [r0, #12]
 8025c80:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8025c84:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8025c88:	4770      	bx	lr
 8025c8a:	bf00      	nop

08025c8c <uxr_reset_output_best_effort_stream>:
 8025c8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8025c90:	7b03      	ldrb	r3, [r0, #12]
 8025c92:	81c2      	strh	r2, [r0, #14]
 8025c94:	6043      	str	r3, [r0, #4]
 8025c96:	4770      	bx	lr

08025c98 <uxr_prepare_best_effort_buffer_to_write>:
 8025c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025c9a:	4604      	mov	r4, r0
 8025c9c:	b083      	sub	sp, #12
 8025c9e:	6840      	ldr	r0, [r0, #4]
 8025ca0:	460d      	mov	r5, r1
 8025ca2:	4616      	mov	r6, r2
 8025ca4:	f7f9 fd28 	bl	801f6f8 <uxr_submessage_padding>
 8025ca8:	6863      	ldr	r3, [r4, #4]
 8025caa:	4418      	add	r0, r3
 8025cac:	68a3      	ldr	r3, [r4, #8]
 8025cae:	1942      	adds	r2, r0, r5
 8025cb0:	4293      	cmp	r3, r2
 8025cb2:	bf2c      	ite	cs
 8025cb4:	2701      	movcs	r7, #1
 8025cb6:	2700      	movcc	r7, #0
 8025cb8:	d202      	bcs.n	8025cc0 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8025cba:	4638      	mov	r0, r7
 8025cbc:	b003      	add	sp, #12
 8025cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025cc0:	9000      	str	r0, [sp, #0]
 8025cc2:	2300      	movs	r3, #0
 8025cc4:	4630      	mov	r0, r6
 8025cc6:	6821      	ldr	r1, [r4, #0]
 8025cc8:	f7f4 fe44 	bl	801a954 <ucdr_init_buffer_origin_offset>
 8025ccc:	6861      	ldr	r1, [r4, #4]
 8025cce:	4638      	mov	r0, r7
 8025cd0:	4429      	add	r1, r5
 8025cd2:	6061      	str	r1, [r4, #4]
 8025cd4:	b003      	add	sp, #12
 8025cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08025cd8 <uxr_prepare_best_effort_buffer_to_send>:
 8025cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025cdc:	4604      	mov	r4, r0
 8025cde:	461d      	mov	r5, r3
 8025ce0:	6840      	ldr	r0, [r0, #4]
 8025ce2:	7b23      	ldrb	r3, [r4, #12]
 8025ce4:	4298      	cmp	r0, r3
 8025ce6:	bf8c      	ite	hi
 8025ce8:	2601      	movhi	r6, #1
 8025cea:	2600      	movls	r6, #0
 8025cec:	d802      	bhi.n	8025cf4 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8025cee:	4630      	mov	r0, r6
 8025cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025cf4:	4688      	mov	r8, r1
 8025cf6:	89e0      	ldrh	r0, [r4, #14]
 8025cf8:	2101      	movs	r1, #1
 8025cfa:	4617      	mov	r7, r2
 8025cfc:	f000 fc44 	bl	8026588 <uxr_seq_num_add>
 8025d00:	6823      	ldr	r3, [r4, #0]
 8025d02:	81e0      	strh	r0, [r4, #14]
 8025d04:	8028      	strh	r0, [r5, #0]
 8025d06:	4630      	mov	r0, r6
 8025d08:	f8c8 3000 	str.w	r3, [r8]
 8025d0c:	6863      	ldr	r3, [r4, #4]
 8025d0e:	603b      	str	r3, [r7, #0]
 8025d10:	7b23      	ldrb	r3, [r4, #12]
 8025d12:	6063      	str	r3, [r4, #4]
 8025d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08025d18 <on_full_output_buffer>:
 8025d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025d1a:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8025d1e:	460c      	mov	r4, r1
 8025d20:	6803      	ldr	r3, [r0, #0]
 8025d22:	4605      	mov	r5, r0
 8025d24:	7b26      	ldrb	r6, [r4, #12]
 8025d26:	e9d1 1200 	ldrd	r1, r2, [r1]
 8025d2a:	fbb2 f2fc 	udiv	r2, r2, ip
 8025d2e:	eba3 0e01 	sub.w	lr, r3, r1
 8025d32:	6903      	ldr	r3, [r0, #16]
 8025d34:	fbbe fef2 	udiv	lr, lr, r2
 8025d38:	f10e 0e01 	add.w	lr, lr, #1
 8025d3c:	fa1f fe8e 	uxth.w	lr, lr
 8025d40:	fbbe f7fc 	udiv	r7, lr, ip
 8025d44:	fb0c ec17 	mls	ip, ip, r7, lr
 8025d48:	fa1f fc8c 	uxth.w	ip, ip
 8025d4c:	fb02 fc0c 	mul.w	ip, r2, ip
 8025d50:	f851 200c 	ldr.w	r2, [r1, ip]
 8025d54:	44b4      	add	ip, r6
 8025d56:	1b92      	subs	r2, r2, r6
 8025d58:	f10c 0c08 	add.w	ip, ip, #8
 8025d5c:	3a04      	subs	r2, #4
 8025d5e:	4461      	add	r1, ip
 8025d60:	f7f4 fe02 	bl	801a968 <ucdr_init_buffer_origin>
 8025d64:	4628      	mov	r0, r5
 8025d66:	4622      	mov	r2, r4
 8025d68:	4902      	ldr	r1, [pc, #8]	@ (8025d74 <on_full_output_buffer+0x5c>)
 8025d6a:	f7f4 fdd9 	bl	801a920 <ucdr_set_on_full_buffer_callback>
 8025d6e:	2000      	movs	r0, #0
 8025d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025d72:	bf00      	nop
 8025d74:	08025d19 	.word	0x08025d19

08025d78 <uxr_init_output_reliable_stream>:
 8025d78:	b530      	push	{r4, r5, lr}
 8025d7a:	f89d 400c 	ldrb.w	r4, [sp, #12]
 8025d7e:	8103      	strh	r3, [r0, #8]
 8025d80:	7304      	strb	r4, [r0, #12]
 8025d82:	e9c0 1200 	strd	r1, r2, [r0]
 8025d86:	b1e3      	cbz	r3, 8025dc2 <uxr_init_output_reliable_stream+0x4a>
 8025d88:	600c      	str	r4, [r1, #0]
 8025d8a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8025d8e:	f1bc 0f01 	cmp.w	ip, #1
 8025d92:	d916      	bls.n	8025dc2 <uxr_init_output_reliable_stream+0x4a>
 8025d94:	f04f 0e01 	mov.w	lr, #1
 8025d98:	6843      	ldr	r3, [r0, #4]
 8025d9a:	f10e 0501 	add.w	r5, lr, #1
 8025d9e:	7b04      	ldrb	r4, [r0, #12]
 8025da0:	6801      	ldr	r1, [r0, #0]
 8025da2:	fbbe f2fc 	udiv	r2, lr, ip
 8025da6:	fbb3 f3fc 	udiv	r3, r3, ip
 8025daa:	fb0c e212 	mls	r2, ip, r2, lr
 8025dae:	fa1f fe85 	uxth.w	lr, r5
 8025db2:	b292      	uxth	r2, r2
 8025db4:	fb02 f303 	mul.w	r3, r2, r3
 8025db8:	50cc      	str	r4, [r1, r3]
 8025dba:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8025dbe:	45f4      	cmp	ip, lr
 8025dc0:	d8ea      	bhi.n	8025d98 <uxr_init_output_reliable_stream+0x20>
 8025dc2:	4b07      	ldr	r3, [pc, #28]	@ (8025de0 <uxr_init_output_reliable_stream+0x68>)
 8025dc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8025dc8:	f04f 34ff 	mov.w	r4, #4294967295
 8025dcc:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8025dd0:	f8c0 300e 	str.w	r3, [r0, #14]
 8025dd4:	2300      	movs	r3, #0
 8025dd6:	8242      	strh	r2, [r0, #18]
 8025dd8:	8403      	strh	r3, [r0, #32]
 8025dda:	e9c0 4506 	strd	r4, r5, [r0, #24]
 8025dde:	bd30      	pop	{r4, r5, pc}
 8025de0:	ffff0000 	.word	0xffff0000
 8025de4:	00000000 	.word	0x00000000

08025de8 <uxr_reset_output_reliable_stream>:
 8025de8:	8901      	ldrh	r1, [r0, #8]
 8025dea:	b510      	push	{r4, lr}
 8025dec:	b1b1      	cbz	r1, 8025e1c <uxr_reset_output_reliable_stream+0x34>
 8025dee:	f04f 0e00 	mov.w	lr, #0
 8025df2:	46f4      	mov	ip, lr
 8025df4:	6843      	ldr	r3, [r0, #4]
 8025df6:	f10e 0e01 	add.w	lr, lr, #1
 8025dfa:	7b04      	ldrb	r4, [r0, #12]
 8025dfc:	fbbc f2f1 	udiv	r2, ip, r1
 8025e00:	fbb3 f3f1 	udiv	r3, r3, r1
 8025e04:	fb01 c212 	mls	r2, r1, r2, ip
 8025e08:	fa1f fc8e 	uxth.w	ip, lr
 8025e0c:	b292      	uxth	r2, r2
 8025e0e:	fb02 f303 	mul.w	r3, r2, r3
 8025e12:	6802      	ldr	r2, [r0, #0]
 8025e14:	50d4      	str	r4, [r2, r3]
 8025e16:	8901      	ldrh	r1, [r0, #8]
 8025e18:	4561      	cmp	r1, ip
 8025e1a:	d8eb      	bhi.n	8025df4 <uxr_reset_output_reliable_stream+0xc>
 8025e1c:	4b08      	ldr	r3, [pc, #32]	@ (8025e40 <uxr_reset_output_reliable_stream+0x58>)
 8025e1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8025e22:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8025e38 <uxr_reset_output_reliable_stream+0x50>
 8025e26:	f8c0 300e 	str.w	r3, [r0, #14]
 8025e2a:	2300      	movs	r3, #0
 8025e2c:	8242      	strh	r2, [r0, #18]
 8025e2e:	8403      	strh	r3, [r0, #32]
 8025e30:	ed80 7b06 	vstr	d7, [r0, #24]
 8025e34:	bd10      	pop	{r4, pc}
 8025e36:	bf00      	nop
 8025e38:	ffffffff 	.word	0xffffffff
 8025e3c:	7fffffff 	.word	0x7fffffff
 8025e40:	ffff0000 	.word	0xffff0000

08025e44 <uxr_prepare_reliable_buffer_to_write>:
 8025e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e48:	4604      	mov	r4, r0
 8025e4a:	b091      	sub	sp, #68	@ 0x44
 8025e4c:	8900      	ldrh	r0, [r0, #8]
 8025e4e:	468b      	mov	fp, r1
 8025e50:	89e6      	ldrh	r6, [r4, #14]
 8025e52:	9204      	str	r2, [sp, #16]
 8025e54:	6865      	ldr	r5, [r4, #4]
 8025e56:	6823      	ldr	r3, [r4, #0]
 8025e58:	f894 900c 	ldrb.w	r9, [r4, #12]
 8025e5c:	fbb6 f2f0 	udiv	r2, r6, r0
 8025e60:	fbb5 f5f0 	udiv	r5, r5, r0
 8025e64:	fb00 6212 	mls	r2, r0, r2, r6
 8025e68:	1f2f      	subs	r7, r5, #4
 8025e6a:	b292      	uxth	r2, r2
 8025e6c:	fb05 3202 	mla	r2, r5, r2, r3
 8025e70:	1d11      	adds	r1, r2, #4
 8025e72:	f8d2 8000 	ldr.w	r8, [r2]
 8025e76:	9103      	str	r1, [sp, #12]
 8025e78:	2800      	cmp	r0, #0
 8025e7a:	f000 814a 	beq.w	8026112 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 8025e7e:	f04f 0c00 	mov.w	ip, #0
 8025e82:	46e2      	mov	sl, ip
 8025e84:	4661      	mov	r1, ip
 8025e86:	f10c 0c01 	add.w	ip, ip, #1
 8025e8a:	fbb1 f2f0 	udiv	r2, r1, r0
 8025e8e:	fb00 1212 	mls	r2, r0, r2, r1
 8025e92:	fa1f f18c 	uxth.w	r1, ip
 8025e96:	b292      	uxth	r2, r2
 8025e98:	fb05 f202 	mul.w	r2, r5, r2
 8025e9c:	589a      	ldr	r2, [r3, r2]
 8025e9e:	454a      	cmp	r2, r9
 8025ea0:	d103      	bne.n	8025eaa <uxr_prepare_reliable_buffer_to_write+0x66>
 8025ea2:	f10a 0a01 	add.w	sl, sl, #1
 8025ea6:	fa1f fa8a 	uxth.w	sl, sl
 8025eaa:	4281      	cmp	r1, r0
 8025eac:	d3eb      	bcc.n	8025e86 <uxr_prepare_reliable_buffer_to_write+0x42>
 8025eae:	4640      	mov	r0, r8
 8025eb0:	2104      	movs	r1, #4
 8025eb2:	f8cd a014 	str.w	sl, [sp, #20]
 8025eb6:	f7f4 fd63 	bl	801a980 <ucdr_alignment>
 8025eba:	4480      	add	r8, r0
 8025ebc:	eb08 020b 	add.w	r2, r8, fp
 8025ec0:	42ba      	cmp	r2, r7
 8025ec2:	f240 80ca 	bls.w	802605a <uxr_prepare_reliable_buffer_to_write+0x216>
 8025ec6:	7b22      	ldrb	r2, [r4, #12]
 8025ec8:	445a      	add	r2, fp
 8025eca:	42ba      	cmp	r2, r7
 8025ecc:	f240 80b2 	bls.w	8026034 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 8025ed0:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8025ed4:	b2bb      	uxth	r3, r7
 8025ed6:	eba2 0209 	sub.w	r2, r2, r9
 8025eda:	441a      	add	r2, r3
 8025edc:	b292      	uxth	r2, r2
 8025ede:	fb0a f902 	mul.w	r9, sl, r2
 8025ee2:	9205      	str	r2, [sp, #20]
 8025ee4:	45d9      	cmp	r9, fp
 8025ee6:	9206      	str	r2, [sp, #24]
 8025ee8:	f0c0 80b3 	bcc.w	8026052 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8025eec:	f108 0204 	add.w	r2, r8, #4
 8025ef0:	42ba      	cmp	r2, r7
 8025ef2:	f080 80da 	bcs.w	80260aa <uxr_prepare_reliable_buffer_to_write+0x266>
 8025ef6:	f1a3 0904 	sub.w	r9, r3, #4
 8025efa:	9b05      	ldr	r3, [sp, #20]
 8025efc:	eba9 0908 	sub.w	r9, r9, r8
 8025f00:	fa1f f989 	uxth.w	r9, r9
 8025f04:	ebab 0b09 	sub.w	fp, fp, r9
 8025f08:	fbbb f2f3 	udiv	r2, fp, r3
 8025f0c:	fb03 b312 	mls	r3, r3, r2, fp
 8025f10:	2b00      	cmp	r3, #0
 8025f12:	f040 80c4 	bne.w	802609e <uxr_prepare_reliable_buffer_to_write+0x25a>
 8025f16:	b293      	uxth	r3, r2
 8025f18:	4553      	cmp	r3, sl
 8025f1a:	f200 809a 	bhi.w	8026052 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8025f1e:	2b00      	cmp	r3, #0
 8025f20:	f000 80f9 	beq.w	8026116 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8025f24:	f8cd 801c 	str.w	r8, [sp, #28]
 8025f28:	f04f 0a00 	mov.w	sl, #0
 8025f2c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8025f30:	f10d 0b20 	add.w	fp, sp, #32
 8025f34:	9505      	str	r5, [sp, #20]
 8025f36:	461d      	mov	r5, r3
 8025f38:	e000      	b.n	8025f3c <uxr_prepare_reliable_buffer_to_write+0xf8>
 8025f3a:	46c1      	mov	r9, r8
 8025f3c:	8922      	ldrh	r2, [r4, #8]
 8025f3e:	4658      	mov	r0, fp
 8025f40:	6863      	ldr	r3, [r4, #4]
 8025f42:	f10a 0a01 	add.w	sl, sl, #1
 8025f46:	fbb6 f1f2 	udiv	r1, r6, r2
 8025f4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8025f4e:	fb02 6111 	mls	r1, r2, r1, r6
 8025f52:	463a      	mov	r2, r7
 8025f54:	b289      	uxth	r1, r1
 8025f56:	fb03 f101 	mul.w	r1, r3, r1
 8025f5a:	6823      	ldr	r3, [r4, #0]
 8025f5c:	3104      	adds	r1, #4
 8025f5e:	4419      	add	r1, r3
 8025f60:	2300      	movs	r3, #0
 8025f62:	f851 cc04 	ldr.w	ip, [r1, #-4]
 8025f66:	f8cd c000 	str.w	ip, [sp]
 8025f6a:	f7f4 fcf3 	bl	801a954 <ucdr_init_buffer_origin_offset>
 8025f6e:	464a      	mov	r2, r9
 8025f70:	2300      	movs	r3, #0
 8025f72:	210d      	movs	r1, #13
 8025f74:	4658      	mov	r0, fp
 8025f76:	f7f9 fb7f 	bl	801f678 <uxr_buffer_submessage_header>
 8025f7a:	8921      	ldrh	r1, [r4, #8]
 8025f7c:	6863      	ldr	r3, [r4, #4]
 8025f7e:	4630      	mov	r0, r6
 8025f80:	fbb6 f2f1 	udiv	r2, r6, r1
 8025f84:	fbb3 f3f1 	udiv	r3, r3, r1
 8025f88:	fb01 6212 	mls	r2, r1, r2, r6
 8025f8c:	2101      	movs	r1, #1
 8025f8e:	b292      	uxth	r2, r2
 8025f90:	fb02 f303 	mul.w	r3, r2, r3
 8025f94:	6822      	ldr	r2, [r4, #0]
 8025f96:	50d7      	str	r7, [r2, r3]
 8025f98:	f000 faf6 	bl	8026588 <uxr_seq_num_add>
 8025f9c:	4606      	mov	r6, r0
 8025f9e:	fa1f f38a 	uxth.w	r3, sl
 8025fa2:	429d      	cmp	r5, r3
 8025fa4:	d8c9      	bhi.n	8025f3a <uxr_prepare_reliable_buffer_to_write+0xf6>
 8025fa6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8025faa:	9d05      	ldr	r5, [sp, #20]
 8025fac:	8920      	ldrh	r0, [r4, #8]
 8025fae:	463a      	mov	r2, r7
 8025fb0:	6863      	ldr	r3, [r4, #4]
 8025fb2:	fbb6 f1f0 	udiv	r1, r6, r0
 8025fb6:	fbb3 f3f0 	udiv	r3, r3, r0
 8025fba:	fb00 6111 	mls	r1, r0, r1, r6
 8025fbe:	4658      	mov	r0, fp
 8025fc0:	b289      	uxth	r1, r1
 8025fc2:	fb01 f303 	mul.w	r3, r1, r3
 8025fc6:	6821      	ldr	r1, [r4, #0]
 8025fc8:	3304      	adds	r3, #4
 8025fca:	4419      	add	r1, r3
 8025fcc:	2300      	movs	r3, #0
 8025fce:	f851 7c04 	ldr.w	r7, [r1, #-4]
 8025fd2:	9700      	str	r7, [sp, #0]
 8025fd4:	f7f4 fcbe 	bl	801a954 <ucdr_init_buffer_origin_offset>
 8025fd8:	9f06      	ldr	r7, [sp, #24]
 8025fda:	4658      	mov	r0, fp
 8025fdc:	2302      	movs	r3, #2
 8025fde:	b2ba      	uxth	r2, r7
 8025fe0:	210d      	movs	r1, #13
 8025fe2:	f7f9 fb49 	bl	801f678 <uxr_buffer_submessage_header>
 8025fe6:	f108 0104 	add.w	r1, r8, #4
 8025fea:	9b03      	ldr	r3, [sp, #12]
 8025fec:	f1a5 0208 	sub.w	r2, r5, #8
 8025ff0:	8925      	ldrh	r5, [r4, #8]
 8025ff2:	440b      	add	r3, r1
 8025ff4:	eba2 0208 	sub.w	r2, r2, r8
 8025ff8:	fbb6 f0f5 	udiv	r0, r6, r5
 8025ffc:	4619      	mov	r1, r3
 8025ffe:	6863      	ldr	r3, [r4, #4]
 8026000:	fb05 6010 	mls	r0, r5, r0, r6
 8026004:	fbb3 f3f5 	udiv	r3, r3, r5
 8026008:	b280      	uxth	r0, r0
 802600a:	6825      	ldr	r5, [r4, #0]
 802600c:	fb00 f303 	mul.w	r3, r0, r3
 8026010:	7b20      	ldrb	r0, [r4, #12]
 8026012:	3004      	adds	r0, #4
 8026014:	4438      	add	r0, r7
 8026016:	50e8      	str	r0, [r5, r3]
 8026018:	9d04      	ldr	r5, [sp, #16]
 802601a:	4628      	mov	r0, r5
 802601c:	f7f4 fcac 	bl	801a978 <ucdr_init_buffer>
 8026020:	4628      	mov	r0, r5
 8026022:	4622      	mov	r2, r4
 8026024:	493d      	ldr	r1, [pc, #244]	@ (802611c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8026026:	f7f4 fc7b 	bl	801a920 <ucdr_set_on_full_buffer_callback>
 802602a:	2001      	movs	r0, #1
 802602c:	81e6      	strh	r6, [r4, #14]
 802602e:	b011      	add	sp, #68	@ 0x44
 8026030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026034:	2101      	movs	r1, #1
 8026036:	89e0      	ldrh	r0, [r4, #14]
 8026038:	f000 faa6 	bl	8026588 <uxr_seq_num_add>
 802603c:	4605      	mov	r5, r0
 802603e:	8921      	ldrh	r1, [r4, #8]
 8026040:	8a60      	ldrh	r0, [r4, #18]
 8026042:	f000 faa1 	bl	8026588 <uxr_seq_num_add>
 8026046:	4601      	mov	r1, r0
 8026048:	4628      	mov	r0, r5
 802604a:	f000 faa5 	bl	8026598 <uxr_seq_num_cmp>
 802604e:	2800      	cmp	r0, #0
 8026050:	dd44      	ble.n	80260dc <uxr_prepare_reliable_buffer_to_write+0x298>
 8026052:	2000      	movs	r0, #0
 8026054:	b011      	add	sp, #68	@ 0x44
 8026056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802605a:	8921      	ldrh	r1, [r4, #8]
 802605c:	8a60      	ldrh	r0, [r4, #18]
 802605e:	9205      	str	r2, [sp, #20]
 8026060:	f000 fa92 	bl	8026588 <uxr_seq_num_add>
 8026064:	4601      	mov	r1, r0
 8026066:	4630      	mov	r0, r6
 8026068:	f000 fa96 	bl	8026598 <uxr_seq_num_cmp>
 802606c:	2800      	cmp	r0, #0
 802606e:	9a05      	ldr	r2, [sp, #20]
 8026070:	dcef      	bgt.n	8026052 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8026072:	8925      	ldrh	r5, [r4, #8]
 8026074:	e9d4 7300 	ldrd	r7, r3, [r4]
 8026078:	fbb6 f4f5 	udiv	r4, r6, r5
 802607c:	fbb3 f3f5 	udiv	r3, r3, r5
 8026080:	fb05 6414 	mls	r4, r5, r4, r6
 8026084:	b2a4      	uxth	r4, r4
 8026086:	fb04 f303 	mul.w	r3, r4, r3
 802608a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 802608e:	50fa      	str	r2, [r7, r3]
 8026090:	2300      	movs	r3, #0
 8026092:	f8cd 8000 	str.w	r8, [sp]
 8026096:	f7f4 fc5d 	bl	801a954 <ucdr_init_buffer_origin_offset>
 802609a:	2001      	movs	r0, #1
 802609c:	e7da      	b.n	8026054 <uxr_prepare_reliable_buffer_to_write+0x210>
 802609e:	3201      	adds	r2, #1
 80260a0:	9306      	str	r3, [sp, #24]
 80260a2:	b293      	uxth	r3, r2
 80260a4:	4553      	cmp	r3, sl
 80260a6:	d8d4      	bhi.n	8026052 <uxr_prepare_reliable_buffer_to_write+0x20e>
 80260a8:	e739      	b.n	8025f1e <uxr_prepare_reliable_buffer_to_write+0xda>
 80260aa:	4630      	mov	r0, r6
 80260ac:	2101      	movs	r1, #1
 80260ae:	9307      	str	r3, [sp, #28]
 80260b0:	f000 fa6a 	bl	8026588 <uxr_seq_num_add>
 80260b4:	4606      	mov	r6, r0
 80260b6:	8920      	ldrh	r0, [r4, #8]
 80260b8:	6862      	ldr	r2, [r4, #4]
 80260ba:	fbb6 f1f0 	udiv	r1, r6, r0
 80260be:	fbb2 f2f0 	udiv	r2, r2, r0
 80260c2:	fb00 6111 	mls	r1, r0, r1, r6
 80260c6:	b289      	uxth	r1, r1
 80260c8:	fb01 f202 	mul.w	r2, r1, r2
 80260cc:	6821      	ldr	r1, [r4, #0]
 80260ce:	3204      	adds	r2, #4
 80260d0:	188b      	adds	r3, r1, r2
 80260d2:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80260d6:	9303      	str	r3, [sp, #12]
 80260d8:	9b07      	ldr	r3, [sp, #28]
 80260da:	e70c      	b.n	8025ef6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 80260dc:	8921      	ldrh	r1, [r4, #8]
 80260de:	6863      	ldr	r3, [r4, #4]
 80260e0:	9804      	ldr	r0, [sp, #16]
 80260e2:	fbb5 f2f1 	udiv	r2, r5, r1
 80260e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80260ea:	fb01 5212 	mls	r2, r1, r2, r5
 80260ee:	6821      	ldr	r1, [r4, #0]
 80260f0:	b292      	uxth	r2, r2
 80260f2:	fb02 f303 	mul.w	r3, r2, r3
 80260f6:	7b22      	ldrb	r2, [r4, #12]
 80260f8:	3304      	adds	r3, #4
 80260fa:	445a      	add	r2, fp
 80260fc:	4419      	add	r1, r3
 80260fe:	f841 2c04 	str.w	r2, [r1, #-4]
 8026102:	7b23      	ldrb	r3, [r4, #12]
 8026104:	9300      	str	r3, [sp, #0]
 8026106:	2300      	movs	r3, #0
 8026108:	f7f4 fc24 	bl	801a954 <ucdr_init_buffer_origin_offset>
 802610c:	2001      	movs	r0, #1
 802610e:	81e5      	strh	r5, [r4, #14]
 8026110:	e7a0      	b.n	8026054 <uxr_prepare_reliable_buffer_to_write+0x210>
 8026112:	4682      	mov	sl, r0
 8026114:	e6cb      	b.n	8025eae <uxr_prepare_reliable_buffer_to_write+0x6a>
 8026116:	f10d 0b20 	add.w	fp, sp, #32
 802611a:	e747      	b.n	8025fac <uxr_prepare_reliable_buffer_to_write+0x168>
 802611c:	08025d19 	.word	0x08025d19

08026120 <uxr_prepare_next_reliable_buffer_to_send>:
 8026120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026122:	4604      	mov	r4, r0
 8026124:	461d      	mov	r5, r3
 8026126:	460f      	mov	r7, r1
 8026128:	8a00      	ldrh	r0, [r0, #16]
 802612a:	2101      	movs	r1, #1
 802612c:	4616      	mov	r6, r2
 802612e:	f000 fa2b 	bl	8026588 <uxr_seq_num_add>
 8026132:	8028      	strh	r0, [r5, #0]
 8026134:	8922      	ldrh	r2, [r4, #8]
 8026136:	6863      	ldr	r3, [r4, #4]
 8026138:	fbb0 f1f2 	udiv	r1, r0, r2
 802613c:	fbb3 f3f2 	udiv	r3, r3, r2
 8026140:	fb02 0c11 	mls	ip, r2, r1, r0
 8026144:	89e1      	ldrh	r1, [r4, #14]
 8026146:	fa1f fc8c 	uxth.w	ip, ip
 802614a:	fb0c fc03 	mul.w	ip, ip, r3
 802614e:	6823      	ldr	r3, [r4, #0]
 8026150:	f10c 0c04 	add.w	ip, ip, #4
 8026154:	4463      	add	r3, ip
 8026156:	603b      	str	r3, [r7, #0]
 8026158:	6823      	ldr	r3, [r4, #0]
 802615a:	449c      	add	ip, r3
 802615c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8026160:	6033      	str	r3, [r6, #0]
 8026162:	f000 fa19 	bl	8026598 <uxr_seq_num_cmp>
 8026166:	2800      	cmp	r0, #0
 8026168:	dd01      	ble.n	802616e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 802616a:	2000      	movs	r0, #0
 802616c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802616e:	7b23      	ldrb	r3, [r4, #12]
 8026170:	6832      	ldr	r2, [r6, #0]
 8026172:	429a      	cmp	r2, r3
 8026174:	d9f9      	bls.n	802616a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8026176:	8a61      	ldrh	r1, [r4, #18]
 8026178:	8a20      	ldrh	r0, [r4, #16]
 802617a:	f000 fa09 	bl	8026590 <uxr_seq_num_sub>
 802617e:	8923      	ldrh	r3, [r4, #8]
 8026180:	4283      	cmp	r3, r0
 8026182:	d0f2      	beq.n	802616a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8026184:	8828      	ldrh	r0, [r5, #0]
 8026186:	89e3      	ldrh	r3, [r4, #14]
 8026188:	8220      	strh	r0, [r4, #16]
 802618a:	4298      	cmp	r0, r3
 802618c:	d001      	beq.n	8026192 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 802618e:	2001      	movs	r0, #1
 8026190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026192:	2101      	movs	r1, #1
 8026194:	f000 f9f8 	bl	8026588 <uxr_seq_num_add>
 8026198:	4603      	mov	r3, r0
 802619a:	2001      	movs	r0, #1
 802619c:	81e3      	strh	r3, [r4, #14]
 802619e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080261a0 <uxr_update_output_stream_heartbeat_timestamp>:
 80261a0:	b570      	push	{r4, r5, r6, lr}
 80261a2:	8a01      	ldrh	r1, [r0, #16]
 80261a4:	4604      	mov	r4, r0
 80261a6:	8a40      	ldrh	r0, [r0, #18]
 80261a8:	4615      	mov	r5, r2
 80261aa:	461e      	mov	r6, r3
 80261ac:	f000 f9f4 	bl	8026598 <uxr_seq_num_cmp>
 80261b0:	2800      	cmp	r0, #0
 80261b2:	db07      	blt.n	80261c4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80261b4:	f04f 32ff 	mov.w	r2, #4294967295
 80261b8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80261bc:	2000      	movs	r0, #0
 80261be:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80261c2:	bd70      	pop	{r4, r5, r6, pc}
 80261c4:	f894 0020 	ldrb.w	r0, [r4, #32]
 80261c8:	b940      	cbnz	r0, 80261dc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80261ca:	2301      	movs	r3, #1
 80261cc:	f884 3020 	strb.w	r3, [r4, #32]
 80261d0:	3564      	adds	r5, #100	@ 0x64
 80261d2:	f146 0600 	adc.w	r6, r6, #0
 80261d6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80261da:	bd70      	pop	{r4, r5, r6, pc}
 80261dc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80261e0:	4295      	cmp	r5, r2
 80261e2:	eb76 0303 	sbcs.w	r3, r6, r3
 80261e6:	db04      	blt.n	80261f2 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 80261e8:	1c43      	adds	r3, r0, #1
 80261ea:	2001      	movs	r0, #1
 80261ec:	f884 3020 	strb.w	r3, [r4, #32]
 80261f0:	e7ee      	b.n	80261d0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 80261f2:	2000      	movs	r0, #0
 80261f4:	e7ec      	b.n	80261d0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 80261f6:	bf00      	nop

080261f8 <uxr_begin_output_nack_buffer_it>:
 80261f8:	8a40      	ldrh	r0, [r0, #18]
 80261fa:	4770      	bx	lr

080261fc <uxr_next_reliable_nack_buffer_to_send>:
 80261fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026200:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 8026204:	b197      	cbz	r7, 802622c <uxr_next_reliable_nack_buffer_to_send+0x30>
 8026206:	4680      	mov	r8, r0
 8026208:	460d      	mov	r5, r1
 802620a:	4616      	mov	r6, r2
 802620c:	461c      	mov	r4, r3
 802620e:	8818      	ldrh	r0, [r3, #0]
 8026210:	2101      	movs	r1, #1
 8026212:	f000 f9b9 	bl	8026588 <uxr_seq_num_add>
 8026216:	8020      	strh	r0, [r4, #0]
 8026218:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 802621c:	f000 f9bc 	bl	8026598 <uxr_seq_num_cmp>
 8026220:	2800      	cmp	r0, #0
 8026222:	dd06      	ble.n	8026232 <uxr_next_reliable_nack_buffer_to_send+0x36>
 8026224:	2300      	movs	r3, #0
 8026226:	461f      	mov	r7, r3
 8026228:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 802622c:	4638      	mov	r0, r7
 802622e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026232:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8026236:	8820      	ldrh	r0, [r4, #0]
 8026238:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802623c:	fbb0 f3f2 	udiv	r3, r0, r2
 8026240:	fbb1 fcf2 	udiv	ip, r1, r2
 8026244:	fb02 0313 	mls	r3, r2, r3, r0
 8026248:	b29b      	uxth	r3, r3
 802624a:	fb03 fc0c 	mul.w	ip, r3, ip
 802624e:	f8d8 3000 	ldr.w	r3, [r8]
 8026252:	f10c 0c04 	add.w	ip, ip, #4
 8026256:	4463      	add	r3, ip
 8026258:	602b      	str	r3, [r5, #0]
 802625a:	f8d8 3000 	ldr.w	r3, [r8]
 802625e:	4463      	add	r3, ip
 8026260:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8026264:	6033      	str	r3, [r6, #0]
 8026266:	f898 200c 	ldrb.w	r2, [r8, #12]
 802626a:	429a      	cmp	r2, r3
 802626c:	d0d0      	beq.n	8026210 <uxr_next_reliable_nack_buffer_to_send+0x14>
 802626e:	e7dd      	b.n	802622c <uxr_next_reliable_nack_buffer_to_send+0x30>

08026270 <uxr_process_acknack>:
 8026270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026272:	4604      	mov	r4, r0
 8026274:	460e      	mov	r6, r1
 8026276:	4610      	mov	r0, r2
 8026278:	2101      	movs	r1, #1
 802627a:	f000 f989 	bl	8026590 <uxr_seq_num_sub>
 802627e:	8a61      	ldrh	r1, [r4, #18]
 8026280:	f000 f986 	bl	8026590 <uxr_seq_num_sub>
 8026284:	b1c8      	cbz	r0, 80262ba <uxr_process_acknack+0x4a>
 8026286:	4605      	mov	r5, r0
 8026288:	2700      	movs	r7, #0
 802628a:	2101      	movs	r1, #1
 802628c:	8a60      	ldrh	r0, [r4, #18]
 802628e:	f000 f97b 	bl	8026588 <uxr_seq_num_add>
 8026292:	8923      	ldrh	r3, [r4, #8]
 8026294:	6862      	ldr	r2, [r4, #4]
 8026296:	3701      	adds	r7, #1
 8026298:	f894 c00c 	ldrb.w	ip, [r4, #12]
 802629c:	6821      	ldr	r1, [r4, #0]
 802629e:	42bd      	cmp	r5, r7
 80262a0:	8260      	strh	r0, [r4, #18]
 80262a2:	fbb0 fef3 	udiv	lr, r0, r3
 80262a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80262aa:	fb03 031e 	mls	r3, r3, lr, r0
 80262ae:	b29b      	uxth	r3, r3
 80262b0:	fb02 f303 	mul.w	r3, r2, r3
 80262b4:	f841 c003 	str.w	ip, [r1, r3]
 80262b8:	d1e7      	bne.n	802628a <uxr_process_acknack+0x1a>
 80262ba:	3e00      	subs	r6, #0
 80262bc:	f04f 0300 	mov.w	r3, #0
 80262c0:	bf18      	it	ne
 80262c2:	2601      	movne	r6, #1
 80262c4:	f884 3020 	strb.w	r3, [r4, #32]
 80262c8:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80262cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80262ce:	bf00      	nop

080262d0 <uxr_is_output_up_to_date>:
 80262d0:	8a01      	ldrh	r1, [r0, #16]
 80262d2:	8a40      	ldrh	r0, [r0, #18]
 80262d4:	b508      	push	{r3, lr}
 80262d6:	f000 f95f 	bl	8026598 <uxr_seq_num_cmp>
 80262da:	fab0 f080 	clz	r0, r0
 80262de:	0940      	lsrs	r0, r0, #5
 80262e0:	bd08      	pop	{r3, pc}
 80262e2:	bf00      	nop

080262e4 <get_available_free_slots>:
 80262e4:	8901      	ldrh	r1, [r0, #8]
 80262e6:	b1e1      	cbz	r1, 8026322 <get_available_free_slots+0x3e>
 80262e8:	6843      	ldr	r3, [r0, #4]
 80262ea:	f04f 0c00 	mov.w	ip, #0
 80262ee:	b530      	push	{r4, r5, lr}
 80262f0:	fbb3 fef1 	udiv	lr, r3, r1
 80262f4:	6805      	ldr	r5, [r0, #0]
 80262f6:	4662      	mov	r2, ip
 80262f8:	7b04      	ldrb	r4, [r0, #12]
 80262fa:	4660      	mov	r0, ip
 80262fc:	f10c 0c01 	add.w	ip, ip, #1
 8026300:	fbb2 f3f1 	udiv	r3, r2, r1
 8026304:	fb01 2313 	mls	r3, r1, r3, r2
 8026308:	fa1f f28c 	uxth.w	r2, ip
 802630c:	b29b      	uxth	r3, r3
 802630e:	fb0e f303 	mul.w	r3, lr, r3
 8026312:	58eb      	ldr	r3, [r5, r3]
 8026314:	429c      	cmp	r4, r3
 8026316:	d101      	bne.n	802631c <get_available_free_slots+0x38>
 8026318:	3001      	adds	r0, #1
 802631a:	b280      	uxth	r0, r0
 802631c:	428a      	cmp	r2, r1
 802631e:	d3ed      	bcc.n	80262fc <get_available_free_slots+0x18>
 8026320:	bd30      	pop	{r4, r5, pc}
 8026322:	4608      	mov	r0, r1
 8026324:	4770      	bx	lr
 8026326:	bf00      	nop

08026328 <uxr_buffer_request_data>:
 8026328:	b530      	push	{r4, r5, lr}
 802632a:	b095      	sub	sp, #84	@ 0x54
 802632c:	4604      	mov	r4, r0
 802632e:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8026330:	9303      	str	r3, [sp, #12]
 8026332:	2d00      	cmp	r5, #0
 8026334:	f88d 301c 	strb.w	r3, [sp, #28]
 8026338:	e9cd 2104 	strd	r2, r1, [sp, #16]
 802633c:	f04f 0200 	mov.w	r2, #0
 8026340:	bf14      	ite	ne
 8026342:	2101      	movne	r1, #1
 8026344:	4611      	moveq	r1, r2
 8026346:	f88d 201d 	strb.w	r2, [sp, #29]
 802634a:	f88d 201e 	strb.w	r2, [sp, #30]
 802634e:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8026352:	d021      	beq.n	8026398 <uxr_buffer_request_data+0x70>
 8026354:	686b      	ldr	r3, [r5, #4]
 8026356:	2210      	movs	r2, #16
 8026358:	6829      	ldr	r1, [r5, #0]
 802635a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 802635e:	f8cd 1026 	str.w	r1, [sp, #38]	@ 0x26
 8026362:	2308      	movs	r3, #8
 8026364:	2100      	movs	r1, #0
 8026366:	4620      	mov	r0, r4
 8026368:	e9cd 3100 	strd	r3, r1, [sp]
 802636c:	ab0c      	add	r3, sp, #48	@ 0x30
 802636e:	9905      	ldr	r1, [sp, #20]
 8026370:	f7f8 fed6 	bl	801f120 <uxr_prepare_stream_to_write_submessage>
 8026374:	b918      	cbnz	r0, 802637e <uxr_buffer_request_data+0x56>
 8026376:	4604      	mov	r4, r0
 8026378:	4620      	mov	r0, r4
 802637a:	b015      	add	sp, #84	@ 0x54
 802637c:	bd30      	pop	{r4, r5, pc}
 802637e:	9904      	ldr	r1, [sp, #16]
 8026380:	aa06      	add	r2, sp, #24
 8026382:	4620      	mov	r0, r4
 8026384:	f7f9 f808 	bl	801f398 <uxr_init_base_object_request>
 8026388:	4604      	mov	r4, r0
 802638a:	a906      	add	r1, sp, #24
 802638c:	a80c      	add	r0, sp, #48	@ 0x30
 802638e:	f7fa fb07 	bl	80209a0 <uxr_serialize_READ_DATA_Payload>
 8026392:	4620      	mov	r0, r4
 8026394:	b015      	add	sp, #84	@ 0x54
 8026396:	bd30      	pop	{r4, r5, pc}
 8026398:	2208      	movs	r2, #8
 802639a:	e7e2      	b.n	8026362 <uxr_buffer_request_data+0x3a>

0802639c <uxr_buffer_cancel_data>:
 802639c:	b510      	push	{r4, lr}
 802639e:	2300      	movs	r3, #0
 80263a0:	b094      	sub	sp, #80	@ 0x50
 80263a2:	4604      	mov	r4, r0
 80263a4:	9205      	str	r2, [sp, #20]
 80263a6:	9301      	str	r3, [sp, #4]
 80263a8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80263ac:	f88d 301e 	strb.w	r3, [sp, #30]
 80263b0:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 80263b4:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80263b8:	2308      	movs	r3, #8
 80263ba:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80263be:	2201      	movs	r2, #1
 80263c0:	9300      	str	r3, [sp, #0]
 80263c2:	ab0c      	add	r3, sp, #48	@ 0x30
 80263c4:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 80263c8:	2210      	movs	r2, #16
 80263ca:	f7f8 fea9 	bl	801f120 <uxr_prepare_stream_to_write_submessage>
 80263ce:	b918      	cbnz	r0, 80263d8 <uxr_buffer_cancel_data+0x3c>
 80263d0:	4604      	mov	r4, r0
 80263d2:	4620      	mov	r0, r4
 80263d4:	b014      	add	sp, #80	@ 0x50
 80263d6:	bd10      	pop	{r4, pc}
 80263d8:	9905      	ldr	r1, [sp, #20]
 80263da:	aa06      	add	r2, sp, #24
 80263dc:	4620      	mov	r0, r4
 80263de:	f7f8 ffdb 	bl	801f398 <uxr_init_base_object_request>
 80263e2:	4604      	mov	r4, r0
 80263e4:	a906      	add	r1, sp, #24
 80263e6:	a80c      	add	r0, sp, #48	@ 0x30
 80263e8:	f7fa fada 	bl	80209a0 <uxr_serialize_READ_DATA_Payload>
 80263ec:	4620      	mov	r0, r4
 80263ee:	b014      	add	sp, #80	@ 0x50
 80263f0:	bd10      	pop	{r4, pc}
 80263f2:	bf00      	nop

080263f4 <read_submessage_format>:
 80263f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80263f8:	b095      	sub	sp, #84	@ 0x54
 80263fa:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 80263fe:	b113      	cbz	r3, 8026406 <read_submessage_format+0x12>
 8026400:	b015      	add	sp, #84	@ 0x54
 8026402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026406:	4606      	mov	r6, r0
 8026408:	981c      	ldr	r0, [sp, #112]	@ 0x70
 802640a:	460c      	mov	r4, r1
 802640c:	4615      	mov	r5, r2
 802640e:	9004      	str	r0, [sp, #16]
 8026410:	4699      	mov	r9, r3
 8026412:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8026414:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8026418:	9005      	str	r0, [sp, #20]
 802641a:	a80c      	add	r0, sp, #48	@ 0x30
 802641c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8026420:	1a52      	subs	r2, r2, r1
 8026422:	f7f4 faa9 	bl	801a978 <ucdr_init_buffer>
 8026426:	a80c      	add	r0, sp, #48	@ 0x30
 8026428:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 802642c:	f7f4 fa78 	bl	801a920 <ucdr_set_on_full_buffer_callback>
 8026430:	69e2      	ldr	r2, [r4, #28]
 8026432:	b19a      	cbz	r2, 802645c <read_submessage_format+0x68>
 8026434:	f1b8 0f07 	cmp.w	r8, #7
 8026438:	f882 9014 	strb.w	r9, [r2, #20]
 802643c:	d040      	beq.n	80264c0 <read_submessage_format+0xcc>
 802643e:	f1b8 0f08 	cmp.w	r8, #8
 8026442:	d02e      	beq.n	80264a2 <read_submessage_format+0xae>
 8026444:	f1b8 0f06 	cmp.w	r8, #6
 8026448:	d011      	beq.n	802646e <read_submessage_format+0x7a>
 802644a:	2301      	movs	r3, #1
 802644c:	7513      	strb	r3, [r2, #20]
 802644e:	4629      	mov	r1, r5
 8026450:	4620      	mov	r0, r4
 8026452:	f7f4 fae5 	bl	801aa20 <ucdr_advance_buffer>
 8026456:	b015      	add	sp, #84	@ 0x54
 8026458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802645c:	f1b8 0f07 	cmp.w	r8, #7
 8026460:	d02e      	beq.n	80264c0 <read_submessage_format+0xcc>
 8026462:	f1b8 0f08 	cmp.w	r8, #8
 8026466:	d01c      	beq.n	80264a2 <read_submessage_format+0xae>
 8026468:	f1b8 0f06 	cmp.w	r8, #6
 802646c:	d1ef      	bne.n	802644e <read_submessage_format+0x5a>
 802646e:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 8026472:	f1b8 0f00 	cmp.w	r8, #0
 8026476:	d011      	beq.n	802649c <read_submessage_format+0xa8>
 8026478:	ab0c      	add	r3, sp, #48	@ 0x30
 802647a:	9501      	str	r5, [sp, #4]
 802647c:	463a      	mov	r2, r7
 802647e:	4630      	mov	r0, r6
 8026480:	9300      	str	r3, [sp, #0]
 8026482:	2306      	movs	r3, #6
 8026484:	f88d 3016 	strb.w	r3, [sp, #22]
 8026488:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 802648c:	9302      	str	r3, [sp, #8]
 802648e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8026492:	47c0      	blx	r8
 8026494:	2301      	movs	r3, #1
 8026496:	69e2      	ldr	r2, [r4, #28]
 8026498:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 802649c:	2a00      	cmp	r2, #0
 802649e:	d1d4      	bne.n	802644a <read_submessage_format+0x56>
 80264a0:	e7d5      	b.n	802644e <read_submessage_format+0x5a>
 80264a2:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 80264a6:	2b00      	cmp	r3, #0
 80264a8:	d0f8      	beq.n	802649c <read_submessage_format+0xa8>
 80264aa:	a80c      	add	r0, sp, #48	@ 0x30
 80264ac:	a906      	add	r1, sp, #24
 80264ae:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80264b2:	f7fa fb41 	bl	8020b38 <uxr_deserialize_SampleIdentity>
 80264b6:	b9a0      	cbnz	r0, 80264e2 <read_submessage_format+0xee>
 80264b8:	69e2      	ldr	r2, [r4, #28]
 80264ba:	2a00      	cmp	r2, #0
 80264bc:	d1c5      	bne.n	802644a <read_submessage_format+0x56>
 80264be:	e7c6      	b.n	802644e <read_submessage_format+0x5a>
 80264c0:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 80264c4:	b13b      	cbz	r3, 80264d6 <read_submessage_format+0xe2>
 80264c6:	a906      	add	r1, sp, #24
 80264c8:	a80c      	add	r0, sp, #48	@ 0x30
 80264ca:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80264ce:	f7fa f807 	bl	80204e0 <uxr_deserialize_BaseObjectRequest>
 80264d2:	bb60      	cbnz	r0, 802652e <read_submessage_format+0x13a>
 80264d4:	69e2      	ldr	r2, [r4, #28]
 80264d6:	68a3      	ldr	r3, [r4, #8]
 80264d8:	442b      	add	r3, r5
 80264da:	60a3      	str	r3, [r4, #8]
 80264dc:	2a00      	cmp	r2, #0
 80264de:	d1b4      	bne.n	802644a <read_submessage_format+0x56>
 80264e0:	e7b5      	b.n	802644e <read_submessage_format+0x5a>
 80264e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80264e4:	a80c      	add	r0, sp, #48	@ 0x30
 80264e6:	eba8 0803 	sub.w	r8, r8, r3
 80264ea:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80264ee:	44a8      	add	r8, r5
 80264f0:	1a52      	subs	r2, r2, r1
 80264f2:	f7f4 fa41 	bl	801a978 <ucdr_init_buffer>
 80264f6:	a80c      	add	r0, sp, #48	@ 0x30
 80264f8:	fa1f f888 	uxth.w	r8, r8
 80264fc:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8026500:	f7f4 fa0e 	bl	801a920 <ucdr_set_on_full_buffer_callback>
 8026504:	ab0c      	add	r3, sp, #48	@ 0x30
 8026506:	2108      	movs	r1, #8
 8026508:	f8cd 8004 	str.w	r8, [sp, #4]
 802650c:	9300      	str	r3, [sp, #0]
 802650e:	463a      	mov	r2, r7
 8026510:	f88d 1016 	strb.w	r1, [sp, #22]
 8026514:	ab06      	add	r3, sp, #24
 8026516:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 802651a:	4630      	mov	r0, r6
 802651c:	9102      	str	r1, [sp, #8]
 802651e:	9905      	ldr	r1, [sp, #20]
 8026520:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 8026524:	47b8      	blx	r7
 8026526:	2301      	movs	r3, #1
 8026528:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 802652c:	e7c4      	b.n	80264b8 <read_submessage_format+0xc4>
 802652e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8026532:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8026534:	a80c      	add	r0, sp, #48	@ 0x30
 8026536:	1a52      	subs	r2, r2, r1
 8026538:	eba8 0803 	sub.w	r8, r8, r3
 802653c:	f7f4 fa1c 	bl	801a978 <ucdr_init_buffer>
 8026540:	a80c      	add	r0, sp, #48	@ 0x30
 8026542:	44a8      	add	r8, r5
 8026544:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8026548:	f7f4 f9ea 	bl	801a920 <ucdr_set_on_full_buffer_callback>
 802654c:	ab0c      	add	r3, sp, #48	@ 0x30
 802654e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8026552:	fa1f f888 	uxth.w	r8, r8
 8026556:	9300      	str	r3, [sp, #0]
 8026558:	463a      	mov	r2, r7
 802655a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 802655e:	4630      	mov	r0, r6
 8026560:	f8cd 8004 	str.w	r8, [sp, #4]
 8026564:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8026568:	2107      	movs	r1, #7
 802656a:	f88d 1016 	strb.w	r1, [sp, #22]
 802656e:	b29b      	uxth	r3, r3
 8026570:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 8026574:	9102      	str	r1, [sp, #8]
 8026576:	9905      	ldr	r1, [sp, #20]
 8026578:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 802657c:	47b8      	blx	r7
 802657e:	2301      	movs	r3, #1
 8026580:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8026584:	e7a6      	b.n	80264d4 <read_submessage_format+0xe0>
 8026586:	bf00      	nop

08026588 <uxr_seq_num_add>:
 8026588:	4408      	add	r0, r1
 802658a:	b280      	uxth	r0, r0
 802658c:	4770      	bx	lr
 802658e:	bf00      	nop

08026590 <uxr_seq_num_sub>:
 8026590:	1a40      	subs	r0, r0, r1
 8026592:	b280      	uxth	r0, r0
 8026594:	4770      	bx	lr
 8026596:	bf00      	nop

08026598 <uxr_seq_num_cmp>:
 8026598:	4288      	cmp	r0, r1
 802659a:	d011      	beq.n	80265c0 <uxr_seq_num_cmp+0x28>
 802659c:	d309      	bcc.n	80265b2 <uxr_seq_num_cmp+0x1a>
 802659e:	4288      	cmp	r0, r1
 80265a0:	d910      	bls.n	80265c4 <uxr_seq_num_cmp+0x2c>
 80265a2:	1a40      	subs	r0, r0, r1
 80265a4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80265a8:	bfd4      	ite	le
 80265aa:	2001      	movle	r0, #1
 80265ac:	f04f 30ff 	movgt.w	r0, #4294967295
 80265b0:	4770      	bx	lr
 80265b2:	1a0b      	subs	r3, r1, r0
 80265b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80265b8:	daf1      	bge.n	802659e <uxr_seq_num_cmp+0x6>
 80265ba:	f04f 30ff 	mov.w	r0, #4294967295
 80265be:	4770      	bx	lr
 80265c0:	2000      	movs	r0, #0
 80265c2:	4770      	bx	lr
 80265c4:	2001      	movs	r0, #1
 80265c6:	4770      	bx	lr

080265c8 <uxr_init_framing_io>:
 80265c8:	2300      	movs	r3, #0
 80265ca:	7041      	strb	r1, [r0, #1]
 80265cc:	7003      	strb	r3, [r0, #0]
 80265ce:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80265d0:	4770      	bx	lr
 80265d2:	bf00      	nop

080265d4 <uxr_write_framed_msg>:
 80265d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80265d8:	4617      	mov	r7, r2
 80265da:	7842      	ldrb	r2, [r0, #1]
 80265dc:	460e      	mov	r6, r1
 80265de:	b083      	sub	sp, #12
 80265e0:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 80265e4:	469b      	mov	fp, r3
 80265e6:	237e      	movs	r3, #126	@ 0x7e
 80265e8:	4604      	mov	r4, r0
 80265ea:	2901      	cmp	r1, #1
 80265ec:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80265f0:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80265f4:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80265f8:	f240 8115 	bls.w	8026826 <uxr_write_framed_msg+0x252>
 80265fc:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8026600:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8026604:	2202      	movs	r2, #2
 8026606:	2901      	cmp	r1, #1
 8026608:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 802660c:	d952      	bls.n	80266b4 <uxr_write_framed_msg+0xe0>
 802660e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026610:	2103      	movs	r1, #3
 8026612:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8026616:	b2dd      	uxtb	r5, r3
 8026618:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 802661c:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8026620:	2a01      	cmp	r2, #1
 8026622:	d95c      	bls.n	80266de <uxr_write_framed_msg+0x10a>
 8026624:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026626:	1862      	adds	r2, r4, r1
 8026628:	3101      	adds	r1, #1
 802662a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 802662e:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 8026632:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8026636:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 802663a:	2a01      	cmp	r2, #1
 802663c:	d961      	bls.n	8026702 <uxr_write_framed_msg+0x12e>
 802663e:	1c4a      	adds	r2, r1, #1
 8026640:	4421      	add	r1, r4
 8026642:	b2d2      	uxtb	r2, r2
 8026644:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8026648:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 802664c:	2b00      	cmp	r3, #0
 802664e:	d06a      	beq.n	8026726 <uxr_write_framed_msg+0x152>
 8026650:	f04f 0800 	mov.w	r8, #0
 8026654:	46c1      	mov	r9, r8
 8026656:	e016      	b.n	8026686 <uxr_write_framed_msg+0xb2>
 8026658:	2a29      	cmp	r2, #41	@ 0x29
 802665a:	d868      	bhi.n	802672e <uxr_write_framed_msg+0x15a>
 802665c:	18a0      	adds	r0, r4, r2
 802665e:	3201      	adds	r2, #1
 8026660:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8026664:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8026668:	ea88 0101 	eor.w	r1, r8, r1
 802666c:	4b7d      	ldr	r3, [pc, #500]	@ (8026864 <uxr_write_framed_msg+0x290>)
 802666e:	f109 0901 	add.w	r9, r9, #1
 8026672:	b2c9      	uxtb	r1, r1
 8026674:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8026678:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 802667c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802667e:	454b      	cmp	r3, r9
 8026680:	d969      	bls.n	8026756 <uxr_write_framed_msg+0x182>
 8026682:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8026686:	f81b 1009 	ldrb.w	r1, [fp, r9]
 802668a:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 802668e:	2801      	cmp	r0, #1
 8026690:	d8e2      	bhi.n	8026658 <uxr_write_framed_msg+0x84>
 8026692:	1c50      	adds	r0, r2, #1
 8026694:	b2c0      	uxtb	r0, r0
 8026696:	2829      	cmp	r0, #41	@ 0x29
 8026698:	d849      	bhi.n	802672e <uxr_write_framed_msg+0x15a>
 802669a:	18a0      	adds	r0, r4, r2
 802669c:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 80266a0:	3202      	adds	r2, #2
 80266a2:	f081 0520 	eor.w	r5, r1, #32
 80266a6:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80266aa:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 80266ae:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80266b2:	e7d9      	b.n	8026668 <uxr_write_framed_msg+0x94>
 80266b4:	2104      	movs	r1, #4
 80266b6:	f04f 0c03 	mov.w	ip, #3
 80266ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80266bc:	4422      	add	r2, r4
 80266be:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 80266c2:	44a4      	add	ip, r4
 80266c4:	b2dd      	uxtb	r5, r3
 80266c6:	f080 0020 	eor.w	r0, r0, #32
 80266ca:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 80266ce:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 80266d2:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 80266d6:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80266da:	2a01      	cmp	r2, #1
 80266dc:	d8a2      	bhi.n	8026624 <uxr_write_framed_msg+0x50>
 80266de:	1862      	adds	r2, r4, r1
 80266e0:	207d      	movs	r0, #125	@ 0x7d
 80266e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80266e4:	f085 0520 	eor.w	r5, r5, #32
 80266e8:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 80266ec:	3102      	adds	r1, #2
 80266ee:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80266f2:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 80266f6:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80266fa:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80266fe:	2a01      	cmp	r2, #1
 8026700:	d89d      	bhi.n	802663e <uxr_write_framed_msg+0x6a>
 8026702:	1c4d      	adds	r5, r1, #1
 8026704:	1c8a      	adds	r2, r1, #2
 8026706:	f080 0020 	eor.w	r0, r0, #32
 802670a:	4421      	add	r1, r4
 802670c:	fa54 f585 	uxtab	r5, r4, r5
 8026710:	b2d2      	uxtb	r2, r2
 8026712:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8026716:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 802671a:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 802671e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8026722:	2b00      	cmp	r3, #0
 8026724:	d194      	bne.n	8026650 <uxr_write_framed_msg+0x7c>
 8026726:	4619      	mov	r1, r3
 8026728:	f8ad 3004 	strh.w	r3, [sp, #4]
 802672c:	e019      	b.n	8026762 <uxr_write_framed_msg+0x18e>
 802672e:	2500      	movs	r5, #0
 8026730:	e000      	b.n	8026734 <uxr_write_framed_msg+0x160>
 8026732:	b160      	cbz	r0, 802674e <uxr_write_framed_msg+0x17a>
 8026734:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8026738:	1b52      	subs	r2, r2, r5
 802673a:	4653      	mov	r3, sl
 802673c:	4638      	mov	r0, r7
 802673e:	4421      	add	r1, r4
 8026740:	47b0      	blx	r6
 8026742:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8026746:	4405      	add	r5, r0
 8026748:	4295      	cmp	r5, r2
 802674a:	d3f2      	bcc.n	8026732 <uxr_write_framed_msg+0x15e>
 802674c:	d066      	beq.n	802681c <uxr_write_framed_msg+0x248>
 802674e:	2000      	movs	r0, #0
 8026750:	b003      	add	sp, #12
 8026752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026756:	fa5f f188 	uxtb.w	r1, r8
 802675a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 802675e:	f8ad 8004 	strh.w	r8, [sp, #4]
 8026762:	f04f 0900 	mov.w	r9, #0
 8026766:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 802676a:	46c8      	mov	r8, r9
 802676c:	e013      	b.n	8026796 <uxr_write_framed_msg+0x1c2>
 802676e:	2a29      	cmp	r2, #41	@ 0x29
 8026770:	d824      	bhi.n	80267bc <uxr_write_framed_msg+0x1e8>
 8026772:	18a3      	adds	r3, r4, r2
 8026774:	3201      	adds	r2, #1
 8026776:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 802677a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 802677e:	f109 0901 	add.w	r9, r9, #1
 8026782:	f1b9 0f02 	cmp.w	r9, #2
 8026786:	d02d      	beq.n	80267e4 <uxr_write_framed_msg+0x210>
 8026788:	f109 0308 	add.w	r3, r9, #8
 802678c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8026790:	446b      	add	r3, sp
 8026792:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8026796:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 802679a:	2b01      	cmp	r3, #1
 802679c:	d8e7      	bhi.n	802676e <uxr_write_framed_msg+0x19a>
 802679e:	1c53      	adds	r3, r2, #1
 80267a0:	b2db      	uxtb	r3, r3
 80267a2:	2b29      	cmp	r3, #41	@ 0x29
 80267a4:	d80a      	bhi.n	80267bc <uxr_write_framed_msg+0x1e8>
 80267a6:	18a3      	adds	r3, r4, r2
 80267a8:	f081 0120 	eor.w	r1, r1, #32
 80267ac:	3202      	adds	r2, #2
 80267ae:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 80267b2:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 80267b6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80267ba:	e7e0      	b.n	802677e <uxr_write_framed_msg+0x1aa>
 80267bc:	2500      	movs	r5, #0
 80267be:	e001      	b.n	80267c4 <uxr_write_framed_msg+0x1f0>
 80267c0:	2800      	cmp	r0, #0
 80267c2:	d0c4      	beq.n	802674e <uxr_write_framed_msg+0x17a>
 80267c4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80267c8:	1b52      	subs	r2, r2, r5
 80267ca:	4653      	mov	r3, sl
 80267cc:	4638      	mov	r0, r7
 80267ce:	4421      	add	r1, r4
 80267d0:	47b0      	blx	r6
 80267d2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80267d6:	4405      	add	r5, r0
 80267d8:	4295      	cmp	r5, r2
 80267da:	d3f1      	bcc.n	80267c0 <uxr_write_framed_msg+0x1ec>
 80267dc:	d1b7      	bne.n	802674e <uxr_write_framed_msg+0x17a>
 80267de:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 80267e2:	e7d1      	b.n	8026788 <uxr_write_framed_msg+0x1b4>
 80267e4:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80267e8:	b19a      	cbz	r2, 8026812 <uxr_write_framed_msg+0x23e>
 80267ea:	2500      	movs	r5, #0
 80267ec:	e001      	b.n	80267f2 <uxr_write_framed_msg+0x21e>
 80267ee:	2800      	cmp	r0, #0
 80267f0:	d0ad      	beq.n	802674e <uxr_write_framed_msg+0x17a>
 80267f2:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80267f6:	1b52      	subs	r2, r2, r5
 80267f8:	4653      	mov	r3, sl
 80267fa:	4638      	mov	r0, r7
 80267fc:	4421      	add	r1, r4
 80267fe:	47b0      	blx	r6
 8026800:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8026804:	4405      	add	r5, r0
 8026806:	4295      	cmp	r5, r2
 8026808:	d3f1      	bcc.n	80267ee <uxr_write_framed_msg+0x21a>
 802680a:	d1a0      	bne.n	802674e <uxr_write_framed_msg+0x17a>
 802680c:	2300      	movs	r3, #0
 802680e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8026812:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026814:	b298      	uxth	r0, r3
 8026816:	b003      	add	sp, #12
 8026818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802681c:	f04f 0300 	mov.w	r3, #0
 8026820:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8026824:	e72a      	b.n	802667c <uxr_write_framed_msg+0xa8>
 8026826:	217d      	movs	r1, #125	@ 0x7d
 8026828:	f082 0220 	eor.w	r2, r2, #32
 802682c:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8026830:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8026834:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8026838:	2203      	movs	r2, #3
 802683a:	2901      	cmp	r1, #1
 802683c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8026840:	d803      	bhi.n	802684a <uxr_write_framed_msg+0x276>
 8026842:	2105      	movs	r1, #5
 8026844:	f04f 0c04 	mov.w	ip, #4
 8026848:	e737      	b.n	80266ba <uxr_write_framed_msg+0xe6>
 802684a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802684c:	2104      	movs	r1, #4
 802684e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8026852:	b2dd      	uxtb	r5, r3
 8026854:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8026858:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 802685c:	2a01      	cmp	r2, #1
 802685e:	f63f aee1 	bhi.w	8026624 <uxr_write_framed_msg+0x50>
 8026862:	e73c      	b.n	80266de <uxr_write_framed_msg+0x10a>
 8026864:	0802dc0c 	.word	0x0802dc0c

08026868 <uxr_framing_read_transport>:
 8026868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802686c:	4604      	mov	r4, r0
 802686e:	b085      	sub	sp, #20
 8026870:	4692      	mov	sl, r2
 8026872:	4689      	mov	r9, r1
 8026874:	461d      	mov	r5, r3
 8026876:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8026878:	f7f8 ff44 	bl	801f704 <uxr_millis>
 802687c:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8026880:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8026884:	4680      	mov	r8, r0
 8026886:	42ba      	cmp	r2, r7
 8026888:	d05f      	beq.n	802694a <uxr_framing_read_transport+0xe2>
 802688a:	d817      	bhi.n	80268bc <uxr_framing_read_transport+0x54>
 802688c:	3f01      	subs	r7, #1
 802688e:	1aba      	subs	r2, r7, r2
 8026890:	2700      	movs	r7, #0
 8026892:	b2d2      	uxtb	r2, r2
 8026894:	42b2      	cmp	r2, r6
 8026896:	d81a      	bhi.n	80268ce <uxr_framing_read_transport+0x66>
 8026898:	19d3      	adds	r3, r2, r7
 802689a:	42b3      	cmp	r3, r6
 802689c:	d852      	bhi.n	8026944 <uxr_framing_read_transport+0xdc>
 802689e:	b9d2      	cbnz	r2, 80268d6 <uxr_framing_read_transport+0x6e>
 80268a0:	2600      	movs	r6, #0
 80268a2:	f7f8 ff2f 	bl	801f704 <uxr_millis>
 80268a6:	682b      	ldr	r3, [r5, #0]
 80268a8:	eba0 0008 	sub.w	r0, r0, r8
 80268ac:	1a1b      	subs	r3, r3, r0
 80268ae:	4630      	mov	r0, r6
 80268b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80268b4:	602b      	str	r3, [r5, #0]
 80268b6:	b005      	add	sp, #20
 80268b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80268bc:	2f00      	cmp	r7, #0
 80268be:	d060      	beq.n	8026982 <uxr_framing_read_transport+0x11a>
 80268c0:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 80268c4:	3f01      	subs	r7, #1
 80268c6:	b2d2      	uxtb	r2, r2
 80268c8:	b2ff      	uxtb	r7, r7
 80268ca:	42b2      	cmp	r2, r6
 80268cc:	d9e4      	bls.n	8026898 <uxr_framing_read_transport+0x30>
 80268ce:	b2f2      	uxtb	r2, r6
 80268d0:	2700      	movs	r7, #0
 80268d2:	2a00      	cmp	r2, #0
 80268d4:	d0e4      	beq.n	80268a0 <uxr_framing_read_transport+0x38>
 80268d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80268d8:	4650      	mov	r0, sl
 80268da:	9203      	str	r2, [sp, #12]
 80268dc:	9300      	str	r3, [sp, #0]
 80268de:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80268e2:	682b      	ldr	r3, [r5, #0]
 80268e4:	3102      	adds	r1, #2
 80268e6:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 802698c <uxr_framing_read_transport+0x124>
 80268ea:	4421      	add	r1, r4
 80268ec:	47c8      	blx	r9
 80268ee:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80268f2:	4606      	mov	r6, r0
 80268f4:	4403      	add	r3, r0
 80268f6:	0859      	lsrs	r1, r3, #1
 80268f8:	fbab 2101 	umull	r2, r1, fp, r1
 80268fc:	222a      	movs	r2, #42	@ 0x2a
 80268fe:	0889      	lsrs	r1, r1, #2
 8026900:	fb02 3111 	mls	r1, r2, r1, r3
 8026904:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8026908:	2800      	cmp	r0, #0
 802690a:	d0c9      	beq.n	80268a0 <uxr_framing_read_transport+0x38>
 802690c:	9a03      	ldr	r2, [sp, #12]
 802690e:	4290      	cmp	r0, r2
 8026910:	d1c7      	bne.n	80268a2 <uxr_framing_read_transport+0x3a>
 8026912:	2f00      	cmp	r7, #0
 8026914:	d0c5      	beq.n	80268a2 <uxr_framing_read_transport+0x3a>
 8026916:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026918:	3102      	adds	r1, #2
 802691a:	463a      	mov	r2, r7
 802691c:	4650      	mov	r0, sl
 802691e:	4421      	add	r1, r4
 8026920:	9300      	str	r3, [sp, #0]
 8026922:	2300      	movs	r3, #0
 8026924:	47c8      	blx	r9
 8026926:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 802692a:	4406      	add	r6, r0
 802692c:	1813      	adds	r3, r2, r0
 802692e:	085a      	lsrs	r2, r3, #1
 8026930:	fbab 1b02 	umull	r1, fp, fp, r2
 8026934:	222a      	movs	r2, #42	@ 0x2a
 8026936:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 802693a:	fb02 331b 	mls	r3, r2, fp, r3
 802693e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8026942:	e7ae      	b.n	80268a2 <uxr_framing_read_transport+0x3a>
 8026944:	1ab6      	subs	r6, r6, r2
 8026946:	b2f7      	uxtb	r7, r6
 8026948:	e7a9      	b.n	802689e <uxr_framing_read_transport+0x36>
 802694a:	2300      	movs	r3, #0
 802694c:	2e28      	cmp	r6, #40	@ 0x28
 802694e:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8026950:	d9bd      	bls.n	80268ce <uxr_framing_read_transport+0x66>
 8026952:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026954:	2229      	movs	r2, #41	@ 0x29
 8026956:	1ca1      	adds	r1, r4, #2
 8026958:	4650      	mov	r0, sl
 802695a:	9300      	str	r3, [sp, #0]
 802695c:	682b      	ldr	r3, [r5, #0]
 802695e:	47c8      	blx	r9
 8026960:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8026964:	4606      	mov	r6, r0
 8026966:	212a      	movs	r1, #42	@ 0x2a
 8026968:	4403      	add	r3, r0
 802696a:	4808      	ldr	r0, [pc, #32]	@ (802698c <uxr_framing_read_transport+0x124>)
 802696c:	085a      	lsrs	r2, r3, #1
 802696e:	fba0 0202 	umull	r0, r2, r0, r2
 8026972:	0892      	lsrs	r2, r2, #2
 8026974:	fb01 3312 	mls	r3, r1, r2, r3
 8026978:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 802697c:	2e00      	cmp	r6, #0
 802697e:	d08f      	beq.n	80268a0 <uxr_framing_read_transport+0x38>
 8026980:	e78f      	b.n	80268a2 <uxr_framing_read_transport+0x3a>
 8026982:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 8026986:	b2d2      	uxtb	r2, r2
 8026988:	e784      	b.n	8026894 <uxr_framing_read_transport+0x2c>
 802698a:	bf00      	nop
 802698c:	30c30c31 	.word	0x30c30c31

08026990 <uxr_read_framed_msg>:
 8026990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026994:	461e      	mov	r6, r3
 8026996:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 802699a:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 802699e:	b083      	sub	sp, #12
 80269a0:	4604      	mov	r4, r0
 80269a2:	4688      	mov	r8, r1
 80269a4:	429d      	cmp	r5, r3
 80269a6:	4691      	mov	r9, r2
 80269a8:	f000 818c 	beq.w	8026cc4 <uxr_read_framed_msg+0x334>
 80269ac:	7823      	ldrb	r3, [r4, #0]
 80269ae:	4dc3      	ldr	r5, [pc, #780]	@ (8026cbc <uxr_read_framed_msg+0x32c>)
 80269b0:	4fc3      	ldr	r7, [pc, #780]	@ (8026cc0 <uxr_read_framed_msg+0x330>)
 80269b2:	2b07      	cmp	r3, #7
 80269b4:	d8fd      	bhi.n	80269b2 <uxr_read_framed_msg+0x22>
 80269b6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80269ba:	011c      	.short	0x011c
 80269bc:	00d900fb 	.word	0x00d900fb
 80269c0:	008f00ba 	.word	0x008f00ba
 80269c4:	00320051 	.word	0x00320051
 80269c8:	0008      	.short	0x0008
 80269ca:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80269ce:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80269d2:	4299      	cmp	r1, r3
 80269d4:	f000 814d 	beq.w	8026c72 <uxr_read_framed_msg+0x2e2>
 80269d8:	18e2      	adds	r2, r4, r3
 80269da:	7892      	ldrb	r2, [r2, #2]
 80269dc:	2a7d      	cmp	r2, #125	@ 0x7d
 80269de:	f000 81b8 	beq.w	8026d52 <uxr_read_framed_msg+0x3c2>
 80269e2:	3301      	adds	r3, #1
 80269e4:	212a      	movs	r1, #42	@ 0x2a
 80269e6:	2a7e      	cmp	r2, #126	@ 0x7e
 80269e8:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80269ec:	fba5 c000 	umull	ip, r0, r5, r0
 80269f0:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80269f4:	fb01 3310 	mls	r3, r1, r0, r3
 80269f8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80269fc:	f000 8257 	beq.w	8026eae <uxr_read_framed_msg+0x51e>
 8026a00:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8026a02:	2000      	movs	r0, #0
 8026a04:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8026a06:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8026a0a:	7020      	strb	r0, [r4, #0]
 8026a0c:	b29b      	uxth	r3, r3
 8026a0e:	4299      	cmp	r1, r3
 8026a10:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8026a12:	f000 8178 	beq.w	8026d06 <uxr_read_framed_msg+0x376>
 8026a16:	2000      	movs	r0, #0
 8026a18:	b003      	add	sp, #12
 8026a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a1e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8026a22:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8026a26:	4298      	cmp	r0, r3
 8026a28:	f000 8132 	beq.w	8026c90 <uxr_read_framed_msg+0x300>
 8026a2c:	18e2      	adds	r2, r4, r3
 8026a2e:	7891      	ldrb	r1, [r2, #2]
 8026a30:	297d      	cmp	r1, #125	@ 0x7d
 8026a32:	f000 8170 	beq.w	8026d16 <uxr_read_framed_msg+0x386>
 8026a36:	3301      	adds	r3, #1
 8026a38:	202a      	movs	r0, #42	@ 0x2a
 8026a3a:	297e      	cmp	r1, #126	@ 0x7e
 8026a3c:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8026a40:	fba5 c202 	umull	ip, r2, r5, r2
 8026a44:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8026a48:	fb00 3312 	mls	r3, r0, r2, r3
 8026a4c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8026a50:	f000 821d 	beq.w	8026e8e <uxr_read_framed_msg+0x4fe>
 8026a54:	2307      	movs	r3, #7
 8026a56:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8026a58:	7023      	strb	r3, [r4, #0]
 8026a5a:	e7aa      	b.n	80269b2 <uxr_read_framed_msg+0x22>
 8026a5c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8026a5e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8026a62:	459e      	cmp	lr, r3
 8026a64:	d827      	bhi.n	8026ab6 <uxr_read_framed_msg+0x126>
 8026a66:	e032      	b.n	8026ace <uxr_read_framed_msg+0x13e>
 8026a68:	fba5 b101 	umull	fp, r1, r5, r1
 8026a6c:	f89c c002 	ldrb.w	ip, [ip, #2]
 8026a70:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8026a74:	0889      	lsrs	r1, r1, #2
 8026a76:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8026a7a:	fb0b 0111 	mls	r1, fp, r1, r0
 8026a7e:	f000 80d4 	beq.w	8026c2a <uxr_read_framed_msg+0x29a>
 8026a82:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8026a86:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 8026a8a:	f000 80cb 	beq.w	8026c24 <uxr_read_framed_msg+0x294>
 8026a8e:	f806 c003 	strb.w	ip, [r6, r3]
 8026a92:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8026a94:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8026a96:	ea80 010c 	eor.w	r1, r0, ip
 8026a9a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8026a9e:	3301      	adds	r3, #1
 8026aa0:	b2c9      	uxtb	r1, r1
 8026aa2:	b29b      	uxth	r3, r3
 8026aa4:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8026aa8:	4573      	cmp	r3, lr
 8026aaa:	8663      	strh	r3, [r4, #50]	@ 0x32
 8026aac:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8026ab0:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8026ab2:	f080 811d 	bcs.w	8026cf0 <uxr_read_framed_msg+0x360>
 8026ab6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8026aba:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8026abe:	1c50      	adds	r0, r2, #1
 8026ac0:	eb04 0c02 	add.w	ip, r4, r2
 8026ac4:	4592      	cmp	sl, r2
 8026ac6:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8026aca:	d1cd      	bne.n	8026a68 <uxr_read_framed_msg+0xd8>
 8026acc:	459e      	cmp	lr, r3
 8026ace:	f040 8114 	bne.w	8026cfa <uxr_read_framed_msg+0x36a>
 8026ad2:	2306      	movs	r3, #6
 8026ad4:	7023      	strb	r3, [r4, #0]
 8026ad6:	e76c      	b.n	80269b2 <uxr_read_framed_msg+0x22>
 8026ad8:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8026adc:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8026ae0:	4298      	cmp	r0, r3
 8026ae2:	f000 80c6 	beq.w	8026c72 <uxr_read_framed_msg+0x2e2>
 8026ae6:	18e2      	adds	r2, r4, r3
 8026ae8:	7891      	ldrb	r1, [r2, #2]
 8026aea:	297d      	cmp	r1, #125	@ 0x7d
 8026aec:	f000 8193 	beq.w	8026e16 <uxr_read_framed_msg+0x486>
 8026af0:	3301      	adds	r3, #1
 8026af2:	202a      	movs	r0, #42	@ 0x2a
 8026af4:	297e      	cmp	r1, #126	@ 0x7e
 8026af6:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8026afa:	fba5 c202 	umull	ip, r2, r5, r2
 8026afe:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8026b02:	fb00 3312 	mls	r3, r0, r2, r3
 8026b06:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8026b0a:	f000 81d0 	beq.w	8026eae <uxr_read_framed_msg+0x51e>
 8026b0e:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8026b10:	2000      	movs	r0, #0
 8026b12:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8026b16:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8026b18:	8660      	strh	r0, [r4, #50]	@ 0x32
 8026b1a:	b29b      	uxth	r3, r3
 8026b1c:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8026b1e:	428b      	cmp	r3, r1
 8026b20:	8623      	strh	r3, [r4, #48]	@ 0x30
 8026b22:	f240 80e2 	bls.w	8026cea <uxr_read_framed_msg+0x35a>
 8026b26:	7020      	strb	r0, [r4, #0]
 8026b28:	b003      	add	sp, #12
 8026b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026b2e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8026b32:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8026b36:	4298      	cmp	r0, r3
 8026b38:	f000 80aa 	beq.w	8026c90 <uxr_read_framed_msg+0x300>
 8026b3c:	18e2      	adds	r2, r4, r3
 8026b3e:	7891      	ldrb	r1, [r2, #2]
 8026b40:	297d      	cmp	r1, #125	@ 0x7d
 8026b42:	f000 8186 	beq.w	8026e52 <uxr_read_framed_msg+0x4c2>
 8026b46:	3301      	adds	r3, #1
 8026b48:	202a      	movs	r0, #42	@ 0x2a
 8026b4a:	297e      	cmp	r1, #126	@ 0x7e
 8026b4c:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8026b50:	fba5 c202 	umull	ip, r2, r5, r2
 8026b54:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8026b58:	fb00 3312 	mls	r3, r0, r2, r3
 8026b5c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8026b60:	f000 8195 	beq.w	8026e8e <uxr_read_framed_msg+0x4fe>
 8026b64:	2304      	movs	r3, #4
 8026b66:	8621      	strh	r1, [r4, #48]	@ 0x30
 8026b68:	7023      	strb	r3, [r4, #0]
 8026b6a:	e722      	b.n	80269b2 <uxr_read_framed_msg+0x22>
 8026b6c:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8026b70:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8026b74:	4290      	cmp	r0, r2
 8026b76:	f000 80b4 	beq.w	8026ce2 <uxr_read_framed_msg+0x352>
 8026b7a:	18a3      	adds	r3, r4, r2
 8026b7c:	7899      	ldrb	r1, [r3, #2]
 8026b7e:	297d      	cmp	r1, #125	@ 0x7d
 8026b80:	f000 8107 	beq.w	8026d92 <uxr_read_framed_msg+0x402>
 8026b84:	3201      	adds	r2, #1
 8026b86:	232a      	movs	r3, #42	@ 0x2a
 8026b88:	297e      	cmp	r1, #126	@ 0x7e
 8026b8a:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8026b8e:	fba5 c000 	umull	ip, r0, r5, r0
 8026b92:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8026b96:	fb03 2210 	mls	r2, r3, r0, r2
 8026b9a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8026b9e:	f000 818a 	beq.w	8026eb6 <uxr_read_framed_msg+0x526>
 8026ba2:	7863      	ldrb	r3, [r4, #1]
 8026ba4:	428b      	cmp	r3, r1
 8026ba6:	bf0c      	ite	eq
 8026ba8:	2303      	moveq	r3, #3
 8026baa:	2300      	movne	r3, #0
 8026bac:	7023      	strb	r3, [r4, #0]
 8026bae:	e700      	b.n	80269b2 <uxr_read_framed_msg+0x22>
 8026bb0:	2300      	movs	r3, #0
 8026bb2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8026bb6:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8026bba:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8026bbe:	4299      	cmp	r1, r3
 8026bc0:	d06a      	beq.n	8026c98 <uxr_read_framed_msg+0x308>
 8026bc2:	18e2      	adds	r2, r4, r3
 8026bc4:	7890      	ldrb	r0, [r2, #2]
 8026bc6:	287d      	cmp	r0, #125	@ 0x7d
 8026bc8:	f000 8100 	beq.w	8026dcc <uxr_read_framed_msg+0x43c>
 8026bcc:	3301      	adds	r3, #1
 8026bce:	212a      	movs	r1, #42	@ 0x2a
 8026bd0:	287e      	cmp	r0, #126	@ 0x7e
 8026bd2:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8026bd6:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8026bda:	fba5 c202 	umull	ip, r2, r5, r2
 8026bde:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8026be2:	fb01 3312 	mls	r3, r1, r2, r3
 8026be6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8026bea:	d055      	beq.n	8026c98 <uxr_read_framed_msg+0x308>
 8026bec:	2302      	movs	r3, #2
 8026bee:	7023      	strb	r3, [r4, #0]
 8026bf0:	e6df      	b.n	80269b2 <uxr_read_framed_msg+0x22>
 8026bf2:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 8026bf6:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8026bfa:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8026bfe:	1c5a      	adds	r2, r3, #1
 8026c00:	459c      	cmp	ip, r3
 8026c02:	eb04 0103 	add.w	r1, r4, r3
 8026c06:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8026c0a:	f43f af04 	beq.w	8026a16 <uxr_read_framed_msg+0x86>
 8026c0e:	fba5 0303 	umull	r0, r3, r5, r3
 8026c12:	7889      	ldrb	r1, [r1, #2]
 8026c14:	089b      	lsrs	r3, r3, #2
 8026c16:	297e      	cmp	r1, #126	@ 0x7e
 8026c18:	fb0e 2313 	mls	r3, lr, r3, r2
 8026c1c:	b2db      	uxtb	r3, r3
 8026c1e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8026c22:	d1ec      	bne.n	8026bfe <uxr_read_framed_msg+0x26e>
 8026c24:	2301      	movs	r3, #1
 8026c26:	7023      	strb	r3, [r4, #0]
 8026c28:	e6c3      	b.n	80269b2 <uxr_read_framed_msg+0x22>
 8026c2a:	1c50      	adds	r0, r2, #1
 8026c2c:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8026c30:	3202      	adds	r2, #2
 8026c32:	0841      	lsrs	r1, r0, #1
 8026c34:	fba5 c101 	umull	ip, r1, r5, r1
 8026c38:	0889      	lsrs	r1, r1, #2
 8026c3a:	fb0b 0111 	mls	r1, fp, r1, r0
 8026c3e:	1860      	adds	r0, r4, r1
 8026c40:	b2c9      	uxtb	r1, r1
 8026c42:	458a      	cmp	sl, r1
 8026c44:	f43f af42 	beq.w	8026acc <uxr_read_framed_msg+0x13c>
 8026c48:	0851      	lsrs	r1, r2, #1
 8026c4a:	7880      	ldrb	r0, [r0, #2]
 8026c4c:	fba5 a101 	umull	sl, r1, r5, r1
 8026c50:	287e      	cmp	r0, #126	@ 0x7e
 8026c52:	f080 0c20 	eor.w	ip, r0, #32
 8026c56:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8026c5a:	fb0b 2211 	mls	r2, fp, r1, r2
 8026c5e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8026c62:	f47f af14 	bne.w	8026a8e <uxr_read_framed_msg+0xfe>
 8026c66:	459e      	cmp	lr, r3
 8026c68:	f43f af33 	beq.w	8026ad2 <uxr_read_framed_msg+0x142>
 8026c6c:	2301      	movs	r3, #1
 8026c6e:	7023      	strb	r3, [r4, #0]
 8026c70:	e69f      	b.n	80269b2 <uxr_read_framed_msg+0x22>
 8026c72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026c74:	9300      	str	r3, [sp, #0]
 8026c76:	2301      	movs	r3, #1
 8026c78:	9301      	str	r3, [sp, #4]
 8026c7a:	464a      	mov	r2, r9
 8026c7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026c7e:	4641      	mov	r1, r8
 8026c80:	4620      	mov	r0, r4
 8026c82:	f7ff fdf1 	bl	8026868 <uxr_framing_read_transport>
 8026c86:	2800      	cmp	r0, #0
 8026c88:	f43f aec5 	beq.w	8026a16 <uxr_read_framed_msg+0x86>
 8026c8c:	7823      	ldrb	r3, [r4, #0]
 8026c8e:	e690      	b.n	80269b2 <uxr_read_framed_msg+0x22>
 8026c90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026c92:	9300      	str	r3, [sp, #0]
 8026c94:	2302      	movs	r3, #2
 8026c96:	e7ef      	b.n	8026c78 <uxr_read_framed_msg+0x2e8>
 8026c98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026c9a:	464a      	mov	r2, r9
 8026c9c:	4641      	mov	r1, r8
 8026c9e:	4620      	mov	r0, r4
 8026ca0:	9300      	str	r3, [sp, #0]
 8026ca2:	2304      	movs	r3, #4
 8026ca4:	9301      	str	r3, [sp, #4]
 8026ca6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026ca8:	f7ff fdde 	bl	8026868 <uxr_framing_read_transport>
 8026cac:	2800      	cmp	r0, #0
 8026cae:	d1ed      	bne.n	8026c8c <uxr_read_framed_msg+0x2fc>
 8026cb0:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8026cb4:	2b7e      	cmp	r3, #126	@ 0x7e
 8026cb6:	d0e9      	beq.n	8026c8c <uxr_read_framed_msg+0x2fc>
 8026cb8:	e6ad      	b.n	8026a16 <uxr_read_framed_msg+0x86>
 8026cba:	bf00      	nop
 8026cbc:	30c30c31 	.word	0x30c30c31
 8026cc0:	0802dc0c 	.word	0x0802dc0c
 8026cc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026cc6:	9300      	str	r3, [sp, #0]
 8026cc8:	2305      	movs	r3, #5
 8026cca:	9301      	str	r3, [sp, #4]
 8026ccc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026cce:	f7ff fdcb 	bl	8026868 <uxr_framing_read_transport>
 8026cd2:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8026cd6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8026cda:	429a      	cmp	r2, r3
 8026cdc:	f43f ae9b 	beq.w	8026a16 <uxr_read_framed_msg+0x86>
 8026ce0:	e664      	b.n	80269ac <uxr_read_framed_msg+0x1c>
 8026ce2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026ce4:	9300      	str	r3, [sp, #0]
 8026ce6:	2303      	movs	r3, #3
 8026ce8:	e7c6      	b.n	8026c78 <uxr_read_framed_msg+0x2e8>
 8026cea:	2305      	movs	r3, #5
 8026cec:	7023      	strb	r3, [r4, #0]
 8026cee:	e660      	b.n	80269b2 <uxr_read_framed_msg+0x22>
 8026cf0:	f43f aeef 	beq.w	8026ad2 <uxr_read_framed_msg+0x142>
 8026cf4:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8026cf8:	d094      	beq.n	8026c24 <uxr_read_framed_msg+0x294>
 8026cfa:	ebae 0303 	sub.w	r3, lr, r3
 8026cfe:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026d00:	3302      	adds	r3, #2
 8026d02:	9200      	str	r2, [sp, #0]
 8026d04:	e7b8      	b.n	8026c78 <uxr_read_framed_msg+0x2e8>
 8026d06:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8026d0a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026d0c:	7013      	strb	r3, [r2, #0]
 8026d0e:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8026d10:	b003      	add	sp, #12
 8026d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026d16:	1c59      	adds	r1, r3, #1
 8026d18:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8026d1c:	084a      	lsrs	r2, r1, #1
 8026d1e:	fba5 e202 	umull	lr, r2, r5, r2
 8026d22:	0892      	lsrs	r2, r2, #2
 8026d24:	fb0c 1212 	mls	r2, ip, r2, r1
 8026d28:	b2d1      	uxtb	r1, r2
 8026d2a:	4288      	cmp	r0, r1
 8026d2c:	d0b0      	beq.n	8026c90 <uxr_read_framed_msg+0x300>
 8026d2e:	3302      	adds	r3, #2
 8026d30:	4422      	add	r2, r4
 8026d32:	7891      	ldrb	r1, [r2, #2]
 8026d34:	085a      	lsrs	r2, r3, #1
 8026d36:	fba5 0202 	umull	r0, r2, r5, r2
 8026d3a:	297e      	cmp	r1, #126	@ 0x7e
 8026d3c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8026d40:	fb0c 3312 	mls	r3, ip, r2, r3
 8026d44:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8026d48:	f000 80a1 	beq.w	8026e8e <uxr_read_framed_msg+0x4fe>
 8026d4c:	f081 0120 	eor.w	r1, r1, #32
 8026d50:	e680      	b.n	8026a54 <uxr_read_framed_msg+0xc4>
 8026d52:	f103 0c01 	add.w	ip, r3, #1
 8026d56:	202a      	movs	r0, #42	@ 0x2a
 8026d58:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8026d5c:	fba5 e202 	umull	lr, r2, r5, r2
 8026d60:	0892      	lsrs	r2, r2, #2
 8026d62:	fb00 c212 	mls	r2, r0, r2, ip
 8026d66:	fa5f fc82 	uxtb.w	ip, r2
 8026d6a:	4561      	cmp	r1, ip
 8026d6c:	d081      	beq.n	8026c72 <uxr_read_framed_msg+0x2e2>
 8026d6e:	3302      	adds	r3, #2
 8026d70:	4422      	add	r2, r4
 8026d72:	0859      	lsrs	r1, r3, #1
 8026d74:	7892      	ldrb	r2, [r2, #2]
 8026d76:	fba5 c101 	umull	ip, r1, r5, r1
 8026d7a:	2a7e      	cmp	r2, #126	@ 0x7e
 8026d7c:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8026d80:	fb00 3311 	mls	r3, r0, r1, r3
 8026d84:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8026d88:	f000 8091 	beq.w	8026eae <uxr_read_framed_msg+0x51e>
 8026d8c:	f082 0220 	eor.w	r2, r2, #32
 8026d90:	e636      	b.n	8026a00 <uxr_read_framed_msg+0x70>
 8026d92:	1c51      	adds	r1, r2, #1
 8026d94:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8026d98:	084b      	lsrs	r3, r1, #1
 8026d9a:	fba5 e303 	umull	lr, r3, r5, r3
 8026d9e:	089b      	lsrs	r3, r3, #2
 8026da0:	fb0c 1313 	mls	r3, ip, r3, r1
 8026da4:	b2d9      	uxtb	r1, r3
 8026da6:	4288      	cmp	r0, r1
 8026da8:	d09b      	beq.n	8026ce2 <uxr_read_framed_msg+0x352>
 8026daa:	3202      	adds	r2, #2
 8026dac:	4423      	add	r3, r4
 8026dae:	0850      	lsrs	r0, r2, #1
 8026db0:	789b      	ldrb	r3, [r3, #2]
 8026db2:	fba5 1000 	umull	r1, r0, r5, r0
 8026db6:	2b7e      	cmp	r3, #126	@ 0x7e
 8026db8:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8026dbc:	fb0c 2210 	mls	r2, ip, r0, r2
 8026dc0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8026dc4:	d077      	beq.n	8026eb6 <uxr_read_framed_msg+0x526>
 8026dc6:	f083 0120 	eor.w	r1, r3, #32
 8026dca:	e6ea      	b.n	8026ba2 <uxr_read_framed_msg+0x212>
 8026dcc:	f103 0c01 	add.w	ip, r3, #1
 8026dd0:	202a      	movs	r0, #42	@ 0x2a
 8026dd2:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8026dd6:	fba5 e202 	umull	lr, r2, r5, r2
 8026dda:	0892      	lsrs	r2, r2, #2
 8026ddc:	fb00 c212 	mls	r2, r0, r2, ip
 8026de0:	fa5f fc82 	uxtb.w	ip, r2
 8026de4:	4561      	cmp	r1, ip
 8026de6:	f43f af57 	beq.w	8026c98 <uxr_read_framed_msg+0x308>
 8026dea:	3302      	adds	r3, #2
 8026dec:	4422      	add	r2, r4
 8026dee:	7891      	ldrb	r1, [r2, #2]
 8026df0:	085a      	lsrs	r2, r3, #1
 8026df2:	fba5 c202 	umull	ip, r2, r5, r2
 8026df6:	297e      	cmp	r1, #126	@ 0x7e
 8026df8:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8026dfc:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8026e00:	fb00 3312 	mls	r3, r0, r2, r3
 8026e04:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8026e08:	f43f af46 	beq.w	8026c98 <uxr_read_framed_msg+0x308>
 8026e0c:	f081 0120 	eor.w	r1, r1, #32
 8026e10:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8026e14:	e6ea      	b.n	8026bec <uxr_read_framed_msg+0x25c>
 8026e16:	1c59      	adds	r1, r3, #1
 8026e18:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8026e1c:	084a      	lsrs	r2, r1, #1
 8026e1e:	fba5 e202 	umull	lr, r2, r5, r2
 8026e22:	0892      	lsrs	r2, r2, #2
 8026e24:	fb0c 1212 	mls	r2, ip, r2, r1
 8026e28:	b2d1      	uxtb	r1, r2
 8026e2a:	4288      	cmp	r0, r1
 8026e2c:	f43f af21 	beq.w	8026c72 <uxr_read_framed_msg+0x2e2>
 8026e30:	3302      	adds	r3, #2
 8026e32:	4422      	add	r2, r4
 8026e34:	7891      	ldrb	r1, [r2, #2]
 8026e36:	085a      	lsrs	r2, r3, #1
 8026e38:	fba5 0202 	umull	r0, r2, r5, r2
 8026e3c:	297e      	cmp	r1, #126	@ 0x7e
 8026e3e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8026e42:	fb0c 3312 	mls	r3, ip, r2, r3
 8026e46:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8026e4a:	d030      	beq.n	8026eae <uxr_read_framed_msg+0x51e>
 8026e4c:	f081 0120 	eor.w	r1, r1, #32
 8026e50:	e65d      	b.n	8026b0e <uxr_read_framed_msg+0x17e>
 8026e52:	1c59      	adds	r1, r3, #1
 8026e54:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8026e58:	084a      	lsrs	r2, r1, #1
 8026e5a:	fba5 e202 	umull	lr, r2, r5, r2
 8026e5e:	0892      	lsrs	r2, r2, #2
 8026e60:	fb0c 1212 	mls	r2, ip, r2, r1
 8026e64:	b2d1      	uxtb	r1, r2
 8026e66:	4288      	cmp	r0, r1
 8026e68:	f43f af12 	beq.w	8026c90 <uxr_read_framed_msg+0x300>
 8026e6c:	3302      	adds	r3, #2
 8026e6e:	4422      	add	r2, r4
 8026e70:	7891      	ldrb	r1, [r2, #2]
 8026e72:	085a      	lsrs	r2, r3, #1
 8026e74:	fba5 0202 	umull	r0, r2, r5, r2
 8026e78:	297e      	cmp	r1, #126	@ 0x7e
 8026e7a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8026e7e:	fb0c 3312 	mls	r3, ip, r2, r3
 8026e82:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8026e86:	d002      	beq.n	8026e8e <uxr_read_framed_msg+0x4fe>
 8026e88:	f081 0120 	eor.w	r1, r1, #32
 8026e8c:	e66a      	b.n	8026b64 <uxr_read_framed_msg+0x1d4>
 8026e8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026e90:	9300      	str	r3, [sp, #0]
 8026e92:	2302      	movs	r3, #2
 8026e94:	9301      	str	r3, [sp, #4]
 8026e96:	464a      	mov	r2, r9
 8026e98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026e9a:	4641      	mov	r1, r8
 8026e9c:	4620      	mov	r0, r4
 8026e9e:	f7ff fce3 	bl	8026868 <uxr_framing_read_transport>
 8026ea2:	2800      	cmp	r0, #0
 8026ea4:	f47f aef2 	bne.w	8026c8c <uxr_read_framed_msg+0x2fc>
 8026ea8:	2301      	movs	r3, #1
 8026eaa:	7023      	strb	r3, [r4, #0]
 8026eac:	e581      	b.n	80269b2 <uxr_read_framed_msg+0x22>
 8026eae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026eb0:	9300      	str	r3, [sp, #0]
 8026eb2:	2301      	movs	r3, #1
 8026eb4:	e7ee      	b.n	8026e94 <uxr_read_framed_msg+0x504>
 8026eb6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026eb8:	9300      	str	r3, [sp, #0]
 8026eba:	2303      	movs	r3, #3
 8026ebc:	e7ea      	b.n	8026e94 <uxr_read_framed_msg+0x504>
 8026ebe:	bf00      	nop

08026ec0 <rcl_get_default_domain_id>:
 8026ec0:	b510      	push	{r4, lr}
 8026ec2:	2300      	movs	r3, #0
 8026ec4:	b082      	sub	sp, #8
 8026ec6:	9300      	str	r3, [sp, #0]
 8026ec8:	b1f0      	cbz	r0, 8026f08 <rcl_get_default_domain_id+0x48>
 8026eca:	4604      	mov	r4, r0
 8026ecc:	4669      	mov	r1, sp
 8026ece:	4814      	ldr	r0, [pc, #80]	@ (8026f20 <rcl_get_default_domain_id+0x60>)
 8026ed0:	f7fc fb6e 	bl	80235b0 <rcutils_get_env>
 8026ed4:	4602      	mov	r2, r0
 8026ed6:	b110      	cbz	r0, 8026ede <rcl_get_default_domain_id+0x1e>
 8026ed8:	2001      	movs	r0, #1
 8026eda:	b002      	add	sp, #8
 8026edc:	bd10      	pop	{r4, pc}
 8026ede:	9b00      	ldr	r3, [sp, #0]
 8026ee0:	b1ab      	cbz	r3, 8026f0e <rcl_get_default_domain_id+0x4e>
 8026ee2:	7818      	ldrb	r0, [r3, #0]
 8026ee4:	2800      	cmp	r0, #0
 8026ee6:	d0f8      	beq.n	8026eda <rcl_get_default_domain_id+0x1a>
 8026ee8:	4618      	mov	r0, r3
 8026eea:	a901      	add	r1, sp, #4
 8026eec:	9201      	str	r2, [sp, #4]
 8026eee:	f000 fefb 	bl	8027ce8 <strtoul>
 8026ef2:	4603      	mov	r3, r0
 8026ef4:	b170      	cbz	r0, 8026f14 <rcl_get_default_domain_id+0x54>
 8026ef6:	1c42      	adds	r2, r0, #1
 8026ef8:	d103      	bne.n	8026f02 <rcl_get_default_domain_id+0x42>
 8026efa:	4a0a      	ldr	r2, [pc, #40]	@ (8026f24 <rcl_get_default_domain_id+0x64>)
 8026efc:	6812      	ldr	r2, [r2, #0]
 8026efe:	2a22      	cmp	r2, #34	@ 0x22
 8026f00:	d0ea      	beq.n	8026ed8 <rcl_get_default_domain_id+0x18>
 8026f02:	2000      	movs	r0, #0
 8026f04:	6023      	str	r3, [r4, #0]
 8026f06:	e7e8      	b.n	8026eda <rcl_get_default_domain_id+0x1a>
 8026f08:	200b      	movs	r0, #11
 8026f0a:	b002      	add	sp, #8
 8026f0c:	bd10      	pop	{r4, pc}
 8026f0e:	4618      	mov	r0, r3
 8026f10:	b002      	add	sp, #8
 8026f12:	bd10      	pop	{r4, pc}
 8026f14:	9a01      	ldr	r2, [sp, #4]
 8026f16:	7812      	ldrb	r2, [r2, #0]
 8026f18:	2a00      	cmp	r2, #0
 8026f1a:	d0f2      	beq.n	8026f02 <rcl_get_default_domain_id+0x42>
 8026f1c:	e7dc      	b.n	8026ed8 <rcl_get_default_domain_id+0x18>
 8026f1e:	bf00      	nop
 8026f20:	0802d7a8 	.word	0x0802d7a8
 8026f24:	20015124 	.word	0x20015124

08026f28 <rcl_expand_topic_name>:
 8026f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026f2c:	b08d      	sub	sp, #52	@ 0x34
 8026f2e:	4698      	mov	r8, r3
 8026f30:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026f32:	9207      	str	r2, [sp, #28]
 8026f34:	2b00      	cmp	r3, #0
 8026f36:	bf18      	it	ne
 8026f38:	f1b8 0f00 	cmpne.w	r8, #0
 8026f3c:	bf0c      	ite	eq
 8026f3e:	2301      	moveq	r3, #1
 8026f40:	2300      	movne	r3, #0
 8026f42:	2a00      	cmp	r2, #0
 8026f44:	bf08      	it	eq
 8026f46:	f043 0301 	orreq.w	r3, r3, #1
 8026f4a:	2900      	cmp	r1, #0
 8026f4c:	bf08      	it	eq
 8026f4e:	f043 0301 	orreq.w	r3, r3, #1
 8026f52:	2b00      	cmp	r3, #0
 8026f54:	d13d      	bne.n	8026fd2 <rcl_expand_topic_name+0xaa>
 8026f56:	fab0 f280 	clz	r2, r0
 8026f5a:	4604      	mov	r4, r0
 8026f5c:	0952      	lsrs	r2, r2, #5
 8026f5e:	2800      	cmp	r0, #0
 8026f60:	d037      	beq.n	8026fd2 <rcl_expand_topic_name+0xaa>
 8026f62:	460f      	mov	r7, r1
 8026f64:	a90b      	add	r1, sp, #44	@ 0x2c
 8026f66:	f000 f9f3 	bl	8027350 <rcl_validate_topic_name>
 8026f6a:	4605      	mov	r5, r0
 8026f6c:	bb68      	cbnz	r0, 8026fca <rcl_expand_topic_name+0xa2>
 8026f6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026f70:	2b00      	cmp	r3, #0
 8026f72:	d137      	bne.n	8026fe4 <rcl_expand_topic_name+0xbc>
 8026f74:	4602      	mov	r2, r0
 8026f76:	a90b      	add	r1, sp, #44	@ 0x2c
 8026f78:	4638      	mov	r0, r7
 8026f7a:	f7fc ffa7 	bl	8023ecc <rmw_validate_node_name>
 8026f7e:	bb68      	cbnz	r0, 8026fdc <rcl_expand_topic_name+0xb4>
 8026f80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026f82:	2b00      	cmp	r3, #0
 8026f84:	d133      	bne.n	8026fee <rcl_expand_topic_name+0xc6>
 8026f86:	462a      	mov	r2, r5
 8026f88:	a90b      	add	r1, sp, #44	@ 0x2c
 8026f8a:	9807      	ldr	r0, [sp, #28]
 8026f8c:	f7fc ff80 	bl	8023e90 <rmw_validate_namespace>
 8026f90:	bb20      	cbnz	r0, 8026fdc <rcl_expand_topic_name+0xb4>
 8026f92:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8026f94:	2d00      	cmp	r5, #0
 8026f96:	f040 80a2 	bne.w	80270de <rcl_expand_topic_name+0x1b6>
 8026f9a:	217b      	movs	r1, #123	@ 0x7b
 8026f9c:	4620      	mov	r0, r4
 8026f9e:	f001 f957 	bl	8028250 <strchr>
 8026fa2:	7823      	ldrb	r3, [r4, #0]
 8026fa4:	4681      	mov	r9, r0
 8026fa6:	bb20      	cbnz	r0, 8026ff2 <rcl_expand_topic_name+0xca>
 8026fa8:	2b2f      	cmp	r3, #47	@ 0x2f
 8026faa:	d122      	bne.n	8026ff2 <rcl_expand_topic_name+0xca>
 8026fac:	ab19      	add	r3, sp, #100	@ 0x64
 8026fae:	e893 0003 	ldmia.w	r3, {r0, r1}
 8026fb2:	ab16      	add	r3, sp, #88	@ 0x58
 8026fb4:	e88d 0003 	stmia.w	sp, {r0, r1}
 8026fb8:	4620      	mov	r0, r4
 8026fba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8026fbc:	f7fc fc52 	bl	8023864 <rcutils_strdup>
 8026fc0:	2800      	cmp	r0, #0
 8026fc2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026fc4:	bf08      	it	eq
 8026fc6:	250a      	moveq	r5, #10
 8026fc8:	6018      	str	r0, [r3, #0]
 8026fca:	4628      	mov	r0, r5
 8026fcc:	b00d      	add	sp, #52	@ 0x34
 8026fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026fd2:	250b      	movs	r5, #11
 8026fd4:	4628      	mov	r0, r5
 8026fd6:	b00d      	add	sp, #52	@ 0x34
 8026fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026fdc:	f7f9 fe66 	bl	8020cac <rcl_convert_rmw_ret_to_rcl_ret>
 8026fe0:	4605      	mov	r5, r0
 8026fe2:	e7f2      	b.n	8026fca <rcl_expand_topic_name+0xa2>
 8026fe4:	2567      	movs	r5, #103	@ 0x67
 8026fe6:	4628      	mov	r0, r5
 8026fe8:	b00d      	add	sp, #52	@ 0x34
 8026fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026fee:	25c9      	movs	r5, #201	@ 0xc9
 8026ff0:	e7eb      	b.n	8026fca <rcl_expand_topic_name+0xa2>
 8026ff2:	2b7e      	cmp	r3, #126	@ 0x7e
 8026ff4:	d075      	beq.n	80270e2 <rcl_expand_topic_name+0x1ba>
 8026ff6:	f1b9 0f00 	cmp.w	r9, #0
 8026ffa:	f000 80c2 	beq.w	8027182 <rcl_expand_topic_name+0x25a>
 8026ffe:	2300      	movs	r3, #0
 8027000:	46a2      	mov	sl, r4
 8027002:	461e      	mov	r6, r3
 8027004:	9508      	str	r5, [sp, #32]
 8027006:	4655      	mov	r5, sl
 8027008:	9409      	str	r4, [sp, #36]	@ 0x24
 802700a:	46b2      	mov	sl, r6
 802700c:	464c      	mov	r4, r9
 802700e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8027012:	2c00      	cmp	r4, #0
 8027014:	f000 80ae 	beq.w	8027174 <rcl_expand_topic_name+0x24c>
 8027018:	217d      	movs	r1, #125	@ 0x7d
 802701a:	4628      	mov	r0, r5
 802701c:	f001 f918 	bl	8028250 <strchr>
 8027020:	eba0 0904 	sub.w	r9, r0, r4
 8027024:	4621      	mov	r1, r4
 8027026:	4869      	ldr	r0, [pc, #420]	@ (80271cc <rcl_expand_topic_name+0x2a4>)
 8027028:	f109 0601 	add.w	r6, r9, #1
 802702c:	4632      	mov	r2, r6
 802702e:	f001 f91c 	bl	802826a <strncmp>
 8027032:	2800      	cmp	r0, #0
 8027034:	d051      	beq.n	80270da <rcl_expand_topic_name+0x1b2>
 8027036:	4632      	mov	r2, r6
 8027038:	4621      	mov	r1, r4
 802703a:	4865      	ldr	r0, [pc, #404]	@ (80271d0 <rcl_expand_topic_name+0x2a8>)
 802703c:	f001 f915 	bl	802826a <strncmp>
 8027040:	b128      	cbz	r0, 802704e <rcl_expand_topic_name+0x126>
 8027042:	4632      	mov	r2, r6
 8027044:	4621      	mov	r1, r4
 8027046:	4863      	ldr	r0, [pc, #396]	@ (80271d4 <rcl_expand_topic_name+0x2ac>)
 8027048:	f001 f90f 	bl	802826a <strncmp>
 802704c:	bb38      	cbnz	r0, 802709e <rcl_expand_topic_name+0x176>
 802704e:	46d9      	mov	r9, fp
 8027050:	ab18      	add	r3, sp, #96	@ 0x60
 8027052:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8027056:	ab16      	add	r3, sp, #88	@ 0x58
 8027058:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 802705c:	4620      	mov	r0, r4
 802705e:	4631      	mov	r1, r6
 8027060:	cb0c      	ldmia	r3, {r2, r3}
 8027062:	f7fc fc21 	bl	80238a8 <rcutils_strndup>
 8027066:	4604      	mov	r4, r0
 8027068:	2800      	cmp	r0, #0
 802706a:	f000 80a3 	beq.w	80271b4 <rcl_expand_topic_name+0x28c>
 802706e:	464a      	mov	r2, r9
 8027070:	4628      	mov	r0, r5
 8027072:	ab16      	add	r3, sp, #88	@ 0x58
 8027074:	4621      	mov	r1, r4
 8027076:	f7fc faed 	bl	8023654 <rcutils_repl_str>
 802707a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802707c:	4605      	mov	r5, r0
 802707e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8027080:	4620      	mov	r0, r4
 8027082:	4798      	blx	r3
 8027084:	4650      	mov	r0, sl
 8027086:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8027088:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802708a:	4798      	blx	r3
 802708c:	2d00      	cmp	r5, #0
 802708e:	d06c      	beq.n	802716a <rcl_expand_topic_name+0x242>
 8027090:	217b      	movs	r1, #123	@ 0x7b
 8027092:	4628      	mov	r0, r5
 8027094:	f001 f8dc 	bl	8028250 <strchr>
 8027098:	46aa      	mov	sl, r5
 802709a:	4604      	mov	r4, r0
 802709c:	e7b9      	b.n	8027012 <rcl_expand_topic_name+0xea>
 802709e:	f109 32ff 	add.w	r2, r9, #4294967295
 80270a2:	1c61      	adds	r1, r4, #1
 80270a4:	4640      	mov	r0, r8
 80270a6:	f7fc fd17 	bl	8023ad8 <rcutils_string_map_getn>
 80270aa:	4681      	mov	r9, r0
 80270ac:	2800      	cmp	r0, #0
 80270ae:	d1cf      	bne.n	8027050 <rcl_expand_topic_name+0x128>
 80270b0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80270b2:	aa18      	add	r2, sp, #96	@ 0x60
 80270b4:	2569      	movs	r5, #105	@ 0x69
 80270b6:	6018      	str	r0, [r3, #0]
 80270b8:	ab16      	add	r3, sp, #88	@ 0x58
 80270ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80270bc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80270c0:	4631      	mov	r1, r6
 80270c2:	4620      	mov	r0, r4
 80270c4:	cb0c      	ldmia	r3, {r2, r3}
 80270c6:	f7fc fbef 	bl	80238a8 <rcutils_strndup>
 80270ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80270cc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80270ce:	4798      	blx	r3
 80270d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80270d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80270d4:	4650      	mov	r0, sl
 80270d6:	4798      	blx	r3
 80270d8:	e777      	b.n	8026fca <rcl_expand_topic_name+0xa2>
 80270da:	46b9      	mov	r9, r7
 80270dc:	e7b8      	b.n	8027050 <rcl_expand_topic_name+0x128>
 80270de:	25ca      	movs	r5, #202	@ 0xca
 80270e0:	e773      	b.n	8026fca <rcl_expand_topic_name+0xa2>
 80270e2:	9e07      	ldr	r6, [sp, #28]
 80270e4:	4630      	mov	r0, r6
 80270e6:	f7d9 f8b5 	bl	8000254 <strlen>
 80270ea:	4a3b      	ldr	r2, [pc, #236]	@ (80271d8 <rcl_expand_topic_name+0x2b0>)
 80270ec:	4b3b      	ldr	r3, [pc, #236]	@ (80271dc <rcl_expand_topic_name+0x2b4>)
 80270ee:	9603      	str	r6, [sp, #12]
 80270f0:	2801      	cmp	r0, #1
 80270f2:	bf18      	it	ne
 80270f4:	4613      	movne	r3, r2
 80270f6:	9704      	str	r7, [sp, #16]
 80270f8:	9302      	str	r3, [sp, #8]
 80270fa:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80270fc:	9300      	str	r3, [sp, #0]
 80270fe:	1c63      	adds	r3, r4, #1
 8027100:	9305      	str	r3, [sp, #20]
 8027102:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8027106:	9301      	str	r3, [sp, #4]
 8027108:	ab16      	add	r3, sp, #88	@ 0x58
 802710a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802710c:	f7fc fa68 	bl	80235e0 <rcutils_format_string_limit>
 8027110:	4606      	mov	r6, r0
 8027112:	b350      	cbz	r0, 802716a <rcl_expand_topic_name+0x242>
 8027114:	f1b9 0f00 	cmp.w	r9, #0
 8027118:	d005      	beq.n	8027126 <rcl_expand_topic_name+0x1fe>
 802711a:	217b      	movs	r1, #123	@ 0x7b
 802711c:	46b2      	mov	sl, r6
 802711e:	f001 f897 	bl	8028250 <strchr>
 8027122:	4681      	mov	r9, r0
 8027124:	e76e      	b.n	8027004 <rcl_expand_topic_name+0xdc>
 8027126:	7833      	ldrb	r3, [r6, #0]
 8027128:	2b2f      	cmp	r3, #47	@ 0x2f
 802712a:	d01b      	beq.n	8027164 <rcl_expand_topic_name+0x23c>
 802712c:	9c07      	ldr	r4, [sp, #28]
 802712e:	4620      	mov	r0, r4
 8027130:	f7d9 f890 	bl	8000254 <strlen>
 8027134:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8027138:	4a29      	ldr	r2, [pc, #164]	@ (80271e0 <rcl_expand_topic_name+0x2b8>)
 802713a:	9301      	str	r3, [sp, #4]
 802713c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802713e:	9604      	str	r6, [sp, #16]
 8027140:	9300      	str	r3, [sp, #0]
 8027142:	4b28      	ldr	r3, [pc, #160]	@ (80271e4 <rcl_expand_topic_name+0x2bc>)
 8027144:	9403      	str	r4, [sp, #12]
 8027146:	2801      	cmp	r0, #1
 8027148:	bf18      	it	ne
 802714a:	4613      	movne	r3, r2
 802714c:	9302      	str	r3, [sp, #8]
 802714e:	ab16      	add	r3, sp, #88	@ 0x58
 8027150:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8027152:	f7fc fa45 	bl	80235e0 <rcutils_format_string_limit>
 8027156:	4603      	mov	r3, r0
 8027158:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 802715a:	4630      	mov	r0, r6
 802715c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802715e:	461e      	mov	r6, r3
 8027160:	4790      	blx	r2
 8027162:	b116      	cbz	r6, 802716a <rcl_expand_topic_name+0x242>
 8027164:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8027166:	601e      	str	r6, [r3, #0]
 8027168:	e72f      	b.n	8026fca <rcl_expand_topic_name+0xa2>
 802716a:	2300      	movs	r3, #0
 802716c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802716e:	250a      	movs	r5, #10
 8027170:	6013      	str	r3, [r2, #0]
 8027172:	e72a      	b.n	8026fca <rcl_expand_topic_name+0xa2>
 8027174:	4653      	mov	r3, sl
 8027176:	4656      	mov	r6, sl
 8027178:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 802717c:	2b00      	cmp	r3, #0
 802717e:	d1d2      	bne.n	8027126 <rcl_expand_topic_name+0x1fe>
 8027180:	7823      	ldrb	r3, [r4, #0]
 8027182:	2b2f      	cmp	r3, #47	@ 0x2f
 8027184:	d01e      	beq.n	80271c4 <rcl_expand_topic_name+0x29c>
 8027186:	9e07      	ldr	r6, [sp, #28]
 8027188:	4630      	mov	r0, r6
 802718a:	f7d9 f863 	bl	8000254 <strlen>
 802718e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8027190:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8027194:	9603      	str	r6, [sp, #12]
 8027196:	9404      	str	r4, [sp, #16]
 8027198:	e9cd 2300 	strd	r2, r3, [sp]
 802719c:	4a10      	ldr	r2, [pc, #64]	@ (80271e0 <rcl_expand_topic_name+0x2b8>)
 802719e:	4b11      	ldr	r3, [pc, #68]	@ (80271e4 <rcl_expand_topic_name+0x2bc>)
 80271a0:	2801      	cmp	r0, #1
 80271a2:	bf18      	it	ne
 80271a4:	4613      	movne	r3, r2
 80271a6:	9302      	str	r3, [sp, #8]
 80271a8:	ab16      	add	r3, sp, #88	@ 0x58
 80271aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80271ac:	f7fc fa18 	bl	80235e0 <rcutils_format_string_limit>
 80271b0:	4606      	mov	r6, r0
 80271b2:	e7d6      	b.n	8027162 <rcl_expand_topic_name+0x23a>
 80271b4:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 80271b8:	4650      	mov	r0, sl
 80271ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80271bc:	6014      	str	r4, [r2, #0]
 80271be:	250a      	movs	r5, #10
 80271c0:	4798      	blx	r3
 80271c2:	e702      	b.n	8026fca <rcl_expand_topic_name+0xa2>
 80271c4:	2300      	movs	r3, #0
 80271c6:	461e      	mov	r6, r3
 80271c8:	e7cc      	b.n	8027164 <rcl_expand_topic_name+0x23c>
 80271ca:	bf00      	nop
 80271cc:	0802d7c0 	.word	0x0802d7c0
 80271d0:	0802d7c8 	.word	0x0802d7c8
 80271d4:	0802d7d0 	.word	0x0802d7d0
 80271d8:	0802d7b8 	.word	0x0802d7b8
 80271dc:	0802cffc 	.word	0x0802cffc
 80271e0:	0802d46c 	.word	0x0802d46c
 80271e4:	0802d00c 	.word	0x0802d00c

080271e8 <rcl_get_default_topic_name_substitutions>:
 80271e8:	2800      	cmp	r0, #0
 80271ea:	bf0c      	ite	eq
 80271ec:	200b      	moveq	r0, #11
 80271ee:	2000      	movne	r0, #0
 80271f0:	4770      	bx	lr
 80271f2:	bf00      	nop

080271f4 <rcl_get_zero_initialized_guard_condition>:
 80271f4:	4a03      	ldr	r2, [pc, #12]	@ (8027204 <rcl_get_zero_initialized_guard_condition+0x10>)
 80271f6:	4603      	mov	r3, r0
 80271f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80271fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8027200:	4618      	mov	r0, r3
 8027202:	4770      	bx	lr
 8027204:	0802de0c 	.word	0x0802de0c

08027208 <rcl_guard_condition_init_from_rmw>:
 8027208:	b082      	sub	sp, #8
 802720a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802720e:	b086      	sub	sp, #24
 8027210:	4604      	mov	r4, r0
 8027212:	460e      	mov	r6, r1
 8027214:	4615      	mov	r5, r2
 8027216:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 802721a:	f10d 0e04 	add.w	lr, sp, #4
 802721e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8027222:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8027226:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 802722a:	f8dc 3000 	ldr.w	r3, [ip]
 802722e:	a801      	add	r0, sp, #4
 8027230:	f8ce 3000 	str.w	r3, [lr]
 8027234:	f7f4 fcea 	bl	801bc0c <rcutils_allocator_is_valid>
 8027238:	f080 0301 	eor.w	r3, r0, #1
 802723c:	b2db      	uxtb	r3, r3
 802723e:	bb3b      	cbnz	r3, 8027290 <rcl_guard_condition_init_from_rmw+0x88>
 8027240:	b334      	cbz	r4, 8027290 <rcl_guard_condition_init_from_rmw+0x88>
 8027242:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8027246:	f1b8 0f00 	cmp.w	r8, #0
 802724a:	d11a      	bne.n	8027282 <rcl_guard_condition_init_from_rmw+0x7a>
 802724c:	b305      	cbz	r5, 8027290 <rcl_guard_condition_init_from_rmw+0x88>
 802724e:	4628      	mov	r0, r5
 8027250:	f7f9 fd4a 	bl	8020ce8 <rcl_context_is_valid>
 8027254:	b1f0      	cbz	r0, 8027294 <rcl_guard_condition_init_from_rmw+0x8c>
 8027256:	9b01      	ldr	r3, [sp, #4]
 8027258:	201c      	movs	r0, #28
 802725a:	9905      	ldr	r1, [sp, #20]
 802725c:	4798      	blx	r3
 802725e:	4607      	mov	r7, r0
 8027260:	6060      	str	r0, [r4, #4]
 8027262:	b320      	cbz	r0, 80272ae <rcl_guard_condition_init_from_rmw+0xa6>
 8027264:	b1c6      	cbz	r6, 8027298 <rcl_guard_condition_init_from_rmw+0x90>
 8027266:	6006      	str	r6, [r0, #0]
 8027268:	f880 8004 	strb.w	r8, [r0, #4]
 802726c:	ac01      	add	r4, sp, #4
 802726e:	f107 0c08 	add.w	ip, r7, #8
 8027272:	2500      	movs	r5, #0
 8027274:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8027276:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802727a:	6823      	ldr	r3, [r4, #0]
 802727c:	f8cc 3000 	str.w	r3, [ip]
 8027280:	e000      	b.n	8027284 <rcl_guard_condition_init_from_rmw+0x7c>
 8027282:	2564      	movs	r5, #100	@ 0x64
 8027284:	4628      	mov	r0, r5
 8027286:	b006      	add	sp, #24
 8027288:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802728c:	b002      	add	sp, #8
 802728e:	4770      	bx	lr
 8027290:	250b      	movs	r5, #11
 8027292:	e7f7      	b.n	8027284 <rcl_guard_condition_init_from_rmw+0x7c>
 8027294:	2565      	movs	r5, #101	@ 0x65
 8027296:	e7f5      	b.n	8027284 <rcl_guard_condition_init_from_rmw+0x7c>
 8027298:	6828      	ldr	r0, [r5, #0]
 802729a:	3028      	adds	r0, #40	@ 0x28
 802729c:	f000 fa2e 	bl	80276fc <rmw_create_guard_condition>
 80272a0:	6038      	str	r0, [r7, #0]
 80272a2:	6867      	ldr	r7, [r4, #4]
 80272a4:	683e      	ldr	r6, [r7, #0]
 80272a6:	b126      	cbz	r6, 80272b2 <rcl_guard_condition_init_from_rmw+0xaa>
 80272a8:	2301      	movs	r3, #1
 80272aa:	713b      	strb	r3, [r7, #4]
 80272ac:	e7de      	b.n	802726c <rcl_guard_condition_init_from_rmw+0x64>
 80272ae:	250a      	movs	r5, #10
 80272b0:	e7e8      	b.n	8027284 <rcl_guard_condition_init_from_rmw+0x7c>
 80272b2:	9b02      	ldr	r3, [sp, #8]
 80272b4:	4638      	mov	r0, r7
 80272b6:	9905      	ldr	r1, [sp, #20]
 80272b8:	2501      	movs	r5, #1
 80272ba:	4798      	blx	r3
 80272bc:	6066      	str	r6, [r4, #4]
 80272be:	e7e1      	b.n	8027284 <rcl_guard_condition_init_from_rmw+0x7c>

080272c0 <rcl_guard_condition_fini>:
 80272c0:	b570      	push	{r4, r5, r6, lr}
 80272c2:	b082      	sub	sp, #8
 80272c4:	b1f0      	cbz	r0, 8027304 <rcl_guard_condition_fini+0x44>
 80272c6:	6843      	ldr	r3, [r0, #4]
 80272c8:	4604      	mov	r4, r0
 80272ca:	b163      	cbz	r3, 80272e6 <rcl_guard_condition_fini+0x26>
 80272cc:	6818      	ldr	r0, [r3, #0]
 80272ce:	68de      	ldr	r6, [r3, #12]
 80272d0:	6999      	ldr	r1, [r3, #24]
 80272d2:	b160      	cbz	r0, 80272ee <rcl_guard_condition_fini+0x2e>
 80272d4:	791d      	ldrb	r5, [r3, #4]
 80272d6:	b965      	cbnz	r5, 80272f2 <rcl_guard_condition_fini+0x32>
 80272d8:	4618      	mov	r0, r3
 80272da:	47b0      	blx	r6
 80272dc:	2300      	movs	r3, #0
 80272de:	4628      	mov	r0, r5
 80272e0:	6063      	str	r3, [r4, #4]
 80272e2:	b002      	add	sp, #8
 80272e4:	bd70      	pop	{r4, r5, r6, pc}
 80272e6:	461d      	mov	r5, r3
 80272e8:	4628      	mov	r0, r5
 80272ea:	b002      	add	sp, #8
 80272ec:	bd70      	pop	{r4, r5, r6, pc}
 80272ee:	4605      	mov	r5, r0
 80272f0:	e7f2      	b.n	80272d8 <rcl_guard_condition_fini+0x18>
 80272f2:	9101      	str	r1, [sp, #4]
 80272f4:	f000 fa18 	bl	8027728 <rmw_destroy_guard_condition>
 80272f8:	1e05      	subs	r5, r0, #0
 80272fa:	6863      	ldr	r3, [r4, #4]
 80272fc:	9901      	ldr	r1, [sp, #4]
 80272fe:	bf18      	it	ne
 8027300:	2501      	movne	r5, #1
 8027302:	e7e9      	b.n	80272d8 <rcl_guard_condition_fini+0x18>
 8027304:	250b      	movs	r5, #11
 8027306:	4628      	mov	r0, r5
 8027308:	b002      	add	sp, #8
 802730a:	bd70      	pop	{r4, r5, r6, pc}

0802730c <rcl_guard_condition_get_default_options>:
 802730c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802730e:	b087      	sub	sp, #28
 8027310:	4606      	mov	r6, r0
 8027312:	4c0b      	ldr	r4, [pc, #44]	@ (8027340 <rcl_guard_condition_get_default_options+0x34>)
 8027314:	4668      	mov	r0, sp
 8027316:	f7f4 fc6b 	bl	801bbf0 <rcutils_get_default_allocator>
 802731a:	46ee      	mov	lr, sp
 802731c:	46a4      	mov	ip, r4
 802731e:	4625      	mov	r5, r4
 8027320:	4634      	mov	r4, r6
 8027322:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8027326:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802732a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802732c:	f8de 7000 	ldr.w	r7, [lr]
 8027330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027332:	4630      	mov	r0, r6
 8027334:	f8cc 7000 	str.w	r7, [ip]
 8027338:	6027      	str	r7, [r4, #0]
 802733a:	b007      	add	sp, #28
 802733c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802733e:	bf00      	nop
 8027340:	20014fcc 	.word	0x20014fcc

08027344 <rcl_guard_condition_get_rmw_handle>:
 8027344:	b110      	cbz	r0, 802734c <rcl_guard_condition_get_rmw_handle+0x8>
 8027346:	6840      	ldr	r0, [r0, #4]
 8027348:	b100      	cbz	r0, 802734c <rcl_guard_condition_get_rmw_handle+0x8>
 802734a:	6800      	ldr	r0, [r0, #0]
 802734c:	4770      	bx	lr
 802734e:	bf00      	nop

08027350 <rcl_validate_topic_name>:
 8027350:	2800      	cmp	r0, #0
 8027352:	f000 8089 	beq.w	8027468 <rcl_validate_topic_name+0x118>
 8027356:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802735a:	460e      	mov	r6, r1
 802735c:	2900      	cmp	r1, #0
 802735e:	f000 8085 	beq.w	802746c <rcl_validate_topic_name+0x11c>
 8027362:	4604      	mov	r4, r0
 8027364:	4617      	mov	r7, r2
 8027366:	f7d8 ff75 	bl	8000254 <strlen>
 802736a:	b1b0      	cbz	r0, 802739a <rcl_validate_topic_name+0x4a>
 802736c:	f894 e000 	ldrb.w	lr, [r4]
 8027370:	f8df c160 	ldr.w	ip, [pc, #352]	@ 80274d4 <rcl_validate_topic_name+0x184>
 8027374:	f81c 300e 	ldrb.w	r3, [ip, lr]
 8027378:	f013 0304 	ands.w	r3, r3, #4
 802737c:	d139      	bne.n	80273f2 <rcl_validate_topic_name+0xa2>
 802737e:	f100 38ff 	add.w	r8, r0, #4294967295
 8027382:	f814 2008 	ldrb.w	r2, [r4, r8]
 8027386:	2a2f      	cmp	r2, #47	@ 0x2f
 8027388:	d10f      	bne.n	80273aa <rcl_validate_topic_name+0x5a>
 802738a:	2202      	movs	r2, #2
 802738c:	6032      	str	r2, [r6, #0]
 802738e:	b3a7      	cbz	r7, 80273fa <rcl_validate_topic_name+0xaa>
 8027390:	4618      	mov	r0, r3
 8027392:	f8c7 8000 	str.w	r8, [r7]
 8027396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802739a:	2301      	movs	r3, #1
 802739c:	6033      	str	r3, [r6, #0]
 802739e:	b367      	cbz	r7, 80273fa <rcl_validate_topic_name+0xaa>
 80273a0:	2300      	movs	r3, #0
 80273a2:	4618      	mov	r0, r3
 80273a4:	603b      	str	r3, [r7, #0]
 80273a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80273aa:	f104 3aff 	add.w	sl, r4, #4294967295
 80273ae:	461d      	mov	r5, r3
 80273b0:	4619      	mov	r1, r3
 80273b2:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80273b6:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 80273ba:	f1b9 0f09 	cmp.w	r9, #9
 80273be:	d91f      	bls.n	8027400 <rcl_validate_topic_name+0xb0>
 80273c0:	f022 0920 	bic.w	r9, r2, #32
 80273c4:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 80273c8:	f1b9 0f19 	cmp.w	r9, #25
 80273cc:	d918      	bls.n	8027400 <rcl_validate_topic_name+0xb0>
 80273ce:	2a5f      	cmp	r2, #95	@ 0x5f
 80273d0:	d024      	beq.n	802741c <rcl_validate_topic_name+0xcc>
 80273d2:	2a2f      	cmp	r2, #47	@ 0x2f
 80273d4:	d058      	beq.n	8027488 <rcl_validate_topic_name+0x138>
 80273d6:	2a7e      	cmp	r2, #126	@ 0x7e
 80273d8:	d04a      	beq.n	8027470 <rcl_validate_topic_name+0x120>
 80273da:	2a7b      	cmp	r2, #123	@ 0x7b
 80273dc:	d05b      	beq.n	8027496 <rcl_validate_topic_name+0x146>
 80273de:	2a7d      	cmp	r2, #125	@ 0x7d
 80273e0:	d169      	bne.n	80274b6 <rcl_validate_topic_name+0x166>
 80273e2:	2d00      	cmp	r5, #0
 80273e4:	d15c      	bne.n	80274a0 <rcl_validate_topic_name+0x150>
 80273e6:	2305      	movs	r3, #5
 80273e8:	6033      	str	r3, [r6, #0]
 80273ea:	b137      	cbz	r7, 80273fa <rcl_validate_topic_name+0xaa>
 80273ec:	2000      	movs	r0, #0
 80273ee:	6039      	str	r1, [r7, #0]
 80273f0:	e7d9      	b.n	80273a6 <rcl_validate_topic_name+0x56>
 80273f2:	2304      	movs	r3, #4
 80273f4:	6033      	str	r3, [r6, #0]
 80273f6:	2f00      	cmp	r7, #0
 80273f8:	d1d2      	bne.n	80273a0 <rcl_validate_topic_name+0x50>
 80273fa:	2000      	movs	r0, #0
 80273fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027400:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8027404:	0752      	lsls	r2, r2, #29
 8027406:	d509      	bpl.n	802741c <rcl_validate_topic_name+0xcc>
 8027408:	2900      	cmp	r1, #0
 802740a:	bf0c      	ite	eq
 802740c:	2200      	moveq	r2, #0
 802740e:	f005 0201 	andne.w	r2, r5, #1
 8027412:	b11a      	cbz	r2, 802741c <rcl_validate_topic_name+0xcc>
 8027414:	1e4d      	subs	r5, r1, #1
 8027416:	429d      	cmp	r5, r3
 8027418:	d031      	beq.n	802747e <rcl_validate_topic_name+0x12e>
 802741a:	4615      	mov	r5, r2
 802741c:	3101      	adds	r1, #1
 802741e:	4288      	cmp	r0, r1
 8027420:	d1c7      	bne.n	80273b2 <rcl_validate_topic_name+0x62>
 8027422:	2d00      	cmp	r5, #0
 8027424:	d142      	bne.n	80274ac <rcl_validate_topic_name+0x15c>
 8027426:	4628      	mov	r0, r5
 8027428:	2301      	movs	r3, #1
 802742a:	e00c      	b.n	8027446 <rcl_validate_topic_name+0xf6>
 802742c:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8027430:	d101      	bne.n	8027436 <rcl_validate_topic_name+0xe6>
 8027432:	2801      	cmp	r0, #1
 8027434:	d047      	beq.n	80274c6 <rcl_validate_topic_name+0x176>
 8027436:	1c5a      	adds	r2, r3, #1
 8027438:	428b      	cmp	r3, r1
 802743a:	f100 0001 	add.w	r0, r0, #1
 802743e:	f104 0401 	add.w	r4, r4, #1
 8027442:	4613      	mov	r3, r2
 8027444:	d22e      	bcs.n	80274a4 <rcl_validate_topic_name+0x154>
 8027446:	4580      	cmp	r8, r0
 8027448:	d0f5      	beq.n	8027436 <rcl_validate_topic_name+0xe6>
 802744a:	7822      	ldrb	r2, [r4, #0]
 802744c:	2a2f      	cmp	r2, #47	@ 0x2f
 802744e:	d1ed      	bne.n	802742c <rcl_validate_topic_name+0xdc>
 8027450:	7862      	ldrb	r2, [r4, #1]
 8027452:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8027456:	0752      	lsls	r2, r2, #29
 8027458:	d5ed      	bpl.n	8027436 <rcl_validate_topic_name+0xe6>
 802745a:	2204      	movs	r2, #4
 802745c:	6032      	str	r2, [r6, #0]
 802745e:	2f00      	cmp	r7, #0
 8027460:	d0cb      	beq.n	80273fa <rcl_validate_topic_name+0xaa>
 8027462:	2000      	movs	r0, #0
 8027464:	603b      	str	r3, [r7, #0]
 8027466:	e79e      	b.n	80273a6 <rcl_validate_topic_name+0x56>
 8027468:	200b      	movs	r0, #11
 802746a:	4770      	bx	lr
 802746c:	200b      	movs	r0, #11
 802746e:	e79a      	b.n	80273a6 <rcl_validate_topic_name+0x56>
 8027470:	2900      	cmp	r1, #0
 8027472:	d0d3      	beq.n	802741c <rcl_validate_topic_name+0xcc>
 8027474:	2306      	movs	r3, #6
 8027476:	6033      	str	r3, [r6, #0]
 8027478:	2f00      	cmp	r7, #0
 802747a:	d1b7      	bne.n	80273ec <rcl_validate_topic_name+0x9c>
 802747c:	e7bd      	b.n	80273fa <rcl_validate_topic_name+0xaa>
 802747e:	2309      	movs	r3, #9
 8027480:	6033      	str	r3, [r6, #0]
 8027482:	2f00      	cmp	r7, #0
 8027484:	d1b2      	bne.n	80273ec <rcl_validate_topic_name+0x9c>
 8027486:	e7b8      	b.n	80273fa <rcl_validate_topic_name+0xaa>
 8027488:	2d00      	cmp	r5, #0
 802748a:	d0c7      	beq.n	802741c <rcl_validate_topic_name+0xcc>
 802748c:	2308      	movs	r3, #8
 802748e:	6033      	str	r3, [r6, #0]
 8027490:	2f00      	cmp	r7, #0
 8027492:	d1ab      	bne.n	80273ec <rcl_validate_topic_name+0x9c>
 8027494:	e7b1      	b.n	80273fa <rcl_validate_topic_name+0xaa>
 8027496:	2d00      	cmp	r5, #0
 8027498:	d1f8      	bne.n	802748c <rcl_validate_topic_name+0x13c>
 802749a:	460b      	mov	r3, r1
 802749c:	2501      	movs	r5, #1
 802749e:	e7bd      	b.n	802741c <rcl_validate_topic_name+0xcc>
 80274a0:	2500      	movs	r5, #0
 80274a2:	e7bb      	b.n	802741c <rcl_validate_topic_name+0xcc>
 80274a4:	2300      	movs	r3, #0
 80274a6:	4618      	mov	r0, r3
 80274a8:	6033      	str	r3, [r6, #0]
 80274aa:	e77c      	b.n	80273a6 <rcl_validate_topic_name+0x56>
 80274ac:	2205      	movs	r2, #5
 80274ae:	6032      	str	r2, [r6, #0]
 80274b0:	2f00      	cmp	r7, #0
 80274b2:	d1d6      	bne.n	8027462 <rcl_validate_topic_name+0x112>
 80274b4:	e7a1      	b.n	80273fa <rcl_validate_topic_name+0xaa>
 80274b6:	2d00      	cmp	r5, #0
 80274b8:	bf14      	ite	ne
 80274ba:	2308      	movne	r3, #8
 80274bc:	2303      	moveq	r3, #3
 80274be:	6033      	str	r3, [r6, #0]
 80274c0:	2f00      	cmp	r7, #0
 80274c2:	d193      	bne.n	80273ec <rcl_validate_topic_name+0x9c>
 80274c4:	e799      	b.n	80273fa <rcl_validate_topic_name+0xaa>
 80274c6:	2307      	movs	r3, #7
 80274c8:	6033      	str	r3, [r6, #0]
 80274ca:	2f00      	cmp	r7, #0
 80274cc:	d095      	beq.n	80273fa <rcl_validate_topic_name+0xaa>
 80274ce:	2301      	movs	r3, #1
 80274d0:	e7c7      	b.n	8027462 <rcl_validate_topic_name+0x112>
 80274d2:	bf00      	nop
 80274d4:	0802def3 	.word	0x0802def3

080274d8 <rcutils_string_array_fini>:
 80274d8:	b328      	cbz	r0, 8027526 <rcutils_string_array_fini+0x4e>
 80274da:	b570      	push	{r4, r5, r6, lr}
 80274dc:	4604      	mov	r4, r0
 80274de:	6840      	ldr	r0, [r0, #4]
 80274e0:	b1e0      	cbz	r0, 802751c <rcutils_string_array_fini+0x44>
 80274e2:	f104 0008 	add.w	r0, r4, #8
 80274e6:	f7f4 fb91 	bl	801bc0c <rcutils_allocator_is_valid>
 80274ea:	b1c0      	cbz	r0, 802751e <rcutils_string_array_fini+0x46>
 80274ec:	6823      	ldr	r3, [r4, #0]
 80274ee:	b1c3      	cbz	r3, 8027522 <rcutils_string_array_fini+0x4a>
 80274f0:	2500      	movs	r5, #0
 80274f2:	6860      	ldr	r0, [r4, #4]
 80274f4:	462e      	mov	r6, r5
 80274f6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80274fa:	68e3      	ldr	r3, [r4, #12]
 80274fc:	69a1      	ldr	r1, [r4, #24]
 80274fe:	4798      	blx	r3
 8027500:	e9d4 3000 	ldrd	r3, r0, [r4]
 8027504:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8027508:	3501      	adds	r5, #1
 802750a:	429d      	cmp	r5, r3
 802750c:	d3f3      	bcc.n	80274f6 <rcutils_string_array_fini+0x1e>
 802750e:	68e3      	ldr	r3, [r4, #12]
 8027510:	69a1      	ldr	r1, [r4, #24]
 8027512:	4798      	blx	r3
 8027514:	2300      	movs	r3, #0
 8027516:	4618      	mov	r0, r3
 8027518:	e9c4 3300 	strd	r3, r3, [r4]
 802751c:	bd70      	pop	{r4, r5, r6, pc}
 802751e:	200b      	movs	r0, #11
 8027520:	bd70      	pop	{r4, r5, r6, pc}
 8027522:	6860      	ldr	r0, [r4, #4]
 8027524:	e7f3      	b.n	802750e <rcutils_string_array_fini+0x36>
 8027526:	200b      	movs	r0, #11
 8027528:	4770      	bx	lr
 802752a:	bf00      	nop

0802752c <on_status>:
 802752c:	b082      	sub	sp, #8
 802752e:	b002      	add	sp, #8
 8027530:	4770      	bx	lr
 8027532:	bf00      	nop

08027534 <on_topic>:
 8027534:	4a23      	ldr	r2, [pc, #140]	@ (80275c4 <on_topic+0x90>)
 8027536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802753a:	6812      	ldr	r2, [r2, #0]
 802753c:	b094      	sub	sp, #80	@ 0x50
 802753e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8027540:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8027544:	9113      	str	r1, [sp, #76]	@ 0x4c
 8027546:	9312      	str	r3, [sp, #72]	@ 0x48
 8027548:	b3c2      	cbz	r2, 80275bc <on_topic+0x88>
 802754a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 802754e:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8027552:	e001      	b.n	8027558 <on_topic+0x24>
 8027554:	6852      	ldr	r2, [r2, #4]
 8027556:	b38a      	cbz	r2, 80275bc <on_topic+0x88>
 8027558:	6894      	ldr	r4, [r2, #8]
 802755a:	8aa3      	ldrh	r3, [r4, #20]
 802755c:	428b      	cmp	r3, r1
 802755e:	d1f9      	bne.n	8027554 <on_topic+0x20>
 8027560:	7da3      	ldrb	r3, [r4, #22]
 8027562:	4283      	cmp	r3, r0
 8027564:	d1f6      	bne.n	8027554 <on_topic+0x20>
 8027566:	2248      	movs	r2, #72	@ 0x48
 8027568:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 802756c:	4668      	mov	r0, sp
 802756e:	f000 ff8e 	bl	802848e <memcpy>
 8027572:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8027576:	4620      	mov	r0, r4
 8027578:	cb0c      	ldmia	r3, {r2, r3}
 802757a:	f7f4 ff81 	bl	801c480 <rmw_uxrce_get_static_input_buffer_for_entity>
 802757e:	4607      	mov	r7, r0
 8027580:	b1e0      	cbz	r0, 80275bc <on_topic+0x88>
 8027582:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8027586:	462a      	mov	r2, r5
 8027588:	4630      	mov	r0, r6
 802758a:	f108 0110 	add.w	r1, r8, #16
 802758e:	f7f6 fb57 	bl	801dc40 <ucdr_deserialize_array_uint8_t>
 8027592:	b930      	cbnz	r0, 80275a2 <on_topic+0x6e>
 8027594:	4639      	mov	r1, r7
 8027596:	480c      	ldr	r0, [pc, #48]	@ (80275c8 <on_topic+0x94>)
 8027598:	b014      	add	sp, #80	@ 0x50
 802759a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802759e:	f7fc bd05 	b.w	8023fac <put_memory>
 80275a2:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80275a6:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 80275aa:	f7fd fe5b 	bl	8025264 <rmw_uros_epoch_nanos>
 80275ae:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80275b2:	2305      	movs	r3, #5
 80275b4:	e942 0102 	strd	r0, r1, [r2, #-8]
 80275b8:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80275bc:	b014      	add	sp, #80	@ 0x50
 80275be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80275c2:	bf00      	nop
 80275c4:	20014e2c 	.word	0x20014e2c
 80275c8:	20014e1c 	.word	0x20014e1c

080275cc <on_request>:
 80275cc:	4824      	ldr	r0, [pc, #144]	@ (8027660 <on_request+0x94>)
 80275ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80275d2:	6800      	ldr	r0, [r0, #0]
 80275d4:	b094      	sub	sp, #80	@ 0x50
 80275d6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80275d8:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 80275dc:	9113      	str	r1, [sp, #76]	@ 0x4c
 80275de:	2800      	cmp	r0, #0
 80275e0:	d03b      	beq.n	802765a <on_request+0x8e>
 80275e2:	461d      	mov	r5, r3
 80275e4:	e001      	b.n	80275ea <on_request+0x1e>
 80275e6:	6840      	ldr	r0, [r0, #4]
 80275e8:	b3b8      	cbz	r0, 802765a <on_request+0x8e>
 80275ea:	6884      	ldr	r4, [r0, #8]
 80275ec:	8b21      	ldrh	r1, [r4, #24]
 80275ee:	4291      	cmp	r1, r2
 80275f0:	d1f9      	bne.n	80275e6 <on_request+0x1a>
 80275f2:	2248      	movs	r2, #72	@ 0x48
 80275f4:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80275f8:	4668      	mov	r0, sp
 80275fa:	f000 ff48 	bl	802848e <memcpy>
 80275fe:	f104 0320 	add.w	r3, r4, #32
 8027602:	4620      	mov	r0, r4
 8027604:	cb0c      	ldmia	r3, {r2, r3}
 8027606:	f7f4 ff3b 	bl	801c480 <rmw_uxrce_get_static_input_buffer_for_entity>
 802760a:	4680      	mov	r8, r0
 802760c:	b328      	cbz	r0, 802765a <on_request+0x8e>
 802760e:	4630      	mov	r0, r6
 8027610:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8027614:	463a      	mov	r2, r7
 8027616:	f106 0110 	add.w	r1, r6, #16
 802761a:	f7f6 fb11 	bl	801dc40 <ucdr_deserialize_array_uint8_t>
 802761e:	b930      	cbnz	r0, 802762e <on_request+0x62>
 8027620:	4641      	mov	r1, r8
 8027622:	4810      	ldr	r0, [pc, #64]	@ (8027664 <on_request+0x98>)
 8027624:	b014      	add	sp, #80	@ 0x50
 8027626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802762a:	f7fc bcbf 	b.w	8023fac <put_memory>
 802762e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027630:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 8027634:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 8027638:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 802763c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8027640:	e895 0003 	ldmia.w	r5, {r0, r1}
 8027644:	e88c 0003 	stmia.w	ip, {r0, r1}
 8027648:	f7fd fe0c 	bl	8025264 <rmw_uros_epoch_nanos>
 802764c:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 8027650:	2303      	movs	r3, #3
 8027652:	e942 0102 	strd	r0, r1, [r2, #-8]
 8027656:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 802765a:	b014      	add	sp, #80	@ 0x50
 802765c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027660:	20014dfc 	.word	0x20014dfc
 8027664:	20014e1c 	.word	0x20014e1c

08027668 <on_reply>:
 8027668:	4822      	ldr	r0, [pc, #136]	@ (80276f4 <on_reply+0x8c>)
 802766a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802766e:	6800      	ldr	r0, [r0, #0]
 8027670:	b094      	sub	sp, #80	@ 0x50
 8027672:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8027674:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8027678:	9113      	str	r1, [sp, #76]	@ 0x4c
 802767a:	b3b8      	cbz	r0, 80276ec <on_reply+0x84>
 802767c:	461d      	mov	r5, r3
 802767e:	e001      	b.n	8027684 <on_reply+0x1c>
 8027680:	6840      	ldr	r0, [r0, #4]
 8027682:	b398      	cbz	r0, 80276ec <on_reply+0x84>
 8027684:	6884      	ldr	r4, [r0, #8]
 8027686:	8b21      	ldrh	r1, [r4, #24]
 8027688:	4291      	cmp	r1, r2
 802768a:	d1f9      	bne.n	8027680 <on_reply+0x18>
 802768c:	2248      	movs	r2, #72	@ 0x48
 802768e:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8027692:	4668      	mov	r0, sp
 8027694:	f000 fefb 	bl	802848e <memcpy>
 8027698:	f104 0320 	add.w	r3, r4, #32
 802769c:	4620      	mov	r0, r4
 802769e:	cb0c      	ldmia	r3, {r2, r3}
 80276a0:	f7f4 feee 	bl	801c480 <rmw_uxrce_get_static_input_buffer_for_entity>
 80276a4:	4680      	mov	r8, r0
 80276a6:	b308      	cbz	r0, 80276ec <on_reply+0x84>
 80276a8:	4630      	mov	r0, r6
 80276aa:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80276ae:	463a      	mov	r2, r7
 80276b0:	f106 0110 	add.w	r1, r6, #16
 80276b4:	f7f6 fac4 	bl	801dc40 <ucdr_deserialize_array_uint8_t>
 80276b8:	b930      	cbnz	r0, 80276c8 <on_reply+0x60>
 80276ba:	4641      	mov	r1, r8
 80276bc:	480e      	ldr	r0, [pc, #56]	@ (80276f8 <on_reply+0x90>)
 80276be:	b014      	add	sp, #80	@ 0x50
 80276c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80276c4:	f7fc bc72 	b.w	8023fac <put_memory>
 80276c8:	2200      	movs	r2, #0
 80276ca:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 80276ce:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 80276d2:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 80276d6:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 80276da:	f7fd fdc3 	bl	8025264 <rmw_uros_epoch_nanos>
 80276de:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 80276e2:	2304      	movs	r3, #4
 80276e4:	e942 0102 	strd	r0, r1, [r2, #-8]
 80276e8:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 80276ec:	b014      	add	sp, #80	@ 0x50
 80276ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80276f2:	bf00      	nop
 80276f4:	20010510 	.word	0x20010510
 80276f8:	20014e1c 	.word	0x20014e1c

080276fc <rmw_create_guard_condition>:
 80276fc:	b538      	push	{r3, r4, r5, lr}
 80276fe:	4605      	mov	r5, r0
 8027700:	4808      	ldr	r0, [pc, #32]	@ (8027724 <rmw_create_guard_condition+0x28>)
 8027702:	f7fc fc43 	bl	8023f8c <get_memory>
 8027706:	4603      	mov	r3, r0
 8027708:	b148      	cbz	r0, 802771e <rmw_create_guard_condition+0x22>
 802770a:	6884      	ldr	r4, [r0, #8]
 802770c:	2300      	movs	r3, #0
 802770e:	61e5      	str	r5, [r4, #28]
 8027710:	7423      	strb	r3, [r4, #16]
 8027712:	f7fc fca3 	bl	802405c <rmw_get_implementation_identifier>
 8027716:	f104 0314 	add.w	r3, r4, #20
 802771a:	e9c4 0405 	strd	r0, r4, [r4, #20]
 802771e:	4618      	mov	r0, r3
 8027720:	bd38      	pop	{r3, r4, r5, pc}
 8027722:	bf00      	nop
 8027724:	20014dbc 	.word	0x20014dbc

08027728 <rmw_destroy_guard_condition>:
 8027728:	b508      	push	{r3, lr}
 802772a:	4b08      	ldr	r3, [pc, #32]	@ (802774c <rmw_destroy_guard_condition+0x24>)
 802772c:	6819      	ldr	r1, [r3, #0]
 802772e:	b911      	cbnz	r1, 8027736 <rmw_destroy_guard_condition+0xe>
 8027730:	e00a      	b.n	8027748 <rmw_destroy_guard_condition+0x20>
 8027732:	6849      	ldr	r1, [r1, #4]
 8027734:	b141      	cbz	r1, 8027748 <rmw_destroy_guard_condition+0x20>
 8027736:	688b      	ldr	r3, [r1, #8]
 8027738:	3314      	adds	r3, #20
 802773a:	4298      	cmp	r0, r3
 802773c:	d1f9      	bne.n	8027732 <rmw_destroy_guard_condition+0xa>
 802773e:	4803      	ldr	r0, [pc, #12]	@ (802774c <rmw_destroy_guard_condition+0x24>)
 8027740:	f7fc fc34 	bl	8023fac <put_memory>
 8027744:	2000      	movs	r0, #0
 8027746:	bd08      	pop	{r3, pc}
 8027748:	2001      	movs	r0, #1
 802774a:	bd08      	pop	{r3, pc}
 802774c:	20014dbc 	.word	0x20014dbc

08027750 <atoi>:
 8027750:	220a      	movs	r2, #10
 8027752:	2100      	movs	r1, #0
 8027754:	f000 ba50 	b.w	8027bf8 <strtol>

08027758 <calloc>:
 8027758:	4b02      	ldr	r3, [pc, #8]	@ (8027764 <calloc+0xc>)
 802775a:	460a      	mov	r2, r1
 802775c:	4601      	mov	r1, r0
 802775e:	6818      	ldr	r0, [r3, #0]
 8027760:	f000 b802 	b.w	8027768 <_calloc_r>
 8027764:	200007a8 	.word	0x200007a8

08027768 <_calloc_r>:
 8027768:	b570      	push	{r4, r5, r6, lr}
 802776a:	fba1 5402 	umull	r5, r4, r1, r2
 802776e:	b934      	cbnz	r4, 802777e <_calloc_r+0x16>
 8027770:	4629      	mov	r1, r5
 8027772:	f000 f899 	bl	80278a8 <_malloc_r>
 8027776:	4606      	mov	r6, r0
 8027778:	b928      	cbnz	r0, 8027786 <_calloc_r+0x1e>
 802777a:	4630      	mov	r0, r6
 802777c:	bd70      	pop	{r4, r5, r6, pc}
 802777e:	220c      	movs	r2, #12
 8027780:	6002      	str	r2, [r0, #0]
 8027782:	2600      	movs	r6, #0
 8027784:	e7f9      	b.n	802777a <_calloc_r+0x12>
 8027786:	462a      	mov	r2, r5
 8027788:	4621      	mov	r1, r4
 802778a:	f000 fd59 	bl	8028240 <memset>
 802778e:	e7f4      	b.n	802777a <_calloc_r+0x12>

08027790 <exit>:
 8027790:	b508      	push	{r3, lr}
 8027792:	4b06      	ldr	r3, [pc, #24]	@ (80277ac <exit+0x1c>)
 8027794:	4604      	mov	r4, r0
 8027796:	b113      	cbz	r3, 802779e <exit+0xe>
 8027798:	2100      	movs	r1, #0
 802779a:	f3af 8000 	nop.w
 802779e:	4b04      	ldr	r3, [pc, #16]	@ (80277b0 <exit+0x20>)
 80277a0:	681b      	ldr	r3, [r3, #0]
 80277a2:	b103      	cbz	r3, 80277a6 <exit+0x16>
 80277a4:	4798      	blx	r3
 80277a6:	4620      	mov	r0, r4
 80277a8:	f7da fb5e 	bl	8001e68 <_exit>
 80277ac:	00000000 	.word	0x00000000
 80277b0:	20015120 	.word	0x20015120

080277b4 <getenv>:
 80277b4:	b507      	push	{r0, r1, r2, lr}
 80277b6:	4b04      	ldr	r3, [pc, #16]	@ (80277c8 <getenv+0x14>)
 80277b8:	4601      	mov	r1, r0
 80277ba:	aa01      	add	r2, sp, #4
 80277bc:	6818      	ldr	r0, [r3, #0]
 80277be:	f000 f805 	bl	80277cc <_findenv_r>
 80277c2:	b003      	add	sp, #12
 80277c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80277c8:	200007a8 	.word	0x200007a8

080277cc <_findenv_r>:
 80277cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80277d0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8027840 <_findenv_r+0x74>
 80277d4:	4606      	mov	r6, r0
 80277d6:	4689      	mov	r9, r1
 80277d8:	4617      	mov	r7, r2
 80277da:	f000 fe85 	bl	80284e8 <__env_lock>
 80277de:	f8da 4000 	ldr.w	r4, [sl]
 80277e2:	b134      	cbz	r4, 80277f2 <_findenv_r+0x26>
 80277e4:	464b      	mov	r3, r9
 80277e6:	4698      	mov	r8, r3
 80277e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80277ec:	b13a      	cbz	r2, 80277fe <_findenv_r+0x32>
 80277ee:	2a3d      	cmp	r2, #61	@ 0x3d
 80277f0:	d1f9      	bne.n	80277e6 <_findenv_r+0x1a>
 80277f2:	4630      	mov	r0, r6
 80277f4:	f000 fe7e 	bl	80284f4 <__env_unlock>
 80277f8:	2000      	movs	r0, #0
 80277fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80277fe:	eba8 0809 	sub.w	r8, r8, r9
 8027802:	46a3      	mov	fp, r4
 8027804:	f854 0b04 	ldr.w	r0, [r4], #4
 8027808:	2800      	cmp	r0, #0
 802780a:	d0f2      	beq.n	80277f2 <_findenv_r+0x26>
 802780c:	4642      	mov	r2, r8
 802780e:	4649      	mov	r1, r9
 8027810:	f000 fd2b 	bl	802826a <strncmp>
 8027814:	2800      	cmp	r0, #0
 8027816:	d1f4      	bne.n	8027802 <_findenv_r+0x36>
 8027818:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802781c:	eb03 0508 	add.w	r5, r3, r8
 8027820:	f813 3008 	ldrb.w	r3, [r3, r8]
 8027824:	2b3d      	cmp	r3, #61	@ 0x3d
 8027826:	d1ec      	bne.n	8027802 <_findenv_r+0x36>
 8027828:	f8da 3000 	ldr.w	r3, [sl]
 802782c:	ebab 0303 	sub.w	r3, fp, r3
 8027830:	109b      	asrs	r3, r3, #2
 8027832:	4630      	mov	r0, r6
 8027834:	603b      	str	r3, [r7, #0]
 8027836:	f000 fe5d 	bl	80284f4 <__env_unlock>
 802783a:	1c68      	adds	r0, r5, #1
 802783c:	e7dd      	b.n	80277fa <_findenv_r+0x2e>
 802783e:	bf00      	nop
 8027840:	20000004 	.word	0x20000004

08027844 <malloc>:
 8027844:	4b02      	ldr	r3, [pc, #8]	@ (8027850 <malloc+0xc>)
 8027846:	4601      	mov	r1, r0
 8027848:	6818      	ldr	r0, [r3, #0]
 802784a:	f000 b82d 	b.w	80278a8 <_malloc_r>
 802784e:	bf00      	nop
 8027850:	200007a8 	.word	0x200007a8

08027854 <free>:
 8027854:	4b02      	ldr	r3, [pc, #8]	@ (8027860 <free+0xc>)
 8027856:	4601      	mov	r1, r0
 8027858:	6818      	ldr	r0, [r3, #0]
 802785a:	f000 be51 	b.w	8028500 <_free_r>
 802785e:	bf00      	nop
 8027860:	200007a8 	.word	0x200007a8

08027864 <sbrk_aligned>:
 8027864:	b570      	push	{r4, r5, r6, lr}
 8027866:	4e0f      	ldr	r6, [pc, #60]	@ (80278a4 <sbrk_aligned+0x40>)
 8027868:	460c      	mov	r4, r1
 802786a:	6831      	ldr	r1, [r6, #0]
 802786c:	4605      	mov	r5, r0
 802786e:	b911      	cbnz	r1, 8027876 <sbrk_aligned+0x12>
 8027870:	f000 fdb6 	bl	80283e0 <_sbrk_r>
 8027874:	6030      	str	r0, [r6, #0]
 8027876:	4621      	mov	r1, r4
 8027878:	4628      	mov	r0, r5
 802787a:	f000 fdb1 	bl	80283e0 <_sbrk_r>
 802787e:	1c43      	adds	r3, r0, #1
 8027880:	d103      	bne.n	802788a <sbrk_aligned+0x26>
 8027882:	f04f 34ff 	mov.w	r4, #4294967295
 8027886:	4620      	mov	r0, r4
 8027888:	bd70      	pop	{r4, r5, r6, pc}
 802788a:	1cc4      	adds	r4, r0, #3
 802788c:	f024 0403 	bic.w	r4, r4, #3
 8027890:	42a0      	cmp	r0, r4
 8027892:	d0f8      	beq.n	8027886 <sbrk_aligned+0x22>
 8027894:	1a21      	subs	r1, r4, r0
 8027896:	4628      	mov	r0, r5
 8027898:	f000 fda2 	bl	80283e0 <_sbrk_r>
 802789c:	3001      	adds	r0, #1
 802789e:	d1f2      	bne.n	8027886 <sbrk_aligned+0x22>
 80278a0:	e7ef      	b.n	8027882 <sbrk_aligned+0x1e>
 80278a2:	bf00      	nop
 80278a4:	20014fe0 	.word	0x20014fe0

080278a8 <_malloc_r>:
 80278a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80278ac:	1ccd      	adds	r5, r1, #3
 80278ae:	f025 0503 	bic.w	r5, r5, #3
 80278b2:	3508      	adds	r5, #8
 80278b4:	2d0c      	cmp	r5, #12
 80278b6:	bf38      	it	cc
 80278b8:	250c      	movcc	r5, #12
 80278ba:	2d00      	cmp	r5, #0
 80278bc:	4606      	mov	r6, r0
 80278be:	db01      	blt.n	80278c4 <_malloc_r+0x1c>
 80278c0:	42a9      	cmp	r1, r5
 80278c2:	d904      	bls.n	80278ce <_malloc_r+0x26>
 80278c4:	230c      	movs	r3, #12
 80278c6:	6033      	str	r3, [r6, #0]
 80278c8:	2000      	movs	r0, #0
 80278ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80278ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80279a4 <_malloc_r+0xfc>
 80278d2:	f000 f869 	bl	80279a8 <__malloc_lock>
 80278d6:	f8d8 3000 	ldr.w	r3, [r8]
 80278da:	461c      	mov	r4, r3
 80278dc:	bb44      	cbnz	r4, 8027930 <_malloc_r+0x88>
 80278de:	4629      	mov	r1, r5
 80278e0:	4630      	mov	r0, r6
 80278e2:	f7ff ffbf 	bl	8027864 <sbrk_aligned>
 80278e6:	1c43      	adds	r3, r0, #1
 80278e8:	4604      	mov	r4, r0
 80278ea:	d158      	bne.n	802799e <_malloc_r+0xf6>
 80278ec:	f8d8 4000 	ldr.w	r4, [r8]
 80278f0:	4627      	mov	r7, r4
 80278f2:	2f00      	cmp	r7, #0
 80278f4:	d143      	bne.n	802797e <_malloc_r+0xd6>
 80278f6:	2c00      	cmp	r4, #0
 80278f8:	d04b      	beq.n	8027992 <_malloc_r+0xea>
 80278fa:	6823      	ldr	r3, [r4, #0]
 80278fc:	4639      	mov	r1, r7
 80278fe:	4630      	mov	r0, r6
 8027900:	eb04 0903 	add.w	r9, r4, r3
 8027904:	f000 fd6c 	bl	80283e0 <_sbrk_r>
 8027908:	4581      	cmp	r9, r0
 802790a:	d142      	bne.n	8027992 <_malloc_r+0xea>
 802790c:	6821      	ldr	r1, [r4, #0]
 802790e:	1a6d      	subs	r5, r5, r1
 8027910:	4629      	mov	r1, r5
 8027912:	4630      	mov	r0, r6
 8027914:	f7ff ffa6 	bl	8027864 <sbrk_aligned>
 8027918:	3001      	adds	r0, #1
 802791a:	d03a      	beq.n	8027992 <_malloc_r+0xea>
 802791c:	6823      	ldr	r3, [r4, #0]
 802791e:	442b      	add	r3, r5
 8027920:	6023      	str	r3, [r4, #0]
 8027922:	f8d8 3000 	ldr.w	r3, [r8]
 8027926:	685a      	ldr	r2, [r3, #4]
 8027928:	bb62      	cbnz	r2, 8027984 <_malloc_r+0xdc>
 802792a:	f8c8 7000 	str.w	r7, [r8]
 802792e:	e00f      	b.n	8027950 <_malloc_r+0xa8>
 8027930:	6822      	ldr	r2, [r4, #0]
 8027932:	1b52      	subs	r2, r2, r5
 8027934:	d420      	bmi.n	8027978 <_malloc_r+0xd0>
 8027936:	2a0b      	cmp	r2, #11
 8027938:	d917      	bls.n	802796a <_malloc_r+0xc2>
 802793a:	1961      	adds	r1, r4, r5
 802793c:	42a3      	cmp	r3, r4
 802793e:	6025      	str	r5, [r4, #0]
 8027940:	bf18      	it	ne
 8027942:	6059      	strne	r1, [r3, #4]
 8027944:	6863      	ldr	r3, [r4, #4]
 8027946:	bf08      	it	eq
 8027948:	f8c8 1000 	streq.w	r1, [r8]
 802794c:	5162      	str	r2, [r4, r5]
 802794e:	604b      	str	r3, [r1, #4]
 8027950:	4630      	mov	r0, r6
 8027952:	f000 f82f 	bl	80279b4 <__malloc_unlock>
 8027956:	f104 000b 	add.w	r0, r4, #11
 802795a:	1d23      	adds	r3, r4, #4
 802795c:	f020 0007 	bic.w	r0, r0, #7
 8027960:	1ac2      	subs	r2, r0, r3
 8027962:	bf1c      	itt	ne
 8027964:	1a1b      	subne	r3, r3, r0
 8027966:	50a3      	strne	r3, [r4, r2]
 8027968:	e7af      	b.n	80278ca <_malloc_r+0x22>
 802796a:	6862      	ldr	r2, [r4, #4]
 802796c:	42a3      	cmp	r3, r4
 802796e:	bf0c      	ite	eq
 8027970:	f8c8 2000 	streq.w	r2, [r8]
 8027974:	605a      	strne	r2, [r3, #4]
 8027976:	e7eb      	b.n	8027950 <_malloc_r+0xa8>
 8027978:	4623      	mov	r3, r4
 802797a:	6864      	ldr	r4, [r4, #4]
 802797c:	e7ae      	b.n	80278dc <_malloc_r+0x34>
 802797e:	463c      	mov	r4, r7
 8027980:	687f      	ldr	r7, [r7, #4]
 8027982:	e7b6      	b.n	80278f2 <_malloc_r+0x4a>
 8027984:	461a      	mov	r2, r3
 8027986:	685b      	ldr	r3, [r3, #4]
 8027988:	42a3      	cmp	r3, r4
 802798a:	d1fb      	bne.n	8027984 <_malloc_r+0xdc>
 802798c:	2300      	movs	r3, #0
 802798e:	6053      	str	r3, [r2, #4]
 8027990:	e7de      	b.n	8027950 <_malloc_r+0xa8>
 8027992:	230c      	movs	r3, #12
 8027994:	6033      	str	r3, [r6, #0]
 8027996:	4630      	mov	r0, r6
 8027998:	f000 f80c 	bl	80279b4 <__malloc_unlock>
 802799c:	e794      	b.n	80278c8 <_malloc_r+0x20>
 802799e:	6005      	str	r5, [r0, #0]
 80279a0:	e7d6      	b.n	8027950 <_malloc_r+0xa8>
 80279a2:	bf00      	nop
 80279a4:	20014fe4 	.word	0x20014fe4

080279a8 <__malloc_lock>:
 80279a8:	4801      	ldr	r0, [pc, #4]	@ (80279b0 <__malloc_lock+0x8>)
 80279aa:	f000 bd66 	b.w	802847a <__retarget_lock_acquire_recursive>
 80279ae:	bf00      	nop
 80279b0:	20015129 	.word	0x20015129

080279b4 <__malloc_unlock>:
 80279b4:	4801      	ldr	r0, [pc, #4]	@ (80279bc <__malloc_unlock+0x8>)
 80279b6:	f000 bd61 	b.w	802847c <__retarget_lock_release_recursive>
 80279ba:	bf00      	nop
 80279bc:	20015129 	.word	0x20015129

080279c0 <srand>:
 80279c0:	b538      	push	{r3, r4, r5, lr}
 80279c2:	4b10      	ldr	r3, [pc, #64]	@ (8027a04 <srand+0x44>)
 80279c4:	681d      	ldr	r5, [r3, #0]
 80279c6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80279c8:	4604      	mov	r4, r0
 80279ca:	b9b3      	cbnz	r3, 80279fa <srand+0x3a>
 80279cc:	2018      	movs	r0, #24
 80279ce:	f7ff ff39 	bl	8027844 <malloc>
 80279d2:	4602      	mov	r2, r0
 80279d4:	6328      	str	r0, [r5, #48]	@ 0x30
 80279d6:	b920      	cbnz	r0, 80279e2 <srand+0x22>
 80279d8:	4b0b      	ldr	r3, [pc, #44]	@ (8027a08 <srand+0x48>)
 80279da:	480c      	ldr	r0, [pc, #48]	@ (8027a0c <srand+0x4c>)
 80279dc:	2146      	movs	r1, #70	@ 0x46
 80279de:	f000 fd65 	bl	80284ac <__assert_func>
 80279e2:	490b      	ldr	r1, [pc, #44]	@ (8027a10 <srand+0x50>)
 80279e4:	4b0b      	ldr	r3, [pc, #44]	@ (8027a14 <srand+0x54>)
 80279e6:	e9c0 1300 	strd	r1, r3, [r0]
 80279ea:	4b0b      	ldr	r3, [pc, #44]	@ (8027a18 <srand+0x58>)
 80279ec:	6083      	str	r3, [r0, #8]
 80279ee:	230b      	movs	r3, #11
 80279f0:	8183      	strh	r3, [r0, #12]
 80279f2:	2100      	movs	r1, #0
 80279f4:	2001      	movs	r0, #1
 80279f6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80279fa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80279fc:	2200      	movs	r2, #0
 80279fe:	611c      	str	r4, [r3, #16]
 8027a00:	615a      	str	r2, [r3, #20]
 8027a02:	bd38      	pop	{r3, r4, r5, pc}
 8027a04:	200007a8 	.word	0x200007a8
 8027a08:	0802de14 	.word	0x0802de14
 8027a0c:	0802de2b 	.word	0x0802de2b
 8027a10:	abcd330e 	.word	0xabcd330e
 8027a14:	e66d1234 	.word	0xe66d1234
 8027a18:	0005deec 	.word	0x0005deec

08027a1c <rand>:
 8027a1c:	4b16      	ldr	r3, [pc, #88]	@ (8027a78 <rand+0x5c>)
 8027a1e:	b510      	push	{r4, lr}
 8027a20:	681c      	ldr	r4, [r3, #0]
 8027a22:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8027a24:	b9b3      	cbnz	r3, 8027a54 <rand+0x38>
 8027a26:	2018      	movs	r0, #24
 8027a28:	f7ff ff0c 	bl	8027844 <malloc>
 8027a2c:	4602      	mov	r2, r0
 8027a2e:	6320      	str	r0, [r4, #48]	@ 0x30
 8027a30:	b920      	cbnz	r0, 8027a3c <rand+0x20>
 8027a32:	4b12      	ldr	r3, [pc, #72]	@ (8027a7c <rand+0x60>)
 8027a34:	4812      	ldr	r0, [pc, #72]	@ (8027a80 <rand+0x64>)
 8027a36:	2152      	movs	r1, #82	@ 0x52
 8027a38:	f000 fd38 	bl	80284ac <__assert_func>
 8027a3c:	4911      	ldr	r1, [pc, #68]	@ (8027a84 <rand+0x68>)
 8027a3e:	4b12      	ldr	r3, [pc, #72]	@ (8027a88 <rand+0x6c>)
 8027a40:	e9c0 1300 	strd	r1, r3, [r0]
 8027a44:	4b11      	ldr	r3, [pc, #68]	@ (8027a8c <rand+0x70>)
 8027a46:	6083      	str	r3, [r0, #8]
 8027a48:	230b      	movs	r3, #11
 8027a4a:	8183      	strh	r3, [r0, #12]
 8027a4c:	2100      	movs	r1, #0
 8027a4e:	2001      	movs	r0, #1
 8027a50:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8027a54:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8027a56:	480e      	ldr	r0, [pc, #56]	@ (8027a90 <rand+0x74>)
 8027a58:	690b      	ldr	r3, [r1, #16]
 8027a5a:	694c      	ldr	r4, [r1, #20]
 8027a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8027a94 <rand+0x78>)
 8027a5e:	4358      	muls	r0, r3
 8027a60:	fb02 0004 	mla	r0, r2, r4, r0
 8027a64:	fba3 3202 	umull	r3, r2, r3, r2
 8027a68:	3301      	adds	r3, #1
 8027a6a:	eb40 0002 	adc.w	r0, r0, r2
 8027a6e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8027a72:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8027a76:	bd10      	pop	{r4, pc}
 8027a78:	200007a8 	.word	0x200007a8
 8027a7c:	0802de14 	.word	0x0802de14
 8027a80:	0802de2b 	.word	0x0802de2b
 8027a84:	abcd330e 	.word	0xabcd330e
 8027a88:	e66d1234 	.word	0xe66d1234
 8027a8c:	0005deec 	.word	0x0005deec
 8027a90:	5851f42d 	.word	0x5851f42d
 8027a94:	4c957f2d 	.word	0x4c957f2d

08027a98 <realloc>:
 8027a98:	4b02      	ldr	r3, [pc, #8]	@ (8027aa4 <realloc+0xc>)
 8027a9a:	460a      	mov	r2, r1
 8027a9c:	4601      	mov	r1, r0
 8027a9e:	6818      	ldr	r0, [r3, #0]
 8027aa0:	f000 b802 	b.w	8027aa8 <_realloc_r>
 8027aa4:	200007a8 	.word	0x200007a8

08027aa8 <_realloc_r>:
 8027aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027aac:	4607      	mov	r7, r0
 8027aae:	4614      	mov	r4, r2
 8027ab0:	460d      	mov	r5, r1
 8027ab2:	b921      	cbnz	r1, 8027abe <_realloc_r+0x16>
 8027ab4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027ab8:	4611      	mov	r1, r2
 8027aba:	f7ff bef5 	b.w	80278a8 <_malloc_r>
 8027abe:	b92a      	cbnz	r2, 8027acc <_realloc_r+0x24>
 8027ac0:	f000 fd1e 	bl	8028500 <_free_r>
 8027ac4:	4625      	mov	r5, r4
 8027ac6:	4628      	mov	r0, r5
 8027ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027acc:	f000 fd62 	bl	8028594 <_malloc_usable_size_r>
 8027ad0:	4284      	cmp	r4, r0
 8027ad2:	4606      	mov	r6, r0
 8027ad4:	d802      	bhi.n	8027adc <_realloc_r+0x34>
 8027ad6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8027ada:	d8f4      	bhi.n	8027ac6 <_realloc_r+0x1e>
 8027adc:	4621      	mov	r1, r4
 8027ade:	4638      	mov	r0, r7
 8027ae0:	f7ff fee2 	bl	80278a8 <_malloc_r>
 8027ae4:	4680      	mov	r8, r0
 8027ae6:	b908      	cbnz	r0, 8027aec <_realloc_r+0x44>
 8027ae8:	4645      	mov	r5, r8
 8027aea:	e7ec      	b.n	8027ac6 <_realloc_r+0x1e>
 8027aec:	42b4      	cmp	r4, r6
 8027aee:	4622      	mov	r2, r4
 8027af0:	4629      	mov	r1, r5
 8027af2:	bf28      	it	cs
 8027af4:	4632      	movcs	r2, r6
 8027af6:	f000 fcca 	bl	802848e <memcpy>
 8027afa:	4629      	mov	r1, r5
 8027afc:	4638      	mov	r0, r7
 8027afe:	f000 fcff 	bl	8028500 <_free_r>
 8027b02:	e7f1      	b.n	8027ae8 <_realloc_r+0x40>

08027b04 <_strtol_l.isra.0>:
 8027b04:	2b24      	cmp	r3, #36	@ 0x24
 8027b06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027b0a:	4686      	mov	lr, r0
 8027b0c:	4690      	mov	r8, r2
 8027b0e:	d801      	bhi.n	8027b14 <_strtol_l.isra.0+0x10>
 8027b10:	2b01      	cmp	r3, #1
 8027b12:	d106      	bne.n	8027b22 <_strtol_l.isra.0+0x1e>
 8027b14:	f000 fc86 	bl	8028424 <__errno>
 8027b18:	2316      	movs	r3, #22
 8027b1a:	6003      	str	r3, [r0, #0]
 8027b1c:	2000      	movs	r0, #0
 8027b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027b22:	4834      	ldr	r0, [pc, #208]	@ (8027bf4 <_strtol_l.isra.0+0xf0>)
 8027b24:	460d      	mov	r5, r1
 8027b26:	462a      	mov	r2, r5
 8027b28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8027b2c:	5d06      	ldrb	r6, [r0, r4]
 8027b2e:	f016 0608 	ands.w	r6, r6, #8
 8027b32:	d1f8      	bne.n	8027b26 <_strtol_l.isra.0+0x22>
 8027b34:	2c2d      	cmp	r4, #45	@ 0x2d
 8027b36:	d110      	bne.n	8027b5a <_strtol_l.isra.0+0x56>
 8027b38:	782c      	ldrb	r4, [r5, #0]
 8027b3a:	2601      	movs	r6, #1
 8027b3c:	1c95      	adds	r5, r2, #2
 8027b3e:	f033 0210 	bics.w	r2, r3, #16
 8027b42:	d115      	bne.n	8027b70 <_strtol_l.isra.0+0x6c>
 8027b44:	2c30      	cmp	r4, #48	@ 0x30
 8027b46:	d10d      	bne.n	8027b64 <_strtol_l.isra.0+0x60>
 8027b48:	782a      	ldrb	r2, [r5, #0]
 8027b4a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8027b4e:	2a58      	cmp	r2, #88	@ 0x58
 8027b50:	d108      	bne.n	8027b64 <_strtol_l.isra.0+0x60>
 8027b52:	786c      	ldrb	r4, [r5, #1]
 8027b54:	3502      	adds	r5, #2
 8027b56:	2310      	movs	r3, #16
 8027b58:	e00a      	b.n	8027b70 <_strtol_l.isra.0+0x6c>
 8027b5a:	2c2b      	cmp	r4, #43	@ 0x2b
 8027b5c:	bf04      	itt	eq
 8027b5e:	782c      	ldrbeq	r4, [r5, #0]
 8027b60:	1c95      	addeq	r5, r2, #2
 8027b62:	e7ec      	b.n	8027b3e <_strtol_l.isra.0+0x3a>
 8027b64:	2b00      	cmp	r3, #0
 8027b66:	d1f6      	bne.n	8027b56 <_strtol_l.isra.0+0x52>
 8027b68:	2c30      	cmp	r4, #48	@ 0x30
 8027b6a:	bf14      	ite	ne
 8027b6c:	230a      	movne	r3, #10
 8027b6e:	2308      	moveq	r3, #8
 8027b70:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8027b74:	f10c 3cff 	add.w	ip, ip, #4294967295
 8027b78:	2200      	movs	r2, #0
 8027b7a:	fbbc f9f3 	udiv	r9, ip, r3
 8027b7e:	4610      	mov	r0, r2
 8027b80:	fb03 ca19 	mls	sl, r3, r9, ip
 8027b84:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8027b88:	2f09      	cmp	r7, #9
 8027b8a:	d80f      	bhi.n	8027bac <_strtol_l.isra.0+0xa8>
 8027b8c:	463c      	mov	r4, r7
 8027b8e:	42a3      	cmp	r3, r4
 8027b90:	dd1b      	ble.n	8027bca <_strtol_l.isra.0+0xc6>
 8027b92:	1c57      	adds	r7, r2, #1
 8027b94:	d007      	beq.n	8027ba6 <_strtol_l.isra.0+0xa2>
 8027b96:	4581      	cmp	r9, r0
 8027b98:	d314      	bcc.n	8027bc4 <_strtol_l.isra.0+0xc0>
 8027b9a:	d101      	bne.n	8027ba0 <_strtol_l.isra.0+0x9c>
 8027b9c:	45a2      	cmp	sl, r4
 8027b9e:	db11      	blt.n	8027bc4 <_strtol_l.isra.0+0xc0>
 8027ba0:	fb00 4003 	mla	r0, r0, r3, r4
 8027ba4:	2201      	movs	r2, #1
 8027ba6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8027baa:	e7eb      	b.n	8027b84 <_strtol_l.isra.0+0x80>
 8027bac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8027bb0:	2f19      	cmp	r7, #25
 8027bb2:	d801      	bhi.n	8027bb8 <_strtol_l.isra.0+0xb4>
 8027bb4:	3c37      	subs	r4, #55	@ 0x37
 8027bb6:	e7ea      	b.n	8027b8e <_strtol_l.isra.0+0x8a>
 8027bb8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8027bbc:	2f19      	cmp	r7, #25
 8027bbe:	d804      	bhi.n	8027bca <_strtol_l.isra.0+0xc6>
 8027bc0:	3c57      	subs	r4, #87	@ 0x57
 8027bc2:	e7e4      	b.n	8027b8e <_strtol_l.isra.0+0x8a>
 8027bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8027bc8:	e7ed      	b.n	8027ba6 <_strtol_l.isra.0+0xa2>
 8027bca:	1c53      	adds	r3, r2, #1
 8027bcc:	d108      	bne.n	8027be0 <_strtol_l.isra.0+0xdc>
 8027bce:	2322      	movs	r3, #34	@ 0x22
 8027bd0:	f8ce 3000 	str.w	r3, [lr]
 8027bd4:	4660      	mov	r0, ip
 8027bd6:	f1b8 0f00 	cmp.w	r8, #0
 8027bda:	d0a0      	beq.n	8027b1e <_strtol_l.isra.0+0x1a>
 8027bdc:	1e69      	subs	r1, r5, #1
 8027bde:	e006      	b.n	8027bee <_strtol_l.isra.0+0xea>
 8027be0:	b106      	cbz	r6, 8027be4 <_strtol_l.isra.0+0xe0>
 8027be2:	4240      	negs	r0, r0
 8027be4:	f1b8 0f00 	cmp.w	r8, #0
 8027be8:	d099      	beq.n	8027b1e <_strtol_l.isra.0+0x1a>
 8027bea:	2a00      	cmp	r2, #0
 8027bec:	d1f6      	bne.n	8027bdc <_strtol_l.isra.0+0xd8>
 8027bee:	f8c8 1000 	str.w	r1, [r8]
 8027bf2:	e794      	b.n	8027b1e <_strtol_l.isra.0+0x1a>
 8027bf4:	0802def3 	.word	0x0802def3

08027bf8 <strtol>:
 8027bf8:	4613      	mov	r3, r2
 8027bfa:	460a      	mov	r2, r1
 8027bfc:	4601      	mov	r1, r0
 8027bfe:	4802      	ldr	r0, [pc, #8]	@ (8027c08 <strtol+0x10>)
 8027c00:	6800      	ldr	r0, [r0, #0]
 8027c02:	f7ff bf7f 	b.w	8027b04 <_strtol_l.isra.0>
 8027c06:	bf00      	nop
 8027c08:	200007a8 	.word	0x200007a8

08027c0c <_strtoul_l.isra.0>:
 8027c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027c10:	4e34      	ldr	r6, [pc, #208]	@ (8027ce4 <_strtoul_l.isra.0+0xd8>)
 8027c12:	4686      	mov	lr, r0
 8027c14:	460d      	mov	r5, r1
 8027c16:	4628      	mov	r0, r5
 8027c18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8027c1c:	5d37      	ldrb	r7, [r6, r4]
 8027c1e:	f017 0708 	ands.w	r7, r7, #8
 8027c22:	d1f8      	bne.n	8027c16 <_strtoul_l.isra.0+0xa>
 8027c24:	2c2d      	cmp	r4, #45	@ 0x2d
 8027c26:	d110      	bne.n	8027c4a <_strtoul_l.isra.0+0x3e>
 8027c28:	782c      	ldrb	r4, [r5, #0]
 8027c2a:	2701      	movs	r7, #1
 8027c2c:	1c85      	adds	r5, r0, #2
 8027c2e:	f033 0010 	bics.w	r0, r3, #16
 8027c32:	d115      	bne.n	8027c60 <_strtoul_l.isra.0+0x54>
 8027c34:	2c30      	cmp	r4, #48	@ 0x30
 8027c36:	d10d      	bne.n	8027c54 <_strtoul_l.isra.0+0x48>
 8027c38:	7828      	ldrb	r0, [r5, #0]
 8027c3a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8027c3e:	2858      	cmp	r0, #88	@ 0x58
 8027c40:	d108      	bne.n	8027c54 <_strtoul_l.isra.0+0x48>
 8027c42:	786c      	ldrb	r4, [r5, #1]
 8027c44:	3502      	adds	r5, #2
 8027c46:	2310      	movs	r3, #16
 8027c48:	e00a      	b.n	8027c60 <_strtoul_l.isra.0+0x54>
 8027c4a:	2c2b      	cmp	r4, #43	@ 0x2b
 8027c4c:	bf04      	itt	eq
 8027c4e:	782c      	ldrbeq	r4, [r5, #0]
 8027c50:	1c85      	addeq	r5, r0, #2
 8027c52:	e7ec      	b.n	8027c2e <_strtoul_l.isra.0+0x22>
 8027c54:	2b00      	cmp	r3, #0
 8027c56:	d1f6      	bne.n	8027c46 <_strtoul_l.isra.0+0x3a>
 8027c58:	2c30      	cmp	r4, #48	@ 0x30
 8027c5a:	bf14      	ite	ne
 8027c5c:	230a      	movne	r3, #10
 8027c5e:	2308      	moveq	r3, #8
 8027c60:	f04f 38ff 	mov.w	r8, #4294967295
 8027c64:	2600      	movs	r6, #0
 8027c66:	fbb8 f8f3 	udiv	r8, r8, r3
 8027c6a:	fb03 f908 	mul.w	r9, r3, r8
 8027c6e:	ea6f 0909 	mvn.w	r9, r9
 8027c72:	4630      	mov	r0, r6
 8027c74:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8027c78:	f1bc 0f09 	cmp.w	ip, #9
 8027c7c:	d810      	bhi.n	8027ca0 <_strtoul_l.isra.0+0x94>
 8027c7e:	4664      	mov	r4, ip
 8027c80:	42a3      	cmp	r3, r4
 8027c82:	dd1e      	ble.n	8027cc2 <_strtoul_l.isra.0+0xb6>
 8027c84:	f1b6 3fff 	cmp.w	r6, #4294967295
 8027c88:	d007      	beq.n	8027c9a <_strtoul_l.isra.0+0x8e>
 8027c8a:	4580      	cmp	r8, r0
 8027c8c:	d316      	bcc.n	8027cbc <_strtoul_l.isra.0+0xb0>
 8027c8e:	d101      	bne.n	8027c94 <_strtoul_l.isra.0+0x88>
 8027c90:	45a1      	cmp	r9, r4
 8027c92:	db13      	blt.n	8027cbc <_strtoul_l.isra.0+0xb0>
 8027c94:	fb00 4003 	mla	r0, r0, r3, r4
 8027c98:	2601      	movs	r6, #1
 8027c9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8027c9e:	e7e9      	b.n	8027c74 <_strtoul_l.isra.0+0x68>
 8027ca0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8027ca4:	f1bc 0f19 	cmp.w	ip, #25
 8027ca8:	d801      	bhi.n	8027cae <_strtoul_l.isra.0+0xa2>
 8027caa:	3c37      	subs	r4, #55	@ 0x37
 8027cac:	e7e8      	b.n	8027c80 <_strtoul_l.isra.0+0x74>
 8027cae:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8027cb2:	f1bc 0f19 	cmp.w	ip, #25
 8027cb6:	d804      	bhi.n	8027cc2 <_strtoul_l.isra.0+0xb6>
 8027cb8:	3c57      	subs	r4, #87	@ 0x57
 8027cba:	e7e1      	b.n	8027c80 <_strtoul_l.isra.0+0x74>
 8027cbc:	f04f 36ff 	mov.w	r6, #4294967295
 8027cc0:	e7eb      	b.n	8027c9a <_strtoul_l.isra.0+0x8e>
 8027cc2:	1c73      	adds	r3, r6, #1
 8027cc4:	d106      	bne.n	8027cd4 <_strtoul_l.isra.0+0xc8>
 8027cc6:	2322      	movs	r3, #34	@ 0x22
 8027cc8:	f8ce 3000 	str.w	r3, [lr]
 8027ccc:	4630      	mov	r0, r6
 8027cce:	b932      	cbnz	r2, 8027cde <_strtoul_l.isra.0+0xd2>
 8027cd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027cd4:	b107      	cbz	r7, 8027cd8 <_strtoul_l.isra.0+0xcc>
 8027cd6:	4240      	negs	r0, r0
 8027cd8:	2a00      	cmp	r2, #0
 8027cda:	d0f9      	beq.n	8027cd0 <_strtoul_l.isra.0+0xc4>
 8027cdc:	b106      	cbz	r6, 8027ce0 <_strtoul_l.isra.0+0xd4>
 8027cde:	1e69      	subs	r1, r5, #1
 8027ce0:	6011      	str	r1, [r2, #0]
 8027ce2:	e7f5      	b.n	8027cd0 <_strtoul_l.isra.0+0xc4>
 8027ce4:	0802def3 	.word	0x0802def3

08027ce8 <strtoul>:
 8027ce8:	4613      	mov	r3, r2
 8027cea:	460a      	mov	r2, r1
 8027cec:	4601      	mov	r1, r0
 8027cee:	4802      	ldr	r0, [pc, #8]	@ (8027cf8 <strtoul+0x10>)
 8027cf0:	6800      	ldr	r0, [r0, #0]
 8027cf2:	f7ff bf8b 	b.w	8027c0c <_strtoul_l.isra.0>
 8027cf6:	bf00      	nop
 8027cf8:	200007a8 	.word	0x200007a8

08027cfc <std>:
 8027cfc:	2300      	movs	r3, #0
 8027cfe:	b510      	push	{r4, lr}
 8027d00:	4604      	mov	r4, r0
 8027d02:	e9c0 3300 	strd	r3, r3, [r0]
 8027d06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8027d0a:	6083      	str	r3, [r0, #8]
 8027d0c:	8181      	strh	r1, [r0, #12]
 8027d0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8027d10:	81c2      	strh	r2, [r0, #14]
 8027d12:	6183      	str	r3, [r0, #24]
 8027d14:	4619      	mov	r1, r3
 8027d16:	2208      	movs	r2, #8
 8027d18:	305c      	adds	r0, #92	@ 0x5c
 8027d1a:	f000 fa91 	bl	8028240 <memset>
 8027d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8027d54 <std+0x58>)
 8027d20:	6263      	str	r3, [r4, #36]	@ 0x24
 8027d22:	4b0d      	ldr	r3, [pc, #52]	@ (8027d58 <std+0x5c>)
 8027d24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8027d26:	4b0d      	ldr	r3, [pc, #52]	@ (8027d5c <std+0x60>)
 8027d28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8027d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8027d60 <std+0x64>)
 8027d2c:	6323      	str	r3, [r4, #48]	@ 0x30
 8027d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8027d64 <std+0x68>)
 8027d30:	6224      	str	r4, [r4, #32]
 8027d32:	429c      	cmp	r4, r3
 8027d34:	d006      	beq.n	8027d44 <std+0x48>
 8027d36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8027d3a:	4294      	cmp	r4, r2
 8027d3c:	d002      	beq.n	8027d44 <std+0x48>
 8027d3e:	33d0      	adds	r3, #208	@ 0xd0
 8027d40:	429c      	cmp	r4, r3
 8027d42:	d105      	bne.n	8027d50 <std+0x54>
 8027d44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8027d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027d4c:	f000 bb94 	b.w	8028478 <__retarget_lock_init_recursive>
 8027d50:	bd10      	pop	{r4, pc}
 8027d52:	bf00      	nop
 8027d54:	08027fc5 	.word	0x08027fc5
 8027d58:	08027fe7 	.word	0x08027fe7
 8027d5c:	0802801f 	.word	0x0802801f
 8027d60:	08028043 	.word	0x08028043
 8027d64:	20014fe8 	.word	0x20014fe8

08027d68 <stdio_exit_handler>:
 8027d68:	4a02      	ldr	r2, [pc, #8]	@ (8027d74 <stdio_exit_handler+0xc>)
 8027d6a:	4903      	ldr	r1, [pc, #12]	@ (8027d78 <stdio_exit_handler+0x10>)
 8027d6c:	4803      	ldr	r0, [pc, #12]	@ (8027d7c <stdio_exit_handler+0x14>)
 8027d6e:	f000 b869 	b.w	8027e44 <_fwalk_sglue>
 8027d72:	bf00      	nop
 8027d74:	2000079c 	.word	0x2000079c
 8027d78:	08028ef9 	.word	0x08028ef9
 8027d7c:	200007ac 	.word	0x200007ac

08027d80 <cleanup_stdio>:
 8027d80:	6841      	ldr	r1, [r0, #4]
 8027d82:	4b0c      	ldr	r3, [pc, #48]	@ (8027db4 <cleanup_stdio+0x34>)
 8027d84:	4299      	cmp	r1, r3
 8027d86:	b510      	push	{r4, lr}
 8027d88:	4604      	mov	r4, r0
 8027d8a:	d001      	beq.n	8027d90 <cleanup_stdio+0x10>
 8027d8c:	f001 f8b4 	bl	8028ef8 <_fflush_r>
 8027d90:	68a1      	ldr	r1, [r4, #8]
 8027d92:	4b09      	ldr	r3, [pc, #36]	@ (8027db8 <cleanup_stdio+0x38>)
 8027d94:	4299      	cmp	r1, r3
 8027d96:	d002      	beq.n	8027d9e <cleanup_stdio+0x1e>
 8027d98:	4620      	mov	r0, r4
 8027d9a:	f001 f8ad 	bl	8028ef8 <_fflush_r>
 8027d9e:	68e1      	ldr	r1, [r4, #12]
 8027da0:	4b06      	ldr	r3, [pc, #24]	@ (8027dbc <cleanup_stdio+0x3c>)
 8027da2:	4299      	cmp	r1, r3
 8027da4:	d004      	beq.n	8027db0 <cleanup_stdio+0x30>
 8027da6:	4620      	mov	r0, r4
 8027da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027dac:	f001 b8a4 	b.w	8028ef8 <_fflush_r>
 8027db0:	bd10      	pop	{r4, pc}
 8027db2:	bf00      	nop
 8027db4:	20014fe8 	.word	0x20014fe8
 8027db8:	20015050 	.word	0x20015050
 8027dbc:	200150b8 	.word	0x200150b8

08027dc0 <global_stdio_init.part.0>:
 8027dc0:	b510      	push	{r4, lr}
 8027dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8027df0 <global_stdio_init.part.0+0x30>)
 8027dc4:	4c0b      	ldr	r4, [pc, #44]	@ (8027df4 <global_stdio_init.part.0+0x34>)
 8027dc6:	4a0c      	ldr	r2, [pc, #48]	@ (8027df8 <global_stdio_init.part.0+0x38>)
 8027dc8:	601a      	str	r2, [r3, #0]
 8027dca:	4620      	mov	r0, r4
 8027dcc:	2200      	movs	r2, #0
 8027dce:	2104      	movs	r1, #4
 8027dd0:	f7ff ff94 	bl	8027cfc <std>
 8027dd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8027dd8:	2201      	movs	r2, #1
 8027dda:	2109      	movs	r1, #9
 8027ddc:	f7ff ff8e 	bl	8027cfc <std>
 8027de0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8027de4:	2202      	movs	r2, #2
 8027de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027dea:	2112      	movs	r1, #18
 8027dec:	f7ff bf86 	b.w	8027cfc <std>
 8027df0:	20015120 	.word	0x20015120
 8027df4:	20014fe8 	.word	0x20014fe8
 8027df8:	08027d69 	.word	0x08027d69

08027dfc <__sfp_lock_acquire>:
 8027dfc:	4801      	ldr	r0, [pc, #4]	@ (8027e04 <__sfp_lock_acquire+0x8>)
 8027dfe:	f000 bb3c 	b.w	802847a <__retarget_lock_acquire_recursive>
 8027e02:	bf00      	nop
 8027e04:	2001512a 	.word	0x2001512a

08027e08 <__sfp_lock_release>:
 8027e08:	4801      	ldr	r0, [pc, #4]	@ (8027e10 <__sfp_lock_release+0x8>)
 8027e0a:	f000 bb37 	b.w	802847c <__retarget_lock_release_recursive>
 8027e0e:	bf00      	nop
 8027e10:	2001512a 	.word	0x2001512a

08027e14 <__sinit>:
 8027e14:	b510      	push	{r4, lr}
 8027e16:	4604      	mov	r4, r0
 8027e18:	f7ff fff0 	bl	8027dfc <__sfp_lock_acquire>
 8027e1c:	6a23      	ldr	r3, [r4, #32]
 8027e1e:	b11b      	cbz	r3, 8027e28 <__sinit+0x14>
 8027e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027e24:	f7ff bff0 	b.w	8027e08 <__sfp_lock_release>
 8027e28:	4b04      	ldr	r3, [pc, #16]	@ (8027e3c <__sinit+0x28>)
 8027e2a:	6223      	str	r3, [r4, #32]
 8027e2c:	4b04      	ldr	r3, [pc, #16]	@ (8027e40 <__sinit+0x2c>)
 8027e2e:	681b      	ldr	r3, [r3, #0]
 8027e30:	2b00      	cmp	r3, #0
 8027e32:	d1f5      	bne.n	8027e20 <__sinit+0xc>
 8027e34:	f7ff ffc4 	bl	8027dc0 <global_stdio_init.part.0>
 8027e38:	e7f2      	b.n	8027e20 <__sinit+0xc>
 8027e3a:	bf00      	nop
 8027e3c:	08027d81 	.word	0x08027d81
 8027e40:	20015120 	.word	0x20015120

08027e44 <_fwalk_sglue>:
 8027e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027e48:	4607      	mov	r7, r0
 8027e4a:	4688      	mov	r8, r1
 8027e4c:	4614      	mov	r4, r2
 8027e4e:	2600      	movs	r6, #0
 8027e50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8027e54:	f1b9 0901 	subs.w	r9, r9, #1
 8027e58:	d505      	bpl.n	8027e66 <_fwalk_sglue+0x22>
 8027e5a:	6824      	ldr	r4, [r4, #0]
 8027e5c:	2c00      	cmp	r4, #0
 8027e5e:	d1f7      	bne.n	8027e50 <_fwalk_sglue+0xc>
 8027e60:	4630      	mov	r0, r6
 8027e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027e66:	89ab      	ldrh	r3, [r5, #12]
 8027e68:	2b01      	cmp	r3, #1
 8027e6a:	d907      	bls.n	8027e7c <_fwalk_sglue+0x38>
 8027e6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8027e70:	3301      	adds	r3, #1
 8027e72:	d003      	beq.n	8027e7c <_fwalk_sglue+0x38>
 8027e74:	4629      	mov	r1, r5
 8027e76:	4638      	mov	r0, r7
 8027e78:	47c0      	blx	r8
 8027e7a:	4306      	orrs	r6, r0
 8027e7c:	3568      	adds	r5, #104	@ 0x68
 8027e7e:	e7e9      	b.n	8027e54 <_fwalk_sglue+0x10>

08027e80 <_fwrite_r>:
 8027e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027e84:	9c08      	ldr	r4, [sp, #32]
 8027e86:	468a      	mov	sl, r1
 8027e88:	4690      	mov	r8, r2
 8027e8a:	fb02 f903 	mul.w	r9, r2, r3
 8027e8e:	4606      	mov	r6, r0
 8027e90:	b118      	cbz	r0, 8027e9a <_fwrite_r+0x1a>
 8027e92:	6a03      	ldr	r3, [r0, #32]
 8027e94:	b90b      	cbnz	r3, 8027e9a <_fwrite_r+0x1a>
 8027e96:	f7ff ffbd 	bl	8027e14 <__sinit>
 8027e9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8027e9c:	07dd      	lsls	r5, r3, #31
 8027e9e:	d405      	bmi.n	8027eac <_fwrite_r+0x2c>
 8027ea0:	89a3      	ldrh	r3, [r4, #12]
 8027ea2:	0598      	lsls	r0, r3, #22
 8027ea4:	d402      	bmi.n	8027eac <_fwrite_r+0x2c>
 8027ea6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8027ea8:	f000 fae7 	bl	802847a <__retarget_lock_acquire_recursive>
 8027eac:	89a3      	ldrh	r3, [r4, #12]
 8027eae:	0719      	lsls	r1, r3, #28
 8027eb0:	d516      	bpl.n	8027ee0 <_fwrite_r+0x60>
 8027eb2:	6923      	ldr	r3, [r4, #16]
 8027eb4:	b1a3      	cbz	r3, 8027ee0 <_fwrite_r+0x60>
 8027eb6:	2500      	movs	r5, #0
 8027eb8:	454d      	cmp	r5, r9
 8027eba:	d01f      	beq.n	8027efc <_fwrite_r+0x7c>
 8027ebc:	68a7      	ldr	r7, [r4, #8]
 8027ebe:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8027ec2:	3f01      	subs	r7, #1
 8027ec4:	2f00      	cmp	r7, #0
 8027ec6:	60a7      	str	r7, [r4, #8]
 8027ec8:	da04      	bge.n	8027ed4 <_fwrite_r+0x54>
 8027eca:	69a3      	ldr	r3, [r4, #24]
 8027ecc:	429f      	cmp	r7, r3
 8027ece:	db0f      	blt.n	8027ef0 <_fwrite_r+0x70>
 8027ed0:	290a      	cmp	r1, #10
 8027ed2:	d00d      	beq.n	8027ef0 <_fwrite_r+0x70>
 8027ed4:	6823      	ldr	r3, [r4, #0]
 8027ed6:	1c5a      	adds	r2, r3, #1
 8027ed8:	6022      	str	r2, [r4, #0]
 8027eda:	7019      	strb	r1, [r3, #0]
 8027edc:	3501      	adds	r5, #1
 8027ede:	e7eb      	b.n	8027eb8 <_fwrite_r+0x38>
 8027ee0:	4621      	mov	r1, r4
 8027ee2:	4630      	mov	r0, r6
 8027ee4:	f000 f92c 	bl	8028140 <__swsetup_r>
 8027ee8:	2800      	cmp	r0, #0
 8027eea:	d0e4      	beq.n	8027eb6 <_fwrite_r+0x36>
 8027eec:	2500      	movs	r5, #0
 8027eee:	e005      	b.n	8027efc <_fwrite_r+0x7c>
 8027ef0:	4622      	mov	r2, r4
 8027ef2:	4630      	mov	r0, r6
 8027ef4:	f000 f8e6 	bl	80280c4 <__swbuf_r>
 8027ef8:	3001      	adds	r0, #1
 8027efa:	d1ef      	bne.n	8027edc <_fwrite_r+0x5c>
 8027efc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8027efe:	07da      	lsls	r2, r3, #31
 8027f00:	d405      	bmi.n	8027f0e <_fwrite_r+0x8e>
 8027f02:	89a3      	ldrh	r3, [r4, #12]
 8027f04:	059b      	lsls	r3, r3, #22
 8027f06:	d402      	bmi.n	8027f0e <_fwrite_r+0x8e>
 8027f08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8027f0a:	f000 fab7 	bl	802847c <__retarget_lock_release_recursive>
 8027f0e:	fbb5 f0f8 	udiv	r0, r5, r8
 8027f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08027f18 <fwrite>:
 8027f18:	b507      	push	{r0, r1, r2, lr}
 8027f1a:	9300      	str	r3, [sp, #0]
 8027f1c:	4613      	mov	r3, r2
 8027f1e:	460a      	mov	r2, r1
 8027f20:	4601      	mov	r1, r0
 8027f22:	4803      	ldr	r0, [pc, #12]	@ (8027f30 <fwrite+0x18>)
 8027f24:	6800      	ldr	r0, [r0, #0]
 8027f26:	f7ff ffab 	bl	8027e80 <_fwrite_r>
 8027f2a:	b003      	add	sp, #12
 8027f2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8027f30:	200007a8 	.word	0x200007a8

08027f34 <iprintf>:
 8027f34:	b40f      	push	{r0, r1, r2, r3}
 8027f36:	b507      	push	{r0, r1, r2, lr}
 8027f38:	4906      	ldr	r1, [pc, #24]	@ (8027f54 <iprintf+0x20>)
 8027f3a:	ab04      	add	r3, sp, #16
 8027f3c:	6808      	ldr	r0, [r1, #0]
 8027f3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8027f42:	6881      	ldr	r1, [r0, #8]
 8027f44:	9301      	str	r3, [sp, #4]
 8027f46:	f000 fcaf 	bl	80288a8 <_vfiprintf_r>
 8027f4a:	b003      	add	sp, #12
 8027f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8027f50:	b004      	add	sp, #16
 8027f52:	4770      	bx	lr
 8027f54:	200007a8 	.word	0x200007a8

08027f58 <sniprintf>:
 8027f58:	b40c      	push	{r2, r3}
 8027f5a:	b530      	push	{r4, r5, lr}
 8027f5c:	4b18      	ldr	r3, [pc, #96]	@ (8027fc0 <sniprintf+0x68>)
 8027f5e:	1e0c      	subs	r4, r1, #0
 8027f60:	681d      	ldr	r5, [r3, #0]
 8027f62:	b09d      	sub	sp, #116	@ 0x74
 8027f64:	da08      	bge.n	8027f78 <sniprintf+0x20>
 8027f66:	238b      	movs	r3, #139	@ 0x8b
 8027f68:	602b      	str	r3, [r5, #0]
 8027f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8027f6e:	b01d      	add	sp, #116	@ 0x74
 8027f70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8027f74:	b002      	add	sp, #8
 8027f76:	4770      	bx	lr
 8027f78:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8027f7c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8027f80:	f04f 0300 	mov.w	r3, #0
 8027f84:	931b      	str	r3, [sp, #108]	@ 0x6c
 8027f86:	bf14      	ite	ne
 8027f88:	f104 33ff 	addne.w	r3, r4, #4294967295
 8027f8c:	4623      	moveq	r3, r4
 8027f8e:	9304      	str	r3, [sp, #16]
 8027f90:	9307      	str	r3, [sp, #28]
 8027f92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8027f96:	9002      	str	r0, [sp, #8]
 8027f98:	9006      	str	r0, [sp, #24]
 8027f9a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8027f9e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8027fa0:	ab21      	add	r3, sp, #132	@ 0x84
 8027fa2:	a902      	add	r1, sp, #8
 8027fa4:	4628      	mov	r0, r5
 8027fa6:	9301      	str	r3, [sp, #4]
 8027fa8:	f000 fb58 	bl	802865c <_svfiprintf_r>
 8027fac:	1c43      	adds	r3, r0, #1
 8027fae:	bfbc      	itt	lt
 8027fb0:	238b      	movlt	r3, #139	@ 0x8b
 8027fb2:	602b      	strlt	r3, [r5, #0]
 8027fb4:	2c00      	cmp	r4, #0
 8027fb6:	d0da      	beq.n	8027f6e <sniprintf+0x16>
 8027fb8:	9b02      	ldr	r3, [sp, #8]
 8027fba:	2200      	movs	r2, #0
 8027fbc:	701a      	strb	r2, [r3, #0]
 8027fbe:	e7d6      	b.n	8027f6e <sniprintf+0x16>
 8027fc0:	200007a8 	.word	0x200007a8

08027fc4 <__sread>:
 8027fc4:	b510      	push	{r4, lr}
 8027fc6:	460c      	mov	r4, r1
 8027fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027fcc:	f000 f9f6 	bl	80283bc <_read_r>
 8027fd0:	2800      	cmp	r0, #0
 8027fd2:	bfab      	itete	ge
 8027fd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8027fd6:	89a3      	ldrhlt	r3, [r4, #12]
 8027fd8:	181b      	addge	r3, r3, r0
 8027fda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8027fde:	bfac      	ite	ge
 8027fe0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8027fe2:	81a3      	strhlt	r3, [r4, #12]
 8027fe4:	bd10      	pop	{r4, pc}

08027fe6 <__swrite>:
 8027fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027fea:	461f      	mov	r7, r3
 8027fec:	898b      	ldrh	r3, [r1, #12]
 8027fee:	05db      	lsls	r3, r3, #23
 8027ff0:	4605      	mov	r5, r0
 8027ff2:	460c      	mov	r4, r1
 8027ff4:	4616      	mov	r6, r2
 8027ff6:	d505      	bpl.n	8028004 <__swrite+0x1e>
 8027ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027ffc:	2302      	movs	r3, #2
 8027ffe:	2200      	movs	r2, #0
 8028000:	f000 f9ca 	bl	8028398 <_lseek_r>
 8028004:	89a3      	ldrh	r3, [r4, #12]
 8028006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802800a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802800e:	81a3      	strh	r3, [r4, #12]
 8028010:	4632      	mov	r2, r6
 8028012:	463b      	mov	r3, r7
 8028014:	4628      	mov	r0, r5
 8028016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802801a:	f000 b9f1 	b.w	8028400 <_write_r>

0802801e <__sseek>:
 802801e:	b510      	push	{r4, lr}
 8028020:	460c      	mov	r4, r1
 8028022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028026:	f000 f9b7 	bl	8028398 <_lseek_r>
 802802a:	1c43      	adds	r3, r0, #1
 802802c:	89a3      	ldrh	r3, [r4, #12]
 802802e:	bf15      	itete	ne
 8028030:	6560      	strne	r0, [r4, #84]	@ 0x54
 8028032:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8028036:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802803a:	81a3      	strheq	r3, [r4, #12]
 802803c:	bf18      	it	ne
 802803e:	81a3      	strhne	r3, [r4, #12]
 8028040:	bd10      	pop	{r4, pc}

08028042 <__sclose>:
 8028042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028046:	f000 b939 	b.w	80282bc <_close_r>

0802804a <_vsniprintf_r>:
 802804a:	b530      	push	{r4, r5, lr}
 802804c:	4614      	mov	r4, r2
 802804e:	2c00      	cmp	r4, #0
 8028050:	b09b      	sub	sp, #108	@ 0x6c
 8028052:	4605      	mov	r5, r0
 8028054:	461a      	mov	r2, r3
 8028056:	da05      	bge.n	8028064 <_vsniprintf_r+0x1a>
 8028058:	238b      	movs	r3, #139	@ 0x8b
 802805a:	6003      	str	r3, [r0, #0]
 802805c:	f04f 30ff 	mov.w	r0, #4294967295
 8028060:	b01b      	add	sp, #108	@ 0x6c
 8028062:	bd30      	pop	{r4, r5, pc}
 8028064:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8028068:	f8ad 300c 	strh.w	r3, [sp, #12]
 802806c:	f04f 0300 	mov.w	r3, #0
 8028070:	9319      	str	r3, [sp, #100]	@ 0x64
 8028072:	bf14      	ite	ne
 8028074:	f104 33ff 	addne.w	r3, r4, #4294967295
 8028078:	4623      	moveq	r3, r4
 802807a:	9302      	str	r3, [sp, #8]
 802807c:	9305      	str	r3, [sp, #20]
 802807e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8028082:	9100      	str	r1, [sp, #0]
 8028084:	9104      	str	r1, [sp, #16]
 8028086:	f8ad 300e 	strh.w	r3, [sp, #14]
 802808a:	4669      	mov	r1, sp
 802808c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802808e:	f000 fae5 	bl	802865c <_svfiprintf_r>
 8028092:	1c43      	adds	r3, r0, #1
 8028094:	bfbc      	itt	lt
 8028096:	238b      	movlt	r3, #139	@ 0x8b
 8028098:	602b      	strlt	r3, [r5, #0]
 802809a:	2c00      	cmp	r4, #0
 802809c:	d0e0      	beq.n	8028060 <_vsniprintf_r+0x16>
 802809e:	9b00      	ldr	r3, [sp, #0]
 80280a0:	2200      	movs	r2, #0
 80280a2:	701a      	strb	r2, [r3, #0]
 80280a4:	e7dc      	b.n	8028060 <_vsniprintf_r+0x16>
	...

080280a8 <vsniprintf>:
 80280a8:	b507      	push	{r0, r1, r2, lr}
 80280aa:	9300      	str	r3, [sp, #0]
 80280ac:	4613      	mov	r3, r2
 80280ae:	460a      	mov	r2, r1
 80280b0:	4601      	mov	r1, r0
 80280b2:	4803      	ldr	r0, [pc, #12]	@ (80280c0 <vsniprintf+0x18>)
 80280b4:	6800      	ldr	r0, [r0, #0]
 80280b6:	f7ff ffc8 	bl	802804a <_vsniprintf_r>
 80280ba:	b003      	add	sp, #12
 80280bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80280c0:	200007a8 	.word	0x200007a8

080280c4 <__swbuf_r>:
 80280c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80280c6:	460e      	mov	r6, r1
 80280c8:	4614      	mov	r4, r2
 80280ca:	4605      	mov	r5, r0
 80280cc:	b118      	cbz	r0, 80280d6 <__swbuf_r+0x12>
 80280ce:	6a03      	ldr	r3, [r0, #32]
 80280d0:	b90b      	cbnz	r3, 80280d6 <__swbuf_r+0x12>
 80280d2:	f7ff fe9f 	bl	8027e14 <__sinit>
 80280d6:	69a3      	ldr	r3, [r4, #24]
 80280d8:	60a3      	str	r3, [r4, #8]
 80280da:	89a3      	ldrh	r3, [r4, #12]
 80280dc:	071a      	lsls	r2, r3, #28
 80280de:	d501      	bpl.n	80280e4 <__swbuf_r+0x20>
 80280e0:	6923      	ldr	r3, [r4, #16]
 80280e2:	b943      	cbnz	r3, 80280f6 <__swbuf_r+0x32>
 80280e4:	4621      	mov	r1, r4
 80280e6:	4628      	mov	r0, r5
 80280e8:	f000 f82a 	bl	8028140 <__swsetup_r>
 80280ec:	b118      	cbz	r0, 80280f6 <__swbuf_r+0x32>
 80280ee:	f04f 37ff 	mov.w	r7, #4294967295
 80280f2:	4638      	mov	r0, r7
 80280f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80280f6:	6823      	ldr	r3, [r4, #0]
 80280f8:	6922      	ldr	r2, [r4, #16]
 80280fa:	1a98      	subs	r0, r3, r2
 80280fc:	6963      	ldr	r3, [r4, #20]
 80280fe:	b2f6      	uxtb	r6, r6
 8028100:	4283      	cmp	r3, r0
 8028102:	4637      	mov	r7, r6
 8028104:	dc05      	bgt.n	8028112 <__swbuf_r+0x4e>
 8028106:	4621      	mov	r1, r4
 8028108:	4628      	mov	r0, r5
 802810a:	f000 fef5 	bl	8028ef8 <_fflush_r>
 802810e:	2800      	cmp	r0, #0
 8028110:	d1ed      	bne.n	80280ee <__swbuf_r+0x2a>
 8028112:	68a3      	ldr	r3, [r4, #8]
 8028114:	3b01      	subs	r3, #1
 8028116:	60a3      	str	r3, [r4, #8]
 8028118:	6823      	ldr	r3, [r4, #0]
 802811a:	1c5a      	adds	r2, r3, #1
 802811c:	6022      	str	r2, [r4, #0]
 802811e:	701e      	strb	r6, [r3, #0]
 8028120:	6962      	ldr	r2, [r4, #20]
 8028122:	1c43      	adds	r3, r0, #1
 8028124:	429a      	cmp	r2, r3
 8028126:	d004      	beq.n	8028132 <__swbuf_r+0x6e>
 8028128:	89a3      	ldrh	r3, [r4, #12]
 802812a:	07db      	lsls	r3, r3, #31
 802812c:	d5e1      	bpl.n	80280f2 <__swbuf_r+0x2e>
 802812e:	2e0a      	cmp	r6, #10
 8028130:	d1df      	bne.n	80280f2 <__swbuf_r+0x2e>
 8028132:	4621      	mov	r1, r4
 8028134:	4628      	mov	r0, r5
 8028136:	f000 fedf 	bl	8028ef8 <_fflush_r>
 802813a:	2800      	cmp	r0, #0
 802813c:	d0d9      	beq.n	80280f2 <__swbuf_r+0x2e>
 802813e:	e7d6      	b.n	80280ee <__swbuf_r+0x2a>

08028140 <__swsetup_r>:
 8028140:	b538      	push	{r3, r4, r5, lr}
 8028142:	4b29      	ldr	r3, [pc, #164]	@ (80281e8 <__swsetup_r+0xa8>)
 8028144:	4605      	mov	r5, r0
 8028146:	6818      	ldr	r0, [r3, #0]
 8028148:	460c      	mov	r4, r1
 802814a:	b118      	cbz	r0, 8028154 <__swsetup_r+0x14>
 802814c:	6a03      	ldr	r3, [r0, #32]
 802814e:	b90b      	cbnz	r3, 8028154 <__swsetup_r+0x14>
 8028150:	f7ff fe60 	bl	8027e14 <__sinit>
 8028154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028158:	0719      	lsls	r1, r3, #28
 802815a:	d422      	bmi.n	80281a2 <__swsetup_r+0x62>
 802815c:	06da      	lsls	r2, r3, #27
 802815e:	d407      	bmi.n	8028170 <__swsetup_r+0x30>
 8028160:	2209      	movs	r2, #9
 8028162:	602a      	str	r2, [r5, #0]
 8028164:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028168:	81a3      	strh	r3, [r4, #12]
 802816a:	f04f 30ff 	mov.w	r0, #4294967295
 802816e:	e033      	b.n	80281d8 <__swsetup_r+0x98>
 8028170:	0758      	lsls	r0, r3, #29
 8028172:	d512      	bpl.n	802819a <__swsetup_r+0x5a>
 8028174:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028176:	b141      	cbz	r1, 802818a <__swsetup_r+0x4a>
 8028178:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802817c:	4299      	cmp	r1, r3
 802817e:	d002      	beq.n	8028186 <__swsetup_r+0x46>
 8028180:	4628      	mov	r0, r5
 8028182:	f000 f9bd 	bl	8028500 <_free_r>
 8028186:	2300      	movs	r3, #0
 8028188:	6363      	str	r3, [r4, #52]	@ 0x34
 802818a:	89a3      	ldrh	r3, [r4, #12]
 802818c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8028190:	81a3      	strh	r3, [r4, #12]
 8028192:	2300      	movs	r3, #0
 8028194:	6063      	str	r3, [r4, #4]
 8028196:	6923      	ldr	r3, [r4, #16]
 8028198:	6023      	str	r3, [r4, #0]
 802819a:	89a3      	ldrh	r3, [r4, #12]
 802819c:	f043 0308 	orr.w	r3, r3, #8
 80281a0:	81a3      	strh	r3, [r4, #12]
 80281a2:	6923      	ldr	r3, [r4, #16]
 80281a4:	b94b      	cbnz	r3, 80281ba <__swsetup_r+0x7a>
 80281a6:	89a3      	ldrh	r3, [r4, #12]
 80281a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80281ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80281b0:	d003      	beq.n	80281ba <__swsetup_r+0x7a>
 80281b2:	4621      	mov	r1, r4
 80281b4:	4628      	mov	r0, r5
 80281b6:	f000 feff 	bl	8028fb8 <__smakebuf_r>
 80281ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80281be:	f013 0201 	ands.w	r2, r3, #1
 80281c2:	d00a      	beq.n	80281da <__swsetup_r+0x9a>
 80281c4:	2200      	movs	r2, #0
 80281c6:	60a2      	str	r2, [r4, #8]
 80281c8:	6962      	ldr	r2, [r4, #20]
 80281ca:	4252      	negs	r2, r2
 80281cc:	61a2      	str	r2, [r4, #24]
 80281ce:	6922      	ldr	r2, [r4, #16]
 80281d0:	b942      	cbnz	r2, 80281e4 <__swsetup_r+0xa4>
 80281d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80281d6:	d1c5      	bne.n	8028164 <__swsetup_r+0x24>
 80281d8:	bd38      	pop	{r3, r4, r5, pc}
 80281da:	0799      	lsls	r1, r3, #30
 80281dc:	bf58      	it	pl
 80281de:	6962      	ldrpl	r2, [r4, #20]
 80281e0:	60a2      	str	r2, [r4, #8]
 80281e2:	e7f4      	b.n	80281ce <__swsetup_r+0x8e>
 80281e4:	2000      	movs	r0, #0
 80281e6:	e7f7      	b.n	80281d8 <__swsetup_r+0x98>
 80281e8:	200007a8 	.word	0x200007a8

080281ec <memcmp>:
 80281ec:	b510      	push	{r4, lr}
 80281ee:	3901      	subs	r1, #1
 80281f0:	4402      	add	r2, r0
 80281f2:	4290      	cmp	r0, r2
 80281f4:	d101      	bne.n	80281fa <memcmp+0xe>
 80281f6:	2000      	movs	r0, #0
 80281f8:	e005      	b.n	8028206 <memcmp+0x1a>
 80281fa:	7803      	ldrb	r3, [r0, #0]
 80281fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8028200:	42a3      	cmp	r3, r4
 8028202:	d001      	beq.n	8028208 <memcmp+0x1c>
 8028204:	1b18      	subs	r0, r3, r4
 8028206:	bd10      	pop	{r4, pc}
 8028208:	3001      	adds	r0, #1
 802820a:	e7f2      	b.n	80281f2 <memcmp+0x6>

0802820c <memmove>:
 802820c:	4288      	cmp	r0, r1
 802820e:	b510      	push	{r4, lr}
 8028210:	eb01 0402 	add.w	r4, r1, r2
 8028214:	d902      	bls.n	802821c <memmove+0x10>
 8028216:	4284      	cmp	r4, r0
 8028218:	4623      	mov	r3, r4
 802821a:	d807      	bhi.n	802822c <memmove+0x20>
 802821c:	1e43      	subs	r3, r0, #1
 802821e:	42a1      	cmp	r1, r4
 8028220:	d008      	beq.n	8028234 <memmove+0x28>
 8028222:	f811 2b01 	ldrb.w	r2, [r1], #1
 8028226:	f803 2f01 	strb.w	r2, [r3, #1]!
 802822a:	e7f8      	b.n	802821e <memmove+0x12>
 802822c:	4402      	add	r2, r0
 802822e:	4601      	mov	r1, r0
 8028230:	428a      	cmp	r2, r1
 8028232:	d100      	bne.n	8028236 <memmove+0x2a>
 8028234:	bd10      	pop	{r4, pc}
 8028236:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802823a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802823e:	e7f7      	b.n	8028230 <memmove+0x24>

08028240 <memset>:
 8028240:	4402      	add	r2, r0
 8028242:	4603      	mov	r3, r0
 8028244:	4293      	cmp	r3, r2
 8028246:	d100      	bne.n	802824a <memset+0xa>
 8028248:	4770      	bx	lr
 802824a:	f803 1b01 	strb.w	r1, [r3], #1
 802824e:	e7f9      	b.n	8028244 <memset+0x4>

08028250 <strchr>:
 8028250:	b2c9      	uxtb	r1, r1
 8028252:	4603      	mov	r3, r0
 8028254:	4618      	mov	r0, r3
 8028256:	f813 2b01 	ldrb.w	r2, [r3], #1
 802825a:	b112      	cbz	r2, 8028262 <strchr+0x12>
 802825c:	428a      	cmp	r2, r1
 802825e:	d1f9      	bne.n	8028254 <strchr+0x4>
 8028260:	4770      	bx	lr
 8028262:	2900      	cmp	r1, #0
 8028264:	bf18      	it	ne
 8028266:	2000      	movne	r0, #0
 8028268:	4770      	bx	lr

0802826a <strncmp>:
 802826a:	b510      	push	{r4, lr}
 802826c:	b16a      	cbz	r2, 802828a <strncmp+0x20>
 802826e:	3901      	subs	r1, #1
 8028270:	1884      	adds	r4, r0, r2
 8028272:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028276:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802827a:	429a      	cmp	r2, r3
 802827c:	d103      	bne.n	8028286 <strncmp+0x1c>
 802827e:	42a0      	cmp	r0, r4
 8028280:	d001      	beq.n	8028286 <strncmp+0x1c>
 8028282:	2a00      	cmp	r2, #0
 8028284:	d1f5      	bne.n	8028272 <strncmp+0x8>
 8028286:	1ad0      	subs	r0, r2, r3
 8028288:	bd10      	pop	{r4, pc}
 802828a:	4610      	mov	r0, r2
 802828c:	e7fc      	b.n	8028288 <strncmp+0x1e>

0802828e <strstr>:
 802828e:	780a      	ldrb	r2, [r1, #0]
 8028290:	b570      	push	{r4, r5, r6, lr}
 8028292:	b96a      	cbnz	r2, 80282b0 <strstr+0x22>
 8028294:	bd70      	pop	{r4, r5, r6, pc}
 8028296:	429a      	cmp	r2, r3
 8028298:	d109      	bne.n	80282ae <strstr+0x20>
 802829a:	460c      	mov	r4, r1
 802829c:	4605      	mov	r5, r0
 802829e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80282a2:	2b00      	cmp	r3, #0
 80282a4:	d0f6      	beq.n	8028294 <strstr+0x6>
 80282a6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80282aa:	429e      	cmp	r6, r3
 80282ac:	d0f7      	beq.n	802829e <strstr+0x10>
 80282ae:	3001      	adds	r0, #1
 80282b0:	7803      	ldrb	r3, [r0, #0]
 80282b2:	2b00      	cmp	r3, #0
 80282b4:	d1ef      	bne.n	8028296 <strstr+0x8>
 80282b6:	4618      	mov	r0, r3
 80282b8:	e7ec      	b.n	8028294 <strstr+0x6>
	...

080282bc <_close_r>:
 80282bc:	b538      	push	{r3, r4, r5, lr}
 80282be:	4d06      	ldr	r5, [pc, #24]	@ (80282d8 <_close_r+0x1c>)
 80282c0:	2300      	movs	r3, #0
 80282c2:	4604      	mov	r4, r0
 80282c4:	4608      	mov	r0, r1
 80282c6:	602b      	str	r3, [r5, #0]
 80282c8:	f7d9 fe12 	bl	8001ef0 <_close>
 80282cc:	1c43      	adds	r3, r0, #1
 80282ce:	d102      	bne.n	80282d6 <_close_r+0x1a>
 80282d0:	682b      	ldr	r3, [r5, #0]
 80282d2:	b103      	cbz	r3, 80282d6 <_close_r+0x1a>
 80282d4:	6023      	str	r3, [r4, #0]
 80282d6:	bd38      	pop	{r3, r4, r5, pc}
 80282d8:	20015124 	.word	0x20015124

080282dc <_reclaim_reent>:
 80282dc:	4b2d      	ldr	r3, [pc, #180]	@ (8028394 <_reclaim_reent+0xb8>)
 80282de:	681b      	ldr	r3, [r3, #0]
 80282e0:	4283      	cmp	r3, r0
 80282e2:	b570      	push	{r4, r5, r6, lr}
 80282e4:	4604      	mov	r4, r0
 80282e6:	d053      	beq.n	8028390 <_reclaim_reent+0xb4>
 80282e8:	69c3      	ldr	r3, [r0, #28]
 80282ea:	b31b      	cbz	r3, 8028334 <_reclaim_reent+0x58>
 80282ec:	68db      	ldr	r3, [r3, #12]
 80282ee:	b163      	cbz	r3, 802830a <_reclaim_reent+0x2e>
 80282f0:	2500      	movs	r5, #0
 80282f2:	69e3      	ldr	r3, [r4, #28]
 80282f4:	68db      	ldr	r3, [r3, #12]
 80282f6:	5959      	ldr	r1, [r3, r5]
 80282f8:	b9b1      	cbnz	r1, 8028328 <_reclaim_reent+0x4c>
 80282fa:	3504      	adds	r5, #4
 80282fc:	2d80      	cmp	r5, #128	@ 0x80
 80282fe:	d1f8      	bne.n	80282f2 <_reclaim_reent+0x16>
 8028300:	69e3      	ldr	r3, [r4, #28]
 8028302:	4620      	mov	r0, r4
 8028304:	68d9      	ldr	r1, [r3, #12]
 8028306:	f000 f8fb 	bl	8028500 <_free_r>
 802830a:	69e3      	ldr	r3, [r4, #28]
 802830c:	6819      	ldr	r1, [r3, #0]
 802830e:	b111      	cbz	r1, 8028316 <_reclaim_reent+0x3a>
 8028310:	4620      	mov	r0, r4
 8028312:	f000 f8f5 	bl	8028500 <_free_r>
 8028316:	69e3      	ldr	r3, [r4, #28]
 8028318:	689d      	ldr	r5, [r3, #8]
 802831a:	b15d      	cbz	r5, 8028334 <_reclaim_reent+0x58>
 802831c:	4629      	mov	r1, r5
 802831e:	4620      	mov	r0, r4
 8028320:	682d      	ldr	r5, [r5, #0]
 8028322:	f000 f8ed 	bl	8028500 <_free_r>
 8028326:	e7f8      	b.n	802831a <_reclaim_reent+0x3e>
 8028328:	680e      	ldr	r6, [r1, #0]
 802832a:	4620      	mov	r0, r4
 802832c:	f000 f8e8 	bl	8028500 <_free_r>
 8028330:	4631      	mov	r1, r6
 8028332:	e7e1      	b.n	80282f8 <_reclaim_reent+0x1c>
 8028334:	6961      	ldr	r1, [r4, #20]
 8028336:	b111      	cbz	r1, 802833e <_reclaim_reent+0x62>
 8028338:	4620      	mov	r0, r4
 802833a:	f000 f8e1 	bl	8028500 <_free_r>
 802833e:	69e1      	ldr	r1, [r4, #28]
 8028340:	b111      	cbz	r1, 8028348 <_reclaim_reent+0x6c>
 8028342:	4620      	mov	r0, r4
 8028344:	f000 f8dc 	bl	8028500 <_free_r>
 8028348:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802834a:	b111      	cbz	r1, 8028352 <_reclaim_reent+0x76>
 802834c:	4620      	mov	r0, r4
 802834e:	f000 f8d7 	bl	8028500 <_free_r>
 8028352:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028354:	b111      	cbz	r1, 802835c <_reclaim_reent+0x80>
 8028356:	4620      	mov	r0, r4
 8028358:	f000 f8d2 	bl	8028500 <_free_r>
 802835c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802835e:	b111      	cbz	r1, 8028366 <_reclaim_reent+0x8a>
 8028360:	4620      	mov	r0, r4
 8028362:	f000 f8cd 	bl	8028500 <_free_r>
 8028366:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8028368:	b111      	cbz	r1, 8028370 <_reclaim_reent+0x94>
 802836a:	4620      	mov	r0, r4
 802836c:	f000 f8c8 	bl	8028500 <_free_r>
 8028370:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8028372:	b111      	cbz	r1, 802837a <_reclaim_reent+0x9e>
 8028374:	4620      	mov	r0, r4
 8028376:	f000 f8c3 	bl	8028500 <_free_r>
 802837a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 802837c:	b111      	cbz	r1, 8028384 <_reclaim_reent+0xa8>
 802837e:	4620      	mov	r0, r4
 8028380:	f000 f8be 	bl	8028500 <_free_r>
 8028384:	6a23      	ldr	r3, [r4, #32]
 8028386:	b11b      	cbz	r3, 8028390 <_reclaim_reent+0xb4>
 8028388:	4620      	mov	r0, r4
 802838a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802838e:	4718      	bx	r3
 8028390:	bd70      	pop	{r4, r5, r6, pc}
 8028392:	bf00      	nop
 8028394:	200007a8 	.word	0x200007a8

08028398 <_lseek_r>:
 8028398:	b538      	push	{r3, r4, r5, lr}
 802839a:	4d07      	ldr	r5, [pc, #28]	@ (80283b8 <_lseek_r+0x20>)
 802839c:	4604      	mov	r4, r0
 802839e:	4608      	mov	r0, r1
 80283a0:	4611      	mov	r1, r2
 80283a2:	2200      	movs	r2, #0
 80283a4:	602a      	str	r2, [r5, #0]
 80283a6:	461a      	mov	r2, r3
 80283a8:	f7d9 fdc9 	bl	8001f3e <_lseek>
 80283ac:	1c43      	adds	r3, r0, #1
 80283ae:	d102      	bne.n	80283b6 <_lseek_r+0x1e>
 80283b0:	682b      	ldr	r3, [r5, #0]
 80283b2:	b103      	cbz	r3, 80283b6 <_lseek_r+0x1e>
 80283b4:	6023      	str	r3, [r4, #0]
 80283b6:	bd38      	pop	{r3, r4, r5, pc}
 80283b8:	20015124 	.word	0x20015124

080283bc <_read_r>:
 80283bc:	b538      	push	{r3, r4, r5, lr}
 80283be:	4d07      	ldr	r5, [pc, #28]	@ (80283dc <_read_r+0x20>)
 80283c0:	4604      	mov	r4, r0
 80283c2:	4608      	mov	r0, r1
 80283c4:	4611      	mov	r1, r2
 80283c6:	2200      	movs	r2, #0
 80283c8:	602a      	str	r2, [r5, #0]
 80283ca:	461a      	mov	r2, r3
 80283cc:	f7d9 fd57 	bl	8001e7e <_read>
 80283d0:	1c43      	adds	r3, r0, #1
 80283d2:	d102      	bne.n	80283da <_read_r+0x1e>
 80283d4:	682b      	ldr	r3, [r5, #0]
 80283d6:	b103      	cbz	r3, 80283da <_read_r+0x1e>
 80283d8:	6023      	str	r3, [r4, #0]
 80283da:	bd38      	pop	{r3, r4, r5, pc}
 80283dc:	20015124 	.word	0x20015124

080283e0 <_sbrk_r>:
 80283e0:	b538      	push	{r3, r4, r5, lr}
 80283e2:	4d06      	ldr	r5, [pc, #24]	@ (80283fc <_sbrk_r+0x1c>)
 80283e4:	2300      	movs	r3, #0
 80283e6:	4604      	mov	r4, r0
 80283e8:	4608      	mov	r0, r1
 80283ea:	602b      	str	r3, [r5, #0]
 80283ec:	f7d9 fdb4 	bl	8001f58 <_sbrk>
 80283f0:	1c43      	adds	r3, r0, #1
 80283f2:	d102      	bne.n	80283fa <_sbrk_r+0x1a>
 80283f4:	682b      	ldr	r3, [r5, #0]
 80283f6:	b103      	cbz	r3, 80283fa <_sbrk_r+0x1a>
 80283f8:	6023      	str	r3, [r4, #0]
 80283fa:	bd38      	pop	{r3, r4, r5, pc}
 80283fc:	20015124 	.word	0x20015124

08028400 <_write_r>:
 8028400:	b538      	push	{r3, r4, r5, lr}
 8028402:	4d07      	ldr	r5, [pc, #28]	@ (8028420 <_write_r+0x20>)
 8028404:	4604      	mov	r4, r0
 8028406:	4608      	mov	r0, r1
 8028408:	4611      	mov	r1, r2
 802840a:	2200      	movs	r2, #0
 802840c:	602a      	str	r2, [r5, #0]
 802840e:	461a      	mov	r2, r3
 8028410:	f7d9 fd52 	bl	8001eb8 <_write>
 8028414:	1c43      	adds	r3, r0, #1
 8028416:	d102      	bne.n	802841e <_write_r+0x1e>
 8028418:	682b      	ldr	r3, [r5, #0]
 802841a:	b103      	cbz	r3, 802841e <_write_r+0x1e>
 802841c:	6023      	str	r3, [r4, #0]
 802841e:	bd38      	pop	{r3, r4, r5, pc}
 8028420:	20015124 	.word	0x20015124

08028424 <__errno>:
 8028424:	4b01      	ldr	r3, [pc, #4]	@ (802842c <__errno+0x8>)
 8028426:	6818      	ldr	r0, [r3, #0]
 8028428:	4770      	bx	lr
 802842a:	bf00      	nop
 802842c:	200007a8 	.word	0x200007a8

08028430 <__libc_init_array>:
 8028430:	b570      	push	{r4, r5, r6, lr}
 8028432:	4d0d      	ldr	r5, [pc, #52]	@ (8028468 <__libc_init_array+0x38>)
 8028434:	4c0d      	ldr	r4, [pc, #52]	@ (802846c <__libc_init_array+0x3c>)
 8028436:	1b64      	subs	r4, r4, r5
 8028438:	10a4      	asrs	r4, r4, #2
 802843a:	2600      	movs	r6, #0
 802843c:	42a6      	cmp	r6, r4
 802843e:	d109      	bne.n	8028454 <__libc_init_array+0x24>
 8028440:	4d0b      	ldr	r5, [pc, #44]	@ (8028470 <__libc_init_array+0x40>)
 8028442:	4c0c      	ldr	r4, [pc, #48]	@ (8028474 <__libc_init_array+0x44>)
 8028444:	f000 fec0 	bl	80291c8 <_init>
 8028448:	1b64      	subs	r4, r4, r5
 802844a:	10a4      	asrs	r4, r4, #2
 802844c:	2600      	movs	r6, #0
 802844e:	42a6      	cmp	r6, r4
 8028450:	d105      	bne.n	802845e <__libc_init_array+0x2e>
 8028452:	bd70      	pop	{r4, r5, r6, pc}
 8028454:	f855 3b04 	ldr.w	r3, [r5], #4
 8028458:	4798      	blx	r3
 802845a:	3601      	adds	r6, #1
 802845c:	e7ee      	b.n	802843c <__libc_init_array+0xc>
 802845e:	f855 3b04 	ldr.w	r3, [r5], #4
 8028462:	4798      	blx	r3
 8028464:	3601      	adds	r6, #1
 8028466:	e7f2      	b.n	802844e <__libc_init_array+0x1e>
 8028468:	0802dffc 	.word	0x0802dffc
 802846c:	0802dffc 	.word	0x0802dffc
 8028470:	0802dffc 	.word	0x0802dffc
 8028474:	0802e00c 	.word	0x0802e00c

08028478 <__retarget_lock_init_recursive>:
 8028478:	4770      	bx	lr

0802847a <__retarget_lock_acquire_recursive>:
 802847a:	4770      	bx	lr

0802847c <__retarget_lock_release_recursive>:
 802847c:	4770      	bx	lr

0802847e <strcpy>:
 802847e:	4603      	mov	r3, r0
 8028480:	f811 2b01 	ldrb.w	r2, [r1], #1
 8028484:	f803 2b01 	strb.w	r2, [r3], #1
 8028488:	2a00      	cmp	r2, #0
 802848a:	d1f9      	bne.n	8028480 <strcpy+0x2>
 802848c:	4770      	bx	lr

0802848e <memcpy>:
 802848e:	440a      	add	r2, r1
 8028490:	4291      	cmp	r1, r2
 8028492:	f100 33ff 	add.w	r3, r0, #4294967295
 8028496:	d100      	bne.n	802849a <memcpy+0xc>
 8028498:	4770      	bx	lr
 802849a:	b510      	push	{r4, lr}
 802849c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80284a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80284a4:	4291      	cmp	r1, r2
 80284a6:	d1f9      	bne.n	802849c <memcpy+0xe>
 80284a8:	bd10      	pop	{r4, pc}
	...

080284ac <__assert_func>:
 80284ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80284ae:	4614      	mov	r4, r2
 80284b0:	461a      	mov	r2, r3
 80284b2:	4b09      	ldr	r3, [pc, #36]	@ (80284d8 <__assert_func+0x2c>)
 80284b4:	681b      	ldr	r3, [r3, #0]
 80284b6:	4605      	mov	r5, r0
 80284b8:	68d8      	ldr	r0, [r3, #12]
 80284ba:	b14c      	cbz	r4, 80284d0 <__assert_func+0x24>
 80284bc:	4b07      	ldr	r3, [pc, #28]	@ (80284dc <__assert_func+0x30>)
 80284be:	9100      	str	r1, [sp, #0]
 80284c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80284c4:	4906      	ldr	r1, [pc, #24]	@ (80284e0 <__assert_func+0x34>)
 80284c6:	462b      	mov	r3, r5
 80284c8:	f000 fd3e 	bl	8028f48 <fiprintf>
 80284cc:	f000 fdd2 	bl	8029074 <abort>
 80284d0:	4b04      	ldr	r3, [pc, #16]	@ (80284e4 <__assert_func+0x38>)
 80284d2:	461c      	mov	r4, r3
 80284d4:	e7f3      	b.n	80284be <__assert_func+0x12>
 80284d6:	bf00      	nop
 80284d8:	200007a8 	.word	0x200007a8
 80284dc:	0802de83 	.word	0x0802de83
 80284e0:	0802de90 	.word	0x0802de90
 80284e4:	0802debe 	.word	0x0802debe

080284e8 <__env_lock>:
 80284e8:	4801      	ldr	r0, [pc, #4]	@ (80284f0 <__env_lock+0x8>)
 80284ea:	f7ff bfc6 	b.w	802847a <__retarget_lock_acquire_recursive>
 80284ee:	bf00      	nop
 80284f0:	20015128 	.word	0x20015128

080284f4 <__env_unlock>:
 80284f4:	4801      	ldr	r0, [pc, #4]	@ (80284fc <__env_unlock+0x8>)
 80284f6:	f7ff bfc1 	b.w	802847c <__retarget_lock_release_recursive>
 80284fa:	bf00      	nop
 80284fc:	20015128 	.word	0x20015128

08028500 <_free_r>:
 8028500:	b538      	push	{r3, r4, r5, lr}
 8028502:	4605      	mov	r5, r0
 8028504:	2900      	cmp	r1, #0
 8028506:	d041      	beq.n	802858c <_free_r+0x8c>
 8028508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802850c:	1f0c      	subs	r4, r1, #4
 802850e:	2b00      	cmp	r3, #0
 8028510:	bfb8      	it	lt
 8028512:	18e4      	addlt	r4, r4, r3
 8028514:	f7ff fa48 	bl	80279a8 <__malloc_lock>
 8028518:	4a1d      	ldr	r2, [pc, #116]	@ (8028590 <_free_r+0x90>)
 802851a:	6813      	ldr	r3, [r2, #0]
 802851c:	b933      	cbnz	r3, 802852c <_free_r+0x2c>
 802851e:	6063      	str	r3, [r4, #4]
 8028520:	6014      	str	r4, [r2, #0]
 8028522:	4628      	mov	r0, r5
 8028524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028528:	f7ff ba44 	b.w	80279b4 <__malloc_unlock>
 802852c:	42a3      	cmp	r3, r4
 802852e:	d908      	bls.n	8028542 <_free_r+0x42>
 8028530:	6820      	ldr	r0, [r4, #0]
 8028532:	1821      	adds	r1, r4, r0
 8028534:	428b      	cmp	r3, r1
 8028536:	bf01      	itttt	eq
 8028538:	6819      	ldreq	r1, [r3, #0]
 802853a:	685b      	ldreq	r3, [r3, #4]
 802853c:	1809      	addeq	r1, r1, r0
 802853e:	6021      	streq	r1, [r4, #0]
 8028540:	e7ed      	b.n	802851e <_free_r+0x1e>
 8028542:	461a      	mov	r2, r3
 8028544:	685b      	ldr	r3, [r3, #4]
 8028546:	b10b      	cbz	r3, 802854c <_free_r+0x4c>
 8028548:	42a3      	cmp	r3, r4
 802854a:	d9fa      	bls.n	8028542 <_free_r+0x42>
 802854c:	6811      	ldr	r1, [r2, #0]
 802854e:	1850      	adds	r0, r2, r1
 8028550:	42a0      	cmp	r0, r4
 8028552:	d10b      	bne.n	802856c <_free_r+0x6c>
 8028554:	6820      	ldr	r0, [r4, #0]
 8028556:	4401      	add	r1, r0
 8028558:	1850      	adds	r0, r2, r1
 802855a:	4283      	cmp	r3, r0
 802855c:	6011      	str	r1, [r2, #0]
 802855e:	d1e0      	bne.n	8028522 <_free_r+0x22>
 8028560:	6818      	ldr	r0, [r3, #0]
 8028562:	685b      	ldr	r3, [r3, #4]
 8028564:	6053      	str	r3, [r2, #4]
 8028566:	4408      	add	r0, r1
 8028568:	6010      	str	r0, [r2, #0]
 802856a:	e7da      	b.n	8028522 <_free_r+0x22>
 802856c:	d902      	bls.n	8028574 <_free_r+0x74>
 802856e:	230c      	movs	r3, #12
 8028570:	602b      	str	r3, [r5, #0]
 8028572:	e7d6      	b.n	8028522 <_free_r+0x22>
 8028574:	6820      	ldr	r0, [r4, #0]
 8028576:	1821      	adds	r1, r4, r0
 8028578:	428b      	cmp	r3, r1
 802857a:	bf04      	itt	eq
 802857c:	6819      	ldreq	r1, [r3, #0]
 802857e:	685b      	ldreq	r3, [r3, #4]
 8028580:	6063      	str	r3, [r4, #4]
 8028582:	bf04      	itt	eq
 8028584:	1809      	addeq	r1, r1, r0
 8028586:	6021      	streq	r1, [r4, #0]
 8028588:	6054      	str	r4, [r2, #4]
 802858a:	e7ca      	b.n	8028522 <_free_r+0x22>
 802858c:	bd38      	pop	{r3, r4, r5, pc}
 802858e:	bf00      	nop
 8028590:	20014fe4 	.word	0x20014fe4

08028594 <_malloc_usable_size_r>:
 8028594:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8028598:	1f18      	subs	r0, r3, #4
 802859a:	2b00      	cmp	r3, #0
 802859c:	bfbc      	itt	lt
 802859e:	580b      	ldrlt	r3, [r1, r0]
 80285a0:	18c0      	addlt	r0, r0, r3
 80285a2:	4770      	bx	lr

080285a4 <__ssputs_r>:
 80285a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80285a8:	688e      	ldr	r6, [r1, #8]
 80285aa:	461f      	mov	r7, r3
 80285ac:	42be      	cmp	r6, r7
 80285ae:	680b      	ldr	r3, [r1, #0]
 80285b0:	4682      	mov	sl, r0
 80285b2:	460c      	mov	r4, r1
 80285b4:	4690      	mov	r8, r2
 80285b6:	d82d      	bhi.n	8028614 <__ssputs_r+0x70>
 80285b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80285bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80285c0:	d026      	beq.n	8028610 <__ssputs_r+0x6c>
 80285c2:	6965      	ldr	r5, [r4, #20]
 80285c4:	6909      	ldr	r1, [r1, #16]
 80285c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80285ca:	eba3 0901 	sub.w	r9, r3, r1
 80285ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80285d2:	1c7b      	adds	r3, r7, #1
 80285d4:	444b      	add	r3, r9
 80285d6:	106d      	asrs	r5, r5, #1
 80285d8:	429d      	cmp	r5, r3
 80285da:	bf38      	it	cc
 80285dc:	461d      	movcc	r5, r3
 80285de:	0553      	lsls	r3, r2, #21
 80285e0:	d527      	bpl.n	8028632 <__ssputs_r+0x8e>
 80285e2:	4629      	mov	r1, r5
 80285e4:	f7ff f960 	bl	80278a8 <_malloc_r>
 80285e8:	4606      	mov	r6, r0
 80285ea:	b360      	cbz	r0, 8028646 <__ssputs_r+0xa2>
 80285ec:	6921      	ldr	r1, [r4, #16]
 80285ee:	464a      	mov	r2, r9
 80285f0:	f7ff ff4d 	bl	802848e <memcpy>
 80285f4:	89a3      	ldrh	r3, [r4, #12]
 80285f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80285fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80285fe:	81a3      	strh	r3, [r4, #12]
 8028600:	6126      	str	r6, [r4, #16]
 8028602:	6165      	str	r5, [r4, #20]
 8028604:	444e      	add	r6, r9
 8028606:	eba5 0509 	sub.w	r5, r5, r9
 802860a:	6026      	str	r6, [r4, #0]
 802860c:	60a5      	str	r5, [r4, #8]
 802860e:	463e      	mov	r6, r7
 8028610:	42be      	cmp	r6, r7
 8028612:	d900      	bls.n	8028616 <__ssputs_r+0x72>
 8028614:	463e      	mov	r6, r7
 8028616:	6820      	ldr	r0, [r4, #0]
 8028618:	4632      	mov	r2, r6
 802861a:	4641      	mov	r1, r8
 802861c:	f7ff fdf6 	bl	802820c <memmove>
 8028620:	68a3      	ldr	r3, [r4, #8]
 8028622:	1b9b      	subs	r3, r3, r6
 8028624:	60a3      	str	r3, [r4, #8]
 8028626:	6823      	ldr	r3, [r4, #0]
 8028628:	4433      	add	r3, r6
 802862a:	6023      	str	r3, [r4, #0]
 802862c:	2000      	movs	r0, #0
 802862e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028632:	462a      	mov	r2, r5
 8028634:	f7ff fa38 	bl	8027aa8 <_realloc_r>
 8028638:	4606      	mov	r6, r0
 802863a:	2800      	cmp	r0, #0
 802863c:	d1e0      	bne.n	8028600 <__ssputs_r+0x5c>
 802863e:	6921      	ldr	r1, [r4, #16]
 8028640:	4650      	mov	r0, sl
 8028642:	f7ff ff5d 	bl	8028500 <_free_r>
 8028646:	230c      	movs	r3, #12
 8028648:	f8ca 3000 	str.w	r3, [sl]
 802864c:	89a3      	ldrh	r3, [r4, #12]
 802864e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028652:	81a3      	strh	r3, [r4, #12]
 8028654:	f04f 30ff 	mov.w	r0, #4294967295
 8028658:	e7e9      	b.n	802862e <__ssputs_r+0x8a>
	...

0802865c <_svfiprintf_r>:
 802865c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028660:	4698      	mov	r8, r3
 8028662:	898b      	ldrh	r3, [r1, #12]
 8028664:	061b      	lsls	r3, r3, #24
 8028666:	b09d      	sub	sp, #116	@ 0x74
 8028668:	4607      	mov	r7, r0
 802866a:	460d      	mov	r5, r1
 802866c:	4614      	mov	r4, r2
 802866e:	d510      	bpl.n	8028692 <_svfiprintf_r+0x36>
 8028670:	690b      	ldr	r3, [r1, #16]
 8028672:	b973      	cbnz	r3, 8028692 <_svfiprintf_r+0x36>
 8028674:	2140      	movs	r1, #64	@ 0x40
 8028676:	f7ff f917 	bl	80278a8 <_malloc_r>
 802867a:	6028      	str	r0, [r5, #0]
 802867c:	6128      	str	r0, [r5, #16]
 802867e:	b930      	cbnz	r0, 802868e <_svfiprintf_r+0x32>
 8028680:	230c      	movs	r3, #12
 8028682:	603b      	str	r3, [r7, #0]
 8028684:	f04f 30ff 	mov.w	r0, #4294967295
 8028688:	b01d      	add	sp, #116	@ 0x74
 802868a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802868e:	2340      	movs	r3, #64	@ 0x40
 8028690:	616b      	str	r3, [r5, #20]
 8028692:	2300      	movs	r3, #0
 8028694:	9309      	str	r3, [sp, #36]	@ 0x24
 8028696:	2320      	movs	r3, #32
 8028698:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802869c:	f8cd 800c 	str.w	r8, [sp, #12]
 80286a0:	2330      	movs	r3, #48	@ 0x30
 80286a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8028840 <_svfiprintf_r+0x1e4>
 80286a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80286aa:	f04f 0901 	mov.w	r9, #1
 80286ae:	4623      	mov	r3, r4
 80286b0:	469a      	mov	sl, r3
 80286b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80286b6:	b10a      	cbz	r2, 80286bc <_svfiprintf_r+0x60>
 80286b8:	2a25      	cmp	r2, #37	@ 0x25
 80286ba:	d1f9      	bne.n	80286b0 <_svfiprintf_r+0x54>
 80286bc:	ebba 0b04 	subs.w	fp, sl, r4
 80286c0:	d00b      	beq.n	80286da <_svfiprintf_r+0x7e>
 80286c2:	465b      	mov	r3, fp
 80286c4:	4622      	mov	r2, r4
 80286c6:	4629      	mov	r1, r5
 80286c8:	4638      	mov	r0, r7
 80286ca:	f7ff ff6b 	bl	80285a4 <__ssputs_r>
 80286ce:	3001      	adds	r0, #1
 80286d0:	f000 80a7 	beq.w	8028822 <_svfiprintf_r+0x1c6>
 80286d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80286d6:	445a      	add	r2, fp
 80286d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80286da:	f89a 3000 	ldrb.w	r3, [sl]
 80286de:	2b00      	cmp	r3, #0
 80286e0:	f000 809f 	beq.w	8028822 <_svfiprintf_r+0x1c6>
 80286e4:	2300      	movs	r3, #0
 80286e6:	f04f 32ff 	mov.w	r2, #4294967295
 80286ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80286ee:	f10a 0a01 	add.w	sl, sl, #1
 80286f2:	9304      	str	r3, [sp, #16]
 80286f4:	9307      	str	r3, [sp, #28]
 80286f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80286fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80286fc:	4654      	mov	r4, sl
 80286fe:	2205      	movs	r2, #5
 8028700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028704:	484e      	ldr	r0, [pc, #312]	@ (8028840 <_svfiprintf_r+0x1e4>)
 8028706:	f7d7 fdb3 	bl	8000270 <memchr>
 802870a:	9a04      	ldr	r2, [sp, #16]
 802870c:	b9d8      	cbnz	r0, 8028746 <_svfiprintf_r+0xea>
 802870e:	06d0      	lsls	r0, r2, #27
 8028710:	bf44      	itt	mi
 8028712:	2320      	movmi	r3, #32
 8028714:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8028718:	0711      	lsls	r1, r2, #28
 802871a:	bf44      	itt	mi
 802871c:	232b      	movmi	r3, #43	@ 0x2b
 802871e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8028722:	f89a 3000 	ldrb.w	r3, [sl]
 8028726:	2b2a      	cmp	r3, #42	@ 0x2a
 8028728:	d015      	beq.n	8028756 <_svfiprintf_r+0xfa>
 802872a:	9a07      	ldr	r2, [sp, #28]
 802872c:	4654      	mov	r4, sl
 802872e:	2000      	movs	r0, #0
 8028730:	f04f 0c0a 	mov.w	ip, #10
 8028734:	4621      	mov	r1, r4
 8028736:	f811 3b01 	ldrb.w	r3, [r1], #1
 802873a:	3b30      	subs	r3, #48	@ 0x30
 802873c:	2b09      	cmp	r3, #9
 802873e:	d94b      	bls.n	80287d8 <_svfiprintf_r+0x17c>
 8028740:	b1b0      	cbz	r0, 8028770 <_svfiprintf_r+0x114>
 8028742:	9207      	str	r2, [sp, #28]
 8028744:	e014      	b.n	8028770 <_svfiprintf_r+0x114>
 8028746:	eba0 0308 	sub.w	r3, r0, r8
 802874a:	fa09 f303 	lsl.w	r3, r9, r3
 802874e:	4313      	orrs	r3, r2
 8028750:	9304      	str	r3, [sp, #16]
 8028752:	46a2      	mov	sl, r4
 8028754:	e7d2      	b.n	80286fc <_svfiprintf_r+0xa0>
 8028756:	9b03      	ldr	r3, [sp, #12]
 8028758:	1d19      	adds	r1, r3, #4
 802875a:	681b      	ldr	r3, [r3, #0]
 802875c:	9103      	str	r1, [sp, #12]
 802875e:	2b00      	cmp	r3, #0
 8028760:	bfbb      	ittet	lt
 8028762:	425b      	neglt	r3, r3
 8028764:	f042 0202 	orrlt.w	r2, r2, #2
 8028768:	9307      	strge	r3, [sp, #28]
 802876a:	9307      	strlt	r3, [sp, #28]
 802876c:	bfb8      	it	lt
 802876e:	9204      	strlt	r2, [sp, #16]
 8028770:	7823      	ldrb	r3, [r4, #0]
 8028772:	2b2e      	cmp	r3, #46	@ 0x2e
 8028774:	d10a      	bne.n	802878c <_svfiprintf_r+0x130>
 8028776:	7863      	ldrb	r3, [r4, #1]
 8028778:	2b2a      	cmp	r3, #42	@ 0x2a
 802877a:	d132      	bne.n	80287e2 <_svfiprintf_r+0x186>
 802877c:	9b03      	ldr	r3, [sp, #12]
 802877e:	1d1a      	adds	r2, r3, #4
 8028780:	681b      	ldr	r3, [r3, #0]
 8028782:	9203      	str	r2, [sp, #12]
 8028784:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8028788:	3402      	adds	r4, #2
 802878a:	9305      	str	r3, [sp, #20]
 802878c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8028850 <_svfiprintf_r+0x1f4>
 8028790:	7821      	ldrb	r1, [r4, #0]
 8028792:	2203      	movs	r2, #3
 8028794:	4650      	mov	r0, sl
 8028796:	f7d7 fd6b 	bl	8000270 <memchr>
 802879a:	b138      	cbz	r0, 80287ac <_svfiprintf_r+0x150>
 802879c:	9b04      	ldr	r3, [sp, #16]
 802879e:	eba0 000a 	sub.w	r0, r0, sl
 80287a2:	2240      	movs	r2, #64	@ 0x40
 80287a4:	4082      	lsls	r2, r0
 80287a6:	4313      	orrs	r3, r2
 80287a8:	3401      	adds	r4, #1
 80287aa:	9304      	str	r3, [sp, #16]
 80287ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80287b0:	4824      	ldr	r0, [pc, #144]	@ (8028844 <_svfiprintf_r+0x1e8>)
 80287b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80287b6:	2206      	movs	r2, #6
 80287b8:	f7d7 fd5a 	bl	8000270 <memchr>
 80287bc:	2800      	cmp	r0, #0
 80287be:	d036      	beq.n	802882e <_svfiprintf_r+0x1d2>
 80287c0:	4b21      	ldr	r3, [pc, #132]	@ (8028848 <_svfiprintf_r+0x1ec>)
 80287c2:	bb1b      	cbnz	r3, 802880c <_svfiprintf_r+0x1b0>
 80287c4:	9b03      	ldr	r3, [sp, #12]
 80287c6:	3307      	adds	r3, #7
 80287c8:	f023 0307 	bic.w	r3, r3, #7
 80287cc:	3308      	adds	r3, #8
 80287ce:	9303      	str	r3, [sp, #12]
 80287d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80287d2:	4433      	add	r3, r6
 80287d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80287d6:	e76a      	b.n	80286ae <_svfiprintf_r+0x52>
 80287d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80287dc:	460c      	mov	r4, r1
 80287de:	2001      	movs	r0, #1
 80287e0:	e7a8      	b.n	8028734 <_svfiprintf_r+0xd8>
 80287e2:	2300      	movs	r3, #0
 80287e4:	3401      	adds	r4, #1
 80287e6:	9305      	str	r3, [sp, #20]
 80287e8:	4619      	mov	r1, r3
 80287ea:	f04f 0c0a 	mov.w	ip, #10
 80287ee:	4620      	mov	r0, r4
 80287f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80287f4:	3a30      	subs	r2, #48	@ 0x30
 80287f6:	2a09      	cmp	r2, #9
 80287f8:	d903      	bls.n	8028802 <_svfiprintf_r+0x1a6>
 80287fa:	2b00      	cmp	r3, #0
 80287fc:	d0c6      	beq.n	802878c <_svfiprintf_r+0x130>
 80287fe:	9105      	str	r1, [sp, #20]
 8028800:	e7c4      	b.n	802878c <_svfiprintf_r+0x130>
 8028802:	fb0c 2101 	mla	r1, ip, r1, r2
 8028806:	4604      	mov	r4, r0
 8028808:	2301      	movs	r3, #1
 802880a:	e7f0      	b.n	80287ee <_svfiprintf_r+0x192>
 802880c:	ab03      	add	r3, sp, #12
 802880e:	9300      	str	r3, [sp, #0]
 8028810:	462a      	mov	r2, r5
 8028812:	4b0e      	ldr	r3, [pc, #56]	@ (802884c <_svfiprintf_r+0x1f0>)
 8028814:	a904      	add	r1, sp, #16
 8028816:	4638      	mov	r0, r7
 8028818:	f3af 8000 	nop.w
 802881c:	1c42      	adds	r2, r0, #1
 802881e:	4606      	mov	r6, r0
 8028820:	d1d6      	bne.n	80287d0 <_svfiprintf_r+0x174>
 8028822:	89ab      	ldrh	r3, [r5, #12]
 8028824:	065b      	lsls	r3, r3, #25
 8028826:	f53f af2d 	bmi.w	8028684 <_svfiprintf_r+0x28>
 802882a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802882c:	e72c      	b.n	8028688 <_svfiprintf_r+0x2c>
 802882e:	ab03      	add	r3, sp, #12
 8028830:	9300      	str	r3, [sp, #0]
 8028832:	462a      	mov	r2, r5
 8028834:	4b05      	ldr	r3, [pc, #20]	@ (802884c <_svfiprintf_r+0x1f0>)
 8028836:	a904      	add	r1, sp, #16
 8028838:	4638      	mov	r0, r7
 802883a:	f000 f9bb 	bl	8028bb4 <_printf_i>
 802883e:	e7ed      	b.n	802881c <_svfiprintf_r+0x1c0>
 8028840:	0802debf 	.word	0x0802debf
 8028844:	0802dec9 	.word	0x0802dec9
 8028848:	00000000 	.word	0x00000000
 802884c:	080285a5 	.word	0x080285a5
 8028850:	0802dec5 	.word	0x0802dec5

08028854 <__sfputc_r>:
 8028854:	6893      	ldr	r3, [r2, #8]
 8028856:	3b01      	subs	r3, #1
 8028858:	2b00      	cmp	r3, #0
 802885a:	b410      	push	{r4}
 802885c:	6093      	str	r3, [r2, #8]
 802885e:	da08      	bge.n	8028872 <__sfputc_r+0x1e>
 8028860:	6994      	ldr	r4, [r2, #24]
 8028862:	42a3      	cmp	r3, r4
 8028864:	db01      	blt.n	802886a <__sfputc_r+0x16>
 8028866:	290a      	cmp	r1, #10
 8028868:	d103      	bne.n	8028872 <__sfputc_r+0x1e>
 802886a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802886e:	f7ff bc29 	b.w	80280c4 <__swbuf_r>
 8028872:	6813      	ldr	r3, [r2, #0]
 8028874:	1c58      	adds	r0, r3, #1
 8028876:	6010      	str	r0, [r2, #0]
 8028878:	7019      	strb	r1, [r3, #0]
 802887a:	4608      	mov	r0, r1
 802887c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028880:	4770      	bx	lr

08028882 <__sfputs_r>:
 8028882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028884:	4606      	mov	r6, r0
 8028886:	460f      	mov	r7, r1
 8028888:	4614      	mov	r4, r2
 802888a:	18d5      	adds	r5, r2, r3
 802888c:	42ac      	cmp	r4, r5
 802888e:	d101      	bne.n	8028894 <__sfputs_r+0x12>
 8028890:	2000      	movs	r0, #0
 8028892:	e007      	b.n	80288a4 <__sfputs_r+0x22>
 8028894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028898:	463a      	mov	r2, r7
 802889a:	4630      	mov	r0, r6
 802889c:	f7ff ffda 	bl	8028854 <__sfputc_r>
 80288a0:	1c43      	adds	r3, r0, #1
 80288a2:	d1f3      	bne.n	802888c <__sfputs_r+0xa>
 80288a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080288a8 <_vfiprintf_r>:
 80288a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80288ac:	460d      	mov	r5, r1
 80288ae:	b09d      	sub	sp, #116	@ 0x74
 80288b0:	4614      	mov	r4, r2
 80288b2:	4698      	mov	r8, r3
 80288b4:	4606      	mov	r6, r0
 80288b6:	b118      	cbz	r0, 80288c0 <_vfiprintf_r+0x18>
 80288b8:	6a03      	ldr	r3, [r0, #32]
 80288ba:	b90b      	cbnz	r3, 80288c0 <_vfiprintf_r+0x18>
 80288bc:	f7ff faaa 	bl	8027e14 <__sinit>
 80288c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80288c2:	07d9      	lsls	r1, r3, #31
 80288c4:	d405      	bmi.n	80288d2 <_vfiprintf_r+0x2a>
 80288c6:	89ab      	ldrh	r3, [r5, #12]
 80288c8:	059a      	lsls	r2, r3, #22
 80288ca:	d402      	bmi.n	80288d2 <_vfiprintf_r+0x2a>
 80288cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80288ce:	f7ff fdd4 	bl	802847a <__retarget_lock_acquire_recursive>
 80288d2:	89ab      	ldrh	r3, [r5, #12]
 80288d4:	071b      	lsls	r3, r3, #28
 80288d6:	d501      	bpl.n	80288dc <_vfiprintf_r+0x34>
 80288d8:	692b      	ldr	r3, [r5, #16]
 80288da:	b99b      	cbnz	r3, 8028904 <_vfiprintf_r+0x5c>
 80288dc:	4629      	mov	r1, r5
 80288de:	4630      	mov	r0, r6
 80288e0:	f7ff fc2e 	bl	8028140 <__swsetup_r>
 80288e4:	b170      	cbz	r0, 8028904 <_vfiprintf_r+0x5c>
 80288e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80288e8:	07dc      	lsls	r4, r3, #31
 80288ea:	d504      	bpl.n	80288f6 <_vfiprintf_r+0x4e>
 80288ec:	f04f 30ff 	mov.w	r0, #4294967295
 80288f0:	b01d      	add	sp, #116	@ 0x74
 80288f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80288f6:	89ab      	ldrh	r3, [r5, #12]
 80288f8:	0598      	lsls	r0, r3, #22
 80288fa:	d4f7      	bmi.n	80288ec <_vfiprintf_r+0x44>
 80288fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80288fe:	f7ff fdbd 	bl	802847c <__retarget_lock_release_recursive>
 8028902:	e7f3      	b.n	80288ec <_vfiprintf_r+0x44>
 8028904:	2300      	movs	r3, #0
 8028906:	9309      	str	r3, [sp, #36]	@ 0x24
 8028908:	2320      	movs	r3, #32
 802890a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802890e:	f8cd 800c 	str.w	r8, [sp, #12]
 8028912:	2330      	movs	r3, #48	@ 0x30
 8028914:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8028ac4 <_vfiprintf_r+0x21c>
 8028918:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802891c:	f04f 0901 	mov.w	r9, #1
 8028920:	4623      	mov	r3, r4
 8028922:	469a      	mov	sl, r3
 8028924:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028928:	b10a      	cbz	r2, 802892e <_vfiprintf_r+0x86>
 802892a:	2a25      	cmp	r2, #37	@ 0x25
 802892c:	d1f9      	bne.n	8028922 <_vfiprintf_r+0x7a>
 802892e:	ebba 0b04 	subs.w	fp, sl, r4
 8028932:	d00b      	beq.n	802894c <_vfiprintf_r+0xa4>
 8028934:	465b      	mov	r3, fp
 8028936:	4622      	mov	r2, r4
 8028938:	4629      	mov	r1, r5
 802893a:	4630      	mov	r0, r6
 802893c:	f7ff ffa1 	bl	8028882 <__sfputs_r>
 8028940:	3001      	adds	r0, #1
 8028942:	f000 80a7 	beq.w	8028a94 <_vfiprintf_r+0x1ec>
 8028946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028948:	445a      	add	r2, fp
 802894a:	9209      	str	r2, [sp, #36]	@ 0x24
 802894c:	f89a 3000 	ldrb.w	r3, [sl]
 8028950:	2b00      	cmp	r3, #0
 8028952:	f000 809f 	beq.w	8028a94 <_vfiprintf_r+0x1ec>
 8028956:	2300      	movs	r3, #0
 8028958:	f04f 32ff 	mov.w	r2, #4294967295
 802895c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028960:	f10a 0a01 	add.w	sl, sl, #1
 8028964:	9304      	str	r3, [sp, #16]
 8028966:	9307      	str	r3, [sp, #28]
 8028968:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802896c:	931a      	str	r3, [sp, #104]	@ 0x68
 802896e:	4654      	mov	r4, sl
 8028970:	2205      	movs	r2, #5
 8028972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028976:	4853      	ldr	r0, [pc, #332]	@ (8028ac4 <_vfiprintf_r+0x21c>)
 8028978:	f7d7 fc7a 	bl	8000270 <memchr>
 802897c:	9a04      	ldr	r2, [sp, #16]
 802897e:	b9d8      	cbnz	r0, 80289b8 <_vfiprintf_r+0x110>
 8028980:	06d1      	lsls	r1, r2, #27
 8028982:	bf44      	itt	mi
 8028984:	2320      	movmi	r3, #32
 8028986:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802898a:	0713      	lsls	r3, r2, #28
 802898c:	bf44      	itt	mi
 802898e:	232b      	movmi	r3, #43	@ 0x2b
 8028990:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8028994:	f89a 3000 	ldrb.w	r3, [sl]
 8028998:	2b2a      	cmp	r3, #42	@ 0x2a
 802899a:	d015      	beq.n	80289c8 <_vfiprintf_r+0x120>
 802899c:	9a07      	ldr	r2, [sp, #28]
 802899e:	4654      	mov	r4, sl
 80289a0:	2000      	movs	r0, #0
 80289a2:	f04f 0c0a 	mov.w	ip, #10
 80289a6:	4621      	mov	r1, r4
 80289a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80289ac:	3b30      	subs	r3, #48	@ 0x30
 80289ae:	2b09      	cmp	r3, #9
 80289b0:	d94b      	bls.n	8028a4a <_vfiprintf_r+0x1a2>
 80289b2:	b1b0      	cbz	r0, 80289e2 <_vfiprintf_r+0x13a>
 80289b4:	9207      	str	r2, [sp, #28]
 80289b6:	e014      	b.n	80289e2 <_vfiprintf_r+0x13a>
 80289b8:	eba0 0308 	sub.w	r3, r0, r8
 80289bc:	fa09 f303 	lsl.w	r3, r9, r3
 80289c0:	4313      	orrs	r3, r2
 80289c2:	9304      	str	r3, [sp, #16]
 80289c4:	46a2      	mov	sl, r4
 80289c6:	e7d2      	b.n	802896e <_vfiprintf_r+0xc6>
 80289c8:	9b03      	ldr	r3, [sp, #12]
 80289ca:	1d19      	adds	r1, r3, #4
 80289cc:	681b      	ldr	r3, [r3, #0]
 80289ce:	9103      	str	r1, [sp, #12]
 80289d0:	2b00      	cmp	r3, #0
 80289d2:	bfbb      	ittet	lt
 80289d4:	425b      	neglt	r3, r3
 80289d6:	f042 0202 	orrlt.w	r2, r2, #2
 80289da:	9307      	strge	r3, [sp, #28]
 80289dc:	9307      	strlt	r3, [sp, #28]
 80289de:	bfb8      	it	lt
 80289e0:	9204      	strlt	r2, [sp, #16]
 80289e2:	7823      	ldrb	r3, [r4, #0]
 80289e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80289e6:	d10a      	bne.n	80289fe <_vfiprintf_r+0x156>
 80289e8:	7863      	ldrb	r3, [r4, #1]
 80289ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80289ec:	d132      	bne.n	8028a54 <_vfiprintf_r+0x1ac>
 80289ee:	9b03      	ldr	r3, [sp, #12]
 80289f0:	1d1a      	adds	r2, r3, #4
 80289f2:	681b      	ldr	r3, [r3, #0]
 80289f4:	9203      	str	r2, [sp, #12]
 80289f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80289fa:	3402      	adds	r4, #2
 80289fc:	9305      	str	r3, [sp, #20]
 80289fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8028ad4 <_vfiprintf_r+0x22c>
 8028a02:	7821      	ldrb	r1, [r4, #0]
 8028a04:	2203      	movs	r2, #3
 8028a06:	4650      	mov	r0, sl
 8028a08:	f7d7 fc32 	bl	8000270 <memchr>
 8028a0c:	b138      	cbz	r0, 8028a1e <_vfiprintf_r+0x176>
 8028a0e:	9b04      	ldr	r3, [sp, #16]
 8028a10:	eba0 000a 	sub.w	r0, r0, sl
 8028a14:	2240      	movs	r2, #64	@ 0x40
 8028a16:	4082      	lsls	r2, r0
 8028a18:	4313      	orrs	r3, r2
 8028a1a:	3401      	adds	r4, #1
 8028a1c:	9304      	str	r3, [sp, #16]
 8028a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028a22:	4829      	ldr	r0, [pc, #164]	@ (8028ac8 <_vfiprintf_r+0x220>)
 8028a24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8028a28:	2206      	movs	r2, #6
 8028a2a:	f7d7 fc21 	bl	8000270 <memchr>
 8028a2e:	2800      	cmp	r0, #0
 8028a30:	d03f      	beq.n	8028ab2 <_vfiprintf_r+0x20a>
 8028a32:	4b26      	ldr	r3, [pc, #152]	@ (8028acc <_vfiprintf_r+0x224>)
 8028a34:	bb1b      	cbnz	r3, 8028a7e <_vfiprintf_r+0x1d6>
 8028a36:	9b03      	ldr	r3, [sp, #12]
 8028a38:	3307      	adds	r3, #7
 8028a3a:	f023 0307 	bic.w	r3, r3, #7
 8028a3e:	3308      	adds	r3, #8
 8028a40:	9303      	str	r3, [sp, #12]
 8028a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028a44:	443b      	add	r3, r7
 8028a46:	9309      	str	r3, [sp, #36]	@ 0x24
 8028a48:	e76a      	b.n	8028920 <_vfiprintf_r+0x78>
 8028a4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8028a4e:	460c      	mov	r4, r1
 8028a50:	2001      	movs	r0, #1
 8028a52:	e7a8      	b.n	80289a6 <_vfiprintf_r+0xfe>
 8028a54:	2300      	movs	r3, #0
 8028a56:	3401      	adds	r4, #1
 8028a58:	9305      	str	r3, [sp, #20]
 8028a5a:	4619      	mov	r1, r3
 8028a5c:	f04f 0c0a 	mov.w	ip, #10
 8028a60:	4620      	mov	r0, r4
 8028a62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028a66:	3a30      	subs	r2, #48	@ 0x30
 8028a68:	2a09      	cmp	r2, #9
 8028a6a:	d903      	bls.n	8028a74 <_vfiprintf_r+0x1cc>
 8028a6c:	2b00      	cmp	r3, #0
 8028a6e:	d0c6      	beq.n	80289fe <_vfiprintf_r+0x156>
 8028a70:	9105      	str	r1, [sp, #20]
 8028a72:	e7c4      	b.n	80289fe <_vfiprintf_r+0x156>
 8028a74:	fb0c 2101 	mla	r1, ip, r1, r2
 8028a78:	4604      	mov	r4, r0
 8028a7a:	2301      	movs	r3, #1
 8028a7c:	e7f0      	b.n	8028a60 <_vfiprintf_r+0x1b8>
 8028a7e:	ab03      	add	r3, sp, #12
 8028a80:	9300      	str	r3, [sp, #0]
 8028a82:	462a      	mov	r2, r5
 8028a84:	4b12      	ldr	r3, [pc, #72]	@ (8028ad0 <_vfiprintf_r+0x228>)
 8028a86:	a904      	add	r1, sp, #16
 8028a88:	4630      	mov	r0, r6
 8028a8a:	f3af 8000 	nop.w
 8028a8e:	4607      	mov	r7, r0
 8028a90:	1c78      	adds	r0, r7, #1
 8028a92:	d1d6      	bne.n	8028a42 <_vfiprintf_r+0x19a>
 8028a94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8028a96:	07d9      	lsls	r1, r3, #31
 8028a98:	d405      	bmi.n	8028aa6 <_vfiprintf_r+0x1fe>
 8028a9a:	89ab      	ldrh	r3, [r5, #12]
 8028a9c:	059a      	lsls	r2, r3, #22
 8028a9e:	d402      	bmi.n	8028aa6 <_vfiprintf_r+0x1fe>
 8028aa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8028aa2:	f7ff fceb 	bl	802847c <__retarget_lock_release_recursive>
 8028aa6:	89ab      	ldrh	r3, [r5, #12]
 8028aa8:	065b      	lsls	r3, r3, #25
 8028aaa:	f53f af1f 	bmi.w	80288ec <_vfiprintf_r+0x44>
 8028aae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8028ab0:	e71e      	b.n	80288f0 <_vfiprintf_r+0x48>
 8028ab2:	ab03      	add	r3, sp, #12
 8028ab4:	9300      	str	r3, [sp, #0]
 8028ab6:	462a      	mov	r2, r5
 8028ab8:	4b05      	ldr	r3, [pc, #20]	@ (8028ad0 <_vfiprintf_r+0x228>)
 8028aba:	a904      	add	r1, sp, #16
 8028abc:	4630      	mov	r0, r6
 8028abe:	f000 f879 	bl	8028bb4 <_printf_i>
 8028ac2:	e7e4      	b.n	8028a8e <_vfiprintf_r+0x1e6>
 8028ac4:	0802debf 	.word	0x0802debf
 8028ac8:	0802dec9 	.word	0x0802dec9
 8028acc:	00000000 	.word	0x00000000
 8028ad0:	08028883 	.word	0x08028883
 8028ad4:	0802dec5 	.word	0x0802dec5

08028ad8 <_printf_common>:
 8028ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028adc:	4616      	mov	r6, r2
 8028ade:	4698      	mov	r8, r3
 8028ae0:	688a      	ldr	r2, [r1, #8]
 8028ae2:	690b      	ldr	r3, [r1, #16]
 8028ae4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8028ae8:	4293      	cmp	r3, r2
 8028aea:	bfb8      	it	lt
 8028aec:	4613      	movlt	r3, r2
 8028aee:	6033      	str	r3, [r6, #0]
 8028af0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8028af4:	4607      	mov	r7, r0
 8028af6:	460c      	mov	r4, r1
 8028af8:	b10a      	cbz	r2, 8028afe <_printf_common+0x26>
 8028afa:	3301      	adds	r3, #1
 8028afc:	6033      	str	r3, [r6, #0]
 8028afe:	6823      	ldr	r3, [r4, #0]
 8028b00:	0699      	lsls	r1, r3, #26
 8028b02:	bf42      	ittt	mi
 8028b04:	6833      	ldrmi	r3, [r6, #0]
 8028b06:	3302      	addmi	r3, #2
 8028b08:	6033      	strmi	r3, [r6, #0]
 8028b0a:	6825      	ldr	r5, [r4, #0]
 8028b0c:	f015 0506 	ands.w	r5, r5, #6
 8028b10:	d106      	bne.n	8028b20 <_printf_common+0x48>
 8028b12:	f104 0a19 	add.w	sl, r4, #25
 8028b16:	68e3      	ldr	r3, [r4, #12]
 8028b18:	6832      	ldr	r2, [r6, #0]
 8028b1a:	1a9b      	subs	r3, r3, r2
 8028b1c:	42ab      	cmp	r3, r5
 8028b1e:	dc26      	bgt.n	8028b6e <_printf_common+0x96>
 8028b20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8028b24:	6822      	ldr	r2, [r4, #0]
 8028b26:	3b00      	subs	r3, #0
 8028b28:	bf18      	it	ne
 8028b2a:	2301      	movne	r3, #1
 8028b2c:	0692      	lsls	r2, r2, #26
 8028b2e:	d42b      	bmi.n	8028b88 <_printf_common+0xb0>
 8028b30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8028b34:	4641      	mov	r1, r8
 8028b36:	4638      	mov	r0, r7
 8028b38:	47c8      	blx	r9
 8028b3a:	3001      	adds	r0, #1
 8028b3c:	d01e      	beq.n	8028b7c <_printf_common+0xa4>
 8028b3e:	6823      	ldr	r3, [r4, #0]
 8028b40:	6922      	ldr	r2, [r4, #16]
 8028b42:	f003 0306 	and.w	r3, r3, #6
 8028b46:	2b04      	cmp	r3, #4
 8028b48:	bf02      	ittt	eq
 8028b4a:	68e5      	ldreq	r5, [r4, #12]
 8028b4c:	6833      	ldreq	r3, [r6, #0]
 8028b4e:	1aed      	subeq	r5, r5, r3
 8028b50:	68a3      	ldr	r3, [r4, #8]
 8028b52:	bf0c      	ite	eq
 8028b54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8028b58:	2500      	movne	r5, #0
 8028b5a:	4293      	cmp	r3, r2
 8028b5c:	bfc4      	itt	gt
 8028b5e:	1a9b      	subgt	r3, r3, r2
 8028b60:	18ed      	addgt	r5, r5, r3
 8028b62:	2600      	movs	r6, #0
 8028b64:	341a      	adds	r4, #26
 8028b66:	42b5      	cmp	r5, r6
 8028b68:	d11a      	bne.n	8028ba0 <_printf_common+0xc8>
 8028b6a:	2000      	movs	r0, #0
 8028b6c:	e008      	b.n	8028b80 <_printf_common+0xa8>
 8028b6e:	2301      	movs	r3, #1
 8028b70:	4652      	mov	r2, sl
 8028b72:	4641      	mov	r1, r8
 8028b74:	4638      	mov	r0, r7
 8028b76:	47c8      	blx	r9
 8028b78:	3001      	adds	r0, #1
 8028b7a:	d103      	bne.n	8028b84 <_printf_common+0xac>
 8028b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8028b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028b84:	3501      	adds	r5, #1
 8028b86:	e7c6      	b.n	8028b16 <_printf_common+0x3e>
 8028b88:	18e1      	adds	r1, r4, r3
 8028b8a:	1c5a      	adds	r2, r3, #1
 8028b8c:	2030      	movs	r0, #48	@ 0x30
 8028b8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8028b92:	4422      	add	r2, r4
 8028b94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8028b98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8028b9c:	3302      	adds	r3, #2
 8028b9e:	e7c7      	b.n	8028b30 <_printf_common+0x58>
 8028ba0:	2301      	movs	r3, #1
 8028ba2:	4622      	mov	r2, r4
 8028ba4:	4641      	mov	r1, r8
 8028ba6:	4638      	mov	r0, r7
 8028ba8:	47c8      	blx	r9
 8028baa:	3001      	adds	r0, #1
 8028bac:	d0e6      	beq.n	8028b7c <_printf_common+0xa4>
 8028bae:	3601      	adds	r6, #1
 8028bb0:	e7d9      	b.n	8028b66 <_printf_common+0x8e>
	...

08028bb4 <_printf_i>:
 8028bb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8028bb8:	7e0f      	ldrb	r7, [r1, #24]
 8028bba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8028bbc:	2f78      	cmp	r7, #120	@ 0x78
 8028bbe:	4691      	mov	r9, r2
 8028bc0:	4680      	mov	r8, r0
 8028bc2:	460c      	mov	r4, r1
 8028bc4:	469a      	mov	sl, r3
 8028bc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8028bca:	d807      	bhi.n	8028bdc <_printf_i+0x28>
 8028bcc:	2f62      	cmp	r7, #98	@ 0x62
 8028bce:	d80a      	bhi.n	8028be6 <_printf_i+0x32>
 8028bd0:	2f00      	cmp	r7, #0
 8028bd2:	f000 80d1 	beq.w	8028d78 <_printf_i+0x1c4>
 8028bd6:	2f58      	cmp	r7, #88	@ 0x58
 8028bd8:	f000 80b8 	beq.w	8028d4c <_printf_i+0x198>
 8028bdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8028be0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8028be4:	e03a      	b.n	8028c5c <_printf_i+0xa8>
 8028be6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8028bea:	2b15      	cmp	r3, #21
 8028bec:	d8f6      	bhi.n	8028bdc <_printf_i+0x28>
 8028bee:	a101      	add	r1, pc, #4	@ (adr r1, 8028bf4 <_printf_i+0x40>)
 8028bf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8028bf4:	08028c4d 	.word	0x08028c4d
 8028bf8:	08028c61 	.word	0x08028c61
 8028bfc:	08028bdd 	.word	0x08028bdd
 8028c00:	08028bdd 	.word	0x08028bdd
 8028c04:	08028bdd 	.word	0x08028bdd
 8028c08:	08028bdd 	.word	0x08028bdd
 8028c0c:	08028c61 	.word	0x08028c61
 8028c10:	08028bdd 	.word	0x08028bdd
 8028c14:	08028bdd 	.word	0x08028bdd
 8028c18:	08028bdd 	.word	0x08028bdd
 8028c1c:	08028bdd 	.word	0x08028bdd
 8028c20:	08028d5f 	.word	0x08028d5f
 8028c24:	08028c8b 	.word	0x08028c8b
 8028c28:	08028d19 	.word	0x08028d19
 8028c2c:	08028bdd 	.word	0x08028bdd
 8028c30:	08028bdd 	.word	0x08028bdd
 8028c34:	08028d81 	.word	0x08028d81
 8028c38:	08028bdd 	.word	0x08028bdd
 8028c3c:	08028c8b 	.word	0x08028c8b
 8028c40:	08028bdd 	.word	0x08028bdd
 8028c44:	08028bdd 	.word	0x08028bdd
 8028c48:	08028d21 	.word	0x08028d21
 8028c4c:	6833      	ldr	r3, [r6, #0]
 8028c4e:	1d1a      	adds	r2, r3, #4
 8028c50:	681b      	ldr	r3, [r3, #0]
 8028c52:	6032      	str	r2, [r6, #0]
 8028c54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8028c58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8028c5c:	2301      	movs	r3, #1
 8028c5e:	e09c      	b.n	8028d9a <_printf_i+0x1e6>
 8028c60:	6833      	ldr	r3, [r6, #0]
 8028c62:	6820      	ldr	r0, [r4, #0]
 8028c64:	1d19      	adds	r1, r3, #4
 8028c66:	6031      	str	r1, [r6, #0]
 8028c68:	0606      	lsls	r6, r0, #24
 8028c6a:	d501      	bpl.n	8028c70 <_printf_i+0xbc>
 8028c6c:	681d      	ldr	r5, [r3, #0]
 8028c6e:	e003      	b.n	8028c78 <_printf_i+0xc4>
 8028c70:	0645      	lsls	r5, r0, #25
 8028c72:	d5fb      	bpl.n	8028c6c <_printf_i+0xb8>
 8028c74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8028c78:	2d00      	cmp	r5, #0
 8028c7a:	da03      	bge.n	8028c84 <_printf_i+0xd0>
 8028c7c:	232d      	movs	r3, #45	@ 0x2d
 8028c7e:	426d      	negs	r5, r5
 8028c80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8028c84:	4858      	ldr	r0, [pc, #352]	@ (8028de8 <_printf_i+0x234>)
 8028c86:	230a      	movs	r3, #10
 8028c88:	e011      	b.n	8028cae <_printf_i+0xfa>
 8028c8a:	6821      	ldr	r1, [r4, #0]
 8028c8c:	6833      	ldr	r3, [r6, #0]
 8028c8e:	0608      	lsls	r0, r1, #24
 8028c90:	f853 5b04 	ldr.w	r5, [r3], #4
 8028c94:	d402      	bmi.n	8028c9c <_printf_i+0xe8>
 8028c96:	0649      	lsls	r1, r1, #25
 8028c98:	bf48      	it	mi
 8028c9a:	b2ad      	uxthmi	r5, r5
 8028c9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8028c9e:	4852      	ldr	r0, [pc, #328]	@ (8028de8 <_printf_i+0x234>)
 8028ca0:	6033      	str	r3, [r6, #0]
 8028ca2:	bf14      	ite	ne
 8028ca4:	230a      	movne	r3, #10
 8028ca6:	2308      	moveq	r3, #8
 8028ca8:	2100      	movs	r1, #0
 8028caa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8028cae:	6866      	ldr	r6, [r4, #4]
 8028cb0:	60a6      	str	r6, [r4, #8]
 8028cb2:	2e00      	cmp	r6, #0
 8028cb4:	db05      	blt.n	8028cc2 <_printf_i+0x10e>
 8028cb6:	6821      	ldr	r1, [r4, #0]
 8028cb8:	432e      	orrs	r6, r5
 8028cba:	f021 0104 	bic.w	r1, r1, #4
 8028cbe:	6021      	str	r1, [r4, #0]
 8028cc0:	d04b      	beq.n	8028d5a <_printf_i+0x1a6>
 8028cc2:	4616      	mov	r6, r2
 8028cc4:	fbb5 f1f3 	udiv	r1, r5, r3
 8028cc8:	fb03 5711 	mls	r7, r3, r1, r5
 8028ccc:	5dc7      	ldrb	r7, [r0, r7]
 8028cce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8028cd2:	462f      	mov	r7, r5
 8028cd4:	42bb      	cmp	r3, r7
 8028cd6:	460d      	mov	r5, r1
 8028cd8:	d9f4      	bls.n	8028cc4 <_printf_i+0x110>
 8028cda:	2b08      	cmp	r3, #8
 8028cdc:	d10b      	bne.n	8028cf6 <_printf_i+0x142>
 8028cde:	6823      	ldr	r3, [r4, #0]
 8028ce0:	07df      	lsls	r7, r3, #31
 8028ce2:	d508      	bpl.n	8028cf6 <_printf_i+0x142>
 8028ce4:	6923      	ldr	r3, [r4, #16]
 8028ce6:	6861      	ldr	r1, [r4, #4]
 8028ce8:	4299      	cmp	r1, r3
 8028cea:	bfde      	ittt	le
 8028cec:	2330      	movle	r3, #48	@ 0x30
 8028cee:	f806 3c01 	strble.w	r3, [r6, #-1]
 8028cf2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8028cf6:	1b92      	subs	r2, r2, r6
 8028cf8:	6122      	str	r2, [r4, #16]
 8028cfa:	f8cd a000 	str.w	sl, [sp]
 8028cfe:	464b      	mov	r3, r9
 8028d00:	aa03      	add	r2, sp, #12
 8028d02:	4621      	mov	r1, r4
 8028d04:	4640      	mov	r0, r8
 8028d06:	f7ff fee7 	bl	8028ad8 <_printf_common>
 8028d0a:	3001      	adds	r0, #1
 8028d0c:	d14a      	bne.n	8028da4 <_printf_i+0x1f0>
 8028d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8028d12:	b004      	add	sp, #16
 8028d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028d18:	6823      	ldr	r3, [r4, #0]
 8028d1a:	f043 0320 	orr.w	r3, r3, #32
 8028d1e:	6023      	str	r3, [r4, #0]
 8028d20:	4832      	ldr	r0, [pc, #200]	@ (8028dec <_printf_i+0x238>)
 8028d22:	2778      	movs	r7, #120	@ 0x78
 8028d24:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8028d28:	6823      	ldr	r3, [r4, #0]
 8028d2a:	6831      	ldr	r1, [r6, #0]
 8028d2c:	061f      	lsls	r7, r3, #24
 8028d2e:	f851 5b04 	ldr.w	r5, [r1], #4
 8028d32:	d402      	bmi.n	8028d3a <_printf_i+0x186>
 8028d34:	065f      	lsls	r7, r3, #25
 8028d36:	bf48      	it	mi
 8028d38:	b2ad      	uxthmi	r5, r5
 8028d3a:	6031      	str	r1, [r6, #0]
 8028d3c:	07d9      	lsls	r1, r3, #31
 8028d3e:	bf44      	itt	mi
 8028d40:	f043 0320 	orrmi.w	r3, r3, #32
 8028d44:	6023      	strmi	r3, [r4, #0]
 8028d46:	b11d      	cbz	r5, 8028d50 <_printf_i+0x19c>
 8028d48:	2310      	movs	r3, #16
 8028d4a:	e7ad      	b.n	8028ca8 <_printf_i+0xf4>
 8028d4c:	4826      	ldr	r0, [pc, #152]	@ (8028de8 <_printf_i+0x234>)
 8028d4e:	e7e9      	b.n	8028d24 <_printf_i+0x170>
 8028d50:	6823      	ldr	r3, [r4, #0]
 8028d52:	f023 0320 	bic.w	r3, r3, #32
 8028d56:	6023      	str	r3, [r4, #0]
 8028d58:	e7f6      	b.n	8028d48 <_printf_i+0x194>
 8028d5a:	4616      	mov	r6, r2
 8028d5c:	e7bd      	b.n	8028cda <_printf_i+0x126>
 8028d5e:	6833      	ldr	r3, [r6, #0]
 8028d60:	6825      	ldr	r5, [r4, #0]
 8028d62:	6961      	ldr	r1, [r4, #20]
 8028d64:	1d18      	adds	r0, r3, #4
 8028d66:	6030      	str	r0, [r6, #0]
 8028d68:	062e      	lsls	r6, r5, #24
 8028d6a:	681b      	ldr	r3, [r3, #0]
 8028d6c:	d501      	bpl.n	8028d72 <_printf_i+0x1be>
 8028d6e:	6019      	str	r1, [r3, #0]
 8028d70:	e002      	b.n	8028d78 <_printf_i+0x1c4>
 8028d72:	0668      	lsls	r0, r5, #25
 8028d74:	d5fb      	bpl.n	8028d6e <_printf_i+0x1ba>
 8028d76:	8019      	strh	r1, [r3, #0]
 8028d78:	2300      	movs	r3, #0
 8028d7a:	6123      	str	r3, [r4, #16]
 8028d7c:	4616      	mov	r6, r2
 8028d7e:	e7bc      	b.n	8028cfa <_printf_i+0x146>
 8028d80:	6833      	ldr	r3, [r6, #0]
 8028d82:	1d1a      	adds	r2, r3, #4
 8028d84:	6032      	str	r2, [r6, #0]
 8028d86:	681e      	ldr	r6, [r3, #0]
 8028d88:	6862      	ldr	r2, [r4, #4]
 8028d8a:	2100      	movs	r1, #0
 8028d8c:	4630      	mov	r0, r6
 8028d8e:	f7d7 fa6f 	bl	8000270 <memchr>
 8028d92:	b108      	cbz	r0, 8028d98 <_printf_i+0x1e4>
 8028d94:	1b80      	subs	r0, r0, r6
 8028d96:	6060      	str	r0, [r4, #4]
 8028d98:	6863      	ldr	r3, [r4, #4]
 8028d9a:	6123      	str	r3, [r4, #16]
 8028d9c:	2300      	movs	r3, #0
 8028d9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8028da2:	e7aa      	b.n	8028cfa <_printf_i+0x146>
 8028da4:	6923      	ldr	r3, [r4, #16]
 8028da6:	4632      	mov	r2, r6
 8028da8:	4649      	mov	r1, r9
 8028daa:	4640      	mov	r0, r8
 8028dac:	47d0      	blx	sl
 8028dae:	3001      	adds	r0, #1
 8028db0:	d0ad      	beq.n	8028d0e <_printf_i+0x15a>
 8028db2:	6823      	ldr	r3, [r4, #0]
 8028db4:	079b      	lsls	r3, r3, #30
 8028db6:	d413      	bmi.n	8028de0 <_printf_i+0x22c>
 8028db8:	68e0      	ldr	r0, [r4, #12]
 8028dba:	9b03      	ldr	r3, [sp, #12]
 8028dbc:	4298      	cmp	r0, r3
 8028dbe:	bfb8      	it	lt
 8028dc0:	4618      	movlt	r0, r3
 8028dc2:	e7a6      	b.n	8028d12 <_printf_i+0x15e>
 8028dc4:	2301      	movs	r3, #1
 8028dc6:	4632      	mov	r2, r6
 8028dc8:	4649      	mov	r1, r9
 8028dca:	4640      	mov	r0, r8
 8028dcc:	47d0      	blx	sl
 8028dce:	3001      	adds	r0, #1
 8028dd0:	d09d      	beq.n	8028d0e <_printf_i+0x15a>
 8028dd2:	3501      	adds	r5, #1
 8028dd4:	68e3      	ldr	r3, [r4, #12]
 8028dd6:	9903      	ldr	r1, [sp, #12]
 8028dd8:	1a5b      	subs	r3, r3, r1
 8028dda:	42ab      	cmp	r3, r5
 8028ddc:	dcf2      	bgt.n	8028dc4 <_printf_i+0x210>
 8028dde:	e7eb      	b.n	8028db8 <_printf_i+0x204>
 8028de0:	2500      	movs	r5, #0
 8028de2:	f104 0619 	add.w	r6, r4, #25
 8028de6:	e7f5      	b.n	8028dd4 <_printf_i+0x220>
 8028de8:	0802ded0 	.word	0x0802ded0
 8028dec:	0802dee1 	.word	0x0802dee1

08028df0 <__sflush_r>:
 8028df0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8028df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028df8:	0716      	lsls	r6, r2, #28
 8028dfa:	4605      	mov	r5, r0
 8028dfc:	460c      	mov	r4, r1
 8028dfe:	d454      	bmi.n	8028eaa <__sflush_r+0xba>
 8028e00:	684b      	ldr	r3, [r1, #4]
 8028e02:	2b00      	cmp	r3, #0
 8028e04:	dc02      	bgt.n	8028e0c <__sflush_r+0x1c>
 8028e06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8028e08:	2b00      	cmp	r3, #0
 8028e0a:	dd48      	ble.n	8028e9e <__sflush_r+0xae>
 8028e0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8028e0e:	2e00      	cmp	r6, #0
 8028e10:	d045      	beq.n	8028e9e <__sflush_r+0xae>
 8028e12:	2300      	movs	r3, #0
 8028e14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8028e18:	682f      	ldr	r7, [r5, #0]
 8028e1a:	6a21      	ldr	r1, [r4, #32]
 8028e1c:	602b      	str	r3, [r5, #0]
 8028e1e:	d030      	beq.n	8028e82 <__sflush_r+0x92>
 8028e20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8028e22:	89a3      	ldrh	r3, [r4, #12]
 8028e24:	0759      	lsls	r1, r3, #29
 8028e26:	d505      	bpl.n	8028e34 <__sflush_r+0x44>
 8028e28:	6863      	ldr	r3, [r4, #4]
 8028e2a:	1ad2      	subs	r2, r2, r3
 8028e2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8028e2e:	b10b      	cbz	r3, 8028e34 <__sflush_r+0x44>
 8028e30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8028e32:	1ad2      	subs	r2, r2, r3
 8028e34:	2300      	movs	r3, #0
 8028e36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8028e38:	6a21      	ldr	r1, [r4, #32]
 8028e3a:	4628      	mov	r0, r5
 8028e3c:	47b0      	blx	r6
 8028e3e:	1c43      	adds	r3, r0, #1
 8028e40:	89a3      	ldrh	r3, [r4, #12]
 8028e42:	d106      	bne.n	8028e52 <__sflush_r+0x62>
 8028e44:	6829      	ldr	r1, [r5, #0]
 8028e46:	291d      	cmp	r1, #29
 8028e48:	d82b      	bhi.n	8028ea2 <__sflush_r+0xb2>
 8028e4a:	4a2a      	ldr	r2, [pc, #168]	@ (8028ef4 <__sflush_r+0x104>)
 8028e4c:	40ca      	lsrs	r2, r1
 8028e4e:	07d6      	lsls	r6, r2, #31
 8028e50:	d527      	bpl.n	8028ea2 <__sflush_r+0xb2>
 8028e52:	2200      	movs	r2, #0
 8028e54:	6062      	str	r2, [r4, #4]
 8028e56:	04d9      	lsls	r1, r3, #19
 8028e58:	6922      	ldr	r2, [r4, #16]
 8028e5a:	6022      	str	r2, [r4, #0]
 8028e5c:	d504      	bpl.n	8028e68 <__sflush_r+0x78>
 8028e5e:	1c42      	adds	r2, r0, #1
 8028e60:	d101      	bne.n	8028e66 <__sflush_r+0x76>
 8028e62:	682b      	ldr	r3, [r5, #0]
 8028e64:	b903      	cbnz	r3, 8028e68 <__sflush_r+0x78>
 8028e66:	6560      	str	r0, [r4, #84]	@ 0x54
 8028e68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028e6a:	602f      	str	r7, [r5, #0]
 8028e6c:	b1b9      	cbz	r1, 8028e9e <__sflush_r+0xae>
 8028e6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8028e72:	4299      	cmp	r1, r3
 8028e74:	d002      	beq.n	8028e7c <__sflush_r+0x8c>
 8028e76:	4628      	mov	r0, r5
 8028e78:	f7ff fb42 	bl	8028500 <_free_r>
 8028e7c:	2300      	movs	r3, #0
 8028e7e:	6363      	str	r3, [r4, #52]	@ 0x34
 8028e80:	e00d      	b.n	8028e9e <__sflush_r+0xae>
 8028e82:	2301      	movs	r3, #1
 8028e84:	4628      	mov	r0, r5
 8028e86:	47b0      	blx	r6
 8028e88:	4602      	mov	r2, r0
 8028e8a:	1c50      	adds	r0, r2, #1
 8028e8c:	d1c9      	bne.n	8028e22 <__sflush_r+0x32>
 8028e8e:	682b      	ldr	r3, [r5, #0]
 8028e90:	2b00      	cmp	r3, #0
 8028e92:	d0c6      	beq.n	8028e22 <__sflush_r+0x32>
 8028e94:	2b1d      	cmp	r3, #29
 8028e96:	d001      	beq.n	8028e9c <__sflush_r+0xac>
 8028e98:	2b16      	cmp	r3, #22
 8028e9a:	d11e      	bne.n	8028eda <__sflush_r+0xea>
 8028e9c:	602f      	str	r7, [r5, #0]
 8028e9e:	2000      	movs	r0, #0
 8028ea0:	e022      	b.n	8028ee8 <__sflush_r+0xf8>
 8028ea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028ea6:	b21b      	sxth	r3, r3
 8028ea8:	e01b      	b.n	8028ee2 <__sflush_r+0xf2>
 8028eaa:	690f      	ldr	r7, [r1, #16]
 8028eac:	2f00      	cmp	r7, #0
 8028eae:	d0f6      	beq.n	8028e9e <__sflush_r+0xae>
 8028eb0:	0793      	lsls	r3, r2, #30
 8028eb2:	680e      	ldr	r6, [r1, #0]
 8028eb4:	bf08      	it	eq
 8028eb6:	694b      	ldreq	r3, [r1, #20]
 8028eb8:	600f      	str	r7, [r1, #0]
 8028eba:	bf18      	it	ne
 8028ebc:	2300      	movne	r3, #0
 8028ebe:	eba6 0807 	sub.w	r8, r6, r7
 8028ec2:	608b      	str	r3, [r1, #8]
 8028ec4:	f1b8 0f00 	cmp.w	r8, #0
 8028ec8:	dde9      	ble.n	8028e9e <__sflush_r+0xae>
 8028eca:	6a21      	ldr	r1, [r4, #32]
 8028ecc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8028ece:	4643      	mov	r3, r8
 8028ed0:	463a      	mov	r2, r7
 8028ed2:	4628      	mov	r0, r5
 8028ed4:	47b0      	blx	r6
 8028ed6:	2800      	cmp	r0, #0
 8028ed8:	dc08      	bgt.n	8028eec <__sflush_r+0xfc>
 8028eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028ede:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028ee2:	81a3      	strh	r3, [r4, #12]
 8028ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8028ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028eec:	4407      	add	r7, r0
 8028eee:	eba8 0800 	sub.w	r8, r8, r0
 8028ef2:	e7e7      	b.n	8028ec4 <__sflush_r+0xd4>
 8028ef4:	20400001 	.word	0x20400001

08028ef8 <_fflush_r>:
 8028ef8:	b538      	push	{r3, r4, r5, lr}
 8028efa:	690b      	ldr	r3, [r1, #16]
 8028efc:	4605      	mov	r5, r0
 8028efe:	460c      	mov	r4, r1
 8028f00:	b913      	cbnz	r3, 8028f08 <_fflush_r+0x10>
 8028f02:	2500      	movs	r5, #0
 8028f04:	4628      	mov	r0, r5
 8028f06:	bd38      	pop	{r3, r4, r5, pc}
 8028f08:	b118      	cbz	r0, 8028f12 <_fflush_r+0x1a>
 8028f0a:	6a03      	ldr	r3, [r0, #32]
 8028f0c:	b90b      	cbnz	r3, 8028f12 <_fflush_r+0x1a>
 8028f0e:	f7fe ff81 	bl	8027e14 <__sinit>
 8028f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028f16:	2b00      	cmp	r3, #0
 8028f18:	d0f3      	beq.n	8028f02 <_fflush_r+0xa>
 8028f1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8028f1c:	07d0      	lsls	r0, r2, #31
 8028f1e:	d404      	bmi.n	8028f2a <_fflush_r+0x32>
 8028f20:	0599      	lsls	r1, r3, #22
 8028f22:	d402      	bmi.n	8028f2a <_fflush_r+0x32>
 8028f24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028f26:	f7ff faa8 	bl	802847a <__retarget_lock_acquire_recursive>
 8028f2a:	4628      	mov	r0, r5
 8028f2c:	4621      	mov	r1, r4
 8028f2e:	f7ff ff5f 	bl	8028df0 <__sflush_r>
 8028f32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8028f34:	07da      	lsls	r2, r3, #31
 8028f36:	4605      	mov	r5, r0
 8028f38:	d4e4      	bmi.n	8028f04 <_fflush_r+0xc>
 8028f3a:	89a3      	ldrh	r3, [r4, #12]
 8028f3c:	059b      	lsls	r3, r3, #22
 8028f3e:	d4e1      	bmi.n	8028f04 <_fflush_r+0xc>
 8028f40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028f42:	f7ff fa9b 	bl	802847c <__retarget_lock_release_recursive>
 8028f46:	e7dd      	b.n	8028f04 <_fflush_r+0xc>

08028f48 <fiprintf>:
 8028f48:	b40e      	push	{r1, r2, r3}
 8028f4a:	b503      	push	{r0, r1, lr}
 8028f4c:	4601      	mov	r1, r0
 8028f4e:	ab03      	add	r3, sp, #12
 8028f50:	4805      	ldr	r0, [pc, #20]	@ (8028f68 <fiprintf+0x20>)
 8028f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8028f56:	6800      	ldr	r0, [r0, #0]
 8028f58:	9301      	str	r3, [sp, #4]
 8028f5a:	f7ff fca5 	bl	80288a8 <_vfiprintf_r>
 8028f5e:	b002      	add	sp, #8
 8028f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8028f64:	b003      	add	sp, #12
 8028f66:	4770      	bx	lr
 8028f68:	200007a8 	.word	0x200007a8

08028f6c <__swhatbuf_r>:
 8028f6c:	b570      	push	{r4, r5, r6, lr}
 8028f6e:	460c      	mov	r4, r1
 8028f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028f74:	2900      	cmp	r1, #0
 8028f76:	b096      	sub	sp, #88	@ 0x58
 8028f78:	4615      	mov	r5, r2
 8028f7a:	461e      	mov	r6, r3
 8028f7c:	da0d      	bge.n	8028f9a <__swhatbuf_r+0x2e>
 8028f7e:	89a3      	ldrh	r3, [r4, #12]
 8028f80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8028f84:	f04f 0100 	mov.w	r1, #0
 8028f88:	bf14      	ite	ne
 8028f8a:	2340      	movne	r3, #64	@ 0x40
 8028f8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8028f90:	2000      	movs	r0, #0
 8028f92:	6031      	str	r1, [r6, #0]
 8028f94:	602b      	str	r3, [r5, #0]
 8028f96:	b016      	add	sp, #88	@ 0x58
 8028f98:	bd70      	pop	{r4, r5, r6, pc}
 8028f9a:	466a      	mov	r2, sp
 8028f9c:	f000 f848 	bl	8029030 <_fstat_r>
 8028fa0:	2800      	cmp	r0, #0
 8028fa2:	dbec      	blt.n	8028f7e <__swhatbuf_r+0x12>
 8028fa4:	9901      	ldr	r1, [sp, #4]
 8028fa6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8028faa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8028fae:	4259      	negs	r1, r3
 8028fb0:	4159      	adcs	r1, r3
 8028fb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8028fb6:	e7eb      	b.n	8028f90 <__swhatbuf_r+0x24>

08028fb8 <__smakebuf_r>:
 8028fb8:	898b      	ldrh	r3, [r1, #12]
 8028fba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028fbc:	079d      	lsls	r5, r3, #30
 8028fbe:	4606      	mov	r6, r0
 8028fc0:	460c      	mov	r4, r1
 8028fc2:	d507      	bpl.n	8028fd4 <__smakebuf_r+0x1c>
 8028fc4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8028fc8:	6023      	str	r3, [r4, #0]
 8028fca:	6123      	str	r3, [r4, #16]
 8028fcc:	2301      	movs	r3, #1
 8028fce:	6163      	str	r3, [r4, #20]
 8028fd0:	b003      	add	sp, #12
 8028fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028fd4:	ab01      	add	r3, sp, #4
 8028fd6:	466a      	mov	r2, sp
 8028fd8:	f7ff ffc8 	bl	8028f6c <__swhatbuf_r>
 8028fdc:	9f00      	ldr	r7, [sp, #0]
 8028fde:	4605      	mov	r5, r0
 8028fe0:	4639      	mov	r1, r7
 8028fe2:	4630      	mov	r0, r6
 8028fe4:	f7fe fc60 	bl	80278a8 <_malloc_r>
 8028fe8:	b948      	cbnz	r0, 8028ffe <__smakebuf_r+0x46>
 8028fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028fee:	059a      	lsls	r2, r3, #22
 8028ff0:	d4ee      	bmi.n	8028fd0 <__smakebuf_r+0x18>
 8028ff2:	f023 0303 	bic.w	r3, r3, #3
 8028ff6:	f043 0302 	orr.w	r3, r3, #2
 8028ffa:	81a3      	strh	r3, [r4, #12]
 8028ffc:	e7e2      	b.n	8028fc4 <__smakebuf_r+0xc>
 8028ffe:	89a3      	ldrh	r3, [r4, #12]
 8029000:	6020      	str	r0, [r4, #0]
 8029002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8029006:	81a3      	strh	r3, [r4, #12]
 8029008:	9b01      	ldr	r3, [sp, #4]
 802900a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802900e:	b15b      	cbz	r3, 8029028 <__smakebuf_r+0x70>
 8029010:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029014:	4630      	mov	r0, r6
 8029016:	f000 f81d 	bl	8029054 <_isatty_r>
 802901a:	b128      	cbz	r0, 8029028 <__smakebuf_r+0x70>
 802901c:	89a3      	ldrh	r3, [r4, #12]
 802901e:	f023 0303 	bic.w	r3, r3, #3
 8029022:	f043 0301 	orr.w	r3, r3, #1
 8029026:	81a3      	strh	r3, [r4, #12]
 8029028:	89a3      	ldrh	r3, [r4, #12]
 802902a:	431d      	orrs	r5, r3
 802902c:	81a5      	strh	r5, [r4, #12]
 802902e:	e7cf      	b.n	8028fd0 <__smakebuf_r+0x18>

08029030 <_fstat_r>:
 8029030:	b538      	push	{r3, r4, r5, lr}
 8029032:	4d07      	ldr	r5, [pc, #28]	@ (8029050 <_fstat_r+0x20>)
 8029034:	2300      	movs	r3, #0
 8029036:	4604      	mov	r4, r0
 8029038:	4608      	mov	r0, r1
 802903a:	4611      	mov	r1, r2
 802903c:	602b      	str	r3, [r5, #0]
 802903e:	f7d8 ff63 	bl	8001f08 <_fstat>
 8029042:	1c43      	adds	r3, r0, #1
 8029044:	d102      	bne.n	802904c <_fstat_r+0x1c>
 8029046:	682b      	ldr	r3, [r5, #0]
 8029048:	b103      	cbz	r3, 802904c <_fstat_r+0x1c>
 802904a:	6023      	str	r3, [r4, #0]
 802904c:	bd38      	pop	{r3, r4, r5, pc}
 802904e:	bf00      	nop
 8029050:	20015124 	.word	0x20015124

08029054 <_isatty_r>:
 8029054:	b538      	push	{r3, r4, r5, lr}
 8029056:	4d06      	ldr	r5, [pc, #24]	@ (8029070 <_isatty_r+0x1c>)
 8029058:	2300      	movs	r3, #0
 802905a:	4604      	mov	r4, r0
 802905c:	4608      	mov	r0, r1
 802905e:	602b      	str	r3, [r5, #0]
 8029060:	f7d8 ff62 	bl	8001f28 <_isatty>
 8029064:	1c43      	adds	r3, r0, #1
 8029066:	d102      	bne.n	802906e <_isatty_r+0x1a>
 8029068:	682b      	ldr	r3, [r5, #0]
 802906a:	b103      	cbz	r3, 802906e <_isatty_r+0x1a>
 802906c:	6023      	str	r3, [r4, #0]
 802906e:	bd38      	pop	{r3, r4, r5, pc}
 8029070:	20015124 	.word	0x20015124

08029074 <abort>:
 8029074:	b508      	push	{r3, lr}
 8029076:	2006      	movs	r0, #6
 8029078:	f000 f82c 	bl	80290d4 <raise>
 802907c:	2001      	movs	r0, #1
 802907e:	f7d8 fef3 	bl	8001e68 <_exit>

08029082 <_raise_r>:
 8029082:	291f      	cmp	r1, #31
 8029084:	b538      	push	{r3, r4, r5, lr}
 8029086:	4605      	mov	r5, r0
 8029088:	460c      	mov	r4, r1
 802908a:	d904      	bls.n	8029096 <_raise_r+0x14>
 802908c:	2316      	movs	r3, #22
 802908e:	6003      	str	r3, [r0, #0]
 8029090:	f04f 30ff 	mov.w	r0, #4294967295
 8029094:	bd38      	pop	{r3, r4, r5, pc}
 8029096:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8029098:	b112      	cbz	r2, 80290a0 <_raise_r+0x1e>
 802909a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802909e:	b94b      	cbnz	r3, 80290b4 <_raise_r+0x32>
 80290a0:	4628      	mov	r0, r5
 80290a2:	f000 f831 	bl	8029108 <_getpid_r>
 80290a6:	4622      	mov	r2, r4
 80290a8:	4601      	mov	r1, r0
 80290aa:	4628      	mov	r0, r5
 80290ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80290b0:	f000 b818 	b.w	80290e4 <_kill_r>
 80290b4:	2b01      	cmp	r3, #1
 80290b6:	d00a      	beq.n	80290ce <_raise_r+0x4c>
 80290b8:	1c59      	adds	r1, r3, #1
 80290ba:	d103      	bne.n	80290c4 <_raise_r+0x42>
 80290bc:	2316      	movs	r3, #22
 80290be:	6003      	str	r3, [r0, #0]
 80290c0:	2001      	movs	r0, #1
 80290c2:	e7e7      	b.n	8029094 <_raise_r+0x12>
 80290c4:	2100      	movs	r1, #0
 80290c6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80290ca:	4620      	mov	r0, r4
 80290cc:	4798      	blx	r3
 80290ce:	2000      	movs	r0, #0
 80290d0:	e7e0      	b.n	8029094 <_raise_r+0x12>
	...

080290d4 <raise>:
 80290d4:	4b02      	ldr	r3, [pc, #8]	@ (80290e0 <raise+0xc>)
 80290d6:	4601      	mov	r1, r0
 80290d8:	6818      	ldr	r0, [r3, #0]
 80290da:	f7ff bfd2 	b.w	8029082 <_raise_r>
 80290de:	bf00      	nop
 80290e0:	200007a8 	.word	0x200007a8

080290e4 <_kill_r>:
 80290e4:	b538      	push	{r3, r4, r5, lr}
 80290e6:	4d07      	ldr	r5, [pc, #28]	@ (8029104 <_kill_r+0x20>)
 80290e8:	2300      	movs	r3, #0
 80290ea:	4604      	mov	r4, r0
 80290ec:	4608      	mov	r0, r1
 80290ee:	4611      	mov	r1, r2
 80290f0:	602b      	str	r3, [r5, #0]
 80290f2:	f7d8 fea7 	bl	8001e44 <_kill>
 80290f6:	1c43      	adds	r3, r0, #1
 80290f8:	d102      	bne.n	8029100 <_kill_r+0x1c>
 80290fa:	682b      	ldr	r3, [r5, #0]
 80290fc:	b103      	cbz	r3, 8029100 <_kill_r+0x1c>
 80290fe:	6023      	str	r3, [r4, #0]
 8029100:	bd38      	pop	{r3, r4, r5, pc}
 8029102:	bf00      	nop
 8029104:	20015124 	.word	0x20015124

08029108 <_getpid_r>:
 8029108:	f7d8 be94 	b.w	8001e34 <_getpid>

0802910c <fmax>:
 802910c:	b508      	push	{r3, lr}
 802910e:	ed2d 8b04 	vpush	{d8-d9}
 8029112:	eeb0 8b40 	vmov.f64	d8, d0
 8029116:	eeb0 9b41 	vmov.f64	d9, d1
 802911a:	f000 f831 	bl	8029180 <__fpclassifyd>
 802911e:	b930      	cbnz	r0, 802912e <fmax+0x22>
 8029120:	eeb0 8b49 	vmov.f64	d8, d9
 8029124:	eeb0 0b48 	vmov.f64	d0, d8
 8029128:	ecbd 8b04 	vpop	{d8-d9}
 802912c:	bd08      	pop	{r3, pc}
 802912e:	eeb0 0b49 	vmov.f64	d0, d9
 8029132:	f000 f825 	bl	8029180 <__fpclassifyd>
 8029136:	2800      	cmp	r0, #0
 8029138:	d0f4      	beq.n	8029124 <fmax+0x18>
 802913a:	eeb4 8bc9 	vcmpe.f64	d8, d9
 802913e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029142:	dded      	ble.n	8029120 <fmax+0x14>
 8029144:	e7ee      	b.n	8029124 <fmax+0x18>

08029146 <fmin>:
 8029146:	b508      	push	{r3, lr}
 8029148:	ed2d 8b04 	vpush	{d8-d9}
 802914c:	eeb0 8b40 	vmov.f64	d8, d0
 8029150:	eeb0 9b41 	vmov.f64	d9, d1
 8029154:	f000 f814 	bl	8029180 <__fpclassifyd>
 8029158:	b930      	cbnz	r0, 8029168 <fmin+0x22>
 802915a:	eeb0 8b49 	vmov.f64	d8, d9
 802915e:	eeb0 0b48 	vmov.f64	d0, d8
 8029162:	ecbd 8b04 	vpop	{d8-d9}
 8029166:	bd08      	pop	{r3, pc}
 8029168:	eeb0 0b49 	vmov.f64	d0, d9
 802916c:	f000 f808 	bl	8029180 <__fpclassifyd>
 8029170:	2800      	cmp	r0, #0
 8029172:	d0f4      	beq.n	802915e <fmin+0x18>
 8029174:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8029178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802917c:	d5ed      	bpl.n	802915a <fmin+0x14>
 802917e:	e7ee      	b.n	802915e <fmin+0x18>

08029180 <__fpclassifyd>:
 8029180:	ec51 0b10 	vmov	r0, r1, d0
 8029184:	460b      	mov	r3, r1
 8029186:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 802918a:	b510      	push	{r4, lr}
 802918c:	d104      	bne.n	8029198 <__fpclassifyd+0x18>
 802918e:	2800      	cmp	r0, #0
 8029190:	bf0c      	ite	eq
 8029192:	2002      	moveq	r0, #2
 8029194:	2003      	movne	r0, #3
 8029196:	bd10      	pop	{r4, pc}
 8029198:	4a09      	ldr	r2, [pc, #36]	@ (80291c0 <__fpclassifyd+0x40>)
 802919a:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 802919e:	4294      	cmp	r4, r2
 80291a0:	d908      	bls.n	80291b4 <__fpclassifyd+0x34>
 80291a2:	4a08      	ldr	r2, [pc, #32]	@ (80291c4 <__fpclassifyd+0x44>)
 80291a4:	4213      	tst	r3, r2
 80291a6:	d007      	beq.n	80291b8 <__fpclassifyd+0x38>
 80291a8:	4291      	cmp	r1, r2
 80291aa:	d107      	bne.n	80291bc <__fpclassifyd+0x3c>
 80291ac:	fab0 f080 	clz	r0, r0
 80291b0:	0940      	lsrs	r0, r0, #5
 80291b2:	e7f0      	b.n	8029196 <__fpclassifyd+0x16>
 80291b4:	2004      	movs	r0, #4
 80291b6:	e7ee      	b.n	8029196 <__fpclassifyd+0x16>
 80291b8:	2003      	movs	r0, #3
 80291ba:	e7ec      	b.n	8029196 <__fpclassifyd+0x16>
 80291bc:	2000      	movs	r0, #0
 80291be:	e7ea      	b.n	8029196 <__fpclassifyd+0x16>
 80291c0:	7fdfffff 	.word	0x7fdfffff
 80291c4:	7ff00000 	.word	0x7ff00000

080291c8 <_init>:
 80291c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80291ca:	bf00      	nop
 80291cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80291ce:	bc08      	pop	{r3}
 80291d0:	469e      	mov	lr, r3
 80291d2:	4770      	bx	lr

080291d4 <_fini>:
 80291d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80291d6:	bf00      	nop
 80291d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80291da:	bc08      	pop	{r3}
 80291dc:	469e      	mov	lr, r3
 80291de:	4770      	bx	lr
