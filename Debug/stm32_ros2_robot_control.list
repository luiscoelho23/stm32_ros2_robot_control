
stm32_ros2_robot_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000264b8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004a6c  080266b8  080266b8  000276b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b124  0802b124  0002d2f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802b124  0802b124  0002c124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b12c  0802b12c  0002d2f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0802b12c  0802b12c  0002c12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802b138  0802b138  0002c138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b8  20000000  0802b13c  0002d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001b8  0802b2f4  0002d1b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000258  0802b394  0002d258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000149ac  200002f8  0802b434  0002d2f8  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  20014ca4  0802b434  0002dca4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002d2f8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00038669  00000000  00000000  0002d326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000086b3  00000000  00000000  0006598f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002718  00000000  00000000  0006e048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001f18  00000000  00000000  00070760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002927d  00000000  00000000  00072678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000e24c  00000000  00000000  0009b8f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000076  00000000  00000000  000a9b41  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000aed0  00000000  00000000  000a9bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  000b4a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002f8 	.word	0x200002f8
 800021c:	00000000 	.word	0x00000000
 8000220:	080266a0 	.word	0x080266a0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002fc 	.word	0x200002fc
 800023c:	080266a0 	.word	0x080266a0

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9d3 	b.w	80006d8 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b988 	b.w	80006d8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	468e      	mov	lr, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	4688      	mov	r8, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d962      	bls.n	80004bc <__udivmoddi4+0xdc>
 80003f6:	fab2 f682 	clz	r6, r2
 80003fa:	b14e      	cbz	r6, 8000410 <__udivmoddi4+0x30>
 80003fc:	f1c6 0320 	rsb	r3, r6, #32
 8000400:	fa01 f806 	lsl.w	r8, r1, r6
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	40b7      	lsls	r7, r6
 800040a:	ea43 0808 	orr.w	r8, r3, r8
 800040e:	40b4      	lsls	r4, r6
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	fa1f fc87 	uxth.w	ip, r7
 8000418:	fbb8 f1fe 	udiv	r1, r8, lr
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fb01 f20c 	mul.w	r2, r1, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0x62>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f101 30ff 	add.w	r0, r1, #4294967295
 8000434:	f080 80ea 	bcs.w	800060c <__udivmoddi4+0x22c>
 8000438:	429a      	cmp	r2, r3
 800043a:	f240 80e7 	bls.w	800060c <__udivmoddi4+0x22c>
 800043e:	3902      	subs	r1, #2
 8000440:	443b      	add	r3, r7
 8000442:	1a9a      	subs	r2, r3, r2
 8000444:	b2a3      	uxth	r3, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000452:	fb00 fc0c 	mul.w	ip, r0, ip
 8000456:	459c      	cmp	ip, r3
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x8e>
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000460:	f080 80d6 	bcs.w	8000610 <__udivmoddi4+0x230>
 8000464:	459c      	cmp	ip, r3
 8000466:	f240 80d3 	bls.w	8000610 <__udivmoddi4+0x230>
 800046a:	443b      	add	r3, r7
 800046c:	3802      	subs	r0, #2
 800046e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000472:	eba3 030c 	sub.w	r3, r3, ip
 8000476:	2100      	movs	r1, #0
 8000478:	b11d      	cbz	r5, 8000482 <__udivmoddi4+0xa2>
 800047a:	40f3      	lsrs	r3, r6
 800047c:	2200      	movs	r2, #0
 800047e:	e9c5 3200 	strd	r3, r2, [r5]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d905      	bls.n	8000496 <__udivmoddi4+0xb6>
 800048a:	b10d      	cbz	r5, 8000490 <__udivmoddi4+0xb0>
 800048c:	e9c5 0100 	strd	r0, r1, [r5]
 8000490:	2100      	movs	r1, #0
 8000492:	4608      	mov	r0, r1
 8000494:	e7f5      	b.n	8000482 <__udivmoddi4+0xa2>
 8000496:	fab3 f183 	clz	r1, r3
 800049a:	2900      	cmp	r1, #0
 800049c:	d146      	bne.n	800052c <__udivmoddi4+0x14c>
 800049e:	4573      	cmp	r3, lr
 80004a0:	d302      	bcc.n	80004a8 <__udivmoddi4+0xc8>
 80004a2:	4282      	cmp	r2, r0
 80004a4:	f200 8105 	bhi.w	80006b2 <__udivmoddi4+0x2d2>
 80004a8:	1a84      	subs	r4, r0, r2
 80004aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80004ae:	2001      	movs	r0, #1
 80004b0:	4690      	mov	r8, r2
 80004b2:	2d00      	cmp	r5, #0
 80004b4:	d0e5      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004b6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ba:	e7e2      	b.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	2a00      	cmp	r2, #0
 80004be:	f000 8090 	beq.w	80005e2 <__udivmoddi4+0x202>
 80004c2:	fab2 f682 	clz	r6, r2
 80004c6:	2e00      	cmp	r6, #0
 80004c8:	f040 80a4 	bne.w	8000614 <__udivmoddi4+0x234>
 80004cc:	1a8a      	subs	r2, r1, r2
 80004ce:	0c03      	lsrs	r3, r0, #16
 80004d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d4:	b280      	uxth	r0, r0
 80004d6:	b2bc      	uxth	r4, r7
 80004d8:	2101      	movs	r1, #1
 80004da:	fbb2 fcfe 	udiv	ip, r2, lr
 80004de:	fb0e 221c 	mls	r2, lr, ip, r2
 80004e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004e6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d907      	bls.n	80004fe <__udivmoddi4+0x11e>
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x11c>
 80004f6:	429a      	cmp	r2, r3
 80004f8:	f200 80e0 	bhi.w	80006bc <__udivmoddi4+0x2dc>
 80004fc:	46c4      	mov	ip, r8
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	fbb3 f2fe 	udiv	r2, r3, lr
 8000504:	fb0e 3312 	mls	r3, lr, r2, r3
 8000508:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800050c:	fb02 f404 	mul.w	r4, r2, r4
 8000510:	429c      	cmp	r4, r3
 8000512:	d907      	bls.n	8000524 <__udivmoddi4+0x144>
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	f102 30ff 	add.w	r0, r2, #4294967295
 800051a:	d202      	bcs.n	8000522 <__udivmoddi4+0x142>
 800051c:	429c      	cmp	r4, r3
 800051e:	f200 80ca 	bhi.w	80006b6 <__udivmoddi4+0x2d6>
 8000522:	4602      	mov	r2, r0
 8000524:	1b1b      	subs	r3, r3, r4
 8000526:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800052a:	e7a5      	b.n	8000478 <__udivmoddi4+0x98>
 800052c:	f1c1 0620 	rsb	r6, r1, #32
 8000530:	408b      	lsls	r3, r1
 8000532:	fa22 f706 	lsr.w	r7, r2, r6
 8000536:	431f      	orrs	r7, r3
 8000538:	fa0e f401 	lsl.w	r4, lr, r1
 800053c:	fa20 f306 	lsr.w	r3, r0, r6
 8000540:	fa2e fe06 	lsr.w	lr, lr, r6
 8000544:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000548:	4323      	orrs	r3, r4
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	fa1f fc87 	uxth.w	ip, r7
 8000552:	fbbe f0f9 	udiv	r0, lr, r9
 8000556:	0c1c      	lsrs	r4, r3, #16
 8000558:	fb09 ee10 	mls	lr, r9, r0, lr
 800055c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000560:	fb00 fe0c 	mul.w	lr, r0, ip
 8000564:	45a6      	cmp	lr, r4
 8000566:	fa02 f201 	lsl.w	r2, r2, r1
 800056a:	d909      	bls.n	8000580 <__udivmoddi4+0x1a0>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000572:	f080 809c 	bcs.w	80006ae <__udivmoddi4+0x2ce>
 8000576:	45a6      	cmp	lr, r4
 8000578:	f240 8099 	bls.w	80006ae <__udivmoddi4+0x2ce>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	eba4 040e 	sub.w	r4, r4, lr
 8000584:	fa1f fe83 	uxth.w	lr, r3
 8000588:	fbb4 f3f9 	udiv	r3, r4, r9
 800058c:	fb09 4413 	mls	r4, r9, r3, r4
 8000590:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000594:	fb03 fc0c 	mul.w	ip, r3, ip
 8000598:	45a4      	cmp	ip, r4
 800059a:	d908      	bls.n	80005ae <__udivmoddi4+0x1ce>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f103 3eff 	add.w	lr, r3, #4294967295
 80005a2:	f080 8082 	bcs.w	80006aa <__udivmoddi4+0x2ca>
 80005a6:	45a4      	cmp	ip, r4
 80005a8:	d97f      	bls.n	80006aa <__udivmoddi4+0x2ca>
 80005aa:	3b02      	subs	r3, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005b2:	eba4 040c 	sub.w	r4, r4, ip
 80005b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ba:	4564      	cmp	r4, ip
 80005bc:	4673      	mov	r3, lr
 80005be:	46e1      	mov	r9, ip
 80005c0:	d362      	bcc.n	8000688 <__udivmoddi4+0x2a8>
 80005c2:	d05f      	beq.n	8000684 <__udivmoddi4+0x2a4>
 80005c4:	b15d      	cbz	r5, 80005de <__udivmoddi4+0x1fe>
 80005c6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ca:	eb64 0409 	sbc.w	r4, r4, r9
 80005ce:	fa04 f606 	lsl.w	r6, r4, r6
 80005d2:	fa22 f301 	lsr.w	r3, r2, r1
 80005d6:	431e      	orrs	r6, r3
 80005d8:	40cc      	lsrs	r4, r1
 80005da:	e9c5 6400 	strd	r6, r4, [r5]
 80005de:	2100      	movs	r1, #0
 80005e0:	e74f      	b.n	8000482 <__udivmoddi4+0xa2>
 80005e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005e6:	0c01      	lsrs	r1, r0, #16
 80005e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005ec:	b280      	uxth	r0, r0
 80005ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005f2:	463b      	mov	r3, r7
 80005f4:	4638      	mov	r0, r7
 80005f6:	463c      	mov	r4, r7
 80005f8:	46b8      	mov	r8, r7
 80005fa:	46be      	mov	lr, r7
 80005fc:	2620      	movs	r6, #32
 80005fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000602:	eba2 0208 	sub.w	r2, r2, r8
 8000606:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800060a:	e766      	b.n	80004da <__udivmoddi4+0xfa>
 800060c:	4601      	mov	r1, r0
 800060e:	e718      	b.n	8000442 <__udivmoddi4+0x62>
 8000610:	4610      	mov	r0, r2
 8000612:	e72c      	b.n	800046e <__udivmoddi4+0x8e>
 8000614:	f1c6 0220 	rsb	r2, r6, #32
 8000618:	fa2e f302 	lsr.w	r3, lr, r2
 800061c:	40b7      	lsls	r7, r6
 800061e:	40b1      	lsls	r1, r6
 8000620:	fa20 f202 	lsr.w	r2, r0, r2
 8000624:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000628:	430a      	orrs	r2, r1
 800062a:	fbb3 f8fe 	udiv	r8, r3, lr
 800062e:	b2bc      	uxth	r4, r7
 8000630:	fb0e 3318 	mls	r3, lr, r8, r3
 8000634:	0c11      	lsrs	r1, r2, #16
 8000636:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800063a:	fb08 f904 	mul.w	r9, r8, r4
 800063e:	40b0      	lsls	r0, r6
 8000640:	4589      	cmp	r9, r1
 8000642:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000646:	b280      	uxth	r0, r0
 8000648:	d93e      	bls.n	80006c8 <__udivmoddi4+0x2e8>
 800064a:	1879      	adds	r1, r7, r1
 800064c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000650:	d201      	bcs.n	8000656 <__udivmoddi4+0x276>
 8000652:	4589      	cmp	r9, r1
 8000654:	d81f      	bhi.n	8000696 <__udivmoddi4+0x2b6>
 8000656:	eba1 0109 	sub.w	r1, r1, r9
 800065a:	fbb1 f9fe 	udiv	r9, r1, lr
 800065e:	fb09 f804 	mul.w	r8, r9, r4
 8000662:	fb0e 1119 	mls	r1, lr, r9, r1
 8000666:	b292      	uxth	r2, r2
 8000668:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800066c:	4542      	cmp	r2, r8
 800066e:	d229      	bcs.n	80006c4 <__udivmoddi4+0x2e4>
 8000670:	18ba      	adds	r2, r7, r2
 8000672:	f109 31ff 	add.w	r1, r9, #4294967295
 8000676:	d2c4      	bcs.n	8000602 <__udivmoddi4+0x222>
 8000678:	4542      	cmp	r2, r8
 800067a:	d2c2      	bcs.n	8000602 <__udivmoddi4+0x222>
 800067c:	f1a9 0102 	sub.w	r1, r9, #2
 8000680:	443a      	add	r2, r7
 8000682:	e7be      	b.n	8000602 <__udivmoddi4+0x222>
 8000684:	45f0      	cmp	r8, lr
 8000686:	d29d      	bcs.n	80005c4 <__udivmoddi4+0x1e4>
 8000688:	ebbe 0302 	subs.w	r3, lr, r2
 800068c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000690:	3801      	subs	r0, #1
 8000692:	46e1      	mov	r9, ip
 8000694:	e796      	b.n	80005c4 <__udivmoddi4+0x1e4>
 8000696:	eba7 0909 	sub.w	r9, r7, r9
 800069a:	4449      	add	r1, r9
 800069c:	f1a8 0c02 	sub.w	ip, r8, #2
 80006a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a4:	fb09 f804 	mul.w	r8, r9, r4
 80006a8:	e7db      	b.n	8000662 <__udivmoddi4+0x282>
 80006aa:	4673      	mov	r3, lr
 80006ac:	e77f      	b.n	80005ae <__udivmoddi4+0x1ce>
 80006ae:	4650      	mov	r0, sl
 80006b0:	e766      	b.n	8000580 <__udivmoddi4+0x1a0>
 80006b2:	4608      	mov	r0, r1
 80006b4:	e6fd      	b.n	80004b2 <__udivmoddi4+0xd2>
 80006b6:	443b      	add	r3, r7
 80006b8:	3a02      	subs	r2, #2
 80006ba:	e733      	b.n	8000524 <__udivmoddi4+0x144>
 80006bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006c0:	443b      	add	r3, r7
 80006c2:	e71c      	b.n	80004fe <__udivmoddi4+0x11e>
 80006c4:	4649      	mov	r1, r9
 80006c6:	e79c      	b.n	8000602 <__udivmoddi4+0x222>
 80006c8:	eba1 0109 	sub.w	r1, r1, r9
 80006cc:	46c4      	mov	ip, r8
 80006ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d2:	fb09 f804 	mul.w	r8, r9, r4
 80006d6:	e7c4      	b.n	8000662 <__udivmoddi4+0x282>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	0000      	movs	r0, r0
	...

080006e0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80006e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80006e4:	b086      	sub	sp, #24
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80006ec:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80006f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80006f6:	a320      	add	r3, pc, #128	@ (adr r3, 8000778 <UTILS_NanosecondsToTimespec+0x98>)
 80006f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006fc:	f7ff fe08 	bl	8000310 <__aeabi_ldivmod>
 8000700:	4602      	mov	r2, r0
 8000702:	460b      	mov	r3, r1
 8000704:	6879      	ldr	r1, [r7, #4]
 8000706:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800070a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800070e:	a31a      	add	r3, pc, #104	@ (adr r3, 8000778 <UTILS_NanosecondsToTimespec+0x98>)
 8000710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000714:	f7ff fdfc 	bl	8000310 <__aeabi_ldivmod>
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	2b00      	cmp	r3, #0
 8000722:	da20      	bge.n	8000766 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	4a11      	ldr	r2, [pc, #68]	@ (8000770 <UTILS_NanosecondsToTimespec+0x90>)
 800072a:	fb82 1203 	smull	r1, r2, r2, r3
 800072e:	1712      	asrs	r2, r2, #28
 8000730:	17db      	asrs	r3, r3, #31
 8000732:	1ad3      	subs	r3, r2, r3
 8000734:	3301      	adds	r3, #1
 8000736:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800073e:	6979      	ldr	r1, [r7, #20]
 8000740:	17c8      	asrs	r0, r1, #31
 8000742:	460c      	mov	r4, r1
 8000744:	4605      	mov	r5, r0
 8000746:	ebb2 0804 	subs.w	r8, r2, r4
 800074a:	eb63 0905 	sbc.w	r9, r3, r5
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	689a      	ldr	r2, [r3, #8]
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	4906      	ldr	r1, [pc, #24]	@ (8000774 <UTILS_NanosecondsToTimespec+0x94>)
 800075c:	fb01 f303 	mul.w	r3, r1, r3
 8000760:	441a      	add	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	609a      	str	r2, [r3, #8]
    }
}
 8000766:	bf00      	nop
 8000768:	3718      	adds	r7, #24
 800076a:	46bd      	mov	sp, r7
 800076c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000770:	44b82fa1 	.word	0x44b82fa1
 8000774:	3b9aca00 	.word	0x3b9aca00
 8000778:	3b9aca00 	.word	0x3b9aca00
 800077c:	00000000 	.word	0x00000000

08000780 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8000780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000784:	b08e      	sub	sp, #56	@ 0x38
 8000786:	af00      	add	r7, sp, #0
 8000788:	6278      	str	r0, [r7, #36]	@ 0x24
 800078a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800078c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000790:	2300      	movs	r3, #0
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8000796:	f04f 0200 	mov.w	r2, #0
 800079a:	f04f 0300 	mov.w	r3, #0
 800079e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80007a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007a6:	4618      	mov	r0, r3
 80007a8:	f007 feb0 	bl	800850c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80007ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007ae:	17da      	asrs	r2, r3, #31
 80007b0:	61bb      	str	r3, [r7, #24]
 80007b2:	61fa      	str	r2, [r7, #28]
 80007b4:	f04f 0200 	mov.w	r2, #0
 80007b8:	f04f 0300 	mov.w	r3, #0
 80007bc:	69b9      	ldr	r1, [r7, #24]
 80007be:	000b      	movs	r3, r1
 80007c0:	2200      	movs	r2, #0
 80007c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80007c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007c8:	2200      	movs	r2, #0
 80007ca:	461c      	mov	r4, r3
 80007cc:	4615      	mov	r5, r2
 80007ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80007d2:	1911      	adds	r1, r2, r4
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	416b      	adcs	r3, r5
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80007de:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80007e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80007e6:	4602      	mov	r2, r0
 80007e8:	460b      	mov	r3, r1
 80007ea:	f04f 0400 	mov.w	r4, #0
 80007ee:	f04f 0500 	mov.w	r5, #0
 80007f2:	015d      	lsls	r5, r3, #5
 80007f4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80007f8:	0154      	lsls	r4, r2, #5
 80007fa:	4622      	mov	r2, r4
 80007fc:	462b      	mov	r3, r5
 80007fe:	ebb2 0800 	subs.w	r8, r2, r0
 8000802:	eb63 0901 	sbc.w	r9, r3, r1
 8000806:	f04f 0200 	mov.w	r2, #0
 800080a:	f04f 0300 	mov.w	r3, #0
 800080e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8000812:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8000816:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800081a:	4690      	mov	r8, r2
 800081c:	4699      	mov	r9, r3
 800081e:	eb18 0a00 	adds.w	sl, r8, r0
 8000822:	eb49 0b01 	adc.w	fp, r9, r1
 8000826:	f04f 0200 	mov.w	r2, #0
 800082a:	f04f 0300 	mov.w	r3, #0
 800082e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8000832:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8000836:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800083a:	ebb2 040a 	subs.w	r4, r2, sl
 800083e:	603c      	str	r4, [r7, #0]
 8000840:	eb63 030b 	sbc.w	r3, r3, fp
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	e9d7 4500 	ldrd	r4, r5, [r7]
 800084a:	4623      	mov	r3, r4
 800084c:	181b      	adds	r3, r3, r0
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	462b      	mov	r3, r5
 8000852:	eb41 0303 	adc.w	r3, r1, r3
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	6a3a      	ldr	r2, [r7, #32]
 800085a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800085e:	f7ff ff3f 	bl	80006e0 <UTILS_NanosecondsToTimespec>

    return 0;
 8000862:	2300      	movs	r3, #0
 8000864:	4618      	mov	r0, r3
 8000866:	3738      	adds	r7, #56	@ 0x38
 8000868:	46bd      	mov	sp, r7
 800086a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08000870 <cubemx_transport_open>:

// --- micro-ROS Transports ---
#define UDP_PORT        8888
static int sock_fd = -1;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
    sock_fd = socket(AF_INET, SOCK_DGRAM, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	2102      	movs	r1, #2
 800087c:	2002      	movs	r0, #2
 800087e:	f00b fd41 	bl	800c304 <lwip_socket>
 8000882:	4603      	mov	r3, r0
 8000884:	4a10      	ldr	r2, [pc, #64]	@ (80008c8 <cubemx_transport_open+0x58>)
 8000886:	6013      	str	r3, [r2, #0]
    struct sockaddr_in addr;
    addr.sin_family = AF_INET;
 8000888:	2302      	movs	r3, #2
 800088a:	727b      	strb	r3, [r7, #9]
    addr.sin_port = htons(UDP_PORT);
 800088c:	f242 20b8 	movw	r0, #8888	@ 0x22b8
 8000890:	f00c fb26 	bl	800cee0 <lwip_htons>
 8000894:	4603      	mov	r3, r0
 8000896:	817b      	strh	r3, [r7, #10]
    addr.sin_addr.s_addr = htonl(INADDR_ANY);
 8000898:	2000      	movs	r0, #0
 800089a:	f00c fb37 	bl	800cf0c <lwip_htonl>
 800089e:	4603      	mov	r3, r0
 80008a0:	60fb      	str	r3, [r7, #12]
    
    if (bind(sock_fd, (struct sockaddr *)&addr, sizeof(addr)) == -1)
 80008a2:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <cubemx_transport_open+0x58>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f107 0108 	add.w	r1, r7, #8
 80008aa:	2210      	movs	r2, #16
 80008ac:	4618      	mov	r0, r3
 80008ae:	f00b f829 	bl	800b904 <lwip_bind>
 80008b2:	4603      	mov	r3, r0
 80008b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b8:	d101      	bne.n	80008be <cubemx_transport_open+0x4e>
    {
        return false;
 80008ba:	2300      	movs	r3, #0
 80008bc:	e000      	b.n	80008c0 <cubemx_transport_open+0x50>
    }

    return true;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000000 	.word	0x20000000

080008cc <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
    if (sock_fd != -1)
 80008d4:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <cubemx_transport_close+0x30>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008dc:	d008      	beq.n	80008f0 <cubemx_transport_close+0x24>
    {
        closesocket(sock_fd);
 80008de:	4b07      	ldr	r3, [pc, #28]	@ (80008fc <cubemx_transport_close+0x30>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f00b f87c 	bl	800b9e0 <lwip_close>
        sock_fd = -1;
 80008e8:	4b04      	ldr	r3, [pc, #16]	@ (80008fc <cubemx_transport_close+0x30>)
 80008ea:	f04f 32ff 	mov.w	r2, #4294967295
 80008ee:	601a      	str	r2, [r3, #0]
    }
    return true;
 80008f0:	2301      	movs	r3, #1
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000000 	.word	0x20000000

08000900 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000900:	b580      	push	{r7, lr}
 8000902:	b08e      	sub	sp, #56	@ 0x38
 8000904:	af02      	add	r7, sp, #8
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
 800090c:	603b      	str	r3, [r7, #0]
    if (sock_fd == -1)
 800090e:	4b18      	ldr	r3, [pc, #96]	@ (8000970 <cubemx_transport_write+0x70>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000916:	d101      	bne.n	800091c <cubemx_transport_write+0x1c>
    {
        return 0;
 8000918:	2300      	movs	r3, #0
 800091a:	e024      	b.n	8000966 <cubemx_transport_write+0x66>
    }
    const char * ip_addr = (const char*) transport->args;
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000922:	62fb      	str	r3, [r7, #44]	@ 0x2c
    struct sockaddr_in addr;
    addr.sin_family = AF_INET;
 8000924:	2302      	movs	r3, #2
 8000926:	757b      	strb	r3, [r7, #21]
    addr.sin_port = htons(UDP_PORT);
 8000928:	f242 20b8 	movw	r0, #8888	@ 0x22b8
 800092c:	f00c fad8 	bl	800cee0 <lwip_htons>
 8000930:	4603      	mov	r3, r0
 8000932:	82fb      	strh	r3, [r7, #22]
    addr.sin_addr.s_addr = inet_addr(ip_addr);
 8000934:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000936:	f016 fbd6 	bl	80170e6 <ipaddr_addr>
 800093a:	4603      	mov	r3, r0
 800093c:	61bb      	str	r3, [r7, #24]
    int ret = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	@ 0x28
    ret = sendto(sock_fd, buf, len, 0, (struct sockaddr *)&addr, sizeof(addr));
 8000942:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <cubemx_transport_write+0x70>)
 8000944:	6818      	ldr	r0, [r3, #0]
 8000946:	2310      	movs	r3, #16
 8000948:	9301      	str	r3, [sp, #4]
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	2300      	movs	r3, #0
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	68b9      	ldr	r1, [r7, #8]
 8000956:	f00b fc23 	bl	800c1a0 <lwip_sendto>
 800095a:	62b8      	str	r0, [r7, #40]	@ 0x28
    size_t writed = ret>0? ret:0;
 800095c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800095e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000962:	627b      	str	r3, [r7, #36]	@ 0x24

    return writed;
 8000964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000966:	4618      	mov	r0, r3
 8000968:	3730      	adds	r7, #48	@ 0x30
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000000 	.word	0x20000000

08000974 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000974:	b5b0      	push	{r4, r5, r7, lr}
 8000976:	b08c      	sub	sp, #48	@ 0x30
 8000978:	af02      	add	r7, sp, #8
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
 8000980:	603b      	str	r3, [r7, #0]

    int ret = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
    //set timeout
    struct timeval tv_out;
    tv_out.tv_sec = timeout / 1000;
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	4a1c      	ldr	r2, [pc, #112]	@ (80009fc <cubemx_transport_read+0x88>)
 800098a:	fb82 1203 	smull	r1, r2, r2, r3
 800098e:	1192      	asrs	r2, r2, #6
 8000990:	17db      	asrs	r3, r3, #31
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	17da      	asrs	r2, r3, #31
 8000996:	461c      	mov	r4, r3
 8000998:	4615      	mov	r5, r2
 800099a:	e9c7 4504 	strd	r4, r5, [r7, #16]
    tv_out.tv_usec = (timeout % 1000) * 1000;
 800099e:	683a      	ldr	r2, [r7, #0]
 80009a0:	4b16      	ldr	r3, [pc, #88]	@ (80009fc <cubemx_transport_read+0x88>)
 80009a2:	fb83 1302 	smull	r1, r3, r3, r2
 80009a6:	1199      	asrs	r1, r3, #6
 80009a8:	17d3      	asrs	r3, r2, #31
 80009aa:	1acb      	subs	r3, r1, r3
 80009ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80009b0:	fb01 f303 	mul.w	r3, r1, r3
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009ba:	fb02 f303 	mul.w	r3, r2, r3
 80009be:	61bb      	str	r3, [r7, #24]
    setsockopt(sock_fd, SOL_SOCKET, SO_RCVTIMEO,&tv_out, sizeof(tv_out));
 80009c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a00 <cubemx_transport_read+0x8c>)
 80009c2:	6818      	ldr	r0, [r3, #0]
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	2210      	movs	r2, #16
 80009ca:	9200      	str	r2, [sp, #0]
 80009cc:	f241 0206 	movw	r2, #4102	@ 0x1006
 80009d0:	f640 71ff 	movw	r1, #4095	@ 0xfff
 80009d4:	f00b feac 	bl	800c730 <lwip_setsockopt>
    ret = recv(sock_fd, buf, len, MSG_WAITALL);
 80009d8:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <cubemx_transport_read+0x8c>)
 80009da:	6818      	ldr	r0, [r3, #0]
 80009dc:	2302      	movs	r3, #2
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	68b9      	ldr	r1, [r7, #8]
 80009e2:	f00b fb69 	bl	800c0b8 <lwip_recv>
 80009e6:	6278      	str	r0, [r7, #36]	@ 0x24
    size_t readed = ret > 0 ? ret : 0;
 80009e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80009ee:	623b      	str	r3, [r7, #32]
    return readed;
 80009f0:	6a3b      	ldr	r3, [r7, #32]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3728      	adds	r7, #40	@ 0x28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bdb0      	pop	{r4, r5, r7, pc}
 80009fa:	bf00      	nop
 80009fc:	10624dd3 	.word	0x10624dd3
 8000a00:	20000000 	.word	0x20000000

08000a04 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2180      	movs	r1, #128	@ 0x80
 8000a12:	4803      	ldr	r0, [pc, #12]	@ (8000a20 <vApplicationStackOverflowHook+0x1c>)
 8000a14:	f002 fc7a 	bl	800330c <HAL_GPIO_WritePin>
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40020400 	.word	0x40020400

08000a24 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4a07      	ldr	r2, [pc, #28]	@ (8000a50 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	4a06      	ldr	r2, [pc, #24]	@ (8000a54 <vApplicationGetIdleTaskMemory+0x30>)
 8000a3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2280      	movs	r2, #128	@ 0x80
 8000a40:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a42:	bf00      	nop
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000314 	.word	0x20000314
 8000a54:	200003b4 	.word	0x200003b4

08000a58 <subscription_callback>:
  return 0;
}

// Simple subscription callback
void subscription_callback(const void * msgin)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  const std_msgs__msg__String * msg = (const std_msgs__msg__String *)msgin;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	61fb      	str	r3, [r7, #28]
  if (msg != NULL && msg->data.data != NULL) {
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d042      	beq.n	8000af0 <subscription_callback+0x98>
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d03e      	beq.n	8000af0 <subscription_callback+0x98>
    
    // Parse servo command: "servoX:Y" where X=servo number, Y=angle
    char* command = (char*)msg->data.data;
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	61bb      	str	r3, [r7, #24]
    
    // Look for "servo" followed by a number and colon
    if (strncmp(command, "servo", 5) == 0) {
 8000a78:	2205      	movs	r2, #5
 8000a7a:	491f      	ldr	r1, [pc, #124]	@ (8000af8 <subscription_callback+0xa0>)
 8000a7c:	69b8      	ldr	r0, [r7, #24]
 8000a7e:	f024 febe 	bl	80257fe <strncmp>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d133      	bne.n	8000af0 <subscription_callback+0x98>
      // Extract servo number
      int servo_num = -1;
 8000a88:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8c:	617b      	str	r3, [r7, #20]
      int angle = -1;
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a92:	613b      	str	r3, [r7, #16]
      
      // Find the colon separator
      char* colon_pos = strchr(command + 5, ':');
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	3305      	adds	r3, #5
 8000a98:	213a      	movs	r1, #58	@ 0x3a
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f024 fea2 	bl	80257e4 <strchr>
 8000aa0:	60f8      	str	r0, [r7, #12]
      if (colon_pos != NULL) {
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d023      	beq.n	8000af0 <subscription_callback+0x98>
        // Parse servo number (between "servo" and ":")
        servo_num = atoi(command + 5);
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	3305      	adds	r3, #5
 8000aac:	4618      	mov	r0, r3
 8000aae:	f024 f919 	bl	8024ce4 <atoi>
 8000ab2:	6178      	str	r0, [r7, #20]
        
        // Parse angle (after ":")
        angle = atoi(colon_pos + 1);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f024 f913 	bl	8024ce4 <atoi>
 8000abe:	6138      	str	r0, [r7, #16]
        
        // Validate ranges
        if (servo_num >= 0 && servo_num <= 15 && angle >= 0 && angle <= 180) {
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	db14      	blt.n	8000af0 <subscription_callback+0x98>
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	2b0f      	cmp	r3, #15
 8000aca:	dc11      	bgt.n	8000af0 <subscription_callback+0x98>
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	db0e      	blt.n	8000af0 <subscription_callback+0x98>
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	2bb4      	cmp	r3, #180	@ 0xb4
 8000ad6:	dc0b      	bgt.n	8000af0 <subscription_callback+0x98>
          // Valid command - control the servo
          set_servo(servo_num, angle);
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	b2d2      	uxtb	r2, r2
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 fb52 	bl	800118c <set_servo>
          
          // Toggle blue LED to indicate successful command
          HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000ae8:	2180      	movs	r1, #128	@ 0x80
 8000aea:	4804      	ldr	r0, [pc, #16]	@ (8000afc <subscription_callback+0xa4>)
 8000aec:	f002 fc27 	bl	800333e <HAL_GPIO_TogglePin>
        }
      }
    }
  }
}
 8000af0:	bf00      	nop
 8000af2:	3720      	adds	r7, #32
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	080266b8 	.word	0x080266b8
 8000afc:	40020400 	.word	0x40020400

08000b00 <debugNetworkStatus>:
void debugNetworkStatus(void)
{  
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  if (netif_is_up(&gnetif) && netif_is_link_up(&gnetif)) {
 8000b04:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <debugNetworkStatus+0x5c>)
 8000b06:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d014      	beq.n	8000b3e <debugNetworkStatus+0x3e>
 8000b14:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <debugNetworkStatus+0x5c>)
 8000b16:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8000b1a:	089b      	lsrs	r3, r3, #2
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d00b      	beq.n	8000b3e <debugNetworkStatus+0x3e>
    // Network is fully working - solid green
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);  // Red OFF
 8000b26:	2200      	movs	r2, #0
 8000b28:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b2c:	480c      	ldr	r0, [pc, #48]	@ (8000b60 <debugNetworkStatus+0x60>)
 8000b2e:	f002 fbed 	bl	800330c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);     // Green ON
 8000b32:	2201      	movs	r2, #1
 8000b34:	2101      	movs	r1, #1
 8000b36:	480a      	ldr	r0, [pc, #40]	@ (8000b60 <debugNetworkStatus+0x60>)
 8000b38:	f002 fbe8 	bl	800330c <HAL_GPIO_WritePin>
 8000b3c:	e00b      	b.n	8000b56 <debugNetworkStatus+0x56>
  } else {
    // No physical link - solid red
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);   // Green OFF
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2101      	movs	r1, #1
 8000b42:	4807      	ldr	r0, [pc, #28]	@ (8000b60 <debugNetworkStatus+0x60>)
 8000b44:	f002 fbe2 	bl	800330c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);    // Red ON
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b4e:	4804      	ldr	r0, [pc, #16]	@ (8000b60 <debugNetworkStatus+0x60>)
 8000b50:	f002 fbdc 	bl	800330c <HAL_GPIO_WritePin>
  }
}
 8000b54:	bf00      	nop
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000748 	.word	0x20000748
 8000b60:	40020400 	.word	0x40020400

08000b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b64:	b5b0      	push	{r4, r5, r7, lr}
 8000b66:	b096      	sub	sp, #88	@ 0x58
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b6a:	f000 fe6e 	bl	800184a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6e:	f000 f84f 	bl	8000c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b72:	f000 f8fb 	bl	8000d6c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b76:	f000 f8b9 	bl	8000cec <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000b7a:	2064      	movs	r0, #100	@ 0x64
 8000b7c:	f000 fe92 	bl	80018a4 <HAL_Delay>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ethernetTask */
  osThreadDef(ethernetTask, ethernetStatusCheck, osPriorityAboveNormal, 0, 256);
 8000b80:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf8 <main+0x94>)
 8000b82:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000b86:	461d      	mov	r5, r3
 8000b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ethernetTaskHandle = osThreadCreate(osThread(ethernetTask), NULL);
 8000b94:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f005 fb81 	bl	80062a2 <osThreadCreate>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	4a16      	ldr	r2, [pc, #88]	@ (8000bfc <main+0x98>)
 8000ba4:	6013      	str	r3, [r2, #0]

  /* definition and creation of robotTask */
  osThreadDef(robotTask, robotControl, osPriorityIdle, 0, 128);
 8000ba6:	4b16      	ldr	r3, [pc, #88]	@ (8000c00 <main+0x9c>)
 8000ba8:	f107 0420 	add.w	r4, r7, #32
 8000bac:	461d      	mov	r5, r3
 8000bae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  robotTaskHandle = osThreadCreate(osThread(robotTask), NULL);
 8000bba:	f107 0320 	add.w	r3, r7, #32
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f005 fb6e 	bl	80062a2 <osThreadCreate>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	4a0e      	ldr	r2, [pc, #56]	@ (8000c04 <main+0xa0>)
 8000bca:	6013      	str	r3, [r2, #0]

  /* definition and creation of rosTask */
  osThreadDef(rosTask, ros, osPriorityNormal, 0, 3840);
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c08 <main+0xa4>)
 8000bce:	1d3c      	adds	r4, r7, #4
 8000bd0:	461d      	mov	r5, r3
 8000bd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rosTaskHandle = osThreadCreate(osThread(rosTask), NULL);
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f005 fb5d 	bl	80062a2 <osThreadCreate>
 8000be8:	4603      	mov	r3, r0
 8000bea:	4a08      	ldr	r2, [pc, #32]	@ (8000c0c <main+0xa8>)
 8000bec:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000bee:	f005 fb41 	bl	8006274 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bf2:	bf00      	nop
 8000bf4:	e7fd      	b.n	8000bf2 <main+0x8e>
 8000bf6:	bf00      	nop
 8000bf8:	080266d0 	.word	0x080266d0
 8000bfc:	20000608 	.word	0x20000608
 8000c00:	080266f8 	.word	0x080266f8
 8000c04:	2000060c 	.word	0x2000060c
 8000c08:	0802671c 	.word	0x0802671c
 8000c0c:	20000610 	.word	0x20000610

08000c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b094      	sub	sp, #80	@ 0x50
 8000c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	2234      	movs	r2, #52	@ 0x34
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f024 fdd8 	bl	80257d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c34:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce4 <SystemClock_Config+0xd4>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c38:	4a2a      	ldr	r2, [pc, #168]	@ (8000ce4 <SystemClock_Config+0xd4>)
 8000c3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c40:	4b28      	ldr	r3, [pc, #160]	@ (8000ce4 <SystemClock_Config+0xd4>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c4c:	4b26      	ldr	r3, [pc, #152]	@ (8000ce8 <SystemClock_Config+0xd8>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a25      	ldr	r2, [pc, #148]	@ (8000ce8 <SystemClock_Config+0xd8>)
 8000c52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	4b23      	ldr	r3, [pc, #140]	@ (8000ce8 <SystemClock_Config+0xd8>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c6c:	2310      	movs	r3, #16
 8000c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c70:	2302      	movs	r3, #2
 8000c72:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c74:	2300      	movs	r3, #0
 8000c76:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c78:	2308      	movs	r3, #8
 8000c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000c7c:	23d8      	movs	r3, #216	@ 0xd8
 8000c7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c80:	2302      	movs	r3, #2
 8000c82:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c84:	2302      	movs	r3, #2
 8000c86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	4618      	mov	r0, r3
 8000c92:	f003 f875 	bl	8003d80 <HAL_RCC_OscConfig>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000c9c:	f000 fa0a 	bl	80010b4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ca0:	f003 f81e 	bl	8003ce0 <HAL_PWREx_EnableOverDrive>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000caa:	f000 fa03 	bl	80010b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cae:	230f      	movs	r3, #15
 8000cb0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cba:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000cbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cc4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000cc6:	f107 0308 	add.w	r3, r7, #8
 8000cca:	2107      	movs	r1, #7
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f003 fb05 	bl	80042dc <HAL_RCC_ClockConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000cd8:	f000 f9ec 	bl	80010b4 <Error_Handler>
  }
}
 8000cdc:	bf00      	nop
 8000cde:	3750      	adds	r7, #80	@ 0x50
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40007000 	.word	0x40007000

08000cec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d60 <MX_I2C1_Init+0x74>)
 8000cf2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d64 <MX_I2C1_Init+0x78>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d60 <MX_I2C1_Init+0x74>)
 8000cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d68 <MX_I2C1_Init+0x7c>)
 8000cfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cfc:	4b18      	ldr	r3, [pc, #96]	@ (8000d60 <MX_I2C1_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d02:	4b17      	ldr	r3, [pc, #92]	@ (8000d60 <MX_I2C1_Init+0x74>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d08:	4b15      	ldr	r3, [pc, #84]	@ (8000d60 <MX_I2C1_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d0e:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <MX_I2C1_Init+0x74>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d14:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <MX_I2C1_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <MX_I2C1_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <MX_I2C1_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d26:	480e      	ldr	r0, [pc, #56]	@ (8000d60 <MX_I2C1_Init+0x74>)
 8000d28:	f002 fb24 	bl	8003374 <HAL_I2C_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d32:	f000 f9bf 	bl	80010b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d36:	2100      	movs	r1, #0
 8000d38:	4809      	ldr	r0, [pc, #36]	@ (8000d60 <MX_I2C1_Init+0x74>)
 8000d3a:	f002 ff39 	bl	8003bb0 <HAL_I2CEx_ConfigAnalogFilter>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d44:	f000 f9b6 	bl	80010b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <MX_I2C1_Init+0x74>)
 8000d4c:	f002 ff7b 	bl	8003c46 <HAL_I2CEx_ConfigDigitalFilter>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d56:	f000 f9ad 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200005b4 	.word	0x200005b4
 8000d64:	40005400 	.word	0x40005400
 8000d68:	20404768 	.word	0x20404768

08000d6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	@ 0x28
 8000d70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d82:	4b24      	ldr	r3, [pc, #144]	@ (8000e14 <MX_GPIO_Init+0xa8>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	4a23      	ldr	r2, [pc, #140]	@ (8000e14 <MX_GPIO_Init+0xa8>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8e:	4b21      	ldr	r3, [pc, #132]	@ (8000e14 <MX_GPIO_Init+0xa8>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e14 <MX_GPIO_Init+0xa8>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4a1d      	ldr	r2, [pc, #116]	@ (8000e14 <MX_GPIO_Init+0xa8>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e14 <MX_GPIO_Init+0xa8>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	4b18      	ldr	r3, [pc, #96]	@ (8000e14 <MX_GPIO_Init+0xa8>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	4a17      	ldr	r2, [pc, #92]	@ (8000e14 <MX_GPIO_Init+0xa8>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbe:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <MX_GPIO_Init+0xa8>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dca:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <MX_GPIO_Init+0xa8>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	4a11      	ldr	r2, [pc, #68]	@ (8000e14 <MX_GPIO_Init+0xa8>)
 8000dd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <MX_GPIO_Init+0xa8>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000de8:	480b      	ldr	r0, [pc, #44]	@ (8000e18 <MX_GPIO_Init+0xac>)
 8000dea:	f002 fa8f 	bl	800330c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000dee:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	4804      	ldr	r0, [pc, #16]	@ (8000e18 <MX_GPIO_Init+0xac>)
 8000e08:	f002 f8d4 	bl	8002fb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e0c:	bf00      	nop
 8000e0e:	3728      	adds	r7, #40	@ 0x28
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020400 	.word	0x40020400

08000e1c <ethernetStatusCheck>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ethernetStatusCheck */
void ethernetStatusCheck(void const * argument)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000e24:	f004 fb54 	bl	80054d0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	debugNetworkStatus();
 8000e28:	f7ff fe6a 	bl	8000b00 <debugNetworkStatus>
    osDelay(2000);
 8000e2c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e30:	f005 fa8f 	bl	8006352 <osDelay>
	debugNetworkStatus();
 8000e34:	bf00      	nop
 8000e36:	e7f7      	b.n	8000e28 <ethernetStatusCheck+0xc>

08000e38 <robotControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_robotControl */
void robotControl(void const * argument)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN robotControl */
  
  // Initialize robot hardware
  pca9685_init();
 8000e40:	f000 f95c 	bl	80010fc <pca9685_init>
  
  // Initialize servos to safe starting positions
  set_servo(0, 90);   // Servo 0 to center
 8000e44:	215a      	movs	r1, #90	@ 0x5a
 8000e46:	2000      	movs	r0, #0
 8000e48:	f000 f9a0 	bl	800118c <set_servo>
  set_servo(1, 90);   // Servo 1 to center
 8000e4c:	215a      	movs	r1, #90	@ 0x5a
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f000 f99c 	bl	800118c <set_servo>
  set_servo(2, 90);   // Servo 2 to center
 8000e54:	215a      	movs	r1, #90	@ 0x5a
 8000e56:	2002      	movs	r0, #2
 8000e58:	f000 f998 	bl	800118c <set_servo>
  
  for (;;) {
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <robotControl+0x24>

08000e60 <ros>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ros */
void ros(void const * argument)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08c      	sub	sp, #48	@ 0x30
 8000e64:	af02      	add	r7, sp, #8
 8000e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ros */
  
  // Wait for network to be ready - use longer delays to give Ethernet task time
  uint32_t network_wait_count = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (!netif_is_up(&gnetif) || !netif_is_link_up(&gnetif)) {
 8000e6c:	e016      	b.n	8000e9c <ros+0x3c>
    network_wait_count++;
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e70:	3301      	adds	r3, #1
 8000e72:	627b      	str	r3, [r7, #36]	@ 0x24
    
    // Blink blue LED to show we're waiting for network
    if (network_wait_count % 10 == 0) {
 8000e74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000e76:	4b71      	ldr	r3, [pc, #452]	@ (800103c <ros+0x1dc>)
 8000e78:	fba3 2301 	umull	r2, r3, r3, r1
 8000e7c:	08da      	lsrs	r2, r3, #3
 8000e7e:	4613      	mov	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4413      	add	r3, r2
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	1aca      	subs	r2, r1, r3
 8000e88:	2a00      	cmp	r2, #0
 8000e8a:	d103      	bne.n	8000e94 <ros+0x34>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000e8c:	2180      	movs	r1, #128	@ 0x80
 8000e8e:	486c      	ldr	r0, [pc, #432]	@ (8001040 <ros+0x1e0>)
 8000e90:	f002 fa55 	bl	800333e <HAL_GPIO_TogglePin>
    }
    
    osDelay(1000);  // 1 second delay - gives plenty of time for Ethernet task
 8000e94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e98:	f005 fa5b 	bl	8006352 <osDelay>
  while (!netif_is_up(&gnetif) || !netif_is_link_up(&gnetif)) {
 8000e9c:	4b69      	ldr	r3, [pc, #420]	@ (8001044 <ros+0x1e4>)
 8000e9e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d0e1      	beq.n	8000e6e <ros+0xe>
 8000eaa:	4b66      	ldr	r3, [pc, #408]	@ (8001044 <ros+0x1e4>)
 8000eac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0da      	beq.n	8000e6e <ros+0xe>
  }
  
  // Network is ready - turn off blue LED
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2180      	movs	r1, #128	@ 0x80
 8000ebc:	4860      	ldr	r0, [pc, #384]	@ (8001040 <ros+0x1e0>)
 8000ebe:	f002 fa25 	bl	800330c <HAL_GPIO_WritePin>
  
  // Setup micro-ROS transport
  rmw_uros_set_custom_transport(
 8000ec2:	4b61      	ldr	r3, [pc, #388]	@ (8001048 <ros+0x1e8>)
 8000ec4:	9301      	str	r3, [sp, #4]
 8000ec6:	4b61      	ldr	r3, [pc, #388]	@ (800104c <ros+0x1ec>)
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	4b61      	ldr	r3, [pc, #388]	@ (8001050 <ros+0x1f0>)
 8000ecc:	4a61      	ldr	r2, [pc, #388]	@ (8001054 <ros+0x1f4>)
 8000ece:	4962      	ldr	r1, [pc, #392]	@ (8001058 <ros+0x1f8>)
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f018 fc21 	bl	8019718 <rmw_uros_set_custom_transport>
    cubemx_transport_write,
    cubemx_transport_read
  );

  // Initialize micro-ROS
  rcl_allocator_t allocator = rcl_get_default_allocator();
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	4618      	mov	r0, r3
 8000edc:	f018 fb7c 	bl	80195d8 <rcutils_get_default_allocator>
  
  // Create support
  if (rclc_support_init(&support, 0, NULL, &allocator) != RCL_RET_OK) {
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	485c      	ldr	r0, [pc, #368]	@ (800105c <ros+0x1fc>)
 8000eea:	f018 fa6d 	bl	80193c8 <rclc_support_init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d008      	beq.n	8000f06 <ros+0xa6>
    // Error - blink red LED fast
    for(;;) {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000ef4:	2180      	movs	r1, #128	@ 0x80
 8000ef6:	4852      	ldr	r0, [pc, #328]	@ (8001040 <ros+0x1e0>)
 8000ef8:	f002 fa21 	bl	800333e <HAL_GPIO_TogglePin>
      osDelay(100);
 8000efc:	2064      	movs	r0, #100	@ 0x64
 8000efe:	f005 fa28 	bl	8006352 <osDelay>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000f02:	bf00      	nop
 8000f04:	e7f6      	b.n	8000ef4 <ros+0x94>
    }
  }

  // Create node
  if (rclc_node_init_default(&node, "stm32_simple_node", "", &support) != RCL_RET_OK) {
 8000f06:	4b55      	ldr	r3, [pc, #340]	@ (800105c <ros+0x1fc>)
 8000f08:	4a55      	ldr	r2, [pc, #340]	@ (8001060 <ros+0x200>)
 8000f0a:	4956      	ldr	r1, [pc, #344]	@ (8001064 <ros+0x204>)
 8000f0c:	4856      	ldr	r0, [pc, #344]	@ (8001068 <ros+0x208>)
 8000f0e:	f018 faa5 	bl	801945c <rclc_node_init_default>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d009      	beq.n	8000f2c <ros+0xcc>
    // Error - blink red LED fast
    for(;;) {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000f18:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f1c:	4848      	ldr	r0, [pc, #288]	@ (8001040 <ros+0x1e0>)
 8000f1e:	f002 fa0e 	bl	800333e <HAL_GPIO_TogglePin>
      osDelay(100);
 8000f22:	2064      	movs	r0, #100	@ 0x64
 8000f24:	f005 fa15 	bl	8006352 <osDelay>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000f28:	bf00      	nop
 8000f2a:	e7f5      	b.n	8000f18 <ros+0xb8>
    }
  }

  // Create publisher
  if (rclc_publisher_init_default(
 8000f2c:	f019 f932 	bl	801a194 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8000f30:	4602      	mov	r2, r0
 8000f32:	4b4e      	ldr	r3, [pc, #312]	@ (800106c <ros+0x20c>)
 8000f34:	494c      	ldr	r1, [pc, #304]	@ (8001068 <ros+0x208>)
 8000f36:	484e      	ldr	r0, [pc, #312]	@ (8001070 <ros+0x210>)
 8000f38:	f018 fad2 	bl	80194e0 <rclc_publisher_init_default>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d009      	beq.n	8000f56 <ros+0xf6>
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "counter") != RCL_RET_OK) {
    // Error - blink red LED medium
    for(;;) {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000f42:	2180      	movs	r1, #128	@ 0x80
 8000f44:	483e      	ldr	r0, [pc, #248]	@ (8001040 <ros+0x1e0>)
 8000f46:	f002 f9fa 	bl	800333e <HAL_GPIO_TogglePin>
      osDelay(400);
 8000f4a:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000f4e:	f005 fa00 	bl	8006352 <osDelay>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000f52:	bf00      	nop
 8000f54:	e7f5      	b.n	8000f42 <ros+0xe2>
    }
  }

  // Create subscriber
  if (rclc_subscription_init_default(
 8000f56:	f019 f935 	bl	801a1c4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	4b45      	ldr	r3, [pc, #276]	@ (8001074 <ros+0x214>)
 8000f5e:	4942      	ldr	r1, [pc, #264]	@ (8001068 <ros+0x208>)
 8000f60:	4845      	ldr	r0, [pc, #276]	@ (8001078 <ros+0x218>)
 8000f62:	f018 faf7 	bl	8019554 <rclc_subscription_init_default>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d009      	beq.n	8000f80 <ros+0x120>
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
    "servo_cmd") != RCL_RET_OK) {
    // Error - blink red LED medium
    for(;;) {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000f6c:	2180      	movs	r1, #128	@ 0x80
 8000f6e:	4834      	ldr	r0, [pc, #208]	@ (8001040 <ros+0x1e0>)
 8000f70:	f002 f9e5 	bl	800333e <HAL_GPIO_TogglePin>
      osDelay(400);
 8000f74:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000f78:	f005 f9eb 	bl	8006352 <osDelay>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000f7c:	bf00      	nop
 8000f7e:	e7f5      	b.n	8000f6c <ros+0x10c>
    }
  }

  // Create executor
  if (rclc_executor_init(&executor, &support.context, 1, &allocator) != RCL_RET_OK) {
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2201      	movs	r2, #1
 8000f86:	4935      	ldr	r1, [pc, #212]	@ (800105c <ros+0x1fc>)
 8000f88:	483c      	ldr	r0, [pc, #240]	@ (800107c <ros+0x21c>)
 8000f8a:	f017 ff3d 	bl	8018e08 <rclc_executor_init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d009      	beq.n	8000fa8 <ros+0x148>
    // Error - blink blue LED  slow
    for(;;) {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000f94:	2180      	movs	r1, #128	@ 0x80
 8000f96:	482a      	ldr	r0, [pc, #168]	@ (8001040 <ros+0x1e0>)
 8000f98:	f002 f9d1 	bl	800333e <HAL_GPIO_TogglePin>
      osDelay(1000);
 8000f9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fa0:	f005 f9d7 	bl	8006352 <osDelay>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000fa4:	bf00      	nop
 8000fa6:	e7f5      	b.n	8000f94 <ros+0x134>
    }
  }

  // Add subscription to executor
  if (rclc_executor_add_subscription(&executor, &subscriber, &sub_msg, 
 8000fa8:	2300      	movs	r3, #0
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	4b34      	ldr	r3, [pc, #208]	@ (8001080 <ros+0x220>)
 8000fae:	4a35      	ldr	r2, [pc, #212]	@ (8001084 <ros+0x224>)
 8000fb0:	4931      	ldr	r1, [pc, #196]	@ (8001078 <ros+0x218>)
 8000fb2:	4832      	ldr	r0, [pc, #200]	@ (800107c <ros+0x21c>)
 8000fb4:	f017 ffa4 	bl	8018f00 <rclc_executor_add_subscription>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d00a      	beq.n	8000fd4 <ros+0x174>
    &subscription_callback, ON_NEW_DATA) != RCL_RET_OK) {
    // Error - blink red LED  slow
    for(;;) {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000fbe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fc2:	481f      	ldr	r0, [pc, #124]	@ (8001040 <ros+0x1e0>)
 8000fc4:	f002 f9bb 	bl	800333e <HAL_GPIO_TogglePin>
      osDelay(1000);
 8000fc8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fcc:	f005 f9c1 	bl	8006352 <osDelay>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000fd0:	bf00      	nop
 8000fd2:	e7f4      	b.n	8000fbe <ros+0x15e>
    }
  }

  // Initialize messages
  pub_msg.data = 0;
 8000fd4:	4b2c      	ldr	r3, [pc, #176]	@ (8001088 <ros+0x228>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
  sub_msg.data.data = (char*)malloc(50);
 8000fda:	2032      	movs	r0, #50	@ 0x32
 8000fdc:	f023 fefc 	bl	8024dd8 <malloc>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4b27      	ldr	r3, [pc, #156]	@ (8001084 <ros+0x224>)
 8000fe6:	601a      	str	r2, [r3, #0]
  sub_msg.data.size = 0;
 8000fe8:	4b26      	ldr	r3, [pc, #152]	@ (8001084 <ros+0x224>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	605a      	str	r2, [r3, #4]
  sub_msg.data.capacity = 50;
 8000fee:	4b25      	ldr	r3, [pc, #148]	@ (8001084 <ros+0x224>)
 8000ff0:	2232      	movs	r2, #50	@ 0x32
 8000ff2:	609a      	str	r2, [r3, #8]

  // Success - solid green LED
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	4811      	ldr	r0, [pc, #68]	@ (8001040 <ros+0x1e0>)
 8000ffa:	f002 f987 	bl	800330c <HAL_GPIO_WritePin>
  
  uint32_t publish_timer = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	623b      	str	r3, [r7, #32]
  
  /* Infinite loop */
  for(;;)
  {
    // Handle subscriptions
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(10));
 8001002:	4a22      	ldr	r2, [pc, #136]	@ (800108c <ros+0x22c>)
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	481c      	ldr	r0, [pc, #112]	@ (800107c <ros+0x21c>)
 800100a:	f018 f9a3 	bl	8019354 <rclc_executor_spin_some>
    
    // Publish counter every 1 second
    if (publish_timer >= 100) { // 100 * 10ms = 1 second
 800100e:	6a3b      	ldr	r3, [r7, #32]
 8001010:	2b63      	cmp	r3, #99	@ 0x63
 8001012:	d90c      	bls.n	800102e <ros+0x1ce>
      pub_msg.data++;
 8001014:	4b1c      	ldr	r3, [pc, #112]	@ (8001088 <ros+0x228>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	4a1b      	ldr	r2, [pc, #108]	@ (8001088 <ros+0x228>)
 800101c:	6013      	str	r3, [r2, #0]
      rcl_publish(&publisher, &pub_msg, NULL);
 800101e:	2200      	movs	r2, #0
 8001020:	4919      	ldr	r1, [pc, #100]	@ (8001088 <ros+0x228>)
 8001022:	4813      	ldr	r0, [pc, #76]	@ (8001070 <ros+0x210>)
 8001024:	f017 fb62 	bl	80186ec <rcl_publish>
      publish_timer = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
 800102c:	e002      	b.n	8001034 <ros+0x1d4>
    } else {
      publish_timer++;
 800102e:	6a3b      	ldr	r3, [r7, #32]
 8001030:	3301      	adds	r3, #1
 8001032:	623b      	str	r3, [r7, #32]
    }
    
    osDelay(10);
 8001034:	200a      	movs	r0, #10
 8001036:	f005 f98c 	bl	8006352 <osDelay>
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(10));
 800103a:	e7e2      	b.n	8001002 <ros+0x1a2>
 800103c:	cccccccd 	.word	0xcccccccd
 8001040:	40020400 	.word	0x40020400
 8001044:	20000748 	.word	0x20000748
 8001048:	08000975 	.word	0x08000975
 800104c:	08000901 	.word	0x08000901
 8001050:	080008cd 	.word	0x080008cd
 8001054:	08000871 	.word	0x08000871
 8001058:	08026738 	.word	0x08026738
 800105c:	20000624 	.word	0x20000624
 8001060:	08026748 	.word	0x08026748
 8001064:	0802674c 	.word	0x0802674c
 8001068:	20000614 	.word	0x20000614
 800106c:	08026760 	.word	0x08026760
 8001070:	2000061c 	.word	0x2000061c
 8001074:	08026768 	.word	0x08026768
 8001078:	20000620 	.word	0x20000620
 800107c:	20000658 	.word	0x20000658
 8001080:	08000a59 	.word	0x08000a59
 8001084:	200006e4 	.word	0x200006e4
 8001088:	200006e0 	.word	0x200006e0
 800108c:	00989680 	.word	0x00989680

08001090 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a04      	ldr	r2, [pc, #16]	@ (80010b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d101      	bne.n	80010a6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80010a2:	f000 fbdf 	bl	8001864 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40014000 	.word	0x40014000

080010b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b8:	b672      	cpsid	i
}
 80010ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <Error_Handler+0x8>

080010c0 <pca9685_write>:
#include "cmsis_os.h"
#include <math.h>

extern I2C_HandleTypeDef hi2c1;

static void pca9685_write(uint8_t reg, uint8_t *data, uint8_t len) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af04      	add	r7, sp, #16
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	71fb      	strb	r3, [r7, #7]
 80010cc:	4613      	mov	r3, r2
 80010ce:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDR, reg, 1, data, len, HAL_MAX_DELAY);
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	79bb      	ldrb	r3, [r7, #6]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	f04f 31ff 	mov.w	r1, #4294967295
 80010dc:	9102      	str	r1, [sp, #8]
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2301      	movs	r3, #1
 80010e6:	2180      	movs	r1, #128	@ 0x80
 80010e8:	4803      	ldr	r0, [pc, #12]	@ (80010f8 <pca9685_write+0x38>)
 80010ea:	f002 f9df 	bl	80034ac <HAL_I2C_Mem_Write>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200005b4 	.word	0x200005b4

080010fc <pca9685_init>:

void pca9685_init() {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
    uint8_t mode1 = 0x10; // sleep
 8001102:	2310      	movs	r3, #16
 8001104:	71fb      	strb	r3, [r7, #7]
    pca9685_write(0x00, &mode1, 1);
 8001106:	1dfb      	adds	r3, r7, #7
 8001108:	2201      	movs	r2, #1
 800110a:	4619      	mov	r1, r3
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff ffd7 	bl	80010c0 <pca9685_write>

    uint8_t prescale = 121; // ~50Hz
 8001112:	2379      	movs	r3, #121	@ 0x79
 8001114:	71bb      	strb	r3, [r7, #6]
    pca9685_write(0xFE, &prescale, 1);
 8001116:	1dbb      	adds	r3, r7, #6
 8001118:	2201      	movs	r2, #1
 800111a:	4619      	mov	r1, r3
 800111c:	20fe      	movs	r0, #254	@ 0xfe
 800111e:	f7ff ffcf 	bl	80010c0 <pca9685_write>

    mode1 = 0xA1; // auto-increment + restart
 8001122:	23a1      	movs	r3, #161	@ 0xa1
 8001124:	71fb      	strb	r3, [r7, #7]
    pca9685_write(0x00, &mode1, 1);
 8001126:	1dfb      	adds	r3, r7, #7
 8001128:	2201      	movs	r2, #1
 800112a:	4619      	mov	r1, r3
 800112c:	2000      	movs	r0, #0
 800112e:	f7ff ffc7 	bl	80010c0 <pca9685_write>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <angle_to_pwm>:

static uint16_t angle_to_pwm(uint8_t angle) {
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
    // Wider range: ~0.5ms to 2.5ms (102 to 512 PWM values)
    // This matches the 500-2500µs range commonly used
    return (uint16_t)(102 + ((float)angle / 180.0f) * (512 - 102));
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	ee07 3a90 	vmov	s15, r3
 800114c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001150:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001180 <angle_to_pwm+0x44>
 8001154:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001158:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001184 <angle_to_pwm+0x48>
 800115c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001160:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001188 <angle_to_pwm+0x4c>
 8001164:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800116c:	ee17 3a90 	vmov	r3, s15
 8001170:	b29b      	uxth	r3, r3
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	43340000 	.word	0x43340000
 8001184:	43cd0000 	.word	0x43cd0000
 8001188:	42cc0000 	.word	0x42cc0000

0800118c <set_servo>:

void set_servo(uint8_t channel, uint8_t angle) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	460a      	mov	r2, r1
 8001196:	71fb      	strb	r3, [r7, #7]
 8001198:	4613      	mov	r3, r2
 800119a:	71bb      	strb	r3, [r7, #6]
    uint16_t pwm = angle_to_pwm(angle);
 800119c:	79bb      	ldrb	r3, [r7, #6]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ffcc 	bl	800113c <angle_to_pwm>
 80011a4:	4603      	mov	r3, r0
 80011a6:	81fb      	strh	r3, [r7, #14]
    uint8_t reg = 0x06 + 4 * channel;
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	3306      	adds	r3, #6
 80011b0:	737b      	strb	r3, [r7, #13]
    uint8_t data[4] = {0x00, 0x00, pwm & 0xFF, pwm >> 8};
 80011b2:	2300      	movs	r3, #0
 80011b4:	723b      	strb	r3, [r7, #8]
 80011b6:	2300      	movs	r3, #0
 80011b8:	727b      	strb	r3, [r7, #9]
 80011ba:	89fb      	ldrh	r3, [r7, #14]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	72bb      	strb	r3, [r7, #10]
 80011c0:	89fb      	ldrh	r3, [r7, #14]
 80011c2:	0a1b      	lsrs	r3, r3, #8
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	72fb      	strb	r3, [r7, #11]

    pca9685_write(reg, data, 4);
 80011ca:	f107 0108 	add.w	r1, r7, #8
 80011ce:	7b7b      	ldrb	r3, [r7, #13]
 80011d0:	2204      	movs	r2, #4
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff74 	bl	80010c0 <pca9685_write>
}
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011e6:	4b11      	ldr	r3, [pc, #68]	@ (800122c <HAL_MspInit+0x4c>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ea:	4a10      	ldr	r2, [pc, #64]	@ (800122c <HAL_MspInit+0x4c>)
 80011ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f2:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <HAL_MspInit+0x4c>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <HAL_MspInit+0x4c>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001202:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <HAL_MspInit+0x4c>)
 8001204:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001208:	6453      	str	r3, [r2, #68]	@ 0x44
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <HAL_MspInit+0x4c>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	210f      	movs	r1, #15
 800121a:	f06f 0001 	mvn.w	r0, #1
 800121e:	f000 fc29 	bl	8001a74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800

08001230 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b0ae      	sub	sp, #184	@ 0xb8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2290      	movs	r2, #144	@ 0x90
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f024 fabf 	bl	80257d4 <memset>
  if(hi2c->Instance==I2C1)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a22      	ldr	r2, [pc, #136]	@ (80012e4 <HAL_I2C_MspInit+0xb4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d13c      	bne.n	80012da <HAL_I2C_MspInit+0xaa>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001260:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001264:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001266:	2300      	movs	r3, #0
 8001268:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4618      	mov	r0, r3
 8001270:	f003 fa38 	bl	80046e4 <HAL_RCCEx_PeriphCLKConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800127a:	f7ff ff1b 	bl	80010b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	4b1a      	ldr	r3, [pc, #104]	@ (80012e8 <HAL_I2C_MspInit+0xb8>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	4a19      	ldr	r2, [pc, #100]	@ (80012e8 <HAL_I2C_MspInit+0xb8>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	6313      	str	r3, [r2, #48]	@ 0x30
 800128a:	4b17      	ldr	r3, [pc, #92]	@ (80012e8 <HAL_I2C_MspInit+0xb8>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001296:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800129a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800129e:	2312      	movs	r3, #18
 80012a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012aa:	2303      	movs	r3, #3
 80012ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012b0:	2304      	movs	r3, #4
 80012b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012ba:	4619      	mov	r1, r3
 80012bc:	480b      	ldr	r0, [pc, #44]	@ (80012ec <HAL_I2C_MspInit+0xbc>)
 80012be:	f001 fe79 	bl	8002fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012c2:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <HAL_I2C_MspInit+0xb8>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c6:	4a08      	ldr	r2, [pc, #32]	@ (80012e8 <HAL_I2C_MspInit+0xb8>)
 80012c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ce:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <HAL_I2C_MspInit+0xb8>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80012da:	bf00      	nop
 80012dc:	37b8      	adds	r7, #184	@ 0xb8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40005400 	.word	0x40005400
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020400 	.word	0x40020400

080012f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08c      	sub	sp, #48	@ 0x30
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8001300:	4b2f      	ldr	r3, [pc, #188]	@ (80013c0 <HAL_InitTick+0xd0>)
 8001302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001304:	4a2e      	ldr	r2, [pc, #184]	@ (80013c0 <HAL_InitTick+0xd0>)
 8001306:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800130a:	6453      	str	r3, [r2, #68]	@ 0x44
 800130c:	4b2c      	ldr	r3, [pc, #176]	@ (80013c0 <HAL_InitTick+0xd0>)
 800130e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001310:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001318:	f107 020c 	add.w	r2, r7, #12
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	4611      	mov	r1, r2
 8001322:	4618      	mov	r0, r3
 8001324:	f003 f9ac 	bl	8004680 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001328:	f003 f996 	bl	8004658 <HAL_RCC_GetPCLK2Freq>
 800132c:	4603      	mov	r3, r0
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001334:	4a23      	ldr	r2, [pc, #140]	@ (80013c4 <HAL_InitTick+0xd4>)
 8001336:	fba2 2303 	umull	r2, r3, r2, r3
 800133a:	0c9b      	lsrs	r3, r3, #18
 800133c:	3b01      	subs	r3, #1
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001340:	4b21      	ldr	r3, [pc, #132]	@ (80013c8 <HAL_InitTick+0xd8>)
 8001342:	4a22      	ldr	r2, [pc, #136]	@ (80013cc <HAL_InitTick+0xdc>)
 8001344:	601a      	str	r2, [r3, #0]
   * Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8001346:	4b20      	ldr	r3, [pc, #128]	@ (80013c8 <HAL_InitTick+0xd8>)
 8001348:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800134c:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 800134e:	4a1e      	ldr	r2, [pc, #120]	@ (80013c8 <HAL_InitTick+0xd8>)
 8001350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001352:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001354:	4b1c      	ldr	r3, [pc, #112]	@ (80013c8 <HAL_InitTick+0xd8>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135a:	4b1b      	ldr	r3, [pc, #108]	@ (80013c8 <HAL_InitTick+0xd8>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001360:	4b19      	ldr	r3, [pc, #100]	@ (80013c8 <HAL_InitTick+0xd8>)
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8001366:	4818      	ldr	r0, [pc, #96]	@ (80013c8 <HAL_InitTick+0xd8>)
 8001368:	f003 fde4 	bl	8004f34 <HAL_TIM_Base_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001372:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001376:	2b00      	cmp	r3, #0
 8001378:	d11b      	bne.n	80013b2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 800137a:	4813      	ldr	r0, [pc, #76]	@ (80013c8 <HAL_InitTick+0xd8>)
 800137c:	f003 fe3c 	bl	8004ff8 <HAL_TIM_Base_Start_IT>
 8001380:	4603      	mov	r3, r0
 8001382:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001386:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800138a:	2b00      	cmp	r3, #0
 800138c:	d111      	bne.n	80013b2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800138e:	2018      	movs	r0, #24
 8001390:	f000 fb8c 	bl	8001aac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b0f      	cmp	r3, #15
 8001398:	d808      	bhi.n	80013ac <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 800139a:	2200      	movs	r2, #0
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	2018      	movs	r0, #24
 80013a0:	f000 fb68 	bl	8001a74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013a4:	4a0a      	ldr	r2, [pc, #40]	@ (80013d0 <HAL_InitTick+0xe0>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	e002      	b.n	80013b2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80013b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3730      	adds	r7, #48	@ 0x30
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	431bde83 	.word	0x431bde83
 80013c8:	200006f0 	.word	0x200006f0
 80013cc:	40014000 	.word	0x40014000
 80013d0:	2000000c 	.word	0x2000000c

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <NMI_Handler+0x4>

080013dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <HardFault_Handler+0x4>

080013e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <MemManage_Handler+0x4>

080013ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <BusFault_Handler+0x4>

080013f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <UsageFault_Handler+0x4>

080013fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001410:	4802      	ldr	r0, [pc, #8]	@ (800141c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001412:	f003 fe69 	bl	80050e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200006f0 	.word	0x200006f0

08001420 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001424:	4802      	ldr	r0, [pc, #8]	@ (8001430 <ETH_IRQHandler+0x10>)
 8001426:	f000 fedd 	bl	80021e4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20005128 	.word	0x20005128

08001434 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return 1;
 8001438:	2301      	movs	r3, #1
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <_kill>:

int _kill(int pid, int sig)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800144e:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <_kill+0x20>)
 8001450:	2216      	movs	r2, #22
 8001452:	601a      	str	r2, [r3, #0]
  return -1;
 8001454:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	20014c9c 	.word	0x20014c9c

08001468 <_exit>:

void _exit (int status)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001470:	f04f 31ff 	mov.w	r1, #4294967295
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ffe5 	bl	8001444 <_kill>
  while (1) {}    /* Make sure we hang here */
 800147a:	bf00      	nop
 800147c:	e7fd      	b.n	800147a <_exit+0x12>

0800147e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b086      	sub	sp, #24
 8001482:	af00      	add	r7, sp, #0
 8001484:	60f8      	str	r0, [r7, #12]
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	e00a      	b.n	80014a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001490:	f3af 8000 	nop.w
 8001494:	4601      	mov	r1, r0
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	1c5a      	adds	r2, r3, #1
 800149a:	60ba      	str	r2, [r7, #8]
 800149c:	b2ca      	uxtb	r2, r1
 800149e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	3301      	adds	r3, #1
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	dbf0      	blt.n	8001490 <_read+0x12>
  }

  return len;
 80014ae:	687b      	ldr	r3, [r7, #4]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	e009      	b.n	80014de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1c5a      	adds	r2, r3, #1
 80014ce:	60ba      	str	r2, [r7, #8]
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	3301      	adds	r3, #1
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	dbf1      	blt.n	80014ca <_write+0x12>
  }
  return len;
 80014e6:	687b      	ldr	r3, [r7, #4]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <_close>:

int _close(int file)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001518:	605a      	str	r2, [r3, #4]
  return 0;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <_isatty>:

int _isatty(int file)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001530:	2301      	movs	r3, #1
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800153e:	b480      	push	{r7}
 8001540:	b085      	sub	sp, #20
 8001542:	af00      	add	r7, sp, #0
 8001544:	60f8      	str	r0, [r7, #12]
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001558:	b480      	push	{r7}
 800155a:	b087      	sub	sp, #28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001560:	4a14      	ldr	r2, [pc, #80]	@ (80015b4 <_sbrk+0x5c>)
 8001562:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <_sbrk+0x60>)
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800156c:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <_sbrk+0x64>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d102      	bne.n	800157a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001574:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <_sbrk+0x64>)
 8001576:	4a12      	ldr	r2, [pc, #72]	@ (80015c0 <_sbrk+0x68>)
 8001578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800157a:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <_sbrk+0x64>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	429a      	cmp	r2, r3
 8001586:	d205      	bcs.n	8001594 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001588:	4b0e      	ldr	r3, [pc, #56]	@ (80015c4 <_sbrk+0x6c>)
 800158a:	220c      	movs	r2, #12
 800158c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800158e:	f04f 33ff 	mov.w	r3, #4294967295
 8001592:	e009      	b.n	80015a8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001594:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <_sbrk+0x64>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800159a:	4b08      	ldr	r3, [pc, #32]	@ (80015bc <_sbrk+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	4a06      	ldr	r2, [pc, #24]	@ (80015bc <_sbrk+0x64>)
 80015a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015a6:	68fb      	ldr	r3, [r7, #12]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	371c      	adds	r7, #28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	20080000 	.word	0x20080000
 80015b8:	00000400 	.word	0x00000400
 80015bc:	20000740 	.word	0x20000740
 80015c0:	20014ca8 	.word	0x20014ca8
 80015c4:	20014c9c 	.word	0x20014c9c

080015c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015cc:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <SystemInit+0x20>)
 80015ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015d2:	4a05      	ldr	r2, [pc, #20]	@ (80015e8 <SystemInit+0x20>)
 80015d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001624 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015f0:	f7ff ffea 	bl	80015c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015f4:	480c      	ldr	r0, [pc, #48]	@ (8001628 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015f6:	490d      	ldr	r1, [pc, #52]	@ (800162c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001630 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015fc:	e002      	b.n	8001604 <LoopCopyDataInit>

080015fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001602:	3304      	adds	r3, #4

08001604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001608:	d3f9      	bcc.n	80015fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160a:	4a0a      	ldr	r2, [pc, #40]	@ (8001634 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800160c:	4c0a      	ldr	r4, [pc, #40]	@ (8001638 <LoopFillZerobss+0x22>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001610:	e001      	b.n	8001616 <LoopFillZerobss>

08001612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001614:	3204      	adds	r2, #4

08001616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001618:	d3fb      	bcc.n	8001612 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800161a:	f024 f9d3 	bl	80259c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800161e:	f7ff faa1 	bl	8000b64 <main>
  bx  lr    
 8001622:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001624:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800162c:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 8001630:	0802b13c 	.word	0x0802b13c
  ldr r2, =_sbss
 8001634:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8001638:	20014ca4 	.word	0x20014ca4

0800163c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800163c:	e7fe      	b.n	800163c <ADC_IRQHandler>

0800163e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00b      	beq.n	8001666 <LAN8742_RegisterBusIO+0x28>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d007      	beq.n	8001666 <LAN8742_RegisterBusIO+0x28>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <LAN8742_RegisterBusIO+0x28>
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d102      	bne.n	800166c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
 800166a:	e014      	b.n	8001696 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	691a      	ldr	r2, [r3, #16]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d139      	bne.n	8001732 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d002      	beq.n	80016cc <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2220      	movs	r2, #32
 80016d0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	e01c      	b.n	8001712 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	f107 020c 	add.w	r2, r7, #12
 80016e0:	2112      	movs	r1, #18
 80016e2:	6978      	ldr	r0, [r7, #20]
 80016e4:	4798      	blx	r3
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	da03      	bge.n	80016f4 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80016ec:	f06f 0304 	mvn.w	r3, #4
 80016f0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80016f2:	e00b      	b.n	800170c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 031f 	and.w	r3, r3, #31
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d105      	bne.n	800170c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
         break;
 800170a:	e005      	b.n	8001718 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	3301      	adds	r3, #1
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	2b1f      	cmp	r3, #31
 8001716:	d9df      	bls.n	80016d8 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b1f      	cmp	r3, #31
 800171e:	d902      	bls.n	8001726 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001720:	f06f 0302 	mvn.w	r3, #2
 8001724:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d102      	bne.n	8001732 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001732:	693b      	ldr	r3, [r7, #16]
 }
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6810      	ldr	r0, [r2, #0]
 8001750:	f107 020c 	add.w	r2, r7, #12
 8001754:	2101      	movs	r1, #1
 8001756:	4798      	blx	r3
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	da02      	bge.n	8001764 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800175e:	f06f 0304 	mvn.w	r3, #4
 8001762:	e06e      	b.n	8001842 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	6810      	ldr	r0, [r2, #0]
 800176c:	f107 020c 	add.w	r2, r7, #12
 8001770:	2101      	movs	r1, #1
 8001772:	4798      	blx	r3
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	da02      	bge.n	8001780 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800177a:	f06f 0304 	mvn.w	r3, #4
 800177e:	e060      	b.n	8001842 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800178a:	2301      	movs	r3, #1
 800178c:	e059      	b.n	8001842 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6810      	ldr	r0, [r2, #0]
 8001796:	f107 020c 	add.w	r2, r7, #12
 800179a:	2100      	movs	r1, #0
 800179c:	4798      	blx	r3
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	da02      	bge.n	80017aa <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80017a4:	f06f 0304 	mvn.w	r3, #4
 80017a8:	e04b      	b.n	8001842 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d11b      	bne.n	80017ec <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d006      	beq.n	80017cc <LAN8742_GetLinkState+0x90>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80017c8:	2302      	movs	r3, #2
 80017ca:	e03a      	b.n	8001842 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e033      	b.n	8001842 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80017e4:	2304      	movs	r3, #4
 80017e6:	e02c      	b.n	8001842 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80017e8:	2305      	movs	r3, #5
 80017ea:	e02a      	b.n	8001842 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6810      	ldr	r0, [r2, #0]
 80017f4:	f107 020c 	add.w	r2, r7, #12
 80017f8:	211f      	movs	r1, #31
 80017fa:	4798      	blx	r3
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	da02      	bge.n	8001808 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001802:	f06f 0304 	mvn.w	r3, #4
 8001806:	e01c      	b.n	8001842 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001812:	2306      	movs	r3, #6
 8001814:	e015      	b.n	8001842 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f003 031c 	and.w	r3, r3, #28
 800181c:	2b18      	cmp	r3, #24
 800181e:	d101      	bne.n	8001824 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001820:	2302      	movs	r3, #2
 8001822:	e00e      	b.n	8001842 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f003 031c 	and.w	r3, r3, #28
 800182a:	2b08      	cmp	r3, #8
 800182c:	d101      	bne.n	8001832 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800182e:	2303      	movs	r3, #3
 8001830:	e007      	b.n	8001842 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f003 031c 	and.w	r3, r3, #28
 8001838:	2b14      	cmp	r3, #20
 800183a:	d101      	bne.n	8001840 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800183c:	2304      	movs	r3, #4
 800183e:	e000      	b.n	8001842 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001840:	2305      	movs	r3, #5
    }
  }
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184e:	2003      	movs	r0, #3
 8001850:	f000 f905 	bl	8001a5e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001854:	200f      	movs	r0, #15
 8001856:	f7ff fd4b 	bl	80012f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800185a:	f7ff fcc1 	bl	80011e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001868:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <HAL_IncTick+0x20>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <HAL_IncTick+0x24>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4413      	add	r3, r2
 8001874:	4a04      	ldr	r2, [pc, #16]	@ (8001888 <HAL_IncTick+0x24>)
 8001876:	6013      	str	r3, [r2, #0]
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	20000010 	.word	0x20000010
 8001888:	20000744 	.word	0x20000744

0800188c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return uwTick;
 8001890:	4b03      	ldr	r3, [pc, #12]	@ (80018a0 <HAL_GetTick+0x14>)
 8001892:	681b      	ldr	r3, [r3, #0]
}
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20000744 	.word	0x20000744

080018a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ac:	f7ff ffee 	bl	800188c <HAL_GetTick>
 80018b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018bc:	d005      	beq.n	80018ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018be:	4b0a      	ldr	r3, [pc, #40]	@ (80018e8 <HAL_Delay+0x44>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	461a      	mov	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4413      	add	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ca:	bf00      	nop
 80018cc:	f7ff ffde 	bl	800188c <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d8f7      	bhi.n	80018cc <HAL_Delay+0x28>
  {
  }
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000010 	.word	0x20000010

080018ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 80018f0:	4b03      	ldr	r3, [pc, #12]	@ (8001900 <HAL_GetREVID+0x14>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	0c1b      	lsrs	r3, r3, #16
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e0042000 	.word	0xe0042000

08001904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001914:	4b0b      	ldr	r3, [pc, #44]	@ (8001944 <__NVIC_SetPriorityGrouping+0x40>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001920:	4013      	ands	r3, r2
 8001922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800192c:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <__NVIC_SetPriorityGrouping+0x44>)
 800192e:	4313      	orrs	r3, r2
 8001930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001932:	4a04      	ldr	r2, [pc, #16]	@ (8001944 <__NVIC_SetPriorityGrouping+0x40>)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60d3      	str	r3, [r2, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00
 8001948:	05fa0000 	.word	0x05fa0000

0800194c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001950:	4b04      	ldr	r3, [pc, #16]	@ (8001964 <__NVIC_GetPriorityGrouping+0x18>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	0a1b      	lsrs	r3, r3, #8
 8001956:	f003 0307 	and.w	r3, r3, #7
}
 800195a:	4618      	mov	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	2b00      	cmp	r3, #0
 8001978:	db0b      	blt.n	8001992 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	f003 021f 	and.w	r2, r3, #31
 8001980:	4907      	ldr	r1, [pc, #28]	@ (80019a0 <__NVIC_EnableIRQ+0x38>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	095b      	lsrs	r3, r3, #5
 8001988:	2001      	movs	r0, #1
 800198a:	fa00 f202 	lsl.w	r2, r0, r2
 800198e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	e000e100 	.word	0xe000e100

080019a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	6039      	str	r1, [r7, #0]
 80019ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	db0a      	blt.n	80019ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	490c      	ldr	r1, [pc, #48]	@ (80019f0 <__NVIC_SetPriority+0x4c>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	0112      	lsls	r2, r2, #4
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	440b      	add	r3, r1
 80019c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019cc:	e00a      	b.n	80019e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4908      	ldr	r1, [pc, #32]	@ (80019f4 <__NVIC_SetPriority+0x50>)
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	3b04      	subs	r3, #4
 80019dc:	0112      	lsls	r2, r2, #4
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	440b      	add	r3, r1
 80019e2:	761a      	strb	r2, [r3, #24]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000e100 	.word	0xe000e100
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	@ 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f1c3 0307 	rsb	r3, r3, #7
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	bf28      	it	cs
 8001a16:	2304      	movcs	r3, #4
 8001a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d902      	bls.n	8001a28 <NVIC_EncodePriority+0x30>
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3b03      	subs	r3, #3
 8001a26:	e000      	b.n	8001a2a <NVIC_EncodePriority+0x32>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43da      	mvns	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	43d9      	mvns	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	4313      	orrs	r3, r2
         );
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3724      	adds	r7, #36	@ 0x24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ff4c 	bl	8001904 <__NVIC_SetPriorityGrouping>
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
 8001a80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a86:	f7ff ff61 	bl	800194c <__NVIC_GetPriorityGrouping>
 8001a8a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	68b9      	ldr	r1, [r7, #8]
 8001a90:	6978      	ldr	r0, [r7, #20]
 8001a92:	f7ff ffb1 	bl	80019f8 <NVIC_EncodePriority>
 8001a96:	4602      	mov	r2, r0
 8001a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff ff80 	bl	80019a4 <__NVIC_SetPriority>
}
 8001aa4:	bf00      	nop
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff ff54 	bl	8001968 <__NVIC_EnableIRQ>
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e086      	b.n	8001be8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d106      	bne.n	8001af2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f004 f949 	bl	8005d84 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af2:	4b3f      	ldr	r3, [pc, #252]	@ (8001bf0 <HAL_ETH_Init+0x128>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af6:	4a3e      	ldr	r2, [pc, #248]	@ (8001bf0 <HAL_ETH_Init+0x128>)
 8001af8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001afe:	4b3c      	ldr	r3, [pc, #240]	@ (8001bf0 <HAL_ETH_Init+0x128>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001b0a:	4b3a      	ldr	r3, [pc, #232]	@ (8001bf4 <HAL_ETH_Init+0x12c>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	4a39      	ldr	r2, [pc, #228]	@ (8001bf4 <HAL_ETH_Init+0x12c>)
 8001b10:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001b14:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001b16:	4b37      	ldr	r3, [pc, #220]	@ (8001bf4 <HAL_ETH_Init+0x12c>)
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	4935      	ldr	r1, [pc, #212]	@ (8001bf4 <HAL_ETH_Init+0x12c>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001b24:	4b33      	ldr	r3, [pc, #204]	@ (8001bf4 <HAL_ETH_Init+0x12c>)
 8001b26:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b3e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b40:	f7ff fea4 	bl	800188c <HAL_GetTick>
 8001b44:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001b46:	e011      	b.n	8001b6c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001b48:	f7ff fea0 	bl	800188c <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001b56:	d909      	bls.n	8001b6c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2204      	movs	r2, #4
 8001b5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	22e0      	movs	r2, #224	@ 0xe0
 8001b64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e03d      	b.n	8001be8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1e4      	bne.n	8001b48 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 ff5c 	bl	8002a3c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f001 f807 	bl	8002b98 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f001 f85d 	bl	8002c4a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	461a      	mov	r2, r3
 8001b96:	2100      	movs	r1, #0
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 ffc5 	bl	8002b28 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001bac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf8 <HAL_ETH_Init+0x130>)
 8001bbc:	430b      	orrs	r3, r1
 8001bbe:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001bd2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2210      	movs	r2, #16
 8001be2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40013800 	.word	0x40013800
 8001bf8:	00020060 	.word	0x00020060

08001bfc <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c0a:	2b10      	cmp	r3, #16
 8001c0c:	d15f      	bne.n	8001cce <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2220      	movs	r2, #32
 8001c12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2204      	movs	r2, #4
 8001c20:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f9f6 	bl	8002014 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c30:	2001      	movs	r0, #1
 8001c32:	f7ff fe37 	bl	80018a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c50:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c54:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	f043 0302 	orr.w	r3, r3, #2
 8001c68:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c6c:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 fd80 	bl	8002774 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0208 	orr.w	r2, r2, #8
 8001c82:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	f7ff fe09 	bl	80018a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f042 0204 	orr.w	r2, r2, #4
 8001ca8:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cb2:	69d9      	ldr	r1, [r3, #28]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b07      	ldr	r3, [pc, #28]	@ (8001cd8 <HAL_ETH_Start_IT+0xdc>)
 8001cba:	430b      	orrs	r3, r1
 8001cbc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001cc0:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2240      	movs	r2, #64	@ 0x40
 8001cc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e000      	b.n	8001cd0 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
  }
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	0001a0c1 	.word	0x0001a0c1

08001cdc <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001cea:	2b40      	cmp	r3, #64	@ 0x40
 8001cec:	d16e      	bne.n	8001dcc <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cfe:	69d9      	ldr	r1, [r3, #28]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b34      	ldr	r3, [pc, #208]	@ (8001dd8 <HAL_ETH_Stop_IT+0xfc>)
 8001d06:	400b      	ands	r3, r1
 8001d08:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d0c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001d20:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d24:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	f023 0302 	bic.w	r3, r3, #2
 8001d38:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d3c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 0204 	bic.w	r2, r2, #4
 8001d4c:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d56:	2001      	movs	r0, #1
 8001d58:	f7ff fda4 	bl	80018a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 fd05 	bl	8002774 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0208 	bic.w	r2, r2, #8
 8001d78:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d82:	2001      	movs	r0, #1
 8001d84:	f7ff fd8e 	bl	80018a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	e00e      	b.n	8001db4 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	3212      	adds	r2, #18
 8001d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da0:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d9ed      	bls.n	8001d96 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2210      	movs	r2, #16
 8001dc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	e000      	b.n	8001dce <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
  }
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	fffe5f3e 	.word	0xfffe5f3e

08001ddc <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d109      	bne.n	8001e00 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001df2:	f043 0201 	orr.w	r2, r3, #1
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e045      	b.n	8001e8c <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e06:	2b40      	cmp	r3, #64	@ 0x40
 8001e08:	d13f      	bne.n	8001e8a <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001e12:	2201      	movs	r2, #1
 8001e14:	6839      	ldr	r1, [r7, #0]
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 ff86 	bl	8002d28 <ETH_Prepare_Tx_Descriptors>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d009      	beq.n	8001e36 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e28:	f043 0202 	orr.w	r2, r3, #2
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e02a      	b.n	8001e8c <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e36:	f3bf 8f4f 	dsb	sy
}
 8001e3a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d904      	bls.n	8001e58 <HAL_ETH_Transmit_IT+0x7c>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e52:	1f1a      	subs	r2, r3, #4
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00d      	beq.n	8001e86 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e72:	461a      	mov	r2, r3
 8001e74:	2304      	movs	r3, #4
 8001e76:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e80:	461a      	mov	r2, r3
 8001e82:	2300      	movs	r3, #0
 8001e84:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001e86:	2300      	movs	r3, #0
 8001e88:	e000      	b.n	8001e8c <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
  }
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d109      	bne.n	8001ec0 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eb2:	f043 0201 	orr.w	r2, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0a4      	b.n	800200a <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ec6:	2b40      	cmp	r3, #64	@ 0x40
 8001ec8:	d001      	beq.n	8001ece <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e09d      	b.n	800200a <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69fa      	ldr	r2, [r7, #28]
 8001ed8:	3212      	adds	r2, #18
 8001eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ede:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ee4:	f1c3 0304 	rsb	r3, r3, #4
 8001ee8:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001eea:	e066      	b.n	8001fba <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d007      	beq.n	8001f08 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	69da      	ldr	r2, [r3, #28]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	699a      	ldr	r2, [r3, #24]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d103      	bne.n	8001f1c <HAL_ETH_ReadData+0x88>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d03c      	beq.n	8001f96 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	0c1b      	lsrs	r3, r3, #16
 8001f3a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001f3e:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001f54:	2301      	movs	r3, #1
 8001f56:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001f70:	461a      	mov	r2, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	f004 f8d1 	bl	800611c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	441a      	add	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	2200      	movs	r2, #0
 8001f94:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	61fb      	str	r3, [r7, #28]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	2b03      	cmp	r3, #3
 8001fa0:	d902      	bls.n	8001fa8 <HAL_ETH_ReadData+0x114>
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3b04      	subs	r3, #4
 8001fa6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69fa      	ldr	r2, [r7, #28]
 8001fac:	3212      	adds	r2, #18
 8001fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	db06      	blt.n	8001fd0 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d202      	bcs.n	8001fd0 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8001fca:	7cfb      	ldrb	r3, [r7, #19]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d08d      	beq.n	8001eec <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	441a      	add	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d002      	beq.n	8001fea <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f815 	bl	8002014 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001ff0:	7cfb      	ldrb	r3, [r7, #19]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d108      	bne.n	8002008 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	e000      	b.n	800200a <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
}
 800200a:	4618      	mov	r0, r3
 800200c:	3720      	adds	r7, #32
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800201c:	2300      	movs	r3, #0
 800201e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002020:	2301      	movs	r3, #1
 8002022:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002028:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69fa      	ldr	r2, [r7, #28]
 800202e:	3212      	adds	r2, #18
 8002030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002034:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800203a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800203c:	e042      	b.n	80020c4 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d112      	bne.n	800206c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002046:	f107 0308 	add.w	r3, r7, #8
 800204a:	4618      	mov	r0, r3
 800204c:	f004 f836 	bl	80060bc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d102      	bne.n	800205c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002056:	2300      	movs	r3, #0
 8002058:	74fb      	strb	r3, [r7, #19]
 800205a:	e007      	b.n	800206c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	461a      	mov	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	461a      	mov	r2, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800206c:	7cfb      	ldrb	r3, [r7, #19]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d028      	beq.n	80020c4 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002076:	2b00      	cmp	r3, #0
 8002078:	d106      	bne.n	8002088 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695a      	ldr	r2, [r3, #20]
 800207e:	4b26      	ldr	r3, [pc, #152]	@ (8002118 <ETH_UpdateDescriptor+0x104>)
 8002080:	4313      	orrs	r3, r2
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	6053      	str	r3, [r2, #4]
 8002086:	e005      	b.n	8002094 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	3301      	adds	r3, #1
 80020a4:	61fb      	str	r3, [r7, #28]
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d902      	bls.n	80020b2 <ETH_UpdateDescriptor+0x9e>
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	3b04      	subs	r3, #4
 80020b0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69fa      	ldr	r2, [r7, #28]
 80020b6:	3212      	adds	r2, #18
 80020b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020bc:	617b      	str	r3, [r7, #20]
      desccount--;
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <ETH_UpdateDescriptor+0xbc>
 80020ca:	7cfb      	ldrb	r3, [r7, #19]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1b6      	bne.n	800203e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d01a      	beq.n	8002110 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3303      	adds	r3, #3
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80020e4:	f3bf 8f5f 	dmb	sy
}
 80020e8:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6919      	ldr	r1, [r3, #16]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	18ca      	adds	r2, r1, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002102:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002110:	bf00      	nop
 8002112:	3720      	adds	r7, #32
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	80004000 	.word	0x80004000

0800211c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3318      	adds	r3, #24
 8002128:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002134:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002136:	2301      	movs	r3, #1
 8002138:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800213a:	e047      	b.n	80021cc <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 800213c:	2301      	movs	r3, #1
 800213e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	3b01      	subs	r3, #1
 8002144:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	3304      	adds	r3, #4
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10a      	bne.n	800216c <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	3301      	adds	r3, #1
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	2b03      	cmp	r3, #3
 8002160:	d902      	bls.n	8002168 <HAL_ETH_ReleaseTxPacket+0x4c>
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	3b04      	subs	r3, #4
 8002166:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800216c:	7bbb      	ldrb	r3, [r7, #14]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d02c      	beq.n	80021cc <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68d9      	ldr	r1, [r3, #12]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4613      	mov	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	440b      	add	r3, r1
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	db1f      	blt.n	80021c8 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	3304      	adds	r3, #4
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	4618      	mov	r0, r3
 8002196:	f004 f803 	bl	80061a0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	3304      	adds	r3, #4
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	2200      	movs	r2, #0
 80021a6:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	3301      	adds	r3, #1
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d902      	bls.n	80021ba <HAL_ETH_ReleaseTxPacket+0x9e>
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	3b04      	subs	r3, #4
 80021b8:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80021c6:	e001      	b.n	80021cc <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d002      	beq.n	80021d8 <HAL_ETH_ReleaseTxPacket+0xbc>
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1b1      	bne.n	800213c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021f2:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 800220c:	4b4b      	ldr	r3, [pc, #300]	@ (800233c <HAL_ETH_IRQHandler+0x158>)
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00e      	beq.n	800223a <HAL_ETH_IRQHandler+0x56>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002222:	2b00      	cmp	r3, #0
 8002224:	d009      	beq.n	800223a <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800222e:	461a      	mov	r2, r3
 8002230:	4b43      	ldr	r3, [pc, #268]	@ (8002340 <HAL_ETH_IRQHandler+0x15c>)
 8002232:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f003 fab9 	bl	80057ac <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00f      	beq.n	8002264 <HAL_ETH_IRQHandler+0x80>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00a      	beq.n	8002264 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002256:	461a      	mov	r2, r3
 8002258:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800225c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f003 fab4 	bl	80057cc <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d042      	beq.n	80022f4 <HAL_ETH_IRQHandler+0x110>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d03d      	beq.n	80022f4 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800227e:	f043 0208 	orr.w	r2, r3, #8
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d01a      	beq.n	80022c8 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800229a:	695a      	ldr	r2, [r3, #20]
 800229c:	4b29      	ldr	r3, [pc, #164]	@ (8002344 <HAL_ETH_IRQHandler+0x160>)
 800229e:	4013      	ands	r3, r2
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80022b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022bc:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	22e0      	movs	r2, #224	@ 0xe0
 80022c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80022c6:	e012      	b.n	80022ee <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022d0:	695a      	ldr	r2, [r3, #20]
 80022d2:	f248 6380 	movw	r3, #34432	@ 0x8680
 80022d6:	4013      	ands	r3, r2
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022e6:	461a      	mov	r2, r3
 80022e8:	f248 6380 	movw	r3, #34432	@ 0x8680
 80022ec:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f003 fa7c 	bl	80057ec <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00e      	beq.n	800231c <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002304:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f81a 	bl	8002348 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d006      	beq.n	8002334 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002326:	4b05      	ldr	r3, [pc, #20]	@ (800233c <HAL_ETH_IRQHandler+0x158>)
 8002328:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800232c:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f814 	bl	800235c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002334:	bf00      	nop
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40013c00 	.word	0x40013c00
 8002340:	00010040 	.word	0x00010040
 8002344:	007e2000 	.word	0x007e2000

08002348 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
 800237c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f003 031c 	and.w	r3, r3, #28
 800238c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	02db      	lsls	r3, r3, #11
 8002392:	b29b      	uxth	r3, r3
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	4313      	orrs	r3, r2
 8002398:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	019b      	lsls	r3, r3, #6
 800239e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f023 0302 	bic.w	r3, r3, #2
 80023ae:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80023c0:	f7ff fa64 	bl	800188c <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023c6:	e00d      	b.n	80023e4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80023c8:	f7ff fa60 	bl	800188c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023d6:	d301      	bcc.n	80023dc <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e010      	b.n	80023fe <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1ec      	bne.n	80023c8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	461a      	mov	r2, r3
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b086      	sub	sp, #24
 800240a:	af00      	add	r7, sp, #0
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
 8002412:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f003 031c 	and.w	r3, r3, #28
 8002422:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	02db      	lsls	r3, r3, #11
 8002428:	b29b      	uxth	r3, r3
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	4313      	orrs	r3, r2
 800242e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	019b      	lsls	r3, r3, #6
 8002434:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	4313      	orrs	r3, r2
 800243c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f043 0302 	orr.w	r3, r3, #2
 8002444:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002460:	f7ff fa14 	bl	800188c <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002466:	e00d      	b.n	8002484 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002468:	f7ff fa10 	bl	800188c <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002476:	d301      	bcc.n	800247c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e009      	b.n	8002490 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1ec      	bne.n	8002468 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0e6      	b.n	800267a <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0310 	and.w	r3, r3, #16
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	bf14      	ite	ne
 80024ba:	2301      	movne	r3, #1
 80024bc:	2300      	moveq	r3, #0
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bf0c      	ite	eq
 80024e4:	2301      	moveq	r3, #1
 80024e6:	2300      	movne	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	461a      	mov	r2, r3
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	bf14      	ite	ne
 8002500:	2301      	movne	r3, #1
 8002502:	2300      	moveq	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002516:	2b00      	cmp	r3, #0
 8002518:	bf0c      	ite	eq
 800251a:	2301      	moveq	r3, #1
 800251c:	2300      	movne	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf14      	ite	ne
 8002534:	2301      	movne	r3, #1
 8002536:	2300      	moveq	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002566:	2b00      	cmp	r3, #0
 8002568:	bf0c      	ite	eq
 800256a:	2301      	moveq	r3, #1
 800256c:	2300      	movne	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002580:	2b00      	cmp	r3, #0
 8002582:	bf0c      	ite	eq
 8002584:	2301      	moveq	r3, #1
 8002586:	2300      	movne	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800259a:	2b00      	cmp	r3, #0
 800259c:	bf14      	ite	ne
 800259e:	2301      	movne	r3, #1
 80025a0:	2300      	moveq	r3, #0
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	bf14      	ite	ne
 80025c6:	2301      	movne	r3, #1
 80025c8:	2300      	moveq	r3, #0
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf14      	ite	ne
 80025e0:	2301      	movne	r3, #1
 80025e2:	2300      	moveq	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	461a      	mov	r2, r3
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	bf14      	ite	ne
 80025fa:	2301      	movne	r3, #1
 80025fc:	2300      	moveq	r3, #0
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	461a      	mov	r2, r3
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002612:	2b00      	cmp	r3, #0
 8002614:	bf0c      	ite	eq
 8002616:	2301      	moveq	r3, #1
 8002618:	2300      	movne	r3, #0
 800261a:	b2db      	uxtb	r3, r3
 800261c:	461a      	mov	r2, r3
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	0c1b      	lsrs	r3, r3, #16
 800263a:	b29a      	uxth	r2, r3
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f003 0304 	and.w	r3, r3, #4
 800264a:	2b00      	cmp	r3, #0
 800264c:	bf14      	ite	ne
 800264e:	2301      	movne	r3, #1
 8002650:	2300      	moveq	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002666:	2b00      	cmp	r3, #0
 8002668:	bf14      	ite	ne
 800266a:	2301      	movne	r3, #1
 800266c:	2300      	moveq	r3, #0
 800266e:	b2db      	uxtb	r3, r3
 8002670:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e00b      	b.n	80026b2 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026a0:	2b10      	cmp	r3, #16
 80026a2:	d105      	bne.n	80026b0 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80026a4:	6839      	ldr	r1, [r7, #0]
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f88a 	bl	80027c0 <ETH_SetMACConfig>

    return HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	e000      	b.n	80026b2 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
  }
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f023 031c 	bic.w	r3, r3, #28
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80026d4:	f001 ffb4 	bl	8004640 <HAL_RCC_GetHCLKFreq>
 80026d8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	4a14      	ldr	r2, [pc, #80]	@ (8002730 <HAL_ETH_SetMDIOClockRange+0x74>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d804      	bhi.n	80026ec <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f043 0308 	orr.w	r3, r3, #8
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	e019      	b.n	8002720 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	4a11      	ldr	r2, [pc, #68]	@ (8002734 <HAL_ETH_SetMDIOClockRange+0x78>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d204      	bcs.n	80026fe <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f043 030c 	orr.w	r3, r3, #12
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	e010      	b.n	8002720 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	4a0d      	ldr	r2, [pc, #52]	@ (8002738 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d90c      	bls.n	8002720 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	4a0c      	ldr	r2, [pc, #48]	@ (800273c <HAL_ETH_SetMDIOClockRange+0x80>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d804      	bhi.n	8002718 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f043 0304 	orr.w	r3, r3, #4
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	e003      	b.n	8002720 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f043 0310 	orr.w	r3, r3, #16
 800271e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	611a      	str	r2, [r3, #16]
}
 8002728:	bf00      	nop
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	02160ebf 	.word	0x02160ebf
 8002734:	03938700 	.word	0x03938700
 8002738:	05f5e0ff 	.word	0x05f5e0ff
 800273c:	08f0d17f 	.word	0x08f0d17f

08002740 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 800274e:	4618      	mov	r0, r3
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8002768:	4618      	mov	r0, r3
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6812      	ldr	r2, [r2, #0]
 800278e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002792:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002796:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027a4:	2001      	movs	r0, #1
 80027a6:	f7ff f87d 	bl	80018a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027b4:	6193      	str	r3, [r2, #24]
}
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	4b53      	ldr	r3, [pc, #332]	@ (8002924 <ETH_SetMACConfig+0x164>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	7b9b      	ldrb	r3, [r3, #14]
 80027de:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	7c12      	ldrb	r2, [r2, #16]
 80027e4:	2a00      	cmp	r2, #0
 80027e6:	d102      	bne.n	80027ee <ETH_SetMACConfig+0x2e>
 80027e8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80027ec:	e000      	b.n	80027f0 <ETH_SetMACConfig+0x30>
 80027ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80027f0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	7c52      	ldrb	r2, [r2, #17]
 80027f6:	2a00      	cmp	r2, #0
 80027f8:	d102      	bne.n	8002800 <ETH_SetMACConfig+0x40>
 80027fa:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80027fe:	e000      	b.n	8002802 <ETH_SetMACConfig+0x42>
 8002800:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002802:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002808:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	7fdb      	ldrb	r3, [r3, #31]
 800280e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002810:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002816:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	7f92      	ldrb	r2, [r2, #30]
 800281c:	2a00      	cmp	r2, #0
 800281e:	d102      	bne.n	8002826 <ETH_SetMACConfig+0x66>
 8002820:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002824:	e000      	b.n	8002828 <ETH_SetMACConfig+0x68>
 8002826:	2200      	movs	r2, #0
                        macconf->Speed |
 8002828:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	7f1b      	ldrb	r3, [r3, #28]
 800282e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002830:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002836:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	791b      	ldrb	r3, [r3, #4]
 800283c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800283e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002846:	2a00      	cmp	r2, #0
 8002848:	d102      	bne.n	8002850 <ETH_SetMACConfig+0x90>
 800284a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800284e:	e000      	b.n	8002852 <ETH_SetMACConfig+0x92>
 8002850:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002852:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	7bdb      	ldrb	r3, [r3, #15]
 8002858:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800285a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002860:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002868:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800286a:	4313      	orrs	r3, r2
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002882:	2001      	movs	r0, #1
 8002884:	f7ff f80e 	bl	80018a4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800289e:	4013      	ands	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028a6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80028ae:	2a00      	cmp	r2, #0
 80028b0:	d101      	bne.n	80028b6 <ETH_SetMACConfig+0xf6>
 80028b2:	2280      	movs	r2, #128	@ 0x80
 80028b4:	e000      	b.n	80028b8 <ETH_SetMACConfig+0xf8>
 80028b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028b8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80028be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80028c6:	2a01      	cmp	r2, #1
 80028c8:	d101      	bne.n	80028ce <ETH_SetMACConfig+0x10e>
 80028ca:	2208      	movs	r2, #8
 80028cc:	e000      	b.n	80028d0 <ETH_SetMACConfig+0x110>
 80028ce:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80028d0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80028d8:	2a01      	cmp	r2, #1
 80028da:	d101      	bne.n	80028e0 <ETH_SetMACConfig+0x120>
 80028dc:	2204      	movs	r2, #4
 80028de:	e000      	b.n	80028e2 <ETH_SetMACConfig+0x122>
 80028e0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80028e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80028ea:	2a01      	cmp	r2, #1
 80028ec:	d101      	bne.n	80028f2 <ETH_SetMACConfig+0x132>
 80028ee:	2202      	movs	r2, #2
 80028f0:	e000      	b.n	80028f4 <ETH_SetMACConfig+0x134>
 80028f2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028f4:	4313      	orrs	r3, r2
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800290c:	2001      	movs	r0, #1
 800290e:	f7fe ffc9 	bl	80018a4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	619a      	str	r2, [r3, #24]
}
 800291a:	bf00      	nop
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	fd20810f 	.word	0xfd20810f

08002928 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4b3d      	ldr	r3, [pc, #244]	@ (8002a38 <ETH_SetDMAConfig+0x110>)
 8002942:	4013      	ands	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	7b1b      	ldrb	r3, [r3, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d102      	bne.n	8002954 <ETH_SetDMAConfig+0x2c>
 800294e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002952:	e000      	b.n	8002956 <ETH_SetDMAConfig+0x2e>
 8002954:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	7b5b      	ldrb	r3, [r3, #13]
 800295a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800295c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	7f52      	ldrb	r2, [r2, #29]
 8002962:	2a00      	cmp	r2, #0
 8002964:	d102      	bne.n	800296c <ETH_SetDMAConfig+0x44>
 8002966:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800296a:	e000      	b.n	800296e <ETH_SetDMAConfig+0x46>
 800296c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800296e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	7b9b      	ldrb	r3, [r3, #14]
 8002974:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002976:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800297c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	7f1b      	ldrb	r3, [r3, #28]
 8002982:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002984:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	7f9b      	ldrb	r3, [r3, #30]
 800298a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800298c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002992:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800299a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800299c:	4313      	orrs	r3, r2
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029ac:	461a      	mov	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029be:	2001      	movs	r0, #1
 80029c0:	f7fe ff70 	bl	80018a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029cc:	461a      	mov	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	791b      	ldrb	r3, [r3, #4]
 80029d6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029dc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80029e2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80029e8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80029f0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80029f2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80029fa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a00:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6812      	ldr	r2, [r2, #0]
 8002a06:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a0a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a0e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	f7fe ff41 	bl	80018a4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6013      	str	r3, [r2, #0]
}
 8002a30:	bf00      	nop
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	f8de3f23 	.word	0xf8de3f23

08002a3c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b0a6      	sub	sp, #152	@ 0x98
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002a44:	2301      	movs	r3, #1
 8002a46:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002a50:	2300      	movs	r3, #0
 8002a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002a60:	2300      	movs	r3, #0
 8002a62:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002a66:	2301      	movs	r3, #1
 8002a68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002a72:	2300      	movs	r3, #0
 8002a74:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002a82:	2300      	movs	r3, #0
 8002a84:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002a92:	2300      	movs	r3, #0
 8002a94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002aa4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002aaa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002ab6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002aba:	4619      	mov	r1, r3
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff fe7f 	bl	80027c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002aca:	2301      	movs	r3, #1
 8002acc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002aee:	2301      	movs	r3, #1
 8002af0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002af2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002af6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002af8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002afc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002afe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b02:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002b04:	2301      	movs	r3, #1
 8002b06:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002b12:	f107 0308 	add.w	r3, r7, #8
 8002b16:	4619      	mov	r1, r3
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff ff05 	bl	8002928 <ETH_SetDMAConfig>
}
 8002b1e:	bf00      	nop
 8002b20:	3798      	adds	r7, #152	@ 0x98
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
	...

08002b28 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3305      	adds	r3, #5
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	3204      	adds	r2, #4
 8002b40:	7812      	ldrb	r2, [r2, #0]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	4b11      	ldr	r3, [pc, #68]	@ (8002b90 <ETH_MACAddressConfig+0x68>)
 8002b4a:	4413      	add	r3, r2
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3303      	adds	r3, #3
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	061a      	lsls	r2, r3, #24
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3302      	adds	r3, #2
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	041b      	lsls	r3, r3, #16
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3301      	adds	r3, #1
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	021b      	lsls	r3, r3, #8
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	7812      	ldrb	r2, [r2, #0]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	4b06      	ldr	r3, [pc, #24]	@ (8002b94 <ETH_MACAddressConfig+0x6c>)
 8002b7a:	4413      	add	r3, r2
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	6013      	str	r3, [r2, #0]
}
 8002b82:	bf00      	nop
 8002b84:	371c      	adds	r7, #28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40028040 	.word	0x40028040
 8002b94:	40028044 	.word	0x40028044

08002b98 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	e03e      	b.n	8002c24 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68d9      	ldr	r1, [r3, #12]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	440b      	add	r3, r1
 8002bb6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002bd0:	68b9      	ldr	r1, [r7, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	3206      	adds	r2, #6
 8002bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d80c      	bhi.n	8002c08 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68d9      	ldr	r1, [r3, #12]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	440b      	add	r3, r1
 8002c00:	461a      	mov	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	60da      	str	r2, [r3, #12]
 8002c06:	e004      	b.n	8002c12 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	3301      	adds	r3, #1
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d9bd      	bls.n	8002ba6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c3c:	611a      	str	r2, [r3, #16]
}
 8002c3e:	bf00      	nop
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b085      	sub	sp, #20
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	e048      	b.n	8002cea <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6919      	ldr	r1, [r3, #16]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	440b      	add	r3, r1
 8002c68:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2200      	movs	r2, #0
 8002c74:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2200      	movs	r2, #0
 8002c86:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002c94:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002cae:	68b9      	ldr	r1, [r7, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	3212      	adds	r2, #18
 8002cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d80c      	bhi.n	8002cda <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6919      	ldr	r1, [r3, #16]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	440b      	add	r3, r1
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	60da      	str	r2, [r3, #12]
 8002cd8:	e004      	b.n	8002ce4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d9b3      	bls.n	8002c58 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691a      	ldr	r2, [r3, #16]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d1a:	60da      	str	r2, [r3, #12]
}
 8002d1c:	bf00      	nop
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b091      	sub	sp, #68	@ 0x44
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	3318      	adds	r3, #24
 8002d38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d52:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d6a:	d007      	beq.n	8002d7c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d70:	3304      	adds	r3, #4
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e111      	b.n	8002fa4 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8002d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d82:	3301      	adds	r3, #1
 8002d84:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d8e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	4b86      	ldr	r3, [pc, #536]	@ (8002fb0 <ETH_Prepare_Tx_Descriptors+0x288>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d9a:	6852      	ldr	r2, [r2, #4]
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d008      	beq.n	8002dc0 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dbe:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ddc:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0304 	and.w	r3, r3, #4
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e00:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002e02:	e082      	b.n	8002f0a <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0e:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d006      	beq.n	8002e24 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	e005      	b.n	8002e30 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2e:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e32:	3301      	adds	r3, #1
 8002e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d902      	bls.n	8002e42 <ETH_Prepare_Tx_Descriptors+0x11a>
 8002e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e3e:	3b04      	subs	r3, #4
 8002e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e4a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e58:	d007      	beq.n	8002e6a <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e5e:	3304      	adds	r3, #4
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d029      	beq.n	8002ebe <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e76:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002e78:	2300      	movs	r3, #0
 8002e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e7c:	e019      	b.n	8002eb2 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8002e7e:	f3bf 8f5f 	dmb	sy
}
 8002e82:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8e:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e92:	3301      	adds	r3, #1
 8002e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d902      	bls.n	8002ea2 <ETH_Prepare_Tx_Descriptors+0x17a>
 8002e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e9e:	3b04      	subs	r3, #4
 8002ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eaa:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eae:	3301      	adds	r3, #1
 8002eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002eb2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d3e1      	bcc.n	8002e7e <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e072      	b.n	8002fa4 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec8:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ecc:	3301      	adds	r3, #1
 8002ece:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ede:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	4b32      	ldr	r3, [pc, #200]	@ (8002fb0 <ETH_Prepare_Tx_Descriptors+0x288>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002eea:	6852      	ldr	r2, [r2, #4]
 8002eec:	431a      	orrs	r2, r3
 8002eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef0:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002ef8:	f3bf 8f5f 	dmb	sy
}
 8002efc:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f08:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f47f af78 	bne.w	8002e04 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d006      	beq.n	8002f28 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	e005      	b.n	8002f34 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f32:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f3e:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f42:	6a3a      	ldr	r2, [r7, #32]
 8002f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f48:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002f4a:	f3bf 8f5f 	dmb	sy
}
 8002f4e:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5a:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f64:	3304      	adds	r3, #4
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f70:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f72:	f3ef 8310 	mrs	r3, PRIMASK
 8002f76:	613b      	str	r3, [r7, #16]
  return(result);
 8002f78:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002f7a:	61fb      	str	r3, [r7, #28]
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f383 8810 	msr	PRIMASK, r3
}
 8002f86:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f8e:	4413      	add	r3, r2
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f94:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	f383 8810 	msr	PRIMASK, r3
}
 8002fa0:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3744      	adds	r7, #68	@ 0x44
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	ffffe000 	.word	0xffffe000

08002fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b089      	sub	sp, #36	@ 0x24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61fb      	str	r3, [r7, #28]
 8002fd2:	e175      	b.n	80032c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	f040 8164 	bne.w	80032ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d005      	beq.n	800300a <HAL_GPIO_Init+0x56>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d130      	bne.n	800306c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	2203      	movs	r2, #3
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43db      	mvns	r3, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4013      	ands	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003040:	2201      	movs	r2, #1
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	091b      	lsrs	r3, r3, #4
 8003056:	f003 0201 	and.w	r2, r3, #1
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	2b03      	cmp	r3, #3
 8003076:	d017      	beq.n	80030a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	2203      	movs	r2, #3
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d123      	bne.n	80030fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	08da      	lsrs	r2, r3, #3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3208      	adds	r2, #8
 80030bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	220f      	movs	r2, #15
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4013      	ands	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	08da      	lsrs	r2, r3, #3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3208      	adds	r2, #8
 80030f6:	69b9      	ldr	r1, [r7, #24]
 80030f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	2203      	movs	r2, #3
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f003 0203 	and.w	r2, r3, #3
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80be 	beq.w	80032ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800313e:	4b66      	ldr	r3, [pc, #408]	@ (80032d8 <HAL_GPIO_Init+0x324>)
 8003140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003142:	4a65      	ldr	r2, [pc, #404]	@ (80032d8 <HAL_GPIO_Init+0x324>)
 8003144:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003148:	6453      	str	r3, [r2, #68]	@ 0x44
 800314a:	4b63      	ldr	r3, [pc, #396]	@ (80032d8 <HAL_GPIO_Init+0x324>)
 800314c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003156:	4a61      	ldr	r2, [pc, #388]	@ (80032dc <HAL_GPIO_Init+0x328>)
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	089b      	lsrs	r3, r3, #2
 800315c:	3302      	adds	r3, #2
 800315e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	220f      	movs	r2, #15
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4013      	ands	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a58      	ldr	r2, [pc, #352]	@ (80032e0 <HAL_GPIO_Init+0x32c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d037      	beq.n	80031f2 <HAL_GPIO_Init+0x23e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a57      	ldr	r2, [pc, #348]	@ (80032e4 <HAL_GPIO_Init+0x330>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d031      	beq.n	80031ee <HAL_GPIO_Init+0x23a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a56      	ldr	r2, [pc, #344]	@ (80032e8 <HAL_GPIO_Init+0x334>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d02b      	beq.n	80031ea <HAL_GPIO_Init+0x236>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a55      	ldr	r2, [pc, #340]	@ (80032ec <HAL_GPIO_Init+0x338>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d025      	beq.n	80031e6 <HAL_GPIO_Init+0x232>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a54      	ldr	r2, [pc, #336]	@ (80032f0 <HAL_GPIO_Init+0x33c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d01f      	beq.n	80031e2 <HAL_GPIO_Init+0x22e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a53      	ldr	r2, [pc, #332]	@ (80032f4 <HAL_GPIO_Init+0x340>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d019      	beq.n	80031de <HAL_GPIO_Init+0x22a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a52      	ldr	r2, [pc, #328]	@ (80032f8 <HAL_GPIO_Init+0x344>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d013      	beq.n	80031da <HAL_GPIO_Init+0x226>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a51      	ldr	r2, [pc, #324]	@ (80032fc <HAL_GPIO_Init+0x348>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00d      	beq.n	80031d6 <HAL_GPIO_Init+0x222>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a50      	ldr	r2, [pc, #320]	@ (8003300 <HAL_GPIO_Init+0x34c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d007      	beq.n	80031d2 <HAL_GPIO_Init+0x21e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a4f      	ldr	r2, [pc, #316]	@ (8003304 <HAL_GPIO_Init+0x350>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d101      	bne.n	80031ce <HAL_GPIO_Init+0x21a>
 80031ca:	2309      	movs	r3, #9
 80031cc:	e012      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031ce:	230a      	movs	r3, #10
 80031d0:	e010      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031d2:	2308      	movs	r3, #8
 80031d4:	e00e      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031d6:	2307      	movs	r3, #7
 80031d8:	e00c      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031da:	2306      	movs	r3, #6
 80031dc:	e00a      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031de:	2305      	movs	r3, #5
 80031e0:	e008      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031e2:	2304      	movs	r3, #4
 80031e4:	e006      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031e6:	2303      	movs	r3, #3
 80031e8:	e004      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031ea:	2302      	movs	r3, #2
 80031ec:	e002      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031f2:	2300      	movs	r3, #0
 80031f4:	69fa      	ldr	r2, [r7, #28]
 80031f6:	f002 0203 	and.w	r2, r2, #3
 80031fa:	0092      	lsls	r2, r2, #2
 80031fc:	4093      	lsls	r3, r2
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4313      	orrs	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003204:	4935      	ldr	r1, [pc, #212]	@ (80032dc <HAL_GPIO_Init+0x328>)
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	089b      	lsrs	r3, r3, #2
 800320a:	3302      	adds	r3, #2
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003212:	4b3d      	ldr	r3, [pc, #244]	@ (8003308 <HAL_GPIO_Init+0x354>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	43db      	mvns	r3, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4013      	ands	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4313      	orrs	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003236:	4a34      	ldr	r2, [pc, #208]	@ (8003308 <HAL_GPIO_Init+0x354>)
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800323c:	4b32      	ldr	r3, [pc, #200]	@ (8003308 <HAL_GPIO_Init+0x354>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	43db      	mvns	r3, r3
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4013      	ands	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003260:	4a29      	ldr	r2, [pc, #164]	@ (8003308 <HAL_GPIO_Init+0x354>)
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003266:	4b28      	ldr	r3, [pc, #160]	@ (8003308 <HAL_GPIO_Init+0x354>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	43db      	mvns	r3, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4013      	ands	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800328a:	4a1f      	ldr	r2, [pc, #124]	@ (8003308 <HAL_GPIO_Init+0x354>)
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003290:	4b1d      	ldr	r3, [pc, #116]	@ (8003308 <HAL_GPIO_Init+0x354>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	43db      	mvns	r3, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4013      	ands	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032b4:	4a14      	ldr	r2, [pc, #80]	@ (8003308 <HAL_GPIO_Init+0x354>)
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3301      	adds	r3, #1
 80032be:	61fb      	str	r3, [r7, #28]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	2b0f      	cmp	r3, #15
 80032c4:	f67f ae86 	bls.w	8002fd4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80032c8:	bf00      	nop
 80032ca:	bf00      	nop
 80032cc:	3724      	adds	r7, #36	@ 0x24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40023800 	.word	0x40023800
 80032dc:	40013800 	.word	0x40013800
 80032e0:	40020000 	.word	0x40020000
 80032e4:	40020400 	.word	0x40020400
 80032e8:	40020800 	.word	0x40020800
 80032ec:	40020c00 	.word	0x40020c00
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40021400 	.word	0x40021400
 80032f8:	40021800 	.word	0x40021800
 80032fc:	40021c00 	.word	0x40021c00
 8003300:	40022000 	.word	0x40022000
 8003304:	40022400 	.word	0x40022400
 8003308:	40013c00 	.word	0x40013c00

0800330c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	807b      	strh	r3, [r7, #2]
 8003318:	4613      	mov	r3, r2
 800331a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800331c:	787b      	ldrb	r3, [r7, #1]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003322:	887a      	ldrh	r2, [r7, #2]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003328:	e003      	b.n	8003332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800332a:	887b      	ldrh	r3, [r7, #2]
 800332c:	041a      	lsls	r2, r3, #16
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	619a      	str	r2, [r3, #24]
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800333e:	b480      	push	{r7}
 8003340:	b085      	sub	sp, #20
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
 8003346:	460b      	mov	r3, r1
 8003348:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003350:	887a      	ldrh	r2, [r7, #2]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4013      	ands	r3, r2
 8003356:	041a      	lsls	r2, r3, #16
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	43d9      	mvns	r1, r3
 800335c:	887b      	ldrh	r3, [r7, #2]
 800335e:	400b      	ands	r3, r1
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	619a      	str	r2, [r3, #24]
}
 8003366:	bf00      	nop
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e08b      	b.n	800349e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7fd ff48 	bl	8001230 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2224      	movs	r2, #36	@ 0x24
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0201 	bic.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d107      	bne.n	80033ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033ea:	609a      	str	r2, [r3, #8]
 80033ec:	e006      	b.n	80033fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	2b02      	cmp	r3, #2
 8003402:	d108      	bne.n	8003416 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003412:	605a      	str	r2, [r3, #4]
 8003414:	e007      	b.n	8003426 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003424:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6859      	ldr	r1, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	4b1d      	ldr	r3, [pc, #116]	@ (80034a8 <HAL_I2C_Init+0x134>)
 8003432:	430b      	orrs	r3, r1
 8003434:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003444:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691a      	ldr	r2, [r3, #16]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69d9      	ldr	r1, [r3, #28]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a1a      	ldr	r2, [r3, #32]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0201 	orr.w	r2, r2, #1
 800347e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2220      	movs	r2, #32
 800348a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	02008000 	.word	0x02008000

080034ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af02      	add	r7, sp, #8
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	4608      	mov	r0, r1
 80034b6:	4611      	mov	r1, r2
 80034b8:	461a      	mov	r2, r3
 80034ba:	4603      	mov	r3, r0
 80034bc:	817b      	strh	r3, [r7, #10]
 80034be:	460b      	mov	r3, r1
 80034c0:	813b      	strh	r3, [r7, #8]
 80034c2:	4613      	mov	r3, r2
 80034c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b20      	cmp	r3, #32
 80034d0:	f040 80f9 	bne.w	80036c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <HAL_I2C_Mem_Write+0x34>
 80034da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d105      	bne.n	80034ec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034e6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0ed      	b.n	80036c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d101      	bne.n	80034fa <HAL_I2C_Mem_Write+0x4e>
 80034f6:	2302      	movs	r3, #2
 80034f8:	e0e6      	b.n	80036c8 <HAL_I2C_Mem_Write+0x21c>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003502:	f7fe f9c3 	bl	800188c <HAL_GetTick>
 8003506:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	2319      	movs	r3, #25
 800350e:	2201      	movs	r2, #1
 8003510:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 f955 	bl	80037c4 <I2C_WaitOnFlagUntilTimeout>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0d1      	b.n	80036c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2221      	movs	r2, #33	@ 0x21
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2240      	movs	r2, #64	@ 0x40
 8003530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a3a      	ldr	r2, [r7, #32]
 800353e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003544:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800354c:	88f8      	ldrh	r0, [r7, #6]
 800354e:	893a      	ldrh	r2, [r7, #8]
 8003550:	8979      	ldrh	r1, [r7, #10]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	9301      	str	r3, [sp, #4]
 8003556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	4603      	mov	r3, r0
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 f8b9 	bl	80036d4 <I2C_RequestMemoryWrite>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0a9      	b.n	80036c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003578:	b29b      	uxth	r3, r3
 800357a:	2bff      	cmp	r3, #255	@ 0xff
 800357c:	d90e      	bls.n	800359c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	22ff      	movs	r2, #255	@ 0xff
 8003582:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003588:	b2da      	uxtb	r2, r3
 800358a:	8979      	ldrh	r1, [r7, #10]
 800358c:	2300      	movs	r3, #0
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 fad9 	bl	8003b4c <I2C_TransferConfig>
 800359a:	e00f      	b.n	80035bc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	8979      	ldrh	r1, [r7, #10]
 80035ae:	2300      	movs	r3, #0
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 fac8 	bl	8003b4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 f958 	bl	8003876 <I2C_WaitOnTXISFlagUntilTimeout>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e07b      	b.n	80036c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d4:	781a      	ldrb	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d034      	beq.n	8003674 <HAL_I2C_Mem_Write+0x1c8>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800360e:	2b00      	cmp	r3, #0
 8003610:	d130      	bne.n	8003674 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003618:	2200      	movs	r2, #0
 800361a:	2180      	movs	r1, #128	@ 0x80
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 f8d1 	bl	80037c4 <I2C_WaitOnFlagUntilTimeout>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e04d      	b.n	80036c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	2bff      	cmp	r3, #255	@ 0xff
 8003634:	d90e      	bls.n	8003654 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	22ff      	movs	r2, #255	@ 0xff
 800363a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003640:	b2da      	uxtb	r2, r3
 8003642:	8979      	ldrh	r1, [r7, #10]
 8003644:	2300      	movs	r3, #0
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 fa7d 	bl	8003b4c <I2C_TransferConfig>
 8003652:	e00f      	b.n	8003674 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003662:	b2da      	uxtb	r2, r3
 8003664:	8979      	ldrh	r1, [r7, #10]
 8003666:	2300      	movs	r3, #0
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 fa6c 	bl	8003b4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d19e      	bne.n	80035bc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 f93e 	bl	8003904 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e01a      	b.n	80036c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2220      	movs	r2, #32
 8003698:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6859      	ldr	r1, [r3, #4]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	4b0a      	ldr	r3, [pc, #40]	@ (80036d0 <HAL_I2C_Mem_Write+0x224>)
 80036a6:	400b      	ands	r3, r1
 80036a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	e000      	b.n	80036c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80036c6:	2302      	movs	r3, #2
  }
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	fe00e800 	.word	0xfe00e800

080036d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af02      	add	r7, sp, #8
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	4608      	mov	r0, r1
 80036de:	4611      	mov	r1, r2
 80036e0:	461a      	mov	r2, r3
 80036e2:	4603      	mov	r3, r0
 80036e4:	817b      	strh	r3, [r7, #10]
 80036e6:	460b      	mov	r3, r1
 80036e8:	813b      	strh	r3, [r7, #8]
 80036ea:	4613      	mov	r3, r2
 80036ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80036ee:	88fb      	ldrh	r3, [r7, #6]
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	8979      	ldrh	r1, [r7, #10]
 80036f4:	4b20      	ldr	r3, [pc, #128]	@ (8003778 <I2C_RequestMemoryWrite+0xa4>)
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 fa25 	bl	8003b4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003702:	69fa      	ldr	r2, [r7, #28]
 8003704:	69b9      	ldr	r1, [r7, #24]
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 f8b5 	bl	8003876 <I2C_WaitOnTXISFlagUntilTimeout>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e02c      	b.n	8003770 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d105      	bne.n	8003728 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800371c:	893b      	ldrh	r3, [r7, #8]
 800371e:	b2da      	uxtb	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	629a      	str	r2, [r3, #40]	@ 0x28
 8003726:	e015      	b.n	8003754 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003728:	893b      	ldrh	r3, [r7, #8]
 800372a:	0a1b      	lsrs	r3, r3, #8
 800372c:	b29b      	uxth	r3, r3
 800372e:	b2da      	uxtb	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	69b9      	ldr	r1, [r7, #24]
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 f89b 	bl	8003876 <I2C_WaitOnTXISFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e012      	b.n	8003770 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800374a:	893b      	ldrh	r3, [r7, #8]
 800374c:	b2da      	uxtb	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	2200      	movs	r2, #0
 800375c:	2180      	movs	r1, #128	@ 0x80
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 f830 	bl	80037c4 <I2C_WaitOnFlagUntilTimeout>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	80002000 	.word	0x80002000

0800377c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b02      	cmp	r3, #2
 8003790:	d103      	bne.n	800379a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2200      	movs	r2, #0
 8003798:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d007      	beq.n	80037b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699a      	ldr	r2, [r3, #24]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0201 	orr.w	r2, r2, #1
 80037b6:	619a      	str	r2, [r3, #24]
  }
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	4613      	mov	r3, r2
 80037d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037d4:	e03b      	b.n	800384e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	6839      	ldr	r1, [r7, #0]
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 f8d6 	bl	800398c <I2C_IsErrorOccurred>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e041      	b.n	800386e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f0:	d02d      	beq.n	800384e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f2:	f7fe f84b 	bl	800188c <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d302      	bcc.n	8003808 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d122      	bne.n	800384e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699a      	ldr	r2, [r3, #24]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	4013      	ands	r3, r2
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	429a      	cmp	r2, r3
 8003816:	bf0c      	ite	eq
 8003818:	2301      	moveq	r3, #1
 800381a:	2300      	movne	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	461a      	mov	r2, r3
 8003820:	79fb      	ldrb	r3, [r7, #7]
 8003822:	429a      	cmp	r2, r3
 8003824:	d113      	bne.n	800384e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382a:	f043 0220 	orr.w	r2, r3, #32
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e00f      	b.n	800386e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	699a      	ldr	r2, [r3, #24]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	4013      	ands	r3, r2
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	429a      	cmp	r2, r3
 800385c:	bf0c      	ite	eq
 800385e:	2301      	moveq	r3, #1
 8003860:	2300      	movne	r3, #0
 8003862:	b2db      	uxtb	r3, r3
 8003864:	461a      	mov	r2, r3
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	429a      	cmp	r2, r3
 800386a:	d0b4      	beq.n	80037d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b084      	sub	sp, #16
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003882:	e033      	b.n	80038ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	68b9      	ldr	r1, [r7, #8]
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 f87f 	bl	800398c <I2C_IsErrorOccurred>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e031      	b.n	80038fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389e:	d025      	beq.n	80038ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a0:	f7fd fff4 	bl	800188c <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d302      	bcc.n	80038b6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d11a      	bne.n	80038ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d013      	beq.n	80038ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c8:	f043 0220 	orr.w	r2, r3, #32
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e007      	b.n	80038fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d1c4      	bne.n	8003884 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003910:	e02f      	b.n	8003972 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	68b9      	ldr	r1, [r7, #8]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f838 	bl	800398c <I2C_IsErrorOccurred>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e02d      	b.n	8003982 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003926:	f7fd ffb1 	bl	800188c <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	429a      	cmp	r2, r3
 8003934:	d302      	bcc.n	800393c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d11a      	bne.n	8003972 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	2b20      	cmp	r3, #32
 8003948:	d013      	beq.n	8003972 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800394e:	f043 0220 	orr.w	r2, r3, #32
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e007      	b.n	8003982 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	f003 0320 	and.w	r3, r3, #32
 800397c:	2b20      	cmp	r3, #32
 800397e:	d1c8      	bne.n	8003912 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b08a      	sub	sp, #40	@ 0x28
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d068      	beq.n	8003a8a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2210      	movs	r2, #16
 80039be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039c0:	e049      	b.n	8003a56 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c8:	d045      	beq.n	8003a56 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039ca:	f7fd ff5f 	bl	800188c <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d302      	bcc.n	80039e0 <I2C_IsErrorOccurred+0x54>
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d13a      	bne.n	8003a56 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a02:	d121      	bne.n	8003a48 <I2C_IsErrorOccurred+0xbc>
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a0a:	d01d      	beq.n	8003a48 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003a0c:	7cfb      	ldrb	r3, [r7, #19]
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d01a      	beq.n	8003a48 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a20:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a22:	f7fd ff33 	bl	800188c <HAL_GetTick>
 8003a26:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a28:	e00e      	b.n	8003a48 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a2a:	f7fd ff2f 	bl	800188c <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b19      	cmp	r3, #25
 8003a36:	d907      	bls.n	8003a48 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	f043 0320 	orr.w	r3, r3, #32
 8003a3e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003a46:	e006      	b.n	8003a56 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b20      	cmp	r3, #32
 8003a54:	d1e9      	bne.n	8003a2a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	d003      	beq.n	8003a6c <I2C_IsErrorOccurred+0xe0>
 8003a64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0aa      	beq.n	80039c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d103      	bne.n	8003a7c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	f043 0304 	orr.w	r3, r3, #4
 8003a82:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00b      	beq.n	8003ab4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	f043 0301 	orr.w	r3, r3, #1
 8003aa2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003aac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00b      	beq.n	8003ad6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	f043 0308 	orr.w	r3, r3, #8
 8003ac4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ace:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00b      	beq.n	8003af8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	f043 0302 	orr.w	r3, r3, #2
 8003ae6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003af0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003af8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d01c      	beq.n	8003b3a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f7ff fe3b 	bl	800377c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6859      	ldr	r1, [r3, #4]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	4b0d      	ldr	r3, [pc, #52]	@ (8003b48 <I2C_IsErrorOccurred+0x1bc>)
 8003b12:	400b      	ands	r3, r1
 8003b14:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2220      	movs	r2, #32
 8003b26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003b3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3728      	adds	r7, #40	@ 0x28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	fe00e800 	.word	0xfe00e800

08003b4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	607b      	str	r3, [r7, #4]
 8003b56:	460b      	mov	r3, r1
 8003b58:	817b      	strh	r3, [r7, #10]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b5e:	897b      	ldrh	r3, [r7, #10]
 8003b60:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b64:	7a7b      	ldrb	r3, [r7, #9]
 8003b66:	041b      	lsls	r3, r3, #16
 8003b68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b6c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b7a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	0d5b      	lsrs	r3, r3, #21
 8003b86:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003b8a:	4b08      	ldr	r3, [pc, #32]	@ (8003bac <I2C_TransferConfig+0x60>)
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	ea02 0103 	and.w	r1, r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b9e:	bf00      	nop
 8003ba0:	371c      	adds	r7, #28
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	03ff63ff 	.word	0x03ff63ff

08003bb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b20      	cmp	r3, #32
 8003bc4:	d138      	bne.n	8003c38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e032      	b.n	8003c3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2224      	movs	r2, #36	@ 0x24
 8003be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0201 	bic.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6819      	ldr	r1, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0201 	orr.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	e000      	b.n	8003c3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c38:	2302      	movs	r3, #2
  }
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b085      	sub	sp, #20
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b20      	cmp	r3, #32
 8003c5a:	d139      	bne.n	8003cd0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c66:	2302      	movs	r3, #2
 8003c68:	e033      	b.n	8003cd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2224      	movs	r2, #36	@ 0x24
 8003c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0201 	bic.w	r2, r2, #1
 8003c88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	021b      	lsls	r3, r3, #8
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0201 	orr.w	r2, r2, #1
 8003cba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	e000      	b.n	8003cd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cd0:	2302      	movs	r3, #2
  }
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
	...

08003ce0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003cea:	4b23      	ldr	r3, [pc, #140]	@ (8003d78 <HAL_PWREx_EnableOverDrive+0x98>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cee:	4a22      	ldr	r2, [pc, #136]	@ (8003d78 <HAL_PWREx_EnableOverDrive+0x98>)
 8003cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cf6:	4b20      	ldr	r3, [pc, #128]	@ (8003d78 <HAL_PWREx_EnableOverDrive+0x98>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003d02:	4b1e      	ldr	r3, [pc, #120]	@ (8003d7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a1d      	ldr	r2, [pc, #116]	@ (8003d7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d0c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d0e:	f7fd fdbd 	bl	800188c <HAL_GetTick>
 8003d12:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d14:	e009      	b.n	8003d2a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d16:	f7fd fdb9 	bl	800188c <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d24:	d901      	bls.n	8003d2a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e022      	b.n	8003d70 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d2a:	4b14      	ldr	r3, [pc, #80]	@ (8003d7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d36:	d1ee      	bne.n	8003d16 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003d38:	4b10      	ldr	r3, [pc, #64]	@ (8003d7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a0f      	ldr	r2, [pc, #60]	@ (8003d7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d42:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d44:	f7fd fda2 	bl	800188c <HAL_GetTick>
 8003d48:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d4a:	e009      	b.n	8003d60 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d4c:	f7fd fd9e 	bl	800188c <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d5a:	d901      	bls.n	8003d60 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e007      	b.n	8003d70 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d60:	4b06      	ldr	r3, [pc, #24]	@ (8003d7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d6c:	d1ee      	bne.n	8003d4c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	40007000 	.word	0x40007000

08003d80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e29b      	b.n	80042ce <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 8087 	beq.w	8003eb2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003da4:	4b96      	ldr	r3, [pc, #600]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 030c 	and.w	r3, r3, #12
 8003dac:	2b04      	cmp	r3, #4
 8003dae:	d00c      	beq.n	8003dca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003db0:	4b93      	ldr	r3, [pc, #588]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 030c 	and.w	r3, r3, #12
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d112      	bne.n	8003de2 <HAL_RCC_OscConfig+0x62>
 8003dbc:	4b90      	ldr	r3, [pc, #576]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dc8:	d10b      	bne.n	8003de2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dca:	4b8d      	ldr	r3, [pc, #564]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d06c      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x130>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d168      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e275      	b.n	80042ce <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dea:	d106      	bne.n	8003dfa <HAL_RCC_OscConfig+0x7a>
 8003dec:	4b84      	ldr	r3, [pc, #528]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a83      	ldr	r2, [pc, #524]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003df2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	e02e      	b.n	8003e58 <HAL_RCC_OscConfig+0xd8>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10c      	bne.n	8003e1c <HAL_RCC_OscConfig+0x9c>
 8003e02:	4b7f      	ldr	r3, [pc, #508]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a7e      	ldr	r2, [pc, #504]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003e08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	4b7c      	ldr	r3, [pc, #496]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a7b      	ldr	r2, [pc, #492]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003e14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	e01d      	b.n	8003e58 <HAL_RCC_OscConfig+0xd8>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e24:	d10c      	bne.n	8003e40 <HAL_RCC_OscConfig+0xc0>
 8003e26:	4b76      	ldr	r3, [pc, #472]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a75      	ldr	r2, [pc, #468]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003e2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	4b73      	ldr	r3, [pc, #460]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a72      	ldr	r2, [pc, #456]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e3c:	6013      	str	r3, [r2, #0]
 8003e3e:	e00b      	b.n	8003e58 <HAL_RCC_OscConfig+0xd8>
 8003e40:	4b6f      	ldr	r3, [pc, #444]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a6e      	ldr	r2, [pc, #440]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003e46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e4a:	6013      	str	r3, [r2, #0]
 8003e4c:	4b6c      	ldr	r3, [pc, #432]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a6b      	ldr	r2, [pc, #428]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003e52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d013      	beq.n	8003e88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fd fd14 	bl	800188c <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e68:	f7fd fd10 	bl	800188c <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b64      	cmp	r3, #100	@ 0x64
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e229      	b.n	80042ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7a:	4b61      	ldr	r3, [pc, #388]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0f0      	beq.n	8003e68 <HAL_RCC_OscConfig+0xe8>
 8003e86:	e014      	b.n	8003eb2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e88:	f7fd fd00 	bl	800188c <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e90:	f7fd fcfc 	bl	800188c <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b64      	cmp	r3, #100	@ 0x64
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e215      	b.n	80042ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ea2:	4b57      	ldr	r3, [pc, #348]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f0      	bne.n	8003e90 <HAL_RCC_OscConfig+0x110>
 8003eae:	e000      	b.n	8003eb2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d069      	beq.n	8003f92 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ebe:	4b50      	ldr	r3, [pc, #320]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00b      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eca:	4b4d      	ldr	r3, [pc, #308]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 030c 	and.w	r3, r3, #12
 8003ed2:	2b08      	cmp	r3, #8
 8003ed4:	d11c      	bne.n	8003f10 <HAL_RCC_OscConfig+0x190>
 8003ed6:	4b4a      	ldr	r3, [pc, #296]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d116      	bne.n	8003f10 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ee2:	4b47      	ldr	r3, [pc, #284]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d005      	beq.n	8003efa <HAL_RCC_OscConfig+0x17a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d001      	beq.n	8003efa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e1e9      	b.n	80042ce <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003efa:	4b41      	ldr	r3, [pc, #260]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	493d      	ldr	r1, [pc, #244]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f0e:	e040      	b.n	8003f92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d023      	beq.n	8003f60 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f18:	4b39      	ldr	r3, [pc, #228]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a38      	ldr	r2, [pc, #224]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003f1e:	f043 0301 	orr.w	r3, r3, #1
 8003f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f24:	f7fd fcb2 	bl	800188c <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f2c:	f7fd fcae 	bl	800188c <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e1c7      	b.n	80042ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f3e:	4b30      	ldr	r3, [pc, #192]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0f0      	beq.n	8003f2c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f4a:	4b2d      	ldr	r3, [pc, #180]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	4929      	ldr	r1, [pc, #164]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	600b      	str	r3, [r1, #0]
 8003f5e:	e018      	b.n	8003f92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f60:	4b27      	ldr	r3, [pc, #156]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a26      	ldr	r2, [pc, #152]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003f66:	f023 0301 	bic.w	r3, r3, #1
 8003f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6c:	f7fd fc8e 	bl	800188c <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f74:	f7fd fc8a 	bl	800188c <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e1a3      	b.n	80042ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f86:	4b1e      	ldr	r3, [pc, #120]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d038      	beq.n	8004010 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d019      	beq.n	8003fda <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fa6:	4b16      	ldr	r3, [pc, #88]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003fa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003faa:	4a15      	ldr	r2, [pc, #84]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003fac:	f043 0301 	orr.w	r3, r3, #1
 8003fb0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb2:	f7fd fc6b 	bl	800188c <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fba:	f7fd fc67 	bl	800188c <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e180      	b.n	80042ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003fce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0f0      	beq.n	8003fba <HAL_RCC_OscConfig+0x23a>
 8003fd8:	e01a      	b.n	8004010 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fda:	4b09      	ldr	r3, [pc, #36]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fde:	4a08      	ldr	r2, [pc, #32]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003fe0:	f023 0301 	bic.w	r3, r3, #1
 8003fe4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe6:	f7fd fc51 	bl	800188c <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fec:	e00a      	b.n	8004004 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fee:	f7fd fc4d 	bl	800188c <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d903      	bls.n	8004004 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e166      	b.n	80042ce <HAL_RCC_OscConfig+0x54e>
 8004000:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004004:	4b92      	ldr	r3, [pc, #584]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 8004006:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1ee      	bne.n	8003fee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 80a4 	beq.w	8004166 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800401e:	4b8c      	ldr	r3, [pc, #560]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 8004020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10d      	bne.n	8004046 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800402a:	4b89      	ldr	r3, [pc, #548]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 800402c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402e:	4a88      	ldr	r2, [pc, #544]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 8004030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004034:	6413      	str	r3, [r2, #64]	@ 0x40
 8004036:	4b86      	ldr	r3, [pc, #536]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 8004038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800403e:	60bb      	str	r3, [r7, #8]
 8004040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004042:	2301      	movs	r3, #1
 8004044:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004046:	4b83      	ldr	r3, [pc, #524]	@ (8004254 <HAL_RCC_OscConfig+0x4d4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800404e:	2b00      	cmp	r3, #0
 8004050:	d118      	bne.n	8004084 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004052:	4b80      	ldr	r3, [pc, #512]	@ (8004254 <HAL_RCC_OscConfig+0x4d4>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a7f      	ldr	r2, [pc, #508]	@ (8004254 <HAL_RCC_OscConfig+0x4d4>)
 8004058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800405c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800405e:	f7fd fc15 	bl	800188c <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004066:	f7fd fc11 	bl	800188c <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b64      	cmp	r3, #100	@ 0x64
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e12a      	b.n	80042ce <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004078:	4b76      	ldr	r3, [pc, #472]	@ (8004254 <HAL_RCC_OscConfig+0x4d4>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0f0      	beq.n	8004066 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d106      	bne.n	800409a <HAL_RCC_OscConfig+0x31a>
 800408c:	4b70      	ldr	r3, [pc, #448]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 800408e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004090:	4a6f      	ldr	r2, [pc, #444]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 8004092:	f043 0301 	orr.w	r3, r3, #1
 8004096:	6713      	str	r3, [r2, #112]	@ 0x70
 8004098:	e02d      	b.n	80040f6 <HAL_RCC_OscConfig+0x376>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10c      	bne.n	80040bc <HAL_RCC_OscConfig+0x33c>
 80040a2:	4b6b      	ldr	r3, [pc, #428]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 80040a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a6:	4a6a      	ldr	r2, [pc, #424]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 80040a8:	f023 0301 	bic.w	r3, r3, #1
 80040ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80040ae:	4b68      	ldr	r3, [pc, #416]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 80040b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b2:	4a67      	ldr	r2, [pc, #412]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 80040b4:	f023 0304 	bic.w	r3, r3, #4
 80040b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80040ba:	e01c      	b.n	80040f6 <HAL_RCC_OscConfig+0x376>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	2b05      	cmp	r3, #5
 80040c2:	d10c      	bne.n	80040de <HAL_RCC_OscConfig+0x35e>
 80040c4:	4b62      	ldr	r3, [pc, #392]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 80040c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c8:	4a61      	ldr	r2, [pc, #388]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 80040ca:	f043 0304 	orr.w	r3, r3, #4
 80040ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80040d0:	4b5f      	ldr	r3, [pc, #380]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 80040d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d4:	4a5e      	ldr	r2, [pc, #376]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 80040d6:	f043 0301 	orr.w	r3, r3, #1
 80040da:	6713      	str	r3, [r2, #112]	@ 0x70
 80040dc:	e00b      	b.n	80040f6 <HAL_RCC_OscConfig+0x376>
 80040de:	4b5c      	ldr	r3, [pc, #368]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 80040e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e2:	4a5b      	ldr	r2, [pc, #364]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 80040e4:	f023 0301 	bic.w	r3, r3, #1
 80040e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80040ea:	4b59      	ldr	r3, [pc, #356]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 80040ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ee:	4a58      	ldr	r2, [pc, #352]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 80040f0:	f023 0304 	bic.w	r3, r3, #4
 80040f4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d015      	beq.n	800412a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fe:	f7fd fbc5 	bl	800188c <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004104:	e00a      	b.n	800411c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004106:	f7fd fbc1 	bl	800188c <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004114:	4293      	cmp	r3, r2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e0d8      	b.n	80042ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800411c:	4b4c      	ldr	r3, [pc, #304]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 800411e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0ee      	beq.n	8004106 <HAL_RCC_OscConfig+0x386>
 8004128:	e014      	b.n	8004154 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412a:	f7fd fbaf 	bl	800188c <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004130:	e00a      	b.n	8004148 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004132:	f7fd fbab 	bl	800188c <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004140:	4293      	cmp	r3, r2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e0c2      	b.n	80042ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004148:	4b41      	ldr	r3, [pc, #260]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 800414a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1ee      	bne.n	8004132 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004154:	7dfb      	ldrb	r3, [r7, #23]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d105      	bne.n	8004166 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800415a:	4b3d      	ldr	r3, [pc, #244]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415e:	4a3c      	ldr	r2, [pc, #240]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 8004160:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004164:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 80ae 	beq.w	80042cc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004170:	4b37      	ldr	r3, [pc, #220]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 030c 	and.w	r3, r3, #12
 8004178:	2b08      	cmp	r3, #8
 800417a:	d06d      	beq.n	8004258 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	2b02      	cmp	r3, #2
 8004182:	d14b      	bne.n	800421c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004184:	4b32      	ldr	r3, [pc, #200]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a31      	ldr	r2, [pc, #196]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 800418a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800418e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004190:	f7fd fb7c 	bl	800188c <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004198:	f7fd fb78 	bl	800188c <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e091      	b.n	80042ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041aa:	4b29      	ldr	r3, [pc, #164]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1f0      	bne.n	8004198 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69da      	ldr	r2, [r3, #28]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c4:	019b      	lsls	r3, r3, #6
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041cc:	085b      	lsrs	r3, r3, #1
 80041ce:	3b01      	subs	r3, #1
 80041d0:	041b      	lsls	r3, r3, #16
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d8:	061b      	lsls	r3, r3, #24
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e0:	071b      	lsls	r3, r3, #28
 80041e2:	491b      	ldr	r1, [pc, #108]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041e8:	4b19      	ldr	r3, [pc, #100]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a18      	ldr	r2, [pc, #96]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 80041ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f4:	f7fd fb4a 	bl	800188c <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041fc:	f7fd fb46 	bl	800188c <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e05f      	b.n	80042ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800420e:	4b10      	ldr	r3, [pc, #64]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0f0      	beq.n	80041fc <HAL_RCC_OscConfig+0x47c>
 800421a:	e057      	b.n	80042cc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800421c:	4b0c      	ldr	r3, [pc, #48]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a0b      	ldr	r2, [pc, #44]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 8004222:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004228:	f7fd fb30 	bl	800188c <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004230:	f7fd fb2c 	bl	800188c <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e045      	b.n	80042ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004242:	4b03      	ldr	r3, [pc, #12]	@ (8004250 <HAL_RCC_OscConfig+0x4d0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f0      	bne.n	8004230 <HAL_RCC_OscConfig+0x4b0>
 800424e:	e03d      	b.n	80042cc <HAL_RCC_OscConfig+0x54c>
 8004250:	40023800 	.word	0x40023800
 8004254:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004258:	4b1f      	ldr	r3, [pc, #124]	@ (80042d8 <HAL_RCC_OscConfig+0x558>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d030      	beq.n	80042c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004270:	429a      	cmp	r2, r3
 8004272:	d129      	bne.n	80042c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800427e:	429a      	cmp	r2, r3
 8004280:	d122      	bne.n	80042c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004288:	4013      	ands	r3, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800428e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004290:	4293      	cmp	r3, r2
 8004292:	d119      	bne.n	80042c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429e:	085b      	lsrs	r3, r3, #1
 80042a0:	3b01      	subs	r3, #1
 80042a2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d10f      	bne.n	80042c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d107      	bne.n	80042c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d001      	beq.n	80042cc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e000      	b.n	80042ce <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40023800 	.word	0x40023800

080042dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80042e6:	2300      	movs	r3, #0
 80042e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0d0      	b.n	8004496 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042f4:	4b6a      	ldr	r3, [pc, #424]	@ (80044a0 <HAL_RCC_ClockConfig+0x1c4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 030f 	and.w	r3, r3, #15
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d910      	bls.n	8004324 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004302:	4b67      	ldr	r3, [pc, #412]	@ (80044a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f023 020f 	bic.w	r2, r3, #15
 800430a:	4965      	ldr	r1, [pc, #404]	@ (80044a0 <HAL_RCC_ClockConfig+0x1c4>)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004312:	4b63      	ldr	r3, [pc, #396]	@ (80044a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d001      	beq.n	8004324 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e0b8      	b.n	8004496 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d020      	beq.n	8004372 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	d005      	beq.n	8004348 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800433c:	4b59      	ldr	r3, [pc, #356]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c8>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	4a58      	ldr	r2, [pc, #352]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004342:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004346:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d005      	beq.n	8004360 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004354:	4b53      	ldr	r3, [pc, #332]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	4a52      	ldr	r2, [pc, #328]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c8>)
 800435a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800435e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004360:	4b50      	ldr	r3, [pc, #320]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	494d      	ldr	r1, [pc, #308]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c8>)
 800436e:	4313      	orrs	r3, r2
 8004370:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d040      	beq.n	8004400 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d107      	bne.n	8004396 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004386:	4b47      	ldr	r3, [pc, #284]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d115      	bne.n	80043be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e07f      	b.n	8004496 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b02      	cmp	r3, #2
 800439c:	d107      	bne.n	80043ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800439e:	4b41      	ldr	r3, [pc, #260]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d109      	bne.n	80043be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e073      	b.n	8004496 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ae:	4b3d      	ldr	r3, [pc, #244]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e06b      	b.n	8004496 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043be:	4b39      	ldr	r3, [pc, #228]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c8>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f023 0203 	bic.w	r2, r3, #3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	4936      	ldr	r1, [pc, #216]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c8>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043d0:	f7fd fa5c 	bl	800188c <HAL_GetTick>
 80043d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043d6:	e00a      	b.n	80043ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043d8:	f7fd fa58 	bl	800188c <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e053      	b.n	8004496 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ee:	4b2d      	ldr	r3, [pc, #180]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c8>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 020c 	and.w	r2, r3, #12
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d1eb      	bne.n	80043d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004400:	4b27      	ldr	r3, [pc, #156]	@ (80044a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 030f 	and.w	r3, r3, #15
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d210      	bcs.n	8004430 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800440e:	4b24      	ldr	r3, [pc, #144]	@ (80044a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f023 020f 	bic.w	r2, r3, #15
 8004416:	4922      	ldr	r1, [pc, #136]	@ (80044a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	4313      	orrs	r3, r2
 800441c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800441e:	4b20      	ldr	r3, [pc, #128]	@ (80044a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	429a      	cmp	r2, r3
 800442a:	d001      	beq.n	8004430 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e032      	b.n	8004496 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	d008      	beq.n	800444e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800443c:	4b19      	ldr	r3, [pc, #100]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c8>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	4916      	ldr	r1, [pc, #88]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c8>)
 800444a:	4313      	orrs	r3, r2
 800444c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d009      	beq.n	800446e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800445a:	4b12      	ldr	r3, [pc, #72]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c8>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	490e      	ldr	r1, [pc, #56]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c8>)
 800446a:	4313      	orrs	r3, r2
 800446c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800446e:	f000 f821 	bl	80044b4 <HAL_RCC_GetSysClockFreq>
 8004472:	4602      	mov	r2, r0
 8004474:	4b0b      	ldr	r3, [pc, #44]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	091b      	lsrs	r3, r3, #4
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	490a      	ldr	r1, [pc, #40]	@ (80044a8 <HAL_RCC_ClockConfig+0x1cc>)
 8004480:	5ccb      	ldrb	r3, [r1, r3]
 8004482:	fa22 f303 	lsr.w	r3, r2, r3
 8004486:	4a09      	ldr	r2, [pc, #36]	@ (80044ac <HAL_RCC_ClockConfig+0x1d0>)
 8004488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800448a:	4b09      	ldr	r3, [pc, #36]	@ (80044b0 <HAL_RCC_ClockConfig+0x1d4>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f7fc ff2e 	bl	80012f0 <HAL_InitTick>

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40023c00 	.word	0x40023c00
 80044a4:	40023800 	.word	0x40023800
 80044a8:	0802a170 	.word	0x0802a170
 80044ac:	20000008 	.word	0x20000008
 80044b0:	2000000c 	.word	0x2000000c

080044b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044b8:	b090      	sub	sp, #64	@ 0x40
 80044ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80044bc:	2300      	movs	r3, #0
 80044be:	637b      	str	r3, [r7, #52]	@ 0x34
 80044c0:	2300      	movs	r3, #0
 80044c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044c4:	2300      	movs	r3, #0
 80044c6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80044c8:	2300      	movs	r3, #0
 80044ca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044cc:	4b59      	ldr	r3, [pc, #356]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x180>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 030c 	and.w	r3, r3, #12
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d00d      	beq.n	80044f4 <HAL_RCC_GetSysClockFreq+0x40>
 80044d8:	2b08      	cmp	r3, #8
 80044da:	f200 80a1 	bhi.w	8004620 <HAL_RCC_GetSysClockFreq+0x16c>
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <HAL_RCC_GetSysClockFreq+0x34>
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d003      	beq.n	80044ee <HAL_RCC_GetSysClockFreq+0x3a>
 80044e6:	e09b      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044e8:	4b53      	ldr	r3, [pc, #332]	@ (8004638 <HAL_RCC_GetSysClockFreq+0x184>)
 80044ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044ec:	e09b      	b.n	8004626 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044ee:	4b53      	ldr	r3, [pc, #332]	@ (800463c <HAL_RCC_GetSysClockFreq+0x188>)
 80044f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044f2:	e098      	b.n	8004626 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044f4:	4b4f      	ldr	r3, [pc, #316]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x180>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80044fe:	4b4d      	ldr	r3, [pc, #308]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x180>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d028      	beq.n	800455c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800450a:	4b4a      	ldr	r3, [pc, #296]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x180>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	099b      	lsrs	r3, r3, #6
 8004510:	2200      	movs	r2, #0
 8004512:	623b      	str	r3, [r7, #32]
 8004514:	627a      	str	r2, [r7, #36]	@ 0x24
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800451c:	2100      	movs	r1, #0
 800451e:	4b47      	ldr	r3, [pc, #284]	@ (800463c <HAL_RCC_GetSysClockFreq+0x188>)
 8004520:	fb03 f201 	mul.w	r2, r3, r1
 8004524:	2300      	movs	r3, #0
 8004526:	fb00 f303 	mul.w	r3, r0, r3
 800452a:	4413      	add	r3, r2
 800452c:	4a43      	ldr	r2, [pc, #268]	@ (800463c <HAL_RCC_GetSysClockFreq+0x188>)
 800452e:	fba0 1202 	umull	r1, r2, r0, r2
 8004532:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004534:	460a      	mov	r2, r1
 8004536:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004538:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800453a:	4413      	add	r3, r2
 800453c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800453e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004540:	2200      	movs	r2, #0
 8004542:	61bb      	str	r3, [r7, #24]
 8004544:	61fa      	str	r2, [r7, #28]
 8004546:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800454a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800454e:	f7fb ff2f 	bl	80003b0 <__aeabi_uldivmod>
 8004552:	4602      	mov	r2, r0
 8004554:	460b      	mov	r3, r1
 8004556:	4613      	mov	r3, r2
 8004558:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800455a:	e053      	b.n	8004604 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800455c:	4b35      	ldr	r3, [pc, #212]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x180>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	099b      	lsrs	r3, r3, #6
 8004562:	2200      	movs	r2, #0
 8004564:	613b      	str	r3, [r7, #16]
 8004566:	617a      	str	r2, [r7, #20]
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800456e:	f04f 0b00 	mov.w	fp, #0
 8004572:	4652      	mov	r2, sl
 8004574:	465b      	mov	r3, fp
 8004576:	f04f 0000 	mov.w	r0, #0
 800457a:	f04f 0100 	mov.w	r1, #0
 800457e:	0159      	lsls	r1, r3, #5
 8004580:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004584:	0150      	lsls	r0, r2, #5
 8004586:	4602      	mov	r2, r0
 8004588:	460b      	mov	r3, r1
 800458a:	ebb2 080a 	subs.w	r8, r2, sl
 800458e:	eb63 090b 	sbc.w	r9, r3, fp
 8004592:	f04f 0200 	mov.w	r2, #0
 8004596:	f04f 0300 	mov.w	r3, #0
 800459a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800459e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80045a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80045a6:	ebb2 0408 	subs.w	r4, r2, r8
 80045aa:	eb63 0509 	sbc.w	r5, r3, r9
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	00eb      	lsls	r3, r5, #3
 80045b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045bc:	00e2      	lsls	r2, r4, #3
 80045be:	4614      	mov	r4, r2
 80045c0:	461d      	mov	r5, r3
 80045c2:	eb14 030a 	adds.w	r3, r4, sl
 80045c6:	603b      	str	r3, [r7, #0]
 80045c8:	eb45 030b 	adc.w	r3, r5, fp
 80045cc:	607b      	str	r3, [r7, #4]
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	f04f 0300 	mov.w	r3, #0
 80045d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045da:	4629      	mov	r1, r5
 80045dc:	028b      	lsls	r3, r1, #10
 80045de:	4621      	mov	r1, r4
 80045e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045e4:	4621      	mov	r1, r4
 80045e6:	028a      	lsls	r2, r1, #10
 80045e8:	4610      	mov	r0, r2
 80045ea:	4619      	mov	r1, r3
 80045ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ee:	2200      	movs	r2, #0
 80045f0:	60bb      	str	r3, [r7, #8]
 80045f2:	60fa      	str	r2, [r7, #12]
 80045f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045f8:	f7fb feda 	bl	80003b0 <__aeabi_uldivmod>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4613      	mov	r3, r2
 8004602:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004604:	4b0b      	ldr	r3, [pc, #44]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x180>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	0c1b      	lsrs	r3, r3, #16
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	3301      	adds	r3, #1
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004614:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004618:	fbb2 f3f3 	udiv	r3, r2, r3
 800461c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800461e:	e002      	b.n	8004626 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004620:	4b05      	ldr	r3, [pc, #20]	@ (8004638 <HAL_RCC_GetSysClockFreq+0x184>)
 8004622:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004624:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004628:	4618      	mov	r0, r3
 800462a:	3740      	adds	r7, #64	@ 0x40
 800462c:	46bd      	mov	sp, r7
 800462e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004632:	bf00      	nop
 8004634:	40023800 	.word	0x40023800
 8004638:	00f42400 	.word	0x00f42400
 800463c:	017d7840 	.word	0x017d7840

08004640 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004644:	4b03      	ldr	r3, [pc, #12]	@ (8004654 <HAL_RCC_GetHCLKFreq+0x14>)
 8004646:	681b      	ldr	r3, [r3, #0]
}
 8004648:	4618      	mov	r0, r3
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	20000008 	.word	0x20000008

08004658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800465c:	f7ff fff0 	bl	8004640 <HAL_RCC_GetHCLKFreq>
 8004660:	4602      	mov	r2, r0
 8004662:	4b05      	ldr	r3, [pc, #20]	@ (8004678 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	0b5b      	lsrs	r3, r3, #13
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	4903      	ldr	r1, [pc, #12]	@ (800467c <HAL_RCC_GetPCLK2Freq+0x24>)
 800466e:	5ccb      	ldrb	r3, [r1, r3]
 8004670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004674:	4618      	mov	r0, r3
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40023800 	.word	0x40023800
 800467c:	0802a180 	.word	0x0802a180

08004680 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	220f      	movs	r2, #15
 800468e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004690:	4b12      	ldr	r3, [pc, #72]	@ (80046dc <HAL_RCC_GetClockConfig+0x5c>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 0203 	and.w	r2, r3, #3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800469c:	4b0f      	ldr	r3, [pc, #60]	@ (80046dc <HAL_RCC_GetClockConfig+0x5c>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80046a8:	4b0c      	ldr	r3, [pc, #48]	@ (80046dc <HAL_RCC_GetClockConfig+0x5c>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80046b4:	4b09      	ldr	r3, [pc, #36]	@ (80046dc <HAL_RCC_GetClockConfig+0x5c>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	08db      	lsrs	r3, r3, #3
 80046ba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046c2:	4b07      	ldr	r3, [pc, #28]	@ (80046e0 <HAL_RCC_GetClockConfig+0x60>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 020f 	and.w	r2, r3, #15
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	601a      	str	r2, [r3, #0]
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	40023800 	.word	0x40023800
 80046e0:	40023c00 	.word	0x40023c00

080046e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80046f0:	2300      	movs	r3, #0
 80046f2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80046f4:	2300      	movs	r3, #0
 80046f6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80046fc:	2300      	movs	r3, #0
 80046fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d012      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800470c:	4b69      	ldr	r3, [pc, #420]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	4a68      	ldr	r2, [pc, #416]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004712:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004716:	6093      	str	r3, [r2, #8]
 8004718:	4b66      	ldr	r3, [pc, #408]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004720:	4964      	ldr	r1, [pc, #400]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004722:	4313      	orrs	r3, r2
 8004724:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800472e:	2301      	movs	r3, #1
 8004730:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d017      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800473e:	4b5d      	ldr	r3, [pc, #372]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004740:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004744:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800474c:	4959      	ldr	r1, [pc, #356]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800474e:	4313      	orrs	r3, r2
 8004750:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004758:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800475c:	d101      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800475e:	2301      	movs	r3, #1
 8004760:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800476a:	2301      	movs	r3, #1
 800476c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d017      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800477a:	4b4e      	ldr	r3, [pc, #312]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800477c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004780:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004788:	494a      	ldr	r1, [pc, #296]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004794:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004798:	d101      	bne.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800479a:	2301      	movs	r3, #1
 800479c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80047a6:	2301      	movs	r3, #1
 80047a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80047b6:	2301      	movs	r3, #1
 80047b8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 808b 	beq.w	80048de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047c8:	4b3a      	ldr	r3, [pc, #232]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047cc:	4a39      	ldr	r2, [pc, #228]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80047d4:	4b37      	ldr	r3, [pc, #220]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047e0:	4b35      	ldr	r3, [pc, #212]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a34      	ldr	r2, [pc, #208]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ec:	f7fd f84e 	bl	800188c <HAL_GetTick>
 80047f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047f2:	e008      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047f4:	f7fd f84a 	bl	800188c <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b64      	cmp	r3, #100	@ 0x64
 8004800:	d901      	bls.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e38f      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004806:	4b2c      	ldr	r3, [pc, #176]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800480e:	2b00      	cmp	r3, #0
 8004810:	d0f0      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004812:	4b28      	ldr	r3, [pc, #160]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004816:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800481a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d035      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004826:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	429a      	cmp	r2, r3
 800482e:	d02e      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004830:	4b20      	ldr	r3, [pc, #128]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004834:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004838:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800483a:	4b1e      	ldr	r3, [pc, #120]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800483c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483e:	4a1d      	ldr	r2, [pc, #116]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004844:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004846:	4b1b      	ldr	r3, [pc, #108]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800484a:	4a1a      	ldr	r2, [pc, #104]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800484c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004850:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004852:	4a18      	ldr	r2, [pc, #96]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004858:	4b16      	ldr	r3, [pc, #88]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800485a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b01      	cmp	r3, #1
 8004862:	d114      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004864:	f7fd f812 	bl	800188c <HAL_GetTick>
 8004868:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800486a:	e00a      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800486c:	f7fd f80e 	bl	800188c <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e351      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004882:	4b0c      	ldr	r3, [pc, #48]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0ee      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004892:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004896:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800489a:	d111      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800489c:	4b05      	ldr	r3, [pc, #20]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80048a8:	4b04      	ldr	r3, [pc, #16]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80048aa:	400b      	ands	r3, r1
 80048ac:	4901      	ldr	r1, [pc, #4]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	608b      	str	r3, [r1, #8]
 80048b2:	e00b      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80048b4:	40023800 	.word	0x40023800
 80048b8:	40007000 	.word	0x40007000
 80048bc:	0ffffcff 	.word	0x0ffffcff
 80048c0:	4bac      	ldr	r3, [pc, #688]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	4aab      	ldr	r2, [pc, #684]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80048ca:	6093      	str	r3, [r2, #8]
 80048cc:	4ba9      	ldr	r3, [pc, #676]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048d8:	49a6      	ldr	r1, [pc, #664]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0310 	and.w	r3, r3, #16
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d010      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048ea:	4ba2      	ldr	r3, [pc, #648]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048f0:	4aa0      	ldr	r2, [pc, #640]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80048fa:	4b9e      	ldr	r3, [pc, #632]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004904:	499b      	ldr	r1, [pc, #620]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004918:	4b96      	ldr	r3, [pc, #600]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800491e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004926:	4993      	ldr	r1, [pc, #588]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800493a:	4b8e      	ldr	r3, [pc, #568]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800493c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004940:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004948:	498a      	ldr	r1, [pc, #552]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800495c:	4b85      	ldr	r3, [pc, #532]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800495e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004962:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800496a:	4982      	ldr	r1, [pc, #520]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800497e:	4b7d      	ldr	r3, [pc, #500]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004984:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800498c:	4979      	ldr	r1, [pc, #484]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00a      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049a0:	4b74      	ldr	r3, [pc, #464]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a6:	f023 0203 	bic.w	r2, r3, #3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ae:	4971      	ldr	r1, [pc, #452]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049c2:	4b6c      	ldr	r3, [pc, #432]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c8:	f023 020c 	bic.w	r2, r3, #12
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049d0:	4968      	ldr	r1, [pc, #416]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049e4:	4b63      	ldr	r3, [pc, #396]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ea:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049f2:	4960      	ldr	r1, [pc, #384]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a06:	4b5b      	ldr	r3, [pc, #364]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a0c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a14:	4957      	ldr	r1, [pc, #348]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a28:	4b52      	ldr	r3, [pc, #328]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a2e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a36:	494f      	ldr	r1, [pc, #316]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004a4a:	4b4a      	ldr	r3, [pc, #296]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a50:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a58:	4946      	ldr	r1, [pc, #280]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004a6c:	4b41      	ldr	r3, [pc, #260]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a72:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a7a:	493e      	ldr	r1, [pc, #248]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004a8e:	4b39      	ldr	r3, [pc, #228]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a94:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a9c:	4935      	ldr	r1, [pc, #212]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00a      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ab0:	4b30      	ldr	r3, [pc, #192]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ab6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004abe:	492d      	ldr	r1, [pc, #180]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d011      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004ad2:	4b28      	ldr	r3, [pc, #160]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ae0:	4924      	ldr	r1, [pc, #144]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004aec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004af0:	d101      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004af2:	2301      	movs	r3, #1
 8004af4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004b02:	2301      	movs	r3, #1
 8004b04:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b12:	4b18      	ldr	r3, [pc, #96]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b18:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b20:	4914      	ldr	r1, [pc, #80]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00b      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b34:	4b0f      	ldr	r3, [pc, #60]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b3a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b44:	490b      	ldr	r1, [pc, #44]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00f      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004b58:	4b06      	ldr	r3, [pc, #24]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b5e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b68:	4902      	ldr	r1, [pc, #8]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004b70:	e002      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004b72:	bf00      	nop
 8004b74:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00b      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b84:	4b8a      	ldr	r3, [pc, #552]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b8a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b94:	4986      	ldr	r1, [pc, #536]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00b      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004ba8:	4b81      	ldr	r3, [pc, #516]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bae:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bb8:	497d      	ldr	r1, [pc, #500]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d006      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 80d6 	beq.w	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bd4:	4b76      	ldr	r3, [pc, #472]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a75      	ldr	r2, [pc, #468]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bda:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004bde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be0:	f7fc fe54 	bl	800188c <HAL_GetTick>
 8004be4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004be6:	e008      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004be8:	f7fc fe50 	bl	800188c <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b64      	cmp	r3, #100	@ 0x64
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e195      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bfa:	4b6d      	ldr	r3, [pc, #436]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1f0      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d021      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d11d      	bne.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c1a:	4b65      	ldr	r3, [pc, #404]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c20:	0c1b      	lsrs	r3, r3, #16
 8004c22:	f003 0303 	and.w	r3, r3, #3
 8004c26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c28:	4b61      	ldr	r3, [pc, #388]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c2e:	0e1b      	lsrs	r3, r3, #24
 8004c30:	f003 030f 	and.w	r3, r3, #15
 8004c34:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	019a      	lsls	r2, r3, #6
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	041b      	lsls	r3, r3, #16
 8004c40:	431a      	orrs	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	061b      	lsls	r3, r3, #24
 8004c46:	431a      	orrs	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	071b      	lsls	r3, r3, #28
 8004c4e:	4958      	ldr	r1, [pc, #352]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d004      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c6a:	d00a      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d02e      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c80:	d129      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c82:	4b4b      	ldr	r3, [pc, #300]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c88:	0c1b      	lsrs	r3, r3, #16
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c90:	4b47      	ldr	r3, [pc, #284]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c96:	0f1b      	lsrs	r3, r3, #28
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	019a      	lsls	r2, r3, #6
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	041b      	lsls	r3, r3, #16
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	061b      	lsls	r3, r3, #24
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	071b      	lsls	r3, r3, #28
 8004cb6:	493e      	ldr	r1, [pc, #248]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004cbe:	4b3c      	ldr	r3, [pc, #240]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cc4:	f023 021f 	bic.w	r2, r3, #31
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	4938      	ldr	r1, [pc, #224]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d01d      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ce2:	4b33      	ldr	r3, [pc, #204]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ce8:	0e1b      	lsrs	r3, r3, #24
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004cf0:	4b2f      	ldr	r3, [pc, #188]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cf6:	0f1b      	lsrs	r3, r3, #28
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	019a      	lsls	r2, r3, #6
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	041b      	lsls	r3, r3, #16
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	061b      	lsls	r3, r3, #24
 8004d10:	431a      	orrs	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	071b      	lsls	r3, r3, #28
 8004d16:	4926      	ldr	r1, [pc, #152]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d011      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	019a      	lsls	r2, r3, #6
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	041b      	lsls	r3, r3, #16
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	061b      	lsls	r3, r3, #24
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	071b      	lsls	r3, r3, #28
 8004d46:	491a      	ldr	r1, [pc, #104]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d4e:	4b18      	ldr	r3, [pc, #96]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a17      	ldr	r2, [pc, #92]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d54:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d5a:	f7fc fd97 	bl	800188c <HAL_GetTick>
 8004d5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d60:	e008      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d62:	f7fc fd93 	bl	800188c <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b64      	cmp	r3, #100	@ 0x64
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e0d8      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d74:	4b0e      	ldr	r3, [pc, #56]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0f0      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	f040 80ce 	bne.w	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d88:	4b09      	ldr	r3, [pc, #36]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a08      	ldr	r2, [pc, #32]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d94:	f7fc fd7a 	bl	800188c <HAL_GetTick>
 8004d98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d9a:	e00b      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d9c:	f7fc fd76 	bl	800188c <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b64      	cmp	r3, #100	@ 0x64
 8004da8:	d904      	bls.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e0bb      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004dae:	bf00      	nop
 8004db0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004db4:	4b5e      	ldr	r3, [pc, #376]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dc0:	d0ec      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d009      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d02e      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d12a      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004dea:	4b51      	ldr	r3, [pc, #324]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004df0:	0c1b      	lsrs	r3, r3, #16
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004df8:	4b4d      	ldr	r3, [pc, #308]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dfe:	0f1b      	lsrs	r3, r3, #28
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	019a      	lsls	r2, r3, #6
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	041b      	lsls	r3, r3, #16
 8004e10:	431a      	orrs	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	061b      	lsls	r3, r3, #24
 8004e18:	431a      	orrs	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	071b      	lsls	r3, r3, #28
 8004e1e:	4944      	ldr	r1, [pc, #272]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004e26:	4b42      	ldr	r3, [pc, #264]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e2c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e34:	3b01      	subs	r3, #1
 8004e36:	021b      	lsls	r3, r3, #8
 8004e38:	493d      	ldr	r1, [pc, #244]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d022      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e54:	d11d      	bne.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e56:	4b36      	ldr	r3, [pc, #216]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e5c:	0e1b      	lsrs	r3, r3, #24
 8004e5e:	f003 030f 	and.w	r3, r3, #15
 8004e62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e64:	4b32      	ldr	r3, [pc, #200]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e6a:	0f1b      	lsrs	r3, r3, #28
 8004e6c:	f003 0307 	and.w	r3, r3, #7
 8004e70:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	019a      	lsls	r2, r3, #6
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	041b      	lsls	r3, r3, #16
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	061b      	lsls	r3, r3, #24
 8004e84:	431a      	orrs	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	071b      	lsls	r3, r3, #28
 8004e8a:	4929      	ldr	r1, [pc, #164]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0308 	and.w	r3, r3, #8
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d028      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e9e:	4b24      	ldr	r3, [pc, #144]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ea4:	0e1b      	lsrs	r3, r3, #24
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004eac:	4b20      	ldr	r3, [pc, #128]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb2:	0c1b      	lsrs	r3, r3, #16
 8004eb4:	f003 0303 	and.w	r3, r3, #3
 8004eb8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	019a      	lsls	r2, r3, #6
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	041b      	lsls	r3, r3, #16
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	061b      	lsls	r3, r3, #24
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	071b      	lsls	r3, r3, #28
 8004ed2:	4917      	ldr	r1, [pc, #92]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004eda:	4b15      	ldr	r3, [pc, #84]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ee0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee8:	4911      	ldr	r1, [pc, #68]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a0e      	ldr	r2, [pc, #56]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ef6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004efa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004efc:	f7fc fcc6 	bl	800188c <HAL_GetTick>
 8004f00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f02:	e008      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f04:	f7fc fcc2 	bl	800188c <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b64      	cmp	r3, #100	@ 0x64
 8004f10:	d901      	bls.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e007      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f16:	4b06      	ldr	r3, [pc, #24]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f22:	d1ef      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3720      	adds	r7, #32
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	40023800 	.word	0x40023800

08004f34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e049      	b.n	8004fda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d106      	bne.n	8004f60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f841 	bl	8004fe2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	4619      	mov	r1, r3
 8004f72:	4610      	mov	r0, r2
 8004f74:	f000 f9e8 	bl	8005348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b083      	sub	sp, #12
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004fea:	bf00      	nop
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
	...

08004ff8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b01      	cmp	r3, #1
 800500a:	d001      	beq.n	8005010 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e054      	b.n	80050ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0201 	orr.w	r2, r2, #1
 8005026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a26      	ldr	r2, [pc, #152]	@ (80050c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d022      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x80>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800503a:	d01d      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x80>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a22      	ldr	r2, [pc, #136]	@ (80050cc <HAL_TIM_Base_Start_IT+0xd4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d018      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x80>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a21      	ldr	r2, [pc, #132]	@ (80050d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d013      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x80>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a1f      	ldr	r2, [pc, #124]	@ (80050d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d00e      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x80>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a1e      	ldr	r2, [pc, #120]	@ (80050d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d009      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x80>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a1c      	ldr	r2, [pc, #112]	@ (80050dc <HAL_TIM_Base_Start_IT+0xe4>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d004      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x80>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a1b      	ldr	r2, [pc, #108]	@ (80050e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d115      	bne.n	80050a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	4b19      	ldr	r3, [pc, #100]	@ (80050e4 <HAL_TIM_Base_Start_IT+0xec>)
 8005080:	4013      	ands	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b06      	cmp	r3, #6
 8005088:	d015      	beq.n	80050b6 <HAL_TIM_Base_Start_IT+0xbe>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005090:	d011      	beq.n	80050b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0201 	orr.w	r2, r2, #1
 80050a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a2:	e008      	b.n	80050b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	e000      	b.n	80050b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40010000 	.word	0x40010000
 80050cc:	40000400 	.word	0x40000400
 80050d0:	40000800 	.word	0x40000800
 80050d4:	40000c00 	.word	0x40000c00
 80050d8:	40010400 	.word	0x40010400
 80050dc:	40014000 	.word	0x40014000
 80050e0:	40001800 	.word	0x40001800
 80050e4:	00010007 	.word	0x00010007

080050e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d020      	beq.n	800514c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d01b      	beq.n	800514c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f06f 0202 	mvn.w	r2, #2
 800511c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f8e9 	bl	800530a <HAL_TIM_IC_CaptureCallback>
 8005138:	e005      	b.n	8005146 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f8db 	bl	80052f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f8ec 	bl	800531e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f003 0304 	and.w	r3, r3, #4
 8005152:	2b00      	cmp	r3, #0
 8005154:	d020      	beq.n	8005198 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d01b      	beq.n	8005198 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f06f 0204 	mvn.w	r2, #4
 8005168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2202      	movs	r2, #2
 800516e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f8c3 	bl	800530a <HAL_TIM_IC_CaptureCallback>
 8005184:	e005      	b.n	8005192 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f8b5 	bl	80052f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f8c6 	bl	800531e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d020      	beq.n	80051e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f003 0308 	and.w	r3, r3, #8
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d01b      	beq.n	80051e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f06f 0208 	mvn.w	r2, #8
 80051b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2204      	movs	r2, #4
 80051ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f89d 	bl	800530a <HAL_TIM_IC_CaptureCallback>
 80051d0:	e005      	b.n	80051de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f88f 	bl	80052f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f8a0 	bl	800531e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f003 0310 	and.w	r3, r3, #16
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d020      	beq.n	8005230 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f003 0310 	and.w	r3, r3, #16
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d01b      	beq.n	8005230 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f06f 0210 	mvn.w	r2, #16
 8005200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2208      	movs	r2, #8
 8005206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f877 	bl	800530a <HAL_TIM_IC_CaptureCallback>
 800521c:	e005      	b.n	800522a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f869 	bl	80052f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f87a 	bl	800531e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00c      	beq.n	8005254 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	d007      	beq.n	8005254 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0201 	mvn.w	r2, #1
 800524c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7fb ff1e 	bl	8001090 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800525a:	2b00      	cmp	r3, #0
 800525c:	d104      	bne.n	8005268 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00c      	beq.n	8005282 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800526e:	2b00      	cmp	r3, #0
 8005270:	d007      	beq.n	8005282 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800527a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f913 	bl	80054a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00c      	beq.n	80052a6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005292:	2b00      	cmp	r3, #0
 8005294:	d007      	beq.n	80052a6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800529e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f90b 	bl	80054bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00c      	beq.n	80052ca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d007      	beq.n	80052ca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f834 	bl	8005332 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00c      	beq.n	80052ee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f003 0320 	and.w	r3, r3, #32
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d007      	beq.n	80052ee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f06f 0220 	mvn.w	r2, #32
 80052e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f8d3 	bl	8005494 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052ee:	bf00      	nop
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800530a:	b480      	push	{r7}
 800530c:	b083      	sub	sp, #12
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005312:	bf00      	nop
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800533a:	bf00      	nop
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
	...

08005348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a43      	ldr	r2, [pc, #268]	@ (8005468 <TIM_Base_SetConfig+0x120>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d013      	beq.n	8005388 <TIM_Base_SetConfig+0x40>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005366:	d00f      	beq.n	8005388 <TIM_Base_SetConfig+0x40>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a40      	ldr	r2, [pc, #256]	@ (800546c <TIM_Base_SetConfig+0x124>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d00b      	beq.n	8005388 <TIM_Base_SetConfig+0x40>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a3f      	ldr	r2, [pc, #252]	@ (8005470 <TIM_Base_SetConfig+0x128>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d007      	beq.n	8005388 <TIM_Base_SetConfig+0x40>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a3e      	ldr	r2, [pc, #248]	@ (8005474 <TIM_Base_SetConfig+0x12c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d003      	beq.n	8005388 <TIM_Base_SetConfig+0x40>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a3d      	ldr	r2, [pc, #244]	@ (8005478 <TIM_Base_SetConfig+0x130>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d108      	bne.n	800539a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800538e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a32      	ldr	r2, [pc, #200]	@ (8005468 <TIM_Base_SetConfig+0x120>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d02b      	beq.n	80053fa <TIM_Base_SetConfig+0xb2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053a8:	d027      	beq.n	80053fa <TIM_Base_SetConfig+0xb2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a2f      	ldr	r2, [pc, #188]	@ (800546c <TIM_Base_SetConfig+0x124>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d023      	beq.n	80053fa <TIM_Base_SetConfig+0xb2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a2e      	ldr	r2, [pc, #184]	@ (8005470 <TIM_Base_SetConfig+0x128>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d01f      	beq.n	80053fa <TIM_Base_SetConfig+0xb2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a2d      	ldr	r2, [pc, #180]	@ (8005474 <TIM_Base_SetConfig+0x12c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d01b      	beq.n	80053fa <TIM_Base_SetConfig+0xb2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a2c      	ldr	r2, [pc, #176]	@ (8005478 <TIM_Base_SetConfig+0x130>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d017      	beq.n	80053fa <TIM_Base_SetConfig+0xb2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a2b      	ldr	r2, [pc, #172]	@ (800547c <TIM_Base_SetConfig+0x134>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d013      	beq.n	80053fa <TIM_Base_SetConfig+0xb2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a2a      	ldr	r2, [pc, #168]	@ (8005480 <TIM_Base_SetConfig+0x138>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d00f      	beq.n	80053fa <TIM_Base_SetConfig+0xb2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a29      	ldr	r2, [pc, #164]	@ (8005484 <TIM_Base_SetConfig+0x13c>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00b      	beq.n	80053fa <TIM_Base_SetConfig+0xb2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a28      	ldr	r2, [pc, #160]	@ (8005488 <TIM_Base_SetConfig+0x140>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d007      	beq.n	80053fa <TIM_Base_SetConfig+0xb2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a27      	ldr	r2, [pc, #156]	@ (800548c <TIM_Base_SetConfig+0x144>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d003      	beq.n	80053fa <TIM_Base_SetConfig+0xb2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a26      	ldr	r2, [pc, #152]	@ (8005490 <TIM_Base_SetConfig+0x148>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d108      	bne.n	800540c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	4313      	orrs	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	689a      	ldr	r2, [r3, #8]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a0e      	ldr	r2, [pc, #56]	@ (8005468 <TIM_Base_SetConfig+0x120>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d003      	beq.n	800543a <TIM_Base_SetConfig+0xf2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a10      	ldr	r2, [pc, #64]	@ (8005478 <TIM_Base_SetConfig+0x130>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d103      	bne.n	8005442 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	691a      	ldr	r2, [r3, #16]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f043 0204 	orr.w	r2, r3, #4
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	601a      	str	r2, [r3, #0]
}
 800545a:	bf00      	nop
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	40010000 	.word	0x40010000
 800546c:	40000400 	.word	0x40000400
 8005470:	40000800 	.word	0x40000800
 8005474:	40000c00 	.word	0x40000c00
 8005478:	40010400 	.word	0x40010400
 800547c:	40014000 	.word	0x40014000
 8005480:	40014400 	.word	0x40014400
 8005484:	40014800 	.word	0x40014800
 8005488:	40001800 	.word	0x40001800
 800548c:	40001c00 	.word	0x40001c00
 8005490:	40002000 	.word	0x40002000

08005494 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80054d0:	b5b0      	push	{r4, r5, r7, lr}
 80054d2:	b08c      	sub	sp, #48	@ 0x30
 80054d4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80054d6:	4b8f      	ldr	r3, [pc, #572]	@ (8005714 <MX_LWIP_Init+0x244>)
 80054d8:	22c0      	movs	r2, #192	@ 0xc0
 80054da:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80054dc:	4b8d      	ldr	r3, [pc, #564]	@ (8005714 <MX_LWIP_Init+0x244>)
 80054de:	22a8      	movs	r2, #168	@ 0xa8
 80054e0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 10;
 80054e2:	4b8c      	ldr	r3, [pc, #560]	@ (8005714 <MX_LWIP_Init+0x244>)
 80054e4:	220a      	movs	r2, #10
 80054e6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 23;
 80054e8:	4b8a      	ldr	r3, [pc, #552]	@ (8005714 <MX_LWIP_Init+0x244>)
 80054ea:	2217      	movs	r2, #23
 80054ec:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80054ee:	4b8a      	ldr	r3, [pc, #552]	@ (8005718 <MX_LWIP_Init+0x248>)
 80054f0:	22ff      	movs	r2, #255	@ 0xff
 80054f2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80054f4:	4b88      	ldr	r3, [pc, #544]	@ (8005718 <MX_LWIP_Init+0x248>)
 80054f6:	22ff      	movs	r2, #255	@ 0xff
 80054f8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80054fa:	4b87      	ldr	r3, [pc, #540]	@ (8005718 <MX_LWIP_Init+0x248>)
 80054fc:	22ff      	movs	r2, #255	@ 0xff
 80054fe:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005500:	4b85      	ldr	r3, [pc, #532]	@ (8005718 <MX_LWIP_Init+0x248>)
 8005502:	2200      	movs	r2, #0
 8005504:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8005506:	4b85      	ldr	r3, [pc, #532]	@ (800571c <MX_LWIP_Init+0x24c>)
 8005508:	22c0      	movs	r2, #192	@ 0xc0
 800550a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800550c:	4b83      	ldr	r3, [pc, #524]	@ (800571c <MX_LWIP_Init+0x24c>)
 800550e:	22a8      	movs	r2, #168	@ 0xa8
 8005510:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 10;
 8005512:	4b82      	ldr	r3, [pc, #520]	@ (800571c <MX_LWIP_Init+0x24c>)
 8005514:	220a      	movs	r2, #10
 8005516:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005518:	4b80      	ldr	r3, [pc, #512]	@ (800571c <MX_LWIP_Init+0x24c>)
 800551a:	2201      	movs	r2, #1
 800551c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800551e:	2100      	movs	r1, #0
 8005520:	2000      	movs	r0, #0
 8005522:	f007 fc93 	bl	800ce4c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005526:	4b7b      	ldr	r3, [pc, #492]	@ (8005714 <MX_LWIP_Init+0x244>)
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	061a      	lsls	r2, r3, #24
 800552c:	4b79      	ldr	r3, [pc, #484]	@ (8005714 <MX_LWIP_Init+0x244>)
 800552e:	785b      	ldrb	r3, [r3, #1]
 8005530:	041b      	lsls	r3, r3, #16
 8005532:	431a      	orrs	r2, r3
 8005534:	4b77      	ldr	r3, [pc, #476]	@ (8005714 <MX_LWIP_Init+0x244>)
 8005536:	789b      	ldrb	r3, [r3, #2]
 8005538:	021b      	lsls	r3, r3, #8
 800553a:	4313      	orrs	r3, r2
 800553c:	4a75      	ldr	r2, [pc, #468]	@ (8005714 <MX_LWIP_Init+0x244>)
 800553e:	78d2      	ldrb	r2, [r2, #3]
 8005540:	4313      	orrs	r3, r2
 8005542:	061a      	lsls	r2, r3, #24
 8005544:	4b73      	ldr	r3, [pc, #460]	@ (8005714 <MX_LWIP_Init+0x244>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	0619      	lsls	r1, r3, #24
 800554a:	4b72      	ldr	r3, [pc, #456]	@ (8005714 <MX_LWIP_Init+0x244>)
 800554c:	785b      	ldrb	r3, [r3, #1]
 800554e:	041b      	lsls	r3, r3, #16
 8005550:	4319      	orrs	r1, r3
 8005552:	4b70      	ldr	r3, [pc, #448]	@ (8005714 <MX_LWIP_Init+0x244>)
 8005554:	789b      	ldrb	r3, [r3, #2]
 8005556:	021b      	lsls	r3, r3, #8
 8005558:	430b      	orrs	r3, r1
 800555a:	496e      	ldr	r1, [pc, #440]	@ (8005714 <MX_LWIP_Init+0x244>)
 800555c:	78c9      	ldrb	r1, [r1, #3]
 800555e:	430b      	orrs	r3, r1
 8005560:	021b      	lsls	r3, r3, #8
 8005562:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005566:	431a      	orrs	r2, r3
 8005568:	4b6a      	ldr	r3, [pc, #424]	@ (8005714 <MX_LWIP_Init+0x244>)
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	0619      	lsls	r1, r3, #24
 800556e:	4b69      	ldr	r3, [pc, #420]	@ (8005714 <MX_LWIP_Init+0x244>)
 8005570:	785b      	ldrb	r3, [r3, #1]
 8005572:	041b      	lsls	r3, r3, #16
 8005574:	4319      	orrs	r1, r3
 8005576:	4b67      	ldr	r3, [pc, #412]	@ (8005714 <MX_LWIP_Init+0x244>)
 8005578:	789b      	ldrb	r3, [r3, #2]
 800557a:	021b      	lsls	r3, r3, #8
 800557c:	430b      	orrs	r3, r1
 800557e:	4965      	ldr	r1, [pc, #404]	@ (8005714 <MX_LWIP_Init+0x244>)
 8005580:	78c9      	ldrb	r1, [r1, #3]
 8005582:	430b      	orrs	r3, r1
 8005584:	0a1b      	lsrs	r3, r3, #8
 8005586:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800558a:	431a      	orrs	r2, r3
 800558c:	4b61      	ldr	r3, [pc, #388]	@ (8005714 <MX_LWIP_Init+0x244>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	0619      	lsls	r1, r3, #24
 8005592:	4b60      	ldr	r3, [pc, #384]	@ (8005714 <MX_LWIP_Init+0x244>)
 8005594:	785b      	ldrb	r3, [r3, #1]
 8005596:	041b      	lsls	r3, r3, #16
 8005598:	4319      	orrs	r1, r3
 800559a:	4b5e      	ldr	r3, [pc, #376]	@ (8005714 <MX_LWIP_Init+0x244>)
 800559c:	789b      	ldrb	r3, [r3, #2]
 800559e:	021b      	lsls	r3, r3, #8
 80055a0:	430b      	orrs	r3, r1
 80055a2:	495c      	ldr	r1, [pc, #368]	@ (8005714 <MX_LWIP_Init+0x244>)
 80055a4:	78c9      	ldrb	r1, [r1, #3]
 80055a6:	430b      	orrs	r3, r1
 80055a8:	0e1b      	lsrs	r3, r3, #24
 80055aa:	4313      	orrs	r3, r2
 80055ac:	4a5c      	ldr	r2, [pc, #368]	@ (8005720 <MX_LWIP_Init+0x250>)
 80055ae:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80055b0:	4b59      	ldr	r3, [pc, #356]	@ (8005718 <MX_LWIP_Init+0x248>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	061a      	lsls	r2, r3, #24
 80055b6:	4b58      	ldr	r3, [pc, #352]	@ (8005718 <MX_LWIP_Init+0x248>)
 80055b8:	785b      	ldrb	r3, [r3, #1]
 80055ba:	041b      	lsls	r3, r3, #16
 80055bc:	431a      	orrs	r2, r3
 80055be:	4b56      	ldr	r3, [pc, #344]	@ (8005718 <MX_LWIP_Init+0x248>)
 80055c0:	789b      	ldrb	r3, [r3, #2]
 80055c2:	021b      	lsls	r3, r3, #8
 80055c4:	4313      	orrs	r3, r2
 80055c6:	4a54      	ldr	r2, [pc, #336]	@ (8005718 <MX_LWIP_Init+0x248>)
 80055c8:	78d2      	ldrb	r2, [r2, #3]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	061a      	lsls	r2, r3, #24
 80055ce:	4b52      	ldr	r3, [pc, #328]	@ (8005718 <MX_LWIP_Init+0x248>)
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	0619      	lsls	r1, r3, #24
 80055d4:	4b50      	ldr	r3, [pc, #320]	@ (8005718 <MX_LWIP_Init+0x248>)
 80055d6:	785b      	ldrb	r3, [r3, #1]
 80055d8:	041b      	lsls	r3, r3, #16
 80055da:	4319      	orrs	r1, r3
 80055dc:	4b4e      	ldr	r3, [pc, #312]	@ (8005718 <MX_LWIP_Init+0x248>)
 80055de:	789b      	ldrb	r3, [r3, #2]
 80055e0:	021b      	lsls	r3, r3, #8
 80055e2:	430b      	orrs	r3, r1
 80055e4:	494c      	ldr	r1, [pc, #304]	@ (8005718 <MX_LWIP_Init+0x248>)
 80055e6:	78c9      	ldrb	r1, [r1, #3]
 80055e8:	430b      	orrs	r3, r1
 80055ea:	021b      	lsls	r3, r3, #8
 80055ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80055f0:	431a      	orrs	r2, r3
 80055f2:	4b49      	ldr	r3, [pc, #292]	@ (8005718 <MX_LWIP_Init+0x248>)
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	0619      	lsls	r1, r3, #24
 80055f8:	4b47      	ldr	r3, [pc, #284]	@ (8005718 <MX_LWIP_Init+0x248>)
 80055fa:	785b      	ldrb	r3, [r3, #1]
 80055fc:	041b      	lsls	r3, r3, #16
 80055fe:	4319      	orrs	r1, r3
 8005600:	4b45      	ldr	r3, [pc, #276]	@ (8005718 <MX_LWIP_Init+0x248>)
 8005602:	789b      	ldrb	r3, [r3, #2]
 8005604:	021b      	lsls	r3, r3, #8
 8005606:	430b      	orrs	r3, r1
 8005608:	4943      	ldr	r1, [pc, #268]	@ (8005718 <MX_LWIP_Init+0x248>)
 800560a:	78c9      	ldrb	r1, [r1, #3]
 800560c:	430b      	orrs	r3, r1
 800560e:	0a1b      	lsrs	r3, r3, #8
 8005610:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005614:	431a      	orrs	r2, r3
 8005616:	4b40      	ldr	r3, [pc, #256]	@ (8005718 <MX_LWIP_Init+0x248>)
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	0619      	lsls	r1, r3, #24
 800561c:	4b3e      	ldr	r3, [pc, #248]	@ (8005718 <MX_LWIP_Init+0x248>)
 800561e:	785b      	ldrb	r3, [r3, #1]
 8005620:	041b      	lsls	r3, r3, #16
 8005622:	4319      	orrs	r1, r3
 8005624:	4b3c      	ldr	r3, [pc, #240]	@ (8005718 <MX_LWIP_Init+0x248>)
 8005626:	789b      	ldrb	r3, [r3, #2]
 8005628:	021b      	lsls	r3, r3, #8
 800562a:	430b      	orrs	r3, r1
 800562c:	493a      	ldr	r1, [pc, #232]	@ (8005718 <MX_LWIP_Init+0x248>)
 800562e:	78c9      	ldrb	r1, [r1, #3]
 8005630:	430b      	orrs	r3, r1
 8005632:	0e1b      	lsrs	r3, r3, #24
 8005634:	4313      	orrs	r3, r2
 8005636:	4a3b      	ldr	r2, [pc, #236]	@ (8005724 <MX_LWIP_Init+0x254>)
 8005638:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800563a:	4b38      	ldr	r3, [pc, #224]	@ (800571c <MX_LWIP_Init+0x24c>)
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	061a      	lsls	r2, r3, #24
 8005640:	4b36      	ldr	r3, [pc, #216]	@ (800571c <MX_LWIP_Init+0x24c>)
 8005642:	785b      	ldrb	r3, [r3, #1]
 8005644:	041b      	lsls	r3, r3, #16
 8005646:	431a      	orrs	r2, r3
 8005648:	4b34      	ldr	r3, [pc, #208]	@ (800571c <MX_LWIP_Init+0x24c>)
 800564a:	789b      	ldrb	r3, [r3, #2]
 800564c:	021b      	lsls	r3, r3, #8
 800564e:	4313      	orrs	r3, r2
 8005650:	4a32      	ldr	r2, [pc, #200]	@ (800571c <MX_LWIP_Init+0x24c>)
 8005652:	78d2      	ldrb	r2, [r2, #3]
 8005654:	4313      	orrs	r3, r2
 8005656:	061a      	lsls	r2, r3, #24
 8005658:	4b30      	ldr	r3, [pc, #192]	@ (800571c <MX_LWIP_Init+0x24c>)
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	0619      	lsls	r1, r3, #24
 800565e:	4b2f      	ldr	r3, [pc, #188]	@ (800571c <MX_LWIP_Init+0x24c>)
 8005660:	785b      	ldrb	r3, [r3, #1]
 8005662:	041b      	lsls	r3, r3, #16
 8005664:	4319      	orrs	r1, r3
 8005666:	4b2d      	ldr	r3, [pc, #180]	@ (800571c <MX_LWIP_Init+0x24c>)
 8005668:	789b      	ldrb	r3, [r3, #2]
 800566a:	021b      	lsls	r3, r3, #8
 800566c:	430b      	orrs	r3, r1
 800566e:	492b      	ldr	r1, [pc, #172]	@ (800571c <MX_LWIP_Init+0x24c>)
 8005670:	78c9      	ldrb	r1, [r1, #3]
 8005672:	430b      	orrs	r3, r1
 8005674:	021b      	lsls	r3, r3, #8
 8005676:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800567a:	431a      	orrs	r2, r3
 800567c:	4b27      	ldr	r3, [pc, #156]	@ (800571c <MX_LWIP_Init+0x24c>)
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	0619      	lsls	r1, r3, #24
 8005682:	4b26      	ldr	r3, [pc, #152]	@ (800571c <MX_LWIP_Init+0x24c>)
 8005684:	785b      	ldrb	r3, [r3, #1]
 8005686:	041b      	lsls	r3, r3, #16
 8005688:	4319      	orrs	r1, r3
 800568a:	4b24      	ldr	r3, [pc, #144]	@ (800571c <MX_LWIP_Init+0x24c>)
 800568c:	789b      	ldrb	r3, [r3, #2]
 800568e:	021b      	lsls	r3, r3, #8
 8005690:	430b      	orrs	r3, r1
 8005692:	4922      	ldr	r1, [pc, #136]	@ (800571c <MX_LWIP_Init+0x24c>)
 8005694:	78c9      	ldrb	r1, [r1, #3]
 8005696:	430b      	orrs	r3, r1
 8005698:	0a1b      	lsrs	r3, r3, #8
 800569a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800569e:	431a      	orrs	r2, r3
 80056a0:	4b1e      	ldr	r3, [pc, #120]	@ (800571c <MX_LWIP_Init+0x24c>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	0619      	lsls	r1, r3, #24
 80056a6:	4b1d      	ldr	r3, [pc, #116]	@ (800571c <MX_LWIP_Init+0x24c>)
 80056a8:	785b      	ldrb	r3, [r3, #1]
 80056aa:	041b      	lsls	r3, r3, #16
 80056ac:	4319      	orrs	r1, r3
 80056ae:	4b1b      	ldr	r3, [pc, #108]	@ (800571c <MX_LWIP_Init+0x24c>)
 80056b0:	789b      	ldrb	r3, [r3, #2]
 80056b2:	021b      	lsls	r3, r3, #8
 80056b4:	430b      	orrs	r3, r1
 80056b6:	4919      	ldr	r1, [pc, #100]	@ (800571c <MX_LWIP_Init+0x24c>)
 80056b8:	78c9      	ldrb	r1, [r1, #3]
 80056ba:	430b      	orrs	r3, r1
 80056bc:	0e1b      	lsrs	r3, r3, #24
 80056be:	4313      	orrs	r3, r2
 80056c0:	4a19      	ldr	r2, [pc, #100]	@ (8005728 <MX_LWIP_Init+0x258>)
 80056c2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80056c4:	4b19      	ldr	r3, [pc, #100]	@ (800572c <MX_LWIP_Init+0x25c>)
 80056c6:	9302      	str	r3, [sp, #8]
 80056c8:	4b19      	ldr	r3, [pc, #100]	@ (8005730 <MX_LWIP_Init+0x260>)
 80056ca:	9301      	str	r3, [sp, #4]
 80056cc:	2300      	movs	r3, #0
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	4b15      	ldr	r3, [pc, #84]	@ (8005728 <MX_LWIP_Init+0x258>)
 80056d2:	4a14      	ldr	r2, [pc, #80]	@ (8005724 <MX_LWIP_Init+0x254>)
 80056d4:	4912      	ldr	r1, [pc, #72]	@ (8005720 <MX_LWIP_Init+0x250>)
 80056d6:	4817      	ldr	r0, [pc, #92]	@ (8005734 <MX_LWIP_Init+0x264>)
 80056d8:	f008 f97e 	bl	800d9d8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80056dc:	4815      	ldr	r0, [pc, #84]	@ (8005734 <MX_LWIP_Init+0x264>)
 80056de:	f008 fb2d 	bl	800dd3c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80056e2:	4814      	ldr	r0, [pc, #80]	@ (8005734 <MX_LWIP_Init+0x264>)
 80056e4:	f008 fb3a 	bl	800dd5c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80056e8:	4913      	ldr	r1, [pc, #76]	@ (8005738 <MX_LWIP_Init+0x268>)
 80056ea:	4812      	ldr	r0, [pc, #72]	@ (8005734 <MX_LWIP_Init+0x264>)
 80056ec:	f008 fc38 	bl	800df60 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 80056f0:	4b12      	ldr	r3, [pc, #72]	@ (800573c <MX_LWIP_Init+0x26c>)
 80056f2:	1d3c      	adds	r4, r7, #4
 80056f4:	461d      	mov	r5, r3
 80056f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80056fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8005702:	1d3b      	adds	r3, r7, #4
 8005704:	490b      	ldr	r1, [pc, #44]	@ (8005734 <MX_LWIP_Init+0x264>)
 8005706:	4618      	mov	r0, r3
 8005708:	f000 fdcb 	bl	80062a2 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800570c:	bf00      	nop
 800570e:	3720      	adds	r7, #32
 8005710:	46bd      	mov	sp, r7
 8005712:	bdb0      	pop	{r4, r5, r7, pc}
 8005714:	20000788 	.word	0x20000788
 8005718:	2000078c 	.word	0x2000078c
 800571c:	20000790 	.word	0x20000790
 8005720:	2000077c 	.word	0x2000077c
 8005724:	20000780 	.word	0x20000780
 8005728:	20000784 	.word	0x20000784
 800572c:	0800cd5d 	.word	0x0800cd5d
 8005730:	08005cd9 	.word	0x08005cd9
 8005734:	20000748 	.word	0x20000748
 8005738:	08005741 	.word	0x08005741
 800573c:	0802677c 	.word	0x0802677c

08005740 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8005766:	2320      	movs	r3, #32
 8005768:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800576a:	f3bf 8f4f 	dsb	sy
}
 800576e:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8005770:	e00b      	b.n	800578a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8005772:	4a0d      	ldr	r2, [pc, #52]	@ (80057a8 <SCB_InvalidateDCache_by_Addr+0x54>)
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	4413      	add	r3, r2
 8005780:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b00      	cmp	r3, #0
 800578e:	dcf0      	bgt.n	8005772 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005790:	f3bf 8f4f 	dsb	sy
}
 8005794:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005796:	f3bf 8f6f 	isb	sy
}
 800579a:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800579c:	bf00      	nop
 800579e:	371c      	adds	r7, #28
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	e000ed00 	.word	0xe000ed00

080057ac <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80057b4:	4b04      	ldr	r3, [pc, #16]	@ (80057c8 <HAL_ETH_RxCpltCallback+0x1c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f000 fefb 	bl	80065b4 <osSemaphoreRelease>
}
 80057be:	bf00      	nop
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	20005120 	.word	0x20005120

080057cc <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80057d4:	4b04      	ldr	r3, [pc, #16]	@ (80057e8 <HAL_ETH_TxCpltCallback+0x1c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 feeb 	bl	80065b4 <osSemaphoreRelease>
}
 80057de:	bf00      	nop
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	20005124 	.word	0x20005124

080057ec <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7fc ffb0 	bl	800275a <HAL_ETH_GetDMAError>
 80057fa:	4603      	mov	r3, r0
 80057fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005800:	2b80      	cmp	r3, #128	@ 0x80
 8005802:	d104      	bne.n	800580e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8005804:	4b04      	ldr	r3, [pc, #16]	@ (8005818 <HAL_ETH_ErrorCallback+0x2c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4618      	mov	r0, r3
 800580a:	f000 fed3 	bl	80065b4 <osSemaphoreRelease>
  }
}
 800580e:	bf00      	nop
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	20005120 	.word	0x20005120

0800581c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800581c:	b5b0      	push	{r4, r5, r7, lr}
 800581e:	b0b4      	sub	sp, #208	@ 0xd0
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005824:	2300      	movs	r3, #0
 8005826:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  uint32_t duplex, speed = 0;
 800582a:	2300      	movs	r3, #0
 800582c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  int32_t PHYLinkState = 0;
 8005830:	2300      	movs	r3, #0
 8005832:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  ETH_MACConfigTypeDef MACConf = {0};
 8005836:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800583a:	2264      	movs	r2, #100	@ 0x64
 800583c:	2100      	movs	r1, #0
 800583e:	4618      	mov	r0, r3
 8005840:	f01f ffc8 	bl	80257d4 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005844:	4b9f      	ldr	r3, [pc, #636]	@ (8005ac4 <low_level_init+0x2a8>)
 8005846:	4aa0      	ldr	r2, [pc, #640]	@ (8005ac8 <low_level_init+0x2ac>)
 8005848:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800584a:	2300      	movs	r3, #0
 800584c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  MACAddr[1] = 0x80;
 8005850:	2380      	movs	r3, #128	@ 0x80
 8005852:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  MACAddr[2] = 0xE1;
 8005856:	23e1      	movs	r3, #225	@ 0xe1
 8005858:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  MACAddr[3] = 0x00;
 800585c:	2300      	movs	r3, #0
 800585e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  MACAddr[4] = 0x00;
 8005862:	2300      	movs	r3, #0
 8005864:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  MACAddr[5] = 0x00;
 8005868:	2300      	movs	r3, #0
 800586a:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
  heth.Init.MACAddr = &MACAddr[0];
 800586e:	4a95      	ldr	r2, [pc, #596]	@ (8005ac4 <low_level_init+0x2a8>)
 8005870:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005874:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005876:	4b93      	ldr	r3, [pc, #588]	@ (8005ac4 <low_level_init+0x2a8>)
 8005878:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800587c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800587e:	4b91      	ldr	r3, [pc, #580]	@ (8005ac4 <low_level_init+0x2a8>)
 8005880:	4a92      	ldr	r2, [pc, #584]	@ (8005acc <low_level_init+0x2b0>)
 8005882:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005884:	4b8f      	ldr	r3, [pc, #572]	@ (8005ac4 <low_level_init+0x2a8>)
 8005886:	4a92      	ldr	r2, [pc, #584]	@ (8005ad0 <low_level_init+0x2b4>)
 8005888:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800588a:	4b8e      	ldr	r3, [pc, #568]	@ (8005ac4 <low_level_init+0x2a8>)
 800588c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005890:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005892:	488c      	ldr	r0, [pc, #560]	@ (8005ac4 <low_level_init+0x2a8>)
 8005894:	f7fc f918 	bl	8001ac8 <HAL_ETH_Init>
 8005898:	4603      	mov	r3, r0
 800589a:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800589e:	2238      	movs	r2, #56	@ 0x38
 80058a0:	2100      	movs	r1, #0
 80058a2:	488c      	ldr	r0, [pc, #560]	@ (8005ad4 <low_level_init+0x2b8>)
 80058a4:	f01f ff96 	bl	80257d4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80058a8:	4b8a      	ldr	r3, [pc, #552]	@ (8005ad4 <low_level_init+0x2b8>)
 80058aa:	2221      	movs	r2, #33	@ 0x21
 80058ac:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80058ae:	4b89      	ldr	r3, [pc, #548]	@ (8005ad4 <low_level_init+0x2b8>)
 80058b0:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80058b4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80058b6:	4b87      	ldr	r3, [pc, #540]	@ (8005ad4 <low_level_init+0x2b8>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80058bc:	4886      	ldr	r0, [pc, #536]	@ (8005ad8 <low_level_init+0x2bc>)
 80058be:	f007 ff45 	bl	800d74c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2206      	movs	r2, #6
 80058c6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80058ca:	4b7e      	ldr	r3, [pc, #504]	@ (8005ac4 <low_level_init+0x2a8>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	781a      	ldrb	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80058d6:	4b7b      	ldr	r3, [pc, #492]	@ (8005ac4 <low_level_init+0x2a8>)
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	785a      	ldrb	r2, [r3, #1]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80058e2:	4b78      	ldr	r3, [pc, #480]	@ (8005ac4 <low_level_init+0x2a8>)
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	789a      	ldrb	r2, [r3, #2]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80058ee:	4b75      	ldr	r3, [pc, #468]	@ (8005ac4 <low_level_init+0x2a8>)
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	78da      	ldrb	r2, [r3, #3]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80058fa:	4b72      	ldr	r3, [pc, #456]	@ (8005ac4 <low_level_init+0x2a8>)
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	791a      	ldrb	r2, [r3, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005906:	4b6f      	ldr	r3, [pc, #444]	@ (8005ac4 <low_level_init+0x2a8>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	795a      	ldrb	r2, [r3, #5]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005918:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005920:	f043 030a 	orr.w	r3, r3, #10
 8005924:	b2da      	uxtb	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 800592c:	2300      	movs	r3, #0
 800592e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005930:	2300      	movs	r3, #0
 8005932:	653b      	str	r3, [r7, #80]	@ 0x50
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8005934:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005938:	2101      	movs	r1, #1
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fdba 	bl	80064b4 <osSemaphoreCreate>
 8005940:	4603      	mov	r3, r0
 8005942:	4a66      	ldr	r2, [pc, #408]	@ (8005adc <low_level_init+0x2c0>)
 8005944:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8005946:	2300      	movs	r3, #0
 8005948:	647b      	str	r3, [r7, #68]	@ 0x44
 800594a:	2300      	movs	r3, #0
 800594c:	64bb      	str	r3, [r7, #72]	@ 0x48
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800594e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8005952:	2101      	movs	r1, #1
 8005954:	4618      	mov	r0, r3
 8005956:	f000 fdad 	bl	80064b4 <osSemaphoreCreate>
 800595a:	4603      	mov	r3, r0
 800595c:	4a60      	ldr	r2, [pc, #384]	@ (8005ae0 <low_level_init+0x2c4>)
 800595e:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8005960:	4b5e      	ldr	r3, [pc, #376]	@ (8005adc <low_level_init+0x2c0>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2100      	movs	r1, #0
 8005966:	4618      	mov	r0, r3
 8005968:	f000 fdd6 	bl	8006518 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 800596c:	4b5c      	ldr	r3, [pc, #368]	@ (8005ae0 <low_level_init+0x2c4>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2100      	movs	r1, #0
 8005972:	4618      	mov	r0, r3
 8005974:	f000 fdd0 	bl	8006518 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8005978:	4b5a      	ldr	r3, [pc, #360]	@ (8005ae4 <low_level_init+0x2c8>)
 800597a:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800597e:	461d      	mov	r5, r3
 8005980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005984:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005988:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800598c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005990:	6879      	ldr	r1, [r7, #4]
 8005992:	4618      	mov	r0, r3
 8005994:	f000 fc85 	bl	80062a2 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005998:	4953      	ldr	r1, [pc, #332]	@ (8005ae8 <low_level_init+0x2cc>)
 800599a:	4854      	ldr	r0, [pc, #336]	@ (8005aec <low_level_init+0x2d0>)
 800599c:	f7fb fe4f 	bl	800163e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 80059a0:	4852      	ldr	r0, [pc, #328]	@ (8005aec <low_level_init+0x2d0>)
 80059a2:	f7fb fe7e 	bl	80016a2 <LAN8742_Init>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d006      	beq.n	80059ba <low_level_init+0x19e>
  {
    netif_set_link_down(netif);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f008 faa7 	bl	800df00 <netif_set_link_down>
    netif_set_down(netif);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f008 fa3e 	bl	800de34 <netif_set_down>
 80059b8:	e081      	b.n	8005abe <low_level_init+0x2a2>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 80059ba:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d165      	bne.n	8005a8e <low_level_init+0x272>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80059c2:	484a      	ldr	r0, [pc, #296]	@ (8005aec <low_level_init+0x2d0>)
 80059c4:	f7fb feba 	bl	800173c <LAN8742_GetLinkState>
 80059c8:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80059cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	dc06      	bgt.n	80059e2 <low_level_init+0x1c6>
    {
      netif_set_link_down(netif);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f008 fa93 	bl	800df00 <netif_set_link_down>
      netif_set_down(netif);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f008 fa2a 	bl	800de34 <netif_set_down>
 80059e0:	e057      	b.n	8005a92 <low_level_init+0x276>
    }
    else
    {
      switch (PHYLinkState)
 80059e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80059e6:	3b02      	subs	r3, #2
 80059e8:	2b03      	cmp	r3, #3
 80059ea:	d82b      	bhi.n	8005a44 <low_level_init+0x228>
 80059ec:	a201      	add	r2, pc, #4	@ (adr r2, 80059f4 <low_level_init+0x1d8>)
 80059ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f2:	bf00      	nop
 80059f4:	08005a05 	.word	0x08005a05
 80059f8:	08005a17 	.word	0x08005a17
 80059fc:	08005a27 	.word	0x08005a27
 8005a00:	08005a37 	.word	0x08005a37
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8005a04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005a08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8005a0c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005a10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8005a14:	e01f      	b.n	8005a56 <low_level_init+0x23a>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8005a16:	2300      	movs	r3, #0
 8005a18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8005a1c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005a20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8005a24:	e017      	b.n	8005a56 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8005a26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005a2a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8005a34:	e00f      	b.n	8005a56 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8005a36:	2300      	movs	r3, #0
 8005a38:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8005a42:	e008      	b.n	8005a56 <low_level_init+0x23a>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8005a44:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005a48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8005a4c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005a50:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8005a54:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005a56:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	4819      	ldr	r0, [pc, #100]	@ (8005ac4 <low_level_init+0x2a8>)
 8005a5e:	f7fc fd1b 	bl	8002498 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8005a62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a66:	677b      	str	r3, [r7, #116]	@ 0x74
    MACConf.Speed = speed;
 8005a68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005a6c:	673b      	str	r3, [r7, #112]	@ 0x70
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005a6e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8005a72:	4619      	mov	r1, r3
 8005a74:	4813      	ldr	r0, [pc, #76]	@ (8005ac4 <low_level_init+0x2a8>)
 8005a76:	f7fc fe06 	bl	8002686 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8005a7a:	4812      	ldr	r0, [pc, #72]	@ (8005ac4 <low_level_init+0x2a8>)
 8005a7c:	f7fc f8be 	bl	8001bfc <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f008 f96b 	bl	800dd5c <netif_set_up>
    netif_set_link_up(netif);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f008 fa06 	bl	800de98 <netif_set_link_up>
 8005a8c:	e001      	b.n	8005a92 <low_level_init+0x276>
    }

  }
  else
  {
    Error_Handler();
 8005a8e:	f7fb fb11 	bl	80010b4 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

  if(HAL_GetREVID() == 0x1000)
 8005a92:	f7fb ff2b 	bl	80018ec <HAL_GetREVID>
 8005a96:	4603      	mov	r3, r0
 8005a98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a9c:	d10f      	bne.n	8005abe <low_level_init+0x2a2>
  {
    /*
      This thread will keep resetting the RMII interface until good frames are received
    */
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 8005a9e:	4b14      	ldr	r3, [pc, #80]	@ (8005af0 <low_level_init+0x2d4>)
 8005aa0:	f107 040c 	add.w	r4, r7, #12
 8005aa4:	461d      	mov	r5, r3
 8005aa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005aa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005aaa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005aae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 8005ab2:	f107 030c 	add.w	r3, r7, #12
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 fbf2 	bl	80062a2 <osThreadCreate>
  }
}
 8005abe:	37d0      	adds	r7, #208	@ 0xd0
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ac4:	20005128 	.word	0x20005128
 8005ac8:	40028000 	.word	0x40028000
 8005acc:	20000258 	.word	0x20000258
 8005ad0:	200001b8 	.word	0x200001b8
 8005ad4:	200051d8 	.word	0x200051d8
 8005ad8:	0802a188 	.word	0x0802a188
 8005adc:	20005120 	.word	0x20005120
 8005ae0:	20005124 	.word	0x20005124
 8005ae4:	080267a0 	.word	0x080267a0
 8005ae8:	20000014 	.word	0x20000014
 8005aec:	20005210 	.word	0x20005210
 8005af0:	080267cc 	.word	0x080267cc

08005af4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b092      	sub	sp, #72	@ 0x48
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8005b02:	2300      	movs	r3, #0
 8005b04:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005b0c:	f107 030c 	add.w	r3, r7, #12
 8005b10:	2230      	movs	r2, #48	@ 0x30
 8005b12:	2100      	movs	r1, #0
 8005b14:	4618      	mov	r0, r3
 8005b16:	f01f fe5d 	bl	80257d4 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005b1a:	f107 030c 	add.w	r3, r7, #12
 8005b1e:	2230      	movs	r2, #48	@ 0x30
 8005b20:	2100      	movs	r1, #0
 8005b22:	4618      	mov	r0, r3
 8005b24:	f01f fe56 	bl	80257d4 <memset>

  for(q = p; q != NULL; q = q->next)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b2c:	e045      	b.n	8005bba <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005b2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b30:	2b03      	cmp	r3, #3
 8005b32:	d902      	bls.n	8005b3a <low_level_output+0x46>
      return ERR_IF;
 8005b34:	f06f 030b 	mvn.w	r3, #11
 8005b38:	e07f      	b.n	8005c3a <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8005b3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b3c:	6859      	ldr	r1, [r3, #4]
 8005b3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b40:	4613      	mov	r3, r2
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	4413      	add	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	3348      	adds	r3, #72	@ 0x48
 8005b4a:	443b      	add	r3, r7
 8005b4c:	3b3c      	subs	r3, #60	@ 0x3c
 8005b4e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005b50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b52:	895b      	ldrh	r3, [r3, #10]
 8005b54:	4619      	mov	r1, r3
 8005b56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b58:	4613      	mov	r3, r2
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	4413      	add	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	3348      	adds	r3, #72	@ 0x48
 8005b62:	443b      	add	r3, r7
 8005b64:	3b38      	subs	r3, #56	@ 0x38
 8005b66:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d011      	beq.n	8005b92 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005b6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b70:	1e5a      	subs	r2, r3, #1
 8005b72:	f107 000c 	add.w	r0, r7, #12
 8005b76:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005b78:	460b      	mov	r3, r1
 8005b7a:	005b      	lsls	r3, r3, #1
 8005b7c:	440b      	add	r3, r1
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	18c1      	adds	r1, r0, r3
 8005b82:	4613      	mov	r3, r2
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	4413      	add	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	3348      	adds	r3, #72	@ 0x48
 8005b8c:	443b      	add	r3, r7
 8005b8e:	3b34      	subs	r3, #52	@ 0x34
 8005b90:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005b92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d109      	bne.n	8005bae <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005b9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	4413      	add	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	3348      	adds	r3, #72	@ 0x48
 8005ba6:	443b      	add	r3, r7
 8005ba8:	3b34      	subs	r3, #52	@ 0x34
 8005baa:	2200      	movs	r2, #0
 8005bac:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005bae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8005bb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1b6      	bne.n	8005b2e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	891b      	ldrh	r3, [r3, #8]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8005c44 <low_level_output+0x150>)
 8005bc8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005bca:	4a1e      	ldr	r2, [pc, #120]	@ (8005c44 <low_level_output+0x150>)
 8005bcc:	f107 030c 	add.w	r3, r7, #12
 8005bd0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005bd2:	4a1c      	ldr	r2, [pc, #112]	@ (8005c44 <low_level_output+0x150>)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8005bd8:	6838      	ldr	r0, [r7, #0]
 8005bda:	f008 fe7f 	bl	800e8dc <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8005bde:	4919      	ldr	r1, [pc, #100]	@ (8005c44 <low_level_output+0x150>)
 8005be0:	4819      	ldr	r0, [pc, #100]	@ (8005c48 <low_level_output+0x154>)
 8005be2:	f7fc f8fb 	bl	8001ddc <HAL_ETH_Transmit_IT>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d103      	bne.n	8005bf4 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8005bec:	2300      	movs	r3, #0
 8005bee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005bf2:	e01b      	b.n	8005c2c <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8005bf4:	4814      	ldr	r0, [pc, #80]	@ (8005c48 <low_level_output+0x154>)
 8005bf6:	f7fc fda3 	bl	8002740 <HAL_ETH_GetError>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	f003 0302 	and.w	r3, r3, #2
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00d      	beq.n	8005c20 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8005c04:	4b11      	ldr	r3, [pc, #68]	@ (8005c4c <low_level_output+0x158>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 fc83 	bl	8006518 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 8005c12:	480d      	ldr	r0, [pc, #52]	@ (8005c48 <low_level_output+0x154>)
 8005c14:	f7fc fa82 	bl	800211c <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8005c18:	23fe      	movs	r3, #254	@ 0xfe
 8005c1a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005c1e:	e005      	b.n	8005c2c <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8005c20:	6838      	ldr	r0, [r7, #0]
 8005c22:	f008 fdb5 	bl	800e790 <pbuf_free>
        errval =  ERR_IF;
 8005c26:	23f4      	movs	r3, #244	@ 0xf4
 8005c28:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8005c2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005c30:	f113 0f02 	cmn.w	r3, #2
 8005c34:	d0d3      	beq.n	8005bde <low_level_output+0xea>

  return errval;
 8005c36:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3748      	adds	r7, #72	@ 0x48
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	200051d8 	.word	0x200051d8
 8005c48:	20005128 	.word	0x20005128
 8005c4c:	20005124 	.word	0x20005124

08005c50 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005c5c:	4b07      	ldr	r3, [pc, #28]	@ (8005c7c <low_level_input+0x2c>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d105      	bne.n	8005c70 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005c64:	f107 030c 	add.w	r3, r7, #12
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4805      	ldr	r0, [pc, #20]	@ (8005c80 <low_level_input+0x30>)
 8005c6c:	f7fc f912 	bl	8001e94 <HAL_ETH_ReadData>
  }

  return p;
 8005c70:	68fb      	ldr	r3, [r7, #12]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	2000511c 	.word	0x2000511c
 8005c80:	20005128 	.word	0x20005128

08005c84 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005c94:	4b0f      	ldr	r3, [pc, #60]	@ (8005cd4 <ethernetif_input+0x50>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f04f 31ff 	mov.w	r1, #4294967295
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 fc3b 	bl	8006518 <osSemaphoreWait>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1f5      	bne.n	8005c94 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005ca8:	68b8      	ldr	r0, [r7, #8]
 8005caa:	f7ff ffd1 	bl	8005c50 <low_level_input>
 8005cae:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00a      	beq.n	8005ccc <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	68b9      	ldr	r1, [r7, #8]
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	4798      	blx	r3
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d002      	beq.n	8005ccc <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f008 fd62 	bl	800e790 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1ea      	bne.n	8005ca8 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005cd2:	e7df      	b.n	8005c94 <ethernetif_input+0x10>
 8005cd4:	20005120 	.word	0x20005120

08005cd8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d106      	bne.n	8005cf4 <ethernetif_init+0x1c>
 8005ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8005d20 <ethernetif_init+0x48>)
 8005ce8:	f240 2217 	movw	r2, #535	@ 0x217
 8005cec:	490d      	ldr	r1, [pc, #52]	@ (8005d24 <ethernetif_init+0x4c>)
 8005cee:	480e      	ldr	r0, [pc, #56]	@ (8005d28 <ethernetif_init+0x50>)
 8005cf0:	f01f fbea 	bl	80254c8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2273      	movs	r2, #115	@ 0x73
 8005cf8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2274      	movs	r2, #116	@ 0x74
 8005d00:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a09      	ldr	r2, [pc, #36]	@ (8005d2c <ethernetif_init+0x54>)
 8005d08:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a08      	ldr	r2, [pc, #32]	@ (8005d30 <ethernetif_init+0x58>)
 8005d0e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f7ff fd83 	bl	800581c <low_level_init>

  return ERR_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3708      	adds	r7, #8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	080267e8 	.word	0x080267e8
 8005d24:	08026804 	.word	0x08026804
 8005d28:	08026814 	.word	0x08026814
 8005d2c:	0801621d 	.word	0x0801621d
 8005d30:	08005af5 	.word	0x08005af5

08005d34 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005d40:	68f9      	ldr	r1, [r7, #12]
 8005d42:	4809      	ldr	r0, [pc, #36]	@ (8005d68 <pbuf_free_custom+0x34>)
 8005d44:	f007 fdf2 	bl	800d92c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005d48:	4b08      	ldr	r3, [pc, #32]	@ (8005d6c <pbuf_free_custom+0x38>)
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d107      	bne.n	8005d60 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005d50:	4b06      	ldr	r3, [pc, #24]	@ (8005d6c <pbuf_free_custom+0x38>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005d56:	4b06      	ldr	r3, [pc, #24]	@ (8005d70 <pbuf_free_custom+0x3c>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 fc2a 	bl	80065b4 <osSemaphoreRelease>
  }
}
 8005d60:	bf00      	nop
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	0802a188 	.word	0x0802a188
 8005d6c:	2000511c 	.word	0x2000511c
 8005d70:	20005120 	.word	0x20005120

08005d74 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005d78:	f7fb fd88 	bl	800188c <HAL_GetTick>
 8005d7c:	4603      	mov	r3, r0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	bd80      	pop	{r7, pc}
	...

08005d84 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08e      	sub	sp, #56	@ 0x38
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d90:	2200      	movs	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	605a      	str	r2, [r3, #4]
 8005d96:	609a      	str	r2, [r3, #8]
 8005d98:	60da      	str	r2, [r3, #12]
 8005d9a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a52      	ldr	r2, [pc, #328]	@ (8005eec <HAL_ETH_MspInit+0x168>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	f040 809e 	bne.w	8005ee4 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005da8:	4b51      	ldr	r3, [pc, #324]	@ (8005ef0 <HAL_ETH_MspInit+0x16c>)
 8005daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dac:	4a50      	ldr	r2, [pc, #320]	@ (8005ef0 <HAL_ETH_MspInit+0x16c>)
 8005dae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005db2:	6313      	str	r3, [r2, #48]	@ 0x30
 8005db4:	4b4e      	ldr	r3, [pc, #312]	@ (8005ef0 <HAL_ETH_MspInit+0x16c>)
 8005db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dbc:	623b      	str	r3, [r7, #32]
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	4b4b      	ldr	r3, [pc, #300]	@ (8005ef0 <HAL_ETH_MspInit+0x16c>)
 8005dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dc4:	4a4a      	ldr	r2, [pc, #296]	@ (8005ef0 <HAL_ETH_MspInit+0x16c>)
 8005dc6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005dca:	6313      	str	r3, [r2, #48]	@ 0x30
 8005dcc:	4b48      	ldr	r3, [pc, #288]	@ (8005ef0 <HAL_ETH_MspInit+0x16c>)
 8005dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005dd4:	61fb      	str	r3, [r7, #28]
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	4b45      	ldr	r3, [pc, #276]	@ (8005ef0 <HAL_ETH_MspInit+0x16c>)
 8005dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ddc:	4a44      	ldr	r2, [pc, #272]	@ (8005ef0 <HAL_ETH_MspInit+0x16c>)
 8005dde:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005de2:	6313      	str	r3, [r2, #48]	@ 0x30
 8005de4:	4b42      	ldr	r3, [pc, #264]	@ (8005ef0 <HAL_ETH_MspInit+0x16c>)
 8005de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005dec:	61bb      	str	r3, [r7, #24]
 8005dee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005df0:	4b3f      	ldr	r3, [pc, #252]	@ (8005ef0 <HAL_ETH_MspInit+0x16c>)
 8005df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df4:	4a3e      	ldr	r2, [pc, #248]	@ (8005ef0 <HAL_ETH_MspInit+0x16c>)
 8005df6:	f043 0304 	orr.w	r3, r3, #4
 8005dfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8005dfc:	4b3c      	ldr	r3, [pc, #240]	@ (8005ef0 <HAL_ETH_MspInit+0x16c>)
 8005dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e00:	f003 0304 	and.w	r3, r3, #4
 8005e04:	617b      	str	r3, [r7, #20]
 8005e06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e08:	4b39      	ldr	r3, [pc, #228]	@ (8005ef0 <HAL_ETH_MspInit+0x16c>)
 8005e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e0c:	4a38      	ldr	r2, [pc, #224]	@ (8005ef0 <HAL_ETH_MspInit+0x16c>)
 8005e0e:	f043 0301 	orr.w	r3, r3, #1
 8005e12:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e14:	4b36      	ldr	r3, [pc, #216]	@ (8005ef0 <HAL_ETH_MspInit+0x16c>)
 8005e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	613b      	str	r3, [r7, #16]
 8005e1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e20:	4b33      	ldr	r3, [pc, #204]	@ (8005ef0 <HAL_ETH_MspInit+0x16c>)
 8005e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e24:	4a32      	ldr	r2, [pc, #200]	@ (8005ef0 <HAL_ETH_MspInit+0x16c>)
 8005e26:	f043 0302 	orr.w	r3, r3, #2
 8005e2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e2c:	4b30      	ldr	r3, [pc, #192]	@ (8005ef0 <HAL_ETH_MspInit+0x16c>)
 8005e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	60fb      	str	r3, [r7, #12]
 8005e36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005e38:	4b2d      	ldr	r3, [pc, #180]	@ (8005ef0 <HAL_ETH_MspInit+0x16c>)
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e3c:	4a2c      	ldr	r2, [pc, #176]	@ (8005ef0 <HAL_ETH_MspInit+0x16c>)
 8005e3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e42:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e44:	4b2a      	ldr	r3, [pc, #168]	@ (8005ef0 <HAL_ETH_MspInit+0x16c>)
 8005e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e4c:	60bb      	str	r3, [r7, #8]
 8005e4e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005e50:	2332      	movs	r3, #50	@ 0x32
 8005e52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e54:	2302      	movs	r3, #2
 8005e56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005e60:	230b      	movs	r3, #11
 8005e62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e68:	4619      	mov	r1, r3
 8005e6a:	4822      	ldr	r0, [pc, #136]	@ (8005ef4 <HAL_ETH_MspInit+0x170>)
 8005e6c:	f7fd f8a2 	bl	8002fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005e70:	2386      	movs	r3, #134	@ 0x86
 8005e72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e74:	2302      	movs	r3, #2
 8005e76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005e80:	230b      	movs	r3, #11
 8005e82:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e88:	4619      	mov	r1, r3
 8005e8a:	481b      	ldr	r0, [pc, #108]	@ (8005ef8 <HAL_ETH_MspInit+0x174>)
 8005e8c:	f7fd f892 	bl	8002fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005e90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005e94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e96:	2302      	movs	r3, #2
 8005e98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005ea2:	230b      	movs	r3, #11
 8005ea4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ea6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005eaa:	4619      	mov	r1, r3
 8005eac:	4813      	ldr	r0, [pc, #76]	@ (8005efc <HAL_ETH_MspInit+0x178>)
 8005eae:	f7fd f881 	bl	8002fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8005eb2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8005eb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005eb8:	2302      	movs	r3, #2
 8005eba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005ec4:	230b      	movs	r3, #11
 8005ec6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ecc:	4619      	mov	r1, r3
 8005ece:	480c      	ldr	r0, [pc, #48]	@ (8005f00 <HAL_ETH_MspInit+0x17c>)
 8005ed0:	f7fd f870 	bl	8002fb4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	2105      	movs	r1, #5
 8005ed8:	203d      	movs	r0, #61	@ 0x3d
 8005eda:	f7fb fdcb 	bl	8001a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005ede:	203d      	movs	r0, #61	@ 0x3d
 8005ee0:	f7fb fde4 	bl	8001aac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005ee4:	bf00      	nop
 8005ee6:	3738      	adds	r7, #56	@ 0x38
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	40028000 	.word	0x40028000
 8005ef0:	40023800 	.word	0x40023800
 8005ef4:	40020800 	.word	0x40020800
 8005ef8:	40020000 	.word	0x40020000
 8005efc:	40020400 	.word	0x40020400
 8005f00:	40021800 	.word	0x40021800

08005f04 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005f08:	4802      	ldr	r0, [pc, #8]	@ (8005f14 <ETH_PHY_IO_Init+0x10>)
 8005f0a:	f7fc fbd7 	bl	80026bc <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	20005128 	.word	0x20005128

08005f18 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0
  return 0;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	68f9      	ldr	r1, [r7, #12]
 8005f3a:	4807      	ldr	r0, [pc, #28]	@ (8005f58 <ETH_PHY_IO_ReadReg+0x30>)
 8005f3c:	f7fc fa18 	bl	8002370 <HAL_ETH_ReadPHYRegister>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d002      	beq.n	8005f4c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005f46:	f04f 33ff 	mov.w	r3, #4294967295
 8005f4a:	e000      	b.n	8005f4e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20005128 	.word	0x20005128

08005f5c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	68f9      	ldr	r1, [r7, #12]
 8005f6e:	4807      	ldr	r0, [pc, #28]	@ (8005f8c <ETH_PHY_IO_WriteReg+0x30>)
 8005f70:	f7fc fa49 	bl	8002406 <HAL_ETH_WritePHYRegister>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d002      	beq.n	8005f80 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f7e:	e000      	b.n	8005f82 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	20005128 	.word	0x20005128

08005f90 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005f94:	f7fb fc7a 	bl	800188c <HAL_GetTick>
 8005f98:	4603      	mov	r3, r0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	bd80      	pop	{r7, pc}
	...

08005fa0 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b0a0      	sub	sp, #128	@ 0x80
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005fa8:	f107 0308 	add.w	r3, r7, #8
 8005fac:	2264      	movs	r2, #100	@ 0x64
 8005fae:	2100      	movs	r1, #0
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f01f fc0f 	bl	80257d4 <memset>
  int32_t PHYLinkState = 0;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005fca:	483a      	ldr	r0, [pc, #232]	@ (80060b4 <ethernet_link_thread+0x114>)
 8005fcc:	f7fb fbb6 	bl	800173c <LAN8742_GetLinkState>
 8005fd0:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005fd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fd4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005fd8:	089b      	lsrs	r3, r3, #2
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00c      	beq.n	8005ffe <ethernet_link_thread+0x5e>
 8005fe4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	dc09      	bgt.n	8005ffe <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8005fea:	4833      	ldr	r0, [pc, #204]	@ (80060b8 <ethernet_link_thread+0x118>)
 8005fec:	f7fb fe76 	bl	8001cdc <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005ff0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005ff2:	f007 ff1f 	bl	800de34 <netif_set_down>
    netif_set_link_down(netif);
 8005ff6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005ff8:	f007 ff82 	bl	800df00 <netif_set_link_down>
 8005ffc:	e055      	b.n	80060aa <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005ffe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006000:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b00      	cmp	r3, #0
 800600a:	d14e      	bne.n	80060aa <ethernet_link_thread+0x10a>
 800600c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800600e:	2b01      	cmp	r3, #1
 8006010:	dd4b      	ble.n	80060aa <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8006012:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006014:	3b02      	subs	r3, #2
 8006016:	2b03      	cmp	r3, #3
 8006018:	d82a      	bhi.n	8006070 <ethernet_link_thread+0xd0>
 800601a:	a201      	add	r2, pc, #4	@ (adr r2, 8006020 <ethernet_link_thread+0x80>)
 800601c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006020:	08006031 	.word	0x08006031
 8006024:	08006043 	.word	0x08006043
 8006028:	08006053 	.word	0x08006053
 800602c:	08006063 	.word	0x08006063
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8006030:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006034:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8006036:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800603a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800603c:	2301      	movs	r3, #1
 800603e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006040:	e017      	b.n	8006072 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8006042:	2300      	movs	r3, #0
 8006044:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8006046:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800604a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800604c:	2301      	movs	r3, #1
 800604e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006050:	e00f      	b.n	8006072 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8006052:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006056:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006058:	2300      	movs	r3, #0
 800605a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800605c:	2301      	movs	r3, #1
 800605e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006060:	e007      	b.n	8006072 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8006062:	2300      	movs	r3, #0
 8006064:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006066:	2300      	movs	r3, #0
 8006068:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800606a:	2301      	movs	r3, #1
 800606c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800606e:	e000      	b.n	8006072 <ethernet_link_thread+0xd2>
    default:
      break;
 8006070:	bf00      	nop
    }

    if(linkchanged)
 8006072:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006074:	2b00      	cmp	r3, #0
 8006076:	d018      	beq.n	80060aa <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006078:	f107 0308 	add.w	r3, r7, #8
 800607c:	4619      	mov	r1, r3
 800607e:	480e      	ldr	r0, [pc, #56]	@ (80060b8 <ethernet_link_thread+0x118>)
 8006080:	f7fc fa0a 	bl	8002498 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006084:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006086:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8006088:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800608a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800608c:	f107 0308 	add.w	r3, r7, #8
 8006090:	4619      	mov	r1, r3
 8006092:	4809      	ldr	r0, [pc, #36]	@ (80060b8 <ethernet_link_thread+0x118>)
 8006094:	f7fc faf7 	bl	8002686 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8006098:	4807      	ldr	r0, [pc, #28]	@ (80060b8 <ethernet_link_thread+0x118>)
 800609a:	f7fb fdaf 	bl	8001bfc <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800609e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80060a0:	f007 fe5c 	bl	800dd5c <netif_set_up>
      netif_set_link_up(netif);
 80060a4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80060a6:	f007 fef7 	bl	800de98 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80060aa:	2064      	movs	r0, #100	@ 0x64
 80060ac:	f000 f951 	bl	8006352 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80060b0:	e78b      	b.n	8005fca <ethernet_link_thread+0x2a>
 80060b2:	bf00      	nop
 80060b4:	20005210 	.word	0x20005210
 80060b8:	20005128 	.word	0x20005128

080060bc <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af02      	add	r7, sp, #8
 80060c2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80060c4:	4812      	ldr	r0, [pc, #72]	@ (8006110 <HAL_ETH_RxAllocateCallback+0x54>)
 80060c6:	f007 fbbd 	bl	800d844 <memp_malloc_pool>
 80060ca:	60f8      	str	r0, [r7, #12]
  if (p)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d014      	beq.n	80060fc <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f103 0220 	add.w	r2, r3, #32
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4a0d      	ldr	r2, [pc, #52]	@ (8006114 <HAL_ETH_RxAllocateCallback+0x58>)
 80060e0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80060ea:	9201      	str	r2, [sp, #4]
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2241      	movs	r2, #65	@ 0x41
 80060f2:	2100      	movs	r1, #0
 80060f4:	2000      	movs	r0, #0
 80060f6:	f008 f95f 	bl	800e3b8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80060fa:	e005      	b.n	8006108 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80060fc:	4b06      	ldr	r3, [pc, #24]	@ (8006118 <HAL_ETH_RxAllocateCallback+0x5c>)
 80060fe:	2201      	movs	r2, #1
 8006100:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	601a      	str	r2, [r3, #0]
}
 8006108:	bf00      	nop
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	0802a188 	.word	0x0802a188
 8006114:	08005d35 	.word	0x08005d35
 8006118:	2000511c 	.word	0x2000511c

0800611c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b088      	sub	sp, #32
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8006132:	2300      	movs	r3, #0
 8006134:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	3b20      	subs	r3, #32
 800613a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	2200      	movs	r2, #0
 8006140:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	2200      	movs	r2, #0
 8006146:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	887a      	ldrh	r2, [r7, #2]
 800614c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d103      	bne.n	800615e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	69fa      	ldr	r2, [r7, #28]
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	e003      	b.n	8006166 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	69fa      	ldr	r2, [r7, #28]
 8006164:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	69fa      	ldr	r2, [r7, #28]
 800616a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	61fb      	str	r3, [r7, #28]
 8006172:	e009      	b.n	8006188 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	891a      	ldrh	r2, [r3, #8]
 8006178:	887b      	ldrh	r3, [r7, #2]
 800617a:	4413      	add	r3, r2
 800617c:	b29a      	uxth	r2, r3
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	61fb      	str	r3, [r7, #28]
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1f2      	bne.n	8006174 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800618e:	887b      	ldrh	r3, [r7, #2]
 8006190:	4619      	mov	r1, r3
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7ff fade 	bl	8005754 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006198:	bf00      	nop
 800619a:	3720      	adds	r7, #32
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f008 faf1 	bl	800e790 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80061ae:	bf00      	nop
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
	...

080061b8 <RMII_Thread>:
/* USER CODE BEGIN 8 */

/* USER CODE END 8 */

void RMII_Thread( void const * argument )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  (void) argument;

  for(;;)
  {
    /* some unicast good packets are received */
    if(heth.Instance->MMCRGUFCR > 0U)
 80061c0:	4b15      	ldr	r3, [pc, #84]	@ (8006218 <RMII_Thread+0x60>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d003      	beq.n	80061d4 <RMII_Thread+0x1c>
    {
      /* RMII Init is OK: Delete the Thread */
      osThreadTerminate(NULL);
 80061cc:	2000      	movs	r0, #0
 80061ce:	f000 f8b4 	bl	800633a <osThreadTerminate>
 80061d2:	e7f5      	b.n	80061c0 <RMII_Thread+0x8>
    }
    else if(heth.Instance->MMCRFCECR > 10U)
 80061d4:	4b10      	ldr	r3, [pc, #64]	@ (8006218 <RMII_Thread+0x60>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 80061dc:	2b0a      	cmp	r3, #10
 80061de:	d916      	bls.n	800620e <RMII_Thread+0x56>
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 80061e0:	4b0e      	ldr	r3, [pc, #56]	@ (800621c <RMII_Thread+0x64>)
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	4a0d      	ldr	r2, [pc, #52]	@ (800621c <RMII_Thread+0x64>)
 80061e6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80061ea:	6053      	str	r3, [r2, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 80061ec:	4b0b      	ldr	r3, [pc, #44]	@ (800621c <RMII_Thread+0x64>)
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	4a0a      	ldr	r2, [pc, #40]	@ (800621c <RMII_Thread+0x64>)
 80061f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80061f6:	6053      	str	r3, [r2, #4]

      heth.Instance->MMCCR |= ETH_MMCCR_CR;
 80061f8:	4b07      	ldr	r3, [pc, #28]	@ (8006218 <RMII_Thread+0x60>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8006200:	4b05      	ldr	r3, [pc, #20]	@ (8006218 <RMII_Thread+0x60>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f042 0201 	orr.w	r2, r2, #1
 8006208:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800620c:	e7d8      	b.n	80061c0 <RMII_Thread+0x8>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 800620e:	20c8      	movs	r0, #200	@ 0xc8
 8006210:	f000 f89f 	bl	8006352 <osDelay>
    if(heth.Instance->MMCRGUFCR > 0U)
 8006214:	e7d4      	b.n	80061c0 <RMII_Thread+0x8>
 8006216:	bf00      	nop
 8006218:	20005128 	.word	0x20005128
 800621c:	40013800 	.word	0x40013800

08006220 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	4603      	mov	r3, r0
 8006228:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800622a:	2300      	movs	r3, #0
 800622c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800622e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006232:	2b84      	cmp	r3, #132	@ 0x84
 8006234:	d005      	beq.n	8006242 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006236:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	4413      	add	r3, r2
 800623e:	3303      	adds	r3, #3
 8006240:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006242:	68fb      	ldr	r3, [r7, #12]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006256:	f3ef 8305 	mrs	r3, IPSR
 800625a:	607b      	str	r3, [r7, #4]
  return(result);
 800625c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800625e:	2b00      	cmp	r3, #0
 8006260:	bf14      	ite	ne
 8006262:	2301      	movne	r3, #1
 8006264:	2300      	moveq	r3, #0
 8006266:	b2db      	uxtb	r3, r3
}
 8006268:	4618      	mov	r0, r3
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006278:	f001 fe4c 	bl	8007f14 <vTaskStartScheduler>
  
  return osOK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	bd80      	pop	{r7, pc}

08006282 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006286:	f7ff ffe3 	bl	8006250 <inHandlerMode>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d003      	beq.n	8006298 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006290:	f001 ff6c 	bl	800816c <xTaskGetTickCountFromISR>
 8006294:	4603      	mov	r3, r0
 8006296:	e002      	b.n	800629e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8006298:	f001 ff58 	bl	800814c <xTaskGetTickCount>
 800629c:	4603      	mov	r3, r0
  }
}
 800629e:	4618      	mov	r0, r3
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80062a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062a4:	b089      	sub	sp, #36	@ 0x24
 80062a6:	af04      	add	r7, sp, #16
 80062a8:	6078      	str	r0, [r7, #4]
 80062aa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d020      	beq.n	80062f6 <osThreadCreate+0x54>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d01c      	beq.n	80062f6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685c      	ldr	r4, [r3, #4]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691e      	ldr	r6, [r3, #16]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff ffa6 	bl	8006220 <makeFreeRtosPriority>
 80062d4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062de:	9202      	str	r2, [sp, #8]
 80062e0:	9301      	str	r3, [sp, #4]
 80062e2:	9100      	str	r1, [sp, #0]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	4632      	mov	r2, r6
 80062e8:	4629      	mov	r1, r5
 80062ea:	4620      	mov	r0, r4
 80062ec:	f001 fb90 	bl	8007a10 <xTaskCreateStatic>
 80062f0:	4603      	mov	r3, r0
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	e01c      	b.n	8006330 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685c      	ldr	r4, [r3, #4]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006302:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800630a:	4618      	mov	r0, r3
 800630c:	f7ff ff88 	bl	8006220 <makeFreeRtosPriority>
 8006310:	4602      	mov	r2, r0
 8006312:	f107 030c 	add.w	r3, r7, #12
 8006316:	9301      	str	r3, [sp, #4]
 8006318:	9200      	str	r2, [sp, #0]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	4632      	mov	r2, r6
 800631e:	4629      	mov	r1, r5
 8006320:	4620      	mov	r0, r4
 8006322:	f001 fbdb 	bl	8007adc <xTaskCreate>
 8006326:	4603      	mov	r3, r0
 8006328:	2b01      	cmp	r3, #1
 800632a:	d001      	beq.n	8006330 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800632c:	2300      	movs	r3, #0
 800632e:	e000      	b.n	8006332 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006330:	68fb      	ldr	r3, [r7, #12]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800633a <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b082      	sub	sp, #8
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f001 fd1c 	bl	8007d80 <vTaskDelete>
  return osOK;
 8006348:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800634a:	4618      	mov	r0, r3
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b084      	sub	sp, #16
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <osDelay+0x16>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	e000      	b.n	800636a <osDelay+0x18>
 8006368:	2301      	movs	r3, #1
 800636a:	4618      	mov	r0, r3
 800636c:	f001 fd9a 	bl	8007ea4 <vTaskDelay>
  
  return osOK;
 8006370:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b082      	sub	sp, #8
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d007      	beq.n	800639a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	4619      	mov	r1, r3
 8006390:	2001      	movs	r0, #1
 8006392:	f000 fc9a 	bl	8006cca <xQueueCreateMutexStatic>
 8006396:	4603      	mov	r3, r0
 8006398:	e003      	b.n	80063a2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800639a:	2001      	movs	r0, #1
 800639c:	f000 fc7d 	bl	8006c9a <xQueueCreateMutex>
 80063a0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
	...

080063ac <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80063b6:	2300      	movs	r3, #0
 80063b8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d101      	bne.n	80063c4 <osMutexWait+0x18>
    return osErrorParameter;
 80063c0:	2380      	movs	r3, #128	@ 0x80
 80063c2:	e03a      	b.n	800643a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80063c4:	2300      	movs	r3, #0
 80063c6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ce:	d103      	bne.n	80063d8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80063d0:	f04f 33ff 	mov.w	r3, #4294967295
 80063d4:	60fb      	str	r3, [r7, #12]
 80063d6:	e009      	b.n	80063ec <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d006      	beq.n	80063ec <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <osMutexWait+0x40>
      ticks = 1;
 80063e8:	2301      	movs	r3, #1
 80063ea:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80063ec:	f7ff ff30 	bl	8006250 <inHandlerMode>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d017      	beq.n	8006426 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80063f6:	f107 0308 	add.w	r3, r7, #8
 80063fa:	461a      	mov	r2, r3
 80063fc:	2100      	movs	r1, #0
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f001 f8c4 	bl	800758c <xQueueReceiveFromISR>
 8006404:	4603      	mov	r3, r0
 8006406:	2b01      	cmp	r3, #1
 8006408:	d001      	beq.n	800640e <osMutexWait+0x62>
      return osErrorOS;
 800640a:	23ff      	movs	r3, #255	@ 0xff
 800640c:	e015      	b.n	800643a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d011      	beq.n	8006438 <osMutexWait+0x8c>
 8006414:	4b0b      	ldr	r3, [pc, #44]	@ (8006444 <osMutexWait+0x98>)
 8006416:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800641a:	601a      	str	r2, [r3, #0]
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	f3bf 8f6f 	isb	sy
 8006424:	e008      	b.n	8006438 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006426:	68f9      	ldr	r1, [r7, #12]
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 ff97 	bl	800735c <xQueueSemaphoreTake>
 800642e:	4603      	mov	r3, r0
 8006430:	2b01      	cmp	r3, #1
 8006432:	d001      	beq.n	8006438 <osMutexWait+0x8c>
    return osErrorOS;
 8006434:	23ff      	movs	r3, #255	@ 0xff
 8006436:	e000      	b.n	800643a <osMutexWait+0x8e>
  }
  
  return osOK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	e000ed04 	.word	0xe000ed04

08006448 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006450:	2300      	movs	r3, #0
 8006452:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006454:	2300      	movs	r3, #0
 8006456:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006458:	f7ff fefa 	bl	8006250 <inHandlerMode>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d016      	beq.n	8006490 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006462:	f107 0308 	add.w	r3, r7, #8
 8006466:	4619      	mov	r1, r3
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fdf6 	bl	800705a <xQueueGiveFromISR>
 800646e:	4603      	mov	r3, r0
 8006470:	2b01      	cmp	r3, #1
 8006472:	d001      	beq.n	8006478 <osMutexRelease+0x30>
      return osErrorOS;
 8006474:	23ff      	movs	r3, #255	@ 0xff
 8006476:	e017      	b.n	80064a8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d013      	beq.n	80064a6 <osMutexRelease+0x5e>
 800647e:	4b0c      	ldr	r3, [pc, #48]	@ (80064b0 <osMutexRelease+0x68>)
 8006480:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	e00a      	b.n	80064a6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006490:	2300      	movs	r3, #0
 8006492:	2200      	movs	r2, #0
 8006494:	2100      	movs	r1, #0
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fc32 	bl	8006d00 <xQueueGenericSend>
 800649c:	4603      	mov	r3, r0
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d001      	beq.n	80064a6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80064a2:	23ff      	movs	r3, #255	@ 0xff
 80064a4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80064a6:	68fb      	ldr	r3, [r7, #12]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	e000ed04 	.word	0xe000ed04

080064b4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af02      	add	r7, sp, #8
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00f      	beq.n	80064e6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d10a      	bne.n	80064e2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	2203      	movs	r2, #3
 80064d2:	9200      	str	r2, [sp, #0]
 80064d4:	2200      	movs	r2, #0
 80064d6:	2100      	movs	r1, #0
 80064d8:	2001      	movs	r0, #1
 80064da:	f000 fadb 	bl	8006a94 <xQueueGenericCreateStatic>
 80064de:	4603      	mov	r3, r0
 80064e0:	e016      	b.n	8006510 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80064e2:	2300      	movs	r3, #0
 80064e4:	e014      	b.n	8006510 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d110      	bne.n	800650e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80064ec:	2203      	movs	r2, #3
 80064ee:	2100      	movs	r1, #0
 80064f0:	2001      	movs	r0, #1
 80064f2:	f000 fb56 	bl	8006ba2 <xQueueGenericCreate>
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d005      	beq.n	800650a <osSemaphoreCreate+0x56>
 80064fe:	2300      	movs	r3, #0
 8006500:	2200      	movs	r2, #0
 8006502:	2100      	movs	r1, #0
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f000 fbfb 	bl	8006d00 <xQueueGenericSend>
      return sema;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	e000      	b.n	8006510 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800650e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006522:	2300      	movs	r3, #0
 8006524:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d101      	bne.n	8006530 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800652c:	2380      	movs	r3, #128	@ 0x80
 800652e:	e03a      	b.n	80065a6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006530:	2300      	movs	r3, #0
 8006532:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653a:	d103      	bne.n	8006544 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800653c:	f04f 33ff 	mov.w	r3, #4294967295
 8006540:	60fb      	str	r3, [r7, #12]
 8006542:	e009      	b.n	8006558 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d006      	beq.n	8006558 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <osSemaphoreWait+0x40>
      ticks = 1;
 8006554:	2301      	movs	r3, #1
 8006556:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006558:	f7ff fe7a 	bl	8006250 <inHandlerMode>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d017      	beq.n	8006592 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006562:	f107 0308 	add.w	r3, r7, #8
 8006566:	461a      	mov	r2, r3
 8006568:	2100      	movs	r1, #0
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f001 f80e 	bl	800758c <xQueueReceiveFromISR>
 8006570:	4603      	mov	r3, r0
 8006572:	2b01      	cmp	r3, #1
 8006574:	d001      	beq.n	800657a <osSemaphoreWait+0x62>
      return osErrorOS;
 8006576:	23ff      	movs	r3, #255	@ 0xff
 8006578:	e015      	b.n	80065a6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d011      	beq.n	80065a4 <osSemaphoreWait+0x8c>
 8006580:	4b0b      	ldr	r3, [pc, #44]	@ (80065b0 <osSemaphoreWait+0x98>)
 8006582:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006586:	601a      	str	r2, [r3, #0]
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	e008      	b.n	80065a4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006592:	68f9      	ldr	r1, [r7, #12]
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 fee1 	bl	800735c <xQueueSemaphoreTake>
 800659a:	4603      	mov	r3, r0
 800659c:	2b01      	cmp	r3, #1
 800659e:	d001      	beq.n	80065a4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80065a0:	23ff      	movs	r3, #255	@ 0xff
 80065a2:	e000      	b.n	80065a6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	e000ed04 	.word	0xe000ed04

080065b4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80065bc:	2300      	movs	r3, #0
 80065be:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80065c4:	f7ff fe44 	bl	8006250 <inHandlerMode>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d016      	beq.n	80065fc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80065ce:	f107 0308 	add.w	r3, r7, #8
 80065d2:	4619      	mov	r1, r3
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 fd40 	bl	800705a <xQueueGiveFromISR>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d001      	beq.n	80065e4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80065e0:	23ff      	movs	r3, #255	@ 0xff
 80065e2:	e017      	b.n	8006614 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d013      	beq.n	8006612 <osSemaphoreRelease+0x5e>
 80065ea:	4b0c      	ldr	r3, [pc, #48]	@ (800661c <osSemaphoreRelease+0x68>)
 80065ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065f0:	601a      	str	r2, [r3, #0]
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	e00a      	b.n	8006612 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80065fc:	2300      	movs	r3, #0
 80065fe:	2200      	movs	r2, #0
 8006600:	2100      	movs	r1, #0
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fb7c 	bl	8006d00 <xQueueGenericSend>
 8006608:	4603      	mov	r3, r0
 800660a:	2b01      	cmp	r3, #1
 800660c:	d001      	beq.n	8006612 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800660e:	23ff      	movs	r3, #255	@ 0xff
 8006610:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006612:	68fb      	ldr	r3, [r7, #12]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	e000ed04 	.word	0xe000ed04

08006620 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006628:	f7ff fe12 	bl	8006250 <inHandlerMode>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8006632:	2382      	movs	r3, #130	@ 0x82
 8006634:	e003      	b.n	800663e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f001 f872 	bl	8007720 <vQueueDelete>

  return osOK; 
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006646:	b590      	push	{r4, r7, lr}
 8006648:	b085      	sub	sp, #20
 800664a:	af02      	add	r7, sp, #8
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d011      	beq.n	800667c <osMessageCreate+0x36>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00d      	beq.n	800667c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6818      	ldr	r0, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6859      	ldr	r1, [r3, #4]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	689a      	ldr	r2, [r3, #8]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	2400      	movs	r4, #0
 8006672:	9400      	str	r4, [sp, #0]
 8006674:	f000 fa0e 	bl	8006a94 <xQueueGenericCreateStatic>
 8006678:	4603      	mov	r3, r0
 800667a:	e008      	b.n	800668e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6818      	ldr	r0, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	4619      	mov	r1, r3
 8006688:	f000 fa8b 	bl	8006ba2 <xQueueGenericCreate>
 800668c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800668e:	4618      	mov	r0, r3
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	bd90      	pop	{r4, r7, pc}
	...

08006698 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80066a4:	2300      	movs	r3, #0
 80066a6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <osMessagePut+0x1e>
    ticks = 1;
 80066b2:	2301      	movs	r3, #1
 80066b4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80066b6:	f7ff fdcb 	bl	8006250 <inHandlerMode>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d018      	beq.n	80066f2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80066c0:	f107 0210 	add.w	r2, r7, #16
 80066c4:	f107 0108 	add.w	r1, r7, #8
 80066c8:	2300      	movs	r3, #0
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f000 fc22 	bl	8006f14 <xQueueGenericSendFromISR>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d001      	beq.n	80066da <osMessagePut+0x42>
      return osErrorOS;
 80066d6:	23ff      	movs	r3, #255	@ 0xff
 80066d8:	e018      	b.n	800670c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d014      	beq.n	800670a <osMessagePut+0x72>
 80066e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006714 <osMessagePut+0x7c>)
 80066e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066e6:	601a      	str	r2, [r3, #0]
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	e00b      	b.n	800670a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80066f2:	f107 0108 	add.w	r1, r7, #8
 80066f6:	2300      	movs	r3, #0
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 fb00 	bl	8006d00 <xQueueGenericSend>
 8006700:	4603      	mov	r3, r0
 8006702:	2b01      	cmp	r3, #1
 8006704:	d001      	beq.n	800670a <osMessagePut+0x72>
      return osErrorOS;
 8006706:	23ff      	movs	r3, #255	@ 0xff
 8006708:	e000      	b.n	800670c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3718      	adds	r7, #24
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	e000ed04 	.word	0xe000ed04

08006718 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006718:	b590      	push	{r4, r7, lr}
 800671a:	b08b      	sub	sp, #44	@ 0x2c
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006728:	2300      	movs	r3, #0
 800672a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10a      	bne.n	8006748 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8006732:	2380      	movs	r3, #128	@ 0x80
 8006734:	617b      	str	r3, [r7, #20]
    return event;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	461c      	mov	r4, r3
 800673a:	f107 0314 	add.w	r3, r7, #20
 800673e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006742:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006746:	e054      	b.n	80067f2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006748:	2300      	movs	r3, #0
 800674a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800674c:	2300      	movs	r3, #0
 800674e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006756:	d103      	bne.n	8006760 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006758:	f04f 33ff 	mov.w	r3, #4294967295
 800675c:	627b      	str	r3, [r7, #36]	@ 0x24
 800675e:	e009      	b.n	8006774 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d006      	beq.n	8006774 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800676a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <osMessageGet+0x5c>
      ticks = 1;
 8006770:	2301      	movs	r3, #1
 8006772:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006774:	f7ff fd6c 	bl	8006250 <inHandlerMode>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d01c      	beq.n	80067b8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800677e:	f107 0220 	add.w	r2, r7, #32
 8006782:	f107 0314 	add.w	r3, r7, #20
 8006786:	3304      	adds	r3, #4
 8006788:	4619      	mov	r1, r3
 800678a:	68b8      	ldr	r0, [r7, #8]
 800678c:	f000 fefe 	bl	800758c <xQueueReceiveFromISR>
 8006790:	4603      	mov	r3, r0
 8006792:	2b01      	cmp	r3, #1
 8006794:	d102      	bne.n	800679c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8006796:	2310      	movs	r3, #16
 8006798:	617b      	str	r3, [r7, #20]
 800679a:	e001      	b.n	80067a0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800679c:	2300      	movs	r3, #0
 800679e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80067a0:	6a3b      	ldr	r3, [r7, #32]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d01d      	beq.n	80067e2 <osMessageGet+0xca>
 80067a6:	4b15      	ldr	r3, [pc, #84]	@ (80067fc <osMessageGet+0xe4>)
 80067a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	e014      	b.n	80067e2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80067b8:	f107 0314 	add.w	r3, r7, #20
 80067bc:	3304      	adds	r3, #4
 80067be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067c0:	4619      	mov	r1, r3
 80067c2:	68b8      	ldr	r0, [r7, #8]
 80067c4:	f000 fce2 	bl	800718c <xQueueReceive>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d102      	bne.n	80067d4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80067ce:	2310      	movs	r3, #16
 80067d0:	617b      	str	r3, [r7, #20]
 80067d2:	e006      	b.n	80067e2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80067d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d101      	bne.n	80067de <osMessageGet+0xc6>
 80067da:	2300      	movs	r3, #0
 80067dc:	e000      	b.n	80067e0 <osMessageGet+0xc8>
 80067de:	2340      	movs	r3, #64	@ 0x40
 80067e0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	461c      	mov	r4, r3
 80067e6:	f107 0314 	add.w	r3, r7, #20
 80067ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80067ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	372c      	adds	r7, #44	@ 0x2c
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd90      	pop	{r4, r7, pc}
 80067fa:	bf00      	nop
 80067fc:	e000ed04 	.word	0xe000ed04

08006800 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006808:	f7ff fd22 	bl	8006250 <inHandlerMode>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d004      	beq.n	800681c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 ff63 	bl	80076de <uxQueueMessagesWaitingFromISR>
 8006818:	4603      	mov	r3, r0
 800681a:	e003      	b.n	8006824 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 ff3d 	bl	800769c <uxQueueMessagesWaiting>
 8006822:	4603      	mov	r3, r0
  }
}
 8006824:	4618      	mov	r0, r3
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006834:	f7ff fd0c 	bl	8006250 <inHandlerMode>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <osMessageDelete+0x16>
    return osErrorISR;
 800683e:	2382      	movs	r3, #130	@ 0x82
 8006840:	e003      	b.n	800684a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 ff6c 	bl	8007720 <vQueueDelete>

  return osOK; 
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006852:	b480      	push	{r7}
 8006854:	b083      	sub	sp, #12
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f103 0208 	add.w	r2, r3, #8
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f04f 32ff 	mov.w	r2, #4294967295
 800686a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f103 0208 	add.w	r2, r3, #8
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f103 0208 	add.w	r2, r3, #8
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006886:	bf00      	nop
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006892:	b480      	push	{r7}
 8006894:	b083      	sub	sp, #12
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	689a      	ldr	r2, [r3, #8]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	683a      	ldr	r2, [r7, #0]
 80068d0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	683a      	ldr	r2, [r7, #0]
 80068d6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	601a      	str	r2, [r3, #0]
}
 80068e8:	bf00      	nop
 80068ea:	3714      	adds	r7, #20
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690a:	d103      	bne.n	8006914 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	60fb      	str	r3, [r7, #12]
 8006912:	e00c      	b.n	800692e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	3308      	adds	r3, #8
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	e002      	b.n	8006922 <vListInsert+0x2e>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	60fb      	str	r3, [r7, #12]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68ba      	ldr	r2, [r7, #8]
 800692a:	429a      	cmp	r2, r3
 800692c:	d2f6      	bcs.n	800691c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	685a      	ldr	r2, [r3, #4]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	1c5a      	adds	r2, r3, #1
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	601a      	str	r2, [r3, #0]
}
 800695a:	bf00      	nop
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006966:	b480      	push	{r7}
 8006968:	b085      	sub	sp, #20
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	6892      	ldr	r2, [r2, #8]
 800697c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	6852      	ldr	r2, [r2, #4]
 8006986:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	429a      	cmp	r2, r3
 8006990:	d103      	bne.n	800699a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	689a      	ldr	r2, [r3, #8]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	1e5a      	subs	r2, r3, #1
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3714      	adds	r7, #20
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
	...

080069bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10d      	bne.n	80069ec <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d4:	b672      	cpsid	i
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	b662      	cpsie	i
 80069e4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80069e6:	bf00      	nop
 80069e8:	bf00      	nop
 80069ea:	e7fd      	b.n	80069e8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80069ec:	f002 fa76 	bl	8008edc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f8:	68f9      	ldr	r1, [r7, #12]
 80069fa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80069fc:	fb01 f303 	mul.w	r3, r1, r3
 8006a00:	441a      	add	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	68f9      	ldr	r1, [r7, #12]
 8006a20:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006a22:	fb01 f303 	mul.w	r3, r1, r3
 8006a26:	441a      	add	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	22ff      	movs	r2, #255	@ 0xff
 8006a30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	22ff      	movs	r2, #255	@ 0xff
 8006a38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d114      	bne.n	8006a6c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d01a      	beq.n	8006a80 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	3310      	adds	r3, #16
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f001 fcf6 	bl	8008440 <xTaskRemoveFromEventList>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d012      	beq.n	8006a80 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a90 <xQueueGenericReset+0xd4>)
 8006a5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a60:	601a      	str	r2, [r3, #0]
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	e009      	b.n	8006a80 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	3310      	adds	r3, #16
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7ff feee 	bl	8006852 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	3324      	adds	r3, #36	@ 0x24
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7ff fee9 	bl	8006852 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006a80:	f002 fa62 	bl	8008f48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006a84:	2301      	movs	r3, #1
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	e000ed04 	.word	0xe000ed04

08006a94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08e      	sub	sp, #56	@ 0x38
 8006a98:	af02      	add	r7, sp, #8
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10d      	bne.n	8006ac4 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aac:	b672      	cpsid	i
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	b662      	cpsie	i
 8006abc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006abe:	bf00      	nop
 8006ac0:	bf00      	nop
 8006ac2:	e7fd      	b.n	8006ac0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10d      	bne.n	8006ae6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8006aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ace:	b672      	cpsid	i
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	b662      	cpsie	i
 8006ade:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ae0:	bf00      	nop
 8006ae2:	bf00      	nop
 8006ae4:	e7fd      	b.n	8006ae2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d002      	beq.n	8006af2 <xQueueGenericCreateStatic+0x5e>
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <xQueueGenericCreateStatic+0x62>
 8006af2:	2301      	movs	r3, #1
 8006af4:	e000      	b.n	8006af8 <xQueueGenericCreateStatic+0x64>
 8006af6:	2300      	movs	r3, #0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10d      	bne.n	8006b18 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8006afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b00:	b672      	cpsid	i
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	b662      	cpsie	i
 8006b10:	623b      	str	r3, [r7, #32]
}
 8006b12:	bf00      	nop
 8006b14:	bf00      	nop
 8006b16:	e7fd      	b.n	8006b14 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d102      	bne.n	8006b24 <xQueueGenericCreateStatic+0x90>
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d101      	bne.n	8006b28 <xQueueGenericCreateStatic+0x94>
 8006b24:	2301      	movs	r3, #1
 8006b26:	e000      	b.n	8006b2a <xQueueGenericCreateStatic+0x96>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10d      	bne.n	8006b4a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b32:	b672      	cpsid	i
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	b662      	cpsie	i
 8006b42:	61fb      	str	r3, [r7, #28]
}
 8006b44:	bf00      	nop
 8006b46:	bf00      	nop
 8006b48:	e7fd      	b.n	8006b46 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006b4a:	2348      	movs	r3, #72	@ 0x48
 8006b4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2b48      	cmp	r3, #72	@ 0x48
 8006b52:	d00d      	beq.n	8006b70 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8006b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b58:	b672      	cpsid	i
 8006b5a:	f383 8811 	msr	BASEPRI, r3
 8006b5e:	f3bf 8f6f 	isb	sy
 8006b62:	f3bf 8f4f 	dsb	sy
 8006b66:	b662      	cpsie	i
 8006b68:	61bb      	str	r3, [r7, #24]
}
 8006b6a:	bf00      	nop
 8006b6c:	bf00      	nop
 8006b6e:	e7fd      	b.n	8006b6c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006b70:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00d      	beq.n	8006b98 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b84:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	68b9      	ldr	r1, [r7, #8]
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 f848 	bl	8006c28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3730      	adds	r7, #48	@ 0x30
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b08a      	sub	sp, #40	@ 0x28
 8006ba6:	af02      	add	r7, sp, #8
 8006ba8:	60f8      	str	r0, [r7, #12]
 8006baa:	60b9      	str	r1, [r7, #8]
 8006bac:	4613      	mov	r3, r2
 8006bae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10d      	bne.n	8006bd2 <xQueueGenericCreate+0x30>
	__asm volatile
 8006bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bba:	b672      	cpsid	i
 8006bbc:	f383 8811 	msr	BASEPRI, r3
 8006bc0:	f3bf 8f6f 	isb	sy
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	b662      	cpsie	i
 8006bca:	613b      	str	r3, [r7, #16]
}
 8006bcc:	bf00      	nop
 8006bce:	bf00      	nop
 8006bd0:	e7fd      	b.n	8006bce <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d102      	bne.n	8006bde <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	61fb      	str	r3, [r7, #28]
 8006bdc:	e004      	b.n	8006be8 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	fb02 f303 	mul.w	r3, r2, r3
 8006be6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	3348      	adds	r3, #72	@ 0x48
 8006bec:	4618      	mov	r0, r3
 8006bee:	f002 faa3 	bl	8009138 <pvPortMalloc>
 8006bf2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d011      	beq.n	8006c1e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	3348      	adds	r3, #72	@ 0x48
 8006c02:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c0c:	79fa      	ldrb	r2, [r7, #7]
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	4613      	mov	r3, r2
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	68b9      	ldr	r1, [r7, #8]
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 f805 	bl	8006c28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c1e:	69bb      	ldr	r3, [r7, #24]
	}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3720      	adds	r7, #32
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
 8006c34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d103      	bne.n	8006c44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	69ba      	ldr	r2, [r7, #24]
 8006c40:	601a      	str	r2, [r3, #0]
 8006c42:	e002      	b.n	8006c4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c56:	2101      	movs	r1, #1
 8006c58:	69b8      	ldr	r0, [r7, #24]
 8006c5a:	f7ff feaf 	bl	80069bc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006c5e:	bf00      	nop
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b082      	sub	sp, #8
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00e      	beq.n	8006c92 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006c86:	2300      	movs	r3, #0
 8006c88:	2200      	movs	r2, #0
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f837 	bl	8006d00 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006c92:	bf00      	nop
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b086      	sub	sp, #24
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	617b      	str	r3, [r7, #20]
 8006ca8:	2300      	movs	r3, #0
 8006caa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006cac:	79fb      	ldrb	r3, [r7, #7]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	6939      	ldr	r1, [r7, #16]
 8006cb2:	6978      	ldr	r0, [r7, #20]
 8006cb4:	f7ff ff75 	bl	8006ba2 <xQueueGenericCreate>
 8006cb8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f7ff ffd3 	bl	8006c66 <prvInitialiseMutex>

		return xNewQueue;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
	}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3718      	adds	r7, #24
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b088      	sub	sp, #32
 8006cce:	af02      	add	r7, sp, #8
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	6039      	str	r1, [r7, #0]
 8006cd4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	617b      	str	r3, [r7, #20]
 8006cda:	2300      	movs	r3, #0
 8006cdc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006cde:	79fb      	ldrb	r3, [r7, #7]
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	6939      	ldr	r1, [r7, #16]
 8006ce8:	6978      	ldr	r0, [r7, #20]
 8006cea:	f7ff fed3 	bl	8006a94 <xQueueGenericCreateStatic>
 8006cee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f7ff ffb8 	bl	8006c66 <prvInitialiseMutex>

		return xNewQueue;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
	}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3718      	adds	r7, #24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b08e      	sub	sp, #56	@ 0x38
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
 8006d0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10d      	bne.n	8006d38 <xQueueGenericSend+0x38>
	__asm volatile
 8006d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d20:	b672      	cpsid	i
 8006d22:	f383 8811 	msr	BASEPRI, r3
 8006d26:	f3bf 8f6f 	isb	sy
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	b662      	cpsie	i
 8006d30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d32:	bf00      	nop
 8006d34:	bf00      	nop
 8006d36:	e7fd      	b.n	8006d34 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d103      	bne.n	8006d46 <xQueueGenericSend+0x46>
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d101      	bne.n	8006d4a <xQueueGenericSend+0x4a>
 8006d46:	2301      	movs	r3, #1
 8006d48:	e000      	b.n	8006d4c <xQueueGenericSend+0x4c>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10d      	bne.n	8006d6c <xQueueGenericSend+0x6c>
	__asm volatile
 8006d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d54:	b672      	cpsid	i
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	b662      	cpsie	i
 8006d64:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d66:	bf00      	nop
 8006d68:	bf00      	nop
 8006d6a:	e7fd      	b.n	8006d68 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d103      	bne.n	8006d7a <xQueueGenericSend+0x7a>
 8006d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d101      	bne.n	8006d7e <xQueueGenericSend+0x7e>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e000      	b.n	8006d80 <xQueueGenericSend+0x80>
 8006d7e:	2300      	movs	r3, #0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10d      	bne.n	8006da0 <xQueueGenericSend+0xa0>
	__asm volatile
 8006d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d88:	b672      	cpsid	i
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	b662      	cpsie	i
 8006d98:	623b      	str	r3, [r7, #32]
}
 8006d9a:	bf00      	nop
 8006d9c:	bf00      	nop
 8006d9e:	e7fd      	b.n	8006d9c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006da0:	f001 fd46 	bl	8008830 <xTaskGetSchedulerState>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d102      	bne.n	8006db0 <xQueueGenericSend+0xb0>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d101      	bne.n	8006db4 <xQueueGenericSend+0xb4>
 8006db0:	2301      	movs	r3, #1
 8006db2:	e000      	b.n	8006db6 <xQueueGenericSend+0xb6>
 8006db4:	2300      	movs	r3, #0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10d      	bne.n	8006dd6 <xQueueGenericSend+0xd6>
	__asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dbe:	b672      	cpsid	i
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	b662      	cpsie	i
 8006dce:	61fb      	str	r3, [r7, #28]
}
 8006dd0:	bf00      	nop
 8006dd2:	bf00      	nop
 8006dd4:	e7fd      	b.n	8006dd2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006dd6:	f002 f881 	bl	8008edc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ddc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d302      	bcc.n	8006dec <xQueueGenericSend+0xec>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d129      	bne.n	8006e40 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	68b9      	ldr	r1, [r7, #8]
 8006df0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006df2:	f000 fcd3 	bl	800779c <prvCopyDataToQueue>
 8006df6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d010      	beq.n	8006e22 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e02:	3324      	adds	r3, #36	@ 0x24
 8006e04:	4618      	mov	r0, r3
 8006e06:	f001 fb1b 	bl	8008440 <xTaskRemoveFromEventList>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d013      	beq.n	8006e38 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006e10:	4b3f      	ldr	r3, [pc, #252]	@ (8006f10 <xQueueGenericSend+0x210>)
 8006e12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e16:	601a      	str	r2, [r3, #0]
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	f3bf 8f6f 	isb	sy
 8006e20:	e00a      	b.n	8006e38 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d007      	beq.n	8006e38 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e28:	4b39      	ldr	r3, [pc, #228]	@ (8006f10 <xQueueGenericSend+0x210>)
 8006e2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e2e:	601a      	str	r2, [r3, #0]
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e38:	f002 f886 	bl	8008f48 <vPortExitCritical>
				return pdPASS;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e063      	b.n	8006f08 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d103      	bne.n	8006e4e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e46:	f002 f87f 	bl	8008f48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	e05c      	b.n	8006f08 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d106      	bne.n	8006e62 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e54:	f107 0314 	add.w	r3, r7, #20
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f001 fb81 	bl	8008560 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e62:	f002 f871 	bl	8008f48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e66:	f001 f8c3 	bl	8007ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e6a:	f002 f837 	bl	8008edc <vPortEnterCritical>
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e74:	b25b      	sxtb	r3, r3
 8006e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7a:	d103      	bne.n	8006e84 <xQueueGenericSend+0x184>
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e8a:	b25b      	sxtb	r3, r3
 8006e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e90:	d103      	bne.n	8006e9a <xQueueGenericSend+0x19a>
 8006e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e9a:	f002 f855 	bl	8008f48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e9e:	1d3a      	adds	r2, r7, #4
 8006ea0:	f107 0314 	add.w	r3, r7, #20
 8006ea4:	4611      	mov	r1, r2
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f001 fb70 	bl	800858c <xTaskCheckForTimeOut>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d124      	bne.n	8006efc <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006eb2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006eb4:	f000 fd6a 	bl	800798c <prvIsQueueFull>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d018      	beq.n	8006ef0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec0:	3310      	adds	r3, #16
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	4611      	mov	r1, r2
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f001 fa92 	bl	80083f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006ecc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ece:	f000 fcf5 	bl	80078bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006ed2:	f001 f89b 	bl	800800c <xTaskResumeAll>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f47f af7c 	bne.w	8006dd6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8006ede:	4b0c      	ldr	r3, [pc, #48]	@ (8006f10 <xQueueGenericSend+0x210>)
 8006ee0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ee4:	601a      	str	r2, [r3, #0]
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	f3bf 8f6f 	isb	sy
 8006eee:	e772      	b.n	8006dd6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ef0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ef2:	f000 fce3 	bl	80078bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ef6:	f001 f889 	bl	800800c <xTaskResumeAll>
 8006efa:	e76c      	b.n	8006dd6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006efc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006efe:	f000 fcdd 	bl	80078bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f02:	f001 f883 	bl	800800c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006f06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3738      	adds	r7, #56	@ 0x38
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	e000ed04 	.word	0xe000ed04

08006f14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b08e      	sub	sp, #56	@ 0x38
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
 8006f20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10d      	bne.n	8006f48 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f30:	b672      	cpsid	i
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	b662      	cpsie	i
 8006f40:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006f42:	bf00      	nop
 8006f44:	bf00      	nop
 8006f46:	e7fd      	b.n	8006f44 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d103      	bne.n	8006f56 <xQueueGenericSendFromISR+0x42>
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <xQueueGenericSendFromISR+0x46>
 8006f56:	2301      	movs	r3, #1
 8006f58:	e000      	b.n	8006f5c <xQueueGenericSendFromISR+0x48>
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d10d      	bne.n	8006f7c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8006f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f64:	b672      	cpsid	i
 8006f66:	f383 8811 	msr	BASEPRI, r3
 8006f6a:	f3bf 8f6f 	isb	sy
 8006f6e:	f3bf 8f4f 	dsb	sy
 8006f72:	b662      	cpsie	i
 8006f74:	623b      	str	r3, [r7, #32]
}
 8006f76:	bf00      	nop
 8006f78:	bf00      	nop
 8006f7a:	e7fd      	b.n	8006f78 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d103      	bne.n	8006f8a <xQueueGenericSendFromISR+0x76>
 8006f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d101      	bne.n	8006f8e <xQueueGenericSendFromISR+0x7a>
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e000      	b.n	8006f90 <xQueueGenericSendFromISR+0x7c>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10d      	bne.n	8006fb0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8006f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f98:	b672      	cpsid	i
 8006f9a:	f383 8811 	msr	BASEPRI, r3
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f3bf 8f4f 	dsb	sy
 8006fa6:	b662      	cpsie	i
 8006fa8:	61fb      	str	r3, [r7, #28]
}
 8006faa:	bf00      	nop
 8006fac:	bf00      	nop
 8006fae:	e7fd      	b.n	8006fac <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fb0:	f002 f87c 	bl	80090ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006fb4:	f3ef 8211 	mrs	r2, BASEPRI
 8006fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fbc:	b672      	cpsid	i
 8006fbe:	f383 8811 	msr	BASEPRI, r3
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	b662      	cpsie	i
 8006fcc:	61ba      	str	r2, [r7, #24]
 8006fce:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006fd0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d302      	bcc.n	8006fe6 <xQueueGenericSendFromISR+0xd2>
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d12c      	bne.n	8007040 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	68b9      	ldr	r1, [r7, #8]
 8006ff4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ff6:	f000 fbd1 	bl	800779c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ffa:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8006ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007002:	d112      	bne.n	800702a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007008:	2b00      	cmp	r3, #0
 800700a:	d016      	beq.n	800703a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800700c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700e:	3324      	adds	r3, #36	@ 0x24
 8007010:	4618      	mov	r0, r3
 8007012:	f001 fa15 	bl	8008440 <xTaskRemoveFromEventList>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00e      	beq.n	800703a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00b      	beq.n	800703a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2201      	movs	r2, #1
 8007026:	601a      	str	r2, [r3, #0]
 8007028:	e007      	b.n	800703a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800702a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800702e:	3301      	adds	r3, #1
 8007030:	b2db      	uxtb	r3, r3
 8007032:	b25a      	sxtb	r2, r3
 8007034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007036:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800703a:	2301      	movs	r3, #1
 800703c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800703e:	e001      	b.n	8007044 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007040:	2300      	movs	r3, #0
 8007042:	637b      	str	r3, [r7, #52]	@ 0x34
 8007044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007046:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800704e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007052:	4618      	mov	r0, r3
 8007054:	3738      	adds	r7, #56	@ 0x38
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b08e      	sub	sp, #56	@ 0x38
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10d      	bne.n	800708a <xQueueGiveFromISR+0x30>
	__asm volatile
 800706e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007072:	b672      	cpsid	i
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	b662      	cpsie	i
 8007082:	623b      	str	r3, [r7, #32]
}
 8007084:	bf00      	nop
 8007086:	bf00      	nop
 8007088:	e7fd      	b.n	8007086 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800708a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00d      	beq.n	80070ae <xQueueGiveFromISR+0x54>
	__asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007096:	b672      	cpsid	i
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	b662      	cpsie	i
 80070a6:	61fb      	str	r3, [r7, #28]
}
 80070a8:	bf00      	nop
 80070aa:	bf00      	nop
 80070ac:	e7fd      	b.n	80070aa <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80070ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d103      	bne.n	80070be <xQueueGiveFromISR+0x64>
 80070b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <xQueueGiveFromISR+0x68>
 80070be:	2301      	movs	r3, #1
 80070c0:	e000      	b.n	80070c4 <xQueueGiveFromISR+0x6a>
 80070c2:	2300      	movs	r3, #0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10d      	bne.n	80070e4 <xQueueGiveFromISR+0x8a>
	__asm volatile
 80070c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070cc:	b672      	cpsid	i
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	b662      	cpsie	i
 80070dc:	61bb      	str	r3, [r7, #24]
}
 80070de:	bf00      	nop
 80070e0:	bf00      	nop
 80070e2:	e7fd      	b.n	80070e0 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070e4:	f001 ffe2 	bl	80090ac <vPortValidateInterruptPriority>
	__asm volatile
 80070e8:	f3ef 8211 	mrs	r2, BASEPRI
 80070ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f0:	b672      	cpsid	i
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	b662      	cpsie	i
 8007100:	617a      	str	r2, [r7, #20]
 8007102:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007104:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007106:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800710c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800710e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007112:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007114:	429a      	cmp	r2, r3
 8007116:	d22b      	bcs.n	8007170 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800711e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007124:	1c5a      	adds	r2, r3, #1
 8007126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007128:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800712a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800712e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007132:	d112      	bne.n	800715a <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007138:	2b00      	cmp	r3, #0
 800713a:	d016      	beq.n	800716a <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800713c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713e:	3324      	adds	r3, #36	@ 0x24
 8007140:	4618      	mov	r0, r3
 8007142:	f001 f97d 	bl	8008440 <xTaskRemoveFromEventList>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00e      	beq.n	800716a <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00b      	beq.n	800716a <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	2201      	movs	r2, #1
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	e007      	b.n	800716a <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800715a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800715e:	3301      	adds	r3, #1
 8007160:	b2db      	uxtb	r3, r3
 8007162:	b25a      	sxtb	r2, r3
 8007164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007166:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800716a:	2301      	movs	r3, #1
 800716c:	637b      	str	r3, [r7, #52]	@ 0x34
 800716e:	e001      	b.n	8007174 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007170:	2300      	movs	r3, #0
 8007172:	637b      	str	r3, [r7, #52]	@ 0x34
 8007174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007176:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f383 8811 	msr	BASEPRI, r3
}
 800717e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007182:	4618      	mov	r0, r3
 8007184:	3738      	adds	r7, #56	@ 0x38
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
	...

0800718c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b08c      	sub	sp, #48	@ 0x30
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007198:	2300      	movs	r3, #0
 800719a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10d      	bne.n	80071c2 <xQueueReceive+0x36>
	__asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071aa:	b672      	cpsid	i
 80071ac:	f383 8811 	msr	BASEPRI, r3
 80071b0:	f3bf 8f6f 	isb	sy
 80071b4:	f3bf 8f4f 	dsb	sy
 80071b8:	b662      	cpsie	i
 80071ba:	623b      	str	r3, [r7, #32]
}
 80071bc:	bf00      	nop
 80071be:	bf00      	nop
 80071c0:	e7fd      	b.n	80071be <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d103      	bne.n	80071d0 <xQueueReceive+0x44>
 80071c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d101      	bne.n	80071d4 <xQueueReceive+0x48>
 80071d0:	2301      	movs	r3, #1
 80071d2:	e000      	b.n	80071d6 <xQueueReceive+0x4a>
 80071d4:	2300      	movs	r3, #0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10d      	bne.n	80071f6 <xQueueReceive+0x6a>
	__asm volatile
 80071da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071de:	b672      	cpsid	i
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	b662      	cpsie	i
 80071ee:	61fb      	str	r3, [r7, #28]
}
 80071f0:	bf00      	nop
 80071f2:	bf00      	nop
 80071f4:	e7fd      	b.n	80071f2 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071f6:	f001 fb1b 	bl	8008830 <xTaskGetSchedulerState>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d102      	bne.n	8007206 <xQueueReceive+0x7a>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d101      	bne.n	800720a <xQueueReceive+0x7e>
 8007206:	2301      	movs	r3, #1
 8007208:	e000      	b.n	800720c <xQueueReceive+0x80>
 800720a:	2300      	movs	r3, #0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10d      	bne.n	800722c <xQueueReceive+0xa0>
	__asm volatile
 8007210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007214:	b672      	cpsid	i
 8007216:	f383 8811 	msr	BASEPRI, r3
 800721a:	f3bf 8f6f 	isb	sy
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	b662      	cpsie	i
 8007224:	61bb      	str	r3, [r7, #24]
}
 8007226:	bf00      	nop
 8007228:	bf00      	nop
 800722a:	e7fd      	b.n	8007228 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800722c:	f001 fe56 	bl	8008edc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007234:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007238:	2b00      	cmp	r3, #0
 800723a:	d01f      	beq.n	800727c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800723c:	68b9      	ldr	r1, [r7, #8]
 800723e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007240:	f000 fb16 	bl	8007870 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007246:	1e5a      	subs	r2, r3, #1
 8007248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800724c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00f      	beq.n	8007274 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007256:	3310      	adds	r3, #16
 8007258:	4618      	mov	r0, r3
 800725a:	f001 f8f1 	bl	8008440 <xTaskRemoveFromEventList>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d007      	beq.n	8007274 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007264:	4b3c      	ldr	r3, [pc, #240]	@ (8007358 <xQueueReceive+0x1cc>)
 8007266:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007274:	f001 fe68 	bl	8008f48 <vPortExitCritical>
				return pdPASS;
 8007278:	2301      	movs	r3, #1
 800727a:	e069      	b.n	8007350 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d103      	bne.n	800728a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007282:	f001 fe61 	bl	8008f48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007286:	2300      	movs	r3, #0
 8007288:	e062      	b.n	8007350 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800728a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800728c:	2b00      	cmp	r3, #0
 800728e:	d106      	bne.n	800729e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007290:	f107 0310 	add.w	r3, r7, #16
 8007294:	4618      	mov	r0, r3
 8007296:	f001 f963 	bl	8008560 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800729a:	2301      	movs	r3, #1
 800729c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800729e:	f001 fe53 	bl	8008f48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072a2:	f000 fea5 	bl	8007ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072a6:	f001 fe19 	bl	8008edc <vPortEnterCritical>
 80072aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072b0:	b25b      	sxtb	r3, r3
 80072b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b6:	d103      	bne.n	80072c0 <xQueueReceive+0x134>
 80072b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072c6:	b25b      	sxtb	r3, r3
 80072c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072cc:	d103      	bne.n	80072d6 <xQueueReceive+0x14a>
 80072ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072d6:	f001 fe37 	bl	8008f48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072da:	1d3a      	adds	r2, r7, #4
 80072dc:	f107 0310 	add.w	r3, r7, #16
 80072e0:	4611      	mov	r1, r2
 80072e2:	4618      	mov	r0, r3
 80072e4:	f001 f952 	bl	800858c <xTaskCheckForTimeOut>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d123      	bne.n	8007336 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072f0:	f000 fb36 	bl	8007960 <prvIsQueueEmpty>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d017      	beq.n	800732a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80072fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072fc:	3324      	adds	r3, #36	@ 0x24
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	4611      	mov	r1, r2
 8007302:	4618      	mov	r0, r3
 8007304:	f001 f874 	bl	80083f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007308:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800730a:	f000 fad7 	bl	80078bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800730e:	f000 fe7d 	bl	800800c <xTaskResumeAll>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d189      	bne.n	800722c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8007318:	4b0f      	ldr	r3, [pc, #60]	@ (8007358 <xQueueReceive+0x1cc>)
 800731a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800731e:	601a      	str	r2, [r3, #0]
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	e780      	b.n	800722c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800732a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800732c:	f000 fac6 	bl	80078bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007330:	f000 fe6c 	bl	800800c <xTaskResumeAll>
 8007334:	e77a      	b.n	800722c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007336:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007338:	f000 fac0 	bl	80078bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800733c:	f000 fe66 	bl	800800c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007340:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007342:	f000 fb0d 	bl	8007960 <prvIsQueueEmpty>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	f43f af6f 	beq.w	800722c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800734e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007350:	4618      	mov	r0, r3
 8007352:	3730      	adds	r7, #48	@ 0x30
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	e000ed04 	.word	0xe000ed04

0800735c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b08e      	sub	sp, #56	@ 0x38
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007366:	2300      	movs	r3, #0
 8007368:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800736e:	2300      	movs	r3, #0
 8007370:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007374:	2b00      	cmp	r3, #0
 8007376:	d10d      	bne.n	8007394 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8007378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800737c:	b672      	cpsid	i
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	b662      	cpsie	i
 800738c:	623b      	str	r3, [r7, #32]
}
 800738e:	bf00      	nop
 8007390:	bf00      	nop
 8007392:	e7fd      	b.n	8007390 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00d      	beq.n	80073b8 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800739c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a0:	b672      	cpsid	i
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	b662      	cpsie	i
 80073b0:	61fb      	str	r3, [r7, #28]
}
 80073b2:	bf00      	nop
 80073b4:	bf00      	nop
 80073b6:	e7fd      	b.n	80073b4 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073b8:	f001 fa3a 	bl	8008830 <xTaskGetSchedulerState>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d102      	bne.n	80073c8 <xQueueSemaphoreTake+0x6c>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d101      	bne.n	80073cc <xQueueSemaphoreTake+0x70>
 80073c8:	2301      	movs	r3, #1
 80073ca:	e000      	b.n	80073ce <xQueueSemaphoreTake+0x72>
 80073cc:	2300      	movs	r3, #0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10d      	bne.n	80073ee <xQueueSemaphoreTake+0x92>
	__asm volatile
 80073d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d6:	b672      	cpsid	i
 80073d8:	f383 8811 	msr	BASEPRI, r3
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	b662      	cpsie	i
 80073e6:	61bb      	str	r3, [r7, #24]
}
 80073e8:	bf00      	nop
 80073ea:	bf00      	nop
 80073ec:	e7fd      	b.n	80073ea <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073ee:	f001 fd75 	bl	8008edc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80073f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80073f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d024      	beq.n	8007448 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80073fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007400:	1e5a      	subs	r2, r3, #1
 8007402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007404:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d104      	bne.n	8007418 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800740e:	f001 fbd9 	bl	8008bc4 <pvTaskIncrementMutexHeldCount>
 8007412:	4602      	mov	r2, r0
 8007414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007416:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00f      	beq.n	8007440 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007422:	3310      	adds	r3, #16
 8007424:	4618      	mov	r0, r3
 8007426:	f001 f80b 	bl	8008440 <xTaskRemoveFromEventList>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d007      	beq.n	8007440 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007430:	4b55      	ldr	r3, [pc, #340]	@ (8007588 <xQueueSemaphoreTake+0x22c>)
 8007432:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007436:	601a      	str	r2, [r3, #0]
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007440:	f001 fd82 	bl	8008f48 <vPortExitCritical>
				return pdPASS;
 8007444:	2301      	movs	r3, #1
 8007446:	e09a      	b.n	800757e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d114      	bne.n	8007478 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800744e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00d      	beq.n	8007470 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8007454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007458:	b672      	cpsid	i
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	b662      	cpsie	i
 8007468:	617b      	str	r3, [r7, #20]
}
 800746a:	bf00      	nop
 800746c:	bf00      	nop
 800746e:	e7fd      	b.n	800746c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007470:	f001 fd6a 	bl	8008f48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007474:	2300      	movs	r3, #0
 8007476:	e082      	b.n	800757e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800747a:	2b00      	cmp	r3, #0
 800747c:	d106      	bne.n	800748c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800747e:	f107 030c 	add.w	r3, r7, #12
 8007482:	4618      	mov	r0, r3
 8007484:	f001 f86c 	bl	8008560 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007488:	2301      	movs	r3, #1
 800748a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800748c:	f001 fd5c 	bl	8008f48 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007490:	f000 fdae 	bl	8007ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007494:	f001 fd22 	bl	8008edc <vPortEnterCritical>
 8007498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800749a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800749e:	b25b      	sxtb	r3, r3
 80074a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a4:	d103      	bne.n	80074ae <xQueueSemaphoreTake+0x152>
 80074a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074b4:	b25b      	sxtb	r3, r3
 80074b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ba:	d103      	bne.n	80074c4 <xQueueSemaphoreTake+0x168>
 80074bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074c4:	f001 fd40 	bl	8008f48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074c8:	463a      	mov	r2, r7
 80074ca:	f107 030c 	add.w	r3, r7, #12
 80074ce:	4611      	mov	r1, r2
 80074d0:	4618      	mov	r0, r3
 80074d2:	f001 f85b 	bl	800858c <xTaskCheckForTimeOut>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d132      	bne.n	8007542 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80074de:	f000 fa3f 	bl	8007960 <prvIsQueueEmpty>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d026      	beq.n	8007536 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d109      	bne.n	8007504 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 80074f0:	f001 fcf4 	bl	8008edc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80074f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f001 f9b7 	bl	800886c <xTaskPriorityInherit>
 80074fe:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007500:	f001 fd22 	bl	8008f48 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007506:	3324      	adds	r3, #36	@ 0x24
 8007508:	683a      	ldr	r2, [r7, #0]
 800750a:	4611      	mov	r1, r2
 800750c:	4618      	mov	r0, r3
 800750e:	f000 ff6f 	bl	80083f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007512:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007514:	f000 f9d2 	bl	80078bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007518:	f000 fd78 	bl	800800c <xTaskResumeAll>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	f47f af65 	bne.w	80073ee <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8007524:	4b18      	ldr	r3, [pc, #96]	@ (8007588 <xQueueSemaphoreTake+0x22c>)
 8007526:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800752a:	601a      	str	r2, [r3, #0]
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	f3bf 8f6f 	isb	sy
 8007534:	e75b      	b.n	80073ee <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007536:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007538:	f000 f9c0 	bl	80078bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800753c:	f000 fd66 	bl	800800c <xTaskResumeAll>
 8007540:	e755      	b.n	80073ee <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007542:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007544:	f000 f9ba 	bl	80078bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007548:	f000 fd60 	bl	800800c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800754c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800754e:	f000 fa07 	bl	8007960 <prvIsQueueEmpty>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	f43f af4a 	beq.w	80073ee <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800755a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00d      	beq.n	800757c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8007560:	f001 fcbc 	bl	8008edc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007564:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007566:	f000 f901 	bl	800776c <prvGetDisinheritPriorityAfterTimeout>
 800756a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800756c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007572:	4618      	mov	r0, r3
 8007574:	f001 fa86 	bl	8008a84 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007578:	f001 fce6 	bl	8008f48 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800757c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800757e:	4618      	mov	r0, r3
 8007580:	3738      	adds	r7, #56	@ 0x38
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	e000ed04 	.word	0xe000ed04

0800758c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b08e      	sub	sp, #56	@ 0x38
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800759c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10d      	bne.n	80075be <xQueueReceiveFromISR+0x32>
	__asm volatile
 80075a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a6:	b672      	cpsid	i
 80075a8:	f383 8811 	msr	BASEPRI, r3
 80075ac:	f3bf 8f6f 	isb	sy
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	b662      	cpsie	i
 80075b6:	623b      	str	r3, [r7, #32]
}
 80075b8:	bf00      	nop
 80075ba:	bf00      	nop
 80075bc:	e7fd      	b.n	80075ba <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d103      	bne.n	80075cc <xQueueReceiveFromISR+0x40>
 80075c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d101      	bne.n	80075d0 <xQueueReceiveFromISR+0x44>
 80075cc:	2301      	movs	r3, #1
 80075ce:	e000      	b.n	80075d2 <xQueueReceiveFromISR+0x46>
 80075d0:	2300      	movs	r3, #0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10d      	bne.n	80075f2 <xQueueReceiveFromISR+0x66>
	__asm volatile
 80075d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075da:	b672      	cpsid	i
 80075dc:	f383 8811 	msr	BASEPRI, r3
 80075e0:	f3bf 8f6f 	isb	sy
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	b662      	cpsie	i
 80075ea:	61fb      	str	r3, [r7, #28]
}
 80075ec:	bf00      	nop
 80075ee:	bf00      	nop
 80075f0:	e7fd      	b.n	80075ee <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075f2:	f001 fd5b 	bl	80090ac <vPortValidateInterruptPriority>
	__asm volatile
 80075f6:	f3ef 8211 	mrs	r2, BASEPRI
 80075fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fe:	b672      	cpsid	i
 8007600:	f383 8811 	msr	BASEPRI, r3
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	f3bf 8f4f 	dsb	sy
 800760c:	b662      	cpsie	i
 800760e:	61ba      	str	r2, [r7, #24]
 8007610:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007612:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007614:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800761a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800761c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800761e:	2b00      	cmp	r3, #0
 8007620:	d02f      	beq.n	8007682 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007624:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007628:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800762c:	68b9      	ldr	r1, [r7, #8]
 800762e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007630:	f000 f91e 	bl	8007870 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007636:	1e5a      	subs	r2, r3, #1
 8007638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800763a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800763c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007644:	d112      	bne.n	800766c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d016      	beq.n	800767c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800764e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007650:	3310      	adds	r3, #16
 8007652:	4618      	mov	r0, r3
 8007654:	f000 fef4 	bl	8008440 <xTaskRemoveFromEventList>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00e      	beq.n	800767c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00b      	beq.n	800767c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	601a      	str	r2, [r3, #0]
 800766a:	e007      	b.n	800767c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800766c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007670:	3301      	adds	r3, #1
 8007672:	b2db      	uxtb	r3, r3
 8007674:	b25a      	sxtb	r2, r3
 8007676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007678:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800767c:	2301      	movs	r3, #1
 800767e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007680:	e001      	b.n	8007686 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8007682:	2300      	movs	r3, #0
 8007684:	637b      	str	r3, [r7, #52]	@ 0x34
 8007686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007688:	613b      	str	r3, [r7, #16]
	__asm volatile
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	f383 8811 	msr	BASEPRI, r3
}
 8007690:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007694:	4618      	mov	r0, r3
 8007696:	3738      	adds	r7, #56	@ 0x38
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d10d      	bne.n	80076c6 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 80076aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ae:	b672      	cpsid	i
 80076b0:	f383 8811 	msr	BASEPRI, r3
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	b662      	cpsie	i
 80076be:	60bb      	str	r3, [r7, #8]
}
 80076c0:	bf00      	nop
 80076c2:	bf00      	nop
 80076c4:	e7fd      	b.n	80076c2 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80076c6:	f001 fc09 	bl	8008edc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ce:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80076d0:	f001 fc3a 	bl	8008f48 <vPortExitCritical>

	return uxReturn;
 80076d4:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80076de:	b480      	push	{r7}
 80076e0:	b087      	sub	sp, #28
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d10d      	bne.n	800770c <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f4:	b672      	cpsid	i
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	b662      	cpsie	i
 8007704:	60fb      	str	r3, [r7, #12]
}
 8007706:	bf00      	nop
 8007708:	bf00      	nop
 800770a:	e7fd      	b.n	8007708 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007710:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007712:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007714:	4618      	mov	r0, r3
 8007716:	371c      	adds	r7, #28
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10d      	bne.n	800774e <vQueueDelete+0x2e>
	__asm volatile
 8007732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007736:	b672      	cpsid	i
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	b662      	cpsie	i
 8007746:	60bb      	str	r3, [r7, #8]
}
 8007748:	bf00      	nop
 800774a:	bf00      	nop
 800774c:	e7fd      	b.n	800774a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f000 f934 	bl	80079bc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800775a:	2b00      	cmp	r3, #0
 800775c:	d102      	bne.n	8007764 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f001 fdb8 	bl	80092d4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007764:	bf00      	nop
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007778:	2b00      	cmp	r3, #0
 800777a:	d006      	beq.n	800778a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f1c3 0307 	rsb	r3, r3, #7
 8007786:	60fb      	str	r3, [r7, #12]
 8007788:	e001      	b.n	800778e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800778a:	2300      	movs	r3, #0
 800778c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800778e:	68fb      	ldr	r3, [r7, #12]
	}
 8007790:	4618      	mov	r0, r3
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80077a8:	2300      	movs	r3, #0
 80077aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10d      	bne.n	80077d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d14d      	bne.n	800785e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	4618      	mov	r0, r3
 80077c8:	f001 f8d0 	bl	800896c <xTaskPriorityDisinherit>
 80077cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	609a      	str	r2, [r3, #8]
 80077d4:	e043      	b.n	800785e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d119      	bne.n	8007810 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6858      	ldr	r0, [r3, #4]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e4:	461a      	mov	r2, r3
 80077e6:	68b9      	ldr	r1, [r7, #8]
 80077e8:	f01e f91b 	bl	8025a22 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	685a      	ldr	r2, [r3, #4]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077f4:	441a      	add	r2, r3
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	429a      	cmp	r2, r3
 8007804:	d32b      	bcc.n	800785e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	605a      	str	r2, [r3, #4]
 800780e:	e026      	b.n	800785e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	68d8      	ldr	r0, [r3, #12]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007818:	461a      	mov	r2, r3
 800781a:	68b9      	ldr	r1, [r7, #8]
 800781c:	f01e f901 	bl	8025a22 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	68da      	ldr	r2, [r3, #12]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007828:	425b      	negs	r3, r3
 800782a:	441a      	add	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	68da      	ldr	r2, [r3, #12]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	429a      	cmp	r2, r3
 800783a:	d207      	bcs.n	800784c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	689a      	ldr	r2, [r3, #8]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007844:	425b      	negs	r3, r3
 8007846:	441a      	add	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b02      	cmp	r3, #2
 8007850:	d105      	bne.n	800785e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	3b01      	subs	r3, #1
 800785c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	1c5a      	adds	r2, r3, #1
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007866:	697b      	ldr	r3, [r7, #20]
}
 8007868:	4618      	mov	r0, r3
 800786a:	3718      	adds	r7, #24
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800787e:	2b00      	cmp	r3, #0
 8007880:	d018      	beq.n	80078b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	68da      	ldr	r2, [r3, #12]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800788a:	441a      	add	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	68da      	ldr	r2, [r3, #12]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	429a      	cmp	r2, r3
 800789a:	d303      	bcc.n	80078a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	68d9      	ldr	r1, [r3, #12]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ac:	461a      	mov	r2, r3
 80078ae:	6838      	ldr	r0, [r7, #0]
 80078b0:	f01e f8b7 	bl	8025a22 <memcpy>
	}
}
 80078b4:	bf00      	nop
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80078c4:	f001 fb0a 	bl	8008edc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078d0:	e011      	b.n	80078f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d012      	beq.n	8007900 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	3324      	adds	r3, #36	@ 0x24
 80078de:	4618      	mov	r0, r3
 80078e0:	f000 fdae 	bl	8008440 <xTaskRemoveFromEventList>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d001      	beq.n	80078ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80078ea:	f000 feb7 	bl	800865c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
 80078f0:	3b01      	subs	r3, #1
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	dce9      	bgt.n	80078d2 <prvUnlockQueue+0x16>
 80078fe:	e000      	b.n	8007902 <prvUnlockQueue+0x46>
					break;
 8007900:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	22ff      	movs	r2, #255	@ 0xff
 8007906:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800790a:	f001 fb1d 	bl	8008f48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800790e:	f001 fae5 	bl	8008edc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007918:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800791a:	e011      	b.n	8007940 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d012      	beq.n	800794a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3310      	adds	r3, #16
 8007928:	4618      	mov	r0, r3
 800792a:	f000 fd89 	bl	8008440 <xTaskRemoveFromEventList>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d001      	beq.n	8007938 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007934:	f000 fe92 	bl	800865c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007938:	7bbb      	ldrb	r3, [r7, #14]
 800793a:	3b01      	subs	r3, #1
 800793c:	b2db      	uxtb	r3, r3
 800793e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007940:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007944:	2b00      	cmp	r3, #0
 8007946:	dce9      	bgt.n	800791c <prvUnlockQueue+0x60>
 8007948:	e000      	b.n	800794c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800794a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	22ff      	movs	r2, #255	@ 0xff
 8007950:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007954:	f001 faf8 	bl	8008f48 <vPortExitCritical>
}
 8007958:	bf00      	nop
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007968:	f001 fab8 	bl	8008edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007970:	2b00      	cmp	r3, #0
 8007972:	d102      	bne.n	800797a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007974:	2301      	movs	r3, #1
 8007976:	60fb      	str	r3, [r7, #12]
 8007978:	e001      	b.n	800797e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800797a:	2300      	movs	r3, #0
 800797c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800797e:	f001 fae3 	bl	8008f48 <vPortExitCritical>

	return xReturn;
 8007982:	68fb      	ldr	r3, [r7, #12]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007994:	f001 faa2 	bl	8008edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d102      	bne.n	80079aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80079a4:	2301      	movs	r3, #1
 80079a6:	60fb      	str	r3, [r7, #12]
 80079a8:	e001      	b.n	80079ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80079aa:	2300      	movs	r3, #0
 80079ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079ae:	f001 facb 	bl	8008f48 <vPortExitCritical>

	return xReturn;
 80079b2:	68fb      	ldr	r3, [r7, #12]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079c4:	2300      	movs	r3, #0
 80079c6:	60fb      	str	r3, [r7, #12]
 80079c8:	e016      	b.n	80079f8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80079ca:	4a10      	ldr	r2, [pc, #64]	@ (8007a0c <vQueueUnregisterQueue+0x50>)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	00db      	lsls	r3, r3, #3
 80079d0:	4413      	add	r3, r2
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d10b      	bne.n	80079f2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80079da:	4a0c      	ldr	r2, [pc, #48]	@ (8007a0c <vQueueUnregisterQueue+0x50>)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2100      	movs	r1, #0
 80079e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80079e4:	4a09      	ldr	r2, [pc, #36]	@ (8007a0c <vQueueUnregisterQueue+0x50>)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	00db      	lsls	r3, r3, #3
 80079ea:	4413      	add	r3, r2
 80079ec:	2200      	movs	r2, #0
 80079ee:	605a      	str	r2, [r3, #4]
				break;
 80079f0:	e006      	b.n	8007a00 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	3301      	adds	r3, #1
 80079f6:	60fb      	str	r3, [r7, #12]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2b07      	cmp	r3, #7
 80079fc:	d9e5      	bls.n	80079ca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80079fe:	bf00      	nop
 8007a00:	bf00      	nop
 8007a02:	3714      	adds	r7, #20
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr
 8007a0c:	20005230 	.word	0x20005230

08007a10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b08e      	sub	sp, #56	@ 0x38
 8007a14:	af04      	add	r7, sp, #16
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
 8007a1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10d      	bne.n	8007a40 <xTaskCreateStatic+0x30>
	__asm volatile
 8007a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a28:	b672      	cpsid	i
 8007a2a:	f383 8811 	msr	BASEPRI, r3
 8007a2e:	f3bf 8f6f 	isb	sy
 8007a32:	f3bf 8f4f 	dsb	sy
 8007a36:	b662      	cpsie	i
 8007a38:	623b      	str	r3, [r7, #32]
}
 8007a3a:	bf00      	nop
 8007a3c:	bf00      	nop
 8007a3e:	e7fd      	b.n	8007a3c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10d      	bne.n	8007a62 <xTaskCreateStatic+0x52>
	__asm volatile
 8007a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a4a:	b672      	cpsid	i
 8007a4c:	f383 8811 	msr	BASEPRI, r3
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	b662      	cpsie	i
 8007a5a:	61fb      	str	r3, [r7, #28]
}
 8007a5c:	bf00      	nop
 8007a5e:	bf00      	nop
 8007a60:	e7fd      	b.n	8007a5e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007a62:	23a0      	movs	r3, #160	@ 0xa0
 8007a64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	2ba0      	cmp	r3, #160	@ 0xa0
 8007a6a:	d00d      	beq.n	8007a88 <xTaskCreateStatic+0x78>
	__asm volatile
 8007a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a70:	b672      	cpsid	i
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	b662      	cpsie	i
 8007a80:	61bb      	str	r3, [r7, #24]
}
 8007a82:	bf00      	nop
 8007a84:	bf00      	nop
 8007a86:	e7fd      	b.n	8007a84 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007a88:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d01e      	beq.n	8007ace <xTaskCreateStatic+0xbe>
 8007a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d01b      	beq.n	8007ace <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a98:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a9e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	9303      	str	r3, [sp, #12]
 8007aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aae:	9302      	str	r3, [sp, #8]
 8007ab0:	f107 0314 	add.w	r3, r7, #20
 8007ab4:	9301      	str	r3, [sp, #4]
 8007ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	68b9      	ldr	r1, [r7, #8]
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f000 f851 	bl	8007b68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ac6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007ac8:	f000 f8f0 	bl	8007cac <prvAddNewTaskToReadyList>
 8007acc:	e001      	b.n	8007ad2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007ad2:	697b      	ldr	r3, [r7, #20]
	}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3728      	adds	r7, #40	@ 0x28
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b08c      	sub	sp, #48	@ 0x30
 8007ae0:	af04      	add	r7, sp, #16
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	603b      	str	r3, [r7, #0]
 8007ae8:	4613      	mov	r3, r2
 8007aea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007aec:	88fb      	ldrh	r3, [r7, #6]
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4618      	mov	r0, r3
 8007af2:	f001 fb21 	bl	8009138 <pvPortMalloc>
 8007af6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00e      	beq.n	8007b1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007afe:	20a0      	movs	r0, #160	@ 0xa0
 8007b00:	f001 fb1a 	bl	8009138 <pvPortMalloc>
 8007b04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d003      	beq.n	8007b14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	697a      	ldr	r2, [r7, #20]
 8007b10:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b12:	e005      	b.n	8007b20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007b14:	6978      	ldr	r0, [r7, #20]
 8007b16:	f001 fbdd 	bl	80092d4 <vPortFree>
 8007b1a:	e001      	b.n	8007b20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d017      	beq.n	8007b56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007b2e:	88fa      	ldrh	r2, [r7, #6]
 8007b30:	2300      	movs	r3, #0
 8007b32:	9303      	str	r3, [sp, #12]
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	9302      	str	r3, [sp, #8]
 8007b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b3a:	9301      	str	r3, [sp, #4]
 8007b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	68b9      	ldr	r1, [r7, #8]
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f000 f80f 	bl	8007b68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b4a:	69f8      	ldr	r0, [r7, #28]
 8007b4c:	f000 f8ae 	bl	8007cac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b50:	2301      	movs	r3, #1
 8007b52:	61bb      	str	r3, [r7, #24]
 8007b54:	e002      	b.n	8007b5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007b56:	f04f 33ff 	mov.w	r3, #4294967295
 8007b5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b5c:	69bb      	ldr	r3, [r7, #24]
	}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3720      	adds	r7, #32
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
	...

08007b68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b088      	sub	sp, #32
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
 8007b74:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b7a:	6879      	ldr	r1, [r7, #4]
 8007b7c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007b80:	440b      	add	r3, r1
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	f023 0307 	bic.w	r3, r3, #7
 8007b8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	f003 0307 	and.w	r3, r3, #7
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00d      	beq.n	8007bb6 <prvInitialiseNewTask+0x4e>
	__asm volatile
 8007b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b9e:	b672      	cpsid	i
 8007ba0:	f383 8811 	msr	BASEPRI, r3
 8007ba4:	f3bf 8f6f 	isb	sy
 8007ba8:	f3bf 8f4f 	dsb	sy
 8007bac:	b662      	cpsie	i
 8007bae:	617b      	str	r3, [r7, #20]
}
 8007bb0:	bf00      	nop
 8007bb2:	bf00      	nop
 8007bb4:	e7fd      	b.n	8007bb2 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d01f      	beq.n	8007bfc <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	61fb      	str	r3, [r7, #28]
 8007bc0:	e012      	b.n	8007be8 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	7819      	ldrb	r1, [r3, #0]
 8007bca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	4413      	add	r3, r2
 8007bd0:	3334      	adds	r3, #52	@ 0x34
 8007bd2:	460a      	mov	r2, r1
 8007bd4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007bd6:	68ba      	ldr	r2, [r7, #8]
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	4413      	add	r3, r2
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d006      	beq.n	8007bf0 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	3301      	adds	r3, #1
 8007be6:	61fb      	str	r3, [r7, #28]
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	2b0f      	cmp	r3, #15
 8007bec:	d9e9      	bls.n	8007bc2 <prvInitialiseNewTask+0x5a>
 8007bee:	e000      	b.n	8007bf2 <prvInitialiseNewTask+0x8a>
			{
				break;
 8007bf0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007bfa:	e003      	b.n	8007c04 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c06:	2b06      	cmp	r3, #6
 8007c08:	d901      	bls.n	8007c0e <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c0a:	2306      	movs	r3, #6
 8007c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c12:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c18:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c22:	3304      	adds	r3, #4
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7fe fe34 	bl	8006892 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2c:	3318      	adds	r3, #24
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fe fe2f 	bl	8006892 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c38:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c3c:	f1c3 0207 	rsb	r2, r3, #7
 8007c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c42:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c48:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5c:	334c      	adds	r3, #76	@ 0x4c
 8007c5e:	224c      	movs	r2, #76	@ 0x4c
 8007c60:	2100      	movs	r1, #0
 8007c62:	4618      	mov	r0, r3
 8007c64:	f01d fdb6 	bl	80257d4 <memset>
 8007c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6a:	4a0d      	ldr	r2, [pc, #52]	@ (8007ca0 <prvInitialiseNewTask+0x138>)
 8007c6c:	651a      	str	r2, [r3, #80]	@ 0x50
 8007c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c70:	4a0c      	ldr	r2, [pc, #48]	@ (8007ca4 <prvInitialiseNewTask+0x13c>)
 8007c72:	655a      	str	r2, [r3, #84]	@ 0x54
 8007c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c76:	4a0c      	ldr	r2, [pc, #48]	@ (8007ca8 <prvInitialiseNewTask+0x140>)
 8007c78:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007c7a:	683a      	ldr	r2, [r7, #0]
 8007c7c:	68f9      	ldr	r1, [r7, #12]
 8007c7e:	69b8      	ldr	r0, [r7, #24]
 8007c80:	f001 f81a 	bl	8008cb8 <pxPortInitialiseStack>
 8007c84:	4602      	mov	r2, r0
 8007c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d002      	beq.n	8007c96 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c96:	bf00      	nop
 8007c98:	3720      	adds	r7, #32
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	20014b60 	.word	0x20014b60
 8007ca4:	20014bc8 	.word	0x20014bc8
 8007ca8:	20014c30 	.word	0x20014c30

08007cac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007cb4:	f001 f912 	bl	8008edc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8007d64 <prvAddNewTaskToReadyList+0xb8>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	4a29      	ldr	r2, [pc, #164]	@ (8007d64 <prvAddNewTaskToReadyList+0xb8>)
 8007cc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007cc2:	4b29      	ldr	r3, [pc, #164]	@ (8007d68 <prvAddNewTaskToReadyList+0xbc>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d109      	bne.n	8007cde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007cca:	4a27      	ldr	r2, [pc, #156]	@ (8007d68 <prvAddNewTaskToReadyList+0xbc>)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007cd0:	4b24      	ldr	r3, [pc, #144]	@ (8007d64 <prvAddNewTaskToReadyList+0xb8>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d110      	bne.n	8007cfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007cd8:	f000 fce4 	bl	80086a4 <prvInitialiseTaskLists>
 8007cdc:	e00d      	b.n	8007cfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007cde:	4b23      	ldr	r3, [pc, #140]	@ (8007d6c <prvAddNewTaskToReadyList+0xc0>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d109      	bne.n	8007cfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007ce6:	4b20      	ldr	r3, [pc, #128]	@ (8007d68 <prvAddNewTaskToReadyList+0xbc>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d802      	bhi.n	8007cfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8007d68 <prvAddNewTaskToReadyList+0xbc>)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8007d70 <prvAddNewTaskToReadyList+0xc4>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	4a1b      	ldr	r2, [pc, #108]	@ (8007d70 <prvAddNewTaskToReadyList+0xc4>)
 8007d02:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d08:	2201      	movs	r2, #1
 8007d0a:	409a      	lsls	r2, r3
 8007d0c:	4b19      	ldr	r3, [pc, #100]	@ (8007d74 <prvAddNewTaskToReadyList+0xc8>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	4a18      	ldr	r2, [pc, #96]	@ (8007d74 <prvAddNewTaskToReadyList+0xc8>)
 8007d14:	6013      	str	r3, [r2, #0]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4413      	add	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4a15      	ldr	r2, [pc, #84]	@ (8007d78 <prvAddNewTaskToReadyList+0xcc>)
 8007d24:	441a      	add	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	3304      	adds	r3, #4
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	4610      	mov	r0, r2
 8007d2e:	f7fe fdbd 	bl	80068ac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007d32:	f001 f909 	bl	8008f48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007d36:	4b0d      	ldr	r3, [pc, #52]	@ (8007d6c <prvAddNewTaskToReadyList+0xc0>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00e      	beq.n	8007d5c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8007d68 <prvAddNewTaskToReadyList+0xbc>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d207      	bcs.n	8007d5c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8007d7c <prvAddNewTaskToReadyList+0xd0>)
 8007d4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d52:	601a      	str	r2, [r3, #0]
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d5c:	bf00      	nop
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	20005370 	.word	0x20005370
 8007d68:	20005270 	.word	0x20005270
 8007d6c:	2000537c 	.word	0x2000537c
 8007d70:	2000538c 	.word	0x2000538c
 8007d74:	20005378 	.word	0x20005378
 8007d78:	20005274 	.word	0x20005274
 8007d7c:	e000ed04 	.word	0xe000ed04

08007d80 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007d88:	f001 f8a8 	bl	8008edc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d102      	bne.n	8007d98 <vTaskDelete+0x18>
 8007d92:	4b3a      	ldr	r3, [pc, #232]	@ (8007e7c <vTaskDelete+0xfc>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	e000      	b.n	8007d9a <vTaskDelete+0x1a>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	3304      	adds	r3, #4
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7fe fde0 	bl	8006966 <uxListRemove>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d115      	bne.n	8007dd8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007db0:	4933      	ldr	r1, [pc, #204]	@ (8007e80 <vTaskDelete+0x100>)
 8007db2:	4613      	mov	r3, r2
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4413      	add	r3, r2
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	440b      	add	r3, r1
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10a      	bne.n	8007dd8 <vTaskDelete+0x58>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dcc:	43da      	mvns	r2, r3
 8007dce:	4b2d      	ldr	r3, [pc, #180]	@ (8007e84 <vTaskDelete+0x104>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	4a2b      	ldr	r2, [pc, #172]	@ (8007e84 <vTaskDelete+0x104>)
 8007dd6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d004      	beq.n	8007dea <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	3318      	adds	r3, #24
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7fe fdbe 	bl	8006966 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007dea:	4b27      	ldr	r3, [pc, #156]	@ (8007e88 <vTaskDelete+0x108>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	3301      	adds	r3, #1
 8007df0:	4a25      	ldr	r2, [pc, #148]	@ (8007e88 <vTaskDelete+0x108>)
 8007df2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007df4:	4b21      	ldr	r3, [pc, #132]	@ (8007e7c <vTaskDelete+0xfc>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d10b      	bne.n	8007e16 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	3304      	adds	r3, #4
 8007e02:	4619      	mov	r1, r3
 8007e04:	4821      	ldr	r0, [pc, #132]	@ (8007e8c <vTaskDelete+0x10c>)
 8007e06:	f7fe fd51 	bl	80068ac <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007e0a:	4b21      	ldr	r3, [pc, #132]	@ (8007e90 <vTaskDelete+0x110>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	4a1f      	ldr	r2, [pc, #124]	@ (8007e90 <vTaskDelete+0x110>)
 8007e12:	6013      	str	r3, [r2, #0]
 8007e14:	e009      	b.n	8007e2a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007e16:	4b1f      	ldr	r3, [pc, #124]	@ (8007e94 <vTaskDelete+0x114>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8007e94 <vTaskDelete+0x114>)
 8007e1e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f000 fcad 	bl	8008780 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007e26:	f000 fce3 	bl	80087f0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8007e2a:	f001 f88d 	bl	8008f48 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8007e98 <vTaskDelete+0x118>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d01e      	beq.n	8007e74 <vTaskDelete+0xf4>
		{
			if( pxTCB == pxCurrentTCB )
 8007e36:	4b11      	ldr	r3, [pc, #68]	@ (8007e7c <vTaskDelete+0xfc>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d119      	bne.n	8007e74 <vTaskDelete+0xf4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007e40:	4b16      	ldr	r3, [pc, #88]	@ (8007e9c <vTaskDelete+0x11c>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00d      	beq.n	8007e64 <vTaskDelete+0xe4>
	__asm volatile
 8007e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e4c:	b672      	cpsid	i
 8007e4e:	f383 8811 	msr	BASEPRI, r3
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	b662      	cpsie	i
 8007e5c:	60bb      	str	r3, [r7, #8]
}
 8007e5e:	bf00      	nop
 8007e60:	bf00      	nop
 8007e62:	e7fd      	b.n	8007e60 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8007e64:	4b0e      	ldr	r3, [pc, #56]	@ (8007ea0 <vTaskDelete+0x120>)
 8007e66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e6a:	601a      	str	r2, [r3, #0]
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e74:	bf00      	nop
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	20005270 	.word	0x20005270
 8007e80:	20005274 	.word	0x20005274
 8007e84:	20005378 	.word	0x20005378
 8007e88:	2000538c 	.word	0x2000538c
 8007e8c:	20005344 	.word	0x20005344
 8007e90:	20005358 	.word	0x20005358
 8007e94:	20005370 	.word	0x20005370
 8007e98:	2000537c 	.word	0x2000537c
 8007e9c:	20005398 	.word	0x20005398
 8007ea0:	e000ed04 	.word	0xe000ed04

08007ea4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007eac:	2300      	movs	r3, #0
 8007eae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d01a      	beq.n	8007eec <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007eb6:	4b15      	ldr	r3, [pc, #84]	@ (8007f0c <vTaskDelay+0x68>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00d      	beq.n	8007eda <vTaskDelay+0x36>
	__asm volatile
 8007ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec2:	b672      	cpsid	i
 8007ec4:	f383 8811 	msr	BASEPRI, r3
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	b662      	cpsie	i
 8007ed2:	60bb      	str	r3, [r7, #8]
}
 8007ed4:	bf00      	nop
 8007ed6:	bf00      	nop
 8007ed8:	e7fd      	b.n	8007ed6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007eda:	f000 f889 	bl	8007ff0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007ede:	2100      	movs	r1, #0
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fe83 	bl	8008bec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ee6:	f000 f891 	bl	800800c <xTaskResumeAll>
 8007eea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d107      	bne.n	8007f02 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8007ef2:	4b07      	ldr	r3, [pc, #28]	@ (8007f10 <vTaskDelay+0x6c>)
 8007ef4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ef8:	601a      	str	r2, [r3, #0]
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f02:	bf00      	nop
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	20005398 	.word	0x20005398
 8007f10:	e000ed04 	.word	0xe000ed04

08007f14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b08a      	sub	sp, #40	@ 0x28
 8007f18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f22:	463a      	mov	r2, r7
 8007f24:	1d39      	adds	r1, r7, #4
 8007f26:	f107 0308 	add.w	r3, r7, #8
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7f8 fd7a 	bl	8000a24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	9202      	str	r2, [sp, #8]
 8007f38:	9301      	str	r3, [sp, #4]
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	2300      	movs	r3, #0
 8007f40:	460a      	mov	r2, r1
 8007f42:	4923      	ldr	r1, [pc, #140]	@ (8007fd0 <vTaskStartScheduler+0xbc>)
 8007f44:	4823      	ldr	r0, [pc, #140]	@ (8007fd4 <vTaskStartScheduler+0xc0>)
 8007f46:	f7ff fd63 	bl	8007a10 <xTaskCreateStatic>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	4a22      	ldr	r2, [pc, #136]	@ (8007fd8 <vTaskStartScheduler+0xc4>)
 8007f4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f50:	4b21      	ldr	r3, [pc, #132]	@ (8007fd8 <vTaskStartScheduler+0xc4>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d002      	beq.n	8007f5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	617b      	str	r3, [r7, #20]
 8007f5c:	e001      	b.n	8007f62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d11d      	bne.n	8007fa4 <vTaskStartScheduler+0x90>
	__asm volatile
 8007f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f6c:	b672      	cpsid	i
 8007f6e:	f383 8811 	msr	BASEPRI, r3
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	b662      	cpsie	i
 8007f7c:	613b      	str	r3, [r7, #16]
}
 8007f7e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f80:	4b16      	ldr	r3, [pc, #88]	@ (8007fdc <vTaskStartScheduler+0xc8>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	334c      	adds	r3, #76	@ 0x4c
 8007f86:	4a16      	ldr	r2, [pc, #88]	@ (8007fe0 <vTaskStartScheduler+0xcc>)
 8007f88:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f8a:	4b16      	ldr	r3, [pc, #88]	@ (8007fe4 <vTaskStartScheduler+0xd0>)
 8007f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f92:	4b15      	ldr	r3, [pc, #84]	@ (8007fe8 <vTaskStartScheduler+0xd4>)
 8007f94:	2201      	movs	r2, #1
 8007f96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f98:	4b14      	ldr	r3, [pc, #80]	@ (8007fec <vTaskStartScheduler+0xd8>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f9e:	f000 ff1f 	bl	8008de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007fa2:	e011      	b.n	8007fc8 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007faa:	d10d      	bne.n	8007fc8 <vTaskStartScheduler+0xb4>
	__asm volatile
 8007fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb0:	b672      	cpsid	i
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	b662      	cpsie	i
 8007fc0:	60fb      	str	r3, [r7, #12]
}
 8007fc2:	bf00      	nop
 8007fc4:	bf00      	nop
 8007fc6:	e7fd      	b.n	8007fc4 <vTaskStartScheduler+0xb0>
}
 8007fc8:	bf00      	nop
 8007fca:	3718      	adds	r7, #24
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	0802683c 	.word	0x0802683c
 8007fd4:	08008675 	.word	0x08008675
 8007fd8:	20005394 	.word	0x20005394
 8007fdc:	20005270 	.word	0x20005270
 8007fe0:	20000168 	.word	0x20000168
 8007fe4:	20005390 	.word	0x20005390
 8007fe8:	2000537c 	.word	0x2000537c
 8007fec:	20005374 	.word	0x20005374

08007ff0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007ff4:	4b04      	ldr	r3, [pc, #16]	@ (8008008 <vTaskSuspendAll+0x18>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	4a03      	ldr	r2, [pc, #12]	@ (8008008 <vTaskSuspendAll+0x18>)
 8007ffc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007ffe:	bf00      	nop
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	20005398 	.word	0x20005398

0800800c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008012:	2300      	movs	r3, #0
 8008014:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008016:	2300      	movs	r3, #0
 8008018:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800801a:	4b43      	ldr	r3, [pc, #268]	@ (8008128 <xTaskResumeAll+0x11c>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10d      	bne.n	800803e <xTaskResumeAll+0x32>
	__asm volatile
 8008022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008026:	b672      	cpsid	i
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	b662      	cpsie	i
 8008036:	603b      	str	r3, [r7, #0]
}
 8008038:	bf00      	nop
 800803a:	bf00      	nop
 800803c:	e7fd      	b.n	800803a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800803e:	f000 ff4d 	bl	8008edc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008042:	4b39      	ldr	r3, [pc, #228]	@ (8008128 <xTaskResumeAll+0x11c>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	3b01      	subs	r3, #1
 8008048:	4a37      	ldr	r2, [pc, #220]	@ (8008128 <xTaskResumeAll+0x11c>)
 800804a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800804c:	4b36      	ldr	r3, [pc, #216]	@ (8008128 <xTaskResumeAll+0x11c>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d161      	bne.n	8008118 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008054:	4b35      	ldr	r3, [pc, #212]	@ (800812c <xTaskResumeAll+0x120>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d05d      	beq.n	8008118 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800805c:	e02e      	b.n	80080bc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800805e:	4b34      	ldr	r3, [pc, #208]	@ (8008130 <xTaskResumeAll+0x124>)
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	3318      	adds	r3, #24
 800806a:	4618      	mov	r0, r3
 800806c:	f7fe fc7b 	bl	8006966 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	3304      	adds	r3, #4
 8008074:	4618      	mov	r0, r3
 8008076:	f7fe fc76 	bl	8006966 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800807e:	2201      	movs	r2, #1
 8008080:	409a      	lsls	r2, r3
 8008082:	4b2c      	ldr	r3, [pc, #176]	@ (8008134 <xTaskResumeAll+0x128>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4313      	orrs	r3, r2
 8008088:	4a2a      	ldr	r2, [pc, #168]	@ (8008134 <xTaskResumeAll+0x128>)
 800808a:	6013      	str	r3, [r2, #0]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008090:	4613      	mov	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4413      	add	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4a27      	ldr	r2, [pc, #156]	@ (8008138 <xTaskResumeAll+0x12c>)
 800809a:	441a      	add	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	3304      	adds	r3, #4
 80080a0:	4619      	mov	r1, r3
 80080a2:	4610      	mov	r0, r2
 80080a4:	f7fe fc02 	bl	80068ac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080ac:	4b23      	ldr	r3, [pc, #140]	@ (800813c <xTaskResumeAll+0x130>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d302      	bcc.n	80080bc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80080b6:	4b22      	ldr	r3, [pc, #136]	@ (8008140 <xTaskResumeAll+0x134>)
 80080b8:	2201      	movs	r2, #1
 80080ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080bc:	4b1c      	ldr	r3, [pc, #112]	@ (8008130 <xTaskResumeAll+0x124>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1cc      	bne.n	800805e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d001      	beq.n	80080ce <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80080ca:	f000 fb91 	bl	80087f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80080ce:	4b1d      	ldr	r3, [pc, #116]	@ (8008144 <xTaskResumeAll+0x138>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d010      	beq.n	80080fc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80080da:	f000 f859 	bl	8008190 <xTaskIncrementTick>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d002      	beq.n	80080ea <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80080e4:	4b16      	ldr	r3, [pc, #88]	@ (8008140 <xTaskResumeAll+0x134>)
 80080e6:	2201      	movs	r2, #1
 80080e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	3b01      	subs	r3, #1
 80080ee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1f1      	bne.n	80080da <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80080f6:	4b13      	ldr	r3, [pc, #76]	@ (8008144 <xTaskResumeAll+0x138>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80080fc:	4b10      	ldr	r3, [pc, #64]	@ (8008140 <xTaskResumeAll+0x134>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d009      	beq.n	8008118 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008104:	2301      	movs	r3, #1
 8008106:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008108:	4b0f      	ldr	r3, [pc, #60]	@ (8008148 <xTaskResumeAll+0x13c>)
 800810a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800810e:	601a      	str	r2, [r3, #0]
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008118:	f000 ff16 	bl	8008f48 <vPortExitCritical>

	return xAlreadyYielded;
 800811c:	68bb      	ldr	r3, [r7, #8]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	20005398 	.word	0x20005398
 800812c:	20005370 	.word	0x20005370
 8008130:	20005330 	.word	0x20005330
 8008134:	20005378 	.word	0x20005378
 8008138:	20005274 	.word	0x20005274
 800813c:	20005270 	.word	0x20005270
 8008140:	20005384 	.word	0x20005384
 8008144:	20005380 	.word	0x20005380
 8008148:	e000ed04 	.word	0xe000ed04

0800814c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008152:	4b05      	ldr	r3, [pc, #20]	@ (8008168 <xTaskGetTickCount+0x1c>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008158:	687b      	ldr	r3, [r7, #4]
}
 800815a:	4618      	mov	r0, r3
 800815c:	370c      	adds	r7, #12
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	20005374 	.word	0x20005374

0800816c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008172:	f000 ff9b 	bl	80090ac <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008176:	2300      	movs	r3, #0
 8008178:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800817a:	4b04      	ldr	r3, [pc, #16]	@ (800818c <xTaskGetTickCountFromISR+0x20>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008180:	683b      	ldr	r3, [r7, #0]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	20005374 	.word	0x20005374

08008190 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008196:	2300      	movs	r3, #0
 8008198:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800819a:	4b50      	ldr	r3, [pc, #320]	@ (80082dc <xTaskIncrementTick+0x14c>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	f040 808b 	bne.w	80082ba <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80081a4:	4b4e      	ldr	r3, [pc, #312]	@ (80082e0 <xTaskIncrementTick+0x150>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3301      	adds	r3, #1
 80081aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80081ac:	4a4c      	ldr	r2, [pc, #304]	@ (80082e0 <xTaskIncrementTick+0x150>)
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d123      	bne.n	8008200 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80081b8:	4b4a      	ldr	r3, [pc, #296]	@ (80082e4 <xTaskIncrementTick+0x154>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00d      	beq.n	80081de <xTaskIncrementTick+0x4e>
	__asm volatile
 80081c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c6:	b672      	cpsid	i
 80081c8:	f383 8811 	msr	BASEPRI, r3
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	f3bf 8f4f 	dsb	sy
 80081d4:	b662      	cpsie	i
 80081d6:	603b      	str	r3, [r7, #0]
}
 80081d8:	bf00      	nop
 80081da:	bf00      	nop
 80081dc:	e7fd      	b.n	80081da <xTaskIncrementTick+0x4a>
 80081de:	4b41      	ldr	r3, [pc, #260]	@ (80082e4 <xTaskIncrementTick+0x154>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	60fb      	str	r3, [r7, #12]
 80081e4:	4b40      	ldr	r3, [pc, #256]	@ (80082e8 <xTaskIncrementTick+0x158>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a3e      	ldr	r2, [pc, #248]	@ (80082e4 <xTaskIncrementTick+0x154>)
 80081ea:	6013      	str	r3, [r2, #0]
 80081ec:	4a3e      	ldr	r2, [pc, #248]	@ (80082e8 <xTaskIncrementTick+0x158>)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6013      	str	r3, [r2, #0]
 80081f2:	4b3e      	ldr	r3, [pc, #248]	@ (80082ec <xTaskIncrementTick+0x15c>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	3301      	adds	r3, #1
 80081f8:	4a3c      	ldr	r2, [pc, #240]	@ (80082ec <xTaskIncrementTick+0x15c>)
 80081fa:	6013      	str	r3, [r2, #0]
 80081fc:	f000 faf8 	bl	80087f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008200:	4b3b      	ldr	r3, [pc, #236]	@ (80082f0 <xTaskIncrementTick+0x160>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	429a      	cmp	r2, r3
 8008208:	d348      	bcc.n	800829c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800820a:	4b36      	ldr	r3, [pc, #216]	@ (80082e4 <xTaskIncrementTick+0x154>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d104      	bne.n	800821e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008214:	4b36      	ldr	r3, [pc, #216]	@ (80082f0 <xTaskIncrementTick+0x160>)
 8008216:	f04f 32ff 	mov.w	r2, #4294967295
 800821a:	601a      	str	r2, [r3, #0]
					break;
 800821c:	e03e      	b.n	800829c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800821e:	4b31      	ldr	r3, [pc, #196]	@ (80082e4 <xTaskIncrementTick+0x154>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	429a      	cmp	r2, r3
 8008234:	d203      	bcs.n	800823e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008236:	4a2e      	ldr	r2, [pc, #184]	@ (80082f0 <xTaskIncrementTick+0x160>)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800823c:	e02e      	b.n	800829c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	3304      	adds	r3, #4
 8008242:	4618      	mov	r0, r3
 8008244:	f7fe fb8f 	bl	8006966 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800824c:	2b00      	cmp	r3, #0
 800824e:	d004      	beq.n	800825a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	3318      	adds	r3, #24
 8008254:	4618      	mov	r0, r3
 8008256:	f7fe fb86 	bl	8006966 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800825e:	2201      	movs	r2, #1
 8008260:	409a      	lsls	r2, r3
 8008262:	4b24      	ldr	r3, [pc, #144]	@ (80082f4 <xTaskIncrementTick+0x164>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4313      	orrs	r3, r2
 8008268:	4a22      	ldr	r2, [pc, #136]	@ (80082f4 <xTaskIncrementTick+0x164>)
 800826a:	6013      	str	r3, [r2, #0]
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008270:	4613      	mov	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4413      	add	r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4a1f      	ldr	r2, [pc, #124]	@ (80082f8 <xTaskIncrementTick+0x168>)
 800827a:	441a      	add	r2, r3
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	3304      	adds	r3, #4
 8008280:	4619      	mov	r1, r3
 8008282:	4610      	mov	r0, r2
 8008284:	f7fe fb12 	bl	80068ac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800828c:	4b1b      	ldr	r3, [pc, #108]	@ (80082fc <xTaskIncrementTick+0x16c>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008292:	429a      	cmp	r2, r3
 8008294:	d3b9      	bcc.n	800820a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8008296:	2301      	movs	r3, #1
 8008298:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800829a:	e7b6      	b.n	800820a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800829c:	4b17      	ldr	r3, [pc, #92]	@ (80082fc <xTaskIncrementTick+0x16c>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082a2:	4915      	ldr	r1, [pc, #84]	@ (80082f8 <xTaskIncrementTick+0x168>)
 80082a4:	4613      	mov	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	440b      	add	r3, r1
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d907      	bls.n	80082c4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80082b4:	2301      	movs	r3, #1
 80082b6:	617b      	str	r3, [r7, #20]
 80082b8:	e004      	b.n	80082c4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80082ba:	4b11      	ldr	r3, [pc, #68]	@ (8008300 <xTaskIncrementTick+0x170>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	3301      	adds	r3, #1
 80082c0:	4a0f      	ldr	r2, [pc, #60]	@ (8008300 <xTaskIncrementTick+0x170>)
 80082c2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80082c4:	4b0f      	ldr	r3, [pc, #60]	@ (8008304 <xTaskIncrementTick+0x174>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d001      	beq.n	80082d0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80082cc:	2301      	movs	r3, #1
 80082ce:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80082d0:	697b      	ldr	r3, [r7, #20]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3718      	adds	r7, #24
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	20005398 	.word	0x20005398
 80082e0:	20005374 	.word	0x20005374
 80082e4:	20005328 	.word	0x20005328
 80082e8:	2000532c 	.word	0x2000532c
 80082ec:	20005388 	.word	0x20005388
 80082f0:	20005390 	.word	0x20005390
 80082f4:	20005378 	.word	0x20005378
 80082f8:	20005274 	.word	0x20005274
 80082fc:	20005270 	.word	0x20005270
 8008300:	20005380 	.word	0x20005380
 8008304:	20005384 	.word	0x20005384

08008308 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b086      	sub	sp, #24
 800830c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800830e:	4b32      	ldr	r3, [pc, #200]	@ (80083d8 <vTaskSwitchContext+0xd0>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d003      	beq.n	800831e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008316:	4b31      	ldr	r3, [pc, #196]	@ (80083dc <vTaskSwitchContext+0xd4>)
 8008318:	2201      	movs	r2, #1
 800831a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800831c:	e058      	b.n	80083d0 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 800831e:	4b2f      	ldr	r3, [pc, #188]	@ (80083dc <vTaskSwitchContext+0xd4>)
 8008320:	2200      	movs	r2, #0
 8008322:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008324:	4b2e      	ldr	r3, [pc, #184]	@ (80083e0 <vTaskSwitchContext+0xd8>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	4b2d      	ldr	r3, [pc, #180]	@ (80083e0 <vTaskSwitchContext+0xd8>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008330:	429a      	cmp	r2, r3
 8008332:	d808      	bhi.n	8008346 <vTaskSwitchContext+0x3e>
 8008334:	4b2a      	ldr	r3, [pc, #168]	@ (80083e0 <vTaskSwitchContext+0xd8>)
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	4b29      	ldr	r3, [pc, #164]	@ (80083e0 <vTaskSwitchContext+0xd8>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	3334      	adds	r3, #52	@ 0x34
 800833e:	4619      	mov	r1, r3
 8008340:	4610      	mov	r0, r2
 8008342:	f7f8 fb5f 	bl	8000a04 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008346:	4b27      	ldr	r3, [pc, #156]	@ (80083e4 <vTaskSwitchContext+0xdc>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	fab3 f383 	clz	r3, r3
 8008352:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008354:	7afb      	ldrb	r3, [r7, #11]
 8008356:	f1c3 031f 	rsb	r3, r3, #31
 800835a:	617b      	str	r3, [r7, #20]
 800835c:	4922      	ldr	r1, [pc, #136]	@ (80083e8 <vTaskSwitchContext+0xe0>)
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	4613      	mov	r3, r2
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	4413      	add	r3, r2
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	440b      	add	r3, r1
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10d      	bne.n	800838c <vTaskSwitchContext+0x84>
	__asm volatile
 8008370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008374:	b672      	cpsid	i
 8008376:	f383 8811 	msr	BASEPRI, r3
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	b662      	cpsie	i
 8008384:	607b      	str	r3, [r7, #4]
}
 8008386:	bf00      	nop
 8008388:	bf00      	nop
 800838a:	e7fd      	b.n	8008388 <vTaskSwitchContext+0x80>
 800838c:	697a      	ldr	r2, [r7, #20]
 800838e:	4613      	mov	r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4413      	add	r3, r2
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4a14      	ldr	r2, [pc, #80]	@ (80083e8 <vTaskSwitchContext+0xe0>)
 8008398:	4413      	add	r3, r2
 800839a:	613b      	str	r3, [r7, #16]
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	685a      	ldr	r2, [r3, #4]
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	605a      	str	r2, [r3, #4]
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	685a      	ldr	r2, [r3, #4]
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	3308      	adds	r3, #8
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d104      	bne.n	80083bc <vTaskSwitchContext+0xb4>
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	685a      	ldr	r2, [r3, #4]
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	605a      	str	r2, [r3, #4]
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	4a07      	ldr	r2, [pc, #28]	@ (80083e0 <vTaskSwitchContext+0xd8>)
 80083c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80083c6:	4b06      	ldr	r3, [pc, #24]	@ (80083e0 <vTaskSwitchContext+0xd8>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	334c      	adds	r3, #76	@ 0x4c
 80083cc:	4a07      	ldr	r2, [pc, #28]	@ (80083ec <vTaskSwitchContext+0xe4>)
 80083ce:	6013      	str	r3, [r2, #0]
}
 80083d0:	bf00      	nop
 80083d2:	3718      	adds	r7, #24
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	20005398 	.word	0x20005398
 80083dc:	20005384 	.word	0x20005384
 80083e0:	20005270 	.word	0x20005270
 80083e4:	20005378 	.word	0x20005378
 80083e8:	20005274 	.word	0x20005274
 80083ec:	20000168 	.word	0x20000168

080083f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10d      	bne.n	800841c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8008400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008404:	b672      	cpsid	i
 8008406:	f383 8811 	msr	BASEPRI, r3
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	b662      	cpsie	i
 8008414:	60fb      	str	r3, [r7, #12]
}
 8008416:	bf00      	nop
 8008418:	bf00      	nop
 800841a:	e7fd      	b.n	8008418 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800841c:	4b07      	ldr	r3, [pc, #28]	@ (800843c <vTaskPlaceOnEventList+0x4c>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	3318      	adds	r3, #24
 8008422:	4619      	mov	r1, r3
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f7fe fa65 	bl	80068f4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800842a:	2101      	movs	r1, #1
 800842c:	6838      	ldr	r0, [r7, #0]
 800842e:	f000 fbdd 	bl	8008bec <prvAddCurrentTaskToDelayedList>
}
 8008432:	bf00      	nop
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	20005270 	.word	0x20005270

08008440 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10d      	bne.n	8008472 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8008456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800845a:	b672      	cpsid	i
 800845c:	f383 8811 	msr	BASEPRI, r3
 8008460:	f3bf 8f6f 	isb	sy
 8008464:	f3bf 8f4f 	dsb	sy
 8008468:	b662      	cpsie	i
 800846a:	60fb      	str	r3, [r7, #12]
}
 800846c:	bf00      	nop
 800846e:	bf00      	nop
 8008470:	e7fd      	b.n	800846e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	3318      	adds	r3, #24
 8008476:	4618      	mov	r0, r3
 8008478:	f7fe fa75 	bl	8006966 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800847c:	4b1d      	ldr	r3, [pc, #116]	@ (80084f4 <xTaskRemoveFromEventList+0xb4>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d11c      	bne.n	80084be <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	3304      	adds	r3, #4
 8008488:	4618      	mov	r0, r3
 800848a:	f7fe fa6c 	bl	8006966 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008492:	2201      	movs	r2, #1
 8008494:	409a      	lsls	r2, r3
 8008496:	4b18      	ldr	r3, [pc, #96]	@ (80084f8 <xTaskRemoveFromEventList+0xb8>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4313      	orrs	r3, r2
 800849c:	4a16      	ldr	r2, [pc, #88]	@ (80084f8 <xTaskRemoveFromEventList+0xb8>)
 800849e:	6013      	str	r3, [r2, #0]
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084a4:	4613      	mov	r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	4413      	add	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4a13      	ldr	r2, [pc, #76]	@ (80084fc <xTaskRemoveFromEventList+0xbc>)
 80084ae:	441a      	add	r2, r3
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	3304      	adds	r3, #4
 80084b4:	4619      	mov	r1, r3
 80084b6:	4610      	mov	r0, r2
 80084b8:	f7fe f9f8 	bl	80068ac <vListInsertEnd>
 80084bc:	e005      	b.n	80084ca <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	3318      	adds	r3, #24
 80084c2:	4619      	mov	r1, r3
 80084c4:	480e      	ldr	r0, [pc, #56]	@ (8008500 <xTaskRemoveFromEventList+0xc0>)
 80084c6:	f7fe f9f1 	bl	80068ac <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008504 <xTaskRemoveFromEventList+0xc4>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d905      	bls.n	80084e4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80084d8:	2301      	movs	r3, #1
 80084da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80084dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008508 <xTaskRemoveFromEventList+0xc8>)
 80084de:	2201      	movs	r2, #1
 80084e0:	601a      	str	r2, [r3, #0]
 80084e2:	e001      	b.n	80084e8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80084e4:	2300      	movs	r3, #0
 80084e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80084e8:	697b      	ldr	r3, [r7, #20]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3718      	adds	r7, #24
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	20005398 	.word	0x20005398
 80084f8:	20005378 	.word	0x20005378
 80084fc:	20005274 	.word	0x20005274
 8008500:	20005330 	.word	0x20005330
 8008504:	20005270 	.word	0x20005270
 8008508:	20005384 	.word	0x20005384

0800850c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10d      	bne.n	8008536 <vTaskSetTimeOutState+0x2a>
	__asm volatile
 800851a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800851e:	b672      	cpsid	i
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	b662      	cpsie	i
 800852e:	60fb      	str	r3, [r7, #12]
}
 8008530:	bf00      	nop
 8008532:	bf00      	nop
 8008534:	e7fd      	b.n	8008532 <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 8008536:	f000 fcd1 	bl	8008edc <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800853a:	4b07      	ldr	r3, [pc, #28]	@ (8008558 <vTaskSetTimeOutState+0x4c>)
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008542:	4b06      	ldr	r3, [pc, #24]	@ (800855c <vTaskSetTimeOutState+0x50>)
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800854a:	f000 fcfd 	bl	8008f48 <vPortExitCritical>
}
 800854e:	bf00      	nop
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	20005388 	.word	0x20005388
 800855c:	20005374 	.word	0x20005374

08008560 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008568:	4b06      	ldr	r3, [pc, #24]	@ (8008584 <vTaskInternalSetTimeOutState+0x24>)
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008570:	4b05      	ldr	r3, [pc, #20]	@ (8008588 <vTaskInternalSetTimeOutState+0x28>)
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	605a      	str	r2, [r3, #4]
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr
 8008584:	20005388 	.word	0x20005388
 8008588:	20005374 	.word	0x20005374

0800858c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b088      	sub	sp, #32
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10d      	bne.n	80085b8 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800859c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a0:	b672      	cpsid	i
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	b662      	cpsie	i
 80085b0:	613b      	str	r3, [r7, #16]
}
 80085b2:	bf00      	nop
 80085b4:	bf00      	nop
 80085b6:	e7fd      	b.n	80085b4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10d      	bne.n	80085da <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80085be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c2:	b672      	cpsid	i
 80085c4:	f383 8811 	msr	BASEPRI, r3
 80085c8:	f3bf 8f6f 	isb	sy
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	b662      	cpsie	i
 80085d2:	60fb      	str	r3, [r7, #12]
}
 80085d4:	bf00      	nop
 80085d6:	bf00      	nop
 80085d8:	e7fd      	b.n	80085d6 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80085da:	f000 fc7f 	bl	8008edc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80085de:	4b1d      	ldr	r3, [pc, #116]	@ (8008654 <xTaskCheckForTimeOut+0xc8>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	69ba      	ldr	r2, [r7, #24]
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f6:	d102      	bne.n	80085fe <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80085f8:	2300      	movs	r3, #0
 80085fa:	61fb      	str	r3, [r7, #28]
 80085fc:	e023      	b.n	8008646 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	4b15      	ldr	r3, [pc, #84]	@ (8008658 <xTaskCheckForTimeOut+0xcc>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	429a      	cmp	r2, r3
 8008608:	d007      	beq.n	800861a <xTaskCheckForTimeOut+0x8e>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	69ba      	ldr	r2, [r7, #24]
 8008610:	429a      	cmp	r2, r3
 8008612:	d302      	bcc.n	800861a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008614:	2301      	movs	r3, #1
 8008616:	61fb      	str	r3, [r7, #28]
 8008618:	e015      	b.n	8008646 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	429a      	cmp	r2, r3
 8008622:	d20b      	bcs.n	800863c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	1ad2      	subs	r2, r2, r3
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f7ff ff95 	bl	8008560 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008636:	2300      	movs	r3, #0
 8008638:	61fb      	str	r3, [r7, #28]
 800863a:	e004      	b.n	8008646 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	2200      	movs	r2, #0
 8008640:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008642:	2301      	movs	r3, #1
 8008644:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008646:	f000 fc7f 	bl	8008f48 <vPortExitCritical>

	return xReturn;
 800864a:	69fb      	ldr	r3, [r7, #28]
}
 800864c:	4618      	mov	r0, r3
 800864e:	3720      	adds	r7, #32
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	20005374 	.word	0x20005374
 8008658:	20005388 	.word	0x20005388

0800865c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800865c:	b480      	push	{r7}
 800865e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008660:	4b03      	ldr	r3, [pc, #12]	@ (8008670 <vTaskMissedYield+0x14>)
 8008662:	2201      	movs	r2, #1
 8008664:	601a      	str	r2, [r3, #0]
}
 8008666:	bf00      	nop
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr
 8008670:	20005384 	.word	0x20005384

08008674 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800867c:	f000 f852 	bl	8008724 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008680:	4b06      	ldr	r3, [pc, #24]	@ (800869c <prvIdleTask+0x28>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2b01      	cmp	r3, #1
 8008686:	d9f9      	bls.n	800867c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008688:	4b05      	ldr	r3, [pc, #20]	@ (80086a0 <prvIdleTask+0x2c>)
 800868a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800868e:	601a      	str	r2, [r3, #0]
 8008690:	f3bf 8f4f 	dsb	sy
 8008694:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008698:	e7f0      	b.n	800867c <prvIdleTask+0x8>
 800869a:	bf00      	nop
 800869c:	20005274 	.word	0x20005274
 80086a0:	e000ed04 	.word	0xe000ed04

080086a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086aa:	2300      	movs	r3, #0
 80086ac:	607b      	str	r3, [r7, #4]
 80086ae:	e00c      	b.n	80086ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	4613      	mov	r3, r2
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	4413      	add	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4a12      	ldr	r2, [pc, #72]	@ (8008704 <prvInitialiseTaskLists+0x60>)
 80086bc:	4413      	add	r3, r2
 80086be:	4618      	mov	r0, r3
 80086c0:	f7fe f8c7 	bl	8006852 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	3301      	adds	r3, #1
 80086c8:	607b      	str	r3, [r7, #4]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2b06      	cmp	r3, #6
 80086ce:	d9ef      	bls.n	80086b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80086d0:	480d      	ldr	r0, [pc, #52]	@ (8008708 <prvInitialiseTaskLists+0x64>)
 80086d2:	f7fe f8be 	bl	8006852 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80086d6:	480d      	ldr	r0, [pc, #52]	@ (800870c <prvInitialiseTaskLists+0x68>)
 80086d8:	f7fe f8bb 	bl	8006852 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80086dc:	480c      	ldr	r0, [pc, #48]	@ (8008710 <prvInitialiseTaskLists+0x6c>)
 80086de:	f7fe f8b8 	bl	8006852 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80086e2:	480c      	ldr	r0, [pc, #48]	@ (8008714 <prvInitialiseTaskLists+0x70>)
 80086e4:	f7fe f8b5 	bl	8006852 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80086e8:	480b      	ldr	r0, [pc, #44]	@ (8008718 <prvInitialiseTaskLists+0x74>)
 80086ea:	f7fe f8b2 	bl	8006852 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80086ee:	4b0b      	ldr	r3, [pc, #44]	@ (800871c <prvInitialiseTaskLists+0x78>)
 80086f0:	4a05      	ldr	r2, [pc, #20]	@ (8008708 <prvInitialiseTaskLists+0x64>)
 80086f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80086f4:	4b0a      	ldr	r3, [pc, #40]	@ (8008720 <prvInitialiseTaskLists+0x7c>)
 80086f6:	4a05      	ldr	r2, [pc, #20]	@ (800870c <prvInitialiseTaskLists+0x68>)
 80086f8:	601a      	str	r2, [r3, #0]
}
 80086fa:	bf00      	nop
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	20005274 	.word	0x20005274
 8008708:	20005300 	.word	0x20005300
 800870c:	20005314 	.word	0x20005314
 8008710:	20005330 	.word	0x20005330
 8008714:	20005344 	.word	0x20005344
 8008718:	2000535c 	.word	0x2000535c
 800871c:	20005328 	.word	0x20005328
 8008720:	2000532c 	.word	0x2000532c

08008724 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800872a:	e019      	b.n	8008760 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800872c:	f000 fbd6 	bl	8008edc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008730:	4b10      	ldr	r3, [pc, #64]	@ (8008774 <prvCheckTasksWaitingTermination+0x50>)
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	3304      	adds	r3, #4
 800873c:	4618      	mov	r0, r3
 800873e:	f7fe f912 	bl	8006966 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008742:	4b0d      	ldr	r3, [pc, #52]	@ (8008778 <prvCheckTasksWaitingTermination+0x54>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	3b01      	subs	r3, #1
 8008748:	4a0b      	ldr	r2, [pc, #44]	@ (8008778 <prvCheckTasksWaitingTermination+0x54>)
 800874a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800874c:	4b0b      	ldr	r3, [pc, #44]	@ (800877c <prvCheckTasksWaitingTermination+0x58>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	3b01      	subs	r3, #1
 8008752:	4a0a      	ldr	r2, [pc, #40]	@ (800877c <prvCheckTasksWaitingTermination+0x58>)
 8008754:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008756:	f000 fbf7 	bl	8008f48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f810 	bl	8008780 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008760:	4b06      	ldr	r3, [pc, #24]	@ (800877c <prvCheckTasksWaitingTermination+0x58>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1e1      	bne.n	800872c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008768:	bf00      	nop
 800876a:	bf00      	nop
 800876c:	3708      	adds	r7, #8
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	20005344 	.word	0x20005344
 8008778:	20005370 	.word	0x20005370
 800877c:	20005358 	.word	0x20005358

08008780 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	334c      	adds	r3, #76	@ 0x4c
 800878c:	4618      	mov	r0, r3
 800878e:	f01d f86f 	bl	8025870 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008798:	2b00      	cmp	r3, #0
 800879a:	d108      	bne.n	80087ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087a0:	4618      	mov	r0, r3
 80087a2:	f000 fd97 	bl	80092d4 <vPortFree>
				vPortFree( pxTCB );
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fd94 	bl	80092d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80087ac:	e01b      	b.n	80087e6 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d103      	bne.n	80087c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 fd8b 	bl	80092d4 <vPortFree>
	}
 80087be:	e012      	b.n	80087e6 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d00d      	beq.n	80087e6 <prvDeleteTCB+0x66>
	__asm volatile
 80087ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ce:	b672      	cpsid	i
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	b662      	cpsie	i
 80087de:	60fb      	str	r3, [r7, #12]
}
 80087e0:	bf00      	nop
 80087e2:	bf00      	nop
 80087e4:	e7fd      	b.n	80087e2 <prvDeleteTCB+0x62>
	}
 80087e6:	bf00      	nop
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
	...

080087f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008828 <prvResetNextTaskUnblockTime+0x38>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d104      	bne.n	800880a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008800:	4b0a      	ldr	r3, [pc, #40]	@ (800882c <prvResetNextTaskUnblockTime+0x3c>)
 8008802:	f04f 32ff 	mov.w	r2, #4294967295
 8008806:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008808:	e008      	b.n	800881c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800880a:	4b07      	ldr	r3, [pc, #28]	@ (8008828 <prvResetNextTaskUnblockTime+0x38>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	4a04      	ldr	r2, [pc, #16]	@ (800882c <prvResetNextTaskUnblockTime+0x3c>)
 800881a:	6013      	str	r3, [r2, #0]
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr
 8008828:	20005328 	.word	0x20005328
 800882c:	20005390 	.word	0x20005390

08008830 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008836:	4b0b      	ldr	r3, [pc, #44]	@ (8008864 <xTaskGetSchedulerState+0x34>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d102      	bne.n	8008844 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800883e:	2301      	movs	r3, #1
 8008840:	607b      	str	r3, [r7, #4]
 8008842:	e008      	b.n	8008856 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008844:	4b08      	ldr	r3, [pc, #32]	@ (8008868 <xTaskGetSchedulerState+0x38>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d102      	bne.n	8008852 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800884c:	2302      	movs	r3, #2
 800884e:	607b      	str	r3, [r7, #4]
 8008850:	e001      	b.n	8008856 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008852:	2300      	movs	r3, #0
 8008854:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008856:	687b      	ldr	r3, [r7, #4]
	}
 8008858:	4618      	mov	r0, r3
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr
 8008864:	2000537c 	.word	0x2000537c
 8008868:	20005398 	.word	0x20005398

0800886c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008878:	2300      	movs	r3, #0
 800887a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d069      	beq.n	8008956 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008886:	4b36      	ldr	r3, [pc, #216]	@ (8008960 <xTaskPriorityInherit+0xf4>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800888c:	429a      	cmp	r2, r3
 800888e:	d259      	bcs.n	8008944 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	699b      	ldr	r3, [r3, #24]
 8008894:	2b00      	cmp	r3, #0
 8008896:	db06      	blt.n	80088a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008898:	4b31      	ldr	r3, [pc, #196]	@ (8008960 <xTaskPriorityInherit+0xf4>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800889e:	f1c3 0207 	rsb	r2, r3, #7
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	6959      	ldr	r1, [r3, #20]
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ae:	4613      	mov	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	4a2b      	ldr	r2, [pc, #172]	@ (8008964 <xTaskPriorityInherit+0xf8>)
 80088b8:	4413      	add	r3, r2
 80088ba:	4299      	cmp	r1, r3
 80088bc:	d13a      	bne.n	8008934 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	3304      	adds	r3, #4
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7fe f84f 	bl	8006966 <uxListRemove>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d115      	bne.n	80088fa <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088d2:	4924      	ldr	r1, [pc, #144]	@ (8008964 <xTaskPriorityInherit+0xf8>)
 80088d4:	4613      	mov	r3, r2
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	4413      	add	r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	440b      	add	r3, r1
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d10a      	bne.n	80088fa <xTaskPriorityInherit+0x8e>
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e8:	2201      	movs	r2, #1
 80088ea:	fa02 f303 	lsl.w	r3, r2, r3
 80088ee:	43da      	mvns	r2, r3
 80088f0:	4b1d      	ldr	r3, [pc, #116]	@ (8008968 <xTaskPriorityInherit+0xfc>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4013      	ands	r3, r2
 80088f6:	4a1c      	ldr	r2, [pc, #112]	@ (8008968 <xTaskPriorityInherit+0xfc>)
 80088f8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80088fa:	4b19      	ldr	r3, [pc, #100]	@ (8008960 <xTaskPriorityInherit+0xf4>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008908:	2201      	movs	r2, #1
 800890a:	409a      	lsls	r2, r3
 800890c:	4b16      	ldr	r3, [pc, #88]	@ (8008968 <xTaskPriorityInherit+0xfc>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4313      	orrs	r3, r2
 8008912:	4a15      	ldr	r2, [pc, #84]	@ (8008968 <xTaskPriorityInherit+0xfc>)
 8008914:	6013      	str	r3, [r2, #0]
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800891a:	4613      	mov	r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	4413      	add	r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	4a10      	ldr	r2, [pc, #64]	@ (8008964 <xTaskPriorityInherit+0xf8>)
 8008924:	441a      	add	r2, r3
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	3304      	adds	r3, #4
 800892a:	4619      	mov	r1, r3
 800892c:	4610      	mov	r0, r2
 800892e:	f7fd ffbd 	bl	80068ac <vListInsertEnd>
 8008932:	e004      	b.n	800893e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008934:	4b0a      	ldr	r3, [pc, #40]	@ (8008960 <xTaskPriorityInherit+0xf4>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800893e:	2301      	movs	r3, #1
 8008940:	60fb      	str	r3, [r7, #12]
 8008942:	e008      	b.n	8008956 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008948:	4b05      	ldr	r3, [pc, #20]	@ (8008960 <xTaskPriorityInherit+0xf4>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800894e:	429a      	cmp	r2, r3
 8008950:	d201      	bcs.n	8008956 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008952:	2301      	movs	r3, #1
 8008954:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008956:	68fb      	ldr	r3, [r7, #12]
	}
 8008958:	4618      	mov	r0, r3
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	20005270 	.word	0x20005270
 8008964:	20005274 	.word	0x20005274
 8008968:	20005378 	.word	0x20005378

0800896c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800896c:	b580      	push	{r7, lr}
 800896e:	b086      	sub	sp, #24
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008978:	2300      	movs	r3, #0
 800897a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d074      	beq.n	8008a6c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008982:	4b3d      	ldr	r3, [pc, #244]	@ (8008a78 <xTaskPriorityDisinherit+0x10c>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	693a      	ldr	r2, [r7, #16]
 8008988:	429a      	cmp	r2, r3
 800898a:	d00d      	beq.n	80089a8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800898c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008990:	b672      	cpsid	i
 8008992:	f383 8811 	msr	BASEPRI, r3
 8008996:	f3bf 8f6f 	isb	sy
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	b662      	cpsie	i
 80089a0:	60fb      	str	r3, [r7, #12]
}
 80089a2:	bf00      	nop
 80089a4:	bf00      	nop
 80089a6:	e7fd      	b.n	80089a4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d10d      	bne.n	80089cc <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80089b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b4:	b672      	cpsid	i
 80089b6:	f383 8811 	msr	BASEPRI, r3
 80089ba:	f3bf 8f6f 	isb	sy
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	b662      	cpsie	i
 80089c4:	60bb      	str	r3, [r7, #8]
}
 80089c6:	bf00      	nop
 80089c8:	bf00      	nop
 80089ca:	e7fd      	b.n	80089c8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089d0:	1e5a      	subs	r2, r3, #1
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089de:	429a      	cmp	r2, r3
 80089e0:	d044      	beq.n	8008a6c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d140      	bne.n	8008a6c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	3304      	adds	r3, #4
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fd ffb9 	bl	8006966 <uxListRemove>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d115      	bne.n	8008a26 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089fe:	491f      	ldr	r1, [pc, #124]	@ (8008a7c <xTaskPriorityDisinherit+0x110>)
 8008a00:	4613      	mov	r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	4413      	add	r3, r2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	440b      	add	r3, r1
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d10a      	bne.n	8008a26 <xTaskPriorityDisinherit+0xba>
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a14:	2201      	movs	r2, #1
 8008a16:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1a:	43da      	mvns	r2, r3
 8008a1c:	4b18      	ldr	r3, [pc, #96]	@ (8008a80 <xTaskPriorityDisinherit+0x114>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4013      	ands	r3, r2
 8008a22:	4a17      	ldr	r2, [pc, #92]	@ (8008a80 <xTaskPriorityDisinherit+0x114>)
 8008a24:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a32:	f1c3 0207 	rsb	r2, r3, #7
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a3e:	2201      	movs	r2, #1
 8008a40:	409a      	lsls	r2, r3
 8008a42:	4b0f      	ldr	r3, [pc, #60]	@ (8008a80 <xTaskPriorityDisinherit+0x114>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	4a0d      	ldr	r2, [pc, #52]	@ (8008a80 <xTaskPriorityDisinherit+0x114>)
 8008a4a:	6013      	str	r3, [r2, #0]
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a50:	4613      	mov	r3, r2
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	4413      	add	r3, r2
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	4a08      	ldr	r2, [pc, #32]	@ (8008a7c <xTaskPriorityDisinherit+0x110>)
 8008a5a:	441a      	add	r2, r3
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	3304      	adds	r3, #4
 8008a60:	4619      	mov	r1, r3
 8008a62:	4610      	mov	r0, r2
 8008a64:	f7fd ff22 	bl	80068ac <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a6c:	697b      	ldr	r3, [r7, #20]
	}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3718      	adds	r7, #24
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	20005270 	.word	0x20005270
 8008a7c:	20005274 	.word	0x20005274
 8008a80:	20005378 	.word	0x20005378

08008a84 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b088      	sub	sp, #32
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008a92:	2301      	movs	r3, #1
 8008a94:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 8089 	beq.w	8008bb0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10d      	bne.n	8008ac2 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8008aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aaa:	b672      	cpsid	i
 8008aac:	f383 8811 	msr	BASEPRI, r3
 8008ab0:	f3bf 8f6f 	isb	sy
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	b662      	cpsie	i
 8008aba:	60fb      	str	r3, [r7, #12]
}
 8008abc:	bf00      	nop
 8008abe:	bf00      	nop
 8008ac0:	e7fd      	b.n	8008abe <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ac6:	683a      	ldr	r2, [r7, #0]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d902      	bls.n	8008ad2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	61fb      	str	r3, [r7, #28]
 8008ad0:	e002      	b.n	8008ad8 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ad6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008adc:	69fa      	ldr	r2, [r7, #28]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d066      	beq.n	8008bb0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ae6:	697a      	ldr	r2, [r7, #20]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d161      	bne.n	8008bb0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008aec:	4b32      	ldr	r3, [pc, #200]	@ (8008bb8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	69ba      	ldr	r2, [r7, #24]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d10d      	bne.n	8008b12 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8008af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008afa:	b672      	cpsid	i
 8008afc:	f383 8811 	msr	BASEPRI, r3
 8008b00:	f3bf 8f6f 	isb	sy
 8008b04:	f3bf 8f4f 	dsb	sy
 8008b08:	b662      	cpsie	i
 8008b0a:	60bb      	str	r3, [r7, #8]
}
 8008b0c:	bf00      	nop
 8008b0e:	bf00      	nop
 8008b10:	e7fd      	b.n	8008b0e <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b16:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	69fa      	ldr	r2, [r7, #28]
 8008b1c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	699b      	ldr	r3, [r3, #24]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	db04      	blt.n	8008b30 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	f1c3 0207 	rsb	r2, r3, #7
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	6959      	ldr	r1, [r3, #20]
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	4613      	mov	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	4a1f      	ldr	r2, [pc, #124]	@ (8008bbc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008b40:	4413      	add	r3, r2
 8008b42:	4299      	cmp	r1, r3
 8008b44:	d134      	bne.n	8008bb0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	3304      	adds	r3, #4
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fd ff0b 	bl	8006966 <uxListRemove>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d115      	bne.n	8008b82 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b5a:	4918      	ldr	r1, [pc, #96]	@ (8008bbc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	4413      	add	r3, r2
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	440b      	add	r3, r1
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10a      	bne.n	8008b82 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b70:	2201      	movs	r2, #1
 8008b72:	fa02 f303 	lsl.w	r3, r2, r3
 8008b76:	43da      	mvns	r2, r3
 8008b78:	4b11      	ldr	r3, [pc, #68]	@ (8008bc0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	4a10      	ldr	r2, [pc, #64]	@ (8008bc0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008b80:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b86:	2201      	movs	r2, #1
 8008b88:	409a      	lsls	r2, r3
 8008b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8008bc0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	4a0b      	ldr	r2, [pc, #44]	@ (8008bc0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008b92:	6013      	str	r3, [r2, #0]
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b98:	4613      	mov	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	4a06      	ldr	r2, [pc, #24]	@ (8008bbc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008ba2:	441a      	add	r2, r3
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	3304      	adds	r3, #4
 8008ba8:	4619      	mov	r1, r3
 8008baa:	4610      	mov	r0, r2
 8008bac:	f7fd fe7e 	bl	80068ac <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008bb0:	bf00      	nop
 8008bb2:	3720      	adds	r7, #32
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	20005270 	.word	0x20005270
 8008bbc:	20005274 	.word	0x20005274
 8008bc0:	20005378 	.word	0x20005378

08008bc4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008bc4:	b480      	push	{r7}
 8008bc6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008bc8:	4b07      	ldr	r3, [pc, #28]	@ (8008be8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d004      	beq.n	8008bda <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008bd0:	4b05      	ldr	r3, [pc, #20]	@ (8008be8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008bd6:	3201      	adds	r2, #1
 8008bd8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8008bda:	4b03      	ldr	r3, [pc, #12]	@ (8008be8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
	}
 8008bde:	4618      	mov	r0, r3
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr
 8008be8:	20005270 	.word	0x20005270

08008bec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008bf6:	4b29      	ldr	r3, [pc, #164]	@ (8008c9c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bfc:	4b28      	ldr	r3, [pc, #160]	@ (8008ca0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	3304      	adds	r3, #4
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7fd feaf 	bl	8006966 <uxListRemove>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d10b      	bne.n	8008c26 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008c0e:	4b24      	ldr	r3, [pc, #144]	@ (8008ca0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c14:	2201      	movs	r2, #1
 8008c16:	fa02 f303 	lsl.w	r3, r2, r3
 8008c1a:	43da      	mvns	r2, r3
 8008c1c:	4b21      	ldr	r3, [pc, #132]	@ (8008ca4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4013      	ands	r3, r2
 8008c22:	4a20      	ldr	r2, [pc, #128]	@ (8008ca4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008c24:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c2c:	d10a      	bne.n	8008c44 <prvAddCurrentTaskToDelayedList+0x58>
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d007      	beq.n	8008c44 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c34:	4b1a      	ldr	r3, [pc, #104]	@ (8008ca0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	3304      	adds	r3, #4
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	481a      	ldr	r0, [pc, #104]	@ (8008ca8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008c3e:	f7fd fe35 	bl	80068ac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008c42:	e026      	b.n	8008c92 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4413      	add	r3, r2
 8008c4a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c4c:	4b14      	ldr	r3, [pc, #80]	@ (8008ca0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	68ba      	ldr	r2, [r7, #8]
 8008c52:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d209      	bcs.n	8008c70 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c5c:	4b13      	ldr	r3, [pc, #76]	@ (8008cac <prvAddCurrentTaskToDelayedList+0xc0>)
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	4b0f      	ldr	r3, [pc, #60]	@ (8008ca0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	3304      	adds	r3, #4
 8008c66:	4619      	mov	r1, r3
 8008c68:	4610      	mov	r0, r2
 8008c6a:	f7fd fe43 	bl	80068f4 <vListInsert>
}
 8008c6e:	e010      	b.n	8008c92 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c70:	4b0f      	ldr	r3, [pc, #60]	@ (8008cb0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	4b0a      	ldr	r3, [pc, #40]	@ (8008ca0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	3304      	adds	r3, #4
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	4610      	mov	r0, r2
 8008c7e:	f7fd fe39 	bl	80068f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008c82:	4b0c      	ldr	r3, [pc, #48]	@ (8008cb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68ba      	ldr	r2, [r7, #8]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d202      	bcs.n	8008c92 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008c8c:	4a09      	ldr	r2, [pc, #36]	@ (8008cb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	6013      	str	r3, [r2, #0]
}
 8008c92:	bf00      	nop
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	20005374 	.word	0x20005374
 8008ca0:	20005270 	.word	0x20005270
 8008ca4:	20005378 	.word	0x20005378
 8008ca8:	2000535c 	.word	0x2000535c
 8008cac:	2000532c 	.word	0x2000532c
 8008cb0:	20005328 	.word	0x20005328
 8008cb4:	20005390 	.word	0x20005390

08008cb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	3b04      	subs	r3, #4
 8008cc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008cd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	3b04      	subs	r3, #4
 8008cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	f023 0201 	bic.w	r2, r3, #1
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	3b04      	subs	r3, #4
 8008ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ce8:	4a0c      	ldr	r2, [pc, #48]	@ (8008d1c <pxPortInitialiseStack+0x64>)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	3b14      	subs	r3, #20
 8008cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	3b04      	subs	r3, #4
 8008cfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f06f 0202 	mvn.w	r2, #2
 8008d06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	3b20      	subs	r3, #32
 8008d0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3714      	adds	r7, #20
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr
 8008d1c:	08008d21 	.word	0x08008d21

08008d20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d20:	b480      	push	{r7}
 8008d22:	b085      	sub	sp, #20
 8008d24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d26:	2300      	movs	r3, #0
 8008d28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d2a:	4b15      	ldr	r3, [pc, #84]	@ (8008d80 <prvTaskExitError+0x60>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d32:	d00d      	beq.n	8008d50 <prvTaskExitError+0x30>
	__asm volatile
 8008d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d38:	b672      	cpsid	i
 8008d3a:	f383 8811 	msr	BASEPRI, r3
 8008d3e:	f3bf 8f6f 	isb	sy
 8008d42:	f3bf 8f4f 	dsb	sy
 8008d46:	b662      	cpsie	i
 8008d48:	60fb      	str	r3, [r7, #12]
}
 8008d4a:	bf00      	nop
 8008d4c:	bf00      	nop
 8008d4e:	e7fd      	b.n	8008d4c <prvTaskExitError+0x2c>
	__asm volatile
 8008d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d54:	b672      	cpsid	i
 8008d56:	f383 8811 	msr	BASEPRI, r3
 8008d5a:	f3bf 8f6f 	isb	sy
 8008d5e:	f3bf 8f4f 	dsb	sy
 8008d62:	b662      	cpsie	i
 8008d64:	60bb      	str	r3, [r7, #8]
}
 8008d66:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d68:	bf00      	nop
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d0fc      	beq.n	8008d6a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d70:	bf00      	nop
 8008d72:	bf00      	nop
 8008d74:	3714      	adds	r7, #20
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	20000028 	.word	0x20000028
	...

08008d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d90:	4b07      	ldr	r3, [pc, #28]	@ (8008db0 <pxCurrentTCBConst2>)
 8008d92:	6819      	ldr	r1, [r3, #0]
 8008d94:	6808      	ldr	r0, [r1, #0]
 8008d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d9a:	f380 8809 	msr	PSP, r0
 8008d9e:	f3bf 8f6f 	isb	sy
 8008da2:	f04f 0000 	mov.w	r0, #0
 8008da6:	f380 8811 	msr	BASEPRI, r0
 8008daa:	4770      	bx	lr
 8008dac:	f3af 8000 	nop.w

08008db0 <pxCurrentTCBConst2>:
 8008db0:	20005270 	.word	0x20005270
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008db4:	bf00      	nop
 8008db6:	bf00      	nop

08008db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008db8:	4808      	ldr	r0, [pc, #32]	@ (8008ddc <prvPortStartFirstTask+0x24>)
 8008dba:	6800      	ldr	r0, [r0, #0]
 8008dbc:	6800      	ldr	r0, [r0, #0]
 8008dbe:	f380 8808 	msr	MSP, r0
 8008dc2:	f04f 0000 	mov.w	r0, #0
 8008dc6:	f380 8814 	msr	CONTROL, r0
 8008dca:	b662      	cpsie	i
 8008dcc:	b661      	cpsie	f
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	f3bf 8f6f 	isb	sy
 8008dd6:	df00      	svc	0
 8008dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008dda:	bf00      	nop
 8008ddc:	e000ed08 	.word	0xe000ed08

08008de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008de6:	4b37      	ldr	r3, [pc, #220]	@ (8008ec4 <xPortStartScheduler+0xe4>)
 8008de8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	22ff      	movs	r2, #255	@ 0xff
 8008df6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e00:	78fb      	ldrb	r3, [r7, #3]
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008e08:	b2da      	uxtb	r2, r3
 8008e0a:	4b2f      	ldr	r3, [pc, #188]	@ (8008ec8 <xPortStartScheduler+0xe8>)
 8008e0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e0e:	4b2f      	ldr	r3, [pc, #188]	@ (8008ecc <xPortStartScheduler+0xec>)
 8008e10:	2207      	movs	r2, #7
 8008e12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e14:	e009      	b.n	8008e2a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008e16:	4b2d      	ldr	r3, [pc, #180]	@ (8008ecc <xPortStartScheduler+0xec>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	4a2b      	ldr	r2, [pc, #172]	@ (8008ecc <xPortStartScheduler+0xec>)
 8008e1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e20:	78fb      	ldrb	r3, [r7, #3]
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	005b      	lsls	r3, r3, #1
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e2a:	78fb      	ldrb	r3, [r7, #3]
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e32:	2b80      	cmp	r3, #128	@ 0x80
 8008e34:	d0ef      	beq.n	8008e16 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e36:	4b25      	ldr	r3, [pc, #148]	@ (8008ecc <xPortStartScheduler+0xec>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f1c3 0307 	rsb	r3, r3, #7
 8008e3e:	2b04      	cmp	r3, #4
 8008e40:	d00d      	beq.n	8008e5e <xPortStartScheduler+0x7e>
	__asm volatile
 8008e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e46:	b672      	cpsid	i
 8008e48:	f383 8811 	msr	BASEPRI, r3
 8008e4c:	f3bf 8f6f 	isb	sy
 8008e50:	f3bf 8f4f 	dsb	sy
 8008e54:	b662      	cpsie	i
 8008e56:	60bb      	str	r3, [r7, #8]
}
 8008e58:	bf00      	nop
 8008e5a:	bf00      	nop
 8008e5c:	e7fd      	b.n	8008e5a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8008ecc <xPortStartScheduler+0xec>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	021b      	lsls	r3, r3, #8
 8008e64:	4a19      	ldr	r2, [pc, #100]	@ (8008ecc <xPortStartScheduler+0xec>)
 8008e66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e68:	4b18      	ldr	r3, [pc, #96]	@ (8008ecc <xPortStartScheduler+0xec>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008e70:	4a16      	ldr	r2, [pc, #88]	@ (8008ecc <xPortStartScheduler+0xec>)
 8008e72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	b2da      	uxtb	r2, r3
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e7c:	4b14      	ldr	r3, [pc, #80]	@ (8008ed0 <xPortStartScheduler+0xf0>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a13      	ldr	r2, [pc, #76]	@ (8008ed0 <xPortStartScheduler+0xf0>)
 8008e82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008e86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e88:	4b11      	ldr	r3, [pc, #68]	@ (8008ed0 <xPortStartScheduler+0xf0>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a10      	ldr	r2, [pc, #64]	@ (8008ed0 <xPortStartScheduler+0xf0>)
 8008e8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008e92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008e94:	f000 f8dc 	bl	8009050 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008e98:	4b0e      	ldr	r3, [pc, #56]	@ (8008ed4 <xPortStartScheduler+0xf4>)
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008e9e:	f000 f8fb 	bl	8009098 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8008ed8 <xPortStartScheduler+0xf8>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a0c      	ldr	r2, [pc, #48]	@ (8008ed8 <xPortStartScheduler+0xf8>)
 8008ea8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008eac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008eae:	f7ff ff83 	bl	8008db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008eb2:	f7ff fa29 	bl	8008308 <vTaskSwitchContext>
	prvTaskExitError();
 8008eb6:	f7ff ff33 	bl	8008d20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	e000e400 	.word	0xe000e400
 8008ec8:	2000539c 	.word	0x2000539c
 8008ecc:	200053a0 	.word	0x200053a0
 8008ed0:	e000ed20 	.word	0xe000ed20
 8008ed4:	20000028 	.word	0x20000028
 8008ed8:	e000ef34 	.word	0xe000ef34

08008edc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
	__asm volatile
 8008ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee6:	b672      	cpsid	i
 8008ee8:	f383 8811 	msr	BASEPRI, r3
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	b662      	cpsie	i
 8008ef6:	607b      	str	r3, [r7, #4]
}
 8008ef8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008efa:	4b11      	ldr	r3, [pc, #68]	@ (8008f40 <vPortEnterCritical+0x64>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	3301      	adds	r3, #1
 8008f00:	4a0f      	ldr	r2, [pc, #60]	@ (8008f40 <vPortEnterCritical+0x64>)
 8008f02:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008f04:	4b0e      	ldr	r3, [pc, #56]	@ (8008f40 <vPortEnterCritical+0x64>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d112      	bne.n	8008f32 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8008f44 <vPortEnterCritical+0x68>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00d      	beq.n	8008f32 <vPortEnterCritical+0x56>
	__asm volatile
 8008f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f1a:	b672      	cpsid	i
 8008f1c:	f383 8811 	msr	BASEPRI, r3
 8008f20:	f3bf 8f6f 	isb	sy
 8008f24:	f3bf 8f4f 	dsb	sy
 8008f28:	b662      	cpsie	i
 8008f2a:	603b      	str	r3, [r7, #0]
}
 8008f2c:	bf00      	nop
 8008f2e:	bf00      	nop
 8008f30:	e7fd      	b.n	8008f2e <vPortEnterCritical+0x52>
	}
}
 8008f32:	bf00      	nop
 8008f34:	370c      	adds	r7, #12
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	20000028 	.word	0x20000028
 8008f44:	e000ed04 	.word	0xe000ed04

08008f48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f4e:	4b13      	ldr	r3, [pc, #76]	@ (8008f9c <vPortExitCritical+0x54>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d10d      	bne.n	8008f72 <vPortExitCritical+0x2a>
	__asm volatile
 8008f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f5a:	b672      	cpsid	i
 8008f5c:	f383 8811 	msr	BASEPRI, r3
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	b662      	cpsie	i
 8008f6a:	607b      	str	r3, [r7, #4]
}
 8008f6c:	bf00      	nop
 8008f6e:	bf00      	nop
 8008f70:	e7fd      	b.n	8008f6e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008f72:	4b0a      	ldr	r3, [pc, #40]	@ (8008f9c <vPortExitCritical+0x54>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	3b01      	subs	r3, #1
 8008f78:	4a08      	ldr	r2, [pc, #32]	@ (8008f9c <vPortExitCritical+0x54>)
 8008f7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008f7c:	4b07      	ldr	r3, [pc, #28]	@ (8008f9c <vPortExitCritical+0x54>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d105      	bne.n	8008f90 <vPortExitCritical+0x48>
 8008f84:	2300      	movs	r3, #0
 8008f86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	f383 8811 	msr	BASEPRI, r3
}
 8008f8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008f90:	bf00      	nop
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr
 8008f9c:	20000028 	.word	0x20000028

08008fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008fa0:	f3ef 8009 	mrs	r0, PSP
 8008fa4:	f3bf 8f6f 	isb	sy
 8008fa8:	4b15      	ldr	r3, [pc, #84]	@ (8009000 <pxCurrentTCBConst>)
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	f01e 0f10 	tst.w	lr, #16
 8008fb0:	bf08      	it	eq
 8008fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fba:	6010      	str	r0, [r2, #0]
 8008fbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008fc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008fc4:	b672      	cpsid	i
 8008fc6:	f380 8811 	msr	BASEPRI, r0
 8008fca:	f3bf 8f4f 	dsb	sy
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	b662      	cpsie	i
 8008fd4:	f7ff f998 	bl	8008308 <vTaskSwitchContext>
 8008fd8:	f04f 0000 	mov.w	r0, #0
 8008fdc:	f380 8811 	msr	BASEPRI, r0
 8008fe0:	bc09      	pop	{r0, r3}
 8008fe2:	6819      	ldr	r1, [r3, #0]
 8008fe4:	6808      	ldr	r0, [r1, #0]
 8008fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fea:	f01e 0f10 	tst.w	lr, #16
 8008fee:	bf08      	it	eq
 8008ff0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ff4:	f380 8809 	msr	PSP, r0
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop

08009000 <pxCurrentTCBConst>:
 8009000:	20005270 	.word	0x20005270
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009004:	bf00      	nop
 8009006:	bf00      	nop

08009008 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
	__asm volatile
 800900e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009012:	b672      	cpsid	i
 8009014:	f383 8811 	msr	BASEPRI, r3
 8009018:	f3bf 8f6f 	isb	sy
 800901c:	f3bf 8f4f 	dsb	sy
 8009020:	b662      	cpsie	i
 8009022:	607b      	str	r3, [r7, #4]
}
 8009024:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009026:	f7ff f8b3 	bl	8008190 <xTaskIncrementTick>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d003      	beq.n	8009038 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009030:	4b06      	ldr	r3, [pc, #24]	@ (800904c <SysTick_Handler+0x44>)
 8009032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009036:	601a      	str	r2, [r3, #0]
 8009038:	2300      	movs	r3, #0
 800903a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	f383 8811 	msr	BASEPRI, r3
}
 8009042:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009044:	bf00      	nop
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	e000ed04 	.word	0xe000ed04

08009050 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009050:	b480      	push	{r7}
 8009052:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009054:	4b0b      	ldr	r3, [pc, #44]	@ (8009084 <vPortSetupTimerInterrupt+0x34>)
 8009056:	2200      	movs	r2, #0
 8009058:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800905a:	4b0b      	ldr	r3, [pc, #44]	@ (8009088 <vPortSetupTimerInterrupt+0x38>)
 800905c:	2200      	movs	r2, #0
 800905e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009060:	4b0a      	ldr	r3, [pc, #40]	@ (800908c <vPortSetupTimerInterrupt+0x3c>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a0a      	ldr	r2, [pc, #40]	@ (8009090 <vPortSetupTimerInterrupt+0x40>)
 8009066:	fba2 2303 	umull	r2, r3, r2, r3
 800906a:	099b      	lsrs	r3, r3, #6
 800906c:	4a09      	ldr	r2, [pc, #36]	@ (8009094 <vPortSetupTimerInterrupt+0x44>)
 800906e:	3b01      	subs	r3, #1
 8009070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009072:	4b04      	ldr	r3, [pc, #16]	@ (8009084 <vPortSetupTimerInterrupt+0x34>)
 8009074:	2207      	movs	r2, #7
 8009076:	601a      	str	r2, [r3, #0]
}
 8009078:	bf00      	nop
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	e000e010 	.word	0xe000e010
 8009088:	e000e018 	.word	0xe000e018
 800908c:	20000008 	.word	0x20000008
 8009090:	10624dd3 	.word	0x10624dd3
 8009094:	e000e014 	.word	0xe000e014

08009098 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009098:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80090a8 <vPortEnableVFP+0x10>
 800909c:	6801      	ldr	r1, [r0, #0]
 800909e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80090a2:	6001      	str	r1, [r0, #0]
 80090a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80090a6:	bf00      	nop
 80090a8:	e000ed88 	.word	0xe000ed88

080090ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80090b2:	f3ef 8305 	mrs	r3, IPSR
 80090b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2b0f      	cmp	r3, #15
 80090bc:	d917      	bls.n	80090ee <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80090be:	4a1a      	ldr	r2, [pc, #104]	@ (8009128 <vPortValidateInterruptPriority+0x7c>)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	4413      	add	r3, r2
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80090c8:	4b18      	ldr	r3, [pc, #96]	@ (800912c <vPortValidateInterruptPriority+0x80>)
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	7afa      	ldrb	r2, [r7, #11]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d20d      	bcs.n	80090ee <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80090d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d6:	b672      	cpsid	i
 80090d8:	f383 8811 	msr	BASEPRI, r3
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	f3bf 8f4f 	dsb	sy
 80090e4:	b662      	cpsie	i
 80090e6:	607b      	str	r3, [r7, #4]
}
 80090e8:	bf00      	nop
 80090ea:	bf00      	nop
 80090ec:	e7fd      	b.n	80090ea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80090ee:	4b10      	ldr	r3, [pc, #64]	@ (8009130 <vPortValidateInterruptPriority+0x84>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80090f6:	4b0f      	ldr	r3, [pc, #60]	@ (8009134 <vPortValidateInterruptPriority+0x88>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d90d      	bls.n	800911a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80090fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009102:	b672      	cpsid	i
 8009104:	f383 8811 	msr	BASEPRI, r3
 8009108:	f3bf 8f6f 	isb	sy
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	b662      	cpsie	i
 8009112:	603b      	str	r3, [r7, #0]
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop
 8009118:	e7fd      	b.n	8009116 <vPortValidateInterruptPriority+0x6a>
	}
 800911a:	bf00      	nop
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	e000e3f0 	.word	0xe000e3f0
 800912c:	2000539c 	.word	0x2000539c
 8009130:	e000ed0c 	.word	0xe000ed0c
 8009134:	200053a0 	.word	0x200053a0

08009138 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b08a      	sub	sp, #40	@ 0x28
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009140:	2300      	movs	r3, #0
 8009142:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009144:	f7fe ff54 	bl	8007ff0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009148:	4b5d      	ldr	r3, [pc, #372]	@ (80092c0 <pvPortMalloc+0x188>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d101      	bne.n	8009154 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009150:	f000 f920 	bl	8009394 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009154:	4b5b      	ldr	r3, [pc, #364]	@ (80092c4 <pvPortMalloc+0x18c>)
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4013      	ands	r3, r2
 800915c:	2b00      	cmp	r3, #0
 800915e:	f040 8094 	bne.w	800928a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d020      	beq.n	80091aa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8009168:	2208      	movs	r2, #8
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4413      	add	r3, r2
 800916e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f003 0307 	and.w	r3, r3, #7
 8009176:	2b00      	cmp	r3, #0
 8009178:	d017      	beq.n	80091aa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f023 0307 	bic.w	r3, r3, #7
 8009180:	3308      	adds	r3, #8
 8009182:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f003 0307 	and.w	r3, r3, #7
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00d      	beq.n	80091aa <pvPortMalloc+0x72>
	__asm volatile
 800918e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009192:	b672      	cpsid	i
 8009194:	f383 8811 	msr	BASEPRI, r3
 8009198:	f3bf 8f6f 	isb	sy
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	b662      	cpsie	i
 80091a2:	617b      	str	r3, [r7, #20]
}
 80091a4:	bf00      	nop
 80091a6:	bf00      	nop
 80091a8:	e7fd      	b.n	80091a6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d06c      	beq.n	800928a <pvPortMalloc+0x152>
 80091b0:	4b45      	ldr	r3, [pc, #276]	@ (80092c8 <pvPortMalloc+0x190>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d867      	bhi.n	800928a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80091ba:	4b44      	ldr	r3, [pc, #272]	@ (80092cc <pvPortMalloc+0x194>)
 80091bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80091be:	4b43      	ldr	r3, [pc, #268]	@ (80092cc <pvPortMalloc+0x194>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091c4:	e004      	b.n	80091d0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80091c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80091ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d903      	bls.n	80091e2 <pvPortMalloc+0xaa>
 80091da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1f1      	bne.n	80091c6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80091e2:	4b37      	ldr	r3, [pc, #220]	@ (80092c0 <pvPortMalloc+0x188>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d04e      	beq.n	800928a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80091ec:	6a3b      	ldr	r3, [r7, #32]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2208      	movs	r2, #8
 80091f2:	4413      	add	r3, r2
 80091f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80091f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	6a3b      	ldr	r3, [r7, #32]
 80091fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80091fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009200:	685a      	ldr	r2, [r3, #4]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	1ad2      	subs	r2, r2, r3
 8009206:	2308      	movs	r3, #8
 8009208:	005b      	lsls	r3, r3, #1
 800920a:	429a      	cmp	r2, r3
 800920c:	d922      	bls.n	8009254 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800920e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4413      	add	r3, r2
 8009214:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	f003 0307 	and.w	r3, r3, #7
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00d      	beq.n	800923c <pvPortMalloc+0x104>
	__asm volatile
 8009220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009224:	b672      	cpsid	i
 8009226:	f383 8811 	msr	BASEPRI, r3
 800922a:	f3bf 8f6f 	isb	sy
 800922e:	f3bf 8f4f 	dsb	sy
 8009232:	b662      	cpsie	i
 8009234:	613b      	str	r3, [r7, #16]
}
 8009236:	bf00      	nop
 8009238:	bf00      	nop
 800923a:	e7fd      	b.n	8009238 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800923c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923e:	685a      	ldr	r2, [r3, #4]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	1ad2      	subs	r2, r2, r3
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800924e:	69b8      	ldr	r0, [r7, #24]
 8009250:	f000 f902 	bl	8009458 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009254:	4b1c      	ldr	r3, [pc, #112]	@ (80092c8 <pvPortMalloc+0x190>)
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	1ad3      	subs	r3, r2, r3
 800925e:	4a1a      	ldr	r2, [pc, #104]	@ (80092c8 <pvPortMalloc+0x190>)
 8009260:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009262:	4b19      	ldr	r3, [pc, #100]	@ (80092c8 <pvPortMalloc+0x190>)
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	4b1a      	ldr	r3, [pc, #104]	@ (80092d0 <pvPortMalloc+0x198>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	429a      	cmp	r2, r3
 800926c:	d203      	bcs.n	8009276 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800926e:	4b16      	ldr	r3, [pc, #88]	@ (80092c8 <pvPortMalloc+0x190>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a17      	ldr	r2, [pc, #92]	@ (80092d0 <pvPortMalloc+0x198>)
 8009274:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009278:	685a      	ldr	r2, [r3, #4]
 800927a:	4b12      	ldr	r3, [pc, #72]	@ (80092c4 <pvPortMalloc+0x18c>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	431a      	orrs	r2, r3
 8009280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009282:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009286:	2200      	movs	r2, #0
 8009288:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800928a:	f7fe febf 	bl	800800c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	f003 0307 	and.w	r3, r3, #7
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00d      	beq.n	80092b4 <pvPortMalloc+0x17c>
	__asm volatile
 8009298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800929c:	b672      	cpsid	i
 800929e:	f383 8811 	msr	BASEPRI, r3
 80092a2:	f3bf 8f6f 	isb	sy
 80092a6:	f3bf 8f4f 	dsb	sy
 80092aa:	b662      	cpsie	i
 80092ac:	60fb      	str	r3, [r7, #12]
}
 80092ae:	bf00      	nop
 80092b0:	bf00      	nop
 80092b2:	e7fd      	b.n	80092b0 <pvPortMalloc+0x178>
	return pvReturn;
 80092b4:	69fb      	ldr	r3, [r7, #28]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3728      	adds	r7, #40	@ 0x28
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	2000cbac 	.word	0x2000cbac
 80092c4:	2000cbb8 	.word	0x2000cbb8
 80092c8:	2000cbb0 	.word	0x2000cbb0
 80092cc:	2000cba4 	.word	0x2000cba4
 80092d0:	2000cbb4 	.word	0x2000cbb4

080092d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b086      	sub	sp, #24
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d04e      	beq.n	8009384 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80092e6:	2308      	movs	r3, #8
 80092e8:	425b      	negs	r3, r3
 80092ea:	697a      	ldr	r2, [r7, #20]
 80092ec:	4413      	add	r3, r2
 80092ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	685a      	ldr	r2, [r3, #4]
 80092f8:	4b24      	ldr	r3, [pc, #144]	@ (800938c <vPortFree+0xb8>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4013      	ands	r3, r2
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10d      	bne.n	800931e <vPortFree+0x4a>
	__asm volatile
 8009302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009306:	b672      	cpsid	i
 8009308:	f383 8811 	msr	BASEPRI, r3
 800930c:	f3bf 8f6f 	isb	sy
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	b662      	cpsie	i
 8009316:	60fb      	str	r3, [r7, #12]
}
 8009318:	bf00      	nop
 800931a:	bf00      	nop
 800931c:	e7fd      	b.n	800931a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00d      	beq.n	8009342 <vPortFree+0x6e>
	__asm volatile
 8009326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800932a:	b672      	cpsid	i
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	b662      	cpsie	i
 800933a:	60bb      	str	r3, [r7, #8]
}
 800933c:	bf00      	nop
 800933e:	bf00      	nop
 8009340:	e7fd      	b.n	800933e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	685a      	ldr	r2, [r3, #4]
 8009346:	4b11      	ldr	r3, [pc, #68]	@ (800938c <vPortFree+0xb8>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4013      	ands	r3, r2
 800934c:	2b00      	cmp	r3, #0
 800934e:	d019      	beq.n	8009384 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d115      	bne.n	8009384 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	685a      	ldr	r2, [r3, #4]
 800935c:	4b0b      	ldr	r3, [pc, #44]	@ (800938c <vPortFree+0xb8>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	43db      	mvns	r3, r3
 8009362:	401a      	ands	r2, r3
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009368:	f7fe fe42 	bl	8007ff0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	685a      	ldr	r2, [r3, #4]
 8009370:	4b07      	ldr	r3, [pc, #28]	@ (8009390 <vPortFree+0xbc>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4413      	add	r3, r2
 8009376:	4a06      	ldr	r2, [pc, #24]	@ (8009390 <vPortFree+0xbc>)
 8009378:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800937a:	6938      	ldr	r0, [r7, #16]
 800937c:	f000 f86c 	bl	8009458 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009380:	f7fe fe44 	bl	800800c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009384:	bf00      	nop
 8009386:	3718      	adds	r7, #24
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	2000cbb8 	.word	0x2000cbb8
 8009390:	2000cbb0 	.word	0x2000cbb0

08009394 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800939a:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 800939e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80093a0:	4b27      	ldr	r3, [pc, #156]	@ (8009440 <prvHeapInit+0xac>)
 80093a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f003 0307 	and.w	r3, r3, #7
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00c      	beq.n	80093c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	3307      	adds	r3, #7
 80093b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f023 0307 	bic.w	r3, r3, #7
 80093ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80093bc:	68ba      	ldr	r2, [r7, #8]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	4a1f      	ldr	r2, [pc, #124]	@ (8009440 <prvHeapInit+0xac>)
 80093c4:	4413      	add	r3, r2
 80093c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80093cc:	4a1d      	ldr	r2, [pc, #116]	@ (8009444 <prvHeapInit+0xb0>)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80093d2:	4b1c      	ldr	r3, [pc, #112]	@ (8009444 <prvHeapInit+0xb0>)
 80093d4:	2200      	movs	r2, #0
 80093d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	68ba      	ldr	r2, [r7, #8]
 80093dc:	4413      	add	r3, r2
 80093de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80093e0:	2208      	movs	r2, #8
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	1a9b      	subs	r3, r3, r2
 80093e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f023 0307 	bic.w	r3, r3, #7
 80093ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	4a15      	ldr	r2, [pc, #84]	@ (8009448 <prvHeapInit+0xb4>)
 80093f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80093f6:	4b14      	ldr	r3, [pc, #80]	@ (8009448 <prvHeapInit+0xb4>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2200      	movs	r2, #0
 80093fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80093fe:	4b12      	ldr	r3, [pc, #72]	@ (8009448 <prvHeapInit+0xb4>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2200      	movs	r2, #0
 8009404:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	1ad2      	subs	r2, r2, r3
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009414:	4b0c      	ldr	r3, [pc, #48]	@ (8009448 <prvHeapInit+0xb4>)
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	4a0a      	ldr	r2, [pc, #40]	@ (800944c <prvHeapInit+0xb8>)
 8009422:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	4a09      	ldr	r2, [pc, #36]	@ (8009450 <prvHeapInit+0xbc>)
 800942a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800942c:	4b09      	ldr	r3, [pc, #36]	@ (8009454 <prvHeapInit+0xc0>)
 800942e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009432:	601a      	str	r2, [r3, #0]
}
 8009434:	bf00      	nop
 8009436:	3714      	adds	r7, #20
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr
 8009440:	200053a4 	.word	0x200053a4
 8009444:	2000cba4 	.word	0x2000cba4
 8009448:	2000cbac 	.word	0x2000cbac
 800944c:	2000cbb4 	.word	0x2000cbb4
 8009450:	2000cbb0 	.word	0x2000cbb0
 8009454:	2000cbb8 	.word	0x2000cbb8

08009458 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009460:	4b28      	ldr	r3, [pc, #160]	@ (8009504 <prvInsertBlockIntoFreeList+0xac>)
 8009462:	60fb      	str	r3, [r7, #12]
 8009464:	e002      	b.n	800946c <prvInsertBlockIntoFreeList+0x14>
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	60fb      	str	r3, [r7, #12]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	429a      	cmp	r2, r3
 8009474:	d8f7      	bhi.n	8009466 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	4413      	add	r3, r2
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	429a      	cmp	r2, r3
 8009486:	d108      	bne.n	800949a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	685a      	ldr	r2, [r3, #4]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	441a      	add	r2, r3
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	441a      	add	r2, r3
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d118      	bne.n	80094e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	4b15      	ldr	r3, [pc, #84]	@ (8009508 <prvInsertBlockIntoFreeList+0xb0>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d00d      	beq.n	80094d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	685a      	ldr	r2, [r3, #4]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	441a      	add	r2, r3
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	601a      	str	r2, [r3, #0]
 80094d4:	e008      	b.n	80094e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80094d6:	4b0c      	ldr	r3, [pc, #48]	@ (8009508 <prvInsertBlockIntoFreeList+0xb0>)
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	601a      	str	r2, [r3, #0]
 80094de:	e003      	b.n	80094e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d002      	beq.n	80094f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094f6:	bf00      	nop
 80094f8:	3714      	adds	r7, #20
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	2000cba4 	.word	0x2000cba4
 8009508:	2000cbac 	.word	0x2000cbac

0800950c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	330c      	adds	r3, #12
 800951c:	461a      	mov	r2, r3
 800951e:	6839      	ldr	r1, [r7, #0]
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f003 fc7d 	bl	800ce20 <tcpip_send_msg_wait_sem>
 8009526:	4603      	mov	r3, r0
 8009528:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800952a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d103      	bne.n	800953a <netconn_apimsg+0x2e>
    return apimsg->err;
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009538:	e001      	b.n	800953e <netconn_apimsg+0x32>
  }
  return err;
 800953a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
	...

08009548 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b08c      	sub	sp, #48	@ 0x30
 800954c:	af00      	add	r7, sp, #0
 800954e:	4603      	mov	r3, r0
 8009550:	603a      	str	r2, [r7, #0]
 8009552:	71fb      	strb	r3, [r7, #7]
 8009554:	460b      	mov	r3, r1
 8009556:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009558:	79fb      	ldrb	r3, [r7, #7]
 800955a:	6839      	ldr	r1, [r7, #0]
 800955c:	4618      	mov	r0, r3
 800955e:	f001 f84b 	bl	800a5f8 <netconn_alloc>
 8009562:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8009564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009566:	2b00      	cmp	r3, #0
 8009568:	d054      	beq.n	8009614 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800956a:	79bb      	ldrb	r3, [r7, #6]
 800956c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800956e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009570:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8009572:	f107 0308 	add.w	r3, r7, #8
 8009576:	4619      	mov	r1, r3
 8009578:	4829      	ldr	r0, [pc, #164]	@ (8009620 <netconn_new_with_proto_and_callback+0xd8>)
 800957a:	f7ff ffc7 	bl	800950c <netconn_apimsg>
 800957e:	4603      	mov	r3, r0
 8009580:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8009584:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8009588:	2b00      	cmp	r3, #0
 800958a:	d043      	beq.n	8009614 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800958c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d005      	beq.n	80095a0 <netconn_new_with_proto_and_callback+0x58>
 8009594:	4b23      	ldr	r3, [pc, #140]	@ (8009624 <netconn_new_with_proto_and_callback+0xdc>)
 8009596:	22a3      	movs	r2, #163	@ 0xa3
 8009598:	4923      	ldr	r1, [pc, #140]	@ (8009628 <netconn_new_with_proto_and_callback+0xe0>)
 800959a:	4824      	ldr	r0, [pc, #144]	@ (800962c <netconn_new_with_proto_and_callback+0xe4>)
 800959c:	f01b ff94 	bl	80254c8 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80095a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095a2:	3310      	adds	r3, #16
 80095a4:	4618      	mov	r0, r3
 80095a6:	f00e fe9a 	bl	80182de <sys_mbox_valid>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d105      	bne.n	80095bc <netconn_new_with_proto_and_callback+0x74>
 80095b0:	4b1c      	ldr	r3, [pc, #112]	@ (8009624 <netconn_new_with_proto_and_callback+0xdc>)
 80095b2:	22a4      	movs	r2, #164	@ 0xa4
 80095b4:	491e      	ldr	r1, [pc, #120]	@ (8009630 <netconn_new_with_proto_and_callback+0xe8>)
 80095b6:	481d      	ldr	r0, [pc, #116]	@ (800962c <netconn_new_with_proto_and_callback+0xe4>)
 80095b8:	f01b ff86 	bl	80254c8 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80095bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095be:	3314      	adds	r3, #20
 80095c0:	4618      	mov	r0, r3
 80095c2:	f00e fe8c 	bl	80182de <sys_mbox_valid>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d005      	beq.n	80095d8 <netconn_new_with_proto_and_callback+0x90>
 80095cc:	4b15      	ldr	r3, [pc, #84]	@ (8009624 <netconn_new_with_proto_and_callback+0xdc>)
 80095ce:	22a6      	movs	r2, #166	@ 0xa6
 80095d0:	4918      	ldr	r1, [pc, #96]	@ (8009634 <netconn_new_with_proto_and_callback+0xec>)
 80095d2:	4816      	ldr	r0, [pc, #88]	@ (800962c <netconn_new_with_proto_and_callback+0xe4>)
 80095d4:	f01b ff78 	bl	80254c8 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80095d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095da:	330c      	adds	r3, #12
 80095dc:	4618      	mov	r0, r3
 80095de:	f00e ff0f 	bl	8018400 <sys_sem_valid>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d105      	bne.n	80095f4 <netconn_new_with_proto_and_callback+0xac>
 80095e8:	4b0e      	ldr	r3, [pc, #56]	@ (8009624 <netconn_new_with_proto_and_callback+0xdc>)
 80095ea:	22a9      	movs	r2, #169	@ 0xa9
 80095ec:	4912      	ldr	r1, [pc, #72]	@ (8009638 <netconn_new_with_proto_and_callback+0xf0>)
 80095ee:	480f      	ldr	r0, [pc, #60]	@ (800962c <netconn_new_with_proto_and_callback+0xe4>)
 80095f0:	f01b ff6a 	bl	80254c8 <iprintf>
      sys_sem_free(&conn->op_completed);
 80095f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095f6:	330c      	adds	r3, #12
 80095f8:	4618      	mov	r0, r3
 80095fa:	f00e fef4 	bl	80183e6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80095fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009600:	3310      	adds	r3, #16
 8009602:	4618      	mov	r0, r3
 8009604:	f00e fde4 	bl	80181d0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8009608:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800960a:	2007      	movs	r0, #7
 800960c:	f004 f9b2 	bl	800d974 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009610:	2300      	movs	r3, #0
 8009612:	e000      	b.n	8009616 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8009616:	4618      	mov	r0, r3
 8009618:	3730      	adds	r7, #48	@ 0x30
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	0800a5cd 	.word	0x0800a5cd
 8009624:	08026844 	.word	0x08026844
 8009628:	08026878 	.word	0x08026878
 800962c:	0802689c 	.word	0x0802689c
 8009630:	080268c4 	.word	0x080268c4
 8009634:	080268dc 	.word	0x080268dc
 8009638:	08026900 	.word	0x08026900

0800963c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b08c      	sub	sp, #48	@ 0x30
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d101      	bne.n	800964e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800964a:	2300      	movs	r3, #0
 800964c:	e014      	b.n	8009678 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009652:	2329      	movs	r3, #41	@ 0x29
 8009654:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009656:	f107 030c 	add.w	r3, r7, #12
 800965a:	4619      	mov	r1, r3
 800965c:	4808      	ldr	r0, [pc, #32]	@ (8009680 <netconn_prepare_delete+0x44>)
 800965e:	f7ff ff55 	bl	800950c <netconn_apimsg>
 8009662:	4603      	mov	r3, r0
 8009664:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009668:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800966c:	2b00      	cmp	r3, #0
 800966e:	d002      	beq.n	8009676 <netconn_prepare_delete+0x3a>
    return err;
 8009670:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009674:	e000      	b.n	8009678 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3730      	adds	r7, #48	@ 0x30
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	0800ab41 	.word	0x0800ab41

08009684 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d101      	bne.n	8009696 <netconn_delete+0x12>
    return ERR_OK;
 8009692:	2300      	movs	r3, #0
 8009694:	e00d      	b.n	80096b2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f7ff ffd0 	bl	800963c <netconn_prepare_delete>
 800969c:	4603      	mov	r3, r0
 800969e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80096a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d102      	bne.n	80096ae <netconn_delete+0x2a>
    netconn_free(conn);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f001 f817 	bl	800a6dc <netconn_free>
  }
  return err;
 80096ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
	...

080096bc <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b08e      	sub	sp, #56	@ 0x38
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	607a      	str	r2, [r7, #4]
 80096c8:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d109      	bne.n	80096e4 <netconn_getaddr+0x28>
 80096d0:	4b1d      	ldr	r3, [pc, #116]	@ (8009748 <netconn_getaddr+0x8c>)
 80096d2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80096d6:	491d      	ldr	r1, [pc, #116]	@ (800974c <netconn_getaddr+0x90>)
 80096d8:	481d      	ldr	r0, [pc, #116]	@ (8009750 <netconn_getaddr+0x94>)
 80096da:	f01b fef5 	bl	80254c8 <iprintf>
 80096de:	f06f 030f 	mvn.w	r3, #15
 80096e2:	e02d      	b.n	8009740 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d109      	bne.n	80096fe <netconn_getaddr+0x42>
 80096ea:	4b17      	ldr	r3, [pc, #92]	@ (8009748 <netconn_getaddr+0x8c>)
 80096ec:	f240 1213 	movw	r2, #275	@ 0x113
 80096f0:	4918      	ldr	r1, [pc, #96]	@ (8009754 <netconn_getaddr+0x98>)
 80096f2:	4817      	ldr	r0, [pc, #92]	@ (8009750 <netconn_getaddr+0x94>)
 80096f4:	f01b fee8 	bl	80254c8 <iprintf>
 80096f8:	f06f 030f 	mvn.w	r3, #15
 80096fc:	e020      	b.n	8009740 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d109      	bne.n	8009718 <netconn_getaddr+0x5c>
 8009704:	4b10      	ldr	r3, [pc, #64]	@ (8009748 <netconn_getaddr+0x8c>)
 8009706:	f44f 728a 	mov.w	r2, #276	@ 0x114
 800970a:	4913      	ldr	r1, [pc, #76]	@ (8009758 <netconn_getaddr+0x9c>)
 800970c:	4810      	ldr	r0, [pc, #64]	@ (8009750 <netconn_getaddr+0x94>)
 800970e:	f01b fedb 	bl	80254c8 <iprintf>
 8009712:	f06f 030f 	mvn.w	r3, #15
 8009716:	e013      	b.n	8009740 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800971c:	78fb      	ldrb	r3, [r7, #3]
 800971e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800972a:	f107 0314 	add.w	r3, r7, #20
 800972e:	4619      	mov	r1, r3
 8009730:	480a      	ldr	r0, [pc, #40]	@ (800975c <netconn_getaddr+0xa0>)
 8009732:	f7ff feeb 	bl	800950c <netconn_apimsg>
 8009736:	4603      	mov	r3, r0
 8009738:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800973c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8009740:	4618      	mov	r0, r3
 8009742:	3738      	adds	r7, #56	@ 0x38
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}
 8009748:	08026844 	.word	0x08026844
 800974c:	0802691c 	.word	0x0802691c
 8009750:	0802689c 	.word	0x0802689c
 8009754:	0802693c 	.word	0x0802693c
 8009758:	0802695c 	.word	0x0802695c
 800975c:	0800b33d 	.word	0x0800b33d

08009760 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b08e      	sub	sp, #56	@ 0x38
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	4613      	mov	r3, r2
 800976c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d109      	bne.n	8009788 <netconn_bind+0x28>
 8009774:	4b11      	ldr	r3, [pc, #68]	@ (80097bc <netconn_bind+0x5c>)
 8009776:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800977a:	4911      	ldr	r1, [pc, #68]	@ (80097c0 <netconn_bind+0x60>)
 800977c:	4811      	ldr	r0, [pc, #68]	@ (80097c4 <netconn_bind+0x64>)
 800977e:	f01b fea3 	bl	80254c8 <iprintf>
 8009782:	f06f 030f 	mvn.w	r3, #15
 8009786:	e015      	b.n	80097b4 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d101      	bne.n	8009792 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800978e:	4b0e      	ldr	r3, [pc, #56]	@ (80097c8 <netconn_bind+0x68>)
 8009790:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800979a:	88fb      	ldrh	r3, [r7, #6]
 800979c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800979e:	f107 0314 	add.w	r3, r7, #20
 80097a2:	4619      	mov	r1, r3
 80097a4:	4809      	ldr	r0, [pc, #36]	@ (80097cc <netconn_bind+0x6c>)
 80097a6:	f7ff feb1 	bl	800950c <netconn_apimsg>
 80097aa:	4603      	mov	r3, r0
 80097ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80097b0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3738      	adds	r7, #56	@ 0x38
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	08026844 	.word	0x08026844
 80097c0:	0802697c 	.word	0x0802697c
 80097c4:	0802689c 	.word	0x0802689c
 80097c8:	0802a2ec 	.word	0x0802a2ec
 80097cc:	0800ad0d 	.word	0x0800ad0d

080097d0 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b088      	sub	sp, #32
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	4613      	mov	r3, r2
 80097dc:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80097de:	2300      	movs	r3, #0
 80097e0:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d109      	bne.n	80097fc <netconn_recv_data+0x2c>
 80097e8:	4b5e      	ldr	r3, [pc, #376]	@ (8009964 <netconn_recv_data+0x194>)
 80097ea:	f44f 7212 	mov.w	r2, #584	@ 0x248
 80097ee:	495e      	ldr	r1, [pc, #376]	@ (8009968 <netconn_recv_data+0x198>)
 80097f0:	485e      	ldr	r0, [pc, #376]	@ (800996c <netconn_recv_data+0x19c>)
 80097f2:	f01b fe69 	bl	80254c8 <iprintf>
 80097f6:	f06f 030f 	mvn.w	r3, #15
 80097fa:	e0ae      	b.n	800995a <netconn_recv_data+0x18a>
  *new_buf = NULL;
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	2200      	movs	r2, #0
 8009800:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d109      	bne.n	800981c <netconn_recv_data+0x4c>
 8009808:	4b56      	ldr	r3, [pc, #344]	@ (8009964 <netconn_recv_data+0x194>)
 800980a:	f240 224a 	movw	r2, #586	@ 0x24a
 800980e:	4958      	ldr	r1, [pc, #352]	@ (8009970 <netconn_recv_data+0x1a0>)
 8009810:	4856      	ldr	r0, [pc, #344]	@ (800996c <netconn_recv_data+0x19c>)
 8009812:	f01b fe59 	bl	80254c8 <iprintf>
 8009816:	f06f 030f 	mvn.w	r3, #15
 800981a:	e09e      	b.n	800995a <netconn_recv_data+0x18a>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	3310      	adds	r3, #16
 8009820:	4618      	mov	r0, r3
 8009822:	f00e fd5c 	bl	80182de <sys_mbox_valid>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d10e      	bne.n	800984a <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	f000 fb13 	bl	8009e58 <netconn_err>
 8009832:	4603      	mov	r3, r0
 8009834:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8009836:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d002      	beq.n	8009844 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800983e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009842:	e08a      	b.n	800995a <netconn_recv_data+0x18a>
    }
    return ERR_CONN;
 8009844:	f06f 030a 	mvn.w	r3, #10
 8009848:	e087      	b.n	800995a <netconn_recv_data+0x18a>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009850:	f003 0302 	and.w	r3, r3, #2
 8009854:	2b00      	cmp	r3, #0
 8009856:	d110      	bne.n	800987a <netconn_recv_data+0xaa>
 8009858:	79fb      	ldrb	r3, [r7, #7]
 800985a:	f003 0304 	and.w	r3, r3, #4
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10b      	bne.n	800987a <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009868:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800986c:	2b00      	cmp	r3, #0
 800986e:	d104      	bne.n	800987a <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d024      	beq.n	80098c4 <netconn_recv_data+0xf4>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	3310      	adds	r3, #16
 800987e:	f107 0218 	add.w	r2, r7, #24
 8009882:	4611      	mov	r1, r2
 8009884:	4618      	mov	r0, r3
 8009886:	f00e fd0e 	bl	80182a6 <sys_arch_mbox_tryfetch>
 800988a:	4603      	mov	r3, r0
 800988c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009890:	d129      	bne.n	80098e6 <netconn_recv_data+0x116>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f000 fae0 	bl	8009e58 <netconn_err>
 8009898:	4603      	mov	r3, r0
 800989a:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800989c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d002      	beq.n	80098aa <netconn_recv_data+0xda>
        /* return pending error */
        return err;
 80098a4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80098a8:	e057      	b.n	800995a <netconn_recv_data+0x18a>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80098b0:	f003 0301 	and.w	r3, r3, #1
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d002      	beq.n	80098be <netconn_recv_data+0xee>
        return ERR_CONN;
 80098b8:	f06f 030a 	mvn.w	r3, #10
 80098bc:	e04d      	b.n	800995a <netconn_recv_data+0x18a>
      }
      return ERR_WOULDBLOCK;
 80098be:	f06f 0306 	mvn.w	r3, #6
 80098c2:	e04a      	b.n	800995a <netconn_recv_data+0x18a>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f103 0010 	add.w	r0, r3, #16
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	69da      	ldr	r2, [r3, #28]
 80098ce:	f107 0318 	add.w	r3, r7, #24
 80098d2:	4619      	mov	r1, r3
 80098d4:	f00e fca8 	bl	8018228 <sys_arch_mbox_fetch>
 80098d8:	4603      	mov	r3, r0
 80098da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098de:	d102      	bne.n	80098e6 <netconn_recv_data+0x116>
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 80098e0:	f06f 0302 	mvn.w	r3, #2
 80098e4:	e039      	b.n	800995a <netconn_recv_data+0x18a>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80098ee:	2b10      	cmp	r3, #16
 80098f0:	d117      	bne.n	8009922 <netconn_recv_data+0x152>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	f107 0217 	add.w	r2, r7, #23
 80098f8:	4611      	mov	r1, r2
 80098fa:	4618      	mov	r0, r3
 80098fc:	f000 fafe 	bl	8009efc <lwip_netconn_is_err_msg>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d009      	beq.n	800991a <netconn_recv_data+0x14a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8009906:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800990a:	f113 0f0f 	cmn.w	r3, #15
 800990e:	d101      	bne.n	8009914 <netconn_recv_data+0x144>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	e022      	b.n	800995a <netconn_recv_data+0x18a>
      }
      return err;
 8009914:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009918:	e01f      	b.n	800995a <netconn_recv_data+0x18a>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	891b      	ldrh	r3, [r3, #8]
 800991e:	83fb      	strh	r3, [r7, #30]
 8009920:	e00d      	b.n	800993e <netconn_recv_data+0x16e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8009922:	69bb      	ldr	r3, [r7, #24]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d106      	bne.n	8009936 <netconn_recv_data+0x166>
 8009928:	4b0e      	ldr	r3, [pc, #56]	@ (8009964 <netconn_recv_data+0x194>)
 800992a:	f240 2291 	movw	r2, #657	@ 0x291
 800992e:	4911      	ldr	r1, [pc, #68]	@ (8009974 <netconn_recv_data+0x1a4>)
 8009930:	480e      	ldr	r0, [pc, #56]	@ (800996c <netconn_recv_data+0x19c>)
 8009932:	f01b fdc9 	bl	80254c8 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	891b      	ldrh	r3, [r3, #8]
 800993c:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009942:	2b00      	cmp	r3, #0
 8009944:	d005      	beq.n	8009952 <netconn_recv_data+0x182>
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800994a:	8bfa      	ldrh	r2, [r7, #30]
 800994c:	2101      	movs	r1, #1
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8009952:	69ba      	ldr	r2, [r7, #24]
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009958:	2300      	movs	r3, #0
}
 800995a:	4618      	mov	r0, r3
 800995c:	3720      	adds	r7, #32
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	08026844 	.word	0x08026844
 8009968:	08026a5c 	.word	0x08026a5c
 800996c:	0802689c 	.word	0x0802689c
 8009970:	08026a7c 	.word	0x08026a7c
 8009974:	08026a98 	.word	0x08026a98

08009978 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d005      	beq.n	8009996 <netconn_tcp_recvd_msg+0x1e>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009992:	2b10      	cmp	r3, #16
 8009994:	d009      	beq.n	80099aa <netconn_tcp_recvd_msg+0x32>
 8009996:	4b0c      	ldr	r3, [pc, #48]	@ (80099c8 <netconn_tcp_recvd_msg+0x50>)
 8009998:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800999c:	490b      	ldr	r1, [pc, #44]	@ (80099cc <netconn_tcp_recvd_msg+0x54>)
 800999e:	480c      	ldr	r0, [pc, #48]	@ (80099d0 <netconn_tcp_recvd_msg+0x58>)
 80099a0:	f01b fd92 	bl	80254c8 <iprintf>
 80099a4:	f06f 030f 	mvn.w	r3, #15
 80099a8:	e00a      	b.n	80099c0 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	68ba      	ldr	r2, [r7, #8]
 80099b4:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80099b6:	6879      	ldr	r1, [r7, #4]
 80099b8:	4806      	ldr	r0, [pc, #24]	@ (80099d4 <netconn_tcp_recvd_msg+0x5c>)
 80099ba:	f7ff fda7 	bl	800950c <netconn_apimsg>
 80099be:	4603      	mov	r3, r0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3710      	adds	r7, #16
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	08026844 	.word	0x08026844
 80099cc:	08026aa4 	.word	0x08026aa4
 80099d0:	0802689c 	.word	0x0802689c
 80099d4:	0800ae1b 	.word	0x0800ae1b

080099d8 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b08c      	sub	sp, #48	@ 0x30
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d005      	beq.n	80099f4 <netconn_tcp_recvd+0x1c>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80099f0:	2b10      	cmp	r3, #16
 80099f2:	d009      	beq.n	8009a08 <netconn_tcp_recvd+0x30>
 80099f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009a28 <netconn_tcp_recvd+0x50>)
 80099f6:	f240 22b5 	movw	r2, #693	@ 0x2b5
 80099fa:	490c      	ldr	r1, [pc, #48]	@ (8009a2c <netconn_tcp_recvd+0x54>)
 80099fc:	480c      	ldr	r0, [pc, #48]	@ (8009a30 <netconn_tcp_recvd+0x58>)
 80099fe:	f01b fd63 	bl	80254c8 <iprintf>
 8009a02:	f06f 030f 	mvn.w	r3, #15
 8009a06:	e00b      	b.n	8009a20 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 8009a08:	f107 030c 	add.w	r3, r7, #12
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	6839      	ldr	r1, [r7, #0]
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f7ff ffb1 	bl	8009978 <netconn_tcp_recvd_msg>
 8009a16:	4603      	mov	r3, r0
 8009a18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 8009a1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3730      	adds	r7, #48	@ 0x30
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	08026844 	.word	0x08026844
 8009a2c:	08026aa4 	.word	0x08026aa4
 8009a30:	0802689c 	.word	0x0802689c

08009a34 <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b090      	sub	sp, #64	@ 0x40
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	4613      	mov	r3, r2
 8009a40:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	3310      	adds	r3, #16
 8009a46:	4618      	mov	r0, r3
 8009a48:	f00e fc49 	bl	80182de <sys_mbox_valid>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d102      	bne.n	8009a58 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8009a52:	f06f 030a 	mvn.w	r3, #10
 8009a56:	e072      	b.n	8009b3e <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a5e:	b25b      	sxtb	r3, r3
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	da09      	bge.n	8009a78 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a6e:	b2da      	uxtb	r2, r3
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f883 2020 	strb.w	r2, [r3, #32]
    goto handle_fin;
 8009a76:	e03b      	b.n	8009af0 <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8009a78:	79fb      	ldrb	r3, [r7, #7]
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	68b9      	ldr	r1, [r7, #8]
 8009a7e:	68f8      	ldr	r0, [r7, #12]
 8009a80:	f7ff fea6 	bl	80097d0 <netconn_recv_data>
 8009a84:	4603      	mov	r3, r0
 8009a86:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 8009a8a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d002      	beq.n	8009a98 <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8009a92:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009a96:	e052      	b.n	8009b3e <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8009a9e:	79fb      	ldrb	r3, [r7, #7]
 8009aa0:	f003 0308 	and.w	r3, r3, #8
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10e      	bne.n	8009ac6 <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8009aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d002      	beq.n	8009ab4 <netconn_recv_data_tcp+0x80>
 8009aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab0:	891b      	ldrh	r3, [r3, #8]
 8009ab2:	e000      	b.n	8009ab6 <netconn_recv_data_tcp+0x82>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8009ab8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009aba:	f107 0214 	add.w	r2, r7, #20
 8009abe:	4619      	mov	r1, r3
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	f7ff ff59 	bl	8009978 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8009ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d136      	bne.n	8009b3a <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 8009acc:	79fb      	ldrb	r3, [r7, #7]
 8009ace:	f003 0310 	and.w	r3, r3, #16
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00b      	beq.n	8009aee <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009adc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009ae0:	b2da      	uxtb	r2, r3
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f883 2020 	strb.w	r2, [r3, #32]
      return ERR_WOULDBLOCK;
 8009ae8:	f06f 0306 	mvn.w	r3, #6
 8009aec:	e027      	b.n	8009b3e <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 8009aee:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d005      	beq.n	8009b04 <netconn_recv_data_tcp+0xd0>
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009afc:	2200      	movs	r2, #0
 8009afe:	2101      	movs	r1, #1
 8009b00:	68f8      	ldr	r0, [r7, #12]
 8009b02:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d10f      	bne.n	8009b2c <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f000 f9a3 	bl	8009e58 <netconn_err>
 8009b12:	4603      	mov	r3, r0
 8009b14:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 8009b18:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d002      	beq.n	8009b26 <netconn_recv_data_tcp+0xf2>
          return err;
 8009b20:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009b24:	e00b      	b.n	8009b3e <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 8009b26:	f06f 030d 	mvn.w	r3, #13
 8009b2a:	e008      	b.n	8009b3e <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8009b2c:	2101      	movs	r1, #1
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f000 f962 	bl	8009df8 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8009b34:	f06f 030e 	mvn.w	r3, #14
 8009b38:	e001      	b.n	8009b3e <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 8009b3a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3740      	adds	r7, #64	@ 0x40
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
	...

08009b48 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	4613      	mov	r3, r2
 8009b54:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d005      	beq.n	8009b68 <netconn_recv_tcp_pbuf_flags+0x20>
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b64:	2b10      	cmp	r3, #16
 8009b66:	d009      	beq.n	8009b7c <netconn_recv_tcp_pbuf_flags+0x34>
 8009b68:	4b0a      	ldr	r3, [pc, #40]	@ (8009b94 <netconn_recv_tcp_pbuf_flags+0x4c>)
 8009b6a:	f240 3225 	movw	r2, #805	@ 0x325
 8009b6e:	490a      	ldr	r1, [pc, #40]	@ (8009b98 <netconn_recv_tcp_pbuf_flags+0x50>)
 8009b70:	480a      	ldr	r0, [pc, #40]	@ (8009b9c <netconn_recv_tcp_pbuf_flags+0x54>)
 8009b72:	f01b fca9 	bl	80254c8 <iprintf>
 8009b76:	f06f 030f 	mvn.w	r3, #15
 8009b7a:	e006      	b.n	8009b8a <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 8009b7c:	79fb      	ldrb	r3, [r7, #7]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	68b9      	ldr	r1, [r7, #8]
 8009b82:	68f8      	ldr	r0, [r7, #12]
 8009b84:	f7ff ff56 	bl	8009a34 <netconn_recv_data_tcp>
 8009b88:	4603      	mov	r3, r0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3710      	adds	r7, #16
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	08026844 	.word	0x08026844
 8009b98:	08026aa4 	.word	0x08026aa4
 8009b9c:	0802689c 	.word	0x0802689c

08009ba0 <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	4613      	mov	r3, r2
 8009bac:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d005      	beq.n	8009bc0 <netconn_recv_udp_raw_netbuf_flags+0x20>
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009bbc:	2b10      	cmp	r3, #16
 8009bbe:	d109      	bne.n	8009bd4 <netconn_recv_udp_raw_netbuf_flags+0x34>
 8009bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8009bec <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 8009bc2:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 8009bc6:	490a      	ldr	r1, [pc, #40]	@ (8009bf0 <netconn_recv_udp_raw_netbuf_flags+0x50>)
 8009bc8:	480a      	ldr	r0, [pc, #40]	@ (8009bf4 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 8009bca:	f01b fc7d 	bl	80254c8 <iprintf>
 8009bce:	f06f 030f 	mvn.w	r3, #15
 8009bd2:	e006      	b.n	8009be2 <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 8009bd4:	79fb      	ldrb	r3, [r7, #7]
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	68b9      	ldr	r1, [r7, #8]
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f7ff fdf8 	bl	80097d0 <netconn_recv_data>
 8009be0:	4603      	mov	r3, r0
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3710      	adds	r7, #16
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	08026844 	.word	0x08026844
 8009bf0:	08026ac8 	.word	0x08026ac8
 8009bf4:	0802689c 	.word	0x0802689c

08009bf8 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b08c      	sub	sp, #48	@ 0x30
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d109      	bne.n	8009c1c <netconn_send+0x24>
 8009c08:	4b0e      	ldr	r3, [pc, #56]	@ (8009c44 <netconn_send+0x4c>)
 8009c0a:	f240 32b2 	movw	r2, #946	@ 0x3b2
 8009c0e:	490e      	ldr	r1, [pc, #56]	@ (8009c48 <netconn_send+0x50>)
 8009c10:	480e      	ldr	r0, [pc, #56]	@ (8009c4c <netconn_send+0x54>)
 8009c12:	f01b fc59 	bl	80254c8 <iprintf>
 8009c16:	f06f 030f 	mvn.w	r3, #15
 8009c1a:	e00e      	b.n	8009c3a <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8009c24:	f107 030c 	add.w	r3, r7, #12
 8009c28:	4619      	mov	r1, r3
 8009c2a:	4809      	ldr	r0, [pc, #36]	@ (8009c50 <netconn_send+0x58>)
 8009c2c:	f7ff fc6e 	bl	800950c <netconn_apimsg>
 8009c30:	4603      	mov	r3, r0
 8009c32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009c36:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3730      	adds	r7, #48	@ 0x30
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	08026844 	.word	0x08026844
 8009c48:	08026b00 	.word	0x08026b00
 8009c4c:	0802689c 	.word	0x0802689c
 8009c50:	0800ad81 	.word	0x0800ad81

08009c54 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b088      	sub	sp, #32
 8009c58:	af02      	add	r7, sp, #8
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	607a      	str	r2, [r7, #4]
 8009c60:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8009c6a:	78fa      	ldrb	r2, [r7, #3]
 8009c6c:	f107 0110 	add.w	r1, r7, #16
 8009c70:	6a3b      	ldr	r3, [r7, #32]
 8009c72:	9300      	str	r3, [sp, #0]
 8009c74:	4613      	mov	r3, r2
 8009c76:	2201      	movs	r2, #1
 8009c78:	68f8      	ldr	r0, [r7, #12]
 8009c7a:	f000 f805 	bl	8009c88 <netconn_write_vectors_partly>
 8009c7e:	4603      	mov	r3, r0
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3718      	adds	r7, #24
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b092      	sub	sp, #72	@ 0x48
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	4611      	mov	r1, r2
 8009c94:	461a      	mov	r2, r3
 8009c96:	460b      	mov	r3, r1
 8009c98:	80fb      	strh	r3, [r7, #6]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d109      	bne.n	8009cb8 <netconn_write_vectors_partly+0x30>
 8009ca4:	4b4e      	ldr	r3, [pc, #312]	@ (8009de0 <netconn_write_vectors_partly+0x158>)
 8009ca6:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8009caa:	494e      	ldr	r1, [pc, #312]	@ (8009de4 <netconn_write_vectors_partly+0x15c>)
 8009cac:	484e      	ldr	r0, [pc, #312]	@ (8009de8 <netconn_write_vectors_partly+0x160>)
 8009cae:	f01b fc0b 	bl	80254c8 <iprintf>
 8009cb2:	f06f 030f 	mvn.w	r3, #15
 8009cb6:	e08f      	b.n	8009dd8 <netconn_write_vectors_partly+0x150>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009cc0:	2b10      	cmp	r3, #16
 8009cc2:	d009      	beq.n	8009cd8 <netconn_write_vectors_partly+0x50>
 8009cc4:	4b46      	ldr	r3, [pc, #280]	@ (8009de0 <netconn_write_vectors_partly+0x158>)
 8009cc6:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8009cca:	4948      	ldr	r1, [pc, #288]	@ (8009dec <netconn_write_vectors_partly+0x164>)
 8009ccc:	4846      	ldr	r0, [pc, #280]	@ (8009de8 <netconn_write_vectors_partly+0x160>)
 8009cce:	f01b fbfb 	bl	80254c8 <iprintf>
 8009cd2:	f06f 0305 	mvn.w	r3, #5
 8009cd6:	e07f      	b.n	8009dd8 <netconn_write_vectors_partly+0x150>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009cde:	f003 0302 	and.w	r3, r3, #2
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d104      	bne.n	8009cf0 <netconn_write_vectors_partly+0x68>
 8009ce6:	797b      	ldrb	r3, [r7, #5]
 8009ce8:	f003 0304 	and.w	r3, r3, #4
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d001      	beq.n	8009cf4 <netconn_write_vectors_partly+0x6c>
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e000      	b.n	8009cf6 <netconn_write_vectors_partly+0x6e>
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8009cfa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d005      	beq.n	8009d0e <netconn_write_vectors_partly+0x86>
 8009d02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d102      	bne.n	8009d0e <netconn_write_vectors_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8009d08:	f06f 0305 	mvn.w	r3, #5
 8009d0c:	e064      	b.n	8009dd8 <netconn_write_vectors_partly+0x150>
  }

  /* sum up the total size */
  size = 0;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 8009d12:	2300      	movs	r3, #0
 8009d14:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d16:	e015      	b.n	8009d44 <netconn_write_vectors_partly+0xbc>
    size += vectors[i].len;
 8009d18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d1a:	00db      	lsls	r3, r3, #3
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	4413      	add	r3, r2
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d24:	4413      	add	r3, r2
 8009d26:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 8009d28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d2a:	00db      	lsls	r3, r3, #3
 8009d2c:	68ba      	ldr	r2, [r7, #8]
 8009d2e:	4413      	add	r3, r2
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d202      	bcs.n	8009d3e <netconn_write_vectors_partly+0xb6>
      /* overflow */
      return ERR_VAL;
 8009d38:	f06f 0305 	mvn.w	r3, #5
 8009d3c:	e04c      	b.n	8009dd8 <netconn_write_vectors_partly+0x150>
  for (i = 0; i < vectorcnt; i++) {
 8009d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d40:	3301      	adds	r3, #1
 8009d42:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d44:	88fb      	ldrh	r3, [r7, #6]
 8009d46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	dbe5      	blt.n	8009d18 <netconn_write_vectors_partly+0x90>
    }
  }
  if (size == 0) {
 8009d4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d101      	bne.n	8009d56 <netconn_write_vectors_partly+0xce>
    return ERR_OK;
 8009d52:	2300      	movs	r3, #0
 8009d54:	e040      	b.n	8009dd8 <netconn_write_vectors_partly+0x150>
  } else if (size > SSIZE_MAX) {
 8009d56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	da0a      	bge.n	8009d72 <netconn_write_vectors_partly+0xea>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8009d5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d102      	bne.n	8009d68 <netconn_write_vectors_partly+0xe0>
      return ERR_VAL;
 8009d62:	f06f 0305 	mvn.w	r3, #5
 8009d66:	e037      	b.n	8009dd8 <netconn_write_vectors_partly+0x150>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009d68:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 8009d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d70:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009d7a:	88fb      	ldrh	r3, [r7, #6]
 8009d7c:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8009d82:	797b      	ldrb	r3, [r7, #5]
 8009d84:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8009d88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009d90:	f107 0314 	add.w	r3, r7, #20
 8009d94:	4619      	mov	r1, r3
 8009d96:	4816      	ldr	r0, [pc, #88]	@ (8009df0 <netconn_write_vectors_partly+0x168>)
 8009d98:	f7ff fbb8 	bl	800950c <netconn_apimsg>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 8009da2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d114      	bne.n	8009dd4 <netconn_write_vectors_partly+0x14c>
    if (bytes_written != NULL) {
 8009daa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d002      	beq.n	8009db6 <netconn_write_vectors_partly+0x12e>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009db0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009db2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009db4:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8009db6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d10a      	bne.n	8009dd4 <netconn_write_vectors_partly+0x14c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d006      	beq.n	8009dd4 <netconn_write_vectors_partly+0x14c>
 8009dc6:	4b06      	ldr	r3, [pc, #24]	@ (8009de0 <netconn_write_vectors_partly+0x158>)
 8009dc8:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009dcc:	4909      	ldr	r1, [pc, #36]	@ (8009df4 <netconn_write_vectors_partly+0x16c>)
 8009dce:	4806      	ldr	r0, [pc, #24]	@ (8009de8 <netconn_write_vectors_partly+0x160>)
 8009dd0:	f01b fb7a 	bl	80254c8 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8009dd4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3748      	adds	r7, #72	@ 0x48
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	08026844 	.word	0x08026844
 8009de4:	08026b1c 	.word	0x08026b1c
 8009de8:	0802689c 	.word	0x0802689c
 8009dec:	08026b38 	.word	0x08026b38
 8009df0:	0800b225 	.word	0x0800b225
 8009df4:	08026b5c 	.word	0x08026b5c

08009df8 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b08c      	sub	sp, #48	@ 0x30
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	460b      	mov	r3, r1
 8009e02:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d109      	bne.n	8009e1e <netconn_close_shutdown+0x26>
 8009e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8009e48 <netconn_close_shutdown+0x50>)
 8009e0c:	f240 4247 	movw	r2, #1095	@ 0x447
 8009e10:	490e      	ldr	r1, [pc, #56]	@ (8009e4c <netconn_close_shutdown+0x54>)
 8009e12:	480f      	ldr	r0, [pc, #60]	@ (8009e50 <netconn_close_shutdown+0x58>)
 8009e14:	f01b fb58 	bl	80254c8 <iprintf>
 8009e18:	f06f 030f 	mvn.w	r3, #15
 8009e1c:	e010      	b.n	8009e40 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009e22:	78fb      	ldrb	r3, [r7, #3]
 8009e24:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009e26:	2329      	movs	r3, #41	@ 0x29
 8009e28:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009e2a:	f107 030c 	add.w	r3, r7, #12
 8009e2e:	4619      	mov	r1, r3
 8009e30:	4808      	ldr	r0, [pc, #32]	@ (8009e54 <netconn_close_shutdown+0x5c>)
 8009e32:	f7ff fb6b 	bl	800950c <netconn_apimsg>
 8009e36:	4603      	mov	r3, r0
 8009e38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009e3c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3730      	adds	r7, #48	@ 0x30
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	08026844 	.word	0x08026844
 8009e4c:	08026b80 	.word	0x08026b80
 8009e50:	0802689c 	.word	0x0802689c
 8009e54:	0800b449 	.word	0x0800b449

08009e58 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d101      	bne.n	8009e6a <netconn_err+0x12>
    return ERR_OK;
 8009e66:	2300      	movs	r3, #0
 8009e68:	e00d      	b.n	8009e86 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009e6a:	f00e fb53 	bl	8018514 <sys_arch_protect>
 8009e6e:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	7a1b      	ldrb	r3, [r3, #8]
 8009e74:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f00e fb57 	bl	8018530 <sys_arch_unprotect>
  return err;
 8009e82:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
	...

08009e90 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	4603      	mov	r3, r0
 8009e98:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e9e:	f113 0f0d 	cmn.w	r3, #13
 8009ea2:	d009      	beq.n	8009eb8 <lwip_netconn_err_to_msg+0x28>
 8009ea4:	f113 0f0d 	cmn.w	r3, #13
 8009ea8:	dc0c      	bgt.n	8009ec4 <lwip_netconn_err_to_msg+0x34>
 8009eaa:	f113 0f0f 	cmn.w	r3, #15
 8009eae:	d007      	beq.n	8009ec0 <lwip_netconn_err_to_msg+0x30>
 8009eb0:	f113 0f0e 	cmn.w	r3, #14
 8009eb4:	d002      	beq.n	8009ebc <lwip_netconn_err_to_msg+0x2c>
 8009eb6:	e005      	b.n	8009ec4 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8009ee4 <lwip_netconn_err_to_msg+0x54>)
 8009eba:	e00e      	b.n	8009eda <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8009ee8 <lwip_netconn_err_to_msg+0x58>)
 8009ebe:	e00c      	b.n	8009eda <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8009eec <lwip_netconn_err_to_msg+0x5c>)
 8009ec2:	e00a      	b.n	8009eda <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d005      	beq.n	8009ed8 <lwip_netconn_err_to_msg+0x48>
 8009ecc:	4b08      	ldr	r3, [pc, #32]	@ (8009ef0 <lwip_netconn_err_to_msg+0x60>)
 8009ece:	227d      	movs	r2, #125	@ 0x7d
 8009ed0:	4908      	ldr	r1, [pc, #32]	@ (8009ef4 <lwip_netconn_err_to_msg+0x64>)
 8009ed2:	4809      	ldr	r0, [pc, #36]	@ (8009ef8 <lwip_netconn_err_to_msg+0x68>)
 8009ed4:	f01b faf8 	bl	80254c8 <iprintf>
      return NULL;
 8009ed8:	2300      	movs	r3, #0
  }
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3708      	adds	r7, #8
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	0802a194 	.word	0x0802a194
 8009ee8:	0802a195 	.word	0x0802a195
 8009eec:	0802a196 	.word	0x0802a196
 8009ef0:	08026b9c 	.word	0x08026b9c
 8009ef4:	08026bd0 	.word	0x08026bd0
 8009ef8:	08026be0 	.word	0x08026be0

08009efc <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d105      	bne.n	8009f18 <lwip_netconn_is_err_msg+0x1c>
 8009f0c:	4b12      	ldr	r3, [pc, #72]	@ (8009f58 <lwip_netconn_is_err_msg+0x5c>)
 8009f0e:	2285      	movs	r2, #133	@ 0x85
 8009f10:	4912      	ldr	r1, [pc, #72]	@ (8009f5c <lwip_netconn_is_err_msg+0x60>)
 8009f12:	4813      	ldr	r0, [pc, #76]	@ (8009f60 <lwip_netconn_is_err_msg+0x64>)
 8009f14:	f01b fad8 	bl	80254c8 <iprintf>

  if (msg == &netconn_aborted) {
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	4a12      	ldr	r2, [pc, #72]	@ (8009f64 <lwip_netconn_is_err_msg+0x68>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d104      	bne.n	8009f2a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	22f3      	movs	r2, #243	@ 0xf3
 8009f24:	701a      	strb	r2, [r3, #0]
    return 1;
 8009f26:	2301      	movs	r3, #1
 8009f28:	e012      	b.n	8009f50 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4a0e      	ldr	r2, [pc, #56]	@ (8009f68 <lwip_netconn_is_err_msg+0x6c>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d104      	bne.n	8009f3c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	22f2      	movs	r2, #242	@ 0xf2
 8009f36:	701a      	strb	r2, [r3, #0]
    return 1;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e009      	b.n	8009f50 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	4a0b      	ldr	r2, [pc, #44]	@ (8009f6c <lwip_netconn_is_err_msg+0x70>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d104      	bne.n	8009f4e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	22f1      	movs	r2, #241	@ 0xf1
 8009f48:	701a      	strb	r2, [r3, #0]
    return 1;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e000      	b.n	8009f50 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3708      	adds	r7, #8
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	08026b9c 	.word	0x08026b9c
 8009f5c:	08026c08 	.word	0x08026c08
 8009f60:	08026be0 	.word	0x08026be0
 8009f64:	0802a194 	.word	0x0802a194
 8009f68:	0802a195 	.word	0x0802a195
 8009f6c:	0802a196 	.word	0x0802a196

08009f70 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b088      	sub	sp, #32
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	607a      	str	r2, [r7, #4]
 8009f7c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d105      	bne.n	8009f90 <recv_udp+0x20>
 8009f84:	4b34      	ldr	r3, [pc, #208]	@ (800a058 <recv_udp+0xe8>)
 8009f86:	22e5      	movs	r2, #229	@ 0xe5
 8009f88:	4934      	ldr	r1, [pc, #208]	@ (800a05c <recv_udp+0xec>)
 8009f8a:	4835      	ldr	r0, [pc, #212]	@ (800a060 <recv_udp+0xf0>)
 8009f8c:	f01b fa9c 	bl	80254c8 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d105      	bne.n	8009fa2 <recv_udp+0x32>
 8009f96:	4b30      	ldr	r3, [pc, #192]	@ (800a058 <recv_udp+0xe8>)
 8009f98:	22e6      	movs	r2, #230	@ 0xe6
 8009f9a:	4932      	ldr	r1, [pc, #200]	@ (800a064 <recv_udp+0xf4>)
 8009f9c:	4830      	ldr	r0, [pc, #192]	@ (800a060 <recv_udp+0xf0>)
 8009f9e:	f01b fa93 	bl	80254c8 <iprintf>
  conn = (struct netconn *)arg;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d103      	bne.n	8009fb4 <recv_udp+0x44>
    pbuf_free(p);
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f004 fbef 	bl	800e790 <pbuf_free>
    return;
 8009fb2:	e04d      	b.n	800a050 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	68ba      	ldr	r2, [r7, #8]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d005      	beq.n	8009fca <recv_udp+0x5a>
 8009fbe:	4b26      	ldr	r3, [pc, #152]	@ (800a058 <recv_udp+0xe8>)
 8009fc0:	22ee      	movs	r2, #238	@ 0xee
 8009fc2:	4929      	ldr	r1, [pc, #164]	@ (800a068 <recv_udp+0xf8>)
 8009fc4:	4826      	ldr	r0, [pc, #152]	@ (800a060 <recv_udp+0xf0>)
 8009fc6:	f01b fa7f 	bl	80254c8 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009fca:	69fb      	ldr	r3, [r7, #28]
 8009fcc:	3310      	adds	r3, #16
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f00e f985 	bl	80182de <sys_mbox_valid>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d103      	bne.n	8009fe2 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f004 fbd8 	bl	800e790 <pbuf_free>
    return;
 8009fe0:	e036      	b.n	800a050 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009fe2:	2006      	movs	r0, #6
 8009fe4:	f003 fc50 	bl	800d888 <memp_malloc>
 8009fe8:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8009fea:	69bb      	ldr	r3, [r7, #24]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d103      	bne.n	8009ff8 <recv_udp+0x88>
    pbuf_free(p);
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f004 fbcd 	bl	800e790 <pbuf_free>
    return;
 8009ff6:	e02b      	b.n	800a050 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d002      	beq.n	800a010 <recv_udp+0xa0>
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	e000      	b.n	800a012 <recv_udp+0xa2>
 800a010:	2300      	movs	r3, #0
 800a012:	69ba      	ldr	r2, [r7, #24]
 800a014:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a01a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	891b      	ldrh	r3, [r3, #8]
 800a020:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	3310      	adds	r3, #16
 800a026:	69b9      	ldr	r1, [r7, #24]
 800a028:	4618      	mov	r0, r3
 800a02a:	f00e f8e3 	bl	80181f4 <sys_mbox_trypost>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d003      	beq.n	800a03c <recv_udp+0xcc>
    netbuf_delete(buf);
 800a034:	69b8      	ldr	r0, [r7, #24]
 800a036:	f001 fab1 	bl	800b59c <netbuf_delete>
    return;
 800a03a:	e009      	b.n	800a050 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a040:	2b00      	cmp	r3, #0
 800a042:	d005      	beq.n	800a050 <recv_udp+0xe0>
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a048:	8afa      	ldrh	r2, [r7, #22]
 800a04a:	2100      	movs	r1, #0
 800a04c:	69f8      	ldr	r0, [r7, #28]
 800a04e:	4798      	blx	r3
  }
}
 800a050:	3720      	adds	r7, #32
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	08026b9c 	.word	0x08026b9c
 800a05c:	08026c14 	.word	0x08026c14
 800a060:	08026be0 	.word	0x08026be0
 800a064:	08026c38 	.word	0x08026c38
 800a068:	08026c58 	.word	0x08026c58

0800a06c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b088      	sub	sp, #32
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	607a      	str	r2, [r7, #4]
 800a078:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d106      	bne.n	800a08e <recv_tcp+0x22>
 800a080:	4b36      	ldr	r3, [pc, #216]	@ (800a15c <recv_tcp+0xf0>)
 800a082:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a086:	4936      	ldr	r1, [pc, #216]	@ (800a160 <recv_tcp+0xf4>)
 800a088:	4836      	ldr	r0, [pc, #216]	@ (800a164 <recv_tcp+0xf8>)
 800a08a:	f01b fa1d 	bl	80254c8 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d106      	bne.n	800a0a2 <recv_tcp+0x36>
 800a094:	4b31      	ldr	r3, [pc, #196]	@ (800a15c <recv_tcp+0xf0>)
 800a096:	f240 122d 	movw	r2, #301	@ 0x12d
 800a09a:	4933      	ldr	r1, [pc, #204]	@ (800a168 <recv_tcp+0xfc>)
 800a09c:	4831      	ldr	r0, [pc, #196]	@ (800a164 <recv_tcp+0xf8>)
 800a09e:	f01b fa13 	bl	80254c8 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800a0a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d006      	beq.n	800a0b8 <recv_tcp+0x4c>
 800a0aa:	4b2c      	ldr	r3, [pc, #176]	@ (800a15c <recv_tcp+0xf0>)
 800a0ac:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800a0b0:	492e      	ldr	r1, [pc, #184]	@ (800a16c <recv_tcp+0x100>)
 800a0b2:	482c      	ldr	r0, [pc, #176]	@ (800a164 <recv_tcp+0xf8>)
 800a0b4:	f01b fa08 	bl	80254c8 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d102      	bne.n	800a0c8 <recv_tcp+0x5c>
    return ERR_VAL;
 800a0c2:	f06f 0305 	mvn.w	r3, #5
 800a0c6:	e045      	b.n	800a154 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	68ba      	ldr	r2, [r7, #8]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d006      	beq.n	800a0e0 <recv_tcp+0x74>
 800a0d2:	4b22      	ldr	r3, [pc, #136]	@ (800a15c <recv_tcp+0xf0>)
 800a0d4:	f240 1235 	movw	r2, #309	@ 0x135
 800a0d8:	4925      	ldr	r1, [pc, #148]	@ (800a170 <recv_tcp+0x104>)
 800a0da:	4822      	ldr	r0, [pc, #136]	@ (800a164 <recv_tcp+0xf8>)
 800a0dc:	f01b f9f4 	bl	80254c8 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	3310      	adds	r3, #16
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f00e f8fa 	bl	80182de <sys_mbox_valid>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d10d      	bne.n	800a10c <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d008      	beq.n	800a108 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	891b      	ldrh	r3, [r3, #8]
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	68b8      	ldr	r0, [r7, #8]
 800a0fe:	f005 fa5f 	bl	800f5c0 <tcp_recved>
      pbuf_free(p);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f004 fb44 	bl	800e790 <pbuf_free>
    }
    return ERR_OK;
 800a108:	2300      	movs	r3, #0
 800a10a:	e023      	b.n	800a154 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d005      	beq.n	800a11e <recv_tcp+0xb2>
    msg = p;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	891b      	ldrh	r3, [r3, #8]
 800a11a:	83fb      	strh	r3, [r7, #30]
 800a11c:	e003      	b.n	800a126 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800a11e:	4b15      	ldr	r3, [pc, #84]	@ (800a174 <recv_tcp+0x108>)
 800a120:	61bb      	str	r3, [r7, #24]
    len = 0;
 800a122:	2300      	movs	r3, #0
 800a124:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	3310      	adds	r3, #16
 800a12a:	69b9      	ldr	r1, [r7, #24]
 800a12c:	4618      	mov	r0, r3
 800a12e:	f00e f861 	bl	80181f4 <sys_mbox_trypost>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d002      	beq.n	800a13e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800a138:	f04f 33ff 	mov.w	r3, #4294967295
 800a13c:	e00a      	b.n	800a154 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a142:	2b00      	cmp	r3, #0
 800a144:	d005      	beq.n	800a152 <recv_tcp+0xe6>
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a14a:	8bfa      	ldrh	r2, [r7, #30]
 800a14c:	2100      	movs	r1, #0
 800a14e:	6978      	ldr	r0, [r7, #20]
 800a150:	4798      	blx	r3
  }

  return ERR_OK;
 800a152:	2300      	movs	r3, #0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3720      	adds	r7, #32
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	08026b9c 	.word	0x08026b9c
 800a160:	08026c78 	.word	0x08026c78
 800a164:	08026be0 	.word	0x08026be0
 800a168:	08026c9c 	.word	0x08026c9c
 800a16c:	08026cbc 	.word	0x08026cbc
 800a170:	08026cd4 	.word	0x08026cd4
 800a174:	0802a196 	.word	0x0802a196

0800a178 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d106      	bne.n	800a19a <poll_tcp+0x22>
 800a18c:	4b2b      	ldr	r3, [pc, #172]	@ (800a23c <poll_tcp+0xc4>)
 800a18e:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800a192:	492b      	ldr	r1, [pc, #172]	@ (800a240 <poll_tcp+0xc8>)
 800a194:	482b      	ldr	r0, [pc, #172]	@ (800a244 <poll_tcp+0xcc>)
 800a196:	f01b f997 	bl	80254c8 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	785b      	ldrb	r3, [r3, #1]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d104      	bne.n	800a1ac <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a1a2:	2101      	movs	r1, #1
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f000 fe6d 	bl	800ae84 <lwip_netconn_do_writemore>
 800a1aa:	e016      	b.n	800a1da <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	785b      	ldrb	r3, [r3, #1]
 800a1b0:	2b04      	cmp	r3, #4
 800a1b2:	d112      	bne.n	800a1da <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d00a      	beq.n	800a1d2 <poll_tcp+0x5a>
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1c0:	7a5b      	ldrb	r3, [r3, #9]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d005      	beq.n	800a1d2 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ca:	7a5a      	ldrb	r2, [r3, #9]
 800a1cc:	3a01      	subs	r2, #1
 800a1ce:	b2d2      	uxtb	r2, r2
 800a1d0:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a1d2:	2101      	movs	r1, #1
 800a1d4:	68f8      	ldr	r0, [r7, #12]
 800a1d6:	f000 fb49 	bl	800a86c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a1e0:	f003 0310 	and.w	r3, r3, #16
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d023      	beq.n	800a230 <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d01f      	beq.n	800a230 <poll_tcp+0xb8>
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a1f8:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800a1fc:	d318      	bcc.n	800a230 <poll_tcp+0xb8>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a206:	2b04      	cmp	r3, #4
 800a208:	d812      	bhi.n	800a230 <poll_tcp+0xb8>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a210:	f023 0310 	bic.w	r3, r3, #16
 800a214:	b2da      	uxtb	r2, r3
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a220:	2b00      	cmp	r3, #0
 800a222:	d005      	beq.n	800a230 <poll_tcp+0xb8>
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a228:	2200      	movs	r2, #0
 800a22a:	2102      	movs	r1, #2
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a230:	2300      	movs	r3, #0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	08026b9c 	.word	0x08026b9c
 800a240:	08026cf4 	.word	0x08026cf4
 800a244:	08026be0 	.word	0x08026be0

0800a248 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b086      	sub	sp, #24
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	4613      	mov	r3, r2
 800a254:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d106      	bne.n	800a26e <sent_tcp+0x26>
 800a260:	4b21      	ldr	r3, [pc, #132]	@ (800a2e8 <sent_tcp+0xa0>)
 800a262:	f240 1293 	movw	r2, #403	@ 0x193
 800a266:	4921      	ldr	r1, [pc, #132]	@ (800a2ec <sent_tcp+0xa4>)
 800a268:	4821      	ldr	r0, [pc, #132]	@ (800a2f0 <sent_tcp+0xa8>)
 800a26a:	f01b f92d 	bl	80254c8 <iprintf>

  if (conn) {
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d034      	beq.n	800a2de <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	785b      	ldrb	r3, [r3, #1]
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d104      	bne.n	800a286 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a27c:	2101      	movs	r1, #1
 800a27e:	6978      	ldr	r0, [r7, #20]
 800a280:	f000 fe00 	bl	800ae84 <lwip_netconn_do_writemore>
 800a284:	e007      	b.n	800a296 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	785b      	ldrb	r3, [r3, #1]
 800a28a:	2b04      	cmp	r3, #4
 800a28c:	d103      	bne.n	800a296 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a28e:	2101      	movs	r1, #1
 800a290:	6978      	ldr	r0, [r7, #20]
 800a292:	f000 faeb 	bl	800a86c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d01f      	beq.n	800a2de <sent_tcp+0x96>
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a2a6:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800a2aa:	d318      	bcc.n	800a2de <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a2b4:	2b04      	cmp	r3, #4
 800a2b6:	d812      	bhi.n	800a2de <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a2be:	f023 0310 	bic.w	r3, r3, #16
 800a2c2:	b2da      	uxtb	r2, r3
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d005      	beq.n	800a2de <sent_tcp+0x96>
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2d6:	88fa      	ldrh	r2, [r7, #6]
 800a2d8:	2102      	movs	r1, #2
 800a2da:	6978      	ldr	r0, [r7, #20]
 800a2dc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3718      	adds	r7, #24
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	08026b9c 	.word	0x08026b9c
 800a2ec:	08026cf4 	.word	0x08026cf4
 800a2f0:	08026be0 	.word	0x08026be0

0800a2f4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b088      	sub	sp, #32
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d106      	bne.n	800a318 <err_tcp+0x24>
 800a30a:	4b61      	ldr	r3, [pc, #388]	@ (800a490 <err_tcp+0x19c>)
 800a30c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800a310:	4960      	ldr	r1, [pc, #384]	@ (800a494 <err_tcp+0x1a0>)
 800a312:	4861      	ldr	r0, [pc, #388]	@ (800a498 <err_tcp+0x1a4>)
 800a314:	f01b f8d8 	bl	80254c8 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800a318:	f00e f8fc 	bl	8018514 <sys_arch_protect>
 800a31c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	2200      	movs	r2, #0
 800a322:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800a324:	69fb      	ldr	r3, [r7, #28]
 800a326:	78fa      	ldrb	r2, [r7, #3]
 800a328:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a32a:	69fb      	ldr	r3, [r7, #28]
 800a32c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a330:	f043 0301 	orr.w	r3, r3, #1
 800a334:	b2da      	uxtb	r2, r3
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	f883 2020 	strb.w	r2, [r3, #32]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	785b      	ldrb	r3, [r3, #1]
 800a340:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	2200      	movs	r2, #0
 800a346:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800a348:	69b8      	ldr	r0, [r7, #24]
 800a34a:	f00e f8f1 	bl	8018530 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a352:	2b00      	cmp	r3, #0
 800a354:	d005      	beq.n	800a362 <err_tcp+0x6e>
 800a356:	69fb      	ldr	r3, [r7, #28]
 800a358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a35a:	2200      	movs	r2, #0
 800a35c:	2104      	movs	r1, #4
 800a35e:	69f8      	ldr	r0, [r7, #28]
 800a360:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a366:	2b00      	cmp	r3, #0
 800a368:	d005      	beq.n	800a376 <err_tcp+0x82>
 800a36a:	69fb      	ldr	r3, [r7, #28]
 800a36c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a36e:	2200      	movs	r2, #0
 800a370:	2100      	movs	r1, #0
 800a372:	69f8      	ldr	r0, [r7, #28]
 800a374:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a376:	69fb      	ldr	r3, [r7, #28]
 800a378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d005      	beq.n	800a38a <err_tcp+0x96>
 800a37e:	69fb      	ldr	r3, [r7, #28]
 800a380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a382:	2200      	movs	r2, #0
 800a384:	2102      	movs	r1, #2
 800a386:	69f8      	ldr	r0, [r7, #28]
 800a388:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800a38a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a38e:	4618      	mov	r0, r3
 800a390:	f7ff fd7e 	bl	8009e90 <lwip_netconn_err_to_msg>
 800a394:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a396:	69fb      	ldr	r3, [r7, #28]
 800a398:	3310      	adds	r3, #16
 800a39a:	4618      	mov	r0, r3
 800a39c:	f00d ff9f 	bl	80182de <sys_mbox_valid>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d005      	beq.n	800a3b2 <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a3a6:	69fb      	ldr	r3, [r7, #28]
 800a3a8:	3310      	adds	r3, #16
 800a3aa:	6939      	ldr	r1, [r7, #16]
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f00d ff21 	bl	80181f4 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a3b2:	69fb      	ldr	r3, [r7, #28]
 800a3b4:	3314      	adds	r3, #20
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f00d ff91 	bl	80182de <sys_mbox_valid>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d005      	beq.n	800a3ce <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a3c2:	69fb      	ldr	r3, [r7, #28]
 800a3c4:	3314      	adds	r3, #20
 800a3c6:	6939      	ldr	r1, [r7, #16]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f00d ff13 	bl	80181f4 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a3ce:	7dfb      	ldrb	r3, [r7, #23]
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d005      	beq.n	800a3e0 <err_tcp+0xec>
 800a3d4:	7dfb      	ldrb	r3, [r7, #23]
 800a3d6:	2b04      	cmp	r3, #4
 800a3d8:	d002      	beq.n	800a3e0 <err_tcp+0xec>
 800a3da:	7dfb      	ldrb	r3, [r7, #23]
 800a3dc:	2b03      	cmp	r3, #3
 800a3de:	d146      	bne.n	800a46e <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a3e0:	69fb      	ldr	r3, [r7, #28]
 800a3e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a3e6:	f003 0304 	and.w	r3, r3, #4
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	bf14      	ite	ne
 800a3ee:	2301      	movne	r3, #1
 800a3f0:	2300      	moveq	r3, #0
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a3fc:	f023 0304 	bic.w	r3, r3, #4
 800a400:	b2da      	uxtb	r2, r3
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	f883 2020 	strb.w	r2, [r3, #32]

    if (!was_nonblocking_connect) {
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d13b      	bne.n	800a486 <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a40e:	69fb      	ldr	r3, [r7, #28]
 800a410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a412:	2b00      	cmp	r3, #0
 800a414:	d106      	bne.n	800a424 <err_tcp+0x130>
 800a416:	4b1e      	ldr	r3, [pc, #120]	@ (800a490 <err_tcp+0x19c>)
 800a418:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800a41c:	491f      	ldr	r1, [pc, #124]	@ (800a49c <err_tcp+0x1a8>)
 800a41e:	481e      	ldr	r0, [pc, #120]	@ (800a498 <err_tcp+0x1a4>)
 800a420:	f01b f852 	bl	80254c8 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800a424:	7dfb      	ldrb	r3, [r7, #23]
 800a426:	2b04      	cmp	r3, #4
 800a428:	d104      	bne.n	800a434 <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a42a:	69fb      	ldr	r3, [r7, #28]
 800a42c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a42e:	2200      	movs	r2, #0
 800a430:	711a      	strb	r2, [r3, #4]
 800a432:	e003      	b.n	800a43c <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a434:	69fb      	ldr	r3, [r7, #28]
 800a436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a438:	78fa      	ldrb	r2, [r7, #3]
 800a43a:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	330c      	adds	r3, #12
 800a444:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a446:	68b8      	ldr	r0, [r7, #8]
 800a448:	f00d ffda 	bl	8018400 <sys_sem_valid>
 800a44c:	4603      	mov	r3, r0
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d106      	bne.n	800a460 <err_tcp+0x16c>
 800a452:	4b0f      	ldr	r3, [pc, #60]	@ (800a490 <err_tcp+0x19c>)
 800a454:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800a458:	4911      	ldr	r1, [pc, #68]	@ (800a4a0 <err_tcp+0x1ac>)
 800a45a:	480f      	ldr	r0, [pc, #60]	@ (800a498 <err_tcp+0x1a4>)
 800a45c:	f01b f834 	bl	80254c8 <iprintf>
      conn->current_msg = NULL;
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	2200      	movs	r2, #0
 800a464:	625a      	str	r2, [r3, #36]	@ 0x24
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a466:	68b8      	ldr	r0, [r7, #8]
 800a468:	f00d ffb0 	bl	80183cc <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a46c:	e00b      	b.n	800a486 <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a472:	2b00      	cmp	r3, #0
 800a474:	d008      	beq.n	800a488 <err_tcp+0x194>
 800a476:	4b06      	ldr	r3, [pc, #24]	@ (800a490 <err_tcp+0x19c>)
 800a478:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800a47c:	4909      	ldr	r1, [pc, #36]	@ (800a4a4 <err_tcp+0x1b0>)
 800a47e:	4806      	ldr	r0, [pc, #24]	@ (800a498 <err_tcp+0x1a4>)
 800a480:	f01b f822 	bl	80254c8 <iprintf>
  }
}
 800a484:	e000      	b.n	800a488 <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 800a486:	bf00      	nop
}
 800a488:	bf00      	nop
 800a48a:	3720      	adds	r7, #32
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	08026b9c 	.word	0x08026b9c
 800a494:	08026cf4 	.word	0x08026cf4
 800a498:	08026be0 	.word	0x08026be0
 800a49c:	08026d04 	.word	0x08026d04
 800a4a0:	08026d20 	.word	0x08026d20
 800a4a4:	08026d3c 	.word	0x08026d3c

0800a4a8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a4b6:	6879      	ldr	r1, [r7, #4]
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f005 ff49 	bl	8010350 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a4be:	490a      	ldr	r1, [pc, #40]	@ (800a4e8 <setup_tcp+0x40>)
 800a4c0:	68f8      	ldr	r0, [r7, #12]
 800a4c2:	f005 ff57 	bl	8010374 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a4c6:	4909      	ldr	r1, [pc, #36]	@ (800a4ec <setup_tcp+0x44>)
 800a4c8:	68f8      	ldr	r0, [r7, #12]
 800a4ca:	f005 ff75 	bl	80103b8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a4ce:	2202      	movs	r2, #2
 800a4d0:	4907      	ldr	r1, [pc, #28]	@ (800a4f0 <setup_tcp+0x48>)
 800a4d2:	68f8      	ldr	r0, [r7, #12]
 800a4d4:	f005 ffcc 	bl	8010470 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a4d8:	4906      	ldr	r1, [pc, #24]	@ (800a4f4 <setup_tcp+0x4c>)
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f005 ff8e 	bl	80103fc <tcp_err>
}
 800a4e0:	bf00      	nop
 800a4e2:	3710      	adds	r7, #16
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	0800a06d 	.word	0x0800a06d
 800a4ec:	0800a249 	.word	0x0800a249
 800a4f0:	0800a179 	.word	0x0800a179
 800a4f4:	0800a2f5 	.word	0x0800a2f5

0800a4f8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a4f8:	b590      	push	{r4, r7, lr}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a500:	2300      	movs	r3, #0
 800a502:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d006      	beq.n	800a51c <pcb_new+0x24>
 800a50e:	4b2b      	ldr	r3, [pc, #172]	@ (800a5bc <pcb_new+0xc4>)
 800a510:	f240 2265 	movw	r2, #613	@ 0x265
 800a514:	492a      	ldr	r1, [pc, #168]	@ (800a5c0 <pcb_new+0xc8>)
 800a516:	482b      	ldr	r0, [pc, #172]	@ (800a5c4 <pcb_new+0xcc>)
 800a518:	f01a ffd6 	bl	80254c8 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a526:	2b10      	cmp	r3, #16
 800a528:	d022      	beq.n	800a570 <pcb_new+0x78>
 800a52a:	2b20      	cmp	r3, #32
 800a52c:	d133      	bne.n	800a596 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681c      	ldr	r4, [r3, #0]
 800a532:	7bfb      	ldrb	r3, [r7, #15]
 800a534:	4618      	mov	r0, r3
 800a536:	f00b f9e8 	bl	801590a <udp_new_ip_type>
 800a53a:	4603      	mov	r3, r0
 800a53c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d02a      	beq.n	800a59e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	2b22      	cmp	r3, #34	@ 0x22
 800a550:	d104      	bne.n	800a55c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	2201      	movs	r2, #1
 800a55a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	6858      	ldr	r0, [r3, #4]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	461a      	mov	r2, r3
 800a568:	4917      	ldr	r1, [pc, #92]	@ (800a5c8 <pcb_new+0xd0>)
 800a56a:	f00b f955 	bl	8015818 <udp_recv>
      }
      break;
 800a56e:	e016      	b.n	800a59e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681c      	ldr	r4, [r3, #0]
 800a574:	7bfb      	ldrb	r3, [r7, #15]
 800a576:	4618      	mov	r0, r3
 800a578:	f005 fedc 	bl	8010334 <tcp_new_ip_type>
 800a57c:	4603      	mov	r3, r0
 800a57e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00b      	beq.n	800a5a2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4618      	mov	r0, r3
 800a590:	f7ff ff8a 	bl	800a4a8 <setup_tcp>
      }
      break;
 800a594:	e005      	b.n	800a5a2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	22fa      	movs	r2, #250	@ 0xfa
 800a59a:	711a      	strb	r2, [r3, #4]
      return;
 800a59c:	e00a      	b.n	800a5b4 <pcb_new+0xbc>
      break;
 800a59e:	bf00      	nop
 800a5a0:	e000      	b.n	800a5a4 <pcb_new+0xac>
      break;
 800a5a2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d102      	bne.n	800a5b4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	22ff      	movs	r2, #255	@ 0xff
 800a5b2:	711a      	strb	r2, [r3, #4]
  }
}
 800a5b4:	3714      	adds	r7, #20
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd90      	pop	{r4, r7, pc}
 800a5ba:	bf00      	nop
 800a5bc:	08026b9c 	.word	0x08026b9c
 800a5c0:	08026d80 	.word	0x08026d80
 800a5c4:	08026be0 	.word	0x08026be0
 800a5c8:	08009f71 	.word	0x08009f71

0800a5cc <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d102      	bne.n	800a5ee <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a5e8:	68f8      	ldr	r0, [r7, #12]
 800a5ea:	f7ff ff85 	bl	800a4f8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a5ee:	bf00      	nop
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
	...

0800a5f8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b086      	sub	sp, #24
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	4603      	mov	r3, r0
 800a600:	6039      	str	r1, [r7, #0]
 800a602:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a604:	2300      	movs	r3, #0
 800a606:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a608:	2007      	movs	r0, #7
 800a60a:	f003 f93d 	bl	800d888 <memp_malloc>
 800a60e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d101      	bne.n	800a61a <netconn_alloc+0x22>
    return NULL;
 800a616:	2300      	movs	r3, #0
 800a618:	e056      	b.n	800a6c8 <netconn_alloc+0xd0>
  }

  conn->pending_err = ERR_OK;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2200      	movs	r2, #0
 800a61e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	79fa      	ldrb	r2, [r7, #7]
 800a624:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2200      	movs	r2, #0
 800a62a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a62c:	79fb      	ldrb	r3, [r7, #7]
 800a62e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a632:	2b10      	cmp	r3, #16
 800a634:	d004      	beq.n	800a640 <netconn_alloc+0x48>
 800a636:	2b20      	cmp	r3, #32
 800a638:	d105      	bne.n	800a646 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a63a:	2306      	movs	r3, #6
 800a63c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a63e:	e00a      	b.n	800a656 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a640:	2306      	movs	r3, #6
 800a642:	617b      	str	r3, [r7, #20]
      break;
 800a644:	e007      	b.n	800a656 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a646:	4b22      	ldr	r3, [pc, #136]	@ (800a6d0 <netconn_alloc+0xd8>)
 800a648:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800a64c:	4921      	ldr	r1, [pc, #132]	@ (800a6d4 <netconn_alloc+0xdc>)
 800a64e:	4822      	ldr	r0, [pc, #136]	@ (800a6d8 <netconn_alloc+0xe0>)
 800a650:	f01a ff3a 	bl	80254c8 <iprintf>
      goto free_and_return;
 800a654:	e033      	b.n	800a6be <netconn_alloc+0xc6>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	3310      	adds	r3, #16
 800a65a:	6979      	ldr	r1, [r7, #20]
 800a65c:	4618      	mov	r0, r3
 800a65e:	f00d fd95 	bl	801818c <sys_mbox_new>
 800a662:	4603      	mov	r3, r0
 800a664:	2b00      	cmp	r3, #0
 800a666:	d129      	bne.n	800a6bc <netconn_alloc+0xc4>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	330c      	adds	r3, #12
 800a66c:	2100      	movs	r1, #0
 800a66e:	4618      	mov	r0, r3
 800a670:	f00d fe53 	bl	801831a <sys_sem_new>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d005      	beq.n	800a686 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	3310      	adds	r3, #16
 800a67e:	4618      	mov	r0, r3
 800a680:	f00d fda6 	bl	80181d0 <sys_mbox_free>
    goto free_and_return;
 800a684:	e01b      	b.n	800a6be <netconn_alloc+0xc6>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	3314      	adds	r3, #20
 800a68a:	4618      	mov	r0, r3
 800a68c:	f00d fe38 	bl	8018300 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2200      	movs	r2, #0
 800a694:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f04f 32ff 	mov.w	r2, #4294967295
 800a69c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	683a      	ldr	r2, [r7, #0]
 800a6a2:	629a      	str	r2, [r3, #40]	@ 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	625a      	str	r2, [r3, #36]	@ 0x24
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	7cfa      	ldrb	r2, [r7, #19]
 800a6b4:	f883 2020 	strb.w	r2, [r3, #32]
  return conn;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	e005      	b.n	800a6c8 <netconn_alloc+0xd0>
    goto free_and_return;
 800a6bc:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a6be:	68f9      	ldr	r1, [r7, #12]
 800a6c0:	2007      	movs	r0, #7
 800a6c2:	f003 f957 	bl	800d974 <memp_free>
  return NULL;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3718      	adds	r7, #24
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	08026b9c 	.word	0x08026b9c
 800a6d4:	08026da0 	.word	0x08026da0
 800a6d8:	08026be0 	.word	0x08026be0

0800a6dc <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d006      	beq.n	800a6fa <netconn_free+0x1e>
 800a6ec:	4b1b      	ldr	r3, [pc, #108]	@ (800a75c <netconn_free+0x80>)
 800a6ee:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800a6f2:	491b      	ldr	r1, [pc, #108]	@ (800a760 <netconn_free+0x84>)
 800a6f4:	481b      	ldr	r0, [pc, #108]	@ (800a764 <netconn_free+0x88>)
 800a6f6:	f01a fee7 	bl	80254c8 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	3310      	adds	r3, #16
 800a6fe:	4618      	mov	r0, r3
 800a700:	f00d fded 	bl	80182de <sys_mbox_valid>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d006      	beq.n	800a718 <netconn_free+0x3c>
 800a70a:	4b14      	ldr	r3, [pc, #80]	@ (800a75c <netconn_free+0x80>)
 800a70c:	f240 3223 	movw	r2, #803	@ 0x323
 800a710:	4915      	ldr	r1, [pc, #84]	@ (800a768 <netconn_free+0x8c>)
 800a712:	4814      	ldr	r0, [pc, #80]	@ (800a764 <netconn_free+0x88>)
 800a714:	f01a fed8 	bl	80254c8 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	3314      	adds	r3, #20
 800a71c:	4618      	mov	r0, r3
 800a71e:	f00d fdde 	bl	80182de <sys_mbox_valid>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d006      	beq.n	800a736 <netconn_free+0x5a>
 800a728:	4b0c      	ldr	r3, [pc, #48]	@ (800a75c <netconn_free+0x80>)
 800a72a:	f240 3226 	movw	r2, #806	@ 0x326
 800a72e:	490f      	ldr	r1, [pc, #60]	@ (800a76c <netconn_free+0x90>)
 800a730:	480c      	ldr	r0, [pc, #48]	@ (800a764 <netconn_free+0x88>)
 800a732:	f01a fec9 	bl	80254c8 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	330c      	adds	r3, #12
 800a73a:	4618      	mov	r0, r3
 800a73c:	f00d fe53 	bl	80183e6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	330c      	adds	r3, #12
 800a744:	4618      	mov	r0, r3
 800a746:	f00d fe6c 	bl	8018422 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a74a:	6879      	ldr	r1, [r7, #4]
 800a74c:	2007      	movs	r0, #7
 800a74e:	f003 f911 	bl	800d974 <memp_free>
}
 800a752:	bf00      	nop
 800a754:	3708      	adds	r7, #8
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	08026b9c 	.word	0x08026b9c
 800a760:	08026dc8 	.word	0x08026dc8
 800a764:	08026be0 	.word	0x08026be0
 800a768:	08026df8 	.word	0x08026df8
 800a76c:	08026e34 	.word	0x08026e34

0800a770 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b086      	sub	sp, #24
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	3310      	adds	r3, #16
 800a77c:	4618      	mov	r0, r3
 800a77e:	f00d fdae 	bl	80182de <sys_mbox_valid>
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d02f      	beq.n	800a7e8 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a788:	e018      	b.n	800a7bc <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a792:	2b10      	cmp	r3, #16
 800a794:	d10e      	bne.n	800a7b4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	f107 020f 	add.w	r2, r7, #15
 800a79c:	4611      	mov	r1, r2
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7ff fbac 	bl	8009efc <lwip_netconn_is_err_msg>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d108      	bne.n	800a7bc <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f003 ffef 	bl	800e790 <pbuf_free>
 800a7b2:	e003      	b.n	800a7bc <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f000 fef0 	bl	800b59c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	3310      	adds	r3, #16
 800a7c0:	f107 0210 	add.w	r2, r7, #16
 800a7c4:	4611      	mov	r1, r2
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f00d fd6d 	bl	80182a6 <sys_arch_mbox_tryfetch>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7d2:	d1da      	bne.n	800a78a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	3310      	adds	r3, #16
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f00d fcf9 	bl	80181d0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	3310      	adds	r3, #16
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f00d fd8c 	bl	8018300 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	3314      	adds	r3, #20
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f00d fd76 	bl	80182de <sys_mbox_valid>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d034      	beq.n	800a862 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a7f8:	e01d      	b.n	800a836 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	f107 020e 	add.w	r2, r7, #14
 800a800:	4611      	mov	r1, r2
 800a802:	4618      	mov	r0, r3
 800a804:	f7ff fb7a 	bl	8009efc <lwip_netconn_is_err_msg>
 800a808:	4603      	mov	r3, r0
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d113      	bne.n	800a836 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a812:	6978      	ldr	r0, [r7, #20]
 800a814:	f7ff ffac 	bl	800a770 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d007      	beq.n	800a830 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	4618      	mov	r0, r3
 800a826:	f004 fdb3 	bl	800f390 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	2200      	movs	r2, #0
 800a82e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a830:	6978      	ldr	r0, [r7, #20]
 800a832:	f7ff ff53 	bl	800a6dc <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	3314      	adds	r3, #20
 800a83a:	f107 0210 	add.w	r2, r7, #16
 800a83e:	4611      	mov	r1, r2
 800a840:	4618      	mov	r0, r3
 800a842:	f00d fd30 	bl	80182a6 <sys_arch_mbox_tryfetch>
 800a846:	4603      	mov	r3, r0
 800a848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a84c:	d1d5      	bne.n	800a7fa <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	3314      	adds	r3, #20
 800a852:	4618      	mov	r0, r3
 800a854:	f00d fcbc 	bl	80181d0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	3314      	adds	r3, #20
 800a85c:	4618      	mov	r0, r3
 800a85e:	f00d fd4f 	bl	8018300 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a862:	bf00      	nop
 800a864:	3718      	adds	r7, #24
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
	...

0800a86c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b086      	sub	sp, #24
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	460b      	mov	r3, r1
 800a876:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a878:	2300      	movs	r3, #0
 800a87a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d106      	bne.n	800a890 <lwip_netconn_do_close_internal+0x24>
 800a882:	4b87      	ldr	r3, [pc, #540]	@ (800aaa0 <lwip_netconn_do_close_internal+0x234>)
 800a884:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800a888:	4986      	ldr	r1, [pc, #536]	@ (800aaa4 <lwip_netconn_do_close_internal+0x238>)
 800a88a:	4887      	ldr	r0, [pc, #540]	@ (800aaa8 <lwip_netconn_do_close_internal+0x23c>)
 800a88c:	f01a fe1c 	bl	80254c8 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a898:	2b10      	cmp	r3, #16
 800a89a:	d006      	beq.n	800a8aa <lwip_netconn_do_close_internal+0x3e>
 800a89c:	4b80      	ldr	r3, [pc, #512]	@ (800aaa0 <lwip_netconn_do_close_internal+0x234>)
 800a89e:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800a8a2:	4982      	ldr	r1, [pc, #520]	@ (800aaac <lwip_netconn_do_close_internal+0x240>)
 800a8a4:	4880      	ldr	r0, [pc, #512]	@ (800aaa8 <lwip_netconn_do_close_internal+0x23c>)
 800a8a6:	f01a fe0f 	bl	80254c8 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	785b      	ldrb	r3, [r3, #1]
 800a8ae:	2b04      	cmp	r3, #4
 800a8b0:	d006      	beq.n	800a8c0 <lwip_netconn_do_close_internal+0x54>
 800a8b2:	4b7b      	ldr	r3, [pc, #492]	@ (800aaa0 <lwip_netconn_do_close_internal+0x234>)
 800a8b4:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800a8b8:	497d      	ldr	r1, [pc, #500]	@ (800aab0 <lwip_netconn_do_close_internal+0x244>)
 800a8ba:	487b      	ldr	r0, [pc, #492]	@ (800aaa8 <lwip_netconn_do_close_internal+0x23c>)
 800a8bc:	f01a fe04 	bl	80254c8 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d106      	bne.n	800a8d6 <lwip_netconn_do_close_internal+0x6a>
 800a8c8:	4b75      	ldr	r3, [pc, #468]	@ (800aaa0 <lwip_netconn_do_close_internal+0x234>)
 800a8ca:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800a8ce:	4979      	ldr	r1, [pc, #484]	@ (800aab4 <lwip_netconn_do_close_internal+0x248>)
 800a8d0:	4875      	ldr	r0, [pc, #468]	@ (800aaa8 <lwip_netconn_do_close_internal+0x23c>)
 800a8d2:	f01a fdf9 	bl	80254c8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d106      	bne.n	800a8ec <lwip_netconn_do_close_internal+0x80>
 800a8de:	4b70      	ldr	r3, [pc, #448]	@ (800aaa0 <lwip_netconn_do_close_internal+0x234>)
 800a8e0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800a8e4:	4974      	ldr	r1, [pc, #464]	@ (800aab8 <lwip_netconn_do_close_internal+0x24c>)
 800a8e6:	4870      	ldr	r0, [pc, #448]	@ (800aaa8 <lwip_netconn_do_close_internal+0x23c>)
 800a8e8:	f01a fdee 	bl	80254c8 <iprintf>

  tpcb = conn->pcb.tcp;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8f6:	7a1b      	ldrb	r3, [r3, #8]
 800a8f8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a8fa:	7bfb      	ldrb	r3, [r7, #15]
 800a8fc:	f003 0301 	and.w	r3, r3, #1
 800a900:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a902:	7bfb      	ldrb	r3, [r7, #15]
 800a904:	f003 0302 	and.w	r3, r3, #2
 800a908:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a90a:	7bfb      	ldrb	r3, [r7, #15]
 800a90c:	2b03      	cmp	r3, #3
 800a90e:	d102      	bne.n	800a916 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a910:	2301      	movs	r3, #1
 800a912:	75bb      	strb	r3, [r7, #22]
 800a914:	e01f      	b.n	800a956 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a916:	7bbb      	ldrb	r3, [r7, #14]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d00e      	beq.n	800a93a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a920:	2b05      	cmp	r3, #5
 800a922:	d007      	beq.n	800a934 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a928:	2b06      	cmp	r3, #6
 800a92a:	d003      	beq.n	800a934 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a930:	2b08      	cmp	r3, #8
 800a932:	d102      	bne.n	800a93a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a934:	2301      	movs	r3, #1
 800a936:	75bb      	strb	r3, [r7, #22]
 800a938:	e00d      	b.n	800a956 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a93a:	7b7b      	ldrb	r3, [r7, #13]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d008      	beq.n	800a952 <lwip_netconn_do_close_internal+0xe6>
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	8b5b      	ldrh	r3, [r3, #26]
 800a944:	f003 0310 	and.w	r3, r3, #16
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d002      	beq.n	800a952 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a94c:	2301      	movs	r3, #1
 800a94e:	75bb      	strb	r3, [r7, #22]
 800a950:	e001      	b.n	800a956 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a952:	2300      	movs	r3, #0
 800a954:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a956:	7dbb      	ldrb	r3, [r7, #22]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d003      	beq.n	800a964 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a95c:	2100      	movs	r1, #0
 800a95e:	6938      	ldr	r0, [r7, #16]
 800a960:	f005 fcf6 	bl	8010350 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	7d1b      	ldrb	r3, [r3, #20]
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d104      	bne.n	800a976 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a96c:	2100      	movs	r1, #0
 800a96e:	6938      	ldr	r0, [r7, #16]
 800a970:	f005 fd66 	bl	8010440 <tcp_accept>
 800a974:	e01d      	b.n	800a9b2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a976:	7bbb      	ldrb	r3, [r7, #14]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d007      	beq.n	800a98c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a97c:	2100      	movs	r1, #0
 800a97e:	6938      	ldr	r0, [r7, #16]
 800a980:	f005 fcf8 	bl	8010374 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a984:	2100      	movs	r1, #0
 800a986:	6938      	ldr	r0, [r7, #16]
 800a988:	f005 fd5a 	bl	8010440 <tcp_accept>
    }
    if (shut_tx) {
 800a98c:	7b7b      	ldrb	r3, [r7, #13]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d003      	beq.n	800a99a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a992:	2100      	movs	r1, #0
 800a994:	6938      	ldr	r0, [r7, #16]
 800a996:	f005 fd0f 	bl	80103b8 <tcp_sent>
    }
    if (shut_close) {
 800a99a:	7dbb      	ldrb	r3, [r7, #22]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d008      	beq.n	800a9b2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	2100      	movs	r1, #0
 800a9a4:	6938      	ldr	r0, [r7, #16]
 800a9a6:	f005 fd63 	bl	8010470 <tcp_poll>
      tcp_err(tpcb, NULL);
 800a9aa:	2100      	movs	r1, #0
 800a9ac:	6938      	ldr	r0, [r7, #16]
 800a9ae:	f005 fd25 	bl	80103fc <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a9b2:	7dbb      	ldrb	r3, [r7, #22]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d005      	beq.n	800a9c4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a9b8:	6938      	ldr	r0, [r7, #16]
 800a9ba:	f004 fba3 	bl	800f104 <tcp_close>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	75fb      	strb	r3, [r7, #23]
 800a9c2:	e007      	b.n	800a9d4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a9c4:	7bbb      	ldrb	r3, [r7, #14]
 800a9c6:	7b7a      	ldrb	r2, [r7, #13]
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	6938      	ldr	r0, [r7, #16]
 800a9cc:	f004 fbc6 	bl	800f15c <tcp_shutdown>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a9d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d102      	bne.n	800a9e2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	757b      	strb	r3, [r7, #21]
 800a9e0:	e016      	b.n	800aa10 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a9e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ea:	d10f      	bne.n	800aa0c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f0:	7a5b      	ldrb	r3, [r3, #9]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d10c      	bne.n	800aa10 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a9fa:	7dbb      	ldrb	r3, [r7, #22]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d007      	beq.n	800aa10 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800aa00:	6938      	ldr	r0, [r7, #16]
 800aa02:	f004 fcc5 	bl	800f390 <tcp_abort>
          err = ERR_OK;
 800aa06:	2300      	movs	r3, #0
 800aa08:	75fb      	strb	r3, [r7, #23]
 800aa0a:	e001      	b.n	800aa10 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800aa10:	7d7b      	ldrb	r3, [r7, #21]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d052      	beq.n	800aabc <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	330c      	adds	r3, #12
 800aa1e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa24:	7dfa      	ldrb	r2, [r7, #23]
 800aa26:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	625a      	str	r2, [r3, #36]	@ 0x24
    conn->state = NETCONN_NONE;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800aa34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d129      	bne.n	800aa90 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800aa3c:	7dbb      	ldrb	r3, [r7, #22]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00c      	beq.n	800aa5c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d005      	beq.n	800aa5c <lwip_netconn_do_close_internal+0x1f0>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa54:	2200      	movs	r2, #0
 800aa56:	2104      	movs	r1, #4
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	4798      	blx	r3
      }
      if (shut_rx) {
 800aa5c:	7bbb      	ldrb	r3, [r7, #14]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d009      	beq.n	800aa76 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d005      	beq.n	800aa76 <lwip_netconn_do_close_internal+0x20a>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa6e:	2200      	movs	r2, #0
 800aa70:	2100      	movs	r1, #0
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	4798      	blx	r3
      }
      if (shut_tx) {
 800aa76:	7b7b      	ldrb	r3, [r7, #13]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d009      	beq.n	800aa90 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d005      	beq.n	800aa90 <lwip_netconn_do_close_internal+0x224>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa88:	2200      	movs	r2, #0
 800aa8a:	2102      	movs	r1, #2
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800aa90:	78fb      	ldrb	r3, [r7, #3]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d002      	beq.n	800aa9c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800aa96:	68b8      	ldr	r0, [r7, #8]
 800aa98:	f00d fc98 	bl	80183cc <sys_sem_signal>
    }
    return ERR_OK;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	e03c      	b.n	800ab1a <lwip_netconn_do_close_internal+0x2ae>
 800aaa0:	08026b9c 	.word	0x08026b9c
 800aaa4:	08026e70 	.word	0x08026e70
 800aaa8:	08026be0 	.word	0x08026be0
 800aaac:	08026e80 	.word	0x08026e80
 800aab0:	08026ea0 	.word	0x08026ea0
 800aab4:	08026ec4 	.word	0x08026ec4
 800aab8:	08026d04 	.word	0x08026d04
  }
  if (!close_finished) {
 800aabc:	7d7b      	ldrb	r3, [r7, #21]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d11e      	bne.n	800ab00 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	7d1b      	ldrb	r3, [r3, #20]
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d106      	bne.n	800aad8 <lwip_netconn_do_close_internal+0x26c>
 800aaca:	4b16      	ldr	r3, [pc, #88]	@ (800ab24 <lwip_netconn_do_close_internal+0x2b8>)
 800aacc:	f240 4241 	movw	r2, #1089	@ 0x441
 800aad0:	4915      	ldr	r1, [pc, #84]	@ (800ab28 <lwip_netconn_do_close_internal+0x2bc>)
 800aad2:	4816      	ldr	r0, [pc, #88]	@ (800ab2c <lwip_netconn_do_close_internal+0x2c0>)
 800aad4:	f01a fcf8 	bl	80254c8 <iprintf>
    if (shut_tx) {
 800aad8:	7b7b      	ldrb	r3, [r7, #13]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d003      	beq.n	800aae6 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800aade:	4914      	ldr	r1, [pc, #80]	@ (800ab30 <lwip_netconn_do_close_internal+0x2c4>)
 800aae0:	6938      	ldr	r0, [r7, #16]
 800aae2:	f005 fc69 	bl	80103b8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800aae6:	2201      	movs	r2, #1
 800aae8:	4912      	ldr	r1, [pc, #72]	@ (800ab34 <lwip_netconn_do_close_internal+0x2c8>)
 800aaea:	6938      	ldr	r0, [r7, #16]
 800aaec:	f005 fcc0 	bl	8010470 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800aaf0:	4911      	ldr	r1, [pc, #68]	@ (800ab38 <lwip_netconn_do_close_internal+0x2cc>)
 800aaf2:	6938      	ldr	r0, [r7, #16]
 800aaf4:	f005 fc82 	bl	80103fc <tcp_err>
    tcp_arg(tpcb, conn);
 800aaf8:	6879      	ldr	r1, [r7, #4]
 800aafa:	6938      	ldr	r0, [r7, #16]
 800aafc:	f005 fc28 	bl	8010350 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800ab00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d106      	bne.n	800ab16 <lwip_netconn_do_close_internal+0x2aa>
 800ab08:	4b06      	ldr	r3, [pc, #24]	@ (800ab24 <lwip_netconn_do_close_internal+0x2b8>)
 800ab0a:	f240 424d 	movw	r2, #1101	@ 0x44d
 800ab0e:	490b      	ldr	r1, [pc, #44]	@ (800ab3c <lwip_netconn_do_close_internal+0x2d0>)
 800ab10:	4806      	ldr	r0, [pc, #24]	@ (800ab2c <lwip_netconn_do_close_internal+0x2c0>)
 800ab12:	f01a fcd9 	bl	80254c8 <iprintf>
  return err;
 800ab16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3718      	adds	r7, #24
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	bf00      	nop
 800ab24:	08026b9c 	.word	0x08026b9c
 800ab28:	08026ed8 	.word	0x08026ed8
 800ab2c:	08026be0 	.word	0x08026be0
 800ab30:	0800a249 	.word	0x0800a249
 800ab34:	0800a179 	.word	0x0800a179
 800ab38:	0800a2f5 	.word	0x0800a2f5
 800ab3c:	08026efc 	.word	0x08026efc

0800ab40 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	785b      	ldrb	r3, [r3, #1]
 800ab52:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800ab54:	7afb      	ldrb	r3, [r7, #11]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d00d      	beq.n	800ab76 <lwip_netconn_do_delconn+0x36>
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ab64:	2b10      	cmp	r3, #16
 800ab66:	d006      	beq.n	800ab76 <lwip_netconn_do_delconn+0x36>
 800ab68:	4b61      	ldr	r3, [pc, #388]	@ (800acf0 <lwip_netconn_do_delconn+0x1b0>)
 800ab6a:	f240 425e 	movw	r2, #1118	@ 0x45e
 800ab6e:	4961      	ldr	r1, [pc, #388]	@ (800acf4 <lwip_netconn_do_delconn+0x1b4>)
 800ab70:	4861      	ldr	r0, [pc, #388]	@ (800acf8 <lwip_netconn_do_delconn+0x1b8>)
 800ab72:	f01a fca9 	bl	80254c8 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800ab76:	7afb      	ldrb	r3, [r7, #11]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d005      	beq.n	800ab88 <lwip_netconn_do_delconn+0x48>
 800ab7c:	7afb      	ldrb	r3, [r7, #11]
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	d002      	beq.n	800ab88 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800ab82:	7afb      	ldrb	r3, [r7, #11]
 800ab84:	2b03      	cmp	r3, #3
 800ab86:	d10a      	bne.n	800ab9e <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 800ab88:	7afb      	ldrb	r3, [r7, #11]
 800ab8a:	2b03      	cmp	r3, #3
 800ab8c:	d10b      	bne.n	800aba6 <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ab96:	f003 0304 	and.w	r3, r3, #4
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d103      	bne.n	800aba6 <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	22fb      	movs	r2, #251	@ 0xfb
 800aba2:	711a      	strb	r2, [r3, #4]
 800aba4:	e098      	b.n	800acd8 <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800aba6:	7afb      	ldrb	r3, [r7, #11]
 800aba8:	2b03      	cmp	r3, #3
 800abaa:	d10e      	bne.n	800abca <lwip_netconn_do_delconn+0x8a>
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800abb4:	f003 0304 	and.w	r3, r3, #4
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d106      	bne.n	800abca <lwip_netconn_do_delconn+0x8a>
 800abbc:	4b4c      	ldr	r3, [pc, #304]	@ (800acf0 <lwip_netconn_do_delconn+0x1b0>)
 800abbe:	f240 427a 	movw	r2, #1146	@ 0x47a
 800abc2:	494e      	ldr	r1, [pc, #312]	@ (800acfc <lwip_netconn_do_delconn+0x1bc>)
 800abc4:	484c      	ldr	r0, [pc, #304]	@ (800acf8 <lwip_netconn_do_delconn+0x1b8>)
 800abc6:	f01a fc7f 	bl	80254c8 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2200      	movs	r2, #0
 800abce:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4618      	mov	r0, r3
 800abd6:	f7ff fdcb 	bl	800a770 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d05f      	beq.n	800aca4 <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800abee:	2b10      	cmp	r3, #16
 800abf0:	d00d      	beq.n	800ac0e <lwip_netconn_do_delconn+0xce>
 800abf2:	2b20      	cmp	r3, #32
 800abf4:	d151      	bne.n	800ac9a <lwip_netconn_do_delconn+0x15a>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	2200      	movs	r2, #0
 800abfe:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	4618      	mov	r0, r3
 800ac08:	f00a fe26 	bl	8015858 <udp_remove>
          break;
 800ac0c:	e046      	b.n	800ac9c <lwip_netconn_do_delconn+0x15c>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d006      	beq.n	800ac26 <lwip_netconn_do_delconn+0xe6>
 800ac18:	4b35      	ldr	r3, [pc, #212]	@ (800acf0 <lwip_netconn_do_delconn+0x1b0>)
 800ac1a:	f240 4294 	movw	r2, #1172	@ 0x494
 800ac1e:	4938      	ldr	r1, [pc, #224]	@ (800ad00 <lwip_netconn_do_delconn+0x1c0>)
 800ac20:	4835      	ldr	r0, [pc, #212]	@ (800acf8 <lwip_netconn_do_delconn+0x1b8>)
 800ac22:	f01a fc51 	bl	80254c8 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2204      	movs	r2, #4
 800ac2c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2203      	movs	r2, #3
 800ac32:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2100      	movs	r1, #0
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7ff fe12 	bl	800a86c <lwip_netconn_do_close_internal>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d04b      	beq.n	800ace6 <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	785b      	ldrb	r3, [r3, #1]
 800ac54:	2b04      	cmp	r3, #4
 800ac56:	d006      	beq.n	800ac66 <lwip_netconn_do_delconn+0x126>
 800ac58:	4b25      	ldr	r3, [pc, #148]	@ (800acf0 <lwip_netconn_do_delconn+0x1b0>)
 800ac5a:	f240 429a 	movw	r2, #1178	@ 0x49a
 800ac5e:	4929      	ldr	r1, [pc, #164]	@ (800ad04 <lwip_netconn_do_delconn+0x1c4>)
 800ac60:	4825      	ldr	r0, [pc, #148]	@ (800acf8 <lwip_netconn_do_delconn+0x1b8>)
 800ac62:	f01a fc31 	bl	80254c8 <iprintf>
            UNLOCK_TCPIP_CORE();
 800ac66:	4828      	ldr	r0, [pc, #160]	@ (800ad08 <lwip_netconn_do_delconn+0x1c8>)
 800ac68:	f00d fc21 	bl	80184ae <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	330c      	adds	r3, #12
 800ac72:	2100      	movs	r1, #0
 800ac74:	4618      	mov	r0, r3
 800ac76:	f00d fb78 	bl	801836a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800ac7a:	4823      	ldr	r0, [pc, #140]	@ (800ad08 <lwip_netconn_do_delconn+0x1c8>)
 800ac7c:	f00d fc08 	bl	8018490 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	785b      	ldrb	r3, [r3, #1]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d02d      	beq.n	800ace6 <lwip_netconn_do_delconn+0x1a6>
 800ac8a:	4b19      	ldr	r3, [pc, #100]	@ (800acf0 <lwip_netconn_do_delconn+0x1b0>)
 800ac8c:	f240 429e 	movw	r2, #1182	@ 0x49e
 800ac90:	491c      	ldr	r1, [pc, #112]	@ (800ad04 <lwip_netconn_do_delconn+0x1c4>)
 800ac92:	4819      	ldr	r0, [pc, #100]	@ (800acf8 <lwip_netconn_do_delconn+0x1b8>)
 800ac94:	f01a fc18 	bl	80254c8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800ac98:	e025      	b.n	800ace6 <lwip_netconn_do_delconn+0x1a6>
#endif /* LWIP_TCP */
        default:
          break;
 800ac9a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	2200      	movs	r2, #0
 800aca2:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d007      	beq.n	800acbe <lwip_netconn_do_delconn+0x17e>
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	6810      	ldr	r0, [r2, #0]
 800acb8:	2200      	movs	r2, #0
 800acba:	2100      	movs	r1, #0
 800acbc:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d007      	beq.n	800acd8 <lwip_netconn_do_delconn+0x198>
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acce:	68fa      	ldr	r2, [r7, #12]
 800acd0:	6810      	ldr	r0, [r2, #0]
 800acd2:	2200      	movs	r2, #0
 800acd4:	2102      	movs	r1, #2
 800acd6:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	330c      	adds	r3, #12
 800acde:	4618      	mov	r0, r3
 800ace0:	f00d fb8e 	bl	8018400 <sys_sem_valid>
 800ace4:	e000      	b.n	800ace8 <lwip_netconn_do_delconn+0x1a8>
          return;
 800ace6:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800ace8:	3710      	adds	r7, #16
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop
 800acf0:	08026b9c 	.word	0x08026b9c
 800acf4:	08026f0c 	.word	0x08026f0c
 800acf8:	08026be0 	.word	0x08026be0
 800acfc:	08026f20 	.word	0x08026f20
 800ad00:	08026f40 	.word	0x08026f40
 800ad04:	08026f5c 	.word	0x08026f5c
 800ad08:	2000cc0c 	.word	0x2000cc0c

0800ad0c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d025      	beq.n	800ad6e <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ad2c:	2b10      	cmp	r3, #16
 800ad2e:	d00e      	beq.n	800ad4e <lwip_netconn_do_bind+0x42>
 800ad30:	2b20      	cmp	r3, #32
 800ad32:	d119      	bne.n	800ad68 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	6858      	ldr	r0, [r3, #4]
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	6899      	ldr	r1, [r3, #8]
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	899b      	ldrh	r3, [r3, #12]
 800ad42:	461a      	mov	r2, r3
 800ad44:	f00a fcc6 	bl	80156d4 <udp_bind>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	73fb      	strb	r3, [r7, #15]
        break;
 800ad4c:	e011      	b.n	800ad72 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	6858      	ldr	r0, [r3, #4]
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	6899      	ldr	r1, [r3, #8]
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	899b      	ldrh	r3, [r3, #12]
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	f004 fb23 	bl	800f3a8 <tcp_bind>
 800ad62:	4603      	mov	r3, r0
 800ad64:	73fb      	strb	r3, [r7, #15]
        break;
 800ad66:	e004      	b.n	800ad72 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800ad68:	23fa      	movs	r3, #250	@ 0xfa
 800ad6a:	73fb      	strb	r3, [r7, #15]
        break;
 800ad6c:	e001      	b.n	800ad72 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800ad6e:	23fa      	movs	r3, #250	@ 0xfa
 800ad70:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	7bfa      	ldrb	r2, [r7, #15]
 800ad76:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ad78:	bf00      	nop
 800ad7a:	3710      	adds	r7, #16
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4618      	mov	r0, r3
 800ad92:	f7ff f861 	bl	8009e58 <netconn_err>
 800ad96:	4603      	mov	r3, r0
 800ad98:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800ad9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d134      	bne.n	800ae0c <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d02d      	beq.n	800ae08 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800adb6:	2b20      	cmp	r3, #32
 800adb8:	d123      	bne.n	800ae02 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d10c      	bne.n	800adde <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	685a      	ldr	r2, [r3, #4]
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4619      	mov	r1, r3
 800add2:	4610      	mov	r0, r2
 800add4:	f00a fa94 	bl	8015300 <udp_send>
 800add8:	4603      	mov	r3, r0
 800adda:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800addc:	e016      	b.n	800ae0c <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	6858      	ldr	r0, [r3, #4]
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	6819      	ldr	r1, [r3, #0]
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	689b      	ldr	r3, [r3, #8]
 800adee:	f103 0208 	add.w	r2, r3, #8
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	689b      	ldr	r3, [r3, #8]
 800adf6:	899b      	ldrh	r3, [r3, #12]
 800adf8:	f00a fab6 	bl	8015368 <udp_sendto>
 800adfc:	4603      	mov	r3, r0
 800adfe:	73fb      	strb	r3, [r7, #15]
          break;
 800ae00:	e004      	b.n	800ae0c <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800ae02:	23f5      	movs	r3, #245	@ 0xf5
 800ae04:	73fb      	strb	r3, [r7, #15]
          break;
 800ae06:	e001      	b.n	800ae0c <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800ae08:	23f5      	movs	r3, #245	@ 0xf5
 800ae0a:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	7bfa      	ldrb	r2, [r7, #15]
 800ae10:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ae12:	bf00      	nop
 800ae14:	3710      	adds	r7, #16
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b086      	sub	sp, #24
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d022      	beq.n	800ae7c <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ae40:	2b10      	cmp	r3, #16
 800ae42:	d11b      	bne.n	800ae7c <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae50:	d202      	bcs.n	800ae58 <lwip_netconn_do_recv+0x3e>
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	e001      	b.n	800ae5c <lwip_netconn_do_recv+0x42>
 800ae58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ae5c:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	89fa      	ldrh	r2, [r7, #14]
 800ae66:	4611      	mov	r1, r2
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f004 fba9 	bl	800f5c0 <tcp_recved>
        remaining -= recved;
 800ae6e:	89fb      	ldrh	r3, [r7, #14]
 800ae70:	697a      	ldr	r2, [r7, #20]
 800ae72:	1ad3      	subs	r3, r2, r3
 800ae74:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d1e6      	bne.n	800ae4a <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ae7c:	bf00      	nop
 800ae7e:	3718      	adds	r7, #24
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b088      	sub	sp, #32
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800ae90:	2300      	movs	r3, #0
 800ae92:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d106      	bne.n	800aea8 <lwip_netconn_do_writemore+0x24>
 800ae9a:	4b61      	ldr	r3, [pc, #388]	@ (800b020 <lwip_netconn_do_writemore+0x19c>)
 800ae9c:	f240 6273 	movw	r2, #1651	@ 0x673
 800aea0:	4960      	ldr	r1, [pc, #384]	@ (800b024 <lwip_netconn_do_writemore+0x1a0>)
 800aea2:	4861      	ldr	r0, [pc, #388]	@ (800b028 <lwip_netconn_do_writemore+0x1a4>)
 800aea4:	f01a fb10 	bl	80254c8 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	785b      	ldrb	r3, [r3, #1]
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d006      	beq.n	800aebe <lwip_netconn_do_writemore+0x3a>
 800aeb0:	4b5b      	ldr	r3, [pc, #364]	@ (800b020 <lwip_netconn_do_writemore+0x19c>)
 800aeb2:	f240 6274 	movw	r2, #1652	@ 0x674
 800aeb6:	495d      	ldr	r1, [pc, #372]	@ (800b02c <lwip_netconn_do_writemore+0x1a8>)
 800aeb8:	485b      	ldr	r0, [pc, #364]	@ (800b028 <lwip_netconn_do_writemore+0x1a4>)
 800aeba:	f01a fb05 	bl	80254c8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d106      	bne.n	800aed4 <lwip_netconn_do_writemore+0x50>
 800aec6:	4b56      	ldr	r3, [pc, #344]	@ (800b020 <lwip_netconn_do_writemore+0x19c>)
 800aec8:	f240 6275 	movw	r2, #1653	@ 0x675
 800aecc:	4958      	ldr	r1, [pc, #352]	@ (800b030 <lwip_netconn_do_writemore+0x1ac>)
 800aece:	4856      	ldr	r0, [pc, #344]	@ (800b028 <lwip_netconn_do_writemore+0x1a4>)
 800aed0:	f01a fafa 	bl	80254c8 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d106      	bne.n	800aeea <lwip_netconn_do_writemore+0x66>
 800aedc:	4b50      	ldr	r3, [pc, #320]	@ (800b020 <lwip_netconn_do_writemore+0x19c>)
 800aede:	f240 6276 	movw	r2, #1654	@ 0x676
 800aee2:	4954      	ldr	r1, [pc, #336]	@ (800b034 <lwip_netconn_do_writemore+0x1b0>)
 800aee4:	4850      	ldr	r0, [pc, #320]	@ (800b028 <lwip_netconn_do_writemore+0x1a4>)
 800aee6:	f01a faef 	bl	80254c8 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeee:	699a      	ldr	r2, [r3, #24]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aef4:	695b      	ldr	r3, [r3, #20]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d306      	bcc.n	800af08 <lwip_netconn_do_writemore+0x84>
 800aefa:	4b49      	ldr	r3, [pc, #292]	@ (800b020 <lwip_netconn_do_writemore+0x19c>)
 800aefc:	f240 6277 	movw	r2, #1655	@ 0x677
 800af00:	494d      	ldr	r1, [pc, #308]	@ (800b038 <lwip_netconn_do_writemore+0x1b4>)
 800af02:	4849      	ldr	r0, [pc, #292]	@ (800b028 <lwip_netconn_do_writemore+0x1a4>)
 800af04:	f01a fae0 	bl	80254c8 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af0c:	899b      	ldrh	r3, [r3, #12]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d106      	bne.n	800af20 <lwip_netconn_do_writemore+0x9c>
 800af12:	4b43      	ldr	r3, [pc, #268]	@ (800b020 <lwip_netconn_do_writemore+0x19c>)
 800af14:	f240 6279 	movw	r2, #1657	@ 0x679
 800af18:	4948      	ldr	r1, [pc, #288]	@ (800b03c <lwip_netconn_do_writemore+0x1b8>)
 800af1a:	4843      	ldr	r0, [pc, #268]	@ (800b028 <lwip_netconn_do_writemore+0x1a4>)
 800af1c:	f01a fad4 	bl	80254c8 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af24:	7f1b      	ldrb	r3, [r3, #28]
 800af26:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800af2e:	f003 0302 	and.w	r3, r3, #2
 800af32:	2b00      	cmp	r3, #0
 800af34:	d104      	bne.n	800af40 <lwip_netconn_do_writemore+0xbc>
 800af36:	7ebb      	ldrb	r3, [r7, #26]
 800af38:	f003 0304 	and.w	r3, r3, #4
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d001      	beq.n	800af44 <lwip_netconn_do_writemore+0xc0>
 800af40:	2301      	movs	r3, #1
 800af42:	e000      	b.n	800af46 <lwip_netconn_do_writemore+0xc2>
 800af44:	2300      	movs	r3, #0
 800af46:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	681a      	ldr	r2, [r3, #0]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af54:	691b      	ldr	r3, [r3, #16]
 800af56:	4413      	add	r3, r2
 800af58:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	685a      	ldr	r2, [r3, #4]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af66:	691b      	ldr	r3, [r3, #16]
 800af68:	1ad3      	subs	r3, r2, r3
 800af6a:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af72:	d307      	bcc.n	800af84 <lwip_netconn_do_writemore+0x100>
        len = 0xffff;
 800af74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800af78:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800af7a:	7ebb      	ldrb	r3, [r7, #26]
 800af7c:	f043 0302 	orr.w	r3, r3, #2
 800af80:	76bb      	strb	r3, [r7, #26]
 800af82:	e001      	b.n	800af88 <lwip_netconn_do_writemore+0x104>
      } else {
        len = (u16_t)diff;
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800af90:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800af92:	89fa      	ldrh	r2, [r7, #14]
 800af94:	8bbb      	ldrh	r3, [r7, #28]
 800af96:	429a      	cmp	r2, r3
 800af98:	d216      	bcs.n	800afc8 <lwip_netconn_do_writemore+0x144>
        /* don't try to write more than sendbuf */
        len = available;
 800af9a:	89fb      	ldrh	r3, [r7, #14]
 800af9c:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800af9e:	7e3b      	ldrb	r3, [r7, #24]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d00d      	beq.n	800afc0 <lwip_netconn_do_writemore+0x13c>
          if (!len) {
 800afa4:	8bbb      	ldrh	r3, [r7, #28]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d10e      	bne.n	800afc8 <lwip_netconn_do_writemore+0x144>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afae:	699b      	ldr	r3, [r3, #24]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d102      	bne.n	800afba <lwip_netconn_do_writemore+0x136>
 800afb4:	f06f 0306 	mvn.w	r3, #6
 800afb8:	e000      	b.n	800afbc <lwip_netconn_do_writemore+0x138>
 800afba:	2300      	movs	r3, #0
 800afbc:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800afbe:	e08f      	b.n	800b0e0 <lwip_netconn_do_writemore+0x25c>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800afc0:	7ebb      	ldrb	r3, [r7, #26]
 800afc2:	f043 0302 	orr.w	r3, r3, #2
 800afc6:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afcc:	691a      	ldr	r2, [r3, #16]
 800afce:	8bbb      	ldrh	r3, [r7, #28]
 800afd0:	441a      	add	r2, r3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	429a      	cmp	r2, r3
 800afdc:	d906      	bls.n	800afec <lwip_netconn_do_writemore+0x168>
 800afde:	4b10      	ldr	r3, [pc, #64]	@ (800b020 <lwip_netconn_do_writemore+0x19c>)
 800afe0:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800afe4:	4916      	ldr	r1, [pc, #88]	@ (800b040 <lwip_netconn_do_writemore+0x1bc>)
 800afe6:	4810      	ldr	r0, [pc, #64]	@ (800b028 <lwip_netconn_do_writemore+0x1a4>)
 800afe8:	f01a fa6e 	bl	80254c8 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800afec:	8bbb      	ldrh	r3, [r7, #28]
 800afee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d103      	bne.n	800affe <lwip_netconn_do_writemore+0x17a>
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800affc:	d209      	bcs.n	800b012 <lwip_netconn_do_writemore+0x18e>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b002:	8bba      	ldrh	r2, [r7, #28]
 800b004:	429a      	cmp	r2, r3
 800b006:	d11d      	bne.n	800b044 <lwip_netconn_do_writemore+0x1c0>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b00c:	899b      	ldrh	r3, [r3, #12]
 800b00e:	2b01      	cmp	r3, #1
 800b010:	d918      	bls.n	800b044 <lwip_netconn_do_writemore+0x1c0>
        write_more = 1;
 800b012:	2301      	movs	r3, #1
 800b014:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b016:	7ebb      	ldrb	r3, [r7, #26]
 800b018:	f043 0302 	orr.w	r3, r3, #2
 800b01c:	76bb      	strb	r3, [r7, #26]
 800b01e:	e013      	b.n	800b048 <lwip_netconn_do_writemore+0x1c4>
 800b020:	08026b9c 	.word	0x08026b9c
 800b024:	08026cf4 	.word	0x08026cf4
 800b028:	08026be0 	.word	0x08026be0
 800b02c:	08026ffc 	.word	0x08026ffc
 800b030:	08026d04 	.word	0x08026d04
 800b034:	0802701c 	.word	0x0802701c
 800b038:	08027034 	.word	0x08027034
 800b03c:	08027074 	.word	0x08027074
 800b040:	0802709c 	.word	0x0802709c
      } else {
        write_more = 0;
 800b044:	2300      	movs	r3, #0
 800b046:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6858      	ldr	r0, [r3, #4]
 800b04c:	7ebb      	ldrb	r3, [r7, #26]
 800b04e:	8bba      	ldrh	r2, [r7, #28]
 800b050:	6979      	ldr	r1, [r7, #20]
 800b052:	f008 f8b9 	bl	80131c8 <tcp_write>
 800b056:	4603      	mov	r3, r0
 800b058:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800b05a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d12c      	bne.n	800b0bc <lwip_netconn_do_writemore+0x238>
        conn->current_msg->msg.w.offset += len;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b066:	6999      	ldr	r1, [r3, #24]
 800b068:	8bba      	ldrh	r2, [r7, #28]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b06e:	440a      	add	r2, r1
 800b070:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b076:	6919      	ldr	r1, [r3, #16]
 800b078:	8bba      	ldrh	r2, [r7, #28]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b07e:	440a      	add	r2, r1
 800b080:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b086:	691a      	ldr	r2, [r3, #16]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b08c:	689b      	ldr	r3, [r3, #8]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	429a      	cmp	r2, r3
 800b092:	d113      	bne.n	800b0bc <lwip_netconn_do_writemore+0x238>
          conn->current_msg->msg.w.vector_cnt--;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b098:	899a      	ldrh	r2, [r3, #12]
 800b09a:	3a01      	subs	r2, #1
 800b09c:	b292      	uxth	r2, r2
 800b09e:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0a4:	899b      	ldrh	r3, [r3, #12]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d008      	beq.n	800b0bc <lwip_netconn_do_writemore+0x238>
            conn->current_msg->msg.w.vector++;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ae:	689a      	ldr	r2, [r3, #8]
 800b0b0:	3208      	adds	r2, #8
 800b0b2:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800b0bc:	7e7b      	ldrb	r3, [r7, #25]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d004      	beq.n	800b0cc <lwip_netconn_do_writemore+0x248>
 800b0c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	f43f af3e 	beq.w	800af48 <lwip_netconn_do_writemore+0xc4>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800b0cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d004      	beq.n	800b0de <lwip_netconn_do_writemore+0x25a>
 800b0d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0dc:	d136      	bne.n	800b14c <lwip_netconn_do_writemore+0x2c8>
err_mem:
 800b0de:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800b0e0:	7e3b      	ldrb	r3, [r7, #24]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d01b      	beq.n	800b11e <lwip_netconn_do_writemore+0x29a>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ea:	699a      	ldr	r2, [r3, #24]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0f0:	695b      	ldr	r3, [r3, #20]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d213      	bcs.n	800b11e <lwip_netconn_do_writemore+0x29a>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d005      	beq.n	800b10a <lwip_netconn_do_writemore+0x286>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b102:	2200      	movs	r2, #0
 800b104:	2103      	movs	r1, #3
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b110:	f043 0310 	orr.w	r3, r3, #16
 800b114:	b2da      	uxtb	r2, r3
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f883 2020 	strb.w	r2, [r3, #32]
 800b11c:	e016      	b.n	800b14c <lwip_netconn_do_writemore+0x2c8>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b126:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800b12a:	d305      	bcc.n	800b138 <lwip_netconn_do_writemore+0x2b4>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b134:	2b04      	cmp	r3, #4
 800b136:	d909      	bls.n	800b14c <lwip_netconn_do_writemore+0x2c8>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d005      	beq.n	800b14c <lwip_netconn_do_writemore+0x2c8>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b144:	2200      	movs	r2, #0
 800b146:	2103      	movs	r1, #3
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800b14c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d11d      	bne.n	800b190 <lwip_netconn_do_writemore+0x30c>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b158:	699a      	ldr	r2, [r3, #24]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b15e:	695b      	ldr	r3, [r3, #20]
 800b160:	429a      	cmp	r2, r3
 800b162:	d002      	beq.n	800b16a <lwip_netconn_do_writemore+0x2e6>
 800b164:	7e3b      	ldrb	r3, [r7, #24]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d001      	beq.n	800b16e <lwip_netconn_do_writemore+0x2ea>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800b16a:	2301      	movs	r3, #1
 800b16c:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	4618      	mov	r0, r3
 800b174:	f008 fe12 	bl	8013d9c <tcp_output>
 800b178:	4603      	mov	r3, r0
 800b17a:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800b17c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b180:	f113 0f04 	cmn.w	r3, #4
 800b184:	d12c      	bne.n	800b1e0 <lwip_netconn_do_writemore+0x35c>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b186:	7b3b      	ldrb	r3, [r7, #12]
 800b188:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b18a:	2301      	movs	r3, #1
 800b18c:	76fb      	strb	r3, [r7, #27]
 800b18e:	e027      	b.n	800b1e0 <lwip_netconn_do_writemore+0x35c>
      }
    } else if (err == ERR_MEM) {
 800b190:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b194:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b198:	d120      	bne.n	800b1dc <lwip_netconn_do_writemore+0x358>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f008 fdfc 	bl	8013d9c <tcp_output>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b1a8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b1ac:	f113 0f04 	cmn.w	r3, #4
 800b1b0:	d104      	bne.n	800b1bc <lwip_netconn_do_writemore+0x338>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b1b2:	7b7b      	ldrb	r3, [r7, #13]
 800b1b4:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	76fb      	strb	r3, [r7, #27]
 800b1ba:	e011      	b.n	800b1e0 <lwip_netconn_do_writemore+0x35c>
      } else if (dontblock) {
 800b1bc:	7e3b      	ldrb	r3, [r7, #24]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d00e      	beq.n	800b1e0 <lwip_netconn_do_writemore+0x35c>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1c6:	699b      	ldr	r3, [r3, #24]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d102      	bne.n	800b1d2 <lwip_netconn_do_writemore+0x34e>
 800b1cc:	f06f 0306 	mvn.w	r3, #6
 800b1d0:	e000      	b.n	800b1d4 <lwip_netconn_do_writemore+0x350>
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	76fb      	strb	r3, [r7, #27]
 800b1da:	e001      	b.n	800b1e0 <lwip_netconn_do_writemore+0x35c>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b1e0:	7efb      	ldrb	r3, [r7, #27]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d015      	beq.n	800b212 <lwip_netconn_do_writemore+0x38e>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	330c      	adds	r3, #12
 800b1ee:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1f4:	7ffa      	ldrb	r2, [r7, #31]
 800b1f6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	625a      	str	r2, [r3, #36]	@ 0x24
    conn->state = NETCONN_NONE;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b204:	78fb      	ldrb	r3, [r7, #3]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d006      	beq.n	800b218 <lwip_netconn_do_writemore+0x394>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b20a:	68b8      	ldr	r0, [r7, #8]
 800b20c:	f00d f8de 	bl	80183cc <sys_sem_signal>
 800b210:	e002      	b.n	800b218 <lwip_netconn_do_writemore+0x394>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b212:	f04f 33ff 	mov.w	r3, #4294967295
 800b216:	e000      	b.n	800b21a <lwip_netconn_do_writemore+0x396>
  }
#endif
  return ERR_OK;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3720      	adds	r7, #32
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop

0800b224 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4618      	mov	r0, r3
 800b236:	f7fe fe0f 	bl	8009e58 <netconn_err>
 800b23a:	4603      	mov	r3, r0
 800b23c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b23e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d166      	bne.n	800b314 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b250:	2b10      	cmp	r3, #16
 800b252:	d15d      	bne.n	800b310 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	785b      	ldrb	r3, [r3, #1]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d002      	beq.n	800b264 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800b25e:	23fb      	movs	r3, #251	@ 0xfb
 800b260:	73fb      	strb	r3, [r7, #15]
 800b262:	e057      	b.n	800b314 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d04d      	beq.n	800b30a <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	2201      	movs	r2, #1
 800b274:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d006      	beq.n	800b28e <lwip_netconn_do_write+0x6a>
 800b280:	4b28      	ldr	r3, [pc, #160]	@ (800b324 <lwip_netconn_do_write+0x100>)
 800b282:	f240 7223 	movw	r2, #1827	@ 0x723
 800b286:	4928      	ldr	r1, [pc, #160]	@ (800b328 <lwip_netconn_do_write+0x104>)
 800b288:	4828      	ldr	r0, [pc, #160]	@ (800b32c <lwip_netconn_do_write+0x108>)
 800b28a:	f01a f91d 	bl	80254c8 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	695b      	ldr	r3, [r3, #20]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d106      	bne.n	800b2a4 <lwip_netconn_do_write+0x80>
 800b296:	4b23      	ldr	r3, [pc, #140]	@ (800b324 <lwip_netconn_do_write+0x100>)
 800b298:	f240 7224 	movw	r2, #1828	@ 0x724
 800b29c:	4924      	ldr	r1, [pc, #144]	@ (800b330 <lwip_netconn_do_write+0x10c>)
 800b29e:	4823      	ldr	r0, [pc, #140]	@ (800b32c <lwip_netconn_do_write+0x108>)
 800b2a0:	f01a f912 	bl	80254c8 <iprintf>
        msg->conn->current_msg = msg;
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	68ba      	ldr	r2, [r7, #8]
 800b2aa:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	2100      	movs	r1, #0
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7ff fde6 	bl	800ae84 <lwip_netconn_do_writemore>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d02e      	beq.n	800b31c <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	785b      	ldrb	r3, [r3, #1]
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d006      	beq.n	800b2d6 <lwip_netconn_do_write+0xb2>
 800b2c8:	4b16      	ldr	r3, [pc, #88]	@ (800b324 <lwip_netconn_do_write+0x100>)
 800b2ca:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800b2ce:	4919      	ldr	r1, [pc, #100]	@ (800b334 <lwip_netconn_do_write+0x110>)
 800b2d0:	4816      	ldr	r0, [pc, #88]	@ (800b32c <lwip_netconn_do_write+0x108>)
 800b2d2:	f01a f8f9 	bl	80254c8 <iprintf>
          UNLOCK_TCPIP_CORE();
 800b2d6:	4818      	ldr	r0, [pc, #96]	@ (800b338 <lwip_netconn_do_write+0x114>)
 800b2d8:	f00d f8e9 	bl	80184ae <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	330c      	adds	r3, #12
 800b2e2:	2100      	movs	r1, #0
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f00d f840 	bl	801836a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800b2ea:	4813      	ldr	r0, [pc, #76]	@ (800b338 <lwip_netconn_do_write+0x114>)
 800b2ec:	f00d f8d0 	bl	8018490 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	785b      	ldrb	r3, [r3, #1]
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d110      	bne.n	800b31c <lwip_netconn_do_write+0xf8>
 800b2fa:	4b0a      	ldr	r3, [pc, #40]	@ (800b324 <lwip_netconn_do_write+0x100>)
 800b2fc:	f240 722c 	movw	r2, #1836	@ 0x72c
 800b300:	490c      	ldr	r1, [pc, #48]	@ (800b334 <lwip_netconn_do_write+0x110>)
 800b302:	480a      	ldr	r0, [pc, #40]	@ (800b32c <lwip_netconn_do_write+0x108>)
 800b304:	f01a f8e0 	bl	80254c8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800b308:	e008      	b.n	800b31c <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800b30a:	23f5      	movs	r3, #245	@ 0xf5
 800b30c:	73fb      	strb	r3, [r7, #15]
 800b30e:	e001      	b.n	800b314 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800b310:	23fa      	movs	r3, #250	@ 0xfa
 800b312:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	7bfa      	ldrb	r2, [r7, #15]
 800b318:	711a      	strb	r2, [r3, #4]
 800b31a:	e000      	b.n	800b31e <lwip_netconn_do_write+0xfa>
        return;
 800b31c:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800b31e:	3710      	adds	r7, #16
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}
 800b324:	08026b9c 	.word	0x08026b9c
 800b328:	08026f40 	.word	0x08026f40
 800b32c:	08026be0 	.word	0x08026be0
 800b330:	080270c8 	.word	0x080270c8
 800b334:	08026f5c 	.word	0x08026f5c
 800b338:	2000cc0c 	.word	0x2000cc0c

0800b33c <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d06b      	beq.n	800b42a <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	7c1b      	ldrb	r3, [r3, #16]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d007      	beq.n	800b36a <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	685a      	ldr	r2, [r3, #4]
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	6812      	ldr	r2, [r2, #0]
 800b366:	601a      	str	r2, [r3, #0]
 800b368:	e006      	b.n	800b378 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	685a      	ldr	r2, [r3, #4]
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	689b      	ldr	r3, [r3, #8]
 800b374:	6852      	ldr	r2, [r2, #4]
 800b376:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2200      	movs	r2, #0
 800b37c:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b388:	2b10      	cmp	r3, #16
 800b38a:	d021      	beq.n	800b3d0 <lwip_netconn_do_getaddr+0x94>
 800b38c:	2b20      	cmp	r3, #32
 800b38e:	d144      	bne.n	800b41a <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	7c1b      	ldrb	r3, [r3, #16]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d007      	beq.n	800b3a8 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	685a      	ldr	r2, [r3, #4]
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	68db      	ldr	r3, [r3, #12]
 800b3a2:	8a52      	ldrh	r2, [r2, #18]
 800b3a4:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800b3a6:	e044      	b.n	800b432 <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	7c1b      	ldrb	r3, [r3, #16]
 800b3b0:	f003 0304 	and.w	r3, r3, #4
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d103      	bne.n	800b3c0 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	22f5      	movs	r2, #245	@ 0xf5
 800b3bc:	711a      	strb	r2, [r3, #4]
        break;
 800b3be:	e038      	b.n	800b432 <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	685a      	ldr	r2, [r3, #4]
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	8a92      	ldrh	r2, [r2, #20]
 800b3cc:	801a      	strh	r2, [r3, #0]
        break;
 800b3ce:	e030      	b.n	800b432 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	7c1b      	ldrb	r3, [r3, #16]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d10f      	bne.n	800b3f8 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d005      	beq.n	800b3f0 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	7d1b      	ldrb	r3, [r3, #20]
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d103      	bne.n	800b3f8 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	22f5      	movs	r2, #245	@ 0xf5
 800b3f4:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800b3f6:	e01c      	b.n	800b432 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	7c1b      	ldrb	r3, [r3, #16]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d004      	beq.n	800b40a <lwip_netconn_do_getaddr+0xce>
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	8adb      	ldrh	r3, [r3, #22]
 800b408:	e003      	b.n	800b412 <lwip_netconn_do_getaddr+0xd6>
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	8b1b      	ldrh	r3, [r3, #24]
 800b412:	68fa      	ldr	r2, [r7, #12]
 800b414:	68d2      	ldr	r2, [r2, #12]
 800b416:	8013      	strh	r3, [r2, #0]
        break;
 800b418:	e00b      	b.n	800b432 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800b41a:	4b08      	ldr	r3, [pc, #32]	@ (800b43c <lwip_netconn_do_getaddr+0x100>)
 800b41c:	f240 727d 	movw	r2, #1917	@ 0x77d
 800b420:	4907      	ldr	r1, [pc, #28]	@ (800b440 <lwip_netconn_do_getaddr+0x104>)
 800b422:	4808      	ldr	r0, [pc, #32]	@ (800b444 <lwip_netconn_do_getaddr+0x108>)
 800b424:	f01a f850 	bl	80254c8 <iprintf>
        break;
 800b428:	e003      	b.n	800b432 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	22f5      	movs	r2, #245	@ 0xf5
 800b42e:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b430:	bf00      	nop
 800b432:	bf00      	nop
 800b434:	3710      	adds	r7, #16
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	08026b9c 	.word	0x08026b9c
 800b440:	080270dc 	.word	0x080270dc
 800b444:	08026be0 	.word	0x08026be0

0800b448 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	785b      	ldrb	r3, [r3, #1]
 800b45a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d069      	beq.n	800b53a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b470:	2b10      	cmp	r3, #16
 800b472:	d162      	bne.n	800b53a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b478:	2b03      	cmp	r3, #3
 800b47a:	d002      	beq.n	800b482 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b47c:	7afb      	ldrb	r3, [r7, #11]
 800b47e:	2b02      	cmp	r3, #2
 800b480:	d05b      	beq.n	800b53a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b482:	7afb      	ldrb	r3, [r7, #11]
 800b484:	2b03      	cmp	r3, #3
 800b486:	d103      	bne.n	800b490 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	22f5      	movs	r2, #245	@ 0xf5
 800b48c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b48e:	e059      	b.n	800b544 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800b490:	7afb      	ldrb	r3, [r7, #11]
 800b492:	2b01      	cmp	r3, #1
 800b494:	d103      	bne.n	800b49e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	22fb      	movs	r2, #251	@ 0xfb
 800b49a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b49c:	e052      	b.n	800b544 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	7a1b      	ldrb	r3, [r3, #8]
 800b4a2:	f003 0301 	and.w	r3, r3, #1
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d004      	beq.n	800b4b4 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7ff f95e 	bl	800a770 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d006      	beq.n	800b4cc <lwip_netconn_do_close+0x84>
 800b4be:	4b23      	ldr	r3, [pc, #140]	@ (800b54c <lwip_netconn_do_close+0x104>)
 800b4c0:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800b4c4:	4922      	ldr	r1, [pc, #136]	@ (800b550 <lwip_netconn_do_close+0x108>)
 800b4c6:	4823      	ldr	r0, [pc, #140]	@ (800b554 <lwip_netconn_do_close+0x10c>)
 800b4c8:	f019 fffe 	bl	80254c8 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	2204      	movs	r2, #4
 800b4d2:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2100      	movs	r1, #0
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7ff f9c2 	bl	800a86c <lwip_netconn_do_close_internal>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d029      	beq.n	800b542 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	785b      	ldrb	r3, [r3, #1]
 800b4f4:	2b04      	cmp	r3, #4
 800b4f6:	d006      	beq.n	800b506 <lwip_netconn_do_close+0xbe>
 800b4f8:	4b14      	ldr	r3, [pc, #80]	@ (800b54c <lwip_netconn_do_close+0x104>)
 800b4fa:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800b4fe:	4916      	ldr	r1, [pc, #88]	@ (800b558 <lwip_netconn_do_close+0x110>)
 800b500:	4814      	ldr	r0, [pc, #80]	@ (800b554 <lwip_netconn_do_close+0x10c>)
 800b502:	f019 ffe1 	bl	80254c8 <iprintf>
        UNLOCK_TCPIP_CORE();
 800b506:	4815      	ldr	r0, [pc, #84]	@ (800b55c <lwip_netconn_do_close+0x114>)
 800b508:	f00c ffd1 	bl	80184ae <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	330c      	adds	r3, #12
 800b512:	2100      	movs	r1, #0
 800b514:	4618      	mov	r0, r3
 800b516:	f00c ff28 	bl	801836a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b51a:	4810      	ldr	r0, [pc, #64]	@ (800b55c <lwip_netconn_do_close+0x114>)
 800b51c:	f00c ffb8 	bl	8018490 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	785b      	ldrb	r3, [r3, #1]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d00b      	beq.n	800b542 <lwip_netconn_do_close+0xfa>
 800b52a:	4b08      	ldr	r3, [pc, #32]	@ (800b54c <lwip_netconn_do_close+0x104>)
 800b52c:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800b530:	4909      	ldr	r1, [pc, #36]	@ (800b558 <lwip_netconn_do_close+0x110>)
 800b532:	4808      	ldr	r0, [pc, #32]	@ (800b554 <lwip_netconn_do_close+0x10c>)
 800b534:	f019 ffc8 	bl	80254c8 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b538:	e003      	b.n	800b542 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	22f5      	movs	r2, #245	@ 0xf5
 800b53e:	711a      	strb	r2, [r3, #4]
 800b540:	e000      	b.n	800b544 <lwip_netconn_do_close+0xfc>
      return;
 800b542:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	08026b9c 	.word	0x08026b9c
 800b550:	08026f40 	.word	0x08026f40
 800b554:	08026be0 	.word	0x08026be0
 800b558:	08026f5c 	.word	0x08026f5c
 800b55c:	2000cc0c 	.word	0x2000cc0c

0800b560 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800b560:	b480      	push	{r7}
 800b562:	b083      	sub	sp, #12
 800b564:	af00      	add	r7, sp, #0
 800b566:	4603      	mov	r3, r0
 800b568:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800b56a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	dc04      	bgt.n	800b57c <err_to_errno+0x1c>
 800b572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b576:	f113 0f10 	cmn.w	r3, #16
 800b57a:	da01      	bge.n	800b580 <err_to_errno+0x20>
    return EIO;
 800b57c:	2305      	movs	r3, #5
 800b57e:	e005      	b.n	800b58c <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800b580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b584:	425b      	negs	r3, r3
 800b586:	4a04      	ldr	r2, [pc, #16]	@ (800b598 <err_to_errno+0x38>)
 800b588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	370c      	adds	r7, #12
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr
 800b598:	0802a198 	.word	0x0802a198

0800b59c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d013      	beq.n	800b5d2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d00b      	beq.n	800b5ca <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f003 f8ea 	bl	800e790 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	605a      	str	r2, [r3, #4]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	685a      	ldr	r2, [r3, #4]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b5ca:	6879      	ldr	r1, [r7, #4]
 800b5cc:	2006      	movs	r0, #6
 800b5ce:	f002 f9d1 	bl	800d974 <memp_free>
  }
}
 800b5d2:	bf00      	nop
 800b5d4:	3708      	adds	r7, #8
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
	...

0800b5dc <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d106      	bne.n	800b5f8 <netbuf_free+0x1c>
 800b5ea:	4b0d      	ldr	r3, [pc, #52]	@ (800b620 <netbuf_free+0x44>)
 800b5ec:	2281      	movs	r2, #129	@ 0x81
 800b5ee:	490d      	ldr	r1, [pc, #52]	@ (800b624 <netbuf_free+0x48>)
 800b5f0:	480d      	ldr	r0, [pc, #52]	@ (800b628 <netbuf_free+0x4c>)
 800b5f2:	f019 ff69 	bl	80254c8 <iprintf>
 800b5f6:	e00f      	b.n	800b618 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d004      	beq.n	800b60a <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4618      	mov	r0, r3
 800b606:	f003 f8c3 	bl	800e790 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2200      	movs	r2, #0
 800b60e:	605a      	str	r2, [r3, #4]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	685a      	ldr	r2, [r3, #4]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800b618:	3708      	adds	r7, #8
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	080270f4 	.word	0x080270f4
 800b624:	08027190 	.word	0x08027190
 800b628:	08027144 	.word	0x08027144

0800b62c <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	60f8      	str	r0, [r7, #12]
 800b634:	60b9      	str	r1, [r7, #8]
 800b636:	4613      	mov	r3, r2
 800b638:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d108      	bne.n	800b652 <netbuf_ref+0x26>
 800b640:	4b1c      	ldr	r3, [pc, #112]	@ (800b6b4 <netbuf_ref+0x88>)
 800b642:	2299      	movs	r2, #153	@ 0x99
 800b644:	491c      	ldr	r1, [pc, #112]	@ (800b6b8 <netbuf_ref+0x8c>)
 800b646:	481d      	ldr	r0, [pc, #116]	@ (800b6bc <netbuf_ref+0x90>)
 800b648:	f019 ff3e 	bl	80254c8 <iprintf>
 800b64c:	f06f 030f 	mvn.w	r3, #15
 800b650:	e02b      	b.n	800b6aa <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d004      	beq.n	800b664 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	4618      	mov	r0, r3
 800b660:	f003 f896 	bl	800e790 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800b664:	2241      	movs	r2, #65	@ 0x41
 800b666:	2100      	movs	r1, #0
 800b668:	2036      	movs	r0, #54	@ 0x36
 800b66a:	f002 fd7b 	bl	800e164 <pbuf_alloc>
 800b66e:	4602      	mov	r2, r0
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d105      	bne.n	800b688 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	2200      	movs	r2, #0
 800b680:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800b682:	f04f 33ff 	mov.w	r3, #4294967295
 800b686:	e010      	b.n	800b6aa <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	68ba      	ldr	r2, [r7, #8]
 800b68e:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	88fa      	ldrh	r2, [r7, #6]
 800b696:	811a      	strh	r2, [r3, #8]
 800b698:	68fa      	ldr	r2, [r7, #12]
 800b69a:	6812      	ldr	r2, [r2, #0]
 800b69c:	891b      	ldrh	r3, [r3, #8]
 800b69e:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681a      	ldr	r2, [r3, #0]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800b6a8:	2300      	movs	r3, #0
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	080270f4 	.word	0x080270f4
 800b6b8:	080271ac 	.word	0x080271ac
 800b6bc:	08027144 	.word	0x08027144

0800b6c0 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b085      	sub	sp, #20
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	db02      	blt.n	800b6d8 <tryget_socket_unconn_nouse+0x18>
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2b03      	cmp	r3, #3
 800b6d6:	dd01      	ble.n	800b6dc <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	e003      	b.n	800b6e4 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	011b      	lsls	r3, r3, #4
 800b6e0:	4a03      	ldr	r2, [pc, #12]	@ (800b6f0 <tryget_socket_unconn_nouse+0x30>)
 800b6e2:	4413      	add	r3, r2
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3714      	adds	r7, #20
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr
 800b6f0:	2000cbbc 	.word	0x2000cbbc

0800b6f4 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f7ff ffdf 	bl	800b6c0 <tryget_socket_unconn_nouse>
 800b702:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800b704:	68fb      	ldr	r3, [r7, #12]
}
 800b706:	4618      	mov	r0, r3
 800b708:	3710      	adds	r7, #16
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800b70e:	b580      	push	{r7, lr}
 800b710:	b084      	sub	sp, #16
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f7ff ffec 	bl	800b6f4 <tryget_socket_unconn>
 800b71c:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d005      	beq.n	800b730 <tryget_socket+0x22>
    if (sock->conn) {
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d001      	beq.n	800b730 <tryget_socket+0x22>
      return sock;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	e000      	b.n	800b732 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800b730:	2300      	movs	r3, #0
}
 800b732:	4618      	mov	r0, r3
 800b734:	3710      	adds	r7, #16
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
	...

0800b73c <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f7ff ffe2 	bl	800b70e <tryget_socket>
 800b74a:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d104      	bne.n	800b75c <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800b752:	4b05      	ldr	r3, [pc, #20]	@ (800b768 <get_socket+0x2c>)
 800b754:	2209      	movs	r2, #9
 800b756:	601a      	str	r2, [r3, #0]
    return NULL;
 800b758:	2300      	movs	r3, #0
 800b75a:	e000      	b.n	800b75e <get_socket+0x22>
  }
  return sock;
 800b75c:	68fb      	ldr	r3, [r7, #12]
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	20014c9c 	.word	0x20014c9c

0800b76c <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800b776:	2300      	movs	r3, #0
 800b778:	60fb      	str	r3, [r7, #12]
 800b77a:	e052      	b.n	800b822 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800b77c:	f00c feca 	bl	8018514 <sys_arch_protect>
 800b780:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800b782:	4a2c      	ldr	r2, [pc, #176]	@ (800b834 <alloc_socket+0xc8>)
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	011b      	lsls	r3, r3, #4
 800b788:	4413      	add	r3, r2
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d142      	bne.n	800b816 <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800b790:	4a28      	ldr	r2, [pc, #160]	@ (800b834 <alloc_socket+0xc8>)
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	011b      	lsls	r3, r3, #4
 800b796:	4413      	add	r3, r2
 800b798:	687a      	ldr	r2, [r7, #4]
 800b79a:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800b79c:	68b8      	ldr	r0, [r7, #8]
 800b79e:	f00c fec7 	bl	8018530 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800b7a2:	4a24      	ldr	r2, [pc, #144]	@ (800b834 <alloc_socket+0xc8>)
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	011b      	lsls	r3, r3, #4
 800b7a8:	4413      	add	r3, r2
 800b7aa:	3304      	adds	r3, #4
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800b7b0:	4a20      	ldr	r2, [pc, #128]	@ (800b834 <alloc_socket+0xc8>)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	011b      	lsls	r3, r3, #4
 800b7b6:	4413      	add	r3, r2
 800b7b8:	330e      	adds	r3, #14
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d006      	beq.n	800b7ce <alloc_socket+0x62>
 800b7c0:	4b1d      	ldr	r3, [pc, #116]	@ (800b838 <alloc_socket+0xcc>)
 800b7c2:	f240 220e 	movw	r2, #526	@ 0x20e
 800b7c6:	491d      	ldr	r1, [pc, #116]	@ (800b83c <alloc_socket+0xd0>)
 800b7c8:	481d      	ldr	r0, [pc, #116]	@ (800b840 <alloc_socket+0xd4>)
 800b7ca:	f019 fe7d 	bl	80254c8 <iprintf>
      sockets[i].rcvevent   = 0;
 800b7ce:	4a19      	ldr	r2, [pc, #100]	@ (800b834 <alloc_socket+0xc8>)
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	011b      	lsls	r3, r3, #4
 800b7d4:	4413      	add	r3, r2
 800b7d6:	3308      	adds	r3, #8
 800b7d8:	2200      	movs	r2, #0
 800b7da:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b7e4:	2b10      	cmp	r3, #16
 800b7e6:	d102      	bne.n	800b7ee <alloc_socket+0x82>
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d001      	beq.n	800b7f2 <alloc_socket+0x86>
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	e000      	b.n	800b7f4 <alloc_socket+0x88>
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	b299      	uxth	r1, r3
 800b7f6:	4a0f      	ldr	r2, [pc, #60]	@ (800b834 <alloc_socket+0xc8>)
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	011b      	lsls	r3, r3, #4
 800b7fc:	4413      	add	r3, r2
 800b7fe:	330a      	adds	r3, #10
 800b800:	460a      	mov	r2, r1
 800b802:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800b804:	4a0b      	ldr	r2, [pc, #44]	@ (800b834 <alloc_socket+0xc8>)
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	011b      	lsls	r3, r3, #4
 800b80a:	4413      	add	r3, r2
 800b80c:	330c      	adds	r3, #12
 800b80e:	2200      	movs	r2, #0
 800b810:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	e00a      	b.n	800b82c <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800b816:	68b8      	ldr	r0, [r7, #8]
 800b818:	f00c fe8a 	bl	8018530 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	3301      	adds	r3, #1
 800b820:	60fb      	str	r3, [r7, #12]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	2b03      	cmp	r3, #3
 800b826:	dda9      	ble.n	800b77c <alloc_socket+0x10>
  }
  return -1;
 800b828:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3710      	adds	r7, #16
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}
 800b834:	2000cbbc 	.word	0x2000cbbc
 800b838:	0802728c 	.word	0x0802728c
 800b83c:	080272c0 	.word	0x080272c0
 800b840:	080272e0 	.word	0x080272e0

0800b844 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800b844:	b480      	push	{r7}
 800b846:	b085      	sub	sp, #20
 800b848:	af00      	add	r7, sp, #0
 800b84a:	60f8      	str	r0, [r7, #12]
 800b84c:	60b9      	str	r1, [r7, #8]
 800b84e:	607a      	str	r2, [r7, #4]
 800b850:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	68fa      	ldr	r2, [r7, #12]
 800b856:	6852      	ldr	r2, [r2, #4]
 800b858:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2200      	movs	r2, #0
 800b85e:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2200      	movs	r2, #0
 800b86c:	601a      	str	r2, [r3, #0]
  return 1;
 800b86e:	2301      	movs	r3, #1
}
 800b870:	4618      	mov	r0, r3
 800b872:	3714      	adds	r7, #20
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr

0800b87c <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d00d      	beq.n	800b8ac <free_socket_free_elements+0x30>
    if (is_tcp) {
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d005      	beq.n	800b8a2 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4618      	mov	r0, r3
 800b89c:	f002 ff78 	bl	800e790 <pbuf_free>
 800b8a0:	e004      	b.n	800b8ac <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7ff fe78 	bl	800b59c <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d002      	beq.n	800b8b8 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800b8b2:	68b8      	ldr	r0, [r7, #8]
 800b8b4:	f7fd fee6 	bl	8009684 <netconn_delete>
  }
}
 800b8b8:	bf00      	nop
 800b8ba:	3710      	adds	r7, #16
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b086      	sub	sp, #24
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800b8ca:	f00c fe23 	bl	8018514 <sys_arch_protect>
 800b8ce:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800b8d0:	f107 0308 	add.w	r3, r7, #8
 800b8d4:	f107 020c 	add.w	r2, r7, #12
 800b8d8:	6839      	ldr	r1, [r7, #0]
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f7ff ffb2 	bl	800b844 <free_socket_locked>
 800b8e0:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800b8e2:	6978      	ldr	r0, [r7, #20]
 800b8e4:	f00c fe24 	bl	8018530 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d006      	beq.n	800b8fc <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f107 0208 	add.w	r2, r7, #8
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	6838      	ldr	r0, [r7, #0]
 800b8f8:	f7ff ffc0 	bl	800b87c <free_socket_free_elements>
  }
}
 800b8fc:	bf00      	nop
 800b8fe:	3718      	adds	r7, #24
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <lwip_bind>:
  return newsock;
}

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b08a      	sub	sp, #40	@ 0x28
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800b910:	68f8      	ldr	r0, [r7, #12]
 800b912:	f7ff ff13 	bl	800b73c <get_socket>
 800b916:	6278      	str	r0, [r7, #36]	@ 0x24
  if (!sock) {
 800b918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d102      	bne.n	800b924 <lwip_bind+0x20>
    return -1;
 800b91e:	f04f 33ff 	mov.w	r3, #4294967295
 800b922:	e051      	b.n	800b9c8 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2b10      	cmp	r3, #16
 800b928:	d108      	bne.n	800b93c <lwip_bind+0x38>
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	785b      	ldrb	r3, [r3, #1]
 800b92e:	2b02      	cmp	r3, #2
 800b930:	d104      	bne.n	800b93c <lwip_bind+0x38>
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	f003 0303 	and.w	r3, r3, #3
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d014      	beq.n	800b966 <lwip_bind+0x62>
 800b93c:	4b24      	ldr	r3, [pc, #144]	@ (800b9d0 <lwip_bind+0xcc>)
 800b93e:	f240 22e2 	movw	r2, #738	@ 0x2e2
 800b942:	4924      	ldr	r1, [pc, #144]	@ (800b9d4 <lwip_bind+0xd0>)
 800b944:	4824      	ldr	r0, [pc, #144]	@ (800b9d8 <lwip_bind+0xd4>)
 800b946:	f019 fdbf 	bl	80254c8 <iprintf>
 800b94a:	f06f 000f 	mvn.w	r0, #15
 800b94e:	f7ff fe07 	bl	800b560 <err_to_errno>
 800b952:	6178      	str	r0, [r7, #20]
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d002      	beq.n	800b960 <lwip_bind+0x5c>
 800b95a:	4a20      	ldr	r2, [pc, #128]	@ (800b9dc <lwip_bind+0xd8>)
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	6013      	str	r3, [r2, #0]
 800b960:	f04f 33ff 	mov.w	r3, #4294967295
 800b964:	e030      	b.n	800b9c8 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	613b      	str	r3, [r7, #16]
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	885b      	ldrh	r3, [r3, #2]
 800b970:	4618      	mov	r0, r3
 800b972:	f001 fab5 	bl	800cee0 <lwip_htons>
 800b976:	4603      	mov	r3, r0
 800b978:	847b      	strh	r3, [r7, #34]	@ 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800b97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b980:	f107 0110 	add.w	r1, r7, #16
 800b984:	4618      	mov	r0, r3
 800b986:	f7fd feeb 	bl	8009760 <netconn_bind>
 800b98a:	4603      	mov	r3, r0
 800b98c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

  if (err != ERR_OK) {
 800b990:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800b994:	2b00      	cmp	r3, #0
 800b996:	d00e      	beq.n	800b9b6 <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800b998:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7ff fddf 	bl	800b560 <err_to_errno>
 800b9a2:	61b8      	str	r0, [r7, #24]
 800b9a4:	69bb      	ldr	r3, [r7, #24]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d002      	beq.n	800b9b0 <lwip_bind+0xac>
 800b9aa:	4a0c      	ldr	r2, [pc, #48]	@ (800b9dc <lwip_bind+0xd8>)
 800b9ac:	69bb      	ldr	r3, [r7, #24]
 800b9ae:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800b9b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b9b4:	e008      	b.n	800b9c8 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	61fb      	str	r3, [r7, #28]
 800b9ba:	69fb      	ldr	r3, [r7, #28]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d002      	beq.n	800b9c6 <lwip_bind+0xc2>
 800b9c0:	4a06      	ldr	r2, [pc, #24]	@ (800b9dc <lwip_bind+0xd8>)
 800b9c2:	69fb      	ldr	r3, [r7, #28]
 800b9c4:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3728      	adds	r7, #40	@ 0x28
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	0802728c 	.word	0x0802728c
 800b9d4:	08027330 	.word	0x08027330
 800b9d8:	080272e0 	.word	0x080272e0
 800b9dc:	20014c9c 	.word	0x20014c9c

0800b9e0 <lwip_close>:

int
lwip_close(int s)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b086      	sub	sp, #24
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f7ff fea5 	bl	800b73c <get_socket>
 800b9f2:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d102      	bne.n	800ba00 <lwip_close+0x20>
    return -1;
 800b9fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b9fe:	e039      	b.n	800ba74 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d00b      	beq.n	800ba20 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ba12:	2b10      	cmp	r3, #16
 800ba14:	bf0c      	ite	eq
 800ba16:	2301      	moveq	r3, #1
 800ba18:	2300      	movne	r3, #0
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	617b      	str	r3, [r7, #20]
 800ba1e:	e00a      	b.n	800ba36 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d006      	beq.n	800ba36 <lwip_close+0x56>
 800ba28:	4b14      	ldr	r3, [pc, #80]	@ (800ba7c <lwip_close+0x9c>)
 800ba2a:	f44f 7245 	mov.w	r2, #788	@ 0x314
 800ba2e:	4914      	ldr	r1, [pc, #80]	@ (800ba80 <lwip_close+0xa0>)
 800ba30:	4814      	ldr	r0, [pc, #80]	@ (800ba84 <lwip_close+0xa4>)
 800ba32:	f019 fd49 	bl	80254c8 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7fd fdfe 	bl	800963c <netconn_prepare_delete>
 800ba40:	4603      	mov	r3, r0
 800ba42:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ba44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d00e      	beq.n	800ba6a <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 800ba4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7ff fd85 	bl	800b560 <err_to_errno>
 800ba56:	60b8      	str	r0, [r7, #8]
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d002      	beq.n	800ba64 <lwip_close+0x84>
 800ba5e:	4a0a      	ldr	r2, [pc, #40]	@ (800ba88 <lwip_close+0xa8>)
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800ba64:	f04f 33ff 	mov.w	r3, #4294967295
 800ba68:	e004      	b.n	800ba74 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 800ba6a:	6979      	ldr	r1, [r7, #20]
 800ba6c:	6938      	ldr	r0, [r7, #16]
 800ba6e:	f7ff ff27 	bl	800b8c0 <free_socket>
  set_errno(0);
  return 0;
 800ba72:	2300      	movs	r3, #0
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3718      	adds	r7, #24
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	0802728c 	.word	0x0802728c
 800ba80:	0802734c 	.word	0x0802734c
 800ba84:	080272e0 	.word	0x080272e0
 800ba88:	20014c9c 	.word	0x20014c9c

0800ba8c <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b08c      	sub	sp, #48	@ 0x30
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	60b9      	str	r1, [r7, #8]
 800ba96:	607a      	str	r2, [r7, #4]
 800ba98:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800ba9a:	2308      	movs	r3, #8
 800ba9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  ssize_t recvd = 0;
 800baa0:	2300      	movs	r3, #0
 800baa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	db01      	blt.n	800baae <lwip_recv_tcp+0x22>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	e001      	b.n	800bab2 <lwip_recv_tcp+0x26>
 800baae:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800bab2:	627b      	str	r3, [r7, #36]	@ 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d106      	bne.n	800bac8 <lwip_recv_tcp+0x3c>
 800baba:	4b74      	ldr	r3, [pc, #464]	@ (800bc8c <lwip_recv_tcp+0x200>)
 800babc:	f240 329e 	movw	r2, #926	@ 0x39e
 800bac0:	4973      	ldr	r1, [pc, #460]	@ (800bc90 <lwip_recv_tcp+0x204>)
 800bac2:	4874      	ldr	r0, [pc, #464]	@ (800bc94 <lwip_recv_tcp+0x208>)
 800bac4:	f019 fd00 	bl	80254c8 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bad2:	2b10      	cmp	r3, #16
 800bad4:	d006      	beq.n	800bae4 <lwip_recv_tcp+0x58>
 800bad6:	4b6d      	ldr	r3, [pc, #436]	@ (800bc8c <lwip_recv_tcp+0x200>)
 800bad8:	f240 329f 	movw	r2, #927	@ 0x39f
 800badc:	496e      	ldr	r1, [pc, #440]	@ (800bc98 <lwip_recv_tcp+0x20c>)
 800bade:	486d      	ldr	r0, [pc, #436]	@ (800bc94 <lwip_recv_tcp+0x208>)
 800bae0:	f019 fcf2 	bl	80254c8 <iprintf>

  if (flags & MSG_DONTWAIT) {
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	f003 0308 	and.w	r3, r3, #8
 800baea:	2b00      	cmp	r3, #0
 800baec:	d005      	beq.n	800bafa <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800baee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800baf2:	f043 0304 	orr.w	r3, r3, #4
 800baf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d003      	beq.n	800bb0a <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	617b      	str	r3, [r7, #20]
 800bb08:	e036      	b.n	800bb78 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800bb12:	f107 0114 	add.w	r1, r7, #20
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7fe f816 	bl	8009b48 <netconn_recv_tcp_pbuf_flags>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800bb22:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d019      	beq.n	800bb5e <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800bb2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	f300 808d 	bgt.w	800bc4c <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800bb32:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7ff fd12 	bl	800b560 <err_to_errno>
 800bb3c:	61f8      	str	r0, [r7, #28]
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d002      	beq.n	800bb4a <lwip_recv_tcp+0xbe>
 800bb44:	4a55      	ldr	r2, [pc, #340]	@ (800bc9c <lwip_recv_tcp+0x210>)
 800bb46:	69fb      	ldr	r3, [r7, #28]
 800bb48:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800bb4a:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800bb4e:	f113 0f0f 	cmn.w	r3, #15
 800bb52:	d101      	bne.n	800bb58 <lwip_recv_tcp+0xcc>
          return 0;
 800bb54:	2300      	movs	r3, #0
 800bb56:	e094      	b.n	800bc82 <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800bb58:	f04f 33ff 	mov.w	r3, #4294967295
 800bb5c:	e091      	b.n	800bc82 <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d106      	bne.n	800bb72 <lwip_recv_tcp+0xe6>
 800bb64:	4b49      	ldr	r3, [pc, #292]	@ (800bc8c <lwip_recv_tcp+0x200>)
 800bb66:	f240 32c5 	movw	r2, #965	@ 0x3c5
 800bb6a:	494d      	ldr	r1, [pc, #308]	@ (800bca0 <lwip_recv_tcp+0x214>)
 800bb6c:	4849      	ldr	r0, [pc, #292]	@ (800bc94 <lwip_recv_tcp+0x208>)
 800bb6e:	f019 fcab 	bl	80254c8 <iprintf>
      sock->lastdata.pbuf = p;
 800bb72:	697a      	ldr	r2, [r7, #20]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	891b      	ldrh	r3, [r3, #8]
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb80:	4293      	cmp	r3, r2
 800bb82:	dd03      	ble.n	800bb8c <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	891b      	ldrh	r3, [r3, #8]
 800bb88:	847b      	strh	r3, [r7, #34]	@ 0x22
 800bb8a:	e001      	b.n	800bb90 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800bb8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb8e:	847b      	strh	r3, [r7, #34]	@ 0x22
    }
    if (recvd + copylen < recvd) {
 800bb90:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800bb92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb94:	4413      	add	r3, r2
 800bb96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	dd03      	ble.n	800bba4 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800bb9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	43db      	mvns	r3, r3
 800bba2:	847b      	strh	r3, [r7, #34]	@ 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800bba4:	6978      	ldr	r0, [r7, #20]
 800bba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba8:	68ba      	ldr	r2, [r7, #8]
 800bbaa:	18d1      	adds	r1, r2, r3
 800bbac:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800bbae:	2300      	movs	r3, #0
 800bbb0:	f002 fff4 	bl	800eb9c <pbuf_copy_partial>

    recvd += copylen;
 800bbb4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bbb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bbb8:	4413      	add	r3, r2
 800bbba:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800bbbc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bbbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	da06      	bge.n	800bbd2 <lwip_recv_tcp+0x146>
 800bbc4:	4b31      	ldr	r3, [pc, #196]	@ (800bc8c <lwip_recv_tcp+0x200>)
 800bbc6:	f240 32dd 	movw	r2, #989	@ 0x3dd
 800bbca:	4936      	ldr	r1, [pc, #216]	@ (800bca4 <lwip_recv_tcp+0x218>)
 800bbcc:	4831      	ldr	r0, [pc, #196]	@ (800bc94 <lwip_recv_tcp+0x208>)
 800bbce:	f019 fc7b 	bl	80254c8 <iprintf>
    recv_left -= copylen;
 800bbd2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bbd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbd6:	1ad3      	subs	r3, r2, r3
 800bbd8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	f003 0301 	and.w	r3, r3, #1
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d123      	bne.n	800bc2c <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	891b      	ldrh	r3, [r3, #8]
 800bbe8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d906      	bls.n	800bbfc <lwip_recv_tcp+0x170>
 800bbee:	4b27      	ldr	r3, [pc, #156]	@ (800bc8c <lwip_recv_tcp+0x200>)
 800bbf0:	f240 32e3 	movw	r2, #995	@ 0x3e3
 800bbf4:	492c      	ldr	r1, [pc, #176]	@ (800bca8 <lwip_recv_tcp+0x21c>)
 800bbf6:	4827      	ldr	r0, [pc, #156]	@ (800bc94 <lwip_recv_tcp+0x208>)
 800bbf8:	f019 fc66 	bl	80254c8 <iprintf>
      if (p->tot_len - copylen > 0) {
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	891b      	ldrh	r3, [r3, #8]
 800bc00:	461a      	mov	r2, r3
 800bc02:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bc04:	1ad3      	subs	r3, r2, r3
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	dd09      	ble.n	800bc1e <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800bc0e:	4611      	mov	r1, r2
 800bc10:	4618      	mov	r0, r3
 800bc12:	f002 fd8a 	bl	800e72a <pbuf_free_header>
 800bc16:	4602      	mov	r2, r0
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	605a      	str	r2, [r3, #4]
 800bc1c:	e006      	b.n	800bc2c <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2200      	movs	r2, #0
 800bc22:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	4618      	mov	r0, r3
 800bc28:	f002 fdb2 	bl	800e790 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800bc2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bc30:	f043 0314 	orr.w	r3, r3, #20
 800bc34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800bc38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	dd08      	ble.n	800bc50 <lwip_recv_tcp+0x1c4>
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	f003 0301 	and.w	r3, r3, #1
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	f43f af58 	beq.w	800bafa <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800bc4a:	e001      	b.n	800bc50 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800bc4c:	bf00      	nop
 800bc4e:	e000      	b.n	800bc52 <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800bc50:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800bc52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	dd0b      	ble.n	800bc70 <lwip_recv_tcp+0x1e4>
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	f003 0301 	and.w	r3, r3, #1
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d106      	bne.n	800bc70 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc68:	4611      	mov	r1, r2
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7fd feb4 	bl	80099d8 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800bc70:	2300      	movs	r3, #0
 800bc72:	61bb      	str	r3, [r7, #24]
 800bc74:	69bb      	ldr	r3, [r7, #24]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d002      	beq.n	800bc80 <lwip_recv_tcp+0x1f4>
 800bc7a:	4a08      	ldr	r2, [pc, #32]	@ (800bc9c <lwip_recv_tcp+0x210>)
 800bc7c:	69bb      	ldr	r3, [r7, #24]
 800bc7e:	6013      	str	r3, [r2, #0]
  return recvd;
 800bc80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3730      	adds	r7, #48	@ 0x30
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	0802728c 	.word	0x0802728c
 800bc90:	08027384 	.word	0x08027384
 800bc94:	080272e0 	.word	0x080272e0
 800bc98:	08027394 	.word	0x08027394
 800bc9c:	20014c9c 	.word	0x20014c9c
 800bca0:	080273b8 	.word	0x080273b8
 800bca4:	080273c4 	.word	0x080273c4
 800bca8:	080273ec 	.word	0x080273ec

0800bcac <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800bcac:	b590      	push	{r4, r7, lr}
 800bcae:	b08b      	sub	sp, #44	@ 0x2c
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	603b      	str	r3, [r7, #0]
 800bcb8:	4613      	mov	r3, r2
 800bcba:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	627b      	str	r3, [r7, #36]	@ 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d106      	bne.n	800bcd4 <lwip_sock_make_addr+0x28>
 800bcc6:	4b2b      	ldr	r3, [pc, #172]	@ (800bd74 <lwip_sock_make_addr+0xc8>)
 800bcc8:	f240 4207 	movw	r2, #1031	@ 0x407
 800bccc:	492a      	ldr	r1, [pc, #168]	@ (800bd78 <lwip_sock_make_addr+0xcc>)
 800bcce:	482b      	ldr	r0, [pc, #172]	@ (800bd7c <lwip_sock_make_addr+0xd0>)
 800bcd0:	f019 fbfa 	bl	80254c8 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d106      	bne.n	800bce8 <lwip_sock_make_addr+0x3c>
 800bcda:	4b26      	ldr	r3, [pc, #152]	@ (800bd74 <lwip_sock_make_addr+0xc8>)
 800bcdc:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 800bce0:	4927      	ldr	r1, [pc, #156]	@ (800bd80 <lwip_sock_make_addr+0xd4>)
 800bce2:	4826      	ldr	r0, [pc, #152]	@ (800bd7c <lwip_sock_make_addr+0xd0>)
 800bce4:	f019 fbf0 	bl	80254c8 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800bce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d106      	bne.n	800bcfc <lwip_sock_make_addr+0x50>
 800bcee:	4b21      	ldr	r3, [pc, #132]	@ (800bd74 <lwip_sock_make_addr+0xc8>)
 800bcf0:	f240 4209 	movw	r2, #1033	@ 0x409
 800bcf4:	4923      	ldr	r1, [pc, #140]	@ (800bd84 <lwip_sock_make_addr+0xd8>)
 800bcf6:	4821      	ldr	r0, [pc, #132]	@ (800bd7c <lwip_sock_make_addr+0xd0>)
 800bcf8:	f019 fbe6 	bl	80254c8 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800bcfc:	f107 0314 	add.w	r3, r7, #20
 800bd00:	2210      	movs	r2, #16
 800bd02:	701a      	strb	r2, [r3, #0]
 800bd04:	f107 0314 	add.w	r3, r7, #20
 800bd08:	2202      	movs	r2, #2
 800bd0a:	705a      	strb	r2, [r3, #1]
 800bd0c:	f107 0414 	add.w	r4, r7, #20
 800bd10:	88fb      	ldrh	r3, [r7, #6]
 800bd12:	4618      	mov	r0, r3
 800bd14:	f001 f8e4 	bl	800cee0 <lwip_htons>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	8063      	strh	r3, [r4, #2]
 800bd1c:	f107 0314 	add.w	r3, r7, #20
 800bd20:	68ba      	ldr	r2, [r7, #8]
 800bd22:	6812      	ldr	r2, [r2, #0]
 800bd24:	605a      	str	r2, [r3, #4]
 800bd26:	f107 0314 	add.w	r3, r7, #20
 800bd2a:	3308      	adds	r3, #8
 800bd2c:	2208      	movs	r2, #8
 800bd2e:	2100      	movs	r1, #0
 800bd30:	4618      	mov	r0, r3
 800bd32:	f019 fd4f 	bl	80257d4 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800bd36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	7d3a      	ldrb	r2, [r7, #20]
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d202      	bcs.n	800bd46 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800bd40:	2301      	movs	r3, #1
 800bd42:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd44:	e008      	b.n	800bd58 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800bd46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	7d3a      	ldrb	r2, [r7, #20]
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d903      	bls.n	800bd58 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800bd50:	7d3b      	ldrb	r3, [r7, #20]
 800bd52:	461a      	mov	r2, r3
 800bd54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd56:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800bd58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd5a:	681a      	ldr	r2, [r3, #0]
 800bd5c:	f107 0314 	add.w	r3, r7, #20
 800bd60:	4619      	mov	r1, r3
 800bd62:	6838      	ldr	r0, [r7, #0]
 800bd64:	f019 fe5d 	bl	8025a22 <memcpy>
  return truncated;
 800bd68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	372c      	adds	r7, #44	@ 0x2c
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd90      	pop	{r4, r7, pc}
 800bd72:	bf00      	nop
 800bd74:	0802728c 	.word	0x0802728c
 800bd78:	080273fc 	.word	0x080273fc
 800bd7c:	080272e0 	.word	0x080272e0
 800bd80:	08027410 	.word	0x08027410
 800bd84:	08027420 	.word	0x08027420

0800bd88 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b088      	sub	sp, #32
 800bd8c:	af02      	add	r7, sp, #8
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	60b9      	str	r1, [r7, #8]
 800bd92:	607a      	str	r2, [r7, #4]
 800bd94:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d101      	bne.n	800bda0 <lwip_recv_tcp_from+0x18>
    return 0;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	e021      	b.n	800bde4 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d01d      	beq.n	800bde2 <lwip_recv_tcp_from+0x5a>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d01a      	beq.n	800bde2 <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6818      	ldr	r0, [r3, #0]
 800bdb0:	f107 0216 	add.w	r2, r7, #22
 800bdb4:	f107 0110 	add.w	r1, r7, #16
 800bdb8:	2300      	movs	r3, #0
 800bdba:	f7fd fc7f 	bl	80096bc <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d00e      	beq.n	800bde2 <lwip_recv_tcp_from+0x5a>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d00b      	beq.n	800bde2 <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	6818      	ldr	r0, [r3, #0]
 800bdce:	8afa      	ldrh	r2, [r7, #22]
 800bdd0:	f107 0110 	add.w	r1, r7, #16
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	9300      	str	r3, [sp, #0]
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	f7ff ff67 	bl	800bcac <lwip_sock_make_addr>
 800bdde:	4603      	mov	r3, r0
 800bde0:	e000      	b.n	800bde4 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800bde2:	2300      	movs	r3, #0
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3718      	adds	r7, #24
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800bdec:	b590      	push	{r4, r7, lr}
 800bdee:	b08d      	sub	sp, #52	@ 0x34
 800bdf0:	af02      	add	r7, sp, #8
 800bdf2:	60f8      	str	r0, [r7, #12]
 800bdf4:	60b9      	str	r1, [r7, #8]
 800bdf6:	607a      	str	r2, [r7, #4]
 800bdf8:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	689b      	ldr	r3, [r3, #8]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d10d      	bne.n	800be1e <lwip_recvfrom_udp_raw+0x32>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	68db      	ldr	r3, [r3, #12]
 800be06:	2b00      	cmp	r3, #0
 800be08:	dd09      	ble.n	800be1e <lwip_recvfrom_udp_raw+0x32>
 800be0a:	4b5e      	ldr	r3, [pc, #376]	@ (800bf84 <lwip_recvfrom_udp_raw+0x198>)
 800be0c:	f240 4249 	movw	r2, #1097	@ 0x449
 800be10:	495d      	ldr	r1, [pc, #372]	@ (800bf88 <lwip_recvfrom_udp_raw+0x19c>)
 800be12:	485e      	ldr	r0, [pc, #376]	@ (800bf8c <lwip_recvfrom_udp_raw+0x1a0>)
 800be14:	f019 fb58 	bl	80254c8 <iprintf>
 800be18:	f06f 030f 	mvn.w	r3, #15
 800be1c:	e0ad      	b.n	800bf7a <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	f003 0308 	and.w	r3, r3, #8
 800be24:	2b00      	cmp	r3, #0
 800be26:	d003      	beq.n	800be30 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800be28:	2304      	movs	r3, #4
 800be2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800be2e:	e002      	b.n	800be36 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800be30:	2300      	movs	r3, #0
 800be32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d11e      	bne.n	800be80 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800be4a:	f107 0110 	add.w	r1, r7, #16
 800be4e:	4618      	mov	r0, r3
 800be50:	f7fd fea6 	bl	8009ba0 <netconn_recv_udp_raw_netbuf_flags>
 800be54:	4603      	mov	r3, r0
 800be56:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800be58:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d002      	beq.n	800be66 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800be60:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800be64:	e089      	b.n	800bf7a <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d106      	bne.n	800be7a <lwip_recvfrom_udp_raw+0x8e>
 800be6c:	4b45      	ldr	r3, [pc, #276]	@ (800bf84 <lwip_recvfrom_udp_raw+0x198>)
 800be6e:	f240 425e 	movw	r2, #1118	@ 0x45e
 800be72:	4947      	ldr	r1, [pc, #284]	@ (800bf90 <lwip_recvfrom_udp_raw+0x1a4>)
 800be74:	4845      	ldr	r0, [pc, #276]	@ (800bf8c <lwip_recvfrom_udp_raw+0x1a0>)
 800be76:	f019 fb27 	bl	80254c8 <iprintf>
    sock->lastdata.netbuf = buf;
 800be7a:	693a      	ldr	r2, [r7, #16]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	891b      	ldrh	r3, [r3, #8]
 800be86:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800be88:	2300      	movs	r3, #0
 800be8a:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800be8c:	2300      	movs	r3, #0
 800be8e:	61fb      	str	r3, [r7, #28]
 800be90:	e029      	b.n	800bee6 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800be92:	8b3a      	ldrh	r2, [r7, #24]
 800be94:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800be96:	1ad3      	subs	r3, r2, r3
 800be98:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	689a      	ldr	r2, [r3, #8]
 800be9e:	69fb      	ldr	r3, [r7, #28]
 800bea0:	00db      	lsls	r3, r3, #3
 800bea2:	4413      	add	r3, r2
 800bea4:	685a      	ldr	r2, [r3, #4]
 800bea6:	8afb      	ldrh	r3, [r7, #22]
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d902      	bls.n	800beb2 <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800beac:	8afb      	ldrh	r3, [r7, #22]
 800beae:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800beb0:	e006      	b.n	800bec0 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	689a      	ldr	r2, [r3, #8]
 800beb6:	69fb      	ldr	r3, [r7, #28]
 800beb8:	00db      	lsls	r3, r3, #3
 800beba:	4413      	add	r3, r2
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	6818      	ldr	r0, [r3, #0]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	689a      	ldr	r2, [r3, #8]
 800bec8:	69fb      	ldr	r3, [r7, #28]
 800beca:	00db      	lsls	r3, r3, #3
 800becc:	4413      	add	r3, r2
 800bece:	6819      	ldr	r1, [r3, #0]
 800bed0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bed2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800bed4:	f002 fe62 	bl	800eb9c <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800bed8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800beda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bedc:	4413      	add	r3, r2
 800bede:	847b      	strh	r3, [r7, #34]	@ 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800bee0:	69fb      	ldr	r3, [r7, #28]
 800bee2:	3301      	adds	r3, #1
 800bee4:	61fb      	str	r3, [r7, #28]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	68db      	ldr	r3, [r3, #12]
 800beea:	69fa      	ldr	r2, [r7, #28]
 800beec:	429a      	cmp	r2, r3
 800beee:	da03      	bge.n	800bef8 <lwip_recvfrom_udp_raw+0x10c>
 800bef0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800bef2:	8b3b      	ldrh	r3, [r7, #24]
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d3cc      	bcc.n	800be92 <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d01a      	beq.n	800bf36 <lwip_recvfrom_udp_raw+0x14a>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d016      	beq.n	800bf36 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d012      	beq.n	800bf36 <lwip_recvfrom_udp_raw+0x14a>
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d00e      	beq.n	800bf36 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	6818      	ldr	r0, [r3, #0]
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	f103 0108 	add.w	r1, r3, #8
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	3304      	adds	r3, #4
 800bf2e:	9300      	str	r3, [sp, #0]
 800bf30:	4623      	mov	r3, r4
 800bf32:	f7ff febb 	bl	800bcac <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	691b      	ldr	r3, [r3, #16]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d007      	beq.n	800bf54 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800bf44:	2300      	movs	r3, #0
 800bf46:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800bf48:	7d7b      	ldrb	r3, [r7, #21]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d102      	bne.n	800bf54 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2200      	movs	r2, #0
 800bf52:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	f003 0301 	and.w	r3, r3, #1
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d106      	bne.n	800bf6c <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2200      	movs	r2, #0
 800bf62:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7ff fb18 	bl	800b59c <netbuf_delete>
  }
  if (datagram_len) {
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d002      	beq.n	800bf78 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	8b3a      	ldrh	r2, [r7, #24]
 800bf76:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800bf78:	2300      	movs	r3, #0
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	372c      	adds	r7, #44	@ 0x2c
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd90      	pop	{r4, r7, pc}
 800bf82:	bf00      	nop
 800bf84:	0802728c 	.word	0x0802728c
 800bf88:	08027430 	.word	0x08027430
 800bf8c:	080272e0 	.word	0x080272e0
 800bf90:	0802745c 	.word	0x0802745c

0800bf94 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b096      	sub	sp, #88	@ 0x58
 800bf98:	af02      	add	r7, sp, #8
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	607a      	str	r2, [r7, #4]
 800bfa0:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800bfa2:	68f8      	ldr	r0, [r7, #12]
 800bfa4:	f7ff fbca 	bl	800b73c <get_socket>
 800bfa8:	64f8      	str	r0, [r7, #76]	@ 0x4c
  if (!sock) {
 800bfaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d102      	bne.n	800bfb6 <lwip_recvfrom+0x22>
    return -1;
 800bfb0:	f04f 33ff 	mov.w	r3, #4294967295
 800bfb4:	e078      	b.n	800c0a8 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800bfb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bfc0:	2b10      	cmp	r3, #16
 800bfc2:	d112      	bne.n	800bfea <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	68b9      	ldr	r1, [r7, #8]
 800bfca:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800bfcc:	f7ff fd5e 	bl	800ba8c <lwip_recv_tcp>
 800bfd0:	6478      	str	r0, [r7, #68]	@ 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800bfd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bfd4:	9301      	str	r3, [sp, #4]
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	9300      	str	r3, [sp, #0]
 800bfda:	4b35      	ldr	r3, [pc, #212]	@ (800c0b0 <lwip_recvfrom+0x11c>)
 800bfdc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bfde:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bfe0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800bfe2:	f7ff fed1 	bl	800bd88 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800bfe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bfe8:	e05e      	b.n	800c0a8 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800bfea:	2300      	movs	r3, #0
 800bfec:	877b      	strh	r3, [r7, #58]	@ 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	633b      	str	r3, [r7, #48]	@ 0x30
    vec.iov_len = len;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	637b      	str	r3, [r7, #52]	@ 0x34
    msg.msg_control = NULL;
 800bff6:	2300      	movs	r3, #0
 800bff8:	627b      	str	r3, [r7, #36]	@ 0x24
    msg.msg_controllen = 0;
 800bffa:	2300      	movs	r3, #0
 800bffc:	62bb      	str	r3, [r7, #40]	@ 0x28
    msg.msg_flags = 0;
 800bffe:	2300      	movs	r3, #0
 800c000:	62fb      	str	r3, [r7, #44]	@ 0x2c
    msg.msg_iov = &vec;
 800c002:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c006:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800c008:	2301      	movs	r3, #1
 800c00a:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800c00c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c00e:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800c010:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c012:	2b00      	cmp	r3, #0
 800c014:	d002      	beq.n	800c01c <lwip_recvfrom+0x88>
 800c016:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	e000      	b.n	800c01e <lwip_recvfrom+0x8a>
 800c01c:	2300      	movs	r3, #0
 800c01e:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800c020:	f107 013a 	add.w	r1, r7, #58	@ 0x3a
 800c024:	f107 0214 	add.w	r2, r7, #20
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	9300      	str	r3, [sp, #0]
 800c02c:	460b      	mov	r3, r1
 800c02e:	6839      	ldr	r1, [r7, #0]
 800c030:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800c032:	f7ff fedb 	bl	800bdec <lwip_recvfrom_udp_raw>
 800c036:	4603      	mov	r3, r0
 800c038:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    if (err != ERR_OK) {
 800c03c:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 800c040:	2b00      	cmp	r3, #0
 800c042:	d00e      	beq.n	800c062 <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800c044:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 800c048:	4618      	mov	r0, r3
 800c04a:	f7ff fa89 	bl	800b560 <err_to_errno>
 800c04e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800c050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c052:	2b00      	cmp	r3, #0
 800c054:	d002      	beq.n	800c05c <lwip_recvfrom+0xc8>
 800c056:	4a17      	ldr	r2, [pc, #92]	@ (800c0b4 <lwip_recvfrom+0x120>)
 800c058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c05a:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800c05c:	f04f 33ff 	mov.w	r3, #4294967295
 800c060:	e022      	b.n	800c0a8 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800c062:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c064:	461a      	mov	r2, r3
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4293      	cmp	r3, r2
 800c06a:	bf28      	it	cs
 800c06c:	4613      	movcs	r3, r2
 800c06e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800c072:	4293      	cmp	r3, r2
 800c074:	d206      	bcs.n	800c084 <lwip_recvfrom+0xf0>
 800c076:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c078:	461a      	mov	r2, r3
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	4293      	cmp	r3, r2
 800c07e:	bf28      	it	cs
 800c080:	4613      	movcs	r3, r2
 800c082:	e001      	b.n	800c088 <lwip_recvfrom+0xf4>
 800c084:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800c088:	647b      	str	r3, [r7, #68]	@ 0x44
    if (fromlen) {
 800c08a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d002      	beq.n	800c096 <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800c090:	69ba      	ldr	r2, [r7, #24]
 800c092:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c094:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800c096:	2300      	movs	r3, #0
 800c098:	643b      	str	r3, [r7, #64]	@ 0x40
 800c09a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d002      	beq.n	800c0a6 <lwip_recvfrom+0x112>
 800c0a0:	4a04      	ldr	r2, [pc, #16]	@ (800c0b4 <lwip_recvfrom+0x120>)
 800c0a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0a4:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800c0a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3750      	adds	r7, #80	@ 0x50
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}
 800c0b0:	08027468 	.word	0x08027468
 800c0b4:	20014c9c 	.word	0x20014c9c

0800c0b8 <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b086      	sub	sp, #24
 800c0bc:	af02      	add	r7, sp, #8
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	60b9      	str	r1, [r7, #8]
 800c0c2:	607a      	str	r2, [r7, #4]
 800c0c4:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	9301      	str	r3, [sp, #4]
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	9300      	str	r3, [sp, #0]
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	687a      	ldr	r2, [r7, #4]
 800c0d2:	68b9      	ldr	r1, [r7, #8]
 800c0d4:	68f8      	ldr	r0, [r7, #12]
 800c0d6:	f7ff ff5d 	bl	800bf94 <lwip_recvfrom>
 800c0da:	4603      	mov	r3, r0
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3710      	adds	r7, #16
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b08a      	sub	sp, #40	@ 0x28
 800c0e8:	af02      	add	r7, sp, #8
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	60b9      	str	r1, [r7, #8]
 800c0ee:	607a      	str	r2, [r7, #4]
 800c0f0:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800c0f2:	68f8      	ldr	r0, [r7, #12]
 800c0f4:	f7ff fb22 	bl	800b73c <get_socket>
 800c0f8:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800c0fa:	69fb      	ldr	r3, [r7, #28]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d102      	bne.n	800c106 <lwip_send+0x22>
    return -1;
 800c100:	f04f 33ff 	mov.w	r3, #4294967295
 800c104:	e046      	b.n	800c194 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800c106:	69fb      	ldr	r3, [r7, #28]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c110:	2b10      	cmp	r3, #16
 800c112:	d00b      	beq.n	800c12c <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800c114:	2300      	movs	r3, #0
 800c116:	9301      	str	r3, [sp, #4]
 800c118:	2300      	movs	r3, #0
 800c11a:	9300      	str	r3, [sp, #0]
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	687a      	ldr	r2, [r7, #4]
 800c120:	68b9      	ldr	r1, [r7, #8]
 800c122:	68f8      	ldr	r0, [r7, #12]
 800c124:	f000 f83c 	bl	800c1a0 <lwip_sendto>
 800c128:	4603      	mov	r3, r0
 800c12a:	e033      	b.n	800c194 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800c132:	2b00      	cmp	r3, #0
 800c134:	d001      	beq.n	800c13a <lwip_send+0x56>
 800c136:	2203      	movs	r2, #3
 800c138:	e000      	b.n	800c13c <lwip_send+0x58>
 800c13a:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	105b      	asrs	r3, r3, #1
 800c140:	b25b      	sxtb	r3, r3
 800c142:	f003 0304 	and.w	r3, r3, #4
 800c146:	b25b      	sxtb	r3, r3
 800c148:	4313      	orrs	r3, r2
 800c14a:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800c14c:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800c14e:	2300      	movs	r3, #0
 800c150:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800c152:	69fb      	ldr	r3, [r7, #28]
 800c154:	6818      	ldr	r0, [r3, #0]
 800c156:	7efa      	ldrb	r2, [r7, #27]
 800c158:	f107 0310 	add.w	r3, r7, #16
 800c15c:	9300      	str	r3, [sp, #0]
 800c15e:	4613      	mov	r3, r2
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	68b9      	ldr	r1, [r7, #8]
 800c164:	f7fd fd76 	bl	8009c54 <netconn_write_partly>
 800c168:	4603      	mov	r3, r0
 800c16a:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800c16c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c170:	4618      	mov	r0, r3
 800c172:	f7ff f9f5 	bl	800b560 <err_to_errno>
 800c176:	6178      	str	r0, [r7, #20]
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d002      	beq.n	800c184 <lwip_send+0xa0>
 800c17e:	4a07      	ldr	r2, [pc, #28]	@ (800c19c <lwip_send+0xb8>)
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800c184:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d101      	bne.n	800c190 <lwip_send+0xac>
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	e001      	b.n	800c194 <lwip_send+0xb0>
 800c190:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c194:	4618      	mov	r0, r3
 800c196:	3720      	adds	r7, #32
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	20014c9c 	.word	0x20014c9c

0800c1a0 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b08e      	sub	sp, #56	@ 0x38
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	607a      	str	r2, [r7, #4]
 800c1ac:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800c1ae:	68f8      	ldr	r0, [r7, #12]
 800c1b0:	f7ff fac4 	bl	800b73c <get_socket>
 800c1b4:	6338      	str	r0, [r7, #48]	@ 0x30
  if (!sock) {
 800c1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d102      	bne.n	800c1c2 <lwip_sendto+0x22>
    return -1;
 800c1bc:	f04f 33ff 	mov.w	r3, #4294967295
 800c1c0:	e093      	b.n	800c2ea <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800c1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c1cc:	2b10      	cmp	r3, #16
 800c1ce:	d107      	bne.n	800c1e0 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	68b9      	ldr	r1, [r7, #8]
 800c1d6:	68f8      	ldr	r0, [r7, #12]
 800c1d8:	f7ff ff84 	bl	800c0e4 <lwip_send>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	e084      	b.n	800c2ea <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1e6:	d30a      	bcc.n	800c1fe <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800c1e8:	235a      	movs	r3, #90	@ 0x5a
 800c1ea:	623b      	str	r3, [r7, #32]
 800c1ec:	6a3b      	ldr	r3, [r7, #32]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d002      	beq.n	800c1f8 <lwip_sendto+0x58>
 800c1f2:	4a40      	ldr	r2, [pc, #256]	@ (800c2f4 <lwip_sendto+0x154>)
 800c1f4:	6a3b      	ldr	r3, [r7, #32]
 800c1f6:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800c1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c1fc:	e075      	b.n	800c2ea <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800c202:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c204:	2b00      	cmp	r3, #0
 800c206:	d102      	bne.n	800c20e <lwip_sendto+0x6e>
 800c208:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d023      	beq.n	800c256 <lwip_sendto+0xb6>
 800c20e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c210:	2b10      	cmp	r3, #16
 800c212:	d10b      	bne.n	800c22c <lwip_sendto+0x8c>
 800c214:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c216:	2b00      	cmp	r3, #0
 800c218:	d008      	beq.n	800c22c <lwip_sendto+0x8c>
 800c21a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c21c:	785b      	ldrb	r3, [r3, #1]
 800c21e:	2b02      	cmp	r3, #2
 800c220:	d104      	bne.n	800c22c <lwip_sendto+0x8c>
 800c222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c224:	f003 0303 	and.w	r3, r3, #3
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d014      	beq.n	800c256 <lwip_sendto+0xb6>
 800c22c:	4b32      	ldr	r3, [pc, #200]	@ (800c2f8 <lwip_sendto+0x158>)
 800c22e:	f240 6252 	movw	r2, #1618	@ 0x652
 800c232:	4932      	ldr	r1, [pc, #200]	@ (800c2fc <lwip_sendto+0x15c>)
 800c234:	4832      	ldr	r0, [pc, #200]	@ (800c300 <lwip_sendto+0x160>)
 800c236:	f019 f947 	bl	80254c8 <iprintf>
 800c23a:	f06f 000f 	mvn.w	r0, #15
 800c23e:	f7ff f98f 	bl	800b560 <err_to_errno>
 800c242:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c246:	2b00      	cmp	r3, #0
 800c248:	d002      	beq.n	800c250 <lwip_sendto+0xb0>
 800c24a:	4a2a      	ldr	r2, [pc, #168]	@ (800c2f4 <lwip_sendto+0x154>)
 800c24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c24e:	6013      	str	r3, [r2, #0]
 800c250:	f04f 33ff 	mov.w	r3, #4294967295
 800c254:	e049      	b.n	800c2ea <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800c256:	2300      	movs	r3, #0
 800c258:	617b      	str	r3, [r7, #20]
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800c25e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c260:	2b00      	cmp	r3, #0
 800c262:	d00a      	beq.n	800c27a <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800c264:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	61bb      	str	r3, [r7, #24]
 800c26a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c26c:	885b      	ldrh	r3, [r3, #2]
 800c26e:	4618      	mov	r0, r3
 800c270:	f000 fe36 	bl	800cee0 <lwip_htons>
 800c274:	4603      	mov	r3, r0
 800c276:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800c278:	e003      	b.n	800c282 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800c27a:	2300      	movs	r3, #0
 800c27c:	86bb      	strh	r3, [r7, #52]	@ 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800c27e:	2300      	movs	r3, #0
 800c280:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800c282:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800c284:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800c286:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c288:	f107 0310 	add.w	r3, r7, #16
 800c28c:	68b9      	ldr	r1, [r7, #8]
 800c28e:	4618      	mov	r0, r3
 800c290:	f7ff f9cc 	bl	800b62c <netbuf_ref>
 800c294:	4603      	mov	r3, r0
 800c296:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800c29a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d10a      	bne.n	800c2b8 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800c2a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f107 0210 	add.w	r2, r7, #16
 800c2aa:	4611      	mov	r1, r2
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7fd fca3 	bl	8009bf8 <netconn_send>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800c2b8:	f107 0310 	add.w	r3, r7, #16
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f7ff f98d 	bl	800b5dc <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800c2c2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f7ff f94a 	bl	800b560 <err_to_errno>
 800c2cc:	6278      	str	r0, [r7, #36]	@ 0x24
 800c2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d002      	beq.n	800c2da <lwip_sendto+0x13a>
 800c2d4:	4a07      	ldr	r2, [pc, #28]	@ (800c2f4 <lwip_sendto+0x154>)
 800c2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d8:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800c2da:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d101      	bne.n	800c2e6 <lwip_sendto+0x146>
 800c2e2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c2e4:	e001      	b.n	800c2ea <lwip_sendto+0x14a>
 800c2e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3738      	adds	r7, #56	@ 0x38
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	20014c9c 	.word	0x20014c9c
 800c2f8:	0802728c 	.word	0x0802728c
 800c2fc:	0802756c 	.word	0x0802756c
 800c300:	080272e0 	.word	0x080272e0

0800c304 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b086      	sub	sp, #24
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	2b03      	cmp	r3, #3
 800c314:	d009      	beq.n	800c32a <lwip_socket+0x26>
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	2b03      	cmp	r3, #3
 800c31a:	dc23      	bgt.n	800c364 <lwip_socket+0x60>
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	2b01      	cmp	r3, #1
 800c320:	d019      	beq.n	800c356 <lwip_socket+0x52>
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	2b02      	cmp	r3, #2
 800c326:	d009      	beq.n	800c33c <lwip_socket+0x38>
 800c328:	e01c      	b.n	800c364 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	b2db      	uxtb	r3, r3
 800c32e:	4a22      	ldr	r2, [pc, #136]	@ (800c3b8 <lwip_socket+0xb4>)
 800c330:	4619      	mov	r1, r3
 800c332:	2040      	movs	r0, #64	@ 0x40
 800c334:	f7fd f908 	bl	8009548 <netconn_new_with_proto_and_callback>
 800c338:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800c33a:	e019      	b.n	800c370 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2b88      	cmp	r3, #136	@ 0x88
 800c340:	d101      	bne.n	800c346 <lwip_socket+0x42>
 800c342:	2321      	movs	r3, #33	@ 0x21
 800c344:	e000      	b.n	800c348 <lwip_socket+0x44>
 800c346:	2320      	movs	r3, #32
 800c348:	4a1b      	ldr	r2, [pc, #108]	@ (800c3b8 <lwip_socket+0xb4>)
 800c34a:	2100      	movs	r1, #0
 800c34c:	4618      	mov	r0, r3
 800c34e:	f7fd f8fb 	bl	8009548 <netconn_new_with_proto_and_callback>
 800c352:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800c354:	e00c      	b.n	800c370 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800c356:	4a18      	ldr	r2, [pc, #96]	@ (800c3b8 <lwip_socket+0xb4>)
 800c358:	2100      	movs	r1, #0
 800c35a:	2010      	movs	r0, #16
 800c35c:	f7fd f8f4 	bl	8009548 <netconn_new_with_proto_and_callback>
 800c360:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800c362:	e005      	b.n	800c370 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800c364:	4b15      	ldr	r3, [pc, #84]	@ (800c3bc <lwip_socket+0xb8>)
 800c366:	2216      	movs	r2, #22
 800c368:	601a      	str	r2, [r3, #0]
      return -1;
 800c36a:	f04f 33ff 	mov.w	r3, #4294967295
 800c36e:	e01e      	b.n	800c3ae <lwip_socket+0xaa>
  }

  if (!conn) {
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d105      	bne.n	800c382 <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800c376:	4b11      	ldr	r3, [pc, #68]	@ (800c3bc <lwip_socket+0xb8>)
 800c378:	2269      	movs	r2, #105	@ 0x69
 800c37a:	601a      	str	r2, [r3, #0]
    return -1;
 800c37c:	f04f 33ff 	mov.w	r3, #4294967295
 800c380:	e015      	b.n	800c3ae <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800c382:	2100      	movs	r1, #0
 800c384:	6978      	ldr	r0, [r7, #20]
 800c386:	f7ff f9f1 	bl	800b76c <alloc_socket>
 800c38a:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c392:	d108      	bne.n	800c3a6 <lwip_socket+0xa2>
    netconn_delete(conn);
 800c394:	6978      	ldr	r0, [r7, #20]
 800c396:	f7fd f975 	bl	8009684 <netconn_delete>
    set_errno(ENFILE);
 800c39a:	4b08      	ldr	r3, [pc, #32]	@ (800c3bc <lwip_socket+0xb8>)
 800c39c:	2217      	movs	r2, #23
 800c39e:	601a      	str	r2, [r3, #0]
    return -1;
 800c3a0:	f04f 33ff 	mov.w	r3, #4294967295
 800c3a4:	e003      	b.n	800c3ae <lwip_socket+0xaa>
  }
  conn->socket = i;
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	693a      	ldr	r2, [r7, #16]
 800c3aa:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800c3ac:	693b      	ldr	r3, [r7, #16]
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3718      	adds	r7, #24
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
 800c3b6:	bf00      	nop
 800c3b8:	0800c449 	.word	0x0800c449
 800c3bc:	20014c9c 	.word	0x20014c9c

0800c3c0 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b087      	sub	sp, #28
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	60f8      	str	r0, [r7, #12]
 800c3c8:	60b9      	str	r1, [r7, #8]
 800c3ca:	607a      	str	r2, [r7, #4]
 800c3cc:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	617b      	str	r3, [r7, #20]
 800c3d2:	e02c      	b.n	800c42e <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	695a      	ldr	r2, [r3, #20]
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	00db      	lsls	r3, r3, #3
 800c3dc:	4413      	add	r3, r2
 800c3de:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	68ba      	ldr	r2, [r7, #8]
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d11e      	bne.n	800c428 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d009      	beq.n	800c404 <lwip_poll_should_wake+0x44>
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c3f6:	b29b      	uxth	r3, r3
 800c3f8:	f003 0301 	and.w	r3, r3, #1
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d001      	beq.n	800c404 <lwip_poll_should_wake+0x44>
        return 1;
 800c400:	2301      	movs	r3, #1
 800c402:	e01a      	b.n	800c43a <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d009      	beq.n	800c41e <lwip_poll_should_wake+0x5e>
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c410:	b29b      	uxth	r3, r3
 800c412:	f003 0302 	and.w	r3, r3, #2
 800c416:	2b00      	cmp	r3, #0
 800c418:	d001      	beq.n	800c41e <lwip_poll_should_wake+0x5e>
        return 1;
 800c41a:	2301      	movs	r3, #1
 800c41c:	e00d      	b.n	800c43a <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800c41e:	6a3b      	ldr	r3, [r7, #32]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d001      	beq.n	800c428 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800c424:	2301      	movs	r3, #1
 800c426:	e008      	b.n	800c43a <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	3301      	adds	r3, #1
 800c42c:	617b      	str	r3, [r7, #20]
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	699b      	ldr	r3, [r3, #24]
 800c432:	697a      	ldr	r2, [r7, #20]
 800c434:	429a      	cmp	r2, r3
 800c436:	d3cd      	bcc.n	800c3d4 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800c438:	2300      	movs	r3, #0
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	371c      	adds	r7, #28
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr
	...

0800c448 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b08a      	sub	sp, #40	@ 0x28
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	460b      	mov	r3, r1
 800c452:	70fb      	strb	r3, [r7, #3]
 800c454:	4613      	mov	r3, r2
 800c456:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	f000 80a4 	beq.w	800c5a8 <event_callback+0x160>
    s = conn->socket;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	699b      	ldr	r3, [r3, #24]
 800c464:	627b      	str	r3, [r7, #36]	@ 0x24
    if (s < 0) {
 800c466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c468:	2b00      	cmp	r3, #0
 800c46a:	da18      	bge.n	800c49e <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800c46c:	f00c f852 	bl	8018514 <sys_arch_protect>
 800c470:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	699b      	ldr	r3, [r3, #24]
 800c476:	2b00      	cmp	r3, #0
 800c478:	da0b      	bge.n	800c492 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800c47a:	78fb      	ldrb	r3, [r7, #3]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d104      	bne.n	800c48a <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	699b      	ldr	r3, [r3, #24]
 800c484:	1e5a      	subs	r2, r3, #1
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800c48a:	69f8      	ldr	r0, [r7, #28]
 800c48c:	f00c f850 	bl	8018530 <sys_arch_unprotect>
        return;
 800c490:	e08d      	b.n	800c5ae <event_callback+0x166>
      }
      s = conn->socket;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	699b      	ldr	r3, [r3, #24]
 800c496:	627b      	str	r3, [r7, #36]	@ 0x24
      SYS_ARCH_UNPROTECT(lev);
 800c498:	69f8      	ldr	r0, [r7, #28]
 800c49a:	f00c f849 	bl	8018530 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800c49e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c4a0:	f7ff f94c 	bl	800b73c <get_socket>
 800c4a4:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800c4a6:	69bb      	ldr	r3, [r7, #24]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d07f      	beq.n	800c5ac <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800c4b0:	f00c f830 	bl	8018514 <sys_arch_protect>
 800c4b4:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800c4b6:	78fb      	ldrb	r3, [r7, #3]
 800c4b8:	2b04      	cmp	r3, #4
 800c4ba:	d83e      	bhi.n	800c53a <event_callback+0xf2>
 800c4bc:	a201      	add	r2, pc, #4	@ (adr r2, 800c4c4 <event_callback+0x7c>)
 800c4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c2:	bf00      	nop
 800c4c4:	0800c4d9 	.word	0x0800c4d9
 800c4c8:	0800c4fb 	.word	0x0800c4fb
 800c4cc:	0800c513 	.word	0x0800c513
 800c4d0:	0800c527 	.word	0x0800c527
 800c4d4:	0800c533 	.word	0x0800c533
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800c4d8:	69bb      	ldr	r3, [r7, #24]
 800c4da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c4de:	b29b      	uxth	r3, r3
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	b29b      	uxth	r3, r3
 800c4e4:	b21a      	sxth	r2, r3
 800c4e6:	69bb      	ldr	r3, [r7, #24]
 800c4e8:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800c4ea:	69bb      	ldr	r3, [r7, #24]
 800c4ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c4f0:	2b01      	cmp	r3, #1
 800c4f2:	dd2a      	ble.n	800c54a <event_callback+0x102>
        check_waiters = 0;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	623b      	str	r3, [r7, #32]
      }
      break;
 800c4f8:	e027      	b.n	800c54a <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800c4fa:	69bb      	ldr	r3, [r7, #24]
 800c4fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c500:	b29b      	uxth	r3, r3
 800c502:	3b01      	subs	r3, #1
 800c504:	b29b      	uxth	r3, r3
 800c506:	b21a      	sxth	r2, r3
 800c508:	69bb      	ldr	r3, [r7, #24]
 800c50a:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800c50c:	2300      	movs	r3, #0
 800c50e:	623b      	str	r3, [r7, #32]
      break;
 800c510:	e01c      	b.n	800c54c <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800c512:	69bb      	ldr	r3, [r7, #24]
 800c514:	895b      	ldrh	r3, [r3, #10]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d001      	beq.n	800c51e <event_callback+0xd6>
        check_waiters = 0;
 800c51a:	2300      	movs	r3, #0
 800c51c:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800c51e:	69bb      	ldr	r3, [r7, #24]
 800c520:	2201      	movs	r2, #1
 800c522:	815a      	strh	r2, [r3, #10]
      break;
 800c524:	e012      	b.n	800c54c <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800c526:	69bb      	ldr	r3, [r7, #24]
 800c528:	2200      	movs	r2, #0
 800c52a:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800c52c:	2300      	movs	r3, #0
 800c52e:	623b      	str	r3, [r7, #32]
      break;
 800c530:	e00c      	b.n	800c54c <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800c532:	69bb      	ldr	r3, [r7, #24]
 800c534:	2201      	movs	r2, #1
 800c536:	819a      	strh	r2, [r3, #12]
      break;
 800c538:	e008      	b.n	800c54c <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800c53a:	4b1e      	ldr	r3, [pc, #120]	@ (800c5b4 <event_callback+0x16c>)
 800c53c:	f44f 621f 	mov.w	r2, #2544	@ 0x9f0
 800c540:	491d      	ldr	r1, [pc, #116]	@ (800c5b8 <event_callback+0x170>)
 800c542:	481e      	ldr	r0, [pc, #120]	@ (800c5bc <event_callback+0x174>)
 800c544:	f018 ffc0 	bl	80254c8 <iprintf>
      break;
 800c548:	e000      	b.n	800c54c <event_callback+0x104>
      break;
 800c54a:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800c54c:	69bb      	ldr	r3, [r7, #24]
 800c54e:	7b9b      	ldrb	r3, [r3, #14]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d025      	beq.n	800c5a0 <event_callback+0x158>
 800c554:	6a3b      	ldr	r3, [r7, #32]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d022      	beq.n	800c5a0 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c560:	2b00      	cmp	r3, #0
 800c562:	bfcc      	ite	gt
 800c564:	2301      	movgt	r3, #1
 800c566:	2300      	movle	r3, #0
 800c568:	b2db      	uxtb	r3, r3
 800c56a:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800c56c:	69bb      	ldr	r3, [r7, #24]
 800c56e:	895b      	ldrh	r3, [r3, #10]
 800c570:	2b00      	cmp	r3, #0
 800c572:	bf14      	ite	ne
 800c574:	2301      	movne	r3, #1
 800c576:	2300      	moveq	r3, #0
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800c57c:	69bb      	ldr	r3, [r7, #24]
 800c57e:	899b      	ldrh	r3, [r3, #12]
 800c580:	2b00      	cmp	r3, #0
 800c582:	bf14      	ite	ne
 800c584:	2301      	movne	r3, #1
 800c586:	2300      	moveq	r3, #0
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800c58c:	69f8      	ldr	r0, [r7, #28]
 800c58e:	f00b ffcf 	bl	8018530 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	693a      	ldr	r2, [r7, #16]
 800c596:	6979      	ldr	r1, [r7, #20]
 800c598:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c59a:	f000 f811 	bl	800c5c0 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800c59e:	e006      	b.n	800c5ae <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800c5a0:	69f8      	ldr	r0, [r7, #28]
 800c5a2:	f00b ffc5 	bl	8018530 <sys_arch_unprotect>
 800c5a6:	e002      	b.n	800c5ae <event_callback+0x166>
    return;
 800c5a8:	bf00      	nop
 800c5aa:	e000      	b.n	800c5ae <event_callback+0x166>
      return;
 800c5ac:	bf00      	nop
  }
  done_socket(sock);
}
 800c5ae:	3728      	adds	r7, #40	@ 0x28
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	0802728c 	.word	0x0802728c
 800c5b8:	08027608 	.word	0x08027608
 800c5bc:	080272e0 	.word	0x080272e0

0800c5c0 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b088      	sub	sp, #32
 800c5c4:	af02      	add	r7, sp, #8
 800c5c6:	60f8      	str	r0, [r7, #12]
 800c5c8:	60b9      	str	r1, [r7, #8]
 800c5ca:	607a      	str	r2, [r7, #4]
 800c5cc:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800c5ce:	4b42      	ldr	r3, [pc, #264]	@ (800c6d8 <select_check_waiters+0x118>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	617b      	str	r3, [r7, #20]
 800c5d4:	e078      	b.n	800c6c8 <select_check_waiters+0x108>
    if (scb->sem_signalled == 0) {
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	69db      	ldr	r3, [r3, #28]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d171      	bne.n	800c6c2 <select_check_waiters+0x102>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	695b      	ldr	r3, [r3, #20]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d009      	beq.n	800c5fe <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	9300      	str	r3, [sp, #0]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	68ba      	ldr	r2, [r7, #8]
 800c5f2:	68f9      	ldr	r1, [r7, #12]
 800c5f4:	6978      	ldr	r0, [r7, #20]
 800c5f6:	f7ff fee3 	bl	800c3c0 <lwip_poll_should_wake>
 800c5fa:	6138      	str	r0, [r7, #16]
 800c5fc:	e056      	b.n	800c6ac <select_check_waiters+0xec>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d017      	beq.n	800c634 <select_check_waiters+0x74>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	689b      	ldr	r3, [r3, #8]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d013      	beq.n	800c634 <select_check_waiters+0x74>
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	689a      	ldr	r2, [r3, #8]
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	2b00      	cmp	r3, #0
 800c614:	da00      	bge.n	800c618 <select_check_waiters+0x58>
 800c616:	331f      	adds	r3, #31
 800c618:	115b      	asrs	r3, r3, #5
 800c61a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f003 031f 	and.w	r3, r3, #31
 800c624:	fa22 f303 	lsr.w	r3, r2, r3
 800c628:	f003 0301 	and.w	r3, r3, #1
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d001      	beq.n	800c634 <select_check_waiters+0x74>
            do_signal = 1;
 800c630:	2301      	movs	r3, #1
 800c632:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d01a      	beq.n	800c670 <select_check_waiters+0xb0>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d117      	bne.n	800c670 <select_check_waiters+0xb0>
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	68db      	ldr	r3, [r3, #12]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d013      	beq.n	800c670 <select_check_waiters+0xb0>
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	68da      	ldr	r2, [r3, #12]
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	da00      	bge.n	800c654 <select_check_waiters+0x94>
 800c652:	331f      	adds	r3, #31
 800c654:	115b      	asrs	r3, r3, #5
 800c656:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	f003 031f 	and.w	r3, r3, #31
 800c660:	fa22 f303 	lsr.w	r3, r2, r3
 800c664:	f003 0301 	and.w	r3, r3, #1
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d001      	beq.n	800c670 <select_check_waiters+0xb0>
            do_signal = 1;
 800c66c:	2301      	movs	r3, #1
 800c66e:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d01a      	beq.n	800c6ac <select_check_waiters+0xec>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d117      	bne.n	800c6ac <select_check_waiters+0xec>
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	691b      	ldr	r3, [r3, #16]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d013      	beq.n	800c6ac <select_check_waiters+0xec>
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	691a      	ldr	r2, [r3, #16]
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	da00      	bge.n	800c690 <select_check_waiters+0xd0>
 800c68e:	331f      	adds	r3, #31
 800c690:	115b      	asrs	r3, r3, #5
 800c692:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f003 031f 	and.w	r3, r3, #31
 800c69c:	fa22 f303 	lsr.w	r3, r2, r3
 800c6a0:	f003 0301 	and.w	r3, r3, #1
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d001      	beq.n	800c6ac <select_check_waiters+0xec>
            do_signal = 1;
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d007      	beq.n	800c6c2 <select_check_waiters+0x102>
        scb->sem_signalled = 1;
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	3320      	adds	r3, #32
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f00b fe85 	bl	80183cc <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	617b      	str	r3, [r7, #20]
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d183      	bne.n	800c5d6 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800c6ce:	bf00      	nop
 800c6d0:	bf00      	nop
 800c6d2:	3718      	adds	r7, #24
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	2000cbfc 	.word	0x2000cbfc

0800c6dc <lwip_sockopt_to_ipopt>:
}
#endif  /* LWIP_TCPIP_CORE_LOCKING */

static int
lwip_sockopt_to_ipopt(int optname)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  /* Map SO_* values to our internal SOF_* values
   * We should not rely on #defines in socket.h
   * being in sync with ip.h.
   */
  switch (optname) {
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2b20      	cmp	r3, #32
 800c6e8:	d009      	beq.n	800c6fe <lwip_sockopt_to_ipopt+0x22>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2b20      	cmp	r3, #32
 800c6ee:	dc0c      	bgt.n	800c70a <lwip_sockopt_to_ipopt+0x2e>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2b04      	cmp	r3, #4
 800c6f4:	d007      	beq.n	800c706 <lwip_sockopt_to_ipopt+0x2a>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2b08      	cmp	r3, #8
 800c6fa:	d002      	beq.n	800c702 <lwip_sockopt_to_ipopt+0x26>
 800c6fc:	e005      	b.n	800c70a <lwip_sockopt_to_ipopt+0x2e>
  case SO_BROADCAST:
    return SOF_BROADCAST;
 800c6fe:	2320      	movs	r3, #32
 800c700:	e00b      	b.n	800c71a <lwip_sockopt_to_ipopt+0x3e>
  case SO_KEEPALIVE:
    return SOF_KEEPALIVE;
 800c702:	2308      	movs	r3, #8
 800c704:	e009      	b.n	800c71a <lwip_sockopt_to_ipopt+0x3e>
  case SO_REUSEADDR:
    return SOF_REUSEADDR;
 800c706:	2304      	movs	r3, #4
 800c708:	e007      	b.n	800c71a <lwip_sockopt_to_ipopt+0x3e>
  default:
    LWIP_ASSERT("Unknown socket option", 0);
 800c70a:	4b06      	ldr	r3, [pc, #24]	@ (800c724 <lwip_sockopt_to_ipopt+0x48>)
 800c70c:	f640 3239 	movw	r2, #2873	@ 0xb39
 800c710:	4905      	ldr	r1, [pc, #20]	@ (800c728 <lwip_sockopt_to_ipopt+0x4c>)
 800c712:	4806      	ldr	r0, [pc, #24]	@ (800c72c <lwip_sockopt_to_ipopt+0x50>)
 800c714:	f018 fed8 	bl	80254c8 <iprintf>
    return 0;
 800c718:	2300      	movs	r3, #0
  }
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3708      	adds	r7, #8
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
 800c722:	bf00      	nop
 800c724:	0802728c 	.word	0x0802728c
 800c728:	08027618 	.word	0x08027618
 800c72c:	080272e0 	.word	0x080272e0

0800c730 <lwip_setsockopt>:
  return err;
}

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b08a      	sub	sp, #40	@ 0x28
 800c734:	af02      	add	r7, sp, #8
 800c736:	60f8      	str	r0, [r7, #12]
 800c738:	60b9      	str	r1, [r7, #8]
 800c73a:	607a      	str	r2, [r7, #4]
 800c73c:	603b      	str	r3, [r7, #0]
  int err = 0;
 800c73e:	2300      	movs	r3, #0
 800c740:	61fb      	str	r3, [r7, #28]
  struct lwip_sock *sock = get_socket(s);
 800c742:	68f8      	ldr	r0, [r7, #12]
 800c744:	f7fe fffa 	bl	800b73c <get_socket>
 800c748:	61b8      	str	r0, [r7, #24]
#if !LWIP_TCPIP_CORE_LOCKING
  err_t cberr;
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
 800c74a:	69bb      	ldr	r3, [r7, #24]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d102      	bne.n	800c756 <lwip_setsockopt+0x26>
    return -1;
 800c750:	f04f 33ff 	mov.w	r3, #4294967295
 800c754:	e02b      	b.n	800c7ae <lwip_setsockopt+0x7e>
  }

  if (NULL == optval) {
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d10a      	bne.n	800c772 <lwip_setsockopt+0x42>
    sock_set_errno(sock, EFAULT);
 800c75c:	230e      	movs	r3, #14
 800c75e:	613b      	str	r3, [r7, #16]
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d002      	beq.n	800c76c <lwip_setsockopt+0x3c>
 800c766:	4a14      	ldr	r2, [pc, #80]	@ (800c7b8 <lwip_setsockopt+0x88>)
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800c76c:	f04f 33ff 	mov.w	r3, #4294967295
 800c770:	e01d      	b.n	800c7ae <lwip_setsockopt+0x7e>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
 800c772:	4812      	ldr	r0, [pc, #72]	@ (800c7bc <lwip_setsockopt+0x8c>)
 800c774:	f00b fe8c 	bl	8018490 <sys_mutex_lock>
  err = lwip_setsockopt_impl(s, level, optname, optval, optlen);
 800c778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c77a:	9300      	str	r3, [sp, #0]
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	687a      	ldr	r2, [r7, #4]
 800c780:	68b9      	ldr	r1, [r7, #8]
 800c782:	68f8      	ldr	r0, [r7, #12]
 800c784:	f000 f81c 	bl	800c7c0 <lwip_setsockopt_impl>
 800c788:	61f8      	str	r0, [r7, #28]
  UNLOCK_TCPIP_CORE();
 800c78a:	480c      	ldr	r0, [pc, #48]	@ (800c7bc <lwip_setsockopt+0x8c>)
 800c78c:	f00b fe8f 	bl	80184ae <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif  /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
 800c790:	69fb      	ldr	r3, [r7, #28]
 800c792:	617b      	str	r3, [r7, #20]
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d002      	beq.n	800c7a0 <lwip_setsockopt+0x70>
 800c79a:	4a07      	ldr	r2, [pc, #28]	@ (800c7b8 <lwip_setsockopt+0x88>)
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return err ? -1 : 0;
 800c7a0:	69fb      	ldr	r3, [r7, #28]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d002      	beq.n	800c7ac <lwip_setsockopt+0x7c>
 800c7a6:	f04f 33ff 	mov.w	r3, #4294967295
 800c7aa:	e000      	b.n	800c7ae <lwip_setsockopt+0x7e>
 800c7ac:	2300      	movs	r3, #0
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3720      	adds	r7, #32
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	20014c9c 	.word	0x20014c9c
 800c7bc:	2000cc0c 	.word	0x2000cc0c

0800c7c0 <lwip_setsockopt_impl>:
/** lwip_setsockopt_impl: the actual implementation of setsockopt:
 * same argument as lwip_setsockopt, either called directly or through callback
 */
static int
lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b08a      	sub	sp, #40	@ 0x28
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	60f8      	str	r0, [r7, #12]
 800c7c8:	60b9      	str	r1, [r7, #8]
 800c7ca:	607a      	str	r2, [r7, #4]
 800c7cc:	603b      	str	r3, [r7, #0]
  int err = 0;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	627b      	str	r3, [r7, #36]	@ 0x24
  struct lwip_sock *sock = tryget_socket(s);
 800c7d2:	68f8      	ldr	r0, [r7, #12]
 800c7d4:	f7fe ff9b 	bl	800b70e <tryget_socket>
 800c7d8:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800c7da:	69fb      	ldr	r3, [r7, #28]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d101      	bne.n	800c7e4 <lwip_setsockopt_impl+0x24>
    return EBADF;
 800c7e0:	2309      	movs	r3, #9
 800c7e2:	e1b9      	b.n	800cb58 <lwip_setsockopt_impl+0x398>
  if (LWIP_HOOK_SOCKETS_SETSOCKOPT(s, sock, level, optname, optval, optlen, &err)) {
    return err;
  }
#endif

  switch (level) {
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d015      	beq.n	800c81a <lwip_setsockopt_impl+0x5a>
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c7f4:	f280 81ac 	bge.w	800cb50 <lwip_setsockopt_impl+0x390>
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	2bff      	cmp	r3, #255	@ 0xff
 800c7fc:	f000 81a4 	beq.w	800cb48 <lwip_setsockopt_impl+0x388>
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	2bff      	cmp	r3, #255	@ 0xff
 800c804:	f300 81a4 	bgt.w	800cb50 <lwip_setsockopt_impl+0x390>
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f000 8112 	beq.w	800ca34 <lwip_setsockopt_impl+0x274>
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	2b06      	cmp	r3, #6
 800c814:	f000 8148 	beq.w	800caa8 <lwip_setsockopt_impl+0x2e8>
 800c818:	e19a      	b.n	800cb50 <lwip_setsockopt_impl+0x390>

    /* Level: SOL_SOCKET */
    case SOL_SOCKET:
      switch (optname) {
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f241 020b 	movw	r2, #4107	@ 0x100b
 800c820:	4293      	cmp	r3, r2
 800c822:	f000 80c3 	beq.w	800c9ac <lwip_setsockopt_impl+0x1ec>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f241 020b 	movw	r2, #4107	@ 0x100b
 800c82c:	4293      	cmp	r3, r2
 800c82e:	f300 80fd 	bgt.w	800ca2c <lwip_setsockopt_impl+0x26c>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f241 020a 	movw	r2, #4106	@ 0x100a
 800c838:	4293      	cmp	r3, r2
 800c83a:	f000 8082 	beq.w	800c942 <lwip_setsockopt_impl+0x182>
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f241 020a 	movw	r2, #4106	@ 0x100a
 800c844:	4293      	cmp	r3, r2
 800c846:	f300 80f1 	bgt.w	800ca2c <lwip_setsockopt_impl+0x26c>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f241 0206 	movw	r2, #4102	@ 0x1006
 800c850:	4293      	cmp	r3, r2
 800c852:	d050      	beq.n	800c8f6 <lwip_setsockopt_impl+0x136>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f241 0206 	movw	r2, #4102	@ 0x1006
 800c85a:	4293      	cmp	r3, r2
 800c85c:	f300 80e6 	bgt.w	800ca2c <lwip_setsockopt_impl+0x26c>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2b08      	cmp	r3, #8
 800c864:	d003      	beq.n	800c86e <lwip_setsockopt_impl+0xae>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2b20      	cmp	r3, #32
 800c86a:	f040 80df 	bne.w	800ca2c <lwip_setsockopt_impl+0x26c>
        case SO_BROADCAST:
        case SO_KEEPALIVE:
#if SO_REUSE
        case SO_REUSEADDR:
#endif /* SO_REUSE */
          if ((optname == SO_BROADCAST) &&
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2b20      	cmp	r3, #32
 800c872:	d108      	bne.n	800c886 <lwip_setsockopt_impl+0xc6>
              (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_UDP)) {
 800c874:	69fb      	ldr	r3, [r7, #28]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if ((optname == SO_BROADCAST) &&
 800c87e:	2b20      	cmp	r3, #32
 800c880:	d001      	beq.n	800c886 <lwip_setsockopt_impl+0xc6>
            done_socket(sock);
            return ENOPROTOOPT;
 800c882:	235c      	movs	r3, #92	@ 0x5c
 800c884:	e168      	b.n	800cb58 <lwip_setsockopt_impl+0x398>
          }

          optname = lwip_sockopt_to_ipopt(optname);
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f7ff ff28 	bl	800c6dc <lwip_sockopt_to_ipopt>
 800c88c:	6078      	str	r0, [r7, #4]

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800c88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c890:	2b03      	cmp	r3, #3
 800c892:	d801      	bhi.n	800c898 <lwip_setsockopt_impl+0xd8>
 800c894:	2316      	movs	r3, #22
 800c896:	e15f      	b.n	800cb58 <lwip_setsockopt_impl+0x398>
 800c898:	69fb      	ldr	r3, [r7, #28]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d004      	beq.n	800c8aa <lwip_setsockopt_impl+0xea>
 800c8a0:	69fb      	ldr	r3, [r7, #28]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d101      	bne.n	800c8ae <lwip_setsockopt_impl+0xee>
 800c8aa:	2316      	movs	r3, #22
 800c8ac:	e154      	b.n	800cb58 <lwip_setsockopt_impl+0x398>
          if (*(const int *)optval) {
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d00e      	beq.n	800c8d4 <lwip_setsockopt_impl+0x114>
            ip_set_option(sock->conn->pcb.ip, optname);
 800c8b6:	69fb      	ldr	r3, [r7, #28]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	7a5b      	ldrb	r3, [r3, #9]
 800c8be:	b25a      	sxtb	r2, r3
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	b25b      	sxtb	r3, r3
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	b25a      	sxtb	r2, r3
 800c8c8:	69fb      	ldr	r3, [r7, #28]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	b2d2      	uxtb	r2, r2
 800c8d0:	725a      	strb	r2, [r3, #9]
          } else {
            ip_reset_option(sock->conn->pcb.ip, optname);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                                      s, optname, (*(const int *)optval ? "on" : "off")));
          break;
 800c8d2:	e0ae      	b.n	800ca32 <lwip_setsockopt_impl+0x272>
            ip_reset_option(sock->conn->pcb.ip, optname);
 800c8d4:	69fb      	ldr	r3, [r7, #28]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	685b      	ldr	r3, [r3, #4]
 800c8da:	7a5b      	ldrb	r3, [r3, #9]
 800c8dc:	b25a      	sxtb	r2, r3
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	b25b      	sxtb	r3, r3
 800c8e2:	43db      	mvns	r3, r3
 800c8e4:	b25b      	sxtb	r3, r3
 800c8e6:	4013      	ands	r3, r2
 800c8e8:	b25a      	sxtb	r2, r3
 800c8ea:	69fb      	ldr	r3, [r7, #28]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	b2d2      	uxtb	r2, r2
 800c8f2:	725a      	strb	r2, [r3, #9]
          break;
 800c8f4:	e09d      	b.n	800ca32 <lwip_setsockopt_impl+0x272>
        }
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
        case SO_RCVTIMEO: {
          long ms_long;
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
 800c8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8f8:	2b0f      	cmp	r3, #15
 800c8fa:	d801      	bhi.n	800c900 <lwip_setsockopt_impl+0x140>
 800c8fc:	2316      	movs	r3, #22
 800c8fe:	e12b      	b.n	800cb58 <lwip_setsockopt_impl+0x398>
 800c900:	69fb      	ldr	r3, [r7, #28]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d101      	bne.n	800c90c <lwip_setsockopt_impl+0x14c>
 800c908:	2316      	movs	r3, #22
 800c90a:	e125      	b.n	800cb58 <lwip_setsockopt_impl+0x398>
          ms_long = LWIP_SO_SNDRCVTIMEO_GET_MS(optval);
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c912:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c916:	fb03 f202 	mul.w	r2, r3, r2
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	689b      	ldr	r3, [r3, #8]
 800c91e:	4990      	ldr	r1, [pc, #576]	@ (800cb60 <lwip_setsockopt_impl+0x3a0>)
 800c920:	fb81 0103 	smull	r0, r1, r1, r3
 800c924:	1189      	asrs	r1, r1, #6
 800c926:	17db      	asrs	r3, r3, #31
 800c928:	1acb      	subs	r3, r1, r3
 800c92a:	4413      	add	r3, r2
 800c92c:	617b      	str	r3, [r7, #20]
          if (ms_long < 0) {
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	2b00      	cmp	r3, #0
 800c932:	da01      	bge.n	800c938 <lwip_setsockopt_impl+0x178>
            done_socket(sock);
            return EINVAL;
 800c934:	2316      	movs	r3, #22
 800c936:	e10f      	b.n	800cb58 <lwip_setsockopt_impl+0x398>
          }
          netconn_set_recvtimeout(sock->conn, (u32_t)ms_long);
 800c938:	69fb      	ldr	r3, [r7, #28]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	697a      	ldr	r2, [r7, #20]
 800c93e:	61da      	str	r2, [r3, #28]
          break;
 800c940:	e077      	b.n	800ca32 <lwip_setsockopt_impl+0x272>
        }
        break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
        case SO_NO_CHECK:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
 800c942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c944:	2b03      	cmp	r3, #3
 800c946:	d801      	bhi.n	800c94c <lwip_setsockopt_impl+0x18c>
 800c948:	2316      	movs	r3, #22
 800c94a:	e105      	b.n	800cb58 <lwip_setsockopt_impl+0x398>
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d004      	beq.n	800c95e <lwip_setsockopt_impl+0x19e>
 800c954:	69fb      	ldr	r3, [r7, #28]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d101      	bne.n	800c962 <lwip_setsockopt_impl+0x1a2>
 800c95e:	2316      	movs	r3, #22
 800c960:	e0fa      	b.n	800cb58 <lwip_setsockopt_impl+0x398>
 800c962:	69fb      	ldr	r3, [r7, #28]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c96c:	2b20      	cmp	r3, #32
 800c96e:	d001      	beq.n	800c974 <lwip_setsockopt_impl+0x1b4>
 800c970:	235c      	movs	r3, #92	@ 0x5c
 800c972:	e0f1      	b.n	800cb58 <lwip_setsockopt_impl+0x398>
            /* this flag is only available for UDP, not for UDP lite */
            done_socket(sock);
            return EAFNOSUPPORT;
          }
#endif /* LWIP_UDPLITE */
          if (*(const int *)optval) {
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d00b      	beq.n	800c994 <lwip_setsockopt_impl+0x1d4>
            udp_set_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800c97c:	69fb      	ldr	r3, [r7, #28]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	7c1a      	ldrb	r2, [r3, #16]
 800c984:	69fb      	ldr	r3, [r7, #28]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	f042 0201 	orr.w	r2, r2, #1
 800c98e:	b2d2      	uxtb	r2, r2
 800c990:	741a      	strb	r2, [r3, #16]
          } else {
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
          }
          break;
 800c992:	e04e      	b.n	800ca32 <lwip_setsockopt_impl+0x272>
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800c994:	69fb      	ldr	r3, [r7, #28]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	7c1a      	ldrb	r2, [r3, #16]
 800c99c:	69fb      	ldr	r3, [r7, #28]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	f022 0201 	bic.w	r2, r2, #1
 800c9a6:	b2d2      	uxtb	r2, r2
 800c9a8:	741a      	strb	r2, [r3, #16]
          break;
 800c9aa:	e042      	b.n	800ca32 <lwip_setsockopt_impl+0x272>
#endif /* LWIP_UDP */
        case SO_BINDTODEVICE: {
          const struct ifreq *iface;
          struct netif *n = NULL;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	623b      	str	r3, [r7, #32]

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, struct ifreq);
 800c9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9b2:	2b05      	cmp	r3, #5
 800c9b4:	d801      	bhi.n	800c9ba <lwip_setsockopt_impl+0x1fa>
 800c9b6:	2316      	movs	r3, #22
 800c9b8:	e0ce      	b.n	800cb58 <lwip_setsockopt_impl+0x398>
 800c9ba:	69fb      	ldr	r3, [r7, #28]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d101      	bne.n	800c9c6 <lwip_setsockopt_impl+0x206>
 800c9c2:	2316      	movs	r3, #22
 800c9c4:	e0c8      	b.n	800cb58 <lwip_setsockopt_impl+0x398>

          iface = (const struct ifreq *)optval;
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	61bb      	str	r3, [r7, #24]
          if (iface->ifr_name[0] != 0) {
 800c9ca:	69bb      	ldr	r3, [r7, #24]
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d009      	beq.n	800c9e6 <lwip_setsockopt_impl+0x226>
            n = netif_find(iface->ifr_name);
 800c9d2:	69bb      	ldr	r3, [r7, #24]
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f001 fb09 	bl	800dfec <netif_find>
 800c9da:	6238      	str	r0, [r7, #32]
            if (n == NULL) {
 800c9dc:	6a3b      	ldr	r3, [r7, #32]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d101      	bne.n	800c9e6 <lwip_setsockopt_impl+0x226>
              done_socket(sock);
              return ENODEV;
 800c9e2:	2313      	movs	r3, #19
 800c9e4:	e0b8      	b.n	800cb58 <lwip_setsockopt_impl+0x398>
            }
          }

          switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
 800c9e6:	69fb      	ldr	r3, [r7, #28]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c9f0:	2b10      	cmp	r3, #16
 800c9f2:	d002      	beq.n	800c9fa <lwip_setsockopt_impl+0x23a>
 800c9f4:	2b20      	cmp	r3, #32
 800c9f6:	d008      	beq.n	800ca0a <lwip_setsockopt_impl+0x24a>
 800c9f8:	e00f      	b.n	800ca1a <lwip_setsockopt_impl+0x25a>
#if LWIP_TCP
            case NETCONN_TCP:
              tcp_bind_netif(sock->conn->pcb.tcp, n);
 800c9fa:	69fb      	ldr	r3, [r7, #28]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	685b      	ldr	r3, [r3, #4]
 800ca00:	6a39      	ldr	r1, [r7, #32]
 800ca02:	4618      	mov	r0, r3
 800ca04:	f002 fd68 	bl	800f4d8 <tcp_bind_netif>
              break;
 800ca08:	e00f      	b.n	800ca2a <lwip_setsockopt_impl+0x26a>
#endif
#if LWIP_UDP
            case NETCONN_UDP:
              udp_bind_netif(sock->conn->pcb.udp, n);
 800ca0a:	69fb      	ldr	r3, [r7, #28]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	685b      	ldr	r3, [r3, #4]
 800ca10:	6a39      	ldr	r1, [r7, #32]
 800ca12:	4618      	mov	r0, r3
 800ca14:	f008 fee6 	bl	80157e4 <udp_bind_netif>
              break;
 800ca18:	e007      	b.n	800ca2a <lwip_setsockopt_impl+0x26a>
            case NETCONN_RAW:
              raw_bind_netif(sock->conn->pcb.raw, n);
              break;
#endif
            default:
              LWIP_ASSERT("Unhandled netconn type in SO_BINDTODEVICE", 0);
 800ca1a:	4b52      	ldr	r3, [pc, #328]	@ (800cb64 <lwip_setsockopt_impl+0x3a4>)
 800ca1c:	f640 527d 	movw	r2, #3453	@ 0xd7d
 800ca20:	4951      	ldr	r1, [pc, #324]	@ (800cb68 <lwip_setsockopt_impl+0x3a8>)
 800ca22:	4852      	ldr	r0, [pc, #328]	@ (800cb6c <lwip_setsockopt_impl+0x3ac>)
 800ca24:	f018 fd50 	bl	80254c8 <iprintf>
              break;
 800ca28:	bf00      	nop
          }
        }
        break;
 800ca2a:	e002      	b.n	800ca32 <lwip_setsockopt_impl+0x272>
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800ca2c:	235c      	movs	r3, #92	@ 0x5c
 800ca2e:	627b      	str	r3, [r7, #36]	@ 0x24
          break;
 800ca30:	bf00      	nop
      }  /* switch (optname) */
      break;
 800ca32:	e090      	b.n	800cb56 <lwip_setsockopt_impl+0x396>

    /* Level: IPPROTO_IP */
    case IPPROTO_IP:
      switch (optname) {
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2b01      	cmp	r3, #1
 800ca38:	d01a      	beq.n	800ca70 <lwip_setsockopt_impl+0x2b0>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2b02      	cmp	r3, #2
 800ca3e:	d12f      	bne.n	800caa0 <lwip_setsockopt_impl+0x2e0>
        case IP_TTL:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800ca40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca42:	2b03      	cmp	r3, #3
 800ca44:	d801      	bhi.n	800ca4a <lwip_setsockopt_impl+0x28a>
 800ca46:	2316      	movs	r3, #22
 800ca48:	e086      	b.n	800cb58 <lwip_setsockopt_impl+0x398>
 800ca4a:	69fb      	ldr	r3, [r7, #28]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d004      	beq.n	800ca5c <lwip_setsockopt_impl+0x29c>
 800ca52:	69fb      	ldr	r3, [r7, #28]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d101      	bne.n	800ca60 <lwip_setsockopt_impl+0x2a0>
 800ca5c:	2316      	movs	r3, #22
 800ca5e:	e07b      	b.n	800cb58 <lwip_setsockopt_impl+0x398>
          sock->conn->pcb.ip->ttl = (u8_t)(*(const int *)optval);
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	681a      	ldr	r2, [r3, #0]
 800ca64:	69fb      	ldr	r3, [r7, #28]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	b2d2      	uxtb	r2, r2
 800ca6c:	72da      	strb	r2, [r3, #11]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
                                      s, sock->conn->pcb.ip->ttl));
          break;
 800ca6e:	e01a      	b.n	800caa6 <lwip_setsockopt_impl+0x2e6>
        case IP_TOS:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800ca70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca72:	2b03      	cmp	r3, #3
 800ca74:	d801      	bhi.n	800ca7a <lwip_setsockopt_impl+0x2ba>
 800ca76:	2316      	movs	r3, #22
 800ca78:	e06e      	b.n	800cb58 <lwip_setsockopt_impl+0x398>
 800ca7a:	69fb      	ldr	r3, [r7, #28]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d004      	beq.n	800ca8c <lwip_setsockopt_impl+0x2cc>
 800ca82:	69fb      	ldr	r3, [r7, #28]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d101      	bne.n	800ca90 <lwip_setsockopt_impl+0x2d0>
 800ca8c:	2316      	movs	r3, #22
 800ca8e:	e063      	b.n	800cb58 <lwip_setsockopt_impl+0x398>
          sock->conn->pcb.ip->tos = (u8_t)(*(const int *)optval);
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	69fb      	ldr	r3, [r7, #28]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	685b      	ldr	r3, [r3, #4]
 800ca9a:	b2d2      	uxtb	r2, r2
 800ca9c:	729a      	strb	r2, [r3, #10]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
                                      s, sock->conn->pcb.ip->tos));
          break;
 800ca9e:	e002      	b.n	800caa6 <lwip_setsockopt_impl+0x2e6>
        break;
#endif /* LWIP_IGMP */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800caa0:	235c      	movs	r3, #92	@ 0x5c
 800caa2:	627b      	str	r3, [r7, #36]	@ 0x24
          break;
 800caa4:	bf00      	nop
      }  /* switch (optname) */
      break;
 800caa6:	e056      	b.n	800cb56 <lwip_setsockopt_impl+0x396>

#if LWIP_TCP
    /* Level: IPPROTO_TCP */
    case IPPROTO_TCP:
      /* Special case: all IPPROTO_TCP option take an int */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
 800caa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caaa:	2b03      	cmp	r3, #3
 800caac:	d801      	bhi.n	800cab2 <lwip_setsockopt_impl+0x2f2>
 800caae:	2316      	movs	r3, #22
 800cab0:	e052      	b.n	800cb58 <lwip_setsockopt_impl+0x398>
 800cab2:	69fb      	ldr	r3, [r7, #28]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d004      	beq.n	800cac4 <lwip_setsockopt_impl+0x304>
 800caba:	69fb      	ldr	r3, [r7, #28]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d101      	bne.n	800cac8 <lwip_setsockopt_impl+0x308>
 800cac4:	2316      	movs	r3, #22
 800cac6:	e047      	b.n	800cb58 <lwip_setsockopt_impl+0x398>
 800cac8:	69fb      	ldr	r3, [r7, #28]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cad2:	2b10      	cmp	r3, #16
 800cad4:	d001      	beq.n	800cada <lwip_setsockopt_impl+0x31a>
 800cad6:	235c      	movs	r3, #92	@ 0x5c
 800cad8:	e03e      	b.n	800cb58 <lwip_setsockopt_impl+0x398>
      if (sock->conn->pcb.tcp->state == LISTEN) {
 800cada:	69fb      	ldr	r3, [r7, #28]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	685b      	ldr	r3, [r3, #4]
 800cae0:	7d1b      	ldrb	r3, [r3, #20]
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d101      	bne.n	800caea <lwip_setsockopt_impl+0x32a>
        done_socket(sock);
        return EINVAL;
 800cae6:	2316      	movs	r3, #22
 800cae8:	e036      	b.n	800cb58 <lwip_setsockopt_impl+0x398>
      }
      switch (optname) {
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2b01      	cmp	r3, #1
 800caee:	d003      	beq.n	800caf8 <lwip_setsockopt_impl+0x338>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2b02      	cmp	r3, #2
 800caf4:	d01c      	beq.n	800cb30 <lwip_setsockopt_impl+0x370>
 800caf6:	e023      	b.n	800cb40 <lwip_setsockopt_impl+0x380>
        case TCP_NODELAY:
          if (*(const int *)optval) {
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d00b      	beq.n	800cb18 <lwip_setsockopt_impl+0x358>
            tcp_nagle_disable(sock->conn->pcb.tcp);
 800cb00:	69fb      	ldr	r3, [r7, #28]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	685b      	ldr	r3, [r3, #4]
 800cb06:	8b5a      	ldrh	r2, [r3, #26]
 800cb08:	69fb      	ldr	r3, [r7, #28]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cb12:	b292      	uxth	r2, r2
 800cb14:	835a      	strh	r2, [r3, #26]
          } else {
            tcp_nagle_enable(sock->conn->pcb.tcp);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                                      s, (*(const int *)optval) ? "on" : "off") );
          break;
 800cb16:	e016      	b.n	800cb46 <lwip_setsockopt_impl+0x386>
            tcp_nagle_enable(sock->conn->pcb.tcp);
 800cb18:	69fb      	ldr	r3, [r7, #28]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	8b5a      	ldrh	r2, [r3, #26]
 800cb20:	69fb      	ldr	r3, [r7, #28]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cb2a:	b292      	uxth	r2, r2
 800cb2c:	835a      	strh	r2, [r3, #26]
          break;
 800cb2e:	e00a      	b.n	800cb46 <lwip_setsockopt_impl+0x386>
        case TCP_KEEPALIVE:
          sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int *)optval);
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	681a      	ldr	r2, [r3, #0]
 800cb34:	69fb      	ldr	r3, [r7, #28]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	685b      	ldr	r3, [r3, #4]
 800cb3a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
                                      s, sock->conn->pcb.tcp->keep_idle));
          break;
 800cb3e:	e002      	b.n	800cb46 <lwip_setsockopt_impl+0x386>
          break;
#endif /* LWIP_TCP_KEEPALIVE */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800cb40:	235c      	movs	r3, #92	@ 0x5c
 800cb42:	627b      	str	r3, [r7, #36]	@ 0x24
          break;
 800cb44:	bf00      	nop
      }  /* switch (optname) */
      break;
 800cb46:	e006      	b.n	800cb56 <lwip_setsockopt_impl+0x396>
          break;
#endif /* LWIP_IPV6 && LWIP_RAW */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800cb48:	235c      	movs	r3, #92	@ 0x5c
 800cb4a:	627b      	str	r3, [r7, #36]	@ 0x24
          break;
 800cb4c:	bf00      	nop
      }  /* switch (optname) */
      break;
 800cb4e:	e002      	b.n	800cb56 <lwip_setsockopt_impl+0x396>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                  s, level, optname));
      err = ENOPROTOOPT;
 800cb50:	235c      	movs	r3, #92	@ 0x5c
 800cb52:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800cb54:	bf00      	nop
  }  /* switch (level) */

  done_socket(sock);
  return err;
 800cb56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3728      	adds	r7, #40	@ 0x28
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}
 800cb60:	10624dd3 	.word	0x10624dd3
 800cb64:	0802728c 	.word	0x0802728c
 800cb68:	08027630 	.word	0x08027630
 800cb6c:	080272e0 	.word	0x080272e0

0800cb70 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800cb7a:	f008 f9c7 	bl	8014f0c <sys_timeouts_sleeptime>
 800cb7e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb86:	d10b      	bne.n	800cba0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800cb88:	4813      	ldr	r0, [pc, #76]	@ (800cbd8 <tcpip_timeouts_mbox_fetch+0x68>)
 800cb8a:	f00b fc90 	bl	80184ae <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800cb8e:	2200      	movs	r2, #0
 800cb90:	6839      	ldr	r1, [r7, #0]
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f00b fb48 	bl	8018228 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800cb98:	480f      	ldr	r0, [pc, #60]	@ (800cbd8 <tcpip_timeouts_mbox_fetch+0x68>)
 800cb9a:	f00b fc79 	bl	8018490 <sys_mutex_lock>
    return;
 800cb9e:	e018      	b.n	800cbd2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d102      	bne.n	800cbac <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800cba6:	f008 f977 	bl	8014e98 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cbaa:	e7e6      	b.n	800cb7a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800cbac:	480a      	ldr	r0, [pc, #40]	@ (800cbd8 <tcpip_timeouts_mbox_fetch+0x68>)
 800cbae:	f00b fc7e 	bl	80184ae <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800cbb2:	68fa      	ldr	r2, [r7, #12]
 800cbb4:	6839      	ldr	r1, [r7, #0]
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f00b fb36 	bl	8018228 <sys_arch_mbox_fetch>
 800cbbc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800cbbe:	4806      	ldr	r0, [pc, #24]	@ (800cbd8 <tcpip_timeouts_mbox_fetch+0x68>)
 800cbc0:	f00b fc66 	bl	8018490 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbca:	d102      	bne.n	800cbd2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800cbcc:	f008 f964 	bl	8014e98 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cbd0:	e7d3      	b.n	800cb7a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800cbd2:	3710      	adds	r7, #16
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}
 800cbd8:	2000cc0c 	.word	0x2000cc0c

0800cbdc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b084      	sub	sp, #16
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800cbe4:	4810      	ldr	r0, [pc, #64]	@ (800cc28 <tcpip_thread+0x4c>)
 800cbe6:	f00b fc53 	bl	8018490 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800cbea:	4b10      	ldr	r3, [pc, #64]	@ (800cc2c <tcpip_thread+0x50>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d005      	beq.n	800cbfe <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800cbf2:	4b0e      	ldr	r3, [pc, #56]	@ (800cc2c <tcpip_thread+0x50>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4a0e      	ldr	r2, [pc, #56]	@ (800cc30 <tcpip_thread+0x54>)
 800cbf8:	6812      	ldr	r2, [r2, #0]
 800cbfa:	4610      	mov	r0, r2
 800cbfc:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cbfe:	f107 030c 	add.w	r3, r7, #12
 800cc02:	4619      	mov	r1, r3
 800cc04:	480b      	ldr	r0, [pc, #44]	@ (800cc34 <tcpip_thread+0x58>)
 800cc06:	f7ff ffb3 	bl	800cb70 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d106      	bne.n	800cc1e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cc10:	4b09      	ldr	r3, [pc, #36]	@ (800cc38 <tcpip_thread+0x5c>)
 800cc12:	2291      	movs	r2, #145	@ 0x91
 800cc14:	4909      	ldr	r1, [pc, #36]	@ (800cc3c <tcpip_thread+0x60>)
 800cc16:	480a      	ldr	r0, [pc, #40]	@ (800cc40 <tcpip_thread+0x64>)
 800cc18:	f018 fc56 	bl	80254c8 <iprintf>
      continue;
 800cc1c:	e003      	b.n	800cc26 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	4618      	mov	r0, r3
 800cc22:	f000 f80f 	bl	800cc44 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cc26:	e7ea      	b.n	800cbfe <tcpip_thread+0x22>
 800cc28:	2000cc0c 	.word	0x2000cc0c
 800cc2c:	2000cc00 	.word	0x2000cc00
 800cc30:	2000cc04 	.word	0x2000cc04
 800cc34:	2000cc08 	.word	0x2000cc08
 800cc38:	0802765c 	.word	0x0802765c
 800cc3c:	0802768c 	.word	0x0802768c
 800cc40:	080276ac 	.word	0x080276ac

0800cc44 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b082      	sub	sp, #8
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	2b02      	cmp	r3, #2
 800cc52:	d026      	beq.n	800cca2 <tcpip_thread_handle_msg+0x5e>
 800cc54:	2b02      	cmp	r3, #2
 800cc56:	dc2b      	bgt.n	800ccb0 <tcpip_thread_handle_msg+0x6c>
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d002      	beq.n	800cc62 <tcpip_thread_handle_msg+0x1e>
 800cc5c:	2b01      	cmp	r3, #1
 800cc5e:	d015      	beq.n	800cc8c <tcpip_thread_handle_msg+0x48>
 800cc60:	e026      	b.n	800ccb0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	68db      	ldr	r3, [r3, #12]
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	6850      	ldr	r0, [r2, #4]
 800cc6a:	687a      	ldr	r2, [r7, #4]
 800cc6c:	6892      	ldr	r2, [r2, #8]
 800cc6e:	4611      	mov	r1, r2
 800cc70:	4798      	blx	r3
 800cc72:	4603      	mov	r3, r0
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d004      	beq.n	800cc82 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f001 fd87 	bl	800e790 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cc82:	6879      	ldr	r1, [r7, #4]
 800cc84:	2009      	movs	r0, #9
 800cc86:	f000 fe75 	bl	800d974 <memp_free>
      break;
 800cc8a:	e018      	b.n	800ccbe <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	685b      	ldr	r3, [r3, #4]
 800cc90:	687a      	ldr	r2, [r7, #4]
 800cc92:	6892      	ldr	r2, [r2, #8]
 800cc94:	4610      	mov	r0, r2
 800cc96:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800cc98:	6879      	ldr	r1, [r7, #4]
 800cc9a:	2008      	movs	r0, #8
 800cc9c:	f000 fe6a 	bl	800d974 <memp_free>
      break;
 800cca0:	e00d      	b.n	800ccbe <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	685b      	ldr	r3, [r3, #4]
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	6892      	ldr	r2, [r2, #8]
 800ccaa:	4610      	mov	r0, r2
 800ccac:	4798      	blx	r3
      break;
 800ccae:	e006      	b.n	800ccbe <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ccb0:	4b05      	ldr	r3, [pc, #20]	@ (800ccc8 <tcpip_thread_handle_msg+0x84>)
 800ccb2:	22cf      	movs	r2, #207	@ 0xcf
 800ccb4:	4905      	ldr	r1, [pc, #20]	@ (800cccc <tcpip_thread_handle_msg+0x88>)
 800ccb6:	4806      	ldr	r0, [pc, #24]	@ (800ccd0 <tcpip_thread_handle_msg+0x8c>)
 800ccb8:	f018 fc06 	bl	80254c8 <iprintf>
      break;
 800ccbc:	bf00      	nop
  }
}
 800ccbe:	bf00      	nop
 800ccc0:	3708      	adds	r7, #8
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	0802765c 	.word	0x0802765c
 800cccc:	0802768c 	.word	0x0802768c
 800ccd0:	080276ac 	.word	0x080276ac

0800ccd4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b086      	sub	sp, #24
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	60f8      	str	r0, [r7, #12]
 800ccdc:	60b9      	str	r1, [r7, #8]
 800ccde:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cce0:	481a      	ldr	r0, [pc, #104]	@ (800cd4c <tcpip_inpkt+0x78>)
 800cce2:	f00b fafc 	bl	80182de <sys_mbox_valid>
 800cce6:	4603      	mov	r3, r0
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d105      	bne.n	800ccf8 <tcpip_inpkt+0x24>
 800ccec:	4b18      	ldr	r3, [pc, #96]	@ (800cd50 <tcpip_inpkt+0x7c>)
 800ccee:	22fc      	movs	r2, #252	@ 0xfc
 800ccf0:	4918      	ldr	r1, [pc, #96]	@ (800cd54 <tcpip_inpkt+0x80>)
 800ccf2:	4819      	ldr	r0, [pc, #100]	@ (800cd58 <tcpip_inpkt+0x84>)
 800ccf4:	f018 fbe8 	bl	80254c8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800ccf8:	2009      	movs	r0, #9
 800ccfa:	f000 fdc5 	bl	800d888 <memp_malloc>
 800ccfe:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d102      	bne.n	800cd0c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800cd06:	f04f 33ff 	mov.w	r3, #4294967295
 800cd0a:	e01a      	b.n	800cd42 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	68fa      	ldr	r2, [r7, #12]
 800cd16:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	68ba      	ldr	r2, [r7, #8]
 800cd1c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cd24:	6979      	ldr	r1, [r7, #20]
 800cd26:	4809      	ldr	r0, [pc, #36]	@ (800cd4c <tcpip_inpkt+0x78>)
 800cd28:	f00b fa64 	bl	80181f4 <sys_mbox_trypost>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d006      	beq.n	800cd40 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cd32:	6979      	ldr	r1, [r7, #20]
 800cd34:	2009      	movs	r0, #9
 800cd36:	f000 fe1d 	bl	800d974 <memp_free>
    return ERR_MEM;
 800cd3a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd3e:	e000      	b.n	800cd42 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800cd40:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3718      	adds	r7, #24
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	2000cc08 	.word	0x2000cc08
 800cd50:	0802765c 	.word	0x0802765c
 800cd54:	080276d4 	.word	0x080276d4
 800cd58:	080276ac 	.word	0x080276ac

0800cd5c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b082      	sub	sp, #8
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cd6c:	f003 0318 	and.w	r3, r3, #24
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d006      	beq.n	800cd82 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800cd74:	4a08      	ldr	r2, [pc, #32]	@ (800cd98 <tcpip_input+0x3c>)
 800cd76:	6839      	ldr	r1, [r7, #0]
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f7ff ffab 	bl	800ccd4 <tcpip_inpkt>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	e005      	b.n	800cd8e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800cd82:	4a06      	ldr	r2, [pc, #24]	@ (800cd9c <tcpip_input+0x40>)
 800cd84:	6839      	ldr	r1, [r7, #0]
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f7ff ffa4 	bl	800ccd4 <tcpip_inpkt>
 800cd8c:	4603      	mov	r3, r0
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3708      	adds	r7, #8
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
 800cd96:	bf00      	nop
 800cd98:	08017fe1 	.word	0x08017fe1
 800cd9c:	08016c6d 	.word	0x08016c6d

0800cda0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b084      	sub	sp, #16
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cdaa:	4819      	ldr	r0, [pc, #100]	@ (800ce10 <tcpip_try_callback+0x70>)
 800cdac:	f00b fa97 	bl	80182de <sys_mbox_valid>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d106      	bne.n	800cdc4 <tcpip_try_callback+0x24>
 800cdb6:	4b17      	ldr	r3, [pc, #92]	@ (800ce14 <tcpip_try_callback+0x74>)
 800cdb8:	f240 125d 	movw	r2, #349	@ 0x15d
 800cdbc:	4916      	ldr	r1, [pc, #88]	@ (800ce18 <tcpip_try_callback+0x78>)
 800cdbe:	4817      	ldr	r0, [pc, #92]	@ (800ce1c <tcpip_try_callback+0x7c>)
 800cdc0:	f018 fb82 	bl	80254c8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800cdc4:	2008      	movs	r0, #8
 800cdc6:	f000 fd5f 	bl	800d888 <memp_malloc>
 800cdca:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d102      	bne.n	800cdd8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800cdd2:	f04f 33ff 	mov.w	r3, #4294967295
 800cdd6:	e017      	b.n	800ce08 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	2201      	movs	r2, #1
 800cddc:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	687a      	ldr	r2, [r7, #4]
 800cde2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	683a      	ldr	r2, [r7, #0]
 800cde8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cdea:	68f9      	ldr	r1, [r7, #12]
 800cdec:	4808      	ldr	r0, [pc, #32]	@ (800ce10 <tcpip_try_callback+0x70>)
 800cdee:	f00b fa01 	bl	80181f4 <sys_mbox_trypost>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d006      	beq.n	800ce06 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800cdf8:	68f9      	ldr	r1, [r7, #12]
 800cdfa:	2008      	movs	r0, #8
 800cdfc:	f000 fdba 	bl	800d974 <memp_free>
    return ERR_MEM;
 800ce00:	f04f 33ff 	mov.w	r3, #4294967295
 800ce04:	e000      	b.n	800ce08 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800ce06:	2300      	movs	r3, #0
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3710      	adds	r7, #16
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}
 800ce10:	2000cc08 	.word	0x2000cc08
 800ce14:	0802765c 	.word	0x0802765c
 800ce18:	080276d4 	.word	0x080276d4
 800ce1c:	080276ac 	.word	0x080276ac

0800ce20 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b084      	sub	sp, #16
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	60f8      	str	r0, [r7, #12]
 800ce28:	60b9      	str	r1, [r7, #8]
 800ce2a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800ce2c:	4806      	ldr	r0, [pc, #24]	@ (800ce48 <tcpip_send_msg_wait_sem+0x28>)
 800ce2e:	f00b fb2f 	bl	8018490 <sys_mutex_lock>
  fn(apimsg);
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	68b8      	ldr	r0, [r7, #8]
 800ce36:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800ce38:	4803      	ldr	r0, [pc, #12]	@ (800ce48 <tcpip_send_msg_wait_sem+0x28>)
 800ce3a:	f00b fb38 	bl	80184ae <sys_mutex_unlock>
  return ERR_OK;
 800ce3e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3710      	adds	r7, #16
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	2000cc0c 	.word	0x2000cc0c

0800ce4c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b084      	sub	sp, #16
 800ce50:	af02      	add	r7, sp, #8
 800ce52:	6078      	str	r0, [r7, #4]
 800ce54:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ce56:	f000 f872 	bl	800cf3e <lwip_init>

  tcpip_init_done = initfunc;
 800ce5a:	4a17      	ldr	r2, [pc, #92]	@ (800ceb8 <tcpip_init+0x6c>)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ce60:	4a16      	ldr	r2, [pc, #88]	@ (800cebc <tcpip_init+0x70>)
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ce66:	2106      	movs	r1, #6
 800ce68:	4815      	ldr	r0, [pc, #84]	@ (800cec0 <tcpip_init+0x74>)
 800ce6a:	f00b f98f 	bl	801818c <sys_mbox_new>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d006      	beq.n	800ce82 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ce74:	4b13      	ldr	r3, [pc, #76]	@ (800cec4 <tcpip_init+0x78>)
 800ce76:	f240 2261 	movw	r2, #609	@ 0x261
 800ce7a:	4913      	ldr	r1, [pc, #76]	@ (800cec8 <tcpip_init+0x7c>)
 800ce7c:	4813      	ldr	r0, [pc, #76]	@ (800cecc <tcpip_init+0x80>)
 800ce7e:	f018 fb23 	bl	80254c8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ce82:	4813      	ldr	r0, [pc, #76]	@ (800ced0 <tcpip_init+0x84>)
 800ce84:	f00b fae8 	bl	8018458 <sys_mutex_new>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d006      	beq.n	800ce9c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ce8e:	4b0d      	ldr	r3, [pc, #52]	@ (800cec4 <tcpip_init+0x78>)
 800ce90:	f240 2265 	movw	r2, #613	@ 0x265
 800ce94:	490f      	ldr	r1, [pc, #60]	@ (800ced4 <tcpip_init+0x88>)
 800ce96:	480d      	ldr	r0, [pc, #52]	@ (800cecc <tcpip_init+0x80>)
 800ce98:	f018 fb16 	bl	80254c8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	9300      	str	r3, [sp, #0]
 800cea0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cea4:	2200      	movs	r2, #0
 800cea6:	490c      	ldr	r1, [pc, #48]	@ (800ced8 <tcpip_init+0x8c>)
 800cea8:	480c      	ldr	r0, [pc, #48]	@ (800cedc <tcpip_init+0x90>)
 800ceaa:	f00b fb0d 	bl	80184c8 <sys_thread_new>
}
 800ceae:	bf00      	nop
 800ceb0:	3708      	adds	r7, #8
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}
 800ceb6:	bf00      	nop
 800ceb8:	2000cc00 	.word	0x2000cc00
 800cebc:	2000cc04 	.word	0x2000cc04
 800cec0:	2000cc08 	.word	0x2000cc08
 800cec4:	0802765c 	.word	0x0802765c
 800cec8:	080276e4 	.word	0x080276e4
 800cecc:	080276ac 	.word	0x080276ac
 800ced0:	2000cc0c 	.word	0x2000cc0c
 800ced4:	08027708 	.word	0x08027708
 800ced8:	0800cbdd 	.word	0x0800cbdd
 800cedc:	0802772c 	.word	0x0802772c

0800cee0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800cee0:	b480      	push	{r7}
 800cee2:	b083      	sub	sp, #12
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	4603      	mov	r3, r0
 800cee8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ceea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ceee:	021b      	lsls	r3, r3, #8
 800cef0:	b21a      	sxth	r2, r3
 800cef2:	88fb      	ldrh	r3, [r7, #6]
 800cef4:	0a1b      	lsrs	r3, r3, #8
 800cef6:	b29b      	uxth	r3, r3
 800cef8:	b21b      	sxth	r3, r3
 800cefa:	4313      	orrs	r3, r2
 800cefc:	b21b      	sxth	r3, r3
 800cefe:	b29b      	uxth	r3, r3
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	370c      	adds	r7, #12
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr

0800cf0c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b083      	sub	sp, #12
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	061a      	lsls	r2, r3, #24
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	021b      	lsls	r3, r3, #8
 800cf1c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cf20:	431a      	orrs	r2, r3
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	0a1b      	lsrs	r3, r3, #8
 800cf26:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cf2a:	431a      	orrs	r2, r3
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	0e1b      	lsrs	r3, r3, #24
 800cf30:	4313      	orrs	r3, r2
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	370c      	adds	r7, #12
 800cf36:	46bd      	mov	sp, r7
 800cf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3c:	4770      	bx	lr

0800cf3e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800cf3e:	b580      	push	{r7, lr}
 800cf40:	b082      	sub	sp, #8
 800cf42:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800cf44:	2300      	movs	r3, #0
 800cf46:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800cf48:	f00b fa78 	bl	801843c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800cf4c:	f000 f8d4 	bl	800d0f8 <mem_init>
  memp_init();
 800cf50:	f000 fc2c 	bl	800d7ac <memp_init>
  pbuf_init();
  netif_init();
 800cf54:	f000 fd38 	bl	800d9c8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800cf58:	f008 f810 	bl	8014f7c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800cf5c:	f001 fec2 	bl	800ece4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800cf60:	f007 ff52 	bl	8014e08 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800cf64:	bf00      	nop
 800cf66:	3708      	adds	r7, #8
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b083      	sub	sp, #12
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	4603      	mov	r3, r0
 800cf74:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800cf76:	4b05      	ldr	r3, [pc, #20]	@ (800cf8c <ptr_to_mem+0x20>)
 800cf78:	681a      	ldr	r2, [r3, #0]
 800cf7a:	88fb      	ldrh	r3, [r7, #6]
 800cf7c:	4413      	add	r3, r2
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	370c      	adds	r7, #12
 800cf82:	46bd      	mov	sp, r7
 800cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf88:	4770      	bx	lr
 800cf8a:	bf00      	nop
 800cf8c:	2000cc28 	.word	0x2000cc28

0800cf90 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800cf90:	b480      	push	{r7}
 800cf92:	b083      	sub	sp, #12
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800cf98:	4b05      	ldr	r3, [pc, #20]	@ (800cfb0 <mem_to_ptr+0x20>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	687a      	ldr	r2, [r7, #4]
 800cf9e:	1ad3      	subs	r3, r2, r3
 800cfa0:	b29b      	uxth	r3, r3
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	370c      	adds	r7, #12
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfac:	4770      	bx	lr
 800cfae:	bf00      	nop
 800cfb0:	2000cc28 	.word	0x2000cc28

0800cfb4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800cfb4:	b590      	push	{r4, r7, lr}
 800cfb6:	b085      	sub	sp, #20
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800cfbc:	4b45      	ldr	r3, [pc, #276]	@ (800d0d4 <plug_holes+0x120>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	687a      	ldr	r2, [r7, #4]
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d206      	bcs.n	800cfd4 <plug_holes+0x20>
 800cfc6:	4b44      	ldr	r3, [pc, #272]	@ (800d0d8 <plug_holes+0x124>)
 800cfc8:	f240 12df 	movw	r2, #479	@ 0x1df
 800cfcc:	4943      	ldr	r1, [pc, #268]	@ (800d0dc <plug_holes+0x128>)
 800cfce:	4844      	ldr	r0, [pc, #272]	@ (800d0e0 <plug_holes+0x12c>)
 800cfd0:	f018 fa7a 	bl	80254c8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800cfd4:	4b43      	ldr	r3, [pc, #268]	@ (800d0e4 <plug_holes+0x130>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	687a      	ldr	r2, [r7, #4]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d306      	bcc.n	800cfec <plug_holes+0x38>
 800cfde:	4b3e      	ldr	r3, [pc, #248]	@ (800d0d8 <plug_holes+0x124>)
 800cfe0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800cfe4:	4940      	ldr	r1, [pc, #256]	@ (800d0e8 <plug_holes+0x134>)
 800cfe6:	483e      	ldr	r0, [pc, #248]	@ (800d0e0 <plug_holes+0x12c>)
 800cfe8:	f018 fa6e 	bl	80254c8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	791b      	ldrb	r3, [r3, #4]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d006      	beq.n	800d002 <plug_holes+0x4e>
 800cff4:	4b38      	ldr	r3, [pc, #224]	@ (800d0d8 <plug_holes+0x124>)
 800cff6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800cffa:	493c      	ldr	r1, [pc, #240]	@ (800d0ec <plug_holes+0x138>)
 800cffc:	4838      	ldr	r0, [pc, #224]	@ (800d0e0 <plug_holes+0x12c>)
 800cffe:	f018 fa63 	bl	80254c8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	881b      	ldrh	r3, [r3, #0]
 800d006:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d00a:	d906      	bls.n	800d01a <plug_holes+0x66>
 800d00c:	4b32      	ldr	r3, [pc, #200]	@ (800d0d8 <plug_holes+0x124>)
 800d00e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800d012:	4937      	ldr	r1, [pc, #220]	@ (800d0f0 <plug_holes+0x13c>)
 800d014:	4832      	ldr	r0, [pc, #200]	@ (800d0e0 <plug_holes+0x12c>)
 800d016:	f018 fa57 	bl	80254c8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	881b      	ldrh	r3, [r3, #0]
 800d01e:	4618      	mov	r0, r3
 800d020:	f7ff ffa4 	bl	800cf6c <ptr_to_mem>
 800d024:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d026:	687a      	ldr	r2, [r7, #4]
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	429a      	cmp	r2, r3
 800d02c:	d024      	beq.n	800d078 <plug_holes+0xc4>
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	791b      	ldrb	r3, [r3, #4]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d120      	bne.n	800d078 <plug_holes+0xc4>
 800d036:	4b2b      	ldr	r3, [pc, #172]	@ (800d0e4 <plug_holes+0x130>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	68fa      	ldr	r2, [r7, #12]
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d01b      	beq.n	800d078 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d040:	4b2c      	ldr	r3, [pc, #176]	@ (800d0f4 <plug_holes+0x140>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	68fa      	ldr	r2, [r7, #12]
 800d046:	429a      	cmp	r2, r3
 800d048:	d102      	bne.n	800d050 <plug_holes+0x9c>
      lfree = mem;
 800d04a:	4a2a      	ldr	r2, [pc, #168]	@ (800d0f4 <plug_holes+0x140>)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	881a      	ldrh	r2, [r3, #0]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	881b      	ldrh	r3, [r3, #0]
 800d05c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d060:	d00a      	beq.n	800d078 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	881b      	ldrh	r3, [r3, #0]
 800d066:	4618      	mov	r0, r3
 800d068:	f7ff ff80 	bl	800cf6c <ptr_to_mem>
 800d06c:	4604      	mov	r4, r0
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f7ff ff8e 	bl	800cf90 <mem_to_ptr>
 800d074:	4603      	mov	r3, r0
 800d076:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	885b      	ldrh	r3, [r3, #2]
 800d07c:	4618      	mov	r0, r3
 800d07e:	f7ff ff75 	bl	800cf6c <ptr_to_mem>
 800d082:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d084:	68ba      	ldr	r2, [r7, #8]
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	429a      	cmp	r2, r3
 800d08a:	d01f      	beq.n	800d0cc <plug_holes+0x118>
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	791b      	ldrb	r3, [r3, #4]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d11b      	bne.n	800d0cc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d094:	4b17      	ldr	r3, [pc, #92]	@ (800d0f4 <plug_holes+0x140>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	687a      	ldr	r2, [r7, #4]
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d102      	bne.n	800d0a4 <plug_holes+0xf0>
      lfree = pmem;
 800d09e:	4a15      	ldr	r2, [pc, #84]	@ (800d0f4 <plug_holes+0x140>)
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	881a      	ldrh	r2, [r3, #0]
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	881b      	ldrh	r3, [r3, #0]
 800d0b0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d0b4:	d00a      	beq.n	800d0cc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	881b      	ldrh	r3, [r3, #0]
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7ff ff56 	bl	800cf6c <ptr_to_mem>
 800d0c0:	4604      	mov	r4, r0
 800d0c2:	68b8      	ldr	r0, [r7, #8]
 800d0c4:	f7ff ff64 	bl	800cf90 <mem_to_ptr>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d0cc:	bf00      	nop
 800d0ce:	3714      	adds	r7, #20
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd90      	pop	{r4, r7, pc}
 800d0d4:	2000cc28 	.word	0x2000cc28
 800d0d8:	0802773c 	.word	0x0802773c
 800d0dc:	0802776c 	.word	0x0802776c
 800d0e0:	08027784 	.word	0x08027784
 800d0e4:	2000cc2c 	.word	0x2000cc2c
 800d0e8:	080277ac 	.word	0x080277ac
 800d0ec:	080277c8 	.word	0x080277c8
 800d0f0:	080277e4 	.word	0x080277e4
 800d0f4:	2000cc34 	.word	0x2000cc34

0800d0f8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d0fe:	4b1d      	ldr	r3, [pc, #116]	@ (800d174 <mem_init+0x7c>)
 800d100:	4a1d      	ldr	r2, [pc, #116]	@ (800d178 <mem_init+0x80>)
 800d102:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d104:	4b1b      	ldr	r3, [pc, #108]	@ (800d174 <mem_init+0x7c>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800d110:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2200      	movs	r2, #0
 800d116:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2200      	movs	r2, #0
 800d11c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d11e:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800d122:	f7ff ff23 	bl	800cf6c <ptr_to_mem>
 800d126:	4603      	mov	r3, r0
 800d128:	4a14      	ldr	r2, [pc, #80]	@ (800d17c <mem_init+0x84>)
 800d12a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d12c:	4b13      	ldr	r3, [pc, #76]	@ (800d17c <mem_init+0x84>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	2201      	movs	r2, #1
 800d132:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d134:	4b11      	ldr	r3, [pc, #68]	@ (800d17c <mem_init+0x84>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800d13c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d13e:	4b0f      	ldr	r3, [pc, #60]	@ (800d17c <mem_init+0x84>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800d146:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d148:	4b0a      	ldr	r3, [pc, #40]	@ (800d174 <mem_init+0x7c>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4a0c      	ldr	r2, [pc, #48]	@ (800d180 <mem_init+0x88>)
 800d14e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d150:	480c      	ldr	r0, [pc, #48]	@ (800d184 <mem_init+0x8c>)
 800d152:	f00b f981 	bl	8018458 <sys_mutex_new>
 800d156:	4603      	mov	r3, r0
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d006      	beq.n	800d16a <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d15c:	4b0a      	ldr	r3, [pc, #40]	@ (800d188 <mem_init+0x90>)
 800d15e:	f240 221f 	movw	r2, #543	@ 0x21f
 800d162:	490a      	ldr	r1, [pc, #40]	@ (800d18c <mem_init+0x94>)
 800d164:	480a      	ldr	r0, [pc, #40]	@ (800d190 <mem_init+0x98>)
 800d166:	f018 f9af 	bl	80254c8 <iprintf>
  }
}
 800d16a:	bf00      	nop
 800d16c:	3708      	adds	r7, #8
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
 800d172:	bf00      	nop
 800d174:	2000cc28 	.word	0x2000cc28
 800d178:	20048000 	.word	0x20048000
 800d17c:	2000cc2c 	.word	0x2000cc2c
 800d180:	2000cc34 	.word	0x2000cc34
 800d184:	2000cc30 	.word	0x2000cc30
 800d188:	0802773c 	.word	0x0802773c
 800d18c:	08027810 	.word	0x08027810
 800d190:	08027784 	.word	0x08027784

0800d194 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b086      	sub	sp, #24
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f7ff fef7 	bl	800cf90 <mem_to_ptr>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	881b      	ldrh	r3, [r3, #0]
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f7ff fede 	bl	800cf6c <ptr_to_mem>
 800d1b0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	885b      	ldrh	r3, [r3, #2]
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7ff fed8 	bl	800cf6c <ptr_to_mem>
 800d1bc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	881b      	ldrh	r3, [r3, #0]
 800d1c2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d1c6:	d818      	bhi.n	800d1fa <mem_link_valid+0x66>
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	885b      	ldrh	r3, [r3, #2]
 800d1cc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d1d0:	d813      	bhi.n	800d1fa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d1d6:	8afa      	ldrh	r2, [r7, #22]
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d004      	beq.n	800d1e6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	881b      	ldrh	r3, [r3, #0]
 800d1e0:	8afa      	ldrh	r2, [r7, #22]
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d109      	bne.n	800d1fa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d1e6:	4b08      	ldr	r3, [pc, #32]	@ (800d208 <mem_link_valid+0x74>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d1ea:	693a      	ldr	r2, [r7, #16]
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d006      	beq.n	800d1fe <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	885b      	ldrh	r3, [r3, #2]
 800d1f4:	8afa      	ldrh	r2, [r7, #22]
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	d001      	beq.n	800d1fe <mem_link_valid+0x6a>
    return 0;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	e000      	b.n	800d200 <mem_link_valid+0x6c>
  }
  return 1;
 800d1fe:	2301      	movs	r3, #1
}
 800d200:	4618      	mov	r0, r3
 800d202:	3718      	adds	r7, #24
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}
 800d208:	2000cc2c 	.word	0x2000cc2c

0800d20c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b088      	sub	sp, #32
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d070      	beq.n	800d2fc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f003 0303 	and.w	r3, r3, #3
 800d220:	2b00      	cmp	r3, #0
 800d222:	d00d      	beq.n	800d240 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d224:	4b37      	ldr	r3, [pc, #220]	@ (800d304 <mem_free+0xf8>)
 800d226:	f240 2273 	movw	r2, #627	@ 0x273
 800d22a:	4937      	ldr	r1, [pc, #220]	@ (800d308 <mem_free+0xfc>)
 800d22c:	4837      	ldr	r0, [pc, #220]	@ (800d30c <mem_free+0x100>)
 800d22e:	f018 f94b 	bl	80254c8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d232:	f00b f96f 	bl	8018514 <sys_arch_protect>
 800d236:	60f8      	str	r0, [r7, #12]
 800d238:	68f8      	ldr	r0, [r7, #12]
 800d23a:	f00b f979 	bl	8018530 <sys_arch_unprotect>
    return;
 800d23e:	e05e      	b.n	800d2fe <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	3b08      	subs	r3, #8
 800d244:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d246:	4b32      	ldr	r3, [pc, #200]	@ (800d310 <mem_free+0x104>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	69fa      	ldr	r2, [r7, #28]
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d306      	bcc.n	800d25e <mem_free+0x52>
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f103 020c 	add.w	r2, r3, #12
 800d256:	4b2f      	ldr	r3, [pc, #188]	@ (800d314 <mem_free+0x108>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d90d      	bls.n	800d27a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d25e:	4b29      	ldr	r3, [pc, #164]	@ (800d304 <mem_free+0xf8>)
 800d260:	f240 227f 	movw	r2, #639	@ 0x27f
 800d264:	492c      	ldr	r1, [pc, #176]	@ (800d318 <mem_free+0x10c>)
 800d266:	4829      	ldr	r0, [pc, #164]	@ (800d30c <mem_free+0x100>)
 800d268:	f018 f92e 	bl	80254c8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d26c:	f00b f952 	bl	8018514 <sys_arch_protect>
 800d270:	6138      	str	r0, [r7, #16]
 800d272:	6938      	ldr	r0, [r7, #16]
 800d274:	f00b f95c 	bl	8018530 <sys_arch_unprotect>
    return;
 800d278:	e041      	b.n	800d2fe <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d27a:	4828      	ldr	r0, [pc, #160]	@ (800d31c <mem_free+0x110>)
 800d27c:	f00b f908 	bl	8018490 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d280:	69fb      	ldr	r3, [r7, #28]
 800d282:	791b      	ldrb	r3, [r3, #4]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d110      	bne.n	800d2aa <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d288:	4b1e      	ldr	r3, [pc, #120]	@ (800d304 <mem_free+0xf8>)
 800d28a:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800d28e:	4924      	ldr	r1, [pc, #144]	@ (800d320 <mem_free+0x114>)
 800d290:	481e      	ldr	r0, [pc, #120]	@ (800d30c <mem_free+0x100>)
 800d292:	f018 f919 	bl	80254c8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d296:	4821      	ldr	r0, [pc, #132]	@ (800d31c <mem_free+0x110>)
 800d298:	f00b f909 	bl	80184ae <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d29c:	f00b f93a 	bl	8018514 <sys_arch_protect>
 800d2a0:	6178      	str	r0, [r7, #20]
 800d2a2:	6978      	ldr	r0, [r7, #20]
 800d2a4:	f00b f944 	bl	8018530 <sys_arch_unprotect>
    return;
 800d2a8:	e029      	b.n	800d2fe <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d2aa:	69f8      	ldr	r0, [r7, #28]
 800d2ac:	f7ff ff72 	bl	800d194 <mem_link_valid>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d110      	bne.n	800d2d8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d2b6:	4b13      	ldr	r3, [pc, #76]	@ (800d304 <mem_free+0xf8>)
 800d2b8:	f240 2295 	movw	r2, #661	@ 0x295
 800d2bc:	4919      	ldr	r1, [pc, #100]	@ (800d324 <mem_free+0x118>)
 800d2be:	4813      	ldr	r0, [pc, #76]	@ (800d30c <mem_free+0x100>)
 800d2c0:	f018 f902 	bl	80254c8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d2c4:	4815      	ldr	r0, [pc, #84]	@ (800d31c <mem_free+0x110>)
 800d2c6:	f00b f8f2 	bl	80184ae <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d2ca:	f00b f923 	bl	8018514 <sys_arch_protect>
 800d2ce:	61b8      	str	r0, [r7, #24]
 800d2d0:	69b8      	ldr	r0, [r7, #24]
 800d2d2:	f00b f92d 	bl	8018530 <sys_arch_unprotect>
    return;
 800d2d6:	e012      	b.n	800d2fe <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d2d8:	69fb      	ldr	r3, [r7, #28]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d2de:	4b12      	ldr	r3, [pc, #72]	@ (800d328 <mem_free+0x11c>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	69fa      	ldr	r2, [r7, #28]
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d202      	bcs.n	800d2ee <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d2e8:	4a0f      	ldr	r2, [pc, #60]	@ (800d328 <mem_free+0x11c>)
 800d2ea:	69fb      	ldr	r3, [r7, #28]
 800d2ec:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d2ee:	69f8      	ldr	r0, [r7, #28]
 800d2f0:	f7ff fe60 	bl	800cfb4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d2f4:	4809      	ldr	r0, [pc, #36]	@ (800d31c <mem_free+0x110>)
 800d2f6:	f00b f8da 	bl	80184ae <sys_mutex_unlock>
 800d2fa:	e000      	b.n	800d2fe <mem_free+0xf2>
    return;
 800d2fc:	bf00      	nop
}
 800d2fe:	3720      	adds	r7, #32
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}
 800d304:	0802773c 	.word	0x0802773c
 800d308:	0802782c 	.word	0x0802782c
 800d30c:	08027784 	.word	0x08027784
 800d310:	2000cc28 	.word	0x2000cc28
 800d314:	2000cc2c 	.word	0x2000cc2c
 800d318:	08027850 	.word	0x08027850
 800d31c:	2000cc30 	.word	0x2000cc30
 800d320:	0802786c 	.word	0x0802786c
 800d324:	08027894 	.word	0x08027894
 800d328:	2000cc34 	.word	0x2000cc34

0800d32c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b088      	sub	sp, #32
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	460b      	mov	r3, r1
 800d336:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d338:	887b      	ldrh	r3, [r7, #2]
 800d33a:	3303      	adds	r3, #3
 800d33c:	b29b      	uxth	r3, r3
 800d33e:	f023 0303 	bic.w	r3, r3, #3
 800d342:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d344:	8bfb      	ldrh	r3, [r7, #30]
 800d346:	2b0b      	cmp	r3, #11
 800d348:	d801      	bhi.n	800d34e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d34a:	230c      	movs	r3, #12
 800d34c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d34e:	8bfb      	ldrh	r3, [r7, #30]
 800d350:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d354:	d803      	bhi.n	800d35e <mem_trim+0x32>
 800d356:	8bfa      	ldrh	r2, [r7, #30]
 800d358:	887b      	ldrh	r3, [r7, #2]
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d201      	bcs.n	800d362 <mem_trim+0x36>
    return NULL;
 800d35e:	2300      	movs	r3, #0
 800d360:	e0d8      	b.n	800d514 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d362:	4b6e      	ldr	r3, [pc, #440]	@ (800d51c <mem_trim+0x1f0>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	687a      	ldr	r2, [r7, #4]
 800d368:	429a      	cmp	r2, r3
 800d36a:	d304      	bcc.n	800d376 <mem_trim+0x4a>
 800d36c:	4b6c      	ldr	r3, [pc, #432]	@ (800d520 <mem_trim+0x1f4>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	429a      	cmp	r2, r3
 800d374:	d306      	bcc.n	800d384 <mem_trim+0x58>
 800d376:	4b6b      	ldr	r3, [pc, #428]	@ (800d524 <mem_trim+0x1f8>)
 800d378:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800d37c:	496a      	ldr	r1, [pc, #424]	@ (800d528 <mem_trim+0x1fc>)
 800d37e:	486b      	ldr	r0, [pc, #428]	@ (800d52c <mem_trim+0x200>)
 800d380:	f018 f8a2 	bl	80254c8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d384:	4b65      	ldr	r3, [pc, #404]	@ (800d51c <mem_trim+0x1f0>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	687a      	ldr	r2, [r7, #4]
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d304      	bcc.n	800d398 <mem_trim+0x6c>
 800d38e:	4b64      	ldr	r3, [pc, #400]	@ (800d520 <mem_trim+0x1f4>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	687a      	ldr	r2, [r7, #4]
 800d394:	429a      	cmp	r2, r3
 800d396:	d307      	bcc.n	800d3a8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d398:	f00b f8bc 	bl	8018514 <sys_arch_protect>
 800d39c:	60b8      	str	r0, [r7, #8]
 800d39e:	68b8      	ldr	r0, [r7, #8]
 800d3a0:	f00b f8c6 	bl	8018530 <sys_arch_unprotect>
    return rmem;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	e0b5      	b.n	800d514 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	3b08      	subs	r3, #8
 800d3ac:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d3ae:	69b8      	ldr	r0, [r7, #24]
 800d3b0:	f7ff fdee 	bl	800cf90 <mem_to_ptr>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d3b8:	69bb      	ldr	r3, [r7, #24]
 800d3ba:	881a      	ldrh	r2, [r3, #0]
 800d3bc:	8afb      	ldrh	r3, [r7, #22]
 800d3be:	1ad3      	subs	r3, r2, r3
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	3b08      	subs	r3, #8
 800d3c4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d3c6:	8bfa      	ldrh	r2, [r7, #30]
 800d3c8:	8abb      	ldrh	r3, [r7, #20]
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d906      	bls.n	800d3dc <mem_trim+0xb0>
 800d3ce:	4b55      	ldr	r3, [pc, #340]	@ (800d524 <mem_trim+0x1f8>)
 800d3d0:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800d3d4:	4956      	ldr	r1, [pc, #344]	@ (800d530 <mem_trim+0x204>)
 800d3d6:	4855      	ldr	r0, [pc, #340]	@ (800d52c <mem_trim+0x200>)
 800d3d8:	f018 f876 	bl	80254c8 <iprintf>
  if (newsize > size) {
 800d3dc:	8bfa      	ldrh	r2, [r7, #30]
 800d3de:	8abb      	ldrh	r3, [r7, #20]
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d901      	bls.n	800d3e8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	e095      	b.n	800d514 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d3e8:	8bfa      	ldrh	r2, [r7, #30]
 800d3ea:	8abb      	ldrh	r3, [r7, #20]
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d101      	bne.n	800d3f4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	e08f      	b.n	800d514 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d3f4:	484f      	ldr	r0, [pc, #316]	@ (800d534 <mem_trim+0x208>)
 800d3f6:	f00b f84b 	bl	8018490 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d3fa:	69bb      	ldr	r3, [r7, #24]
 800d3fc:	881b      	ldrh	r3, [r3, #0]
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7ff fdb4 	bl	800cf6c <ptr_to_mem>
 800d404:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	791b      	ldrb	r3, [r3, #4]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d13f      	bne.n	800d48e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d40e:	69bb      	ldr	r3, [r7, #24]
 800d410:	881b      	ldrh	r3, [r3, #0]
 800d412:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d416:	d106      	bne.n	800d426 <mem_trim+0xfa>
 800d418:	4b42      	ldr	r3, [pc, #264]	@ (800d524 <mem_trim+0x1f8>)
 800d41a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800d41e:	4946      	ldr	r1, [pc, #280]	@ (800d538 <mem_trim+0x20c>)
 800d420:	4842      	ldr	r0, [pc, #264]	@ (800d52c <mem_trim+0x200>)
 800d422:	f018 f851 	bl	80254c8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	881b      	ldrh	r3, [r3, #0]
 800d42a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d42c:	8afa      	ldrh	r2, [r7, #22]
 800d42e:	8bfb      	ldrh	r3, [r7, #30]
 800d430:	4413      	add	r3, r2
 800d432:	b29b      	uxth	r3, r3
 800d434:	3308      	adds	r3, #8
 800d436:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d438:	4b40      	ldr	r3, [pc, #256]	@ (800d53c <mem_trim+0x210>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	693a      	ldr	r2, [r7, #16]
 800d43e:	429a      	cmp	r2, r3
 800d440:	d106      	bne.n	800d450 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d442:	89fb      	ldrh	r3, [r7, #14]
 800d444:	4618      	mov	r0, r3
 800d446:	f7ff fd91 	bl	800cf6c <ptr_to_mem>
 800d44a:	4603      	mov	r3, r0
 800d44c:	4a3b      	ldr	r2, [pc, #236]	@ (800d53c <mem_trim+0x210>)
 800d44e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d450:	89fb      	ldrh	r3, [r7, #14]
 800d452:	4618      	mov	r0, r3
 800d454:	f7ff fd8a 	bl	800cf6c <ptr_to_mem>
 800d458:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	2200      	movs	r2, #0
 800d45e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	89ba      	ldrh	r2, [r7, #12]
 800d464:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	8afa      	ldrh	r2, [r7, #22]
 800d46a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d46c:	69bb      	ldr	r3, [r7, #24]
 800d46e:	89fa      	ldrh	r2, [r7, #14]
 800d470:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	881b      	ldrh	r3, [r3, #0]
 800d476:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d47a:	d047      	beq.n	800d50c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	881b      	ldrh	r3, [r3, #0]
 800d480:	4618      	mov	r0, r3
 800d482:	f7ff fd73 	bl	800cf6c <ptr_to_mem>
 800d486:	4602      	mov	r2, r0
 800d488:	89fb      	ldrh	r3, [r7, #14]
 800d48a:	8053      	strh	r3, [r2, #2]
 800d48c:	e03e      	b.n	800d50c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d48e:	8bfb      	ldrh	r3, [r7, #30]
 800d490:	f103 0214 	add.w	r2, r3, #20
 800d494:	8abb      	ldrh	r3, [r7, #20]
 800d496:	429a      	cmp	r2, r3
 800d498:	d838      	bhi.n	800d50c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d49a:	8afa      	ldrh	r2, [r7, #22]
 800d49c:	8bfb      	ldrh	r3, [r7, #30]
 800d49e:	4413      	add	r3, r2
 800d4a0:	b29b      	uxth	r3, r3
 800d4a2:	3308      	adds	r3, #8
 800d4a4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d4a6:	69bb      	ldr	r3, [r7, #24]
 800d4a8:	881b      	ldrh	r3, [r3, #0]
 800d4aa:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d4ae:	d106      	bne.n	800d4be <mem_trim+0x192>
 800d4b0:	4b1c      	ldr	r3, [pc, #112]	@ (800d524 <mem_trim+0x1f8>)
 800d4b2:	f240 3216 	movw	r2, #790	@ 0x316
 800d4b6:	4920      	ldr	r1, [pc, #128]	@ (800d538 <mem_trim+0x20c>)
 800d4b8:	481c      	ldr	r0, [pc, #112]	@ (800d52c <mem_trim+0x200>)
 800d4ba:	f018 f805 	bl	80254c8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d4be:	89fb      	ldrh	r3, [r7, #14]
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f7ff fd53 	bl	800cf6c <ptr_to_mem>
 800d4c6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d4c8:	4b1c      	ldr	r3, [pc, #112]	@ (800d53c <mem_trim+0x210>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	693a      	ldr	r2, [r7, #16]
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	d202      	bcs.n	800d4d8 <mem_trim+0x1ac>
      lfree = mem2;
 800d4d2:	4a1a      	ldr	r2, [pc, #104]	@ (800d53c <mem_trim+0x210>)
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d4de:	69bb      	ldr	r3, [r7, #24]
 800d4e0:	881a      	ldrh	r2, [r3, #0]
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	8afa      	ldrh	r2, [r7, #22]
 800d4ea:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d4ec:	69bb      	ldr	r3, [r7, #24]
 800d4ee:	89fa      	ldrh	r2, [r7, #14]
 800d4f0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	881b      	ldrh	r3, [r3, #0]
 800d4f6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d4fa:	d007      	beq.n	800d50c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	881b      	ldrh	r3, [r3, #0]
 800d500:	4618      	mov	r0, r3
 800d502:	f7ff fd33 	bl	800cf6c <ptr_to_mem>
 800d506:	4602      	mov	r2, r0
 800d508:	89fb      	ldrh	r3, [r7, #14]
 800d50a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d50c:	4809      	ldr	r0, [pc, #36]	@ (800d534 <mem_trim+0x208>)
 800d50e:	f00a ffce 	bl	80184ae <sys_mutex_unlock>
  return rmem;
 800d512:	687b      	ldr	r3, [r7, #4]
}
 800d514:	4618      	mov	r0, r3
 800d516:	3720      	adds	r7, #32
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}
 800d51c:	2000cc28 	.word	0x2000cc28
 800d520:	2000cc2c 	.word	0x2000cc2c
 800d524:	0802773c 	.word	0x0802773c
 800d528:	080278c8 	.word	0x080278c8
 800d52c:	08027784 	.word	0x08027784
 800d530:	080278e0 	.word	0x080278e0
 800d534:	2000cc30 	.word	0x2000cc30
 800d538:	08027900 	.word	0x08027900
 800d53c:	2000cc34 	.word	0x2000cc34

0800d540 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b088      	sub	sp, #32
 800d544:	af00      	add	r7, sp, #0
 800d546:	4603      	mov	r3, r0
 800d548:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d54a:	88fb      	ldrh	r3, [r7, #6]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d101      	bne.n	800d554 <mem_malloc+0x14>
    return NULL;
 800d550:	2300      	movs	r3, #0
 800d552:	e0e2      	b.n	800d71a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d554:	88fb      	ldrh	r3, [r7, #6]
 800d556:	3303      	adds	r3, #3
 800d558:	b29b      	uxth	r3, r3
 800d55a:	f023 0303 	bic.w	r3, r3, #3
 800d55e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d560:	8bbb      	ldrh	r3, [r7, #28]
 800d562:	2b0b      	cmp	r3, #11
 800d564:	d801      	bhi.n	800d56a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d566:	230c      	movs	r3, #12
 800d568:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d56a:	8bbb      	ldrh	r3, [r7, #28]
 800d56c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d570:	d803      	bhi.n	800d57a <mem_malloc+0x3a>
 800d572:	8bba      	ldrh	r2, [r7, #28]
 800d574:	88fb      	ldrh	r3, [r7, #6]
 800d576:	429a      	cmp	r2, r3
 800d578:	d201      	bcs.n	800d57e <mem_malloc+0x3e>
    return NULL;
 800d57a:	2300      	movs	r3, #0
 800d57c:	e0cd      	b.n	800d71a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d57e:	4869      	ldr	r0, [pc, #420]	@ (800d724 <mem_malloc+0x1e4>)
 800d580:	f00a ff86 	bl	8018490 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d584:	4b68      	ldr	r3, [pc, #416]	@ (800d728 <mem_malloc+0x1e8>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	4618      	mov	r0, r3
 800d58a:	f7ff fd01 	bl	800cf90 <mem_to_ptr>
 800d58e:	4603      	mov	r3, r0
 800d590:	83fb      	strh	r3, [r7, #30]
 800d592:	e0b7      	b.n	800d704 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d594:	8bfb      	ldrh	r3, [r7, #30]
 800d596:	4618      	mov	r0, r3
 800d598:	f7ff fce8 	bl	800cf6c <ptr_to_mem>
 800d59c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	791b      	ldrb	r3, [r3, #4]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	f040 80a7 	bne.w	800d6f6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	881b      	ldrh	r3, [r3, #0]
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	8bfb      	ldrh	r3, [r7, #30]
 800d5b0:	1ad3      	subs	r3, r2, r3
 800d5b2:	f1a3 0208 	sub.w	r2, r3, #8
 800d5b6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	f0c0 809c 	bcc.w	800d6f6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	881b      	ldrh	r3, [r3, #0]
 800d5c2:	461a      	mov	r2, r3
 800d5c4:	8bfb      	ldrh	r3, [r7, #30]
 800d5c6:	1ad3      	subs	r3, r2, r3
 800d5c8:	f1a3 0208 	sub.w	r2, r3, #8
 800d5cc:	8bbb      	ldrh	r3, [r7, #28]
 800d5ce:	3314      	adds	r3, #20
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d333      	bcc.n	800d63c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d5d4:	8bfa      	ldrh	r2, [r7, #30]
 800d5d6:	8bbb      	ldrh	r3, [r7, #28]
 800d5d8:	4413      	add	r3, r2
 800d5da:	b29b      	uxth	r3, r3
 800d5dc:	3308      	adds	r3, #8
 800d5de:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d5e0:	8a7b      	ldrh	r3, [r7, #18]
 800d5e2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d5e6:	d106      	bne.n	800d5f6 <mem_malloc+0xb6>
 800d5e8:	4b50      	ldr	r3, [pc, #320]	@ (800d72c <mem_malloc+0x1ec>)
 800d5ea:	f240 3287 	movw	r2, #903	@ 0x387
 800d5ee:	4950      	ldr	r1, [pc, #320]	@ (800d730 <mem_malloc+0x1f0>)
 800d5f0:	4850      	ldr	r0, [pc, #320]	@ (800d734 <mem_malloc+0x1f4>)
 800d5f2:	f017 ff69 	bl	80254c8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d5f6:	8a7b      	ldrh	r3, [r7, #18]
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f7ff fcb7 	bl	800cf6c <ptr_to_mem>
 800d5fe:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	2200      	movs	r2, #0
 800d604:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	881a      	ldrh	r2, [r3, #0]
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	8bfa      	ldrh	r2, [r7, #30]
 800d612:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	8a7a      	ldrh	r2, [r7, #18]
 800d618:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	2201      	movs	r2, #1
 800d61e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	881b      	ldrh	r3, [r3, #0]
 800d624:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d628:	d00b      	beq.n	800d642 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	881b      	ldrh	r3, [r3, #0]
 800d62e:	4618      	mov	r0, r3
 800d630:	f7ff fc9c 	bl	800cf6c <ptr_to_mem>
 800d634:	4602      	mov	r2, r0
 800d636:	8a7b      	ldrh	r3, [r7, #18]
 800d638:	8053      	strh	r3, [r2, #2]
 800d63a:	e002      	b.n	800d642 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	2201      	movs	r2, #1
 800d640:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d642:	4b39      	ldr	r3, [pc, #228]	@ (800d728 <mem_malloc+0x1e8>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	697a      	ldr	r2, [r7, #20]
 800d648:	429a      	cmp	r2, r3
 800d64a:	d127      	bne.n	800d69c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d64c:	4b36      	ldr	r3, [pc, #216]	@ (800d728 <mem_malloc+0x1e8>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d652:	e005      	b.n	800d660 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d654:	69bb      	ldr	r3, [r7, #24]
 800d656:	881b      	ldrh	r3, [r3, #0]
 800d658:	4618      	mov	r0, r3
 800d65a:	f7ff fc87 	bl	800cf6c <ptr_to_mem>
 800d65e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d660:	69bb      	ldr	r3, [r7, #24]
 800d662:	791b      	ldrb	r3, [r3, #4]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d004      	beq.n	800d672 <mem_malloc+0x132>
 800d668:	4b33      	ldr	r3, [pc, #204]	@ (800d738 <mem_malloc+0x1f8>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	69ba      	ldr	r2, [r7, #24]
 800d66e:	429a      	cmp	r2, r3
 800d670:	d1f0      	bne.n	800d654 <mem_malloc+0x114>
          }
          lfree = cur;
 800d672:	4a2d      	ldr	r2, [pc, #180]	@ (800d728 <mem_malloc+0x1e8>)
 800d674:	69bb      	ldr	r3, [r7, #24]
 800d676:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d678:	4b2b      	ldr	r3, [pc, #172]	@ (800d728 <mem_malloc+0x1e8>)
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	4b2e      	ldr	r3, [pc, #184]	@ (800d738 <mem_malloc+0x1f8>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	429a      	cmp	r2, r3
 800d682:	d00b      	beq.n	800d69c <mem_malloc+0x15c>
 800d684:	4b28      	ldr	r3, [pc, #160]	@ (800d728 <mem_malloc+0x1e8>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	791b      	ldrb	r3, [r3, #4]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d006      	beq.n	800d69c <mem_malloc+0x15c>
 800d68e:	4b27      	ldr	r3, [pc, #156]	@ (800d72c <mem_malloc+0x1ec>)
 800d690:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800d694:	4929      	ldr	r1, [pc, #164]	@ (800d73c <mem_malloc+0x1fc>)
 800d696:	4827      	ldr	r0, [pc, #156]	@ (800d734 <mem_malloc+0x1f4>)
 800d698:	f017 ff16 	bl	80254c8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d69c:	4821      	ldr	r0, [pc, #132]	@ (800d724 <mem_malloc+0x1e4>)
 800d69e:	f00a ff06 	bl	80184ae <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d6a2:	8bba      	ldrh	r2, [r7, #28]
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	4413      	add	r3, r2
 800d6a8:	3308      	adds	r3, #8
 800d6aa:	4a23      	ldr	r2, [pc, #140]	@ (800d738 <mem_malloc+0x1f8>)
 800d6ac:	6812      	ldr	r2, [r2, #0]
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	d906      	bls.n	800d6c0 <mem_malloc+0x180>
 800d6b2:	4b1e      	ldr	r3, [pc, #120]	@ (800d72c <mem_malloc+0x1ec>)
 800d6b4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800d6b8:	4921      	ldr	r1, [pc, #132]	@ (800d740 <mem_malloc+0x200>)
 800d6ba:	481e      	ldr	r0, [pc, #120]	@ (800d734 <mem_malloc+0x1f4>)
 800d6bc:	f017 ff04 	bl	80254c8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	f003 0303 	and.w	r3, r3, #3
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d006      	beq.n	800d6d8 <mem_malloc+0x198>
 800d6ca:	4b18      	ldr	r3, [pc, #96]	@ (800d72c <mem_malloc+0x1ec>)
 800d6cc:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800d6d0:	491c      	ldr	r1, [pc, #112]	@ (800d744 <mem_malloc+0x204>)
 800d6d2:	4818      	ldr	r0, [pc, #96]	@ (800d734 <mem_malloc+0x1f4>)
 800d6d4:	f017 fef8 	bl	80254c8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	f003 0303 	and.w	r3, r3, #3
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d006      	beq.n	800d6f0 <mem_malloc+0x1b0>
 800d6e2:	4b12      	ldr	r3, [pc, #72]	@ (800d72c <mem_malloc+0x1ec>)
 800d6e4:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800d6e8:	4917      	ldr	r1, [pc, #92]	@ (800d748 <mem_malloc+0x208>)
 800d6ea:	4812      	ldr	r0, [pc, #72]	@ (800d734 <mem_malloc+0x1f4>)
 800d6ec:	f017 feec 	bl	80254c8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	3308      	adds	r3, #8
 800d6f4:	e011      	b.n	800d71a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d6f6:	8bfb      	ldrh	r3, [r7, #30]
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7ff fc37 	bl	800cf6c <ptr_to_mem>
 800d6fe:	4603      	mov	r3, r0
 800d700:	881b      	ldrh	r3, [r3, #0]
 800d702:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d704:	8bfa      	ldrh	r2, [r7, #30]
 800d706:	8bbb      	ldrh	r3, [r7, #28]
 800d708:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800d70c:	429a      	cmp	r2, r3
 800d70e:	f4ff af41 	bcc.w	800d594 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d712:	4804      	ldr	r0, [pc, #16]	@ (800d724 <mem_malloc+0x1e4>)
 800d714:	f00a fecb 	bl	80184ae <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d718:	2300      	movs	r3, #0
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3720      	adds	r7, #32
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop
 800d724:	2000cc30 	.word	0x2000cc30
 800d728:	2000cc34 	.word	0x2000cc34
 800d72c:	0802773c 	.word	0x0802773c
 800d730:	08027900 	.word	0x08027900
 800d734:	08027784 	.word	0x08027784
 800d738:	2000cc2c 	.word	0x2000cc2c
 800d73c:	08027914 	.word	0x08027914
 800d740:	08027930 	.word	0x08027930
 800d744:	08027960 	.word	0x08027960
 800d748:	08027990 	.word	0x08027990

0800d74c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b085      	sub	sp, #20
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	689b      	ldr	r3, [r3, #8]
 800d758:	2200      	movs	r2, #0
 800d75a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	3303      	adds	r3, #3
 800d762:	f023 0303 	bic.w	r3, r3, #3
 800d766:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d768:	2300      	movs	r3, #0
 800d76a:	60fb      	str	r3, [r7, #12]
 800d76c:	e011      	b.n	800d792 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	689b      	ldr	r3, [r3, #8]
 800d772:	681a      	ldr	r2, [r3, #0]
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	689b      	ldr	r3, [r3, #8]
 800d77c:	68ba      	ldr	r2, [r7, #8]
 800d77e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	881b      	ldrh	r3, [r3, #0]
 800d784:	461a      	mov	r2, r3
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	4413      	add	r3, r2
 800d78a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	3301      	adds	r3, #1
 800d790:	60fb      	str	r3, [r7, #12]
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	885b      	ldrh	r3, [r3, #2]
 800d796:	461a      	mov	r2, r3
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	4293      	cmp	r3, r2
 800d79c:	dbe7      	blt.n	800d76e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d79e:	bf00      	nop
 800d7a0:	bf00      	nop
 800d7a2:	3714      	adds	r7, #20
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr

0800d7ac <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b082      	sub	sp, #8
 800d7b0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	80fb      	strh	r3, [r7, #6]
 800d7b6:	e009      	b.n	800d7cc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d7b8:	88fb      	ldrh	r3, [r7, #6]
 800d7ba:	4a08      	ldr	r2, [pc, #32]	@ (800d7dc <memp_init+0x30>)
 800d7bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f7ff ffc3 	bl	800d74c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d7c6:	88fb      	ldrh	r3, [r7, #6]
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	80fb      	strh	r3, [r7, #6]
 800d7cc:	88fb      	ldrh	r3, [r7, #6]
 800d7ce:	2b0c      	cmp	r3, #12
 800d7d0:	d9f2      	bls.n	800d7b8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d7d2:	bf00      	nop
 800d7d4:	bf00      	nop
 800d7d6:	3708      	adds	r7, #8
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	0802a278 	.word	0x0802a278

0800d7e0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b084      	sub	sp, #16
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d7e8:	f00a fe94 	bl	8018514 <sys_arch_protect>
 800d7ec:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	689b      	ldr	r3, [r3, #8]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d015      	beq.n	800d828 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	689b      	ldr	r3, [r3, #8]
 800d800:	68ba      	ldr	r2, [r7, #8]
 800d802:	6812      	ldr	r2, [r2, #0]
 800d804:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	f003 0303 	and.w	r3, r3, #3
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d006      	beq.n	800d81e <do_memp_malloc_pool+0x3e>
 800d810:	4b09      	ldr	r3, [pc, #36]	@ (800d838 <do_memp_malloc_pool+0x58>)
 800d812:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800d816:	4909      	ldr	r1, [pc, #36]	@ (800d83c <do_memp_malloc_pool+0x5c>)
 800d818:	4809      	ldr	r0, [pc, #36]	@ (800d840 <do_memp_malloc_pool+0x60>)
 800d81a:	f017 fe55 	bl	80254c8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d81e:	68f8      	ldr	r0, [r7, #12]
 800d820:	f00a fe86 	bl	8018530 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	e003      	b.n	800d830 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d828:	68f8      	ldr	r0, [r7, #12]
 800d82a:	f00a fe81 	bl	8018530 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d82e:	2300      	movs	r3, #0
}
 800d830:	4618      	mov	r0, r3
 800d832:	3710      	adds	r7, #16
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}
 800d838:	080279b4 	.word	0x080279b4
 800d83c:	080279e4 	.word	0x080279e4
 800d840:	08027a08 	.word	0x08027a08

0800d844 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b082      	sub	sp, #8
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d106      	bne.n	800d860 <memp_malloc_pool+0x1c>
 800d852:	4b0a      	ldr	r3, [pc, #40]	@ (800d87c <memp_malloc_pool+0x38>)
 800d854:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800d858:	4909      	ldr	r1, [pc, #36]	@ (800d880 <memp_malloc_pool+0x3c>)
 800d85a:	480a      	ldr	r0, [pc, #40]	@ (800d884 <memp_malloc_pool+0x40>)
 800d85c:	f017 fe34 	bl	80254c8 <iprintf>
  if (desc == NULL) {
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d101      	bne.n	800d86a <memp_malloc_pool+0x26>
    return NULL;
 800d866:	2300      	movs	r3, #0
 800d868:	e003      	b.n	800d872 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f7ff ffb8 	bl	800d7e0 <do_memp_malloc_pool>
 800d870:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800d872:	4618      	mov	r0, r3
 800d874:	3708      	adds	r7, #8
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}
 800d87a:	bf00      	nop
 800d87c:	080279b4 	.word	0x080279b4
 800d880:	08027a30 	.word	0x08027a30
 800d884:	08027a08 	.word	0x08027a08

0800d888 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b084      	sub	sp, #16
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	4603      	mov	r3, r0
 800d890:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d892:	79fb      	ldrb	r3, [r7, #7]
 800d894:	2b0c      	cmp	r3, #12
 800d896:	d908      	bls.n	800d8aa <memp_malloc+0x22>
 800d898:	4b0a      	ldr	r3, [pc, #40]	@ (800d8c4 <memp_malloc+0x3c>)
 800d89a:	f240 1257 	movw	r2, #343	@ 0x157
 800d89e:	490a      	ldr	r1, [pc, #40]	@ (800d8c8 <memp_malloc+0x40>)
 800d8a0:	480a      	ldr	r0, [pc, #40]	@ (800d8cc <memp_malloc+0x44>)
 800d8a2:	f017 fe11 	bl	80254c8 <iprintf>
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	e008      	b.n	800d8bc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d8aa:	79fb      	ldrb	r3, [r7, #7]
 800d8ac:	4a08      	ldr	r2, [pc, #32]	@ (800d8d0 <memp_malloc+0x48>)
 800d8ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f7ff ff94 	bl	800d7e0 <do_memp_malloc_pool>
 800d8b8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3710      	adds	r7, #16
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}
 800d8c4:	080279b4 	.word	0x080279b4
 800d8c8:	08027a44 	.word	0x08027a44
 800d8cc:	08027a08 	.word	0x08027a08
 800d8d0:	0802a278 	.word	0x0802a278

0800d8d4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b084      	sub	sp, #16
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	f003 0303 	and.w	r3, r3, #3
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d006      	beq.n	800d8f6 <do_memp_free_pool+0x22>
 800d8e8:	4b0d      	ldr	r3, [pc, #52]	@ (800d920 <do_memp_free_pool+0x4c>)
 800d8ea:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800d8ee:	490d      	ldr	r1, [pc, #52]	@ (800d924 <do_memp_free_pool+0x50>)
 800d8f0:	480d      	ldr	r0, [pc, #52]	@ (800d928 <do_memp_free_pool+0x54>)
 800d8f2:	f017 fde9 	bl	80254c8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d8fa:	f00a fe0b 	bl	8018514 <sys_arch_protect>
 800d8fe:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	689b      	ldr	r3, [r3, #8]
 800d904:	681a      	ldr	r2, [r3, #0]
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	689b      	ldr	r3, [r3, #8]
 800d90e:	68fa      	ldr	r2, [r7, #12]
 800d910:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d912:	68b8      	ldr	r0, [r7, #8]
 800d914:	f00a fe0c 	bl	8018530 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d918:	bf00      	nop
 800d91a:	3710      	adds	r7, #16
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}
 800d920:	080279b4 	.word	0x080279b4
 800d924:	08027a64 	.word	0x08027a64
 800d928:	08027a08 	.word	0x08027a08

0800d92c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d106      	bne.n	800d94a <memp_free_pool+0x1e>
 800d93c:	4b0a      	ldr	r3, [pc, #40]	@ (800d968 <memp_free_pool+0x3c>)
 800d93e:	f240 1295 	movw	r2, #405	@ 0x195
 800d942:	490a      	ldr	r1, [pc, #40]	@ (800d96c <memp_free_pool+0x40>)
 800d944:	480a      	ldr	r0, [pc, #40]	@ (800d970 <memp_free_pool+0x44>)
 800d946:	f017 fdbf 	bl	80254c8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d007      	beq.n	800d960 <memp_free_pool+0x34>
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d004      	beq.n	800d960 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800d956:	6839      	ldr	r1, [r7, #0]
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f7ff ffbb 	bl	800d8d4 <do_memp_free_pool>
 800d95e:	e000      	b.n	800d962 <memp_free_pool+0x36>
    return;
 800d960:	bf00      	nop
}
 800d962:	3708      	adds	r7, #8
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}
 800d968:	080279b4 	.word	0x080279b4
 800d96c:	08027a30 	.word	0x08027a30
 800d970:	08027a08 	.word	0x08027a08

0800d974 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b082      	sub	sp, #8
 800d978:	af00      	add	r7, sp, #0
 800d97a:	4603      	mov	r3, r0
 800d97c:	6039      	str	r1, [r7, #0]
 800d97e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d980:	79fb      	ldrb	r3, [r7, #7]
 800d982:	2b0c      	cmp	r3, #12
 800d984:	d907      	bls.n	800d996 <memp_free+0x22>
 800d986:	4b0c      	ldr	r3, [pc, #48]	@ (800d9b8 <memp_free+0x44>)
 800d988:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800d98c:	490b      	ldr	r1, [pc, #44]	@ (800d9bc <memp_free+0x48>)
 800d98e:	480c      	ldr	r0, [pc, #48]	@ (800d9c0 <memp_free+0x4c>)
 800d990:	f017 fd9a 	bl	80254c8 <iprintf>
 800d994:	e00c      	b.n	800d9b0 <memp_free+0x3c>

  if (mem == NULL) {
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d008      	beq.n	800d9ae <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d99c:	79fb      	ldrb	r3, [r7, #7]
 800d99e:	4a09      	ldr	r2, [pc, #36]	@ (800d9c4 <memp_free+0x50>)
 800d9a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9a4:	6839      	ldr	r1, [r7, #0]
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7ff ff94 	bl	800d8d4 <do_memp_free_pool>
 800d9ac:	e000      	b.n	800d9b0 <memp_free+0x3c>
    return;
 800d9ae:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d9b0:	3708      	adds	r7, #8
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	080279b4 	.word	0x080279b4
 800d9bc:	08027a84 	.word	0x08027a84
 800d9c0:	08027a08 	.word	0x08027a08
 800d9c4:	0802a278 	.word	0x0802a278

0800d9c8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d9cc:	bf00      	nop
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d4:	4770      	bx	lr
	...

0800d9d8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b086      	sub	sp, #24
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	607a      	str	r2, [r7, #4]
 800d9e4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d108      	bne.n	800d9fe <netif_add+0x26>
 800d9ec:	4b57      	ldr	r3, [pc, #348]	@ (800db4c <netif_add+0x174>)
 800d9ee:	f240 1227 	movw	r2, #295	@ 0x127
 800d9f2:	4957      	ldr	r1, [pc, #348]	@ (800db50 <netif_add+0x178>)
 800d9f4:	4857      	ldr	r0, [pc, #348]	@ (800db54 <netif_add+0x17c>)
 800d9f6:	f017 fd67 	bl	80254c8 <iprintf>
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	e0a2      	b.n	800db44 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da00:	2b00      	cmp	r3, #0
 800da02:	d108      	bne.n	800da16 <netif_add+0x3e>
 800da04:	4b51      	ldr	r3, [pc, #324]	@ (800db4c <netif_add+0x174>)
 800da06:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800da0a:	4953      	ldr	r1, [pc, #332]	@ (800db58 <netif_add+0x180>)
 800da0c:	4851      	ldr	r0, [pc, #324]	@ (800db54 <netif_add+0x17c>)
 800da0e:	f017 fd5b 	bl	80254c8 <iprintf>
 800da12:	2300      	movs	r3, #0
 800da14:	e096      	b.n	800db44 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d101      	bne.n	800da20 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800da1c:	4b4f      	ldr	r3, [pc, #316]	@ (800db5c <netif_add+0x184>)
 800da1e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d101      	bne.n	800da2a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800da26:	4b4d      	ldr	r3, [pc, #308]	@ (800db5c <netif_add+0x184>)
 800da28:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d101      	bne.n	800da34 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800da30:	4b4a      	ldr	r3, [pc, #296]	@ (800db5c <netif_add+0x184>)
 800da32:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2200      	movs	r2, #0
 800da38:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2200      	movs	r2, #0
 800da3e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	2200      	movs	r2, #0
 800da44:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	4a45      	ldr	r2, [pc, #276]	@ (800db60 <netif_add+0x188>)
 800da4a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	2200      	movs	r2, #0
 800da50:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	2200      	movs	r2, #0
 800da56:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	2200      	movs	r2, #0
 800da5e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	6a3a      	ldr	r2, [r7, #32]
 800da64:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800da66:	4b3f      	ldr	r3, [pc, #252]	@ (800db64 <netif_add+0x18c>)
 800da68:	781a      	ldrb	r2, [r3, #0]
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da74:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	687a      	ldr	r2, [r7, #4]
 800da7a:	68b9      	ldr	r1, [r7, #8]
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	f000 f913 	bl	800dca8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800da82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da84:	68f8      	ldr	r0, [r7, #12]
 800da86:	4798      	blx	r3
 800da88:	4603      	mov	r3, r0
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d001      	beq.n	800da92 <netif_add+0xba>
    return NULL;
 800da8e:	2300      	movs	r3, #0
 800da90:	e058      	b.n	800db44 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800da98:	2bff      	cmp	r3, #255	@ 0xff
 800da9a:	d103      	bne.n	800daa4 <netif_add+0xcc>
        netif->num = 0;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2200      	movs	r2, #0
 800daa0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800daa4:	2300      	movs	r3, #0
 800daa6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800daa8:	4b2f      	ldr	r3, [pc, #188]	@ (800db68 <netif_add+0x190>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	617b      	str	r3, [r7, #20]
 800daae:	e02b      	b.n	800db08 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800dab0:	697a      	ldr	r2, [r7, #20]
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	429a      	cmp	r2, r3
 800dab6:	d106      	bne.n	800dac6 <netif_add+0xee>
 800dab8:	4b24      	ldr	r3, [pc, #144]	@ (800db4c <netif_add+0x174>)
 800daba:	f240 128b 	movw	r2, #395	@ 0x18b
 800dabe:	492b      	ldr	r1, [pc, #172]	@ (800db6c <netif_add+0x194>)
 800dac0:	4824      	ldr	r0, [pc, #144]	@ (800db54 <netif_add+0x17c>)
 800dac2:	f017 fd01 	bl	80254c8 <iprintf>
        num_netifs++;
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	3301      	adds	r3, #1
 800daca:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	2bff      	cmp	r3, #255	@ 0xff
 800dad0:	dd06      	ble.n	800dae0 <netif_add+0x108>
 800dad2:	4b1e      	ldr	r3, [pc, #120]	@ (800db4c <netif_add+0x174>)
 800dad4:	f240 128d 	movw	r2, #397	@ 0x18d
 800dad8:	4925      	ldr	r1, [pc, #148]	@ (800db70 <netif_add+0x198>)
 800dada:	481e      	ldr	r0, [pc, #120]	@ (800db54 <netif_add+0x17c>)
 800dadc:	f017 fcf4 	bl	80254c8 <iprintf>
        if (netif2->num == netif->num) {
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800daec:	429a      	cmp	r2, r3
 800daee:	d108      	bne.n	800db02 <netif_add+0x12a>
          netif->num++;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800daf6:	3301      	adds	r3, #1
 800daf8:	b2da      	uxtb	r2, r3
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800db00:	e005      	b.n	800db0e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	617b      	str	r3, [r7, #20]
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d1d0      	bne.n	800dab0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d1be      	bne.n	800da92 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800db1a:	2bfe      	cmp	r3, #254	@ 0xfe
 800db1c:	d103      	bne.n	800db26 <netif_add+0x14e>
    netif_num = 0;
 800db1e:	4b11      	ldr	r3, [pc, #68]	@ (800db64 <netif_add+0x18c>)
 800db20:	2200      	movs	r2, #0
 800db22:	701a      	strb	r2, [r3, #0]
 800db24:	e006      	b.n	800db34 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800db2c:	3301      	adds	r3, #1
 800db2e:	b2da      	uxtb	r2, r3
 800db30:	4b0c      	ldr	r3, [pc, #48]	@ (800db64 <netif_add+0x18c>)
 800db32:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800db34:	4b0c      	ldr	r3, [pc, #48]	@ (800db68 <netif_add+0x190>)
 800db36:	681a      	ldr	r2, [r3, #0]
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800db3c:	4a0a      	ldr	r2, [pc, #40]	@ (800db68 <netif_add+0x190>)
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800db42:	68fb      	ldr	r3, [r7, #12]
}
 800db44:	4618      	mov	r0, r3
 800db46:	3718      	adds	r7, #24
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}
 800db4c:	08027aa0 	.word	0x08027aa0
 800db50:	08027b34 	.word	0x08027b34
 800db54:	08027af0 	.word	0x08027af0
 800db58:	08027b50 	.word	0x08027b50
 800db5c:	0802a2ec 	.word	0x0802a2ec
 800db60:	0800df83 	.word	0x0800df83
 800db64:	2000fe7c 	.word	0x2000fe7c
 800db68:	2000fe74 	.word	0x2000fe74
 800db6c:	08027b74 	.word	0x08027b74
 800db70:	08027b88 	.word	0x08027b88

0800db74 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b082      	sub	sp, #8
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800db7e:	6839      	ldr	r1, [r7, #0]
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f002 fe1b 	bl	80107bc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800db86:	6839      	ldr	r1, [r7, #0]
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f007 fecb 	bl	8015924 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800db8e:	bf00      	nop
 800db90:	3708      	adds	r7, #8
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
	...

0800db98 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b086      	sub	sp, #24
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	60f8      	str	r0, [r7, #12]
 800dba0:	60b9      	str	r1, [r7, #8]
 800dba2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d106      	bne.n	800dbb8 <netif_do_set_ipaddr+0x20>
 800dbaa:	4b1d      	ldr	r3, [pc, #116]	@ (800dc20 <netif_do_set_ipaddr+0x88>)
 800dbac:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800dbb0:	491c      	ldr	r1, [pc, #112]	@ (800dc24 <netif_do_set_ipaddr+0x8c>)
 800dbb2:	481d      	ldr	r0, [pc, #116]	@ (800dc28 <netif_do_set_ipaddr+0x90>)
 800dbb4:	f017 fc88 	bl	80254c8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d106      	bne.n	800dbcc <netif_do_set_ipaddr+0x34>
 800dbbe:	4b18      	ldr	r3, [pc, #96]	@ (800dc20 <netif_do_set_ipaddr+0x88>)
 800dbc0:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800dbc4:	4917      	ldr	r1, [pc, #92]	@ (800dc24 <netif_do_set_ipaddr+0x8c>)
 800dbc6:	4818      	ldr	r0, [pc, #96]	@ (800dc28 <netif_do_set_ipaddr+0x90>)
 800dbc8:	f017 fc7e 	bl	80254c8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	681a      	ldr	r2, [r3, #0]
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	3304      	adds	r3, #4
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	d01c      	beq.n	800dc14 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	3304      	adds	r3, #4
 800dbe4:	681a      	ldr	r2, [r3, #0]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800dbea:	f107 0314 	add.w	r3, r7, #20
 800dbee:	4619      	mov	r1, r3
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f7ff ffbf 	bl	800db74 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d002      	beq.n	800dc02 <netif_do_set_ipaddr+0x6a>
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	e000      	b.n	800dc04 <netif_do_set_ipaddr+0x6c>
 800dc02:	2300      	movs	r3, #0
 800dc04:	68fa      	ldr	r2, [r7, #12]
 800dc06:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800dc08:	2101      	movs	r1, #1
 800dc0a:	68f8      	ldr	r0, [r7, #12]
 800dc0c:	f000 f8d2 	bl	800ddb4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800dc10:	2301      	movs	r3, #1
 800dc12:	e000      	b.n	800dc16 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800dc14:	2300      	movs	r3, #0
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3718      	adds	r7, #24
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}
 800dc1e:	bf00      	nop
 800dc20:	08027aa0 	.word	0x08027aa0
 800dc24:	08027bb8 	.word	0x08027bb8
 800dc28:	08027af0 	.word	0x08027af0

0800dc2c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b085      	sub	sp, #20
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	60f8      	str	r0, [r7, #12]
 800dc34:	60b9      	str	r1, [r7, #8]
 800dc36:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	681a      	ldr	r2, [r3, #0]
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	3308      	adds	r3, #8
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	429a      	cmp	r2, r3
 800dc44:	d00a      	beq.n	800dc5c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d002      	beq.n	800dc52 <netif_do_set_netmask+0x26>
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	e000      	b.n	800dc54 <netif_do_set_netmask+0x28>
 800dc52:	2300      	movs	r3, #0
 800dc54:	68fa      	ldr	r2, [r7, #12]
 800dc56:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800dc58:	2301      	movs	r3, #1
 800dc5a:	e000      	b.n	800dc5e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800dc5c:	2300      	movs	r3, #0
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3714      	adds	r7, #20
 800dc62:	46bd      	mov	sp, r7
 800dc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc68:	4770      	bx	lr

0800dc6a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800dc6a:	b480      	push	{r7}
 800dc6c:	b085      	sub	sp, #20
 800dc6e:	af00      	add	r7, sp, #0
 800dc70:	60f8      	str	r0, [r7, #12]
 800dc72:	60b9      	str	r1, [r7, #8]
 800dc74:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	681a      	ldr	r2, [r3, #0]
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	330c      	adds	r3, #12
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d00a      	beq.n	800dc9a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d002      	beq.n	800dc90 <netif_do_set_gw+0x26>
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	e000      	b.n	800dc92 <netif_do_set_gw+0x28>
 800dc90:	2300      	movs	r3, #0
 800dc92:	68fa      	ldr	r2, [r7, #12]
 800dc94:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800dc96:	2301      	movs	r3, #1
 800dc98:	e000      	b.n	800dc9c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800dc9a:	2300      	movs	r3, #0
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3714      	adds	r7, #20
 800dca0:	46bd      	mov	sp, r7
 800dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca6:	4770      	bx	lr

0800dca8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b088      	sub	sp, #32
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	60f8      	str	r0, [r7, #12]
 800dcb0:	60b9      	str	r1, [r7, #8]
 800dcb2:	607a      	str	r2, [r7, #4]
 800dcb4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d101      	bne.n	800dcc8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800dcc4:	4b1c      	ldr	r3, [pc, #112]	@ (800dd38 <netif_set_addr+0x90>)
 800dcc6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d101      	bne.n	800dcd2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800dcce:	4b1a      	ldr	r3, [pc, #104]	@ (800dd38 <netif_set_addr+0x90>)
 800dcd0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d101      	bne.n	800dcdc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800dcd8:	4b17      	ldr	r3, [pc, #92]	@ (800dd38 <netif_set_addr+0x90>)
 800dcda:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d003      	beq.n	800dcea <netif_set_addr+0x42>
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d101      	bne.n	800dcee <netif_set_addr+0x46>
 800dcea:	2301      	movs	r3, #1
 800dcec:	e000      	b.n	800dcf0 <netif_set_addr+0x48>
 800dcee:	2300      	movs	r3, #0
 800dcf0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d006      	beq.n	800dd06 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dcf8:	f107 0310 	add.w	r3, r7, #16
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	68b9      	ldr	r1, [r7, #8]
 800dd00:	68f8      	ldr	r0, [r7, #12]
 800dd02:	f7ff ff49 	bl	800db98 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800dd06:	69fa      	ldr	r2, [r7, #28]
 800dd08:	6879      	ldr	r1, [r7, #4]
 800dd0a:	68f8      	ldr	r0, [r7, #12]
 800dd0c:	f7ff ff8e 	bl	800dc2c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800dd10:	69ba      	ldr	r2, [r7, #24]
 800dd12:	6839      	ldr	r1, [r7, #0]
 800dd14:	68f8      	ldr	r0, [r7, #12]
 800dd16:	f7ff ffa8 	bl	800dc6a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d106      	bne.n	800dd2e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dd20:	f107 0310 	add.w	r3, r7, #16
 800dd24:	461a      	mov	r2, r3
 800dd26:	68b9      	ldr	r1, [r7, #8]
 800dd28:	68f8      	ldr	r0, [r7, #12]
 800dd2a:	f7ff ff35 	bl	800db98 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800dd2e:	bf00      	nop
 800dd30:	3720      	adds	r7, #32
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}
 800dd36:	bf00      	nop
 800dd38:	0802a2ec 	.word	0x0802a2ec

0800dd3c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800dd3c:	b480      	push	{r7}
 800dd3e:	b083      	sub	sp, #12
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800dd44:	4a04      	ldr	r2, [pc, #16]	@ (800dd58 <netif_set_default+0x1c>)
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800dd4a:	bf00      	nop
 800dd4c:	370c      	adds	r7, #12
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd54:	4770      	bx	lr
 800dd56:	bf00      	nop
 800dd58:	2000fe78 	.word	0x2000fe78

0800dd5c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b082      	sub	sp, #8
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d107      	bne.n	800dd7a <netif_set_up+0x1e>
 800dd6a:	4b0f      	ldr	r3, [pc, #60]	@ (800dda8 <netif_set_up+0x4c>)
 800dd6c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800dd70:	490e      	ldr	r1, [pc, #56]	@ (800ddac <netif_set_up+0x50>)
 800dd72:	480f      	ldr	r0, [pc, #60]	@ (800ddb0 <netif_set_up+0x54>)
 800dd74:	f017 fba8 	bl	80254c8 <iprintf>
 800dd78:	e013      	b.n	800dda2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dd80:	f003 0301 	and.w	r3, r3, #1
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d10c      	bne.n	800dda2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dd8e:	f043 0301 	orr.w	r3, r3, #1
 800dd92:	b2da      	uxtb	r2, r3
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800dd9a:	2103      	movs	r1, #3
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f000 f809 	bl	800ddb4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800dda2:	3708      	adds	r7, #8
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}
 800dda8:	08027aa0 	.word	0x08027aa0
 800ddac:	08027c28 	.word	0x08027c28
 800ddb0:	08027af0 	.word	0x08027af0

0800ddb4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b082      	sub	sp, #8
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
 800ddbc:	460b      	mov	r3, r1
 800ddbe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d106      	bne.n	800ddd4 <netif_issue_reports+0x20>
 800ddc6:	4b18      	ldr	r3, [pc, #96]	@ (800de28 <netif_issue_reports+0x74>)
 800ddc8:	f240 326d 	movw	r2, #877	@ 0x36d
 800ddcc:	4917      	ldr	r1, [pc, #92]	@ (800de2c <netif_issue_reports+0x78>)
 800ddce:	4818      	ldr	r0, [pc, #96]	@ (800de30 <netif_issue_reports+0x7c>)
 800ddd0:	f017 fb7a 	bl	80254c8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ddda:	f003 0304 	and.w	r3, r3, #4
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d01e      	beq.n	800de20 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dde8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d017      	beq.n	800de20 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ddf0:	78fb      	ldrb	r3, [r7, #3]
 800ddf2:	f003 0301 	and.w	r3, r3, #1
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d013      	beq.n	800de22 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	3304      	adds	r3, #4
 800ddfe:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800de00:	2b00      	cmp	r3, #0
 800de02:	d00e      	beq.n	800de22 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800de0a:	f003 0308 	and.w	r3, r3, #8
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d007      	beq.n	800de22 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	3304      	adds	r3, #4
 800de16:	4619      	mov	r1, r3
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f008 fced 	bl	80167f8 <etharp_request>
 800de1e:	e000      	b.n	800de22 <netif_issue_reports+0x6e>
    return;
 800de20:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800de22:	3708      	adds	r7, #8
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}
 800de28:	08027aa0 	.word	0x08027aa0
 800de2c:	08027c44 	.word	0x08027c44
 800de30:	08027af0 	.word	0x08027af0

0800de34 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d107      	bne.n	800de52 <netif_set_down+0x1e>
 800de42:	4b12      	ldr	r3, [pc, #72]	@ (800de8c <netif_set_down+0x58>)
 800de44:	f240 329b 	movw	r2, #923	@ 0x39b
 800de48:	4911      	ldr	r1, [pc, #68]	@ (800de90 <netif_set_down+0x5c>)
 800de4a:	4812      	ldr	r0, [pc, #72]	@ (800de94 <netif_set_down+0x60>)
 800de4c:	f017 fb3c 	bl	80254c8 <iprintf>
 800de50:	e019      	b.n	800de86 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800de58:	f003 0301 	and.w	r3, r3, #1
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d012      	beq.n	800de86 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800de66:	f023 0301 	bic.w	r3, r3, #1
 800de6a:	b2da      	uxtb	r2, r3
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800de78:	f003 0308 	and.w	r3, r3, #8
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d002      	beq.n	800de86 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f008 f877 	bl	8015f74 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800de86:	3708      	adds	r7, #8
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}
 800de8c:	08027aa0 	.word	0x08027aa0
 800de90:	08027c68 	.word	0x08027c68
 800de94:	08027af0 	.word	0x08027af0

0800de98 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d107      	bne.n	800deb6 <netif_set_link_up+0x1e>
 800dea6:	4b13      	ldr	r3, [pc, #76]	@ (800def4 <netif_set_link_up+0x5c>)
 800dea8:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800deac:	4912      	ldr	r1, [pc, #72]	@ (800def8 <netif_set_link_up+0x60>)
 800deae:	4813      	ldr	r0, [pc, #76]	@ (800defc <netif_set_link_up+0x64>)
 800deb0:	f017 fb0a 	bl	80254c8 <iprintf>
 800deb4:	e01b      	b.n	800deee <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800debc:	f003 0304 	and.w	r3, r3, #4
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d114      	bne.n	800deee <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800deca:	f043 0304 	orr.w	r3, r3, #4
 800dece:	b2da      	uxtb	r2, r3
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ded6:	2103      	movs	r1, #3
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f7ff ff6b 	bl	800ddb4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	69db      	ldr	r3, [r3, #28]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d003      	beq.n	800deee <netif_set_link_up+0x56>
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	69db      	ldr	r3, [r3, #28]
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800deee:	3708      	adds	r7, #8
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}
 800def4:	08027aa0 	.word	0x08027aa0
 800def8:	08027c88 	.word	0x08027c88
 800defc:	08027af0 	.word	0x08027af0

0800df00 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d107      	bne.n	800df1e <netif_set_link_down+0x1e>
 800df0e:	4b11      	ldr	r3, [pc, #68]	@ (800df54 <netif_set_link_down+0x54>)
 800df10:	f240 4206 	movw	r2, #1030	@ 0x406
 800df14:	4910      	ldr	r1, [pc, #64]	@ (800df58 <netif_set_link_down+0x58>)
 800df16:	4811      	ldr	r0, [pc, #68]	@ (800df5c <netif_set_link_down+0x5c>)
 800df18:	f017 fad6 	bl	80254c8 <iprintf>
 800df1c:	e017      	b.n	800df4e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800df24:	f003 0304 	and.w	r3, r3, #4
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d010      	beq.n	800df4e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800df32:	f023 0304 	bic.w	r3, r3, #4
 800df36:	b2da      	uxtb	r2, r3
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	69db      	ldr	r3, [r3, #28]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d003      	beq.n	800df4e <netif_set_link_down+0x4e>
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	69db      	ldr	r3, [r3, #28]
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800df4e:	3708      	adds	r7, #8
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}
 800df54:	08027aa0 	.word	0x08027aa0
 800df58:	08027cac 	.word	0x08027cac
 800df5c:	08027af0 	.word	0x08027af0

0800df60 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800df60:	b480      	push	{r7}
 800df62:	b083      	sub	sp, #12
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d002      	beq.n	800df76 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	683a      	ldr	r2, [r7, #0]
 800df74:	61da      	str	r2, [r3, #28]
  }
}
 800df76:	bf00      	nop
 800df78:	370c      	adds	r7, #12
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr

0800df82 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800df82:	b480      	push	{r7}
 800df84:	b085      	sub	sp, #20
 800df86:	af00      	add	r7, sp, #0
 800df88:	60f8      	str	r0, [r7, #12]
 800df8a:	60b9      	str	r1, [r7, #8]
 800df8c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800df8e:	f06f 030b 	mvn.w	r3, #11
}
 800df92:	4618      	mov	r0, r3
 800df94:	3714      	adds	r7, #20
 800df96:	46bd      	mov	sp, r7
 800df98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9c:	4770      	bx	lr
	...

0800dfa0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b085      	sub	sp, #20
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800dfaa:	79fb      	ldrb	r3, [r7, #7]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d013      	beq.n	800dfd8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800dfb0:	4b0d      	ldr	r3, [pc, #52]	@ (800dfe8 <netif_get_by_index+0x48>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	60fb      	str	r3, [r7, #12]
 800dfb6:	e00c      	b.n	800dfd2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dfbe:	3301      	adds	r3, #1
 800dfc0:	b2db      	uxtb	r3, r3
 800dfc2:	79fa      	ldrb	r2, [r7, #7]
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d101      	bne.n	800dfcc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	e006      	b.n	800dfda <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	60fb      	str	r3, [r7, #12]
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d1ef      	bne.n	800dfb8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800dfd8:	2300      	movs	r3, #0
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3714      	adds	r7, #20
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe4:	4770      	bx	lr
 800dfe6:	bf00      	nop
 800dfe8:	2000fe74 	.word	0x2000fe74

0800dfec <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(const char *name)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b084      	sub	sp, #16
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
  struct netif *netif;
  u8_t num;

  LWIP_ASSERT_CORE_LOCKED();

  if (name == NULL) {
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d101      	bne.n	800dffe <netif_find+0x12>
    return NULL;
 800dffa:	2300      	movs	r3, #0
 800dffc:	e028      	b.n	800e050 <netif_find+0x64>
  }

  num = (u8_t)atoi(&name[2]);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	3302      	adds	r3, #2
 800e002:	4618      	mov	r0, r3
 800e004:	f016 fe6e 	bl	8024ce4 <atoi>
 800e008:	4603      	mov	r3, r0
 800e00a:	72fb      	strb	r3, [r7, #11]

  NETIF_FOREACH(netif) {
 800e00c:	4b12      	ldr	r3, [pc, #72]	@ (800e058 <netif_find+0x6c>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	60fb      	str	r3, [r7, #12]
 800e012:	e019      	b.n	800e048 <netif_find+0x5c>
    if (num == netif->num &&
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e01a:	7afa      	ldrb	r2, [r7, #11]
 800e01c:	429a      	cmp	r2, r3
 800e01e:	d110      	bne.n	800e042 <netif_find+0x56>
        name[0] == netif->name[0] &&
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	781a      	ldrb	r2, [r3, #0]
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
    if (num == netif->num &&
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d109      	bne.n	800e042 <netif_find+0x56>
        name[1] == netif->name[1]) {
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	3301      	adds	r3, #1
 800e032:	781a      	ldrb	r2, [r3, #0]
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
        name[0] == netif->name[0] &&
 800e03a:	429a      	cmp	r2, r3
 800e03c:	d101      	bne.n	800e042 <netif_find+0x56>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	e006      	b.n	800e050 <netif_find+0x64>
  NETIF_FOREACH(netif) {
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	60fb      	str	r3, [r7, #12]
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d1e2      	bne.n	800e014 <netif_find+0x28>
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
 800e04e:	2300      	movs	r3, #0
}
 800e050:	4618      	mov	r0, r3
 800e052:	3710      	adds	r7, #16
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}
 800e058:	2000fe74 	.word	0x2000fe74

0800e05c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b082      	sub	sp, #8
 800e060:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e062:	f00a fa57 	bl	8018514 <sys_arch_protect>
 800e066:	6038      	str	r0, [r7, #0]
 800e068:	4b0d      	ldr	r3, [pc, #52]	@ (800e0a0 <pbuf_free_ooseq+0x44>)
 800e06a:	2200      	movs	r2, #0
 800e06c:	701a      	strb	r2, [r3, #0]
 800e06e:	6838      	ldr	r0, [r7, #0]
 800e070:	f00a fa5e 	bl	8018530 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e074:	4b0b      	ldr	r3, [pc, #44]	@ (800e0a4 <pbuf_free_ooseq+0x48>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	607b      	str	r3, [r7, #4]
 800e07a:	e00a      	b.n	800e092 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e080:	2b00      	cmp	r3, #0
 800e082:	d003      	beq.n	800e08c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f002 fbd7 	bl	8010838 <tcp_free_ooseq>
      return;
 800e08a:	e005      	b.n	800e098 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	68db      	ldr	r3, [r3, #12]
 800e090:	607b      	str	r3, [r7, #4]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d1f1      	bne.n	800e07c <pbuf_free_ooseq+0x20>
    }
  }
}
 800e098:	3708      	adds	r7, #8
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
 800e09e:	bf00      	nop
 800e0a0:	2000fe7d 	.word	0x2000fe7d
 800e0a4:	2000fe8c 	.word	0x2000fe8c

0800e0a8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b082      	sub	sp, #8
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e0b0:	f7ff ffd4 	bl	800e05c <pbuf_free_ooseq>
}
 800e0b4:	bf00      	nop
 800e0b6:	3708      	adds	r7, #8
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}

0800e0bc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b082      	sub	sp, #8
 800e0c0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e0c2:	f00a fa27 	bl	8018514 <sys_arch_protect>
 800e0c6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e0c8:	4b0f      	ldr	r3, [pc, #60]	@ (800e108 <pbuf_pool_is_empty+0x4c>)
 800e0ca:	781b      	ldrb	r3, [r3, #0]
 800e0cc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e0ce:	4b0e      	ldr	r3, [pc, #56]	@ (800e108 <pbuf_pool_is_empty+0x4c>)
 800e0d0:	2201      	movs	r2, #1
 800e0d2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f00a fa2b 	bl	8018530 <sys_arch_unprotect>

  if (!queued) {
 800e0da:	78fb      	ldrb	r3, [r7, #3]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d10f      	bne.n	800e100 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e0e0:	2100      	movs	r1, #0
 800e0e2:	480a      	ldr	r0, [pc, #40]	@ (800e10c <pbuf_pool_is_empty+0x50>)
 800e0e4:	f7fe fe5c 	bl	800cda0 <tcpip_try_callback>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d008      	beq.n	800e100 <pbuf_pool_is_empty+0x44>
 800e0ee:	f00a fa11 	bl	8018514 <sys_arch_protect>
 800e0f2:	6078      	str	r0, [r7, #4]
 800e0f4:	4b04      	ldr	r3, [pc, #16]	@ (800e108 <pbuf_pool_is_empty+0x4c>)
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	701a      	strb	r2, [r3, #0]
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f00a fa18 	bl	8018530 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e100:	bf00      	nop
 800e102:	3708      	adds	r7, #8
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}
 800e108:	2000fe7d 	.word	0x2000fe7d
 800e10c:	0800e0a9 	.word	0x0800e0a9

0800e110 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e110:	b480      	push	{r7}
 800e112:	b085      	sub	sp, #20
 800e114:	af00      	add	r7, sp, #0
 800e116:	60f8      	str	r0, [r7, #12]
 800e118:	60b9      	str	r1, [r7, #8]
 800e11a:	4611      	mov	r1, r2
 800e11c:	461a      	mov	r2, r3
 800e11e:	460b      	mov	r3, r1
 800e120:	80fb      	strh	r3, [r7, #6]
 800e122:	4613      	mov	r3, r2
 800e124:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	2200      	movs	r2, #0
 800e12a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	68ba      	ldr	r2, [r7, #8]
 800e130:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	88fa      	ldrh	r2, [r7, #6]
 800e136:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	88ba      	ldrh	r2, [r7, #4]
 800e13c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e13e:	8b3b      	ldrh	r3, [r7, #24]
 800e140:	b2da      	uxtb	r2, r3
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	7f3a      	ldrb	r2, [r7, #28]
 800e14a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2201      	movs	r2, #1
 800e150:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	2200      	movs	r2, #0
 800e156:	73da      	strb	r2, [r3, #15]
}
 800e158:	bf00      	nop
 800e15a:	3714      	adds	r7, #20
 800e15c:	46bd      	mov	sp, r7
 800e15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e162:	4770      	bx	lr

0800e164 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b08c      	sub	sp, #48	@ 0x30
 800e168:	af02      	add	r7, sp, #8
 800e16a:	4603      	mov	r3, r0
 800e16c:	71fb      	strb	r3, [r7, #7]
 800e16e:	460b      	mov	r3, r1
 800e170:	80bb      	strh	r3, [r7, #4]
 800e172:	4613      	mov	r3, r2
 800e174:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e176:	79fb      	ldrb	r3, [r7, #7]
 800e178:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e17a:	887b      	ldrh	r3, [r7, #2]
 800e17c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800e180:	d07f      	beq.n	800e282 <pbuf_alloc+0x11e>
 800e182:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800e186:	f300 80c8 	bgt.w	800e31a <pbuf_alloc+0x1b6>
 800e18a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800e18e:	d010      	beq.n	800e1b2 <pbuf_alloc+0x4e>
 800e190:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800e194:	f300 80c1 	bgt.w	800e31a <pbuf_alloc+0x1b6>
 800e198:	2b01      	cmp	r3, #1
 800e19a:	d002      	beq.n	800e1a2 <pbuf_alloc+0x3e>
 800e19c:	2b41      	cmp	r3, #65	@ 0x41
 800e19e:	f040 80bc 	bne.w	800e31a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e1a2:	887a      	ldrh	r2, [r7, #2]
 800e1a4:	88bb      	ldrh	r3, [r7, #4]
 800e1a6:	4619      	mov	r1, r3
 800e1a8:	2000      	movs	r0, #0
 800e1aa:	f000 f8d1 	bl	800e350 <pbuf_alloc_reference>
 800e1ae:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800e1b0:	e0bd      	b.n	800e32e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e1ba:	88bb      	ldrh	r3, [r7, #4]
 800e1bc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e1be:	200c      	movs	r0, #12
 800e1c0:	f7ff fb62 	bl	800d888 <memp_malloc>
 800e1c4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d109      	bne.n	800e1e0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e1cc:	f7ff ff76 	bl	800e0bc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d002      	beq.n	800e1dc <pbuf_alloc+0x78>
            pbuf_free(p);
 800e1d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e1d8:	f000 fada 	bl	800e790 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e1dc:	2300      	movs	r3, #0
 800e1de:	e0a7      	b.n	800e330 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e1e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e1e2:	3303      	adds	r3, #3
 800e1e4:	b29b      	uxth	r3, r3
 800e1e6:	f023 0303 	bic.w	r3, r3, #3
 800e1ea:	b29b      	uxth	r3, r3
 800e1ec:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800e1f0:	b29b      	uxth	r3, r3
 800e1f2:	8b7a      	ldrh	r2, [r7, #26]
 800e1f4:	4293      	cmp	r3, r2
 800e1f6:	bf28      	it	cs
 800e1f8:	4613      	movcs	r3, r2
 800e1fa:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e1fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e1fe:	3310      	adds	r3, #16
 800e200:	693a      	ldr	r2, [r7, #16]
 800e202:	4413      	add	r3, r2
 800e204:	3303      	adds	r3, #3
 800e206:	f023 0303 	bic.w	r3, r3, #3
 800e20a:	4618      	mov	r0, r3
 800e20c:	89f9      	ldrh	r1, [r7, #14]
 800e20e:	8b7a      	ldrh	r2, [r7, #26]
 800e210:	2300      	movs	r3, #0
 800e212:	9301      	str	r3, [sp, #4]
 800e214:	887b      	ldrh	r3, [r7, #2]
 800e216:	9300      	str	r3, [sp, #0]
 800e218:	460b      	mov	r3, r1
 800e21a:	4601      	mov	r1, r0
 800e21c:	6938      	ldr	r0, [r7, #16]
 800e21e:	f7ff ff77 	bl	800e110 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	685b      	ldr	r3, [r3, #4]
 800e226:	f003 0303 	and.w	r3, r3, #3
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d006      	beq.n	800e23c <pbuf_alloc+0xd8>
 800e22e:	4b42      	ldr	r3, [pc, #264]	@ (800e338 <pbuf_alloc+0x1d4>)
 800e230:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e234:	4941      	ldr	r1, [pc, #260]	@ (800e33c <pbuf_alloc+0x1d8>)
 800e236:	4842      	ldr	r0, [pc, #264]	@ (800e340 <pbuf_alloc+0x1dc>)
 800e238:	f017 f946 	bl	80254c8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e23c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e23e:	3303      	adds	r3, #3
 800e240:	f023 0303 	bic.w	r3, r3, #3
 800e244:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800e248:	d106      	bne.n	800e258 <pbuf_alloc+0xf4>
 800e24a:	4b3b      	ldr	r3, [pc, #236]	@ (800e338 <pbuf_alloc+0x1d4>)
 800e24c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800e250:	493c      	ldr	r1, [pc, #240]	@ (800e344 <pbuf_alloc+0x1e0>)
 800e252:	483b      	ldr	r0, [pc, #236]	@ (800e340 <pbuf_alloc+0x1dc>)
 800e254:	f017 f938 	bl	80254c8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d102      	bne.n	800e264 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e25e:	693b      	ldr	r3, [r7, #16]
 800e260:	627b      	str	r3, [r7, #36]	@ 0x24
 800e262:	e002      	b.n	800e26a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e264:	69fb      	ldr	r3, [r7, #28]
 800e266:	693a      	ldr	r2, [r7, #16]
 800e268:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e26a:	693b      	ldr	r3, [r7, #16]
 800e26c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e26e:	8b7a      	ldrh	r2, [r7, #26]
 800e270:	89fb      	ldrh	r3, [r7, #14]
 800e272:	1ad3      	subs	r3, r2, r3
 800e274:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e276:	2300      	movs	r3, #0
 800e278:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800e27a:	8b7b      	ldrh	r3, [r7, #26]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d19e      	bne.n	800e1be <pbuf_alloc+0x5a>
      break;
 800e280:	e055      	b.n	800e32e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e282:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e284:	3303      	adds	r3, #3
 800e286:	b29b      	uxth	r3, r3
 800e288:	f023 0303 	bic.w	r3, r3, #3
 800e28c:	b29a      	uxth	r2, r3
 800e28e:	88bb      	ldrh	r3, [r7, #4]
 800e290:	3303      	adds	r3, #3
 800e292:	b29b      	uxth	r3, r3
 800e294:	f023 0303 	bic.w	r3, r3, #3
 800e298:	b29b      	uxth	r3, r3
 800e29a:	4413      	add	r3, r2
 800e29c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e29e:	8b3b      	ldrh	r3, [r7, #24]
 800e2a0:	3310      	adds	r3, #16
 800e2a2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e2a4:	8b3a      	ldrh	r2, [r7, #24]
 800e2a6:	88bb      	ldrh	r3, [r7, #4]
 800e2a8:	3303      	adds	r3, #3
 800e2aa:	f023 0303 	bic.w	r3, r3, #3
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	d306      	bcc.n	800e2c0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e2b2:	8afa      	ldrh	r2, [r7, #22]
 800e2b4:	88bb      	ldrh	r3, [r7, #4]
 800e2b6:	3303      	adds	r3, #3
 800e2b8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d201      	bcs.n	800e2c4 <pbuf_alloc+0x160>
        return NULL;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	e035      	b.n	800e330 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e2c4:	8afb      	ldrh	r3, [r7, #22]
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7ff f93a 	bl	800d540 <mem_malloc>
 800e2cc:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800e2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d101      	bne.n	800e2d8 <pbuf_alloc+0x174>
        return NULL;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	e02b      	b.n	800e330 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e2d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e2da:	3310      	adds	r3, #16
 800e2dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2de:	4413      	add	r3, r2
 800e2e0:	3303      	adds	r3, #3
 800e2e2:	f023 0303 	bic.w	r3, r3, #3
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	88b9      	ldrh	r1, [r7, #4]
 800e2ea:	88ba      	ldrh	r2, [r7, #4]
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	9301      	str	r3, [sp, #4]
 800e2f0:	887b      	ldrh	r3, [r7, #2]
 800e2f2:	9300      	str	r3, [sp, #0]
 800e2f4:	460b      	mov	r3, r1
 800e2f6:	4601      	mov	r1, r0
 800e2f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e2fa:	f7ff ff09 	bl	800e110 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e300:	685b      	ldr	r3, [r3, #4]
 800e302:	f003 0303 	and.w	r3, r3, #3
 800e306:	2b00      	cmp	r3, #0
 800e308:	d010      	beq.n	800e32c <pbuf_alloc+0x1c8>
 800e30a:	4b0b      	ldr	r3, [pc, #44]	@ (800e338 <pbuf_alloc+0x1d4>)
 800e30c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800e310:	490d      	ldr	r1, [pc, #52]	@ (800e348 <pbuf_alloc+0x1e4>)
 800e312:	480b      	ldr	r0, [pc, #44]	@ (800e340 <pbuf_alloc+0x1dc>)
 800e314:	f017 f8d8 	bl	80254c8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e318:	e008      	b.n	800e32c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e31a:	4b07      	ldr	r3, [pc, #28]	@ (800e338 <pbuf_alloc+0x1d4>)
 800e31c:	f240 1227 	movw	r2, #295	@ 0x127
 800e320:	490a      	ldr	r1, [pc, #40]	@ (800e34c <pbuf_alloc+0x1e8>)
 800e322:	4807      	ldr	r0, [pc, #28]	@ (800e340 <pbuf_alloc+0x1dc>)
 800e324:	f017 f8d0 	bl	80254c8 <iprintf>
      return NULL;
 800e328:	2300      	movs	r3, #0
 800e32a:	e001      	b.n	800e330 <pbuf_alloc+0x1cc>
      break;
 800e32c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e330:	4618      	mov	r0, r3
 800e332:	3728      	adds	r7, #40	@ 0x28
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	08027cd0 	.word	0x08027cd0
 800e33c:	08027d00 	.word	0x08027d00
 800e340:	08027d30 	.word	0x08027d30
 800e344:	08027d58 	.word	0x08027d58
 800e348:	08027d8c 	.word	0x08027d8c
 800e34c:	08027db8 	.word	0x08027db8

0800e350 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b086      	sub	sp, #24
 800e354:	af02      	add	r7, sp, #8
 800e356:	6078      	str	r0, [r7, #4]
 800e358:	460b      	mov	r3, r1
 800e35a:	807b      	strh	r3, [r7, #2]
 800e35c:	4613      	mov	r3, r2
 800e35e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e360:	883b      	ldrh	r3, [r7, #0]
 800e362:	2b41      	cmp	r3, #65	@ 0x41
 800e364:	d009      	beq.n	800e37a <pbuf_alloc_reference+0x2a>
 800e366:	883b      	ldrh	r3, [r7, #0]
 800e368:	2b01      	cmp	r3, #1
 800e36a:	d006      	beq.n	800e37a <pbuf_alloc_reference+0x2a>
 800e36c:	4b0f      	ldr	r3, [pc, #60]	@ (800e3ac <pbuf_alloc_reference+0x5c>)
 800e36e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800e372:	490f      	ldr	r1, [pc, #60]	@ (800e3b0 <pbuf_alloc_reference+0x60>)
 800e374:	480f      	ldr	r0, [pc, #60]	@ (800e3b4 <pbuf_alloc_reference+0x64>)
 800e376:	f017 f8a7 	bl	80254c8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e37a:	200b      	movs	r0, #11
 800e37c:	f7ff fa84 	bl	800d888 <memp_malloc>
 800e380:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d101      	bne.n	800e38c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e388:	2300      	movs	r3, #0
 800e38a:	e00b      	b.n	800e3a4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e38c:	8879      	ldrh	r1, [r7, #2]
 800e38e:	887a      	ldrh	r2, [r7, #2]
 800e390:	2300      	movs	r3, #0
 800e392:	9301      	str	r3, [sp, #4]
 800e394:	883b      	ldrh	r3, [r7, #0]
 800e396:	9300      	str	r3, [sp, #0]
 800e398:	460b      	mov	r3, r1
 800e39a:	6879      	ldr	r1, [r7, #4]
 800e39c:	68f8      	ldr	r0, [r7, #12]
 800e39e:	f7ff feb7 	bl	800e110 <pbuf_init_alloced_pbuf>
  return p;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3710      	adds	r7, #16
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}
 800e3ac:	08027cd0 	.word	0x08027cd0
 800e3b0:	08027dd4 	.word	0x08027dd4
 800e3b4:	08027d30 	.word	0x08027d30

0800e3b8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b088      	sub	sp, #32
 800e3bc:	af02      	add	r7, sp, #8
 800e3be:	607b      	str	r3, [r7, #4]
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	73fb      	strb	r3, [r7, #15]
 800e3c4:	460b      	mov	r3, r1
 800e3c6:	81bb      	strh	r3, [r7, #12]
 800e3c8:	4613      	mov	r3, r2
 800e3ca:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e3cc:	7bfb      	ldrb	r3, [r7, #15]
 800e3ce:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e3d0:	8a7b      	ldrh	r3, [r7, #18]
 800e3d2:	3303      	adds	r3, #3
 800e3d4:	f023 0203 	bic.w	r2, r3, #3
 800e3d8:	89bb      	ldrh	r3, [r7, #12]
 800e3da:	441a      	add	r2, r3
 800e3dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	d901      	bls.n	800e3e6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	e018      	b.n	800e418 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e3e6:	6a3b      	ldr	r3, [r7, #32]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d007      	beq.n	800e3fc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e3ec:	8a7b      	ldrh	r3, [r7, #18]
 800e3ee:	3303      	adds	r3, #3
 800e3f0:	f023 0303 	bic.w	r3, r3, #3
 800e3f4:	6a3a      	ldr	r2, [r7, #32]
 800e3f6:	4413      	add	r3, r2
 800e3f8:	617b      	str	r3, [r7, #20]
 800e3fa:	e001      	b.n	800e400 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	89b9      	ldrh	r1, [r7, #12]
 800e404:	89ba      	ldrh	r2, [r7, #12]
 800e406:	2302      	movs	r3, #2
 800e408:	9301      	str	r3, [sp, #4]
 800e40a:	897b      	ldrh	r3, [r7, #10]
 800e40c:	9300      	str	r3, [sp, #0]
 800e40e:	460b      	mov	r3, r1
 800e410:	6979      	ldr	r1, [r7, #20]
 800e412:	f7ff fe7d 	bl	800e110 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e416:	687b      	ldr	r3, [r7, #4]
}
 800e418:	4618      	mov	r0, r3
 800e41a:	3718      	adds	r7, #24
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}

0800e420 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b084      	sub	sp, #16
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
 800e428:	460b      	mov	r3, r1
 800e42a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d106      	bne.n	800e440 <pbuf_realloc+0x20>
 800e432:	4b3a      	ldr	r3, [pc, #232]	@ (800e51c <pbuf_realloc+0xfc>)
 800e434:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800e438:	4939      	ldr	r1, [pc, #228]	@ (800e520 <pbuf_realloc+0x100>)
 800e43a:	483a      	ldr	r0, [pc, #232]	@ (800e524 <pbuf_realloc+0x104>)
 800e43c:	f017 f844 	bl	80254c8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	891b      	ldrh	r3, [r3, #8]
 800e444:	887a      	ldrh	r2, [r7, #2]
 800e446:	429a      	cmp	r2, r3
 800e448:	d263      	bcs.n	800e512 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	891a      	ldrh	r2, [r3, #8]
 800e44e:	887b      	ldrh	r3, [r7, #2]
 800e450:	1ad3      	subs	r3, r2, r3
 800e452:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e454:	887b      	ldrh	r3, [r7, #2]
 800e456:	817b      	strh	r3, [r7, #10]
  q = p;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e45c:	e018      	b.n	800e490 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	895b      	ldrh	r3, [r3, #10]
 800e462:	897a      	ldrh	r2, [r7, #10]
 800e464:	1ad3      	subs	r3, r2, r3
 800e466:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	891a      	ldrh	r2, [r3, #8]
 800e46c:	893b      	ldrh	r3, [r7, #8]
 800e46e:	1ad3      	subs	r3, r2, r3
 800e470:	b29a      	uxth	r2, r3
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d106      	bne.n	800e490 <pbuf_realloc+0x70>
 800e482:	4b26      	ldr	r3, [pc, #152]	@ (800e51c <pbuf_realloc+0xfc>)
 800e484:	f240 12af 	movw	r2, #431	@ 0x1af
 800e488:	4927      	ldr	r1, [pc, #156]	@ (800e528 <pbuf_realloc+0x108>)
 800e48a:	4826      	ldr	r0, [pc, #152]	@ (800e524 <pbuf_realloc+0x104>)
 800e48c:	f017 f81c 	bl	80254c8 <iprintf>
  while (rem_len > q->len) {
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	895b      	ldrh	r3, [r3, #10]
 800e494:	897a      	ldrh	r2, [r7, #10]
 800e496:	429a      	cmp	r2, r3
 800e498:	d8e1      	bhi.n	800e45e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	7b1b      	ldrb	r3, [r3, #12]
 800e49e:	f003 030f 	and.w	r3, r3, #15
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d121      	bne.n	800e4ea <pbuf_realloc+0xca>
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	895b      	ldrh	r3, [r3, #10]
 800e4aa:	897a      	ldrh	r2, [r7, #10]
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	d01c      	beq.n	800e4ea <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	7b5b      	ldrb	r3, [r3, #13]
 800e4b4:	f003 0302 	and.w	r3, r3, #2
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d116      	bne.n	800e4ea <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	685a      	ldr	r2, [r3, #4]
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	1ad3      	subs	r3, r2, r3
 800e4c4:	b29a      	uxth	r2, r3
 800e4c6:	897b      	ldrh	r3, [r7, #10]
 800e4c8:	4413      	add	r3, r2
 800e4ca:	b29b      	uxth	r3, r3
 800e4cc:	4619      	mov	r1, r3
 800e4ce:	68f8      	ldr	r0, [r7, #12]
 800e4d0:	f7fe ff2c 	bl	800d32c <mem_trim>
 800e4d4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d106      	bne.n	800e4ea <pbuf_realloc+0xca>
 800e4dc:	4b0f      	ldr	r3, [pc, #60]	@ (800e51c <pbuf_realloc+0xfc>)
 800e4de:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800e4e2:	4912      	ldr	r1, [pc, #72]	@ (800e52c <pbuf_realloc+0x10c>)
 800e4e4:	480f      	ldr	r0, [pc, #60]	@ (800e524 <pbuf_realloc+0x104>)
 800e4e6:	f016 ffef 	bl	80254c8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	897a      	ldrh	r2, [r7, #10]
 800e4ee:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	895a      	ldrh	r2, [r3, #10]
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d004      	beq.n	800e50a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	4618      	mov	r0, r3
 800e506:	f000 f943 	bl	800e790 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	2200      	movs	r2, #0
 800e50e:	601a      	str	r2, [r3, #0]
 800e510:	e000      	b.n	800e514 <pbuf_realloc+0xf4>
    return;
 800e512:	bf00      	nop

}
 800e514:	3710      	adds	r7, #16
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}
 800e51a:	bf00      	nop
 800e51c:	08027cd0 	.word	0x08027cd0
 800e520:	08027de8 	.word	0x08027de8
 800e524:	08027d30 	.word	0x08027d30
 800e528:	08027e00 	.word	0x08027e00
 800e52c:	08027e18 	.word	0x08027e18

0800e530 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b086      	sub	sp, #24
 800e534:	af00      	add	r7, sp, #0
 800e536:	60f8      	str	r0, [r7, #12]
 800e538:	60b9      	str	r1, [r7, #8]
 800e53a:	4613      	mov	r3, r2
 800e53c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d106      	bne.n	800e552 <pbuf_add_header_impl+0x22>
 800e544:	4b2b      	ldr	r3, [pc, #172]	@ (800e5f4 <pbuf_add_header_impl+0xc4>)
 800e546:	f240 12df 	movw	r2, #479	@ 0x1df
 800e54a:	492b      	ldr	r1, [pc, #172]	@ (800e5f8 <pbuf_add_header_impl+0xc8>)
 800e54c:	482b      	ldr	r0, [pc, #172]	@ (800e5fc <pbuf_add_header_impl+0xcc>)
 800e54e:	f016 ffbb 	bl	80254c8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d003      	beq.n	800e560 <pbuf_add_header_impl+0x30>
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e55e:	d301      	bcc.n	800e564 <pbuf_add_header_impl+0x34>
    return 1;
 800e560:	2301      	movs	r3, #1
 800e562:	e043      	b.n	800e5ec <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d101      	bne.n	800e56e <pbuf_add_header_impl+0x3e>
    return 0;
 800e56a:	2300      	movs	r3, #0
 800e56c:	e03e      	b.n	800e5ec <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e56e:	68bb      	ldr	r3, [r7, #8]
 800e570:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	891a      	ldrh	r2, [r3, #8]
 800e576:	8a7b      	ldrh	r3, [r7, #18]
 800e578:	4413      	add	r3, r2
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	8a7a      	ldrh	r2, [r7, #18]
 800e57e:	429a      	cmp	r2, r3
 800e580:	d901      	bls.n	800e586 <pbuf_add_header_impl+0x56>
    return 1;
 800e582:	2301      	movs	r3, #1
 800e584:	e032      	b.n	800e5ec <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	7b1b      	ldrb	r3, [r3, #12]
 800e58a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e58c:	8a3b      	ldrh	r3, [r7, #16]
 800e58e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e592:	2b00      	cmp	r3, #0
 800e594:	d00c      	beq.n	800e5b0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	685a      	ldr	r2, [r3, #4]
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	425b      	negs	r3, r3
 800e59e:	4413      	add	r3, r2
 800e5a0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	3310      	adds	r3, #16
 800e5a6:	697a      	ldr	r2, [r7, #20]
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d20d      	bcs.n	800e5c8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	e01d      	b.n	800e5ec <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e5b0:	79fb      	ldrb	r3, [r7, #7]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d006      	beq.n	800e5c4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	685a      	ldr	r2, [r3, #4]
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	425b      	negs	r3, r3
 800e5be:	4413      	add	r3, r2
 800e5c0:	617b      	str	r3, [r7, #20]
 800e5c2:	e001      	b.n	800e5c8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e5c4:	2301      	movs	r3, #1
 800e5c6:	e011      	b.n	800e5ec <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	697a      	ldr	r2, [r7, #20]
 800e5cc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	895a      	ldrh	r2, [r3, #10]
 800e5d2:	8a7b      	ldrh	r3, [r7, #18]
 800e5d4:	4413      	add	r3, r2
 800e5d6:	b29a      	uxth	r2, r3
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	891a      	ldrh	r2, [r3, #8]
 800e5e0:	8a7b      	ldrh	r3, [r7, #18]
 800e5e2:	4413      	add	r3, r2
 800e5e4:	b29a      	uxth	r2, r3
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	811a      	strh	r2, [r3, #8]


  return 0;
 800e5ea:	2300      	movs	r3, #0
}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	3718      	adds	r7, #24
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}
 800e5f4:	08027cd0 	.word	0x08027cd0
 800e5f8:	08027e34 	.word	0x08027e34
 800e5fc:	08027d30 	.word	0x08027d30

0800e600 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b082      	sub	sp, #8
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
 800e608:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e60a:	2200      	movs	r2, #0
 800e60c:	6839      	ldr	r1, [r7, #0]
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f7ff ff8e 	bl	800e530 <pbuf_add_header_impl>
 800e614:	4603      	mov	r3, r0
}
 800e616:	4618      	mov	r0, r3
 800e618:	3708      	adds	r7, #8
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}
	...

0800e620 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b084      	sub	sp, #16
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
 800e628:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d106      	bne.n	800e63e <pbuf_remove_header+0x1e>
 800e630:	4b20      	ldr	r3, [pc, #128]	@ (800e6b4 <pbuf_remove_header+0x94>)
 800e632:	f240 224b 	movw	r2, #587	@ 0x24b
 800e636:	4920      	ldr	r1, [pc, #128]	@ (800e6b8 <pbuf_remove_header+0x98>)
 800e638:	4820      	ldr	r0, [pc, #128]	@ (800e6bc <pbuf_remove_header+0x9c>)
 800e63a:	f016 ff45 	bl	80254c8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d003      	beq.n	800e64c <pbuf_remove_header+0x2c>
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e64a:	d301      	bcc.n	800e650 <pbuf_remove_header+0x30>
    return 1;
 800e64c:	2301      	movs	r3, #1
 800e64e:	e02c      	b.n	800e6aa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d101      	bne.n	800e65a <pbuf_remove_header+0x3a>
    return 0;
 800e656:	2300      	movs	r3, #0
 800e658:	e027      	b.n	800e6aa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	895b      	ldrh	r3, [r3, #10]
 800e662:	89fa      	ldrh	r2, [r7, #14]
 800e664:	429a      	cmp	r2, r3
 800e666:	d908      	bls.n	800e67a <pbuf_remove_header+0x5a>
 800e668:	4b12      	ldr	r3, [pc, #72]	@ (800e6b4 <pbuf_remove_header+0x94>)
 800e66a:	f240 2255 	movw	r2, #597	@ 0x255
 800e66e:	4914      	ldr	r1, [pc, #80]	@ (800e6c0 <pbuf_remove_header+0xa0>)
 800e670:	4812      	ldr	r0, [pc, #72]	@ (800e6bc <pbuf_remove_header+0x9c>)
 800e672:	f016 ff29 	bl	80254c8 <iprintf>
 800e676:	2301      	movs	r3, #1
 800e678:	e017      	b.n	800e6aa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	685b      	ldr	r3, [r3, #4]
 800e67e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	685a      	ldr	r2, [r3, #4]
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	441a      	add	r2, r3
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	895a      	ldrh	r2, [r3, #10]
 800e690:	89fb      	ldrh	r3, [r7, #14]
 800e692:	1ad3      	subs	r3, r2, r3
 800e694:	b29a      	uxth	r2, r3
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	891a      	ldrh	r2, [r3, #8]
 800e69e:	89fb      	ldrh	r3, [r7, #14]
 800e6a0:	1ad3      	subs	r3, r2, r3
 800e6a2:	b29a      	uxth	r2, r3
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e6a8:	2300      	movs	r3, #0
}
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	3710      	adds	r7, #16
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	bf00      	nop
 800e6b4:	08027cd0 	.word	0x08027cd0
 800e6b8:	08027e34 	.word	0x08027e34
 800e6bc:	08027d30 	.word	0x08027d30
 800e6c0:	08027e40 	.word	0x08027e40

0800e6c4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
 800e6cc:	460b      	mov	r3, r1
 800e6ce:	807b      	strh	r3, [r7, #2]
 800e6d0:	4613      	mov	r3, r2
 800e6d2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e6d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	da08      	bge.n	800e6ee <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e6dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e6e0:	425b      	negs	r3, r3
 800e6e2:	4619      	mov	r1, r3
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f7ff ff9b 	bl	800e620 <pbuf_remove_header>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	e007      	b.n	800e6fe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e6ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e6f2:	787a      	ldrb	r2, [r7, #1]
 800e6f4:	4619      	mov	r1, r3
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f7ff ff1a 	bl	800e530 <pbuf_add_header_impl>
 800e6fc:	4603      	mov	r3, r0
  }
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	3708      	adds	r7, #8
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}

0800e706 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e706:	b580      	push	{r7, lr}
 800e708:	b082      	sub	sp, #8
 800e70a:	af00      	add	r7, sp, #0
 800e70c:	6078      	str	r0, [r7, #4]
 800e70e:	460b      	mov	r3, r1
 800e710:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e712:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e716:	2201      	movs	r2, #1
 800e718:	4619      	mov	r1, r3
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f7ff ffd2 	bl	800e6c4 <pbuf_header_impl>
 800e720:	4603      	mov	r3, r0
}
 800e722:	4618      	mov	r0, r3
 800e724:	3708      	adds	r7, #8
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}

0800e72a <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 800e72a:	b580      	push	{r7, lr}
 800e72c:	b086      	sub	sp, #24
 800e72e:	af00      	add	r7, sp, #0
 800e730:	6078      	str	r0, [r7, #4]
 800e732:	460b      	mov	r3, r1
 800e734:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 800e73a:	887b      	ldrh	r3, [r7, #2]
 800e73c:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800e73e:	e01c      	b.n	800e77a <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	895b      	ldrh	r3, [r3, #10]
 800e744:	8a7a      	ldrh	r2, [r7, #18]
 800e746:	429a      	cmp	r2, r3
 800e748:	d310      	bcc.n	800e76c <pbuf_free_header+0x42>
      struct pbuf *f = p;
 800e74a:	697b      	ldr	r3, [r7, #20]
 800e74c:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 800e74e:	697b      	ldr	r3, [r7, #20]
 800e750:	895b      	ldrh	r3, [r3, #10]
 800e752:	8a7a      	ldrh	r2, [r7, #18]
 800e754:	1ad3      	subs	r3, r2, r3
 800e756:	827b      	strh	r3, [r7, #18]
      p = p->next;
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	617b      	str	r3, [r7, #20]
      f->next = 0;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	2200      	movs	r2, #0
 800e762:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 800e764:	68f8      	ldr	r0, [r7, #12]
 800e766:	f000 f813 	bl	800e790 <pbuf_free>
 800e76a:	e006      	b.n	800e77a <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 800e76c:	8a7b      	ldrh	r3, [r7, #18]
 800e76e:	4619      	mov	r1, r3
 800e770:	6978      	ldr	r0, [r7, #20]
 800e772:	f7ff ff55 	bl	800e620 <pbuf_remove_header>
      free_left = 0;
 800e776:	2300      	movs	r3, #0
 800e778:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800e77a:	8a7b      	ldrh	r3, [r7, #18]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d002      	beq.n	800e786 <pbuf_free_header+0x5c>
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d1dc      	bne.n	800e740 <pbuf_free_header+0x16>
    }
  }
  return p;
 800e786:	697b      	ldr	r3, [r7, #20]
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3718      	adds	r7, #24
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b088      	sub	sp, #32
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d10b      	bne.n	800e7b6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d106      	bne.n	800e7b2 <pbuf_free+0x22>
 800e7a4:	4b3b      	ldr	r3, [pc, #236]	@ (800e894 <pbuf_free+0x104>)
 800e7a6:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800e7aa:	493b      	ldr	r1, [pc, #236]	@ (800e898 <pbuf_free+0x108>)
 800e7ac:	483b      	ldr	r0, [pc, #236]	@ (800e89c <pbuf_free+0x10c>)
 800e7ae:	f016 fe8b 	bl	80254c8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	e069      	b.n	800e88a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e7ba:	e062      	b.n	800e882 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e7bc:	f009 feaa 	bl	8018514 <sys_arch_protect>
 800e7c0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	7b9b      	ldrb	r3, [r3, #14]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d106      	bne.n	800e7d8 <pbuf_free+0x48>
 800e7ca:	4b32      	ldr	r3, [pc, #200]	@ (800e894 <pbuf_free+0x104>)
 800e7cc:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800e7d0:	4933      	ldr	r1, [pc, #204]	@ (800e8a0 <pbuf_free+0x110>)
 800e7d2:	4832      	ldr	r0, [pc, #200]	@ (800e89c <pbuf_free+0x10c>)
 800e7d4:	f016 fe78 	bl	80254c8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	7b9b      	ldrb	r3, [r3, #14]
 800e7dc:	3b01      	subs	r3, #1
 800e7de:	b2da      	uxtb	r2, r3
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	739a      	strb	r2, [r3, #14]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	7b9b      	ldrb	r3, [r3, #14]
 800e7e8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e7ea:	69b8      	ldr	r0, [r7, #24]
 800e7ec:	f009 fea0 	bl	8018530 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e7f0:	7dfb      	ldrb	r3, [r7, #23]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d143      	bne.n	800e87e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	7b1b      	ldrb	r3, [r3, #12]
 800e800:	f003 030f 	and.w	r3, r3, #15
 800e804:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	7b5b      	ldrb	r3, [r3, #13]
 800e80a:	f003 0302 	and.w	r3, r3, #2
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d011      	beq.n	800e836 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	691b      	ldr	r3, [r3, #16]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d106      	bne.n	800e82c <pbuf_free+0x9c>
 800e81e:	4b1d      	ldr	r3, [pc, #116]	@ (800e894 <pbuf_free+0x104>)
 800e820:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800e824:	491f      	ldr	r1, [pc, #124]	@ (800e8a4 <pbuf_free+0x114>)
 800e826:	481d      	ldr	r0, [pc, #116]	@ (800e89c <pbuf_free+0x10c>)
 800e828:	f016 fe4e 	bl	80254c8 <iprintf>
        pc->custom_free_function(p);
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	691b      	ldr	r3, [r3, #16]
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	4798      	blx	r3
 800e834:	e01d      	b.n	800e872 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e836:	7bfb      	ldrb	r3, [r7, #15]
 800e838:	2b02      	cmp	r3, #2
 800e83a:	d104      	bne.n	800e846 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e83c:	6879      	ldr	r1, [r7, #4]
 800e83e:	200c      	movs	r0, #12
 800e840:	f7ff f898 	bl	800d974 <memp_free>
 800e844:	e015      	b.n	800e872 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e846:	7bfb      	ldrb	r3, [r7, #15]
 800e848:	2b01      	cmp	r3, #1
 800e84a:	d104      	bne.n	800e856 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e84c:	6879      	ldr	r1, [r7, #4]
 800e84e:	200b      	movs	r0, #11
 800e850:	f7ff f890 	bl	800d974 <memp_free>
 800e854:	e00d      	b.n	800e872 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e856:	7bfb      	ldrb	r3, [r7, #15]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d103      	bne.n	800e864 <pbuf_free+0xd4>
          mem_free(p);
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	f7fe fcd5 	bl	800d20c <mem_free>
 800e862:	e006      	b.n	800e872 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e864:	4b0b      	ldr	r3, [pc, #44]	@ (800e894 <pbuf_free+0x104>)
 800e866:	f240 320f 	movw	r2, #783	@ 0x30f
 800e86a:	490f      	ldr	r1, [pc, #60]	@ (800e8a8 <pbuf_free+0x118>)
 800e86c:	480b      	ldr	r0, [pc, #44]	@ (800e89c <pbuf_free+0x10c>)
 800e86e:	f016 fe2b 	bl	80254c8 <iprintf>
        }
      }
      count++;
 800e872:	7ffb      	ldrb	r3, [r7, #31]
 800e874:	3301      	adds	r3, #1
 800e876:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	607b      	str	r3, [r7, #4]
 800e87c:	e001      	b.n	800e882 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e87e:	2300      	movs	r3, #0
 800e880:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d199      	bne.n	800e7bc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e888:	7ffb      	ldrb	r3, [r7, #31]
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	3720      	adds	r7, #32
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}
 800e892:	bf00      	nop
 800e894:	08027cd0 	.word	0x08027cd0
 800e898:	08027e34 	.word	0x08027e34
 800e89c:	08027d30 	.word	0x08027d30
 800e8a0:	08027e60 	.word	0x08027e60
 800e8a4:	08027e78 	.word	0x08027e78
 800e8a8:	08027e9c 	.word	0x08027e9c

0800e8ac <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e8ac:	b480      	push	{r7}
 800e8ae:	b085      	sub	sp, #20
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e8b8:	e005      	b.n	800e8c6 <pbuf_clen+0x1a>
    ++len;
 800e8ba:	89fb      	ldrh	r3, [r7, #14]
 800e8bc:	3301      	adds	r3, #1
 800e8be:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d1f6      	bne.n	800e8ba <pbuf_clen+0xe>
  }
  return len;
 800e8cc:	89fb      	ldrh	r3, [r7, #14]
}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	3714      	adds	r7, #20
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d8:	4770      	bx	lr
	...

0800e8dc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b084      	sub	sp, #16
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d016      	beq.n	800e918 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e8ea:	f009 fe13 	bl	8018514 <sys_arch_protect>
 800e8ee:	60f8      	str	r0, [r7, #12]
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	7b9b      	ldrb	r3, [r3, #14]
 800e8f4:	3301      	adds	r3, #1
 800e8f6:	b2da      	uxtb	r2, r3
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	739a      	strb	r2, [r3, #14]
 800e8fc:	68f8      	ldr	r0, [r7, #12]
 800e8fe:	f009 fe17 	bl	8018530 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	7b9b      	ldrb	r3, [r3, #14]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d106      	bne.n	800e918 <pbuf_ref+0x3c>
 800e90a:	4b05      	ldr	r3, [pc, #20]	@ (800e920 <pbuf_ref+0x44>)
 800e90c:	f240 3242 	movw	r2, #834	@ 0x342
 800e910:	4904      	ldr	r1, [pc, #16]	@ (800e924 <pbuf_ref+0x48>)
 800e912:	4805      	ldr	r0, [pc, #20]	@ (800e928 <pbuf_ref+0x4c>)
 800e914:	f016 fdd8 	bl	80254c8 <iprintf>
  }
}
 800e918:	bf00      	nop
 800e91a:	3710      	adds	r7, #16
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}
 800e920:	08027cd0 	.word	0x08027cd0
 800e924:	08027eb0 	.word	0x08027eb0
 800e928:	08027d30 	.word	0x08027d30

0800e92c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b084      	sub	sp, #16
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
 800e934:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d002      	beq.n	800e942 <pbuf_cat+0x16>
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d107      	bne.n	800e952 <pbuf_cat+0x26>
 800e942:	4b20      	ldr	r3, [pc, #128]	@ (800e9c4 <pbuf_cat+0x98>)
 800e944:	f240 3259 	movw	r2, #857	@ 0x359
 800e948:	491f      	ldr	r1, [pc, #124]	@ (800e9c8 <pbuf_cat+0x9c>)
 800e94a:	4820      	ldr	r0, [pc, #128]	@ (800e9cc <pbuf_cat+0xa0>)
 800e94c:	f016 fdbc 	bl	80254c8 <iprintf>
 800e950:	e034      	b.n	800e9bc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	60fb      	str	r3, [r7, #12]
 800e956:	e00a      	b.n	800e96e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	891a      	ldrh	r2, [r3, #8]
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	891b      	ldrh	r3, [r3, #8]
 800e960:	4413      	add	r3, r2
 800e962:	b29a      	uxth	r2, r3
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	60fb      	str	r3, [r7, #12]
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d1f0      	bne.n	800e958 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	891a      	ldrh	r2, [r3, #8]
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	895b      	ldrh	r3, [r3, #10]
 800e97e:	429a      	cmp	r2, r3
 800e980:	d006      	beq.n	800e990 <pbuf_cat+0x64>
 800e982:	4b10      	ldr	r3, [pc, #64]	@ (800e9c4 <pbuf_cat+0x98>)
 800e984:	f240 3262 	movw	r2, #866	@ 0x362
 800e988:	4911      	ldr	r1, [pc, #68]	@ (800e9d0 <pbuf_cat+0xa4>)
 800e98a:	4810      	ldr	r0, [pc, #64]	@ (800e9cc <pbuf_cat+0xa0>)
 800e98c:	f016 fd9c 	bl	80254c8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d006      	beq.n	800e9a6 <pbuf_cat+0x7a>
 800e998:	4b0a      	ldr	r3, [pc, #40]	@ (800e9c4 <pbuf_cat+0x98>)
 800e99a:	f240 3263 	movw	r2, #867	@ 0x363
 800e99e:	490d      	ldr	r1, [pc, #52]	@ (800e9d4 <pbuf_cat+0xa8>)
 800e9a0:	480a      	ldr	r0, [pc, #40]	@ (800e9cc <pbuf_cat+0xa0>)
 800e9a2:	f016 fd91 	bl	80254c8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	891a      	ldrh	r2, [r3, #8]
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	891b      	ldrh	r3, [r3, #8]
 800e9ae:	4413      	add	r3, r2
 800e9b0:	b29a      	uxth	r2, r3
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	683a      	ldr	r2, [r7, #0]
 800e9ba:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e9bc:	3710      	adds	r7, #16
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}
 800e9c2:	bf00      	nop
 800e9c4:	08027cd0 	.word	0x08027cd0
 800e9c8:	08027ec4 	.word	0x08027ec4
 800e9cc:	08027d30 	.word	0x08027d30
 800e9d0:	08027efc 	.word	0x08027efc
 800e9d4:	08027f2c 	.word	0x08027f2c

0800e9d8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b082      	sub	sp, #8
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800e9e2:	6839      	ldr	r1, [r7, #0]
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f7ff ffa1 	bl	800e92c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800e9ea:	6838      	ldr	r0, [r7, #0]
 800e9ec:	f7ff ff76 	bl	800e8dc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800e9f0:	bf00      	nop
 800e9f2:	3708      	adds	r7, #8
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}

0800e9f8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b086      	sub	sp, #24
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ea02:	2300      	movs	r3, #0
 800ea04:	617b      	str	r3, [r7, #20]
 800ea06:	2300      	movs	r3, #0
 800ea08:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d008      	beq.n	800ea22 <pbuf_copy+0x2a>
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d005      	beq.n	800ea22 <pbuf_copy+0x2a>
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	891a      	ldrh	r2, [r3, #8]
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	891b      	ldrh	r3, [r3, #8]
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	d209      	bcs.n	800ea36 <pbuf_copy+0x3e>
 800ea22:	4b57      	ldr	r3, [pc, #348]	@ (800eb80 <pbuf_copy+0x188>)
 800ea24:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800ea28:	4956      	ldr	r1, [pc, #344]	@ (800eb84 <pbuf_copy+0x18c>)
 800ea2a:	4857      	ldr	r0, [pc, #348]	@ (800eb88 <pbuf_copy+0x190>)
 800ea2c:	f016 fd4c 	bl	80254c8 <iprintf>
 800ea30:	f06f 030f 	mvn.w	r3, #15
 800ea34:	e09f      	b.n	800eb76 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	895b      	ldrh	r3, [r3, #10]
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	1ad2      	subs	r2, r2, r3
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	895b      	ldrh	r3, [r3, #10]
 800ea44:	4619      	mov	r1, r3
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	1acb      	subs	r3, r1, r3
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d306      	bcc.n	800ea5c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	895b      	ldrh	r3, [r3, #10]
 800ea52:	461a      	mov	r2, r3
 800ea54:	693b      	ldr	r3, [r7, #16]
 800ea56:	1ad3      	subs	r3, r2, r3
 800ea58:	60fb      	str	r3, [r7, #12]
 800ea5a:	e005      	b.n	800ea68 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	895b      	ldrh	r3, [r3, #10]
 800ea60:	461a      	mov	r2, r3
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	1ad3      	subs	r3, r2, r3
 800ea66:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	685a      	ldr	r2, [r3, #4]
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	18d0      	adds	r0, r2, r3
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	685a      	ldr	r2, [r3, #4]
 800ea74:	693b      	ldr	r3, [r7, #16]
 800ea76:	4413      	add	r3, r2
 800ea78:	68fa      	ldr	r2, [r7, #12]
 800ea7a:	4619      	mov	r1, r3
 800ea7c:	f016 ffd1 	bl	8025a22 <memcpy>
    offset_to += len;
 800ea80:	697a      	ldr	r2, [r7, #20]
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	4413      	add	r3, r2
 800ea86:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ea88:	693a      	ldr	r2, [r7, #16]
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	4413      	add	r3, r2
 800ea8e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	895b      	ldrh	r3, [r3, #10]
 800ea94:	461a      	mov	r2, r3
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	4293      	cmp	r3, r2
 800ea9a:	d906      	bls.n	800eaaa <pbuf_copy+0xb2>
 800ea9c:	4b38      	ldr	r3, [pc, #224]	@ (800eb80 <pbuf_copy+0x188>)
 800ea9e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800eaa2:	493a      	ldr	r1, [pc, #232]	@ (800eb8c <pbuf_copy+0x194>)
 800eaa4:	4838      	ldr	r0, [pc, #224]	@ (800eb88 <pbuf_copy+0x190>)
 800eaa6:	f016 fd0f 	bl	80254c8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	895b      	ldrh	r3, [r3, #10]
 800eaae:	461a      	mov	r2, r3
 800eab0:	693b      	ldr	r3, [r7, #16]
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d906      	bls.n	800eac4 <pbuf_copy+0xcc>
 800eab6:	4b32      	ldr	r3, [pc, #200]	@ (800eb80 <pbuf_copy+0x188>)
 800eab8:	f240 32da 	movw	r2, #986	@ 0x3da
 800eabc:	4934      	ldr	r1, [pc, #208]	@ (800eb90 <pbuf_copy+0x198>)
 800eabe:	4832      	ldr	r0, [pc, #200]	@ (800eb88 <pbuf_copy+0x190>)
 800eac0:	f016 fd02 	bl	80254c8 <iprintf>
    if (offset_from >= p_from->len) {
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	895b      	ldrh	r3, [r3, #10]
 800eac8:	461a      	mov	r2, r3
 800eaca:	693b      	ldr	r3, [r7, #16]
 800eacc:	4293      	cmp	r3, r2
 800eace:	d304      	bcc.n	800eada <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ead0:	2300      	movs	r3, #0
 800ead2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	895b      	ldrh	r3, [r3, #10]
 800eade:	461a      	mov	r2, r3
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	4293      	cmp	r3, r2
 800eae4:	d114      	bne.n	800eb10 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800eae6:	2300      	movs	r3, #0
 800eae8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d10c      	bne.n	800eb10 <pbuf_copy+0x118>
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d009      	beq.n	800eb10 <pbuf_copy+0x118>
 800eafc:	4b20      	ldr	r3, [pc, #128]	@ (800eb80 <pbuf_copy+0x188>)
 800eafe:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800eb02:	4924      	ldr	r1, [pc, #144]	@ (800eb94 <pbuf_copy+0x19c>)
 800eb04:	4820      	ldr	r0, [pc, #128]	@ (800eb88 <pbuf_copy+0x190>)
 800eb06:	f016 fcdf 	bl	80254c8 <iprintf>
 800eb0a:	f06f 030f 	mvn.w	r3, #15
 800eb0e:	e032      	b.n	800eb76 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d013      	beq.n	800eb3e <pbuf_copy+0x146>
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	895a      	ldrh	r2, [r3, #10]
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	891b      	ldrh	r3, [r3, #8]
 800eb1e:	429a      	cmp	r2, r3
 800eb20:	d10d      	bne.n	800eb3e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d009      	beq.n	800eb3e <pbuf_copy+0x146>
 800eb2a:	4b15      	ldr	r3, [pc, #84]	@ (800eb80 <pbuf_copy+0x188>)
 800eb2c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800eb30:	4919      	ldr	r1, [pc, #100]	@ (800eb98 <pbuf_copy+0x1a0>)
 800eb32:	4815      	ldr	r0, [pc, #84]	@ (800eb88 <pbuf_copy+0x190>)
 800eb34:	f016 fcc8 	bl	80254c8 <iprintf>
 800eb38:	f06f 0305 	mvn.w	r3, #5
 800eb3c:	e01b      	b.n	800eb76 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d013      	beq.n	800eb6c <pbuf_copy+0x174>
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	895a      	ldrh	r2, [r3, #10]
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	891b      	ldrh	r3, [r3, #8]
 800eb4c:	429a      	cmp	r2, r3
 800eb4e:	d10d      	bne.n	800eb6c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d009      	beq.n	800eb6c <pbuf_copy+0x174>
 800eb58:	4b09      	ldr	r3, [pc, #36]	@ (800eb80 <pbuf_copy+0x188>)
 800eb5a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800eb5e:	490e      	ldr	r1, [pc, #56]	@ (800eb98 <pbuf_copy+0x1a0>)
 800eb60:	4809      	ldr	r0, [pc, #36]	@ (800eb88 <pbuf_copy+0x190>)
 800eb62:	f016 fcb1 	bl	80254c8 <iprintf>
 800eb66:	f06f 0305 	mvn.w	r3, #5
 800eb6a:	e004      	b.n	800eb76 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	f47f af61 	bne.w	800ea36 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800eb74:	2300      	movs	r3, #0
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3718      	adds	r7, #24
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	08027cd0 	.word	0x08027cd0
 800eb84:	08027f78 	.word	0x08027f78
 800eb88:	08027d30 	.word	0x08027d30
 800eb8c:	08027fa8 	.word	0x08027fa8
 800eb90:	08027fc0 	.word	0x08027fc0
 800eb94:	08027fdc 	.word	0x08027fdc
 800eb98:	08027fec 	.word	0x08027fec

0800eb9c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b088      	sub	sp, #32
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	60f8      	str	r0, [r7, #12]
 800eba4:	60b9      	str	r1, [r7, #8]
 800eba6:	4611      	mov	r1, r2
 800eba8:	461a      	mov	r2, r3
 800ebaa:	460b      	mov	r3, r1
 800ebac:	80fb      	strh	r3, [r7, #6]
 800ebae:	4613      	mov	r3, r2
 800ebb0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d108      	bne.n	800ebd2 <pbuf_copy_partial+0x36>
 800ebc0:	4b2b      	ldr	r3, [pc, #172]	@ (800ec70 <pbuf_copy_partial+0xd4>)
 800ebc2:	f240 420a 	movw	r2, #1034	@ 0x40a
 800ebc6:	492b      	ldr	r1, [pc, #172]	@ (800ec74 <pbuf_copy_partial+0xd8>)
 800ebc8:	482b      	ldr	r0, [pc, #172]	@ (800ec78 <pbuf_copy_partial+0xdc>)
 800ebca:	f016 fc7d 	bl	80254c8 <iprintf>
 800ebce:	2300      	movs	r3, #0
 800ebd0:	e04a      	b.n	800ec68 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d108      	bne.n	800ebea <pbuf_copy_partial+0x4e>
 800ebd8:	4b25      	ldr	r3, [pc, #148]	@ (800ec70 <pbuf_copy_partial+0xd4>)
 800ebda:	f240 420b 	movw	r2, #1035	@ 0x40b
 800ebde:	4927      	ldr	r1, [pc, #156]	@ (800ec7c <pbuf_copy_partial+0xe0>)
 800ebe0:	4825      	ldr	r0, [pc, #148]	@ (800ec78 <pbuf_copy_partial+0xdc>)
 800ebe2:	f016 fc71 	bl	80254c8 <iprintf>
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	e03e      	b.n	800ec68 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	61fb      	str	r3, [r7, #28]
 800ebee:	e034      	b.n	800ec5a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ebf0:	88bb      	ldrh	r3, [r7, #4]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d00a      	beq.n	800ec0c <pbuf_copy_partial+0x70>
 800ebf6:	69fb      	ldr	r3, [r7, #28]
 800ebf8:	895b      	ldrh	r3, [r3, #10]
 800ebfa:	88ba      	ldrh	r2, [r7, #4]
 800ebfc:	429a      	cmp	r2, r3
 800ebfe:	d305      	bcc.n	800ec0c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ec00:	69fb      	ldr	r3, [r7, #28]
 800ec02:	895b      	ldrh	r3, [r3, #10]
 800ec04:	88ba      	ldrh	r2, [r7, #4]
 800ec06:	1ad3      	subs	r3, r2, r3
 800ec08:	80bb      	strh	r3, [r7, #4]
 800ec0a:	e023      	b.n	800ec54 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ec0c:	69fb      	ldr	r3, [r7, #28]
 800ec0e:	895a      	ldrh	r2, [r3, #10]
 800ec10:	88bb      	ldrh	r3, [r7, #4]
 800ec12:	1ad3      	subs	r3, r2, r3
 800ec14:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ec16:	8b3a      	ldrh	r2, [r7, #24]
 800ec18:	88fb      	ldrh	r3, [r7, #6]
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	d901      	bls.n	800ec22 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ec1e:	88fb      	ldrh	r3, [r7, #6]
 800ec20:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ec22:	8b7b      	ldrh	r3, [r7, #26]
 800ec24:	68ba      	ldr	r2, [r7, #8]
 800ec26:	18d0      	adds	r0, r2, r3
 800ec28:	69fb      	ldr	r3, [r7, #28]
 800ec2a:	685a      	ldr	r2, [r3, #4]
 800ec2c:	88bb      	ldrh	r3, [r7, #4]
 800ec2e:	4413      	add	r3, r2
 800ec30:	8b3a      	ldrh	r2, [r7, #24]
 800ec32:	4619      	mov	r1, r3
 800ec34:	f016 fef5 	bl	8025a22 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ec38:	8afa      	ldrh	r2, [r7, #22]
 800ec3a:	8b3b      	ldrh	r3, [r7, #24]
 800ec3c:	4413      	add	r3, r2
 800ec3e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ec40:	8b7a      	ldrh	r2, [r7, #26]
 800ec42:	8b3b      	ldrh	r3, [r7, #24]
 800ec44:	4413      	add	r3, r2
 800ec46:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ec48:	88fa      	ldrh	r2, [r7, #6]
 800ec4a:	8b3b      	ldrh	r3, [r7, #24]
 800ec4c:	1ad3      	subs	r3, r2, r3
 800ec4e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ec50:	2300      	movs	r3, #0
 800ec52:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ec54:	69fb      	ldr	r3, [r7, #28]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	61fb      	str	r3, [r7, #28]
 800ec5a:	88fb      	ldrh	r3, [r7, #6]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d002      	beq.n	800ec66 <pbuf_copy_partial+0xca>
 800ec60:	69fb      	ldr	r3, [r7, #28]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d1c4      	bne.n	800ebf0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ec66:	8afb      	ldrh	r3, [r7, #22]
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3720      	adds	r7, #32
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}
 800ec70:	08027cd0 	.word	0x08027cd0
 800ec74:	08028018 	.word	0x08028018
 800ec78:	08027d30 	.word	0x08027d30
 800ec7c:	08028038 	.word	0x08028038

0800ec80 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b084      	sub	sp, #16
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	4603      	mov	r3, r0
 800ec88:	603a      	str	r2, [r7, #0]
 800ec8a:	71fb      	strb	r3, [r7, #7]
 800ec8c:	460b      	mov	r3, r1
 800ec8e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	8919      	ldrh	r1, [r3, #8]
 800ec94:	88ba      	ldrh	r2, [r7, #4]
 800ec96:	79fb      	ldrb	r3, [r7, #7]
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f7ff fa63 	bl	800e164 <pbuf_alloc>
 800ec9e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d101      	bne.n	800ecaa <pbuf_clone+0x2a>
    return NULL;
 800eca6:	2300      	movs	r3, #0
 800eca8:	e011      	b.n	800ecce <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ecaa:	6839      	ldr	r1, [r7, #0]
 800ecac:	68f8      	ldr	r0, [r7, #12]
 800ecae:	f7ff fea3 	bl	800e9f8 <pbuf_copy>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ecb6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d006      	beq.n	800eccc <pbuf_clone+0x4c>
 800ecbe:	4b06      	ldr	r3, [pc, #24]	@ (800ecd8 <pbuf_clone+0x58>)
 800ecc0:	f240 5224 	movw	r2, #1316	@ 0x524
 800ecc4:	4905      	ldr	r1, [pc, #20]	@ (800ecdc <pbuf_clone+0x5c>)
 800ecc6:	4806      	ldr	r0, [pc, #24]	@ (800ece0 <pbuf_clone+0x60>)
 800ecc8:	f016 fbfe 	bl	80254c8 <iprintf>
  return q;
 800eccc:	68fb      	ldr	r3, [r7, #12]
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3710      	adds	r7, #16
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}
 800ecd6:	bf00      	nop
 800ecd8:	08027cd0 	.word	0x08027cd0
 800ecdc:	08028144 	.word	0x08028144
 800ece0:	08027d30 	.word	0x08027d30

0800ece4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ece8:	f016 f962 	bl	8024fb0 <rand>
 800ecec:	4603      	mov	r3, r0
 800ecee:	b29b      	uxth	r3, r3
 800ecf0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ecf4:	b29b      	uxth	r3, r3
 800ecf6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800ecfa:	b29a      	uxth	r2, r3
 800ecfc:	4b01      	ldr	r3, [pc, #4]	@ (800ed04 <tcp_init+0x20>)
 800ecfe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ed00:	bf00      	nop
 800ed02:	bd80      	pop	{r7, pc}
 800ed04:	2000002c 	.word	0x2000002c

0800ed08 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b082      	sub	sp, #8
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	7d1b      	ldrb	r3, [r3, #20]
 800ed14:	2b01      	cmp	r3, #1
 800ed16:	d105      	bne.n	800ed24 <tcp_free+0x1c>
 800ed18:	4b06      	ldr	r3, [pc, #24]	@ (800ed34 <tcp_free+0x2c>)
 800ed1a:	22d4      	movs	r2, #212	@ 0xd4
 800ed1c:	4906      	ldr	r1, [pc, #24]	@ (800ed38 <tcp_free+0x30>)
 800ed1e:	4807      	ldr	r0, [pc, #28]	@ (800ed3c <tcp_free+0x34>)
 800ed20:	f016 fbd2 	bl	80254c8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ed24:	6879      	ldr	r1, [r7, #4]
 800ed26:	2001      	movs	r0, #1
 800ed28:	f7fe fe24 	bl	800d974 <memp_free>
}
 800ed2c:	bf00      	nop
 800ed2e:	3708      	adds	r7, #8
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}
 800ed34:	080281d0 	.word	0x080281d0
 800ed38:	08028200 	.word	0x08028200
 800ed3c:	08028214 	.word	0x08028214

0800ed40 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b082      	sub	sp, #8
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	7d1b      	ldrb	r3, [r3, #20]
 800ed4c:	2b01      	cmp	r3, #1
 800ed4e:	d105      	bne.n	800ed5c <tcp_free_listen+0x1c>
 800ed50:	4b06      	ldr	r3, [pc, #24]	@ (800ed6c <tcp_free_listen+0x2c>)
 800ed52:	22df      	movs	r2, #223	@ 0xdf
 800ed54:	4906      	ldr	r1, [pc, #24]	@ (800ed70 <tcp_free_listen+0x30>)
 800ed56:	4807      	ldr	r0, [pc, #28]	@ (800ed74 <tcp_free_listen+0x34>)
 800ed58:	f016 fbb6 	bl	80254c8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ed5c:	6879      	ldr	r1, [r7, #4]
 800ed5e:	2002      	movs	r0, #2
 800ed60:	f7fe fe08 	bl	800d974 <memp_free>
}
 800ed64:	bf00      	nop
 800ed66:	3708      	adds	r7, #8
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}
 800ed6c:	080281d0 	.word	0x080281d0
 800ed70:	0802823c 	.word	0x0802823c
 800ed74:	08028214 	.word	0x08028214

0800ed78 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ed7c:	f000 fff8 	bl	800fd70 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ed80:	4b07      	ldr	r3, [pc, #28]	@ (800eda0 <tcp_tmr+0x28>)
 800ed82:	781b      	ldrb	r3, [r3, #0]
 800ed84:	3301      	adds	r3, #1
 800ed86:	b2da      	uxtb	r2, r3
 800ed88:	4b05      	ldr	r3, [pc, #20]	@ (800eda0 <tcp_tmr+0x28>)
 800ed8a:	701a      	strb	r2, [r3, #0]
 800ed8c:	4b04      	ldr	r3, [pc, #16]	@ (800eda0 <tcp_tmr+0x28>)
 800ed8e:	781b      	ldrb	r3, [r3, #0]
 800ed90:	f003 0301 	and.w	r3, r3, #1
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d001      	beq.n	800ed9c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ed98:	f000 fca8 	bl	800f6ec <tcp_slowtmr>
  }
}
 800ed9c:	bf00      	nop
 800ed9e:	bd80      	pop	{r7, pc}
 800eda0:	2000fe95 	.word	0x2000fe95

0800eda4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b084      	sub	sp, #16
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
 800edac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d105      	bne.n	800edc0 <tcp_remove_listener+0x1c>
 800edb4:	4b0d      	ldr	r3, [pc, #52]	@ (800edec <tcp_remove_listener+0x48>)
 800edb6:	22ff      	movs	r2, #255	@ 0xff
 800edb8:	490d      	ldr	r1, [pc, #52]	@ (800edf0 <tcp_remove_listener+0x4c>)
 800edba:	480e      	ldr	r0, [pc, #56]	@ (800edf4 <tcp_remove_listener+0x50>)
 800edbc:	f016 fb84 	bl	80254c8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	60fb      	str	r3, [r7, #12]
 800edc4:	e00a      	b.n	800eddc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800edca:	683a      	ldr	r2, [r7, #0]
 800edcc:	429a      	cmp	r2, r3
 800edce:	d102      	bne.n	800edd6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	2200      	movs	r2, #0
 800edd4:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	68db      	ldr	r3, [r3, #12]
 800edda:	60fb      	str	r3, [r7, #12]
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d1f1      	bne.n	800edc6 <tcp_remove_listener+0x22>
    }
  }
}
 800ede2:	bf00      	nop
 800ede4:	bf00      	nop
 800ede6:	3710      	adds	r7, #16
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}
 800edec:	080281d0 	.word	0x080281d0
 800edf0:	08028258 	.word	0x08028258
 800edf4:	08028214 	.word	0x08028214

0800edf8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b084      	sub	sp, #16
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d106      	bne.n	800ee14 <tcp_listen_closed+0x1c>
 800ee06:	4b14      	ldr	r3, [pc, #80]	@ (800ee58 <tcp_listen_closed+0x60>)
 800ee08:	f240 1211 	movw	r2, #273	@ 0x111
 800ee0c:	4913      	ldr	r1, [pc, #76]	@ (800ee5c <tcp_listen_closed+0x64>)
 800ee0e:	4814      	ldr	r0, [pc, #80]	@ (800ee60 <tcp_listen_closed+0x68>)
 800ee10:	f016 fb5a 	bl	80254c8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	7d1b      	ldrb	r3, [r3, #20]
 800ee18:	2b01      	cmp	r3, #1
 800ee1a:	d006      	beq.n	800ee2a <tcp_listen_closed+0x32>
 800ee1c:	4b0e      	ldr	r3, [pc, #56]	@ (800ee58 <tcp_listen_closed+0x60>)
 800ee1e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800ee22:	4910      	ldr	r1, [pc, #64]	@ (800ee64 <tcp_listen_closed+0x6c>)
 800ee24:	480e      	ldr	r0, [pc, #56]	@ (800ee60 <tcp_listen_closed+0x68>)
 800ee26:	f016 fb4f 	bl	80254c8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	60fb      	str	r3, [r7, #12]
 800ee2e:	e00b      	b.n	800ee48 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ee30:	4a0d      	ldr	r2, [pc, #52]	@ (800ee68 <tcp_listen_closed+0x70>)
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	6879      	ldr	r1, [r7, #4]
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f7ff ffb1 	bl	800eda4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	3301      	adds	r3, #1
 800ee46:	60fb      	str	r3, [r7, #12]
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	2b03      	cmp	r3, #3
 800ee4c:	d9f0      	bls.n	800ee30 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ee4e:	bf00      	nop
 800ee50:	bf00      	nop
 800ee52:	3710      	adds	r7, #16
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}
 800ee58:	080281d0 	.word	0x080281d0
 800ee5c:	08028280 	.word	0x08028280
 800ee60:	08028214 	.word	0x08028214
 800ee64:	0802828c 	.word	0x0802828c
 800ee68:	0802a2c4 	.word	0x0802a2c4

0800ee6c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ee6c:	b5b0      	push	{r4, r5, r7, lr}
 800ee6e:	b088      	sub	sp, #32
 800ee70:	af04      	add	r7, sp, #16
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	460b      	mov	r3, r1
 800ee76:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d106      	bne.n	800ee8c <tcp_close_shutdown+0x20>
 800ee7e:	4b63      	ldr	r3, [pc, #396]	@ (800f00c <tcp_close_shutdown+0x1a0>)
 800ee80:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800ee84:	4962      	ldr	r1, [pc, #392]	@ (800f010 <tcp_close_shutdown+0x1a4>)
 800ee86:	4863      	ldr	r0, [pc, #396]	@ (800f014 <tcp_close_shutdown+0x1a8>)
 800ee88:	f016 fb1e 	bl	80254c8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ee8c:	78fb      	ldrb	r3, [r7, #3]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d066      	beq.n	800ef60 <tcp_close_shutdown+0xf4>
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	7d1b      	ldrb	r3, [r3, #20]
 800ee96:	2b04      	cmp	r3, #4
 800ee98:	d003      	beq.n	800eea2 <tcp_close_shutdown+0x36>
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	7d1b      	ldrb	r3, [r3, #20]
 800ee9e:	2b07      	cmp	r3, #7
 800eea0:	d15e      	bne.n	800ef60 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d104      	bne.n	800eeb4 <tcp_close_shutdown+0x48>
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eeae:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800eeb2:	d055      	beq.n	800ef60 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	8b5b      	ldrh	r3, [r3, #26]
 800eeb8:	f003 0310 	and.w	r3, r3, #16
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d106      	bne.n	800eece <tcp_close_shutdown+0x62>
 800eec0:	4b52      	ldr	r3, [pc, #328]	@ (800f00c <tcp_close_shutdown+0x1a0>)
 800eec2:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800eec6:	4954      	ldr	r1, [pc, #336]	@ (800f018 <tcp_close_shutdown+0x1ac>)
 800eec8:	4852      	ldr	r0, [pc, #328]	@ (800f014 <tcp_close_shutdown+0x1a8>)
 800eeca:	f016 fafd 	bl	80254c8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800eed6:	687d      	ldr	r5, [r7, #4]
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	3304      	adds	r3, #4
 800eedc:	687a      	ldr	r2, [r7, #4]
 800eede:	8ad2      	ldrh	r2, [r2, #22]
 800eee0:	6879      	ldr	r1, [r7, #4]
 800eee2:	8b09      	ldrh	r1, [r1, #24]
 800eee4:	9102      	str	r1, [sp, #8]
 800eee6:	9201      	str	r2, [sp, #4]
 800eee8:	9300      	str	r3, [sp, #0]
 800eeea:	462b      	mov	r3, r5
 800eeec:	4622      	mov	r2, r4
 800eeee:	4601      	mov	r1, r0
 800eef0:	6878      	ldr	r0, [r7, #4]
 800eef2:	f005 fd07 	bl	8014904 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f001 faea 	bl	80104d0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800eefc:	4b47      	ldr	r3, [pc, #284]	@ (800f01c <tcp_close_shutdown+0x1b0>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	687a      	ldr	r2, [r7, #4]
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d105      	bne.n	800ef12 <tcp_close_shutdown+0xa6>
 800ef06:	4b45      	ldr	r3, [pc, #276]	@ (800f01c <tcp_close_shutdown+0x1b0>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	68db      	ldr	r3, [r3, #12]
 800ef0c:	4a43      	ldr	r2, [pc, #268]	@ (800f01c <tcp_close_shutdown+0x1b0>)
 800ef0e:	6013      	str	r3, [r2, #0]
 800ef10:	e013      	b.n	800ef3a <tcp_close_shutdown+0xce>
 800ef12:	4b42      	ldr	r3, [pc, #264]	@ (800f01c <tcp_close_shutdown+0x1b0>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	60fb      	str	r3, [r7, #12]
 800ef18:	e00c      	b.n	800ef34 <tcp_close_shutdown+0xc8>
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	68db      	ldr	r3, [r3, #12]
 800ef1e:	687a      	ldr	r2, [r7, #4]
 800ef20:	429a      	cmp	r2, r3
 800ef22:	d104      	bne.n	800ef2e <tcp_close_shutdown+0xc2>
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	68da      	ldr	r2, [r3, #12]
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	60da      	str	r2, [r3, #12]
 800ef2c:	e005      	b.n	800ef3a <tcp_close_shutdown+0xce>
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	68db      	ldr	r3, [r3, #12]
 800ef32:	60fb      	str	r3, [r7, #12]
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d1ef      	bne.n	800ef1a <tcp_close_shutdown+0xae>
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	60da      	str	r2, [r3, #12]
 800ef40:	4b37      	ldr	r3, [pc, #220]	@ (800f020 <tcp_close_shutdown+0x1b4>)
 800ef42:	2201      	movs	r2, #1
 800ef44:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ef46:	4b37      	ldr	r3, [pc, #220]	@ (800f024 <tcp_close_shutdown+0x1b8>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	687a      	ldr	r2, [r7, #4]
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	d102      	bne.n	800ef56 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800ef50:	f003 ff7e 	bl	8012e50 <tcp_trigger_input_pcb_close>
 800ef54:	e002      	b.n	800ef5c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f7ff fed6 	bl	800ed08 <tcp_free>
      }
      return ERR_OK;
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	e050      	b.n	800f002 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	7d1b      	ldrb	r3, [r3, #20]
 800ef64:	2b02      	cmp	r3, #2
 800ef66:	d03b      	beq.n	800efe0 <tcp_close_shutdown+0x174>
 800ef68:	2b02      	cmp	r3, #2
 800ef6a:	dc44      	bgt.n	800eff6 <tcp_close_shutdown+0x18a>
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d002      	beq.n	800ef76 <tcp_close_shutdown+0x10a>
 800ef70:	2b01      	cmp	r3, #1
 800ef72:	d02a      	beq.n	800efca <tcp_close_shutdown+0x15e>
 800ef74:	e03f      	b.n	800eff6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	8adb      	ldrh	r3, [r3, #22]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d021      	beq.n	800efc2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ef7e:	4b2a      	ldr	r3, [pc, #168]	@ (800f028 <tcp_close_shutdown+0x1bc>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	687a      	ldr	r2, [r7, #4]
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d105      	bne.n	800ef94 <tcp_close_shutdown+0x128>
 800ef88:	4b27      	ldr	r3, [pc, #156]	@ (800f028 <tcp_close_shutdown+0x1bc>)
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	68db      	ldr	r3, [r3, #12]
 800ef8e:	4a26      	ldr	r2, [pc, #152]	@ (800f028 <tcp_close_shutdown+0x1bc>)
 800ef90:	6013      	str	r3, [r2, #0]
 800ef92:	e013      	b.n	800efbc <tcp_close_shutdown+0x150>
 800ef94:	4b24      	ldr	r3, [pc, #144]	@ (800f028 <tcp_close_shutdown+0x1bc>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	60bb      	str	r3, [r7, #8]
 800ef9a:	e00c      	b.n	800efb6 <tcp_close_shutdown+0x14a>
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	68db      	ldr	r3, [r3, #12]
 800efa0:	687a      	ldr	r2, [r7, #4]
 800efa2:	429a      	cmp	r2, r3
 800efa4:	d104      	bne.n	800efb0 <tcp_close_shutdown+0x144>
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	68da      	ldr	r2, [r3, #12]
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	60da      	str	r2, [r3, #12]
 800efae:	e005      	b.n	800efbc <tcp_close_shutdown+0x150>
 800efb0:	68bb      	ldr	r3, [r7, #8]
 800efb2:	68db      	ldr	r3, [r3, #12]
 800efb4:	60bb      	str	r3, [r7, #8]
 800efb6:	68bb      	ldr	r3, [r7, #8]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d1ef      	bne.n	800ef9c <tcp_close_shutdown+0x130>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2200      	movs	r2, #0
 800efc0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f7ff fea0 	bl	800ed08 <tcp_free>
      break;
 800efc8:	e01a      	b.n	800f000 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800efca:	6878      	ldr	r0, [r7, #4]
 800efcc:	f7ff ff14 	bl	800edf8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800efd0:	6879      	ldr	r1, [r7, #4]
 800efd2:	4816      	ldr	r0, [pc, #88]	@ (800f02c <tcp_close_shutdown+0x1c0>)
 800efd4:	f001 facc 	bl	8010570 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800efd8:	6878      	ldr	r0, [r7, #4]
 800efda:	f7ff feb1 	bl	800ed40 <tcp_free_listen>
      break;
 800efde:	e00f      	b.n	800f000 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800efe0:	6879      	ldr	r1, [r7, #4]
 800efe2:	480e      	ldr	r0, [pc, #56]	@ (800f01c <tcp_close_shutdown+0x1b0>)
 800efe4:	f001 fac4 	bl	8010570 <tcp_pcb_remove>
 800efe8:	4b0d      	ldr	r3, [pc, #52]	@ (800f020 <tcp_close_shutdown+0x1b4>)
 800efea:	2201      	movs	r2, #1
 800efec:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f7ff fe8a 	bl	800ed08 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800eff4:	e004      	b.n	800f000 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800eff6:	6878      	ldr	r0, [r7, #4]
 800eff8:	f000 f81a 	bl	800f030 <tcp_close_shutdown_fin>
 800effc:	4603      	mov	r3, r0
 800effe:	e000      	b.n	800f002 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800f000:	2300      	movs	r3, #0
}
 800f002:	4618      	mov	r0, r3
 800f004:	3710      	adds	r7, #16
 800f006:	46bd      	mov	sp, r7
 800f008:	bdb0      	pop	{r4, r5, r7, pc}
 800f00a:	bf00      	nop
 800f00c:	080281d0 	.word	0x080281d0
 800f010:	080282a4 	.word	0x080282a4
 800f014:	08028214 	.word	0x08028214
 800f018:	080282c4 	.word	0x080282c4
 800f01c:	2000fe8c 	.word	0x2000fe8c
 800f020:	2000fe94 	.word	0x2000fe94
 800f024:	2000fecc 	.word	0x2000fecc
 800f028:	2000fe84 	.word	0x2000fe84
 800f02c:	2000fe88 	.word	0x2000fe88

0800f030 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b084      	sub	sp, #16
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d106      	bne.n	800f04c <tcp_close_shutdown_fin+0x1c>
 800f03e:	4b2e      	ldr	r3, [pc, #184]	@ (800f0f8 <tcp_close_shutdown_fin+0xc8>)
 800f040:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800f044:	492d      	ldr	r1, [pc, #180]	@ (800f0fc <tcp_close_shutdown_fin+0xcc>)
 800f046:	482e      	ldr	r0, [pc, #184]	@ (800f100 <tcp_close_shutdown_fin+0xd0>)
 800f048:	f016 fa3e 	bl	80254c8 <iprintf>

  switch (pcb->state) {
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	7d1b      	ldrb	r3, [r3, #20]
 800f050:	2b07      	cmp	r3, #7
 800f052:	d020      	beq.n	800f096 <tcp_close_shutdown_fin+0x66>
 800f054:	2b07      	cmp	r3, #7
 800f056:	dc2b      	bgt.n	800f0b0 <tcp_close_shutdown_fin+0x80>
 800f058:	2b03      	cmp	r3, #3
 800f05a:	d002      	beq.n	800f062 <tcp_close_shutdown_fin+0x32>
 800f05c:	2b04      	cmp	r3, #4
 800f05e:	d00d      	beq.n	800f07c <tcp_close_shutdown_fin+0x4c>
 800f060:	e026      	b.n	800f0b0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f004 fd5c 	bl	8013b20 <tcp_send_fin>
 800f068:	4603      	mov	r3, r0
 800f06a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f06c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d11f      	bne.n	800f0b4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2205      	movs	r2, #5
 800f078:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f07a:	e01b      	b.n	800f0b4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f07c:	6878      	ldr	r0, [r7, #4]
 800f07e:	f004 fd4f 	bl	8013b20 <tcp_send_fin>
 800f082:	4603      	mov	r3, r0
 800f084:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d114      	bne.n	800f0b8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2205      	movs	r2, #5
 800f092:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f094:	e010      	b.n	800f0b8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f004 fd42 	bl	8013b20 <tcp_send_fin>
 800f09c:	4603      	mov	r3, r0
 800f09e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f0a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d109      	bne.n	800f0bc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2209      	movs	r2, #9
 800f0ac:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f0ae:	e005      	b.n	800f0bc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	e01c      	b.n	800f0ee <tcp_close_shutdown_fin+0xbe>
      break;
 800f0b4:	bf00      	nop
 800f0b6:	e002      	b.n	800f0be <tcp_close_shutdown_fin+0x8e>
      break;
 800f0b8:	bf00      	nop
 800f0ba:	e000      	b.n	800f0be <tcp_close_shutdown_fin+0x8e>
      break;
 800f0bc:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f0be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d103      	bne.n	800f0ce <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f0c6:	6878      	ldr	r0, [r7, #4]
 800f0c8:	f004 fe68 	bl	8013d9c <tcp_output>
 800f0cc:	e00d      	b.n	800f0ea <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f0ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0d6:	d108      	bne.n	800f0ea <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	8b5b      	ldrh	r3, [r3, #26]
 800f0dc:	f043 0308 	orr.w	r3, r3, #8
 800f0e0:	b29a      	uxth	r2, r3
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	e001      	b.n	800f0ee <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f0ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3710      	adds	r7, #16
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
 800f0f6:	bf00      	nop
 800f0f8:	080281d0 	.word	0x080281d0
 800f0fc:	08028280 	.word	0x08028280
 800f100:	08028214 	.word	0x08028214

0800f104 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b082      	sub	sp, #8
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d109      	bne.n	800f126 <tcp_close+0x22>
 800f112:	4b0f      	ldr	r3, [pc, #60]	@ (800f150 <tcp_close+0x4c>)
 800f114:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800f118:	490e      	ldr	r1, [pc, #56]	@ (800f154 <tcp_close+0x50>)
 800f11a:	480f      	ldr	r0, [pc, #60]	@ (800f158 <tcp_close+0x54>)
 800f11c:	f016 f9d4 	bl	80254c8 <iprintf>
 800f120:	f06f 030f 	mvn.w	r3, #15
 800f124:	e00f      	b.n	800f146 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	7d1b      	ldrb	r3, [r3, #20]
 800f12a:	2b01      	cmp	r3, #1
 800f12c:	d006      	beq.n	800f13c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	8b5b      	ldrh	r3, [r3, #26]
 800f132:	f043 0310 	orr.w	r3, r3, #16
 800f136:	b29a      	uxth	r2, r3
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f13c:	2101      	movs	r1, #1
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f7ff fe94 	bl	800ee6c <tcp_close_shutdown>
 800f144:	4603      	mov	r3, r0
}
 800f146:	4618      	mov	r0, r3
 800f148:	3708      	adds	r7, #8
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}
 800f14e:	bf00      	nop
 800f150:	080281d0 	.word	0x080281d0
 800f154:	080282e0 	.word	0x080282e0
 800f158:	08028214 	.word	0x08028214

0800f15c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b084      	sub	sp, #16
 800f160:	af00      	add	r7, sp, #0
 800f162:	60f8      	str	r0, [r7, #12]
 800f164:	60b9      	str	r1, [r7, #8]
 800f166:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d109      	bne.n	800f182 <tcp_shutdown+0x26>
 800f16e:	4b26      	ldr	r3, [pc, #152]	@ (800f208 <tcp_shutdown+0xac>)
 800f170:	f240 2207 	movw	r2, #519	@ 0x207
 800f174:	4925      	ldr	r1, [pc, #148]	@ (800f20c <tcp_shutdown+0xb0>)
 800f176:	4826      	ldr	r0, [pc, #152]	@ (800f210 <tcp_shutdown+0xb4>)
 800f178:	f016 f9a6 	bl	80254c8 <iprintf>
 800f17c:	f06f 030f 	mvn.w	r3, #15
 800f180:	e03d      	b.n	800f1fe <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	7d1b      	ldrb	r3, [r3, #20]
 800f186:	2b01      	cmp	r3, #1
 800f188:	d102      	bne.n	800f190 <tcp_shutdown+0x34>
    return ERR_CONN;
 800f18a:	f06f 030a 	mvn.w	r3, #10
 800f18e:	e036      	b.n	800f1fe <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d01b      	beq.n	800f1ce <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	8b5b      	ldrh	r3, [r3, #26]
 800f19a:	f043 0310 	orr.w	r3, r3, #16
 800f19e:	b29a      	uxth	r2, r3
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d005      	beq.n	800f1b6 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800f1aa:	2101      	movs	r1, #1
 800f1ac:	68f8      	ldr	r0, [r7, #12]
 800f1ae:	f7ff fe5d 	bl	800ee6c <tcp_close_shutdown>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	e023      	b.n	800f1fe <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d007      	beq.n	800f1ce <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f7ff fae4 	bl	800e790 <pbuf_free>
      pcb->refused_data = NULL;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d013      	beq.n	800f1fc <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	7d1b      	ldrb	r3, [r3, #20]
 800f1d8:	2b04      	cmp	r3, #4
 800f1da:	dc02      	bgt.n	800f1e2 <tcp_shutdown+0x86>
 800f1dc:	2b03      	cmp	r3, #3
 800f1de:	da02      	bge.n	800f1e6 <tcp_shutdown+0x8a>
 800f1e0:	e009      	b.n	800f1f6 <tcp_shutdown+0x9a>
 800f1e2:	2b07      	cmp	r3, #7
 800f1e4:	d107      	bne.n	800f1f6 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	b2db      	uxtb	r3, r3
 800f1ea:	4619      	mov	r1, r3
 800f1ec:	68f8      	ldr	r0, [r7, #12]
 800f1ee:	f7ff fe3d 	bl	800ee6c <tcp_close_shutdown>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	e003      	b.n	800f1fe <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800f1f6:	f06f 030a 	mvn.w	r3, #10
 800f1fa:	e000      	b.n	800f1fe <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800f1fc:	2300      	movs	r3, #0
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3710      	adds	r7, #16
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}
 800f206:	bf00      	nop
 800f208:	080281d0 	.word	0x080281d0
 800f20c:	080282f8 	.word	0x080282f8
 800f210:	08028214 	.word	0x08028214

0800f214 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b08e      	sub	sp, #56	@ 0x38
 800f218:	af04      	add	r7, sp, #16
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d107      	bne.n	800f234 <tcp_abandon+0x20>
 800f224:	4b52      	ldr	r3, [pc, #328]	@ (800f370 <tcp_abandon+0x15c>)
 800f226:	f240 223d 	movw	r2, #573	@ 0x23d
 800f22a:	4952      	ldr	r1, [pc, #328]	@ (800f374 <tcp_abandon+0x160>)
 800f22c:	4852      	ldr	r0, [pc, #328]	@ (800f378 <tcp_abandon+0x164>)
 800f22e:	f016 f94b 	bl	80254c8 <iprintf>
 800f232:	e099      	b.n	800f368 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	7d1b      	ldrb	r3, [r3, #20]
 800f238:	2b01      	cmp	r3, #1
 800f23a:	d106      	bne.n	800f24a <tcp_abandon+0x36>
 800f23c:	4b4c      	ldr	r3, [pc, #304]	@ (800f370 <tcp_abandon+0x15c>)
 800f23e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800f242:	494e      	ldr	r1, [pc, #312]	@ (800f37c <tcp_abandon+0x168>)
 800f244:	484c      	ldr	r0, [pc, #304]	@ (800f378 <tcp_abandon+0x164>)
 800f246:	f016 f93f 	bl	80254c8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	7d1b      	ldrb	r3, [r3, #20]
 800f24e:	2b0a      	cmp	r3, #10
 800f250:	d107      	bne.n	800f262 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f252:	6879      	ldr	r1, [r7, #4]
 800f254:	484a      	ldr	r0, [pc, #296]	@ (800f380 <tcp_abandon+0x16c>)
 800f256:	f001 f98b 	bl	8010570 <tcp_pcb_remove>
    tcp_free(pcb);
 800f25a:	6878      	ldr	r0, [r7, #4]
 800f25c:	f7ff fd54 	bl	800ed08 <tcp_free>
 800f260:	e082      	b.n	800f368 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f262:	2300      	movs	r3, #0
 800f264:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800f266:	2300      	movs	r3, #0
 800f268:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f26e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f274:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f27c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	691b      	ldr	r3, [r3, #16]
 800f282:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	7d1b      	ldrb	r3, [r3, #20]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d126      	bne.n	800f2da <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	8adb      	ldrh	r3, [r3, #22]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d02e      	beq.n	800f2f2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f294:	4b3b      	ldr	r3, [pc, #236]	@ (800f384 <tcp_abandon+0x170>)
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	687a      	ldr	r2, [r7, #4]
 800f29a:	429a      	cmp	r2, r3
 800f29c:	d105      	bne.n	800f2aa <tcp_abandon+0x96>
 800f29e:	4b39      	ldr	r3, [pc, #228]	@ (800f384 <tcp_abandon+0x170>)
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	68db      	ldr	r3, [r3, #12]
 800f2a4:	4a37      	ldr	r2, [pc, #220]	@ (800f384 <tcp_abandon+0x170>)
 800f2a6:	6013      	str	r3, [r2, #0]
 800f2a8:	e013      	b.n	800f2d2 <tcp_abandon+0xbe>
 800f2aa:	4b36      	ldr	r3, [pc, #216]	@ (800f384 <tcp_abandon+0x170>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	61fb      	str	r3, [r7, #28]
 800f2b0:	e00c      	b.n	800f2cc <tcp_abandon+0xb8>
 800f2b2:	69fb      	ldr	r3, [r7, #28]
 800f2b4:	68db      	ldr	r3, [r3, #12]
 800f2b6:	687a      	ldr	r2, [r7, #4]
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	d104      	bne.n	800f2c6 <tcp_abandon+0xb2>
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	68da      	ldr	r2, [r3, #12]
 800f2c0:	69fb      	ldr	r3, [r7, #28]
 800f2c2:	60da      	str	r2, [r3, #12]
 800f2c4:	e005      	b.n	800f2d2 <tcp_abandon+0xbe>
 800f2c6:	69fb      	ldr	r3, [r7, #28]
 800f2c8:	68db      	ldr	r3, [r3, #12]
 800f2ca:	61fb      	str	r3, [r7, #28]
 800f2cc:	69fb      	ldr	r3, [r7, #28]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d1ef      	bne.n	800f2b2 <tcp_abandon+0x9e>
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	60da      	str	r2, [r3, #12]
 800f2d8:	e00b      	b.n	800f2f2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	8adb      	ldrh	r3, [r3, #22]
 800f2e2:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f2e4:	6879      	ldr	r1, [r7, #4]
 800f2e6:	4828      	ldr	r0, [pc, #160]	@ (800f388 <tcp_abandon+0x174>)
 800f2e8:	f001 f942 	bl	8010570 <tcp_pcb_remove>
 800f2ec:	4b27      	ldr	r3, [pc, #156]	@ (800f38c <tcp_abandon+0x178>)
 800f2ee:	2201      	movs	r2, #1
 800f2f0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d004      	beq.n	800f304 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f2fe:	4618      	mov	r0, r3
 800f300:	f000 fe16 	bl	800ff30 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d004      	beq.n	800f316 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f310:	4618      	mov	r0, r3
 800f312:	f000 fe0d 	bl	800ff30 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d004      	beq.n	800f328 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f322:	4618      	mov	r0, r3
 800f324:	f000 fe04 	bl	800ff30 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d00e      	beq.n	800f34c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f32e:	6879      	ldr	r1, [r7, #4]
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	3304      	adds	r3, #4
 800f334:	687a      	ldr	r2, [r7, #4]
 800f336:	8b12      	ldrh	r2, [r2, #24]
 800f338:	9202      	str	r2, [sp, #8]
 800f33a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800f33c:	9201      	str	r2, [sp, #4]
 800f33e:	9300      	str	r3, [sp, #0]
 800f340:	460b      	mov	r3, r1
 800f342:	697a      	ldr	r2, [r7, #20]
 800f344:	69b9      	ldr	r1, [r7, #24]
 800f346:	6878      	ldr	r0, [r7, #4]
 800f348:	f005 fadc 	bl	8014904 <tcp_rst>
    }
    last_state = pcb->state;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	7d1b      	ldrb	r3, [r3, #20]
 800f350:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f7ff fcd8 	bl	800ed08 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f358:	693b      	ldr	r3, [r7, #16]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d004      	beq.n	800f368 <tcp_abandon+0x154>
 800f35e:	693b      	ldr	r3, [r7, #16]
 800f360:	f06f 010c 	mvn.w	r1, #12
 800f364:	68f8      	ldr	r0, [r7, #12]
 800f366:	4798      	blx	r3
  }
}
 800f368:	3728      	adds	r7, #40	@ 0x28
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}
 800f36e:	bf00      	nop
 800f370:	080281d0 	.word	0x080281d0
 800f374:	08028314 	.word	0x08028314
 800f378:	08028214 	.word	0x08028214
 800f37c:	08028330 	.word	0x08028330
 800f380:	2000fe90 	.word	0x2000fe90
 800f384:	2000fe84 	.word	0x2000fe84
 800f388:	2000fe8c 	.word	0x2000fe8c
 800f38c:	2000fe94 	.word	0x2000fe94

0800f390 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b082      	sub	sp, #8
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f398:	2101      	movs	r1, #1
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f7ff ff3a 	bl	800f214 <tcp_abandon>
}
 800f3a0:	bf00      	nop
 800f3a2:	3708      	adds	r7, #8
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}

0800f3a8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b088      	sub	sp, #32
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	60f8      	str	r0, [r7, #12]
 800f3b0:	60b9      	str	r1, [r7, #8]
 800f3b2:	4613      	mov	r3, r2
 800f3b4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800f3b6:	2304      	movs	r3, #4
 800f3b8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d101      	bne.n	800f3c4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800f3c0:	4b3e      	ldr	r3, [pc, #248]	@ (800f4bc <tcp_bind+0x114>)
 800f3c2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d109      	bne.n	800f3de <tcp_bind+0x36>
 800f3ca:	4b3d      	ldr	r3, [pc, #244]	@ (800f4c0 <tcp_bind+0x118>)
 800f3cc:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800f3d0:	493c      	ldr	r1, [pc, #240]	@ (800f4c4 <tcp_bind+0x11c>)
 800f3d2:	483d      	ldr	r0, [pc, #244]	@ (800f4c8 <tcp_bind+0x120>)
 800f3d4:	f016 f878 	bl	80254c8 <iprintf>
 800f3d8:	f06f 030f 	mvn.w	r3, #15
 800f3dc:	e06a      	b.n	800f4b4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	7d1b      	ldrb	r3, [r3, #20]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d009      	beq.n	800f3fa <tcp_bind+0x52>
 800f3e6:	4b36      	ldr	r3, [pc, #216]	@ (800f4c0 <tcp_bind+0x118>)
 800f3e8:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800f3ec:	4937      	ldr	r1, [pc, #220]	@ (800f4cc <tcp_bind+0x124>)
 800f3ee:	4836      	ldr	r0, [pc, #216]	@ (800f4c8 <tcp_bind+0x120>)
 800f3f0:	f016 f86a 	bl	80254c8 <iprintf>
 800f3f4:	f06f 0305 	mvn.w	r3, #5
 800f3f8:	e05c      	b.n	800f4b4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800f3fa:	88fb      	ldrh	r3, [r7, #6]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d109      	bne.n	800f414 <tcp_bind+0x6c>
    port = tcp_new_port();
 800f400:	f000 f92e 	bl	800f660 <tcp_new_port>
 800f404:	4603      	mov	r3, r0
 800f406:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f408:	88fb      	ldrh	r3, [r7, #6]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d135      	bne.n	800f47a <tcp_bind+0xd2>
      return ERR_BUF;
 800f40e:	f06f 0301 	mvn.w	r3, #1
 800f412:	e04f      	b.n	800f4b4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800f414:	2300      	movs	r3, #0
 800f416:	61fb      	str	r3, [r7, #28]
 800f418:	e02b      	b.n	800f472 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f41a:	4a2d      	ldr	r2, [pc, #180]	@ (800f4d0 <tcp_bind+0x128>)
 800f41c:	69fb      	ldr	r3, [r7, #28]
 800f41e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	61bb      	str	r3, [r7, #24]
 800f426:	e01e      	b.n	800f466 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800f428:	69bb      	ldr	r3, [r7, #24]
 800f42a:	8adb      	ldrh	r3, [r3, #22]
 800f42c:	88fa      	ldrh	r2, [r7, #6]
 800f42e:	429a      	cmp	r2, r3
 800f430:	d116      	bne.n	800f460 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800f432:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f434:	2b00      	cmp	r3, #0
 800f436:	d010      	beq.n	800f45a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800f438:	69bb      	ldr	r3, [r7, #24]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d00c      	beq.n	800f45a <tcp_bind+0xb2>
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d009      	beq.n	800f45a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d005      	beq.n	800f45a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800f44e:	69bb      	ldr	r3, [r7, #24]
 800f450:	681a      	ldr	r2, [r3, #0]
 800f452:	68bb      	ldr	r3, [r7, #8]
 800f454:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f456:	429a      	cmp	r2, r3
 800f458:	d102      	bne.n	800f460 <tcp_bind+0xb8>
              return ERR_USE;
 800f45a:	f06f 0307 	mvn.w	r3, #7
 800f45e:	e029      	b.n	800f4b4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f460:	69bb      	ldr	r3, [r7, #24]
 800f462:	68db      	ldr	r3, [r3, #12]
 800f464:	61bb      	str	r3, [r7, #24]
 800f466:	69bb      	ldr	r3, [r7, #24]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d1dd      	bne.n	800f428 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800f46c:	69fb      	ldr	r3, [r7, #28]
 800f46e:	3301      	adds	r3, #1
 800f470:	61fb      	str	r3, [r7, #28]
 800f472:	69fa      	ldr	r2, [r7, #28]
 800f474:	697b      	ldr	r3, [r7, #20]
 800f476:	429a      	cmp	r2, r3
 800f478:	dbcf      	blt.n	800f41a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d00c      	beq.n	800f49a <tcp_bind+0xf2>
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d008      	beq.n	800f49a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d002      	beq.n	800f494 <tcp_bind+0xec>
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	e000      	b.n	800f496 <tcp_bind+0xee>
 800f494:	2300      	movs	r3, #0
 800f496:	68fa      	ldr	r2, [r7, #12]
 800f498:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	88fa      	ldrh	r2, [r7, #6]
 800f49e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800f4a0:	4b0c      	ldr	r3, [pc, #48]	@ (800f4d4 <tcp_bind+0x12c>)
 800f4a2:	681a      	ldr	r2, [r3, #0]
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	60da      	str	r2, [r3, #12]
 800f4a8:	4a0a      	ldr	r2, [pc, #40]	@ (800f4d4 <tcp_bind+0x12c>)
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	6013      	str	r3, [r2, #0]
 800f4ae:	f005 fbeb 	bl	8014c88 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800f4b2:	2300      	movs	r3, #0
}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	3720      	adds	r7, #32
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}
 800f4bc:	0802a2ec 	.word	0x0802a2ec
 800f4c0:	080281d0 	.word	0x080281d0
 800f4c4:	08028364 	.word	0x08028364
 800f4c8:	08028214 	.word	0x08028214
 800f4cc:	0802837c 	.word	0x0802837c
 800f4d0:	0802a2c4 	.word	0x0802a2c4
 800f4d4:	2000fe84 	.word	0x2000fe84

0800f4d8 <tcp_bind_netif>:
 * @param pcb the tcp_pcb to bind.
 * @param netif the netif to bind to. Can be NULL.
 */
void
tcp_bind_netif(struct tcp_pcb *pcb, const struct netif *netif)
{
 800f4d8:	b480      	push	{r7}
 800f4da:	b083      	sub	sp, #12
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (netif != NULL) {
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d007      	beq.n	800f4f8 <tcp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f4ee:	3301      	adds	r3, #1
 800f4f0:	b2da      	uxtb	r2, r3
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 800f4f6:	e002      	b.n	800f4fe <tcp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	721a      	strb	r2, [r3, #8]
}
 800f4fe:	bf00      	nop
 800f500:	370c      	adds	r7, #12
 800f502:	46bd      	mov	sp, r7
 800f504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f508:	4770      	bx	lr
	...

0800f50c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b084      	sub	sp, #16
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d106      	bne.n	800f528 <tcp_update_rcv_ann_wnd+0x1c>
 800f51a:	4b25      	ldr	r3, [pc, #148]	@ (800f5b0 <tcp_update_rcv_ann_wnd+0xa4>)
 800f51c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800f520:	4924      	ldr	r1, [pc, #144]	@ (800f5b4 <tcp_update_rcv_ann_wnd+0xa8>)
 800f522:	4825      	ldr	r0, [pc, #148]	@ (800f5b8 <tcp_update_rcv_ann_wnd+0xac>)
 800f524:	f015 ffd0 	bl	80254c8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f52c:	687a      	ldr	r2, [r7, #4]
 800f52e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800f530:	4413      	add	r3, r2
 800f532:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f538:	687a      	ldr	r2, [r7, #4]
 800f53a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800f53c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800f540:	bf28      	it	cs
 800f542:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800f546:	b292      	uxth	r2, r2
 800f548:	4413      	add	r3, r2
 800f54a:	68fa      	ldr	r2, [r7, #12]
 800f54c:	1ad3      	subs	r3, r2, r3
 800f54e:	2b00      	cmp	r3, #0
 800f550:	db08      	blt.n	800f564 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f55e:	68fa      	ldr	r2, [r7, #12]
 800f560:	1ad3      	subs	r3, r2, r3
 800f562:	e020      	b.n	800f5a6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f56c:	1ad3      	subs	r3, r2, r3
 800f56e:	2b00      	cmp	r3, #0
 800f570:	dd03      	ble.n	800f57a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	2200      	movs	r2, #0
 800f576:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f578:	e014      	b.n	800f5a4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f582:	1ad3      	subs	r3, r2, r3
 800f584:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f58c:	d306      	bcc.n	800f59c <tcp_update_rcv_ann_wnd+0x90>
 800f58e:	4b08      	ldr	r3, [pc, #32]	@ (800f5b0 <tcp_update_rcv_ann_wnd+0xa4>)
 800f590:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800f594:	4909      	ldr	r1, [pc, #36]	@ (800f5bc <tcp_update_rcv_ann_wnd+0xb0>)
 800f596:	4808      	ldr	r0, [pc, #32]	@ (800f5b8 <tcp_update_rcv_ann_wnd+0xac>)
 800f598:	f015 ff96 	bl	80254c8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	b29a      	uxth	r2, r3
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800f5a4:	2300      	movs	r3, #0
  }
}
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	3710      	adds	r7, #16
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}
 800f5ae:	bf00      	nop
 800f5b0:	080281d0 	.word	0x080281d0
 800f5b4:	0802842c 	.word	0x0802842c
 800f5b8:	08028214 	.word	0x08028214
 800f5bc:	08028450 	.word	0x08028450

0800f5c0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b084      	sub	sp, #16
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
 800f5c8:	460b      	mov	r3, r1
 800f5ca:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d107      	bne.n	800f5e2 <tcp_recved+0x22>
 800f5d2:	4b1f      	ldr	r3, [pc, #124]	@ (800f650 <tcp_recved+0x90>)
 800f5d4:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800f5d8:	491e      	ldr	r1, [pc, #120]	@ (800f654 <tcp_recved+0x94>)
 800f5da:	481f      	ldr	r0, [pc, #124]	@ (800f658 <tcp_recved+0x98>)
 800f5dc:	f015 ff74 	bl	80254c8 <iprintf>
 800f5e0:	e032      	b.n	800f648 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	7d1b      	ldrb	r3, [r3, #20]
 800f5e6:	2b01      	cmp	r3, #1
 800f5e8:	d106      	bne.n	800f5f8 <tcp_recved+0x38>
 800f5ea:	4b19      	ldr	r3, [pc, #100]	@ (800f650 <tcp_recved+0x90>)
 800f5ec:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800f5f0:	491a      	ldr	r1, [pc, #104]	@ (800f65c <tcp_recved+0x9c>)
 800f5f2:	4819      	ldr	r0, [pc, #100]	@ (800f658 <tcp_recved+0x98>)
 800f5f4:	f015 ff68 	bl	80254c8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f5fc:	887b      	ldrh	r3, [r7, #2]
 800f5fe:	4413      	add	r3, r2
 800f600:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f602:	89fb      	ldrh	r3, [r7, #14]
 800f604:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f608:	d804      	bhi.n	800f614 <tcp_recved+0x54>
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f60e:	89fa      	ldrh	r2, [r7, #14]
 800f610:	429a      	cmp	r2, r3
 800f612:	d204      	bcs.n	800f61e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800f61a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800f61c:	e002      	b.n	800f624 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	89fa      	ldrh	r2, [r7, #14]
 800f622:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f624:	6878      	ldr	r0, [r7, #4]
 800f626:	f7ff ff71 	bl	800f50c <tcp_update_rcv_ann_wnd>
 800f62a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800f632:	d309      	bcc.n	800f648 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	8b5b      	ldrh	r3, [r3, #26]
 800f638:	f043 0302 	orr.w	r3, r3, #2
 800f63c:	b29a      	uxth	r2, r3
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f004 fbaa 	bl	8013d9c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f648:	3710      	adds	r7, #16
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}
 800f64e:	bf00      	nop
 800f650:	080281d0 	.word	0x080281d0
 800f654:	0802846c 	.word	0x0802846c
 800f658:	08028214 	.word	0x08028214
 800f65c:	08028484 	.word	0x08028484

0800f660 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f660:	b480      	push	{r7}
 800f662:	b083      	sub	sp, #12
 800f664:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f666:	2300      	movs	r3, #0
 800f668:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f66a:	4b1e      	ldr	r3, [pc, #120]	@ (800f6e4 <tcp_new_port+0x84>)
 800f66c:	881b      	ldrh	r3, [r3, #0]
 800f66e:	3301      	adds	r3, #1
 800f670:	b29a      	uxth	r2, r3
 800f672:	4b1c      	ldr	r3, [pc, #112]	@ (800f6e4 <tcp_new_port+0x84>)
 800f674:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f676:	4b1b      	ldr	r3, [pc, #108]	@ (800f6e4 <tcp_new_port+0x84>)
 800f678:	881b      	ldrh	r3, [r3, #0]
 800f67a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f67e:	4293      	cmp	r3, r2
 800f680:	d103      	bne.n	800f68a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f682:	4b18      	ldr	r3, [pc, #96]	@ (800f6e4 <tcp_new_port+0x84>)
 800f684:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800f688:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f68a:	2300      	movs	r3, #0
 800f68c:	71fb      	strb	r3, [r7, #7]
 800f68e:	e01e      	b.n	800f6ce <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f690:	79fb      	ldrb	r3, [r7, #7]
 800f692:	4a15      	ldr	r2, [pc, #84]	@ (800f6e8 <tcp_new_port+0x88>)
 800f694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	603b      	str	r3, [r7, #0]
 800f69c:	e011      	b.n	800f6c2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	8ada      	ldrh	r2, [r3, #22]
 800f6a2:	4b10      	ldr	r3, [pc, #64]	@ (800f6e4 <tcp_new_port+0x84>)
 800f6a4:	881b      	ldrh	r3, [r3, #0]
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	d108      	bne.n	800f6bc <tcp_new_port+0x5c>
        n++;
 800f6aa:	88bb      	ldrh	r3, [r7, #4]
 800f6ac:	3301      	adds	r3, #1
 800f6ae:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f6b0:	88bb      	ldrh	r3, [r7, #4]
 800f6b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f6b6:	d3d8      	bcc.n	800f66a <tcp_new_port+0xa>
          return 0;
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	e00d      	b.n	800f6d8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	68db      	ldr	r3, [r3, #12]
 800f6c0:	603b      	str	r3, [r7, #0]
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d1ea      	bne.n	800f69e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f6c8:	79fb      	ldrb	r3, [r7, #7]
 800f6ca:	3301      	adds	r3, #1
 800f6cc:	71fb      	strb	r3, [r7, #7]
 800f6ce:	79fb      	ldrb	r3, [r7, #7]
 800f6d0:	2b03      	cmp	r3, #3
 800f6d2:	d9dd      	bls.n	800f690 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f6d4:	4b03      	ldr	r3, [pc, #12]	@ (800f6e4 <tcp_new_port+0x84>)
 800f6d6:	881b      	ldrh	r3, [r3, #0]
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	370c      	adds	r7, #12
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e2:	4770      	bx	lr
 800f6e4:	2000002c 	.word	0x2000002c
 800f6e8:	0802a2c4 	.word	0x0802a2c4

0800f6ec <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f6ec:	b5b0      	push	{r4, r5, r7, lr}
 800f6ee:	b090      	sub	sp, #64	@ 0x40
 800f6f0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800f6f8:	4b95      	ldr	r3, [pc, #596]	@ (800f950 <tcp_slowtmr+0x264>)
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	3301      	adds	r3, #1
 800f6fe:	4a94      	ldr	r2, [pc, #592]	@ (800f950 <tcp_slowtmr+0x264>)
 800f700:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f702:	4b94      	ldr	r3, [pc, #592]	@ (800f954 <tcp_slowtmr+0x268>)
 800f704:	781b      	ldrb	r3, [r3, #0]
 800f706:	3301      	adds	r3, #1
 800f708:	b2da      	uxtb	r2, r3
 800f70a:	4b92      	ldr	r3, [pc, #584]	@ (800f954 <tcp_slowtmr+0x268>)
 800f70c:	701a      	strb	r2, [r3, #0]
 800f70e:	e000      	b.n	800f712 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800f710:	bf00      	nop
  prev = NULL;
 800f712:	2300      	movs	r3, #0
 800f714:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800f716:	4b90      	ldr	r3, [pc, #576]	@ (800f958 <tcp_slowtmr+0x26c>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f71c:	e29d      	b.n	800fc5a <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f71e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f720:	7d1b      	ldrb	r3, [r3, #20]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d106      	bne.n	800f734 <tcp_slowtmr+0x48>
 800f726:	4b8d      	ldr	r3, [pc, #564]	@ (800f95c <tcp_slowtmr+0x270>)
 800f728:	f240 42be 	movw	r2, #1214	@ 0x4be
 800f72c:	498c      	ldr	r1, [pc, #560]	@ (800f960 <tcp_slowtmr+0x274>)
 800f72e:	488d      	ldr	r0, [pc, #564]	@ (800f964 <tcp_slowtmr+0x278>)
 800f730:	f015 feca 	bl	80254c8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f736:	7d1b      	ldrb	r3, [r3, #20]
 800f738:	2b01      	cmp	r3, #1
 800f73a:	d106      	bne.n	800f74a <tcp_slowtmr+0x5e>
 800f73c:	4b87      	ldr	r3, [pc, #540]	@ (800f95c <tcp_slowtmr+0x270>)
 800f73e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800f742:	4989      	ldr	r1, [pc, #548]	@ (800f968 <tcp_slowtmr+0x27c>)
 800f744:	4887      	ldr	r0, [pc, #540]	@ (800f964 <tcp_slowtmr+0x278>)
 800f746:	f015 febf 	bl	80254c8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f74a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f74c:	7d1b      	ldrb	r3, [r3, #20]
 800f74e:	2b0a      	cmp	r3, #10
 800f750:	d106      	bne.n	800f760 <tcp_slowtmr+0x74>
 800f752:	4b82      	ldr	r3, [pc, #520]	@ (800f95c <tcp_slowtmr+0x270>)
 800f754:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800f758:	4984      	ldr	r1, [pc, #528]	@ (800f96c <tcp_slowtmr+0x280>)
 800f75a:	4882      	ldr	r0, [pc, #520]	@ (800f964 <tcp_slowtmr+0x278>)
 800f75c:	f015 feb4 	bl	80254c8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f762:	7f9a      	ldrb	r2, [r3, #30]
 800f764:	4b7b      	ldr	r3, [pc, #492]	@ (800f954 <tcp_slowtmr+0x268>)
 800f766:	781b      	ldrb	r3, [r3, #0]
 800f768:	429a      	cmp	r2, r3
 800f76a:	d105      	bne.n	800f778 <tcp_slowtmr+0x8c>
      prev = pcb;
 800f76c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f76e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f772:	68db      	ldr	r3, [r3, #12]
 800f774:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800f776:	e270      	b.n	800fc5a <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800f778:	4b76      	ldr	r3, [pc, #472]	@ (800f954 <tcp_slowtmr+0x268>)
 800f77a:	781a      	ldrb	r2, [r3, #0]
 800f77c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f77e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800f780:	2300      	movs	r3, #0
 800f782:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800f786:	2300      	movs	r3, #0
 800f788:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f78c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f78e:	7d1b      	ldrb	r3, [r3, #20]
 800f790:	2b02      	cmp	r3, #2
 800f792:	d10a      	bne.n	800f7aa <tcp_slowtmr+0xbe>
 800f794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f796:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f79a:	2b05      	cmp	r3, #5
 800f79c:	d905      	bls.n	800f7aa <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800f79e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f7a2:	3301      	adds	r3, #1
 800f7a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f7a8:	e11e      	b.n	800f9e8 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f7aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f7b0:	2b0b      	cmp	r3, #11
 800f7b2:	d905      	bls.n	800f7c0 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800f7b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f7b8:	3301      	adds	r3, #1
 800f7ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f7be:	e113      	b.n	800f9e8 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800f7c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7c2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d075      	beq.n	800f8b6 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f7ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d006      	beq.n	800f7e0 <tcp_slowtmr+0xf4>
 800f7d2:	4b62      	ldr	r3, [pc, #392]	@ (800f95c <tcp_slowtmr+0x270>)
 800f7d4:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800f7d8:	4965      	ldr	r1, [pc, #404]	@ (800f970 <tcp_slowtmr+0x284>)
 800f7da:	4862      	ldr	r0, [pc, #392]	@ (800f964 <tcp_slowtmr+0x278>)
 800f7dc:	f015 fe74 	bl	80254c8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d106      	bne.n	800f7f6 <tcp_slowtmr+0x10a>
 800f7e8:	4b5c      	ldr	r3, [pc, #368]	@ (800f95c <tcp_slowtmr+0x270>)
 800f7ea:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800f7ee:	4961      	ldr	r1, [pc, #388]	@ (800f974 <tcp_slowtmr+0x288>)
 800f7f0:	485c      	ldr	r0, [pc, #368]	@ (800f964 <tcp_slowtmr+0x278>)
 800f7f2:	f015 fe69 	bl	80254c8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f7f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7f8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800f7fc:	2b0b      	cmp	r3, #11
 800f7fe:	d905      	bls.n	800f80c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800f800:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f804:	3301      	adds	r3, #1
 800f806:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f80a:	e0ed      	b.n	800f9e8 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f80c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f80e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f812:	3b01      	subs	r3, #1
 800f814:	4a58      	ldr	r2, [pc, #352]	@ (800f978 <tcp_slowtmr+0x28c>)
 800f816:	5cd3      	ldrb	r3, [r2, r3]
 800f818:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f81a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f81c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f820:	7c7a      	ldrb	r2, [r7, #17]
 800f822:	429a      	cmp	r2, r3
 800f824:	d907      	bls.n	800f836 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800f826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f828:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f82c:	3301      	adds	r3, #1
 800f82e:	b2da      	uxtb	r2, r3
 800f830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f832:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800f836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f838:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f83c:	7c7a      	ldrb	r2, [r7, #17]
 800f83e:	429a      	cmp	r2, r3
 800f840:	f200 80d2 	bhi.w	800f9e8 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800f844:	2301      	movs	r3, #1
 800f846:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800f848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f84a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d108      	bne.n	800f864 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f852:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f854:	f005 f94a 	bl	8014aec <tcp_zero_window_probe>
 800f858:	4603      	mov	r3, r0
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d014      	beq.n	800f888 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800f85e:	2300      	movs	r3, #0
 800f860:	623b      	str	r3, [r7, #32]
 800f862:	e011      	b.n	800f888 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f866:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f86a:	4619      	mov	r1, r3
 800f86c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f86e:	f004 f80f 	bl	8013890 <tcp_split_unsent_seg>
 800f872:	4603      	mov	r3, r0
 800f874:	2b00      	cmp	r3, #0
 800f876:	d107      	bne.n	800f888 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800f878:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f87a:	f004 fa8f 	bl	8013d9c <tcp_output>
 800f87e:	4603      	mov	r3, r0
 800f880:	2b00      	cmp	r3, #0
 800f882:	d101      	bne.n	800f888 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800f884:	2300      	movs	r3, #0
 800f886:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800f888:	6a3b      	ldr	r3, [r7, #32]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	f000 80ac 	beq.w	800f9e8 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800f890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f892:	2200      	movs	r2, #0
 800f894:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f89a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f89e:	2b06      	cmp	r3, #6
 800f8a0:	f200 80a2 	bhi.w	800f9e8 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800f8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8a6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	b2da      	uxtb	r2, r3
 800f8ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8b0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800f8b4:	e098      	b.n	800f9e8 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f8b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	db0f      	blt.n	800f8e0 <tcp_slowtmr+0x1f4>
 800f8c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f8c6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800f8ca:	4293      	cmp	r3, r2
 800f8cc:	d008      	beq.n	800f8e0 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800f8ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f8d4:	b29b      	uxth	r3, r3
 800f8d6:	3301      	adds	r3, #1
 800f8d8:	b29b      	uxth	r3, r3
 800f8da:	b21a      	sxth	r2, r3
 800f8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8de:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800f8e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8e2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800f8e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8e8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800f8ec:	429a      	cmp	r2, r3
 800f8ee:	db7b      	blt.n	800f9e8 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f8f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f8f2:	f004 fd47 	bl	8014384 <tcp_rexmit_rto_prepare>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d007      	beq.n	800f90c <tcp_slowtmr+0x220>
 800f8fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f900:	2b00      	cmp	r3, #0
 800f902:	d171      	bne.n	800f9e8 <tcp_slowtmr+0x2fc>
 800f904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f906:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d06d      	beq.n	800f9e8 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800f90c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f90e:	7d1b      	ldrb	r3, [r3, #20]
 800f910:	2b02      	cmp	r3, #2
 800f912:	d03a      	beq.n	800f98a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f916:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f91a:	2b0c      	cmp	r3, #12
 800f91c:	bf28      	it	cs
 800f91e:	230c      	movcs	r3, #12
 800f920:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f924:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f928:	10db      	asrs	r3, r3, #3
 800f92a:	b21b      	sxth	r3, r3
 800f92c:	461a      	mov	r2, r3
 800f92e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f930:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f934:	4413      	add	r3, r2
 800f936:	7efa      	ldrb	r2, [r7, #27]
 800f938:	4910      	ldr	r1, [pc, #64]	@ (800f97c <tcp_slowtmr+0x290>)
 800f93a:	5c8a      	ldrb	r2, [r1, r2]
 800f93c:	4093      	lsls	r3, r2
 800f93e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f940:	697b      	ldr	r3, [r7, #20]
 800f942:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800f946:	4293      	cmp	r3, r2
 800f948:	dc1a      	bgt.n	800f980 <tcp_slowtmr+0x294>
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	b21a      	sxth	r2, r3
 800f94e:	e019      	b.n	800f984 <tcp_slowtmr+0x298>
 800f950:	2000fe80 	.word	0x2000fe80
 800f954:	2000fe96 	.word	0x2000fe96
 800f958:	2000fe8c 	.word	0x2000fe8c
 800f95c:	080281d0 	.word	0x080281d0
 800f960:	08028514 	.word	0x08028514
 800f964:	08028214 	.word	0x08028214
 800f968:	08028540 	.word	0x08028540
 800f96c:	0802856c 	.word	0x0802856c
 800f970:	0802859c 	.word	0x0802859c
 800f974:	080285d0 	.word	0x080285d0
 800f978:	0802a2bc 	.word	0x0802a2bc
 800f97c:	0802a2ac 	.word	0x0802a2ac
 800f980:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800f984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f986:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800f98a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f98c:	2200      	movs	r2, #0
 800f98e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f992:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f998:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f99c:	4293      	cmp	r3, r2
 800f99e:	bf28      	it	cs
 800f9a0:	4613      	movcs	r3, r2
 800f9a2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f9a4:	8a7b      	ldrh	r3, [r7, #18]
 800f9a6:	085b      	lsrs	r3, r3, #1
 800f9a8:	b29a      	uxth	r2, r3
 800f9aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9ac:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f9b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f9b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f9ba:	005b      	lsls	r3, r3, #1
 800f9bc:	b29b      	uxth	r3, r3
 800f9be:	429a      	cmp	r2, r3
 800f9c0:	d206      	bcs.n	800f9d0 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f9c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f9c6:	005b      	lsls	r3, r3, #1
 800f9c8:	b29a      	uxth	r2, r3
 800f9ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9cc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800f9d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9d2:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800f9d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9d6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800f9da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9dc:	2200      	movs	r2, #0
 800f9de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800f9e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f9e4:	f004 fd3e 	bl	8014464 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800f9e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9ea:	7d1b      	ldrb	r3, [r3, #20]
 800f9ec:	2b06      	cmp	r3, #6
 800f9ee:	d111      	bne.n	800fa14 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800f9f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9f2:	8b5b      	ldrh	r3, [r3, #26]
 800f9f4:	f003 0310 	and.w	r3, r3, #16
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d00b      	beq.n	800fa14 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f9fc:	4b9c      	ldr	r3, [pc, #624]	@ (800fc70 <tcp_slowtmr+0x584>)
 800f9fe:	681a      	ldr	r2, [r3, #0]
 800fa00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa02:	6a1b      	ldr	r3, [r3, #32]
 800fa04:	1ad3      	subs	r3, r2, r3
 800fa06:	2b28      	cmp	r3, #40	@ 0x28
 800fa08:	d904      	bls.n	800fa14 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800fa0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fa0e:	3301      	adds	r3, #1
 800fa10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fa14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa16:	7a5b      	ldrb	r3, [r3, #9]
 800fa18:	f003 0308 	and.w	r3, r3, #8
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d04a      	beq.n	800fab6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800fa20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa22:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fa24:	2b04      	cmp	r3, #4
 800fa26:	d003      	beq.n	800fa30 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800fa28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa2a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800fa2c:	2b07      	cmp	r3, #7
 800fa2e:	d142      	bne.n	800fab6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fa30:	4b8f      	ldr	r3, [pc, #572]	@ (800fc70 <tcp_slowtmr+0x584>)
 800fa32:	681a      	ldr	r2, [r3, #0]
 800fa34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa36:	6a1b      	ldr	r3, [r3, #32]
 800fa38:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800fa3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa3c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800fa40:	4b8c      	ldr	r3, [pc, #560]	@ (800fc74 <tcp_slowtmr+0x588>)
 800fa42:	440b      	add	r3, r1
 800fa44:	498c      	ldr	r1, [pc, #560]	@ (800fc78 <tcp_slowtmr+0x58c>)
 800fa46:	fba1 1303 	umull	r1, r3, r1, r3
 800fa4a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fa4c:	429a      	cmp	r2, r3
 800fa4e:	d90a      	bls.n	800fa66 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800fa50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fa54:	3301      	adds	r3, #1
 800fa56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800fa5a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fa5e:	3301      	adds	r3, #1
 800fa60:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800fa64:	e027      	b.n	800fab6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fa66:	4b82      	ldr	r3, [pc, #520]	@ (800fc70 <tcp_slowtmr+0x584>)
 800fa68:	681a      	ldr	r2, [r3, #0]
 800fa6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa6c:	6a1b      	ldr	r3, [r3, #32]
 800fa6e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800fa70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa72:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800fa76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa78:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	4b7f      	ldr	r3, [pc, #508]	@ (800fc7c <tcp_slowtmr+0x590>)
 800fa80:	fb00 f303 	mul.w	r3, r0, r3
 800fa84:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800fa86:	497c      	ldr	r1, [pc, #496]	@ (800fc78 <tcp_slowtmr+0x58c>)
 800fa88:	fba1 1303 	umull	r1, r3, r1, r3
 800fa8c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d911      	bls.n	800fab6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800fa92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fa94:	f004 ffea 	bl	8014a6c <tcp_keepalive>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800fa9e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d107      	bne.n	800fab6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800faa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800faa8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800faac:	3301      	adds	r3, #1
 800faae:	b2da      	uxtb	r2, r3
 800fab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fab2:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800fab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d011      	beq.n	800fae2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800fabe:	4b6c      	ldr	r3, [pc, #432]	@ (800fc70 <tcp_slowtmr+0x584>)
 800fac0:	681a      	ldr	r2, [r3, #0]
 800fac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fac4:	6a1b      	ldr	r3, [r3, #32]
 800fac6:	1ad2      	subs	r2, r2, r3
 800fac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800faca:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800face:	4619      	mov	r1, r3
 800fad0:	460b      	mov	r3, r1
 800fad2:	005b      	lsls	r3, r3, #1
 800fad4:	440b      	add	r3, r1
 800fad6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800fad8:	429a      	cmp	r2, r3
 800fada:	d302      	bcc.n	800fae2 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800fadc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fade:	f000 feab 	bl	8010838 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800fae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fae4:	7d1b      	ldrb	r3, [r3, #20]
 800fae6:	2b03      	cmp	r3, #3
 800fae8:	d10b      	bne.n	800fb02 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800faea:	4b61      	ldr	r3, [pc, #388]	@ (800fc70 <tcp_slowtmr+0x584>)
 800faec:	681a      	ldr	r2, [r3, #0]
 800faee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800faf0:	6a1b      	ldr	r3, [r3, #32]
 800faf2:	1ad3      	subs	r3, r2, r3
 800faf4:	2b28      	cmp	r3, #40	@ 0x28
 800faf6:	d904      	bls.n	800fb02 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800faf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fafc:	3301      	adds	r3, #1
 800fafe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800fb02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb04:	7d1b      	ldrb	r3, [r3, #20]
 800fb06:	2b09      	cmp	r3, #9
 800fb08:	d10b      	bne.n	800fb22 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fb0a:	4b59      	ldr	r3, [pc, #356]	@ (800fc70 <tcp_slowtmr+0x584>)
 800fb0c:	681a      	ldr	r2, [r3, #0]
 800fb0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb10:	6a1b      	ldr	r3, [r3, #32]
 800fb12:	1ad3      	subs	r3, r2, r3
 800fb14:	2bf0      	cmp	r3, #240	@ 0xf0
 800fb16:	d904      	bls.n	800fb22 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800fb18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fb1c:	3301      	adds	r3, #1
 800fb1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800fb22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d060      	beq.n	800fbec <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800fb2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb30:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800fb32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fb34:	f000 fccc 	bl	80104d0 <tcp_pcb_purge>
      if (prev != NULL) {
 800fb38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d010      	beq.n	800fb60 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fb3e:	4b50      	ldr	r3, [pc, #320]	@ (800fc80 <tcp_slowtmr+0x594>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fb44:	429a      	cmp	r2, r3
 800fb46:	d106      	bne.n	800fb56 <tcp_slowtmr+0x46a>
 800fb48:	4b4e      	ldr	r3, [pc, #312]	@ (800fc84 <tcp_slowtmr+0x598>)
 800fb4a:	f240 526d 	movw	r2, #1389	@ 0x56d
 800fb4e:	494e      	ldr	r1, [pc, #312]	@ (800fc88 <tcp_slowtmr+0x59c>)
 800fb50:	484e      	ldr	r0, [pc, #312]	@ (800fc8c <tcp_slowtmr+0x5a0>)
 800fb52:	f015 fcb9 	bl	80254c8 <iprintf>
        prev->next = pcb->next;
 800fb56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb58:	68da      	ldr	r2, [r3, #12]
 800fb5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb5c:	60da      	str	r2, [r3, #12]
 800fb5e:	e00f      	b.n	800fb80 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800fb60:	4b47      	ldr	r3, [pc, #284]	@ (800fc80 <tcp_slowtmr+0x594>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d006      	beq.n	800fb78 <tcp_slowtmr+0x48c>
 800fb6a:	4b46      	ldr	r3, [pc, #280]	@ (800fc84 <tcp_slowtmr+0x598>)
 800fb6c:	f240 5271 	movw	r2, #1393	@ 0x571
 800fb70:	4947      	ldr	r1, [pc, #284]	@ (800fc90 <tcp_slowtmr+0x5a4>)
 800fb72:	4846      	ldr	r0, [pc, #280]	@ (800fc8c <tcp_slowtmr+0x5a0>)
 800fb74:	f015 fca8 	bl	80254c8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800fb78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb7a:	68db      	ldr	r3, [r3, #12]
 800fb7c:	4a40      	ldr	r2, [pc, #256]	@ (800fc80 <tcp_slowtmr+0x594>)
 800fb7e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800fb80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d013      	beq.n	800fbb0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fb88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb8a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800fb8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb8e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800fb90:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800fb92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb94:	3304      	adds	r3, #4
 800fb96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fb98:	8ad2      	ldrh	r2, [r2, #22]
 800fb9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fb9c:	8b09      	ldrh	r1, [r1, #24]
 800fb9e:	9102      	str	r1, [sp, #8]
 800fba0:	9201      	str	r2, [sp, #4]
 800fba2:	9300      	str	r3, [sp, #0]
 800fba4:	462b      	mov	r3, r5
 800fba6:	4622      	mov	r2, r4
 800fba8:	4601      	mov	r1, r0
 800fbaa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fbac:	f004 feaa 	bl	8014904 <tcp_rst>
      err_arg = pcb->callback_arg;
 800fbb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbb2:	691b      	ldr	r3, [r3, #16]
 800fbb4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800fbb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbb8:	7d1b      	ldrb	r3, [r3, #20]
 800fbba:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800fbbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbbe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800fbc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbc2:	68db      	ldr	r3, [r3, #12]
 800fbc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800fbc6:	6838      	ldr	r0, [r7, #0]
 800fbc8:	f7ff f89e 	bl	800ed08 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800fbcc:	4b31      	ldr	r3, [pc, #196]	@ (800fc94 <tcp_slowtmr+0x5a8>)
 800fbce:	2200      	movs	r2, #0
 800fbd0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d004      	beq.n	800fbe2 <tcp_slowtmr+0x4f6>
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	f06f 010c 	mvn.w	r1, #12
 800fbde:	68b8      	ldr	r0, [r7, #8]
 800fbe0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800fbe2:	4b2c      	ldr	r3, [pc, #176]	@ (800fc94 <tcp_slowtmr+0x5a8>)
 800fbe4:	781b      	ldrb	r3, [r3, #0]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d037      	beq.n	800fc5a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800fbea:	e592      	b.n	800f712 <tcp_slowtmr+0x26>
      prev = pcb;
 800fbec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbee:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800fbf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbf2:	68db      	ldr	r3, [r3, #12]
 800fbf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800fbf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbf8:	7f1b      	ldrb	r3, [r3, #28]
 800fbfa:	3301      	adds	r3, #1
 800fbfc:	b2da      	uxtb	r2, r3
 800fbfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc00:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800fc02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc04:	7f1a      	ldrb	r2, [r3, #28]
 800fc06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc08:	7f5b      	ldrb	r3, [r3, #29]
 800fc0a:	429a      	cmp	r2, r3
 800fc0c:	d325      	bcc.n	800fc5a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800fc0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc10:	2200      	movs	r2, #0
 800fc12:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800fc14:	4b1f      	ldr	r3, [pc, #124]	@ (800fc94 <tcp_slowtmr+0x5a8>)
 800fc16:	2200      	movs	r2, #0
 800fc18:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800fc1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d00b      	beq.n	800fc3c <tcp_slowtmr+0x550>
 800fc24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fc2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc2c:	6912      	ldr	r2, [r2, #16]
 800fc2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fc30:	4610      	mov	r0, r2
 800fc32:	4798      	blx	r3
 800fc34:	4603      	mov	r3, r0
 800fc36:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800fc3a:	e002      	b.n	800fc42 <tcp_slowtmr+0x556>
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800fc42:	4b14      	ldr	r3, [pc, #80]	@ (800fc94 <tcp_slowtmr+0x5a8>)
 800fc44:	781b      	ldrb	r3, [r3, #0]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	f47f ad62 	bne.w	800f710 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800fc4c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d102      	bne.n	800fc5a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800fc54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fc56:	f004 f8a1 	bl	8013d9c <tcp_output>
  while (pcb != NULL) {
 800fc5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	f47f ad5e 	bne.w	800f71e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800fc62:	2300      	movs	r3, #0
 800fc64:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800fc66:	4b0c      	ldr	r3, [pc, #48]	@ (800fc98 <tcp_slowtmr+0x5ac>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800fc6c:	e069      	b.n	800fd42 <tcp_slowtmr+0x656>
 800fc6e:	bf00      	nop
 800fc70:	2000fe80 	.word	0x2000fe80
 800fc74:	000a4cb8 	.word	0x000a4cb8
 800fc78:	10624dd3 	.word	0x10624dd3
 800fc7c:	000124f8 	.word	0x000124f8
 800fc80:	2000fe8c 	.word	0x2000fe8c
 800fc84:	080281d0 	.word	0x080281d0
 800fc88:	08028608 	.word	0x08028608
 800fc8c:	08028214 	.word	0x08028214
 800fc90:	08028634 	.word	0x08028634
 800fc94:	2000fe94 	.word	0x2000fe94
 800fc98:	2000fe90 	.word	0x2000fe90
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fc9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc9e:	7d1b      	ldrb	r3, [r3, #20]
 800fca0:	2b0a      	cmp	r3, #10
 800fca2:	d006      	beq.n	800fcb2 <tcp_slowtmr+0x5c6>
 800fca4:	4b2b      	ldr	r3, [pc, #172]	@ (800fd54 <tcp_slowtmr+0x668>)
 800fca6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800fcaa:	492b      	ldr	r1, [pc, #172]	@ (800fd58 <tcp_slowtmr+0x66c>)
 800fcac:	482b      	ldr	r0, [pc, #172]	@ (800fd5c <tcp_slowtmr+0x670>)
 800fcae:	f015 fc0b 	bl	80254c8 <iprintf>
    pcb_remove = 0;
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fcb8:	4b29      	ldr	r3, [pc, #164]	@ (800fd60 <tcp_slowtmr+0x674>)
 800fcba:	681a      	ldr	r2, [r3, #0]
 800fcbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcbe:	6a1b      	ldr	r3, [r3, #32]
 800fcc0:	1ad3      	subs	r3, r2, r3
 800fcc2:	2bf0      	cmp	r3, #240	@ 0xf0
 800fcc4:	d904      	bls.n	800fcd0 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800fcc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fcca:	3301      	adds	r3, #1
 800fccc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fcd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d02f      	beq.n	800fd38 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800fcd8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fcda:	f000 fbf9 	bl	80104d0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800fcde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d010      	beq.n	800fd06 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800fce4:	4b1f      	ldr	r3, [pc, #124]	@ (800fd64 <tcp_slowtmr+0x678>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fcea:	429a      	cmp	r2, r3
 800fcec:	d106      	bne.n	800fcfc <tcp_slowtmr+0x610>
 800fcee:	4b19      	ldr	r3, [pc, #100]	@ (800fd54 <tcp_slowtmr+0x668>)
 800fcf0:	f240 52af 	movw	r2, #1455	@ 0x5af
 800fcf4:	491c      	ldr	r1, [pc, #112]	@ (800fd68 <tcp_slowtmr+0x67c>)
 800fcf6:	4819      	ldr	r0, [pc, #100]	@ (800fd5c <tcp_slowtmr+0x670>)
 800fcf8:	f015 fbe6 	bl	80254c8 <iprintf>
        prev->next = pcb->next;
 800fcfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcfe:	68da      	ldr	r2, [r3, #12]
 800fd00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd02:	60da      	str	r2, [r3, #12]
 800fd04:	e00f      	b.n	800fd26 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800fd06:	4b17      	ldr	r3, [pc, #92]	@ (800fd64 <tcp_slowtmr+0x678>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fd0c:	429a      	cmp	r2, r3
 800fd0e:	d006      	beq.n	800fd1e <tcp_slowtmr+0x632>
 800fd10:	4b10      	ldr	r3, [pc, #64]	@ (800fd54 <tcp_slowtmr+0x668>)
 800fd12:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800fd16:	4915      	ldr	r1, [pc, #84]	@ (800fd6c <tcp_slowtmr+0x680>)
 800fd18:	4810      	ldr	r0, [pc, #64]	@ (800fd5c <tcp_slowtmr+0x670>)
 800fd1a:	f015 fbd5 	bl	80254c8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800fd1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd20:	68db      	ldr	r3, [r3, #12]
 800fd22:	4a10      	ldr	r2, [pc, #64]	@ (800fd64 <tcp_slowtmr+0x678>)
 800fd24:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800fd26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd28:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800fd2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd2c:	68db      	ldr	r3, [r3, #12]
 800fd2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800fd30:	69f8      	ldr	r0, [r7, #28]
 800fd32:	f7fe ffe9 	bl	800ed08 <tcp_free>
 800fd36:	e004      	b.n	800fd42 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800fd38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800fd3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd3e:	68db      	ldr	r3, [r3, #12]
 800fd40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800fd42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d1a9      	bne.n	800fc9c <tcp_slowtmr+0x5b0>
    }
  }
}
 800fd48:	bf00      	nop
 800fd4a:	bf00      	nop
 800fd4c:	3730      	adds	r7, #48	@ 0x30
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bdb0      	pop	{r4, r5, r7, pc}
 800fd52:	bf00      	nop
 800fd54:	080281d0 	.word	0x080281d0
 800fd58:	08028660 	.word	0x08028660
 800fd5c:	08028214 	.word	0x08028214
 800fd60:	2000fe80 	.word	0x2000fe80
 800fd64:	2000fe90 	.word	0x2000fe90
 800fd68:	08028690 	.word	0x08028690
 800fd6c:	080286b8 	.word	0x080286b8

0800fd70 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b082      	sub	sp, #8
 800fd74:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800fd76:	4b2d      	ldr	r3, [pc, #180]	@ (800fe2c <tcp_fasttmr+0xbc>)
 800fd78:	781b      	ldrb	r3, [r3, #0]
 800fd7a:	3301      	adds	r3, #1
 800fd7c:	b2da      	uxtb	r2, r3
 800fd7e:	4b2b      	ldr	r3, [pc, #172]	@ (800fe2c <tcp_fasttmr+0xbc>)
 800fd80:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800fd82:	4b2b      	ldr	r3, [pc, #172]	@ (800fe30 <tcp_fasttmr+0xc0>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fd88:	e048      	b.n	800fe1c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	7f9a      	ldrb	r2, [r3, #30]
 800fd8e:	4b27      	ldr	r3, [pc, #156]	@ (800fe2c <tcp_fasttmr+0xbc>)
 800fd90:	781b      	ldrb	r3, [r3, #0]
 800fd92:	429a      	cmp	r2, r3
 800fd94:	d03f      	beq.n	800fe16 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800fd96:	4b25      	ldr	r3, [pc, #148]	@ (800fe2c <tcp_fasttmr+0xbc>)
 800fd98:	781a      	ldrb	r2, [r3, #0]
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	8b5b      	ldrh	r3, [r3, #26]
 800fda2:	f003 0301 	and.w	r3, r3, #1
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d010      	beq.n	800fdcc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	8b5b      	ldrh	r3, [r3, #26]
 800fdae:	f043 0302 	orr.w	r3, r3, #2
 800fdb2:	b29a      	uxth	r2, r3
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800fdb8:	6878      	ldr	r0, [r7, #4]
 800fdba:	f003 ffef 	bl	8013d9c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	8b5b      	ldrh	r3, [r3, #26]
 800fdc2:	f023 0303 	bic.w	r3, r3, #3
 800fdc6:	b29a      	uxth	r2, r3
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	8b5b      	ldrh	r3, [r3, #26]
 800fdd0:	f003 0308 	and.w	r3, r3, #8
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d009      	beq.n	800fdec <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	8b5b      	ldrh	r3, [r3, #26]
 800fddc:	f023 0308 	bic.w	r3, r3, #8
 800fde0:	b29a      	uxth	r2, r3
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	f7ff f922 	bl	800f030 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	68db      	ldr	r3, [r3, #12]
 800fdf0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d00a      	beq.n	800fe10 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800fdfa:	4b0e      	ldr	r3, [pc, #56]	@ (800fe34 <tcp_fasttmr+0xc4>)
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f000 f819 	bl	800fe38 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800fe06:	4b0b      	ldr	r3, [pc, #44]	@ (800fe34 <tcp_fasttmr+0xc4>)
 800fe08:	781b      	ldrb	r3, [r3, #0]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d000      	beq.n	800fe10 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800fe0e:	e7b8      	b.n	800fd82 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	607b      	str	r3, [r7, #4]
 800fe14:	e002      	b.n	800fe1c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	68db      	ldr	r3, [r3, #12]
 800fe1a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d1b3      	bne.n	800fd8a <tcp_fasttmr+0x1a>
    }
  }
}
 800fe22:	bf00      	nop
 800fe24:	bf00      	nop
 800fe26:	3708      	adds	r7, #8
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}
 800fe2c:	2000fe96 	.word	0x2000fe96
 800fe30:	2000fe8c 	.word	0x2000fe8c
 800fe34:	2000fe94 	.word	0x2000fe94

0800fe38 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800fe38:	b590      	push	{r4, r7, lr}
 800fe3a:	b085      	sub	sp, #20
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d109      	bne.n	800fe5a <tcp_process_refused_data+0x22>
 800fe46:	4b37      	ldr	r3, [pc, #220]	@ (800ff24 <tcp_process_refused_data+0xec>)
 800fe48:	f240 6209 	movw	r2, #1545	@ 0x609
 800fe4c:	4936      	ldr	r1, [pc, #216]	@ (800ff28 <tcp_process_refused_data+0xf0>)
 800fe4e:	4837      	ldr	r0, [pc, #220]	@ (800ff2c <tcp_process_refused_data+0xf4>)
 800fe50:	f015 fb3a 	bl	80254c8 <iprintf>
 800fe54:	f06f 030f 	mvn.w	r3, #15
 800fe58:	e060      	b.n	800ff1c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fe5e:	7b5b      	ldrb	r3, [r3, #13]
 800fe60:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fe66:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d00b      	beq.n	800fe90 <tcp_process_refused_data+0x58>
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	6918      	ldr	r0, [r3, #16]
 800fe82:	2300      	movs	r3, #0
 800fe84:	68ba      	ldr	r2, [r7, #8]
 800fe86:	6879      	ldr	r1, [r7, #4]
 800fe88:	47a0      	blx	r4
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	73fb      	strb	r3, [r7, #15]
 800fe8e:	e007      	b.n	800fea0 <tcp_process_refused_data+0x68>
 800fe90:	2300      	movs	r3, #0
 800fe92:	68ba      	ldr	r2, [r7, #8]
 800fe94:	6879      	ldr	r1, [r7, #4]
 800fe96:	2000      	movs	r0, #0
 800fe98:	f000 f8a4 	bl	800ffe4 <tcp_recv_null>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800fea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d12a      	bne.n	800fefe <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800fea8:	7bbb      	ldrb	r3, [r7, #14]
 800feaa:	f003 0320 	and.w	r3, r3, #32
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d033      	beq.n	800ff1a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800feb6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800feba:	d005      	beq.n	800fec8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fec0:	3301      	adds	r3, #1
 800fec2:	b29a      	uxth	r2, r3
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d00b      	beq.n	800feea <tcp_process_refused_data+0xb2>
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	6918      	ldr	r0, [r3, #16]
 800fedc:	2300      	movs	r3, #0
 800fede:	2200      	movs	r2, #0
 800fee0:	6879      	ldr	r1, [r7, #4]
 800fee2:	47a0      	blx	r4
 800fee4:	4603      	mov	r3, r0
 800fee6:	73fb      	strb	r3, [r7, #15]
 800fee8:	e001      	b.n	800feee <tcp_process_refused_data+0xb6>
 800feea:	2300      	movs	r3, #0
 800feec:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800feee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fef2:	f113 0f0d 	cmn.w	r3, #13
 800fef6:	d110      	bne.n	800ff1a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800fef8:	f06f 030c 	mvn.w	r3, #12
 800fefc:	e00e      	b.n	800ff1c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800fefe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff02:	f113 0f0d 	cmn.w	r3, #13
 800ff06:	d102      	bne.n	800ff0e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ff08:	f06f 030c 	mvn.w	r3, #12
 800ff0c:	e006      	b.n	800ff1c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	68ba      	ldr	r2, [r7, #8]
 800ff12:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800ff14:	f06f 0304 	mvn.w	r3, #4
 800ff18:	e000      	b.n	800ff1c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ff1a:	2300      	movs	r3, #0
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3714      	adds	r7, #20
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd90      	pop	{r4, r7, pc}
 800ff24:	080281d0 	.word	0x080281d0
 800ff28:	080286e0 	.word	0x080286e0
 800ff2c:	08028214 	.word	0x08028214

0800ff30 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b084      	sub	sp, #16
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ff38:	e007      	b.n	800ff4a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f000 f80a 	bl	800ff5a <tcp_seg_free>
    seg = next;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d1f4      	bne.n	800ff3a <tcp_segs_free+0xa>
  }
}
 800ff50:	bf00      	nop
 800ff52:	bf00      	nop
 800ff54:	3710      	adds	r7, #16
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bd80      	pop	{r7, pc}

0800ff5a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ff5a:	b580      	push	{r7, lr}
 800ff5c:	b082      	sub	sp, #8
 800ff5e:	af00      	add	r7, sp, #0
 800ff60:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d00c      	beq.n	800ff82 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	685b      	ldr	r3, [r3, #4]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d004      	beq.n	800ff7a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	685b      	ldr	r3, [r3, #4]
 800ff74:	4618      	mov	r0, r3
 800ff76:	f7fe fc0b 	bl	800e790 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ff7a:	6879      	ldr	r1, [r7, #4]
 800ff7c:	2003      	movs	r0, #3
 800ff7e:	f7fd fcf9 	bl	800d974 <memp_free>
  }
}
 800ff82:	bf00      	nop
 800ff84:	3708      	adds	r7, #8
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bd80      	pop	{r7, pc}
	...

0800ff8c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b084      	sub	sp, #16
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d106      	bne.n	800ffa8 <tcp_seg_copy+0x1c>
 800ff9a:	4b0f      	ldr	r3, [pc, #60]	@ (800ffd8 <tcp_seg_copy+0x4c>)
 800ff9c:	f240 6282 	movw	r2, #1666	@ 0x682
 800ffa0:	490e      	ldr	r1, [pc, #56]	@ (800ffdc <tcp_seg_copy+0x50>)
 800ffa2:	480f      	ldr	r0, [pc, #60]	@ (800ffe0 <tcp_seg_copy+0x54>)
 800ffa4:	f015 fa90 	bl	80254c8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ffa8:	2003      	movs	r0, #3
 800ffaa:	f7fd fc6d 	bl	800d888 <memp_malloc>
 800ffae:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d101      	bne.n	800ffba <tcp_seg_copy+0x2e>
    return NULL;
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	e00a      	b.n	800ffd0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ffba:	2210      	movs	r2, #16
 800ffbc:	6879      	ldr	r1, [r7, #4]
 800ffbe:	68f8      	ldr	r0, [r7, #12]
 800ffc0:	f015 fd2f 	bl	8025a22 <memcpy>
  pbuf_ref(cseg->p);
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	685b      	ldr	r3, [r3, #4]
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f7fe fc87 	bl	800e8dc <pbuf_ref>
  return cseg;
 800ffce:	68fb      	ldr	r3, [r7, #12]
}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	3710      	adds	r7, #16
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}
 800ffd8:	080281d0 	.word	0x080281d0
 800ffdc:	08028724 	.word	0x08028724
 800ffe0:	08028214 	.word	0x08028214

0800ffe4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b084      	sub	sp, #16
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	60f8      	str	r0, [r7, #12]
 800ffec:	60b9      	str	r1, [r7, #8]
 800ffee:	607a      	str	r2, [r7, #4]
 800fff0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d109      	bne.n	801000c <tcp_recv_null+0x28>
 800fff8:	4b12      	ldr	r3, [pc, #72]	@ (8010044 <tcp_recv_null+0x60>)
 800fffa:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800fffe:	4912      	ldr	r1, [pc, #72]	@ (8010048 <tcp_recv_null+0x64>)
 8010000:	4812      	ldr	r0, [pc, #72]	@ (801004c <tcp_recv_null+0x68>)
 8010002:	f015 fa61 	bl	80254c8 <iprintf>
 8010006:	f06f 030f 	mvn.w	r3, #15
 801000a:	e016      	b.n	801003a <tcp_recv_null+0x56>

  if (p != NULL) {
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d009      	beq.n	8010026 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	891b      	ldrh	r3, [r3, #8]
 8010016:	4619      	mov	r1, r3
 8010018:	68b8      	ldr	r0, [r7, #8]
 801001a:	f7ff fad1 	bl	800f5c0 <tcp_recved>
    pbuf_free(p);
 801001e:	6878      	ldr	r0, [r7, #4]
 8010020:	f7fe fbb6 	bl	800e790 <pbuf_free>
 8010024:	e008      	b.n	8010038 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010026:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d104      	bne.n	8010038 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801002e:	68b8      	ldr	r0, [r7, #8]
 8010030:	f7ff f868 	bl	800f104 <tcp_close>
 8010034:	4603      	mov	r3, r0
 8010036:	e000      	b.n	801003a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010038:	2300      	movs	r3, #0
}
 801003a:	4618      	mov	r0, r3
 801003c:	3710      	adds	r7, #16
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}
 8010042:	bf00      	nop
 8010044:	080281d0 	.word	0x080281d0
 8010048:	08028740 	.word	0x08028740
 801004c:	08028214 	.word	0x08028214

08010050 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b086      	sub	sp, #24
 8010054:	af00      	add	r7, sp, #0
 8010056:	4603      	mov	r3, r0
 8010058:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801005a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801005e:	2b00      	cmp	r3, #0
 8010060:	db01      	blt.n	8010066 <tcp_kill_prio+0x16>
 8010062:	79fb      	ldrb	r3, [r7, #7]
 8010064:	e000      	b.n	8010068 <tcp_kill_prio+0x18>
 8010066:	237f      	movs	r3, #127	@ 0x7f
 8010068:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801006a:	7afb      	ldrb	r3, [r7, #11]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d034      	beq.n	80100da <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010070:	7afb      	ldrb	r3, [r7, #11]
 8010072:	3b01      	subs	r3, #1
 8010074:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8010076:	2300      	movs	r3, #0
 8010078:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801007a:	2300      	movs	r3, #0
 801007c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801007e:	4b19      	ldr	r3, [pc, #100]	@ (80100e4 <tcp_kill_prio+0x94>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	617b      	str	r3, [r7, #20]
 8010084:	e01f      	b.n	80100c6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8010086:	697b      	ldr	r3, [r7, #20]
 8010088:	7d5b      	ldrb	r3, [r3, #21]
 801008a:	7afa      	ldrb	r2, [r7, #11]
 801008c:	429a      	cmp	r2, r3
 801008e:	d80c      	bhi.n	80100aa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010090:	697b      	ldr	r3, [r7, #20]
 8010092:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010094:	7afa      	ldrb	r2, [r7, #11]
 8010096:	429a      	cmp	r2, r3
 8010098:	d112      	bne.n	80100c0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801009a:	4b13      	ldr	r3, [pc, #76]	@ (80100e8 <tcp_kill_prio+0x98>)
 801009c:	681a      	ldr	r2, [r3, #0]
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	6a1b      	ldr	r3, [r3, #32]
 80100a2:	1ad3      	subs	r3, r2, r3
 80100a4:	68fa      	ldr	r2, [r7, #12]
 80100a6:	429a      	cmp	r2, r3
 80100a8:	d80a      	bhi.n	80100c0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80100aa:	4b0f      	ldr	r3, [pc, #60]	@ (80100e8 <tcp_kill_prio+0x98>)
 80100ac:	681a      	ldr	r2, [r3, #0]
 80100ae:	697b      	ldr	r3, [r7, #20]
 80100b0:	6a1b      	ldr	r3, [r3, #32]
 80100b2:	1ad3      	subs	r3, r2, r3
 80100b4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80100b6:	697b      	ldr	r3, [r7, #20]
 80100b8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80100ba:	697b      	ldr	r3, [r7, #20]
 80100bc:	7d5b      	ldrb	r3, [r3, #21]
 80100be:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	68db      	ldr	r3, [r3, #12]
 80100c4:	617b      	str	r3, [r7, #20]
 80100c6:	697b      	ldr	r3, [r7, #20]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d1dc      	bne.n	8010086 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80100cc:	693b      	ldr	r3, [r7, #16]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d004      	beq.n	80100dc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80100d2:	6938      	ldr	r0, [r7, #16]
 80100d4:	f7ff f95c 	bl	800f390 <tcp_abort>
 80100d8:	e000      	b.n	80100dc <tcp_kill_prio+0x8c>
    return;
 80100da:	bf00      	nop
  }
}
 80100dc:	3718      	adds	r7, #24
 80100de:	46bd      	mov	sp, r7
 80100e0:	bd80      	pop	{r7, pc}
 80100e2:	bf00      	nop
 80100e4:	2000fe8c 	.word	0x2000fe8c
 80100e8:	2000fe80 	.word	0x2000fe80

080100ec <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b086      	sub	sp, #24
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	4603      	mov	r3, r0
 80100f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80100f6:	79fb      	ldrb	r3, [r7, #7]
 80100f8:	2b08      	cmp	r3, #8
 80100fa:	d009      	beq.n	8010110 <tcp_kill_state+0x24>
 80100fc:	79fb      	ldrb	r3, [r7, #7]
 80100fe:	2b09      	cmp	r3, #9
 8010100:	d006      	beq.n	8010110 <tcp_kill_state+0x24>
 8010102:	4b1a      	ldr	r3, [pc, #104]	@ (801016c <tcp_kill_state+0x80>)
 8010104:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8010108:	4919      	ldr	r1, [pc, #100]	@ (8010170 <tcp_kill_state+0x84>)
 801010a:	481a      	ldr	r0, [pc, #104]	@ (8010174 <tcp_kill_state+0x88>)
 801010c:	f015 f9dc 	bl	80254c8 <iprintf>

  inactivity = 0;
 8010110:	2300      	movs	r3, #0
 8010112:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010114:	2300      	movs	r3, #0
 8010116:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010118:	4b17      	ldr	r3, [pc, #92]	@ (8010178 <tcp_kill_state+0x8c>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	617b      	str	r3, [r7, #20]
 801011e:	e017      	b.n	8010150 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	7d1b      	ldrb	r3, [r3, #20]
 8010124:	79fa      	ldrb	r2, [r7, #7]
 8010126:	429a      	cmp	r2, r3
 8010128:	d10f      	bne.n	801014a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801012a:	4b14      	ldr	r3, [pc, #80]	@ (801017c <tcp_kill_state+0x90>)
 801012c:	681a      	ldr	r2, [r3, #0]
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	6a1b      	ldr	r3, [r3, #32]
 8010132:	1ad3      	subs	r3, r2, r3
 8010134:	68fa      	ldr	r2, [r7, #12]
 8010136:	429a      	cmp	r2, r3
 8010138:	d807      	bhi.n	801014a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801013a:	4b10      	ldr	r3, [pc, #64]	@ (801017c <tcp_kill_state+0x90>)
 801013c:	681a      	ldr	r2, [r3, #0]
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	6a1b      	ldr	r3, [r3, #32]
 8010142:	1ad3      	subs	r3, r2, r3
 8010144:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010146:	697b      	ldr	r3, [r7, #20]
 8010148:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	68db      	ldr	r3, [r3, #12]
 801014e:	617b      	str	r3, [r7, #20]
 8010150:	697b      	ldr	r3, [r7, #20]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d1e4      	bne.n	8010120 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010156:	693b      	ldr	r3, [r7, #16]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d003      	beq.n	8010164 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801015c:	2100      	movs	r1, #0
 801015e:	6938      	ldr	r0, [r7, #16]
 8010160:	f7ff f858 	bl	800f214 <tcp_abandon>
  }
}
 8010164:	bf00      	nop
 8010166:	3718      	adds	r7, #24
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}
 801016c:	080281d0 	.word	0x080281d0
 8010170:	0802875c 	.word	0x0802875c
 8010174:	08028214 	.word	0x08028214
 8010178:	2000fe8c 	.word	0x2000fe8c
 801017c:	2000fe80 	.word	0x2000fe80

08010180 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b084      	sub	sp, #16
 8010184:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8010186:	2300      	movs	r3, #0
 8010188:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801018a:	2300      	movs	r3, #0
 801018c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801018e:	4b12      	ldr	r3, [pc, #72]	@ (80101d8 <tcp_kill_timewait+0x58>)
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	60fb      	str	r3, [r7, #12]
 8010194:	e012      	b.n	80101bc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010196:	4b11      	ldr	r3, [pc, #68]	@ (80101dc <tcp_kill_timewait+0x5c>)
 8010198:	681a      	ldr	r2, [r3, #0]
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	6a1b      	ldr	r3, [r3, #32]
 801019e:	1ad3      	subs	r3, r2, r3
 80101a0:	687a      	ldr	r2, [r7, #4]
 80101a2:	429a      	cmp	r2, r3
 80101a4:	d807      	bhi.n	80101b6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80101a6:	4b0d      	ldr	r3, [pc, #52]	@ (80101dc <tcp_kill_timewait+0x5c>)
 80101a8:	681a      	ldr	r2, [r3, #0]
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	6a1b      	ldr	r3, [r3, #32]
 80101ae:	1ad3      	subs	r3, r2, r3
 80101b0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	68db      	ldr	r3, [r3, #12]
 80101ba:	60fb      	str	r3, [r7, #12]
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d1e9      	bne.n	8010196 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80101c2:	68bb      	ldr	r3, [r7, #8]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d002      	beq.n	80101ce <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80101c8:	68b8      	ldr	r0, [r7, #8]
 80101ca:	f7ff f8e1 	bl	800f390 <tcp_abort>
  }
}
 80101ce:	bf00      	nop
 80101d0:	3710      	adds	r7, #16
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd80      	pop	{r7, pc}
 80101d6:	bf00      	nop
 80101d8:	2000fe90 	.word	0x2000fe90
 80101dc:	2000fe80 	.word	0x2000fe80

080101e0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b082      	sub	sp, #8
 80101e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80101e6:	4b10      	ldr	r3, [pc, #64]	@ (8010228 <tcp_handle_closepend+0x48>)
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80101ec:	e014      	b.n	8010218 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	68db      	ldr	r3, [r3, #12]
 80101f2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	8b5b      	ldrh	r3, [r3, #26]
 80101f8:	f003 0308 	and.w	r3, r3, #8
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d009      	beq.n	8010214 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	8b5b      	ldrh	r3, [r3, #26]
 8010204:	f023 0308 	bic.w	r3, r3, #8
 8010208:	b29a      	uxth	r2, r3
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801020e:	6878      	ldr	r0, [r7, #4]
 8010210:	f7fe ff0e 	bl	800f030 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d1e7      	bne.n	80101ee <tcp_handle_closepend+0xe>
  }
}
 801021e:	bf00      	nop
 8010220:	bf00      	nop
 8010222:	3708      	adds	r7, #8
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}
 8010228:	2000fe8c 	.word	0x2000fe8c

0801022c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801022c:	b580      	push	{r7, lr}
 801022e:	b084      	sub	sp, #16
 8010230:	af00      	add	r7, sp, #0
 8010232:	4603      	mov	r3, r0
 8010234:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010236:	2001      	movs	r0, #1
 8010238:	f7fd fb26 	bl	800d888 <memp_malloc>
 801023c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d126      	bne.n	8010292 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010244:	f7ff ffcc 	bl	80101e0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010248:	f7ff ff9a 	bl	8010180 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801024c:	2001      	movs	r0, #1
 801024e:	f7fd fb1b 	bl	800d888 <memp_malloc>
 8010252:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d11b      	bne.n	8010292 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801025a:	2009      	movs	r0, #9
 801025c:	f7ff ff46 	bl	80100ec <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010260:	2001      	movs	r0, #1
 8010262:	f7fd fb11 	bl	800d888 <memp_malloc>
 8010266:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d111      	bne.n	8010292 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801026e:	2008      	movs	r0, #8
 8010270:	f7ff ff3c 	bl	80100ec <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010274:	2001      	movs	r0, #1
 8010276:	f7fd fb07 	bl	800d888 <memp_malloc>
 801027a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d107      	bne.n	8010292 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010282:	79fb      	ldrb	r3, [r7, #7]
 8010284:	4618      	mov	r0, r3
 8010286:	f7ff fee3 	bl	8010050 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801028a:	2001      	movs	r0, #1
 801028c:	f7fd fafc 	bl	800d888 <memp_malloc>
 8010290:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d03f      	beq.n	8010318 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010298:	229c      	movs	r2, #156	@ 0x9c
 801029a:	2100      	movs	r1, #0
 801029c:	68f8      	ldr	r0, [r7, #12]
 801029e:	f015 fa99 	bl	80257d4 <memset>
    pcb->prio = prio;
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	79fa      	ldrb	r2, [r7, #7]
 80102a6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80102ae:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80102b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	22ff      	movs	r2, #255	@ 0xff
 80102c6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80102ce:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	2206      	movs	r2, #6
 80102d4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	2206      	movs	r2, #6
 80102dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80102e4:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	2201      	movs	r2, #1
 80102ea:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80102ee:	4b0d      	ldr	r3, [pc, #52]	@ (8010324 <tcp_alloc+0xf8>)
 80102f0:	681a      	ldr	r2, [r3, #0]
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80102f6:	4b0c      	ldr	r3, [pc, #48]	@ (8010328 <tcp_alloc+0xfc>)
 80102f8:	781a      	ldrb	r2, [r3, #0]
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8010304:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	4a08      	ldr	r2, [pc, #32]	@ (801032c <tcp_alloc+0x100>)
 801030c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	4a07      	ldr	r2, [pc, #28]	@ (8010330 <tcp_alloc+0x104>)
 8010314:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010318:	68fb      	ldr	r3, [r7, #12]
}
 801031a:	4618      	mov	r0, r3
 801031c:	3710      	adds	r7, #16
 801031e:	46bd      	mov	sp, r7
 8010320:	bd80      	pop	{r7, pc}
 8010322:	bf00      	nop
 8010324:	2000fe80 	.word	0x2000fe80
 8010328:	2000fe96 	.word	0x2000fe96
 801032c:	0800ffe5 	.word	0x0800ffe5
 8010330:	006ddd00 	.word	0x006ddd00

08010334 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b084      	sub	sp, #16
 8010338:	af00      	add	r7, sp, #0
 801033a:	4603      	mov	r3, r0
 801033c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801033e:	2040      	movs	r0, #64	@ 0x40
 8010340:	f7ff ff74 	bl	801022c <tcp_alloc>
 8010344:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8010346:	68fb      	ldr	r3, [r7, #12]
}
 8010348:	4618      	mov	r0, r3
 801034a:	3710      	adds	r7, #16
 801034c:	46bd      	mov	sp, r7
 801034e:	bd80      	pop	{r7, pc}

08010350 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8010350:	b480      	push	{r7}
 8010352:	b083      	sub	sp, #12
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
 8010358:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d002      	beq.n	8010366 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	683a      	ldr	r2, [r7, #0]
 8010364:	611a      	str	r2, [r3, #16]
  }
}
 8010366:	bf00      	nop
 8010368:	370c      	adds	r7, #12
 801036a:	46bd      	mov	sp, r7
 801036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010370:	4770      	bx	lr
	...

08010374 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b082      	sub	sp, #8
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
 801037c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d00e      	beq.n	80103a2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	7d1b      	ldrb	r3, [r3, #20]
 8010388:	2b01      	cmp	r3, #1
 801038a:	d106      	bne.n	801039a <tcp_recv+0x26>
 801038c:	4b07      	ldr	r3, [pc, #28]	@ (80103ac <tcp_recv+0x38>)
 801038e:	f240 72df 	movw	r2, #2015	@ 0x7df
 8010392:	4907      	ldr	r1, [pc, #28]	@ (80103b0 <tcp_recv+0x3c>)
 8010394:	4807      	ldr	r0, [pc, #28]	@ (80103b4 <tcp_recv+0x40>)
 8010396:	f015 f897 	bl	80254c8 <iprintf>
    pcb->recv = recv;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	683a      	ldr	r2, [r7, #0]
 801039e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 80103a2:	bf00      	nop
 80103a4:	3708      	adds	r7, #8
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}
 80103aa:	bf00      	nop
 80103ac:	080281d0 	.word	0x080281d0
 80103b0:	0802876c 	.word	0x0802876c
 80103b4:	08028214 	.word	0x08028214

080103b8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b082      	sub	sp, #8
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d00e      	beq.n	80103e6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	7d1b      	ldrb	r3, [r3, #20]
 80103cc:	2b01      	cmp	r3, #1
 80103ce:	d106      	bne.n	80103de <tcp_sent+0x26>
 80103d0:	4b07      	ldr	r3, [pc, #28]	@ (80103f0 <tcp_sent+0x38>)
 80103d2:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 80103d6:	4907      	ldr	r1, [pc, #28]	@ (80103f4 <tcp_sent+0x3c>)
 80103d8:	4807      	ldr	r0, [pc, #28]	@ (80103f8 <tcp_sent+0x40>)
 80103da:	f015 f875 	bl	80254c8 <iprintf>
    pcb->sent = sent;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	683a      	ldr	r2, [r7, #0]
 80103e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 80103e6:	bf00      	nop
 80103e8:	3708      	adds	r7, #8
 80103ea:	46bd      	mov	sp, r7
 80103ec:	bd80      	pop	{r7, pc}
 80103ee:	bf00      	nop
 80103f0:	080281d0 	.word	0x080281d0
 80103f4:	08028794 	.word	0x08028794
 80103f8:	08028214 	.word	0x08028214

080103fc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b082      	sub	sp, #8
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d00e      	beq.n	801042a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	7d1b      	ldrb	r3, [r3, #20]
 8010410:	2b01      	cmp	r3, #1
 8010412:	d106      	bne.n	8010422 <tcp_err+0x26>
 8010414:	4b07      	ldr	r3, [pc, #28]	@ (8010434 <tcp_err+0x38>)
 8010416:	f640 020d 	movw	r2, #2061	@ 0x80d
 801041a:	4907      	ldr	r1, [pc, #28]	@ (8010438 <tcp_err+0x3c>)
 801041c:	4807      	ldr	r0, [pc, #28]	@ (801043c <tcp_err+0x40>)
 801041e:	f015 f853 	bl	80254c8 <iprintf>
    pcb->errf = err;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	683a      	ldr	r2, [r7, #0]
 8010426:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 801042a:	bf00      	nop
 801042c:	3708      	adds	r7, #8
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}
 8010432:	bf00      	nop
 8010434:	080281d0 	.word	0x080281d0
 8010438:	080287bc 	.word	0x080287bc
 801043c:	08028214 	.word	0x08028214

08010440 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8010440:	b480      	push	{r7}
 8010442:	b085      	sub	sp, #20
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
 8010448:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d008      	beq.n	8010462 <tcp_accept+0x22>
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	7d1b      	ldrb	r3, [r3, #20]
 8010454:	2b01      	cmp	r3, #1
 8010456:	d104      	bne.n	8010462 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	683a      	ldr	r2, [r7, #0]
 8010460:	619a      	str	r2, [r3, #24]
  }
}
 8010462:	bf00      	nop
 8010464:	3714      	adds	r7, #20
 8010466:	46bd      	mov	sp, r7
 8010468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046c:	4770      	bx	lr
	...

08010470 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b084      	sub	sp, #16
 8010474:	af00      	add	r7, sp, #0
 8010476:	60f8      	str	r0, [r7, #12]
 8010478:	60b9      	str	r1, [r7, #8]
 801047a:	4613      	mov	r3, r2
 801047c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d107      	bne.n	8010494 <tcp_poll+0x24>
 8010484:	4b0e      	ldr	r3, [pc, #56]	@ (80104c0 <tcp_poll+0x50>)
 8010486:	f640 023d 	movw	r2, #2109	@ 0x83d
 801048a:	490e      	ldr	r1, [pc, #56]	@ (80104c4 <tcp_poll+0x54>)
 801048c:	480e      	ldr	r0, [pc, #56]	@ (80104c8 <tcp_poll+0x58>)
 801048e:	f015 f81b 	bl	80254c8 <iprintf>
 8010492:	e011      	b.n	80104b8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	7d1b      	ldrb	r3, [r3, #20]
 8010498:	2b01      	cmp	r3, #1
 801049a:	d106      	bne.n	80104aa <tcp_poll+0x3a>
 801049c:	4b08      	ldr	r3, [pc, #32]	@ (80104c0 <tcp_poll+0x50>)
 801049e:	f640 023e 	movw	r2, #2110	@ 0x83e
 80104a2:	490a      	ldr	r1, [pc, #40]	@ (80104cc <tcp_poll+0x5c>)
 80104a4:	4808      	ldr	r0, [pc, #32]	@ (80104c8 <tcp_poll+0x58>)
 80104a6:	f015 f80f 	bl	80254c8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	68ba      	ldr	r2, [r7, #8]
 80104ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	79fa      	ldrb	r2, [r7, #7]
 80104b6:	775a      	strb	r2, [r3, #29]
}
 80104b8:	3710      	adds	r7, #16
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd80      	pop	{r7, pc}
 80104be:	bf00      	nop
 80104c0:	080281d0 	.word	0x080281d0
 80104c4:	080287e4 	.word	0x080287e4
 80104c8:	08028214 	.word	0x08028214
 80104cc:	080287fc 	.word	0x080287fc

080104d0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b082      	sub	sp, #8
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d107      	bne.n	80104ee <tcp_pcb_purge+0x1e>
 80104de:	4b21      	ldr	r3, [pc, #132]	@ (8010564 <tcp_pcb_purge+0x94>)
 80104e0:	f640 0251 	movw	r2, #2129	@ 0x851
 80104e4:	4920      	ldr	r1, [pc, #128]	@ (8010568 <tcp_pcb_purge+0x98>)
 80104e6:	4821      	ldr	r0, [pc, #132]	@ (801056c <tcp_pcb_purge+0x9c>)
 80104e8:	f014 ffee 	bl	80254c8 <iprintf>
 80104ec:	e037      	b.n	801055e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	7d1b      	ldrb	r3, [r3, #20]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d033      	beq.n	801055e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80104fa:	2b0a      	cmp	r3, #10
 80104fc:	d02f      	beq.n	801055e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8010502:	2b01      	cmp	r3, #1
 8010504:	d02b      	beq.n	801055e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801050a:	2b00      	cmp	r3, #0
 801050c:	d007      	beq.n	801051e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010512:	4618      	mov	r0, r3
 8010514:	f7fe f93c 	bl	800e790 <pbuf_free>
      pcb->refused_data = NULL;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2200      	movs	r2, #0
 801051c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010522:	2b00      	cmp	r3, #0
 8010524:	d002      	beq.n	801052c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f000 f986 	bl	8010838 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010532:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010538:	4618      	mov	r0, r3
 801053a:	f7ff fcf9 	bl	800ff30 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010542:	4618      	mov	r0, r3
 8010544:	f7ff fcf4 	bl	800ff30 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2200      	movs	r2, #0
 801054c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	2200      	movs	r2, #0
 801055a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801055e:	3708      	adds	r7, #8
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}
 8010564:	080281d0 	.word	0x080281d0
 8010568:	0802881c 	.word	0x0802881c
 801056c:	08028214 	.word	0x08028214

08010570 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010570:	b580      	push	{r7, lr}
 8010572:	b084      	sub	sp, #16
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
 8010578:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801057a:	683b      	ldr	r3, [r7, #0]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d106      	bne.n	801058e <tcp_pcb_remove+0x1e>
 8010580:	4b3e      	ldr	r3, [pc, #248]	@ (801067c <tcp_pcb_remove+0x10c>)
 8010582:	f640 0283 	movw	r2, #2179	@ 0x883
 8010586:	493e      	ldr	r1, [pc, #248]	@ (8010680 <tcp_pcb_remove+0x110>)
 8010588:	483e      	ldr	r0, [pc, #248]	@ (8010684 <tcp_pcb_remove+0x114>)
 801058a:	f014 ff9d 	bl	80254c8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d106      	bne.n	80105a2 <tcp_pcb_remove+0x32>
 8010594:	4b39      	ldr	r3, [pc, #228]	@ (801067c <tcp_pcb_remove+0x10c>)
 8010596:	f640 0284 	movw	r2, #2180	@ 0x884
 801059a:	493b      	ldr	r1, [pc, #236]	@ (8010688 <tcp_pcb_remove+0x118>)
 801059c:	4839      	ldr	r0, [pc, #228]	@ (8010684 <tcp_pcb_remove+0x114>)
 801059e:	f014 ff93 	bl	80254c8 <iprintf>

  TCP_RMV(pcblist, pcb);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	683a      	ldr	r2, [r7, #0]
 80105a8:	429a      	cmp	r2, r3
 80105aa:	d105      	bne.n	80105b8 <tcp_pcb_remove+0x48>
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	68da      	ldr	r2, [r3, #12]
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	601a      	str	r2, [r3, #0]
 80105b6:	e013      	b.n	80105e0 <tcp_pcb_remove+0x70>
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	60fb      	str	r3, [r7, #12]
 80105be:	e00c      	b.n	80105da <tcp_pcb_remove+0x6a>
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	68db      	ldr	r3, [r3, #12]
 80105c4:	683a      	ldr	r2, [r7, #0]
 80105c6:	429a      	cmp	r2, r3
 80105c8:	d104      	bne.n	80105d4 <tcp_pcb_remove+0x64>
 80105ca:	683b      	ldr	r3, [r7, #0]
 80105cc:	68da      	ldr	r2, [r3, #12]
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	60da      	str	r2, [r3, #12]
 80105d2:	e005      	b.n	80105e0 <tcp_pcb_remove+0x70>
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	68db      	ldr	r3, [r3, #12]
 80105d8:	60fb      	str	r3, [r7, #12]
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d1ef      	bne.n	80105c0 <tcp_pcb_remove+0x50>
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	2200      	movs	r2, #0
 80105e4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80105e6:	6838      	ldr	r0, [r7, #0]
 80105e8:	f7ff ff72 	bl	80104d0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	7d1b      	ldrb	r3, [r3, #20]
 80105f0:	2b0a      	cmp	r3, #10
 80105f2:	d013      	beq.n	801061c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80105f8:	2b01      	cmp	r3, #1
 80105fa:	d00f      	beq.n	801061c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	8b5b      	ldrh	r3, [r3, #26]
 8010600:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010604:	2b00      	cmp	r3, #0
 8010606:	d009      	beq.n	801061c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010608:	683b      	ldr	r3, [r7, #0]
 801060a:	8b5b      	ldrh	r3, [r3, #26]
 801060c:	f043 0302 	orr.w	r3, r3, #2
 8010610:	b29a      	uxth	r2, r3
 8010612:	683b      	ldr	r3, [r7, #0]
 8010614:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010616:	6838      	ldr	r0, [r7, #0]
 8010618:	f003 fbc0 	bl	8013d9c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	7d1b      	ldrb	r3, [r3, #20]
 8010620:	2b01      	cmp	r3, #1
 8010622:	d020      	beq.n	8010666 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010628:	2b00      	cmp	r3, #0
 801062a:	d006      	beq.n	801063a <tcp_pcb_remove+0xca>
 801062c:	4b13      	ldr	r3, [pc, #76]	@ (801067c <tcp_pcb_remove+0x10c>)
 801062e:	f640 0293 	movw	r2, #2195	@ 0x893
 8010632:	4916      	ldr	r1, [pc, #88]	@ (801068c <tcp_pcb_remove+0x11c>)
 8010634:	4813      	ldr	r0, [pc, #76]	@ (8010684 <tcp_pcb_remove+0x114>)
 8010636:	f014 ff47 	bl	80254c8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801063e:	2b00      	cmp	r3, #0
 8010640:	d006      	beq.n	8010650 <tcp_pcb_remove+0xe0>
 8010642:	4b0e      	ldr	r3, [pc, #56]	@ (801067c <tcp_pcb_remove+0x10c>)
 8010644:	f640 0294 	movw	r2, #2196	@ 0x894
 8010648:	4911      	ldr	r1, [pc, #68]	@ (8010690 <tcp_pcb_remove+0x120>)
 801064a:	480e      	ldr	r0, [pc, #56]	@ (8010684 <tcp_pcb_remove+0x114>)
 801064c:	f014 ff3c 	bl	80254c8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010654:	2b00      	cmp	r3, #0
 8010656:	d006      	beq.n	8010666 <tcp_pcb_remove+0xf6>
 8010658:	4b08      	ldr	r3, [pc, #32]	@ (801067c <tcp_pcb_remove+0x10c>)
 801065a:	f640 0296 	movw	r2, #2198	@ 0x896
 801065e:	490d      	ldr	r1, [pc, #52]	@ (8010694 <tcp_pcb_remove+0x124>)
 8010660:	4808      	ldr	r0, [pc, #32]	@ (8010684 <tcp_pcb_remove+0x114>)
 8010662:	f014 ff31 	bl	80254c8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	2200      	movs	r2, #0
 801066a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801066c:	683b      	ldr	r3, [r7, #0]
 801066e:	2200      	movs	r2, #0
 8010670:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010672:	bf00      	nop
 8010674:	3710      	adds	r7, #16
 8010676:	46bd      	mov	sp, r7
 8010678:	bd80      	pop	{r7, pc}
 801067a:	bf00      	nop
 801067c:	080281d0 	.word	0x080281d0
 8010680:	08028838 	.word	0x08028838
 8010684:	08028214 	.word	0x08028214
 8010688:	08028854 	.word	0x08028854
 801068c:	08028874 	.word	0x08028874
 8010690:	0802888c 	.word	0x0802888c
 8010694:	080288a8 	.word	0x080288a8

08010698 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b082      	sub	sp, #8
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d106      	bne.n	80106b4 <tcp_next_iss+0x1c>
 80106a6:	4b0a      	ldr	r3, [pc, #40]	@ (80106d0 <tcp_next_iss+0x38>)
 80106a8:	f640 02af 	movw	r2, #2223	@ 0x8af
 80106ac:	4909      	ldr	r1, [pc, #36]	@ (80106d4 <tcp_next_iss+0x3c>)
 80106ae:	480a      	ldr	r0, [pc, #40]	@ (80106d8 <tcp_next_iss+0x40>)
 80106b0:	f014 ff0a 	bl	80254c8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80106b4:	4b09      	ldr	r3, [pc, #36]	@ (80106dc <tcp_next_iss+0x44>)
 80106b6:	681a      	ldr	r2, [r3, #0]
 80106b8:	4b09      	ldr	r3, [pc, #36]	@ (80106e0 <tcp_next_iss+0x48>)
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	4413      	add	r3, r2
 80106be:	4a07      	ldr	r2, [pc, #28]	@ (80106dc <tcp_next_iss+0x44>)
 80106c0:	6013      	str	r3, [r2, #0]
  return iss;
 80106c2:	4b06      	ldr	r3, [pc, #24]	@ (80106dc <tcp_next_iss+0x44>)
 80106c4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	3708      	adds	r7, #8
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bd80      	pop	{r7, pc}
 80106ce:	bf00      	nop
 80106d0:	080281d0 	.word	0x080281d0
 80106d4:	080288c0 	.word	0x080288c0
 80106d8:	08028214 	.word	0x08028214
 80106dc:	20000030 	.word	0x20000030
 80106e0:	2000fe80 	.word	0x2000fe80

080106e4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b086      	sub	sp, #24
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	4603      	mov	r3, r0
 80106ec:	60b9      	str	r1, [r7, #8]
 80106ee:	607a      	str	r2, [r7, #4]
 80106f0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d106      	bne.n	8010706 <tcp_eff_send_mss_netif+0x22>
 80106f8:	4b14      	ldr	r3, [pc, #80]	@ (801074c <tcp_eff_send_mss_netif+0x68>)
 80106fa:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80106fe:	4914      	ldr	r1, [pc, #80]	@ (8010750 <tcp_eff_send_mss_netif+0x6c>)
 8010700:	4814      	ldr	r0, [pc, #80]	@ (8010754 <tcp_eff_send_mss_netif+0x70>)
 8010702:	f014 fee1 	bl	80254c8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d101      	bne.n	8010710 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801070c:	89fb      	ldrh	r3, [r7, #14]
 801070e:	e019      	b.n	8010744 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010710:	68bb      	ldr	r3, [r7, #8]
 8010712:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010714:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010716:	8afb      	ldrh	r3, [r7, #22]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d012      	beq.n	8010742 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801071c:	2328      	movs	r3, #40	@ 0x28
 801071e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010720:	8afa      	ldrh	r2, [r7, #22]
 8010722:	8abb      	ldrh	r3, [r7, #20]
 8010724:	429a      	cmp	r2, r3
 8010726:	d904      	bls.n	8010732 <tcp_eff_send_mss_netif+0x4e>
 8010728:	8afa      	ldrh	r2, [r7, #22]
 801072a:	8abb      	ldrh	r3, [r7, #20]
 801072c:	1ad3      	subs	r3, r2, r3
 801072e:	b29b      	uxth	r3, r3
 8010730:	e000      	b.n	8010734 <tcp_eff_send_mss_netif+0x50>
 8010732:	2300      	movs	r3, #0
 8010734:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010736:	8a7a      	ldrh	r2, [r7, #18]
 8010738:	89fb      	ldrh	r3, [r7, #14]
 801073a:	4293      	cmp	r3, r2
 801073c:	bf28      	it	cs
 801073e:	4613      	movcs	r3, r2
 8010740:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8010742:	89fb      	ldrh	r3, [r7, #14]
}
 8010744:	4618      	mov	r0, r3
 8010746:	3718      	adds	r7, #24
 8010748:	46bd      	mov	sp, r7
 801074a:	bd80      	pop	{r7, pc}
 801074c:	080281d0 	.word	0x080281d0
 8010750:	080288dc 	.word	0x080288dc
 8010754:	08028214 	.word	0x08028214

08010758 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b084      	sub	sp, #16
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d119      	bne.n	80107a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801076c:	4b10      	ldr	r3, [pc, #64]	@ (80107b0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801076e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8010772:	4910      	ldr	r1, [pc, #64]	@ (80107b4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010774:	4810      	ldr	r0, [pc, #64]	@ (80107b8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8010776:	f014 fea7 	bl	80254c8 <iprintf>

  while (pcb != NULL) {
 801077a:	e011      	b.n	80107a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	681a      	ldr	r2, [r3, #0]
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	429a      	cmp	r2, r3
 8010786:	d108      	bne.n	801079a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	68db      	ldr	r3, [r3, #12]
 801078c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801078e:	68f8      	ldr	r0, [r7, #12]
 8010790:	f7fe fdfe 	bl	800f390 <tcp_abort>
      pcb = next;
 8010794:	68bb      	ldr	r3, [r7, #8]
 8010796:	60fb      	str	r3, [r7, #12]
 8010798:	e002      	b.n	80107a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	68db      	ldr	r3, [r3, #12]
 801079e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d1ea      	bne.n	801077c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80107a6:	bf00      	nop
 80107a8:	bf00      	nop
 80107aa:	3710      	adds	r7, #16
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bd80      	pop	{r7, pc}
 80107b0:	080281d0 	.word	0x080281d0
 80107b4:	08028904 	.word	0x08028904
 80107b8:	08028214 	.word	0x08028214

080107bc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b084      	sub	sp, #16
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
 80107c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d02a      	beq.n	8010822 <tcp_netif_ip_addr_changed+0x66>
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d026      	beq.n	8010822 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80107d4:	4b15      	ldr	r3, [pc, #84]	@ (801082c <tcp_netif_ip_addr_changed+0x70>)
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	4619      	mov	r1, r3
 80107da:	6878      	ldr	r0, [r7, #4]
 80107dc:	f7ff ffbc 	bl	8010758 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80107e0:	4b13      	ldr	r3, [pc, #76]	@ (8010830 <tcp_netif_ip_addr_changed+0x74>)
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	4619      	mov	r1, r3
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f7ff ffb6 	bl	8010758 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80107ec:	683b      	ldr	r3, [r7, #0]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d017      	beq.n	8010822 <tcp_netif_ip_addr_changed+0x66>
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d013      	beq.n	8010822 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80107fa:	4b0e      	ldr	r3, [pc, #56]	@ (8010834 <tcp_netif_ip_addr_changed+0x78>)
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	60fb      	str	r3, [r7, #12]
 8010800:	e00c      	b.n	801081c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	681a      	ldr	r2, [r3, #0]
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	429a      	cmp	r2, r3
 801080c:	d103      	bne.n	8010816 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801080e:	683b      	ldr	r3, [r7, #0]
 8010810:	681a      	ldr	r2, [r3, #0]
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	68db      	ldr	r3, [r3, #12]
 801081a:	60fb      	str	r3, [r7, #12]
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d1ef      	bne.n	8010802 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010822:	bf00      	nop
 8010824:	3710      	adds	r7, #16
 8010826:	46bd      	mov	sp, r7
 8010828:	bd80      	pop	{r7, pc}
 801082a:	bf00      	nop
 801082c:	2000fe8c 	.word	0x2000fe8c
 8010830:	2000fe84 	.word	0x2000fe84
 8010834:	2000fe88 	.word	0x2000fe88

08010838 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b082      	sub	sp, #8
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010844:	2b00      	cmp	r3, #0
 8010846:	d007      	beq.n	8010858 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801084c:	4618      	mov	r0, r3
 801084e:	f7ff fb6f 	bl	800ff30 <tcp_segs_free>
    pcb->ooseq = NULL;
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	2200      	movs	r2, #0
 8010856:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010858:	bf00      	nop
 801085a:	3708      	adds	r7, #8
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}

08010860 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010860:	b590      	push	{r4, r7, lr}
 8010862:	b08d      	sub	sp, #52	@ 0x34
 8010864:	af04      	add	r7, sp, #16
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d105      	bne.n	801087c <tcp_input+0x1c>
 8010870:	4b9b      	ldr	r3, [pc, #620]	@ (8010ae0 <tcp_input+0x280>)
 8010872:	2283      	movs	r2, #131	@ 0x83
 8010874:	499b      	ldr	r1, [pc, #620]	@ (8010ae4 <tcp_input+0x284>)
 8010876:	489c      	ldr	r0, [pc, #624]	@ (8010ae8 <tcp_input+0x288>)
 8010878:	f014 fe26 	bl	80254c8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	685b      	ldr	r3, [r3, #4]
 8010880:	4a9a      	ldr	r2, [pc, #616]	@ (8010aec <tcp_input+0x28c>)
 8010882:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	895b      	ldrh	r3, [r3, #10]
 8010888:	2b13      	cmp	r3, #19
 801088a:	f240 83d1 	bls.w	8011030 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801088e:	4b98      	ldr	r3, [pc, #608]	@ (8010af0 <tcp_input+0x290>)
 8010890:	695b      	ldr	r3, [r3, #20]
 8010892:	4a97      	ldr	r2, [pc, #604]	@ (8010af0 <tcp_input+0x290>)
 8010894:	6812      	ldr	r2, [r2, #0]
 8010896:	4611      	mov	r1, r2
 8010898:	4618      	mov	r0, r3
 801089a:	f006 fbe3 	bl	8017064 <ip4_addr_isbroadcast_u32>
 801089e:	4603      	mov	r3, r0
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	f040 83c7 	bne.w	8011034 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80108a6:	4b92      	ldr	r3, [pc, #584]	@ (8010af0 <tcp_input+0x290>)
 80108a8:	695b      	ldr	r3, [r3, #20]
 80108aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80108ae:	2be0      	cmp	r3, #224	@ 0xe0
 80108b0:	f000 83c0 	beq.w	8011034 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80108b4:	4b8d      	ldr	r3, [pc, #564]	@ (8010aec <tcp_input+0x28c>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	899b      	ldrh	r3, [r3, #12]
 80108ba:	b29b      	uxth	r3, r3
 80108bc:	4618      	mov	r0, r3
 80108be:	f7fc fb0f 	bl	800cee0 <lwip_htons>
 80108c2:	4603      	mov	r3, r0
 80108c4:	0b1b      	lsrs	r3, r3, #12
 80108c6:	b29b      	uxth	r3, r3
 80108c8:	b2db      	uxtb	r3, r3
 80108ca:	009b      	lsls	r3, r3, #2
 80108cc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80108ce:	7cbb      	ldrb	r3, [r7, #18]
 80108d0:	2b13      	cmp	r3, #19
 80108d2:	f240 83b1 	bls.w	8011038 <tcp_input+0x7d8>
 80108d6:	7cbb      	ldrb	r3, [r7, #18]
 80108d8:	b29a      	uxth	r2, r3
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	891b      	ldrh	r3, [r3, #8]
 80108de:	429a      	cmp	r2, r3
 80108e0:	f200 83aa 	bhi.w	8011038 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80108e4:	7cbb      	ldrb	r3, [r7, #18]
 80108e6:	b29b      	uxth	r3, r3
 80108e8:	3b14      	subs	r3, #20
 80108ea:	b29a      	uxth	r2, r3
 80108ec:	4b81      	ldr	r3, [pc, #516]	@ (8010af4 <tcp_input+0x294>)
 80108ee:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80108f0:	4b81      	ldr	r3, [pc, #516]	@ (8010af8 <tcp_input+0x298>)
 80108f2:	2200      	movs	r2, #0
 80108f4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	895a      	ldrh	r2, [r3, #10]
 80108fa:	7cbb      	ldrb	r3, [r7, #18]
 80108fc:	b29b      	uxth	r3, r3
 80108fe:	429a      	cmp	r2, r3
 8010900:	d309      	bcc.n	8010916 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010902:	4b7c      	ldr	r3, [pc, #496]	@ (8010af4 <tcp_input+0x294>)
 8010904:	881a      	ldrh	r2, [r3, #0]
 8010906:	4b7d      	ldr	r3, [pc, #500]	@ (8010afc <tcp_input+0x29c>)
 8010908:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801090a:	7cbb      	ldrb	r3, [r7, #18]
 801090c:	4619      	mov	r1, r3
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f7fd fe86 	bl	800e620 <pbuf_remove_header>
 8010914:	e04e      	b.n	80109b4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d105      	bne.n	801092a <tcp_input+0xca>
 801091e:	4b70      	ldr	r3, [pc, #448]	@ (8010ae0 <tcp_input+0x280>)
 8010920:	22c2      	movs	r2, #194	@ 0xc2
 8010922:	4977      	ldr	r1, [pc, #476]	@ (8010b00 <tcp_input+0x2a0>)
 8010924:	4870      	ldr	r0, [pc, #448]	@ (8010ae8 <tcp_input+0x288>)
 8010926:	f014 fdcf 	bl	80254c8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801092a:	2114      	movs	r1, #20
 801092c:	6878      	ldr	r0, [r7, #4]
 801092e:	f7fd fe77 	bl	800e620 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	895a      	ldrh	r2, [r3, #10]
 8010936:	4b71      	ldr	r3, [pc, #452]	@ (8010afc <tcp_input+0x29c>)
 8010938:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801093a:	4b6e      	ldr	r3, [pc, #440]	@ (8010af4 <tcp_input+0x294>)
 801093c:	881a      	ldrh	r2, [r3, #0]
 801093e:	4b6f      	ldr	r3, [pc, #444]	@ (8010afc <tcp_input+0x29c>)
 8010940:	881b      	ldrh	r3, [r3, #0]
 8010942:	1ad3      	subs	r3, r2, r3
 8010944:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010946:	4b6d      	ldr	r3, [pc, #436]	@ (8010afc <tcp_input+0x29c>)
 8010948:	881b      	ldrh	r3, [r3, #0]
 801094a:	4619      	mov	r1, r3
 801094c:	6878      	ldr	r0, [r7, #4]
 801094e:	f7fd fe67 	bl	800e620 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	895b      	ldrh	r3, [r3, #10]
 8010958:	8a3a      	ldrh	r2, [r7, #16]
 801095a:	429a      	cmp	r2, r3
 801095c:	f200 836e 	bhi.w	801103c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	685b      	ldr	r3, [r3, #4]
 8010966:	4a64      	ldr	r2, [pc, #400]	@ (8010af8 <tcp_input+0x298>)
 8010968:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	8a3a      	ldrh	r2, [r7, #16]
 8010970:	4611      	mov	r1, r2
 8010972:	4618      	mov	r0, r3
 8010974:	f7fd fe54 	bl	800e620 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	891a      	ldrh	r2, [r3, #8]
 801097c:	8a3b      	ldrh	r3, [r7, #16]
 801097e:	1ad3      	subs	r3, r2, r3
 8010980:	b29a      	uxth	r2, r3
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	895b      	ldrh	r3, [r3, #10]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d005      	beq.n	801099a <tcp_input+0x13a>
 801098e:	4b54      	ldr	r3, [pc, #336]	@ (8010ae0 <tcp_input+0x280>)
 8010990:	22df      	movs	r2, #223	@ 0xdf
 8010992:	495c      	ldr	r1, [pc, #368]	@ (8010b04 <tcp_input+0x2a4>)
 8010994:	4854      	ldr	r0, [pc, #336]	@ (8010ae8 <tcp_input+0x288>)
 8010996:	f014 fd97 	bl	80254c8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	891a      	ldrh	r2, [r3, #8]
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	891b      	ldrh	r3, [r3, #8]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d005      	beq.n	80109b4 <tcp_input+0x154>
 80109a8:	4b4d      	ldr	r3, [pc, #308]	@ (8010ae0 <tcp_input+0x280>)
 80109aa:	22e0      	movs	r2, #224	@ 0xe0
 80109ac:	4956      	ldr	r1, [pc, #344]	@ (8010b08 <tcp_input+0x2a8>)
 80109ae:	484e      	ldr	r0, [pc, #312]	@ (8010ae8 <tcp_input+0x288>)
 80109b0:	f014 fd8a 	bl	80254c8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80109b4:	4b4d      	ldr	r3, [pc, #308]	@ (8010aec <tcp_input+0x28c>)
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	881b      	ldrh	r3, [r3, #0]
 80109ba:	b29b      	uxth	r3, r3
 80109bc:	4a4b      	ldr	r2, [pc, #300]	@ (8010aec <tcp_input+0x28c>)
 80109be:	6814      	ldr	r4, [r2, #0]
 80109c0:	4618      	mov	r0, r3
 80109c2:	f7fc fa8d 	bl	800cee0 <lwip_htons>
 80109c6:	4603      	mov	r3, r0
 80109c8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80109ca:	4b48      	ldr	r3, [pc, #288]	@ (8010aec <tcp_input+0x28c>)
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	885b      	ldrh	r3, [r3, #2]
 80109d0:	b29b      	uxth	r3, r3
 80109d2:	4a46      	ldr	r2, [pc, #280]	@ (8010aec <tcp_input+0x28c>)
 80109d4:	6814      	ldr	r4, [r2, #0]
 80109d6:	4618      	mov	r0, r3
 80109d8:	f7fc fa82 	bl	800cee0 <lwip_htons>
 80109dc:	4603      	mov	r3, r0
 80109de:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80109e0:	4b42      	ldr	r3, [pc, #264]	@ (8010aec <tcp_input+0x28c>)
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	685b      	ldr	r3, [r3, #4]
 80109e6:	4a41      	ldr	r2, [pc, #260]	@ (8010aec <tcp_input+0x28c>)
 80109e8:	6814      	ldr	r4, [r2, #0]
 80109ea:	4618      	mov	r0, r3
 80109ec:	f7fc fa8e 	bl	800cf0c <lwip_htonl>
 80109f0:	4603      	mov	r3, r0
 80109f2:	6063      	str	r3, [r4, #4]
 80109f4:	6863      	ldr	r3, [r4, #4]
 80109f6:	4a45      	ldr	r2, [pc, #276]	@ (8010b0c <tcp_input+0x2ac>)
 80109f8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80109fa:	4b3c      	ldr	r3, [pc, #240]	@ (8010aec <tcp_input+0x28c>)
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	689b      	ldr	r3, [r3, #8]
 8010a00:	4a3a      	ldr	r2, [pc, #232]	@ (8010aec <tcp_input+0x28c>)
 8010a02:	6814      	ldr	r4, [r2, #0]
 8010a04:	4618      	mov	r0, r3
 8010a06:	f7fc fa81 	bl	800cf0c <lwip_htonl>
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	60a3      	str	r3, [r4, #8]
 8010a0e:	68a3      	ldr	r3, [r4, #8]
 8010a10:	4a3f      	ldr	r2, [pc, #252]	@ (8010b10 <tcp_input+0x2b0>)
 8010a12:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010a14:	4b35      	ldr	r3, [pc, #212]	@ (8010aec <tcp_input+0x28c>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	89db      	ldrh	r3, [r3, #14]
 8010a1a:	b29b      	uxth	r3, r3
 8010a1c:	4a33      	ldr	r2, [pc, #204]	@ (8010aec <tcp_input+0x28c>)
 8010a1e:	6814      	ldr	r4, [r2, #0]
 8010a20:	4618      	mov	r0, r3
 8010a22:	f7fc fa5d 	bl	800cee0 <lwip_htons>
 8010a26:	4603      	mov	r3, r0
 8010a28:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010a2a:	4b30      	ldr	r3, [pc, #192]	@ (8010aec <tcp_input+0x28c>)
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	899b      	ldrh	r3, [r3, #12]
 8010a30:	b29b      	uxth	r3, r3
 8010a32:	4618      	mov	r0, r3
 8010a34:	f7fc fa54 	bl	800cee0 <lwip_htons>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	b2db      	uxtb	r3, r3
 8010a3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010a40:	b2da      	uxtb	r2, r3
 8010a42:	4b34      	ldr	r3, [pc, #208]	@ (8010b14 <tcp_input+0x2b4>)
 8010a44:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	891a      	ldrh	r2, [r3, #8]
 8010a4a:	4b33      	ldr	r3, [pc, #204]	@ (8010b18 <tcp_input+0x2b8>)
 8010a4c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010a4e:	4b31      	ldr	r3, [pc, #196]	@ (8010b14 <tcp_input+0x2b4>)
 8010a50:	781b      	ldrb	r3, [r3, #0]
 8010a52:	f003 0303 	and.w	r3, r3, #3
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d00c      	beq.n	8010a74 <tcp_input+0x214>
    tcplen++;
 8010a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8010b18 <tcp_input+0x2b8>)
 8010a5c:	881b      	ldrh	r3, [r3, #0]
 8010a5e:	3301      	adds	r3, #1
 8010a60:	b29a      	uxth	r2, r3
 8010a62:	4b2d      	ldr	r3, [pc, #180]	@ (8010b18 <tcp_input+0x2b8>)
 8010a64:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	891a      	ldrh	r2, [r3, #8]
 8010a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8010b18 <tcp_input+0x2b8>)
 8010a6c:	881b      	ldrh	r3, [r3, #0]
 8010a6e:	429a      	cmp	r2, r3
 8010a70:	f200 82e6 	bhi.w	8011040 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010a74:	2300      	movs	r3, #0
 8010a76:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010a78:	4b28      	ldr	r3, [pc, #160]	@ (8010b1c <tcp_input+0x2bc>)
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	61fb      	str	r3, [r7, #28]
 8010a7e:	e09d      	b.n	8010bbc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010a80:	69fb      	ldr	r3, [r7, #28]
 8010a82:	7d1b      	ldrb	r3, [r3, #20]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d105      	bne.n	8010a94 <tcp_input+0x234>
 8010a88:	4b15      	ldr	r3, [pc, #84]	@ (8010ae0 <tcp_input+0x280>)
 8010a8a:	22fb      	movs	r2, #251	@ 0xfb
 8010a8c:	4924      	ldr	r1, [pc, #144]	@ (8010b20 <tcp_input+0x2c0>)
 8010a8e:	4816      	ldr	r0, [pc, #88]	@ (8010ae8 <tcp_input+0x288>)
 8010a90:	f014 fd1a 	bl	80254c8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010a94:	69fb      	ldr	r3, [r7, #28]
 8010a96:	7d1b      	ldrb	r3, [r3, #20]
 8010a98:	2b0a      	cmp	r3, #10
 8010a9a:	d105      	bne.n	8010aa8 <tcp_input+0x248>
 8010a9c:	4b10      	ldr	r3, [pc, #64]	@ (8010ae0 <tcp_input+0x280>)
 8010a9e:	22fc      	movs	r2, #252	@ 0xfc
 8010aa0:	4920      	ldr	r1, [pc, #128]	@ (8010b24 <tcp_input+0x2c4>)
 8010aa2:	4811      	ldr	r0, [pc, #68]	@ (8010ae8 <tcp_input+0x288>)
 8010aa4:	f014 fd10 	bl	80254c8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010aa8:	69fb      	ldr	r3, [r7, #28]
 8010aaa:	7d1b      	ldrb	r3, [r3, #20]
 8010aac:	2b01      	cmp	r3, #1
 8010aae:	d105      	bne.n	8010abc <tcp_input+0x25c>
 8010ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8010ae0 <tcp_input+0x280>)
 8010ab2:	22fd      	movs	r2, #253	@ 0xfd
 8010ab4:	491c      	ldr	r1, [pc, #112]	@ (8010b28 <tcp_input+0x2c8>)
 8010ab6:	480c      	ldr	r0, [pc, #48]	@ (8010ae8 <tcp_input+0x288>)
 8010ab8:	f014 fd06 	bl	80254c8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010abc:	69fb      	ldr	r3, [r7, #28]
 8010abe:	7a1b      	ldrb	r3, [r3, #8]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d033      	beq.n	8010b2c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010ac4:	69fb      	ldr	r3, [r7, #28]
 8010ac6:	7a1a      	ldrb	r2, [r3, #8]
 8010ac8:	4b09      	ldr	r3, [pc, #36]	@ (8010af0 <tcp_input+0x290>)
 8010aca:	685b      	ldr	r3, [r3, #4]
 8010acc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010ad0:	3301      	adds	r3, #1
 8010ad2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010ad4:	429a      	cmp	r2, r3
 8010ad6:	d029      	beq.n	8010b2c <tcp_input+0x2cc>
      prev = pcb;
 8010ad8:	69fb      	ldr	r3, [r7, #28]
 8010ada:	61bb      	str	r3, [r7, #24]
      continue;
 8010adc:	e06b      	b.n	8010bb6 <tcp_input+0x356>
 8010ade:	bf00      	nop
 8010ae0:	08028938 	.word	0x08028938
 8010ae4:	0802896c 	.word	0x0802896c
 8010ae8:	08028984 	.word	0x08028984
 8010aec:	2000fea8 	.word	0x2000fea8
 8010af0:	2000cc10 	.word	0x2000cc10
 8010af4:	2000feac 	.word	0x2000feac
 8010af8:	2000feb0 	.word	0x2000feb0
 8010afc:	2000feae 	.word	0x2000feae
 8010b00:	080289ac 	.word	0x080289ac
 8010b04:	080289bc 	.word	0x080289bc
 8010b08:	080289c8 	.word	0x080289c8
 8010b0c:	2000feb8 	.word	0x2000feb8
 8010b10:	2000febc 	.word	0x2000febc
 8010b14:	2000fec4 	.word	0x2000fec4
 8010b18:	2000fec2 	.word	0x2000fec2
 8010b1c:	2000fe8c 	.word	0x2000fe8c
 8010b20:	080289e8 	.word	0x080289e8
 8010b24:	08028a10 	.word	0x08028a10
 8010b28:	08028a3c 	.word	0x08028a3c
    }

    if (pcb->remote_port == tcphdr->src &&
 8010b2c:	69fb      	ldr	r3, [r7, #28]
 8010b2e:	8b1a      	ldrh	r2, [r3, #24]
 8010b30:	4b72      	ldr	r3, [pc, #456]	@ (8010cfc <tcp_input+0x49c>)
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	881b      	ldrh	r3, [r3, #0]
 8010b36:	b29b      	uxth	r3, r3
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	d13a      	bne.n	8010bb2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010b3c:	69fb      	ldr	r3, [r7, #28]
 8010b3e:	8ada      	ldrh	r2, [r3, #22]
 8010b40:	4b6e      	ldr	r3, [pc, #440]	@ (8010cfc <tcp_input+0x49c>)
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	885b      	ldrh	r3, [r3, #2]
 8010b46:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010b48:	429a      	cmp	r2, r3
 8010b4a:	d132      	bne.n	8010bb2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010b4c:	69fb      	ldr	r3, [r7, #28]
 8010b4e:	685a      	ldr	r2, [r3, #4]
 8010b50:	4b6b      	ldr	r3, [pc, #428]	@ (8010d00 <tcp_input+0x4a0>)
 8010b52:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010b54:	429a      	cmp	r2, r3
 8010b56:	d12c      	bne.n	8010bb2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010b58:	69fb      	ldr	r3, [r7, #28]
 8010b5a:	681a      	ldr	r2, [r3, #0]
 8010b5c:	4b68      	ldr	r3, [pc, #416]	@ (8010d00 <tcp_input+0x4a0>)
 8010b5e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010b60:	429a      	cmp	r2, r3
 8010b62:	d126      	bne.n	8010bb2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010b64:	69fb      	ldr	r3, [r7, #28]
 8010b66:	68db      	ldr	r3, [r3, #12]
 8010b68:	69fa      	ldr	r2, [r7, #28]
 8010b6a:	429a      	cmp	r2, r3
 8010b6c:	d106      	bne.n	8010b7c <tcp_input+0x31c>
 8010b6e:	4b65      	ldr	r3, [pc, #404]	@ (8010d04 <tcp_input+0x4a4>)
 8010b70:	f240 120d 	movw	r2, #269	@ 0x10d
 8010b74:	4964      	ldr	r1, [pc, #400]	@ (8010d08 <tcp_input+0x4a8>)
 8010b76:	4865      	ldr	r0, [pc, #404]	@ (8010d0c <tcp_input+0x4ac>)
 8010b78:	f014 fca6 	bl	80254c8 <iprintf>
      if (prev != NULL) {
 8010b7c:	69bb      	ldr	r3, [r7, #24]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d00a      	beq.n	8010b98 <tcp_input+0x338>
        prev->next = pcb->next;
 8010b82:	69fb      	ldr	r3, [r7, #28]
 8010b84:	68da      	ldr	r2, [r3, #12]
 8010b86:	69bb      	ldr	r3, [r7, #24]
 8010b88:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010b8a:	4b61      	ldr	r3, [pc, #388]	@ (8010d10 <tcp_input+0x4b0>)
 8010b8c:	681a      	ldr	r2, [r3, #0]
 8010b8e:	69fb      	ldr	r3, [r7, #28]
 8010b90:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010b92:	4a5f      	ldr	r2, [pc, #380]	@ (8010d10 <tcp_input+0x4b0>)
 8010b94:	69fb      	ldr	r3, [r7, #28]
 8010b96:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010b98:	69fb      	ldr	r3, [r7, #28]
 8010b9a:	68db      	ldr	r3, [r3, #12]
 8010b9c:	69fa      	ldr	r2, [r7, #28]
 8010b9e:	429a      	cmp	r2, r3
 8010ba0:	d111      	bne.n	8010bc6 <tcp_input+0x366>
 8010ba2:	4b58      	ldr	r3, [pc, #352]	@ (8010d04 <tcp_input+0x4a4>)
 8010ba4:	f240 1215 	movw	r2, #277	@ 0x115
 8010ba8:	495a      	ldr	r1, [pc, #360]	@ (8010d14 <tcp_input+0x4b4>)
 8010baa:	4858      	ldr	r0, [pc, #352]	@ (8010d0c <tcp_input+0x4ac>)
 8010bac:	f014 fc8c 	bl	80254c8 <iprintf>
      break;
 8010bb0:	e009      	b.n	8010bc6 <tcp_input+0x366>
    }
    prev = pcb;
 8010bb2:	69fb      	ldr	r3, [r7, #28]
 8010bb4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010bb6:	69fb      	ldr	r3, [r7, #28]
 8010bb8:	68db      	ldr	r3, [r3, #12]
 8010bba:	61fb      	str	r3, [r7, #28]
 8010bbc:	69fb      	ldr	r3, [r7, #28]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	f47f af5e 	bne.w	8010a80 <tcp_input+0x220>
 8010bc4:	e000      	b.n	8010bc8 <tcp_input+0x368>
      break;
 8010bc6:	bf00      	nop
  }

  if (pcb == NULL) {
 8010bc8:	69fb      	ldr	r3, [r7, #28]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	f040 80aa 	bne.w	8010d24 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010bd0:	4b51      	ldr	r3, [pc, #324]	@ (8010d18 <tcp_input+0x4b8>)
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	61fb      	str	r3, [r7, #28]
 8010bd6:	e03f      	b.n	8010c58 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010bd8:	69fb      	ldr	r3, [r7, #28]
 8010bda:	7d1b      	ldrb	r3, [r3, #20]
 8010bdc:	2b0a      	cmp	r3, #10
 8010bde:	d006      	beq.n	8010bee <tcp_input+0x38e>
 8010be0:	4b48      	ldr	r3, [pc, #288]	@ (8010d04 <tcp_input+0x4a4>)
 8010be2:	f240 121f 	movw	r2, #287	@ 0x11f
 8010be6:	494d      	ldr	r1, [pc, #308]	@ (8010d1c <tcp_input+0x4bc>)
 8010be8:	4848      	ldr	r0, [pc, #288]	@ (8010d0c <tcp_input+0x4ac>)
 8010bea:	f014 fc6d 	bl	80254c8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010bee:	69fb      	ldr	r3, [r7, #28]
 8010bf0:	7a1b      	ldrb	r3, [r3, #8]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d009      	beq.n	8010c0a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010bf6:	69fb      	ldr	r3, [r7, #28]
 8010bf8:	7a1a      	ldrb	r2, [r3, #8]
 8010bfa:	4b41      	ldr	r3, [pc, #260]	@ (8010d00 <tcp_input+0x4a0>)
 8010bfc:	685b      	ldr	r3, [r3, #4]
 8010bfe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010c02:	3301      	adds	r3, #1
 8010c04:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010c06:	429a      	cmp	r2, r3
 8010c08:	d122      	bne.n	8010c50 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010c0a:	69fb      	ldr	r3, [r7, #28]
 8010c0c:	8b1a      	ldrh	r2, [r3, #24]
 8010c0e:	4b3b      	ldr	r3, [pc, #236]	@ (8010cfc <tcp_input+0x49c>)
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	881b      	ldrh	r3, [r3, #0]
 8010c14:	b29b      	uxth	r3, r3
 8010c16:	429a      	cmp	r2, r3
 8010c18:	d11b      	bne.n	8010c52 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010c1a:	69fb      	ldr	r3, [r7, #28]
 8010c1c:	8ada      	ldrh	r2, [r3, #22]
 8010c1e:	4b37      	ldr	r3, [pc, #220]	@ (8010cfc <tcp_input+0x49c>)
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	885b      	ldrh	r3, [r3, #2]
 8010c24:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010c26:	429a      	cmp	r2, r3
 8010c28:	d113      	bne.n	8010c52 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010c2a:	69fb      	ldr	r3, [r7, #28]
 8010c2c:	685a      	ldr	r2, [r3, #4]
 8010c2e:	4b34      	ldr	r3, [pc, #208]	@ (8010d00 <tcp_input+0x4a0>)
 8010c30:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010c32:	429a      	cmp	r2, r3
 8010c34:	d10d      	bne.n	8010c52 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010c36:	69fb      	ldr	r3, [r7, #28]
 8010c38:	681a      	ldr	r2, [r3, #0]
 8010c3a:	4b31      	ldr	r3, [pc, #196]	@ (8010d00 <tcp_input+0x4a0>)
 8010c3c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010c3e:	429a      	cmp	r2, r3
 8010c40:	d107      	bne.n	8010c52 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010c42:	69f8      	ldr	r0, [r7, #28]
 8010c44:	f000 fb56 	bl	80112f4 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f7fd fda1 	bl	800e790 <pbuf_free>
        return;
 8010c4e:	e1fd      	b.n	801104c <tcp_input+0x7ec>
        continue;
 8010c50:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c52:	69fb      	ldr	r3, [r7, #28]
 8010c54:	68db      	ldr	r3, [r3, #12]
 8010c56:	61fb      	str	r3, [r7, #28]
 8010c58:	69fb      	ldr	r3, [r7, #28]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d1bc      	bne.n	8010bd8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010c62:	4b2f      	ldr	r3, [pc, #188]	@ (8010d20 <tcp_input+0x4c0>)
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	617b      	str	r3, [r7, #20]
 8010c68:	e02a      	b.n	8010cc0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010c6a:	697b      	ldr	r3, [r7, #20]
 8010c6c:	7a1b      	ldrb	r3, [r3, #8]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d00c      	beq.n	8010c8c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010c72:	697b      	ldr	r3, [r7, #20]
 8010c74:	7a1a      	ldrb	r2, [r3, #8]
 8010c76:	4b22      	ldr	r3, [pc, #136]	@ (8010d00 <tcp_input+0x4a0>)
 8010c78:	685b      	ldr	r3, [r3, #4]
 8010c7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010c7e:	3301      	adds	r3, #1
 8010c80:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010c82:	429a      	cmp	r2, r3
 8010c84:	d002      	beq.n	8010c8c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	61bb      	str	r3, [r7, #24]
        continue;
 8010c8a:	e016      	b.n	8010cba <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	8ada      	ldrh	r2, [r3, #22]
 8010c90:	4b1a      	ldr	r3, [pc, #104]	@ (8010cfc <tcp_input+0x49c>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	885b      	ldrh	r3, [r3, #2]
 8010c96:	b29b      	uxth	r3, r3
 8010c98:	429a      	cmp	r2, r3
 8010c9a:	d10c      	bne.n	8010cb6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010c9c:	697b      	ldr	r3, [r7, #20]
 8010c9e:	681a      	ldr	r2, [r3, #0]
 8010ca0:	4b17      	ldr	r3, [pc, #92]	@ (8010d00 <tcp_input+0x4a0>)
 8010ca2:	695b      	ldr	r3, [r3, #20]
 8010ca4:	429a      	cmp	r2, r3
 8010ca6:	d00f      	beq.n	8010cc8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010ca8:	697b      	ldr	r3, [r7, #20]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d00d      	beq.n	8010cca <tcp_input+0x46a>
 8010cae:	697b      	ldr	r3, [r7, #20]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d009      	beq.n	8010cca <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010cb6:	697b      	ldr	r3, [r7, #20]
 8010cb8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010cba:	697b      	ldr	r3, [r7, #20]
 8010cbc:	68db      	ldr	r3, [r3, #12]
 8010cbe:	617b      	str	r3, [r7, #20]
 8010cc0:	697b      	ldr	r3, [r7, #20]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d1d1      	bne.n	8010c6a <tcp_input+0x40a>
 8010cc6:	e000      	b.n	8010cca <tcp_input+0x46a>
            break;
 8010cc8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d029      	beq.n	8010d24 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010cd0:	69bb      	ldr	r3, [r7, #24]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d00a      	beq.n	8010cec <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010cd6:	697b      	ldr	r3, [r7, #20]
 8010cd8:	68da      	ldr	r2, [r3, #12]
 8010cda:	69bb      	ldr	r3, [r7, #24]
 8010cdc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010cde:	4b10      	ldr	r3, [pc, #64]	@ (8010d20 <tcp_input+0x4c0>)
 8010ce0:	681a      	ldr	r2, [r3, #0]
 8010ce2:	697b      	ldr	r3, [r7, #20]
 8010ce4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010ce6:	4a0e      	ldr	r2, [pc, #56]	@ (8010d20 <tcp_input+0x4c0>)
 8010ce8:	697b      	ldr	r3, [r7, #20]
 8010cea:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010cec:	6978      	ldr	r0, [r7, #20]
 8010cee:	f000 fa03 	bl	80110f8 <tcp_listen_input>
      }
      pbuf_free(p);
 8010cf2:	6878      	ldr	r0, [r7, #4]
 8010cf4:	f7fd fd4c 	bl	800e790 <pbuf_free>
      return;
 8010cf8:	e1a8      	b.n	801104c <tcp_input+0x7ec>
 8010cfa:	bf00      	nop
 8010cfc:	2000fea8 	.word	0x2000fea8
 8010d00:	2000cc10 	.word	0x2000cc10
 8010d04:	08028938 	.word	0x08028938
 8010d08:	08028a64 	.word	0x08028a64
 8010d0c:	08028984 	.word	0x08028984
 8010d10:	2000fe8c 	.word	0x2000fe8c
 8010d14:	08028a90 	.word	0x08028a90
 8010d18:	2000fe90 	.word	0x2000fe90
 8010d1c:	08028abc 	.word	0x08028abc
 8010d20:	2000fe88 	.word	0x2000fe88
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010d24:	69fb      	ldr	r3, [r7, #28]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	f000 8158 	beq.w	8010fdc <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010d2c:	4b95      	ldr	r3, [pc, #596]	@ (8010f84 <tcp_input+0x724>)
 8010d2e:	2200      	movs	r2, #0
 8010d30:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	891a      	ldrh	r2, [r3, #8]
 8010d36:	4b93      	ldr	r3, [pc, #588]	@ (8010f84 <tcp_input+0x724>)
 8010d38:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010d3a:	4a92      	ldr	r2, [pc, #584]	@ (8010f84 <tcp_input+0x724>)
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010d40:	4b91      	ldr	r3, [pc, #580]	@ (8010f88 <tcp_input+0x728>)
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	4a8f      	ldr	r2, [pc, #572]	@ (8010f84 <tcp_input+0x724>)
 8010d46:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010d48:	4b90      	ldr	r3, [pc, #576]	@ (8010f8c <tcp_input+0x72c>)
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010d4e:	4b90      	ldr	r3, [pc, #576]	@ (8010f90 <tcp_input+0x730>)
 8010d50:	2200      	movs	r2, #0
 8010d52:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010d54:	4b8f      	ldr	r3, [pc, #572]	@ (8010f94 <tcp_input+0x734>)
 8010d56:	2200      	movs	r2, #0
 8010d58:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010d5a:	4b8f      	ldr	r3, [pc, #572]	@ (8010f98 <tcp_input+0x738>)
 8010d5c:	781b      	ldrb	r3, [r3, #0]
 8010d5e:	f003 0308 	and.w	r3, r3, #8
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d006      	beq.n	8010d74 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	7b5b      	ldrb	r3, [r3, #13]
 8010d6a:	f043 0301 	orr.w	r3, r3, #1
 8010d6e:	b2da      	uxtb	r2, r3
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010d74:	69fb      	ldr	r3, [r7, #28]
 8010d76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d017      	beq.n	8010dac <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010d7c:	69f8      	ldr	r0, [r7, #28]
 8010d7e:	f7ff f85b 	bl	800fe38 <tcp_process_refused_data>
 8010d82:	4603      	mov	r3, r0
 8010d84:	f113 0f0d 	cmn.w	r3, #13
 8010d88:	d007      	beq.n	8010d9a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010d8a:	69fb      	ldr	r3, [r7, #28]
 8010d8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d00c      	beq.n	8010dac <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010d92:	4b82      	ldr	r3, [pc, #520]	@ (8010f9c <tcp_input+0x73c>)
 8010d94:	881b      	ldrh	r3, [r3, #0]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d008      	beq.n	8010dac <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010d9a:	69fb      	ldr	r3, [r7, #28]
 8010d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	f040 80e3 	bne.w	8010f6a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010da4:	69f8      	ldr	r0, [r7, #28]
 8010da6:	f003 fdff 	bl	80149a8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010daa:	e0de      	b.n	8010f6a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8010dac:	4a7c      	ldr	r2, [pc, #496]	@ (8010fa0 <tcp_input+0x740>)
 8010dae:	69fb      	ldr	r3, [r7, #28]
 8010db0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010db2:	69f8      	ldr	r0, [r7, #28]
 8010db4:	f000 fb18 	bl	80113e8 <tcp_process>
 8010db8:	4603      	mov	r3, r0
 8010dba:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010dbc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010dc0:	f113 0f0d 	cmn.w	r3, #13
 8010dc4:	f000 80d3 	beq.w	8010f6e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8010dc8:	4b71      	ldr	r3, [pc, #452]	@ (8010f90 <tcp_input+0x730>)
 8010dca:	781b      	ldrb	r3, [r3, #0]
 8010dcc:	f003 0308 	and.w	r3, r3, #8
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d015      	beq.n	8010e00 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010dd4:	69fb      	ldr	r3, [r7, #28]
 8010dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d008      	beq.n	8010df0 <tcp_input+0x590>
 8010dde:	69fb      	ldr	r3, [r7, #28]
 8010de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010de4:	69fa      	ldr	r2, [r7, #28]
 8010de6:	6912      	ldr	r2, [r2, #16]
 8010de8:	f06f 010d 	mvn.w	r1, #13
 8010dec:	4610      	mov	r0, r2
 8010dee:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010df0:	69f9      	ldr	r1, [r7, #28]
 8010df2:	486c      	ldr	r0, [pc, #432]	@ (8010fa4 <tcp_input+0x744>)
 8010df4:	f7ff fbbc 	bl	8010570 <tcp_pcb_remove>
        tcp_free(pcb);
 8010df8:	69f8      	ldr	r0, [r7, #28]
 8010dfa:	f7fd ff85 	bl	800ed08 <tcp_free>
 8010dfe:	e0da      	b.n	8010fb6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8010e00:	2300      	movs	r3, #0
 8010e02:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010e04:	4b63      	ldr	r3, [pc, #396]	@ (8010f94 <tcp_input+0x734>)
 8010e06:	881b      	ldrh	r3, [r3, #0]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d01d      	beq.n	8010e48 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010e0c:	4b61      	ldr	r3, [pc, #388]	@ (8010f94 <tcp_input+0x734>)
 8010e0e:	881b      	ldrh	r3, [r3, #0]
 8010e10:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010e12:	69fb      	ldr	r3, [r7, #28]
 8010e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d00a      	beq.n	8010e32 <tcp_input+0x5d2>
 8010e1c:	69fb      	ldr	r3, [r7, #28]
 8010e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010e22:	69fa      	ldr	r2, [r7, #28]
 8010e24:	6910      	ldr	r0, [r2, #16]
 8010e26:	89fa      	ldrh	r2, [r7, #14]
 8010e28:	69f9      	ldr	r1, [r7, #28]
 8010e2a:	4798      	blx	r3
 8010e2c:	4603      	mov	r3, r0
 8010e2e:	74fb      	strb	r3, [r7, #19]
 8010e30:	e001      	b.n	8010e36 <tcp_input+0x5d6>
 8010e32:	2300      	movs	r3, #0
 8010e34:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010e36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010e3a:	f113 0f0d 	cmn.w	r3, #13
 8010e3e:	f000 8098 	beq.w	8010f72 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010e42:	4b54      	ldr	r3, [pc, #336]	@ (8010f94 <tcp_input+0x734>)
 8010e44:	2200      	movs	r2, #0
 8010e46:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010e48:	69f8      	ldr	r0, [r7, #28]
 8010e4a:	f000 f915 	bl	8011078 <tcp_input_delayed_close>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	f040 8090 	bne.w	8010f76 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010e56:	4b4d      	ldr	r3, [pc, #308]	@ (8010f8c <tcp_input+0x72c>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d041      	beq.n	8010ee2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010e5e:	69fb      	ldr	r3, [r7, #28]
 8010e60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d006      	beq.n	8010e74 <tcp_input+0x614>
 8010e66:	4b50      	ldr	r3, [pc, #320]	@ (8010fa8 <tcp_input+0x748>)
 8010e68:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8010e6c:	494f      	ldr	r1, [pc, #316]	@ (8010fac <tcp_input+0x74c>)
 8010e6e:	4850      	ldr	r0, [pc, #320]	@ (8010fb0 <tcp_input+0x750>)
 8010e70:	f014 fb2a 	bl	80254c8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010e74:	69fb      	ldr	r3, [r7, #28]
 8010e76:	8b5b      	ldrh	r3, [r3, #26]
 8010e78:	f003 0310 	and.w	r3, r3, #16
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d008      	beq.n	8010e92 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010e80:	4b42      	ldr	r3, [pc, #264]	@ (8010f8c <tcp_input+0x72c>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	4618      	mov	r0, r3
 8010e86:	f7fd fc83 	bl	800e790 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010e8a:	69f8      	ldr	r0, [r7, #28]
 8010e8c:	f7fe fa80 	bl	800f390 <tcp_abort>
            goto aborted;
 8010e90:	e091      	b.n	8010fb6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010e92:	69fb      	ldr	r3, [r7, #28]
 8010e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d00c      	beq.n	8010eb6 <tcp_input+0x656>
 8010e9c:	69fb      	ldr	r3, [r7, #28]
 8010e9e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010ea2:	69fb      	ldr	r3, [r7, #28]
 8010ea4:	6918      	ldr	r0, [r3, #16]
 8010ea6:	4b39      	ldr	r3, [pc, #228]	@ (8010f8c <tcp_input+0x72c>)
 8010ea8:	681a      	ldr	r2, [r3, #0]
 8010eaa:	2300      	movs	r3, #0
 8010eac:	69f9      	ldr	r1, [r7, #28]
 8010eae:	47a0      	blx	r4
 8010eb0:	4603      	mov	r3, r0
 8010eb2:	74fb      	strb	r3, [r7, #19]
 8010eb4:	e008      	b.n	8010ec8 <tcp_input+0x668>
 8010eb6:	4b35      	ldr	r3, [pc, #212]	@ (8010f8c <tcp_input+0x72c>)
 8010eb8:	681a      	ldr	r2, [r3, #0]
 8010eba:	2300      	movs	r3, #0
 8010ebc:	69f9      	ldr	r1, [r7, #28]
 8010ebe:	2000      	movs	r0, #0
 8010ec0:	f7ff f890 	bl	800ffe4 <tcp_recv_null>
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010ec8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010ecc:	f113 0f0d 	cmn.w	r3, #13
 8010ed0:	d053      	beq.n	8010f7a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010ed2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d003      	beq.n	8010ee2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010eda:	4b2c      	ldr	r3, [pc, #176]	@ (8010f8c <tcp_input+0x72c>)
 8010edc:	681a      	ldr	r2, [r3, #0]
 8010ede:	69fb      	ldr	r3, [r7, #28]
 8010ee0:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010ee2:	4b2b      	ldr	r3, [pc, #172]	@ (8010f90 <tcp_input+0x730>)
 8010ee4:	781b      	ldrb	r3, [r3, #0]
 8010ee6:	f003 0320 	and.w	r3, r3, #32
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d030      	beq.n	8010f50 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8010eee:	69fb      	ldr	r3, [r7, #28]
 8010ef0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d009      	beq.n	8010f0a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010ef6:	69fb      	ldr	r3, [r7, #28]
 8010ef8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010efa:	7b5a      	ldrb	r2, [r3, #13]
 8010efc:	69fb      	ldr	r3, [r7, #28]
 8010efe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010f00:	f042 0220 	orr.w	r2, r2, #32
 8010f04:	b2d2      	uxtb	r2, r2
 8010f06:	735a      	strb	r2, [r3, #13]
 8010f08:	e022      	b.n	8010f50 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010f0a:	69fb      	ldr	r3, [r7, #28]
 8010f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010f0e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8010f12:	d005      	beq.n	8010f20 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8010f14:	69fb      	ldr	r3, [r7, #28]
 8010f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010f18:	3301      	adds	r3, #1
 8010f1a:	b29a      	uxth	r2, r3
 8010f1c:	69fb      	ldr	r3, [r7, #28]
 8010f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010f20:	69fb      	ldr	r3, [r7, #28]
 8010f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d00b      	beq.n	8010f42 <tcp_input+0x6e2>
 8010f2a:	69fb      	ldr	r3, [r7, #28]
 8010f2c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010f30:	69fb      	ldr	r3, [r7, #28]
 8010f32:	6918      	ldr	r0, [r3, #16]
 8010f34:	2300      	movs	r3, #0
 8010f36:	2200      	movs	r2, #0
 8010f38:	69f9      	ldr	r1, [r7, #28]
 8010f3a:	47a0      	blx	r4
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	74fb      	strb	r3, [r7, #19]
 8010f40:	e001      	b.n	8010f46 <tcp_input+0x6e6>
 8010f42:	2300      	movs	r3, #0
 8010f44:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010f46:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010f4a:	f113 0f0d 	cmn.w	r3, #13
 8010f4e:	d016      	beq.n	8010f7e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010f50:	4b13      	ldr	r3, [pc, #76]	@ (8010fa0 <tcp_input+0x740>)
 8010f52:	2200      	movs	r2, #0
 8010f54:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010f56:	69f8      	ldr	r0, [r7, #28]
 8010f58:	f000 f88e 	bl	8011078 <tcp_input_delayed_close>
 8010f5c:	4603      	mov	r3, r0
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d128      	bne.n	8010fb4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010f62:	69f8      	ldr	r0, [r7, #28]
 8010f64:	f002 ff1a 	bl	8013d9c <tcp_output>
 8010f68:	e025      	b.n	8010fb6 <tcp_input+0x756>
        goto aborted;
 8010f6a:	bf00      	nop
 8010f6c:	e023      	b.n	8010fb6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010f6e:	bf00      	nop
 8010f70:	e021      	b.n	8010fb6 <tcp_input+0x756>
              goto aborted;
 8010f72:	bf00      	nop
 8010f74:	e01f      	b.n	8010fb6 <tcp_input+0x756>
          goto aborted;
 8010f76:	bf00      	nop
 8010f78:	e01d      	b.n	8010fb6 <tcp_input+0x756>
            goto aborted;
 8010f7a:	bf00      	nop
 8010f7c:	e01b      	b.n	8010fb6 <tcp_input+0x756>
              goto aborted;
 8010f7e:	bf00      	nop
 8010f80:	e019      	b.n	8010fb6 <tcp_input+0x756>
 8010f82:	bf00      	nop
 8010f84:	2000fe98 	.word	0x2000fe98
 8010f88:	2000fea8 	.word	0x2000fea8
 8010f8c:	2000fec8 	.word	0x2000fec8
 8010f90:	2000fec5 	.word	0x2000fec5
 8010f94:	2000fec0 	.word	0x2000fec0
 8010f98:	2000fec4 	.word	0x2000fec4
 8010f9c:	2000fec2 	.word	0x2000fec2
 8010fa0:	2000fecc 	.word	0x2000fecc
 8010fa4:	2000fe8c 	.word	0x2000fe8c
 8010fa8:	08028938 	.word	0x08028938
 8010fac:	08028aec 	.word	0x08028aec
 8010fb0:	08028984 	.word	0x08028984
          goto aborted;
 8010fb4:	bf00      	nop
    tcp_input_pcb = NULL;
 8010fb6:	4b27      	ldr	r3, [pc, #156]	@ (8011054 <tcp_input+0x7f4>)
 8010fb8:	2200      	movs	r2, #0
 8010fba:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010fbc:	4b26      	ldr	r3, [pc, #152]	@ (8011058 <tcp_input+0x7f8>)
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010fc2:	4b26      	ldr	r3, [pc, #152]	@ (801105c <tcp_input+0x7fc>)
 8010fc4:	685b      	ldr	r3, [r3, #4]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d03f      	beq.n	801104a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8010fca:	4b24      	ldr	r3, [pc, #144]	@ (801105c <tcp_input+0x7fc>)
 8010fcc:	685b      	ldr	r3, [r3, #4]
 8010fce:	4618      	mov	r0, r3
 8010fd0:	f7fd fbde 	bl	800e790 <pbuf_free>
      inseg.p = NULL;
 8010fd4:	4b21      	ldr	r3, [pc, #132]	@ (801105c <tcp_input+0x7fc>)
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010fda:	e036      	b.n	801104a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010fdc:	4b20      	ldr	r3, [pc, #128]	@ (8011060 <tcp_input+0x800>)
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	899b      	ldrh	r3, [r3, #12]
 8010fe2:	b29b      	uxth	r3, r3
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	f7fb ff7b 	bl	800cee0 <lwip_htons>
 8010fea:	4603      	mov	r3, r0
 8010fec:	b2db      	uxtb	r3, r3
 8010fee:	f003 0304 	and.w	r3, r3, #4
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d118      	bne.n	8011028 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8011064 <tcp_input+0x804>)
 8010ff8:	6819      	ldr	r1, [r3, #0]
 8010ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8011068 <tcp_input+0x808>)
 8010ffc:	881b      	ldrh	r3, [r3, #0]
 8010ffe:	461a      	mov	r2, r3
 8011000:	4b1a      	ldr	r3, [pc, #104]	@ (801106c <tcp_input+0x80c>)
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011006:	4b16      	ldr	r3, [pc, #88]	@ (8011060 <tcp_input+0x800>)
 8011008:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801100a:	885b      	ldrh	r3, [r3, #2]
 801100c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801100e:	4a14      	ldr	r2, [pc, #80]	@ (8011060 <tcp_input+0x800>)
 8011010:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011012:	8812      	ldrh	r2, [r2, #0]
 8011014:	b292      	uxth	r2, r2
 8011016:	9202      	str	r2, [sp, #8]
 8011018:	9301      	str	r3, [sp, #4]
 801101a:	4b15      	ldr	r3, [pc, #84]	@ (8011070 <tcp_input+0x810>)
 801101c:	9300      	str	r3, [sp, #0]
 801101e:	4b15      	ldr	r3, [pc, #84]	@ (8011074 <tcp_input+0x814>)
 8011020:	4602      	mov	r2, r0
 8011022:	2000      	movs	r0, #0
 8011024:	f003 fc6e 	bl	8014904 <tcp_rst>
    pbuf_free(p);
 8011028:	6878      	ldr	r0, [r7, #4]
 801102a:	f7fd fbb1 	bl	800e790 <pbuf_free>
  return;
 801102e:	e00c      	b.n	801104a <tcp_input+0x7ea>
    goto dropped;
 8011030:	bf00      	nop
 8011032:	e006      	b.n	8011042 <tcp_input+0x7e2>
    goto dropped;
 8011034:	bf00      	nop
 8011036:	e004      	b.n	8011042 <tcp_input+0x7e2>
    goto dropped;
 8011038:	bf00      	nop
 801103a:	e002      	b.n	8011042 <tcp_input+0x7e2>
      goto dropped;
 801103c:	bf00      	nop
 801103e:	e000      	b.n	8011042 <tcp_input+0x7e2>
      goto dropped;
 8011040:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011042:	6878      	ldr	r0, [r7, #4]
 8011044:	f7fd fba4 	bl	800e790 <pbuf_free>
 8011048:	e000      	b.n	801104c <tcp_input+0x7ec>
  return;
 801104a:	bf00      	nop
}
 801104c:	3724      	adds	r7, #36	@ 0x24
 801104e:	46bd      	mov	sp, r7
 8011050:	bd90      	pop	{r4, r7, pc}
 8011052:	bf00      	nop
 8011054:	2000fecc 	.word	0x2000fecc
 8011058:	2000fec8 	.word	0x2000fec8
 801105c:	2000fe98 	.word	0x2000fe98
 8011060:	2000fea8 	.word	0x2000fea8
 8011064:	2000febc 	.word	0x2000febc
 8011068:	2000fec2 	.word	0x2000fec2
 801106c:	2000feb8 	.word	0x2000feb8
 8011070:	2000cc20 	.word	0x2000cc20
 8011074:	2000cc24 	.word	0x2000cc24

08011078 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b082      	sub	sp, #8
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d106      	bne.n	8011094 <tcp_input_delayed_close+0x1c>
 8011086:	4b17      	ldr	r3, [pc, #92]	@ (80110e4 <tcp_input_delayed_close+0x6c>)
 8011088:	f240 225a 	movw	r2, #602	@ 0x25a
 801108c:	4916      	ldr	r1, [pc, #88]	@ (80110e8 <tcp_input_delayed_close+0x70>)
 801108e:	4817      	ldr	r0, [pc, #92]	@ (80110ec <tcp_input_delayed_close+0x74>)
 8011090:	f014 fa1a 	bl	80254c8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011094:	4b16      	ldr	r3, [pc, #88]	@ (80110f0 <tcp_input_delayed_close+0x78>)
 8011096:	781b      	ldrb	r3, [r3, #0]
 8011098:	f003 0310 	and.w	r3, r3, #16
 801109c:	2b00      	cmp	r3, #0
 801109e:	d01c      	beq.n	80110da <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	8b5b      	ldrh	r3, [r3, #26]
 80110a4:	f003 0310 	and.w	r3, r3, #16
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d10d      	bne.n	80110c8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d008      	beq.n	80110c8 <tcp_input_delayed_close+0x50>
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80110bc:	687a      	ldr	r2, [r7, #4]
 80110be:	6912      	ldr	r2, [r2, #16]
 80110c0:	f06f 010e 	mvn.w	r1, #14
 80110c4:	4610      	mov	r0, r2
 80110c6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80110c8:	6879      	ldr	r1, [r7, #4]
 80110ca:	480a      	ldr	r0, [pc, #40]	@ (80110f4 <tcp_input_delayed_close+0x7c>)
 80110cc:	f7ff fa50 	bl	8010570 <tcp_pcb_remove>
    tcp_free(pcb);
 80110d0:	6878      	ldr	r0, [r7, #4]
 80110d2:	f7fd fe19 	bl	800ed08 <tcp_free>
    return 1;
 80110d6:	2301      	movs	r3, #1
 80110d8:	e000      	b.n	80110dc <tcp_input_delayed_close+0x64>
  }
  return 0;
 80110da:	2300      	movs	r3, #0
}
 80110dc:	4618      	mov	r0, r3
 80110de:	3708      	adds	r7, #8
 80110e0:	46bd      	mov	sp, r7
 80110e2:	bd80      	pop	{r7, pc}
 80110e4:	08028938 	.word	0x08028938
 80110e8:	08028b08 	.word	0x08028b08
 80110ec:	08028984 	.word	0x08028984
 80110f0:	2000fec5 	.word	0x2000fec5
 80110f4:	2000fe8c 	.word	0x2000fe8c

080110f8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80110f8:	b590      	push	{r4, r7, lr}
 80110fa:	b08b      	sub	sp, #44	@ 0x2c
 80110fc:	af04      	add	r7, sp, #16
 80110fe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011100:	4b6f      	ldr	r3, [pc, #444]	@ (80112c0 <tcp_listen_input+0x1c8>)
 8011102:	781b      	ldrb	r3, [r3, #0]
 8011104:	f003 0304 	and.w	r3, r3, #4
 8011108:	2b00      	cmp	r3, #0
 801110a:	f040 80d2 	bne.w	80112b2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d106      	bne.n	8011122 <tcp_listen_input+0x2a>
 8011114:	4b6b      	ldr	r3, [pc, #428]	@ (80112c4 <tcp_listen_input+0x1cc>)
 8011116:	f240 2281 	movw	r2, #641	@ 0x281
 801111a:	496b      	ldr	r1, [pc, #428]	@ (80112c8 <tcp_listen_input+0x1d0>)
 801111c:	486b      	ldr	r0, [pc, #428]	@ (80112cc <tcp_listen_input+0x1d4>)
 801111e:	f014 f9d3 	bl	80254c8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011122:	4b67      	ldr	r3, [pc, #412]	@ (80112c0 <tcp_listen_input+0x1c8>)
 8011124:	781b      	ldrb	r3, [r3, #0]
 8011126:	f003 0310 	and.w	r3, r3, #16
 801112a:	2b00      	cmp	r3, #0
 801112c:	d019      	beq.n	8011162 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801112e:	4b68      	ldr	r3, [pc, #416]	@ (80112d0 <tcp_listen_input+0x1d8>)
 8011130:	6819      	ldr	r1, [r3, #0]
 8011132:	4b68      	ldr	r3, [pc, #416]	@ (80112d4 <tcp_listen_input+0x1dc>)
 8011134:	881b      	ldrh	r3, [r3, #0]
 8011136:	461a      	mov	r2, r3
 8011138:	4b67      	ldr	r3, [pc, #412]	@ (80112d8 <tcp_listen_input+0x1e0>)
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801113e:	4b67      	ldr	r3, [pc, #412]	@ (80112dc <tcp_listen_input+0x1e4>)
 8011140:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011142:	885b      	ldrh	r3, [r3, #2]
 8011144:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011146:	4a65      	ldr	r2, [pc, #404]	@ (80112dc <tcp_listen_input+0x1e4>)
 8011148:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801114a:	8812      	ldrh	r2, [r2, #0]
 801114c:	b292      	uxth	r2, r2
 801114e:	9202      	str	r2, [sp, #8]
 8011150:	9301      	str	r3, [sp, #4]
 8011152:	4b63      	ldr	r3, [pc, #396]	@ (80112e0 <tcp_listen_input+0x1e8>)
 8011154:	9300      	str	r3, [sp, #0]
 8011156:	4b63      	ldr	r3, [pc, #396]	@ (80112e4 <tcp_listen_input+0x1ec>)
 8011158:	4602      	mov	r2, r0
 801115a:	6878      	ldr	r0, [r7, #4]
 801115c:	f003 fbd2 	bl	8014904 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011160:	e0a9      	b.n	80112b6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8011162:	4b57      	ldr	r3, [pc, #348]	@ (80112c0 <tcp_listen_input+0x1c8>)
 8011164:	781b      	ldrb	r3, [r3, #0]
 8011166:	f003 0302 	and.w	r3, r3, #2
 801116a:	2b00      	cmp	r3, #0
 801116c:	f000 80a3 	beq.w	80112b6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	7d5b      	ldrb	r3, [r3, #21]
 8011174:	4618      	mov	r0, r3
 8011176:	f7ff f859 	bl	801022c <tcp_alloc>
 801117a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801117c:	697b      	ldr	r3, [r7, #20]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d111      	bne.n	80111a6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	699b      	ldr	r3, [r3, #24]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d00a      	beq.n	80111a0 <tcp_listen_input+0xa8>
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	699b      	ldr	r3, [r3, #24]
 801118e:	687a      	ldr	r2, [r7, #4]
 8011190:	6910      	ldr	r0, [r2, #16]
 8011192:	f04f 32ff 	mov.w	r2, #4294967295
 8011196:	2100      	movs	r1, #0
 8011198:	4798      	blx	r3
 801119a:	4603      	mov	r3, r0
 801119c:	73bb      	strb	r3, [r7, #14]
      return;
 801119e:	e08b      	b.n	80112b8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80111a0:	23f0      	movs	r3, #240	@ 0xf0
 80111a2:	73bb      	strb	r3, [r7, #14]
      return;
 80111a4:	e088      	b.n	80112b8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80111a6:	4b50      	ldr	r3, [pc, #320]	@ (80112e8 <tcp_listen_input+0x1f0>)
 80111a8:	695a      	ldr	r2, [r3, #20]
 80111aa:	697b      	ldr	r3, [r7, #20]
 80111ac:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80111ae:	4b4e      	ldr	r3, [pc, #312]	@ (80112e8 <tcp_listen_input+0x1f0>)
 80111b0:	691a      	ldr	r2, [r3, #16]
 80111b2:	697b      	ldr	r3, [r7, #20]
 80111b4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	8ada      	ldrh	r2, [r3, #22]
 80111ba:	697b      	ldr	r3, [r7, #20]
 80111bc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80111be:	4b47      	ldr	r3, [pc, #284]	@ (80112dc <tcp_listen_input+0x1e4>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	881b      	ldrh	r3, [r3, #0]
 80111c4:	b29a      	uxth	r2, r3
 80111c6:	697b      	ldr	r3, [r7, #20]
 80111c8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80111ca:	697b      	ldr	r3, [r7, #20]
 80111cc:	2203      	movs	r2, #3
 80111ce:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80111d0:	4b41      	ldr	r3, [pc, #260]	@ (80112d8 <tcp_listen_input+0x1e0>)
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	1c5a      	adds	r2, r3, #1
 80111d6:	697b      	ldr	r3, [r7, #20]
 80111d8:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80111de:	697b      	ldr	r3, [r7, #20]
 80111e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80111e2:	6978      	ldr	r0, [r7, #20]
 80111e4:	f7ff fa58 	bl	8010698 <tcp_next_iss>
 80111e8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80111ea:	697b      	ldr	r3, [r7, #20]
 80111ec:	693a      	ldr	r2, [r7, #16]
 80111ee:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80111f0:	697b      	ldr	r3, [r7, #20]
 80111f2:	693a      	ldr	r2, [r7, #16]
 80111f4:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80111f6:	697b      	ldr	r3, [r7, #20]
 80111f8:	693a      	ldr	r2, [r7, #16]
 80111fa:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80111fc:	697b      	ldr	r3, [r7, #20]
 80111fe:	693a      	ldr	r2, [r7, #16]
 8011200:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011202:	4b35      	ldr	r3, [pc, #212]	@ (80112d8 <tcp_listen_input+0x1e0>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	1e5a      	subs	r2, r3, #1
 8011208:	697b      	ldr	r3, [r7, #20]
 801120a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	691a      	ldr	r2, [r3, #16]
 8011210:	697b      	ldr	r3, [r7, #20]
 8011212:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011214:	697b      	ldr	r3, [r7, #20]
 8011216:	687a      	ldr	r2, [r7, #4]
 8011218:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	7a5b      	ldrb	r3, [r3, #9]
 801121e:	f003 030c 	and.w	r3, r3, #12
 8011222:	b2da      	uxtb	r2, r3
 8011224:	697b      	ldr	r3, [r7, #20]
 8011226:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	7a1a      	ldrb	r2, [r3, #8]
 801122c:	697b      	ldr	r3, [r7, #20]
 801122e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011230:	4b2e      	ldr	r3, [pc, #184]	@ (80112ec <tcp_listen_input+0x1f4>)
 8011232:	681a      	ldr	r2, [r3, #0]
 8011234:	697b      	ldr	r3, [r7, #20]
 8011236:	60da      	str	r2, [r3, #12]
 8011238:	4a2c      	ldr	r2, [pc, #176]	@ (80112ec <tcp_listen_input+0x1f4>)
 801123a:	697b      	ldr	r3, [r7, #20]
 801123c:	6013      	str	r3, [r2, #0]
 801123e:	f003 fd23 	bl	8014c88 <tcp_timer_needed>
 8011242:	4b2b      	ldr	r3, [pc, #172]	@ (80112f0 <tcp_listen_input+0x1f8>)
 8011244:	2201      	movs	r2, #1
 8011246:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011248:	6978      	ldr	r0, [r7, #20]
 801124a:	f001 fd8b 	bl	8012d64 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801124e:	4b23      	ldr	r3, [pc, #140]	@ (80112dc <tcp_listen_input+0x1e4>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	89db      	ldrh	r3, [r3, #14]
 8011254:	b29a      	uxth	r2, r3
 8011256:	697b      	ldr	r3, [r7, #20]
 8011258:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801125c:	697b      	ldr	r3, [r7, #20]
 801125e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011262:	697b      	ldr	r3, [r7, #20]
 8011264:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011268:	697b      	ldr	r3, [r7, #20]
 801126a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801126c:	697b      	ldr	r3, [r7, #20]
 801126e:	3304      	adds	r3, #4
 8011270:	4618      	mov	r0, r3
 8011272:	f005 fc61 	bl	8016b38 <ip4_route>
 8011276:	4601      	mov	r1, r0
 8011278:	697b      	ldr	r3, [r7, #20]
 801127a:	3304      	adds	r3, #4
 801127c:	461a      	mov	r2, r3
 801127e:	4620      	mov	r0, r4
 8011280:	f7ff fa30 	bl	80106e4 <tcp_eff_send_mss_netif>
 8011284:	4603      	mov	r3, r0
 8011286:	461a      	mov	r2, r3
 8011288:	697b      	ldr	r3, [r7, #20]
 801128a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801128c:	2112      	movs	r1, #18
 801128e:	6978      	ldr	r0, [r7, #20]
 8011290:	f002 fc96 	bl	8013bc0 <tcp_enqueue_flags>
 8011294:	4603      	mov	r3, r0
 8011296:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011298:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d004      	beq.n	80112aa <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80112a0:	2100      	movs	r1, #0
 80112a2:	6978      	ldr	r0, [r7, #20]
 80112a4:	f7fd ffb6 	bl	800f214 <tcp_abandon>
      return;
 80112a8:	e006      	b.n	80112b8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80112aa:	6978      	ldr	r0, [r7, #20]
 80112ac:	f002 fd76 	bl	8013d9c <tcp_output>
  return;
 80112b0:	e001      	b.n	80112b6 <tcp_listen_input+0x1be>
    return;
 80112b2:	bf00      	nop
 80112b4:	e000      	b.n	80112b8 <tcp_listen_input+0x1c0>
  return;
 80112b6:	bf00      	nop
}
 80112b8:	371c      	adds	r7, #28
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bd90      	pop	{r4, r7, pc}
 80112be:	bf00      	nop
 80112c0:	2000fec4 	.word	0x2000fec4
 80112c4:	08028938 	.word	0x08028938
 80112c8:	08028b30 	.word	0x08028b30
 80112cc:	08028984 	.word	0x08028984
 80112d0:	2000febc 	.word	0x2000febc
 80112d4:	2000fec2 	.word	0x2000fec2
 80112d8:	2000feb8 	.word	0x2000feb8
 80112dc:	2000fea8 	.word	0x2000fea8
 80112e0:	2000cc20 	.word	0x2000cc20
 80112e4:	2000cc24 	.word	0x2000cc24
 80112e8:	2000cc10 	.word	0x2000cc10
 80112ec:	2000fe8c 	.word	0x2000fe8c
 80112f0:	2000fe94 	.word	0x2000fe94

080112f4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b086      	sub	sp, #24
 80112f8:	af04      	add	r7, sp, #16
 80112fa:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80112fc:	4b2f      	ldr	r3, [pc, #188]	@ (80113bc <tcp_timewait_input+0xc8>)
 80112fe:	781b      	ldrb	r3, [r3, #0]
 8011300:	f003 0304 	and.w	r3, r3, #4
 8011304:	2b00      	cmp	r3, #0
 8011306:	d153      	bne.n	80113b0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d106      	bne.n	801131c <tcp_timewait_input+0x28>
 801130e:	4b2c      	ldr	r3, [pc, #176]	@ (80113c0 <tcp_timewait_input+0xcc>)
 8011310:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8011314:	492b      	ldr	r1, [pc, #172]	@ (80113c4 <tcp_timewait_input+0xd0>)
 8011316:	482c      	ldr	r0, [pc, #176]	@ (80113c8 <tcp_timewait_input+0xd4>)
 8011318:	f014 f8d6 	bl	80254c8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801131c:	4b27      	ldr	r3, [pc, #156]	@ (80113bc <tcp_timewait_input+0xc8>)
 801131e:	781b      	ldrb	r3, [r3, #0]
 8011320:	f003 0302 	and.w	r3, r3, #2
 8011324:	2b00      	cmp	r3, #0
 8011326:	d02a      	beq.n	801137e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011328:	4b28      	ldr	r3, [pc, #160]	@ (80113cc <tcp_timewait_input+0xd8>)
 801132a:	681a      	ldr	r2, [r3, #0]
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011330:	1ad3      	subs	r3, r2, r3
 8011332:	2b00      	cmp	r3, #0
 8011334:	db2d      	blt.n	8011392 <tcp_timewait_input+0x9e>
 8011336:	4b25      	ldr	r3, [pc, #148]	@ (80113cc <tcp_timewait_input+0xd8>)
 8011338:	681a      	ldr	r2, [r3, #0]
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801133e:	6879      	ldr	r1, [r7, #4]
 8011340:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011342:	440b      	add	r3, r1
 8011344:	1ad3      	subs	r3, r2, r3
 8011346:	2b00      	cmp	r3, #0
 8011348:	dc23      	bgt.n	8011392 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801134a:	4b21      	ldr	r3, [pc, #132]	@ (80113d0 <tcp_timewait_input+0xdc>)
 801134c:	6819      	ldr	r1, [r3, #0]
 801134e:	4b21      	ldr	r3, [pc, #132]	@ (80113d4 <tcp_timewait_input+0xe0>)
 8011350:	881b      	ldrh	r3, [r3, #0]
 8011352:	461a      	mov	r2, r3
 8011354:	4b1d      	ldr	r3, [pc, #116]	@ (80113cc <tcp_timewait_input+0xd8>)
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801135a:	4b1f      	ldr	r3, [pc, #124]	@ (80113d8 <tcp_timewait_input+0xe4>)
 801135c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801135e:	885b      	ldrh	r3, [r3, #2]
 8011360:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011362:	4a1d      	ldr	r2, [pc, #116]	@ (80113d8 <tcp_timewait_input+0xe4>)
 8011364:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011366:	8812      	ldrh	r2, [r2, #0]
 8011368:	b292      	uxth	r2, r2
 801136a:	9202      	str	r2, [sp, #8]
 801136c:	9301      	str	r3, [sp, #4]
 801136e:	4b1b      	ldr	r3, [pc, #108]	@ (80113dc <tcp_timewait_input+0xe8>)
 8011370:	9300      	str	r3, [sp, #0]
 8011372:	4b1b      	ldr	r3, [pc, #108]	@ (80113e0 <tcp_timewait_input+0xec>)
 8011374:	4602      	mov	r2, r0
 8011376:	6878      	ldr	r0, [r7, #4]
 8011378:	f003 fac4 	bl	8014904 <tcp_rst>
      return;
 801137c:	e01b      	b.n	80113b6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801137e:	4b0f      	ldr	r3, [pc, #60]	@ (80113bc <tcp_timewait_input+0xc8>)
 8011380:	781b      	ldrb	r3, [r3, #0]
 8011382:	f003 0301 	and.w	r3, r3, #1
 8011386:	2b00      	cmp	r3, #0
 8011388:	d003      	beq.n	8011392 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801138a:	4b16      	ldr	r3, [pc, #88]	@ (80113e4 <tcp_timewait_input+0xf0>)
 801138c:	681a      	ldr	r2, [r3, #0]
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011392:	4b10      	ldr	r3, [pc, #64]	@ (80113d4 <tcp_timewait_input+0xe0>)
 8011394:	881b      	ldrh	r3, [r3, #0]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d00c      	beq.n	80113b4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	8b5b      	ldrh	r3, [r3, #26]
 801139e:	f043 0302 	orr.w	r3, r3, #2
 80113a2:	b29a      	uxth	r2, r3
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80113a8:	6878      	ldr	r0, [r7, #4]
 80113aa:	f002 fcf7 	bl	8013d9c <tcp_output>
  }
  return;
 80113ae:	e001      	b.n	80113b4 <tcp_timewait_input+0xc0>
    return;
 80113b0:	bf00      	nop
 80113b2:	e000      	b.n	80113b6 <tcp_timewait_input+0xc2>
  return;
 80113b4:	bf00      	nop
}
 80113b6:	3708      	adds	r7, #8
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bd80      	pop	{r7, pc}
 80113bc:	2000fec4 	.word	0x2000fec4
 80113c0:	08028938 	.word	0x08028938
 80113c4:	08028b50 	.word	0x08028b50
 80113c8:	08028984 	.word	0x08028984
 80113cc:	2000feb8 	.word	0x2000feb8
 80113d0:	2000febc 	.word	0x2000febc
 80113d4:	2000fec2 	.word	0x2000fec2
 80113d8:	2000fea8 	.word	0x2000fea8
 80113dc:	2000cc20 	.word	0x2000cc20
 80113e0:	2000cc24 	.word	0x2000cc24
 80113e4:	2000fe80 	.word	0x2000fe80

080113e8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80113e8:	b590      	push	{r4, r7, lr}
 80113ea:	b08d      	sub	sp, #52	@ 0x34
 80113ec:	af04      	add	r7, sp, #16
 80113ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80113f0:	2300      	movs	r3, #0
 80113f2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80113f4:	2300      	movs	r3, #0
 80113f6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d106      	bne.n	801140c <tcp_process+0x24>
 80113fe:	4b9d      	ldr	r3, [pc, #628]	@ (8011674 <tcp_process+0x28c>)
 8011400:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8011404:	499c      	ldr	r1, [pc, #624]	@ (8011678 <tcp_process+0x290>)
 8011406:	489d      	ldr	r0, [pc, #628]	@ (801167c <tcp_process+0x294>)
 8011408:	f014 f85e 	bl	80254c8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801140c:	4b9c      	ldr	r3, [pc, #624]	@ (8011680 <tcp_process+0x298>)
 801140e:	781b      	ldrb	r3, [r3, #0]
 8011410:	f003 0304 	and.w	r3, r3, #4
 8011414:	2b00      	cmp	r3, #0
 8011416:	d04e      	beq.n	80114b6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	7d1b      	ldrb	r3, [r3, #20]
 801141c:	2b02      	cmp	r3, #2
 801141e:	d108      	bne.n	8011432 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011424:	4b97      	ldr	r3, [pc, #604]	@ (8011684 <tcp_process+0x29c>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	429a      	cmp	r2, r3
 801142a:	d123      	bne.n	8011474 <tcp_process+0x8c>
        acceptable = 1;
 801142c:	2301      	movs	r3, #1
 801142e:	76fb      	strb	r3, [r7, #27]
 8011430:	e020      	b.n	8011474 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011436:	4b94      	ldr	r3, [pc, #592]	@ (8011688 <tcp_process+0x2a0>)
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	429a      	cmp	r2, r3
 801143c:	d102      	bne.n	8011444 <tcp_process+0x5c>
        acceptable = 1;
 801143e:	2301      	movs	r3, #1
 8011440:	76fb      	strb	r3, [r7, #27]
 8011442:	e017      	b.n	8011474 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011444:	4b90      	ldr	r3, [pc, #576]	@ (8011688 <tcp_process+0x2a0>)
 8011446:	681a      	ldr	r2, [r3, #0]
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801144c:	1ad3      	subs	r3, r2, r3
 801144e:	2b00      	cmp	r3, #0
 8011450:	db10      	blt.n	8011474 <tcp_process+0x8c>
 8011452:	4b8d      	ldr	r3, [pc, #564]	@ (8011688 <tcp_process+0x2a0>)
 8011454:	681a      	ldr	r2, [r3, #0]
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801145a:	6879      	ldr	r1, [r7, #4]
 801145c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801145e:	440b      	add	r3, r1
 8011460:	1ad3      	subs	r3, r2, r3
 8011462:	2b00      	cmp	r3, #0
 8011464:	dc06      	bgt.n	8011474 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	8b5b      	ldrh	r3, [r3, #26]
 801146a:	f043 0302 	orr.w	r3, r3, #2
 801146e:	b29a      	uxth	r2, r3
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011474:	7efb      	ldrb	r3, [r7, #27]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d01b      	beq.n	80114b2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	7d1b      	ldrb	r3, [r3, #20]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d106      	bne.n	8011490 <tcp_process+0xa8>
 8011482:	4b7c      	ldr	r3, [pc, #496]	@ (8011674 <tcp_process+0x28c>)
 8011484:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8011488:	4980      	ldr	r1, [pc, #512]	@ (801168c <tcp_process+0x2a4>)
 801148a:	487c      	ldr	r0, [pc, #496]	@ (801167c <tcp_process+0x294>)
 801148c:	f014 f81c 	bl	80254c8 <iprintf>
      recv_flags |= TF_RESET;
 8011490:	4b7f      	ldr	r3, [pc, #508]	@ (8011690 <tcp_process+0x2a8>)
 8011492:	781b      	ldrb	r3, [r3, #0]
 8011494:	f043 0308 	orr.w	r3, r3, #8
 8011498:	b2da      	uxtb	r2, r3
 801149a:	4b7d      	ldr	r3, [pc, #500]	@ (8011690 <tcp_process+0x2a8>)
 801149c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	8b5b      	ldrh	r3, [r3, #26]
 80114a2:	f023 0301 	bic.w	r3, r3, #1
 80114a6:	b29a      	uxth	r2, r3
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80114ac:	f06f 030d 	mvn.w	r3, #13
 80114b0:	e37a      	b.n	8011ba8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80114b2:	2300      	movs	r3, #0
 80114b4:	e378      	b.n	8011ba8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80114b6:	4b72      	ldr	r3, [pc, #456]	@ (8011680 <tcp_process+0x298>)
 80114b8:	781b      	ldrb	r3, [r3, #0]
 80114ba:	f003 0302 	and.w	r3, r3, #2
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d010      	beq.n	80114e4 <tcp_process+0xfc>
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	7d1b      	ldrb	r3, [r3, #20]
 80114c6:	2b02      	cmp	r3, #2
 80114c8:	d00c      	beq.n	80114e4 <tcp_process+0xfc>
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	7d1b      	ldrb	r3, [r3, #20]
 80114ce:	2b03      	cmp	r3, #3
 80114d0:	d008      	beq.n	80114e4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	8b5b      	ldrh	r3, [r3, #26]
 80114d6:	f043 0302 	orr.w	r3, r3, #2
 80114da:	b29a      	uxth	r2, r3
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80114e0:	2300      	movs	r3, #0
 80114e2:	e361      	b.n	8011ba8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	8b5b      	ldrh	r3, [r3, #26]
 80114e8:	f003 0310 	and.w	r3, r3, #16
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d103      	bne.n	80114f8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80114f0:	4b68      	ldr	r3, [pc, #416]	@ (8011694 <tcp_process+0x2ac>)
 80114f2:	681a      	ldr	r2, [r3, #0]
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	2200      	movs	r2, #0
 80114fc:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	2200      	movs	r2, #0
 8011504:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8011508:	6878      	ldr	r0, [r7, #4]
 801150a:	f001 fc2b 	bl	8012d64 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	7d1b      	ldrb	r3, [r3, #20]
 8011512:	3b02      	subs	r3, #2
 8011514:	2b07      	cmp	r3, #7
 8011516:	f200 8337 	bhi.w	8011b88 <tcp_process+0x7a0>
 801151a:	a201      	add	r2, pc, #4	@ (adr r2, 8011520 <tcp_process+0x138>)
 801151c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011520:	08011541 	.word	0x08011541
 8011524:	08011771 	.word	0x08011771
 8011528:	080118e9 	.word	0x080118e9
 801152c:	08011913 	.word	0x08011913
 8011530:	08011a37 	.word	0x08011a37
 8011534:	080118e9 	.word	0x080118e9
 8011538:	08011ac3 	.word	0x08011ac3
 801153c:	08011b53 	.word	0x08011b53
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011540:	4b4f      	ldr	r3, [pc, #316]	@ (8011680 <tcp_process+0x298>)
 8011542:	781b      	ldrb	r3, [r3, #0]
 8011544:	f003 0310 	and.w	r3, r3, #16
 8011548:	2b00      	cmp	r3, #0
 801154a:	f000 80e4 	beq.w	8011716 <tcp_process+0x32e>
 801154e:	4b4c      	ldr	r3, [pc, #304]	@ (8011680 <tcp_process+0x298>)
 8011550:	781b      	ldrb	r3, [r3, #0]
 8011552:	f003 0302 	and.w	r3, r3, #2
 8011556:	2b00      	cmp	r3, #0
 8011558:	f000 80dd 	beq.w	8011716 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011560:	1c5a      	adds	r2, r3, #1
 8011562:	4b48      	ldr	r3, [pc, #288]	@ (8011684 <tcp_process+0x29c>)
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	429a      	cmp	r2, r3
 8011568:	f040 80d5 	bne.w	8011716 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801156c:	4b46      	ldr	r3, [pc, #280]	@ (8011688 <tcp_process+0x2a0>)
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	1c5a      	adds	r2, r3, #1
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801157e:	4b41      	ldr	r3, [pc, #260]	@ (8011684 <tcp_process+0x29c>)
 8011580:	681a      	ldr	r2, [r3, #0]
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8011586:	4b44      	ldr	r3, [pc, #272]	@ (8011698 <tcp_process+0x2b0>)
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	89db      	ldrh	r3, [r3, #14]
 801158c:	b29a      	uxth	r2, r3
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80115a0:	4b39      	ldr	r3, [pc, #228]	@ (8011688 <tcp_process+0x2a0>)
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	1e5a      	subs	r2, r3, #1
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	2204      	movs	r2, #4
 80115ae:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	3304      	adds	r3, #4
 80115b8:	4618      	mov	r0, r3
 80115ba:	f005 fabd 	bl	8016b38 <ip4_route>
 80115be:	4601      	mov	r1, r0
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	3304      	adds	r3, #4
 80115c4:	461a      	mov	r2, r3
 80115c6:	4620      	mov	r0, r4
 80115c8:	f7ff f88c 	bl	80106e4 <tcp_eff_send_mss_netif>
 80115cc:	4603      	mov	r3, r0
 80115ce:	461a      	mov	r2, r3
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80115d8:	009a      	lsls	r2, r3, #2
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80115de:	005b      	lsls	r3, r3, #1
 80115e0:	f241 111c 	movw	r1, #4380	@ 0x111c
 80115e4:	428b      	cmp	r3, r1
 80115e6:	bf38      	it	cc
 80115e8:	460b      	movcc	r3, r1
 80115ea:	429a      	cmp	r2, r3
 80115ec:	d204      	bcs.n	80115f8 <tcp_process+0x210>
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80115f2:	009b      	lsls	r3, r3, #2
 80115f4:	b29b      	uxth	r3, r3
 80115f6:	e00d      	b.n	8011614 <tcp_process+0x22c>
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80115fc:	005b      	lsls	r3, r3, #1
 80115fe:	f241 121c 	movw	r2, #4380	@ 0x111c
 8011602:	4293      	cmp	r3, r2
 8011604:	d904      	bls.n	8011610 <tcp_process+0x228>
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801160a:	005b      	lsls	r3, r3, #1
 801160c:	b29b      	uxth	r3, r3
 801160e:	e001      	b.n	8011614 <tcp_process+0x22c>
 8011610:	f241 131c 	movw	r3, #4380	@ 0x111c
 8011614:	687a      	ldr	r2, [r7, #4]
 8011616:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011620:	2b00      	cmp	r3, #0
 8011622:	d106      	bne.n	8011632 <tcp_process+0x24a>
 8011624:	4b13      	ldr	r3, [pc, #76]	@ (8011674 <tcp_process+0x28c>)
 8011626:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801162a:	491c      	ldr	r1, [pc, #112]	@ (801169c <tcp_process+0x2b4>)
 801162c:	4813      	ldr	r0, [pc, #76]	@ (801167c <tcp_process+0x294>)
 801162e:	f013 ff4b 	bl	80254c8 <iprintf>
        --pcb->snd_queuelen;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011638:	3b01      	subs	r3, #1
 801163a:	b29a      	uxth	r2, r3
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011646:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8011648:	69fb      	ldr	r3, [r7, #28]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d12a      	bne.n	80116a4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011652:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011654:	69fb      	ldr	r3, [r7, #28]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d106      	bne.n	8011668 <tcp_process+0x280>
 801165a:	4b06      	ldr	r3, [pc, #24]	@ (8011674 <tcp_process+0x28c>)
 801165c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8011660:	490f      	ldr	r1, [pc, #60]	@ (80116a0 <tcp_process+0x2b8>)
 8011662:	4806      	ldr	r0, [pc, #24]	@ (801167c <tcp_process+0x294>)
 8011664:	f013 ff30 	bl	80254c8 <iprintf>
          pcb->unsent = rseg->next;
 8011668:	69fb      	ldr	r3, [r7, #28]
 801166a:	681a      	ldr	r2, [r3, #0]
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011670:	e01c      	b.n	80116ac <tcp_process+0x2c4>
 8011672:	bf00      	nop
 8011674:	08028938 	.word	0x08028938
 8011678:	08028b70 	.word	0x08028b70
 801167c:	08028984 	.word	0x08028984
 8011680:	2000fec4 	.word	0x2000fec4
 8011684:	2000febc 	.word	0x2000febc
 8011688:	2000feb8 	.word	0x2000feb8
 801168c:	08028b8c 	.word	0x08028b8c
 8011690:	2000fec5 	.word	0x2000fec5
 8011694:	2000fe80 	.word	0x2000fe80
 8011698:	2000fea8 	.word	0x2000fea8
 801169c:	08028bac 	.word	0x08028bac
 80116a0:	08028bc4 	.word	0x08028bc4
        } else {
          pcb->unacked = rseg->next;
 80116a4:	69fb      	ldr	r3, [r7, #28]
 80116a6:	681a      	ldr	r2, [r3, #0]
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80116ac:	69f8      	ldr	r0, [r7, #28]
 80116ae:	f7fe fc54 	bl	800ff5a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d104      	bne.n	80116c4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80116c0:	861a      	strh	r2, [r3, #48]	@ 0x30
 80116c2:	e006      	b.n	80116d2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	2200      	movs	r2, #0
 80116c8:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	2200      	movs	r2, #0
 80116ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d00a      	beq.n	80116f2 <tcp_process+0x30a>
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80116e2:	687a      	ldr	r2, [r7, #4]
 80116e4:	6910      	ldr	r0, [r2, #16]
 80116e6:	2200      	movs	r2, #0
 80116e8:	6879      	ldr	r1, [r7, #4]
 80116ea:	4798      	blx	r3
 80116ec:	4603      	mov	r3, r0
 80116ee:	76bb      	strb	r3, [r7, #26]
 80116f0:	e001      	b.n	80116f6 <tcp_process+0x30e>
 80116f2:	2300      	movs	r3, #0
 80116f4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80116f6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80116fa:	f113 0f0d 	cmn.w	r3, #13
 80116fe:	d102      	bne.n	8011706 <tcp_process+0x31e>
          return ERR_ABRT;
 8011700:	f06f 030c 	mvn.w	r3, #12
 8011704:	e250      	b.n	8011ba8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	8b5b      	ldrh	r3, [r3, #26]
 801170a:	f043 0302 	orr.w	r3, r3, #2
 801170e:	b29a      	uxth	r2, r3
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011714:	e23a      	b.n	8011b8c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8011716:	4b98      	ldr	r3, [pc, #608]	@ (8011978 <tcp_process+0x590>)
 8011718:	781b      	ldrb	r3, [r3, #0]
 801171a:	f003 0310 	and.w	r3, r3, #16
 801171e:	2b00      	cmp	r3, #0
 8011720:	f000 8234 	beq.w	8011b8c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011724:	4b95      	ldr	r3, [pc, #596]	@ (801197c <tcp_process+0x594>)
 8011726:	6819      	ldr	r1, [r3, #0]
 8011728:	4b95      	ldr	r3, [pc, #596]	@ (8011980 <tcp_process+0x598>)
 801172a:	881b      	ldrh	r3, [r3, #0]
 801172c:	461a      	mov	r2, r3
 801172e:	4b95      	ldr	r3, [pc, #596]	@ (8011984 <tcp_process+0x59c>)
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011734:	4b94      	ldr	r3, [pc, #592]	@ (8011988 <tcp_process+0x5a0>)
 8011736:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011738:	885b      	ldrh	r3, [r3, #2]
 801173a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801173c:	4a92      	ldr	r2, [pc, #584]	@ (8011988 <tcp_process+0x5a0>)
 801173e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011740:	8812      	ldrh	r2, [r2, #0]
 8011742:	b292      	uxth	r2, r2
 8011744:	9202      	str	r2, [sp, #8]
 8011746:	9301      	str	r3, [sp, #4]
 8011748:	4b90      	ldr	r3, [pc, #576]	@ (801198c <tcp_process+0x5a4>)
 801174a:	9300      	str	r3, [sp, #0]
 801174c:	4b90      	ldr	r3, [pc, #576]	@ (8011990 <tcp_process+0x5a8>)
 801174e:	4602      	mov	r2, r0
 8011750:	6878      	ldr	r0, [r7, #4]
 8011752:	f003 f8d7 	bl	8014904 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801175c:	2b05      	cmp	r3, #5
 801175e:	f200 8215 	bhi.w	8011b8c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	2200      	movs	r2, #0
 8011766:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8011768:	6878      	ldr	r0, [r7, #4]
 801176a:	f002 fea3 	bl	80144b4 <tcp_rexmit_rto>
      break;
 801176e:	e20d      	b.n	8011b8c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011770:	4b81      	ldr	r3, [pc, #516]	@ (8011978 <tcp_process+0x590>)
 8011772:	781b      	ldrb	r3, [r3, #0]
 8011774:	f003 0310 	and.w	r3, r3, #16
 8011778:	2b00      	cmp	r3, #0
 801177a:	f000 80a1 	beq.w	80118c0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801177e:	4b7f      	ldr	r3, [pc, #508]	@ (801197c <tcp_process+0x594>)
 8011780:	681a      	ldr	r2, [r3, #0]
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011786:	1ad3      	subs	r3, r2, r3
 8011788:	3b01      	subs	r3, #1
 801178a:	2b00      	cmp	r3, #0
 801178c:	db7e      	blt.n	801188c <tcp_process+0x4a4>
 801178e:	4b7b      	ldr	r3, [pc, #492]	@ (801197c <tcp_process+0x594>)
 8011790:	681a      	ldr	r2, [r3, #0]
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011796:	1ad3      	subs	r3, r2, r3
 8011798:	2b00      	cmp	r3, #0
 801179a:	dc77      	bgt.n	801188c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	2204      	movs	r2, #4
 80117a0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d102      	bne.n	80117b0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80117aa:	23fa      	movs	r3, #250	@ 0xfa
 80117ac:	76bb      	strb	r3, [r7, #26]
 80117ae:	e01d      	b.n	80117ec <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80117b4:	699b      	ldr	r3, [r3, #24]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d106      	bne.n	80117c8 <tcp_process+0x3e0>
 80117ba:	4b76      	ldr	r3, [pc, #472]	@ (8011994 <tcp_process+0x5ac>)
 80117bc:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80117c0:	4975      	ldr	r1, [pc, #468]	@ (8011998 <tcp_process+0x5b0>)
 80117c2:	4876      	ldr	r0, [pc, #472]	@ (801199c <tcp_process+0x5b4>)
 80117c4:	f013 fe80 	bl	80254c8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80117cc:	699b      	ldr	r3, [r3, #24]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d00a      	beq.n	80117e8 <tcp_process+0x400>
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80117d6:	699b      	ldr	r3, [r3, #24]
 80117d8:	687a      	ldr	r2, [r7, #4]
 80117da:	6910      	ldr	r0, [r2, #16]
 80117dc:	2200      	movs	r2, #0
 80117de:	6879      	ldr	r1, [r7, #4]
 80117e0:	4798      	blx	r3
 80117e2:	4603      	mov	r3, r0
 80117e4:	76bb      	strb	r3, [r7, #26]
 80117e6:	e001      	b.n	80117ec <tcp_process+0x404>
 80117e8:	23f0      	movs	r3, #240	@ 0xf0
 80117ea:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80117ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d00a      	beq.n	801180a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80117f4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80117f8:	f113 0f0d 	cmn.w	r3, #13
 80117fc:	d002      	beq.n	8011804 <tcp_process+0x41c>
              tcp_abort(pcb);
 80117fe:	6878      	ldr	r0, [r7, #4]
 8011800:	f7fd fdc6 	bl	800f390 <tcp_abort>
            }
            return ERR_ABRT;
 8011804:	f06f 030c 	mvn.w	r3, #12
 8011808:	e1ce      	b.n	8011ba8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f000 fae0 	bl	8011dd0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011810:	4b63      	ldr	r3, [pc, #396]	@ (80119a0 <tcp_process+0x5b8>)
 8011812:	881b      	ldrh	r3, [r3, #0]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d005      	beq.n	8011824 <tcp_process+0x43c>
            recv_acked--;
 8011818:	4b61      	ldr	r3, [pc, #388]	@ (80119a0 <tcp_process+0x5b8>)
 801181a:	881b      	ldrh	r3, [r3, #0]
 801181c:	3b01      	subs	r3, #1
 801181e:	b29a      	uxth	r2, r3
 8011820:	4b5f      	ldr	r3, [pc, #380]	@ (80119a0 <tcp_process+0x5b8>)
 8011822:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011828:	009a      	lsls	r2, r3, #2
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801182e:	005b      	lsls	r3, r3, #1
 8011830:	f241 111c 	movw	r1, #4380	@ 0x111c
 8011834:	428b      	cmp	r3, r1
 8011836:	bf38      	it	cc
 8011838:	460b      	movcc	r3, r1
 801183a:	429a      	cmp	r2, r3
 801183c:	d204      	bcs.n	8011848 <tcp_process+0x460>
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011842:	009b      	lsls	r3, r3, #2
 8011844:	b29b      	uxth	r3, r3
 8011846:	e00d      	b.n	8011864 <tcp_process+0x47c>
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801184c:	005b      	lsls	r3, r3, #1
 801184e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8011852:	4293      	cmp	r3, r2
 8011854:	d904      	bls.n	8011860 <tcp_process+0x478>
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801185a:	005b      	lsls	r3, r3, #1
 801185c:	b29b      	uxth	r3, r3
 801185e:	e001      	b.n	8011864 <tcp_process+0x47c>
 8011860:	f241 131c 	movw	r3, #4380	@ 0x111c
 8011864:	687a      	ldr	r2, [r7, #4]
 8011866:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801186a:	4b4e      	ldr	r3, [pc, #312]	@ (80119a4 <tcp_process+0x5bc>)
 801186c:	781b      	ldrb	r3, [r3, #0]
 801186e:	f003 0320 	and.w	r3, r3, #32
 8011872:	2b00      	cmp	r3, #0
 8011874:	d037      	beq.n	80118e6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	8b5b      	ldrh	r3, [r3, #26]
 801187a:	f043 0302 	orr.w	r3, r3, #2
 801187e:	b29a      	uxth	r2, r3
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	2207      	movs	r2, #7
 8011888:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801188a:	e02c      	b.n	80118e6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801188c:	4b3b      	ldr	r3, [pc, #236]	@ (801197c <tcp_process+0x594>)
 801188e:	6819      	ldr	r1, [r3, #0]
 8011890:	4b3b      	ldr	r3, [pc, #236]	@ (8011980 <tcp_process+0x598>)
 8011892:	881b      	ldrh	r3, [r3, #0]
 8011894:	461a      	mov	r2, r3
 8011896:	4b3b      	ldr	r3, [pc, #236]	@ (8011984 <tcp_process+0x59c>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801189c:	4b3a      	ldr	r3, [pc, #232]	@ (8011988 <tcp_process+0x5a0>)
 801189e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80118a0:	885b      	ldrh	r3, [r3, #2]
 80118a2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80118a4:	4a38      	ldr	r2, [pc, #224]	@ (8011988 <tcp_process+0x5a0>)
 80118a6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80118a8:	8812      	ldrh	r2, [r2, #0]
 80118aa:	b292      	uxth	r2, r2
 80118ac:	9202      	str	r2, [sp, #8]
 80118ae:	9301      	str	r3, [sp, #4]
 80118b0:	4b36      	ldr	r3, [pc, #216]	@ (801198c <tcp_process+0x5a4>)
 80118b2:	9300      	str	r3, [sp, #0]
 80118b4:	4b36      	ldr	r3, [pc, #216]	@ (8011990 <tcp_process+0x5a8>)
 80118b6:	4602      	mov	r2, r0
 80118b8:	6878      	ldr	r0, [r7, #4]
 80118ba:	f003 f823 	bl	8014904 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80118be:	e167      	b.n	8011b90 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80118c0:	4b2d      	ldr	r3, [pc, #180]	@ (8011978 <tcp_process+0x590>)
 80118c2:	781b      	ldrb	r3, [r3, #0]
 80118c4:	f003 0302 	and.w	r3, r3, #2
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	f000 8161 	beq.w	8011b90 <tcp_process+0x7a8>
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118d2:	1e5a      	subs	r2, r3, #1
 80118d4:	4b2b      	ldr	r3, [pc, #172]	@ (8011984 <tcp_process+0x59c>)
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	429a      	cmp	r2, r3
 80118da:	f040 8159 	bne.w	8011b90 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80118de:	6878      	ldr	r0, [r7, #4]
 80118e0:	f002 fe0a 	bl	80144f8 <tcp_rexmit>
      break;
 80118e4:	e154      	b.n	8011b90 <tcp_process+0x7a8>
 80118e6:	e153      	b.n	8011b90 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80118e8:	6878      	ldr	r0, [r7, #4]
 80118ea:	f000 fa71 	bl	8011dd0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80118ee:	4b2d      	ldr	r3, [pc, #180]	@ (80119a4 <tcp_process+0x5bc>)
 80118f0:	781b      	ldrb	r3, [r3, #0]
 80118f2:	f003 0320 	and.w	r3, r3, #32
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	f000 814c 	beq.w	8011b94 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	8b5b      	ldrh	r3, [r3, #26]
 8011900:	f043 0302 	orr.w	r3, r3, #2
 8011904:	b29a      	uxth	r2, r3
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	2207      	movs	r2, #7
 801190e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011910:	e140      	b.n	8011b94 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011912:	6878      	ldr	r0, [r7, #4]
 8011914:	f000 fa5c 	bl	8011dd0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011918:	4b22      	ldr	r3, [pc, #136]	@ (80119a4 <tcp_process+0x5bc>)
 801191a:	781b      	ldrb	r3, [r3, #0]
 801191c:	f003 0320 	and.w	r3, r3, #32
 8011920:	2b00      	cmp	r3, #0
 8011922:	d071      	beq.n	8011a08 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011924:	4b14      	ldr	r3, [pc, #80]	@ (8011978 <tcp_process+0x590>)
 8011926:	781b      	ldrb	r3, [r3, #0]
 8011928:	f003 0310 	and.w	r3, r3, #16
 801192c:	2b00      	cmp	r3, #0
 801192e:	d060      	beq.n	80119f2 <tcp_process+0x60a>
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011934:	4b11      	ldr	r3, [pc, #68]	@ (801197c <tcp_process+0x594>)
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	429a      	cmp	r2, r3
 801193a:	d15a      	bne.n	80119f2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011940:	2b00      	cmp	r3, #0
 8011942:	d156      	bne.n	80119f2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	8b5b      	ldrh	r3, [r3, #26]
 8011948:	f043 0302 	orr.w	r3, r3, #2
 801194c:	b29a      	uxth	r2, r3
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011952:	6878      	ldr	r0, [r7, #4]
 8011954:	f7fe fdbc 	bl	80104d0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011958:	4b13      	ldr	r3, [pc, #76]	@ (80119a8 <tcp_process+0x5c0>)
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	687a      	ldr	r2, [r7, #4]
 801195e:	429a      	cmp	r2, r3
 8011960:	d105      	bne.n	801196e <tcp_process+0x586>
 8011962:	4b11      	ldr	r3, [pc, #68]	@ (80119a8 <tcp_process+0x5c0>)
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	68db      	ldr	r3, [r3, #12]
 8011968:	4a0f      	ldr	r2, [pc, #60]	@ (80119a8 <tcp_process+0x5c0>)
 801196a:	6013      	str	r3, [r2, #0]
 801196c:	e02e      	b.n	80119cc <tcp_process+0x5e4>
 801196e:	4b0e      	ldr	r3, [pc, #56]	@ (80119a8 <tcp_process+0x5c0>)
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	617b      	str	r3, [r7, #20]
 8011974:	e027      	b.n	80119c6 <tcp_process+0x5de>
 8011976:	bf00      	nop
 8011978:	2000fec4 	.word	0x2000fec4
 801197c:	2000febc 	.word	0x2000febc
 8011980:	2000fec2 	.word	0x2000fec2
 8011984:	2000feb8 	.word	0x2000feb8
 8011988:	2000fea8 	.word	0x2000fea8
 801198c:	2000cc20 	.word	0x2000cc20
 8011990:	2000cc24 	.word	0x2000cc24
 8011994:	08028938 	.word	0x08028938
 8011998:	08028bd8 	.word	0x08028bd8
 801199c:	08028984 	.word	0x08028984
 80119a0:	2000fec0 	.word	0x2000fec0
 80119a4:	2000fec5 	.word	0x2000fec5
 80119a8:	2000fe8c 	.word	0x2000fe8c
 80119ac:	697b      	ldr	r3, [r7, #20]
 80119ae:	68db      	ldr	r3, [r3, #12]
 80119b0:	687a      	ldr	r2, [r7, #4]
 80119b2:	429a      	cmp	r2, r3
 80119b4:	d104      	bne.n	80119c0 <tcp_process+0x5d8>
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	68da      	ldr	r2, [r3, #12]
 80119ba:	697b      	ldr	r3, [r7, #20]
 80119bc:	60da      	str	r2, [r3, #12]
 80119be:	e005      	b.n	80119cc <tcp_process+0x5e4>
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	68db      	ldr	r3, [r3, #12]
 80119c4:	617b      	str	r3, [r7, #20]
 80119c6:	697b      	ldr	r3, [r7, #20]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d1ef      	bne.n	80119ac <tcp_process+0x5c4>
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	2200      	movs	r2, #0
 80119d0:	60da      	str	r2, [r3, #12]
 80119d2:	4b77      	ldr	r3, [pc, #476]	@ (8011bb0 <tcp_process+0x7c8>)
 80119d4:	2201      	movs	r2, #1
 80119d6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	220a      	movs	r2, #10
 80119dc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80119de:	4b75      	ldr	r3, [pc, #468]	@ (8011bb4 <tcp_process+0x7cc>)
 80119e0:	681a      	ldr	r2, [r3, #0]
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	60da      	str	r2, [r3, #12]
 80119e6:	4a73      	ldr	r2, [pc, #460]	@ (8011bb4 <tcp_process+0x7cc>)
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	6013      	str	r3, [r2, #0]
 80119ec:	f003 f94c 	bl	8014c88 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80119f0:	e0d2      	b.n	8011b98 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	8b5b      	ldrh	r3, [r3, #26]
 80119f6:	f043 0302 	orr.w	r3, r3, #2
 80119fa:	b29a      	uxth	r2, r3
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	2208      	movs	r2, #8
 8011a04:	751a      	strb	r2, [r3, #20]
      break;
 8011a06:	e0c7      	b.n	8011b98 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011a08:	4b6b      	ldr	r3, [pc, #428]	@ (8011bb8 <tcp_process+0x7d0>)
 8011a0a:	781b      	ldrb	r3, [r3, #0]
 8011a0c:	f003 0310 	and.w	r3, r3, #16
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	f000 80c1 	beq.w	8011b98 <tcp_process+0x7b0>
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011a1a:	4b68      	ldr	r3, [pc, #416]	@ (8011bbc <tcp_process+0x7d4>)
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	429a      	cmp	r2, r3
 8011a20:	f040 80ba 	bne.w	8011b98 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	f040 80b5 	bne.w	8011b98 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	2206      	movs	r2, #6
 8011a32:	751a      	strb	r2, [r3, #20]
      break;
 8011a34:	e0b0      	b.n	8011b98 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011a36:	6878      	ldr	r0, [r7, #4]
 8011a38:	f000 f9ca 	bl	8011dd0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011a3c:	4b60      	ldr	r3, [pc, #384]	@ (8011bc0 <tcp_process+0x7d8>)
 8011a3e:	781b      	ldrb	r3, [r3, #0]
 8011a40:	f003 0320 	and.w	r3, r3, #32
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	f000 80a9 	beq.w	8011b9c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	8b5b      	ldrh	r3, [r3, #26]
 8011a4e:	f043 0302 	orr.w	r3, r3, #2
 8011a52:	b29a      	uxth	r2, r3
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011a58:	6878      	ldr	r0, [r7, #4]
 8011a5a:	f7fe fd39 	bl	80104d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011a5e:	4b59      	ldr	r3, [pc, #356]	@ (8011bc4 <tcp_process+0x7dc>)
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	687a      	ldr	r2, [r7, #4]
 8011a64:	429a      	cmp	r2, r3
 8011a66:	d105      	bne.n	8011a74 <tcp_process+0x68c>
 8011a68:	4b56      	ldr	r3, [pc, #344]	@ (8011bc4 <tcp_process+0x7dc>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	68db      	ldr	r3, [r3, #12]
 8011a6e:	4a55      	ldr	r2, [pc, #340]	@ (8011bc4 <tcp_process+0x7dc>)
 8011a70:	6013      	str	r3, [r2, #0]
 8011a72:	e013      	b.n	8011a9c <tcp_process+0x6b4>
 8011a74:	4b53      	ldr	r3, [pc, #332]	@ (8011bc4 <tcp_process+0x7dc>)
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	613b      	str	r3, [r7, #16]
 8011a7a:	e00c      	b.n	8011a96 <tcp_process+0x6ae>
 8011a7c:	693b      	ldr	r3, [r7, #16]
 8011a7e:	68db      	ldr	r3, [r3, #12]
 8011a80:	687a      	ldr	r2, [r7, #4]
 8011a82:	429a      	cmp	r2, r3
 8011a84:	d104      	bne.n	8011a90 <tcp_process+0x6a8>
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	68da      	ldr	r2, [r3, #12]
 8011a8a:	693b      	ldr	r3, [r7, #16]
 8011a8c:	60da      	str	r2, [r3, #12]
 8011a8e:	e005      	b.n	8011a9c <tcp_process+0x6b4>
 8011a90:	693b      	ldr	r3, [r7, #16]
 8011a92:	68db      	ldr	r3, [r3, #12]
 8011a94:	613b      	str	r3, [r7, #16]
 8011a96:	693b      	ldr	r3, [r7, #16]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d1ef      	bne.n	8011a7c <tcp_process+0x694>
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	60da      	str	r2, [r3, #12]
 8011aa2:	4b43      	ldr	r3, [pc, #268]	@ (8011bb0 <tcp_process+0x7c8>)
 8011aa4:	2201      	movs	r2, #1
 8011aa6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	220a      	movs	r2, #10
 8011aac:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011aae:	4b41      	ldr	r3, [pc, #260]	@ (8011bb4 <tcp_process+0x7cc>)
 8011ab0:	681a      	ldr	r2, [r3, #0]
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	60da      	str	r2, [r3, #12]
 8011ab6:	4a3f      	ldr	r2, [pc, #252]	@ (8011bb4 <tcp_process+0x7cc>)
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	6013      	str	r3, [r2, #0]
 8011abc:	f003 f8e4 	bl	8014c88 <tcp_timer_needed>
      }
      break;
 8011ac0:	e06c      	b.n	8011b9c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011ac2:	6878      	ldr	r0, [r7, #4]
 8011ac4:	f000 f984 	bl	8011dd0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011ac8:	4b3b      	ldr	r3, [pc, #236]	@ (8011bb8 <tcp_process+0x7d0>)
 8011aca:	781b      	ldrb	r3, [r3, #0]
 8011acc:	f003 0310 	and.w	r3, r3, #16
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d065      	beq.n	8011ba0 <tcp_process+0x7b8>
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011ad8:	4b38      	ldr	r3, [pc, #224]	@ (8011bbc <tcp_process+0x7d4>)
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	429a      	cmp	r2, r3
 8011ade:	d15f      	bne.n	8011ba0 <tcp_process+0x7b8>
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d15b      	bne.n	8011ba0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011ae8:	6878      	ldr	r0, [r7, #4]
 8011aea:	f7fe fcf1 	bl	80104d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011aee:	4b35      	ldr	r3, [pc, #212]	@ (8011bc4 <tcp_process+0x7dc>)
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	687a      	ldr	r2, [r7, #4]
 8011af4:	429a      	cmp	r2, r3
 8011af6:	d105      	bne.n	8011b04 <tcp_process+0x71c>
 8011af8:	4b32      	ldr	r3, [pc, #200]	@ (8011bc4 <tcp_process+0x7dc>)
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	68db      	ldr	r3, [r3, #12]
 8011afe:	4a31      	ldr	r2, [pc, #196]	@ (8011bc4 <tcp_process+0x7dc>)
 8011b00:	6013      	str	r3, [r2, #0]
 8011b02:	e013      	b.n	8011b2c <tcp_process+0x744>
 8011b04:	4b2f      	ldr	r3, [pc, #188]	@ (8011bc4 <tcp_process+0x7dc>)
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	60fb      	str	r3, [r7, #12]
 8011b0a:	e00c      	b.n	8011b26 <tcp_process+0x73e>
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	68db      	ldr	r3, [r3, #12]
 8011b10:	687a      	ldr	r2, [r7, #4]
 8011b12:	429a      	cmp	r2, r3
 8011b14:	d104      	bne.n	8011b20 <tcp_process+0x738>
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	68da      	ldr	r2, [r3, #12]
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	60da      	str	r2, [r3, #12]
 8011b1e:	e005      	b.n	8011b2c <tcp_process+0x744>
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	68db      	ldr	r3, [r3, #12]
 8011b24:	60fb      	str	r3, [r7, #12]
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d1ef      	bne.n	8011b0c <tcp_process+0x724>
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	2200      	movs	r2, #0
 8011b30:	60da      	str	r2, [r3, #12]
 8011b32:	4b1f      	ldr	r3, [pc, #124]	@ (8011bb0 <tcp_process+0x7c8>)
 8011b34:	2201      	movs	r2, #1
 8011b36:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	220a      	movs	r2, #10
 8011b3c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8011bb4 <tcp_process+0x7cc>)
 8011b40:	681a      	ldr	r2, [r3, #0]
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	60da      	str	r2, [r3, #12]
 8011b46:	4a1b      	ldr	r2, [pc, #108]	@ (8011bb4 <tcp_process+0x7cc>)
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	6013      	str	r3, [r2, #0]
 8011b4c:	f003 f89c 	bl	8014c88 <tcp_timer_needed>
      }
      break;
 8011b50:	e026      	b.n	8011ba0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011b52:	6878      	ldr	r0, [r7, #4]
 8011b54:	f000 f93c 	bl	8011dd0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011b58:	4b17      	ldr	r3, [pc, #92]	@ (8011bb8 <tcp_process+0x7d0>)
 8011b5a:	781b      	ldrb	r3, [r3, #0]
 8011b5c:	f003 0310 	and.w	r3, r3, #16
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d01f      	beq.n	8011ba4 <tcp_process+0x7bc>
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011b68:	4b14      	ldr	r3, [pc, #80]	@ (8011bbc <tcp_process+0x7d4>)
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	429a      	cmp	r2, r3
 8011b6e:	d119      	bne.n	8011ba4 <tcp_process+0x7bc>
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d115      	bne.n	8011ba4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011b78:	4b11      	ldr	r3, [pc, #68]	@ (8011bc0 <tcp_process+0x7d8>)
 8011b7a:	781b      	ldrb	r3, [r3, #0]
 8011b7c:	f043 0310 	orr.w	r3, r3, #16
 8011b80:	b2da      	uxtb	r2, r3
 8011b82:	4b0f      	ldr	r3, [pc, #60]	@ (8011bc0 <tcp_process+0x7d8>)
 8011b84:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011b86:	e00d      	b.n	8011ba4 <tcp_process+0x7bc>
    default:
      break;
 8011b88:	bf00      	nop
 8011b8a:	e00c      	b.n	8011ba6 <tcp_process+0x7be>
      break;
 8011b8c:	bf00      	nop
 8011b8e:	e00a      	b.n	8011ba6 <tcp_process+0x7be>
      break;
 8011b90:	bf00      	nop
 8011b92:	e008      	b.n	8011ba6 <tcp_process+0x7be>
      break;
 8011b94:	bf00      	nop
 8011b96:	e006      	b.n	8011ba6 <tcp_process+0x7be>
      break;
 8011b98:	bf00      	nop
 8011b9a:	e004      	b.n	8011ba6 <tcp_process+0x7be>
      break;
 8011b9c:	bf00      	nop
 8011b9e:	e002      	b.n	8011ba6 <tcp_process+0x7be>
      break;
 8011ba0:	bf00      	nop
 8011ba2:	e000      	b.n	8011ba6 <tcp_process+0x7be>
      break;
 8011ba4:	bf00      	nop
  }
  return ERR_OK;
 8011ba6:	2300      	movs	r3, #0
}
 8011ba8:	4618      	mov	r0, r3
 8011baa:	3724      	adds	r7, #36	@ 0x24
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bd90      	pop	{r4, r7, pc}
 8011bb0:	2000fe94 	.word	0x2000fe94
 8011bb4:	2000fe90 	.word	0x2000fe90
 8011bb8:	2000fec4 	.word	0x2000fec4
 8011bbc:	2000febc 	.word	0x2000febc
 8011bc0:	2000fec5 	.word	0x2000fec5
 8011bc4:	2000fe8c 	.word	0x2000fe8c

08011bc8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011bc8:	b590      	push	{r4, r7, lr}
 8011bca:	b085      	sub	sp, #20
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
 8011bd0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d106      	bne.n	8011be6 <tcp_oos_insert_segment+0x1e>
 8011bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8011cc8 <tcp_oos_insert_segment+0x100>)
 8011bda:	f240 421f 	movw	r2, #1055	@ 0x41f
 8011bde:	493b      	ldr	r1, [pc, #236]	@ (8011ccc <tcp_oos_insert_segment+0x104>)
 8011be0:	483b      	ldr	r0, [pc, #236]	@ (8011cd0 <tcp_oos_insert_segment+0x108>)
 8011be2:	f013 fc71 	bl	80254c8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	68db      	ldr	r3, [r3, #12]
 8011bea:	899b      	ldrh	r3, [r3, #12]
 8011bec:	b29b      	uxth	r3, r3
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f7fb f976 	bl	800cee0 <lwip_htons>
 8011bf4:	4603      	mov	r3, r0
 8011bf6:	b2db      	uxtb	r3, r3
 8011bf8:	f003 0301 	and.w	r3, r3, #1
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d028      	beq.n	8011c52 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011c00:	6838      	ldr	r0, [r7, #0]
 8011c02:	f7fe f995 	bl	800ff30 <tcp_segs_free>
    next = NULL;
 8011c06:	2300      	movs	r3, #0
 8011c08:	603b      	str	r3, [r7, #0]
 8011c0a:	e056      	b.n	8011cba <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011c0c:	683b      	ldr	r3, [r7, #0]
 8011c0e:	68db      	ldr	r3, [r3, #12]
 8011c10:	899b      	ldrh	r3, [r3, #12]
 8011c12:	b29b      	uxth	r3, r3
 8011c14:	4618      	mov	r0, r3
 8011c16:	f7fb f963 	bl	800cee0 <lwip_htons>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	b2db      	uxtb	r3, r3
 8011c1e:	f003 0301 	and.w	r3, r3, #1
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d00d      	beq.n	8011c42 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	68db      	ldr	r3, [r3, #12]
 8011c2a:	899b      	ldrh	r3, [r3, #12]
 8011c2c:	b29c      	uxth	r4, r3
 8011c2e:	2001      	movs	r0, #1
 8011c30:	f7fb f956 	bl	800cee0 <lwip_htons>
 8011c34:	4603      	mov	r3, r0
 8011c36:	461a      	mov	r2, r3
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	68db      	ldr	r3, [r3, #12]
 8011c3c:	4322      	orrs	r2, r4
 8011c3e:	b292      	uxth	r2, r2
 8011c40:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011c42:	683b      	ldr	r3, [r7, #0]
 8011c44:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011c46:	683b      	ldr	r3, [r7, #0]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011c4c:	68f8      	ldr	r0, [r7, #12]
 8011c4e:	f7fe f984 	bl	800ff5a <tcp_seg_free>
    while (next &&
 8011c52:	683b      	ldr	r3, [r7, #0]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d00e      	beq.n	8011c76 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	891b      	ldrh	r3, [r3, #8]
 8011c5c:	461a      	mov	r2, r3
 8011c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8011cd4 <tcp_oos_insert_segment+0x10c>)
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	441a      	add	r2, r3
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	68db      	ldr	r3, [r3, #12]
 8011c68:	685b      	ldr	r3, [r3, #4]
 8011c6a:	6839      	ldr	r1, [r7, #0]
 8011c6c:	8909      	ldrh	r1, [r1, #8]
 8011c6e:	440b      	add	r3, r1
 8011c70:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	daca      	bge.n	8011c0c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d01e      	beq.n	8011cba <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	891b      	ldrh	r3, [r3, #8]
 8011c80:	461a      	mov	r2, r3
 8011c82:	4b14      	ldr	r3, [pc, #80]	@ (8011cd4 <tcp_oos_insert_segment+0x10c>)
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	441a      	add	r2, r3
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	68db      	ldr	r3, [r3, #12]
 8011c8c:	685b      	ldr	r3, [r3, #4]
 8011c8e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	dd12      	ble.n	8011cba <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011c94:	683b      	ldr	r3, [r7, #0]
 8011c96:	68db      	ldr	r3, [r3, #12]
 8011c98:	685b      	ldr	r3, [r3, #4]
 8011c9a:	b29a      	uxth	r2, r3
 8011c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8011cd4 <tcp_oos_insert_segment+0x10c>)
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	b29b      	uxth	r3, r3
 8011ca2:	1ad3      	subs	r3, r2, r3
 8011ca4:	b29a      	uxth	r2, r3
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	685a      	ldr	r2, [r3, #4]
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	891b      	ldrh	r3, [r3, #8]
 8011cb2:	4619      	mov	r1, r3
 8011cb4:	4610      	mov	r0, r2
 8011cb6:	f7fc fbb3 	bl	800e420 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	683a      	ldr	r2, [r7, #0]
 8011cbe:	601a      	str	r2, [r3, #0]
}
 8011cc0:	bf00      	nop
 8011cc2:	3714      	adds	r7, #20
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	bd90      	pop	{r4, r7, pc}
 8011cc8:	08028938 	.word	0x08028938
 8011ccc:	08028bf8 	.word	0x08028bf8
 8011cd0:	08028984 	.word	0x08028984
 8011cd4:	2000feb8 	.word	0x2000feb8

08011cd8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011cd8:	b5b0      	push	{r4, r5, r7, lr}
 8011cda:	b086      	sub	sp, #24
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	60f8      	str	r0, [r7, #12]
 8011ce0:	60b9      	str	r1, [r7, #8]
 8011ce2:	607a      	str	r2, [r7, #4]
 8011ce4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011ce6:	e03e      	b.n	8011d66 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011cf2:	697b      	ldr	r3, [r7, #20]
 8011cf4:	685b      	ldr	r3, [r3, #4]
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	f7fc fdd8 	bl	800e8ac <pbuf_clen>
 8011cfc:	4603      	mov	r3, r0
 8011cfe:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011d06:	8a7a      	ldrh	r2, [r7, #18]
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	d906      	bls.n	8011d1a <tcp_free_acked_segments+0x42>
 8011d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8011db8 <tcp_free_acked_segments+0xe0>)
 8011d0e:	f240 4257 	movw	r2, #1111	@ 0x457
 8011d12:	492a      	ldr	r1, [pc, #168]	@ (8011dbc <tcp_free_acked_segments+0xe4>)
 8011d14:	482a      	ldr	r0, [pc, #168]	@ (8011dc0 <tcp_free_acked_segments+0xe8>)
 8011d16:	f013 fbd7 	bl	80254c8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8011d20:	8a7b      	ldrh	r3, [r7, #18]
 8011d22:	1ad3      	subs	r3, r2, r3
 8011d24:	b29a      	uxth	r2, r3
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011d2c:	697b      	ldr	r3, [r7, #20]
 8011d2e:	891a      	ldrh	r2, [r3, #8]
 8011d30:	4b24      	ldr	r3, [pc, #144]	@ (8011dc4 <tcp_free_acked_segments+0xec>)
 8011d32:	881b      	ldrh	r3, [r3, #0]
 8011d34:	4413      	add	r3, r2
 8011d36:	b29a      	uxth	r2, r3
 8011d38:	4b22      	ldr	r3, [pc, #136]	@ (8011dc4 <tcp_free_acked_segments+0xec>)
 8011d3a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011d3c:	6978      	ldr	r0, [r7, #20]
 8011d3e:	f7fe f90c 	bl	800ff5a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d00c      	beq.n	8011d66 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011d4c:	68bb      	ldr	r3, [r7, #8]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d109      	bne.n	8011d66 <tcp_free_acked_segments+0x8e>
 8011d52:	683b      	ldr	r3, [r7, #0]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d106      	bne.n	8011d66 <tcp_free_acked_segments+0x8e>
 8011d58:	4b17      	ldr	r3, [pc, #92]	@ (8011db8 <tcp_free_acked_segments+0xe0>)
 8011d5a:	f240 4261 	movw	r2, #1121	@ 0x461
 8011d5e:	491a      	ldr	r1, [pc, #104]	@ (8011dc8 <tcp_free_acked_segments+0xf0>)
 8011d60:	4817      	ldr	r0, [pc, #92]	@ (8011dc0 <tcp_free_acked_segments+0xe8>)
 8011d62:	f013 fbb1 	bl	80254c8 <iprintf>
  while (seg_list != NULL &&
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d020      	beq.n	8011dae <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011d6c:	68bb      	ldr	r3, [r7, #8]
 8011d6e:	68db      	ldr	r3, [r3, #12]
 8011d70:	685b      	ldr	r3, [r3, #4]
 8011d72:	4618      	mov	r0, r3
 8011d74:	f7fb f8ca 	bl	800cf0c <lwip_htonl>
 8011d78:	4604      	mov	r4, r0
 8011d7a:	68bb      	ldr	r3, [r7, #8]
 8011d7c:	891b      	ldrh	r3, [r3, #8]
 8011d7e:	461d      	mov	r5, r3
 8011d80:	68bb      	ldr	r3, [r7, #8]
 8011d82:	68db      	ldr	r3, [r3, #12]
 8011d84:	899b      	ldrh	r3, [r3, #12]
 8011d86:	b29b      	uxth	r3, r3
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f7fb f8a9 	bl	800cee0 <lwip_htons>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	b2db      	uxtb	r3, r3
 8011d92:	f003 0303 	and.w	r3, r3, #3
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d001      	beq.n	8011d9e <tcp_free_acked_segments+0xc6>
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	e000      	b.n	8011da0 <tcp_free_acked_segments+0xc8>
 8011d9e:	2300      	movs	r3, #0
 8011da0:	442b      	add	r3, r5
 8011da2:	18e2      	adds	r2, r4, r3
 8011da4:	4b09      	ldr	r3, [pc, #36]	@ (8011dcc <tcp_free_acked_segments+0xf4>)
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	dd9c      	ble.n	8011ce8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011dae:	68bb      	ldr	r3, [r7, #8]
}
 8011db0:	4618      	mov	r0, r3
 8011db2:	3718      	adds	r7, #24
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bdb0      	pop	{r4, r5, r7, pc}
 8011db8:	08028938 	.word	0x08028938
 8011dbc:	08028c20 	.word	0x08028c20
 8011dc0:	08028984 	.word	0x08028984
 8011dc4:	2000fec0 	.word	0x2000fec0
 8011dc8:	08028c48 	.word	0x08028c48
 8011dcc:	2000febc 	.word	0x2000febc

08011dd0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011dd0:	b5b0      	push	{r4, r5, r7, lr}
 8011dd2:	b094      	sub	sp, #80	@ 0x50
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011dd8:	2300      	movs	r3, #0
 8011dda:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d106      	bne.n	8011df0 <tcp_receive+0x20>
 8011de2:	4b91      	ldr	r3, [pc, #580]	@ (8012028 <tcp_receive+0x258>)
 8011de4:	f240 427b 	movw	r2, #1147	@ 0x47b
 8011de8:	4990      	ldr	r1, [pc, #576]	@ (801202c <tcp_receive+0x25c>)
 8011dea:	4891      	ldr	r0, [pc, #580]	@ (8012030 <tcp_receive+0x260>)
 8011dec:	f013 fb6c 	bl	80254c8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	7d1b      	ldrb	r3, [r3, #20]
 8011df4:	2b03      	cmp	r3, #3
 8011df6:	d806      	bhi.n	8011e06 <tcp_receive+0x36>
 8011df8:	4b8b      	ldr	r3, [pc, #556]	@ (8012028 <tcp_receive+0x258>)
 8011dfa:	f240 427c 	movw	r2, #1148	@ 0x47c
 8011dfe:	498d      	ldr	r1, [pc, #564]	@ (8012034 <tcp_receive+0x264>)
 8011e00:	488b      	ldr	r0, [pc, #556]	@ (8012030 <tcp_receive+0x260>)
 8011e02:	f013 fb61 	bl	80254c8 <iprintf>

  if (flags & TCP_ACK) {
 8011e06:	4b8c      	ldr	r3, [pc, #560]	@ (8012038 <tcp_receive+0x268>)
 8011e08:	781b      	ldrb	r3, [r3, #0]
 8011e0a:	f003 0310 	and.w	r3, r3, #16
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	f000 8264 	beq.w	80122dc <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011e1a:	461a      	mov	r2, r3
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011e20:	4413      	add	r3, r2
 8011e22:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011e28:	4b84      	ldr	r3, [pc, #528]	@ (801203c <tcp_receive+0x26c>)
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	1ad3      	subs	r3, r2, r3
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	db1b      	blt.n	8011e6a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011e36:	4b81      	ldr	r3, [pc, #516]	@ (801203c <tcp_receive+0x26c>)
 8011e38:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	d106      	bne.n	8011e4c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011e42:	4b7f      	ldr	r3, [pc, #508]	@ (8012040 <tcp_receive+0x270>)
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	1ad3      	subs	r3, r2, r3
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	db0e      	blt.n	8011e6a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011e50:	4b7b      	ldr	r3, [pc, #492]	@ (8012040 <tcp_receive+0x270>)
 8011e52:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011e54:	429a      	cmp	r2, r3
 8011e56:	d125      	bne.n	8011ea4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011e58:	4b7a      	ldr	r3, [pc, #488]	@ (8012044 <tcp_receive+0x274>)
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	89db      	ldrh	r3, [r3, #14]
 8011e5e:	b29a      	uxth	r2, r3
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011e66:	429a      	cmp	r2, r3
 8011e68:	d91c      	bls.n	8011ea4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011e6a:	4b76      	ldr	r3, [pc, #472]	@ (8012044 <tcp_receive+0x274>)
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	89db      	ldrh	r3, [r3, #14]
 8011e70:	b29a      	uxth	r2, r3
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011e84:	429a      	cmp	r2, r3
 8011e86:	d205      	bcs.n	8011e94 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8011e94:	4b69      	ldr	r3, [pc, #420]	@ (801203c <tcp_receive+0x26c>)
 8011e96:	681a      	ldr	r2, [r3, #0]
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8011e9c:	4b68      	ldr	r3, [pc, #416]	@ (8012040 <tcp_receive+0x270>)
 8011e9e:	681a      	ldr	r2, [r3, #0]
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011ea4:	4b66      	ldr	r3, [pc, #408]	@ (8012040 <tcp_receive+0x270>)
 8011ea6:	681a      	ldr	r2, [r3, #0]
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011eac:	1ad3      	subs	r3, r2, r3
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	dc58      	bgt.n	8011f64 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8011eb2:	4b65      	ldr	r3, [pc, #404]	@ (8012048 <tcp_receive+0x278>)
 8011eb4:	881b      	ldrh	r3, [r3, #0]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d14b      	bne.n	8011f52 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011ebe:	687a      	ldr	r2, [r7, #4]
 8011ec0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8011ec4:	4413      	add	r3, r2
 8011ec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011ec8:	429a      	cmp	r2, r3
 8011eca:	d142      	bne.n	8011f52 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	db3d      	blt.n	8011f52 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011eda:	4b59      	ldr	r3, [pc, #356]	@ (8012040 <tcp_receive+0x270>)
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	429a      	cmp	r2, r3
 8011ee0:	d137      	bne.n	8011f52 <tcp_receive+0x182>
              found_dupack = 1;
 8011ee2:	2301      	movs	r3, #1
 8011ee4:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011eec:	2bff      	cmp	r3, #255	@ 0xff
 8011eee:	d007      	beq.n	8011f00 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011ef6:	3301      	adds	r3, #1
 8011ef8:	b2da      	uxtb	r2, r3
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011f06:	2b03      	cmp	r3, #3
 8011f08:	d91b      	bls.n	8011f42 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011f14:	4413      	add	r3, r2
 8011f16:	b29a      	uxth	r2, r3
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011f1e:	429a      	cmp	r2, r3
 8011f20:	d30a      	bcc.n	8011f38 <tcp_receive+0x168>
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011f2c:	4413      	add	r3, r2
 8011f2e:	b29a      	uxth	r2, r3
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011f36:	e004      	b.n	8011f42 <tcp_receive+0x172>
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011f3e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011f48:	2b02      	cmp	r3, #2
 8011f4a:	d902      	bls.n	8011f52 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011f4c:	6878      	ldr	r0, [r7, #4]
 8011f4e:	f002 fb3f 	bl	80145d0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011f52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	f040 8161 	bne.w	801221c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011f62:	e15b      	b.n	801221c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011f64:	4b36      	ldr	r3, [pc, #216]	@ (8012040 <tcp_receive+0x270>)
 8011f66:	681a      	ldr	r2, [r3, #0]
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f6c:	1ad3      	subs	r3, r2, r3
 8011f6e:	3b01      	subs	r3, #1
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	f2c0 814e 	blt.w	8012212 <tcp_receive+0x442>
 8011f76:	4b32      	ldr	r3, [pc, #200]	@ (8012040 <tcp_receive+0x270>)
 8011f78:	681a      	ldr	r2, [r3, #0]
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011f7e:	1ad3      	subs	r3, r2, r3
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	f300 8146 	bgt.w	8012212 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	8b5b      	ldrh	r3, [r3, #26]
 8011f8a:	f003 0304 	and.w	r3, r3, #4
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d010      	beq.n	8011fb4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	8b5b      	ldrh	r3, [r3, #26]
 8011f96:	f023 0304 	bic.w	r3, r3, #4
 8011f9a:	b29a      	uxth	r2, r3
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	2200      	movs	r2, #0
 8011fb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011fc2:	10db      	asrs	r3, r3, #3
 8011fc4:	b21b      	sxth	r3, r3
 8011fc6:	b29a      	uxth	r2, r3
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011fce:	b29b      	uxth	r3, r3
 8011fd0:	4413      	add	r3, r2
 8011fd2:	b29b      	uxth	r3, r3
 8011fd4:	b21a      	sxth	r2, r3
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011fdc:	4b18      	ldr	r3, [pc, #96]	@ (8012040 <tcp_receive+0x270>)
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	b29a      	uxth	r2, r3
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011fe6:	b29b      	uxth	r3, r3
 8011fe8:	1ad3      	subs	r3, r2, r3
 8011fea:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	2200      	movs	r2, #0
 8011ff0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8011ff4:	4b12      	ldr	r3, [pc, #72]	@ (8012040 <tcp_receive+0x270>)
 8011ff6:	681a      	ldr	r2, [r3, #0]
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	7d1b      	ldrb	r3, [r3, #20]
 8012000:	2b03      	cmp	r3, #3
 8012002:	f240 8097 	bls.w	8012134 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8012012:	429a      	cmp	r2, r3
 8012014:	d245      	bcs.n	80120a2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	8b5b      	ldrh	r3, [r3, #26]
 801201a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801201e:	2b00      	cmp	r3, #0
 8012020:	d014      	beq.n	801204c <tcp_receive+0x27c>
 8012022:	2301      	movs	r3, #1
 8012024:	e013      	b.n	801204e <tcp_receive+0x27e>
 8012026:	bf00      	nop
 8012028:	08028938 	.word	0x08028938
 801202c:	08028c68 	.word	0x08028c68
 8012030:	08028984 	.word	0x08028984
 8012034:	08028c84 	.word	0x08028c84
 8012038:	2000fec4 	.word	0x2000fec4
 801203c:	2000feb8 	.word	0x2000feb8
 8012040:	2000febc 	.word	0x2000febc
 8012044:	2000fea8 	.word	0x2000fea8
 8012048:	2000fec2 	.word	0x2000fec2
 801204c:	2302      	movs	r3, #2
 801204e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012052:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8012056:	b29a      	uxth	r2, r3
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801205c:	fb12 f303 	smulbb	r3, r2, r3
 8012060:	b29b      	uxth	r3, r3
 8012062:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8012064:	4293      	cmp	r3, r2
 8012066:	bf28      	it	cs
 8012068:	4613      	movcs	r3, r2
 801206a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012072:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012074:	4413      	add	r3, r2
 8012076:	b29a      	uxth	r2, r3
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801207e:	429a      	cmp	r2, r3
 8012080:	d309      	bcc.n	8012096 <tcp_receive+0x2c6>
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012088:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801208a:	4413      	add	r3, r2
 801208c:	b29a      	uxth	r2, r3
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012094:	e04e      	b.n	8012134 <tcp_receive+0x364>
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801209c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80120a0:	e048      	b.n	8012134 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80120a8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80120aa:	4413      	add	r3, r2
 80120ac:	b29a      	uxth	r2, r3
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80120b4:	429a      	cmp	r2, r3
 80120b6:	d309      	bcc.n	80120cc <tcp_receive+0x2fc>
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80120be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80120c0:	4413      	add	r3, r2
 80120c2:	b29a      	uxth	r2, r3
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80120ca:	e004      	b.n	80120d6 <tcp_receive+0x306>
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80120d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80120e2:	429a      	cmp	r2, r3
 80120e4:	d326      	bcc.n	8012134 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80120f2:	1ad3      	subs	r3, r2, r3
 80120f4:	b29a      	uxth	r2, r3
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012106:	4413      	add	r3, r2
 8012108:	b29a      	uxth	r2, r3
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012110:	429a      	cmp	r2, r3
 8012112:	d30a      	bcc.n	801212a <tcp_receive+0x35a>
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801211e:	4413      	add	r3, r2
 8012120:	b29a      	uxth	r2, r3
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012128:	e004      	b.n	8012134 <tcp_receive+0x364>
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012130:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801213c:	4a98      	ldr	r2, [pc, #608]	@ (80123a0 <tcp_receive+0x5d0>)
 801213e:	6878      	ldr	r0, [r7, #4]
 8012140:	f7ff fdca 	bl	8011cd8 <tcp_free_acked_segments>
 8012144:	4602      	mov	r2, r0
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012152:	4a94      	ldr	r2, [pc, #592]	@ (80123a4 <tcp_receive+0x5d4>)
 8012154:	6878      	ldr	r0, [r7, #4]
 8012156:	f7ff fdbf 	bl	8011cd8 <tcp_free_acked_segments>
 801215a:	4602      	mov	r2, r0
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012164:	2b00      	cmp	r3, #0
 8012166:	d104      	bne.n	8012172 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801216e:	861a      	strh	r2, [r3, #48]	@ 0x30
 8012170:	e002      	b.n	8012178 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	2200      	movs	r2, #0
 8012176:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	2200      	movs	r2, #0
 801217c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012182:	2b00      	cmp	r3, #0
 8012184:	d103      	bne.n	801218e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	2200      	movs	r2, #0
 801218a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8012194:	4b84      	ldr	r3, [pc, #528]	@ (80123a8 <tcp_receive+0x5d8>)
 8012196:	881b      	ldrh	r3, [r3, #0]
 8012198:	4413      	add	r3, r2
 801219a:	b29a      	uxth	r2, r3
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	8b5b      	ldrh	r3, [r3, #26]
 80121a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d035      	beq.n	801221a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d118      	bne.n	80121e8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d00c      	beq.n	80121d8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80121c6:	68db      	ldr	r3, [r3, #12]
 80121c8:	685b      	ldr	r3, [r3, #4]
 80121ca:	4618      	mov	r0, r3
 80121cc:	f7fa fe9e 	bl	800cf0c <lwip_htonl>
 80121d0:	4603      	mov	r3, r0
 80121d2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	dc20      	bgt.n	801221a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	8b5b      	ldrh	r3, [r3, #26]
 80121dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80121e0:	b29a      	uxth	r2, r3
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80121e6:	e018      	b.n	801221a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80121f0:	68db      	ldr	r3, [r3, #12]
 80121f2:	685b      	ldr	r3, [r3, #4]
 80121f4:	4618      	mov	r0, r3
 80121f6:	f7fa fe89 	bl	800cf0c <lwip_htonl>
 80121fa:	4603      	mov	r3, r0
 80121fc:	1ae3      	subs	r3, r4, r3
 80121fe:	2b00      	cmp	r3, #0
 8012200:	dc0b      	bgt.n	801221a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	8b5b      	ldrh	r3, [r3, #26]
 8012206:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801220a:	b29a      	uxth	r2, r3
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012210:	e003      	b.n	801221a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012212:	6878      	ldr	r0, [r7, #4]
 8012214:	f002 fbc8 	bl	80149a8 <tcp_send_empty_ack>
 8012218:	e000      	b.n	801221c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801221a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012220:	2b00      	cmp	r3, #0
 8012222:	d05b      	beq.n	80122dc <tcp_receive+0x50c>
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012228:	4b60      	ldr	r3, [pc, #384]	@ (80123ac <tcp_receive+0x5dc>)
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	1ad3      	subs	r3, r2, r3
 801222e:	2b00      	cmp	r3, #0
 8012230:	da54      	bge.n	80122dc <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012232:	4b5f      	ldr	r3, [pc, #380]	@ (80123b0 <tcp_receive+0x5e0>)
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	b29a      	uxth	r2, r3
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801223c:	b29b      	uxth	r3, r3
 801223e:	1ad3      	subs	r3, r2, r3
 8012240:	b29b      	uxth	r3, r3
 8012242:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8012246:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012250:	10db      	asrs	r3, r3, #3
 8012252:	b21b      	sxth	r3, r3
 8012254:	b29b      	uxth	r3, r3
 8012256:	1ad3      	subs	r3, r2, r3
 8012258:	b29b      	uxth	r3, r3
 801225a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012264:	b29a      	uxth	r2, r3
 8012266:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801226a:	4413      	add	r3, r2
 801226c:	b29b      	uxth	r3, r3
 801226e:	b21a      	sxth	r2, r3
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8012274:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8012278:	2b00      	cmp	r3, #0
 801227a:	da05      	bge.n	8012288 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801227c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8012280:	425b      	negs	r3, r3
 8012282:	b29b      	uxth	r3, r3
 8012284:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012288:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012292:	109b      	asrs	r3, r3, #2
 8012294:	b21b      	sxth	r3, r3
 8012296:	b29b      	uxth	r3, r3
 8012298:	1ad3      	subs	r3, r2, r3
 801229a:	b29b      	uxth	r3, r3
 801229c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80122a6:	b29a      	uxth	r2, r3
 80122a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80122ac:	4413      	add	r3, r2
 80122ae:	b29b      	uxth	r3, r3
 80122b0:	b21a      	sxth	r2, r3
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80122bc:	10db      	asrs	r3, r3, #3
 80122be:	b21b      	sxth	r3, r3
 80122c0:	b29a      	uxth	r2, r3
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80122c8:	b29b      	uxth	r3, r3
 80122ca:	4413      	add	r3, r2
 80122cc:	b29b      	uxth	r3, r3
 80122ce:	b21a      	sxth	r2, r3
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	2200      	movs	r2, #0
 80122da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80122dc:	4b35      	ldr	r3, [pc, #212]	@ (80123b4 <tcp_receive+0x5e4>)
 80122de:	881b      	ldrh	r3, [r3, #0]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	f000 84df 	beq.w	8012ca4 <tcp_receive+0xed4>
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	7d1b      	ldrb	r3, [r3, #20]
 80122ea:	2b06      	cmp	r3, #6
 80122ec:	f200 84da 	bhi.w	8012ca4 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80122f4:	4b30      	ldr	r3, [pc, #192]	@ (80123b8 <tcp_receive+0x5e8>)
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	1ad3      	subs	r3, r2, r3
 80122fa:	3b01      	subs	r3, #1
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	f2c0 808f 	blt.w	8012420 <tcp_receive+0x650>
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012306:	4b2b      	ldr	r3, [pc, #172]	@ (80123b4 <tcp_receive+0x5e4>)
 8012308:	881b      	ldrh	r3, [r3, #0]
 801230a:	4619      	mov	r1, r3
 801230c:	4b2a      	ldr	r3, [pc, #168]	@ (80123b8 <tcp_receive+0x5e8>)
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	440b      	add	r3, r1
 8012312:	1ad3      	subs	r3, r2, r3
 8012314:	3301      	adds	r3, #1
 8012316:	2b00      	cmp	r3, #0
 8012318:	f300 8082 	bgt.w	8012420 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801231c:	4b27      	ldr	r3, [pc, #156]	@ (80123bc <tcp_receive+0x5ec>)
 801231e:	685b      	ldr	r3, [r3, #4]
 8012320:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012326:	4b24      	ldr	r3, [pc, #144]	@ (80123b8 <tcp_receive+0x5e8>)
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	1ad3      	subs	r3, r2, r3
 801232c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801232e:	4b23      	ldr	r3, [pc, #140]	@ (80123bc <tcp_receive+0x5ec>)
 8012330:	685b      	ldr	r3, [r3, #4]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d106      	bne.n	8012344 <tcp_receive+0x574>
 8012336:	4b22      	ldr	r3, [pc, #136]	@ (80123c0 <tcp_receive+0x5f0>)
 8012338:	f240 5294 	movw	r2, #1428	@ 0x594
 801233c:	4921      	ldr	r1, [pc, #132]	@ (80123c4 <tcp_receive+0x5f4>)
 801233e:	4822      	ldr	r0, [pc, #136]	@ (80123c8 <tcp_receive+0x5f8>)
 8012340:	f013 f8c2 	bl	80254c8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012346:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801234a:	4293      	cmp	r3, r2
 801234c:	d906      	bls.n	801235c <tcp_receive+0x58c>
 801234e:	4b1c      	ldr	r3, [pc, #112]	@ (80123c0 <tcp_receive+0x5f0>)
 8012350:	f240 5295 	movw	r2, #1429	@ 0x595
 8012354:	491d      	ldr	r1, [pc, #116]	@ (80123cc <tcp_receive+0x5fc>)
 8012356:	481c      	ldr	r0, [pc, #112]	@ (80123c8 <tcp_receive+0x5f8>)
 8012358:	f013 f8b6 	bl	80254c8 <iprintf>
      off = (u16_t)off32;
 801235c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801235e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012362:	4b16      	ldr	r3, [pc, #88]	@ (80123bc <tcp_receive+0x5ec>)
 8012364:	685b      	ldr	r3, [r3, #4]
 8012366:	891b      	ldrh	r3, [r3, #8]
 8012368:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801236c:	429a      	cmp	r2, r3
 801236e:	d906      	bls.n	801237e <tcp_receive+0x5ae>
 8012370:	4b13      	ldr	r3, [pc, #76]	@ (80123c0 <tcp_receive+0x5f0>)
 8012372:	f240 5297 	movw	r2, #1431	@ 0x597
 8012376:	4916      	ldr	r1, [pc, #88]	@ (80123d0 <tcp_receive+0x600>)
 8012378:	4813      	ldr	r0, [pc, #76]	@ (80123c8 <tcp_receive+0x5f8>)
 801237a:	f013 f8a5 	bl	80254c8 <iprintf>
      inseg.len -= off;
 801237e:	4b0f      	ldr	r3, [pc, #60]	@ (80123bc <tcp_receive+0x5ec>)
 8012380:	891a      	ldrh	r2, [r3, #8]
 8012382:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012386:	1ad3      	subs	r3, r2, r3
 8012388:	b29a      	uxth	r2, r3
 801238a:	4b0c      	ldr	r3, [pc, #48]	@ (80123bc <tcp_receive+0x5ec>)
 801238c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801238e:	4b0b      	ldr	r3, [pc, #44]	@ (80123bc <tcp_receive+0x5ec>)
 8012390:	685b      	ldr	r3, [r3, #4]
 8012392:	891a      	ldrh	r2, [r3, #8]
 8012394:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012398:	1ad3      	subs	r3, r2, r3
 801239a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 801239c:	e02a      	b.n	80123f4 <tcp_receive+0x624>
 801239e:	bf00      	nop
 80123a0:	08028ca0 	.word	0x08028ca0
 80123a4:	08028ca8 	.word	0x08028ca8
 80123a8:	2000fec0 	.word	0x2000fec0
 80123ac:	2000febc 	.word	0x2000febc
 80123b0:	2000fe80 	.word	0x2000fe80
 80123b4:	2000fec2 	.word	0x2000fec2
 80123b8:	2000feb8 	.word	0x2000feb8
 80123bc:	2000fe98 	.word	0x2000fe98
 80123c0:	08028938 	.word	0x08028938
 80123c4:	08028cb0 	.word	0x08028cb0
 80123c8:	08028984 	.word	0x08028984
 80123cc:	08028cc0 	.word	0x08028cc0
 80123d0:	08028cd0 	.word	0x08028cd0
        off -= p->len;
 80123d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123d6:	895b      	ldrh	r3, [r3, #10]
 80123d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80123dc:	1ad3      	subs	r3, r2, r3
 80123de:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80123e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123e4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80123e6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80123e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123ea:	2200      	movs	r2, #0
 80123ec:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80123ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80123f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123f6:	895b      	ldrh	r3, [r3, #10]
 80123f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80123fc:	429a      	cmp	r2, r3
 80123fe:	d8e9      	bhi.n	80123d4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012400:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012404:	4619      	mov	r1, r3
 8012406:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8012408:	f7fc f90a 	bl	800e620 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012410:	4a90      	ldr	r2, [pc, #576]	@ (8012654 <tcp_receive+0x884>)
 8012412:	6013      	str	r3, [r2, #0]
 8012414:	4b90      	ldr	r3, [pc, #576]	@ (8012658 <tcp_receive+0x888>)
 8012416:	68db      	ldr	r3, [r3, #12]
 8012418:	4a8e      	ldr	r2, [pc, #568]	@ (8012654 <tcp_receive+0x884>)
 801241a:	6812      	ldr	r2, [r2, #0]
 801241c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801241e:	e00d      	b.n	801243c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012420:	4b8c      	ldr	r3, [pc, #560]	@ (8012654 <tcp_receive+0x884>)
 8012422:	681a      	ldr	r2, [r3, #0]
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012428:	1ad3      	subs	r3, r2, r3
 801242a:	2b00      	cmp	r3, #0
 801242c:	da06      	bge.n	801243c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	8b5b      	ldrh	r3, [r3, #26]
 8012432:	f043 0302 	orr.w	r3, r3, #2
 8012436:	b29a      	uxth	r2, r3
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801243c:	4b85      	ldr	r3, [pc, #532]	@ (8012654 <tcp_receive+0x884>)
 801243e:	681a      	ldr	r2, [r3, #0]
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012444:	1ad3      	subs	r3, r2, r3
 8012446:	2b00      	cmp	r3, #0
 8012448:	f2c0 8427 	blt.w	8012c9a <tcp_receive+0xeca>
 801244c:	4b81      	ldr	r3, [pc, #516]	@ (8012654 <tcp_receive+0x884>)
 801244e:	681a      	ldr	r2, [r3, #0]
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012454:	6879      	ldr	r1, [r7, #4]
 8012456:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012458:	440b      	add	r3, r1
 801245a:	1ad3      	subs	r3, r2, r3
 801245c:	3301      	adds	r3, #1
 801245e:	2b00      	cmp	r3, #0
 8012460:	f300 841b 	bgt.w	8012c9a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012468:	4b7a      	ldr	r3, [pc, #488]	@ (8012654 <tcp_receive+0x884>)
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	429a      	cmp	r2, r3
 801246e:	f040 8298 	bne.w	80129a2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012472:	4b79      	ldr	r3, [pc, #484]	@ (8012658 <tcp_receive+0x888>)
 8012474:	891c      	ldrh	r4, [r3, #8]
 8012476:	4b78      	ldr	r3, [pc, #480]	@ (8012658 <tcp_receive+0x888>)
 8012478:	68db      	ldr	r3, [r3, #12]
 801247a:	899b      	ldrh	r3, [r3, #12]
 801247c:	b29b      	uxth	r3, r3
 801247e:	4618      	mov	r0, r3
 8012480:	f7fa fd2e 	bl	800cee0 <lwip_htons>
 8012484:	4603      	mov	r3, r0
 8012486:	b2db      	uxtb	r3, r3
 8012488:	f003 0303 	and.w	r3, r3, #3
 801248c:	2b00      	cmp	r3, #0
 801248e:	d001      	beq.n	8012494 <tcp_receive+0x6c4>
 8012490:	2301      	movs	r3, #1
 8012492:	e000      	b.n	8012496 <tcp_receive+0x6c6>
 8012494:	2300      	movs	r3, #0
 8012496:	4423      	add	r3, r4
 8012498:	b29a      	uxth	r2, r3
 801249a:	4b70      	ldr	r3, [pc, #448]	@ (801265c <tcp_receive+0x88c>)
 801249c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80124a2:	4b6e      	ldr	r3, [pc, #440]	@ (801265c <tcp_receive+0x88c>)
 80124a4:	881b      	ldrh	r3, [r3, #0]
 80124a6:	429a      	cmp	r2, r3
 80124a8:	d274      	bcs.n	8012594 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80124aa:	4b6b      	ldr	r3, [pc, #428]	@ (8012658 <tcp_receive+0x888>)
 80124ac:	68db      	ldr	r3, [r3, #12]
 80124ae:	899b      	ldrh	r3, [r3, #12]
 80124b0:	b29b      	uxth	r3, r3
 80124b2:	4618      	mov	r0, r3
 80124b4:	f7fa fd14 	bl	800cee0 <lwip_htons>
 80124b8:	4603      	mov	r3, r0
 80124ba:	b2db      	uxtb	r3, r3
 80124bc:	f003 0301 	and.w	r3, r3, #1
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d01e      	beq.n	8012502 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80124c4:	4b64      	ldr	r3, [pc, #400]	@ (8012658 <tcp_receive+0x888>)
 80124c6:	68db      	ldr	r3, [r3, #12]
 80124c8:	899b      	ldrh	r3, [r3, #12]
 80124ca:	b29b      	uxth	r3, r3
 80124cc:	b21b      	sxth	r3, r3
 80124ce:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80124d2:	b21c      	sxth	r4, r3
 80124d4:	4b60      	ldr	r3, [pc, #384]	@ (8012658 <tcp_receive+0x888>)
 80124d6:	68db      	ldr	r3, [r3, #12]
 80124d8:	899b      	ldrh	r3, [r3, #12]
 80124da:	b29b      	uxth	r3, r3
 80124dc:	4618      	mov	r0, r3
 80124de:	f7fa fcff 	bl	800cee0 <lwip_htons>
 80124e2:	4603      	mov	r3, r0
 80124e4:	b2db      	uxtb	r3, r3
 80124e6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80124ea:	b29b      	uxth	r3, r3
 80124ec:	4618      	mov	r0, r3
 80124ee:	f7fa fcf7 	bl	800cee0 <lwip_htons>
 80124f2:	4603      	mov	r3, r0
 80124f4:	b21b      	sxth	r3, r3
 80124f6:	4323      	orrs	r3, r4
 80124f8:	b21a      	sxth	r2, r3
 80124fa:	4b57      	ldr	r3, [pc, #348]	@ (8012658 <tcp_receive+0x888>)
 80124fc:	68db      	ldr	r3, [r3, #12]
 80124fe:	b292      	uxth	r2, r2
 8012500:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012506:	4b54      	ldr	r3, [pc, #336]	@ (8012658 <tcp_receive+0x888>)
 8012508:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801250a:	4b53      	ldr	r3, [pc, #332]	@ (8012658 <tcp_receive+0x888>)
 801250c:	68db      	ldr	r3, [r3, #12]
 801250e:	899b      	ldrh	r3, [r3, #12]
 8012510:	b29b      	uxth	r3, r3
 8012512:	4618      	mov	r0, r3
 8012514:	f7fa fce4 	bl	800cee0 <lwip_htons>
 8012518:	4603      	mov	r3, r0
 801251a:	b2db      	uxtb	r3, r3
 801251c:	f003 0302 	and.w	r3, r3, #2
 8012520:	2b00      	cmp	r3, #0
 8012522:	d005      	beq.n	8012530 <tcp_receive+0x760>
            inseg.len -= 1;
 8012524:	4b4c      	ldr	r3, [pc, #304]	@ (8012658 <tcp_receive+0x888>)
 8012526:	891b      	ldrh	r3, [r3, #8]
 8012528:	3b01      	subs	r3, #1
 801252a:	b29a      	uxth	r2, r3
 801252c:	4b4a      	ldr	r3, [pc, #296]	@ (8012658 <tcp_receive+0x888>)
 801252e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012530:	4b49      	ldr	r3, [pc, #292]	@ (8012658 <tcp_receive+0x888>)
 8012532:	685b      	ldr	r3, [r3, #4]
 8012534:	4a48      	ldr	r2, [pc, #288]	@ (8012658 <tcp_receive+0x888>)
 8012536:	8912      	ldrh	r2, [r2, #8]
 8012538:	4611      	mov	r1, r2
 801253a:	4618      	mov	r0, r3
 801253c:	f7fb ff70 	bl	800e420 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012540:	4b45      	ldr	r3, [pc, #276]	@ (8012658 <tcp_receive+0x888>)
 8012542:	891c      	ldrh	r4, [r3, #8]
 8012544:	4b44      	ldr	r3, [pc, #272]	@ (8012658 <tcp_receive+0x888>)
 8012546:	68db      	ldr	r3, [r3, #12]
 8012548:	899b      	ldrh	r3, [r3, #12]
 801254a:	b29b      	uxth	r3, r3
 801254c:	4618      	mov	r0, r3
 801254e:	f7fa fcc7 	bl	800cee0 <lwip_htons>
 8012552:	4603      	mov	r3, r0
 8012554:	b2db      	uxtb	r3, r3
 8012556:	f003 0303 	and.w	r3, r3, #3
 801255a:	2b00      	cmp	r3, #0
 801255c:	d001      	beq.n	8012562 <tcp_receive+0x792>
 801255e:	2301      	movs	r3, #1
 8012560:	e000      	b.n	8012564 <tcp_receive+0x794>
 8012562:	2300      	movs	r3, #0
 8012564:	4423      	add	r3, r4
 8012566:	b29a      	uxth	r2, r3
 8012568:	4b3c      	ldr	r3, [pc, #240]	@ (801265c <tcp_receive+0x88c>)
 801256a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801256c:	4b3b      	ldr	r3, [pc, #236]	@ (801265c <tcp_receive+0x88c>)
 801256e:	881b      	ldrh	r3, [r3, #0]
 8012570:	461a      	mov	r2, r3
 8012572:	4b38      	ldr	r3, [pc, #224]	@ (8012654 <tcp_receive+0x884>)
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	441a      	add	r2, r3
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801257c:	6879      	ldr	r1, [r7, #4]
 801257e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012580:	440b      	add	r3, r1
 8012582:	429a      	cmp	r2, r3
 8012584:	d006      	beq.n	8012594 <tcp_receive+0x7c4>
 8012586:	4b36      	ldr	r3, [pc, #216]	@ (8012660 <tcp_receive+0x890>)
 8012588:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 801258c:	4935      	ldr	r1, [pc, #212]	@ (8012664 <tcp_receive+0x894>)
 801258e:	4836      	ldr	r0, [pc, #216]	@ (8012668 <tcp_receive+0x898>)
 8012590:	f012 ff9a 	bl	80254c8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012598:	2b00      	cmp	r3, #0
 801259a:	f000 80e6 	beq.w	801276a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801259e:	4b2e      	ldr	r3, [pc, #184]	@ (8012658 <tcp_receive+0x888>)
 80125a0:	68db      	ldr	r3, [r3, #12]
 80125a2:	899b      	ldrh	r3, [r3, #12]
 80125a4:	b29b      	uxth	r3, r3
 80125a6:	4618      	mov	r0, r3
 80125a8:	f7fa fc9a 	bl	800cee0 <lwip_htons>
 80125ac:	4603      	mov	r3, r0
 80125ae:	b2db      	uxtb	r3, r3
 80125b0:	f003 0301 	and.w	r3, r3, #1
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d010      	beq.n	80125da <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80125b8:	e00a      	b.n	80125d0 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80125be:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80125c4:	681a      	ldr	r2, [r3, #0]
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80125ca:	68f8      	ldr	r0, [r7, #12]
 80125cc:	f7fd fcc5 	bl	800ff5a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d1f0      	bne.n	80125ba <tcp_receive+0x7ea>
 80125d8:	e0c7      	b.n	801276a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80125de:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80125e0:	e051      	b.n	8012686 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80125e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80125e4:	68db      	ldr	r3, [r3, #12]
 80125e6:	899b      	ldrh	r3, [r3, #12]
 80125e8:	b29b      	uxth	r3, r3
 80125ea:	4618      	mov	r0, r3
 80125ec:	f7fa fc78 	bl	800cee0 <lwip_htons>
 80125f0:	4603      	mov	r3, r0
 80125f2:	b2db      	uxtb	r3, r3
 80125f4:	f003 0301 	and.w	r3, r3, #1
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d03c      	beq.n	8012676 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80125fc:	4b16      	ldr	r3, [pc, #88]	@ (8012658 <tcp_receive+0x888>)
 80125fe:	68db      	ldr	r3, [r3, #12]
 8012600:	899b      	ldrh	r3, [r3, #12]
 8012602:	b29b      	uxth	r3, r3
 8012604:	4618      	mov	r0, r3
 8012606:	f7fa fc6b 	bl	800cee0 <lwip_htons>
 801260a:	4603      	mov	r3, r0
 801260c:	b2db      	uxtb	r3, r3
 801260e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012612:	2b00      	cmp	r3, #0
 8012614:	d12f      	bne.n	8012676 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012616:	4b10      	ldr	r3, [pc, #64]	@ (8012658 <tcp_receive+0x888>)
 8012618:	68db      	ldr	r3, [r3, #12]
 801261a:	899b      	ldrh	r3, [r3, #12]
 801261c:	b29c      	uxth	r4, r3
 801261e:	2001      	movs	r0, #1
 8012620:	f7fa fc5e 	bl	800cee0 <lwip_htons>
 8012624:	4603      	mov	r3, r0
 8012626:	461a      	mov	r2, r3
 8012628:	4b0b      	ldr	r3, [pc, #44]	@ (8012658 <tcp_receive+0x888>)
 801262a:	68db      	ldr	r3, [r3, #12]
 801262c:	4322      	orrs	r2, r4
 801262e:	b292      	uxth	r2, r2
 8012630:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012632:	4b09      	ldr	r3, [pc, #36]	@ (8012658 <tcp_receive+0x888>)
 8012634:	891c      	ldrh	r4, [r3, #8]
 8012636:	4b08      	ldr	r3, [pc, #32]	@ (8012658 <tcp_receive+0x888>)
 8012638:	68db      	ldr	r3, [r3, #12]
 801263a:	899b      	ldrh	r3, [r3, #12]
 801263c:	b29b      	uxth	r3, r3
 801263e:	4618      	mov	r0, r3
 8012640:	f7fa fc4e 	bl	800cee0 <lwip_htons>
 8012644:	4603      	mov	r3, r0
 8012646:	b2db      	uxtb	r3, r3
 8012648:	f003 0303 	and.w	r3, r3, #3
 801264c:	2b00      	cmp	r3, #0
 801264e:	d00d      	beq.n	801266c <tcp_receive+0x89c>
 8012650:	2301      	movs	r3, #1
 8012652:	e00c      	b.n	801266e <tcp_receive+0x89e>
 8012654:	2000feb8 	.word	0x2000feb8
 8012658:	2000fe98 	.word	0x2000fe98
 801265c:	2000fec2 	.word	0x2000fec2
 8012660:	08028938 	.word	0x08028938
 8012664:	08028ce0 	.word	0x08028ce0
 8012668:	08028984 	.word	0x08028984
 801266c:	2300      	movs	r3, #0
 801266e:	4423      	add	r3, r4
 8012670:	b29a      	uxth	r2, r3
 8012672:	4b98      	ldr	r3, [pc, #608]	@ (80128d4 <tcp_receive+0xb04>)
 8012674:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012678:	613b      	str	r3, [r7, #16]
              next = next->next;
 801267a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8012680:	6938      	ldr	r0, [r7, #16]
 8012682:	f7fd fc6a 	bl	800ff5a <tcp_seg_free>
            while (next &&
 8012686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012688:	2b00      	cmp	r3, #0
 801268a:	d00e      	beq.n	80126aa <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801268c:	4b91      	ldr	r3, [pc, #580]	@ (80128d4 <tcp_receive+0xb04>)
 801268e:	881b      	ldrh	r3, [r3, #0]
 8012690:	461a      	mov	r2, r3
 8012692:	4b91      	ldr	r3, [pc, #580]	@ (80128d8 <tcp_receive+0xb08>)
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	441a      	add	r2, r3
 8012698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801269a:	68db      	ldr	r3, [r3, #12]
 801269c:	685b      	ldr	r3, [r3, #4]
 801269e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80126a0:	8909      	ldrh	r1, [r1, #8]
 80126a2:	440b      	add	r3, r1
 80126a4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	da9b      	bge.n	80125e2 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80126aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d059      	beq.n	8012764 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80126b0:	4b88      	ldr	r3, [pc, #544]	@ (80128d4 <tcp_receive+0xb04>)
 80126b2:	881b      	ldrh	r3, [r3, #0]
 80126b4:	461a      	mov	r2, r3
 80126b6:	4b88      	ldr	r3, [pc, #544]	@ (80128d8 <tcp_receive+0xb08>)
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	441a      	add	r2, r3
 80126bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126be:	68db      	ldr	r3, [r3, #12]
 80126c0:	685b      	ldr	r3, [r3, #4]
 80126c2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	dd4d      	ble.n	8012764 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80126c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126ca:	68db      	ldr	r3, [r3, #12]
 80126cc:	685b      	ldr	r3, [r3, #4]
 80126ce:	b29a      	uxth	r2, r3
 80126d0:	4b81      	ldr	r3, [pc, #516]	@ (80128d8 <tcp_receive+0xb08>)
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	b29b      	uxth	r3, r3
 80126d6:	1ad3      	subs	r3, r2, r3
 80126d8:	b29a      	uxth	r2, r3
 80126da:	4b80      	ldr	r3, [pc, #512]	@ (80128dc <tcp_receive+0xb0c>)
 80126dc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80126de:	4b7f      	ldr	r3, [pc, #508]	@ (80128dc <tcp_receive+0xb0c>)
 80126e0:	68db      	ldr	r3, [r3, #12]
 80126e2:	899b      	ldrh	r3, [r3, #12]
 80126e4:	b29b      	uxth	r3, r3
 80126e6:	4618      	mov	r0, r3
 80126e8:	f7fa fbfa 	bl	800cee0 <lwip_htons>
 80126ec:	4603      	mov	r3, r0
 80126ee:	b2db      	uxtb	r3, r3
 80126f0:	f003 0302 	and.w	r3, r3, #2
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d005      	beq.n	8012704 <tcp_receive+0x934>
                inseg.len -= 1;
 80126f8:	4b78      	ldr	r3, [pc, #480]	@ (80128dc <tcp_receive+0xb0c>)
 80126fa:	891b      	ldrh	r3, [r3, #8]
 80126fc:	3b01      	subs	r3, #1
 80126fe:	b29a      	uxth	r2, r3
 8012700:	4b76      	ldr	r3, [pc, #472]	@ (80128dc <tcp_receive+0xb0c>)
 8012702:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012704:	4b75      	ldr	r3, [pc, #468]	@ (80128dc <tcp_receive+0xb0c>)
 8012706:	685b      	ldr	r3, [r3, #4]
 8012708:	4a74      	ldr	r2, [pc, #464]	@ (80128dc <tcp_receive+0xb0c>)
 801270a:	8912      	ldrh	r2, [r2, #8]
 801270c:	4611      	mov	r1, r2
 801270e:	4618      	mov	r0, r3
 8012710:	f7fb fe86 	bl	800e420 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012714:	4b71      	ldr	r3, [pc, #452]	@ (80128dc <tcp_receive+0xb0c>)
 8012716:	891c      	ldrh	r4, [r3, #8]
 8012718:	4b70      	ldr	r3, [pc, #448]	@ (80128dc <tcp_receive+0xb0c>)
 801271a:	68db      	ldr	r3, [r3, #12]
 801271c:	899b      	ldrh	r3, [r3, #12]
 801271e:	b29b      	uxth	r3, r3
 8012720:	4618      	mov	r0, r3
 8012722:	f7fa fbdd 	bl	800cee0 <lwip_htons>
 8012726:	4603      	mov	r3, r0
 8012728:	b2db      	uxtb	r3, r3
 801272a:	f003 0303 	and.w	r3, r3, #3
 801272e:	2b00      	cmp	r3, #0
 8012730:	d001      	beq.n	8012736 <tcp_receive+0x966>
 8012732:	2301      	movs	r3, #1
 8012734:	e000      	b.n	8012738 <tcp_receive+0x968>
 8012736:	2300      	movs	r3, #0
 8012738:	4423      	add	r3, r4
 801273a:	b29a      	uxth	r2, r3
 801273c:	4b65      	ldr	r3, [pc, #404]	@ (80128d4 <tcp_receive+0xb04>)
 801273e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012740:	4b64      	ldr	r3, [pc, #400]	@ (80128d4 <tcp_receive+0xb04>)
 8012742:	881b      	ldrh	r3, [r3, #0]
 8012744:	461a      	mov	r2, r3
 8012746:	4b64      	ldr	r3, [pc, #400]	@ (80128d8 <tcp_receive+0xb08>)
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	441a      	add	r2, r3
 801274c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801274e:	68db      	ldr	r3, [r3, #12]
 8012750:	685b      	ldr	r3, [r3, #4]
 8012752:	429a      	cmp	r2, r3
 8012754:	d006      	beq.n	8012764 <tcp_receive+0x994>
 8012756:	4b62      	ldr	r3, [pc, #392]	@ (80128e0 <tcp_receive+0xb10>)
 8012758:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 801275c:	4961      	ldr	r1, [pc, #388]	@ (80128e4 <tcp_receive+0xb14>)
 801275e:	4862      	ldr	r0, [pc, #392]	@ (80128e8 <tcp_receive+0xb18>)
 8012760:	f012 feb2 	bl	80254c8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012768:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801276a:	4b5a      	ldr	r3, [pc, #360]	@ (80128d4 <tcp_receive+0xb04>)
 801276c:	881b      	ldrh	r3, [r3, #0]
 801276e:	461a      	mov	r2, r3
 8012770:	4b59      	ldr	r3, [pc, #356]	@ (80128d8 <tcp_receive+0xb08>)
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	441a      	add	r2, r3
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801277e:	4b55      	ldr	r3, [pc, #340]	@ (80128d4 <tcp_receive+0xb04>)
 8012780:	881b      	ldrh	r3, [r3, #0]
 8012782:	429a      	cmp	r2, r3
 8012784:	d206      	bcs.n	8012794 <tcp_receive+0x9c4>
 8012786:	4b56      	ldr	r3, [pc, #344]	@ (80128e0 <tcp_receive+0xb10>)
 8012788:	f240 6207 	movw	r2, #1543	@ 0x607
 801278c:	4957      	ldr	r1, [pc, #348]	@ (80128ec <tcp_receive+0xb1c>)
 801278e:	4856      	ldr	r0, [pc, #344]	@ (80128e8 <tcp_receive+0xb18>)
 8012790:	f012 fe9a 	bl	80254c8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012798:	4b4e      	ldr	r3, [pc, #312]	@ (80128d4 <tcp_receive+0xb04>)
 801279a:	881b      	ldrh	r3, [r3, #0]
 801279c:	1ad3      	subs	r3, r2, r3
 801279e:	b29a      	uxth	r2, r3
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80127a4:	6878      	ldr	r0, [r7, #4]
 80127a6:	f7fc feb1 	bl	800f50c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80127aa:	4b4c      	ldr	r3, [pc, #304]	@ (80128dc <tcp_receive+0xb0c>)
 80127ac:	685b      	ldr	r3, [r3, #4]
 80127ae:	891b      	ldrh	r3, [r3, #8]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d006      	beq.n	80127c2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80127b4:	4b49      	ldr	r3, [pc, #292]	@ (80128dc <tcp_receive+0xb0c>)
 80127b6:	685b      	ldr	r3, [r3, #4]
 80127b8:	4a4d      	ldr	r2, [pc, #308]	@ (80128f0 <tcp_receive+0xb20>)
 80127ba:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80127bc:	4b47      	ldr	r3, [pc, #284]	@ (80128dc <tcp_receive+0xb0c>)
 80127be:	2200      	movs	r2, #0
 80127c0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80127c2:	4b46      	ldr	r3, [pc, #280]	@ (80128dc <tcp_receive+0xb0c>)
 80127c4:	68db      	ldr	r3, [r3, #12]
 80127c6:	899b      	ldrh	r3, [r3, #12]
 80127c8:	b29b      	uxth	r3, r3
 80127ca:	4618      	mov	r0, r3
 80127cc:	f7fa fb88 	bl	800cee0 <lwip_htons>
 80127d0:	4603      	mov	r3, r0
 80127d2:	b2db      	uxtb	r3, r3
 80127d4:	f003 0301 	and.w	r3, r3, #1
 80127d8:	2b00      	cmp	r3, #0
 80127da:	f000 80b8 	beq.w	801294e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80127de:	4b45      	ldr	r3, [pc, #276]	@ (80128f4 <tcp_receive+0xb24>)
 80127e0:	781b      	ldrb	r3, [r3, #0]
 80127e2:	f043 0320 	orr.w	r3, r3, #32
 80127e6:	b2da      	uxtb	r2, r3
 80127e8:	4b42      	ldr	r3, [pc, #264]	@ (80128f4 <tcp_receive+0xb24>)
 80127ea:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80127ec:	e0af      	b.n	801294e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80127f2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80127f8:	68db      	ldr	r3, [r3, #12]
 80127fa:	685b      	ldr	r3, [r3, #4]
 80127fc:	4a36      	ldr	r2, [pc, #216]	@ (80128d8 <tcp_receive+0xb08>)
 80127fe:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012800:	68bb      	ldr	r3, [r7, #8]
 8012802:	891b      	ldrh	r3, [r3, #8]
 8012804:	461c      	mov	r4, r3
 8012806:	68bb      	ldr	r3, [r7, #8]
 8012808:	68db      	ldr	r3, [r3, #12]
 801280a:	899b      	ldrh	r3, [r3, #12]
 801280c:	b29b      	uxth	r3, r3
 801280e:	4618      	mov	r0, r3
 8012810:	f7fa fb66 	bl	800cee0 <lwip_htons>
 8012814:	4603      	mov	r3, r0
 8012816:	b2db      	uxtb	r3, r3
 8012818:	f003 0303 	and.w	r3, r3, #3
 801281c:	2b00      	cmp	r3, #0
 801281e:	d001      	beq.n	8012824 <tcp_receive+0xa54>
 8012820:	2301      	movs	r3, #1
 8012822:	e000      	b.n	8012826 <tcp_receive+0xa56>
 8012824:	2300      	movs	r3, #0
 8012826:	191a      	adds	r2, r3, r4
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801282c:	441a      	add	r2, r3
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012836:	461c      	mov	r4, r3
 8012838:	68bb      	ldr	r3, [r7, #8]
 801283a:	891b      	ldrh	r3, [r3, #8]
 801283c:	461d      	mov	r5, r3
 801283e:	68bb      	ldr	r3, [r7, #8]
 8012840:	68db      	ldr	r3, [r3, #12]
 8012842:	899b      	ldrh	r3, [r3, #12]
 8012844:	b29b      	uxth	r3, r3
 8012846:	4618      	mov	r0, r3
 8012848:	f7fa fb4a 	bl	800cee0 <lwip_htons>
 801284c:	4603      	mov	r3, r0
 801284e:	b2db      	uxtb	r3, r3
 8012850:	f003 0303 	and.w	r3, r3, #3
 8012854:	2b00      	cmp	r3, #0
 8012856:	d001      	beq.n	801285c <tcp_receive+0xa8c>
 8012858:	2301      	movs	r3, #1
 801285a:	e000      	b.n	801285e <tcp_receive+0xa8e>
 801285c:	2300      	movs	r3, #0
 801285e:	442b      	add	r3, r5
 8012860:	429c      	cmp	r4, r3
 8012862:	d206      	bcs.n	8012872 <tcp_receive+0xaa2>
 8012864:	4b1e      	ldr	r3, [pc, #120]	@ (80128e0 <tcp_receive+0xb10>)
 8012866:	f240 622b 	movw	r2, #1579	@ 0x62b
 801286a:	4923      	ldr	r1, [pc, #140]	@ (80128f8 <tcp_receive+0xb28>)
 801286c:	481e      	ldr	r0, [pc, #120]	@ (80128e8 <tcp_receive+0xb18>)
 801286e:	f012 fe2b 	bl	80254c8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012872:	68bb      	ldr	r3, [r7, #8]
 8012874:	891b      	ldrh	r3, [r3, #8]
 8012876:	461c      	mov	r4, r3
 8012878:	68bb      	ldr	r3, [r7, #8]
 801287a:	68db      	ldr	r3, [r3, #12]
 801287c:	899b      	ldrh	r3, [r3, #12]
 801287e:	b29b      	uxth	r3, r3
 8012880:	4618      	mov	r0, r3
 8012882:	f7fa fb2d 	bl	800cee0 <lwip_htons>
 8012886:	4603      	mov	r3, r0
 8012888:	b2db      	uxtb	r3, r3
 801288a:	f003 0303 	and.w	r3, r3, #3
 801288e:	2b00      	cmp	r3, #0
 8012890:	d001      	beq.n	8012896 <tcp_receive+0xac6>
 8012892:	2301      	movs	r3, #1
 8012894:	e000      	b.n	8012898 <tcp_receive+0xac8>
 8012896:	2300      	movs	r3, #0
 8012898:	1919      	adds	r1, r3, r4
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801289e:	b28b      	uxth	r3, r1
 80128a0:	1ad3      	subs	r3, r2, r3
 80128a2:	b29a      	uxth	r2, r3
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80128a8:	6878      	ldr	r0, [r7, #4]
 80128aa:	f7fc fe2f 	bl	800f50c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80128ae:	68bb      	ldr	r3, [r7, #8]
 80128b0:	685b      	ldr	r3, [r3, #4]
 80128b2:	891b      	ldrh	r3, [r3, #8]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d028      	beq.n	801290a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80128b8:	4b0d      	ldr	r3, [pc, #52]	@ (80128f0 <tcp_receive+0xb20>)
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d01d      	beq.n	80128fc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80128c0:	4b0b      	ldr	r3, [pc, #44]	@ (80128f0 <tcp_receive+0xb20>)
 80128c2:	681a      	ldr	r2, [r3, #0]
 80128c4:	68bb      	ldr	r3, [r7, #8]
 80128c6:	685b      	ldr	r3, [r3, #4]
 80128c8:	4619      	mov	r1, r3
 80128ca:	4610      	mov	r0, r2
 80128cc:	f7fc f82e 	bl	800e92c <pbuf_cat>
 80128d0:	e018      	b.n	8012904 <tcp_receive+0xb34>
 80128d2:	bf00      	nop
 80128d4:	2000fec2 	.word	0x2000fec2
 80128d8:	2000feb8 	.word	0x2000feb8
 80128dc:	2000fe98 	.word	0x2000fe98
 80128e0:	08028938 	.word	0x08028938
 80128e4:	08028d18 	.word	0x08028d18
 80128e8:	08028984 	.word	0x08028984
 80128ec:	08028d54 	.word	0x08028d54
 80128f0:	2000fec8 	.word	0x2000fec8
 80128f4:	2000fec5 	.word	0x2000fec5
 80128f8:	08028d74 	.word	0x08028d74
            } else {
              recv_data = cseg->p;
 80128fc:	68bb      	ldr	r3, [r7, #8]
 80128fe:	685b      	ldr	r3, [r3, #4]
 8012900:	4a70      	ldr	r2, [pc, #448]	@ (8012ac4 <tcp_receive+0xcf4>)
 8012902:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012904:	68bb      	ldr	r3, [r7, #8]
 8012906:	2200      	movs	r2, #0
 8012908:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801290a:	68bb      	ldr	r3, [r7, #8]
 801290c:	68db      	ldr	r3, [r3, #12]
 801290e:	899b      	ldrh	r3, [r3, #12]
 8012910:	b29b      	uxth	r3, r3
 8012912:	4618      	mov	r0, r3
 8012914:	f7fa fae4 	bl	800cee0 <lwip_htons>
 8012918:	4603      	mov	r3, r0
 801291a:	b2db      	uxtb	r3, r3
 801291c:	f003 0301 	and.w	r3, r3, #1
 8012920:	2b00      	cmp	r3, #0
 8012922:	d00d      	beq.n	8012940 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012924:	4b68      	ldr	r3, [pc, #416]	@ (8012ac8 <tcp_receive+0xcf8>)
 8012926:	781b      	ldrb	r3, [r3, #0]
 8012928:	f043 0320 	orr.w	r3, r3, #32
 801292c:	b2da      	uxtb	r2, r3
 801292e:	4b66      	ldr	r3, [pc, #408]	@ (8012ac8 <tcp_receive+0xcf8>)
 8012930:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	7d1b      	ldrb	r3, [r3, #20]
 8012936:	2b04      	cmp	r3, #4
 8012938:	d102      	bne.n	8012940 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	2207      	movs	r2, #7
 801293e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012940:	68bb      	ldr	r3, [r7, #8]
 8012942:	681a      	ldr	r2, [r3, #0]
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8012948:	68b8      	ldr	r0, [r7, #8]
 801294a:	f7fd fb06 	bl	800ff5a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012952:	2b00      	cmp	r3, #0
 8012954:	d008      	beq.n	8012968 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801295a:	68db      	ldr	r3, [r3, #12]
 801295c:	685a      	ldr	r2, [r3, #4]
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8012962:	429a      	cmp	r2, r3
 8012964:	f43f af43 	beq.w	80127ee <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	8b5b      	ldrh	r3, [r3, #26]
 801296c:	f003 0301 	and.w	r3, r3, #1
 8012970:	2b00      	cmp	r3, #0
 8012972:	d00e      	beq.n	8012992 <tcp_receive+0xbc2>
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	8b5b      	ldrh	r3, [r3, #26]
 8012978:	f023 0301 	bic.w	r3, r3, #1
 801297c:	b29a      	uxth	r2, r3
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	835a      	strh	r2, [r3, #26]
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	8b5b      	ldrh	r3, [r3, #26]
 8012986:	f043 0302 	orr.w	r3, r3, #2
 801298a:	b29a      	uxth	r2, r3
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012990:	e187      	b.n	8012ca2 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	8b5b      	ldrh	r3, [r3, #26]
 8012996:	f043 0301 	orr.w	r3, r3, #1
 801299a:	b29a      	uxth	r2, r3
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80129a0:	e17f      	b.n	8012ca2 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d106      	bne.n	80129b8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80129aa:	4848      	ldr	r0, [pc, #288]	@ (8012acc <tcp_receive+0xcfc>)
 80129ac:	f7fd faee 	bl	800ff8c <tcp_seg_copy>
 80129b0:	4602      	mov	r2, r0
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	675a      	str	r2, [r3, #116]	@ 0x74
 80129b6:	e16c      	b.n	8012c92 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80129b8:	2300      	movs	r3, #0
 80129ba:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80129c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80129c2:	e156      	b.n	8012c72 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80129c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129c6:	68db      	ldr	r3, [r3, #12]
 80129c8:	685a      	ldr	r2, [r3, #4]
 80129ca:	4b41      	ldr	r3, [pc, #260]	@ (8012ad0 <tcp_receive+0xd00>)
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	429a      	cmp	r2, r3
 80129d0:	d11d      	bne.n	8012a0e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80129d2:	4b3e      	ldr	r3, [pc, #248]	@ (8012acc <tcp_receive+0xcfc>)
 80129d4:	891a      	ldrh	r2, [r3, #8]
 80129d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129d8:	891b      	ldrh	r3, [r3, #8]
 80129da:	429a      	cmp	r2, r3
 80129dc:	f240 814e 	bls.w	8012c7c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80129e0:	483a      	ldr	r0, [pc, #232]	@ (8012acc <tcp_receive+0xcfc>)
 80129e2:	f7fd fad3 	bl	800ff8c <tcp_seg_copy>
 80129e6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80129e8:	697b      	ldr	r3, [r7, #20]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	f000 8148 	beq.w	8012c80 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80129f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d003      	beq.n	80129fe <tcp_receive+0xc2e>
                    prev->next = cseg;
 80129f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129f8:	697a      	ldr	r2, [r7, #20]
 80129fa:	601a      	str	r2, [r3, #0]
 80129fc:	e002      	b.n	8012a04 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	697a      	ldr	r2, [r7, #20]
 8012a02:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012a04:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012a06:	6978      	ldr	r0, [r7, #20]
 8012a08:	f7ff f8de 	bl	8011bc8 <tcp_oos_insert_segment>
                }
                break;
 8012a0c:	e138      	b.n	8012c80 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d117      	bne.n	8012a44 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012a14:	4b2e      	ldr	r3, [pc, #184]	@ (8012ad0 <tcp_receive+0xd00>)
 8012a16:	681a      	ldr	r2, [r3, #0]
 8012a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a1a:	68db      	ldr	r3, [r3, #12]
 8012a1c:	685b      	ldr	r3, [r3, #4]
 8012a1e:	1ad3      	subs	r3, r2, r3
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	da57      	bge.n	8012ad4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012a24:	4829      	ldr	r0, [pc, #164]	@ (8012acc <tcp_receive+0xcfc>)
 8012a26:	f7fd fab1 	bl	800ff8c <tcp_seg_copy>
 8012a2a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012a2c:	69bb      	ldr	r3, [r7, #24]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	f000 8128 	beq.w	8012c84 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	69ba      	ldr	r2, [r7, #24]
 8012a38:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012a3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012a3c:	69b8      	ldr	r0, [r7, #24]
 8012a3e:	f7ff f8c3 	bl	8011bc8 <tcp_oos_insert_segment>
                  }
                  break;
 8012a42:	e11f      	b.n	8012c84 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012a44:	4b22      	ldr	r3, [pc, #136]	@ (8012ad0 <tcp_receive+0xd00>)
 8012a46:	681a      	ldr	r2, [r3, #0]
 8012a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a4a:	68db      	ldr	r3, [r3, #12]
 8012a4c:	685b      	ldr	r3, [r3, #4]
 8012a4e:	1ad3      	subs	r3, r2, r3
 8012a50:	3b01      	subs	r3, #1
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	db3e      	blt.n	8012ad4 <tcp_receive+0xd04>
 8012a56:	4b1e      	ldr	r3, [pc, #120]	@ (8012ad0 <tcp_receive+0xd00>)
 8012a58:	681a      	ldr	r2, [r3, #0]
 8012a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a5c:	68db      	ldr	r3, [r3, #12]
 8012a5e:	685b      	ldr	r3, [r3, #4]
 8012a60:	1ad3      	subs	r3, r2, r3
 8012a62:	3301      	adds	r3, #1
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	dc35      	bgt.n	8012ad4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012a68:	4818      	ldr	r0, [pc, #96]	@ (8012acc <tcp_receive+0xcfc>)
 8012a6a:	f7fd fa8f 	bl	800ff8c <tcp_seg_copy>
 8012a6e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012a70:	69fb      	ldr	r3, [r7, #28]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	f000 8108 	beq.w	8012c88 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a7a:	68db      	ldr	r3, [r3, #12]
 8012a7c:	685b      	ldr	r3, [r3, #4]
 8012a7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012a80:	8912      	ldrh	r2, [r2, #8]
 8012a82:	441a      	add	r2, r3
 8012a84:	4b12      	ldr	r3, [pc, #72]	@ (8012ad0 <tcp_receive+0xd00>)
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	1ad3      	subs	r3, r2, r3
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	dd12      	ble.n	8012ab4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012a8e:	4b10      	ldr	r3, [pc, #64]	@ (8012ad0 <tcp_receive+0xd00>)
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	b29a      	uxth	r2, r3
 8012a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a96:	68db      	ldr	r3, [r3, #12]
 8012a98:	685b      	ldr	r3, [r3, #4]
 8012a9a:	b29b      	uxth	r3, r3
 8012a9c:	1ad3      	subs	r3, r2, r3
 8012a9e:	b29a      	uxth	r2, r3
 8012aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012aa2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012aa6:	685a      	ldr	r2, [r3, #4]
 8012aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012aaa:	891b      	ldrh	r3, [r3, #8]
 8012aac:	4619      	mov	r1, r3
 8012aae:	4610      	mov	r0, r2
 8012ab0:	f7fb fcb6 	bl	800e420 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ab6:	69fa      	ldr	r2, [r7, #28]
 8012ab8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012aba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012abc:	69f8      	ldr	r0, [r7, #28]
 8012abe:	f7ff f883 	bl	8011bc8 <tcp_oos_insert_segment>
                  }
                  break;
 8012ac2:	e0e1      	b.n	8012c88 <tcp_receive+0xeb8>
 8012ac4:	2000fec8 	.word	0x2000fec8
 8012ac8:	2000fec5 	.word	0x2000fec5
 8012acc:	2000fe98 	.word	0x2000fe98
 8012ad0:	2000feb8 	.word	0x2000feb8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ad6:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	f040 80c5 	bne.w	8012c6c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012ae2:	4b7f      	ldr	r3, [pc, #508]	@ (8012ce0 <tcp_receive+0xf10>)
 8012ae4:	681a      	ldr	r2, [r3, #0]
 8012ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ae8:	68db      	ldr	r3, [r3, #12]
 8012aea:	685b      	ldr	r3, [r3, #4]
 8012aec:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	f340 80bc 	ble.w	8012c6c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012af6:	68db      	ldr	r3, [r3, #12]
 8012af8:	899b      	ldrh	r3, [r3, #12]
 8012afa:	b29b      	uxth	r3, r3
 8012afc:	4618      	mov	r0, r3
 8012afe:	f7fa f9ef 	bl	800cee0 <lwip_htons>
 8012b02:	4603      	mov	r3, r0
 8012b04:	b2db      	uxtb	r3, r3
 8012b06:	f003 0301 	and.w	r3, r3, #1
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	f040 80be 	bne.w	8012c8c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012b10:	4874      	ldr	r0, [pc, #464]	@ (8012ce4 <tcp_receive+0xf14>)
 8012b12:	f7fd fa3b 	bl	800ff8c <tcp_seg_copy>
 8012b16:	4602      	mov	r2, r0
 8012b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b1a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	f000 80b5 	beq.w	8012c90 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b28:	68db      	ldr	r3, [r3, #12]
 8012b2a:	685b      	ldr	r3, [r3, #4]
 8012b2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012b2e:	8912      	ldrh	r2, [r2, #8]
 8012b30:	441a      	add	r2, r3
 8012b32:	4b6b      	ldr	r3, [pc, #428]	@ (8012ce0 <tcp_receive+0xf10>)
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	1ad3      	subs	r3, r2, r3
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	dd12      	ble.n	8012b62 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012b3c:	4b68      	ldr	r3, [pc, #416]	@ (8012ce0 <tcp_receive+0xf10>)
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	b29a      	uxth	r2, r3
 8012b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b44:	68db      	ldr	r3, [r3, #12]
 8012b46:	685b      	ldr	r3, [r3, #4]
 8012b48:	b29b      	uxth	r3, r3
 8012b4a:	1ad3      	subs	r3, r2, r3
 8012b4c:	b29a      	uxth	r2, r3
 8012b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b50:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b54:	685a      	ldr	r2, [r3, #4]
 8012b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b58:	891b      	ldrh	r3, [r3, #8]
 8012b5a:	4619      	mov	r1, r3
 8012b5c:	4610      	mov	r0, r2
 8012b5e:	f7fb fc5f 	bl	800e420 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012b62:	4b61      	ldr	r3, [pc, #388]	@ (8012ce8 <tcp_receive+0xf18>)
 8012b64:	881b      	ldrh	r3, [r3, #0]
 8012b66:	461a      	mov	r2, r3
 8012b68:	4b5d      	ldr	r3, [pc, #372]	@ (8012ce0 <tcp_receive+0xf10>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	441a      	add	r2, r3
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b72:	6879      	ldr	r1, [r7, #4]
 8012b74:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012b76:	440b      	add	r3, r1
 8012b78:	1ad3      	subs	r3, r2, r3
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	f340 8088 	ble.w	8012c90 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	68db      	ldr	r3, [r3, #12]
 8012b86:	899b      	ldrh	r3, [r3, #12]
 8012b88:	b29b      	uxth	r3, r3
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	f7fa f9a8 	bl	800cee0 <lwip_htons>
 8012b90:	4603      	mov	r3, r0
 8012b92:	b2db      	uxtb	r3, r3
 8012b94:	f003 0301 	and.w	r3, r3, #1
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d021      	beq.n	8012be0 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	68db      	ldr	r3, [r3, #12]
 8012ba2:	899b      	ldrh	r3, [r3, #12]
 8012ba4:	b29b      	uxth	r3, r3
 8012ba6:	b21b      	sxth	r3, r3
 8012ba8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012bac:	b21c      	sxth	r4, r3
 8012bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	68db      	ldr	r3, [r3, #12]
 8012bb4:	899b      	ldrh	r3, [r3, #12]
 8012bb6:	b29b      	uxth	r3, r3
 8012bb8:	4618      	mov	r0, r3
 8012bba:	f7fa f991 	bl	800cee0 <lwip_htons>
 8012bbe:	4603      	mov	r3, r0
 8012bc0:	b2db      	uxtb	r3, r3
 8012bc2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8012bc6:	b29b      	uxth	r3, r3
 8012bc8:	4618      	mov	r0, r3
 8012bca:	f7fa f989 	bl	800cee0 <lwip_htons>
 8012bce:	4603      	mov	r3, r0
 8012bd0:	b21b      	sxth	r3, r3
 8012bd2:	4323      	orrs	r3, r4
 8012bd4:	b21a      	sxth	r2, r3
 8012bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	68db      	ldr	r3, [r3, #12]
 8012bdc:	b292      	uxth	r2, r2
 8012bde:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012be4:	b29a      	uxth	r2, r3
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012bea:	4413      	add	r3, r2
 8012bec:	b299      	uxth	r1, r3
 8012bee:	4b3c      	ldr	r3, [pc, #240]	@ (8012ce0 <tcp_receive+0xf10>)
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	b29a      	uxth	r2, r3
 8012bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	1a8a      	subs	r2, r1, r2
 8012bfa:	b292      	uxth	r2, r2
 8012bfc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	685a      	ldr	r2, [r3, #4]
 8012c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	891b      	ldrh	r3, [r3, #8]
 8012c0a:	4619      	mov	r1, r3
 8012c0c:	4610      	mov	r0, r2
 8012c0e:	f7fb fc07 	bl	800e420 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	891c      	ldrh	r4, [r3, #8]
 8012c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	68db      	ldr	r3, [r3, #12]
 8012c1e:	899b      	ldrh	r3, [r3, #12]
 8012c20:	b29b      	uxth	r3, r3
 8012c22:	4618      	mov	r0, r3
 8012c24:	f7fa f95c 	bl	800cee0 <lwip_htons>
 8012c28:	4603      	mov	r3, r0
 8012c2a:	b2db      	uxtb	r3, r3
 8012c2c:	f003 0303 	and.w	r3, r3, #3
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d001      	beq.n	8012c38 <tcp_receive+0xe68>
 8012c34:	2301      	movs	r3, #1
 8012c36:	e000      	b.n	8012c3a <tcp_receive+0xe6a>
 8012c38:	2300      	movs	r3, #0
 8012c3a:	4423      	add	r3, r4
 8012c3c:	b29a      	uxth	r2, r3
 8012c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8012ce8 <tcp_receive+0xf18>)
 8012c40:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012c42:	4b29      	ldr	r3, [pc, #164]	@ (8012ce8 <tcp_receive+0xf18>)
 8012c44:	881b      	ldrh	r3, [r3, #0]
 8012c46:	461a      	mov	r2, r3
 8012c48:	4b25      	ldr	r3, [pc, #148]	@ (8012ce0 <tcp_receive+0xf10>)
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	441a      	add	r2, r3
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c52:	6879      	ldr	r1, [r7, #4]
 8012c54:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012c56:	440b      	add	r3, r1
 8012c58:	429a      	cmp	r2, r3
 8012c5a:	d019      	beq.n	8012c90 <tcp_receive+0xec0>
 8012c5c:	4b23      	ldr	r3, [pc, #140]	@ (8012cec <tcp_receive+0xf1c>)
 8012c5e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8012c62:	4923      	ldr	r1, [pc, #140]	@ (8012cf0 <tcp_receive+0xf20>)
 8012c64:	4823      	ldr	r0, [pc, #140]	@ (8012cf4 <tcp_receive+0xf24>)
 8012c66:	f012 fc2f 	bl	80254c8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012c6a:	e011      	b.n	8012c90 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	f47f aea5 	bne.w	80129c4 <tcp_receive+0xbf4>
 8012c7a:	e00a      	b.n	8012c92 <tcp_receive+0xec2>
                break;
 8012c7c:	bf00      	nop
 8012c7e:	e008      	b.n	8012c92 <tcp_receive+0xec2>
                break;
 8012c80:	bf00      	nop
 8012c82:	e006      	b.n	8012c92 <tcp_receive+0xec2>
                  break;
 8012c84:	bf00      	nop
 8012c86:	e004      	b.n	8012c92 <tcp_receive+0xec2>
                  break;
 8012c88:	bf00      	nop
 8012c8a:	e002      	b.n	8012c92 <tcp_receive+0xec2>
                  break;
 8012c8c:	bf00      	nop
 8012c8e:	e000      	b.n	8012c92 <tcp_receive+0xec2>
                break;
 8012c90:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012c92:	6878      	ldr	r0, [r7, #4]
 8012c94:	f001 fe88 	bl	80149a8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012c98:	e003      	b.n	8012ca2 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012c9a:	6878      	ldr	r0, [r7, #4]
 8012c9c:	f001 fe84 	bl	80149a8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012ca0:	e01a      	b.n	8012cd8 <tcp_receive+0xf08>
 8012ca2:	e019      	b.n	8012cd8 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8012ce0 <tcp_receive+0xf10>)
 8012ca6:	681a      	ldr	r2, [r3, #0]
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012cac:	1ad3      	subs	r3, r2, r3
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	db0a      	blt.n	8012cc8 <tcp_receive+0xef8>
 8012cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8012ce0 <tcp_receive+0xf10>)
 8012cb4:	681a      	ldr	r2, [r3, #0]
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012cba:	6879      	ldr	r1, [r7, #4]
 8012cbc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012cbe:	440b      	add	r3, r1
 8012cc0:	1ad3      	subs	r3, r2, r3
 8012cc2:	3301      	adds	r3, #1
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	dd07      	ble.n	8012cd8 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	8b5b      	ldrh	r3, [r3, #26]
 8012ccc:	f043 0302 	orr.w	r3, r3, #2
 8012cd0:	b29a      	uxth	r2, r3
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012cd6:	e7ff      	b.n	8012cd8 <tcp_receive+0xf08>
 8012cd8:	bf00      	nop
 8012cda:	3750      	adds	r7, #80	@ 0x50
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	bdb0      	pop	{r4, r5, r7, pc}
 8012ce0:	2000feb8 	.word	0x2000feb8
 8012ce4:	2000fe98 	.word	0x2000fe98
 8012ce8:	2000fec2 	.word	0x2000fec2
 8012cec:	08028938 	.word	0x08028938
 8012cf0:	08028ce0 	.word	0x08028ce0
 8012cf4:	08028984 	.word	0x08028984

08012cf8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012cf8:	b480      	push	{r7}
 8012cfa:	b083      	sub	sp, #12
 8012cfc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012cfe:	4b15      	ldr	r3, [pc, #84]	@ (8012d54 <tcp_get_next_optbyte+0x5c>)
 8012d00:	881b      	ldrh	r3, [r3, #0]
 8012d02:	1c5a      	adds	r2, r3, #1
 8012d04:	b291      	uxth	r1, r2
 8012d06:	4a13      	ldr	r2, [pc, #76]	@ (8012d54 <tcp_get_next_optbyte+0x5c>)
 8012d08:	8011      	strh	r1, [r2, #0]
 8012d0a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012d0c:	4b12      	ldr	r3, [pc, #72]	@ (8012d58 <tcp_get_next_optbyte+0x60>)
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d004      	beq.n	8012d1e <tcp_get_next_optbyte+0x26>
 8012d14:	4b11      	ldr	r3, [pc, #68]	@ (8012d5c <tcp_get_next_optbyte+0x64>)
 8012d16:	881b      	ldrh	r3, [r3, #0]
 8012d18:	88fa      	ldrh	r2, [r7, #6]
 8012d1a:	429a      	cmp	r2, r3
 8012d1c:	d208      	bcs.n	8012d30 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012d1e:	4b10      	ldr	r3, [pc, #64]	@ (8012d60 <tcp_get_next_optbyte+0x68>)
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	3314      	adds	r3, #20
 8012d24:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012d26:	88fb      	ldrh	r3, [r7, #6]
 8012d28:	683a      	ldr	r2, [r7, #0]
 8012d2a:	4413      	add	r3, r2
 8012d2c:	781b      	ldrb	r3, [r3, #0]
 8012d2e:	e00b      	b.n	8012d48 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012d30:	88fb      	ldrh	r3, [r7, #6]
 8012d32:	b2da      	uxtb	r2, r3
 8012d34:	4b09      	ldr	r3, [pc, #36]	@ (8012d5c <tcp_get_next_optbyte+0x64>)
 8012d36:	881b      	ldrh	r3, [r3, #0]
 8012d38:	b2db      	uxtb	r3, r3
 8012d3a:	1ad3      	subs	r3, r2, r3
 8012d3c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012d3e:	4b06      	ldr	r3, [pc, #24]	@ (8012d58 <tcp_get_next_optbyte+0x60>)
 8012d40:	681a      	ldr	r2, [r3, #0]
 8012d42:	797b      	ldrb	r3, [r7, #5]
 8012d44:	4413      	add	r3, r2
 8012d46:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012d48:	4618      	mov	r0, r3
 8012d4a:	370c      	adds	r7, #12
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d52:	4770      	bx	lr
 8012d54:	2000feb4 	.word	0x2000feb4
 8012d58:	2000feb0 	.word	0x2000feb0
 8012d5c:	2000feae 	.word	0x2000feae
 8012d60:	2000fea8 	.word	0x2000fea8

08012d64 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b084      	sub	sp, #16
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d106      	bne.n	8012d80 <tcp_parseopt+0x1c>
 8012d72:	4b32      	ldr	r3, [pc, #200]	@ (8012e3c <tcp_parseopt+0xd8>)
 8012d74:	f240 727d 	movw	r2, #1917	@ 0x77d
 8012d78:	4931      	ldr	r1, [pc, #196]	@ (8012e40 <tcp_parseopt+0xdc>)
 8012d7a:	4832      	ldr	r0, [pc, #200]	@ (8012e44 <tcp_parseopt+0xe0>)
 8012d7c:	f012 fba4 	bl	80254c8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012d80:	4b31      	ldr	r3, [pc, #196]	@ (8012e48 <tcp_parseopt+0xe4>)
 8012d82:	881b      	ldrh	r3, [r3, #0]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d056      	beq.n	8012e36 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012d88:	4b30      	ldr	r3, [pc, #192]	@ (8012e4c <tcp_parseopt+0xe8>)
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	801a      	strh	r2, [r3, #0]
 8012d8e:	e046      	b.n	8012e1e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8012d90:	f7ff ffb2 	bl	8012cf8 <tcp_get_next_optbyte>
 8012d94:	4603      	mov	r3, r0
 8012d96:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012d98:	7bfb      	ldrb	r3, [r7, #15]
 8012d9a:	2b02      	cmp	r3, #2
 8012d9c:	d006      	beq.n	8012dac <tcp_parseopt+0x48>
 8012d9e:	2b02      	cmp	r3, #2
 8012da0:	dc2a      	bgt.n	8012df8 <tcp_parseopt+0x94>
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d042      	beq.n	8012e2c <tcp_parseopt+0xc8>
 8012da6:	2b01      	cmp	r3, #1
 8012da8:	d038      	beq.n	8012e1c <tcp_parseopt+0xb8>
 8012daa:	e025      	b.n	8012df8 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012dac:	f7ff ffa4 	bl	8012cf8 <tcp_get_next_optbyte>
 8012db0:	4603      	mov	r3, r0
 8012db2:	2b04      	cmp	r3, #4
 8012db4:	d13c      	bne.n	8012e30 <tcp_parseopt+0xcc>
 8012db6:	4b25      	ldr	r3, [pc, #148]	@ (8012e4c <tcp_parseopt+0xe8>)
 8012db8:	881b      	ldrh	r3, [r3, #0]
 8012dba:	3301      	adds	r3, #1
 8012dbc:	4a22      	ldr	r2, [pc, #136]	@ (8012e48 <tcp_parseopt+0xe4>)
 8012dbe:	8812      	ldrh	r2, [r2, #0]
 8012dc0:	4293      	cmp	r3, r2
 8012dc2:	da35      	bge.n	8012e30 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012dc4:	f7ff ff98 	bl	8012cf8 <tcp_get_next_optbyte>
 8012dc8:	4603      	mov	r3, r0
 8012dca:	021b      	lsls	r3, r3, #8
 8012dcc:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012dce:	f7ff ff93 	bl	8012cf8 <tcp_get_next_optbyte>
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	461a      	mov	r2, r3
 8012dd6:	89bb      	ldrh	r3, [r7, #12]
 8012dd8:	4313      	orrs	r3, r2
 8012dda:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012ddc:	89bb      	ldrh	r3, [r7, #12]
 8012dde:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8012de2:	d804      	bhi.n	8012dee <tcp_parseopt+0x8a>
 8012de4:	89bb      	ldrh	r3, [r7, #12]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d001      	beq.n	8012dee <tcp_parseopt+0x8a>
 8012dea:	89ba      	ldrh	r2, [r7, #12]
 8012dec:	e001      	b.n	8012df2 <tcp_parseopt+0x8e>
 8012dee:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8012df6:	e012      	b.n	8012e1e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012df8:	f7ff ff7e 	bl	8012cf8 <tcp_get_next_optbyte>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012e00:	7afb      	ldrb	r3, [r7, #11]
 8012e02:	2b01      	cmp	r3, #1
 8012e04:	d916      	bls.n	8012e34 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012e06:	7afb      	ldrb	r3, [r7, #11]
 8012e08:	b29a      	uxth	r2, r3
 8012e0a:	4b10      	ldr	r3, [pc, #64]	@ (8012e4c <tcp_parseopt+0xe8>)
 8012e0c:	881b      	ldrh	r3, [r3, #0]
 8012e0e:	4413      	add	r3, r2
 8012e10:	b29b      	uxth	r3, r3
 8012e12:	3b02      	subs	r3, #2
 8012e14:	b29a      	uxth	r2, r3
 8012e16:	4b0d      	ldr	r3, [pc, #52]	@ (8012e4c <tcp_parseopt+0xe8>)
 8012e18:	801a      	strh	r2, [r3, #0]
 8012e1a:	e000      	b.n	8012e1e <tcp_parseopt+0xba>
          break;
 8012e1c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8012e4c <tcp_parseopt+0xe8>)
 8012e20:	881a      	ldrh	r2, [r3, #0]
 8012e22:	4b09      	ldr	r3, [pc, #36]	@ (8012e48 <tcp_parseopt+0xe4>)
 8012e24:	881b      	ldrh	r3, [r3, #0]
 8012e26:	429a      	cmp	r2, r3
 8012e28:	d3b2      	bcc.n	8012d90 <tcp_parseopt+0x2c>
 8012e2a:	e004      	b.n	8012e36 <tcp_parseopt+0xd2>
          return;
 8012e2c:	bf00      	nop
 8012e2e:	e002      	b.n	8012e36 <tcp_parseopt+0xd2>
            return;
 8012e30:	bf00      	nop
 8012e32:	e000      	b.n	8012e36 <tcp_parseopt+0xd2>
            return;
 8012e34:	bf00      	nop
      }
    }
  }
}
 8012e36:	3710      	adds	r7, #16
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	bd80      	pop	{r7, pc}
 8012e3c:	08028938 	.word	0x08028938
 8012e40:	08028d9c 	.word	0x08028d9c
 8012e44:	08028984 	.word	0x08028984
 8012e48:	2000feac 	.word	0x2000feac
 8012e4c:	2000feb4 	.word	0x2000feb4

08012e50 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012e50:	b480      	push	{r7}
 8012e52:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012e54:	4b05      	ldr	r3, [pc, #20]	@ (8012e6c <tcp_trigger_input_pcb_close+0x1c>)
 8012e56:	781b      	ldrb	r3, [r3, #0]
 8012e58:	f043 0310 	orr.w	r3, r3, #16
 8012e5c:	b2da      	uxtb	r2, r3
 8012e5e:	4b03      	ldr	r3, [pc, #12]	@ (8012e6c <tcp_trigger_input_pcb_close+0x1c>)
 8012e60:	701a      	strb	r2, [r3, #0]
}
 8012e62:	bf00      	nop
 8012e64:	46bd      	mov	sp, r7
 8012e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6a:	4770      	bx	lr
 8012e6c:	2000fec5 	.word	0x2000fec5

08012e70 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012e70:	b580      	push	{r7, lr}
 8012e72:	b084      	sub	sp, #16
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	60f8      	str	r0, [r7, #12]
 8012e78:	60b9      	str	r1, [r7, #8]
 8012e7a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d00a      	beq.n	8012e98 <tcp_route+0x28>
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	7a1b      	ldrb	r3, [r3, #8]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d006      	beq.n	8012e98 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	7a1b      	ldrb	r3, [r3, #8]
 8012e8e:	4618      	mov	r0, r3
 8012e90:	f7fb f886 	bl	800dfa0 <netif_get_by_index>
 8012e94:	4603      	mov	r3, r0
 8012e96:	e003      	b.n	8012ea0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012e98:	6878      	ldr	r0, [r7, #4]
 8012e9a:	f003 fe4d 	bl	8016b38 <ip4_route>
 8012e9e:	4603      	mov	r3, r0
  }
}
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	3710      	adds	r7, #16
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	bd80      	pop	{r7, pc}

08012ea8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012ea8:	b590      	push	{r4, r7, lr}
 8012eaa:	b087      	sub	sp, #28
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	60f8      	str	r0, [r7, #12]
 8012eb0:	60b9      	str	r1, [r7, #8]
 8012eb2:	603b      	str	r3, [r7, #0]
 8012eb4:	4613      	mov	r3, r2
 8012eb6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d105      	bne.n	8012eca <tcp_create_segment+0x22>
 8012ebe:	4b43      	ldr	r3, [pc, #268]	@ (8012fcc <tcp_create_segment+0x124>)
 8012ec0:	22a3      	movs	r2, #163	@ 0xa3
 8012ec2:	4943      	ldr	r1, [pc, #268]	@ (8012fd0 <tcp_create_segment+0x128>)
 8012ec4:	4843      	ldr	r0, [pc, #268]	@ (8012fd4 <tcp_create_segment+0x12c>)
 8012ec6:	f012 faff 	bl	80254c8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012eca:	68bb      	ldr	r3, [r7, #8]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d105      	bne.n	8012edc <tcp_create_segment+0x34>
 8012ed0:	4b3e      	ldr	r3, [pc, #248]	@ (8012fcc <tcp_create_segment+0x124>)
 8012ed2:	22a4      	movs	r2, #164	@ 0xa4
 8012ed4:	4940      	ldr	r1, [pc, #256]	@ (8012fd8 <tcp_create_segment+0x130>)
 8012ed6:	483f      	ldr	r0, [pc, #252]	@ (8012fd4 <tcp_create_segment+0x12c>)
 8012ed8:	f012 faf6 	bl	80254c8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012edc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012ee0:	009b      	lsls	r3, r3, #2
 8012ee2:	b2db      	uxtb	r3, r3
 8012ee4:	f003 0304 	and.w	r3, r3, #4
 8012ee8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012eea:	2003      	movs	r0, #3
 8012eec:	f7fa fccc 	bl	800d888 <memp_malloc>
 8012ef0:	6138      	str	r0, [r7, #16]
 8012ef2:	693b      	ldr	r3, [r7, #16]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d104      	bne.n	8012f02 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012ef8:	68b8      	ldr	r0, [r7, #8]
 8012efa:	f7fb fc49 	bl	800e790 <pbuf_free>
    return NULL;
 8012efe:	2300      	movs	r3, #0
 8012f00:	e060      	b.n	8012fc4 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8012f02:	693b      	ldr	r3, [r7, #16]
 8012f04:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012f08:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012f0a:	693b      	ldr	r3, [r7, #16]
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012f10:	693b      	ldr	r3, [r7, #16]
 8012f12:	68ba      	ldr	r2, [r7, #8]
 8012f14:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012f16:	68bb      	ldr	r3, [r7, #8]
 8012f18:	891a      	ldrh	r2, [r3, #8]
 8012f1a:	7dfb      	ldrb	r3, [r7, #23]
 8012f1c:	b29b      	uxth	r3, r3
 8012f1e:	429a      	cmp	r2, r3
 8012f20:	d205      	bcs.n	8012f2e <tcp_create_segment+0x86>
 8012f22:	4b2a      	ldr	r3, [pc, #168]	@ (8012fcc <tcp_create_segment+0x124>)
 8012f24:	22b0      	movs	r2, #176	@ 0xb0
 8012f26:	492d      	ldr	r1, [pc, #180]	@ (8012fdc <tcp_create_segment+0x134>)
 8012f28:	482a      	ldr	r0, [pc, #168]	@ (8012fd4 <tcp_create_segment+0x12c>)
 8012f2a:	f012 facd 	bl	80254c8 <iprintf>
  seg->len = p->tot_len - optlen;
 8012f2e:	68bb      	ldr	r3, [r7, #8]
 8012f30:	891a      	ldrh	r2, [r3, #8]
 8012f32:	7dfb      	ldrb	r3, [r7, #23]
 8012f34:	b29b      	uxth	r3, r3
 8012f36:	1ad3      	subs	r3, r2, r3
 8012f38:	b29a      	uxth	r2, r3
 8012f3a:	693b      	ldr	r3, [r7, #16]
 8012f3c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012f3e:	2114      	movs	r1, #20
 8012f40:	68b8      	ldr	r0, [r7, #8]
 8012f42:	f7fb fb5d 	bl	800e600 <pbuf_add_header>
 8012f46:	4603      	mov	r3, r0
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d004      	beq.n	8012f56 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012f4c:	6938      	ldr	r0, [r7, #16]
 8012f4e:	f7fd f804 	bl	800ff5a <tcp_seg_free>
    return NULL;
 8012f52:	2300      	movs	r3, #0
 8012f54:	e036      	b.n	8012fc4 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012f56:	693b      	ldr	r3, [r7, #16]
 8012f58:	685b      	ldr	r3, [r3, #4]
 8012f5a:	685a      	ldr	r2, [r3, #4]
 8012f5c:	693b      	ldr	r3, [r7, #16]
 8012f5e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	8ada      	ldrh	r2, [r3, #22]
 8012f64:	693b      	ldr	r3, [r7, #16]
 8012f66:	68dc      	ldr	r4, [r3, #12]
 8012f68:	4610      	mov	r0, r2
 8012f6a:	f7f9 ffb9 	bl	800cee0 <lwip_htons>
 8012f6e:	4603      	mov	r3, r0
 8012f70:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	8b1a      	ldrh	r2, [r3, #24]
 8012f76:	693b      	ldr	r3, [r7, #16]
 8012f78:	68dc      	ldr	r4, [r3, #12]
 8012f7a:	4610      	mov	r0, r2
 8012f7c:	f7f9 ffb0 	bl	800cee0 <lwip_htons>
 8012f80:	4603      	mov	r3, r0
 8012f82:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012f84:	693b      	ldr	r3, [r7, #16]
 8012f86:	68dc      	ldr	r4, [r3, #12]
 8012f88:	6838      	ldr	r0, [r7, #0]
 8012f8a:	f7f9 ffbf 	bl	800cf0c <lwip_htonl>
 8012f8e:	4603      	mov	r3, r0
 8012f90:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012f92:	7dfb      	ldrb	r3, [r7, #23]
 8012f94:	089b      	lsrs	r3, r3, #2
 8012f96:	b2db      	uxtb	r3, r3
 8012f98:	3305      	adds	r3, #5
 8012f9a:	b29b      	uxth	r3, r3
 8012f9c:	031b      	lsls	r3, r3, #12
 8012f9e:	b29a      	uxth	r2, r3
 8012fa0:	79fb      	ldrb	r3, [r7, #7]
 8012fa2:	b29b      	uxth	r3, r3
 8012fa4:	4313      	orrs	r3, r2
 8012fa6:	b29a      	uxth	r2, r3
 8012fa8:	693b      	ldr	r3, [r7, #16]
 8012faa:	68dc      	ldr	r4, [r3, #12]
 8012fac:	4610      	mov	r0, r2
 8012fae:	f7f9 ff97 	bl	800cee0 <lwip_htons>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012fb6:	693b      	ldr	r3, [r7, #16]
 8012fb8:	68db      	ldr	r3, [r3, #12]
 8012fba:	2200      	movs	r2, #0
 8012fbc:	749a      	strb	r2, [r3, #18]
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	74da      	strb	r2, [r3, #19]
  return seg;
 8012fc2:	693b      	ldr	r3, [r7, #16]
}
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	371c      	adds	r7, #28
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	bd90      	pop	{r4, r7, pc}
 8012fcc:	08028db8 	.word	0x08028db8
 8012fd0:	08028dec 	.word	0x08028dec
 8012fd4:	08028e0c 	.word	0x08028e0c
 8012fd8:	08028e34 	.word	0x08028e34
 8012fdc:	08028e58 	.word	0x08028e58

08012fe0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b086      	sub	sp, #24
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	607b      	str	r3, [r7, #4]
 8012fe8:	4603      	mov	r3, r0
 8012fea:	73fb      	strb	r3, [r7, #15]
 8012fec:	460b      	mov	r3, r1
 8012fee:	81bb      	strh	r3, [r7, #12]
 8012ff0:	4613      	mov	r3, r2
 8012ff2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012ff4:	89bb      	ldrh	r3, [r7, #12]
 8012ff6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d105      	bne.n	801300a <tcp_pbuf_prealloc+0x2a>
 8012ffe:	4b30      	ldr	r3, [pc, #192]	@ (80130c0 <tcp_pbuf_prealloc+0xe0>)
 8013000:	22e8      	movs	r2, #232	@ 0xe8
 8013002:	4930      	ldr	r1, [pc, #192]	@ (80130c4 <tcp_pbuf_prealloc+0xe4>)
 8013004:	4830      	ldr	r0, [pc, #192]	@ (80130c8 <tcp_pbuf_prealloc+0xe8>)
 8013006:	f012 fa5f 	bl	80254c8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801300a:	6a3b      	ldr	r3, [r7, #32]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d105      	bne.n	801301c <tcp_pbuf_prealloc+0x3c>
 8013010:	4b2b      	ldr	r3, [pc, #172]	@ (80130c0 <tcp_pbuf_prealloc+0xe0>)
 8013012:	22e9      	movs	r2, #233	@ 0xe9
 8013014:	492d      	ldr	r1, [pc, #180]	@ (80130cc <tcp_pbuf_prealloc+0xec>)
 8013016:	482c      	ldr	r0, [pc, #176]	@ (80130c8 <tcp_pbuf_prealloc+0xe8>)
 8013018:	f012 fa56 	bl	80254c8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801301c:	89ba      	ldrh	r2, [r7, #12]
 801301e:	897b      	ldrh	r3, [r7, #10]
 8013020:	429a      	cmp	r2, r3
 8013022:	d221      	bcs.n	8013068 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013024:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013028:	f003 0302 	and.w	r3, r3, #2
 801302c:	2b00      	cmp	r3, #0
 801302e:	d111      	bne.n	8013054 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8013030:	6a3b      	ldr	r3, [r7, #32]
 8013032:	8b5b      	ldrh	r3, [r3, #26]
 8013034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013038:	2b00      	cmp	r3, #0
 801303a:	d115      	bne.n	8013068 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801303c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013040:	2b00      	cmp	r3, #0
 8013042:	d007      	beq.n	8013054 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8013044:	6a3b      	ldr	r3, [r7, #32]
 8013046:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8013048:	2b00      	cmp	r3, #0
 801304a:	d103      	bne.n	8013054 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801304c:	6a3b      	ldr	r3, [r7, #32]
 801304e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8013050:	2b00      	cmp	r3, #0
 8013052:	d009      	beq.n	8013068 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8013054:	89bb      	ldrh	r3, [r7, #12]
 8013056:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 801305a:	f023 0203 	bic.w	r2, r3, #3
 801305e:	897b      	ldrh	r3, [r7, #10]
 8013060:	4293      	cmp	r3, r2
 8013062:	bf28      	it	cs
 8013064:	4613      	movcs	r3, r2
 8013066:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8013068:	8af9      	ldrh	r1, [r7, #22]
 801306a:	7bfb      	ldrb	r3, [r7, #15]
 801306c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013070:	4618      	mov	r0, r3
 8013072:	f7fb f877 	bl	800e164 <pbuf_alloc>
 8013076:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013078:	693b      	ldr	r3, [r7, #16]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d101      	bne.n	8013082 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801307e:	2300      	movs	r3, #0
 8013080:	e019      	b.n	80130b6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8013082:	693b      	ldr	r3, [r7, #16]
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d006      	beq.n	8013098 <tcp_pbuf_prealloc+0xb8>
 801308a:	4b0d      	ldr	r3, [pc, #52]	@ (80130c0 <tcp_pbuf_prealloc+0xe0>)
 801308c:	f240 120b 	movw	r2, #267	@ 0x10b
 8013090:	490f      	ldr	r1, [pc, #60]	@ (80130d0 <tcp_pbuf_prealloc+0xf0>)
 8013092:	480d      	ldr	r0, [pc, #52]	@ (80130c8 <tcp_pbuf_prealloc+0xe8>)
 8013094:	f012 fa18 	bl	80254c8 <iprintf>
  *oversize = p->len - length;
 8013098:	693b      	ldr	r3, [r7, #16]
 801309a:	895a      	ldrh	r2, [r3, #10]
 801309c:	89bb      	ldrh	r3, [r7, #12]
 801309e:	1ad3      	subs	r3, r2, r3
 80130a0:	b29a      	uxth	r2, r3
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80130a6:	693b      	ldr	r3, [r7, #16]
 80130a8:	89ba      	ldrh	r2, [r7, #12]
 80130aa:	811a      	strh	r2, [r3, #8]
 80130ac:	693b      	ldr	r3, [r7, #16]
 80130ae:	891a      	ldrh	r2, [r3, #8]
 80130b0:	693b      	ldr	r3, [r7, #16]
 80130b2:	815a      	strh	r2, [r3, #10]
  return p;
 80130b4:	693b      	ldr	r3, [r7, #16]
}
 80130b6:	4618      	mov	r0, r3
 80130b8:	3718      	adds	r7, #24
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bd80      	pop	{r7, pc}
 80130be:	bf00      	nop
 80130c0:	08028db8 	.word	0x08028db8
 80130c4:	08028e70 	.word	0x08028e70
 80130c8:	08028e0c 	.word	0x08028e0c
 80130cc:	08028e94 	.word	0x08028e94
 80130d0:	08028eb4 	.word	0x08028eb4

080130d4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80130d4:	b580      	push	{r7, lr}
 80130d6:	b082      	sub	sp, #8
 80130d8:	af00      	add	r7, sp, #0
 80130da:	6078      	str	r0, [r7, #4]
 80130dc:	460b      	mov	r3, r1
 80130de:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d106      	bne.n	80130f4 <tcp_write_checks+0x20>
 80130e6:	4b33      	ldr	r3, [pc, #204]	@ (80131b4 <tcp_write_checks+0xe0>)
 80130e8:	f240 1233 	movw	r2, #307	@ 0x133
 80130ec:	4932      	ldr	r1, [pc, #200]	@ (80131b8 <tcp_write_checks+0xe4>)
 80130ee:	4833      	ldr	r0, [pc, #204]	@ (80131bc <tcp_write_checks+0xe8>)
 80130f0:	f012 f9ea 	bl	80254c8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	7d1b      	ldrb	r3, [r3, #20]
 80130f8:	2b04      	cmp	r3, #4
 80130fa:	d00e      	beq.n	801311a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8013100:	2b07      	cmp	r3, #7
 8013102:	d00a      	beq.n	801311a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013108:	2b02      	cmp	r3, #2
 801310a:	d006      	beq.n	801311a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8013110:	2b03      	cmp	r3, #3
 8013112:	d002      	beq.n	801311a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013114:	f06f 030a 	mvn.w	r3, #10
 8013118:	e048      	b.n	80131ac <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801311a:	887b      	ldrh	r3, [r7, #2]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d101      	bne.n	8013124 <tcp_write_checks+0x50>
    return ERR_OK;
 8013120:	2300      	movs	r3, #0
 8013122:	e043      	b.n	80131ac <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801312a:	887a      	ldrh	r2, [r7, #2]
 801312c:	429a      	cmp	r2, r3
 801312e:	d909      	bls.n	8013144 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	8b5b      	ldrh	r3, [r3, #26]
 8013134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013138:	b29a      	uxth	r2, r3
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801313e:	f04f 33ff 	mov.w	r3, #4294967295
 8013142:	e033      	b.n	80131ac <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801314a:	2b08      	cmp	r3, #8
 801314c:	d909      	bls.n	8013162 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	8b5b      	ldrh	r3, [r3, #26]
 8013152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013156:	b29a      	uxth	r2, r3
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801315c:	f04f 33ff 	mov.w	r3, #4294967295
 8013160:	e024      	b.n	80131ac <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013168:	2b00      	cmp	r3, #0
 801316a:	d00f      	beq.n	801318c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013170:	2b00      	cmp	r3, #0
 8013172:	d11a      	bne.n	80131aa <tcp_write_checks+0xd6>
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013178:	2b00      	cmp	r3, #0
 801317a:	d116      	bne.n	80131aa <tcp_write_checks+0xd6>
 801317c:	4b0d      	ldr	r3, [pc, #52]	@ (80131b4 <tcp_write_checks+0xe0>)
 801317e:	f240 1255 	movw	r2, #341	@ 0x155
 8013182:	490f      	ldr	r1, [pc, #60]	@ (80131c0 <tcp_write_checks+0xec>)
 8013184:	480d      	ldr	r0, [pc, #52]	@ (80131bc <tcp_write_checks+0xe8>)
 8013186:	f012 f99f 	bl	80254c8 <iprintf>
 801318a:	e00e      	b.n	80131aa <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013190:	2b00      	cmp	r3, #0
 8013192:	d103      	bne.n	801319c <tcp_write_checks+0xc8>
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013198:	2b00      	cmp	r3, #0
 801319a:	d006      	beq.n	80131aa <tcp_write_checks+0xd6>
 801319c:	4b05      	ldr	r3, [pc, #20]	@ (80131b4 <tcp_write_checks+0xe0>)
 801319e:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 80131a2:	4908      	ldr	r1, [pc, #32]	@ (80131c4 <tcp_write_checks+0xf0>)
 80131a4:	4805      	ldr	r0, [pc, #20]	@ (80131bc <tcp_write_checks+0xe8>)
 80131a6:	f012 f98f 	bl	80254c8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80131aa:	2300      	movs	r3, #0
}
 80131ac:	4618      	mov	r0, r3
 80131ae:	3708      	adds	r7, #8
 80131b0:	46bd      	mov	sp, r7
 80131b2:	bd80      	pop	{r7, pc}
 80131b4:	08028db8 	.word	0x08028db8
 80131b8:	08028ec8 	.word	0x08028ec8
 80131bc:	08028e0c 	.word	0x08028e0c
 80131c0:	08028ee8 	.word	0x08028ee8
 80131c4:	08028f24 	.word	0x08028f24

080131c8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80131c8:	b590      	push	{r4, r7, lr}
 80131ca:	b09b      	sub	sp, #108	@ 0x6c
 80131cc:	af04      	add	r7, sp, #16
 80131ce:	60f8      	str	r0, [r7, #12]
 80131d0:	60b9      	str	r1, [r7, #8]
 80131d2:	4611      	mov	r1, r2
 80131d4:	461a      	mov	r2, r3
 80131d6:	460b      	mov	r3, r1
 80131d8:	80fb      	strh	r3, [r7, #6]
 80131da:	4613      	mov	r3, r2
 80131dc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80131de:	2300      	movs	r3, #0
 80131e0:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80131e2:	2300      	movs	r3, #0
 80131e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80131e6:	2300      	movs	r3, #0
 80131e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80131ea:	2300      	movs	r3, #0
 80131ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80131ee:	2300      	movs	r3, #0
 80131f0:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80131f2:	2300      	movs	r3, #0
 80131f4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80131f8:	2300      	movs	r3, #0
 80131fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80131fe:	2300      	movs	r3, #0
 8013200:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8013202:	2300      	movs	r3, #0
 8013204:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013206:	2300      	movs	r3, #0
 8013208:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d109      	bne.n	8013224 <tcp_write+0x5c>
 8013210:	4ba4      	ldr	r3, [pc, #656]	@ (80134a4 <tcp_write+0x2dc>)
 8013212:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8013216:	49a4      	ldr	r1, [pc, #656]	@ (80134a8 <tcp_write+0x2e0>)
 8013218:	48a4      	ldr	r0, [pc, #656]	@ (80134ac <tcp_write+0x2e4>)
 801321a:	f012 f955 	bl	80254c8 <iprintf>
 801321e:	f06f 030f 	mvn.w	r3, #15
 8013222:	e32a      	b.n	801387a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801322a:	085b      	lsrs	r3, r3, #1
 801322c:	b29a      	uxth	r2, r3
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013232:	4293      	cmp	r3, r2
 8013234:	bf28      	it	cs
 8013236:	4613      	movcs	r3, r2
 8013238:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801323a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801323c:	2b00      	cmp	r3, #0
 801323e:	d102      	bne.n	8013246 <tcp_write+0x7e>
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013244:	e000      	b.n	8013248 <tcp_write+0x80>
 8013246:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013248:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801324a:	68bb      	ldr	r3, [r7, #8]
 801324c:	2b00      	cmp	r3, #0
 801324e:	d109      	bne.n	8013264 <tcp_write+0x9c>
 8013250:	4b94      	ldr	r3, [pc, #592]	@ (80134a4 <tcp_write+0x2dc>)
 8013252:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8013256:	4996      	ldr	r1, [pc, #600]	@ (80134b0 <tcp_write+0x2e8>)
 8013258:	4894      	ldr	r0, [pc, #592]	@ (80134ac <tcp_write+0x2e4>)
 801325a:	f012 f935 	bl	80254c8 <iprintf>
 801325e:	f06f 030f 	mvn.w	r3, #15
 8013262:	e30a      	b.n	801387a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8013264:	88fb      	ldrh	r3, [r7, #6]
 8013266:	4619      	mov	r1, r3
 8013268:	68f8      	ldr	r0, [r7, #12]
 801326a:	f7ff ff33 	bl	80130d4 <tcp_write_checks>
 801326e:	4603      	mov	r3, r0
 8013270:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8013274:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8013278:	2b00      	cmp	r3, #0
 801327a:	d002      	beq.n	8013282 <tcp_write+0xba>
    return err;
 801327c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8013280:	e2fb      	b.n	801387a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013288:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801328c:	2300      	movs	r3, #0
 801328e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013296:	2b00      	cmp	r3, #0
 8013298:	f000 80f6 	beq.w	8013488 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80132a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80132a2:	e002      	b.n	80132aa <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80132a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80132aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d1f8      	bne.n	80132a4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80132b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80132b4:	7a9b      	ldrb	r3, [r3, #10]
 80132b6:	009b      	lsls	r3, r3, #2
 80132b8:	b29b      	uxth	r3, r3
 80132ba:	f003 0304 	and.w	r3, r3, #4
 80132be:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80132c0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80132c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80132c4:	891b      	ldrh	r3, [r3, #8]
 80132c6:	4619      	mov	r1, r3
 80132c8:	8c3b      	ldrh	r3, [r7, #32]
 80132ca:	440b      	add	r3, r1
 80132cc:	429a      	cmp	r2, r3
 80132ce:	da06      	bge.n	80132de <tcp_write+0x116>
 80132d0:	4b74      	ldr	r3, [pc, #464]	@ (80134a4 <tcp_write+0x2dc>)
 80132d2:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80132d6:	4977      	ldr	r1, [pc, #476]	@ (80134b4 <tcp_write+0x2ec>)
 80132d8:	4874      	ldr	r0, [pc, #464]	@ (80134ac <tcp_write+0x2e4>)
 80132da:	f012 f8f5 	bl	80254c8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80132de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80132e0:	891a      	ldrh	r2, [r3, #8]
 80132e2:	8c3b      	ldrh	r3, [r7, #32]
 80132e4:	4413      	add	r3, r2
 80132e6:	b29b      	uxth	r3, r3
 80132e8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80132ea:	1ad3      	subs	r3, r2, r3
 80132ec:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80132f4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80132f6:	8a7b      	ldrh	r3, [r7, #18]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d026      	beq.n	801334a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80132fc:	8a7b      	ldrh	r3, [r7, #18]
 80132fe:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013300:	429a      	cmp	r2, r3
 8013302:	d206      	bcs.n	8013312 <tcp_write+0x14a>
 8013304:	4b67      	ldr	r3, [pc, #412]	@ (80134a4 <tcp_write+0x2dc>)
 8013306:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 801330a:	496b      	ldr	r1, [pc, #428]	@ (80134b8 <tcp_write+0x2f0>)
 801330c:	4867      	ldr	r0, [pc, #412]	@ (80134ac <tcp_write+0x2e4>)
 801330e:	f012 f8db 	bl	80254c8 <iprintf>
      seg = last_unsent;
 8013312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013314:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013316:	8a7b      	ldrh	r3, [r7, #18]
 8013318:	88fa      	ldrh	r2, [r7, #6]
 801331a:	4293      	cmp	r3, r2
 801331c:	bf28      	it	cs
 801331e:	4613      	movcs	r3, r2
 8013320:	b29b      	uxth	r3, r3
 8013322:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013324:	4293      	cmp	r3, r2
 8013326:	bf28      	it	cs
 8013328:	4613      	movcs	r3, r2
 801332a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 801332c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013330:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013332:	4413      	add	r3, r2
 8013334:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8013338:	8a7a      	ldrh	r2, [r7, #18]
 801333a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801333c:	1ad3      	subs	r3, r2, r3
 801333e:	b29b      	uxth	r3, r3
 8013340:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8013342:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013344:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013346:	1ad3      	subs	r3, r2, r3
 8013348:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801334a:	8a7b      	ldrh	r3, [r7, #18]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d00b      	beq.n	8013368 <tcp_write+0x1a0>
 8013350:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013354:	88fb      	ldrh	r3, [r7, #6]
 8013356:	429a      	cmp	r2, r3
 8013358:	d006      	beq.n	8013368 <tcp_write+0x1a0>
 801335a:	4b52      	ldr	r3, [pc, #328]	@ (80134a4 <tcp_write+0x2dc>)
 801335c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013360:	4956      	ldr	r1, [pc, #344]	@ (80134bc <tcp_write+0x2f4>)
 8013362:	4852      	ldr	r0, [pc, #328]	@ (80134ac <tcp_write+0x2e4>)
 8013364:	f012 f8b0 	bl	80254c8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8013368:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801336c:	88fb      	ldrh	r3, [r7, #6]
 801336e:	429a      	cmp	r2, r3
 8013370:	f080 8167 	bcs.w	8013642 <tcp_write+0x47a>
 8013374:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013376:	2b00      	cmp	r3, #0
 8013378:	f000 8163 	beq.w	8013642 <tcp_write+0x47a>
 801337c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801337e:	891b      	ldrh	r3, [r3, #8]
 8013380:	2b00      	cmp	r3, #0
 8013382:	f000 815e 	beq.w	8013642 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8013386:	88fa      	ldrh	r2, [r7, #6]
 8013388:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801338c:	1ad2      	subs	r2, r2, r3
 801338e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013390:	4293      	cmp	r3, r2
 8013392:	bfa8      	it	ge
 8013394:	4613      	movge	r3, r2
 8013396:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8013398:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801339a:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801339c:	797b      	ldrb	r3, [r7, #5]
 801339e:	f003 0301 	and.w	r3, r3, #1
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d027      	beq.n	80133f6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80133a6:	f107 0012 	add.w	r0, r7, #18
 80133aa:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80133ac:	8bf9      	ldrh	r1, [r7, #30]
 80133ae:	2301      	movs	r3, #1
 80133b0:	9302      	str	r3, [sp, #8]
 80133b2:	797b      	ldrb	r3, [r7, #5]
 80133b4:	9301      	str	r3, [sp, #4]
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	9300      	str	r3, [sp, #0]
 80133ba:	4603      	mov	r3, r0
 80133bc:	2000      	movs	r0, #0
 80133be:	f7ff fe0f 	bl	8012fe0 <tcp_pbuf_prealloc>
 80133c2:	6578      	str	r0, [r7, #84]	@ 0x54
 80133c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	f000 8225 	beq.w	8013816 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80133cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133ce:	6858      	ldr	r0, [r3, #4]
 80133d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80133d4:	68ba      	ldr	r2, [r7, #8]
 80133d6:	4413      	add	r3, r2
 80133d8:	8bfa      	ldrh	r2, [r7, #30]
 80133da:	4619      	mov	r1, r3
 80133dc:	f012 fb21 	bl	8025a22 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80133e0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80133e2:	f7fb fa63 	bl	800e8ac <pbuf_clen>
 80133e6:	4603      	mov	r3, r0
 80133e8:	461a      	mov	r2, r3
 80133ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80133ee:	4413      	add	r3, r2
 80133f0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80133f4:	e041      	b.n	801347a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80133f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80133f8:	685b      	ldr	r3, [r3, #4]
 80133fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80133fc:	e002      	b.n	8013404 <tcp_write+0x23c>
 80133fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	637b      	str	r3, [r7, #52]	@ 0x34
 8013404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d1f8      	bne.n	80133fe <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801340c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801340e:	7b1b      	ldrb	r3, [r3, #12]
 8013410:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8013414:	2b00      	cmp	r3, #0
 8013416:	d115      	bne.n	8013444 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801341a:	685b      	ldr	r3, [r3, #4]
 801341c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801341e:	8952      	ldrh	r2, [r2, #10]
 8013420:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013422:	68ba      	ldr	r2, [r7, #8]
 8013424:	429a      	cmp	r2, r3
 8013426:	d10d      	bne.n	8013444 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8013428:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801342c:	2b00      	cmp	r3, #0
 801342e:	d006      	beq.n	801343e <tcp_write+0x276>
 8013430:	4b1c      	ldr	r3, [pc, #112]	@ (80134a4 <tcp_write+0x2dc>)
 8013432:	f240 2231 	movw	r2, #561	@ 0x231
 8013436:	4922      	ldr	r1, [pc, #136]	@ (80134c0 <tcp_write+0x2f8>)
 8013438:	481c      	ldr	r0, [pc, #112]	@ (80134ac <tcp_write+0x2e4>)
 801343a:	f012 f845 	bl	80254c8 <iprintf>
          extendlen = seglen;
 801343e:	8bfb      	ldrh	r3, [r7, #30]
 8013440:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8013442:	e01a      	b.n	801347a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8013444:	8bfb      	ldrh	r3, [r7, #30]
 8013446:	2201      	movs	r2, #1
 8013448:	4619      	mov	r1, r3
 801344a:	2000      	movs	r0, #0
 801344c:	f7fa fe8a 	bl	800e164 <pbuf_alloc>
 8013450:	6578      	str	r0, [r7, #84]	@ 0x54
 8013452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013454:	2b00      	cmp	r3, #0
 8013456:	f000 81e0 	beq.w	801381a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801345a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801345e:	68ba      	ldr	r2, [r7, #8]
 8013460:	441a      	add	r2, r3
 8013462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013464:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8013466:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8013468:	f7fb fa20 	bl	800e8ac <pbuf_clen>
 801346c:	4603      	mov	r3, r0
 801346e:	461a      	mov	r2, r3
 8013470:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013474:	4413      	add	r3, r2
 8013476:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801347a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801347e:	8bfb      	ldrh	r3, [r7, #30]
 8013480:	4413      	add	r3, r2
 8013482:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8013486:	e0dc      	b.n	8013642 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801348e:	2b00      	cmp	r3, #0
 8013490:	f000 80d7 	beq.w	8013642 <tcp_write+0x47a>
 8013494:	4b03      	ldr	r3, [pc, #12]	@ (80134a4 <tcp_write+0x2dc>)
 8013496:	f240 224a 	movw	r2, #586	@ 0x24a
 801349a:	490a      	ldr	r1, [pc, #40]	@ (80134c4 <tcp_write+0x2fc>)
 801349c:	4803      	ldr	r0, [pc, #12]	@ (80134ac <tcp_write+0x2e4>)
 801349e:	f012 f813 	bl	80254c8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80134a2:	e0ce      	b.n	8013642 <tcp_write+0x47a>
 80134a4:	08028db8 	.word	0x08028db8
 80134a8:	08028f58 	.word	0x08028f58
 80134ac:	08028e0c 	.word	0x08028e0c
 80134b0:	08028f70 	.word	0x08028f70
 80134b4:	08028fa4 	.word	0x08028fa4
 80134b8:	08028fbc 	.word	0x08028fbc
 80134bc:	08028fdc 	.word	0x08028fdc
 80134c0:	08028ffc 	.word	0x08028ffc
 80134c4:	08029028 	.word	0x08029028
    struct pbuf *p;
    u16_t left = len - pos;
 80134c8:	88fa      	ldrh	r2, [r7, #6]
 80134ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80134ce:	1ad3      	subs	r3, r2, r3
 80134d0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80134d2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80134d6:	b29b      	uxth	r3, r3
 80134d8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80134da:	1ad3      	subs	r3, r2, r3
 80134dc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80134de:	8b7a      	ldrh	r2, [r7, #26]
 80134e0:	8bbb      	ldrh	r3, [r7, #28]
 80134e2:	4293      	cmp	r3, r2
 80134e4:	bf28      	it	cs
 80134e6:	4613      	movcs	r3, r2
 80134e8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80134ea:	797b      	ldrb	r3, [r7, #5]
 80134ec:	f003 0301 	and.w	r3, r3, #1
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d036      	beq.n	8013562 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80134f4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80134f8:	b29a      	uxth	r2, r3
 80134fa:	8b3b      	ldrh	r3, [r7, #24]
 80134fc:	4413      	add	r3, r2
 80134fe:	b299      	uxth	r1, r3
 8013500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013502:	2b00      	cmp	r3, #0
 8013504:	bf0c      	ite	eq
 8013506:	2301      	moveq	r3, #1
 8013508:	2300      	movne	r3, #0
 801350a:	b2db      	uxtb	r3, r3
 801350c:	f107 0012 	add.w	r0, r7, #18
 8013510:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013512:	9302      	str	r3, [sp, #8]
 8013514:	797b      	ldrb	r3, [r7, #5]
 8013516:	9301      	str	r3, [sp, #4]
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	9300      	str	r3, [sp, #0]
 801351c:	4603      	mov	r3, r0
 801351e:	2036      	movs	r0, #54	@ 0x36
 8013520:	f7ff fd5e 	bl	8012fe0 <tcp_pbuf_prealloc>
 8013524:	6338      	str	r0, [r7, #48]	@ 0x30
 8013526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013528:	2b00      	cmp	r3, #0
 801352a:	f000 8178 	beq.w	801381e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801352e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013530:	895b      	ldrh	r3, [r3, #10]
 8013532:	8b3a      	ldrh	r2, [r7, #24]
 8013534:	429a      	cmp	r2, r3
 8013536:	d906      	bls.n	8013546 <tcp_write+0x37e>
 8013538:	4b8c      	ldr	r3, [pc, #560]	@ (801376c <tcp_write+0x5a4>)
 801353a:	f240 2266 	movw	r2, #614	@ 0x266
 801353e:	498c      	ldr	r1, [pc, #560]	@ (8013770 <tcp_write+0x5a8>)
 8013540:	488c      	ldr	r0, [pc, #560]	@ (8013774 <tcp_write+0x5ac>)
 8013542:	f011 ffc1 	bl	80254c8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8013546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013548:	685a      	ldr	r2, [r3, #4]
 801354a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801354e:	18d0      	adds	r0, r2, r3
 8013550:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013554:	68ba      	ldr	r2, [r7, #8]
 8013556:	4413      	add	r3, r2
 8013558:	8b3a      	ldrh	r2, [r7, #24]
 801355a:	4619      	mov	r1, r3
 801355c:	f012 fa61 	bl	8025a22 <memcpy>
 8013560:	e02f      	b.n	80135c2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8013562:	8a7b      	ldrh	r3, [r7, #18]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d006      	beq.n	8013576 <tcp_write+0x3ae>
 8013568:	4b80      	ldr	r3, [pc, #512]	@ (801376c <tcp_write+0x5a4>)
 801356a:	f240 2271 	movw	r2, #625	@ 0x271
 801356e:	4982      	ldr	r1, [pc, #520]	@ (8013778 <tcp_write+0x5b0>)
 8013570:	4880      	ldr	r0, [pc, #512]	@ (8013774 <tcp_write+0x5ac>)
 8013572:	f011 ffa9 	bl	80254c8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8013576:	8b3b      	ldrh	r3, [r7, #24]
 8013578:	2201      	movs	r2, #1
 801357a:	4619      	mov	r1, r3
 801357c:	2036      	movs	r0, #54	@ 0x36
 801357e:	f7fa fdf1 	bl	800e164 <pbuf_alloc>
 8013582:	6178      	str	r0, [r7, #20]
 8013584:	697b      	ldr	r3, [r7, #20]
 8013586:	2b00      	cmp	r3, #0
 8013588:	f000 814b 	beq.w	8013822 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801358c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013590:	68ba      	ldr	r2, [r7, #8]
 8013592:	441a      	add	r2, r3
 8013594:	697b      	ldr	r3, [r7, #20]
 8013596:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013598:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801359c:	b29b      	uxth	r3, r3
 801359e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80135a2:	4619      	mov	r1, r3
 80135a4:	2036      	movs	r0, #54	@ 0x36
 80135a6:	f7fa fddd 	bl	800e164 <pbuf_alloc>
 80135aa:	6338      	str	r0, [r7, #48]	@ 0x30
 80135ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d103      	bne.n	80135ba <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80135b2:	6978      	ldr	r0, [r7, #20]
 80135b4:	f7fb f8ec 	bl	800e790 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80135b8:	e136      	b.n	8013828 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80135ba:	6979      	ldr	r1, [r7, #20]
 80135bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80135be:	f7fb f9b5 	bl	800e92c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80135c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80135c4:	f7fb f972 	bl	800e8ac <pbuf_clen>
 80135c8:	4603      	mov	r3, r0
 80135ca:	461a      	mov	r2, r3
 80135cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80135d0:	4413      	add	r3, r2
 80135d2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80135d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80135da:	2b09      	cmp	r3, #9
 80135dc:	d903      	bls.n	80135e6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80135de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80135e0:	f7fb f8d6 	bl	800e790 <pbuf_free>
      goto memerr;
 80135e4:	e120      	b.n	8013828 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80135ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80135ee:	441a      	add	r2, r3
 80135f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80135f4:	9300      	str	r3, [sp, #0]
 80135f6:	4613      	mov	r3, r2
 80135f8:	2200      	movs	r2, #0
 80135fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80135fc:	68f8      	ldr	r0, [r7, #12]
 80135fe:	f7ff fc53 	bl	8012ea8 <tcp_create_segment>
 8013602:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8013604:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013606:	2b00      	cmp	r3, #0
 8013608:	f000 810d 	beq.w	8013826 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801360c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801360e:	2b00      	cmp	r3, #0
 8013610:	d102      	bne.n	8013618 <tcp_write+0x450>
      queue = seg;
 8013612:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013614:	647b      	str	r3, [r7, #68]	@ 0x44
 8013616:	e00c      	b.n	8013632 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013618:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801361a:	2b00      	cmp	r3, #0
 801361c:	d106      	bne.n	801362c <tcp_write+0x464>
 801361e:	4b53      	ldr	r3, [pc, #332]	@ (801376c <tcp_write+0x5a4>)
 8013620:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8013624:	4955      	ldr	r1, [pc, #340]	@ (801377c <tcp_write+0x5b4>)
 8013626:	4853      	ldr	r0, [pc, #332]	@ (8013774 <tcp_write+0x5ac>)
 8013628:	f011 ff4e 	bl	80254c8 <iprintf>
      prev_seg->next = seg;
 801362c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801362e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013630:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8013632:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013634:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8013636:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801363a:	8b3b      	ldrh	r3, [r7, #24]
 801363c:	4413      	add	r3, r2
 801363e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8013642:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013646:	88fb      	ldrh	r3, [r7, #6]
 8013648:	429a      	cmp	r2, r3
 801364a:	f4ff af3d 	bcc.w	80134c8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801364e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013650:	2b00      	cmp	r3, #0
 8013652:	d02c      	beq.n	80136ae <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8013654:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013656:	685b      	ldr	r3, [r3, #4]
 8013658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801365a:	e01e      	b.n	801369a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801365c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801365e:	891a      	ldrh	r2, [r3, #8]
 8013660:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013662:	4413      	add	r3, r2
 8013664:	b29a      	uxth	r2, r3
 8013666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013668:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801366a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d110      	bne.n	8013694 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8013672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013674:	685b      	ldr	r3, [r3, #4]
 8013676:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013678:	8952      	ldrh	r2, [r2, #10]
 801367a:	4413      	add	r3, r2
 801367c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801367e:	68b9      	ldr	r1, [r7, #8]
 8013680:	4618      	mov	r0, r3
 8013682:	f012 f9ce 	bl	8025a22 <memcpy>
        p->len += oversize_used;
 8013686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013688:	895a      	ldrh	r2, [r3, #10]
 801368a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801368c:	4413      	add	r3, r2
 801368e:	b29a      	uxth	r2, r3
 8013690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013692:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8013694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801369a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801369c:	2b00      	cmp	r3, #0
 801369e:	d1dd      	bne.n	801365c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80136a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80136a2:	891a      	ldrh	r2, [r3, #8]
 80136a4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80136a6:	4413      	add	r3, r2
 80136a8:	b29a      	uxth	r2, r3
 80136aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80136ac:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80136ae:	8a7a      	ldrh	r2, [r7, #18]
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80136b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d018      	beq.n	80136ee <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80136bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d106      	bne.n	80136d0 <tcp_write+0x508>
 80136c2:	4b2a      	ldr	r3, [pc, #168]	@ (801376c <tcp_write+0x5a4>)
 80136c4:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 80136c8:	492d      	ldr	r1, [pc, #180]	@ (8013780 <tcp_write+0x5b8>)
 80136ca:	482a      	ldr	r0, [pc, #168]	@ (8013774 <tcp_write+0x5ac>)
 80136cc:	f011 fefc 	bl	80254c8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80136d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80136d2:	685b      	ldr	r3, [r3, #4]
 80136d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80136d6:	4618      	mov	r0, r3
 80136d8:	f7fb f928 	bl	800e92c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80136dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80136de:	891a      	ldrh	r2, [r3, #8]
 80136e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80136e2:	891b      	ldrh	r3, [r3, #8]
 80136e4:	4413      	add	r3, r2
 80136e6:	b29a      	uxth	r2, r3
 80136e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80136ea:	811a      	strh	r2, [r3, #8]
 80136ec:	e037      	b.n	801375e <tcp_write+0x596>
  } else if (extendlen > 0) {
 80136ee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d034      	beq.n	801375e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80136f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d003      	beq.n	8013702 <tcp_write+0x53a>
 80136fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80136fc:	685b      	ldr	r3, [r3, #4]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d106      	bne.n	8013710 <tcp_write+0x548>
 8013702:	4b1a      	ldr	r3, [pc, #104]	@ (801376c <tcp_write+0x5a4>)
 8013704:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8013708:	491e      	ldr	r1, [pc, #120]	@ (8013784 <tcp_write+0x5bc>)
 801370a:	481a      	ldr	r0, [pc, #104]	@ (8013774 <tcp_write+0x5ac>)
 801370c:	f011 fedc 	bl	80254c8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013710:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013712:	685b      	ldr	r3, [r3, #4]
 8013714:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013716:	e009      	b.n	801372c <tcp_write+0x564>
      p->tot_len += extendlen;
 8013718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801371a:	891a      	ldrh	r2, [r3, #8]
 801371c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801371e:	4413      	add	r3, r2
 8013720:	b29a      	uxth	r2, r3
 8013722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013724:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801372c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d1f1      	bne.n	8013718 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8013734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013736:	891a      	ldrh	r2, [r3, #8]
 8013738:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801373a:	4413      	add	r3, r2
 801373c:	b29a      	uxth	r2, r3
 801373e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013740:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8013742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013744:	895a      	ldrh	r2, [r3, #10]
 8013746:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013748:	4413      	add	r3, r2
 801374a:	b29a      	uxth	r2, r3
 801374c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801374e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8013750:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013752:	891a      	ldrh	r2, [r3, #8]
 8013754:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013756:	4413      	add	r3, r2
 8013758:	b29a      	uxth	r2, r3
 801375a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801375c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801375e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013760:	2b00      	cmp	r3, #0
 8013762:	d111      	bne.n	8013788 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013768:	66da      	str	r2, [r3, #108]	@ 0x6c
 801376a:	e010      	b.n	801378e <tcp_write+0x5c6>
 801376c:	08028db8 	.word	0x08028db8
 8013770:	08029058 	.word	0x08029058
 8013774:	08028e0c 	.word	0x08028e0c
 8013778:	08029098 	.word	0x08029098
 801377c:	080290a8 	.word	0x080290a8
 8013780:	080290bc 	.word	0x080290bc
 8013784:	080290f4 	.word	0x080290f4
  } else {
    last_unsent->next = queue;
 8013788:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801378a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801378c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8013792:	88fb      	ldrh	r3, [r7, #6]
 8013794:	441a      	add	r2, r3
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80137a0:	88fb      	ldrh	r3, [r7, #6]
 80137a2:	1ad3      	subs	r3, r2, r3
 80137a4:	b29a      	uxth	r2, r3
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80137b2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d00e      	beq.n	80137de <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d10a      	bne.n	80137de <tcp_write+0x616>
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d106      	bne.n	80137de <tcp_write+0x616>
 80137d0:	4b2c      	ldr	r3, [pc, #176]	@ (8013884 <tcp_write+0x6bc>)
 80137d2:	f240 3212 	movw	r2, #786	@ 0x312
 80137d6:	492c      	ldr	r1, [pc, #176]	@ (8013888 <tcp_write+0x6c0>)
 80137d8:	482c      	ldr	r0, [pc, #176]	@ (801388c <tcp_write+0x6c4>)
 80137da:	f011 fe75 	bl	80254c8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80137de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d016      	beq.n	8013812 <tcp_write+0x64a>
 80137e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80137e6:	68db      	ldr	r3, [r3, #12]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d012      	beq.n	8013812 <tcp_write+0x64a>
 80137ec:	797b      	ldrb	r3, [r7, #5]
 80137ee:	f003 0302 	and.w	r3, r3, #2
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d10d      	bne.n	8013812 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80137f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80137f8:	68db      	ldr	r3, [r3, #12]
 80137fa:	899b      	ldrh	r3, [r3, #12]
 80137fc:	b29c      	uxth	r4, r3
 80137fe:	2008      	movs	r0, #8
 8013800:	f7f9 fb6e 	bl	800cee0 <lwip_htons>
 8013804:	4603      	mov	r3, r0
 8013806:	461a      	mov	r2, r3
 8013808:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801380a:	68db      	ldr	r3, [r3, #12]
 801380c:	4322      	orrs	r2, r4
 801380e:	b292      	uxth	r2, r2
 8013810:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8013812:	2300      	movs	r3, #0
 8013814:	e031      	b.n	801387a <tcp_write+0x6b2>
          goto memerr;
 8013816:	bf00      	nop
 8013818:	e006      	b.n	8013828 <tcp_write+0x660>
            goto memerr;
 801381a:	bf00      	nop
 801381c:	e004      	b.n	8013828 <tcp_write+0x660>
        goto memerr;
 801381e:	bf00      	nop
 8013820:	e002      	b.n	8013828 <tcp_write+0x660>
        goto memerr;
 8013822:	bf00      	nop
 8013824:	e000      	b.n	8013828 <tcp_write+0x660>
      goto memerr;
 8013826:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	8b5b      	ldrh	r3, [r3, #26]
 801382c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013830:	b29a      	uxth	r2, r3
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8013836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013838:	2b00      	cmp	r3, #0
 801383a:	d002      	beq.n	8013842 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801383c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801383e:	f7fa ffa7 	bl	800e790 <pbuf_free>
  }
  if (queue != NULL) {
 8013842:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013844:	2b00      	cmp	r3, #0
 8013846:	d002      	beq.n	801384e <tcp_write+0x686>
    tcp_segs_free(queue);
 8013848:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801384a:	f7fc fb71 	bl	800ff30 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013854:	2b00      	cmp	r3, #0
 8013856:	d00e      	beq.n	8013876 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801385c:	2b00      	cmp	r3, #0
 801385e:	d10a      	bne.n	8013876 <tcp_write+0x6ae>
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013864:	2b00      	cmp	r3, #0
 8013866:	d106      	bne.n	8013876 <tcp_write+0x6ae>
 8013868:	4b06      	ldr	r3, [pc, #24]	@ (8013884 <tcp_write+0x6bc>)
 801386a:	f240 3227 	movw	r2, #807	@ 0x327
 801386e:	4906      	ldr	r1, [pc, #24]	@ (8013888 <tcp_write+0x6c0>)
 8013870:	4806      	ldr	r0, [pc, #24]	@ (801388c <tcp_write+0x6c4>)
 8013872:	f011 fe29 	bl	80254c8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013876:	f04f 33ff 	mov.w	r3, #4294967295
}
 801387a:	4618      	mov	r0, r3
 801387c:	375c      	adds	r7, #92	@ 0x5c
 801387e:	46bd      	mov	sp, r7
 8013880:	bd90      	pop	{r4, r7, pc}
 8013882:	bf00      	nop
 8013884:	08028db8 	.word	0x08028db8
 8013888:	0802912c 	.word	0x0802912c
 801388c:	08028e0c 	.word	0x08028e0c

08013890 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013890:	b590      	push	{r4, r7, lr}
 8013892:	b08b      	sub	sp, #44	@ 0x2c
 8013894:	af02      	add	r7, sp, #8
 8013896:	6078      	str	r0, [r7, #4]
 8013898:	460b      	mov	r3, r1
 801389a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801389c:	2300      	movs	r3, #0
 801389e:	61fb      	str	r3, [r7, #28]
 80138a0:	2300      	movs	r3, #0
 80138a2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80138a4:	2300      	movs	r3, #0
 80138a6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d106      	bne.n	80138bc <tcp_split_unsent_seg+0x2c>
 80138ae:	4b95      	ldr	r3, [pc, #596]	@ (8013b04 <tcp_split_unsent_seg+0x274>)
 80138b0:	f240 324b 	movw	r2, #843	@ 0x34b
 80138b4:	4994      	ldr	r1, [pc, #592]	@ (8013b08 <tcp_split_unsent_seg+0x278>)
 80138b6:	4895      	ldr	r0, [pc, #596]	@ (8013b0c <tcp_split_unsent_seg+0x27c>)
 80138b8:	f011 fe06 	bl	80254c8 <iprintf>

  useg = pcb->unsent;
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80138c0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80138c2:	697b      	ldr	r3, [r7, #20]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d102      	bne.n	80138ce <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80138c8:	f04f 33ff 	mov.w	r3, #4294967295
 80138cc:	e116      	b.n	8013afc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80138ce:	887b      	ldrh	r3, [r7, #2]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d109      	bne.n	80138e8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80138d4:	4b8b      	ldr	r3, [pc, #556]	@ (8013b04 <tcp_split_unsent_seg+0x274>)
 80138d6:	f240 3253 	movw	r2, #851	@ 0x353
 80138da:	498d      	ldr	r1, [pc, #564]	@ (8013b10 <tcp_split_unsent_seg+0x280>)
 80138dc:	488b      	ldr	r0, [pc, #556]	@ (8013b0c <tcp_split_unsent_seg+0x27c>)
 80138de:	f011 fdf3 	bl	80254c8 <iprintf>
    return ERR_VAL;
 80138e2:	f06f 0305 	mvn.w	r3, #5
 80138e6:	e109      	b.n	8013afc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80138e8:	697b      	ldr	r3, [r7, #20]
 80138ea:	891b      	ldrh	r3, [r3, #8]
 80138ec:	887a      	ldrh	r2, [r7, #2]
 80138ee:	429a      	cmp	r2, r3
 80138f0:	d301      	bcc.n	80138f6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80138f2:	2300      	movs	r3, #0
 80138f4:	e102      	b.n	8013afc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80138fa:	887a      	ldrh	r2, [r7, #2]
 80138fc:	429a      	cmp	r2, r3
 80138fe:	d906      	bls.n	801390e <tcp_split_unsent_seg+0x7e>
 8013900:	4b80      	ldr	r3, [pc, #512]	@ (8013b04 <tcp_split_unsent_seg+0x274>)
 8013902:	f240 325b 	movw	r2, #859	@ 0x35b
 8013906:	4983      	ldr	r1, [pc, #524]	@ (8013b14 <tcp_split_unsent_seg+0x284>)
 8013908:	4880      	ldr	r0, [pc, #512]	@ (8013b0c <tcp_split_unsent_seg+0x27c>)
 801390a:	f011 fddd 	bl	80254c8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801390e:	697b      	ldr	r3, [r7, #20]
 8013910:	891b      	ldrh	r3, [r3, #8]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d106      	bne.n	8013924 <tcp_split_unsent_seg+0x94>
 8013916:	4b7b      	ldr	r3, [pc, #492]	@ (8013b04 <tcp_split_unsent_seg+0x274>)
 8013918:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801391c:	497e      	ldr	r1, [pc, #504]	@ (8013b18 <tcp_split_unsent_seg+0x288>)
 801391e:	487b      	ldr	r0, [pc, #492]	@ (8013b0c <tcp_split_unsent_seg+0x27c>)
 8013920:	f011 fdd2 	bl	80254c8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013924:	697b      	ldr	r3, [r7, #20]
 8013926:	7a9b      	ldrb	r3, [r3, #10]
 8013928:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801392a:	7bfb      	ldrb	r3, [r7, #15]
 801392c:	009b      	lsls	r3, r3, #2
 801392e:	b2db      	uxtb	r3, r3
 8013930:	f003 0304 	and.w	r3, r3, #4
 8013934:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013936:	697b      	ldr	r3, [r7, #20]
 8013938:	891a      	ldrh	r2, [r3, #8]
 801393a:	887b      	ldrh	r3, [r7, #2]
 801393c:	1ad3      	subs	r3, r2, r3
 801393e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013940:	7bbb      	ldrb	r3, [r7, #14]
 8013942:	b29a      	uxth	r2, r3
 8013944:	89bb      	ldrh	r3, [r7, #12]
 8013946:	4413      	add	r3, r2
 8013948:	b29b      	uxth	r3, r3
 801394a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801394e:	4619      	mov	r1, r3
 8013950:	2036      	movs	r0, #54	@ 0x36
 8013952:	f7fa fc07 	bl	800e164 <pbuf_alloc>
 8013956:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013958:	693b      	ldr	r3, [r7, #16]
 801395a:	2b00      	cmp	r3, #0
 801395c:	f000 80b7 	beq.w	8013ace <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013960:	697b      	ldr	r3, [r7, #20]
 8013962:	685b      	ldr	r3, [r3, #4]
 8013964:	891a      	ldrh	r2, [r3, #8]
 8013966:	697b      	ldr	r3, [r7, #20]
 8013968:	891b      	ldrh	r3, [r3, #8]
 801396a:	1ad3      	subs	r3, r2, r3
 801396c:	b29a      	uxth	r2, r3
 801396e:	887b      	ldrh	r3, [r7, #2]
 8013970:	4413      	add	r3, r2
 8013972:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013974:	697b      	ldr	r3, [r7, #20]
 8013976:	6858      	ldr	r0, [r3, #4]
 8013978:	693b      	ldr	r3, [r7, #16]
 801397a:	685a      	ldr	r2, [r3, #4]
 801397c:	7bbb      	ldrb	r3, [r7, #14]
 801397e:	18d1      	adds	r1, r2, r3
 8013980:	897b      	ldrh	r3, [r7, #10]
 8013982:	89ba      	ldrh	r2, [r7, #12]
 8013984:	f7fb f90a 	bl	800eb9c <pbuf_copy_partial>
 8013988:	4603      	mov	r3, r0
 801398a:	461a      	mov	r2, r3
 801398c:	89bb      	ldrh	r3, [r7, #12]
 801398e:	4293      	cmp	r3, r2
 8013990:	f040 809f 	bne.w	8013ad2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013994:	697b      	ldr	r3, [r7, #20]
 8013996:	68db      	ldr	r3, [r3, #12]
 8013998:	899b      	ldrh	r3, [r3, #12]
 801399a:	b29b      	uxth	r3, r3
 801399c:	4618      	mov	r0, r3
 801399e:	f7f9 fa9f 	bl	800cee0 <lwip_htons>
 80139a2:	4603      	mov	r3, r0
 80139a4:	b2db      	uxtb	r3, r3
 80139a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80139aa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80139ac:	2300      	movs	r3, #0
 80139ae:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80139b0:	7efb      	ldrb	r3, [r7, #27]
 80139b2:	f003 0308 	and.w	r3, r3, #8
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d007      	beq.n	80139ca <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80139ba:	7efb      	ldrb	r3, [r7, #27]
 80139bc:	f023 0308 	bic.w	r3, r3, #8
 80139c0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80139c2:	7ebb      	ldrb	r3, [r7, #26]
 80139c4:	f043 0308 	orr.w	r3, r3, #8
 80139c8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80139ca:	7efb      	ldrb	r3, [r7, #27]
 80139cc:	f003 0301 	and.w	r3, r3, #1
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d007      	beq.n	80139e4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80139d4:	7efb      	ldrb	r3, [r7, #27]
 80139d6:	f023 0301 	bic.w	r3, r3, #1
 80139da:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80139dc:	7ebb      	ldrb	r3, [r7, #26]
 80139de:	f043 0301 	orr.w	r3, r3, #1
 80139e2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80139e4:	697b      	ldr	r3, [r7, #20]
 80139e6:	68db      	ldr	r3, [r3, #12]
 80139e8:	685b      	ldr	r3, [r3, #4]
 80139ea:	4618      	mov	r0, r3
 80139ec:	f7f9 fa8e 	bl	800cf0c <lwip_htonl>
 80139f0:	4602      	mov	r2, r0
 80139f2:	887b      	ldrh	r3, [r7, #2]
 80139f4:	18d1      	adds	r1, r2, r3
 80139f6:	7eba      	ldrb	r2, [r7, #26]
 80139f8:	7bfb      	ldrb	r3, [r7, #15]
 80139fa:	9300      	str	r3, [sp, #0]
 80139fc:	460b      	mov	r3, r1
 80139fe:	6939      	ldr	r1, [r7, #16]
 8013a00:	6878      	ldr	r0, [r7, #4]
 8013a02:	f7ff fa51 	bl	8012ea8 <tcp_create_segment>
 8013a06:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013a08:	69fb      	ldr	r3, [r7, #28]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d063      	beq.n	8013ad6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013a0e:	697b      	ldr	r3, [r7, #20]
 8013a10:	685b      	ldr	r3, [r3, #4]
 8013a12:	4618      	mov	r0, r3
 8013a14:	f7fa ff4a 	bl	800e8ac <pbuf_clen>
 8013a18:	4603      	mov	r3, r0
 8013a1a:	461a      	mov	r2, r3
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013a22:	1a9b      	subs	r3, r3, r2
 8013a24:	b29a      	uxth	r2, r3
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013a2c:	697b      	ldr	r3, [r7, #20]
 8013a2e:	6858      	ldr	r0, [r3, #4]
 8013a30:	697b      	ldr	r3, [r7, #20]
 8013a32:	685b      	ldr	r3, [r3, #4]
 8013a34:	891a      	ldrh	r2, [r3, #8]
 8013a36:	89bb      	ldrh	r3, [r7, #12]
 8013a38:	1ad3      	subs	r3, r2, r3
 8013a3a:	b29b      	uxth	r3, r3
 8013a3c:	4619      	mov	r1, r3
 8013a3e:	f7fa fcef 	bl	800e420 <pbuf_realloc>
  useg->len -= remainder;
 8013a42:	697b      	ldr	r3, [r7, #20]
 8013a44:	891a      	ldrh	r2, [r3, #8]
 8013a46:	89bb      	ldrh	r3, [r7, #12]
 8013a48:	1ad3      	subs	r3, r2, r3
 8013a4a:	b29a      	uxth	r2, r3
 8013a4c:	697b      	ldr	r3, [r7, #20]
 8013a4e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013a50:	697b      	ldr	r3, [r7, #20]
 8013a52:	68db      	ldr	r3, [r3, #12]
 8013a54:	899b      	ldrh	r3, [r3, #12]
 8013a56:	b29c      	uxth	r4, r3
 8013a58:	7efb      	ldrb	r3, [r7, #27]
 8013a5a:	b29b      	uxth	r3, r3
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	f7f9 fa3f 	bl	800cee0 <lwip_htons>
 8013a62:	4603      	mov	r3, r0
 8013a64:	461a      	mov	r2, r3
 8013a66:	697b      	ldr	r3, [r7, #20]
 8013a68:	68db      	ldr	r3, [r3, #12]
 8013a6a:	4322      	orrs	r2, r4
 8013a6c:	b292      	uxth	r2, r2
 8013a6e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013a70:	697b      	ldr	r3, [r7, #20]
 8013a72:	685b      	ldr	r3, [r3, #4]
 8013a74:	4618      	mov	r0, r3
 8013a76:	f7fa ff19 	bl	800e8ac <pbuf_clen>
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	461a      	mov	r2, r3
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013a84:	4413      	add	r3, r2
 8013a86:	b29a      	uxth	r2, r3
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013a8e:	69fb      	ldr	r3, [r7, #28]
 8013a90:	685b      	ldr	r3, [r3, #4]
 8013a92:	4618      	mov	r0, r3
 8013a94:	f7fa ff0a 	bl	800e8ac <pbuf_clen>
 8013a98:	4603      	mov	r3, r0
 8013a9a:	461a      	mov	r2, r3
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013aa2:	4413      	add	r3, r2
 8013aa4:	b29a      	uxth	r2, r3
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013aac:	697b      	ldr	r3, [r7, #20]
 8013aae:	681a      	ldr	r2, [r3, #0]
 8013ab0:	69fb      	ldr	r3, [r7, #28]
 8013ab2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013ab4:	697b      	ldr	r3, [r7, #20]
 8013ab6:	69fa      	ldr	r2, [r7, #28]
 8013ab8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013aba:	69fb      	ldr	r3, [r7, #28]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d103      	bne.n	8013aca <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013aca:	2300      	movs	r3, #0
 8013acc:	e016      	b.n	8013afc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013ace:	bf00      	nop
 8013ad0:	e002      	b.n	8013ad8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013ad2:	bf00      	nop
 8013ad4:	e000      	b.n	8013ad8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013ad6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013ad8:	69fb      	ldr	r3, [r7, #28]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d006      	beq.n	8013aec <tcp_split_unsent_seg+0x25c>
 8013ade:	4b09      	ldr	r3, [pc, #36]	@ (8013b04 <tcp_split_unsent_seg+0x274>)
 8013ae0:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8013ae4:	490d      	ldr	r1, [pc, #52]	@ (8013b1c <tcp_split_unsent_seg+0x28c>)
 8013ae6:	4809      	ldr	r0, [pc, #36]	@ (8013b0c <tcp_split_unsent_seg+0x27c>)
 8013ae8:	f011 fcee 	bl	80254c8 <iprintf>
  if (p != NULL) {
 8013aec:	693b      	ldr	r3, [r7, #16]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d002      	beq.n	8013af8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013af2:	6938      	ldr	r0, [r7, #16]
 8013af4:	f7fa fe4c 	bl	800e790 <pbuf_free>
  }

  return ERR_MEM;
 8013af8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013afc:	4618      	mov	r0, r3
 8013afe:	3724      	adds	r7, #36	@ 0x24
 8013b00:	46bd      	mov	sp, r7
 8013b02:	bd90      	pop	{r4, r7, pc}
 8013b04:	08028db8 	.word	0x08028db8
 8013b08:	0802914c 	.word	0x0802914c
 8013b0c:	08028e0c 	.word	0x08028e0c
 8013b10:	08029170 	.word	0x08029170
 8013b14:	08029194 	.word	0x08029194
 8013b18:	080291a4 	.word	0x080291a4
 8013b1c:	080291b4 	.word	0x080291b4

08013b20 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013b20:	b590      	push	{r4, r7, lr}
 8013b22:	b085      	sub	sp, #20
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d106      	bne.n	8013b3c <tcp_send_fin+0x1c>
 8013b2e:	4b21      	ldr	r3, [pc, #132]	@ (8013bb4 <tcp_send_fin+0x94>)
 8013b30:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8013b34:	4920      	ldr	r1, [pc, #128]	@ (8013bb8 <tcp_send_fin+0x98>)
 8013b36:	4821      	ldr	r0, [pc, #132]	@ (8013bbc <tcp_send_fin+0x9c>)
 8013b38:	f011 fcc6 	bl	80254c8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d02e      	beq.n	8013ba2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b48:	60fb      	str	r3, [r7, #12]
 8013b4a:	e002      	b.n	8013b52 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d1f8      	bne.n	8013b4c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	68db      	ldr	r3, [r3, #12]
 8013b5e:	899b      	ldrh	r3, [r3, #12]
 8013b60:	b29b      	uxth	r3, r3
 8013b62:	4618      	mov	r0, r3
 8013b64:	f7f9 f9bc 	bl	800cee0 <lwip_htons>
 8013b68:	4603      	mov	r3, r0
 8013b6a:	b2db      	uxtb	r3, r3
 8013b6c:	f003 0307 	and.w	r3, r3, #7
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d116      	bne.n	8013ba2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	68db      	ldr	r3, [r3, #12]
 8013b78:	899b      	ldrh	r3, [r3, #12]
 8013b7a:	b29c      	uxth	r4, r3
 8013b7c:	2001      	movs	r0, #1
 8013b7e:	f7f9 f9af 	bl	800cee0 <lwip_htons>
 8013b82:	4603      	mov	r3, r0
 8013b84:	461a      	mov	r2, r3
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	68db      	ldr	r3, [r3, #12]
 8013b8a:	4322      	orrs	r2, r4
 8013b8c:	b292      	uxth	r2, r2
 8013b8e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	8b5b      	ldrh	r3, [r3, #26]
 8013b94:	f043 0320 	orr.w	r3, r3, #32
 8013b98:	b29a      	uxth	r2, r3
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	e004      	b.n	8013bac <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013ba2:	2101      	movs	r1, #1
 8013ba4:	6878      	ldr	r0, [r7, #4]
 8013ba6:	f000 f80b 	bl	8013bc0 <tcp_enqueue_flags>
 8013baa:	4603      	mov	r3, r0
}
 8013bac:	4618      	mov	r0, r3
 8013bae:	3714      	adds	r7, #20
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	bd90      	pop	{r4, r7, pc}
 8013bb4:	08028db8 	.word	0x08028db8
 8013bb8:	080291c0 	.word	0x080291c0
 8013bbc:	08028e0c 	.word	0x08028e0c

08013bc0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b08a      	sub	sp, #40	@ 0x28
 8013bc4:	af02      	add	r7, sp, #8
 8013bc6:	6078      	str	r0, [r7, #4]
 8013bc8:	460b      	mov	r3, r1
 8013bca:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013bcc:	2300      	movs	r3, #0
 8013bce:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013bd4:	78fb      	ldrb	r3, [r7, #3]
 8013bd6:	f003 0303 	and.w	r3, r3, #3
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d106      	bne.n	8013bec <tcp_enqueue_flags+0x2c>
 8013bde:	4b67      	ldr	r3, [pc, #412]	@ (8013d7c <tcp_enqueue_flags+0x1bc>)
 8013be0:	f240 4211 	movw	r2, #1041	@ 0x411
 8013be4:	4966      	ldr	r1, [pc, #408]	@ (8013d80 <tcp_enqueue_flags+0x1c0>)
 8013be6:	4867      	ldr	r0, [pc, #412]	@ (8013d84 <tcp_enqueue_flags+0x1c4>)
 8013be8:	f011 fc6e 	bl	80254c8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d106      	bne.n	8013c00 <tcp_enqueue_flags+0x40>
 8013bf2:	4b62      	ldr	r3, [pc, #392]	@ (8013d7c <tcp_enqueue_flags+0x1bc>)
 8013bf4:	f240 4213 	movw	r2, #1043	@ 0x413
 8013bf8:	4963      	ldr	r1, [pc, #396]	@ (8013d88 <tcp_enqueue_flags+0x1c8>)
 8013bfa:	4862      	ldr	r0, [pc, #392]	@ (8013d84 <tcp_enqueue_flags+0x1c4>)
 8013bfc:	f011 fc64 	bl	80254c8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013c00:	78fb      	ldrb	r3, [r7, #3]
 8013c02:	f003 0302 	and.w	r3, r3, #2
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d001      	beq.n	8013c0e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013c0a:	2301      	movs	r3, #1
 8013c0c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013c0e:	7ffb      	ldrb	r3, [r7, #31]
 8013c10:	009b      	lsls	r3, r3, #2
 8013c12:	b2db      	uxtb	r3, r3
 8013c14:	f003 0304 	and.w	r3, r3, #4
 8013c18:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013c1a:	7dfb      	ldrb	r3, [r7, #23]
 8013c1c:	b29b      	uxth	r3, r3
 8013c1e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013c22:	4619      	mov	r1, r3
 8013c24:	2036      	movs	r0, #54	@ 0x36
 8013c26:	f7fa fa9d 	bl	800e164 <pbuf_alloc>
 8013c2a:	6138      	str	r0, [r7, #16]
 8013c2c:	693b      	ldr	r3, [r7, #16]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d109      	bne.n	8013c46 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	8b5b      	ldrh	r3, [r3, #26]
 8013c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013c3a:	b29a      	uxth	r2, r3
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013c40:	f04f 33ff 	mov.w	r3, #4294967295
 8013c44:	e095      	b.n	8013d72 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013c46:	693b      	ldr	r3, [r7, #16]
 8013c48:	895a      	ldrh	r2, [r3, #10]
 8013c4a:	7dfb      	ldrb	r3, [r7, #23]
 8013c4c:	b29b      	uxth	r3, r3
 8013c4e:	429a      	cmp	r2, r3
 8013c50:	d206      	bcs.n	8013c60 <tcp_enqueue_flags+0xa0>
 8013c52:	4b4a      	ldr	r3, [pc, #296]	@ (8013d7c <tcp_enqueue_flags+0x1bc>)
 8013c54:	f240 4239 	movw	r2, #1081	@ 0x439
 8013c58:	494c      	ldr	r1, [pc, #304]	@ (8013d8c <tcp_enqueue_flags+0x1cc>)
 8013c5a:	484a      	ldr	r0, [pc, #296]	@ (8013d84 <tcp_enqueue_flags+0x1c4>)
 8013c5c:	f011 fc34 	bl	80254c8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8013c64:	78fa      	ldrb	r2, [r7, #3]
 8013c66:	7ffb      	ldrb	r3, [r7, #31]
 8013c68:	9300      	str	r3, [sp, #0]
 8013c6a:	460b      	mov	r3, r1
 8013c6c:	6939      	ldr	r1, [r7, #16]
 8013c6e:	6878      	ldr	r0, [r7, #4]
 8013c70:	f7ff f91a 	bl	8012ea8 <tcp_create_segment>
 8013c74:	60f8      	str	r0, [r7, #12]
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d109      	bne.n	8013c90 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	8b5b      	ldrh	r3, [r3, #26]
 8013c80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013c84:	b29a      	uxth	r2, r3
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8013c8e:	e070      	b.n	8013d72 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	68db      	ldr	r3, [r3, #12]
 8013c94:	f003 0303 	and.w	r3, r3, #3
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d006      	beq.n	8013caa <tcp_enqueue_flags+0xea>
 8013c9c:	4b37      	ldr	r3, [pc, #220]	@ (8013d7c <tcp_enqueue_flags+0x1bc>)
 8013c9e:	f240 4242 	movw	r2, #1090	@ 0x442
 8013ca2:	493b      	ldr	r1, [pc, #236]	@ (8013d90 <tcp_enqueue_flags+0x1d0>)
 8013ca4:	4837      	ldr	r0, [pc, #220]	@ (8013d84 <tcp_enqueue_flags+0x1c4>)
 8013ca6:	f011 fc0f 	bl	80254c8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	891b      	ldrh	r3, [r3, #8]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d006      	beq.n	8013cc0 <tcp_enqueue_flags+0x100>
 8013cb2:	4b32      	ldr	r3, [pc, #200]	@ (8013d7c <tcp_enqueue_flags+0x1bc>)
 8013cb4:	f240 4243 	movw	r2, #1091	@ 0x443
 8013cb8:	4936      	ldr	r1, [pc, #216]	@ (8013d94 <tcp_enqueue_flags+0x1d4>)
 8013cba:	4832      	ldr	r0, [pc, #200]	@ (8013d84 <tcp_enqueue_flags+0x1c4>)
 8013cbc:	f011 fc04 	bl	80254c8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d103      	bne.n	8013cd0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	68fa      	ldr	r2, [r7, #12]
 8013ccc:	66da      	str	r2, [r3, #108]	@ 0x6c
 8013cce:	e00d      	b.n	8013cec <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013cd4:	61bb      	str	r3, [r7, #24]
 8013cd6:	e002      	b.n	8013cde <tcp_enqueue_flags+0x11e>
 8013cd8:	69bb      	ldr	r3, [r7, #24]
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	61bb      	str	r3, [r7, #24]
 8013cde:	69bb      	ldr	r3, [r7, #24]
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d1f8      	bne.n	8013cd8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013ce6:	69bb      	ldr	r3, [r7, #24]
 8013ce8:	68fa      	ldr	r2, [r7, #12]
 8013cea:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	2200      	movs	r2, #0
 8013cf0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013cf4:	78fb      	ldrb	r3, [r7, #3]
 8013cf6:	f003 0302 	and.w	r3, r3, #2
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d104      	bne.n	8013d08 <tcp_enqueue_flags+0x148>
 8013cfe:	78fb      	ldrb	r3, [r7, #3]
 8013d00:	f003 0301 	and.w	r3, r3, #1
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d004      	beq.n	8013d12 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013d0c:	1c5a      	adds	r2, r3, #1
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013d12:	78fb      	ldrb	r3, [r7, #3]
 8013d14:	f003 0301 	and.w	r3, r3, #1
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d006      	beq.n	8013d2a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	8b5b      	ldrh	r3, [r3, #26]
 8013d20:	f043 0320 	orr.w	r3, r3, #32
 8013d24:	b29a      	uxth	r2, r3
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	685b      	ldr	r3, [r3, #4]
 8013d2e:	4618      	mov	r0, r3
 8013d30:	f7fa fdbc 	bl	800e8ac <pbuf_clen>
 8013d34:	4603      	mov	r3, r0
 8013d36:	461a      	mov	r2, r3
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013d3e:	4413      	add	r3, r2
 8013d40:	b29a      	uxth	r2, r3
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d00e      	beq.n	8013d70 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d10a      	bne.n	8013d70 <tcp_enqueue_flags+0x1b0>
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d106      	bne.n	8013d70 <tcp_enqueue_flags+0x1b0>
 8013d62:	4b06      	ldr	r3, [pc, #24]	@ (8013d7c <tcp_enqueue_flags+0x1bc>)
 8013d64:	f240 4265 	movw	r2, #1125	@ 0x465
 8013d68:	490b      	ldr	r1, [pc, #44]	@ (8013d98 <tcp_enqueue_flags+0x1d8>)
 8013d6a:	4806      	ldr	r0, [pc, #24]	@ (8013d84 <tcp_enqueue_flags+0x1c4>)
 8013d6c:	f011 fbac 	bl	80254c8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013d70:	2300      	movs	r3, #0
}
 8013d72:	4618      	mov	r0, r3
 8013d74:	3720      	adds	r7, #32
 8013d76:	46bd      	mov	sp, r7
 8013d78:	bd80      	pop	{r7, pc}
 8013d7a:	bf00      	nop
 8013d7c:	08028db8 	.word	0x08028db8
 8013d80:	080291dc 	.word	0x080291dc
 8013d84:	08028e0c 	.word	0x08028e0c
 8013d88:	08029234 	.word	0x08029234
 8013d8c:	08029254 	.word	0x08029254
 8013d90:	08029290 	.word	0x08029290
 8013d94:	080292a8 	.word	0x080292a8
 8013d98:	080292d4 	.word	0x080292d4

08013d9c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013d9c:	b5b0      	push	{r4, r5, r7, lr}
 8013d9e:	b08a      	sub	sp, #40	@ 0x28
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d106      	bne.n	8013db8 <tcp_output+0x1c>
 8013daa:	4b8a      	ldr	r3, [pc, #552]	@ (8013fd4 <tcp_output+0x238>)
 8013dac:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8013db0:	4989      	ldr	r1, [pc, #548]	@ (8013fd8 <tcp_output+0x23c>)
 8013db2:	488a      	ldr	r0, [pc, #552]	@ (8013fdc <tcp_output+0x240>)
 8013db4:	f011 fb88 	bl	80254c8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	7d1b      	ldrb	r3, [r3, #20]
 8013dbc:	2b01      	cmp	r3, #1
 8013dbe:	d106      	bne.n	8013dce <tcp_output+0x32>
 8013dc0:	4b84      	ldr	r3, [pc, #528]	@ (8013fd4 <tcp_output+0x238>)
 8013dc2:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8013dc6:	4986      	ldr	r1, [pc, #536]	@ (8013fe0 <tcp_output+0x244>)
 8013dc8:	4884      	ldr	r0, [pc, #528]	@ (8013fdc <tcp_output+0x240>)
 8013dca:	f011 fb7d 	bl	80254c8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013dce:	4b85      	ldr	r3, [pc, #532]	@ (8013fe4 <tcp_output+0x248>)
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	687a      	ldr	r2, [r7, #4]
 8013dd4:	429a      	cmp	r2, r3
 8013dd6:	d101      	bne.n	8013ddc <tcp_output+0x40>
    return ERR_OK;
 8013dd8:	2300      	movs	r3, #0
 8013dda:	e1ce      	b.n	801417a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013de8:	4293      	cmp	r3, r2
 8013dea:	bf28      	it	cs
 8013dec:	4613      	movcs	r3, r2
 8013dee:	b29b      	uxth	r3, r3
 8013df0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013df6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8013df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d10b      	bne.n	8013e16 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	8b5b      	ldrh	r3, [r3, #26]
 8013e02:	f003 0302 	and.w	r3, r3, #2
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	f000 81aa 	beq.w	8014160 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013e0c:	6878      	ldr	r0, [r7, #4]
 8013e0e:	f000 fdcb 	bl	80149a8 <tcp_send_empty_ack>
 8013e12:	4603      	mov	r3, r0
 8013e14:	e1b1      	b.n	801417a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013e16:	6879      	ldr	r1, [r7, #4]
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	3304      	adds	r3, #4
 8013e1c:	461a      	mov	r2, r3
 8013e1e:	6878      	ldr	r0, [r7, #4]
 8013e20:	f7ff f826 	bl	8012e70 <tcp_route>
 8013e24:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013e26:	697b      	ldr	r3, [r7, #20]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d102      	bne.n	8013e32 <tcp_output+0x96>
    return ERR_RTE;
 8013e2c:	f06f 0303 	mvn.w	r3, #3
 8013e30:	e1a3      	b.n	801417a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d003      	beq.n	8013e40 <tcp_output+0xa4>
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d111      	bne.n	8013e64 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013e40:	697b      	ldr	r3, [r7, #20]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d002      	beq.n	8013e4c <tcp_output+0xb0>
 8013e46:	697b      	ldr	r3, [r7, #20]
 8013e48:	3304      	adds	r3, #4
 8013e4a:	e000      	b.n	8013e4e <tcp_output+0xb2>
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013e50:	693b      	ldr	r3, [r7, #16]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d102      	bne.n	8013e5c <tcp_output+0xc0>
      return ERR_RTE;
 8013e56:	f06f 0303 	mvn.w	r3, #3
 8013e5a:	e18e      	b.n	801417a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013e5c:	693b      	ldr	r3, [r7, #16]
 8013e5e:	681a      	ldr	r2, [r3, #0]
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e66:	68db      	ldr	r3, [r3, #12]
 8013e68:	685b      	ldr	r3, [r3, #4]
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	f7f9 f84e 	bl	800cf0c <lwip_htonl>
 8013e70:	4602      	mov	r2, r0
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013e76:	1ad3      	subs	r3, r2, r3
 8013e78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013e7a:	8912      	ldrh	r2, [r2, #8]
 8013e7c:	4413      	add	r3, r2
 8013e7e:	69ba      	ldr	r2, [r7, #24]
 8013e80:	429a      	cmp	r2, r3
 8013e82:	d227      	bcs.n	8013ed4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013e8a:	461a      	mov	r2, r3
 8013e8c:	69bb      	ldr	r3, [r7, #24]
 8013e8e:	4293      	cmp	r3, r2
 8013e90:	d114      	bne.n	8013ebc <tcp_output+0x120>
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d110      	bne.n	8013ebc <tcp_output+0x120>
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d10b      	bne.n	8013ebc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	2200      	movs	r2, #0
 8013ea8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	2201      	movs	r2, #1
 8013eb0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	8b5b      	ldrh	r3, [r3, #26]
 8013ec0:	f003 0302 	and.w	r3, r3, #2
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	f000 814d 	beq.w	8014164 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8013eca:	6878      	ldr	r0, [r7, #4]
 8013ecc:	f000 fd6c 	bl	80149a8 <tcp_send_empty_ack>
 8013ed0:	4603      	mov	r3, r0
 8013ed2:	e152      	b.n	801417a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	2200      	movs	r2, #0
 8013ed8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013ee0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013ee2:	6a3b      	ldr	r3, [r7, #32]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	f000 811c 	beq.w	8014122 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8013eea:	e002      	b.n	8013ef2 <tcp_output+0x156>
 8013eec:	6a3b      	ldr	r3, [r7, #32]
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	623b      	str	r3, [r7, #32]
 8013ef2:	6a3b      	ldr	r3, [r7, #32]
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d1f8      	bne.n	8013eec <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013efa:	e112      	b.n	8014122 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013efe:	68db      	ldr	r3, [r3, #12]
 8013f00:	899b      	ldrh	r3, [r3, #12]
 8013f02:	b29b      	uxth	r3, r3
 8013f04:	4618      	mov	r0, r3
 8013f06:	f7f8 ffeb 	bl	800cee0 <lwip_htons>
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	b2db      	uxtb	r3, r3
 8013f0e:	f003 0304 	and.w	r3, r3, #4
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d006      	beq.n	8013f24 <tcp_output+0x188>
 8013f16:	4b2f      	ldr	r3, [pc, #188]	@ (8013fd4 <tcp_output+0x238>)
 8013f18:	f240 5236 	movw	r2, #1334	@ 0x536
 8013f1c:	4932      	ldr	r1, [pc, #200]	@ (8013fe8 <tcp_output+0x24c>)
 8013f1e:	482f      	ldr	r0, [pc, #188]	@ (8013fdc <tcp_output+0x240>)
 8013f20:	f011 fad2 	bl	80254c8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d01f      	beq.n	8013f6c <tcp_output+0x1d0>
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	8b5b      	ldrh	r3, [r3, #26]
 8013f30:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d119      	bne.n	8013f6c <tcp_output+0x1d0>
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d00b      	beq.n	8013f58 <tcp_output+0x1bc>
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d110      	bne.n	8013f6c <tcp_output+0x1d0>
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013f4e:	891a      	ldrh	r2, [r3, #8]
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013f54:	429a      	cmp	r2, r3
 8013f56:	d209      	bcs.n	8013f6c <tcp_output+0x1d0>
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d004      	beq.n	8013f6c <tcp_output+0x1d0>
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013f68:	2b08      	cmp	r3, #8
 8013f6a:	d901      	bls.n	8013f70 <tcp_output+0x1d4>
 8013f6c:	2301      	movs	r3, #1
 8013f6e:	e000      	b.n	8013f72 <tcp_output+0x1d6>
 8013f70:	2300      	movs	r3, #0
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d106      	bne.n	8013f84 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	8b5b      	ldrh	r3, [r3, #26]
 8013f7a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	f000 80e4 	beq.w	801414c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	7d1b      	ldrb	r3, [r3, #20]
 8013f88:	2b02      	cmp	r3, #2
 8013f8a:	d00d      	beq.n	8013fa8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f8e:	68db      	ldr	r3, [r3, #12]
 8013f90:	899b      	ldrh	r3, [r3, #12]
 8013f92:	b29c      	uxth	r4, r3
 8013f94:	2010      	movs	r0, #16
 8013f96:	f7f8 ffa3 	bl	800cee0 <lwip_htons>
 8013f9a:	4603      	mov	r3, r0
 8013f9c:	461a      	mov	r2, r3
 8013f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fa0:	68db      	ldr	r3, [r3, #12]
 8013fa2:	4322      	orrs	r2, r4
 8013fa4:	b292      	uxth	r2, r2
 8013fa6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013fa8:	697a      	ldr	r2, [r7, #20]
 8013faa:	6879      	ldr	r1, [r7, #4]
 8013fac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013fae:	f000 f909 	bl	80141c4 <tcp_output_segment>
 8013fb2:	4603      	mov	r3, r0
 8013fb4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d016      	beq.n	8013fec <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	8b5b      	ldrh	r3, [r3, #26]
 8013fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013fc6:	b29a      	uxth	r2, r3
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	835a      	strh	r2, [r3, #26]
      return err;
 8013fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013fd0:	e0d3      	b.n	801417a <tcp_output+0x3de>
 8013fd2:	bf00      	nop
 8013fd4:	08028db8 	.word	0x08028db8
 8013fd8:	080292fc 	.word	0x080292fc
 8013fdc:	08028e0c 	.word	0x08028e0c
 8013fe0:	08029314 	.word	0x08029314
 8013fe4:	2000fecc 	.word	0x2000fecc
 8013fe8:	0802933c 	.word	0x0802933c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fee:	681a      	ldr	r2, [r3, #0]
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	7d1b      	ldrb	r3, [r3, #20]
 8013ff8:	2b02      	cmp	r3, #2
 8013ffa:	d006      	beq.n	801400a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	8b5b      	ldrh	r3, [r3, #26]
 8014000:	f023 0303 	bic.w	r3, r3, #3
 8014004:	b29a      	uxth	r2, r3
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801400c:	68db      	ldr	r3, [r3, #12]
 801400e:	685b      	ldr	r3, [r3, #4]
 8014010:	4618      	mov	r0, r3
 8014012:	f7f8 ff7b 	bl	800cf0c <lwip_htonl>
 8014016:	4604      	mov	r4, r0
 8014018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801401a:	891b      	ldrh	r3, [r3, #8]
 801401c:	461d      	mov	r5, r3
 801401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014020:	68db      	ldr	r3, [r3, #12]
 8014022:	899b      	ldrh	r3, [r3, #12]
 8014024:	b29b      	uxth	r3, r3
 8014026:	4618      	mov	r0, r3
 8014028:	f7f8 ff5a 	bl	800cee0 <lwip_htons>
 801402c:	4603      	mov	r3, r0
 801402e:	b2db      	uxtb	r3, r3
 8014030:	f003 0303 	and.w	r3, r3, #3
 8014034:	2b00      	cmp	r3, #0
 8014036:	d001      	beq.n	801403c <tcp_output+0x2a0>
 8014038:	2301      	movs	r3, #1
 801403a:	e000      	b.n	801403e <tcp_output+0x2a2>
 801403c:	2300      	movs	r3, #0
 801403e:	442b      	add	r3, r5
 8014040:	4423      	add	r3, r4
 8014042:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014048:	68bb      	ldr	r3, [r7, #8]
 801404a:	1ad3      	subs	r3, r2, r3
 801404c:	2b00      	cmp	r3, #0
 801404e:	da02      	bge.n	8014056 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	68ba      	ldr	r2, [r7, #8]
 8014054:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014058:	891b      	ldrh	r3, [r3, #8]
 801405a:	461c      	mov	r4, r3
 801405c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801405e:	68db      	ldr	r3, [r3, #12]
 8014060:	899b      	ldrh	r3, [r3, #12]
 8014062:	b29b      	uxth	r3, r3
 8014064:	4618      	mov	r0, r3
 8014066:	f7f8 ff3b 	bl	800cee0 <lwip_htons>
 801406a:	4603      	mov	r3, r0
 801406c:	b2db      	uxtb	r3, r3
 801406e:	f003 0303 	and.w	r3, r3, #3
 8014072:	2b00      	cmp	r3, #0
 8014074:	d001      	beq.n	801407a <tcp_output+0x2de>
 8014076:	2301      	movs	r3, #1
 8014078:	e000      	b.n	801407c <tcp_output+0x2e0>
 801407a:	2300      	movs	r3, #0
 801407c:	4423      	add	r3, r4
 801407e:	2b00      	cmp	r3, #0
 8014080:	d049      	beq.n	8014116 <tcp_output+0x37a>
      seg->next = NULL;
 8014082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014084:	2200      	movs	r2, #0
 8014086:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801408c:	2b00      	cmp	r3, #0
 801408e:	d105      	bne.n	801409c <tcp_output+0x300>
        pcb->unacked = seg;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014094:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8014096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014098:	623b      	str	r3, [r7, #32]
 801409a:	e03f      	b.n	801411c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801409c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801409e:	68db      	ldr	r3, [r3, #12]
 80140a0:	685b      	ldr	r3, [r3, #4]
 80140a2:	4618      	mov	r0, r3
 80140a4:	f7f8 ff32 	bl	800cf0c <lwip_htonl>
 80140a8:	4604      	mov	r4, r0
 80140aa:	6a3b      	ldr	r3, [r7, #32]
 80140ac:	68db      	ldr	r3, [r3, #12]
 80140ae:	685b      	ldr	r3, [r3, #4]
 80140b0:	4618      	mov	r0, r3
 80140b2:	f7f8 ff2b 	bl	800cf0c <lwip_htonl>
 80140b6:	4603      	mov	r3, r0
 80140b8:	1ae3      	subs	r3, r4, r3
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	da24      	bge.n	8014108 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	3370      	adds	r3, #112	@ 0x70
 80140c2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80140c4:	e002      	b.n	80140cc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80140c6:	69fb      	ldr	r3, [r7, #28]
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80140cc:	69fb      	ldr	r3, [r7, #28]
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d011      	beq.n	80140f8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80140d4:	69fb      	ldr	r3, [r7, #28]
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	68db      	ldr	r3, [r3, #12]
 80140da:	685b      	ldr	r3, [r3, #4]
 80140dc:	4618      	mov	r0, r3
 80140de:	f7f8 ff15 	bl	800cf0c <lwip_htonl>
 80140e2:	4604      	mov	r4, r0
 80140e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140e6:	68db      	ldr	r3, [r3, #12]
 80140e8:	685b      	ldr	r3, [r3, #4]
 80140ea:	4618      	mov	r0, r3
 80140ec:	f7f8 ff0e 	bl	800cf0c <lwip_htonl>
 80140f0:	4603      	mov	r3, r0
 80140f2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	dbe6      	blt.n	80140c6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80140f8:	69fb      	ldr	r3, [r7, #28]
 80140fa:	681a      	ldr	r2, [r3, #0]
 80140fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140fe:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014100:	69fb      	ldr	r3, [r7, #28]
 8014102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014104:	601a      	str	r2, [r3, #0]
 8014106:	e009      	b.n	801411c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014108:	6a3b      	ldr	r3, [r7, #32]
 801410a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801410c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801410e:	6a3b      	ldr	r3, [r7, #32]
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	623b      	str	r3, [r7, #32]
 8014114:	e002      	b.n	801411c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014116:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014118:	f7fb ff1f 	bl	800ff5a <tcp_seg_free>
    }
    seg = pcb->unsent;
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014120:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8014122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014124:	2b00      	cmp	r3, #0
 8014126:	d012      	beq.n	801414e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801412a:	68db      	ldr	r3, [r3, #12]
 801412c:	685b      	ldr	r3, [r3, #4]
 801412e:	4618      	mov	r0, r3
 8014130:	f7f8 feec 	bl	800cf0c <lwip_htonl>
 8014134:	4602      	mov	r2, r0
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801413a:	1ad3      	subs	r3, r2, r3
 801413c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801413e:	8912      	ldrh	r2, [r2, #8]
 8014140:	4413      	add	r3, r2
  while (seg != NULL &&
 8014142:	69ba      	ldr	r2, [r7, #24]
 8014144:	429a      	cmp	r2, r3
 8014146:	f4bf aed9 	bcs.w	8013efc <tcp_output+0x160>
 801414a:	e000      	b.n	801414e <tcp_output+0x3b2>
      break;
 801414c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014152:	2b00      	cmp	r3, #0
 8014154:	d108      	bne.n	8014168 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	2200      	movs	r2, #0
 801415a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801415e:	e004      	b.n	801416a <tcp_output+0x3ce>
    goto output_done;
 8014160:	bf00      	nop
 8014162:	e002      	b.n	801416a <tcp_output+0x3ce>
    goto output_done;
 8014164:	bf00      	nop
 8014166:	e000      	b.n	801416a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014168:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	8b5b      	ldrh	r3, [r3, #26]
 801416e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014172:	b29a      	uxth	r2, r3
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014178:	2300      	movs	r3, #0
}
 801417a:	4618      	mov	r0, r3
 801417c:	3728      	adds	r7, #40	@ 0x28
 801417e:	46bd      	mov	sp, r7
 8014180:	bdb0      	pop	{r4, r5, r7, pc}
 8014182:	bf00      	nop

08014184 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014184:	b580      	push	{r7, lr}
 8014186:	b082      	sub	sp, #8
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d106      	bne.n	80141a0 <tcp_output_segment_busy+0x1c>
 8014192:	4b09      	ldr	r3, [pc, #36]	@ (80141b8 <tcp_output_segment_busy+0x34>)
 8014194:	f240 529a 	movw	r2, #1434	@ 0x59a
 8014198:	4908      	ldr	r1, [pc, #32]	@ (80141bc <tcp_output_segment_busy+0x38>)
 801419a:	4809      	ldr	r0, [pc, #36]	@ (80141c0 <tcp_output_segment_busy+0x3c>)
 801419c:	f011 f994 	bl	80254c8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	685b      	ldr	r3, [r3, #4]
 80141a4:	7b9b      	ldrb	r3, [r3, #14]
 80141a6:	2b01      	cmp	r3, #1
 80141a8:	d001      	beq.n	80141ae <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80141aa:	2301      	movs	r3, #1
 80141ac:	e000      	b.n	80141b0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80141ae:	2300      	movs	r3, #0
}
 80141b0:	4618      	mov	r0, r3
 80141b2:	3708      	adds	r7, #8
 80141b4:	46bd      	mov	sp, r7
 80141b6:	bd80      	pop	{r7, pc}
 80141b8:	08028db8 	.word	0x08028db8
 80141bc:	08029354 	.word	0x08029354
 80141c0:	08028e0c 	.word	0x08028e0c

080141c4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80141c4:	b5b0      	push	{r4, r5, r7, lr}
 80141c6:	b08c      	sub	sp, #48	@ 0x30
 80141c8:	af04      	add	r7, sp, #16
 80141ca:	60f8      	str	r0, [r7, #12]
 80141cc:	60b9      	str	r1, [r7, #8]
 80141ce:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d106      	bne.n	80141e4 <tcp_output_segment+0x20>
 80141d6:	4b64      	ldr	r3, [pc, #400]	@ (8014368 <tcp_output_segment+0x1a4>)
 80141d8:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80141dc:	4963      	ldr	r1, [pc, #396]	@ (801436c <tcp_output_segment+0x1a8>)
 80141de:	4864      	ldr	r0, [pc, #400]	@ (8014370 <tcp_output_segment+0x1ac>)
 80141e0:	f011 f972 	bl	80254c8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80141e4:	68bb      	ldr	r3, [r7, #8]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d106      	bne.n	80141f8 <tcp_output_segment+0x34>
 80141ea:	4b5f      	ldr	r3, [pc, #380]	@ (8014368 <tcp_output_segment+0x1a4>)
 80141ec:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80141f0:	4960      	ldr	r1, [pc, #384]	@ (8014374 <tcp_output_segment+0x1b0>)
 80141f2:	485f      	ldr	r0, [pc, #380]	@ (8014370 <tcp_output_segment+0x1ac>)
 80141f4:	f011 f968 	bl	80254c8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d106      	bne.n	801420c <tcp_output_segment+0x48>
 80141fe:	4b5a      	ldr	r3, [pc, #360]	@ (8014368 <tcp_output_segment+0x1a4>)
 8014200:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8014204:	495c      	ldr	r1, [pc, #368]	@ (8014378 <tcp_output_segment+0x1b4>)
 8014206:	485a      	ldr	r0, [pc, #360]	@ (8014370 <tcp_output_segment+0x1ac>)
 8014208:	f011 f95e 	bl	80254c8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801420c:	68f8      	ldr	r0, [r7, #12]
 801420e:	f7ff ffb9 	bl	8014184 <tcp_output_segment_busy>
 8014212:	4603      	mov	r3, r0
 8014214:	2b00      	cmp	r3, #0
 8014216:	d001      	beq.n	801421c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014218:	2300      	movs	r3, #0
 801421a:	e0a1      	b.n	8014360 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801421c:	68bb      	ldr	r3, [r7, #8]
 801421e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	68dc      	ldr	r4, [r3, #12]
 8014224:	4610      	mov	r0, r2
 8014226:	f7f8 fe71 	bl	800cf0c <lwip_htonl>
 801422a:	4603      	mov	r3, r0
 801422c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801422e:	68bb      	ldr	r3, [r7, #8]
 8014230:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	68dc      	ldr	r4, [r3, #12]
 8014236:	4610      	mov	r0, r2
 8014238:	f7f8 fe52 	bl	800cee0 <lwip_htons>
 801423c:	4603      	mov	r3, r0
 801423e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014240:	68bb      	ldr	r3, [r7, #8]
 8014242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014244:	68ba      	ldr	r2, [r7, #8]
 8014246:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8014248:	441a      	add	r2, r3
 801424a:	68bb      	ldr	r3, [r7, #8]
 801424c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	68db      	ldr	r3, [r3, #12]
 8014252:	3314      	adds	r3, #20
 8014254:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	7a9b      	ldrb	r3, [r3, #10]
 801425a:	f003 0301 	and.w	r3, r3, #1
 801425e:	2b00      	cmp	r3, #0
 8014260:	d015      	beq.n	801428e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8014262:	68bb      	ldr	r3, [r7, #8]
 8014264:	3304      	adds	r3, #4
 8014266:	461a      	mov	r2, r3
 8014268:	6879      	ldr	r1, [r7, #4]
 801426a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801426e:	f7fc fa39 	bl	80106e4 <tcp_eff_send_mss_netif>
 8014272:	4603      	mov	r3, r0
 8014274:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014276:	8b7b      	ldrh	r3, [r7, #26]
 8014278:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801427c:	4618      	mov	r0, r3
 801427e:	f7f8 fe45 	bl	800cf0c <lwip_htonl>
 8014282:	4602      	mov	r2, r0
 8014284:	69fb      	ldr	r3, [r7, #28]
 8014286:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014288:	69fb      	ldr	r3, [r7, #28]
 801428a:	3304      	adds	r3, #4
 801428c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801428e:	68bb      	ldr	r3, [r7, #8]
 8014290:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014294:	2b00      	cmp	r3, #0
 8014296:	da02      	bge.n	801429e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014298:	68bb      	ldr	r3, [r7, #8]
 801429a:	2200      	movs	r2, #0
 801429c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801429e:	68bb      	ldr	r3, [r7, #8]
 80142a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d10c      	bne.n	80142c0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80142a6:	4b35      	ldr	r3, [pc, #212]	@ (801437c <tcp_output_segment+0x1b8>)
 80142a8:	681a      	ldr	r2, [r3, #0]
 80142aa:	68bb      	ldr	r3, [r7, #8]
 80142ac:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	68db      	ldr	r3, [r3, #12]
 80142b2:	685b      	ldr	r3, [r3, #4]
 80142b4:	4618      	mov	r0, r3
 80142b6:	f7f8 fe29 	bl	800cf0c <lwip_htonl>
 80142ba:	4602      	mov	r2, r0
 80142bc:	68bb      	ldr	r3, [r7, #8]
 80142be:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	68da      	ldr	r2, [r3, #12]
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	685b      	ldr	r3, [r3, #4]
 80142c8:	685b      	ldr	r3, [r3, #4]
 80142ca:	1ad3      	subs	r3, r2, r3
 80142cc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	685b      	ldr	r3, [r3, #4]
 80142d2:	8959      	ldrh	r1, [r3, #10]
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	685b      	ldr	r3, [r3, #4]
 80142d8:	8b3a      	ldrh	r2, [r7, #24]
 80142da:	1a8a      	subs	r2, r1, r2
 80142dc:	b292      	uxth	r2, r2
 80142de:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	685b      	ldr	r3, [r3, #4]
 80142e4:	8919      	ldrh	r1, [r3, #8]
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	685b      	ldr	r3, [r3, #4]
 80142ea:	8b3a      	ldrh	r2, [r7, #24]
 80142ec:	1a8a      	subs	r2, r1, r2
 80142ee:	b292      	uxth	r2, r2
 80142f0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	685b      	ldr	r3, [r3, #4]
 80142f6:	68fa      	ldr	r2, [r7, #12]
 80142f8:	68d2      	ldr	r2, [r2, #12]
 80142fa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	68db      	ldr	r3, [r3, #12]
 8014300:	2200      	movs	r2, #0
 8014302:	741a      	strb	r2, [r3, #16]
 8014304:	2200      	movs	r2, #0
 8014306:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	68da      	ldr	r2, [r3, #12]
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	7a9b      	ldrb	r3, [r3, #10]
 8014310:	f003 0301 	and.w	r3, r3, #1
 8014314:	2b00      	cmp	r3, #0
 8014316:	d001      	beq.n	801431c <tcp_output_segment+0x158>
 8014318:	2318      	movs	r3, #24
 801431a:	e000      	b.n	801431e <tcp_output_segment+0x15a>
 801431c:	2314      	movs	r3, #20
 801431e:	4413      	add	r3, r2
 8014320:	69fa      	ldr	r2, [r7, #28]
 8014322:	429a      	cmp	r2, r3
 8014324:	d006      	beq.n	8014334 <tcp_output_segment+0x170>
 8014326:	4b10      	ldr	r3, [pc, #64]	@ (8014368 <tcp_output_segment+0x1a4>)
 8014328:	f240 621c 	movw	r2, #1564	@ 0x61c
 801432c:	4914      	ldr	r1, [pc, #80]	@ (8014380 <tcp_output_segment+0x1bc>)
 801432e:	4810      	ldr	r0, [pc, #64]	@ (8014370 <tcp_output_segment+0x1ac>)
 8014330:	f011 f8ca 	bl	80254c8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	6858      	ldr	r0, [r3, #4]
 8014338:	68b9      	ldr	r1, [r7, #8]
 801433a:	68bb      	ldr	r3, [r7, #8]
 801433c:	1d1c      	adds	r4, r3, #4
 801433e:	68bb      	ldr	r3, [r7, #8]
 8014340:	7add      	ldrb	r5, [r3, #11]
 8014342:	68bb      	ldr	r3, [r7, #8]
 8014344:	7a9b      	ldrb	r3, [r3, #10]
 8014346:	687a      	ldr	r2, [r7, #4]
 8014348:	9202      	str	r2, [sp, #8]
 801434a:	2206      	movs	r2, #6
 801434c:	9201      	str	r2, [sp, #4]
 801434e:	9300      	str	r3, [sp, #0]
 8014350:	462b      	mov	r3, r5
 8014352:	4622      	mov	r2, r4
 8014354:	f002 fdae 	bl	8016eb4 <ip4_output_if>
 8014358:	4603      	mov	r3, r0
 801435a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801435c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014360:	4618      	mov	r0, r3
 8014362:	3720      	adds	r7, #32
 8014364:	46bd      	mov	sp, r7
 8014366:	bdb0      	pop	{r4, r5, r7, pc}
 8014368:	08028db8 	.word	0x08028db8
 801436c:	0802937c 	.word	0x0802937c
 8014370:	08028e0c 	.word	0x08028e0c
 8014374:	0802939c 	.word	0x0802939c
 8014378:	080293bc 	.word	0x080293bc
 801437c:	2000fe80 	.word	0x2000fe80
 8014380:	080293e0 	.word	0x080293e0

08014384 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014384:	b5b0      	push	{r4, r5, r7, lr}
 8014386:	b084      	sub	sp, #16
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	2b00      	cmp	r3, #0
 8014390:	d106      	bne.n	80143a0 <tcp_rexmit_rto_prepare+0x1c>
 8014392:	4b31      	ldr	r3, [pc, #196]	@ (8014458 <tcp_rexmit_rto_prepare+0xd4>)
 8014394:	f240 6263 	movw	r2, #1635	@ 0x663
 8014398:	4930      	ldr	r1, [pc, #192]	@ (801445c <tcp_rexmit_rto_prepare+0xd8>)
 801439a:	4831      	ldr	r0, [pc, #196]	@ (8014460 <tcp_rexmit_rto_prepare+0xdc>)
 801439c:	f011 f894 	bl	80254c8 <iprintf>

  if (pcb->unacked == NULL) {
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d102      	bne.n	80143ae <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80143a8:	f06f 0305 	mvn.w	r3, #5
 80143ac:	e050      	b.n	8014450 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80143b2:	60fb      	str	r3, [r7, #12]
 80143b4:	e00b      	b.n	80143ce <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80143b6:	68f8      	ldr	r0, [r7, #12]
 80143b8:	f7ff fee4 	bl	8014184 <tcp_output_segment_busy>
 80143bc:	4603      	mov	r3, r0
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d002      	beq.n	80143c8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80143c2:	f06f 0305 	mvn.w	r3, #5
 80143c6:	e043      	b.n	8014450 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	60fb      	str	r3, [r7, #12]
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d1ef      	bne.n	80143b6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80143d6:	68f8      	ldr	r0, [r7, #12]
 80143d8:	f7ff fed4 	bl	8014184 <tcp_output_segment_busy>
 80143dc:	4603      	mov	r3, r0
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d002      	beq.n	80143e8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80143e2:	f06f 0305 	mvn.w	r3, #5
 80143e6:	e033      	b.n	8014450 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	2200      	movs	r2, #0
 80143fc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	8b5b      	ldrh	r3, [r3, #26]
 8014402:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8014406:	b29a      	uxth	r2, r3
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	68db      	ldr	r3, [r3, #12]
 8014410:	685b      	ldr	r3, [r3, #4]
 8014412:	4618      	mov	r0, r3
 8014414:	f7f8 fd7a 	bl	800cf0c <lwip_htonl>
 8014418:	4604      	mov	r4, r0
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	891b      	ldrh	r3, [r3, #8]
 801441e:	461d      	mov	r5, r3
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	68db      	ldr	r3, [r3, #12]
 8014424:	899b      	ldrh	r3, [r3, #12]
 8014426:	b29b      	uxth	r3, r3
 8014428:	4618      	mov	r0, r3
 801442a:	f7f8 fd59 	bl	800cee0 <lwip_htons>
 801442e:	4603      	mov	r3, r0
 8014430:	b2db      	uxtb	r3, r3
 8014432:	f003 0303 	and.w	r3, r3, #3
 8014436:	2b00      	cmp	r3, #0
 8014438:	d001      	beq.n	801443e <tcp_rexmit_rto_prepare+0xba>
 801443a:	2301      	movs	r3, #1
 801443c:	e000      	b.n	8014440 <tcp_rexmit_rto_prepare+0xbc>
 801443e:	2300      	movs	r3, #0
 8014440:	442b      	add	r3, r5
 8014442:	18e2      	adds	r2, r4, r3
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	2200      	movs	r2, #0
 801444c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801444e:	2300      	movs	r3, #0
}
 8014450:	4618      	mov	r0, r3
 8014452:	3710      	adds	r7, #16
 8014454:	46bd      	mov	sp, r7
 8014456:	bdb0      	pop	{r4, r5, r7, pc}
 8014458:	08028db8 	.word	0x08028db8
 801445c:	080293f4 	.word	0x080293f4
 8014460:	08028e0c 	.word	0x08028e0c

08014464 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8014464:	b580      	push	{r7, lr}
 8014466:	b082      	sub	sp, #8
 8014468:	af00      	add	r7, sp, #0
 801446a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d106      	bne.n	8014480 <tcp_rexmit_rto_commit+0x1c>
 8014472:	4b0d      	ldr	r3, [pc, #52]	@ (80144a8 <tcp_rexmit_rto_commit+0x44>)
 8014474:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8014478:	490c      	ldr	r1, [pc, #48]	@ (80144ac <tcp_rexmit_rto_commit+0x48>)
 801447a:	480d      	ldr	r0, [pc, #52]	@ (80144b0 <tcp_rexmit_rto_commit+0x4c>)
 801447c:	f011 f824 	bl	80254c8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014486:	2bff      	cmp	r3, #255	@ 0xff
 8014488:	d007      	beq.n	801449a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014490:	3301      	adds	r3, #1
 8014492:	b2da      	uxtb	r2, r3
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801449a:	6878      	ldr	r0, [r7, #4]
 801449c:	f7ff fc7e 	bl	8013d9c <tcp_output>
}
 80144a0:	bf00      	nop
 80144a2:	3708      	adds	r7, #8
 80144a4:	46bd      	mov	sp, r7
 80144a6:	bd80      	pop	{r7, pc}
 80144a8:	08028db8 	.word	0x08028db8
 80144ac:	08029418 	.word	0x08029418
 80144b0:	08028e0c 	.word	0x08028e0c

080144b4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b082      	sub	sp, #8
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d106      	bne.n	80144d0 <tcp_rexmit_rto+0x1c>
 80144c2:	4b0a      	ldr	r3, [pc, #40]	@ (80144ec <tcp_rexmit_rto+0x38>)
 80144c4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80144c8:	4909      	ldr	r1, [pc, #36]	@ (80144f0 <tcp_rexmit_rto+0x3c>)
 80144ca:	480a      	ldr	r0, [pc, #40]	@ (80144f4 <tcp_rexmit_rto+0x40>)
 80144cc:	f010 fffc 	bl	80254c8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80144d0:	6878      	ldr	r0, [r7, #4]
 80144d2:	f7ff ff57 	bl	8014384 <tcp_rexmit_rto_prepare>
 80144d6:	4603      	mov	r3, r0
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d102      	bne.n	80144e2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80144dc:	6878      	ldr	r0, [r7, #4]
 80144de:	f7ff ffc1 	bl	8014464 <tcp_rexmit_rto_commit>
  }
}
 80144e2:	bf00      	nop
 80144e4:	3708      	adds	r7, #8
 80144e6:	46bd      	mov	sp, r7
 80144e8:	bd80      	pop	{r7, pc}
 80144ea:	bf00      	nop
 80144ec:	08028db8 	.word	0x08028db8
 80144f0:	0802943c 	.word	0x0802943c
 80144f4:	08028e0c 	.word	0x08028e0c

080144f8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80144f8:	b590      	push	{r4, r7, lr}
 80144fa:	b085      	sub	sp, #20
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	2b00      	cmp	r3, #0
 8014504:	d106      	bne.n	8014514 <tcp_rexmit+0x1c>
 8014506:	4b2f      	ldr	r3, [pc, #188]	@ (80145c4 <tcp_rexmit+0xcc>)
 8014508:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801450c:	492e      	ldr	r1, [pc, #184]	@ (80145c8 <tcp_rexmit+0xd0>)
 801450e:	482f      	ldr	r0, [pc, #188]	@ (80145cc <tcp_rexmit+0xd4>)
 8014510:	f010 ffda 	bl	80254c8 <iprintf>

  if (pcb->unacked == NULL) {
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014518:	2b00      	cmp	r3, #0
 801451a:	d102      	bne.n	8014522 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801451c:	f06f 0305 	mvn.w	r3, #5
 8014520:	e04c      	b.n	80145bc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014526:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014528:	68b8      	ldr	r0, [r7, #8]
 801452a:	f7ff fe2b 	bl	8014184 <tcp_output_segment_busy>
 801452e:	4603      	mov	r3, r0
 8014530:	2b00      	cmp	r3, #0
 8014532:	d002      	beq.n	801453a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8014534:	f06f 0305 	mvn.w	r3, #5
 8014538:	e040      	b.n	80145bc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801453a:	68bb      	ldr	r3, [r7, #8]
 801453c:	681a      	ldr	r2, [r3, #0]
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	336c      	adds	r3, #108	@ 0x6c
 8014546:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014548:	e002      	b.n	8014550 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	2b00      	cmp	r3, #0
 8014556:	d011      	beq.n	801457c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	68db      	ldr	r3, [r3, #12]
 801455e:	685b      	ldr	r3, [r3, #4]
 8014560:	4618      	mov	r0, r3
 8014562:	f7f8 fcd3 	bl	800cf0c <lwip_htonl>
 8014566:	4604      	mov	r4, r0
 8014568:	68bb      	ldr	r3, [r7, #8]
 801456a:	68db      	ldr	r3, [r3, #12]
 801456c:	685b      	ldr	r3, [r3, #4]
 801456e:	4618      	mov	r0, r3
 8014570:	f7f8 fccc 	bl	800cf0c <lwip_htonl>
 8014574:	4603      	mov	r3, r0
 8014576:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014578:	2b00      	cmp	r3, #0
 801457a:	dbe6      	blt.n	801454a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	681a      	ldr	r2, [r3, #0]
 8014580:	68bb      	ldr	r3, [r7, #8]
 8014582:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	68ba      	ldr	r2, [r7, #8]
 8014588:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801458a:	68bb      	ldr	r3, [r7, #8]
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d103      	bne.n	801459a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	2200      	movs	r2, #0
 8014596:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80145a0:	2bff      	cmp	r3, #255	@ 0xff
 80145a2:	d007      	beq.n	80145b4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80145aa:	3301      	adds	r3, #1
 80145ac:	b2da      	uxtb	r2, r3
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	2200      	movs	r2, #0
 80145b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80145ba:	2300      	movs	r3, #0
}
 80145bc:	4618      	mov	r0, r3
 80145be:	3714      	adds	r7, #20
 80145c0:	46bd      	mov	sp, r7
 80145c2:	bd90      	pop	{r4, r7, pc}
 80145c4:	08028db8 	.word	0x08028db8
 80145c8:	08029458 	.word	0x08029458
 80145cc:	08028e0c 	.word	0x08028e0c

080145d0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b082      	sub	sp, #8
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d106      	bne.n	80145ec <tcp_rexmit_fast+0x1c>
 80145de:	4b2a      	ldr	r3, [pc, #168]	@ (8014688 <tcp_rexmit_fast+0xb8>)
 80145e0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80145e4:	4929      	ldr	r1, [pc, #164]	@ (801468c <tcp_rexmit_fast+0xbc>)
 80145e6:	482a      	ldr	r0, [pc, #168]	@ (8014690 <tcp_rexmit_fast+0xc0>)
 80145e8:	f010 ff6e 	bl	80254c8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d045      	beq.n	8014680 <tcp_rexmit_fast+0xb0>
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	8b5b      	ldrh	r3, [r3, #26]
 80145f8:	f003 0304 	and.w	r3, r3, #4
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d13f      	bne.n	8014680 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014600:	6878      	ldr	r0, [r7, #4]
 8014602:	f7ff ff79 	bl	80144f8 <tcp_rexmit>
 8014606:	4603      	mov	r3, r0
 8014608:	2b00      	cmp	r3, #0
 801460a:	d139      	bne.n	8014680 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014618:	4293      	cmp	r3, r2
 801461a:	bf28      	it	cs
 801461c:	4613      	movcs	r3, r2
 801461e:	b29b      	uxth	r3, r3
 8014620:	2b00      	cmp	r3, #0
 8014622:	da00      	bge.n	8014626 <tcp_rexmit_fast+0x56>
 8014624:	3301      	adds	r3, #1
 8014626:	105b      	asrs	r3, r3, #1
 8014628:	b29a      	uxth	r2, r3
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8014636:	461a      	mov	r2, r3
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801463c:	005b      	lsls	r3, r3, #1
 801463e:	429a      	cmp	r2, r3
 8014640:	d206      	bcs.n	8014650 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014646:	005b      	lsls	r3, r3, #1
 8014648:	b29a      	uxth	r2, r3
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801465a:	4619      	mov	r1, r3
 801465c:	0049      	lsls	r1, r1, #1
 801465e:	440b      	add	r3, r1
 8014660:	b29b      	uxth	r3, r3
 8014662:	4413      	add	r3, r2
 8014664:	b29a      	uxth	r2, r3
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	8b5b      	ldrh	r3, [r3, #26]
 8014670:	f043 0304 	orr.w	r3, r3, #4
 8014674:	b29a      	uxth	r2, r3
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	2200      	movs	r2, #0
 801467e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8014680:	bf00      	nop
 8014682:	3708      	adds	r7, #8
 8014684:	46bd      	mov	sp, r7
 8014686:	bd80      	pop	{r7, pc}
 8014688:	08028db8 	.word	0x08028db8
 801468c:	08029470 	.word	0x08029470
 8014690:	08028e0c 	.word	0x08028e0c

08014694 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014694:	b580      	push	{r7, lr}
 8014696:	b086      	sub	sp, #24
 8014698:	af00      	add	r7, sp, #0
 801469a:	60f8      	str	r0, [r7, #12]
 801469c:	607b      	str	r3, [r7, #4]
 801469e:	460b      	mov	r3, r1
 80146a0:	817b      	strh	r3, [r7, #10]
 80146a2:	4613      	mov	r3, r2
 80146a4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80146a6:	897a      	ldrh	r2, [r7, #10]
 80146a8:	893b      	ldrh	r3, [r7, #8]
 80146aa:	4413      	add	r3, r2
 80146ac:	b29b      	uxth	r3, r3
 80146ae:	3314      	adds	r3, #20
 80146b0:	b29b      	uxth	r3, r3
 80146b2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80146b6:	4619      	mov	r1, r3
 80146b8:	2022      	movs	r0, #34	@ 0x22
 80146ba:	f7f9 fd53 	bl	800e164 <pbuf_alloc>
 80146be:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80146c0:	697b      	ldr	r3, [r7, #20]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d04d      	beq.n	8014762 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80146c6:	897b      	ldrh	r3, [r7, #10]
 80146c8:	3313      	adds	r3, #19
 80146ca:	697a      	ldr	r2, [r7, #20]
 80146cc:	8952      	ldrh	r2, [r2, #10]
 80146ce:	4293      	cmp	r3, r2
 80146d0:	db06      	blt.n	80146e0 <tcp_output_alloc_header_common+0x4c>
 80146d2:	4b26      	ldr	r3, [pc, #152]	@ (801476c <tcp_output_alloc_header_common+0xd8>)
 80146d4:	f240 7223 	movw	r2, #1827	@ 0x723
 80146d8:	4925      	ldr	r1, [pc, #148]	@ (8014770 <tcp_output_alloc_header_common+0xdc>)
 80146da:	4826      	ldr	r0, [pc, #152]	@ (8014774 <tcp_output_alloc_header_common+0xe0>)
 80146dc:	f010 fef4 	bl	80254c8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80146e0:	697b      	ldr	r3, [r7, #20]
 80146e2:	685b      	ldr	r3, [r3, #4]
 80146e4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80146e6:	8c3b      	ldrh	r3, [r7, #32]
 80146e8:	4618      	mov	r0, r3
 80146ea:	f7f8 fbf9 	bl	800cee0 <lwip_htons>
 80146ee:	4603      	mov	r3, r0
 80146f0:	461a      	mov	r2, r3
 80146f2:	693b      	ldr	r3, [r7, #16]
 80146f4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80146f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80146f8:	4618      	mov	r0, r3
 80146fa:	f7f8 fbf1 	bl	800cee0 <lwip_htons>
 80146fe:	4603      	mov	r3, r0
 8014700:	461a      	mov	r2, r3
 8014702:	693b      	ldr	r3, [r7, #16]
 8014704:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014706:	693b      	ldr	r3, [r7, #16]
 8014708:	687a      	ldr	r2, [r7, #4]
 801470a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801470c:	68f8      	ldr	r0, [r7, #12]
 801470e:	f7f8 fbfd 	bl	800cf0c <lwip_htonl>
 8014712:	4602      	mov	r2, r0
 8014714:	693b      	ldr	r3, [r7, #16]
 8014716:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014718:	897b      	ldrh	r3, [r7, #10]
 801471a:	089b      	lsrs	r3, r3, #2
 801471c:	b29b      	uxth	r3, r3
 801471e:	3305      	adds	r3, #5
 8014720:	b29b      	uxth	r3, r3
 8014722:	031b      	lsls	r3, r3, #12
 8014724:	b29a      	uxth	r2, r3
 8014726:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801472a:	b29b      	uxth	r3, r3
 801472c:	4313      	orrs	r3, r2
 801472e:	b29b      	uxth	r3, r3
 8014730:	4618      	mov	r0, r3
 8014732:	f7f8 fbd5 	bl	800cee0 <lwip_htons>
 8014736:	4603      	mov	r3, r0
 8014738:	461a      	mov	r2, r3
 801473a:	693b      	ldr	r3, [r7, #16]
 801473c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801473e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8014740:	4618      	mov	r0, r3
 8014742:	f7f8 fbcd 	bl	800cee0 <lwip_htons>
 8014746:	4603      	mov	r3, r0
 8014748:	461a      	mov	r2, r3
 801474a:	693b      	ldr	r3, [r7, #16]
 801474c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801474e:	693b      	ldr	r3, [r7, #16]
 8014750:	2200      	movs	r2, #0
 8014752:	741a      	strb	r2, [r3, #16]
 8014754:	2200      	movs	r2, #0
 8014756:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014758:	693b      	ldr	r3, [r7, #16]
 801475a:	2200      	movs	r2, #0
 801475c:	749a      	strb	r2, [r3, #18]
 801475e:	2200      	movs	r2, #0
 8014760:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8014762:	697b      	ldr	r3, [r7, #20]
}
 8014764:	4618      	mov	r0, r3
 8014766:	3718      	adds	r7, #24
 8014768:	46bd      	mov	sp, r7
 801476a:	bd80      	pop	{r7, pc}
 801476c:	08028db8 	.word	0x08028db8
 8014770:	08029490 	.word	0x08029490
 8014774:	08028e0c 	.word	0x08028e0c

08014778 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014778:	b5b0      	push	{r4, r5, r7, lr}
 801477a:	b08a      	sub	sp, #40	@ 0x28
 801477c:	af04      	add	r7, sp, #16
 801477e:	60f8      	str	r0, [r7, #12]
 8014780:	607b      	str	r3, [r7, #4]
 8014782:	460b      	mov	r3, r1
 8014784:	817b      	strh	r3, [r7, #10]
 8014786:	4613      	mov	r3, r2
 8014788:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d106      	bne.n	801479e <tcp_output_alloc_header+0x26>
 8014790:	4b15      	ldr	r3, [pc, #84]	@ (80147e8 <tcp_output_alloc_header+0x70>)
 8014792:	f240 7242 	movw	r2, #1858	@ 0x742
 8014796:	4915      	ldr	r1, [pc, #84]	@ (80147ec <tcp_output_alloc_header+0x74>)
 8014798:	4815      	ldr	r0, [pc, #84]	@ (80147f0 <tcp_output_alloc_header+0x78>)
 801479a:	f010 fe95 	bl	80254c8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	8adb      	ldrh	r3, [r3, #22]
 80147a6:	68fa      	ldr	r2, [r7, #12]
 80147a8:	8b12      	ldrh	r2, [r2, #24]
 80147aa:	68f9      	ldr	r1, [r7, #12]
 80147ac:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80147ae:	893d      	ldrh	r5, [r7, #8]
 80147b0:	897c      	ldrh	r4, [r7, #10]
 80147b2:	9103      	str	r1, [sp, #12]
 80147b4:	2110      	movs	r1, #16
 80147b6:	9102      	str	r1, [sp, #8]
 80147b8:	9201      	str	r2, [sp, #4]
 80147ba:	9300      	str	r3, [sp, #0]
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	462a      	mov	r2, r5
 80147c0:	4621      	mov	r1, r4
 80147c2:	f7ff ff67 	bl	8014694 <tcp_output_alloc_header_common>
 80147c6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80147c8:	697b      	ldr	r3, [r7, #20]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d006      	beq.n	80147dc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80147d2:	68fa      	ldr	r2, [r7, #12]
 80147d4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80147d6:	441a      	add	r2, r3
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80147dc:	697b      	ldr	r3, [r7, #20]
}
 80147de:	4618      	mov	r0, r3
 80147e0:	3718      	adds	r7, #24
 80147e2:	46bd      	mov	sp, r7
 80147e4:	bdb0      	pop	{r4, r5, r7, pc}
 80147e6:	bf00      	nop
 80147e8:	08028db8 	.word	0x08028db8
 80147ec:	080294c0 	.word	0x080294c0
 80147f0:	08028e0c 	.word	0x08028e0c

080147f4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b088      	sub	sp, #32
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	60f8      	str	r0, [r7, #12]
 80147fc:	60b9      	str	r1, [r7, #8]
 80147fe:	4611      	mov	r1, r2
 8014800:	461a      	mov	r2, r3
 8014802:	460b      	mov	r3, r1
 8014804:	71fb      	strb	r3, [r7, #7]
 8014806:	4613      	mov	r3, r2
 8014808:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801480a:	2300      	movs	r3, #0
 801480c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801480e:	68bb      	ldr	r3, [r7, #8]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d106      	bne.n	8014822 <tcp_output_fill_options+0x2e>
 8014814:	4b12      	ldr	r3, [pc, #72]	@ (8014860 <tcp_output_fill_options+0x6c>)
 8014816:	f240 7256 	movw	r2, #1878	@ 0x756
 801481a:	4912      	ldr	r1, [pc, #72]	@ (8014864 <tcp_output_fill_options+0x70>)
 801481c:	4812      	ldr	r0, [pc, #72]	@ (8014868 <tcp_output_fill_options+0x74>)
 801481e:	f010 fe53 	bl	80254c8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014822:	68bb      	ldr	r3, [r7, #8]
 8014824:	685b      	ldr	r3, [r3, #4]
 8014826:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014828:	69bb      	ldr	r3, [r7, #24]
 801482a:	3314      	adds	r3, #20
 801482c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801482e:	8bfb      	ldrh	r3, [r7, #30]
 8014830:	009b      	lsls	r3, r3, #2
 8014832:	461a      	mov	r2, r3
 8014834:	79fb      	ldrb	r3, [r7, #7]
 8014836:	009b      	lsls	r3, r3, #2
 8014838:	f003 0304 	and.w	r3, r3, #4
 801483c:	4413      	add	r3, r2
 801483e:	3314      	adds	r3, #20
 8014840:	69ba      	ldr	r2, [r7, #24]
 8014842:	4413      	add	r3, r2
 8014844:	697a      	ldr	r2, [r7, #20]
 8014846:	429a      	cmp	r2, r3
 8014848:	d006      	beq.n	8014858 <tcp_output_fill_options+0x64>
 801484a:	4b05      	ldr	r3, [pc, #20]	@ (8014860 <tcp_output_fill_options+0x6c>)
 801484c:	f240 7275 	movw	r2, #1909	@ 0x775
 8014850:	4906      	ldr	r1, [pc, #24]	@ (801486c <tcp_output_fill_options+0x78>)
 8014852:	4805      	ldr	r0, [pc, #20]	@ (8014868 <tcp_output_fill_options+0x74>)
 8014854:	f010 fe38 	bl	80254c8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014858:	bf00      	nop
 801485a:	3720      	adds	r7, #32
 801485c:	46bd      	mov	sp, r7
 801485e:	bd80      	pop	{r7, pc}
 8014860:	08028db8 	.word	0x08028db8
 8014864:	080294e8 	.word	0x080294e8
 8014868:	08028e0c 	.word	0x08028e0c
 801486c:	080293e0 	.word	0x080293e0

08014870 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014870:	b580      	push	{r7, lr}
 8014872:	b08a      	sub	sp, #40	@ 0x28
 8014874:	af04      	add	r7, sp, #16
 8014876:	60f8      	str	r0, [r7, #12]
 8014878:	60b9      	str	r1, [r7, #8]
 801487a:	607a      	str	r2, [r7, #4]
 801487c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801487e:	68bb      	ldr	r3, [r7, #8]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d106      	bne.n	8014892 <tcp_output_control_segment+0x22>
 8014884:	4b1c      	ldr	r3, [pc, #112]	@ (80148f8 <tcp_output_control_segment+0x88>)
 8014886:	f240 7287 	movw	r2, #1927	@ 0x787
 801488a:	491c      	ldr	r1, [pc, #112]	@ (80148fc <tcp_output_control_segment+0x8c>)
 801488c:	481c      	ldr	r0, [pc, #112]	@ (8014900 <tcp_output_control_segment+0x90>)
 801488e:	f010 fe1b 	bl	80254c8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014892:	683a      	ldr	r2, [r7, #0]
 8014894:	6879      	ldr	r1, [r7, #4]
 8014896:	68f8      	ldr	r0, [r7, #12]
 8014898:	f7fe faea 	bl	8012e70 <tcp_route>
 801489c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801489e:	693b      	ldr	r3, [r7, #16]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d102      	bne.n	80148aa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80148a4:	23fc      	movs	r3, #252	@ 0xfc
 80148a6:	75fb      	strb	r3, [r7, #23]
 80148a8:	e01c      	b.n	80148e4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d006      	beq.n	80148be <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	7adb      	ldrb	r3, [r3, #11]
 80148b4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	7a9b      	ldrb	r3, [r3, #10]
 80148ba:	757b      	strb	r3, [r7, #21]
 80148bc:	e003      	b.n	80148c6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80148be:	23ff      	movs	r3, #255	@ 0xff
 80148c0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80148c2:	2300      	movs	r3, #0
 80148c4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80148c6:	7dba      	ldrb	r2, [r7, #22]
 80148c8:	693b      	ldr	r3, [r7, #16]
 80148ca:	9302      	str	r3, [sp, #8]
 80148cc:	2306      	movs	r3, #6
 80148ce:	9301      	str	r3, [sp, #4]
 80148d0:	7d7b      	ldrb	r3, [r7, #21]
 80148d2:	9300      	str	r3, [sp, #0]
 80148d4:	4613      	mov	r3, r2
 80148d6:	683a      	ldr	r2, [r7, #0]
 80148d8:	6879      	ldr	r1, [r7, #4]
 80148da:	68b8      	ldr	r0, [r7, #8]
 80148dc:	f002 faea 	bl	8016eb4 <ip4_output_if>
 80148e0:	4603      	mov	r3, r0
 80148e2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80148e4:	68b8      	ldr	r0, [r7, #8]
 80148e6:	f7f9 ff53 	bl	800e790 <pbuf_free>
  return err;
 80148ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80148ee:	4618      	mov	r0, r3
 80148f0:	3718      	adds	r7, #24
 80148f2:	46bd      	mov	sp, r7
 80148f4:	bd80      	pop	{r7, pc}
 80148f6:	bf00      	nop
 80148f8:	08028db8 	.word	0x08028db8
 80148fc:	08029510 	.word	0x08029510
 8014900:	08028e0c 	.word	0x08028e0c

08014904 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014904:	b590      	push	{r4, r7, lr}
 8014906:	b08b      	sub	sp, #44	@ 0x2c
 8014908:	af04      	add	r7, sp, #16
 801490a:	60f8      	str	r0, [r7, #12]
 801490c:	60b9      	str	r1, [r7, #8]
 801490e:	607a      	str	r2, [r7, #4]
 8014910:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014912:	683b      	ldr	r3, [r7, #0]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d106      	bne.n	8014926 <tcp_rst+0x22>
 8014918:	4b1f      	ldr	r3, [pc, #124]	@ (8014998 <tcp_rst+0x94>)
 801491a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801491e:	491f      	ldr	r1, [pc, #124]	@ (801499c <tcp_rst+0x98>)
 8014920:	481f      	ldr	r0, [pc, #124]	@ (80149a0 <tcp_rst+0x9c>)
 8014922:	f010 fdd1 	bl	80254c8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014928:	2b00      	cmp	r3, #0
 801492a:	d106      	bne.n	801493a <tcp_rst+0x36>
 801492c:	4b1a      	ldr	r3, [pc, #104]	@ (8014998 <tcp_rst+0x94>)
 801492e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8014932:	491c      	ldr	r1, [pc, #112]	@ (80149a4 <tcp_rst+0xa0>)
 8014934:	481a      	ldr	r0, [pc, #104]	@ (80149a0 <tcp_rst+0x9c>)
 8014936:	f010 fdc7 	bl	80254c8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801493a:	2300      	movs	r3, #0
 801493c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801493e:	f246 0308 	movw	r3, #24584	@ 0x6008
 8014942:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014944:	7dfb      	ldrb	r3, [r7, #23]
 8014946:	b29c      	uxth	r4, r3
 8014948:	68b8      	ldr	r0, [r7, #8]
 801494a:	f7f8 fadf 	bl	800cf0c <lwip_htonl>
 801494e:	4602      	mov	r2, r0
 8014950:	8abb      	ldrh	r3, [r7, #20]
 8014952:	9303      	str	r3, [sp, #12]
 8014954:	2314      	movs	r3, #20
 8014956:	9302      	str	r3, [sp, #8]
 8014958:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801495a:	9301      	str	r3, [sp, #4]
 801495c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801495e:	9300      	str	r3, [sp, #0]
 8014960:	4613      	mov	r3, r2
 8014962:	2200      	movs	r2, #0
 8014964:	4621      	mov	r1, r4
 8014966:	6878      	ldr	r0, [r7, #4]
 8014968:	f7ff fe94 	bl	8014694 <tcp_output_alloc_header_common>
 801496c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801496e:	693b      	ldr	r3, [r7, #16]
 8014970:	2b00      	cmp	r3, #0
 8014972:	d00c      	beq.n	801498e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014974:	7dfb      	ldrb	r3, [r7, #23]
 8014976:	2200      	movs	r2, #0
 8014978:	6939      	ldr	r1, [r7, #16]
 801497a:	68f8      	ldr	r0, [r7, #12]
 801497c:	f7ff ff3a 	bl	80147f4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014982:	683a      	ldr	r2, [r7, #0]
 8014984:	6939      	ldr	r1, [r7, #16]
 8014986:	68f8      	ldr	r0, [r7, #12]
 8014988:	f7ff ff72 	bl	8014870 <tcp_output_control_segment>
 801498c:	e000      	b.n	8014990 <tcp_rst+0x8c>
    return;
 801498e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014990:	371c      	adds	r7, #28
 8014992:	46bd      	mov	sp, r7
 8014994:	bd90      	pop	{r4, r7, pc}
 8014996:	bf00      	nop
 8014998:	08028db8 	.word	0x08028db8
 801499c:	0802953c 	.word	0x0802953c
 80149a0:	08028e0c 	.word	0x08028e0c
 80149a4:	08029558 	.word	0x08029558

080149a8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80149a8:	b590      	push	{r4, r7, lr}
 80149aa:	b087      	sub	sp, #28
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80149b0:	2300      	movs	r3, #0
 80149b2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80149b4:	2300      	movs	r3, #0
 80149b6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d106      	bne.n	80149cc <tcp_send_empty_ack+0x24>
 80149be:	4b28      	ldr	r3, [pc, #160]	@ (8014a60 <tcp_send_empty_ack+0xb8>)
 80149c0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80149c4:	4927      	ldr	r1, [pc, #156]	@ (8014a64 <tcp_send_empty_ack+0xbc>)
 80149c6:	4828      	ldr	r0, [pc, #160]	@ (8014a68 <tcp_send_empty_ack+0xc0>)
 80149c8:	f010 fd7e 	bl	80254c8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80149cc:	7dfb      	ldrb	r3, [r7, #23]
 80149ce:	009b      	lsls	r3, r3, #2
 80149d0:	b2db      	uxtb	r3, r3
 80149d2:	f003 0304 	and.w	r3, r3, #4
 80149d6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80149d8:	7d7b      	ldrb	r3, [r7, #21]
 80149da:	b29c      	uxth	r4, r3
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80149e0:	4618      	mov	r0, r3
 80149e2:	f7f8 fa93 	bl	800cf0c <lwip_htonl>
 80149e6:	4603      	mov	r3, r0
 80149e8:	2200      	movs	r2, #0
 80149ea:	4621      	mov	r1, r4
 80149ec:	6878      	ldr	r0, [r7, #4]
 80149ee:	f7ff fec3 	bl	8014778 <tcp_output_alloc_header>
 80149f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80149f4:	693b      	ldr	r3, [r7, #16]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d109      	bne.n	8014a0e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	8b5b      	ldrh	r3, [r3, #26]
 80149fe:	f043 0303 	orr.w	r3, r3, #3
 8014a02:	b29a      	uxth	r2, r3
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014a08:	f06f 0301 	mvn.w	r3, #1
 8014a0c:	e023      	b.n	8014a56 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014a0e:	7dbb      	ldrb	r3, [r7, #22]
 8014a10:	7dfa      	ldrb	r2, [r7, #23]
 8014a12:	6939      	ldr	r1, [r7, #16]
 8014a14:	6878      	ldr	r0, [r7, #4]
 8014a16:	f7ff feed 	bl	80147f4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014a1a:	687a      	ldr	r2, [r7, #4]
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	3304      	adds	r3, #4
 8014a20:	6939      	ldr	r1, [r7, #16]
 8014a22:	6878      	ldr	r0, [r7, #4]
 8014a24:	f7ff ff24 	bl	8014870 <tcp_output_control_segment>
 8014a28:	4603      	mov	r3, r0
 8014a2a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d007      	beq.n	8014a44 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	8b5b      	ldrh	r3, [r3, #26]
 8014a38:	f043 0303 	orr.w	r3, r3, #3
 8014a3c:	b29a      	uxth	r2, r3
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	835a      	strh	r2, [r3, #26]
 8014a42:	e006      	b.n	8014a52 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	8b5b      	ldrh	r3, [r3, #26]
 8014a48:	f023 0303 	bic.w	r3, r3, #3
 8014a4c:	b29a      	uxth	r2, r3
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014a56:	4618      	mov	r0, r3
 8014a58:	371c      	adds	r7, #28
 8014a5a:	46bd      	mov	sp, r7
 8014a5c:	bd90      	pop	{r4, r7, pc}
 8014a5e:	bf00      	nop
 8014a60:	08028db8 	.word	0x08028db8
 8014a64:	08029574 	.word	0x08029574
 8014a68:	08028e0c 	.word	0x08028e0c

08014a6c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014a6c:	b590      	push	{r4, r7, lr}
 8014a6e:	b087      	sub	sp, #28
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014a74:	2300      	movs	r3, #0
 8014a76:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d106      	bne.n	8014a8c <tcp_keepalive+0x20>
 8014a7e:	4b18      	ldr	r3, [pc, #96]	@ (8014ae0 <tcp_keepalive+0x74>)
 8014a80:	f640 0224 	movw	r2, #2084	@ 0x824
 8014a84:	4917      	ldr	r1, [pc, #92]	@ (8014ae4 <tcp_keepalive+0x78>)
 8014a86:	4818      	ldr	r0, [pc, #96]	@ (8014ae8 <tcp_keepalive+0x7c>)
 8014a88:	f010 fd1e 	bl	80254c8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014a8c:	7dfb      	ldrb	r3, [r7, #23]
 8014a8e:	b29c      	uxth	r4, r3
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014a94:	3b01      	subs	r3, #1
 8014a96:	4618      	mov	r0, r3
 8014a98:	f7f8 fa38 	bl	800cf0c <lwip_htonl>
 8014a9c:	4603      	mov	r3, r0
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	4621      	mov	r1, r4
 8014aa2:	6878      	ldr	r0, [r7, #4]
 8014aa4:	f7ff fe68 	bl	8014778 <tcp_output_alloc_header>
 8014aa8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014aaa:	693b      	ldr	r3, [r7, #16]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d102      	bne.n	8014ab6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8014ab4:	e010      	b.n	8014ad8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014ab6:	7dfb      	ldrb	r3, [r7, #23]
 8014ab8:	2200      	movs	r2, #0
 8014aba:	6939      	ldr	r1, [r7, #16]
 8014abc:	6878      	ldr	r0, [r7, #4]
 8014abe:	f7ff fe99 	bl	80147f4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014ac2:	687a      	ldr	r2, [r7, #4]
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	3304      	adds	r3, #4
 8014ac8:	6939      	ldr	r1, [r7, #16]
 8014aca:	6878      	ldr	r0, [r7, #4]
 8014acc:	f7ff fed0 	bl	8014870 <tcp_output_control_segment>
 8014ad0:	4603      	mov	r3, r0
 8014ad2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014ad8:	4618      	mov	r0, r3
 8014ada:	371c      	adds	r7, #28
 8014adc:	46bd      	mov	sp, r7
 8014ade:	bd90      	pop	{r4, r7, pc}
 8014ae0:	08028db8 	.word	0x08028db8
 8014ae4:	08029594 	.word	0x08029594
 8014ae8:	08028e0c 	.word	0x08028e0c

08014aec <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014aec:	b590      	push	{r4, r7, lr}
 8014aee:	b08b      	sub	sp, #44	@ 0x2c
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014af4:	2300      	movs	r3, #0
 8014af6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d106      	bne.n	8014b0e <tcp_zero_window_probe+0x22>
 8014b00:	4b4c      	ldr	r3, [pc, #304]	@ (8014c34 <tcp_zero_window_probe+0x148>)
 8014b02:	f640 024f 	movw	r2, #2127	@ 0x84f
 8014b06:	494c      	ldr	r1, [pc, #304]	@ (8014c38 <tcp_zero_window_probe+0x14c>)
 8014b08:	484c      	ldr	r0, [pc, #304]	@ (8014c3c <tcp_zero_window_probe+0x150>)
 8014b0a:	f010 fcdd 	bl	80254c8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014b12:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014b14:	6a3b      	ldr	r3, [r7, #32]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d101      	bne.n	8014b1e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	e086      	b.n	8014c2c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8014b24:	2bff      	cmp	r3, #255	@ 0xff
 8014b26:	d007      	beq.n	8014b38 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8014b2e:	3301      	adds	r3, #1
 8014b30:	b2da      	uxtb	r2, r3
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014b38:	6a3b      	ldr	r3, [r7, #32]
 8014b3a:	68db      	ldr	r3, [r3, #12]
 8014b3c:	899b      	ldrh	r3, [r3, #12]
 8014b3e:	b29b      	uxth	r3, r3
 8014b40:	4618      	mov	r0, r3
 8014b42:	f7f8 f9cd 	bl	800cee0 <lwip_htons>
 8014b46:	4603      	mov	r3, r0
 8014b48:	b2db      	uxtb	r3, r3
 8014b4a:	f003 0301 	and.w	r3, r3, #1
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d005      	beq.n	8014b5e <tcp_zero_window_probe+0x72>
 8014b52:	6a3b      	ldr	r3, [r7, #32]
 8014b54:	891b      	ldrh	r3, [r3, #8]
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d101      	bne.n	8014b5e <tcp_zero_window_probe+0x72>
 8014b5a:	2301      	movs	r3, #1
 8014b5c:	e000      	b.n	8014b60 <tcp_zero_window_probe+0x74>
 8014b5e:	2300      	movs	r3, #0
 8014b60:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014b62:	7ffb      	ldrb	r3, [r7, #31]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	bf0c      	ite	eq
 8014b68:	2301      	moveq	r3, #1
 8014b6a:	2300      	movne	r3, #0
 8014b6c:	b2db      	uxtb	r3, r3
 8014b6e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014b70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014b74:	b299      	uxth	r1, r3
 8014b76:	6a3b      	ldr	r3, [r7, #32]
 8014b78:	68db      	ldr	r3, [r3, #12]
 8014b7a:	685b      	ldr	r3, [r3, #4]
 8014b7c:	8bba      	ldrh	r2, [r7, #28]
 8014b7e:	6878      	ldr	r0, [r7, #4]
 8014b80:	f7ff fdfa 	bl	8014778 <tcp_output_alloc_header>
 8014b84:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014b86:	69bb      	ldr	r3, [r7, #24]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d102      	bne.n	8014b92 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8014b90:	e04c      	b.n	8014c2c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014b92:	69bb      	ldr	r3, [r7, #24]
 8014b94:	685b      	ldr	r3, [r3, #4]
 8014b96:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014b98:	7ffb      	ldrb	r3, [r7, #31]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d011      	beq.n	8014bc2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014b9e:	697b      	ldr	r3, [r7, #20]
 8014ba0:	899b      	ldrh	r3, [r3, #12]
 8014ba2:	b29b      	uxth	r3, r3
 8014ba4:	b21b      	sxth	r3, r3
 8014ba6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8014baa:	b21c      	sxth	r4, r3
 8014bac:	2011      	movs	r0, #17
 8014bae:	f7f8 f997 	bl	800cee0 <lwip_htons>
 8014bb2:	4603      	mov	r3, r0
 8014bb4:	b21b      	sxth	r3, r3
 8014bb6:	4323      	orrs	r3, r4
 8014bb8:	b21b      	sxth	r3, r3
 8014bba:	b29a      	uxth	r2, r3
 8014bbc:	697b      	ldr	r3, [r7, #20]
 8014bbe:	819a      	strh	r2, [r3, #12]
 8014bc0:	e010      	b.n	8014be4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014bc2:	69bb      	ldr	r3, [r7, #24]
 8014bc4:	685b      	ldr	r3, [r3, #4]
 8014bc6:	3314      	adds	r3, #20
 8014bc8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014bca:	6a3b      	ldr	r3, [r7, #32]
 8014bcc:	6858      	ldr	r0, [r3, #4]
 8014bce:	6a3b      	ldr	r3, [r7, #32]
 8014bd0:	685b      	ldr	r3, [r3, #4]
 8014bd2:	891a      	ldrh	r2, [r3, #8]
 8014bd4:	6a3b      	ldr	r3, [r7, #32]
 8014bd6:	891b      	ldrh	r3, [r3, #8]
 8014bd8:	1ad3      	subs	r3, r2, r3
 8014bda:	b29b      	uxth	r3, r3
 8014bdc:	2201      	movs	r2, #1
 8014bde:	6939      	ldr	r1, [r7, #16]
 8014be0:	f7f9 ffdc 	bl	800eb9c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014be4:	6a3b      	ldr	r3, [r7, #32]
 8014be6:	68db      	ldr	r3, [r3, #12]
 8014be8:	685b      	ldr	r3, [r3, #4]
 8014bea:	4618      	mov	r0, r3
 8014bec:	f7f8 f98e 	bl	800cf0c <lwip_htonl>
 8014bf0:	4603      	mov	r3, r0
 8014bf2:	3301      	adds	r3, #1
 8014bf4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	1ad3      	subs	r3, r2, r3
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	da02      	bge.n	8014c08 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	68fa      	ldr	r2, [r7, #12]
 8014c06:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014c08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014c0c:	2200      	movs	r2, #0
 8014c0e:	69b9      	ldr	r1, [r7, #24]
 8014c10:	6878      	ldr	r0, [r7, #4]
 8014c12:	f7ff fdef 	bl	80147f4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014c16:	687a      	ldr	r2, [r7, #4]
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	3304      	adds	r3, #4
 8014c1c:	69b9      	ldr	r1, [r7, #24]
 8014c1e:	6878      	ldr	r0, [r7, #4]
 8014c20:	f7ff fe26 	bl	8014870 <tcp_output_control_segment>
 8014c24:	4603      	mov	r3, r0
 8014c26:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014c28:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	372c      	adds	r7, #44	@ 0x2c
 8014c30:	46bd      	mov	sp, r7
 8014c32:	bd90      	pop	{r4, r7, pc}
 8014c34:	08028db8 	.word	0x08028db8
 8014c38:	080295b0 	.word	0x080295b0
 8014c3c:	08028e0c 	.word	0x08028e0c

08014c40 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014c40:	b580      	push	{r7, lr}
 8014c42:	b082      	sub	sp, #8
 8014c44:	af00      	add	r7, sp, #0
 8014c46:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014c48:	f7fa f896 	bl	800ed78 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8014c78 <tcpip_tcp_timer+0x38>)
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d103      	bne.n	8014c5c <tcpip_tcp_timer+0x1c>
 8014c54:	4b09      	ldr	r3, [pc, #36]	@ (8014c7c <tcpip_tcp_timer+0x3c>)
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d005      	beq.n	8014c68 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014c5c:	2200      	movs	r2, #0
 8014c5e:	4908      	ldr	r1, [pc, #32]	@ (8014c80 <tcpip_tcp_timer+0x40>)
 8014c60:	20fa      	movs	r0, #250	@ 0xfa
 8014c62:	f000 f8f3 	bl	8014e4c <sys_timeout>
 8014c66:	e003      	b.n	8014c70 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014c68:	4b06      	ldr	r3, [pc, #24]	@ (8014c84 <tcpip_tcp_timer+0x44>)
 8014c6a:	2200      	movs	r2, #0
 8014c6c:	601a      	str	r2, [r3, #0]
  }
}
 8014c6e:	bf00      	nop
 8014c70:	bf00      	nop
 8014c72:	3708      	adds	r7, #8
 8014c74:	46bd      	mov	sp, r7
 8014c76:	bd80      	pop	{r7, pc}
 8014c78:	2000fe8c 	.word	0x2000fe8c
 8014c7c:	2000fe90 	.word	0x2000fe90
 8014c80:	08014c41 	.word	0x08014c41
 8014c84:	2000fed8 	.word	0x2000fed8

08014c88 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014c88:	b580      	push	{r7, lr}
 8014c8a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8014cb8 <tcp_timer_needed+0x30>)
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d10f      	bne.n	8014cb4 <tcp_timer_needed+0x2c>
 8014c94:	4b09      	ldr	r3, [pc, #36]	@ (8014cbc <tcp_timer_needed+0x34>)
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d103      	bne.n	8014ca4 <tcp_timer_needed+0x1c>
 8014c9c:	4b08      	ldr	r3, [pc, #32]	@ (8014cc0 <tcp_timer_needed+0x38>)
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d007      	beq.n	8014cb4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014ca4:	4b04      	ldr	r3, [pc, #16]	@ (8014cb8 <tcp_timer_needed+0x30>)
 8014ca6:	2201      	movs	r2, #1
 8014ca8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014caa:	2200      	movs	r2, #0
 8014cac:	4905      	ldr	r1, [pc, #20]	@ (8014cc4 <tcp_timer_needed+0x3c>)
 8014cae:	20fa      	movs	r0, #250	@ 0xfa
 8014cb0:	f000 f8cc 	bl	8014e4c <sys_timeout>
  }
}
 8014cb4:	bf00      	nop
 8014cb6:	bd80      	pop	{r7, pc}
 8014cb8:	2000fed8 	.word	0x2000fed8
 8014cbc:	2000fe8c 	.word	0x2000fe8c
 8014cc0:	2000fe90 	.word	0x2000fe90
 8014cc4:	08014c41 	.word	0x08014c41

08014cc8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b086      	sub	sp, #24
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	60f8      	str	r0, [r7, #12]
 8014cd0:	60b9      	str	r1, [r7, #8]
 8014cd2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014cd4:	200a      	movs	r0, #10
 8014cd6:	f7f8 fdd7 	bl	800d888 <memp_malloc>
 8014cda:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014cdc:	693b      	ldr	r3, [r7, #16]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d109      	bne.n	8014cf6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014ce2:	693b      	ldr	r3, [r7, #16]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d151      	bne.n	8014d8c <sys_timeout_abs+0xc4>
 8014ce8:	4b2a      	ldr	r3, [pc, #168]	@ (8014d94 <sys_timeout_abs+0xcc>)
 8014cea:	22be      	movs	r2, #190	@ 0xbe
 8014cec:	492a      	ldr	r1, [pc, #168]	@ (8014d98 <sys_timeout_abs+0xd0>)
 8014cee:	482b      	ldr	r0, [pc, #172]	@ (8014d9c <sys_timeout_abs+0xd4>)
 8014cf0:	f010 fbea 	bl	80254c8 <iprintf>
    return;
 8014cf4:	e04a      	b.n	8014d8c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014cf6:	693b      	ldr	r3, [r7, #16]
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014cfc:	693b      	ldr	r3, [r7, #16]
 8014cfe:	68ba      	ldr	r2, [r7, #8]
 8014d00:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014d02:	693b      	ldr	r3, [r7, #16]
 8014d04:	687a      	ldr	r2, [r7, #4]
 8014d06:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014d08:	693b      	ldr	r3, [r7, #16]
 8014d0a:	68fa      	ldr	r2, [r7, #12]
 8014d0c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014d0e:	4b24      	ldr	r3, [pc, #144]	@ (8014da0 <sys_timeout_abs+0xd8>)
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d103      	bne.n	8014d1e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014d16:	4a22      	ldr	r2, [pc, #136]	@ (8014da0 <sys_timeout_abs+0xd8>)
 8014d18:	693b      	ldr	r3, [r7, #16]
 8014d1a:	6013      	str	r3, [r2, #0]
    return;
 8014d1c:	e037      	b.n	8014d8e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014d1e:	693b      	ldr	r3, [r7, #16]
 8014d20:	685a      	ldr	r2, [r3, #4]
 8014d22:	4b1f      	ldr	r3, [pc, #124]	@ (8014da0 <sys_timeout_abs+0xd8>)
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	685b      	ldr	r3, [r3, #4]
 8014d28:	1ad3      	subs	r3, r2, r3
 8014d2a:	0fdb      	lsrs	r3, r3, #31
 8014d2c:	f003 0301 	and.w	r3, r3, #1
 8014d30:	b2db      	uxtb	r3, r3
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d007      	beq.n	8014d46 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014d36:	4b1a      	ldr	r3, [pc, #104]	@ (8014da0 <sys_timeout_abs+0xd8>)
 8014d38:	681a      	ldr	r2, [r3, #0]
 8014d3a:	693b      	ldr	r3, [r7, #16]
 8014d3c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014d3e:	4a18      	ldr	r2, [pc, #96]	@ (8014da0 <sys_timeout_abs+0xd8>)
 8014d40:	693b      	ldr	r3, [r7, #16]
 8014d42:	6013      	str	r3, [r2, #0]
 8014d44:	e023      	b.n	8014d8e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014d46:	4b16      	ldr	r3, [pc, #88]	@ (8014da0 <sys_timeout_abs+0xd8>)
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	617b      	str	r3, [r7, #20]
 8014d4c:	e01a      	b.n	8014d84 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014d4e:	697b      	ldr	r3, [r7, #20]
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d00b      	beq.n	8014d6e <sys_timeout_abs+0xa6>
 8014d56:	693b      	ldr	r3, [r7, #16]
 8014d58:	685a      	ldr	r2, [r3, #4]
 8014d5a:	697b      	ldr	r3, [r7, #20]
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	685b      	ldr	r3, [r3, #4]
 8014d60:	1ad3      	subs	r3, r2, r3
 8014d62:	0fdb      	lsrs	r3, r3, #31
 8014d64:	f003 0301 	and.w	r3, r3, #1
 8014d68:	b2db      	uxtb	r3, r3
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d007      	beq.n	8014d7e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014d6e:	697b      	ldr	r3, [r7, #20]
 8014d70:	681a      	ldr	r2, [r3, #0]
 8014d72:	693b      	ldr	r3, [r7, #16]
 8014d74:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014d76:	697b      	ldr	r3, [r7, #20]
 8014d78:	693a      	ldr	r2, [r7, #16]
 8014d7a:	601a      	str	r2, [r3, #0]
        break;
 8014d7c:	e007      	b.n	8014d8e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014d7e:	697b      	ldr	r3, [r7, #20]
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	617b      	str	r3, [r7, #20]
 8014d84:	697b      	ldr	r3, [r7, #20]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d1e1      	bne.n	8014d4e <sys_timeout_abs+0x86>
 8014d8a:	e000      	b.n	8014d8e <sys_timeout_abs+0xc6>
    return;
 8014d8c:	bf00      	nop
      }
    }
  }
}
 8014d8e:	3718      	adds	r7, #24
 8014d90:	46bd      	mov	sp, r7
 8014d92:	bd80      	pop	{r7, pc}
 8014d94:	080295d4 	.word	0x080295d4
 8014d98:	08029608 	.word	0x08029608
 8014d9c:	08029648 	.word	0x08029648
 8014da0:	2000fed0 	.word	0x2000fed0

08014da4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	b086      	sub	sp, #24
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014db0:	697b      	ldr	r3, [r7, #20]
 8014db2:	685b      	ldr	r3, [r3, #4]
 8014db4:	4798      	blx	r3

  now = sys_now();
 8014db6:	f7f0 ffdd 	bl	8005d74 <sys_now>
 8014dba:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014dbc:	697b      	ldr	r3, [r7, #20]
 8014dbe:	681a      	ldr	r2, [r3, #0]
 8014dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8014e00 <lwip_cyclic_timer+0x5c>)
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	4413      	add	r3, r2
 8014dc6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014dc8:	68fa      	ldr	r2, [r7, #12]
 8014dca:	693b      	ldr	r3, [r7, #16]
 8014dcc:	1ad3      	subs	r3, r2, r3
 8014dce:	0fdb      	lsrs	r3, r3, #31
 8014dd0:	f003 0301 	and.w	r3, r3, #1
 8014dd4:	b2db      	uxtb	r3, r3
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d009      	beq.n	8014dee <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014dda:	697b      	ldr	r3, [r7, #20]
 8014ddc:	681a      	ldr	r2, [r3, #0]
 8014dde:	693b      	ldr	r3, [r7, #16]
 8014de0:	4413      	add	r3, r2
 8014de2:	687a      	ldr	r2, [r7, #4]
 8014de4:	4907      	ldr	r1, [pc, #28]	@ (8014e04 <lwip_cyclic_timer+0x60>)
 8014de6:	4618      	mov	r0, r3
 8014de8:	f7ff ff6e 	bl	8014cc8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014dec:	e004      	b.n	8014df8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014dee:	687a      	ldr	r2, [r7, #4]
 8014df0:	4904      	ldr	r1, [pc, #16]	@ (8014e04 <lwip_cyclic_timer+0x60>)
 8014df2:	68f8      	ldr	r0, [r7, #12]
 8014df4:	f7ff ff68 	bl	8014cc8 <sys_timeout_abs>
}
 8014df8:	bf00      	nop
 8014dfa:	3718      	adds	r7, #24
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	bd80      	pop	{r7, pc}
 8014e00:	2000fed4 	.word	0x2000fed4
 8014e04:	08014da5 	.word	0x08014da5

08014e08 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b082      	sub	sp, #8
 8014e0c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014e0e:	2301      	movs	r3, #1
 8014e10:	607b      	str	r3, [r7, #4]
 8014e12:	e00e      	b.n	8014e32 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014e14:	4a0b      	ldr	r2, [pc, #44]	@ (8014e44 <sys_timeouts_init+0x3c>)
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	00db      	lsls	r3, r3, #3
 8014e20:	4a08      	ldr	r2, [pc, #32]	@ (8014e44 <sys_timeouts_init+0x3c>)
 8014e22:	4413      	add	r3, r2
 8014e24:	461a      	mov	r2, r3
 8014e26:	4908      	ldr	r1, [pc, #32]	@ (8014e48 <sys_timeouts_init+0x40>)
 8014e28:	f000 f810 	bl	8014e4c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	3301      	adds	r3, #1
 8014e30:	607b      	str	r3, [r7, #4]
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	2b02      	cmp	r3, #2
 8014e36:	d9ed      	bls.n	8014e14 <sys_timeouts_init+0xc>
  }
}
 8014e38:	bf00      	nop
 8014e3a:	bf00      	nop
 8014e3c:	3708      	adds	r7, #8
 8014e3e:	46bd      	mov	sp, r7
 8014e40:	bd80      	pop	{r7, pc}
 8014e42:	bf00      	nop
 8014e44:	0802a2d4 	.word	0x0802a2d4
 8014e48:	08014da5 	.word	0x08014da5

08014e4c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014e4c:	b580      	push	{r7, lr}
 8014e4e:	b086      	sub	sp, #24
 8014e50:	af00      	add	r7, sp, #0
 8014e52:	60f8      	str	r0, [r7, #12]
 8014e54:	60b9      	str	r1, [r7, #8]
 8014e56:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014e5e:	d306      	bcc.n	8014e6e <sys_timeout+0x22>
 8014e60:	4b0a      	ldr	r3, [pc, #40]	@ (8014e8c <sys_timeout+0x40>)
 8014e62:	f240 1229 	movw	r2, #297	@ 0x129
 8014e66:	490a      	ldr	r1, [pc, #40]	@ (8014e90 <sys_timeout+0x44>)
 8014e68:	480a      	ldr	r0, [pc, #40]	@ (8014e94 <sys_timeout+0x48>)
 8014e6a:	f010 fb2d 	bl	80254c8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014e6e:	f7f0 ff81 	bl	8005d74 <sys_now>
 8014e72:	4602      	mov	r2, r0
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	4413      	add	r3, r2
 8014e78:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014e7a:	687a      	ldr	r2, [r7, #4]
 8014e7c:	68b9      	ldr	r1, [r7, #8]
 8014e7e:	6978      	ldr	r0, [r7, #20]
 8014e80:	f7ff ff22 	bl	8014cc8 <sys_timeout_abs>
#endif
}
 8014e84:	bf00      	nop
 8014e86:	3718      	adds	r7, #24
 8014e88:	46bd      	mov	sp, r7
 8014e8a:	bd80      	pop	{r7, pc}
 8014e8c:	080295d4 	.word	0x080295d4
 8014e90:	08029670 	.word	0x08029670
 8014e94:	08029648 	.word	0x08029648

08014e98 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	b084      	sub	sp, #16
 8014e9c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014e9e:	f7f0 ff69 	bl	8005d74 <sys_now>
 8014ea2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014ea4:	4b17      	ldr	r3, [pc, #92]	@ (8014f04 <sys_check_timeouts+0x6c>)
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014eaa:	68bb      	ldr	r3, [r7, #8]
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d022      	beq.n	8014ef6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014eb0:	68bb      	ldr	r3, [r7, #8]
 8014eb2:	685b      	ldr	r3, [r3, #4]
 8014eb4:	68fa      	ldr	r2, [r7, #12]
 8014eb6:	1ad3      	subs	r3, r2, r3
 8014eb8:	0fdb      	lsrs	r3, r3, #31
 8014eba:	f003 0301 	and.w	r3, r3, #1
 8014ebe:	b2db      	uxtb	r3, r3
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d11a      	bne.n	8014efa <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014ec4:	68bb      	ldr	r3, [r7, #8]
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	4a0e      	ldr	r2, [pc, #56]	@ (8014f04 <sys_check_timeouts+0x6c>)
 8014eca:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014ecc:	68bb      	ldr	r3, [r7, #8]
 8014ece:	689b      	ldr	r3, [r3, #8]
 8014ed0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014ed2:	68bb      	ldr	r3, [r7, #8]
 8014ed4:	68db      	ldr	r3, [r3, #12]
 8014ed6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014ed8:	68bb      	ldr	r3, [r7, #8]
 8014eda:	685b      	ldr	r3, [r3, #4]
 8014edc:	4a0a      	ldr	r2, [pc, #40]	@ (8014f08 <sys_check_timeouts+0x70>)
 8014ede:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014ee0:	68b9      	ldr	r1, [r7, #8]
 8014ee2:	200a      	movs	r0, #10
 8014ee4:	f7f8 fd46 	bl	800d974 <memp_free>
    if (handler != NULL) {
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d0da      	beq.n	8014ea4 <sys_check_timeouts+0xc>
      handler(arg);
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	6838      	ldr	r0, [r7, #0]
 8014ef2:	4798      	blx	r3
  do {
 8014ef4:	e7d6      	b.n	8014ea4 <sys_check_timeouts+0xc>
      return;
 8014ef6:	bf00      	nop
 8014ef8:	e000      	b.n	8014efc <sys_check_timeouts+0x64>
      return;
 8014efa:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014efc:	3710      	adds	r7, #16
 8014efe:	46bd      	mov	sp, r7
 8014f00:	bd80      	pop	{r7, pc}
 8014f02:	bf00      	nop
 8014f04:	2000fed0 	.word	0x2000fed0
 8014f08:	2000fed4 	.word	0x2000fed4

08014f0c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	b082      	sub	sp, #8
 8014f10:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014f12:	4b16      	ldr	r3, [pc, #88]	@ (8014f6c <sys_timeouts_sleeptime+0x60>)
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d102      	bne.n	8014f20 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8014f1e:	e020      	b.n	8014f62 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014f20:	f7f0 ff28 	bl	8005d74 <sys_now>
 8014f24:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014f26:	4b11      	ldr	r3, [pc, #68]	@ (8014f6c <sys_timeouts_sleeptime+0x60>)
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	685a      	ldr	r2, [r3, #4]
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	1ad3      	subs	r3, r2, r3
 8014f30:	0fdb      	lsrs	r3, r3, #31
 8014f32:	f003 0301 	and.w	r3, r3, #1
 8014f36:	b2db      	uxtb	r3, r3
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d001      	beq.n	8014f40 <sys_timeouts_sleeptime+0x34>
    return 0;
 8014f3c:	2300      	movs	r3, #0
 8014f3e:	e010      	b.n	8014f62 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014f40:	4b0a      	ldr	r3, [pc, #40]	@ (8014f6c <sys_timeouts_sleeptime+0x60>)
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	685a      	ldr	r2, [r3, #4]
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	1ad3      	subs	r3, r2, r3
 8014f4a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014f4c:	683b      	ldr	r3, [r7, #0]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	da06      	bge.n	8014f60 <sys_timeouts_sleeptime+0x54>
 8014f52:	4b07      	ldr	r3, [pc, #28]	@ (8014f70 <sys_timeouts_sleeptime+0x64>)
 8014f54:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8014f58:	4906      	ldr	r1, [pc, #24]	@ (8014f74 <sys_timeouts_sleeptime+0x68>)
 8014f5a:	4807      	ldr	r0, [pc, #28]	@ (8014f78 <sys_timeouts_sleeptime+0x6c>)
 8014f5c:	f010 fab4 	bl	80254c8 <iprintf>
    return ret;
 8014f60:	683b      	ldr	r3, [r7, #0]
  }
}
 8014f62:	4618      	mov	r0, r3
 8014f64:	3708      	adds	r7, #8
 8014f66:	46bd      	mov	sp, r7
 8014f68:	bd80      	pop	{r7, pc}
 8014f6a:	bf00      	nop
 8014f6c:	2000fed0 	.word	0x2000fed0
 8014f70:	080295d4 	.word	0x080295d4
 8014f74:	080296a8 	.word	0x080296a8
 8014f78:	08029648 	.word	0x08029648

08014f7c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014f80:	f010 f816 	bl	8024fb0 <rand>
 8014f84:	4603      	mov	r3, r0
 8014f86:	b29b      	uxth	r3, r3
 8014f88:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014f8c:	b29b      	uxth	r3, r3
 8014f8e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8014f92:	b29a      	uxth	r2, r3
 8014f94:	4b01      	ldr	r3, [pc, #4]	@ (8014f9c <udp_init+0x20>)
 8014f96:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014f98:	bf00      	nop
 8014f9a:	bd80      	pop	{r7, pc}
 8014f9c:	20000034 	.word	0x20000034

08014fa0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8014fa0:	b480      	push	{r7}
 8014fa2:	b083      	sub	sp, #12
 8014fa4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8014fa6:	2300      	movs	r3, #0
 8014fa8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8014faa:	4b17      	ldr	r3, [pc, #92]	@ (8015008 <udp_new_port+0x68>)
 8014fac:	881b      	ldrh	r3, [r3, #0]
 8014fae:	1c5a      	adds	r2, r3, #1
 8014fb0:	b291      	uxth	r1, r2
 8014fb2:	4a15      	ldr	r2, [pc, #84]	@ (8015008 <udp_new_port+0x68>)
 8014fb4:	8011      	strh	r1, [r2, #0]
 8014fb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014fba:	4293      	cmp	r3, r2
 8014fbc:	d103      	bne.n	8014fc6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8014fbe:	4b12      	ldr	r3, [pc, #72]	@ (8015008 <udp_new_port+0x68>)
 8014fc0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8014fc4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014fc6:	4b11      	ldr	r3, [pc, #68]	@ (801500c <udp_new_port+0x6c>)
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	603b      	str	r3, [r7, #0]
 8014fcc:	e011      	b.n	8014ff2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8014fce:	683b      	ldr	r3, [r7, #0]
 8014fd0:	8a5a      	ldrh	r2, [r3, #18]
 8014fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8015008 <udp_new_port+0x68>)
 8014fd4:	881b      	ldrh	r3, [r3, #0]
 8014fd6:	429a      	cmp	r2, r3
 8014fd8:	d108      	bne.n	8014fec <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8014fda:	88fb      	ldrh	r3, [r7, #6]
 8014fdc:	3301      	adds	r3, #1
 8014fde:	80fb      	strh	r3, [r7, #6]
 8014fe0:	88fb      	ldrh	r3, [r7, #6]
 8014fe2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014fe6:	d3e0      	bcc.n	8014faa <udp_new_port+0xa>
        return 0;
 8014fe8:	2300      	movs	r3, #0
 8014fea:	e007      	b.n	8014ffc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014fec:	683b      	ldr	r3, [r7, #0]
 8014fee:	68db      	ldr	r3, [r3, #12]
 8014ff0:	603b      	str	r3, [r7, #0]
 8014ff2:	683b      	ldr	r3, [r7, #0]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d1ea      	bne.n	8014fce <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8014ff8:	4b03      	ldr	r3, [pc, #12]	@ (8015008 <udp_new_port+0x68>)
 8014ffa:	881b      	ldrh	r3, [r3, #0]
}
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	370c      	adds	r7, #12
 8015000:	46bd      	mov	sp, r7
 8015002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015006:	4770      	bx	lr
 8015008:	20000034 	.word	0x20000034
 801500c:	2000fedc 	.word	0x2000fedc

08015010 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015010:	b580      	push	{r7, lr}
 8015012:	b084      	sub	sp, #16
 8015014:	af00      	add	r7, sp, #0
 8015016:	60f8      	str	r0, [r7, #12]
 8015018:	60b9      	str	r1, [r7, #8]
 801501a:	4613      	mov	r3, r2
 801501c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	2b00      	cmp	r3, #0
 8015022:	d105      	bne.n	8015030 <udp_input_local_match+0x20>
 8015024:	4b27      	ldr	r3, [pc, #156]	@ (80150c4 <udp_input_local_match+0xb4>)
 8015026:	2287      	movs	r2, #135	@ 0x87
 8015028:	4927      	ldr	r1, [pc, #156]	@ (80150c8 <udp_input_local_match+0xb8>)
 801502a:	4828      	ldr	r0, [pc, #160]	@ (80150cc <udp_input_local_match+0xbc>)
 801502c:	f010 fa4c 	bl	80254c8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8015030:	68bb      	ldr	r3, [r7, #8]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d105      	bne.n	8015042 <udp_input_local_match+0x32>
 8015036:	4b23      	ldr	r3, [pc, #140]	@ (80150c4 <udp_input_local_match+0xb4>)
 8015038:	2288      	movs	r2, #136	@ 0x88
 801503a:	4925      	ldr	r1, [pc, #148]	@ (80150d0 <udp_input_local_match+0xc0>)
 801503c:	4823      	ldr	r0, [pc, #140]	@ (80150cc <udp_input_local_match+0xbc>)
 801503e:	f010 fa43 	bl	80254c8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	7a1b      	ldrb	r3, [r3, #8]
 8015046:	2b00      	cmp	r3, #0
 8015048:	d00b      	beq.n	8015062 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	7a1a      	ldrb	r2, [r3, #8]
 801504e:	4b21      	ldr	r3, [pc, #132]	@ (80150d4 <udp_input_local_match+0xc4>)
 8015050:	685b      	ldr	r3, [r3, #4]
 8015052:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015056:	3301      	adds	r3, #1
 8015058:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801505a:	429a      	cmp	r2, r3
 801505c:	d001      	beq.n	8015062 <udp_input_local_match+0x52>
    return 0;
 801505e:	2300      	movs	r3, #0
 8015060:	e02b      	b.n	80150ba <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015062:	79fb      	ldrb	r3, [r7, #7]
 8015064:	2b00      	cmp	r3, #0
 8015066:	d018      	beq.n	801509a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d013      	beq.n	8015096 <udp_input_local_match+0x86>
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d00f      	beq.n	8015096 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015076:	4b17      	ldr	r3, [pc, #92]	@ (80150d4 <udp_input_local_match+0xc4>)
 8015078:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801507a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801507e:	d00a      	beq.n	8015096 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	681a      	ldr	r2, [r3, #0]
 8015084:	4b13      	ldr	r3, [pc, #76]	@ (80150d4 <udp_input_local_match+0xc4>)
 8015086:	695b      	ldr	r3, [r3, #20]
 8015088:	405a      	eors	r2, r3
 801508a:	68bb      	ldr	r3, [r7, #8]
 801508c:	3308      	adds	r3, #8
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015092:	2b00      	cmp	r3, #0
 8015094:	d110      	bne.n	80150b8 <udp_input_local_match+0xa8>
          return 1;
 8015096:	2301      	movs	r3, #1
 8015098:	e00f      	b.n	80150ba <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	2b00      	cmp	r3, #0
 801509e:	d009      	beq.n	80150b4 <udp_input_local_match+0xa4>
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d005      	beq.n	80150b4 <udp_input_local_match+0xa4>
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	681a      	ldr	r2, [r3, #0]
 80150ac:	4b09      	ldr	r3, [pc, #36]	@ (80150d4 <udp_input_local_match+0xc4>)
 80150ae:	695b      	ldr	r3, [r3, #20]
 80150b0:	429a      	cmp	r2, r3
 80150b2:	d101      	bne.n	80150b8 <udp_input_local_match+0xa8>
        return 1;
 80150b4:	2301      	movs	r3, #1
 80150b6:	e000      	b.n	80150ba <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80150b8:	2300      	movs	r3, #0
}
 80150ba:	4618      	mov	r0, r3
 80150bc:	3710      	adds	r7, #16
 80150be:	46bd      	mov	sp, r7
 80150c0:	bd80      	pop	{r7, pc}
 80150c2:	bf00      	nop
 80150c4:	080296bc 	.word	0x080296bc
 80150c8:	080296ec 	.word	0x080296ec
 80150cc:	08029710 	.word	0x08029710
 80150d0:	08029738 	.word	0x08029738
 80150d4:	2000cc10 	.word	0x2000cc10

080150d8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80150d8:	b590      	push	{r4, r7, lr}
 80150da:	b08d      	sub	sp, #52	@ 0x34
 80150dc:	af02      	add	r7, sp, #8
 80150de:	6078      	str	r0, [r7, #4]
 80150e0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80150e2:	2300      	movs	r3, #0
 80150e4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d105      	bne.n	80150f8 <udp_input+0x20>
 80150ec:	4b7c      	ldr	r3, [pc, #496]	@ (80152e0 <udp_input+0x208>)
 80150ee:	22cf      	movs	r2, #207	@ 0xcf
 80150f0:	497c      	ldr	r1, [pc, #496]	@ (80152e4 <udp_input+0x20c>)
 80150f2:	487d      	ldr	r0, [pc, #500]	@ (80152e8 <udp_input+0x210>)
 80150f4:	f010 f9e8 	bl	80254c8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80150f8:	683b      	ldr	r3, [r7, #0]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d105      	bne.n	801510a <udp_input+0x32>
 80150fe:	4b78      	ldr	r3, [pc, #480]	@ (80152e0 <udp_input+0x208>)
 8015100:	22d0      	movs	r2, #208	@ 0xd0
 8015102:	497a      	ldr	r1, [pc, #488]	@ (80152ec <udp_input+0x214>)
 8015104:	4878      	ldr	r0, [pc, #480]	@ (80152e8 <udp_input+0x210>)
 8015106:	f010 f9df 	bl	80254c8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	895b      	ldrh	r3, [r3, #10]
 801510e:	2b07      	cmp	r3, #7
 8015110:	d803      	bhi.n	801511a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015112:	6878      	ldr	r0, [r7, #4]
 8015114:	f7f9 fb3c 	bl	800e790 <pbuf_free>
    goto end;
 8015118:	e0de      	b.n	80152d8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	685b      	ldr	r3, [r3, #4]
 801511e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015120:	4b73      	ldr	r3, [pc, #460]	@ (80152f0 <udp_input+0x218>)
 8015122:	695b      	ldr	r3, [r3, #20]
 8015124:	4a72      	ldr	r2, [pc, #456]	@ (80152f0 <udp_input+0x218>)
 8015126:	6812      	ldr	r2, [r2, #0]
 8015128:	4611      	mov	r1, r2
 801512a:	4618      	mov	r0, r3
 801512c:	f001 ff9a 	bl	8017064 <ip4_addr_isbroadcast_u32>
 8015130:	4603      	mov	r3, r0
 8015132:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015134:	697b      	ldr	r3, [r7, #20]
 8015136:	881b      	ldrh	r3, [r3, #0]
 8015138:	b29b      	uxth	r3, r3
 801513a:	4618      	mov	r0, r3
 801513c:	f7f7 fed0 	bl	800cee0 <lwip_htons>
 8015140:	4603      	mov	r3, r0
 8015142:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015144:	697b      	ldr	r3, [r7, #20]
 8015146:	885b      	ldrh	r3, [r3, #2]
 8015148:	b29b      	uxth	r3, r3
 801514a:	4618      	mov	r0, r3
 801514c:	f7f7 fec8 	bl	800cee0 <lwip_htons>
 8015150:	4603      	mov	r3, r0
 8015152:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015154:	2300      	movs	r3, #0
 8015156:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8015158:	2300      	movs	r3, #0
 801515a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801515c:	2300      	movs	r3, #0
 801515e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015160:	4b64      	ldr	r3, [pc, #400]	@ (80152f4 <udp_input+0x21c>)
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	627b      	str	r3, [r7, #36]	@ 0x24
 8015166:	e054      	b.n	8015212 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801516a:	8a5b      	ldrh	r3, [r3, #18]
 801516c:	89fa      	ldrh	r2, [r7, #14]
 801516e:	429a      	cmp	r2, r3
 8015170:	d14a      	bne.n	8015208 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015172:	7cfb      	ldrb	r3, [r7, #19]
 8015174:	461a      	mov	r2, r3
 8015176:	6839      	ldr	r1, [r7, #0]
 8015178:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801517a:	f7ff ff49 	bl	8015010 <udp_input_local_match>
 801517e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015180:	2b00      	cmp	r3, #0
 8015182:	d041      	beq.n	8015208 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015186:	7c1b      	ldrb	r3, [r3, #16]
 8015188:	f003 0304 	and.w	r3, r3, #4
 801518c:	2b00      	cmp	r3, #0
 801518e:	d11d      	bne.n	80151cc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015190:	69fb      	ldr	r3, [r7, #28]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d102      	bne.n	801519c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015198:	61fb      	str	r3, [r7, #28]
 801519a:	e017      	b.n	80151cc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801519c:	7cfb      	ldrb	r3, [r7, #19]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d014      	beq.n	80151cc <udp_input+0xf4>
 80151a2:	4b53      	ldr	r3, [pc, #332]	@ (80152f0 <udp_input+0x218>)
 80151a4:	695b      	ldr	r3, [r3, #20]
 80151a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151aa:	d10f      	bne.n	80151cc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80151ac:	69fb      	ldr	r3, [r7, #28]
 80151ae:	681a      	ldr	r2, [r3, #0]
 80151b0:	683b      	ldr	r3, [r7, #0]
 80151b2:	3304      	adds	r3, #4
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	429a      	cmp	r2, r3
 80151b8:	d008      	beq.n	80151cc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80151ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151bc:	681a      	ldr	r2, [r3, #0]
 80151be:	683b      	ldr	r3, [r7, #0]
 80151c0:	3304      	adds	r3, #4
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	429a      	cmp	r2, r3
 80151c6:	d101      	bne.n	80151cc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80151c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151ca:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80151cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151ce:	8a9b      	ldrh	r3, [r3, #20]
 80151d0:	8a3a      	ldrh	r2, [r7, #16]
 80151d2:	429a      	cmp	r2, r3
 80151d4:	d118      	bne.n	8015208 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80151d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151d8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d005      	beq.n	80151ea <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80151de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151e0:	685a      	ldr	r2, [r3, #4]
 80151e2:	4b43      	ldr	r3, [pc, #268]	@ (80152f0 <udp_input+0x218>)
 80151e4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80151e6:	429a      	cmp	r2, r3
 80151e8:	d10e      	bne.n	8015208 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80151ea:	6a3b      	ldr	r3, [r7, #32]
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d014      	beq.n	801521a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80151f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151f2:	68da      	ldr	r2, [r3, #12]
 80151f4:	6a3b      	ldr	r3, [r7, #32]
 80151f6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80151f8:	4b3e      	ldr	r3, [pc, #248]	@ (80152f4 <udp_input+0x21c>)
 80151fa:	681a      	ldr	r2, [r3, #0]
 80151fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151fe:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015200:	4a3c      	ldr	r2, [pc, #240]	@ (80152f4 <udp_input+0x21c>)
 8015202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015204:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015206:	e008      	b.n	801521a <udp_input+0x142>
      }
    }

    prev = pcb;
 8015208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801520a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801520c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801520e:	68db      	ldr	r3, [r3, #12]
 8015210:	627b      	str	r3, [r7, #36]	@ 0x24
 8015212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015214:	2b00      	cmp	r3, #0
 8015216:	d1a7      	bne.n	8015168 <udp_input+0x90>
 8015218:	e000      	b.n	801521c <udp_input+0x144>
        break;
 801521a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801521c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801521e:	2b00      	cmp	r3, #0
 8015220:	d101      	bne.n	8015226 <udp_input+0x14e>
    pcb = uncon_pcb;
 8015222:	69fb      	ldr	r3, [r7, #28]
 8015224:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015228:	2b00      	cmp	r3, #0
 801522a:	d002      	beq.n	8015232 <udp_input+0x15a>
    for_us = 1;
 801522c:	2301      	movs	r3, #1
 801522e:	76fb      	strb	r3, [r7, #27]
 8015230:	e00a      	b.n	8015248 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015232:	683b      	ldr	r3, [r7, #0]
 8015234:	3304      	adds	r3, #4
 8015236:	681a      	ldr	r2, [r3, #0]
 8015238:	4b2d      	ldr	r3, [pc, #180]	@ (80152f0 <udp_input+0x218>)
 801523a:	695b      	ldr	r3, [r3, #20]
 801523c:	429a      	cmp	r2, r3
 801523e:	bf0c      	ite	eq
 8015240:	2301      	moveq	r3, #1
 8015242:	2300      	movne	r3, #0
 8015244:	b2db      	uxtb	r3, r3
 8015246:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015248:	7efb      	ldrb	r3, [r7, #27]
 801524a:	2b00      	cmp	r3, #0
 801524c:	d041      	beq.n	80152d2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801524e:	2108      	movs	r1, #8
 8015250:	6878      	ldr	r0, [r7, #4]
 8015252:	f7f9 f9e5 	bl	800e620 <pbuf_remove_header>
 8015256:	4603      	mov	r3, r0
 8015258:	2b00      	cmp	r3, #0
 801525a:	d00a      	beq.n	8015272 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801525c:	4b20      	ldr	r3, [pc, #128]	@ (80152e0 <udp_input+0x208>)
 801525e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8015262:	4925      	ldr	r1, [pc, #148]	@ (80152f8 <udp_input+0x220>)
 8015264:	4820      	ldr	r0, [pc, #128]	@ (80152e8 <udp_input+0x210>)
 8015266:	f010 f92f 	bl	80254c8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801526a:	6878      	ldr	r0, [r7, #4]
 801526c:	f7f9 fa90 	bl	800e790 <pbuf_free>
      goto end;
 8015270:	e032      	b.n	80152d8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8015272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015274:	2b00      	cmp	r3, #0
 8015276:	d012      	beq.n	801529e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801527a:	699b      	ldr	r3, [r3, #24]
 801527c:	2b00      	cmp	r3, #0
 801527e:	d00a      	beq.n	8015296 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015282:	699c      	ldr	r4, [r3, #24]
 8015284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015286:	69d8      	ldr	r0, [r3, #28]
 8015288:	8a3b      	ldrh	r3, [r7, #16]
 801528a:	9300      	str	r3, [sp, #0]
 801528c:	4b1b      	ldr	r3, [pc, #108]	@ (80152fc <udp_input+0x224>)
 801528e:	687a      	ldr	r2, [r7, #4]
 8015290:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015292:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015294:	e021      	b.n	80152da <udp_input+0x202>
        pbuf_free(p);
 8015296:	6878      	ldr	r0, [r7, #4]
 8015298:	f7f9 fa7a 	bl	800e790 <pbuf_free>
        goto end;
 801529c:	e01c      	b.n	80152d8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801529e:	7cfb      	ldrb	r3, [r7, #19]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d112      	bne.n	80152ca <udp_input+0x1f2>
 80152a4:	4b12      	ldr	r3, [pc, #72]	@ (80152f0 <udp_input+0x218>)
 80152a6:	695b      	ldr	r3, [r3, #20]
 80152a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80152ac:	2be0      	cmp	r3, #224	@ 0xe0
 80152ae:	d00c      	beq.n	80152ca <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80152b0:	4b0f      	ldr	r3, [pc, #60]	@ (80152f0 <udp_input+0x218>)
 80152b2:	899b      	ldrh	r3, [r3, #12]
 80152b4:	3308      	adds	r3, #8
 80152b6:	b29b      	uxth	r3, r3
 80152b8:	b21b      	sxth	r3, r3
 80152ba:	4619      	mov	r1, r3
 80152bc:	6878      	ldr	r0, [r7, #4]
 80152be:	f7f9 fa22 	bl	800e706 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80152c2:	2103      	movs	r1, #3
 80152c4:	6878      	ldr	r0, [r7, #4]
 80152c6:	f001 fbad 	bl	8016a24 <icmp_dest_unreach>
      pbuf_free(p);
 80152ca:	6878      	ldr	r0, [r7, #4]
 80152cc:	f7f9 fa60 	bl	800e790 <pbuf_free>
  return;
 80152d0:	e003      	b.n	80152da <udp_input+0x202>
    pbuf_free(p);
 80152d2:	6878      	ldr	r0, [r7, #4]
 80152d4:	f7f9 fa5c 	bl	800e790 <pbuf_free>
  return;
 80152d8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80152da:	372c      	adds	r7, #44	@ 0x2c
 80152dc:	46bd      	mov	sp, r7
 80152de:	bd90      	pop	{r4, r7, pc}
 80152e0:	080296bc 	.word	0x080296bc
 80152e4:	08029760 	.word	0x08029760
 80152e8:	08029710 	.word	0x08029710
 80152ec:	08029778 	.word	0x08029778
 80152f0:	2000cc10 	.word	0x2000cc10
 80152f4:	2000fedc 	.word	0x2000fedc
 80152f8:	08029794 	.word	0x08029794
 80152fc:	2000cc20 	.word	0x2000cc20

08015300 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8015300:	b580      	push	{r7, lr}
 8015302:	b082      	sub	sp, #8
 8015304:	af00      	add	r7, sp, #0
 8015306:	6078      	str	r0, [r7, #4]
 8015308:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	2b00      	cmp	r3, #0
 801530e:	d109      	bne.n	8015324 <udp_send+0x24>
 8015310:	4b11      	ldr	r3, [pc, #68]	@ (8015358 <udp_send+0x58>)
 8015312:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8015316:	4911      	ldr	r1, [pc, #68]	@ (801535c <udp_send+0x5c>)
 8015318:	4811      	ldr	r0, [pc, #68]	@ (8015360 <udp_send+0x60>)
 801531a:	f010 f8d5 	bl	80254c8 <iprintf>
 801531e:	f06f 030f 	mvn.w	r3, #15
 8015322:	e015      	b.n	8015350 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8015324:	683b      	ldr	r3, [r7, #0]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d109      	bne.n	801533e <udp_send+0x3e>
 801532a:	4b0b      	ldr	r3, [pc, #44]	@ (8015358 <udp_send+0x58>)
 801532c:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8015330:	490c      	ldr	r1, [pc, #48]	@ (8015364 <udp_send+0x64>)
 8015332:	480b      	ldr	r0, [pc, #44]	@ (8015360 <udp_send+0x60>)
 8015334:	f010 f8c8 	bl	80254c8 <iprintf>
 8015338:	f06f 030f 	mvn.w	r3, #15
 801533c:	e008      	b.n	8015350 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	1d1a      	adds	r2, r3, #4
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	8a9b      	ldrh	r3, [r3, #20]
 8015346:	6839      	ldr	r1, [r7, #0]
 8015348:	6878      	ldr	r0, [r7, #4]
 801534a:	f000 f80d 	bl	8015368 <udp_sendto>
 801534e:	4603      	mov	r3, r0
}
 8015350:	4618      	mov	r0, r3
 8015352:	3708      	adds	r7, #8
 8015354:	46bd      	mov	sp, r7
 8015356:	bd80      	pop	{r7, pc}
 8015358:	080296bc 	.word	0x080296bc
 801535c:	080297b0 	.word	0x080297b0
 8015360:	08029710 	.word	0x08029710
 8015364:	080297c8 	.word	0x080297c8

08015368 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8015368:	b580      	push	{r7, lr}
 801536a:	b088      	sub	sp, #32
 801536c:	af02      	add	r7, sp, #8
 801536e:	60f8      	str	r0, [r7, #12]
 8015370:	60b9      	str	r1, [r7, #8]
 8015372:	607a      	str	r2, [r7, #4]
 8015374:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	2b00      	cmp	r3, #0
 801537a:	d109      	bne.n	8015390 <udp_sendto+0x28>
 801537c:	4b23      	ldr	r3, [pc, #140]	@ (801540c <udp_sendto+0xa4>)
 801537e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8015382:	4923      	ldr	r1, [pc, #140]	@ (8015410 <udp_sendto+0xa8>)
 8015384:	4823      	ldr	r0, [pc, #140]	@ (8015414 <udp_sendto+0xac>)
 8015386:	f010 f89f 	bl	80254c8 <iprintf>
 801538a:	f06f 030f 	mvn.w	r3, #15
 801538e:	e038      	b.n	8015402 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8015390:	68bb      	ldr	r3, [r7, #8]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d109      	bne.n	80153aa <udp_sendto+0x42>
 8015396:	4b1d      	ldr	r3, [pc, #116]	@ (801540c <udp_sendto+0xa4>)
 8015398:	f240 2219 	movw	r2, #537	@ 0x219
 801539c:	491e      	ldr	r1, [pc, #120]	@ (8015418 <udp_sendto+0xb0>)
 801539e:	481d      	ldr	r0, [pc, #116]	@ (8015414 <udp_sendto+0xac>)
 80153a0:	f010 f892 	bl	80254c8 <iprintf>
 80153a4:	f06f 030f 	mvn.w	r3, #15
 80153a8:	e02b      	b.n	8015402 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d109      	bne.n	80153c4 <udp_sendto+0x5c>
 80153b0:	4b16      	ldr	r3, [pc, #88]	@ (801540c <udp_sendto+0xa4>)
 80153b2:	f240 221a 	movw	r2, #538	@ 0x21a
 80153b6:	4919      	ldr	r1, [pc, #100]	@ (801541c <udp_sendto+0xb4>)
 80153b8:	4816      	ldr	r0, [pc, #88]	@ (8015414 <udp_sendto+0xac>)
 80153ba:	f010 f885 	bl	80254c8 <iprintf>
 80153be:	f06f 030f 	mvn.w	r3, #15
 80153c2:	e01e      	b.n	8015402 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	7a1b      	ldrb	r3, [r3, #8]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d006      	beq.n	80153da <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	7a1b      	ldrb	r3, [r3, #8]
 80153d0:	4618      	mov	r0, r3
 80153d2:	f7f8 fde5 	bl	800dfa0 <netif_get_by_index>
 80153d6:	6178      	str	r0, [r7, #20]
 80153d8:	e003      	b.n	80153e2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80153da:	6878      	ldr	r0, [r7, #4]
 80153dc:	f001 fbac 	bl	8016b38 <ip4_route>
 80153e0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80153e2:	697b      	ldr	r3, [r7, #20]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d102      	bne.n	80153ee <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80153e8:	f06f 0303 	mvn.w	r3, #3
 80153ec:	e009      	b.n	8015402 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80153ee:	887a      	ldrh	r2, [r7, #2]
 80153f0:	697b      	ldr	r3, [r7, #20]
 80153f2:	9300      	str	r3, [sp, #0]
 80153f4:	4613      	mov	r3, r2
 80153f6:	687a      	ldr	r2, [r7, #4]
 80153f8:	68b9      	ldr	r1, [r7, #8]
 80153fa:	68f8      	ldr	r0, [r7, #12]
 80153fc:	f000 f810 	bl	8015420 <udp_sendto_if>
 8015400:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015402:	4618      	mov	r0, r3
 8015404:	3718      	adds	r7, #24
 8015406:	46bd      	mov	sp, r7
 8015408:	bd80      	pop	{r7, pc}
 801540a:	bf00      	nop
 801540c:	080296bc 	.word	0x080296bc
 8015410:	080297e0 	.word	0x080297e0
 8015414:	08029710 	.word	0x08029710
 8015418:	080297f8 	.word	0x080297f8
 801541c:	08029814 	.word	0x08029814

08015420 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b088      	sub	sp, #32
 8015424:	af02      	add	r7, sp, #8
 8015426:	60f8      	str	r0, [r7, #12]
 8015428:	60b9      	str	r1, [r7, #8]
 801542a:	607a      	str	r2, [r7, #4]
 801542c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d109      	bne.n	8015448 <udp_sendto_if+0x28>
 8015434:	4b2e      	ldr	r3, [pc, #184]	@ (80154f0 <udp_sendto_if+0xd0>)
 8015436:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801543a:	492e      	ldr	r1, [pc, #184]	@ (80154f4 <udp_sendto_if+0xd4>)
 801543c:	482e      	ldr	r0, [pc, #184]	@ (80154f8 <udp_sendto_if+0xd8>)
 801543e:	f010 f843 	bl	80254c8 <iprintf>
 8015442:	f06f 030f 	mvn.w	r3, #15
 8015446:	e04f      	b.n	80154e8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8015448:	68bb      	ldr	r3, [r7, #8]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d109      	bne.n	8015462 <udp_sendto_if+0x42>
 801544e:	4b28      	ldr	r3, [pc, #160]	@ (80154f0 <udp_sendto_if+0xd0>)
 8015450:	f240 2281 	movw	r2, #641	@ 0x281
 8015454:	4929      	ldr	r1, [pc, #164]	@ (80154fc <udp_sendto_if+0xdc>)
 8015456:	4828      	ldr	r0, [pc, #160]	@ (80154f8 <udp_sendto_if+0xd8>)
 8015458:	f010 f836 	bl	80254c8 <iprintf>
 801545c:	f06f 030f 	mvn.w	r3, #15
 8015460:	e042      	b.n	80154e8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	2b00      	cmp	r3, #0
 8015466:	d109      	bne.n	801547c <udp_sendto_if+0x5c>
 8015468:	4b21      	ldr	r3, [pc, #132]	@ (80154f0 <udp_sendto_if+0xd0>)
 801546a:	f240 2282 	movw	r2, #642	@ 0x282
 801546e:	4924      	ldr	r1, [pc, #144]	@ (8015500 <udp_sendto_if+0xe0>)
 8015470:	4821      	ldr	r0, [pc, #132]	@ (80154f8 <udp_sendto_if+0xd8>)
 8015472:	f010 f829 	bl	80254c8 <iprintf>
 8015476:	f06f 030f 	mvn.w	r3, #15
 801547a:	e035      	b.n	80154e8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801547c:	6a3b      	ldr	r3, [r7, #32]
 801547e:	2b00      	cmp	r3, #0
 8015480:	d109      	bne.n	8015496 <udp_sendto_if+0x76>
 8015482:	4b1b      	ldr	r3, [pc, #108]	@ (80154f0 <udp_sendto_if+0xd0>)
 8015484:	f240 2283 	movw	r2, #643	@ 0x283
 8015488:	491e      	ldr	r1, [pc, #120]	@ (8015504 <udp_sendto_if+0xe4>)
 801548a:	481b      	ldr	r0, [pc, #108]	@ (80154f8 <udp_sendto_if+0xd8>)
 801548c:	f010 f81c 	bl	80254c8 <iprintf>
 8015490:	f06f 030f 	mvn.w	r3, #15
 8015494:	e028      	b.n	80154e8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d009      	beq.n	80154b0 <udp_sendto_if+0x90>
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d005      	beq.n	80154b0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80154ac:	2be0      	cmp	r3, #224	@ 0xe0
 80154ae:	d103      	bne.n	80154b8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80154b0:	6a3b      	ldr	r3, [r7, #32]
 80154b2:	3304      	adds	r3, #4
 80154b4:	617b      	str	r3, [r7, #20]
 80154b6:	e00b      	b.n	80154d0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	681a      	ldr	r2, [r3, #0]
 80154bc:	6a3b      	ldr	r3, [r7, #32]
 80154be:	3304      	adds	r3, #4
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	429a      	cmp	r2, r3
 80154c4:	d002      	beq.n	80154cc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80154c6:	f06f 0303 	mvn.w	r3, #3
 80154ca:	e00d      	b.n	80154e8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80154cc:	68fb      	ldr	r3, [r7, #12]
 80154ce:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80154d0:	887a      	ldrh	r2, [r7, #2]
 80154d2:	697b      	ldr	r3, [r7, #20]
 80154d4:	9301      	str	r3, [sp, #4]
 80154d6:	6a3b      	ldr	r3, [r7, #32]
 80154d8:	9300      	str	r3, [sp, #0]
 80154da:	4613      	mov	r3, r2
 80154dc:	687a      	ldr	r2, [r7, #4]
 80154de:	68b9      	ldr	r1, [r7, #8]
 80154e0:	68f8      	ldr	r0, [r7, #12]
 80154e2:	f000 f811 	bl	8015508 <udp_sendto_if_src>
 80154e6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80154e8:	4618      	mov	r0, r3
 80154ea:	3718      	adds	r7, #24
 80154ec:	46bd      	mov	sp, r7
 80154ee:	bd80      	pop	{r7, pc}
 80154f0:	080296bc 	.word	0x080296bc
 80154f4:	08029830 	.word	0x08029830
 80154f8:	08029710 	.word	0x08029710
 80154fc:	0802984c 	.word	0x0802984c
 8015500:	08029868 	.word	0x08029868
 8015504:	08029888 	.word	0x08029888

08015508 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8015508:	b580      	push	{r7, lr}
 801550a:	b08c      	sub	sp, #48	@ 0x30
 801550c:	af04      	add	r7, sp, #16
 801550e:	60f8      	str	r0, [r7, #12]
 8015510:	60b9      	str	r1, [r7, #8]
 8015512:	607a      	str	r2, [r7, #4]
 8015514:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d109      	bne.n	8015530 <udp_sendto_if_src+0x28>
 801551c:	4b65      	ldr	r3, [pc, #404]	@ (80156b4 <udp_sendto_if_src+0x1ac>)
 801551e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8015522:	4965      	ldr	r1, [pc, #404]	@ (80156b8 <udp_sendto_if_src+0x1b0>)
 8015524:	4865      	ldr	r0, [pc, #404]	@ (80156bc <udp_sendto_if_src+0x1b4>)
 8015526:	f00f ffcf 	bl	80254c8 <iprintf>
 801552a:	f06f 030f 	mvn.w	r3, #15
 801552e:	e0bc      	b.n	80156aa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8015530:	68bb      	ldr	r3, [r7, #8]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d109      	bne.n	801554a <udp_sendto_if_src+0x42>
 8015536:	4b5f      	ldr	r3, [pc, #380]	@ (80156b4 <udp_sendto_if_src+0x1ac>)
 8015538:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801553c:	4960      	ldr	r1, [pc, #384]	@ (80156c0 <udp_sendto_if_src+0x1b8>)
 801553e:	485f      	ldr	r0, [pc, #380]	@ (80156bc <udp_sendto_if_src+0x1b4>)
 8015540:	f00f ffc2 	bl	80254c8 <iprintf>
 8015544:	f06f 030f 	mvn.w	r3, #15
 8015548:	e0af      	b.n	80156aa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d109      	bne.n	8015564 <udp_sendto_if_src+0x5c>
 8015550:	4b58      	ldr	r3, [pc, #352]	@ (80156b4 <udp_sendto_if_src+0x1ac>)
 8015552:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8015556:	495b      	ldr	r1, [pc, #364]	@ (80156c4 <udp_sendto_if_src+0x1bc>)
 8015558:	4858      	ldr	r0, [pc, #352]	@ (80156bc <udp_sendto_if_src+0x1b4>)
 801555a:	f00f ffb5 	bl	80254c8 <iprintf>
 801555e:	f06f 030f 	mvn.w	r3, #15
 8015562:	e0a2      	b.n	80156aa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8015564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015566:	2b00      	cmp	r3, #0
 8015568:	d109      	bne.n	801557e <udp_sendto_if_src+0x76>
 801556a:	4b52      	ldr	r3, [pc, #328]	@ (80156b4 <udp_sendto_if_src+0x1ac>)
 801556c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8015570:	4955      	ldr	r1, [pc, #340]	@ (80156c8 <udp_sendto_if_src+0x1c0>)
 8015572:	4852      	ldr	r0, [pc, #328]	@ (80156bc <udp_sendto_if_src+0x1b4>)
 8015574:	f00f ffa8 	bl	80254c8 <iprintf>
 8015578:	f06f 030f 	mvn.w	r3, #15
 801557c:	e095      	b.n	80156aa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801557e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015580:	2b00      	cmp	r3, #0
 8015582:	d109      	bne.n	8015598 <udp_sendto_if_src+0x90>
 8015584:	4b4b      	ldr	r3, [pc, #300]	@ (80156b4 <udp_sendto_if_src+0x1ac>)
 8015586:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801558a:	4950      	ldr	r1, [pc, #320]	@ (80156cc <udp_sendto_if_src+0x1c4>)
 801558c:	484b      	ldr	r0, [pc, #300]	@ (80156bc <udp_sendto_if_src+0x1b4>)
 801558e:	f00f ff9b 	bl	80254c8 <iprintf>
 8015592:	f06f 030f 	mvn.w	r3, #15
 8015596:	e088      	b.n	80156aa <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	8a5b      	ldrh	r3, [r3, #18]
 801559c:	2b00      	cmp	r3, #0
 801559e:	d10f      	bne.n	80155c0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80155a0:	68f9      	ldr	r1, [r7, #12]
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	8a5b      	ldrh	r3, [r3, #18]
 80155a6:	461a      	mov	r2, r3
 80155a8:	68f8      	ldr	r0, [r7, #12]
 80155aa:	f000 f893 	bl	80156d4 <udp_bind>
 80155ae:	4603      	mov	r3, r0
 80155b0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80155b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d002      	beq.n	80155c0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80155ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80155be:	e074      	b.n	80156aa <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80155c0:	68bb      	ldr	r3, [r7, #8]
 80155c2:	891b      	ldrh	r3, [r3, #8]
 80155c4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80155c8:	4293      	cmp	r3, r2
 80155ca:	d902      	bls.n	80155d2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80155cc:	f04f 33ff 	mov.w	r3, #4294967295
 80155d0:	e06b      	b.n	80156aa <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80155d2:	2108      	movs	r1, #8
 80155d4:	68b8      	ldr	r0, [r7, #8]
 80155d6:	f7f9 f813 	bl	800e600 <pbuf_add_header>
 80155da:	4603      	mov	r3, r0
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d015      	beq.n	801560c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80155e0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80155e4:	2108      	movs	r1, #8
 80155e6:	2022      	movs	r0, #34	@ 0x22
 80155e8:	f7f8 fdbc 	bl	800e164 <pbuf_alloc>
 80155ec:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80155ee:	69fb      	ldr	r3, [r7, #28]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d102      	bne.n	80155fa <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80155f4:	f04f 33ff 	mov.w	r3, #4294967295
 80155f8:	e057      	b.n	80156aa <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80155fa:	68bb      	ldr	r3, [r7, #8]
 80155fc:	891b      	ldrh	r3, [r3, #8]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d006      	beq.n	8015610 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8015602:	68b9      	ldr	r1, [r7, #8]
 8015604:	69f8      	ldr	r0, [r7, #28]
 8015606:	f7f9 f9e7 	bl	800e9d8 <pbuf_chain>
 801560a:	e001      	b.n	8015610 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801560c:	68bb      	ldr	r3, [r7, #8]
 801560e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8015610:	69fb      	ldr	r3, [r7, #28]
 8015612:	895b      	ldrh	r3, [r3, #10]
 8015614:	2b07      	cmp	r3, #7
 8015616:	d806      	bhi.n	8015626 <udp_sendto_if_src+0x11e>
 8015618:	4b26      	ldr	r3, [pc, #152]	@ (80156b4 <udp_sendto_if_src+0x1ac>)
 801561a:	f240 320d 	movw	r2, #781	@ 0x30d
 801561e:	492c      	ldr	r1, [pc, #176]	@ (80156d0 <udp_sendto_if_src+0x1c8>)
 8015620:	4826      	ldr	r0, [pc, #152]	@ (80156bc <udp_sendto_if_src+0x1b4>)
 8015622:	f00f ff51 	bl	80254c8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8015626:	69fb      	ldr	r3, [r7, #28]
 8015628:	685b      	ldr	r3, [r3, #4]
 801562a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	8a5b      	ldrh	r3, [r3, #18]
 8015630:	4618      	mov	r0, r3
 8015632:	f7f7 fc55 	bl	800cee0 <lwip_htons>
 8015636:	4603      	mov	r3, r0
 8015638:	461a      	mov	r2, r3
 801563a:	697b      	ldr	r3, [r7, #20]
 801563c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801563e:	887b      	ldrh	r3, [r7, #2]
 8015640:	4618      	mov	r0, r3
 8015642:	f7f7 fc4d 	bl	800cee0 <lwip_htons>
 8015646:	4603      	mov	r3, r0
 8015648:	461a      	mov	r2, r3
 801564a:	697b      	ldr	r3, [r7, #20]
 801564c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801564e:	697b      	ldr	r3, [r7, #20]
 8015650:	2200      	movs	r2, #0
 8015652:	719a      	strb	r2, [r3, #6]
 8015654:	2200      	movs	r2, #0
 8015656:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8015658:	69fb      	ldr	r3, [r7, #28]
 801565a:	891b      	ldrh	r3, [r3, #8]
 801565c:	4618      	mov	r0, r3
 801565e:	f7f7 fc3f 	bl	800cee0 <lwip_htons>
 8015662:	4603      	mov	r3, r0
 8015664:	461a      	mov	r2, r3
 8015666:	697b      	ldr	r3, [r7, #20]
 8015668:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801566a:	2311      	movs	r3, #17
 801566c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	7adb      	ldrb	r3, [r3, #11]
 8015672:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	7a9b      	ldrb	r3, [r3, #10]
 8015678:	7cb9      	ldrb	r1, [r7, #18]
 801567a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801567c:	9202      	str	r2, [sp, #8]
 801567e:	7cfa      	ldrb	r2, [r7, #19]
 8015680:	9201      	str	r2, [sp, #4]
 8015682:	9300      	str	r3, [sp, #0]
 8015684:	460b      	mov	r3, r1
 8015686:	687a      	ldr	r2, [r7, #4]
 8015688:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801568a:	69f8      	ldr	r0, [r7, #28]
 801568c:	f001 fc3c 	bl	8016f08 <ip4_output_if_src>
 8015690:	4603      	mov	r3, r0
 8015692:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8015694:	69fa      	ldr	r2, [r7, #28]
 8015696:	68bb      	ldr	r3, [r7, #8]
 8015698:	429a      	cmp	r2, r3
 801569a:	d004      	beq.n	80156a6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801569c:	69f8      	ldr	r0, [r7, #28]
 801569e:	f7f9 f877 	bl	800e790 <pbuf_free>
    q = NULL;
 80156a2:	2300      	movs	r3, #0
 80156a4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80156a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80156aa:	4618      	mov	r0, r3
 80156ac:	3720      	adds	r7, #32
 80156ae:	46bd      	mov	sp, r7
 80156b0:	bd80      	pop	{r7, pc}
 80156b2:	bf00      	nop
 80156b4:	080296bc 	.word	0x080296bc
 80156b8:	080298a8 	.word	0x080298a8
 80156bc:	08029710 	.word	0x08029710
 80156c0:	080298c8 	.word	0x080298c8
 80156c4:	080298e8 	.word	0x080298e8
 80156c8:	0802990c 	.word	0x0802990c
 80156cc:	08029930 	.word	0x08029930
 80156d0:	08029954 	.word	0x08029954

080156d4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80156d4:	b580      	push	{r7, lr}
 80156d6:	b086      	sub	sp, #24
 80156d8:	af00      	add	r7, sp, #0
 80156da:	60f8      	str	r0, [r7, #12]
 80156dc:	60b9      	str	r1, [r7, #8]
 80156de:	4613      	mov	r3, r2
 80156e0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80156e2:	68bb      	ldr	r3, [r7, #8]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d101      	bne.n	80156ec <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80156e8:	4b39      	ldr	r3, [pc, #228]	@ (80157d0 <udp_bind+0xfc>)
 80156ea:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d109      	bne.n	8015706 <udp_bind+0x32>
 80156f2:	4b38      	ldr	r3, [pc, #224]	@ (80157d4 <udp_bind+0x100>)
 80156f4:	f240 32b7 	movw	r2, #951	@ 0x3b7
 80156f8:	4937      	ldr	r1, [pc, #220]	@ (80157d8 <udp_bind+0x104>)
 80156fa:	4838      	ldr	r0, [pc, #224]	@ (80157dc <udp_bind+0x108>)
 80156fc:	f00f fee4 	bl	80254c8 <iprintf>
 8015700:	f06f 030f 	mvn.w	r3, #15
 8015704:	e060      	b.n	80157c8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8015706:	2300      	movs	r3, #0
 8015708:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801570a:	4b35      	ldr	r3, [pc, #212]	@ (80157e0 <udp_bind+0x10c>)
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	617b      	str	r3, [r7, #20]
 8015710:	e009      	b.n	8015726 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8015712:	68fa      	ldr	r2, [r7, #12]
 8015714:	697b      	ldr	r3, [r7, #20]
 8015716:	429a      	cmp	r2, r3
 8015718:	d102      	bne.n	8015720 <udp_bind+0x4c>
      rebind = 1;
 801571a:	2301      	movs	r3, #1
 801571c:	74fb      	strb	r3, [r7, #19]
      break;
 801571e:	e005      	b.n	801572c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015720:	697b      	ldr	r3, [r7, #20]
 8015722:	68db      	ldr	r3, [r3, #12]
 8015724:	617b      	str	r3, [r7, #20]
 8015726:	697b      	ldr	r3, [r7, #20]
 8015728:	2b00      	cmp	r3, #0
 801572a:	d1f2      	bne.n	8015712 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801572c:	88fb      	ldrh	r3, [r7, #6]
 801572e:	2b00      	cmp	r3, #0
 8015730:	d109      	bne.n	8015746 <udp_bind+0x72>
    port = udp_new_port();
 8015732:	f7ff fc35 	bl	8014fa0 <udp_new_port>
 8015736:	4603      	mov	r3, r0
 8015738:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801573a:	88fb      	ldrh	r3, [r7, #6]
 801573c:	2b00      	cmp	r3, #0
 801573e:	d12c      	bne.n	801579a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8015740:	f06f 0307 	mvn.w	r3, #7
 8015744:	e040      	b.n	80157c8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015746:	4b26      	ldr	r3, [pc, #152]	@ (80157e0 <udp_bind+0x10c>)
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	617b      	str	r3, [r7, #20]
 801574c:	e022      	b.n	8015794 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801574e:	68fa      	ldr	r2, [r7, #12]
 8015750:	697b      	ldr	r3, [r7, #20]
 8015752:	429a      	cmp	r2, r3
 8015754:	d01b      	beq.n	801578e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8015756:	697b      	ldr	r3, [r7, #20]
 8015758:	8a5b      	ldrh	r3, [r3, #18]
 801575a:	88fa      	ldrh	r2, [r7, #6]
 801575c:	429a      	cmp	r2, r3
 801575e:	d116      	bne.n	801578e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015760:	697b      	ldr	r3, [r7, #20]
 8015762:	681a      	ldr	r2, [r3, #0]
 8015764:	68bb      	ldr	r3, [r7, #8]
 8015766:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8015768:	429a      	cmp	r2, r3
 801576a:	d00d      	beq.n	8015788 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801576c:	68bb      	ldr	r3, [r7, #8]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d00a      	beq.n	8015788 <udp_bind+0xb4>
 8015772:	68bb      	ldr	r3, [r7, #8]
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	2b00      	cmp	r3, #0
 8015778:	d006      	beq.n	8015788 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801577a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801577c:	2b00      	cmp	r3, #0
 801577e:	d003      	beq.n	8015788 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015780:	697b      	ldr	r3, [r7, #20]
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d102      	bne.n	801578e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015788:	f06f 0307 	mvn.w	r3, #7
 801578c:	e01c      	b.n	80157c8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801578e:	697b      	ldr	r3, [r7, #20]
 8015790:	68db      	ldr	r3, [r3, #12]
 8015792:	617b      	str	r3, [r7, #20]
 8015794:	697b      	ldr	r3, [r7, #20]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d1d9      	bne.n	801574e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801579a:	68bb      	ldr	r3, [r7, #8]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d002      	beq.n	80157a6 <udp_bind+0xd2>
 80157a0:	68bb      	ldr	r3, [r7, #8]
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	e000      	b.n	80157a8 <udp_bind+0xd4>
 80157a6:	2300      	movs	r3, #0
 80157a8:	68fa      	ldr	r2, [r7, #12]
 80157aa:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	88fa      	ldrh	r2, [r7, #6]
 80157b0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80157b2:	7cfb      	ldrb	r3, [r7, #19]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d106      	bne.n	80157c6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80157b8:	4b09      	ldr	r3, [pc, #36]	@ (80157e0 <udp_bind+0x10c>)
 80157ba:	681a      	ldr	r2, [r3, #0]
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80157c0:	4a07      	ldr	r2, [pc, #28]	@ (80157e0 <udp_bind+0x10c>)
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80157c6:	2300      	movs	r3, #0
}
 80157c8:	4618      	mov	r0, r3
 80157ca:	3718      	adds	r7, #24
 80157cc:	46bd      	mov	sp, r7
 80157ce:	bd80      	pop	{r7, pc}
 80157d0:	0802a2ec 	.word	0x0802a2ec
 80157d4:	080296bc 	.word	0x080296bc
 80157d8:	08029984 	.word	0x08029984
 80157dc:	08029710 	.word	0x08029710
 80157e0:	2000fedc 	.word	0x2000fedc

080157e4 <udp_bind_netif>:
 *
 * @see udp_disconnect()
 */
void
udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)
{
 80157e4:	b480      	push	{r7}
 80157e6:	b083      	sub	sp, #12
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	6078      	str	r0, [r7, #4]
 80157ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif != NULL) {
 80157ee:	683b      	ldr	r3, [r7, #0]
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d007      	beq.n	8015804 <udp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 80157f4:	683b      	ldr	r3, [r7, #0]
 80157f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80157fa:	3301      	adds	r3, #1
 80157fc:	b2da      	uxtb	r2, r3
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 8015802:	e002      	b.n	801580a <udp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	2200      	movs	r2, #0
 8015808:	721a      	strb	r2, [r3, #8]
}
 801580a:	bf00      	nop
 801580c:	370c      	adds	r7, #12
 801580e:	46bd      	mov	sp, r7
 8015810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015814:	4770      	bx	lr
	...

08015818 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8015818:	b580      	push	{r7, lr}
 801581a:	b084      	sub	sp, #16
 801581c:	af00      	add	r7, sp, #0
 801581e:	60f8      	str	r0, [r7, #12]
 8015820:	60b9      	str	r1, [r7, #8]
 8015822:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d107      	bne.n	801583a <udp_recv+0x22>
 801582a:	4b08      	ldr	r3, [pc, #32]	@ (801584c <udp_recv+0x34>)
 801582c:	f240 428a 	movw	r2, #1162	@ 0x48a
 8015830:	4907      	ldr	r1, [pc, #28]	@ (8015850 <udp_recv+0x38>)
 8015832:	4808      	ldr	r0, [pc, #32]	@ (8015854 <udp_recv+0x3c>)
 8015834:	f00f fe48 	bl	80254c8 <iprintf>
 8015838:	e005      	b.n	8015846 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801583a:	68fb      	ldr	r3, [r7, #12]
 801583c:	68ba      	ldr	r2, [r7, #8]
 801583e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	687a      	ldr	r2, [r7, #4]
 8015844:	61da      	str	r2, [r3, #28]
}
 8015846:	3710      	adds	r7, #16
 8015848:	46bd      	mov	sp, r7
 801584a:	bd80      	pop	{r7, pc}
 801584c:	080296bc 	.word	0x080296bc
 8015850:	080299f0 	.word	0x080299f0
 8015854:	08029710 	.word	0x08029710

08015858 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8015858:	b580      	push	{r7, lr}
 801585a:	b084      	sub	sp, #16
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	2b00      	cmp	r3, #0
 8015864:	d107      	bne.n	8015876 <udp_remove+0x1e>
 8015866:	4b19      	ldr	r3, [pc, #100]	@ (80158cc <udp_remove+0x74>)
 8015868:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801586c:	4918      	ldr	r1, [pc, #96]	@ (80158d0 <udp_remove+0x78>)
 801586e:	4819      	ldr	r0, [pc, #100]	@ (80158d4 <udp_remove+0x7c>)
 8015870:	f00f fe2a 	bl	80254c8 <iprintf>
 8015874:	e026      	b.n	80158c4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8015876:	4b18      	ldr	r3, [pc, #96]	@ (80158d8 <udp_remove+0x80>)
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	687a      	ldr	r2, [r7, #4]
 801587c:	429a      	cmp	r2, r3
 801587e:	d105      	bne.n	801588c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8015880:	4b15      	ldr	r3, [pc, #84]	@ (80158d8 <udp_remove+0x80>)
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	68db      	ldr	r3, [r3, #12]
 8015886:	4a14      	ldr	r2, [pc, #80]	@ (80158d8 <udp_remove+0x80>)
 8015888:	6013      	str	r3, [r2, #0]
 801588a:	e017      	b.n	80158bc <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801588c:	4b12      	ldr	r3, [pc, #72]	@ (80158d8 <udp_remove+0x80>)
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	60fb      	str	r3, [r7, #12]
 8015892:	e010      	b.n	80158b6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	68db      	ldr	r3, [r3, #12]
 8015898:	2b00      	cmp	r3, #0
 801589a:	d009      	beq.n	80158b0 <udp_remove+0x58>
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	68db      	ldr	r3, [r3, #12]
 80158a0:	687a      	ldr	r2, [r7, #4]
 80158a2:	429a      	cmp	r2, r3
 80158a4:	d104      	bne.n	80158b0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	68da      	ldr	r2, [r3, #12]
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	60da      	str	r2, [r3, #12]
        break;
 80158ae:	e005      	b.n	80158bc <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	68db      	ldr	r3, [r3, #12]
 80158b4:	60fb      	str	r3, [r7, #12]
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d1eb      	bne.n	8015894 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80158bc:	6879      	ldr	r1, [r7, #4]
 80158be:	2000      	movs	r0, #0
 80158c0:	f7f8 f858 	bl	800d974 <memp_free>
}
 80158c4:	3710      	adds	r7, #16
 80158c6:	46bd      	mov	sp, r7
 80158c8:	bd80      	pop	{r7, pc}
 80158ca:	bf00      	nop
 80158cc:	080296bc 	.word	0x080296bc
 80158d0:	08029a08 	.word	0x08029a08
 80158d4:	08029710 	.word	0x08029710
 80158d8:	2000fedc 	.word	0x2000fedc

080158dc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80158dc:	b580      	push	{r7, lr}
 80158de:	b082      	sub	sp, #8
 80158e0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80158e2:	2000      	movs	r0, #0
 80158e4:	f7f7 ffd0 	bl	800d888 <memp_malloc>
 80158e8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d007      	beq.n	8015900 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80158f0:	2220      	movs	r2, #32
 80158f2:	2100      	movs	r1, #0
 80158f4:	6878      	ldr	r0, [r7, #4]
 80158f6:	f00f ff6d 	bl	80257d4 <memset>
    pcb->ttl = UDP_TTL;
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	22ff      	movs	r2, #255	@ 0xff
 80158fe:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015900:	687b      	ldr	r3, [r7, #4]
}
 8015902:	4618      	mov	r0, r3
 8015904:	3708      	adds	r7, #8
 8015906:	46bd      	mov	sp, r7
 8015908:	bd80      	pop	{r7, pc}

0801590a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801590a:	b580      	push	{r7, lr}
 801590c:	b084      	sub	sp, #16
 801590e:	af00      	add	r7, sp, #0
 8015910:	4603      	mov	r3, r0
 8015912:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8015914:	f7ff ffe2 	bl	80158dc <udp_new>
 8015918:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801591a:	68fb      	ldr	r3, [r7, #12]
}
 801591c:	4618      	mov	r0, r3
 801591e:	3710      	adds	r7, #16
 8015920:	46bd      	mov	sp, r7
 8015922:	bd80      	pop	{r7, pc}

08015924 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015924:	b480      	push	{r7}
 8015926:	b085      	sub	sp, #20
 8015928:	af00      	add	r7, sp, #0
 801592a:	6078      	str	r0, [r7, #4]
 801592c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	2b00      	cmp	r3, #0
 8015932:	d01e      	beq.n	8015972 <udp_netif_ip_addr_changed+0x4e>
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	2b00      	cmp	r3, #0
 801593a:	d01a      	beq.n	8015972 <udp_netif_ip_addr_changed+0x4e>
 801593c:	683b      	ldr	r3, [r7, #0]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d017      	beq.n	8015972 <udp_netif_ip_addr_changed+0x4e>
 8015942:	683b      	ldr	r3, [r7, #0]
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	2b00      	cmp	r3, #0
 8015948:	d013      	beq.n	8015972 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801594a:	4b0d      	ldr	r3, [pc, #52]	@ (8015980 <udp_netif_ip_addr_changed+0x5c>)
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	60fb      	str	r3, [r7, #12]
 8015950:	e00c      	b.n	801596c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	681a      	ldr	r2, [r3, #0]
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	429a      	cmp	r2, r3
 801595c:	d103      	bne.n	8015966 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801595e:	683b      	ldr	r3, [r7, #0]
 8015960:	681a      	ldr	r2, [r3, #0]
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	68db      	ldr	r3, [r3, #12]
 801596a:	60fb      	str	r3, [r7, #12]
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d1ef      	bne.n	8015952 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015972:	bf00      	nop
 8015974:	3714      	adds	r7, #20
 8015976:	46bd      	mov	sp, r7
 8015978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801597c:	4770      	bx	lr
 801597e:	bf00      	nop
 8015980:	2000fedc 	.word	0x2000fedc

08015984 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015984:	b580      	push	{r7, lr}
 8015986:	b082      	sub	sp, #8
 8015988:	af00      	add	r7, sp, #0
 801598a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801598c:	4915      	ldr	r1, [pc, #84]	@ (80159e4 <etharp_free_entry+0x60>)
 801598e:	687a      	ldr	r2, [r7, #4]
 8015990:	4613      	mov	r3, r2
 8015992:	005b      	lsls	r3, r3, #1
 8015994:	4413      	add	r3, r2
 8015996:	00db      	lsls	r3, r3, #3
 8015998:	440b      	add	r3, r1
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d013      	beq.n	80159c8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80159a0:	4910      	ldr	r1, [pc, #64]	@ (80159e4 <etharp_free_entry+0x60>)
 80159a2:	687a      	ldr	r2, [r7, #4]
 80159a4:	4613      	mov	r3, r2
 80159a6:	005b      	lsls	r3, r3, #1
 80159a8:	4413      	add	r3, r2
 80159aa:	00db      	lsls	r3, r3, #3
 80159ac:	440b      	add	r3, r1
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	4618      	mov	r0, r3
 80159b2:	f7f8 feed 	bl	800e790 <pbuf_free>
    arp_table[i].q = NULL;
 80159b6:	490b      	ldr	r1, [pc, #44]	@ (80159e4 <etharp_free_entry+0x60>)
 80159b8:	687a      	ldr	r2, [r7, #4]
 80159ba:	4613      	mov	r3, r2
 80159bc:	005b      	lsls	r3, r3, #1
 80159be:	4413      	add	r3, r2
 80159c0:	00db      	lsls	r3, r3, #3
 80159c2:	440b      	add	r3, r1
 80159c4:	2200      	movs	r2, #0
 80159c6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80159c8:	4906      	ldr	r1, [pc, #24]	@ (80159e4 <etharp_free_entry+0x60>)
 80159ca:	687a      	ldr	r2, [r7, #4]
 80159cc:	4613      	mov	r3, r2
 80159ce:	005b      	lsls	r3, r3, #1
 80159d0:	4413      	add	r3, r2
 80159d2:	00db      	lsls	r3, r3, #3
 80159d4:	440b      	add	r3, r1
 80159d6:	3314      	adds	r3, #20
 80159d8:	2200      	movs	r2, #0
 80159da:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80159dc:	bf00      	nop
 80159de:	3708      	adds	r7, #8
 80159e0:	46bd      	mov	sp, r7
 80159e2:	bd80      	pop	{r7, pc}
 80159e4:	2000fee0 	.word	0x2000fee0

080159e8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80159e8:	b580      	push	{r7, lr}
 80159ea:	b082      	sub	sp, #8
 80159ec:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80159ee:	2300      	movs	r3, #0
 80159f0:	607b      	str	r3, [r7, #4]
 80159f2:	e096      	b.n	8015b22 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80159f4:	494f      	ldr	r1, [pc, #316]	@ (8015b34 <etharp_tmr+0x14c>)
 80159f6:	687a      	ldr	r2, [r7, #4]
 80159f8:	4613      	mov	r3, r2
 80159fa:	005b      	lsls	r3, r3, #1
 80159fc:	4413      	add	r3, r2
 80159fe:	00db      	lsls	r3, r3, #3
 8015a00:	440b      	add	r3, r1
 8015a02:	3314      	adds	r3, #20
 8015a04:	781b      	ldrb	r3, [r3, #0]
 8015a06:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015a08:	78fb      	ldrb	r3, [r7, #3]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	f000 8086 	beq.w	8015b1c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015a10:	4948      	ldr	r1, [pc, #288]	@ (8015b34 <etharp_tmr+0x14c>)
 8015a12:	687a      	ldr	r2, [r7, #4]
 8015a14:	4613      	mov	r3, r2
 8015a16:	005b      	lsls	r3, r3, #1
 8015a18:	4413      	add	r3, r2
 8015a1a:	00db      	lsls	r3, r3, #3
 8015a1c:	440b      	add	r3, r1
 8015a1e:	3312      	adds	r3, #18
 8015a20:	881b      	ldrh	r3, [r3, #0]
 8015a22:	3301      	adds	r3, #1
 8015a24:	b298      	uxth	r0, r3
 8015a26:	4943      	ldr	r1, [pc, #268]	@ (8015b34 <etharp_tmr+0x14c>)
 8015a28:	687a      	ldr	r2, [r7, #4]
 8015a2a:	4613      	mov	r3, r2
 8015a2c:	005b      	lsls	r3, r3, #1
 8015a2e:	4413      	add	r3, r2
 8015a30:	00db      	lsls	r3, r3, #3
 8015a32:	440b      	add	r3, r1
 8015a34:	3312      	adds	r3, #18
 8015a36:	4602      	mov	r2, r0
 8015a38:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015a3a:	493e      	ldr	r1, [pc, #248]	@ (8015b34 <etharp_tmr+0x14c>)
 8015a3c:	687a      	ldr	r2, [r7, #4]
 8015a3e:	4613      	mov	r3, r2
 8015a40:	005b      	lsls	r3, r3, #1
 8015a42:	4413      	add	r3, r2
 8015a44:	00db      	lsls	r3, r3, #3
 8015a46:	440b      	add	r3, r1
 8015a48:	3312      	adds	r3, #18
 8015a4a:	881b      	ldrh	r3, [r3, #0]
 8015a4c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8015a50:	d215      	bcs.n	8015a7e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015a52:	4938      	ldr	r1, [pc, #224]	@ (8015b34 <etharp_tmr+0x14c>)
 8015a54:	687a      	ldr	r2, [r7, #4]
 8015a56:	4613      	mov	r3, r2
 8015a58:	005b      	lsls	r3, r3, #1
 8015a5a:	4413      	add	r3, r2
 8015a5c:	00db      	lsls	r3, r3, #3
 8015a5e:	440b      	add	r3, r1
 8015a60:	3314      	adds	r3, #20
 8015a62:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015a64:	2b01      	cmp	r3, #1
 8015a66:	d10e      	bne.n	8015a86 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015a68:	4932      	ldr	r1, [pc, #200]	@ (8015b34 <etharp_tmr+0x14c>)
 8015a6a:	687a      	ldr	r2, [r7, #4]
 8015a6c:	4613      	mov	r3, r2
 8015a6e:	005b      	lsls	r3, r3, #1
 8015a70:	4413      	add	r3, r2
 8015a72:	00db      	lsls	r3, r3, #3
 8015a74:	440b      	add	r3, r1
 8015a76:	3312      	adds	r3, #18
 8015a78:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015a7a:	2b04      	cmp	r3, #4
 8015a7c:	d903      	bls.n	8015a86 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8015a7e:	6878      	ldr	r0, [r7, #4]
 8015a80:	f7ff ff80 	bl	8015984 <etharp_free_entry>
 8015a84:	e04a      	b.n	8015b1c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015a86:	492b      	ldr	r1, [pc, #172]	@ (8015b34 <etharp_tmr+0x14c>)
 8015a88:	687a      	ldr	r2, [r7, #4]
 8015a8a:	4613      	mov	r3, r2
 8015a8c:	005b      	lsls	r3, r3, #1
 8015a8e:	4413      	add	r3, r2
 8015a90:	00db      	lsls	r3, r3, #3
 8015a92:	440b      	add	r3, r1
 8015a94:	3314      	adds	r3, #20
 8015a96:	781b      	ldrb	r3, [r3, #0]
 8015a98:	2b03      	cmp	r3, #3
 8015a9a:	d10a      	bne.n	8015ab2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015a9c:	4925      	ldr	r1, [pc, #148]	@ (8015b34 <etharp_tmr+0x14c>)
 8015a9e:	687a      	ldr	r2, [r7, #4]
 8015aa0:	4613      	mov	r3, r2
 8015aa2:	005b      	lsls	r3, r3, #1
 8015aa4:	4413      	add	r3, r2
 8015aa6:	00db      	lsls	r3, r3, #3
 8015aa8:	440b      	add	r3, r1
 8015aaa:	3314      	adds	r3, #20
 8015aac:	2204      	movs	r2, #4
 8015aae:	701a      	strb	r2, [r3, #0]
 8015ab0:	e034      	b.n	8015b1c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8015ab2:	4920      	ldr	r1, [pc, #128]	@ (8015b34 <etharp_tmr+0x14c>)
 8015ab4:	687a      	ldr	r2, [r7, #4]
 8015ab6:	4613      	mov	r3, r2
 8015ab8:	005b      	lsls	r3, r3, #1
 8015aba:	4413      	add	r3, r2
 8015abc:	00db      	lsls	r3, r3, #3
 8015abe:	440b      	add	r3, r1
 8015ac0:	3314      	adds	r3, #20
 8015ac2:	781b      	ldrb	r3, [r3, #0]
 8015ac4:	2b04      	cmp	r3, #4
 8015ac6:	d10a      	bne.n	8015ade <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015ac8:	491a      	ldr	r1, [pc, #104]	@ (8015b34 <etharp_tmr+0x14c>)
 8015aca:	687a      	ldr	r2, [r7, #4]
 8015acc:	4613      	mov	r3, r2
 8015ace:	005b      	lsls	r3, r3, #1
 8015ad0:	4413      	add	r3, r2
 8015ad2:	00db      	lsls	r3, r3, #3
 8015ad4:	440b      	add	r3, r1
 8015ad6:	3314      	adds	r3, #20
 8015ad8:	2202      	movs	r2, #2
 8015ada:	701a      	strb	r2, [r3, #0]
 8015adc:	e01e      	b.n	8015b1c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015ade:	4915      	ldr	r1, [pc, #84]	@ (8015b34 <etharp_tmr+0x14c>)
 8015ae0:	687a      	ldr	r2, [r7, #4]
 8015ae2:	4613      	mov	r3, r2
 8015ae4:	005b      	lsls	r3, r3, #1
 8015ae6:	4413      	add	r3, r2
 8015ae8:	00db      	lsls	r3, r3, #3
 8015aea:	440b      	add	r3, r1
 8015aec:	3314      	adds	r3, #20
 8015aee:	781b      	ldrb	r3, [r3, #0]
 8015af0:	2b01      	cmp	r3, #1
 8015af2:	d113      	bne.n	8015b1c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015af4:	490f      	ldr	r1, [pc, #60]	@ (8015b34 <etharp_tmr+0x14c>)
 8015af6:	687a      	ldr	r2, [r7, #4]
 8015af8:	4613      	mov	r3, r2
 8015afa:	005b      	lsls	r3, r3, #1
 8015afc:	4413      	add	r3, r2
 8015afe:	00db      	lsls	r3, r3, #3
 8015b00:	440b      	add	r3, r1
 8015b02:	3308      	adds	r3, #8
 8015b04:	6818      	ldr	r0, [r3, #0]
 8015b06:	687a      	ldr	r2, [r7, #4]
 8015b08:	4613      	mov	r3, r2
 8015b0a:	005b      	lsls	r3, r3, #1
 8015b0c:	4413      	add	r3, r2
 8015b0e:	00db      	lsls	r3, r3, #3
 8015b10:	4a08      	ldr	r2, [pc, #32]	@ (8015b34 <etharp_tmr+0x14c>)
 8015b12:	4413      	add	r3, r2
 8015b14:	3304      	adds	r3, #4
 8015b16:	4619      	mov	r1, r3
 8015b18:	f000 fe6e 	bl	80167f8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	3301      	adds	r3, #1
 8015b20:	607b      	str	r3, [r7, #4]
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	2b09      	cmp	r3, #9
 8015b26:	f77f af65 	ble.w	80159f4 <etharp_tmr+0xc>
      }
    }
  }
}
 8015b2a:	bf00      	nop
 8015b2c:	bf00      	nop
 8015b2e:	3708      	adds	r7, #8
 8015b30:	46bd      	mov	sp, r7
 8015b32:	bd80      	pop	{r7, pc}
 8015b34:	2000fee0 	.word	0x2000fee0

08015b38 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015b38:	b580      	push	{r7, lr}
 8015b3a:	b08a      	sub	sp, #40	@ 0x28
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	60f8      	str	r0, [r7, #12]
 8015b40:	460b      	mov	r3, r1
 8015b42:	607a      	str	r2, [r7, #4]
 8015b44:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015b46:	230a      	movs	r3, #10
 8015b48:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8015b4a:	230a      	movs	r3, #10
 8015b4c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8015b4e:	230a      	movs	r3, #10
 8015b50:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8015b52:	2300      	movs	r3, #0
 8015b54:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015b56:	230a      	movs	r3, #10
 8015b58:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	83bb      	strh	r3, [r7, #28]
 8015b5e:	2300      	movs	r3, #0
 8015b60:	837b      	strh	r3, [r7, #26]
 8015b62:	2300      	movs	r3, #0
 8015b64:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015b66:	2300      	movs	r3, #0
 8015b68:	843b      	strh	r3, [r7, #32]
 8015b6a:	e0ae      	b.n	8015cca <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015b6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b70:	49a6      	ldr	r1, [pc, #664]	@ (8015e0c <etharp_find_entry+0x2d4>)
 8015b72:	4613      	mov	r3, r2
 8015b74:	005b      	lsls	r3, r3, #1
 8015b76:	4413      	add	r3, r2
 8015b78:	00db      	lsls	r3, r3, #3
 8015b7a:	440b      	add	r3, r1
 8015b7c:	3314      	adds	r3, #20
 8015b7e:	781b      	ldrb	r3, [r3, #0]
 8015b80:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8015b82:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8015b86:	2b0a      	cmp	r3, #10
 8015b88:	d105      	bne.n	8015b96 <etharp_find_entry+0x5e>
 8015b8a:	7dfb      	ldrb	r3, [r7, #23]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d102      	bne.n	8015b96 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015b90:	8c3b      	ldrh	r3, [r7, #32]
 8015b92:	847b      	strh	r3, [r7, #34]	@ 0x22
 8015b94:	e095      	b.n	8015cc2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015b96:	7dfb      	ldrb	r3, [r7, #23]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	f000 8092 	beq.w	8015cc2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015b9e:	7dfb      	ldrb	r3, [r7, #23]
 8015ba0:	2b01      	cmp	r3, #1
 8015ba2:	d009      	beq.n	8015bb8 <etharp_find_entry+0x80>
 8015ba4:	7dfb      	ldrb	r3, [r7, #23]
 8015ba6:	2b01      	cmp	r3, #1
 8015ba8:	d806      	bhi.n	8015bb8 <etharp_find_entry+0x80>
 8015baa:	4b99      	ldr	r3, [pc, #612]	@ (8015e10 <etharp_find_entry+0x2d8>)
 8015bac:	f240 1223 	movw	r2, #291	@ 0x123
 8015bb0:	4998      	ldr	r1, [pc, #608]	@ (8015e14 <etharp_find_entry+0x2dc>)
 8015bb2:	4899      	ldr	r0, [pc, #612]	@ (8015e18 <etharp_find_entry+0x2e0>)
 8015bb4:	f00f fc88 	bl	80254c8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d020      	beq.n	8015c00 <etharp_find_entry+0xc8>
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	6819      	ldr	r1, [r3, #0]
 8015bc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015bc6:	4891      	ldr	r0, [pc, #580]	@ (8015e0c <etharp_find_entry+0x2d4>)
 8015bc8:	4613      	mov	r3, r2
 8015bca:	005b      	lsls	r3, r3, #1
 8015bcc:	4413      	add	r3, r2
 8015bce:	00db      	lsls	r3, r3, #3
 8015bd0:	4403      	add	r3, r0
 8015bd2:	3304      	adds	r3, #4
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	4299      	cmp	r1, r3
 8015bd8:	d112      	bne.n	8015c00 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d00c      	beq.n	8015bfa <etharp_find_entry+0xc2>
 8015be0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015be4:	4989      	ldr	r1, [pc, #548]	@ (8015e0c <etharp_find_entry+0x2d4>)
 8015be6:	4613      	mov	r3, r2
 8015be8:	005b      	lsls	r3, r3, #1
 8015bea:	4413      	add	r3, r2
 8015bec:	00db      	lsls	r3, r3, #3
 8015bee:	440b      	add	r3, r1
 8015bf0:	3308      	adds	r3, #8
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	687a      	ldr	r2, [r7, #4]
 8015bf6:	429a      	cmp	r2, r3
 8015bf8:	d102      	bne.n	8015c00 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015bfa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015bfe:	e100      	b.n	8015e02 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015c00:	7dfb      	ldrb	r3, [r7, #23]
 8015c02:	2b01      	cmp	r3, #1
 8015c04:	d140      	bne.n	8015c88 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015c06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c0a:	4980      	ldr	r1, [pc, #512]	@ (8015e0c <etharp_find_entry+0x2d4>)
 8015c0c:	4613      	mov	r3, r2
 8015c0e:	005b      	lsls	r3, r3, #1
 8015c10:	4413      	add	r3, r2
 8015c12:	00db      	lsls	r3, r3, #3
 8015c14:	440b      	add	r3, r1
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d01a      	beq.n	8015c52 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015c1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c20:	497a      	ldr	r1, [pc, #488]	@ (8015e0c <etharp_find_entry+0x2d4>)
 8015c22:	4613      	mov	r3, r2
 8015c24:	005b      	lsls	r3, r3, #1
 8015c26:	4413      	add	r3, r2
 8015c28:	00db      	lsls	r3, r3, #3
 8015c2a:	440b      	add	r3, r1
 8015c2c:	3312      	adds	r3, #18
 8015c2e:	881b      	ldrh	r3, [r3, #0]
 8015c30:	8bba      	ldrh	r2, [r7, #28]
 8015c32:	429a      	cmp	r2, r3
 8015c34:	d845      	bhi.n	8015cc2 <etharp_find_entry+0x18a>
            old_queue = i;
 8015c36:	8c3b      	ldrh	r3, [r7, #32]
 8015c38:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015c3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c3e:	4973      	ldr	r1, [pc, #460]	@ (8015e0c <etharp_find_entry+0x2d4>)
 8015c40:	4613      	mov	r3, r2
 8015c42:	005b      	lsls	r3, r3, #1
 8015c44:	4413      	add	r3, r2
 8015c46:	00db      	lsls	r3, r3, #3
 8015c48:	440b      	add	r3, r1
 8015c4a:	3312      	adds	r3, #18
 8015c4c:	881b      	ldrh	r3, [r3, #0]
 8015c4e:	83bb      	strh	r3, [r7, #28]
 8015c50:	e037      	b.n	8015cc2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015c52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c56:	496d      	ldr	r1, [pc, #436]	@ (8015e0c <etharp_find_entry+0x2d4>)
 8015c58:	4613      	mov	r3, r2
 8015c5a:	005b      	lsls	r3, r3, #1
 8015c5c:	4413      	add	r3, r2
 8015c5e:	00db      	lsls	r3, r3, #3
 8015c60:	440b      	add	r3, r1
 8015c62:	3312      	adds	r3, #18
 8015c64:	881b      	ldrh	r3, [r3, #0]
 8015c66:	8b7a      	ldrh	r2, [r7, #26]
 8015c68:	429a      	cmp	r2, r3
 8015c6a:	d82a      	bhi.n	8015cc2 <etharp_find_entry+0x18a>
            old_pending = i;
 8015c6c:	8c3b      	ldrh	r3, [r7, #32]
 8015c6e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8015c70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c74:	4965      	ldr	r1, [pc, #404]	@ (8015e0c <etharp_find_entry+0x2d4>)
 8015c76:	4613      	mov	r3, r2
 8015c78:	005b      	lsls	r3, r3, #1
 8015c7a:	4413      	add	r3, r2
 8015c7c:	00db      	lsls	r3, r3, #3
 8015c7e:	440b      	add	r3, r1
 8015c80:	3312      	adds	r3, #18
 8015c82:	881b      	ldrh	r3, [r3, #0]
 8015c84:	837b      	strh	r3, [r7, #26]
 8015c86:	e01c      	b.n	8015cc2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015c88:	7dfb      	ldrb	r3, [r7, #23]
 8015c8a:	2b01      	cmp	r3, #1
 8015c8c:	d919      	bls.n	8015cc2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015c8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c92:	495e      	ldr	r1, [pc, #376]	@ (8015e0c <etharp_find_entry+0x2d4>)
 8015c94:	4613      	mov	r3, r2
 8015c96:	005b      	lsls	r3, r3, #1
 8015c98:	4413      	add	r3, r2
 8015c9a:	00db      	lsls	r3, r3, #3
 8015c9c:	440b      	add	r3, r1
 8015c9e:	3312      	adds	r3, #18
 8015ca0:	881b      	ldrh	r3, [r3, #0]
 8015ca2:	8b3a      	ldrh	r2, [r7, #24]
 8015ca4:	429a      	cmp	r2, r3
 8015ca6:	d80c      	bhi.n	8015cc2 <etharp_find_entry+0x18a>
            old_stable = i;
 8015ca8:	8c3b      	ldrh	r3, [r7, #32]
 8015caa:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8015cac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015cb0:	4956      	ldr	r1, [pc, #344]	@ (8015e0c <etharp_find_entry+0x2d4>)
 8015cb2:	4613      	mov	r3, r2
 8015cb4:	005b      	lsls	r3, r3, #1
 8015cb6:	4413      	add	r3, r2
 8015cb8:	00db      	lsls	r3, r3, #3
 8015cba:	440b      	add	r3, r1
 8015cbc:	3312      	adds	r3, #18
 8015cbe:	881b      	ldrh	r3, [r3, #0]
 8015cc0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015cc2:	8c3b      	ldrh	r3, [r7, #32]
 8015cc4:	3301      	adds	r3, #1
 8015cc6:	b29b      	uxth	r3, r3
 8015cc8:	843b      	strh	r3, [r7, #32]
 8015cca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015cce:	2b09      	cmp	r3, #9
 8015cd0:	f77f af4c 	ble.w	8015b6c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015cd4:	7afb      	ldrb	r3, [r7, #11]
 8015cd6:	f003 0302 	and.w	r3, r3, #2
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d108      	bne.n	8015cf0 <etharp_find_entry+0x1b8>
 8015cde:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8015ce2:	2b0a      	cmp	r3, #10
 8015ce4:	d107      	bne.n	8015cf6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015ce6:	7afb      	ldrb	r3, [r7, #11]
 8015ce8:	f003 0301 	and.w	r3, r3, #1
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d102      	bne.n	8015cf6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8015cf4:	e085      	b.n	8015e02 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015cf6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8015cfa:	2b09      	cmp	r3, #9
 8015cfc:	dc02      	bgt.n	8015d04 <etharp_find_entry+0x1cc>
    i = empty;
 8015cfe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015d00:	843b      	strh	r3, [r7, #32]
 8015d02:	e039      	b.n	8015d78 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015d04:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8015d08:	2b09      	cmp	r3, #9
 8015d0a:	dc14      	bgt.n	8015d36 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015d0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015d0e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015d10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d14:	493d      	ldr	r1, [pc, #244]	@ (8015e0c <etharp_find_entry+0x2d4>)
 8015d16:	4613      	mov	r3, r2
 8015d18:	005b      	lsls	r3, r3, #1
 8015d1a:	4413      	add	r3, r2
 8015d1c:	00db      	lsls	r3, r3, #3
 8015d1e:	440b      	add	r3, r1
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d018      	beq.n	8015d58 <etharp_find_entry+0x220>
 8015d26:	4b3a      	ldr	r3, [pc, #232]	@ (8015e10 <etharp_find_entry+0x2d8>)
 8015d28:	f240 126d 	movw	r2, #365	@ 0x16d
 8015d2c:	493b      	ldr	r1, [pc, #236]	@ (8015e1c <etharp_find_entry+0x2e4>)
 8015d2e:	483a      	ldr	r0, [pc, #232]	@ (8015e18 <etharp_find_entry+0x2e0>)
 8015d30:	f00f fbca 	bl	80254c8 <iprintf>
 8015d34:	e010      	b.n	8015d58 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015d36:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8015d3a:	2b09      	cmp	r3, #9
 8015d3c:	dc02      	bgt.n	8015d44 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015d3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015d40:	843b      	strh	r3, [r7, #32]
 8015d42:	e009      	b.n	8015d58 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015d44:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015d48:	2b09      	cmp	r3, #9
 8015d4a:	dc02      	bgt.n	8015d52 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015d4c:	8bfb      	ldrh	r3, [r7, #30]
 8015d4e:	843b      	strh	r3, [r7, #32]
 8015d50:	e002      	b.n	8015d58 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015d52:	f04f 33ff 	mov.w	r3, #4294967295
 8015d56:	e054      	b.n	8015e02 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015d58:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015d5c:	2b09      	cmp	r3, #9
 8015d5e:	dd06      	ble.n	8015d6e <etharp_find_entry+0x236>
 8015d60:	4b2b      	ldr	r3, [pc, #172]	@ (8015e10 <etharp_find_entry+0x2d8>)
 8015d62:	f240 127f 	movw	r2, #383	@ 0x17f
 8015d66:	492e      	ldr	r1, [pc, #184]	@ (8015e20 <etharp_find_entry+0x2e8>)
 8015d68:	482b      	ldr	r0, [pc, #172]	@ (8015e18 <etharp_find_entry+0x2e0>)
 8015d6a:	f00f fbad 	bl	80254c8 <iprintf>
    etharp_free_entry(i);
 8015d6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015d72:	4618      	mov	r0, r3
 8015d74:	f7ff fe06 	bl	8015984 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015d78:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015d7c:	2b09      	cmp	r3, #9
 8015d7e:	dd06      	ble.n	8015d8e <etharp_find_entry+0x256>
 8015d80:	4b23      	ldr	r3, [pc, #140]	@ (8015e10 <etharp_find_entry+0x2d8>)
 8015d82:	f240 1283 	movw	r2, #387	@ 0x183
 8015d86:	4926      	ldr	r1, [pc, #152]	@ (8015e20 <etharp_find_entry+0x2e8>)
 8015d88:	4823      	ldr	r0, [pc, #140]	@ (8015e18 <etharp_find_entry+0x2e0>)
 8015d8a:	f00f fb9d 	bl	80254c8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015d8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d92:	491e      	ldr	r1, [pc, #120]	@ (8015e0c <etharp_find_entry+0x2d4>)
 8015d94:	4613      	mov	r3, r2
 8015d96:	005b      	lsls	r3, r3, #1
 8015d98:	4413      	add	r3, r2
 8015d9a:	00db      	lsls	r3, r3, #3
 8015d9c:	440b      	add	r3, r1
 8015d9e:	3314      	adds	r3, #20
 8015da0:	781b      	ldrb	r3, [r3, #0]
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d006      	beq.n	8015db4 <etharp_find_entry+0x27c>
 8015da6:	4b1a      	ldr	r3, [pc, #104]	@ (8015e10 <etharp_find_entry+0x2d8>)
 8015da8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8015dac:	491d      	ldr	r1, [pc, #116]	@ (8015e24 <etharp_find_entry+0x2ec>)
 8015dae:	481a      	ldr	r0, [pc, #104]	@ (8015e18 <etharp_find_entry+0x2e0>)
 8015db0:	f00f fb8a 	bl	80254c8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d00b      	beq.n	8015dd2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015dba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	6819      	ldr	r1, [r3, #0]
 8015dc2:	4812      	ldr	r0, [pc, #72]	@ (8015e0c <etharp_find_entry+0x2d4>)
 8015dc4:	4613      	mov	r3, r2
 8015dc6:	005b      	lsls	r3, r3, #1
 8015dc8:	4413      	add	r3, r2
 8015dca:	00db      	lsls	r3, r3, #3
 8015dcc:	4403      	add	r3, r0
 8015dce:	3304      	adds	r3, #4
 8015dd0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015dd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015dd6:	490d      	ldr	r1, [pc, #52]	@ (8015e0c <etharp_find_entry+0x2d4>)
 8015dd8:	4613      	mov	r3, r2
 8015dda:	005b      	lsls	r3, r3, #1
 8015ddc:	4413      	add	r3, r2
 8015dde:	00db      	lsls	r3, r3, #3
 8015de0:	440b      	add	r3, r1
 8015de2:	3312      	adds	r3, #18
 8015de4:	2200      	movs	r2, #0
 8015de6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015de8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015dec:	4907      	ldr	r1, [pc, #28]	@ (8015e0c <etharp_find_entry+0x2d4>)
 8015dee:	4613      	mov	r3, r2
 8015df0:	005b      	lsls	r3, r3, #1
 8015df2:	4413      	add	r3, r2
 8015df4:	00db      	lsls	r3, r3, #3
 8015df6:	440b      	add	r3, r1
 8015df8:	3308      	adds	r3, #8
 8015dfa:	687a      	ldr	r2, [r7, #4]
 8015dfc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015dfe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015e02:	4618      	mov	r0, r3
 8015e04:	3728      	adds	r7, #40	@ 0x28
 8015e06:	46bd      	mov	sp, r7
 8015e08:	bd80      	pop	{r7, pc}
 8015e0a:	bf00      	nop
 8015e0c:	2000fee0 	.word	0x2000fee0
 8015e10:	08029a20 	.word	0x08029a20
 8015e14:	08029a58 	.word	0x08029a58
 8015e18:	08029a98 	.word	0x08029a98
 8015e1c:	08029ac0 	.word	0x08029ac0
 8015e20:	08029ad8 	.word	0x08029ad8
 8015e24:	08029aec 	.word	0x08029aec

08015e28 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015e28:	b580      	push	{r7, lr}
 8015e2a:	b088      	sub	sp, #32
 8015e2c:	af02      	add	r7, sp, #8
 8015e2e:	60f8      	str	r0, [r7, #12]
 8015e30:	60b9      	str	r1, [r7, #8]
 8015e32:	607a      	str	r2, [r7, #4]
 8015e34:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8015e3c:	2b06      	cmp	r3, #6
 8015e3e:	d006      	beq.n	8015e4e <etharp_update_arp_entry+0x26>
 8015e40:	4b48      	ldr	r3, [pc, #288]	@ (8015f64 <etharp_update_arp_entry+0x13c>)
 8015e42:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8015e46:	4948      	ldr	r1, [pc, #288]	@ (8015f68 <etharp_update_arp_entry+0x140>)
 8015e48:	4848      	ldr	r0, [pc, #288]	@ (8015f6c <etharp_update_arp_entry+0x144>)
 8015e4a:	f00f fb3d 	bl	80254c8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015e4e:	68bb      	ldr	r3, [r7, #8]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d012      	beq.n	8015e7a <etharp_update_arp_entry+0x52>
 8015e54:	68bb      	ldr	r3, [r7, #8]
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d00e      	beq.n	8015e7a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015e5c:	68bb      	ldr	r3, [r7, #8]
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	68f9      	ldr	r1, [r7, #12]
 8015e62:	4618      	mov	r0, r3
 8015e64:	f001 f8fe 	bl	8017064 <ip4_addr_isbroadcast_u32>
 8015e68:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d105      	bne.n	8015e7a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015e6e:	68bb      	ldr	r3, [r7, #8]
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015e76:	2be0      	cmp	r3, #224	@ 0xe0
 8015e78:	d102      	bne.n	8015e80 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015e7a:	f06f 030f 	mvn.w	r3, #15
 8015e7e:	e06c      	b.n	8015f5a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015e80:	78fb      	ldrb	r3, [r7, #3]
 8015e82:	68fa      	ldr	r2, [r7, #12]
 8015e84:	4619      	mov	r1, r3
 8015e86:	68b8      	ldr	r0, [r7, #8]
 8015e88:	f7ff fe56 	bl	8015b38 <etharp_find_entry>
 8015e8c:	4603      	mov	r3, r0
 8015e8e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015e90:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	da02      	bge.n	8015e9e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015e98:	8afb      	ldrh	r3, [r7, #22]
 8015e9a:	b25b      	sxtb	r3, r3
 8015e9c:	e05d      	b.n	8015f5a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015e9e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015ea2:	4933      	ldr	r1, [pc, #204]	@ (8015f70 <etharp_update_arp_entry+0x148>)
 8015ea4:	4613      	mov	r3, r2
 8015ea6:	005b      	lsls	r3, r3, #1
 8015ea8:	4413      	add	r3, r2
 8015eaa:	00db      	lsls	r3, r3, #3
 8015eac:	440b      	add	r3, r1
 8015eae:	3314      	adds	r3, #20
 8015eb0:	2202      	movs	r2, #2
 8015eb2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015eb4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015eb8:	492d      	ldr	r1, [pc, #180]	@ (8015f70 <etharp_update_arp_entry+0x148>)
 8015eba:	4613      	mov	r3, r2
 8015ebc:	005b      	lsls	r3, r3, #1
 8015ebe:	4413      	add	r3, r2
 8015ec0:	00db      	lsls	r3, r3, #3
 8015ec2:	440b      	add	r3, r1
 8015ec4:	3308      	adds	r3, #8
 8015ec6:	68fa      	ldr	r2, [r7, #12]
 8015ec8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015eca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015ece:	4613      	mov	r3, r2
 8015ed0:	005b      	lsls	r3, r3, #1
 8015ed2:	4413      	add	r3, r2
 8015ed4:	00db      	lsls	r3, r3, #3
 8015ed6:	3308      	adds	r3, #8
 8015ed8:	4a25      	ldr	r2, [pc, #148]	@ (8015f70 <etharp_update_arp_entry+0x148>)
 8015eda:	4413      	add	r3, r2
 8015edc:	3304      	adds	r3, #4
 8015ede:	2206      	movs	r2, #6
 8015ee0:	6879      	ldr	r1, [r7, #4]
 8015ee2:	4618      	mov	r0, r3
 8015ee4:	f00f fd9d 	bl	8025a22 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015ee8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015eec:	4920      	ldr	r1, [pc, #128]	@ (8015f70 <etharp_update_arp_entry+0x148>)
 8015eee:	4613      	mov	r3, r2
 8015ef0:	005b      	lsls	r3, r3, #1
 8015ef2:	4413      	add	r3, r2
 8015ef4:	00db      	lsls	r3, r3, #3
 8015ef6:	440b      	add	r3, r1
 8015ef8:	3312      	adds	r3, #18
 8015efa:	2200      	movs	r2, #0
 8015efc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015efe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f02:	491b      	ldr	r1, [pc, #108]	@ (8015f70 <etharp_update_arp_entry+0x148>)
 8015f04:	4613      	mov	r3, r2
 8015f06:	005b      	lsls	r3, r3, #1
 8015f08:	4413      	add	r3, r2
 8015f0a:	00db      	lsls	r3, r3, #3
 8015f0c:	440b      	add	r3, r1
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d021      	beq.n	8015f58 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015f14:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f18:	4915      	ldr	r1, [pc, #84]	@ (8015f70 <etharp_update_arp_entry+0x148>)
 8015f1a:	4613      	mov	r3, r2
 8015f1c:	005b      	lsls	r3, r3, #1
 8015f1e:	4413      	add	r3, r2
 8015f20:	00db      	lsls	r3, r3, #3
 8015f22:	440b      	add	r3, r1
 8015f24:	681b      	ldr	r3, [r3, #0]
 8015f26:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015f28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f2c:	4910      	ldr	r1, [pc, #64]	@ (8015f70 <etharp_update_arp_entry+0x148>)
 8015f2e:	4613      	mov	r3, r2
 8015f30:	005b      	lsls	r3, r3, #1
 8015f32:	4413      	add	r3, r2
 8015f34:	00db      	lsls	r3, r3, #3
 8015f36:	440b      	add	r3, r1
 8015f38:	2200      	movs	r2, #0
 8015f3a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8015f42:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015f46:	9300      	str	r3, [sp, #0]
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	6939      	ldr	r1, [r7, #16]
 8015f4c:	68f8      	ldr	r0, [r7, #12]
 8015f4e:	f002 f8d5 	bl	80180fc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015f52:	6938      	ldr	r0, [r7, #16]
 8015f54:	f7f8 fc1c 	bl	800e790 <pbuf_free>
  }
  return ERR_OK;
 8015f58:	2300      	movs	r3, #0
}
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	3718      	adds	r7, #24
 8015f5e:	46bd      	mov	sp, r7
 8015f60:	bd80      	pop	{r7, pc}
 8015f62:	bf00      	nop
 8015f64:	08029a20 	.word	0x08029a20
 8015f68:	08029b18 	.word	0x08029b18
 8015f6c:	08029a98 	.word	0x08029a98
 8015f70:	2000fee0 	.word	0x2000fee0

08015f74 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015f74:	b580      	push	{r7, lr}
 8015f76:	b084      	sub	sp, #16
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015f7c:	2300      	movs	r3, #0
 8015f7e:	60fb      	str	r3, [r7, #12]
 8015f80:	e01e      	b.n	8015fc0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015f82:	4913      	ldr	r1, [pc, #76]	@ (8015fd0 <etharp_cleanup_netif+0x5c>)
 8015f84:	68fa      	ldr	r2, [r7, #12]
 8015f86:	4613      	mov	r3, r2
 8015f88:	005b      	lsls	r3, r3, #1
 8015f8a:	4413      	add	r3, r2
 8015f8c:	00db      	lsls	r3, r3, #3
 8015f8e:	440b      	add	r3, r1
 8015f90:	3314      	adds	r3, #20
 8015f92:	781b      	ldrb	r3, [r3, #0]
 8015f94:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015f96:	7afb      	ldrb	r3, [r7, #11]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d00e      	beq.n	8015fba <etharp_cleanup_netif+0x46>
 8015f9c:	490c      	ldr	r1, [pc, #48]	@ (8015fd0 <etharp_cleanup_netif+0x5c>)
 8015f9e:	68fa      	ldr	r2, [r7, #12]
 8015fa0:	4613      	mov	r3, r2
 8015fa2:	005b      	lsls	r3, r3, #1
 8015fa4:	4413      	add	r3, r2
 8015fa6:	00db      	lsls	r3, r3, #3
 8015fa8:	440b      	add	r3, r1
 8015faa:	3308      	adds	r3, #8
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	687a      	ldr	r2, [r7, #4]
 8015fb0:	429a      	cmp	r2, r3
 8015fb2:	d102      	bne.n	8015fba <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015fb4:	68f8      	ldr	r0, [r7, #12]
 8015fb6:	f7ff fce5 	bl	8015984 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	3301      	adds	r3, #1
 8015fbe:	60fb      	str	r3, [r7, #12]
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	2b09      	cmp	r3, #9
 8015fc4:	dddd      	ble.n	8015f82 <etharp_cleanup_netif+0xe>
    }
  }
}
 8015fc6:	bf00      	nop
 8015fc8:	bf00      	nop
 8015fca:	3710      	adds	r7, #16
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	bd80      	pop	{r7, pc}
 8015fd0:	2000fee0 	.word	0x2000fee0

08015fd4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015fd4:	b5b0      	push	{r4, r5, r7, lr}
 8015fd6:	b08a      	sub	sp, #40	@ 0x28
 8015fd8:	af04      	add	r7, sp, #16
 8015fda:	6078      	str	r0, [r7, #4]
 8015fdc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015fde:	683b      	ldr	r3, [r7, #0]
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d107      	bne.n	8015ff4 <etharp_input+0x20>
 8015fe4:	4b3d      	ldr	r3, [pc, #244]	@ (80160dc <etharp_input+0x108>)
 8015fe6:	f240 228a 	movw	r2, #650	@ 0x28a
 8015fea:	493d      	ldr	r1, [pc, #244]	@ (80160e0 <etharp_input+0x10c>)
 8015fec:	483d      	ldr	r0, [pc, #244]	@ (80160e4 <etharp_input+0x110>)
 8015fee:	f00f fa6b 	bl	80254c8 <iprintf>
 8015ff2:	e06f      	b.n	80160d4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	685b      	ldr	r3, [r3, #4]
 8015ff8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015ffa:	693b      	ldr	r3, [r7, #16]
 8015ffc:	881b      	ldrh	r3, [r3, #0]
 8015ffe:	b29b      	uxth	r3, r3
 8016000:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016004:	d10c      	bne.n	8016020 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016006:	693b      	ldr	r3, [r7, #16]
 8016008:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801600a:	2b06      	cmp	r3, #6
 801600c:	d108      	bne.n	8016020 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801600e:	693b      	ldr	r3, [r7, #16]
 8016010:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016012:	2b04      	cmp	r3, #4
 8016014:	d104      	bne.n	8016020 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016016:	693b      	ldr	r3, [r7, #16]
 8016018:	885b      	ldrh	r3, [r3, #2]
 801601a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801601c:	2b08      	cmp	r3, #8
 801601e:	d003      	beq.n	8016028 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016020:	6878      	ldr	r0, [r7, #4]
 8016022:	f7f8 fbb5 	bl	800e790 <pbuf_free>
    return;
 8016026:	e055      	b.n	80160d4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016028:	693b      	ldr	r3, [r7, #16]
 801602a:	330e      	adds	r3, #14
 801602c:	681b      	ldr	r3, [r3, #0]
 801602e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016030:	693b      	ldr	r3, [r7, #16]
 8016032:	3318      	adds	r3, #24
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016038:	683b      	ldr	r3, [r7, #0]
 801603a:	3304      	adds	r3, #4
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	2b00      	cmp	r3, #0
 8016040:	d102      	bne.n	8016048 <etharp_input+0x74>
    for_us = 0;
 8016042:	2300      	movs	r3, #0
 8016044:	75fb      	strb	r3, [r7, #23]
 8016046:	e009      	b.n	801605c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016048:	68ba      	ldr	r2, [r7, #8]
 801604a:	683b      	ldr	r3, [r7, #0]
 801604c:	3304      	adds	r3, #4
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	429a      	cmp	r2, r3
 8016052:	bf0c      	ite	eq
 8016054:	2301      	moveq	r3, #1
 8016056:	2300      	movne	r3, #0
 8016058:	b2db      	uxtb	r3, r3
 801605a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801605c:	693b      	ldr	r3, [r7, #16]
 801605e:	f103 0208 	add.w	r2, r3, #8
 8016062:	7dfb      	ldrb	r3, [r7, #23]
 8016064:	2b00      	cmp	r3, #0
 8016066:	d001      	beq.n	801606c <etharp_input+0x98>
 8016068:	2301      	movs	r3, #1
 801606a:	e000      	b.n	801606e <etharp_input+0x9a>
 801606c:	2302      	movs	r3, #2
 801606e:	f107 010c 	add.w	r1, r7, #12
 8016072:	6838      	ldr	r0, [r7, #0]
 8016074:	f7ff fed8 	bl	8015e28 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016078:	693b      	ldr	r3, [r7, #16]
 801607a:	88db      	ldrh	r3, [r3, #6]
 801607c:	b29b      	uxth	r3, r3
 801607e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016082:	d003      	beq.n	801608c <etharp_input+0xb8>
 8016084:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016088:	d01e      	beq.n	80160c8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801608a:	e020      	b.n	80160ce <etharp_input+0xfa>
      if (for_us) {
 801608c:	7dfb      	ldrb	r3, [r7, #23]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d01c      	beq.n	80160cc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016092:	683b      	ldr	r3, [r7, #0]
 8016094:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8016098:	693b      	ldr	r3, [r7, #16]
 801609a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801609e:	683b      	ldr	r3, [r7, #0]
 80160a0:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 80160a4:	683b      	ldr	r3, [r7, #0]
 80160a6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80160a8:	693a      	ldr	r2, [r7, #16]
 80160aa:	3208      	adds	r2, #8
        etharp_raw(netif,
 80160ac:	2102      	movs	r1, #2
 80160ae:	9103      	str	r1, [sp, #12]
 80160b0:	f107 010c 	add.w	r1, r7, #12
 80160b4:	9102      	str	r1, [sp, #8]
 80160b6:	9201      	str	r2, [sp, #4]
 80160b8:	9300      	str	r3, [sp, #0]
 80160ba:	462b      	mov	r3, r5
 80160bc:	4622      	mov	r2, r4
 80160be:	4601      	mov	r1, r0
 80160c0:	6838      	ldr	r0, [r7, #0]
 80160c2:	f000 faeb 	bl	801669c <etharp_raw>
      break;
 80160c6:	e001      	b.n	80160cc <etharp_input+0xf8>
      break;
 80160c8:	bf00      	nop
 80160ca:	e000      	b.n	80160ce <etharp_input+0xfa>
      break;
 80160cc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80160ce:	6878      	ldr	r0, [r7, #4]
 80160d0:	f7f8 fb5e 	bl	800e790 <pbuf_free>
}
 80160d4:	3718      	adds	r7, #24
 80160d6:	46bd      	mov	sp, r7
 80160d8:	bdb0      	pop	{r4, r5, r7, pc}
 80160da:	bf00      	nop
 80160dc:	08029a20 	.word	0x08029a20
 80160e0:	08029b70 	.word	0x08029b70
 80160e4:	08029a98 	.word	0x08029a98

080160e8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80160e8:	b580      	push	{r7, lr}
 80160ea:	b086      	sub	sp, #24
 80160ec:	af02      	add	r7, sp, #8
 80160ee:	60f8      	str	r0, [r7, #12]
 80160f0:	60b9      	str	r1, [r7, #8]
 80160f2:	4613      	mov	r3, r2
 80160f4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80160f6:	79fa      	ldrb	r2, [r7, #7]
 80160f8:	4944      	ldr	r1, [pc, #272]	@ (801620c <etharp_output_to_arp_index+0x124>)
 80160fa:	4613      	mov	r3, r2
 80160fc:	005b      	lsls	r3, r3, #1
 80160fe:	4413      	add	r3, r2
 8016100:	00db      	lsls	r3, r3, #3
 8016102:	440b      	add	r3, r1
 8016104:	3314      	adds	r3, #20
 8016106:	781b      	ldrb	r3, [r3, #0]
 8016108:	2b01      	cmp	r3, #1
 801610a:	d806      	bhi.n	801611a <etharp_output_to_arp_index+0x32>
 801610c:	4b40      	ldr	r3, [pc, #256]	@ (8016210 <etharp_output_to_arp_index+0x128>)
 801610e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8016112:	4940      	ldr	r1, [pc, #256]	@ (8016214 <etharp_output_to_arp_index+0x12c>)
 8016114:	4840      	ldr	r0, [pc, #256]	@ (8016218 <etharp_output_to_arp_index+0x130>)
 8016116:	f00f f9d7 	bl	80254c8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801611a:	79fa      	ldrb	r2, [r7, #7]
 801611c:	493b      	ldr	r1, [pc, #236]	@ (801620c <etharp_output_to_arp_index+0x124>)
 801611e:	4613      	mov	r3, r2
 8016120:	005b      	lsls	r3, r3, #1
 8016122:	4413      	add	r3, r2
 8016124:	00db      	lsls	r3, r3, #3
 8016126:	440b      	add	r3, r1
 8016128:	3314      	adds	r3, #20
 801612a:	781b      	ldrb	r3, [r3, #0]
 801612c:	2b02      	cmp	r3, #2
 801612e:	d153      	bne.n	80161d8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016130:	79fa      	ldrb	r2, [r7, #7]
 8016132:	4936      	ldr	r1, [pc, #216]	@ (801620c <etharp_output_to_arp_index+0x124>)
 8016134:	4613      	mov	r3, r2
 8016136:	005b      	lsls	r3, r3, #1
 8016138:	4413      	add	r3, r2
 801613a:	00db      	lsls	r3, r3, #3
 801613c:	440b      	add	r3, r1
 801613e:	3312      	adds	r3, #18
 8016140:	881b      	ldrh	r3, [r3, #0]
 8016142:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8016146:	d919      	bls.n	801617c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016148:	79fa      	ldrb	r2, [r7, #7]
 801614a:	4613      	mov	r3, r2
 801614c:	005b      	lsls	r3, r3, #1
 801614e:	4413      	add	r3, r2
 8016150:	00db      	lsls	r3, r3, #3
 8016152:	4a2e      	ldr	r2, [pc, #184]	@ (801620c <etharp_output_to_arp_index+0x124>)
 8016154:	4413      	add	r3, r2
 8016156:	3304      	adds	r3, #4
 8016158:	4619      	mov	r1, r3
 801615a:	68f8      	ldr	r0, [r7, #12]
 801615c:	f000 fb4c 	bl	80167f8 <etharp_request>
 8016160:	4603      	mov	r3, r0
 8016162:	2b00      	cmp	r3, #0
 8016164:	d138      	bne.n	80161d8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016166:	79fa      	ldrb	r2, [r7, #7]
 8016168:	4928      	ldr	r1, [pc, #160]	@ (801620c <etharp_output_to_arp_index+0x124>)
 801616a:	4613      	mov	r3, r2
 801616c:	005b      	lsls	r3, r3, #1
 801616e:	4413      	add	r3, r2
 8016170:	00db      	lsls	r3, r3, #3
 8016172:	440b      	add	r3, r1
 8016174:	3314      	adds	r3, #20
 8016176:	2203      	movs	r2, #3
 8016178:	701a      	strb	r2, [r3, #0]
 801617a:	e02d      	b.n	80161d8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801617c:	79fa      	ldrb	r2, [r7, #7]
 801617e:	4923      	ldr	r1, [pc, #140]	@ (801620c <etharp_output_to_arp_index+0x124>)
 8016180:	4613      	mov	r3, r2
 8016182:	005b      	lsls	r3, r3, #1
 8016184:	4413      	add	r3, r2
 8016186:	00db      	lsls	r3, r3, #3
 8016188:	440b      	add	r3, r1
 801618a:	3312      	adds	r3, #18
 801618c:	881b      	ldrh	r3, [r3, #0]
 801618e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8016192:	d321      	bcc.n	80161d8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016194:	79fa      	ldrb	r2, [r7, #7]
 8016196:	4613      	mov	r3, r2
 8016198:	005b      	lsls	r3, r3, #1
 801619a:	4413      	add	r3, r2
 801619c:	00db      	lsls	r3, r3, #3
 801619e:	4a1b      	ldr	r2, [pc, #108]	@ (801620c <etharp_output_to_arp_index+0x124>)
 80161a0:	4413      	add	r3, r2
 80161a2:	1d19      	adds	r1, r3, #4
 80161a4:	79fa      	ldrb	r2, [r7, #7]
 80161a6:	4613      	mov	r3, r2
 80161a8:	005b      	lsls	r3, r3, #1
 80161aa:	4413      	add	r3, r2
 80161ac:	00db      	lsls	r3, r3, #3
 80161ae:	3308      	adds	r3, #8
 80161b0:	4a16      	ldr	r2, [pc, #88]	@ (801620c <etharp_output_to_arp_index+0x124>)
 80161b2:	4413      	add	r3, r2
 80161b4:	3304      	adds	r3, #4
 80161b6:	461a      	mov	r2, r3
 80161b8:	68f8      	ldr	r0, [r7, #12]
 80161ba:	f000 fafb 	bl	80167b4 <etharp_request_dst>
 80161be:	4603      	mov	r3, r0
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d109      	bne.n	80161d8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80161c4:	79fa      	ldrb	r2, [r7, #7]
 80161c6:	4911      	ldr	r1, [pc, #68]	@ (801620c <etharp_output_to_arp_index+0x124>)
 80161c8:	4613      	mov	r3, r2
 80161ca:	005b      	lsls	r3, r3, #1
 80161cc:	4413      	add	r3, r2
 80161ce:	00db      	lsls	r3, r3, #3
 80161d0:	440b      	add	r3, r1
 80161d2:	3314      	adds	r3, #20
 80161d4:	2203      	movs	r2, #3
 80161d6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 80161de:	79fa      	ldrb	r2, [r7, #7]
 80161e0:	4613      	mov	r3, r2
 80161e2:	005b      	lsls	r3, r3, #1
 80161e4:	4413      	add	r3, r2
 80161e6:	00db      	lsls	r3, r3, #3
 80161e8:	3308      	adds	r3, #8
 80161ea:	4a08      	ldr	r2, [pc, #32]	@ (801620c <etharp_output_to_arp_index+0x124>)
 80161ec:	4413      	add	r3, r2
 80161ee:	3304      	adds	r3, #4
 80161f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80161f4:	9200      	str	r2, [sp, #0]
 80161f6:	460a      	mov	r2, r1
 80161f8:	68b9      	ldr	r1, [r7, #8]
 80161fa:	68f8      	ldr	r0, [r7, #12]
 80161fc:	f001 ff7e 	bl	80180fc <ethernet_output>
 8016200:	4603      	mov	r3, r0
}
 8016202:	4618      	mov	r0, r3
 8016204:	3710      	adds	r7, #16
 8016206:	46bd      	mov	sp, r7
 8016208:	bd80      	pop	{r7, pc}
 801620a:	bf00      	nop
 801620c:	2000fee0 	.word	0x2000fee0
 8016210:	08029a20 	.word	0x08029a20
 8016214:	08029b90 	.word	0x08029b90
 8016218:	08029a98 	.word	0x08029a98

0801621c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801621c:	b580      	push	{r7, lr}
 801621e:	b08a      	sub	sp, #40	@ 0x28
 8016220:	af02      	add	r7, sp, #8
 8016222:	60f8      	str	r0, [r7, #12]
 8016224:	60b9      	str	r1, [r7, #8]
 8016226:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	2b00      	cmp	r3, #0
 8016230:	d106      	bne.n	8016240 <etharp_output+0x24>
 8016232:	4b73      	ldr	r3, [pc, #460]	@ (8016400 <etharp_output+0x1e4>)
 8016234:	f240 321e 	movw	r2, #798	@ 0x31e
 8016238:	4972      	ldr	r1, [pc, #456]	@ (8016404 <etharp_output+0x1e8>)
 801623a:	4873      	ldr	r0, [pc, #460]	@ (8016408 <etharp_output+0x1ec>)
 801623c:	f00f f944 	bl	80254c8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016240:	68bb      	ldr	r3, [r7, #8]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d106      	bne.n	8016254 <etharp_output+0x38>
 8016246:	4b6e      	ldr	r3, [pc, #440]	@ (8016400 <etharp_output+0x1e4>)
 8016248:	f240 321f 	movw	r2, #799	@ 0x31f
 801624c:	496f      	ldr	r1, [pc, #444]	@ (801640c <etharp_output+0x1f0>)
 801624e:	486e      	ldr	r0, [pc, #440]	@ (8016408 <etharp_output+0x1ec>)
 8016250:	f00f f93a 	bl	80254c8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	2b00      	cmp	r3, #0
 8016258:	d106      	bne.n	8016268 <etharp_output+0x4c>
 801625a:	4b69      	ldr	r3, [pc, #420]	@ (8016400 <etharp_output+0x1e4>)
 801625c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8016260:	496b      	ldr	r1, [pc, #428]	@ (8016410 <etharp_output+0x1f4>)
 8016262:	4869      	ldr	r0, [pc, #420]	@ (8016408 <etharp_output+0x1ec>)
 8016264:	f00f f930 	bl	80254c8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	68f9      	ldr	r1, [r7, #12]
 801626e:	4618      	mov	r0, r3
 8016270:	f000 fef8 	bl	8017064 <ip4_addr_isbroadcast_u32>
 8016274:	4603      	mov	r3, r0
 8016276:	2b00      	cmp	r3, #0
 8016278:	d002      	beq.n	8016280 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801627a:	4b66      	ldr	r3, [pc, #408]	@ (8016414 <etharp_output+0x1f8>)
 801627c:	61fb      	str	r3, [r7, #28]
 801627e:	e0af      	b.n	80163e0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016288:	2be0      	cmp	r3, #224	@ 0xe0
 801628a:	d118      	bne.n	80162be <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801628c:	2301      	movs	r3, #1
 801628e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016290:	2300      	movs	r3, #0
 8016292:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016294:	235e      	movs	r3, #94	@ 0x5e
 8016296:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	3301      	adds	r3, #1
 801629c:	781b      	ldrb	r3, [r3, #0]
 801629e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80162a2:	b2db      	uxtb	r3, r3
 80162a4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	3302      	adds	r3, #2
 80162aa:	781b      	ldrb	r3, [r3, #0]
 80162ac:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	3303      	adds	r3, #3
 80162b2:	781b      	ldrb	r3, [r3, #0]
 80162b4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80162b6:	f107 0310 	add.w	r3, r7, #16
 80162ba:	61fb      	str	r3, [r7, #28]
 80162bc:	e090      	b.n	80163e0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	681a      	ldr	r2, [r3, #0]
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	3304      	adds	r3, #4
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	405a      	eors	r2, r3
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	3308      	adds	r3, #8
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	4013      	ands	r3, r2
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d012      	beq.n	80162fc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80162dc:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80162e0:	4293      	cmp	r3, r2
 80162e2:	d00b      	beq.n	80162fc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	330c      	adds	r3, #12
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d003      	beq.n	80162f6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	330c      	adds	r3, #12
 80162f2:	61bb      	str	r3, [r7, #24]
 80162f4:	e002      	b.n	80162fc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80162f6:	f06f 0303 	mvn.w	r3, #3
 80162fa:	e07d      	b.n	80163f8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80162fc:	4b46      	ldr	r3, [pc, #280]	@ (8016418 <etharp_output+0x1fc>)
 80162fe:	781b      	ldrb	r3, [r3, #0]
 8016300:	4619      	mov	r1, r3
 8016302:	4a46      	ldr	r2, [pc, #280]	@ (801641c <etharp_output+0x200>)
 8016304:	460b      	mov	r3, r1
 8016306:	005b      	lsls	r3, r3, #1
 8016308:	440b      	add	r3, r1
 801630a:	00db      	lsls	r3, r3, #3
 801630c:	4413      	add	r3, r2
 801630e:	3314      	adds	r3, #20
 8016310:	781b      	ldrb	r3, [r3, #0]
 8016312:	2b01      	cmp	r3, #1
 8016314:	d925      	bls.n	8016362 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016316:	4b40      	ldr	r3, [pc, #256]	@ (8016418 <etharp_output+0x1fc>)
 8016318:	781b      	ldrb	r3, [r3, #0]
 801631a:	4619      	mov	r1, r3
 801631c:	4a3f      	ldr	r2, [pc, #252]	@ (801641c <etharp_output+0x200>)
 801631e:	460b      	mov	r3, r1
 8016320:	005b      	lsls	r3, r3, #1
 8016322:	440b      	add	r3, r1
 8016324:	00db      	lsls	r3, r3, #3
 8016326:	4413      	add	r3, r2
 8016328:	3308      	adds	r3, #8
 801632a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801632c:	68fa      	ldr	r2, [r7, #12]
 801632e:	429a      	cmp	r2, r3
 8016330:	d117      	bne.n	8016362 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016332:	69bb      	ldr	r3, [r7, #24]
 8016334:	681a      	ldr	r2, [r3, #0]
 8016336:	4b38      	ldr	r3, [pc, #224]	@ (8016418 <etharp_output+0x1fc>)
 8016338:	781b      	ldrb	r3, [r3, #0]
 801633a:	4618      	mov	r0, r3
 801633c:	4937      	ldr	r1, [pc, #220]	@ (801641c <etharp_output+0x200>)
 801633e:	4603      	mov	r3, r0
 8016340:	005b      	lsls	r3, r3, #1
 8016342:	4403      	add	r3, r0
 8016344:	00db      	lsls	r3, r3, #3
 8016346:	440b      	add	r3, r1
 8016348:	3304      	adds	r3, #4
 801634a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801634c:	429a      	cmp	r2, r3
 801634e:	d108      	bne.n	8016362 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016350:	4b31      	ldr	r3, [pc, #196]	@ (8016418 <etharp_output+0x1fc>)
 8016352:	781b      	ldrb	r3, [r3, #0]
 8016354:	461a      	mov	r2, r3
 8016356:	68b9      	ldr	r1, [r7, #8]
 8016358:	68f8      	ldr	r0, [r7, #12]
 801635a:	f7ff fec5 	bl	80160e8 <etharp_output_to_arp_index>
 801635e:	4603      	mov	r3, r0
 8016360:	e04a      	b.n	80163f8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016362:	2300      	movs	r3, #0
 8016364:	75fb      	strb	r3, [r7, #23]
 8016366:	e031      	b.n	80163cc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016368:	7dfa      	ldrb	r2, [r7, #23]
 801636a:	492c      	ldr	r1, [pc, #176]	@ (801641c <etharp_output+0x200>)
 801636c:	4613      	mov	r3, r2
 801636e:	005b      	lsls	r3, r3, #1
 8016370:	4413      	add	r3, r2
 8016372:	00db      	lsls	r3, r3, #3
 8016374:	440b      	add	r3, r1
 8016376:	3314      	adds	r3, #20
 8016378:	781b      	ldrb	r3, [r3, #0]
 801637a:	2b01      	cmp	r3, #1
 801637c:	d923      	bls.n	80163c6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801637e:	7dfa      	ldrb	r2, [r7, #23]
 8016380:	4926      	ldr	r1, [pc, #152]	@ (801641c <etharp_output+0x200>)
 8016382:	4613      	mov	r3, r2
 8016384:	005b      	lsls	r3, r3, #1
 8016386:	4413      	add	r3, r2
 8016388:	00db      	lsls	r3, r3, #3
 801638a:	440b      	add	r3, r1
 801638c:	3308      	adds	r3, #8
 801638e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016390:	68fa      	ldr	r2, [r7, #12]
 8016392:	429a      	cmp	r2, r3
 8016394:	d117      	bne.n	80163c6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016396:	69bb      	ldr	r3, [r7, #24]
 8016398:	6819      	ldr	r1, [r3, #0]
 801639a:	7dfa      	ldrb	r2, [r7, #23]
 801639c:	481f      	ldr	r0, [pc, #124]	@ (801641c <etharp_output+0x200>)
 801639e:	4613      	mov	r3, r2
 80163a0:	005b      	lsls	r3, r3, #1
 80163a2:	4413      	add	r3, r2
 80163a4:	00db      	lsls	r3, r3, #3
 80163a6:	4403      	add	r3, r0
 80163a8:	3304      	adds	r3, #4
 80163aa:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80163ac:	4299      	cmp	r1, r3
 80163ae:	d10a      	bne.n	80163c6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80163b0:	4a19      	ldr	r2, [pc, #100]	@ (8016418 <etharp_output+0x1fc>)
 80163b2:	7dfb      	ldrb	r3, [r7, #23]
 80163b4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80163b6:	7dfb      	ldrb	r3, [r7, #23]
 80163b8:	461a      	mov	r2, r3
 80163ba:	68b9      	ldr	r1, [r7, #8]
 80163bc:	68f8      	ldr	r0, [r7, #12]
 80163be:	f7ff fe93 	bl	80160e8 <etharp_output_to_arp_index>
 80163c2:	4603      	mov	r3, r0
 80163c4:	e018      	b.n	80163f8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80163c6:	7dfb      	ldrb	r3, [r7, #23]
 80163c8:	3301      	adds	r3, #1
 80163ca:	75fb      	strb	r3, [r7, #23]
 80163cc:	7dfb      	ldrb	r3, [r7, #23]
 80163ce:	2b09      	cmp	r3, #9
 80163d0:	d9ca      	bls.n	8016368 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80163d2:	68ba      	ldr	r2, [r7, #8]
 80163d4:	69b9      	ldr	r1, [r7, #24]
 80163d6:	68f8      	ldr	r0, [r7, #12]
 80163d8:	f000 f822 	bl	8016420 <etharp_query>
 80163dc:	4603      	mov	r3, r0
 80163de:	e00b      	b.n	80163f8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80163e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80163ea:	9300      	str	r3, [sp, #0]
 80163ec:	69fb      	ldr	r3, [r7, #28]
 80163ee:	68b9      	ldr	r1, [r7, #8]
 80163f0:	68f8      	ldr	r0, [r7, #12]
 80163f2:	f001 fe83 	bl	80180fc <ethernet_output>
 80163f6:	4603      	mov	r3, r0
}
 80163f8:	4618      	mov	r0, r3
 80163fa:	3720      	adds	r7, #32
 80163fc:	46bd      	mov	sp, r7
 80163fe:	bd80      	pop	{r7, pc}
 8016400:	08029a20 	.word	0x08029a20
 8016404:	08029b70 	.word	0x08029b70
 8016408:	08029a98 	.word	0x08029a98
 801640c:	08029bc0 	.word	0x08029bc0
 8016410:	08029b60 	.word	0x08029b60
 8016414:	0802a2f0 	.word	0x0802a2f0
 8016418:	2000ffd0 	.word	0x2000ffd0
 801641c:	2000fee0 	.word	0x2000fee0

08016420 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016420:	b580      	push	{r7, lr}
 8016422:	b08c      	sub	sp, #48	@ 0x30
 8016424:	af02      	add	r7, sp, #8
 8016426:	60f8      	str	r0, [r7, #12]
 8016428:	60b9      	str	r1, [r7, #8]
 801642a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	3326      	adds	r3, #38	@ 0x26
 8016430:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016432:	23ff      	movs	r3, #255	@ 0xff
 8016434:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8016438:	2300      	movs	r3, #0
 801643a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801643c:	68bb      	ldr	r3, [r7, #8]
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	68f9      	ldr	r1, [r7, #12]
 8016442:	4618      	mov	r0, r3
 8016444:	f000 fe0e 	bl	8017064 <ip4_addr_isbroadcast_u32>
 8016448:	4603      	mov	r3, r0
 801644a:	2b00      	cmp	r3, #0
 801644c:	d10c      	bne.n	8016468 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801644e:	68bb      	ldr	r3, [r7, #8]
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016456:	2be0      	cmp	r3, #224	@ 0xe0
 8016458:	d006      	beq.n	8016468 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801645a:	68bb      	ldr	r3, [r7, #8]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d003      	beq.n	8016468 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016460:	68bb      	ldr	r3, [r7, #8]
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d102      	bne.n	801646e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016468:	f06f 030f 	mvn.w	r3, #15
 801646c:	e101      	b.n	8016672 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801646e:	68fa      	ldr	r2, [r7, #12]
 8016470:	2101      	movs	r1, #1
 8016472:	68b8      	ldr	r0, [r7, #8]
 8016474:	f7ff fb60 	bl	8015b38 <etharp_find_entry>
 8016478:	4603      	mov	r3, r0
 801647a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801647c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016480:	2b00      	cmp	r3, #0
 8016482:	da02      	bge.n	801648a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016484:	8a7b      	ldrh	r3, [r7, #18]
 8016486:	b25b      	sxtb	r3, r3
 8016488:	e0f3      	b.n	8016672 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801648a:	8a7b      	ldrh	r3, [r7, #18]
 801648c:	2b7e      	cmp	r3, #126	@ 0x7e
 801648e:	d906      	bls.n	801649e <etharp_query+0x7e>
 8016490:	4b7a      	ldr	r3, [pc, #488]	@ (801667c <etharp_query+0x25c>)
 8016492:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8016496:	497a      	ldr	r1, [pc, #488]	@ (8016680 <etharp_query+0x260>)
 8016498:	487a      	ldr	r0, [pc, #488]	@ (8016684 <etharp_query+0x264>)
 801649a:	f00f f815 	bl	80254c8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801649e:	8a7b      	ldrh	r3, [r7, #18]
 80164a0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80164a2:	7c7a      	ldrb	r2, [r7, #17]
 80164a4:	4978      	ldr	r1, [pc, #480]	@ (8016688 <etharp_query+0x268>)
 80164a6:	4613      	mov	r3, r2
 80164a8:	005b      	lsls	r3, r3, #1
 80164aa:	4413      	add	r3, r2
 80164ac:	00db      	lsls	r3, r3, #3
 80164ae:	440b      	add	r3, r1
 80164b0:	3314      	adds	r3, #20
 80164b2:	781b      	ldrb	r3, [r3, #0]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d115      	bne.n	80164e4 <etharp_query+0xc4>
    is_new_entry = 1;
 80164b8:	2301      	movs	r3, #1
 80164ba:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80164bc:	7c7a      	ldrb	r2, [r7, #17]
 80164be:	4972      	ldr	r1, [pc, #456]	@ (8016688 <etharp_query+0x268>)
 80164c0:	4613      	mov	r3, r2
 80164c2:	005b      	lsls	r3, r3, #1
 80164c4:	4413      	add	r3, r2
 80164c6:	00db      	lsls	r3, r3, #3
 80164c8:	440b      	add	r3, r1
 80164ca:	3314      	adds	r3, #20
 80164cc:	2201      	movs	r2, #1
 80164ce:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80164d0:	7c7a      	ldrb	r2, [r7, #17]
 80164d2:	496d      	ldr	r1, [pc, #436]	@ (8016688 <etharp_query+0x268>)
 80164d4:	4613      	mov	r3, r2
 80164d6:	005b      	lsls	r3, r3, #1
 80164d8:	4413      	add	r3, r2
 80164da:	00db      	lsls	r3, r3, #3
 80164dc:	440b      	add	r3, r1
 80164de:	3308      	adds	r3, #8
 80164e0:	68fa      	ldr	r2, [r7, #12]
 80164e2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80164e4:	7c7a      	ldrb	r2, [r7, #17]
 80164e6:	4968      	ldr	r1, [pc, #416]	@ (8016688 <etharp_query+0x268>)
 80164e8:	4613      	mov	r3, r2
 80164ea:	005b      	lsls	r3, r3, #1
 80164ec:	4413      	add	r3, r2
 80164ee:	00db      	lsls	r3, r3, #3
 80164f0:	440b      	add	r3, r1
 80164f2:	3314      	adds	r3, #20
 80164f4:	781b      	ldrb	r3, [r3, #0]
 80164f6:	2b01      	cmp	r3, #1
 80164f8:	d011      	beq.n	801651e <etharp_query+0xfe>
 80164fa:	7c7a      	ldrb	r2, [r7, #17]
 80164fc:	4962      	ldr	r1, [pc, #392]	@ (8016688 <etharp_query+0x268>)
 80164fe:	4613      	mov	r3, r2
 8016500:	005b      	lsls	r3, r3, #1
 8016502:	4413      	add	r3, r2
 8016504:	00db      	lsls	r3, r3, #3
 8016506:	440b      	add	r3, r1
 8016508:	3314      	adds	r3, #20
 801650a:	781b      	ldrb	r3, [r3, #0]
 801650c:	2b01      	cmp	r3, #1
 801650e:	d806      	bhi.n	801651e <etharp_query+0xfe>
 8016510:	4b5a      	ldr	r3, [pc, #360]	@ (801667c <etharp_query+0x25c>)
 8016512:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8016516:	495d      	ldr	r1, [pc, #372]	@ (801668c <etharp_query+0x26c>)
 8016518:	485a      	ldr	r0, [pc, #360]	@ (8016684 <etharp_query+0x264>)
 801651a:	f00e ffd5 	bl	80254c8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801651e:	6a3b      	ldr	r3, [r7, #32]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d102      	bne.n	801652a <etharp_query+0x10a>
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	2b00      	cmp	r3, #0
 8016528:	d10c      	bne.n	8016544 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801652a:	68b9      	ldr	r1, [r7, #8]
 801652c:	68f8      	ldr	r0, [r7, #12]
 801652e:	f000 f963 	bl	80167f8 <etharp_request>
 8016532:	4603      	mov	r3, r0
 8016534:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d102      	bne.n	8016544 <etharp_query+0x124>
      return result;
 801653e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8016542:	e096      	b.n	8016672 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	2b00      	cmp	r3, #0
 8016548:	d106      	bne.n	8016558 <etharp_query+0x138>
 801654a:	4b4c      	ldr	r3, [pc, #304]	@ (801667c <etharp_query+0x25c>)
 801654c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8016550:	494f      	ldr	r1, [pc, #316]	@ (8016690 <etharp_query+0x270>)
 8016552:	484c      	ldr	r0, [pc, #304]	@ (8016684 <etharp_query+0x264>)
 8016554:	f00e ffb8 	bl	80254c8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016558:	7c7a      	ldrb	r2, [r7, #17]
 801655a:	494b      	ldr	r1, [pc, #300]	@ (8016688 <etharp_query+0x268>)
 801655c:	4613      	mov	r3, r2
 801655e:	005b      	lsls	r3, r3, #1
 8016560:	4413      	add	r3, r2
 8016562:	00db      	lsls	r3, r3, #3
 8016564:	440b      	add	r3, r1
 8016566:	3314      	adds	r3, #20
 8016568:	781b      	ldrb	r3, [r3, #0]
 801656a:	2b01      	cmp	r3, #1
 801656c:	d917      	bls.n	801659e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801656e:	4a49      	ldr	r2, [pc, #292]	@ (8016694 <etharp_query+0x274>)
 8016570:	7c7b      	ldrb	r3, [r7, #17]
 8016572:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016574:	7c7a      	ldrb	r2, [r7, #17]
 8016576:	4613      	mov	r3, r2
 8016578:	005b      	lsls	r3, r3, #1
 801657a:	4413      	add	r3, r2
 801657c:	00db      	lsls	r3, r3, #3
 801657e:	3308      	adds	r3, #8
 8016580:	4a41      	ldr	r2, [pc, #260]	@ (8016688 <etharp_query+0x268>)
 8016582:	4413      	add	r3, r2
 8016584:	3304      	adds	r3, #4
 8016586:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801658a:	9200      	str	r2, [sp, #0]
 801658c:	697a      	ldr	r2, [r7, #20]
 801658e:	6879      	ldr	r1, [r7, #4]
 8016590:	68f8      	ldr	r0, [r7, #12]
 8016592:	f001 fdb3 	bl	80180fc <ethernet_output>
 8016596:	4603      	mov	r3, r0
 8016598:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801659c:	e067      	b.n	801666e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801659e:	7c7a      	ldrb	r2, [r7, #17]
 80165a0:	4939      	ldr	r1, [pc, #228]	@ (8016688 <etharp_query+0x268>)
 80165a2:	4613      	mov	r3, r2
 80165a4:	005b      	lsls	r3, r3, #1
 80165a6:	4413      	add	r3, r2
 80165a8:	00db      	lsls	r3, r3, #3
 80165aa:	440b      	add	r3, r1
 80165ac:	3314      	adds	r3, #20
 80165ae:	781b      	ldrb	r3, [r3, #0]
 80165b0:	2b01      	cmp	r3, #1
 80165b2:	d15c      	bne.n	801666e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80165b4:	2300      	movs	r3, #0
 80165b6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	61fb      	str	r3, [r7, #28]
    while (p) {
 80165bc:	e01c      	b.n	80165f8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80165be:	69fb      	ldr	r3, [r7, #28]
 80165c0:	895a      	ldrh	r2, [r3, #10]
 80165c2:	69fb      	ldr	r3, [r7, #28]
 80165c4:	891b      	ldrh	r3, [r3, #8]
 80165c6:	429a      	cmp	r2, r3
 80165c8:	d10a      	bne.n	80165e0 <etharp_query+0x1c0>
 80165ca:	69fb      	ldr	r3, [r7, #28]
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d006      	beq.n	80165e0 <etharp_query+0x1c0>
 80165d2:	4b2a      	ldr	r3, [pc, #168]	@ (801667c <etharp_query+0x25c>)
 80165d4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80165d8:	492f      	ldr	r1, [pc, #188]	@ (8016698 <etharp_query+0x278>)
 80165da:	482a      	ldr	r0, [pc, #168]	@ (8016684 <etharp_query+0x264>)
 80165dc:	f00e ff74 	bl	80254c8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80165e0:	69fb      	ldr	r3, [r7, #28]
 80165e2:	7b1b      	ldrb	r3, [r3, #12]
 80165e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d002      	beq.n	80165f2 <etharp_query+0x1d2>
        copy_needed = 1;
 80165ec:	2301      	movs	r3, #1
 80165ee:	61bb      	str	r3, [r7, #24]
        break;
 80165f0:	e005      	b.n	80165fe <etharp_query+0x1de>
      }
      p = p->next;
 80165f2:	69fb      	ldr	r3, [r7, #28]
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80165f8:	69fb      	ldr	r3, [r7, #28]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d1df      	bne.n	80165be <etharp_query+0x19e>
    }
    if (copy_needed) {
 80165fe:	69bb      	ldr	r3, [r7, #24]
 8016600:	2b00      	cmp	r3, #0
 8016602:	d007      	beq.n	8016614 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016604:	687a      	ldr	r2, [r7, #4]
 8016606:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801660a:	200e      	movs	r0, #14
 801660c:	f7f8 fb38 	bl	800ec80 <pbuf_clone>
 8016610:	61f8      	str	r0, [r7, #28]
 8016612:	e004      	b.n	801661e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016618:	69f8      	ldr	r0, [r7, #28]
 801661a:	f7f8 f95f 	bl	800e8dc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801661e:	69fb      	ldr	r3, [r7, #28]
 8016620:	2b00      	cmp	r3, #0
 8016622:	d021      	beq.n	8016668 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016624:	7c7a      	ldrb	r2, [r7, #17]
 8016626:	4918      	ldr	r1, [pc, #96]	@ (8016688 <etharp_query+0x268>)
 8016628:	4613      	mov	r3, r2
 801662a:	005b      	lsls	r3, r3, #1
 801662c:	4413      	add	r3, r2
 801662e:	00db      	lsls	r3, r3, #3
 8016630:	440b      	add	r3, r1
 8016632:	681b      	ldr	r3, [r3, #0]
 8016634:	2b00      	cmp	r3, #0
 8016636:	d00a      	beq.n	801664e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016638:	7c7a      	ldrb	r2, [r7, #17]
 801663a:	4913      	ldr	r1, [pc, #76]	@ (8016688 <etharp_query+0x268>)
 801663c:	4613      	mov	r3, r2
 801663e:	005b      	lsls	r3, r3, #1
 8016640:	4413      	add	r3, r2
 8016642:	00db      	lsls	r3, r3, #3
 8016644:	440b      	add	r3, r1
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	4618      	mov	r0, r3
 801664a:	f7f8 f8a1 	bl	800e790 <pbuf_free>
      }
      arp_table[i].q = p;
 801664e:	7c7a      	ldrb	r2, [r7, #17]
 8016650:	490d      	ldr	r1, [pc, #52]	@ (8016688 <etharp_query+0x268>)
 8016652:	4613      	mov	r3, r2
 8016654:	005b      	lsls	r3, r3, #1
 8016656:	4413      	add	r3, r2
 8016658:	00db      	lsls	r3, r3, #3
 801665a:	440b      	add	r3, r1
 801665c:	69fa      	ldr	r2, [r7, #28]
 801665e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016660:	2300      	movs	r3, #0
 8016662:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016666:	e002      	b.n	801666e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016668:	23ff      	movs	r3, #255	@ 0xff
 801666a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801666e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8016672:	4618      	mov	r0, r3
 8016674:	3728      	adds	r7, #40	@ 0x28
 8016676:	46bd      	mov	sp, r7
 8016678:	bd80      	pop	{r7, pc}
 801667a:	bf00      	nop
 801667c:	08029a20 	.word	0x08029a20
 8016680:	08029bcc 	.word	0x08029bcc
 8016684:	08029a98 	.word	0x08029a98
 8016688:	2000fee0 	.word	0x2000fee0
 801668c:	08029bdc 	.word	0x08029bdc
 8016690:	08029bc0 	.word	0x08029bc0
 8016694:	2000ffd0 	.word	0x2000ffd0
 8016698:	08029c04 	.word	0x08029c04

0801669c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801669c:	b580      	push	{r7, lr}
 801669e:	b08a      	sub	sp, #40	@ 0x28
 80166a0:	af02      	add	r7, sp, #8
 80166a2:	60f8      	str	r0, [r7, #12]
 80166a4:	60b9      	str	r1, [r7, #8]
 80166a6:	607a      	str	r2, [r7, #4]
 80166a8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80166aa:	2300      	movs	r3, #0
 80166ac:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d106      	bne.n	80166c2 <etharp_raw+0x26>
 80166b4:	4b3a      	ldr	r3, [pc, #232]	@ (80167a0 <etharp_raw+0x104>)
 80166b6:	f240 4257 	movw	r2, #1111	@ 0x457
 80166ba:	493a      	ldr	r1, [pc, #232]	@ (80167a4 <etharp_raw+0x108>)
 80166bc:	483a      	ldr	r0, [pc, #232]	@ (80167a8 <etharp_raw+0x10c>)
 80166be:	f00e ff03 	bl	80254c8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80166c2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80166c6:	211c      	movs	r1, #28
 80166c8:	200e      	movs	r0, #14
 80166ca:	f7f7 fd4b 	bl	800e164 <pbuf_alloc>
 80166ce:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80166d0:	69bb      	ldr	r3, [r7, #24]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d102      	bne.n	80166dc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80166d6:	f04f 33ff 	mov.w	r3, #4294967295
 80166da:	e05d      	b.n	8016798 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80166dc:	69bb      	ldr	r3, [r7, #24]
 80166de:	895b      	ldrh	r3, [r3, #10]
 80166e0:	2b1b      	cmp	r3, #27
 80166e2:	d806      	bhi.n	80166f2 <etharp_raw+0x56>
 80166e4:	4b2e      	ldr	r3, [pc, #184]	@ (80167a0 <etharp_raw+0x104>)
 80166e6:	f240 4262 	movw	r2, #1122	@ 0x462
 80166ea:	4930      	ldr	r1, [pc, #192]	@ (80167ac <etharp_raw+0x110>)
 80166ec:	482e      	ldr	r0, [pc, #184]	@ (80167a8 <etharp_raw+0x10c>)
 80166ee:	f00e feeb 	bl	80254c8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80166f2:	69bb      	ldr	r3, [r7, #24]
 80166f4:	685b      	ldr	r3, [r3, #4]
 80166f6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80166f8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80166fa:	4618      	mov	r0, r3
 80166fc:	f7f6 fbf0 	bl	800cee0 <lwip_htons>
 8016700:	4603      	mov	r3, r0
 8016702:	461a      	mov	r2, r3
 8016704:	697b      	ldr	r3, [r7, #20]
 8016706:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801670e:	2b06      	cmp	r3, #6
 8016710:	d006      	beq.n	8016720 <etharp_raw+0x84>
 8016712:	4b23      	ldr	r3, [pc, #140]	@ (80167a0 <etharp_raw+0x104>)
 8016714:	f240 4269 	movw	r2, #1129	@ 0x469
 8016718:	4925      	ldr	r1, [pc, #148]	@ (80167b0 <etharp_raw+0x114>)
 801671a:	4823      	ldr	r0, [pc, #140]	@ (80167a8 <etharp_raw+0x10c>)
 801671c:	f00e fed4 	bl	80254c8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016720:	697b      	ldr	r3, [r7, #20]
 8016722:	3308      	adds	r3, #8
 8016724:	2206      	movs	r2, #6
 8016726:	6839      	ldr	r1, [r7, #0]
 8016728:	4618      	mov	r0, r3
 801672a:	f00f f97a 	bl	8025a22 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801672e:	697b      	ldr	r3, [r7, #20]
 8016730:	3312      	adds	r3, #18
 8016732:	2206      	movs	r2, #6
 8016734:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016736:	4618      	mov	r0, r3
 8016738:	f00f f973 	bl	8025a22 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801673c:	697b      	ldr	r3, [r7, #20]
 801673e:	330e      	adds	r3, #14
 8016740:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016742:	6812      	ldr	r2, [r2, #0]
 8016744:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016746:	697b      	ldr	r3, [r7, #20]
 8016748:	3318      	adds	r3, #24
 801674a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801674c:	6812      	ldr	r2, [r2, #0]
 801674e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016750:	697b      	ldr	r3, [r7, #20]
 8016752:	2200      	movs	r2, #0
 8016754:	701a      	strb	r2, [r3, #0]
 8016756:	2200      	movs	r2, #0
 8016758:	f042 0201 	orr.w	r2, r2, #1
 801675c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801675e:	697b      	ldr	r3, [r7, #20]
 8016760:	2200      	movs	r2, #0
 8016762:	f042 0208 	orr.w	r2, r2, #8
 8016766:	709a      	strb	r2, [r3, #2]
 8016768:	2200      	movs	r2, #0
 801676a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801676c:	697b      	ldr	r3, [r7, #20]
 801676e:	2206      	movs	r2, #6
 8016770:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016772:	697b      	ldr	r3, [r7, #20]
 8016774:	2204      	movs	r2, #4
 8016776:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016778:	f640 0306 	movw	r3, #2054	@ 0x806
 801677c:	9300      	str	r3, [sp, #0]
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	68ba      	ldr	r2, [r7, #8]
 8016782:	69b9      	ldr	r1, [r7, #24]
 8016784:	68f8      	ldr	r0, [r7, #12]
 8016786:	f001 fcb9 	bl	80180fc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801678a:	69b8      	ldr	r0, [r7, #24]
 801678c:	f7f8 f800 	bl	800e790 <pbuf_free>
  p = NULL;
 8016790:	2300      	movs	r3, #0
 8016792:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016794:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016798:	4618      	mov	r0, r3
 801679a:	3720      	adds	r7, #32
 801679c:	46bd      	mov	sp, r7
 801679e:	bd80      	pop	{r7, pc}
 80167a0:	08029a20 	.word	0x08029a20
 80167a4:	08029b70 	.word	0x08029b70
 80167a8:	08029a98 	.word	0x08029a98
 80167ac:	08029c20 	.word	0x08029c20
 80167b0:	08029c54 	.word	0x08029c54

080167b4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80167b4:	b580      	push	{r7, lr}
 80167b6:	b088      	sub	sp, #32
 80167b8:	af04      	add	r7, sp, #16
 80167ba:	60f8      	str	r0, [r7, #12]
 80167bc:	60b9      	str	r1, [r7, #8]
 80167be:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80167d0:	2201      	movs	r2, #1
 80167d2:	9203      	str	r2, [sp, #12]
 80167d4:	68ba      	ldr	r2, [r7, #8]
 80167d6:	9202      	str	r2, [sp, #8]
 80167d8:	4a06      	ldr	r2, [pc, #24]	@ (80167f4 <etharp_request_dst+0x40>)
 80167da:	9201      	str	r2, [sp, #4]
 80167dc:	9300      	str	r3, [sp, #0]
 80167de:	4603      	mov	r3, r0
 80167e0:	687a      	ldr	r2, [r7, #4]
 80167e2:	68f8      	ldr	r0, [r7, #12]
 80167e4:	f7ff ff5a 	bl	801669c <etharp_raw>
 80167e8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80167ea:	4618      	mov	r0, r3
 80167ec:	3710      	adds	r7, #16
 80167ee:	46bd      	mov	sp, r7
 80167f0:	bd80      	pop	{r7, pc}
 80167f2:	bf00      	nop
 80167f4:	0802a2f8 	.word	0x0802a2f8

080167f8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80167f8:	b580      	push	{r7, lr}
 80167fa:	b082      	sub	sp, #8
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	6078      	str	r0, [r7, #4]
 8016800:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016802:	4a05      	ldr	r2, [pc, #20]	@ (8016818 <etharp_request+0x20>)
 8016804:	6839      	ldr	r1, [r7, #0]
 8016806:	6878      	ldr	r0, [r7, #4]
 8016808:	f7ff ffd4 	bl	80167b4 <etharp_request_dst>
 801680c:	4603      	mov	r3, r0
}
 801680e:	4618      	mov	r0, r3
 8016810:	3708      	adds	r7, #8
 8016812:	46bd      	mov	sp, r7
 8016814:	bd80      	pop	{r7, pc}
 8016816:	bf00      	nop
 8016818:	0802a2f0 	.word	0x0802a2f0

0801681c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801681c:	b580      	push	{r7, lr}
 801681e:	b08e      	sub	sp, #56	@ 0x38
 8016820:	af04      	add	r7, sp, #16
 8016822:	6078      	str	r0, [r7, #4]
 8016824:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016826:	4b79      	ldr	r3, [pc, #484]	@ (8016a0c <icmp_input+0x1f0>)
 8016828:	689b      	ldr	r3, [r3, #8]
 801682a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801682c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801682e:	781b      	ldrb	r3, [r3, #0]
 8016830:	f003 030f 	and.w	r3, r3, #15
 8016834:	b2db      	uxtb	r3, r3
 8016836:	009b      	lsls	r3, r3, #2
 8016838:	b2db      	uxtb	r3, r3
 801683a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801683c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801683e:	2b13      	cmp	r3, #19
 8016840:	f240 80cd 	bls.w	80169de <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	895b      	ldrh	r3, [r3, #10]
 8016848:	2b03      	cmp	r3, #3
 801684a:	f240 80ca 	bls.w	80169e2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	685b      	ldr	r3, [r3, #4]
 8016852:	781b      	ldrb	r3, [r3, #0]
 8016854:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016858:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801685c:	2b00      	cmp	r3, #0
 801685e:	f000 80b7 	beq.w	80169d0 <icmp_input+0x1b4>
 8016862:	2b08      	cmp	r3, #8
 8016864:	f040 80b7 	bne.w	80169d6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016868:	4b69      	ldr	r3, [pc, #420]	@ (8016a10 <icmp_input+0x1f4>)
 801686a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801686c:	4b67      	ldr	r3, [pc, #412]	@ (8016a0c <icmp_input+0x1f0>)
 801686e:	695b      	ldr	r3, [r3, #20]
 8016870:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016874:	2be0      	cmp	r3, #224	@ 0xe0
 8016876:	f000 80bb 	beq.w	80169f0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801687a:	4b64      	ldr	r3, [pc, #400]	@ (8016a0c <icmp_input+0x1f0>)
 801687c:	695b      	ldr	r3, [r3, #20]
 801687e:	4a63      	ldr	r2, [pc, #396]	@ (8016a0c <icmp_input+0x1f0>)
 8016880:	6812      	ldr	r2, [r2, #0]
 8016882:	4611      	mov	r1, r2
 8016884:	4618      	mov	r0, r3
 8016886:	f000 fbed 	bl	8017064 <ip4_addr_isbroadcast_u32>
 801688a:	4603      	mov	r3, r0
 801688c:	2b00      	cmp	r3, #0
 801688e:	f040 80b1 	bne.w	80169f4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	891b      	ldrh	r3, [r3, #8]
 8016896:	2b07      	cmp	r3, #7
 8016898:	f240 80a5 	bls.w	80169e6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801689c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801689e:	330e      	adds	r3, #14
 80168a0:	4619      	mov	r1, r3
 80168a2:	6878      	ldr	r0, [r7, #4]
 80168a4:	f7f7 feac 	bl	800e600 <pbuf_add_header>
 80168a8:	4603      	mov	r3, r0
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d04b      	beq.n	8016946 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	891a      	ldrh	r2, [r3, #8]
 80168b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80168b4:	4413      	add	r3, r2
 80168b6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	891b      	ldrh	r3, [r3, #8]
 80168bc:	8b7a      	ldrh	r2, [r7, #26]
 80168be:	429a      	cmp	r2, r3
 80168c0:	f0c0 809a 	bcc.w	80169f8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80168c4:	8b7b      	ldrh	r3, [r7, #26]
 80168c6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80168ca:	4619      	mov	r1, r3
 80168cc:	200e      	movs	r0, #14
 80168ce:	f7f7 fc49 	bl	800e164 <pbuf_alloc>
 80168d2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80168d4:	697b      	ldr	r3, [r7, #20]
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	f000 8090 	beq.w	80169fc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80168dc:	697b      	ldr	r3, [r7, #20]
 80168de:	895b      	ldrh	r3, [r3, #10]
 80168e0:	461a      	mov	r2, r3
 80168e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80168e4:	3308      	adds	r3, #8
 80168e6:	429a      	cmp	r2, r3
 80168e8:	d203      	bcs.n	80168f2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80168ea:	6978      	ldr	r0, [r7, #20]
 80168ec:	f7f7 ff50 	bl	800e790 <pbuf_free>
          goto icmperr;
 80168f0:	e085      	b.n	80169fe <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80168f2:	697b      	ldr	r3, [r7, #20]
 80168f4:	685b      	ldr	r3, [r3, #4]
 80168f6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80168f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80168fa:	4618      	mov	r0, r3
 80168fc:	f00f f891 	bl	8025a22 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016900:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016902:	4619      	mov	r1, r3
 8016904:	6978      	ldr	r0, [r7, #20]
 8016906:	f7f7 fe8b 	bl	800e620 <pbuf_remove_header>
 801690a:	4603      	mov	r3, r0
 801690c:	2b00      	cmp	r3, #0
 801690e:	d009      	beq.n	8016924 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016910:	4b40      	ldr	r3, [pc, #256]	@ (8016a14 <icmp_input+0x1f8>)
 8016912:	22b6      	movs	r2, #182	@ 0xb6
 8016914:	4940      	ldr	r1, [pc, #256]	@ (8016a18 <icmp_input+0x1fc>)
 8016916:	4841      	ldr	r0, [pc, #260]	@ (8016a1c <icmp_input+0x200>)
 8016918:	f00e fdd6 	bl	80254c8 <iprintf>
          pbuf_free(r);
 801691c:	6978      	ldr	r0, [r7, #20]
 801691e:	f7f7 ff37 	bl	800e790 <pbuf_free>
          goto icmperr;
 8016922:	e06c      	b.n	80169fe <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016924:	6879      	ldr	r1, [r7, #4]
 8016926:	6978      	ldr	r0, [r7, #20]
 8016928:	f7f8 f866 	bl	800e9f8 <pbuf_copy>
 801692c:	4603      	mov	r3, r0
 801692e:	2b00      	cmp	r3, #0
 8016930:	d003      	beq.n	801693a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016932:	6978      	ldr	r0, [r7, #20]
 8016934:	f7f7 ff2c 	bl	800e790 <pbuf_free>
          goto icmperr;
 8016938:	e061      	b.n	80169fe <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801693a:	6878      	ldr	r0, [r7, #4]
 801693c:	f7f7 ff28 	bl	800e790 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016940:	697b      	ldr	r3, [r7, #20]
 8016942:	607b      	str	r3, [r7, #4]
 8016944:	e00f      	b.n	8016966 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016946:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016948:	330e      	adds	r3, #14
 801694a:	4619      	mov	r1, r3
 801694c:	6878      	ldr	r0, [r7, #4]
 801694e:	f7f7 fe67 	bl	800e620 <pbuf_remove_header>
 8016952:	4603      	mov	r3, r0
 8016954:	2b00      	cmp	r3, #0
 8016956:	d006      	beq.n	8016966 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016958:	4b2e      	ldr	r3, [pc, #184]	@ (8016a14 <icmp_input+0x1f8>)
 801695a:	22c7      	movs	r2, #199	@ 0xc7
 801695c:	4930      	ldr	r1, [pc, #192]	@ (8016a20 <icmp_input+0x204>)
 801695e:	482f      	ldr	r0, [pc, #188]	@ (8016a1c <icmp_input+0x200>)
 8016960:	f00e fdb2 	bl	80254c8 <iprintf>
          goto icmperr;
 8016964:	e04b      	b.n	80169fe <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	685b      	ldr	r3, [r3, #4]
 801696a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801696c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801696e:	4619      	mov	r1, r3
 8016970:	6878      	ldr	r0, [r7, #4]
 8016972:	f7f7 fe45 	bl	800e600 <pbuf_add_header>
 8016976:	4603      	mov	r3, r0
 8016978:	2b00      	cmp	r3, #0
 801697a:	d12b      	bne.n	80169d4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	685b      	ldr	r3, [r3, #4]
 8016980:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8016982:	69fb      	ldr	r3, [r7, #28]
 8016984:	681a      	ldr	r2, [r3, #0]
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801698a:	4b20      	ldr	r3, [pc, #128]	@ (8016a0c <icmp_input+0x1f0>)
 801698c:	691a      	ldr	r2, [r3, #16]
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016992:	693b      	ldr	r3, [r7, #16]
 8016994:	2200      	movs	r2, #0
 8016996:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016998:	693b      	ldr	r3, [r7, #16]
 801699a:	2200      	movs	r2, #0
 801699c:	709a      	strb	r2, [r3, #2]
 801699e:	2200      	movs	r2, #0
 80169a0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	22ff      	movs	r2, #255	@ 0xff
 80169a6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	2200      	movs	r2, #0
 80169ac:	729a      	strb	r2, [r3, #10]
 80169ae:	2200      	movs	r2, #0
 80169b0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80169b2:	683b      	ldr	r3, [r7, #0]
 80169b4:	9302      	str	r3, [sp, #8]
 80169b6:	2301      	movs	r3, #1
 80169b8:	9301      	str	r3, [sp, #4]
 80169ba:	2300      	movs	r3, #0
 80169bc:	9300      	str	r3, [sp, #0]
 80169be:	23ff      	movs	r3, #255	@ 0xff
 80169c0:	2200      	movs	r2, #0
 80169c2:	69f9      	ldr	r1, [r7, #28]
 80169c4:	6878      	ldr	r0, [r7, #4]
 80169c6:	f000 fa75 	bl	8016eb4 <ip4_output_if>
 80169ca:	4603      	mov	r3, r0
 80169cc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80169ce:	e001      	b.n	80169d4 <icmp_input+0x1b8>
      break;
 80169d0:	bf00      	nop
 80169d2:	e000      	b.n	80169d6 <icmp_input+0x1ba>
      break;
 80169d4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80169d6:	6878      	ldr	r0, [r7, #4]
 80169d8:	f7f7 feda 	bl	800e790 <pbuf_free>
  return;
 80169dc:	e013      	b.n	8016a06 <icmp_input+0x1ea>
    goto lenerr;
 80169de:	bf00      	nop
 80169e0:	e002      	b.n	80169e8 <icmp_input+0x1cc>
    goto lenerr;
 80169e2:	bf00      	nop
 80169e4:	e000      	b.n	80169e8 <icmp_input+0x1cc>
        goto lenerr;
 80169e6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80169e8:	6878      	ldr	r0, [r7, #4]
 80169ea:	f7f7 fed1 	bl	800e790 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80169ee:	e00a      	b.n	8016a06 <icmp_input+0x1ea>
        goto icmperr;
 80169f0:	bf00      	nop
 80169f2:	e004      	b.n	80169fe <icmp_input+0x1e2>
        goto icmperr;
 80169f4:	bf00      	nop
 80169f6:	e002      	b.n	80169fe <icmp_input+0x1e2>
          goto icmperr;
 80169f8:	bf00      	nop
 80169fa:	e000      	b.n	80169fe <icmp_input+0x1e2>
          goto icmperr;
 80169fc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80169fe:	6878      	ldr	r0, [r7, #4]
 8016a00:	f7f7 fec6 	bl	800e790 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016a04:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016a06:	3728      	adds	r7, #40	@ 0x28
 8016a08:	46bd      	mov	sp, r7
 8016a0a:	bd80      	pop	{r7, pc}
 8016a0c:	2000cc10 	.word	0x2000cc10
 8016a10:	2000cc24 	.word	0x2000cc24
 8016a14:	08029c98 	.word	0x08029c98
 8016a18:	08029cd0 	.word	0x08029cd0
 8016a1c:	08029d08 	.word	0x08029d08
 8016a20:	08029d30 	.word	0x08029d30

08016a24 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016a24:	b580      	push	{r7, lr}
 8016a26:	b082      	sub	sp, #8
 8016a28:	af00      	add	r7, sp, #0
 8016a2a:	6078      	str	r0, [r7, #4]
 8016a2c:	460b      	mov	r3, r1
 8016a2e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016a30:	78fb      	ldrb	r3, [r7, #3]
 8016a32:	461a      	mov	r2, r3
 8016a34:	2103      	movs	r1, #3
 8016a36:	6878      	ldr	r0, [r7, #4]
 8016a38:	f000 f814 	bl	8016a64 <icmp_send_response>
}
 8016a3c:	bf00      	nop
 8016a3e:	3708      	adds	r7, #8
 8016a40:	46bd      	mov	sp, r7
 8016a42:	bd80      	pop	{r7, pc}

08016a44 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016a44:	b580      	push	{r7, lr}
 8016a46:	b082      	sub	sp, #8
 8016a48:	af00      	add	r7, sp, #0
 8016a4a:	6078      	str	r0, [r7, #4]
 8016a4c:	460b      	mov	r3, r1
 8016a4e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016a50:	78fb      	ldrb	r3, [r7, #3]
 8016a52:	461a      	mov	r2, r3
 8016a54:	210b      	movs	r1, #11
 8016a56:	6878      	ldr	r0, [r7, #4]
 8016a58:	f000 f804 	bl	8016a64 <icmp_send_response>
}
 8016a5c:	bf00      	nop
 8016a5e:	3708      	adds	r7, #8
 8016a60:	46bd      	mov	sp, r7
 8016a62:	bd80      	pop	{r7, pc}

08016a64 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016a64:	b580      	push	{r7, lr}
 8016a66:	b08c      	sub	sp, #48	@ 0x30
 8016a68:	af04      	add	r7, sp, #16
 8016a6a:	6078      	str	r0, [r7, #4]
 8016a6c:	460b      	mov	r3, r1
 8016a6e:	70fb      	strb	r3, [r7, #3]
 8016a70:	4613      	mov	r3, r2
 8016a72:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016a74:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016a78:	2124      	movs	r1, #36	@ 0x24
 8016a7a:	2022      	movs	r0, #34	@ 0x22
 8016a7c:	f7f7 fb72 	bl	800e164 <pbuf_alloc>
 8016a80:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016a82:	69fb      	ldr	r3, [r7, #28]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d04c      	beq.n	8016b22 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016a88:	69fb      	ldr	r3, [r7, #28]
 8016a8a:	895b      	ldrh	r3, [r3, #10]
 8016a8c:	2b23      	cmp	r3, #35	@ 0x23
 8016a8e:	d806      	bhi.n	8016a9e <icmp_send_response+0x3a>
 8016a90:	4b26      	ldr	r3, [pc, #152]	@ (8016b2c <icmp_send_response+0xc8>)
 8016a92:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8016a96:	4926      	ldr	r1, [pc, #152]	@ (8016b30 <icmp_send_response+0xcc>)
 8016a98:	4826      	ldr	r0, [pc, #152]	@ (8016b34 <icmp_send_response+0xd0>)
 8016a9a:	f00e fd15 	bl	80254c8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	685b      	ldr	r3, [r3, #4]
 8016aa2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016aa4:	69fb      	ldr	r3, [r7, #28]
 8016aa6:	685b      	ldr	r3, [r3, #4]
 8016aa8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016aaa:	697b      	ldr	r3, [r7, #20]
 8016aac:	78fa      	ldrb	r2, [r7, #3]
 8016aae:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016ab0:	697b      	ldr	r3, [r7, #20]
 8016ab2:	78ba      	ldrb	r2, [r7, #2]
 8016ab4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016ab6:	697b      	ldr	r3, [r7, #20]
 8016ab8:	2200      	movs	r2, #0
 8016aba:	711a      	strb	r2, [r3, #4]
 8016abc:	2200      	movs	r2, #0
 8016abe:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016ac0:	697b      	ldr	r3, [r7, #20]
 8016ac2:	2200      	movs	r2, #0
 8016ac4:	719a      	strb	r2, [r3, #6]
 8016ac6:	2200      	movs	r2, #0
 8016ac8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016aca:	69fb      	ldr	r3, [r7, #28]
 8016acc:	685b      	ldr	r3, [r3, #4]
 8016ace:	f103 0008 	add.w	r0, r3, #8
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	685b      	ldr	r3, [r3, #4]
 8016ad6:	221c      	movs	r2, #28
 8016ad8:	4619      	mov	r1, r3
 8016ada:	f00e ffa2 	bl	8025a22 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016ade:	69bb      	ldr	r3, [r7, #24]
 8016ae0:	68db      	ldr	r3, [r3, #12]
 8016ae2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016ae4:	f107 030c 	add.w	r3, r7, #12
 8016ae8:	4618      	mov	r0, r3
 8016aea:	f000 f825 	bl	8016b38 <ip4_route>
 8016aee:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016af0:	693b      	ldr	r3, [r7, #16]
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d011      	beq.n	8016b1a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016af6:	697b      	ldr	r3, [r7, #20]
 8016af8:	2200      	movs	r2, #0
 8016afa:	709a      	strb	r2, [r3, #2]
 8016afc:	2200      	movs	r2, #0
 8016afe:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016b00:	f107 020c 	add.w	r2, r7, #12
 8016b04:	693b      	ldr	r3, [r7, #16]
 8016b06:	9302      	str	r3, [sp, #8]
 8016b08:	2301      	movs	r3, #1
 8016b0a:	9301      	str	r3, [sp, #4]
 8016b0c:	2300      	movs	r3, #0
 8016b0e:	9300      	str	r3, [sp, #0]
 8016b10:	23ff      	movs	r3, #255	@ 0xff
 8016b12:	2100      	movs	r1, #0
 8016b14:	69f8      	ldr	r0, [r7, #28]
 8016b16:	f000 f9cd 	bl	8016eb4 <ip4_output_if>
  }
  pbuf_free(q);
 8016b1a:	69f8      	ldr	r0, [r7, #28]
 8016b1c:	f7f7 fe38 	bl	800e790 <pbuf_free>
 8016b20:	e000      	b.n	8016b24 <icmp_send_response+0xc0>
    return;
 8016b22:	bf00      	nop
}
 8016b24:	3720      	adds	r7, #32
 8016b26:	46bd      	mov	sp, r7
 8016b28:	bd80      	pop	{r7, pc}
 8016b2a:	bf00      	nop
 8016b2c:	08029c98 	.word	0x08029c98
 8016b30:	08029d64 	.word	0x08029d64
 8016b34:	08029d08 	.word	0x08029d08

08016b38 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016b38:	b480      	push	{r7}
 8016b3a:	b085      	sub	sp, #20
 8016b3c:	af00      	add	r7, sp, #0
 8016b3e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016b40:	4b33      	ldr	r3, [pc, #204]	@ (8016c10 <ip4_route+0xd8>)
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	60fb      	str	r3, [r7, #12]
 8016b46:	e036      	b.n	8016bb6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016b48:	68fb      	ldr	r3, [r7, #12]
 8016b4a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016b4e:	f003 0301 	and.w	r3, r3, #1
 8016b52:	b2db      	uxtb	r3, r3
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d02b      	beq.n	8016bb0 <ip4_route+0x78>
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016b5e:	089b      	lsrs	r3, r3, #2
 8016b60:	f003 0301 	and.w	r3, r3, #1
 8016b64:	b2db      	uxtb	r3, r3
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d022      	beq.n	8016bb0 <ip4_route+0x78>
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	3304      	adds	r3, #4
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d01d      	beq.n	8016bb0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	681a      	ldr	r2, [r3, #0]
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	3304      	adds	r3, #4
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	405a      	eors	r2, r3
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	3308      	adds	r3, #8
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	4013      	ands	r3, r2
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d101      	bne.n	8016b90 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	e038      	b.n	8016c02 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016b96:	f003 0302 	and.w	r3, r3, #2
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d108      	bne.n	8016bb0 <ip4_route+0x78>
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	681a      	ldr	r2, [r3, #0]
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	330c      	adds	r3, #12
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	429a      	cmp	r2, r3
 8016baa:	d101      	bne.n	8016bb0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	e028      	b.n	8016c02 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	60fb      	str	r3, [r7, #12]
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d1c5      	bne.n	8016b48 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016bbc:	4b15      	ldr	r3, [pc, #84]	@ (8016c14 <ip4_route+0xdc>)
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d01a      	beq.n	8016bfa <ip4_route+0xc2>
 8016bc4:	4b13      	ldr	r3, [pc, #76]	@ (8016c14 <ip4_route+0xdc>)
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016bcc:	f003 0301 	and.w	r3, r3, #1
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d012      	beq.n	8016bfa <ip4_route+0xc2>
 8016bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8016c14 <ip4_route+0xdc>)
 8016bd6:	681b      	ldr	r3, [r3, #0]
 8016bd8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016bdc:	f003 0304 	and.w	r3, r3, #4
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d00a      	beq.n	8016bfa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016be4:	4b0b      	ldr	r3, [pc, #44]	@ (8016c14 <ip4_route+0xdc>)
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	3304      	adds	r3, #4
 8016bea:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d004      	beq.n	8016bfa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	b2db      	uxtb	r3, r3
 8016bf6:	2b7f      	cmp	r3, #127	@ 0x7f
 8016bf8:	d101      	bne.n	8016bfe <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016bfa:	2300      	movs	r3, #0
 8016bfc:	e001      	b.n	8016c02 <ip4_route+0xca>
  }

  return netif_default;
 8016bfe:	4b05      	ldr	r3, [pc, #20]	@ (8016c14 <ip4_route+0xdc>)
 8016c00:	681b      	ldr	r3, [r3, #0]
}
 8016c02:	4618      	mov	r0, r3
 8016c04:	3714      	adds	r7, #20
 8016c06:	46bd      	mov	sp, r7
 8016c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c0c:	4770      	bx	lr
 8016c0e:	bf00      	nop
 8016c10:	2000fe74 	.word	0x2000fe74
 8016c14:	2000fe78 	.word	0x2000fe78

08016c18 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016c18:	b580      	push	{r7, lr}
 8016c1a:	b082      	sub	sp, #8
 8016c1c:	af00      	add	r7, sp, #0
 8016c1e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016c26:	f003 0301 	and.w	r3, r3, #1
 8016c2a:	b2db      	uxtb	r3, r3
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d016      	beq.n	8016c5e <ip4_input_accept+0x46>
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	3304      	adds	r3, #4
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d011      	beq.n	8016c5e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8016c68 <ip4_input_accept+0x50>)
 8016c3c:	695a      	ldr	r2, [r3, #20]
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	3304      	adds	r3, #4
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	429a      	cmp	r2, r3
 8016c46:	d008      	beq.n	8016c5a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016c48:	4b07      	ldr	r3, [pc, #28]	@ (8016c68 <ip4_input_accept+0x50>)
 8016c4a:	695b      	ldr	r3, [r3, #20]
 8016c4c:	6879      	ldr	r1, [r7, #4]
 8016c4e:	4618      	mov	r0, r3
 8016c50:	f000 fa08 	bl	8017064 <ip4_addr_isbroadcast_u32>
 8016c54:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d001      	beq.n	8016c5e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016c5a:	2301      	movs	r3, #1
 8016c5c:	e000      	b.n	8016c60 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016c5e:	2300      	movs	r3, #0
}
 8016c60:	4618      	mov	r0, r3
 8016c62:	3708      	adds	r7, #8
 8016c64:	46bd      	mov	sp, r7
 8016c66:	bd80      	pop	{r7, pc}
 8016c68:	2000cc10 	.word	0x2000cc10

08016c6c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016c6c:	b580      	push	{r7, lr}
 8016c6e:	b086      	sub	sp, #24
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	6078      	str	r0, [r7, #4]
 8016c74:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	685b      	ldr	r3, [r3, #4]
 8016c7a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016c7c:	697b      	ldr	r3, [r7, #20]
 8016c7e:	781b      	ldrb	r3, [r3, #0]
 8016c80:	091b      	lsrs	r3, r3, #4
 8016c82:	b2db      	uxtb	r3, r3
 8016c84:	2b04      	cmp	r3, #4
 8016c86:	d004      	beq.n	8016c92 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016c88:	6878      	ldr	r0, [r7, #4]
 8016c8a:	f7f7 fd81 	bl	800e790 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016c8e:	2300      	movs	r3, #0
 8016c90:	e107      	b.n	8016ea2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016c92:	697b      	ldr	r3, [r7, #20]
 8016c94:	781b      	ldrb	r3, [r3, #0]
 8016c96:	f003 030f 	and.w	r3, r3, #15
 8016c9a:	b2db      	uxtb	r3, r3
 8016c9c:	009b      	lsls	r3, r3, #2
 8016c9e:	b2db      	uxtb	r3, r3
 8016ca0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016ca2:	697b      	ldr	r3, [r7, #20]
 8016ca4:	885b      	ldrh	r3, [r3, #2]
 8016ca6:	b29b      	uxth	r3, r3
 8016ca8:	4618      	mov	r0, r3
 8016caa:	f7f6 f919 	bl	800cee0 <lwip_htons>
 8016cae:	4603      	mov	r3, r0
 8016cb0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	891b      	ldrh	r3, [r3, #8]
 8016cb6:	89ba      	ldrh	r2, [r7, #12]
 8016cb8:	429a      	cmp	r2, r3
 8016cba:	d204      	bcs.n	8016cc6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8016cbc:	89bb      	ldrh	r3, [r7, #12]
 8016cbe:	4619      	mov	r1, r3
 8016cc0:	6878      	ldr	r0, [r7, #4]
 8016cc2:	f7f7 fbad 	bl	800e420 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	895b      	ldrh	r3, [r3, #10]
 8016cca:	89fa      	ldrh	r2, [r7, #14]
 8016ccc:	429a      	cmp	r2, r3
 8016cce:	d807      	bhi.n	8016ce0 <ip4_input+0x74>
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	891b      	ldrh	r3, [r3, #8]
 8016cd4:	89ba      	ldrh	r2, [r7, #12]
 8016cd6:	429a      	cmp	r2, r3
 8016cd8:	d802      	bhi.n	8016ce0 <ip4_input+0x74>
 8016cda:	89fb      	ldrh	r3, [r7, #14]
 8016cdc:	2b13      	cmp	r3, #19
 8016cde:	d804      	bhi.n	8016cea <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016ce0:	6878      	ldr	r0, [r7, #4]
 8016ce2:	f7f7 fd55 	bl	800e790 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	e0db      	b.n	8016ea2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016cea:	697b      	ldr	r3, [r7, #20]
 8016cec:	691b      	ldr	r3, [r3, #16]
 8016cee:	4a6f      	ldr	r2, [pc, #444]	@ (8016eac <ip4_input+0x240>)
 8016cf0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016cf2:	697b      	ldr	r3, [r7, #20]
 8016cf4:	68db      	ldr	r3, [r3, #12]
 8016cf6:	4a6d      	ldr	r2, [pc, #436]	@ (8016eac <ip4_input+0x240>)
 8016cf8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016cfa:	4b6c      	ldr	r3, [pc, #432]	@ (8016eac <ip4_input+0x240>)
 8016cfc:	695b      	ldr	r3, [r3, #20]
 8016cfe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016d02:	2be0      	cmp	r3, #224	@ 0xe0
 8016d04:	d112      	bne.n	8016d2c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016d06:	683b      	ldr	r3, [r7, #0]
 8016d08:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016d0c:	f003 0301 	and.w	r3, r3, #1
 8016d10:	b2db      	uxtb	r3, r3
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d007      	beq.n	8016d26 <ip4_input+0xba>
 8016d16:	683b      	ldr	r3, [r7, #0]
 8016d18:	3304      	adds	r3, #4
 8016d1a:	681b      	ldr	r3, [r3, #0]
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d002      	beq.n	8016d26 <ip4_input+0xba>
      netif = inp;
 8016d20:	683b      	ldr	r3, [r7, #0]
 8016d22:	613b      	str	r3, [r7, #16]
 8016d24:	e02a      	b.n	8016d7c <ip4_input+0x110>
    } else {
      netif = NULL;
 8016d26:	2300      	movs	r3, #0
 8016d28:	613b      	str	r3, [r7, #16]
 8016d2a:	e027      	b.n	8016d7c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016d2c:	6838      	ldr	r0, [r7, #0]
 8016d2e:	f7ff ff73 	bl	8016c18 <ip4_input_accept>
 8016d32:	4603      	mov	r3, r0
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d002      	beq.n	8016d3e <ip4_input+0xd2>
      netif = inp;
 8016d38:	683b      	ldr	r3, [r7, #0]
 8016d3a:	613b      	str	r3, [r7, #16]
 8016d3c:	e01e      	b.n	8016d7c <ip4_input+0x110>
    } else {
      netif = NULL;
 8016d3e:	2300      	movs	r3, #0
 8016d40:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016d42:	4b5a      	ldr	r3, [pc, #360]	@ (8016eac <ip4_input+0x240>)
 8016d44:	695b      	ldr	r3, [r3, #20]
 8016d46:	b2db      	uxtb	r3, r3
 8016d48:	2b7f      	cmp	r3, #127	@ 0x7f
 8016d4a:	d017      	beq.n	8016d7c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016d4c:	4b58      	ldr	r3, [pc, #352]	@ (8016eb0 <ip4_input+0x244>)
 8016d4e:	681b      	ldr	r3, [r3, #0]
 8016d50:	613b      	str	r3, [r7, #16]
 8016d52:	e00e      	b.n	8016d72 <ip4_input+0x106>
          if (netif == inp) {
 8016d54:	693a      	ldr	r2, [r7, #16]
 8016d56:	683b      	ldr	r3, [r7, #0]
 8016d58:	429a      	cmp	r2, r3
 8016d5a:	d006      	beq.n	8016d6a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016d5c:	6938      	ldr	r0, [r7, #16]
 8016d5e:	f7ff ff5b 	bl	8016c18 <ip4_input_accept>
 8016d62:	4603      	mov	r3, r0
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d108      	bne.n	8016d7a <ip4_input+0x10e>
 8016d68:	e000      	b.n	8016d6c <ip4_input+0x100>
            continue;
 8016d6a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016d6c:	693b      	ldr	r3, [r7, #16]
 8016d6e:	681b      	ldr	r3, [r3, #0]
 8016d70:	613b      	str	r3, [r7, #16]
 8016d72:	693b      	ldr	r3, [r7, #16]
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d1ed      	bne.n	8016d54 <ip4_input+0xe8>
 8016d78:	e000      	b.n	8016d7c <ip4_input+0x110>
            break;
 8016d7a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016d7c:	4b4b      	ldr	r3, [pc, #300]	@ (8016eac <ip4_input+0x240>)
 8016d7e:	691b      	ldr	r3, [r3, #16]
 8016d80:	6839      	ldr	r1, [r7, #0]
 8016d82:	4618      	mov	r0, r3
 8016d84:	f000 f96e 	bl	8017064 <ip4_addr_isbroadcast_u32>
 8016d88:	4603      	mov	r3, r0
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d105      	bne.n	8016d9a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016d8e:	4b47      	ldr	r3, [pc, #284]	@ (8016eac <ip4_input+0x240>)
 8016d90:	691b      	ldr	r3, [r3, #16]
 8016d92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016d96:	2be0      	cmp	r3, #224	@ 0xe0
 8016d98:	d104      	bne.n	8016da4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016d9a:	6878      	ldr	r0, [r7, #4]
 8016d9c:	f7f7 fcf8 	bl	800e790 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016da0:	2300      	movs	r3, #0
 8016da2:	e07e      	b.n	8016ea2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016da4:	693b      	ldr	r3, [r7, #16]
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d104      	bne.n	8016db4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016daa:	6878      	ldr	r0, [r7, #4]
 8016dac:	f7f7 fcf0 	bl	800e790 <pbuf_free>
    return ERR_OK;
 8016db0:	2300      	movs	r3, #0
 8016db2:	e076      	b.n	8016ea2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016db4:	697b      	ldr	r3, [r7, #20]
 8016db6:	88db      	ldrh	r3, [r3, #6]
 8016db8:	b29b      	uxth	r3, r3
 8016dba:	461a      	mov	r2, r3
 8016dbc:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8016dc0:	4013      	ands	r3, r2
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d00b      	beq.n	8016dde <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016dc6:	6878      	ldr	r0, [r7, #4]
 8016dc8:	f000 fdd0 	bl	801796c <ip4_reass>
 8016dcc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d101      	bne.n	8016dd8 <ip4_input+0x16c>
      return ERR_OK;
 8016dd4:	2300      	movs	r3, #0
 8016dd6:	e064      	b.n	8016ea2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	685b      	ldr	r3, [r3, #4]
 8016ddc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016dde:	4a33      	ldr	r2, [pc, #204]	@ (8016eac <ip4_input+0x240>)
 8016de0:	693b      	ldr	r3, [r7, #16]
 8016de2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016de4:	4a31      	ldr	r2, [pc, #196]	@ (8016eac <ip4_input+0x240>)
 8016de6:	683b      	ldr	r3, [r7, #0]
 8016de8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016dea:	4a30      	ldr	r2, [pc, #192]	@ (8016eac <ip4_input+0x240>)
 8016dec:	697b      	ldr	r3, [r7, #20]
 8016dee:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016df0:	697b      	ldr	r3, [r7, #20]
 8016df2:	781b      	ldrb	r3, [r3, #0]
 8016df4:	f003 030f 	and.w	r3, r3, #15
 8016df8:	b2db      	uxtb	r3, r3
 8016dfa:	009b      	lsls	r3, r3, #2
 8016dfc:	b2db      	uxtb	r3, r3
 8016dfe:	461a      	mov	r2, r3
 8016e00:	4b2a      	ldr	r3, [pc, #168]	@ (8016eac <ip4_input+0x240>)
 8016e02:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016e04:	89fb      	ldrh	r3, [r7, #14]
 8016e06:	4619      	mov	r1, r3
 8016e08:	6878      	ldr	r0, [r7, #4]
 8016e0a:	f7f7 fc09 	bl	800e620 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016e0e:	697b      	ldr	r3, [r7, #20]
 8016e10:	7a5b      	ldrb	r3, [r3, #9]
 8016e12:	2b11      	cmp	r3, #17
 8016e14:	d006      	beq.n	8016e24 <ip4_input+0x1b8>
 8016e16:	2b11      	cmp	r3, #17
 8016e18:	dc13      	bgt.n	8016e42 <ip4_input+0x1d6>
 8016e1a:	2b01      	cmp	r3, #1
 8016e1c:	d00c      	beq.n	8016e38 <ip4_input+0x1cc>
 8016e1e:	2b06      	cmp	r3, #6
 8016e20:	d005      	beq.n	8016e2e <ip4_input+0x1c2>
 8016e22:	e00e      	b.n	8016e42 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016e24:	6839      	ldr	r1, [r7, #0]
 8016e26:	6878      	ldr	r0, [r7, #4]
 8016e28:	f7fe f956 	bl	80150d8 <udp_input>
        break;
 8016e2c:	e026      	b.n	8016e7c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016e2e:	6839      	ldr	r1, [r7, #0]
 8016e30:	6878      	ldr	r0, [r7, #4]
 8016e32:	f7f9 fd15 	bl	8010860 <tcp_input>
        break;
 8016e36:	e021      	b.n	8016e7c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016e38:	6839      	ldr	r1, [r7, #0]
 8016e3a:	6878      	ldr	r0, [r7, #4]
 8016e3c:	f7ff fcee 	bl	801681c <icmp_input>
        break;
 8016e40:	e01c      	b.n	8016e7c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016e42:	4b1a      	ldr	r3, [pc, #104]	@ (8016eac <ip4_input+0x240>)
 8016e44:	695b      	ldr	r3, [r3, #20]
 8016e46:	6939      	ldr	r1, [r7, #16]
 8016e48:	4618      	mov	r0, r3
 8016e4a:	f000 f90b 	bl	8017064 <ip4_addr_isbroadcast_u32>
 8016e4e:	4603      	mov	r3, r0
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d10f      	bne.n	8016e74 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016e54:	4b15      	ldr	r3, [pc, #84]	@ (8016eac <ip4_input+0x240>)
 8016e56:	695b      	ldr	r3, [r3, #20]
 8016e58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016e5c:	2be0      	cmp	r3, #224	@ 0xe0
 8016e5e:	d009      	beq.n	8016e74 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016e60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016e64:	4619      	mov	r1, r3
 8016e66:	6878      	ldr	r0, [r7, #4]
 8016e68:	f7f7 fc4d 	bl	800e706 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016e6c:	2102      	movs	r1, #2
 8016e6e:	6878      	ldr	r0, [r7, #4]
 8016e70:	f7ff fdd8 	bl	8016a24 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016e74:	6878      	ldr	r0, [r7, #4]
 8016e76:	f7f7 fc8b 	bl	800e790 <pbuf_free>
        break;
 8016e7a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8016eac <ip4_input+0x240>)
 8016e7e:	2200      	movs	r2, #0
 8016e80:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016e82:	4b0a      	ldr	r3, [pc, #40]	@ (8016eac <ip4_input+0x240>)
 8016e84:	2200      	movs	r2, #0
 8016e86:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016e88:	4b08      	ldr	r3, [pc, #32]	@ (8016eac <ip4_input+0x240>)
 8016e8a:	2200      	movs	r2, #0
 8016e8c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016e8e:	4b07      	ldr	r3, [pc, #28]	@ (8016eac <ip4_input+0x240>)
 8016e90:	2200      	movs	r2, #0
 8016e92:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016e94:	4b05      	ldr	r3, [pc, #20]	@ (8016eac <ip4_input+0x240>)
 8016e96:	2200      	movs	r2, #0
 8016e98:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016e9a:	4b04      	ldr	r3, [pc, #16]	@ (8016eac <ip4_input+0x240>)
 8016e9c:	2200      	movs	r2, #0
 8016e9e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016ea0:	2300      	movs	r3, #0
}
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	3718      	adds	r7, #24
 8016ea6:	46bd      	mov	sp, r7
 8016ea8:	bd80      	pop	{r7, pc}
 8016eaa:	bf00      	nop
 8016eac:	2000cc10 	.word	0x2000cc10
 8016eb0:	2000fe74 	.word	0x2000fe74

08016eb4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016eb4:	b580      	push	{r7, lr}
 8016eb6:	b08a      	sub	sp, #40	@ 0x28
 8016eb8:	af04      	add	r7, sp, #16
 8016eba:	60f8      	str	r0, [r7, #12]
 8016ebc:	60b9      	str	r1, [r7, #8]
 8016ebe:	607a      	str	r2, [r7, #4]
 8016ec0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016ec2:	68bb      	ldr	r3, [r7, #8]
 8016ec4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d009      	beq.n	8016ee0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016ecc:	68bb      	ldr	r3, [r7, #8]
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d003      	beq.n	8016eda <ip4_output_if+0x26>
 8016ed2:	68bb      	ldr	r3, [r7, #8]
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d102      	bne.n	8016ee0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016edc:	3304      	adds	r3, #4
 8016ede:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016ee0:	78fa      	ldrb	r2, [r7, #3]
 8016ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ee4:	9302      	str	r3, [sp, #8]
 8016ee6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8016eea:	9301      	str	r3, [sp, #4]
 8016eec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016ef0:	9300      	str	r3, [sp, #0]
 8016ef2:	4613      	mov	r3, r2
 8016ef4:	687a      	ldr	r2, [r7, #4]
 8016ef6:	6979      	ldr	r1, [r7, #20]
 8016ef8:	68f8      	ldr	r0, [r7, #12]
 8016efa:	f000 f805 	bl	8016f08 <ip4_output_if_src>
 8016efe:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016f00:	4618      	mov	r0, r3
 8016f02:	3718      	adds	r7, #24
 8016f04:	46bd      	mov	sp, r7
 8016f06:	bd80      	pop	{r7, pc}

08016f08 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016f08:	b580      	push	{r7, lr}
 8016f0a:	b088      	sub	sp, #32
 8016f0c:	af00      	add	r7, sp, #0
 8016f0e:	60f8      	str	r0, [r7, #12]
 8016f10:	60b9      	str	r1, [r7, #8]
 8016f12:	607a      	str	r2, [r7, #4]
 8016f14:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	7b9b      	ldrb	r3, [r3, #14]
 8016f1a:	2b01      	cmp	r3, #1
 8016f1c:	d006      	beq.n	8016f2c <ip4_output_if_src+0x24>
 8016f1e:	4b4b      	ldr	r3, [pc, #300]	@ (801704c <ip4_output_if_src+0x144>)
 8016f20:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8016f24:	494a      	ldr	r1, [pc, #296]	@ (8017050 <ip4_output_if_src+0x148>)
 8016f26:	484b      	ldr	r0, [pc, #300]	@ (8017054 <ip4_output_if_src+0x14c>)
 8016f28:	f00e face 	bl	80254c8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d060      	beq.n	8016ff4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016f32:	2314      	movs	r3, #20
 8016f34:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016f36:	2114      	movs	r1, #20
 8016f38:	68f8      	ldr	r0, [r7, #12]
 8016f3a:	f7f7 fb61 	bl	800e600 <pbuf_add_header>
 8016f3e:	4603      	mov	r3, r0
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d002      	beq.n	8016f4a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016f44:	f06f 0301 	mvn.w	r3, #1
 8016f48:	e07c      	b.n	8017044 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	685b      	ldr	r3, [r3, #4]
 8016f4e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	895b      	ldrh	r3, [r3, #10]
 8016f54:	2b13      	cmp	r3, #19
 8016f56:	d806      	bhi.n	8016f66 <ip4_output_if_src+0x5e>
 8016f58:	4b3c      	ldr	r3, [pc, #240]	@ (801704c <ip4_output_if_src+0x144>)
 8016f5a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8016f5e:	493e      	ldr	r1, [pc, #248]	@ (8017058 <ip4_output_if_src+0x150>)
 8016f60:	483c      	ldr	r0, [pc, #240]	@ (8017054 <ip4_output_if_src+0x14c>)
 8016f62:	f00e fab1 	bl	80254c8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016f66:	69fb      	ldr	r3, [r7, #28]
 8016f68:	78fa      	ldrb	r2, [r7, #3]
 8016f6a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016f6c:	69fb      	ldr	r3, [r7, #28]
 8016f6e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8016f72:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	681a      	ldr	r2, [r3, #0]
 8016f78:	69fb      	ldr	r3, [r7, #28]
 8016f7a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016f7c:	8b7b      	ldrh	r3, [r7, #26]
 8016f7e:	089b      	lsrs	r3, r3, #2
 8016f80:	b29b      	uxth	r3, r3
 8016f82:	b2db      	uxtb	r3, r3
 8016f84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016f88:	b2da      	uxtb	r2, r3
 8016f8a:	69fb      	ldr	r3, [r7, #28]
 8016f8c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016f8e:	69fb      	ldr	r3, [r7, #28]
 8016f90:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8016f94:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	891b      	ldrh	r3, [r3, #8]
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	f7f5 ffa0 	bl	800cee0 <lwip_htons>
 8016fa0:	4603      	mov	r3, r0
 8016fa2:	461a      	mov	r2, r3
 8016fa4:	69fb      	ldr	r3, [r7, #28]
 8016fa6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016fa8:	69fb      	ldr	r3, [r7, #28]
 8016faa:	2200      	movs	r2, #0
 8016fac:	719a      	strb	r2, [r3, #6]
 8016fae:	2200      	movs	r2, #0
 8016fb0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016fb2:	4b2a      	ldr	r3, [pc, #168]	@ (801705c <ip4_output_if_src+0x154>)
 8016fb4:	881b      	ldrh	r3, [r3, #0]
 8016fb6:	4618      	mov	r0, r3
 8016fb8:	f7f5 ff92 	bl	800cee0 <lwip_htons>
 8016fbc:	4603      	mov	r3, r0
 8016fbe:	461a      	mov	r2, r3
 8016fc0:	69fb      	ldr	r3, [r7, #28]
 8016fc2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016fc4:	4b25      	ldr	r3, [pc, #148]	@ (801705c <ip4_output_if_src+0x154>)
 8016fc6:	881b      	ldrh	r3, [r3, #0]
 8016fc8:	3301      	adds	r3, #1
 8016fca:	b29a      	uxth	r2, r3
 8016fcc:	4b23      	ldr	r3, [pc, #140]	@ (801705c <ip4_output_if_src+0x154>)
 8016fce:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016fd0:	68bb      	ldr	r3, [r7, #8]
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d104      	bne.n	8016fe0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016fd6:	4b22      	ldr	r3, [pc, #136]	@ (8017060 <ip4_output_if_src+0x158>)
 8016fd8:	681a      	ldr	r2, [r3, #0]
 8016fda:	69fb      	ldr	r3, [r7, #28]
 8016fdc:	60da      	str	r2, [r3, #12]
 8016fde:	e003      	b.n	8016fe8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016fe0:	68bb      	ldr	r3, [r7, #8]
 8016fe2:	681a      	ldr	r2, [r3, #0]
 8016fe4:	69fb      	ldr	r3, [r7, #28]
 8016fe6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016fe8:	69fb      	ldr	r3, [r7, #28]
 8016fea:	2200      	movs	r2, #0
 8016fec:	729a      	strb	r2, [r3, #10]
 8016fee:	2200      	movs	r2, #0
 8016ff0:	72da      	strb	r2, [r3, #11]
 8016ff2:	e00f      	b.n	8017014 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	895b      	ldrh	r3, [r3, #10]
 8016ff8:	2b13      	cmp	r3, #19
 8016ffa:	d802      	bhi.n	8017002 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016ffc:	f06f 0301 	mvn.w	r3, #1
 8017000:	e020      	b.n	8017044 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	685b      	ldr	r3, [r3, #4]
 8017006:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017008:	69fb      	ldr	r3, [r7, #28]
 801700a:	691b      	ldr	r3, [r3, #16]
 801700c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801700e:	f107 0314 	add.w	r3, r7, #20
 8017012:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017016:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8017018:	2b00      	cmp	r3, #0
 801701a:	d00c      	beq.n	8017036 <ip4_output_if_src+0x12e>
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	891a      	ldrh	r2, [r3, #8]
 8017020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017022:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8017024:	429a      	cmp	r2, r3
 8017026:	d906      	bls.n	8017036 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017028:	687a      	ldr	r2, [r7, #4]
 801702a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801702c:	68f8      	ldr	r0, [r7, #12]
 801702e:	f000 fe91 	bl	8017d54 <ip4_frag>
 8017032:	4603      	mov	r3, r0
 8017034:	e006      	b.n	8017044 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017038:	695b      	ldr	r3, [r3, #20]
 801703a:	687a      	ldr	r2, [r7, #4]
 801703c:	68f9      	ldr	r1, [r7, #12]
 801703e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017040:	4798      	blx	r3
 8017042:	4603      	mov	r3, r0
}
 8017044:	4618      	mov	r0, r3
 8017046:	3720      	adds	r7, #32
 8017048:	46bd      	mov	sp, r7
 801704a:	bd80      	pop	{r7, pc}
 801704c:	08029d90 	.word	0x08029d90
 8017050:	08029dc4 	.word	0x08029dc4
 8017054:	08029dd0 	.word	0x08029dd0
 8017058:	08029df8 	.word	0x08029df8
 801705c:	2000ffd2 	.word	0x2000ffd2
 8017060:	0802a2ec 	.word	0x0802a2ec

08017064 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017064:	b480      	push	{r7}
 8017066:	b085      	sub	sp, #20
 8017068:	af00      	add	r7, sp, #0
 801706a:	6078      	str	r0, [r7, #4]
 801706c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017078:	d002      	beq.n	8017080 <ip4_addr_isbroadcast_u32+0x1c>
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	2b00      	cmp	r3, #0
 801707e:	d101      	bne.n	8017084 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017080:	2301      	movs	r3, #1
 8017082:	e02a      	b.n	80170da <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017084:	683b      	ldr	r3, [r7, #0]
 8017086:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801708a:	f003 0302 	and.w	r3, r3, #2
 801708e:	2b00      	cmp	r3, #0
 8017090:	d101      	bne.n	8017096 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017092:	2300      	movs	r3, #0
 8017094:	e021      	b.n	80170da <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017096:	683b      	ldr	r3, [r7, #0]
 8017098:	3304      	adds	r3, #4
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	687a      	ldr	r2, [r7, #4]
 801709e:	429a      	cmp	r2, r3
 80170a0:	d101      	bne.n	80170a6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80170a2:	2300      	movs	r3, #0
 80170a4:	e019      	b.n	80170da <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80170a6:	68fa      	ldr	r2, [r7, #12]
 80170a8:	683b      	ldr	r3, [r7, #0]
 80170aa:	3304      	adds	r3, #4
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	405a      	eors	r2, r3
 80170b0:	683b      	ldr	r3, [r7, #0]
 80170b2:	3308      	adds	r3, #8
 80170b4:	681b      	ldr	r3, [r3, #0]
 80170b6:	4013      	ands	r3, r2
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d10d      	bne.n	80170d8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80170bc:	683b      	ldr	r3, [r7, #0]
 80170be:	3308      	adds	r3, #8
 80170c0:	681b      	ldr	r3, [r3, #0]
 80170c2:	43da      	mvns	r2, r3
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80170c8:	683b      	ldr	r3, [r7, #0]
 80170ca:	3308      	adds	r3, #8
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80170d0:	429a      	cmp	r2, r3
 80170d2:	d101      	bne.n	80170d8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80170d4:	2301      	movs	r3, #1
 80170d6:	e000      	b.n	80170da <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80170d8:	2300      	movs	r3, #0
  }
}
 80170da:	4618      	mov	r0, r3
 80170dc:	3714      	adds	r7, #20
 80170de:	46bd      	mov	sp, r7
 80170e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170e4:	4770      	bx	lr

080170e6 <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 80170e6:	b580      	push	{r7, lr}
 80170e8:	b084      	sub	sp, #16
 80170ea:	af00      	add	r7, sp, #0
 80170ec:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 80170ee:	f107 030c 	add.w	r3, r7, #12
 80170f2:	4619      	mov	r1, r3
 80170f4:	6878      	ldr	r0, [r7, #4]
 80170f6:	f000 f80b 	bl	8017110 <ip4addr_aton>
 80170fa:	4603      	mov	r3, r0
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d001      	beq.n	8017104 <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	e001      	b.n	8017108 <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 8017104:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017108:	4618      	mov	r0, r3
 801710a:	3710      	adds	r7, #16
 801710c:	46bd      	mov	sp, r7
 801710e:	bd80      	pop	{r7, pc}

08017110 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8017110:	b580      	push	{r7, lr}
 8017112:	b08a      	sub	sp, #40	@ 0x28
 8017114:	af00      	add	r7, sp, #0
 8017116:	6078      	str	r0, [r7, #4]
 8017118:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801711a:	f107 030c 	add.w	r3, r7, #12
 801711e:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	781b      	ldrb	r3, [r3, #0]
 8017124:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8017128:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801712c:	3301      	adds	r3, #1
 801712e:	4a89      	ldr	r2, [pc, #548]	@ (8017354 <ip4addr_aton+0x244>)
 8017130:	4413      	add	r3, r2
 8017132:	781b      	ldrb	r3, [r3, #0]
 8017134:	f003 0304 	and.w	r3, r3, #4
 8017138:	2b00      	cmp	r3, #0
 801713a:	d101      	bne.n	8017140 <ip4addr_aton+0x30>
      return 0;
 801713c:	2300      	movs	r3, #0
 801713e:	e105      	b.n	801734c <ip4addr_aton+0x23c>
    }
    val = 0;
 8017140:	2300      	movs	r3, #0
 8017142:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 8017144:	230a      	movs	r3, #10
 8017146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 801714a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801714e:	2b30      	cmp	r3, #48	@ 0x30
 8017150:	d11c      	bne.n	801718c <ip4addr_aton+0x7c>
      c = *++cp;
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	3301      	adds	r3, #1
 8017156:	607b      	str	r3, [r7, #4]
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	781b      	ldrb	r3, [r3, #0]
 801715c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 8017160:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017164:	2b78      	cmp	r3, #120	@ 0x78
 8017166:	d003      	beq.n	8017170 <ip4addr_aton+0x60>
 8017168:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801716c:	2b58      	cmp	r3, #88	@ 0x58
 801716e:	d10a      	bne.n	8017186 <ip4addr_aton+0x76>
        base = 16;
 8017170:	2310      	movs	r3, #16
 8017172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	3301      	adds	r3, #1
 801717a:	607b      	str	r3, [r7, #4]
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	781b      	ldrb	r3, [r3, #0]
 8017180:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8017184:	e002      	b.n	801718c <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8017186:	2308      	movs	r3, #8
 8017188:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 801718c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017190:	3301      	adds	r3, #1
 8017192:	4a70      	ldr	r2, [pc, #448]	@ (8017354 <ip4addr_aton+0x244>)
 8017194:	4413      	add	r3, r2
 8017196:	781b      	ldrb	r3, [r3, #0]
 8017198:	f003 0304 	and.w	r3, r3, #4
 801719c:	2b00      	cmp	r3, #0
 801719e:	d011      	beq.n	80171c4 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 80171a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80171a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80171a6:	fb03 f202 	mul.w	r2, r3, r2
 80171aa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80171ae:	4413      	add	r3, r2
 80171b0:	3b30      	subs	r3, #48	@ 0x30
 80171b2:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	3301      	adds	r3, #1
 80171b8:	607b      	str	r3, [r7, #4]
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	781b      	ldrb	r3, [r3, #0]
 80171be:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80171c2:	e7e3      	b.n	801718c <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 80171c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80171c8:	2b10      	cmp	r3, #16
 80171ca:	d127      	bne.n	801721c <ip4addr_aton+0x10c>
 80171cc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80171d0:	3301      	adds	r3, #1
 80171d2:	4a60      	ldr	r2, [pc, #384]	@ (8017354 <ip4addr_aton+0x244>)
 80171d4:	4413      	add	r3, r2
 80171d6:	781b      	ldrb	r3, [r3, #0]
 80171d8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d01d      	beq.n	801721c <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 80171e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171e2:	011b      	lsls	r3, r3, #4
 80171e4:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80171e8:	f102 010a 	add.w	r1, r2, #10
 80171ec:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80171f0:	3201      	adds	r2, #1
 80171f2:	4858      	ldr	r0, [pc, #352]	@ (8017354 <ip4addr_aton+0x244>)
 80171f4:	4402      	add	r2, r0
 80171f6:	7812      	ldrb	r2, [r2, #0]
 80171f8:	f002 0203 	and.w	r2, r2, #3
 80171fc:	2a02      	cmp	r2, #2
 80171fe:	d101      	bne.n	8017204 <ip4addr_aton+0xf4>
 8017200:	2261      	movs	r2, #97	@ 0x61
 8017202:	e000      	b.n	8017206 <ip4addr_aton+0xf6>
 8017204:	2241      	movs	r2, #65	@ 0x41
 8017206:	1a8a      	subs	r2, r1, r2
 8017208:	4313      	orrs	r3, r2
 801720a:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	3301      	adds	r3, #1
 8017210:	607b      	str	r3, [r7, #4]
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	781b      	ldrb	r3, [r3, #0]
 8017216:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (lwip_isdigit(c)) {
 801721a:	e7b7      	b.n	801718c <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 801721c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017220:	2b2e      	cmp	r3, #46	@ 0x2e
 8017222:	d114      	bne.n	801724e <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8017224:	f107 030c 	add.w	r3, r7, #12
 8017228:	330c      	adds	r3, #12
 801722a:	69fa      	ldr	r2, [r7, #28]
 801722c:	429a      	cmp	r2, r3
 801722e:	d301      	bcc.n	8017234 <ip4addr_aton+0x124>
        return 0;
 8017230:	2300      	movs	r3, #0
 8017232:	e08b      	b.n	801734c <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8017234:	69fb      	ldr	r3, [r7, #28]
 8017236:	1d1a      	adds	r2, r3, #4
 8017238:	61fa      	str	r2, [r7, #28]
 801723a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801723c:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	3301      	adds	r3, #1
 8017242:	607b      	str	r3, [r7, #4]
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	781b      	ldrb	r3, [r3, #0]
 8017248:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!lwip_isdigit(c)) {
 801724c:	e76c      	b.n	8017128 <ip4addr_aton+0x18>
    } else {
      break;
 801724e:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8017250:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017254:	2b00      	cmp	r3, #0
 8017256:	d00b      	beq.n	8017270 <ip4addr_aton+0x160>
 8017258:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801725c:	3301      	adds	r3, #1
 801725e:	4a3d      	ldr	r2, [pc, #244]	@ (8017354 <ip4addr_aton+0x244>)
 8017260:	4413      	add	r3, r2
 8017262:	781b      	ldrb	r3, [r3, #0]
 8017264:	f003 0308 	and.w	r3, r3, #8
 8017268:	2b00      	cmp	r3, #0
 801726a:	d101      	bne.n	8017270 <ip4addr_aton+0x160>
    return 0;
 801726c:	2300      	movs	r3, #0
 801726e:	e06d      	b.n	801734c <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8017270:	f107 030c 	add.w	r3, r7, #12
 8017274:	69fa      	ldr	r2, [r7, #28]
 8017276:	1ad3      	subs	r3, r2, r3
 8017278:	109b      	asrs	r3, r3, #2
 801727a:	3301      	adds	r3, #1
 801727c:	2b04      	cmp	r3, #4
 801727e:	d853      	bhi.n	8017328 <ip4addr_aton+0x218>
 8017280:	a201      	add	r2, pc, #4	@ (adr r2, 8017288 <ip4addr_aton+0x178>)
 8017282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017286:	bf00      	nop
 8017288:	0801729d 	.word	0x0801729d
 801728c:	08017337 	.word	0x08017337
 8017290:	080172a1 	.word	0x080172a1
 8017294:	080172c3 	.word	0x080172c3
 8017298:	080172f1 	.word	0x080172f1

    case 0:
      return 0;       /* initial nondigit */
 801729c:	2300      	movs	r3, #0
 801729e:	e055      	b.n	801734c <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 80172a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80172a6:	d301      	bcc.n	80172ac <ip4addr_aton+0x19c>
        return 0;
 80172a8:	2300      	movs	r3, #0
 80172aa:	e04f      	b.n	801734c <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	2bff      	cmp	r3, #255	@ 0xff
 80172b0:	d901      	bls.n	80172b6 <ip4addr_aton+0x1a6>
        return 0;
 80172b2:	2300      	movs	r3, #0
 80172b4:	e04a      	b.n	801734c <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	061b      	lsls	r3, r3, #24
 80172ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80172bc:	4313      	orrs	r3, r2
 80172be:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80172c0:	e03a      	b.n	8017338 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 80172c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80172c8:	d301      	bcc.n	80172ce <ip4addr_aton+0x1be>
        return 0;
 80172ca:	2300      	movs	r3, #0
 80172cc:	e03e      	b.n	801734c <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 80172ce:	68fb      	ldr	r3, [r7, #12]
 80172d0:	2bff      	cmp	r3, #255	@ 0xff
 80172d2:	d802      	bhi.n	80172da <ip4addr_aton+0x1ca>
 80172d4:	693b      	ldr	r3, [r7, #16]
 80172d6:	2bff      	cmp	r3, #255	@ 0xff
 80172d8:	d901      	bls.n	80172de <ip4addr_aton+0x1ce>
        return 0;
 80172da:	2300      	movs	r3, #0
 80172dc:	e036      	b.n	801734c <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	061a      	lsls	r2, r3, #24
 80172e2:	693b      	ldr	r3, [r7, #16]
 80172e4:	041b      	lsls	r3, r3, #16
 80172e6:	4313      	orrs	r3, r2
 80172e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80172ea:	4313      	orrs	r3, r2
 80172ec:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80172ee:	e023      	b.n	8017338 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 80172f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172f2:	2bff      	cmp	r3, #255	@ 0xff
 80172f4:	d901      	bls.n	80172fa <ip4addr_aton+0x1ea>
        return 0;
 80172f6:	2300      	movs	r3, #0
 80172f8:	e028      	b.n	801734c <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 80172fa:	68fb      	ldr	r3, [r7, #12]
 80172fc:	2bff      	cmp	r3, #255	@ 0xff
 80172fe:	d805      	bhi.n	801730c <ip4addr_aton+0x1fc>
 8017300:	693b      	ldr	r3, [r7, #16]
 8017302:	2bff      	cmp	r3, #255	@ 0xff
 8017304:	d802      	bhi.n	801730c <ip4addr_aton+0x1fc>
 8017306:	697b      	ldr	r3, [r7, #20]
 8017308:	2bff      	cmp	r3, #255	@ 0xff
 801730a:	d901      	bls.n	8017310 <ip4addr_aton+0x200>
        return 0;
 801730c:	2300      	movs	r3, #0
 801730e:	e01d      	b.n	801734c <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	061a      	lsls	r2, r3, #24
 8017314:	693b      	ldr	r3, [r7, #16]
 8017316:	041b      	lsls	r3, r3, #16
 8017318:	431a      	orrs	r2, r3
 801731a:	697b      	ldr	r3, [r7, #20]
 801731c:	021b      	lsls	r3, r3, #8
 801731e:	4313      	orrs	r3, r2
 8017320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017322:	4313      	orrs	r3, r2
 8017324:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8017326:	e007      	b.n	8017338 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8017328:	4b0b      	ldr	r3, [pc, #44]	@ (8017358 <ip4addr_aton+0x248>)
 801732a:	22f9      	movs	r2, #249	@ 0xf9
 801732c:	490b      	ldr	r1, [pc, #44]	@ (801735c <ip4addr_aton+0x24c>)
 801732e:	480c      	ldr	r0, [pc, #48]	@ (8017360 <ip4addr_aton+0x250>)
 8017330:	f00e f8ca 	bl	80254c8 <iprintf>
      break;
 8017334:	e000      	b.n	8017338 <ip4addr_aton+0x228>
      break;
 8017336:	bf00      	nop
  }
  if (addr) {
 8017338:	683b      	ldr	r3, [r7, #0]
 801733a:	2b00      	cmp	r3, #0
 801733c:	d005      	beq.n	801734a <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801733e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017340:	f7f5 fde4 	bl	800cf0c <lwip_htonl>
 8017344:	4602      	mov	r2, r0
 8017346:	683b      	ldr	r3, [r7, #0]
 8017348:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801734a:	2301      	movs	r3, #1
}
 801734c:	4618      	mov	r0, r3
 801734e:	3728      	adds	r7, #40	@ 0x28
 8017350:	46bd      	mov	sp, r7
 8017352:	bd80      	pop	{r7, pc}
 8017354:	0802b022 	.word	0x0802b022
 8017358:	08029e28 	.word	0x08029e28
 801735c:	08029e64 	.word	0x08029e64
 8017360:	08029e70 	.word	0x08029e70

08017364 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017364:	b580      	push	{r7, lr}
 8017366:	b084      	sub	sp, #16
 8017368:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801736a:	2300      	movs	r3, #0
 801736c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801736e:	4b12      	ldr	r3, [pc, #72]	@ (80173b8 <ip_reass_tmr+0x54>)
 8017370:	681b      	ldr	r3, [r3, #0]
 8017372:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017374:	e018      	b.n	80173a8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017376:	68fb      	ldr	r3, [r7, #12]
 8017378:	7fdb      	ldrb	r3, [r3, #31]
 801737a:	2b00      	cmp	r3, #0
 801737c:	d00b      	beq.n	8017396 <ip_reass_tmr+0x32>
      r->timer--;
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	7fdb      	ldrb	r3, [r3, #31]
 8017382:	3b01      	subs	r3, #1
 8017384:	b2da      	uxtb	r2, r3
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	681b      	ldr	r3, [r3, #0]
 8017392:	60fb      	str	r3, [r7, #12]
 8017394:	e008      	b.n	80173a8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017396:	68fb      	ldr	r3, [r7, #12]
 8017398:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80173a0:	68b9      	ldr	r1, [r7, #8]
 80173a2:	6878      	ldr	r0, [r7, #4]
 80173a4:	f000 f80a 	bl	80173bc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d1e3      	bne.n	8017376 <ip_reass_tmr+0x12>
    }
  }
}
 80173ae:	bf00      	nop
 80173b0:	bf00      	nop
 80173b2:	3710      	adds	r7, #16
 80173b4:	46bd      	mov	sp, r7
 80173b6:	bd80      	pop	{r7, pc}
 80173b8:	2000ffd4 	.word	0x2000ffd4

080173bc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80173bc:	b580      	push	{r7, lr}
 80173be:	b088      	sub	sp, #32
 80173c0:	af00      	add	r7, sp, #0
 80173c2:	6078      	str	r0, [r7, #4]
 80173c4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80173c6:	2300      	movs	r3, #0
 80173c8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80173ca:	683a      	ldr	r2, [r7, #0]
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	429a      	cmp	r2, r3
 80173d0:	d105      	bne.n	80173de <ip_reass_free_complete_datagram+0x22>
 80173d2:	4b45      	ldr	r3, [pc, #276]	@ (80174e8 <ip_reass_free_complete_datagram+0x12c>)
 80173d4:	22ab      	movs	r2, #171	@ 0xab
 80173d6:	4945      	ldr	r1, [pc, #276]	@ (80174ec <ip_reass_free_complete_datagram+0x130>)
 80173d8:	4845      	ldr	r0, [pc, #276]	@ (80174f0 <ip_reass_free_complete_datagram+0x134>)
 80173da:	f00e f875 	bl	80254c8 <iprintf>
  if (prev != NULL) {
 80173de:	683b      	ldr	r3, [r7, #0]
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d00a      	beq.n	80173fa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80173e4:	683b      	ldr	r3, [r7, #0]
 80173e6:	681b      	ldr	r3, [r3, #0]
 80173e8:	687a      	ldr	r2, [r7, #4]
 80173ea:	429a      	cmp	r2, r3
 80173ec:	d005      	beq.n	80173fa <ip_reass_free_complete_datagram+0x3e>
 80173ee:	4b3e      	ldr	r3, [pc, #248]	@ (80174e8 <ip_reass_free_complete_datagram+0x12c>)
 80173f0:	22ad      	movs	r2, #173	@ 0xad
 80173f2:	4940      	ldr	r1, [pc, #256]	@ (80174f4 <ip_reass_free_complete_datagram+0x138>)
 80173f4:	483e      	ldr	r0, [pc, #248]	@ (80174f0 <ip_reass_free_complete_datagram+0x134>)
 80173f6:	f00e f867 	bl	80254c8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	685b      	ldr	r3, [r3, #4]
 80173fe:	685b      	ldr	r3, [r3, #4]
 8017400:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017402:	697b      	ldr	r3, [r7, #20]
 8017404:	889b      	ldrh	r3, [r3, #4]
 8017406:	b29b      	uxth	r3, r3
 8017408:	2b00      	cmp	r3, #0
 801740a:	d12a      	bne.n	8017462 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	685b      	ldr	r3, [r3, #4]
 8017410:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017412:	697b      	ldr	r3, [r7, #20]
 8017414:	681a      	ldr	r2, [r3, #0]
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801741a:	69bb      	ldr	r3, [r7, #24]
 801741c:	6858      	ldr	r0, [r3, #4]
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	3308      	adds	r3, #8
 8017422:	2214      	movs	r2, #20
 8017424:	4619      	mov	r1, r3
 8017426:	f00e fafc 	bl	8025a22 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801742a:	2101      	movs	r1, #1
 801742c:	69b8      	ldr	r0, [r7, #24]
 801742e:	f7ff fb09 	bl	8016a44 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017432:	69b8      	ldr	r0, [r7, #24]
 8017434:	f7f7 fa3a 	bl	800e8ac <pbuf_clen>
 8017438:	4603      	mov	r3, r0
 801743a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801743c:	8bfa      	ldrh	r2, [r7, #30]
 801743e:	8a7b      	ldrh	r3, [r7, #18]
 8017440:	4413      	add	r3, r2
 8017442:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017446:	db05      	blt.n	8017454 <ip_reass_free_complete_datagram+0x98>
 8017448:	4b27      	ldr	r3, [pc, #156]	@ (80174e8 <ip_reass_free_complete_datagram+0x12c>)
 801744a:	22bc      	movs	r2, #188	@ 0xbc
 801744c:	492a      	ldr	r1, [pc, #168]	@ (80174f8 <ip_reass_free_complete_datagram+0x13c>)
 801744e:	4828      	ldr	r0, [pc, #160]	@ (80174f0 <ip_reass_free_complete_datagram+0x134>)
 8017450:	f00e f83a 	bl	80254c8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017454:	8bfa      	ldrh	r2, [r7, #30]
 8017456:	8a7b      	ldrh	r3, [r7, #18]
 8017458:	4413      	add	r3, r2
 801745a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801745c:	69b8      	ldr	r0, [r7, #24]
 801745e:	f7f7 f997 	bl	800e790 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	685b      	ldr	r3, [r3, #4]
 8017466:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017468:	e01f      	b.n	80174aa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801746a:	69bb      	ldr	r3, [r7, #24]
 801746c:	685b      	ldr	r3, [r3, #4]
 801746e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017470:	69bb      	ldr	r3, [r7, #24]
 8017472:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017474:	697b      	ldr	r3, [r7, #20]
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801747a:	68f8      	ldr	r0, [r7, #12]
 801747c:	f7f7 fa16 	bl	800e8ac <pbuf_clen>
 8017480:	4603      	mov	r3, r0
 8017482:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017484:	8bfa      	ldrh	r2, [r7, #30]
 8017486:	8a7b      	ldrh	r3, [r7, #18]
 8017488:	4413      	add	r3, r2
 801748a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801748e:	db05      	blt.n	801749c <ip_reass_free_complete_datagram+0xe0>
 8017490:	4b15      	ldr	r3, [pc, #84]	@ (80174e8 <ip_reass_free_complete_datagram+0x12c>)
 8017492:	22cc      	movs	r2, #204	@ 0xcc
 8017494:	4918      	ldr	r1, [pc, #96]	@ (80174f8 <ip_reass_free_complete_datagram+0x13c>)
 8017496:	4816      	ldr	r0, [pc, #88]	@ (80174f0 <ip_reass_free_complete_datagram+0x134>)
 8017498:	f00e f816 	bl	80254c8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801749c:	8bfa      	ldrh	r2, [r7, #30]
 801749e:	8a7b      	ldrh	r3, [r7, #18]
 80174a0:	4413      	add	r3, r2
 80174a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80174a4:	68f8      	ldr	r0, [r7, #12]
 80174a6:	f7f7 f973 	bl	800e790 <pbuf_free>
  while (p != NULL) {
 80174aa:	69bb      	ldr	r3, [r7, #24]
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d1dc      	bne.n	801746a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80174b0:	6839      	ldr	r1, [r7, #0]
 80174b2:	6878      	ldr	r0, [r7, #4]
 80174b4:	f000 f8c2 	bl	801763c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80174b8:	4b10      	ldr	r3, [pc, #64]	@ (80174fc <ip_reass_free_complete_datagram+0x140>)
 80174ba:	881b      	ldrh	r3, [r3, #0]
 80174bc:	8bfa      	ldrh	r2, [r7, #30]
 80174be:	429a      	cmp	r2, r3
 80174c0:	d905      	bls.n	80174ce <ip_reass_free_complete_datagram+0x112>
 80174c2:	4b09      	ldr	r3, [pc, #36]	@ (80174e8 <ip_reass_free_complete_datagram+0x12c>)
 80174c4:	22d2      	movs	r2, #210	@ 0xd2
 80174c6:	490e      	ldr	r1, [pc, #56]	@ (8017500 <ip_reass_free_complete_datagram+0x144>)
 80174c8:	4809      	ldr	r0, [pc, #36]	@ (80174f0 <ip_reass_free_complete_datagram+0x134>)
 80174ca:	f00d fffd 	bl	80254c8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80174ce:	4b0b      	ldr	r3, [pc, #44]	@ (80174fc <ip_reass_free_complete_datagram+0x140>)
 80174d0:	881a      	ldrh	r2, [r3, #0]
 80174d2:	8bfb      	ldrh	r3, [r7, #30]
 80174d4:	1ad3      	subs	r3, r2, r3
 80174d6:	b29a      	uxth	r2, r3
 80174d8:	4b08      	ldr	r3, [pc, #32]	@ (80174fc <ip_reass_free_complete_datagram+0x140>)
 80174da:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80174dc:	8bfb      	ldrh	r3, [r7, #30]
}
 80174de:	4618      	mov	r0, r3
 80174e0:	3720      	adds	r7, #32
 80174e2:	46bd      	mov	sp, r7
 80174e4:	bd80      	pop	{r7, pc}
 80174e6:	bf00      	nop
 80174e8:	08029e98 	.word	0x08029e98
 80174ec:	08029ed4 	.word	0x08029ed4
 80174f0:	08029ee0 	.word	0x08029ee0
 80174f4:	08029f08 	.word	0x08029f08
 80174f8:	08029f1c 	.word	0x08029f1c
 80174fc:	2000ffd8 	.word	0x2000ffd8
 8017500:	08029f3c 	.word	0x08029f3c

08017504 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017504:	b580      	push	{r7, lr}
 8017506:	b08a      	sub	sp, #40	@ 0x28
 8017508:	af00      	add	r7, sp, #0
 801750a:	6078      	str	r0, [r7, #4]
 801750c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801750e:	2300      	movs	r3, #0
 8017510:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017512:	2300      	movs	r3, #0
 8017514:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017516:	2300      	movs	r3, #0
 8017518:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801751a:	2300      	movs	r3, #0
 801751c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801751e:	2300      	movs	r3, #0
 8017520:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017522:	4b28      	ldr	r3, [pc, #160]	@ (80175c4 <ip_reass_remove_oldest_datagram+0xc0>)
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8017528:	e030      	b.n	801758c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801752a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801752c:	695a      	ldr	r2, [r3, #20]
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	68db      	ldr	r3, [r3, #12]
 8017532:	429a      	cmp	r2, r3
 8017534:	d10c      	bne.n	8017550 <ip_reass_remove_oldest_datagram+0x4c>
 8017536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017538:	699a      	ldr	r2, [r3, #24]
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	691b      	ldr	r3, [r3, #16]
 801753e:	429a      	cmp	r2, r3
 8017540:	d106      	bne.n	8017550 <ip_reass_remove_oldest_datagram+0x4c>
 8017542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017544:	899a      	ldrh	r2, [r3, #12]
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	889b      	ldrh	r3, [r3, #4]
 801754a:	b29b      	uxth	r3, r3
 801754c:	429a      	cmp	r2, r3
 801754e:	d014      	beq.n	801757a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017550:	693b      	ldr	r3, [r7, #16]
 8017552:	3301      	adds	r3, #1
 8017554:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017556:	6a3b      	ldr	r3, [r7, #32]
 8017558:	2b00      	cmp	r3, #0
 801755a:	d104      	bne.n	8017566 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801755c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801755e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017560:	69fb      	ldr	r3, [r7, #28]
 8017562:	61bb      	str	r3, [r7, #24]
 8017564:	e009      	b.n	801757a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017568:	7fda      	ldrb	r2, [r3, #31]
 801756a:	6a3b      	ldr	r3, [r7, #32]
 801756c:	7fdb      	ldrb	r3, [r3, #31]
 801756e:	429a      	cmp	r2, r3
 8017570:	d803      	bhi.n	801757a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017574:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017576:	69fb      	ldr	r3, [r7, #28]
 8017578:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801757a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801757c:	681b      	ldr	r3, [r3, #0]
 801757e:	2b00      	cmp	r3, #0
 8017580:	d001      	beq.n	8017586 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017584:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801758c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801758e:	2b00      	cmp	r3, #0
 8017590:	d1cb      	bne.n	801752a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017592:	6a3b      	ldr	r3, [r7, #32]
 8017594:	2b00      	cmp	r3, #0
 8017596:	d008      	beq.n	80175aa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017598:	69b9      	ldr	r1, [r7, #24]
 801759a:	6a38      	ldr	r0, [r7, #32]
 801759c:	f7ff ff0e 	bl	80173bc <ip_reass_free_complete_datagram>
 80175a0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80175a2:	697a      	ldr	r2, [r7, #20]
 80175a4:	68fb      	ldr	r3, [r7, #12]
 80175a6:	4413      	add	r3, r2
 80175a8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80175aa:	697a      	ldr	r2, [r7, #20]
 80175ac:	683b      	ldr	r3, [r7, #0]
 80175ae:	429a      	cmp	r2, r3
 80175b0:	da02      	bge.n	80175b8 <ip_reass_remove_oldest_datagram+0xb4>
 80175b2:	693b      	ldr	r3, [r7, #16]
 80175b4:	2b01      	cmp	r3, #1
 80175b6:	dcac      	bgt.n	8017512 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80175b8:	697b      	ldr	r3, [r7, #20]
}
 80175ba:	4618      	mov	r0, r3
 80175bc:	3728      	adds	r7, #40	@ 0x28
 80175be:	46bd      	mov	sp, r7
 80175c0:	bd80      	pop	{r7, pc}
 80175c2:	bf00      	nop
 80175c4:	2000ffd4 	.word	0x2000ffd4

080175c8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80175c8:	b580      	push	{r7, lr}
 80175ca:	b084      	sub	sp, #16
 80175cc:	af00      	add	r7, sp, #0
 80175ce:	6078      	str	r0, [r7, #4]
 80175d0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80175d2:	2004      	movs	r0, #4
 80175d4:	f7f6 f958 	bl	800d888 <memp_malloc>
 80175d8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80175da:	68fb      	ldr	r3, [r7, #12]
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d110      	bne.n	8017602 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80175e0:	6839      	ldr	r1, [r7, #0]
 80175e2:	6878      	ldr	r0, [r7, #4]
 80175e4:	f7ff ff8e 	bl	8017504 <ip_reass_remove_oldest_datagram>
 80175e8:	4602      	mov	r2, r0
 80175ea:	683b      	ldr	r3, [r7, #0]
 80175ec:	4293      	cmp	r3, r2
 80175ee:	dc03      	bgt.n	80175f8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80175f0:	2004      	movs	r0, #4
 80175f2:	f7f6 f949 	bl	800d888 <memp_malloc>
 80175f6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80175f8:	68fb      	ldr	r3, [r7, #12]
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d101      	bne.n	8017602 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80175fe:	2300      	movs	r3, #0
 8017600:	e016      	b.n	8017630 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017602:	2220      	movs	r2, #32
 8017604:	2100      	movs	r1, #0
 8017606:	68f8      	ldr	r0, [r7, #12]
 8017608:	f00e f8e4 	bl	80257d4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	220f      	movs	r2, #15
 8017610:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017612:	4b09      	ldr	r3, [pc, #36]	@ (8017638 <ip_reass_enqueue_new_datagram+0x70>)
 8017614:	681a      	ldr	r2, [r3, #0]
 8017616:	68fb      	ldr	r3, [r7, #12]
 8017618:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801761a:	4a07      	ldr	r2, [pc, #28]	@ (8017638 <ip_reass_enqueue_new_datagram+0x70>)
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	3308      	adds	r3, #8
 8017624:	2214      	movs	r2, #20
 8017626:	6879      	ldr	r1, [r7, #4]
 8017628:	4618      	mov	r0, r3
 801762a:	f00e f9fa 	bl	8025a22 <memcpy>
  return ipr;
 801762e:	68fb      	ldr	r3, [r7, #12]
}
 8017630:	4618      	mov	r0, r3
 8017632:	3710      	adds	r7, #16
 8017634:	46bd      	mov	sp, r7
 8017636:	bd80      	pop	{r7, pc}
 8017638:	2000ffd4 	.word	0x2000ffd4

0801763c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801763c:	b580      	push	{r7, lr}
 801763e:	b082      	sub	sp, #8
 8017640:	af00      	add	r7, sp, #0
 8017642:	6078      	str	r0, [r7, #4]
 8017644:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017646:	4b10      	ldr	r3, [pc, #64]	@ (8017688 <ip_reass_dequeue_datagram+0x4c>)
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	687a      	ldr	r2, [r7, #4]
 801764c:	429a      	cmp	r2, r3
 801764e:	d104      	bne.n	801765a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	4a0c      	ldr	r2, [pc, #48]	@ (8017688 <ip_reass_dequeue_datagram+0x4c>)
 8017656:	6013      	str	r3, [r2, #0]
 8017658:	e00d      	b.n	8017676 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801765a:	683b      	ldr	r3, [r7, #0]
 801765c:	2b00      	cmp	r3, #0
 801765e:	d106      	bne.n	801766e <ip_reass_dequeue_datagram+0x32>
 8017660:	4b0a      	ldr	r3, [pc, #40]	@ (801768c <ip_reass_dequeue_datagram+0x50>)
 8017662:	f240 1245 	movw	r2, #325	@ 0x145
 8017666:	490a      	ldr	r1, [pc, #40]	@ (8017690 <ip_reass_dequeue_datagram+0x54>)
 8017668:	480a      	ldr	r0, [pc, #40]	@ (8017694 <ip_reass_dequeue_datagram+0x58>)
 801766a:	f00d ff2d 	bl	80254c8 <iprintf>
    prev->next = ipr->next;
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	681a      	ldr	r2, [r3, #0]
 8017672:	683b      	ldr	r3, [r7, #0]
 8017674:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017676:	6879      	ldr	r1, [r7, #4]
 8017678:	2004      	movs	r0, #4
 801767a:	f7f6 f97b 	bl	800d974 <memp_free>
}
 801767e:	bf00      	nop
 8017680:	3708      	adds	r7, #8
 8017682:	46bd      	mov	sp, r7
 8017684:	bd80      	pop	{r7, pc}
 8017686:	bf00      	nop
 8017688:	2000ffd4 	.word	0x2000ffd4
 801768c:	08029e98 	.word	0x08029e98
 8017690:	08029f60 	.word	0x08029f60
 8017694:	08029ee0 	.word	0x08029ee0

08017698 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017698:	b580      	push	{r7, lr}
 801769a:	b08c      	sub	sp, #48	@ 0x30
 801769c:	af00      	add	r7, sp, #0
 801769e:	60f8      	str	r0, [r7, #12]
 80176a0:	60b9      	str	r1, [r7, #8]
 80176a2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80176a4:	2300      	movs	r3, #0
 80176a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80176a8:	2301      	movs	r3, #1
 80176aa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80176ac:	68bb      	ldr	r3, [r7, #8]
 80176ae:	685b      	ldr	r3, [r3, #4]
 80176b0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80176b2:	69fb      	ldr	r3, [r7, #28]
 80176b4:	885b      	ldrh	r3, [r3, #2]
 80176b6:	b29b      	uxth	r3, r3
 80176b8:	4618      	mov	r0, r3
 80176ba:	f7f5 fc11 	bl	800cee0 <lwip_htons>
 80176be:	4603      	mov	r3, r0
 80176c0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80176c2:	69fb      	ldr	r3, [r7, #28]
 80176c4:	781b      	ldrb	r3, [r3, #0]
 80176c6:	f003 030f 	and.w	r3, r3, #15
 80176ca:	b2db      	uxtb	r3, r3
 80176cc:	009b      	lsls	r3, r3, #2
 80176ce:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80176d0:	7e7b      	ldrb	r3, [r7, #25]
 80176d2:	b29b      	uxth	r3, r3
 80176d4:	8b7a      	ldrh	r2, [r7, #26]
 80176d6:	429a      	cmp	r2, r3
 80176d8:	d202      	bcs.n	80176e0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80176da:	f04f 33ff 	mov.w	r3, #4294967295
 80176de:	e135      	b.n	801794c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80176e0:	7e7b      	ldrb	r3, [r7, #25]
 80176e2:	b29b      	uxth	r3, r3
 80176e4:	8b7a      	ldrh	r2, [r7, #26]
 80176e6:	1ad3      	subs	r3, r2, r3
 80176e8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80176ea:	69fb      	ldr	r3, [r7, #28]
 80176ec:	88db      	ldrh	r3, [r3, #6]
 80176ee:	b29b      	uxth	r3, r3
 80176f0:	4618      	mov	r0, r3
 80176f2:	f7f5 fbf5 	bl	800cee0 <lwip_htons>
 80176f6:	4603      	mov	r3, r0
 80176f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80176fc:	b29b      	uxth	r3, r3
 80176fe:	00db      	lsls	r3, r3, #3
 8017700:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017702:	68bb      	ldr	r3, [r7, #8]
 8017704:	685b      	ldr	r3, [r3, #4]
 8017706:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8017708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801770a:	2200      	movs	r2, #0
 801770c:	701a      	strb	r2, [r3, #0]
 801770e:	2200      	movs	r2, #0
 8017710:	705a      	strb	r2, [r3, #1]
 8017712:	2200      	movs	r2, #0
 8017714:	709a      	strb	r2, [r3, #2]
 8017716:	2200      	movs	r2, #0
 8017718:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801771a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801771c:	8afa      	ldrh	r2, [r7, #22]
 801771e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017720:	8afa      	ldrh	r2, [r7, #22]
 8017722:	8b7b      	ldrh	r3, [r7, #26]
 8017724:	4413      	add	r3, r2
 8017726:	b29a      	uxth	r2, r3
 8017728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801772a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801772c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801772e:	88db      	ldrh	r3, [r3, #6]
 8017730:	b29b      	uxth	r3, r3
 8017732:	8afa      	ldrh	r2, [r7, #22]
 8017734:	429a      	cmp	r2, r3
 8017736:	d902      	bls.n	801773e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017738:	f04f 33ff 	mov.w	r3, #4294967295
 801773c:	e106      	b.n	801794c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801773e:	68fb      	ldr	r3, [r7, #12]
 8017740:	685b      	ldr	r3, [r3, #4]
 8017742:	627b      	str	r3, [r7, #36]	@ 0x24
 8017744:	e068      	b.n	8017818 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017748:	685b      	ldr	r3, [r3, #4]
 801774a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801774c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801774e:	889b      	ldrh	r3, [r3, #4]
 8017750:	b29a      	uxth	r2, r3
 8017752:	693b      	ldr	r3, [r7, #16]
 8017754:	889b      	ldrh	r3, [r3, #4]
 8017756:	b29b      	uxth	r3, r3
 8017758:	429a      	cmp	r2, r3
 801775a:	d235      	bcs.n	80177c8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801775c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801775e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017760:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017764:	2b00      	cmp	r3, #0
 8017766:	d020      	beq.n	80177aa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801776a:	889b      	ldrh	r3, [r3, #4]
 801776c:	b29a      	uxth	r2, r3
 801776e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017770:	88db      	ldrh	r3, [r3, #6]
 8017772:	b29b      	uxth	r3, r3
 8017774:	429a      	cmp	r2, r3
 8017776:	d307      	bcc.n	8017788 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801777a:	88db      	ldrh	r3, [r3, #6]
 801777c:	b29a      	uxth	r2, r3
 801777e:	693b      	ldr	r3, [r7, #16]
 8017780:	889b      	ldrh	r3, [r3, #4]
 8017782:	b29b      	uxth	r3, r3
 8017784:	429a      	cmp	r2, r3
 8017786:	d902      	bls.n	801778e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017788:	f04f 33ff 	mov.w	r3, #4294967295
 801778c:	e0de      	b.n	801794c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801778e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017790:	68ba      	ldr	r2, [r7, #8]
 8017792:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017796:	88db      	ldrh	r3, [r3, #6]
 8017798:	b29a      	uxth	r2, r3
 801779a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801779c:	889b      	ldrh	r3, [r3, #4]
 801779e:	b29b      	uxth	r3, r3
 80177a0:	429a      	cmp	r2, r3
 80177a2:	d03d      	beq.n	8017820 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80177a4:	2300      	movs	r3, #0
 80177a6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80177a8:	e03a      	b.n	8017820 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80177aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177ac:	88db      	ldrh	r3, [r3, #6]
 80177ae:	b29a      	uxth	r2, r3
 80177b0:	693b      	ldr	r3, [r7, #16]
 80177b2:	889b      	ldrh	r3, [r3, #4]
 80177b4:	b29b      	uxth	r3, r3
 80177b6:	429a      	cmp	r2, r3
 80177b8:	d902      	bls.n	80177c0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80177ba:	f04f 33ff 	mov.w	r3, #4294967295
 80177be:	e0c5      	b.n	801794c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80177c0:	68fb      	ldr	r3, [r7, #12]
 80177c2:	68ba      	ldr	r2, [r7, #8]
 80177c4:	605a      	str	r2, [r3, #4]
      break;
 80177c6:	e02b      	b.n	8017820 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80177c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177ca:	889b      	ldrh	r3, [r3, #4]
 80177cc:	b29a      	uxth	r2, r3
 80177ce:	693b      	ldr	r3, [r7, #16]
 80177d0:	889b      	ldrh	r3, [r3, #4]
 80177d2:	b29b      	uxth	r3, r3
 80177d4:	429a      	cmp	r2, r3
 80177d6:	d102      	bne.n	80177de <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80177d8:	f04f 33ff 	mov.w	r3, #4294967295
 80177dc:	e0b6      	b.n	801794c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80177de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177e0:	889b      	ldrh	r3, [r3, #4]
 80177e2:	b29a      	uxth	r2, r3
 80177e4:	693b      	ldr	r3, [r7, #16]
 80177e6:	88db      	ldrh	r3, [r3, #6]
 80177e8:	b29b      	uxth	r3, r3
 80177ea:	429a      	cmp	r2, r3
 80177ec:	d202      	bcs.n	80177f4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80177ee:	f04f 33ff 	mov.w	r3, #4294967295
 80177f2:	e0ab      	b.n	801794c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80177f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d009      	beq.n	801780e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80177fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80177fc:	88db      	ldrh	r3, [r3, #6]
 80177fe:	b29a      	uxth	r2, r3
 8017800:	693b      	ldr	r3, [r7, #16]
 8017802:	889b      	ldrh	r3, [r3, #4]
 8017804:	b29b      	uxth	r3, r3
 8017806:	429a      	cmp	r2, r3
 8017808:	d001      	beq.n	801780e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801780a:	2300      	movs	r3, #0
 801780c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801780e:	693b      	ldr	r3, [r7, #16]
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8017814:	693b      	ldr	r3, [r7, #16]
 8017816:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8017818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801781a:	2b00      	cmp	r3, #0
 801781c:	d193      	bne.n	8017746 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801781e:	e000      	b.n	8017822 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017820:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017824:	2b00      	cmp	r3, #0
 8017826:	d12d      	bne.n	8017884 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801782a:	2b00      	cmp	r3, #0
 801782c:	d01c      	beq.n	8017868 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801782e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017830:	88db      	ldrh	r3, [r3, #6]
 8017832:	b29a      	uxth	r2, r3
 8017834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017836:	889b      	ldrh	r3, [r3, #4]
 8017838:	b29b      	uxth	r3, r3
 801783a:	429a      	cmp	r2, r3
 801783c:	d906      	bls.n	801784c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801783e:	4b45      	ldr	r3, [pc, #276]	@ (8017954 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017840:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8017844:	4944      	ldr	r1, [pc, #272]	@ (8017958 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017846:	4845      	ldr	r0, [pc, #276]	@ (801795c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017848:	f00d fe3e 	bl	80254c8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801784c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801784e:	68ba      	ldr	r2, [r7, #8]
 8017850:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017854:	88db      	ldrh	r3, [r3, #6]
 8017856:	b29a      	uxth	r2, r3
 8017858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801785a:	889b      	ldrh	r3, [r3, #4]
 801785c:	b29b      	uxth	r3, r3
 801785e:	429a      	cmp	r2, r3
 8017860:	d010      	beq.n	8017884 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017862:	2300      	movs	r3, #0
 8017864:	623b      	str	r3, [r7, #32]
 8017866:	e00d      	b.n	8017884 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	685b      	ldr	r3, [r3, #4]
 801786c:	2b00      	cmp	r3, #0
 801786e:	d006      	beq.n	801787e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017870:	4b38      	ldr	r3, [pc, #224]	@ (8017954 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017872:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8017876:	493a      	ldr	r1, [pc, #232]	@ (8017960 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017878:	4838      	ldr	r0, [pc, #224]	@ (801795c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801787a:	f00d fe25 	bl	80254c8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	68ba      	ldr	r2, [r7, #8]
 8017882:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	2b00      	cmp	r3, #0
 8017888:	d105      	bne.n	8017896 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	7f9b      	ldrb	r3, [r3, #30]
 801788e:	f003 0301 	and.w	r3, r3, #1
 8017892:	2b00      	cmp	r3, #0
 8017894:	d059      	beq.n	801794a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017896:	6a3b      	ldr	r3, [r7, #32]
 8017898:	2b00      	cmp	r3, #0
 801789a:	d04f      	beq.n	801793c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	685b      	ldr	r3, [r3, #4]
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d006      	beq.n	80178b2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	685b      	ldr	r3, [r3, #4]
 80178a8:	685b      	ldr	r3, [r3, #4]
 80178aa:	889b      	ldrh	r3, [r3, #4]
 80178ac:	b29b      	uxth	r3, r3
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d002      	beq.n	80178b8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80178b2:	2300      	movs	r3, #0
 80178b4:	623b      	str	r3, [r7, #32]
 80178b6:	e041      	b.n	801793c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80178b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178ba:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80178bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80178c2:	e012      	b.n	80178ea <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80178c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178c6:	685b      	ldr	r3, [r3, #4]
 80178c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 80178ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178cc:	88db      	ldrh	r3, [r3, #6]
 80178ce:	b29a      	uxth	r2, r3
 80178d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178d2:	889b      	ldrh	r3, [r3, #4]
 80178d4:	b29b      	uxth	r3, r3
 80178d6:	429a      	cmp	r2, r3
 80178d8:	d002      	beq.n	80178e0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80178da:	2300      	movs	r3, #0
 80178dc:	623b      	str	r3, [r7, #32]
            break;
 80178de:	e007      	b.n	80178f0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80178e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178e2:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80178e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80178ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d1e9      	bne.n	80178c4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80178f0:	6a3b      	ldr	r3, [r7, #32]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d022      	beq.n	801793c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	685b      	ldr	r3, [r3, #4]
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d106      	bne.n	801790c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80178fe:	4b15      	ldr	r3, [pc, #84]	@ (8017954 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017900:	f240 12df 	movw	r2, #479	@ 0x1df
 8017904:	4917      	ldr	r1, [pc, #92]	@ (8017964 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017906:	4815      	ldr	r0, [pc, #84]	@ (801795c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017908:	f00d fdde 	bl	80254c8 <iprintf>
          LWIP_ASSERT("sanity check",
 801790c:	68fb      	ldr	r3, [r7, #12]
 801790e:	685b      	ldr	r3, [r3, #4]
 8017910:	685b      	ldr	r3, [r3, #4]
 8017912:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017914:	429a      	cmp	r2, r3
 8017916:	d106      	bne.n	8017926 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017918:	4b0e      	ldr	r3, [pc, #56]	@ (8017954 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801791a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801791e:	4911      	ldr	r1, [pc, #68]	@ (8017964 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017920:	480e      	ldr	r0, [pc, #56]	@ (801795c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017922:	f00d fdd1 	bl	80254c8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	2b00      	cmp	r3, #0
 801792c:	d006      	beq.n	801793c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801792e:	4b09      	ldr	r3, [pc, #36]	@ (8017954 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017930:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8017934:	490c      	ldr	r1, [pc, #48]	@ (8017968 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017936:	4809      	ldr	r0, [pc, #36]	@ (801795c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017938:	f00d fdc6 	bl	80254c8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801793c:	6a3b      	ldr	r3, [r7, #32]
 801793e:	2b00      	cmp	r3, #0
 8017940:	bf14      	ite	ne
 8017942:	2301      	movne	r3, #1
 8017944:	2300      	moveq	r3, #0
 8017946:	b2db      	uxtb	r3, r3
 8017948:	e000      	b.n	801794c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801794a:	2300      	movs	r3, #0
}
 801794c:	4618      	mov	r0, r3
 801794e:	3730      	adds	r7, #48	@ 0x30
 8017950:	46bd      	mov	sp, r7
 8017952:	bd80      	pop	{r7, pc}
 8017954:	08029e98 	.word	0x08029e98
 8017958:	08029f7c 	.word	0x08029f7c
 801795c:	08029ee0 	.word	0x08029ee0
 8017960:	08029f9c 	.word	0x08029f9c
 8017964:	08029fd4 	.word	0x08029fd4
 8017968:	08029fe4 	.word	0x08029fe4

0801796c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801796c:	b580      	push	{r7, lr}
 801796e:	b08e      	sub	sp, #56	@ 0x38
 8017970:	af00      	add	r7, sp, #0
 8017972:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	685b      	ldr	r3, [r3, #4]
 8017978:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801797a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801797c:	781b      	ldrb	r3, [r3, #0]
 801797e:	f003 030f 	and.w	r3, r3, #15
 8017982:	b2db      	uxtb	r3, r3
 8017984:	009b      	lsls	r3, r3, #2
 8017986:	b2db      	uxtb	r3, r3
 8017988:	2b14      	cmp	r3, #20
 801798a:	f040 8171 	bne.w	8017c70 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801798e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017990:	88db      	ldrh	r3, [r3, #6]
 8017992:	b29b      	uxth	r3, r3
 8017994:	4618      	mov	r0, r3
 8017996:	f7f5 faa3 	bl	800cee0 <lwip_htons>
 801799a:	4603      	mov	r3, r0
 801799c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80179a0:	b29b      	uxth	r3, r3
 80179a2:	00db      	lsls	r3, r3, #3
 80179a4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80179a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179a8:	885b      	ldrh	r3, [r3, #2]
 80179aa:	b29b      	uxth	r3, r3
 80179ac:	4618      	mov	r0, r3
 80179ae:	f7f5 fa97 	bl	800cee0 <lwip_htons>
 80179b2:	4603      	mov	r3, r0
 80179b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80179b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179b8:	781b      	ldrb	r3, [r3, #0]
 80179ba:	f003 030f 	and.w	r3, r3, #15
 80179be:	b2db      	uxtb	r3, r3
 80179c0:	009b      	lsls	r3, r3, #2
 80179c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 80179c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80179ca:	b29b      	uxth	r3, r3
 80179cc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80179ce:	429a      	cmp	r2, r3
 80179d0:	f0c0 8150 	bcc.w	8017c74 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80179d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80179d8:	b29b      	uxth	r3, r3
 80179da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80179dc:	1ad3      	subs	r3, r2, r3
 80179de:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80179e0:	6878      	ldr	r0, [r7, #4]
 80179e2:	f7f6 ff63 	bl	800e8ac <pbuf_clen>
 80179e6:	4603      	mov	r3, r0
 80179e8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80179ea:	4b8c      	ldr	r3, [pc, #560]	@ (8017c1c <ip4_reass+0x2b0>)
 80179ec:	881b      	ldrh	r3, [r3, #0]
 80179ee:	461a      	mov	r2, r3
 80179f0:	8c3b      	ldrh	r3, [r7, #32]
 80179f2:	4413      	add	r3, r2
 80179f4:	2b0a      	cmp	r3, #10
 80179f6:	dd10      	ble.n	8017a1a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80179f8:	8c3b      	ldrh	r3, [r7, #32]
 80179fa:	4619      	mov	r1, r3
 80179fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80179fe:	f7ff fd81 	bl	8017504 <ip_reass_remove_oldest_datagram>
 8017a02:	4603      	mov	r3, r0
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	f000 8137 	beq.w	8017c78 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017a0a:	4b84      	ldr	r3, [pc, #528]	@ (8017c1c <ip4_reass+0x2b0>)
 8017a0c:	881b      	ldrh	r3, [r3, #0]
 8017a0e:	461a      	mov	r2, r3
 8017a10:	8c3b      	ldrh	r3, [r7, #32]
 8017a12:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017a14:	2b0a      	cmp	r3, #10
 8017a16:	f300 812f 	bgt.w	8017c78 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017a1a:	4b81      	ldr	r3, [pc, #516]	@ (8017c20 <ip4_reass+0x2b4>)
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8017a20:	e015      	b.n	8017a4e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a24:	695a      	ldr	r2, [r3, #20]
 8017a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a28:	68db      	ldr	r3, [r3, #12]
 8017a2a:	429a      	cmp	r2, r3
 8017a2c:	d10c      	bne.n	8017a48 <ip4_reass+0xdc>
 8017a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a30:	699a      	ldr	r2, [r3, #24]
 8017a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a34:	691b      	ldr	r3, [r3, #16]
 8017a36:	429a      	cmp	r2, r3
 8017a38:	d106      	bne.n	8017a48 <ip4_reass+0xdc>
 8017a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a3c:	899a      	ldrh	r2, [r3, #12]
 8017a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a40:	889b      	ldrh	r3, [r3, #4]
 8017a42:	b29b      	uxth	r3, r3
 8017a44:	429a      	cmp	r2, r3
 8017a46:	d006      	beq.n	8017a56 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a4a:	681b      	ldr	r3, [r3, #0]
 8017a4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8017a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d1e6      	bne.n	8017a22 <ip4_reass+0xb6>
 8017a54:	e000      	b.n	8017a58 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017a56:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d109      	bne.n	8017a72 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017a5e:	8c3b      	ldrh	r3, [r7, #32]
 8017a60:	4619      	mov	r1, r3
 8017a62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017a64:	f7ff fdb0 	bl	80175c8 <ip_reass_enqueue_new_datagram>
 8017a68:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d11c      	bne.n	8017aaa <ip4_reass+0x13e>
      goto nullreturn;
 8017a70:	e105      	b.n	8017c7e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a74:	88db      	ldrh	r3, [r3, #6]
 8017a76:	b29b      	uxth	r3, r3
 8017a78:	4618      	mov	r0, r3
 8017a7a:	f7f5 fa31 	bl	800cee0 <lwip_htons>
 8017a7e:	4603      	mov	r3, r0
 8017a80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d110      	bne.n	8017aaa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a8a:	89db      	ldrh	r3, [r3, #14]
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	f7f5 fa27 	bl	800cee0 <lwip_htons>
 8017a92:	4603      	mov	r3, r0
 8017a94:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	d006      	beq.n	8017aaa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a9e:	3308      	adds	r3, #8
 8017aa0:	2214      	movs	r2, #20
 8017aa2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017aa4:	4618      	mov	r0, r3
 8017aa6:	f00d ffbc 	bl	8025a22 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017aac:	88db      	ldrh	r3, [r3, #6]
 8017aae:	b29b      	uxth	r3, r3
 8017ab0:	f003 0320 	and.w	r3, r3, #32
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	bf0c      	ite	eq
 8017ab8:	2301      	moveq	r3, #1
 8017aba:	2300      	movne	r3, #0
 8017abc:	b2db      	uxtb	r3, r3
 8017abe:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017ac0:	69fb      	ldr	r3, [r7, #28]
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d00e      	beq.n	8017ae4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017ac6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8017ac8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017aca:	4413      	add	r3, r2
 8017acc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017ace:	8b7a      	ldrh	r2, [r7, #26]
 8017ad0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017ad2:	429a      	cmp	r2, r3
 8017ad4:	f0c0 80a0 	bcc.w	8017c18 <ip4_reass+0x2ac>
 8017ad8:	8b7b      	ldrh	r3, [r7, #26]
 8017ada:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8017ade:	4293      	cmp	r3, r2
 8017ae0:	f200 809a 	bhi.w	8017c18 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017ae4:	69fa      	ldr	r2, [r7, #28]
 8017ae6:	6879      	ldr	r1, [r7, #4]
 8017ae8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017aea:	f7ff fdd5 	bl	8017698 <ip_reass_chain_frag_into_datagram_and_validate>
 8017aee:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017af0:	697b      	ldr	r3, [r7, #20]
 8017af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017af6:	f000 809b 	beq.w	8017c30 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017afa:	4b48      	ldr	r3, [pc, #288]	@ (8017c1c <ip4_reass+0x2b0>)
 8017afc:	881a      	ldrh	r2, [r3, #0]
 8017afe:	8c3b      	ldrh	r3, [r7, #32]
 8017b00:	4413      	add	r3, r2
 8017b02:	b29a      	uxth	r2, r3
 8017b04:	4b45      	ldr	r3, [pc, #276]	@ (8017c1c <ip4_reass+0x2b0>)
 8017b06:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017b08:	69fb      	ldr	r3, [r7, #28]
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d00d      	beq.n	8017b2a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017b0e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8017b10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017b12:	4413      	add	r3, r2
 8017b14:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b18:	8a7a      	ldrh	r2, [r7, #18]
 8017b1a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b1e:	7f9b      	ldrb	r3, [r3, #30]
 8017b20:	f043 0301 	orr.w	r3, r3, #1
 8017b24:	b2da      	uxtb	r2, r3
 8017b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b28:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017b2a:	697b      	ldr	r3, [r7, #20]
 8017b2c:	2b01      	cmp	r3, #1
 8017b2e:	d171      	bne.n	8017c14 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b32:	8b9b      	ldrh	r3, [r3, #28]
 8017b34:	3314      	adds	r3, #20
 8017b36:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b3a:	685b      	ldr	r3, [r3, #4]
 8017b3c:	685b      	ldr	r3, [r3, #4]
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b44:	685b      	ldr	r3, [r3, #4]
 8017b46:	685b      	ldr	r3, [r3, #4]
 8017b48:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b4c:	3308      	adds	r3, #8
 8017b4e:	2214      	movs	r2, #20
 8017b50:	4619      	mov	r1, r3
 8017b52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017b54:	f00d ff65 	bl	8025a22 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017b58:	8a3b      	ldrh	r3, [r7, #16]
 8017b5a:	4618      	mov	r0, r3
 8017b5c:	f7f5 f9c0 	bl	800cee0 <lwip_htons>
 8017b60:	4603      	mov	r3, r0
 8017b62:	461a      	mov	r2, r3
 8017b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b66:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b6a:	2200      	movs	r2, #0
 8017b6c:	719a      	strb	r2, [r3, #6]
 8017b6e:	2200      	movs	r2, #0
 8017b70:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b74:	2200      	movs	r2, #0
 8017b76:	729a      	strb	r2, [r3, #10]
 8017b78:	2200      	movs	r2, #0
 8017b7a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b7e:	685b      	ldr	r3, [r3, #4]
 8017b80:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017b82:	e00d      	b.n	8017ba0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017b86:	685b      	ldr	r3, [r3, #4]
 8017b88:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8017b8a:	2114      	movs	r1, #20
 8017b8c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8017b8e:	f7f6 fd47 	bl	800e620 <pbuf_remove_header>
      pbuf_cat(p, r);
 8017b92:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8017b94:	6878      	ldr	r0, [r7, #4]
 8017b96:	f7f6 fec9 	bl	800e92c <pbuf_cat>
      r = iprh->next_pbuf;
 8017b9a:	68fb      	ldr	r3, [r7, #12]
 8017b9c:	681b      	ldr	r3, [r3, #0]
 8017b9e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8017ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d1ee      	bne.n	8017b84 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8017c20 <ip4_reass+0x2b4>)
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017bac:	429a      	cmp	r2, r3
 8017bae:	d102      	bne.n	8017bb6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017bb0:	2300      	movs	r3, #0
 8017bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017bb4:	e010      	b.n	8017bd8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8017c20 <ip4_reass+0x2b4>)
 8017bb8:	681b      	ldr	r3, [r3, #0]
 8017bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017bbc:	e007      	b.n	8017bce <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8017bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017bc0:	681b      	ldr	r3, [r3, #0]
 8017bc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017bc4:	429a      	cmp	r2, r3
 8017bc6:	d006      	beq.n	8017bd6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017bca:	681b      	ldr	r3, [r3, #0]
 8017bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d1f4      	bne.n	8017bbe <ip4_reass+0x252>
 8017bd4:	e000      	b.n	8017bd8 <ip4_reass+0x26c>
          break;
 8017bd6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017bd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017bda:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017bdc:	f7ff fd2e 	bl	801763c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017be0:	6878      	ldr	r0, [r7, #4]
 8017be2:	f7f6 fe63 	bl	800e8ac <pbuf_clen>
 8017be6:	4603      	mov	r3, r0
 8017be8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8017bea:	4b0c      	ldr	r3, [pc, #48]	@ (8017c1c <ip4_reass+0x2b0>)
 8017bec:	881b      	ldrh	r3, [r3, #0]
 8017bee:	8c3a      	ldrh	r2, [r7, #32]
 8017bf0:	429a      	cmp	r2, r3
 8017bf2:	d906      	bls.n	8017c02 <ip4_reass+0x296>
 8017bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8017c24 <ip4_reass+0x2b8>)
 8017bf6:	f240 229b 	movw	r2, #667	@ 0x29b
 8017bfa:	490b      	ldr	r1, [pc, #44]	@ (8017c28 <ip4_reass+0x2bc>)
 8017bfc:	480b      	ldr	r0, [pc, #44]	@ (8017c2c <ip4_reass+0x2c0>)
 8017bfe:	f00d fc63 	bl	80254c8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017c02:	4b06      	ldr	r3, [pc, #24]	@ (8017c1c <ip4_reass+0x2b0>)
 8017c04:	881a      	ldrh	r2, [r3, #0]
 8017c06:	8c3b      	ldrh	r3, [r7, #32]
 8017c08:	1ad3      	subs	r3, r2, r3
 8017c0a:	b29a      	uxth	r2, r3
 8017c0c:	4b03      	ldr	r3, [pc, #12]	@ (8017c1c <ip4_reass+0x2b0>)
 8017c0e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	e038      	b.n	8017c86 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017c14:	2300      	movs	r3, #0
 8017c16:	e036      	b.n	8017c86 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8017c18:	bf00      	nop
 8017c1a:	e00a      	b.n	8017c32 <ip4_reass+0x2c6>
 8017c1c:	2000ffd8 	.word	0x2000ffd8
 8017c20:	2000ffd4 	.word	0x2000ffd4
 8017c24:	08029e98 	.word	0x08029e98
 8017c28:	0802a008 	.word	0x0802a008
 8017c2c:	08029ee0 	.word	0x08029ee0
    goto nullreturn_ipr;
 8017c30:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8017c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d106      	bne.n	8017c46 <ip4_reass+0x2da>
 8017c38:	4b15      	ldr	r3, [pc, #84]	@ (8017c90 <ip4_reass+0x324>)
 8017c3a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8017c3e:	4915      	ldr	r1, [pc, #84]	@ (8017c94 <ip4_reass+0x328>)
 8017c40:	4815      	ldr	r0, [pc, #84]	@ (8017c98 <ip4_reass+0x32c>)
 8017c42:	f00d fc41 	bl	80254c8 <iprintf>
  if (ipr->p == NULL) {
 8017c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c48:	685b      	ldr	r3, [r3, #4]
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d116      	bne.n	8017c7c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8017c4e:	4b13      	ldr	r3, [pc, #76]	@ (8017c9c <ip4_reass+0x330>)
 8017c50:	681b      	ldr	r3, [r3, #0]
 8017c52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017c54:	429a      	cmp	r2, r3
 8017c56:	d006      	beq.n	8017c66 <ip4_reass+0x2fa>
 8017c58:	4b0d      	ldr	r3, [pc, #52]	@ (8017c90 <ip4_reass+0x324>)
 8017c5a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8017c5e:	4910      	ldr	r1, [pc, #64]	@ (8017ca0 <ip4_reass+0x334>)
 8017c60:	480d      	ldr	r0, [pc, #52]	@ (8017c98 <ip4_reass+0x32c>)
 8017c62:	f00d fc31 	bl	80254c8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017c66:	2100      	movs	r1, #0
 8017c68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017c6a:	f7ff fce7 	bl	801763c <ip_reass_dequeue_datagram>
 8017c6e:	e006      	b.n	8017c7e <ip4_reass+0x312>
    goto nullreturn;
 8017c70:	bf00      	nop
 8017c72:	e004      	b.n	8017c7e <ip4_reass+0x312>
    goto nullreturn;
 8017c74:	bf00      	nop
 8017c76:	e002      	b.n	8017c7e <ip4_reass+0x312>
      goto nullreturn;
 8017c78:	bf00      	nop
 8017c7a:	e000      	b.n	8017c7e <ip4_reass+0x312>
  }

nullreturn:
 8017c7c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017c7e:	6878      	ldr	r0, [r7, #4]
 8017c80:	f7f6 fd86 	bl	800e790 <pbuf_free>
  return NULL;
 8017c84:	2300      	movs	r3, #0
}
 8017c86:	4618      	mov	r0, r3
 8017c88:	3738      	adds	r7, #56	@ 0x38
 8017c8a:	46bd      	mov	sp, r7
 8017c8c:	bd80      	pop	{r7, pc}
 8017c8e:	bf00      	nop
 8017c90:	08029e98 	.word	0x08029e98
 8017c94:	0802a024 	.word	0x0802a024
 8017c98:	08029ee0 	.word	0x08029ee0
 8017c9c:	2000ffd4 	.word	0x2000ffd4
 8017ca0:	0802a030 	.word	0x0802a030

08017ca4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017ca4:	b580      	push	{r7, lr}
 8017ca6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017ca8:	2005      	movs	r0, #5
 8017caa:	f7f5 fded 	bl	800d888 <memp_malloc>
 8017cae:	4603      	mov	r3, r0
}
 8017cb0:	4618      	mov	r0, r3
 8017cb2:	bd80      	pop	{r7, pc}

08017cb4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017cb4:	b580      	push	{r7, lr}
 8017cb6:	b082      	sub	sp, #8
 8017cb8:	af00      	add	r7, sp, #0
 8017cba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d106      	bne.n	8017cd0 <ip_frag_free_pbuf_custom_ref+0x1c>
 8017cc2:	4b07      	ldr	r3, [pc, #28]	@ (8017ce0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017cc4:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8017cc8:	4906      	ldr	r1, [pc, #24]	@ (8017ce4 <ip_frag_free_pbuf_custom_ref+0x30>)
 8017cca:	4807      	ldr	r0, [pc, #28]	@ (8017ce8 <ip_frag_free_pbuf_custom_ref+0x34>)
 8017ccc:	f00d fbfc 	bl	80254c8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017cd0:	6879      	ldr	r1, [r7, #4]
 8017cd2:	2005      	movs	r0, #5
 8017cd4:	f7f5 fe4e 	bl	800d974 <memp_free>
}
 8017cd8:	bf00      	nop
 8017cda:	3708      	adds	r7, #8
 8017cdc:	46bd      	mov	sp, r7
 8017cde:	bd80      	pop	{r7, pc}
 8017ce0:	08029e98 	.word	0x08029e98
 8017ce4:	0802a050 	.word	0x0802a050
 8017ce8:	08029ee0 	.word	0x08029ee0

08017cec <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017cec:	b580      	push	{r7, lr}
 8017cee:	b084      	sub	sp, #16
 8017cf0:	af00      	add	r7, sp, #0
 8017cf2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d106      	bne.n	8017d0c <ipfrag_free_pbuf_custom+0x20>
 8017cfe:	4b11      	ldr	r3, [pc, #68]	@ (8017d44 <ipfrag_free_pbuf_custom+0x58>)
 8017d00:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8017d04:	4910      	ldr	r1, [pc, #64]	@ (8017d48 <ipfrag_free_pbuf_custom+0x5c>)
 8017d06:	4811      	ldr	r0, [pc, #68]	@ (8017d4c <ipfrag_free_pbuf_custom+0x60>)
 8017d08:	f00d fbde 	bl	80254c8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017d0c:	68fa      	ldr	r2, [r7, #12]
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	429a      	cmp	r2, r3
 8017d12:	d006      	beq.n	8017d22 <ipfrag_free_pbuf_custom+0x36>
 8017d14:	4b0b      	ldr	r3, [pc, #44]	@ (8017d44 <ipfrag_free_pbuf_custom+0x58>)
 8017d16:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8017d1a:	490d      	ldr	r1, [pc, #52]	@ (8017d50 <ipfrag_free_pbuf_custom+0x64>)
 8017d1c:	480b      	ldr	r0, [pc, #44]	@ (8017d4c <ipfrag_free_pbuf_custom+0x60>)
 8017d1e:	f00d fbd3 	bl	80254c8 <iprintf>
  if (pcr->original != NULL) {
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	695b      	ldr	r3, [r3, #20]
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d004      	beq.n	8017d34 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017d2a:	68fb      	ldr	r3, [r7, #12]
 8017d2c:	695b      	ldr	r3, [r3, #20]
 8017d2e:	4618      	mov	r0, r3
 8017d30:	f7f6 fd2e 	bl	800e790 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017d34:	68f8      	ldr	r0, [r7, #12]
 8017d36:	f7ff ffbd 	bl	8017cb4 <ip_frag_free_pbuf_custom_ref>
}
 8017d3a:	bf00      	nop
 8017d3c:	3710      	adds	r7, #16
 8017d3e:	46bd      	mov	sp, r7
 8017d40:	bd80      	pop	{r7, pc}
 8017d42:	bf00      	nop
 8017d44:	08029e98 	.word	0x08029e98
 8017d48:	0802a05c 	.word	0x0802a05c
 8017d4c:	08029ee0 	.word	0x08029ee0
 8017d50:	0802a068 	.word	0x0802a068

08017d54 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017d54:	b580      	push	{r7, lr}
 8017d56:	b094      	sub	sp, #80	@ 0x50
 8017d58:	af02      	add	r7, sp, #8
 8017d5a:	60f8      	str	r0, [r7, #12]
 8017d5c:	60b9      	str	r1, [r7, #8]
 8017d5e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017d60:	2300      	movs	r3, #0
 8017d62:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017d66:	68bb      	ldr	r3, [r7, #8]
 8017d68:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8017d6a:	3b14      	subs	r3, #20
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	da00      	bge.n	8017d72 <ip4_frag+0x1e>
 8017d70:	3307      	adds	r3, #7
 8017d72:	10db      	asrs	r3, r3, #3
 8017d74:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017d76:	2314      	movs	r3, #20
 8017d78:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	685b      	ldr	r3, [r3, #4]
 8017d7e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8017d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d82:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017d86:	781b      	ldrb	r3, [r3, #0]
 8017d88:	f003 030f 	and.w	r3, r3, #15
 8017d8c:	b2db      	uxtb	r3, r3
 8017d8e:	009b      	lsls	r3, r3, #2
 8017d90:	b2db      	uxtb	r3, r3
 8017d92:	2b14      	cmp	r3, #20
 8017d94:	d002      	beq.n	8017d9c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017d96:	f06f 0305 	mvn.w	r3, #5
 8017d9a:	e110      	b.n	8017fbe <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017d9c:	68fb      	ldr	r3, [r7, #12]
 8017d9e:	895b      	ldrh	r3, [r3, #10]
 8017da0:	2b13      	cmp	r3, #19
 8017da2:	d809      	bhi.n	8017db8 <ip4_frag+0x64>
 8017da4:	4b88      	ldr	r3, [pc, #544]	@ (8017fc8 <ip4_frag+0x274>)
 8017da6:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8017daa:	4988      	ldr	r1, [pc, #544]	@ (8017fcc <ip4_frag+0x278>)
 8017dac:	4888      	ldr	r0, [pc, #544]	@ (8017fd0 <ip4_frag+0x27c>)
 8017dae:	f00d fb8b 	bl	80254c8 <iprintf>
 8017db2:	f06f 0305 	mvn.w	r3, #5
 8017db6:	e102      	b.n	8017fbe <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017dba:	88db      	ldrh	r3, [r3, #6]
 8017dbc:	b29b      	uxth	r3, r3
 8017dbe:	4618      	mov	r0, r3
 8017dc0:	f7f5 f88e 	bl	800cee0 <lwip_htons>
 8017dc4:	4603      	mov	r3, r0
 8017dc6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8017dc8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017dca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017dce:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017dd2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017dd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8017dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017dda:	68fb      	ldr	r3, [r7, #12]
 8017ddc:	891b      	ldrh	r3, [r3, #8]
 8017dde:	3b14      	subs	r3, #20
 8017de0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8017de4:	e0e1      	b.n	8017faa <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017de6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017de8:	00db      	lsls	r3, r3, #3
 8017dea:	b29b      	uxth	r3, r3
 8017dec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017df0:	4293      	cmp	r3, r2
 8017df2:	bf28      	it	cs
 8017df4:	4613      	movcs	r3, r2
 8017df6:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017df8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017dfc:	2114      	movs	r1, #20
 8017dfe:	200e      	movs	r0, #14
 8017e00:	f7f6 f9b0 	bl	800e164 <pbuf_alloc>
 8017e04:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8017e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	f000 80d5 	beq.w	8017fb8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e10:	895b      	ldrh	r3, [r3, #10]
 8017e12:	2b13      	cmp	r3, #19
 8017e14:	d806      	bhi.n	8017e24 <ip4_frag+0xd0>
 8017e16:	4b6c      	ldr	r3, [pc, #432]	@ (8017fc8 <ip4_frag+0x274>)
 8017e18:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8017e1c:	496d      	ldr	r1, [pc, #436]	@ (8017fd4 <ip4_frag+0x280>)
 8017e1e:	486c      	ldr	r0, [pc, #432]	@ (8017fd0 <ip4_frag+0x27c>)
 8017e20:	f00d fb52 	bl	80254c8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e26:	685b      	ldr	r3, [r3, #4]
 8017e28:	2214      	movs	r2, #20
 8017e2a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8017e2c:	4618      	mov	r0, r3
 8017e2e:	f00d fdf8 	bl	8025a22 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e34:	685b      	ldr	r3, [r3, #4]
 8017e36:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8017e38:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017e3a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8017e3e:	e064      	b.n	8017f0a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017e40:	68fb      	ldr	r3, [r7, #12]
 8017e42:	895a      	ldrh	r2, [r3, #10]
 8017e44:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017e46:	1ad3      	subs	r3, r2, r3
 8017e48:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017e4a:	68fb      	ldr	r3, [r7, #12]
 8017e4c:	895b      	ldrh	r3, [r3, #10]
 8017e4e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8017e50:	429a      	cmp	r2, r3
 8017e52:	d906      	bls.n	8017e62 <ip4_frag+0x10e>
 8017e54:	4b5c      	ldr	r3, [pc, #368]	@ (8017fc8 <ip4_frag+0x274>)
 8017e56:	f240 322d 	movw	r2, #813	@ 0x32d
 8017e5a:	495f      	ldr	r1, [pc, #380]	@ (8017fd8 <ip4_frag+0x284>)
 8017e5c:	485c      	ldr	r0, [pc, #368]	@ (8017fd0 <ip4_frag+0x27c>)
 8017e5e:	f00d fb33 	bl	80254c8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017e62:	8bfa      	ldrh	r2, [r7, #30]
 8017e64:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8017e68:	4293      	cmp	r3, r2
 8017e6a:	bf28      	it	cs
 8017e6c:	4613      	movcs	r3, r2
 8017e6e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017e72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	d105      	bne.n	8017e86 <ip4_frag+0x132>
        poff = 0;
 8017e7a:	2300      	movs	r3, #0
 8017e7c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8017e7e:	68fb      	ldr	r3, [r7, #12]
 8017e80:	681b      	ldr	r3, [r3, #0]
 8017e82:	60fb      	str	r3, [r7, #12]
        continue;
 8017e84:	e041      	b.n	8017f0a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017e86:	f7ff ff0d 	bl	8017ca4 <ip_frag_alloc_pbuf_custom_ref>
 8017e8a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017e8c:	69bb      	ldr	r3, [r7, #24]
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d103      	bne.n	8017e9a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017e92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017e94:	f7f6 fc7c 	bl	800e790 <pbuf_free>
        goto memerr;
 8017e98:	e08f      	b.n	8017fba <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017e9a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017e9c:	68fb      	ldr	r3, [r7, #12]
 8017e9e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017ea0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017ea2:	4413      	add	r3, r2
 8017ea4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8017ea8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8017eac:	9201      	str	r2, [sp, #4]
 8017eae:	9300      	str	r3, [sp, #0]
 8017eb0:	4603      	mov	r3, r0
 8017eb2:	2241      	movs	r2, #65	@ 0x41
 8017eb4:	2000      	movs	r0, #0
 8017eb6:	f7f6 fa7f 	bl	800e3b8 <pbuf_alloced_custom>
 8017eba:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017ebc:	697b      	ldr	r3, [r7, #20]
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d106      	bne.n	8017ed0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017ec2:	69b8      	ldr	r0, [r7, #24]
 8017ec4:	f7ff fef6 	bl	8017cb4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017ec8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017eca:	f7f6 fc61 	bl	800e790 <pbuf_free>
        goto memerr;
 8017ece:	e074      	b.n	8017fba <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017ed0:	68f8      	ldr	r0, [r7, #12]
 8017ed2:	f7f6 fd03 	bl	800e8dc <pbuf_ref>
      pcr->original = p;
 8017ed6:	69bb      	ldr	r3, [r7, #24]
 8017ed8:	68fa      	ldr	r2, [r7, #12]
 8017eda:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017edc:	69bb      	ldr	r3, [r7, #24]
 8017ede:	4a3f      	ldr	r2, [pc, #252]	@ (8017fdc <ip4_frag+0x288>)
 8017ee0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017ee2:	6979      	ldr	r1, [r7, #20]
 8017ee4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017ee6:	f7f6 fd21 	bl	800e92c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017eea:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8017eee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017ef2:	1ad3      	subs	r3, r2, r3
 8017ef4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8017ef8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	d004      	beq.n	8017f0a <ip4_frag+0x1b6>
        poff = 0;
 8017f00:	2300      	movs	r3, #0
 8017f02:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8017f04:	68fb      	ldr	r3, [r7, #12]
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017f0a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d196      	bne.n	8017e40 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017f12:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8017f14:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017f18:	4413      	add	r3, r2
 8017f1a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017f1c:	68bb      	ldr	r3, [r7, #8]
 8017f1e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8017f20:	f1a3 0213 	sub.w	r2, r3, #19
 8017f24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017f28:	429a      	cmp	r2, r3
 8017f2a:	bfcc      	ite	gt
 8017f2c:	2301      	movgt	r3, #1
 8017f2e:	2300      	movle	r3, #0
 8017f30:	b2db      	uxtb	r3, r3
 8017f32:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017f34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017f38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017f3c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8017f3e:	6a3b      	ldr	r3, [r7, #32]
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d002      	beq.n	8017f4a <ip4_frag+0x1f6>
 8017f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d003      	beq.n	8017f52 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017f4a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017f4c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8017f50:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017f52:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017f54:	4618      	mov	r0, r3
 8017f56:	f7f4 ffc3 	bl	800cee0 <lwip_htons>
 8017f5a:	4603      	mov	r3, r0
 8017f5c:	461a      	mov	r2, r3
 8017f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f60:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017f62:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017f64:	3314      	adds	r3, #20
 8017f66:	b29b      	uxth	r3, r3
 8017f68:	4618      	mov	r0, r3
 8017f6a:	f7f4 ffb9 	bl	800cee0 <lwip_htons>
 8017f6e:	4603      	mov	r3, r0
 8017f70:	461a      	mov	r2, r3
 8017f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f74:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f78:	2200      	movs	r2, #0
 8017f7a:	729a      	strb	r2, [r3, #10]
 8017f7c:	2200      	movs	r2, #0
 8017f7e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017f80:	68bb      	ldr	r3, [r7, #8]
 8017f82:	695b      	ldr	r3, [r3, #20]
 8017f84:	687a      	ldr	r2, [r7, #4]
 8017f86:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017f88:	68b8      	ldr	r0, [r7, #8]
 8017f8a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017f8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017f8e:	f7f6 fbff 	bl	800e790 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017f92:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017f96:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017f98:	1ad3      	subs	r3, r2, r3
 8017f9a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8017f9e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8017fa2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017fa4:	4413      	add	r3, r2
 8017fa6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8017faa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	f47f af19 	bne.w	8017de6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017fb4:	2300      	movs	r3, #0
 8017fb6:	e002      	b.n	8017fbe <ip4_frag+0x26a>
      goto memerr;
 8017fb8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017fba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017fbe:	4618      	mov	r0, r3
 8017fc0:	3748      	adds	r7, #72	@ 0x48
 8017fc2:	46bd      	mov	sp, r7
 8017fc4:	bd80      	pop	{r7, pc}
 8017fc6:	bf00      	nop
 8017fc8:	08029e98 	.word	0x08029e98
 8017fcc:	0802a074 	.word	0x0802a074
 8017fd0:	08029ee0 	.word	0x08029ee0
 8017fd4:	0802a090 	.word	0x0802a090
 8017fd8:	0802a0b0 	.word	0x0802a0b0
 8017fdc:	08017ced 	.word	0x08017ced

08017fe0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b086      	sub	sp, #24
 8017fe4:	af00      	add	r7, sp, #0
 8017fe6:	6078      	str	r0, [r7, #4]
 8017fe8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017fea:	230e      	movs	r3, #14
 8017fec:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	895b      	ldrh	r3, [r3, #10]
 8017ff2:	2b0e      	cmp	r3, #14
 8017ff4:	d96e      	bls.n	80180d4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	7bdb      	ldrb	r3, [r3, #15]
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d106      	bne.n	801800c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017ffe:	683b      	ldr	r3, [r7, #0]
 8018000:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018004:	3301      	adds	r3, #1
 8018006:	b2da      	uxtb	r2, r3
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	685b      	ldr	r3, [r3, #4]
 8018010:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018012:	693b      	ldr	r3, [r7, #16]
 8018014:	7b1a      	ldrb	r2, [r3, #12]
 8018016:	7b5b      	ldrb	r3, [r3, #13]
 8018018:	021b      	lsls	r3, r3, #8
 801801a:	4313      	orrs	r3, r2
 801801c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801801e:	693b      	ldr	r3, [r7, #16]
 8018020:	781b      	ldrb	r3, [r3, #0]
 8018022:	f003 0301 	and.w	r3, r3, #1
 8018026:	2b00      	cmp	r3, #0
 8018028:	d023      	beq.n	8018072 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801802a:	693b      	ldr	r3, [r7, #16]
 801802c:	781b      	ldrb	r3, [r3, #0]
 801802e:	2b01      	cmp	r3, #1
 8018030:	d10f      	bne.n	8018052 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018032:	693b      	ldr	r3, [r7, #16]
 8018034:	785b      	ldrb	r3, [r3, #1]
 8018036:	2b00      	cmp	r3, #0
 8018038:	d11b      	bne.n	8018072 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801803a:	693b      	ldr	r3, [r7, #16]
 801803c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801803e:	2b5e      	cmp	r3, #94	@ 0x5e
 8018040:	d117      	bne.n	8018072 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	7b5b      	ldrb	r3, [r3, #13]
 8018046:	f043 0310 	orr.w	r3, r3, #16
 801804a:	b2da      	uxtb	r2, r3
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	735a      	strb	r2, [r3, #13]
 8018050:	e00f      	b.n	8018072 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018052:	693b      	ldr	r3, [r7, #16]
 8018054:	2206      	movs	r2, #6
 8018056:	4928      	ldr	r1, [pc, #160]	@ (80180f8 <ethernet_input+0x118>)
 8018058:	4618      	mov	r0, r3
 801805a:	f00d fb91 	bl	8025780 <memcmp>
 801805e:	4603      	mov	r3, r0
 8018060:	2b00      	cmp	r3, #0
 8018062:	d106      	bne.n	8018072 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	7b5b      	ldrb	r3, [r3, #13]
 8018068:	f043 0308 	orr.w	r3, r3, #8
 801806c:	b2da      	uxtb	r2, r3
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018072:	89fb      	ldrh	r3, [r7, #14]
 8018074:	2b08      	cmp	r3, #8
 8018076:	d003      	beq.n	8018080 <ethernet_input+0xa0>
 8018078:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801807c:	d014      	beq.n	80180a8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801807e:	e032      	b.n	80180e6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018080:	683b      	ldr	r3, [r7, #0]
 8018082:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018086:	f003 0308 	and.w	r3, r3, #8
 801808a:	2b00      	cmp	r3, #0
 801808c:	d024      	beq.n	80180d8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801808e:	8afb      	ldrh	r3, [r7, #22]
 8018090:	4619      	mov	r1, r3
 8018092:	6878      	ldr	r0, [r7, #4]
 8018094:	f7f6 fac4 	bl	800e620 <pbuf_remove_header>
 8018098:	4603      	mov	r3, r0
 801809a:	2b00      	cmp	r3, #0
 801809c:	d11e      	bne.n	80180dc <ethernet_input+0xfc>
        ip4_input(p, netif);
 801809e:	6839      	ldr	r1, [r7, #0]
 80180a0:	6878      	ldr	r0, [r7, #4]
 80180a2:	f7fe fde3 	bl	8016c6c <ip4_input>
      break;
 80180a6:	e013      	b.n	80180d0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80180a8:	683b      	ldr	r3, [r7, #0]
 80180aa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80180ae:	f003 0308 	and.w	r3, r3, #8
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d014      	beq.n	80180e0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80180b6:	8afb      	ldrh	r3, [r7, #22]
 80180b8:	4619      	mov	r1, r3
 80180ba:	6878      	ldr	r0, [r7, #4]
 80180bc:	f7f6 fab0 	bl	800e620 <pbuf_remove_header>
 80180c0:	4603      	mov	r3, r0
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d10e      	bne.n	80180e4 <ethernet_input+0x104>
        etharp_input(p, netif);
 80180c6:	6839      	ldr	r1, [r7, #0]
 80180c8:	6878      	ldr	r0, [r7, #4]
 80180ca:	f7fd ff83 	bl	8015fd4 <etharp_input>
      break;
 80180ce:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80180d0:	2300      	movs	r3, #0
 80180d2:	e00c      	b.n	80180ee <ethernet_input+0x10e>
    goto free_and_return;
 80180d4:	bf00      	nop
 80180d6:	e006      	b.n	80180e6 <ethernet_input+0x106>
        goto free_and_return;
 80180d8:	bf00      	nop
 80180da:	e004      	b.n	80180e6 <ethernet_input+0x106>
        goto free_and_return;
 80180dc:	bf00      	nop
 80180de:	e002      	b.n	80180e6 <ethernet_input+0x106>
        goto free_and_return;
 80180e0:	bf00      	nop
 80180e2:	e000      	b.n	80180e6 <ethernet_input+0x106>
        goto free_and_return;
 80180e4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80180e6:	6878      	ldr	r0, [r7, #4]
 80180e8:	f7f6 fb52 	bl	800e790 <pbuf_free>
  return ERR_OK;
 80180ec:	2300      	movs	r3, #0
}
 80180ee:	4618      	mov	r0, r3
 80180f0:	3718      	adds	r7, #24
 80180f2:	46bd      	mov	sp, r7
 80180f4:	bd80      	pop	{r7, pc}
 80180f6:	bf00      	nop
 80180f8:	0802a2f0 	.word	0x0802a2f0

080180fc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80180fc:	b580      	push	{r7, lr}
 80180fe:	b086      	sub	sp, #24
 8018100:	af00      	add	r7, sp, #0
 8018102:	60f8      	str	r0, [r7, #12]
 8018104:	60b9      	str	r1, [r7, #8]
 8018106:	607a      	str	r2, [r7, #4]
 8018108:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801810a:	8c3b      	ldrh	r3, [r7, #32]
 801810c:	4618      	mov	r0, r3
 801810e:	f7f4 fee7 	bl	800cee0 <lwip_htons>
 8018112:	4603      	mov	r3, r0
 8018114:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018116:	210e      	movs	r1, #14
 8018118:	68b8      	ldr	r0, [r7, #8]
 801811a:	f7f6 fa71 	bl	800e600 <pbuf_add_header>
 801811e:	4603      	mov	r3, r0
 8018120:	2b00      	cmp	r3, #0
 8018122:	d125      	bne.n	8018170 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018124:	68bb      	ldr	r3, [r7, #8]
 8018126:	685b      	ldr	r3, [r3, #4]
 8018128:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801812a:	693b      	ldr	r3, [r7, #16]
 801812c:	8afa      	ldrh	r2, [r7, #22]
 801812e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018130:	693b      	ldr	r3, [r7, #16]
 8018132:	2206      	movs	r2, #6
 8018134:	6839      	ldr	r1, [r7, #0]
 8018136:	4618      	mov	r0, r3
 8018138:	f00d fc73 	bl	8025a22 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801813c:	693b      	ldr	r3, [r7, #16]
 801813e:	3306      	adds	r3, #6
 8018140:	2206      	movs	r2, #6
 8018142:	6879      	ldr	r1, [r7, #4]
 8018144:	4618      	mov	r0, r3
 8018146:	f00d fc6c 	bl	8025a22 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801814a:	68fb      	ldr	r3, [r7, #12]
 801814c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018150:	2b06      	cmp	r3, #6
 8018152:	d006      	beq.n	8018162 <ethernet_output+0x66>
 8018154:	4b0a      	ldr	r3, [pc, #40]	@ (8018180 <ethernet_output+0x84>)
 8018156:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801815a:	490a      	ldr	r1, [pc, #40]	@ (8018184 <ethernet_output+0x88>)
 801815c:	480a      	ldr	r0, [pc, #40]	@ (8018188 <ethernet_output+0x8c>)
 801815e:	f00d f9b3 	bl	80254c8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	699b      	ldr	r3, [r3, #24]
 8018166:	68b9      	ldr	r1, [r7, #8]
 8018168:	68f8      	ldr	r0, [r7, #12]
 801816a:	4798      	blx	r3
 801816c:	4603      	mov	r3, r0
 801816e:	e002      	b.n	8018176 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018170:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018172:	f06f 0301 	mvn.w	r3, #1
}
 8018176:	4618      	mov	r0, r3
 8018178:	3718      	adds	r7, #24
 801817a:	46bd      	mov	sp, r7
 801817c:	bd80      	pop	{r7, pc}
 801817e:	bf00      	nop
 8018180:	0802a0c0 	.word	0x0802a0c0
 8018184:	0802a0f8 	.word	0x0802a0f8
 8018188:	0802a12c 	.word	0x0802a12c

0801818c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801818c:	b580      	push	{r7, lr}
 801818e:	b086      	sub	sp, #24
 8018190:	af00      	add	r7, sp, #0
 8018192:	6078      	str	r0, [r7, #4]
 8018194:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8018196:	683b      	ldr	r3, [r7, #0]
 8018198:	60bb      	str	r3, [r7, #8]
 801819a:	2304      	movs	r3, #4
 801819c:	60fb      	str	r3, [r7, #12]
 801819e:	2300      	movs	r3, #0
 80181a0:	613b      	str	r3, [r7, #16]
 80181a2:	2300      	movs	r3, #0
 80181a4:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80181a6:	f107 0308 	add.w	r3, r7, #8
 80181aa:	2100      	movs	r1, #0
 80181ac:	4618      	mov	r0, r3
 80181ae:	f7ee fa4a 	bl	8006646 <osMessageCreate>
 80181b2:	4602      	mov	r2, r0
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	681b      	ldr	r3, [r3, #0]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d102      	bne.n	80181c6 <sys_mbox_new+0x3a>
    return ERR_MEM;
 80181c0:	f04f 33ff 	mov.w	r3, #4294967295
 80181c4:	e000      	b.n	80181c8 <sys_mbox_new+0x3c>

  return ERR_OK;
 80181c6:	2300      	movs	r3, #0
}
 80181c8:	4618      	mov	r0, r3
 80181ca:	3718      	adds	r7, #24
 80181cc:	46bd      	mov	sp, r7
 80181ce:	bd80      	pop	{r7, pc}

080181d0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80181d0:	b580      	push	{r7, lr}
 80181d2:	b082      	sub	sp, #8
 80181d4:	af00      	add	r7, sp, #0
 80181d6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	4618      	mov	r0, r3
 80181de:	f7ee fb0f 	bl	8006800 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	4618      	mov	r0, r3
 80181e8:	f7ee fb20 	bl	800682c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80181ec:	bf00      	nop
 80181ee:	3708      	adds	r7, #8
 80181f0:	46bd      	mov	sp, r7
 80181f2:	bd80      	pop	{r7, pc}

080181f4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80181f4:	b580      	push	{r7, lr}
 80181f6:	b084      	sub	sp, #16
 80181f8:	af00      	add	r7, sp, #0
 80181fa:	6078      	str	r0, [r7, #4]
 80181fc:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	6839      	ldr	r1, [r7, #0]
 8018204:	2200      	movs	r2, #0
 8018206:	4618      	mov	r0, r3
 8018208:	f7ee fa46 	bl	8006698 <osMessagePut>
 801820c:	4603      	mov	r3, r0
 801820e:	2b00      	cmp	r3, #0
 8018210:	d102      	bne.n	8018218 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8018212:	2300      	movs	r3, #0
 8018214:	73fb      	strb	r3, [r7, #15]
 8018216:	e001      	b.n	801821c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018218:	23ff      	movs	r3, #255	@ 0xff
 801821a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801821c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018220:	4618      	mov	r0, r3
 8018222:	3710      	adds	r7, #16
 8018224:	46bd      	mov	sp, r7
 8018226:	bd80      	pop	{r7, pc}

08018228 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018228:	b580      	push	{r7, lr}
 801822a:	b08c      	sub	sp, #48	@ 0x30
 801822c:	af00      	add	r7, sp, #0
 801822e:	61f8      	str	r0, [r7, #28]
 8018230:	61b9      	str	r1, [r7, #24]
 8018232:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8018234:	f7ee f825 	bl	8006282 <osKernelSysTick>
 8018238:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801823a:	697b      	ldr	r3, [r7, #20]
 801823c:	2b00      	cmp	r3, #0
 801823e:	d017      	beq.n	8018270 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8018240:	69fb      	ldr	r3, [r7, #28]
 8018242:	6819      	ldr	r1, [r3, #0]
 8018244:	f107 0320 	add.w	r3, r7, #32
 8018248:	697a      	ldr	r2, [r7, #20]
 801824a:	4618      	mov	r0, r3
 801824c:	f7ee fa64 	bl	8006718 <osMessageGet>

    if(event.status == osEventMessage)
 8018250:	6a3b      	ldr	r3, [r7, #32]
 8018252:	2b10      	cmp	r3, #16
 8018254:	d109      	bne.n	801826a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8018256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018258:	461a      	mov	r2, r3
 801825a:	69bb      	ldr	r3, [r7, #24]
 801825c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801825e:	f7ee f810 	bl	8006282 <osKernelSysTick>
 8018262:	4602      	mov	r2, r0
 8018264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018266:	1ad3      	subs	r3, r2, r3
 8018268:	e019      	b.n	801829e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801826a:	f04f 33ff 	mov.w	r3, #4294967295
 801826e:	e016      	b.n	801829e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8018270:	69fb      	ldr	r3, [r7, #28]
 8018272:	6819      	ldr	r1, [r3, #0]
 8018274:	463b      	mov	r3, r7
 8018276:	f04f 32ff 	mov.w	r2, #4294967295
 801827a:	4618      	mov	r0, r3
 801827c:	f7ee fa4c 	bl	8006718 <osMessageGet>
 8018280:	f107 0320 	add.w	r3, r7, #32
 8018284:	463a      	mov	r2, r7
 8018286:	ca07      	ldmia	r2, {r0, r1, r2}
 8018288:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801828c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801828e:	461a      	mov	r2, r3
 8018290:	69bb      	ldr	r3, [r7, #24]
 8018292:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8018294:	f7ed fff5 	bl	8006282 <osKernelSysTick>
 8018298:	4602      	mov	r2, r0
 801829a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801829c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801829e:	4618      	mov	r0, r3
 80182a0:	3730      	adds	r7, #48	@ 0x30
 80182a2:	46bd      	mov	sp, r7
 80182a4:	bd80      	pop	{r7, pc}

080182a6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80182a6:	b580      	push	{r7, lr}
 80182a8:	b086      	sub	sp, #24
 80182aa:	af00      	add	r7, sp, #0
 80182ac:	6078      	str	r0, [r7, #4]
 80182ae:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	6819      	ldr	r1, [r3, #0]
 80182b4:	f107 030c 	add.w	r3, r7, #12
 80182b8:	2200      	movs	r2, #0
 80182ba:	4618      	mov	r0, r3
 80182bc:	f7ee fa2c 	bl	8006718 <osMessageGet>

  if(event.status == osEventMessage)
 80182c0:	68fb      	ldr	r3, [r7, #12]
 80182c2:	2b10      	cmp	r3, #16
 80182c4:	d105      	bne.n	80182d2 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80182c6:	693b      	ldr	r3, [r7, #16]
 80182c8:	461a      	mov	r2, r3
 80182ca:	683b      	ldr	r3, [r7, #0]
 80182cc:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 80182ce:	2300      	movs	r3, #0
 80182d0:	e001      	b.n	80182d6 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80182d2:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80182d6:	4618      	mov	r0, r3
 80182d8:	3718      	adds	r7, #24
 80182da:	46bd      	mov	sp, r7
 80182dc:	bd80      	pop	{r7, pc}

080182de <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80182de:	b480      	push	{r7}
 80182e0:	b083      	sub	sp, #12
 80182e2:	af00      	add	r7, sp, #0
 80182e4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	681b      	ldr	r3, [r3, #0]
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d101      	bne.n	80182f2 <sys_mbox_valid+0x14>
    return 0;
 80182ee:	2300      	movs	r3, #0
 80182f0:	e000      	b.n	80182f4 <sys_mbox_valid+0x16>
  else
    return 1;
 80182f2:	2301      	movs	r3, #1
}
 80182f4:	4618      	mov	r0, r3
 80182f6:	370c      	adds	r7, #12
 80182f8:	46bd      	mov	sp, r7
 80182fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182fe:	4770      	bx	lr

08018300 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018300:	b480      	push	{r7}
 8018302:	b083      	sub	sp, #12
 8018304:	af00      	add	r7, sp, #0
 8018306:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	2200      	movs	r2, #0
 801830c:	601a      	str	r2, [r3, #0]
}
 801830e:	bf00      	nop
 8018310:	370c      	adds	r7, #12
 8018312:	46bd      	mov	sp, r7
 8018314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018318:	4770      	bx	lr

0801831a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801831a:	b580      	push	{r7, lr}
 801831c:	b084      	sub	sp, #16
 801831e:	af00      	add	r7, sp, #0
 8018320:	6078      	str	r0, [r7, #4]
 8018322:	460b      	mov	r3, r1
 8018324:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8018326:	2300      	movs	r3, #0
 8018328:	60bb      	str	r3, [r7, #8]
 801832a:	2300      	movs	r3, #0
 801832c:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801832e:	f107 0308 	add.w	r3, r7, #8
 8018332:	2101      	movs	r1, #1
 8018334:	4618      	mov	r0, r3
 8018336:	f7ee f8bd 	bl	80064b4 <osSemaphoreCreate>
 801833a:	4602      	mov	r2, r0
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	681b      	ldr	r3, [r3, #0]
 8018344:	2b00      	cmp	r3, #0
 8018346:	d102      	bne.n	801834e <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018348:	f04f 33ff 	mov.w	r3, #4294967295
 801834c:	e009      	b.n	8018362 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801834e:	78fb      	ldrb	r3, [r7, #3]
 8018350:	2b00      	cmp	r3, #0
 8018352:	d105      	bne.n	8018360 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	681b      	ldr	r3, [r3, #0]
 8018358:	2100      	movs	r1, #0
 801835a:	4618      	mov	r0, r3
 801835c:	f7ee f8dc 	bl	8006518 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018360:	2300      	movs	r3, #0
}
 8018362:	4618      	mov	r0, r3
 8018364:	3710      	adds	r7, #16
 8018366:	46bd      	mov	sp, r7
 8018368:	bd80      	pop	{r7, pc}

0801836a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801836a:	b580      	push	{r7, lr}
 801836c:	b084      	sub	sp, #16
 801836e:	af00      	add	r7, sp, #0
 8018370:	6078      	str	r0, [r7, #4]
 8018372:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8018374:	f7ed ff85 	bl	8006282 <osKernelSysTick>
 8018378:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801837a:	683b      	ldr	r3, [r7, #0]
 801837c:	2b00      	cmp	r3, #0
 801837e:	d011      	beq.n	80183a4 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	6839      	ldr	r1, [r7, #0]
 8018386:	4618      	mov	r0, r3
 8018388:	f7ee f8c6 	bl	8006518 <osSemaphoreWait>
 801838c:	4603      	mov	r3, r0
 801838e:	2b00      	cmp	r3, #0
 8018390:	d105      	bne.n	801839e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8018392:	f7ed ff76 	bl	8006282 <osKernelSysTick>
 8018396:	4602      	mov	r2, r0
 8018398:	68fb      	ldr	r3, [r7, #12]
 801839a:	1ad3      	subs	r3, r2, r3
 801839c:	e012      	b.n	80183c4 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801839e:	f04f 33ff 	mov.w	r3, #4294967295
 80183a2:	e00f      	b.n	80183c4 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80183a4:	bf00      	nop
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	f04f 31ff 	mov.w	r1, #4294967295
 80183ae:	4618      	mov	r0, r3
 80183b0:	f7ee f8b2 	bl	8006518 <osSemaphoreWait>
 80183b4:	4603      	mov	r3, r0
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d1f5      	bne.n	80183a6 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80183ba:	f7ed ff62 	bl	8006282 <osKernelSysTick>
 80183be:	4602      	mov	r2, r0
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80183c4:	4618      	mov	r0, r3
 80183c6:	3710      	adds	r7, #16
 80183c8:	46bd      	mov	sp, r7
 80183ca:	bd80      	pop	{r7, pc}

080183cc <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80183cc:	b580      	push	{r7, lr}
 80183ce:	b082      	sub	sp, #8
 80183d0:	af00      	add	r7, sp, #0
 80183d2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	4618      	mov	r0, r3
 80183da:	f7ee f8eb 	bl	80065b4 <osSemaphoreRelease>
}
 80183de:	bf00      	nop
 80183e0:	3708      	adds	r7, #8
 80183e2:	46bd      	mov	sp, r7
 80183e4:	bd80      	pop	{r7, pc}

080183e6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80183e6:	b580      	push	{r7, lr}
 80183e8:	b082      	sub	sp, #8
 80183ea:	af00      	add	r7, sp, #0
 80183ec:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	4618      	mov	r0, r3
 80183f4:	f7ee f914 	bl	8006620 <osSemaphoreDelete>
}
 80183f8:	bf00      	nop
 80183fa:	3708      	adds	r7, #8
 80183fc:	46bd      	mov	sp, r7
 80183fe:	bd80      	pop	{r7, pc}

08018400 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018400:	b480      	push	{r7}
 8018402:	b083      	sub	sp, #12
 8018404:	af00      	add	r7, sp, #0
 8018406:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	2b00      	cmp	r3, #0
 801840e:	d101      	bne.n	8018414 <sys_sem_valid+0x14>
    return 0;
 8018410:	2300      	movs	r3, #0
 8018412:	e000      	b.n	8018416 <sys_sem_valid+0x16>
  else
    return 1;
 8018414:	2301      	movs	r3, #1
}
 8018416:	4618      	mov	r0, r3
 8018418:	370c      	adds	r7, #12
 801841a:	46bd      	mov	sp, r7
 801841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018420:	4770      	bx	lr

08018422 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8018422:	b480      	push	{r7}
 8018424:	b083      	sub	sp, #12
 8018426:	af00      	add	r7, sp, #0
 8018428:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	2200      	movs	r2, #0
 801842e:	601a      	str	r2, [r3, #0]
}
 8018430:	bf00      	nop
 8018432:	370c      	adds	r7, #12
 8018434:	46bd      	mov	sp, r7
 8018436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801843a:	4770      	bx	lr

0801843c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801843c:	b580      	push	{r7, lr}
 801843e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8018440:	4803      	ldr	r0, [pc, #12]	@ (8018450 <sys_init+0x14>)
 8018442:	f7ed ff9a 	bl	800637a <osMutexCreate>
 8018446:	4603      	mov	r3, r0
 8018448:	4a02      	ldr	r2, [pc, #8]	@ (8018454 <sys_init+0x18>)
 801844a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801844c:	bf00      	nop
 801844e:	bd80      	pop	{r7, pc}
 8018450:	0802a300 	.word	0x0802a300
 8018454:	2000ffdc 	.word	0x2000ffdc

08018458 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018458:	b580      	push	{r7, lr}
 801845a:	b084      	sub	sp, #16
 801845c:	af00      	add	r7, sp, #0
 801845e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8018460:	2300      	movs	r3, #0
 8018462:	60bb      	str	r3, [r7, #8]
 8018464:	2300      	movs	r3, #0
 8018466:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018468:	f107 0308 	add.w	r3, r7, #8
 801846c:	4618      	mov	r0, r3
 801846e:	f7ed ff84 	bl	800637a <osMutexCreate>
 8018472:	4602      	mov	r2, r0
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	681b      	ldr	r3, [r3, #0]
 801847c:	2b00      	cmp	r3, #0
 801847e:	d102      	bne.n	8018486 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018480:	f04f 33ff 	mov.w	r3, #4294967295
 8018484:	e000      	b.n	8018488 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018486:	2300      	movs	r3, #0
}
 8018488:	4618      	mov	r0, r3
 801848a:	3710      	adds	r7, #16
 801848c:	46bd      	mov	sp, r7
 801848e:	bd80      	pop	{r7, pc}

08018490 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018490:	b580      	push	{r7, lr}
 8018492:	b082      	sub	sp, #8
 8018494:	af00      	add	r7, sp, #0
 8018496:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	f04f 31ff 	mov.w	r1, #4294967295
 80184a0:	4618      	mov	r0, r3
 80184a2:	f7ed ff83 	bl	80063ac <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80184a6:	bf00      	nop
 80184a8:	3708      	adds	r7, #8
 80184aa:	46bd      	mov	sp, r7
 80184ac:	bd80      	pop	{r7, pc}

080184ae <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80184ae:	b580      	push	{r7, lr}
 80184b0:	b082      	sub	sp, #8
 80184b2:	af00      	add	r7, sp, #0
 80184b4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	4618      	mov	r0, r3
 80184bc:	f7ed ffc4 	bl	8006448 <osMutexRelease>
}
 80184c0:	bf00      	nop
 80184c2:	3708      	adds	r7, #8
 80184c4:	46bd      	mov	sp, r7
 80184c6:	bd80      	pop	{r7, pc}

080184c8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80184c8:	b580      	push	{r7, lr}
 80184ca:	b08c      	sub	sp, #48	@ 0x30
 80184cc:	af00      	add	r7, sp, #0
 80184ce:	60f8      	str	r0, [r7, #12]
 80184d0:	60b9      	str	r1, [r7, #8]
 80184d2:	607a      	str	r2, [r7, #4]
 80184d4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80184d6:	f107 0314 	add.w	r3, r7, #20
 80184da:	2200      	movs	r2, #0
 80184dc:	601a      	str	r2, [r3, #0]
 80184de:	605a      	str	r2, [r3, #4]
 80184e0:	609a      	str	r2, [r3, #8]
 80184e2:	60da      	str	r2, [r3, #12]
 80184e4:	611a      	str	r2, [r3, #16]
 80184e6:	615a      	str	r2, [r3, #20]
 80184e8:	619a      	str	r2, [r3, #24]
 80184ea:	68fb      	ldr	r3, [r7, #12]
 80184ec:	617b      	str	r3, [r7, #20]
 80184ee:	68bb      	ldr	r3, [r7, #8]
 80184f0:	61bb      	str	r3, [r7, #24]
 80184f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184f4:	b21b      	sxth	r3, r3
 80184f6:	83bb      	strh	r3, [r7, #28]
 80184f8:	683b      	ldr	r3, [r7, #0]
 80184fa:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 80184fc:	f107 0314 	add.w	r3, r7, #20
 8018500:	6879      	ldr	r1, [r7, #4]
 8018502:	4618      	mov	r0, r3
 8018504:	f7ed fecd 	bl	80062a2 <osThreadCreate>
 8018508:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801850a:	4618      	mov	r0, r3
 801850c:	3730      	adds	r7, #48	@ 0x30
 801850e:	46bd      	mov	sp, r7
 8018510:	bd80      	pop	{r7, pc}
	...

08018514 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018514:	b580      	push	{r7, lr}
 8018516:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018518:	4b04      	ldr	r3, [pc, #16]	@ (801852c <sys_arch_protect+0x18>)
 801851a:	681b      	ldr	r3, [r3, #0]
 801851c:	f04f 31ff 	mov.w	r1, #4294967295
 8018520:	4618      	mov	r0, r3
 8018522:	f7ed ff43 	bl	80063ac <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018526:	2301      	movs	r3, #1
}
 8018528:	4618      	mov	r0, r3
 801852a:	bd80      	pop	{r7, pc}
 801852c:	2000ffdc 	.word	0x2000ffdc

08018530 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018530:	b580      	push	{r7, lr}
 8018532:	b082      	sub	sp, #8
 8018534:	af00      	add	r7, sp, #0
 8018536:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018538:	4b04      	ldr	r3, [pc, #16]	@ (801854c <sys_arch_unprotect+0x1c>)
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	4618      	mov	r0, r3
 801853e:	f7ed ff83 	bl	8006448 <osMutexRelease>
}
 8018542:	bf00      	nop
 8018544:	3708      	adds	r7, #8
 8018546:	46bd      	mov	sp, r7
 8018548:	bd80      	pop	{r7, pc}
 801854a:	bf00      	nop
 801854c:	2000ffdc 	.word	0x2000ffdc

08018550 <rcl_get_zero_initialized_publisher>:
 8018550:	4b01      	ldr	r3, [pc, #4]	@ (8018558 <rcl_get_zero_initialized_publisher+0x8>)
 8018552:	6818      	ldr	r0, [r3, #0]
 8018554:	4770      	bx	lr
 8018556:	bf00      	nop
 8018558:	0802a308 	.word	0x0802a308

0801855c <rcl_publisher_init>:
 801855c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018560:	b088      	sub	sp, #32
 8018562:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8018564:	2e00      	cmp	r6, #0
 8018566:	d06b      	beq.n	8018640 <rcl_publisher_init+0xe4>
 8018568:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 801856c:	4605      	mov	r5, r0
 801856e:	460f      	mov	r7, r1
 8018570:	4690      	mov	r8, r2
 8018572:	4650      	mov	r0, sl
 8018574:	4699      	mov	r9, r3
 8018576:	f001 f83d 	bl	80195f4 <rcutils_allocator_is_valid>
 801857a:	f080 0401 	eor.w	r4, r0, #1
 801857e:	b2e4      	uxtb	r4, r4
 8018580:	2c00      	cmp	r4, #0
 8018582:	d15d      	bne.n	8018640 <rcl_publisher_init+0xe4>
 8018584:	2d00      	cmp	r5, #0
 8018586:	d05b      	beq.n	8018640 <rcl_publisher_init+0xe4>
 8018588:	682b      	ldr	r3, [r5, #0]
 801858a:	b123      	cbz	r3, 8018596 <rcl_publisher_init+0x3a>
 801858c:	2464      	movs	r4, #100	@ 0x64
 801858e:	4620      	mov	r0, r4
 8018590:	b008      	add	sp, #32
 8018592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018596:	4638      	mov	r0, r7
 8018598:	f006 fa94 	bl	801eac4 <rcl_node_is_valid>
 801859c:	2800      	cmp	r0, #0
 801859e:	d054      	beq.n	801864a <rcl_publisher_init+0xee>
 80185a0:	f1b8 0f00 	cmp.w	r8, #0
 80185a4:	d04c      	beq.n	8018640 <rcl_publisher_init+0xe4>
 80185a6:	fab9 f389 	clz	r3, r9
 80185aa:	095b      	lsrs	r3, r3, #5
 80185ac:	f1b9 0f00 	cmp.w	r9, #0
 80185b0:	d046      	beq.n	8018640 <rcl_publisher_init+0xe4>
 80185b2:	aa07      	add	r2, sp, #28
 80185b4:	9307      	str	r3, [sp, #28]
 80185b6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80185ba:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 80185be:	9205      	str	r2, [sp, #20]
 80185c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80185c4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80185c8:	4649      	mov	r1, r9
 80185ca:	4638      	mov	r0, r7
 80185cc:	e89a 000c 	ldmia.w	sl, {r2, r3}
 80185d0:	f006 fad0 	bl	801eb74 <rcl_node_resolve_name>
 80185d4:	2800      	cmp	r0, #0
 80185d6:	d14f      	bne.n	8018678 <rcl_publisher_init+0x11c>
 80185d8:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 80185da:	20c8      	movs	r0, #200	@ 0xc8
 80185dc:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80185de:	4798      	blx	r3
 80185e0:	6028      	str	r0, [r5, #0]
 80185e2:	2800      	cmp	r0, #0
 80185e4:	d050      	beq.n	8018688 <rcl_publisher_init+0x12c>
 80185e6:	4638      	mov	r0, r7
 80185e8:	f006 fa8e 	bl	801eb08 <rcl_node_get_rmw_handle>
 80185ec:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 80185f0:	4641      	mov	r1, r8
 80185f2:	9a07      	ldr	r2, [sp, #28]
 80185f4:	9300      	str	r3, [sp, #0]
 80185f6:	4633      	mov	r3, r6
 80185f8:	682c      	ldr	r4, [r5, #0]
 80185fa:	f001 f907 	bl	801980c <rmw_create_publisher>
 80185fe:	682b      	ldr	r3, [r5, #0]
 8018600:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 8018604:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8018608:	b370      	cbz	r0, 8018668 <rcl_publisher_init+0x10c>
 801860a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 801860e:	f001 f9e1 	bl	80199d4 <rmw_publisher_get_actual_qos>
 8018612:	682b      	ldr	r3, [r5, #0]
 8018614:	4604      	mov	r4, r0
 8018616:	b9d0      	cbnz	r0, 801864e <rcl_publisher_init+0xf2>
 8018618:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 801861c:	4631      	mov	r1, r6
 801861e:	4618      	mov	r0, r3
 8018620:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8018624:	2270      	movs	r2, #112	@ 0x70
 8018626:	f00d f9fc 	bl	8025a22 <memcpy>
 801862a:	683a      	ldr	r2, [r7, #0]
 801862c:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 8018630:	9807      	ldr	r0, [sp, #28]
 8018632:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8018634:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8018636:	4798      	blx	r3
 8018638:	4620      	mov	r0, r4
 801863a:	b008      	add	sp, #32
 801863c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018640:	240b      	movs	r4, #11
 8018642:	4620      	mov	r0, r4
 8018644:	b008      	add	sp, #32
 8018646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801864a:	24c8      	movs	r4, #200	@ 0xc8
 801864c:	e79f      	b.n	801858e <rcl_publisher_init+0x32>
 801864e:	b1cb      	cbz	r3, 8018684 <rcl_publisher_init+0x128>
 8018650:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8018654:	b142      	cbz	r2, 8018668 <rcl_publisher_init+0x10c>
 8018656:	4638      	mov	r0, r7
 8018658:	f006 fa56 	bl	801eb08 <rcl_node_get_rmw_handle>
 801865c:	682b      	ldr	r3, [r5, #0]
 801865e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8018662:	f001 f9cb 	bl	80199fc <rmw_destroy_publisher>
 8018666:	682b      	ldr	r3, [r5, #0]
 8018668:	4618      	mov	r0, r3
 801866a:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 801866c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801866e:	2401      	movs	r4, #1
 8018670:	4790      	blx	r2
 8018672:	2300      	movs	r3, #0
 8018674:	602b      	str	r3, [r5, #0]
 8018676:	e7db      	b.n	8018630 <rcl_publisher_init+0xd4>
 8018678:	2867      	cmp	r0, #103	@ 0x67
 801867a:	d007      	beq.n	801868c <rcl_publisher_init+0x130>
 801867c:	2869      	cmp	r0, #105	@ 0x69
 801867e:	d005      	beq.n	801868c <rcl_publisher_init+0x130>
 8018680:	280a      	cmp	r0, #10
 8018682:	d001      	beq.n	8018688 <rcl_publisher_init+0x12c>
 8018684:	2401      	movs	r4, #1
 8018686:	e7d3      	b.n	8018630 <rcl_publisher_init+0xd4>
 8018688:	240a      	movs	r4, #10
 801868a:	e7d1      	b.n	8018630 <rcl_publisher_init+0xd4>
 801868c:	2467      	movs	r4, #103	@ 0x67
 801868e:	e7cf      	b.n	8018630 <rcl_publisher_init+0xd4>

08018690 <rcl_publisher_get_default_options>:
 8018690:	b570      	push	{r4, r5, r6, lr}
 8018692:	4d14      	ldr	r5, [pc, #80]	@ (80186e4 <rcl_publisher_get_default_options+0x54>)
 8018694:	b088      	sub	sp, #32
 8018696:	4604      	mov	r4, r0
 8018698:	2250      	movs	r2, #80	@ 0x50
 801869a:	4913      	ldr	r1, [pc, #76]	@ (80186e8 <rcl_publisher_get_default_options+0x58>)
 801869c:	4628      	mov	r0, r5
 801869e:	f00d f9c0 	bl	8025a22 <memcpy>
 80186a2:	a802      	add	r0, sp, #8
 80186a4:	f000 ff98 	bl	80195d8 <rcutils_get_default_allocator>
 80186a8:	f10d 0c08 	add.w	ip, sp, #8
 80186ac:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80186b0:	466e      	mov	r6, sp
 80186b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80186b6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80186ba:	f8dc 3000 	ldr.w	r3, [ip]
 80186be:	4630      	mov	r0, r6
 80186c0:	f8ce 3000 	str.w	r3, [lr]
 80186c4:	f001 f824 	bl	8019710 <rmw_get_default_publisher_options>
 80186c8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80186cc:	2270      	movs	r2, #112	@ 0x70
 80186ce:	e896 0003 	ldmia.w	r6, {r0, r1}
 80186d2:	e883 0003 	stmia.w	r3, {r0, r1}
 80186d6:	4629      	mov	r1, r5
 80186d8:	4620      	mov	r0, r4
 80186da:	f00d f9a2 	bl	8025a22 <memcpy>
 80186de:	4620      	mov	r0, r4
 80186e0:	b008      	add	sp, #32
 80186e2:	bd70      	pop	{r4, r5, r6, pc}
 80186e4:	2000ffe0 	.word	0x2000ffe0
 80186e8:	0802a310 	.word	0x0802a310

080186ec <rcl_publish>:
 80186ec:	b1f8      	cbz	r0, 801872e <rcl_publish+0x42>
 80186ee:	6803      	ldr	r3, [r0, #0]
 80186f0:	b570      	push	{r4, r5, r6, lr}
 80186f2:	4604      	mov	r4, r0
 80186f4:	b1b3      	cbz	r3, 8018724 <rcl_publish+0x38>
 80186f6:	4616      	mov	r6, r2
 80186f8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80186fc:	b192      	cbz	r2, 8018724 <rcl_publish+0x38>
 80186fe:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8018702:	460d      	mov	r5, r1
 8018704:	f005 fe14 	bl	801e330 <rcl_context_is_valid>
 8018708:	b160      	cbz	r0, 8018724 <rcl_publish+0x38>
 801870a:	6823      	ldr	r3, [r4, #0]
 801870c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8018710:	b140      	cbz	r0, 8018724 <rcl_publish+0x38>
 8018712:	b155      	cbz	r5, 801872a <rcl_publish+0x3e>
 8018714:	4632      	mov	r2, r6
 8018716:	4629      	mov	r1, r5
 8018718:	f001 f818 	bl	801974c <rmw_publish>
 801871c:	3800      	subs	r0, #0
 801871e:	bf18      	it	ne
 8018720:	2001      	movne	r0, #1
 8018722:	bd70      	pop	{r4, r5, r6, pc}
 8018724:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8018728:	bd70      	pop	{r4, r5, r6, pc}
 801872a:	200b      	movs	r0, #11
 801872c:	bd70      	pop	{r4, r5, r6, pc}
 801872e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8018732:	4770      	bx	lr

08018734 <rcl_publisher_is_valid>:
 8018734:	b1a0      	cbz	r0, 8018760 <rcl_publisher_is_valid+0x2c>
 8018736:	6803      	ldr	r3, [r0, #0]
 8018738:	b510      	push	{r4, lr}
 801873a:	4604      	mov	r4, r0
 801873c:	b173      	cbz	r3, 801875c <rcl_publisher_is_valid+0x28>
 801873e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8018742:	b15a      	cbz	r2, 801875c <rcl_publisher_is_valid+0x28>
 8018744:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8018748:	f005 fdf2 	bl	801e330 <rcl_context_is_valid>
 801874c:	b130      	cbz	r0, 801875c <rcl_publisher_is_valid+0x28>
 801874e:	6823      	ldr	r3, [r4, #0]
 8018750:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8018754:	3800      	subs	r0, #0
 8018756:	bf18      	it	ne
 8018758:	2001      	movne	r0, #1
 801875a:	bd10      	pop	{r4, pc}
 801875c:	2000      	movs	r0, #0
 801875e:	bd10      	pop	{r4, pc}
 8018760:	2000      	movs	r0, #0
 8018762:	4770      	bx	lr

08018764 <rcl_publisher_is_valid_except_context>:
 8018764:	b130      	cbz	r0, 8018774 <rcl_publisher_is_valid_except_context+0x10>
 8018766:	6800      	ldr	r0, [r0, #0]
 8018768:	b120      	cbz	r0, 8018774 <rcl_publisher_is_valid_except_context+0x10>
 801876a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 801876e:	3800      	subs	r0, #0
 8018770:	bf18      	it	ne
 8018772:	2001      	movne	r0, #1
 8018774:	4770      	bx	lr
 8018776:	bf00      	nop

08018778 <_rclc_check_for_new_data>:
 8018778:	2800      	cmp	r0, #0
 801877a:	d046      	beq.n	801880a <_rclc_check_for_new_data+0x92>
 801877c:	4603      	mov	r3, r0
 801877e:	b530      	push	{r4, r5, lr}
 8018780:	7802      	ldrb	r2, [r0, #0]
 8018782:	b085      	sub	sp, #20
 8018784:	2a0a      	cmp	r2, #10
 8018786:	d842      	bhi.n	801880e <_rclc_check_for_new_data+0x96>
 8018788:	e8df f002 	tbb	[pc, r2]
 801878c:	14181212 	.word	0x14181212
 8018790:	06060614 	.word	0x06060614
 8018794:	2e1a      	.short	0x2e1a
 8018796:	16          	.byte	0x16
 8018797:	00          	.byte	0x00
 8018798:	6a0a      	ldr	r2, [r1, #32]
 801879a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801879c:	2000      	movs	r0, #0
 801879e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80187a2:	1a12      	subs	r2, r2, r0
 80187a4:	bf18      	it	ne
 80187a6:	2201      	movne	r2, #1
 80187a8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80187ac:	b005      	add	sp, #20
 80187ae:	bd30      	pop	{r4, r5, pc}
 80187b0:	680a      	ldr	r2, [r1, #0]
 80187b2:	e7f2      	b.n	801879a <_rclc_check_for_new_data+0x22>
 80187b4:	698a      	ldr	r2, [r1, #24]
 80187b6:	e7f0      	b.n	801879a <_rclc_check_for_new_data+0x22>
 80187b8:	688a      	ldr	r2, [r1, #8]
 80187ba:	e7ee      	b.n	801879a <_rclc_check_for_new_data+0x22>
 80187bc:	690a      	ldr	r2, [r1, #16]
 80187be:	e7ec      	b.n	801879a <_rclc_check_for_new_data+0x22>
 80187c0:	685c      	ldr	r4, [r3, #4]
 80187c2:	4608      	mov	r0, r1
 80187c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80187c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80187cc:	f104 0542 	add.w	r5, r4, #66	@ 0x42
 80187d0:	f104 0110 	add.w	r1, r4, #16
 80187d4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80187d8:	9500      	str	r5, [sp, #0]
 80187da:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 80187de:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 80187e2:	f007 fd75 	bl	80202d0 <rcl_action_client_wait_set_get_entities_ready>
 80187e6:	e7e1      	b.n	80187ac <_rclc_check_for_new_data+0x34>
 80187e8:	685c      	ldr	r4, [r3, #4]
 80187ea:	4608      	mov	r0, r1
 80187ec:	f104 0222 	add.w	r2, r4, #34	@ 0x22
 80187f0:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 80187f4:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 80187f8:	e9cd 2100 	strd	r2, r1, [sp]
 80187fc:	f104 0220 	add.w	r2, r4, #32
 8018800:	f104 0110 	add.w	r1, r4, #16
 8018804:	f007 ff7e 	bl	8020704 <rcl_action_server_wait_set_get_entities_ready>
 8018808:	e7d0      	b.n	80187ac <_rclc_check_for_new_data+0x34>
 801880a:	200b      	movs	r0, #11
 801880c:	4770      	bx	lr
 801880e:	2001      	movs	r0, #1
 8018810:	e7cc      	b.n	80187ac <_rclc_check_for_new_data+0x34>
 8018812:	bf00      	nop

08018814 <_rclc_take_new_data>:
 8018814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018816:	b09b      	sub	sp, #108	@ 0x6c
 8018818:	2800      	cmp	r0, #0
 801881a:	f000 8088 	beq.w	801892e <_rclc_take_new_data+0x11a>
 801881e:	7803      	ldrb	r3, [r0, #0]
 8018820:	4604      	mov	r4, r0
 8018822:	2b0a      	cmp	r3, #10
 8018824:	f200 8167 	bhi.w	8018af6 <_rclc_take_new_data+0x2e2>
 8018828:	e8df f003 	tbb	[pc, r3]
 801882c:	44152d2d 	.word	0x44152d2d
 8018830:	19191944 	.word	0x19191944
 8018834:	065a      	.short	0x065a
 8018836:	15          	.byte	0x15
 8018837:	00          	.byte	0x00
 8018838:	6840      	ldr	r0, [r0, #4]
 801883a:	f890 3020 	ldrb.w	r3, [r0, #32]
 801883e:	2b00      	cmp	r3, #0
 8018840:	f040 80b2 	bne.w	80189a8 <_rclc_take_new_data+0x194>
 8018844:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8018848:	2b00      	cmp	r3, #0
 801884a:	f040 80e4 	bne.w	8018a16 <_rclc_take_new_data+0x202>
 801884e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8018852:	2b00      	cmp	r3, #0
 8018854:	d16f      	bne.n	8018936 <_rclc_take_new_data+0x122>
 8018856:	2500      	movs	r5, #0
 8018858:	4628      	mov	r0, r5
 801885a:	b01b      	add	sp, #108	@ 0x6c
 801885c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801885e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8018860:	6a0b      	ldr	r3, [r1, #32]
 8018862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018866:	2b00      	cmp	r3, #0
 8018868:	d0f5      	beq.n	8018856 <_rclc_take_new_data+0x42>
 801886a:	6882      	ldr	r2, [r0, #8]
 801886c:	f100 0110 	add.w	r1, r0, #16
 8018870:	6840      	ldr	r0, [r0, #4]
 8018872:	f006 fa5b 	bl	801ed2c <rcl_take_request>
 8018876:	4605      	mov	r5, r0
 8018878:	2800      	cmp	r0, #0
 801887a:	d0ec      	beq.n	8018856 <_rclc_take_new_data+0x42>
 801887c:	f240 2359 	movw	r3, #601	@ 0x259
 8018880:	4298      	cmp	r0, r3
 8018882:	d013      	beq.n	80188ac <_rclc_take_new_data+0x98>
 8018884:	e029      	b.n	80188da <_rclc_take_new_data+0xc6>
 8018886:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8018888:	680b      	ldr	r3, [r1, #0]
 801888a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801888e:	2b00      	cmp	r3, #0
 8018890:	d0e1      	beq.n	8018856 <_rclc_take_new_data+0x42>
 8018892:	2300      	movs	r3, #0
 8018894:	aa0a      	add	r2, sp, #40	@ 0x28
 8018896:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 801889a:	f006 fb8b 	bl	801efb4 <rcl_take>
 801889e:	4605      	mov	r5, r0
 80188a0:	2800      	cmp	r0, #0
 80188a2:	d0d9      	beq.n	8018858 <_rclc_take_new_data+0x44>
 80188a4:	f240 1391 	movw	r3, #401	@ 0x191
 80188a8:	4298      	cmp	r0, r3
 80188aa:	d116      	bne.n	80188da <_rclc_take_new_data+0xc6>
 80188ac:	2300      	movs	r3, #0
 80188ae:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 80188b2:	e7d1      	b.n	8018858 <_rclc_take_new_data+0x44>
 80188b4:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80188b6:	698b      	ldr	r3, [r1, #24]
 80188b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d0ca      	beq.n	8018856 <_rclc_take_new_data+0x42>
 80188c0:	6882      	ldr	r2, [r0, #8]
 80188c2:	f100 0110 	add.w	r1, r0, #16
 80188c6:	6840      	ldr	r0, [r0, #4]
 80188c8:	f005 fcc2 	bl	801e250 <rcl_take_response>
 80188cc:	4605      	mov	r5, r0
 80188ce:	2800      	cmp	r0, #0
 80188d0:	d0c1      	beq.n	8018856 <_rclc_take_new_data+0x42>
 80188d2:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80188d6:	4298      	cmp	r0, r3
 80188d8:	d0be      	beq.n	8018858 <_rclc_take_new_data+0x44>
 80188da:	f000 feb1 	bl	8019640 <rcutils_reset_error>
 80188de:	e7bb      	b.n	8018858 <_rclc_take_new_data+0x44>
 80188e0:	6840      	ldr	r0, [r0, #4]
 80188e2:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d17d      	bne.n	80189e6 <_rclc_take_new_data+0x1d2>
 80188ea:	69c3      	ldr	r3, [r0, #28]
 80188ec:	b11b      	cbz	r3, 80188f6 <_rclc_take_new_data+0xe2>
 80188ee:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d144      	bne.n	8018980 <_rclc_take_new_data+0x16c>
 80188f6:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	f040 80ac 	bne.w	8018a58 <_rclc_take_new_data+0x244>
 8018900:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8018904:	2b00      	cmp	r3, #0
 8018906:	d0a6      	beq.n	8018856 <_rclc_take_new_data+0x42>
 8018908:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801890a:	a90a      	add	r1, sp, #40	@ 0x28
 801890c:	3010      	adds	r0, #16
 801890e:	f007 fbb7 	bl	8020080 <rcl_action_take_result_response>
 8018912:	4605      	mov	r5, r0
 8018914:	2800      	cmp	r0, #0
 8018916:	d1e0      	bne.n	80188da <_rclc_take_new_data+0xc6>
 8018918:	6860      	ldr	r0, [r4, #4]
 801891a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801891e:	f008 f821 	bl	8020964 <rclc_action_find_handle_by_result_request_sequence_number>
 8018922:	2800      	cmp	r0, #0
 8018924:	d098      	beq.n	8018858 <_rclc_take_new_data+0x44>
 8018926:	2301      	movs	r3, #1
 8018928:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 801892c:	e794      	b.n	8018858 <_rclc_take_new_data+0x44>
 801892e:	250b      	movs	r5, #11
 8018930:	4628      	mov	r0, r5
 8018932:	b01b      	add	sp, #108	@ 0x6c
 8018934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018936:	ae04      	add	r6, sp, #16
 8018938:	3010      	adds	r0, #16
 801893a:	aa0a      	add	r2, sp, #40	@ 0x28
 801893c:	4631      	mov	r1, r6
 801893e:	f007 fe15 	bl	802056c <rcl_action_take_cancel_request>
 8018942:	4605      	mov	r5, r0
 8018944:	2800      	cmp	r0, #0
 8018946:	d1c8      	bne.n	80188da <_rclc_take_new_data+0xc6>
 8018948:	a90a      	add	r1, sp, #40	@ 0x28
 801894a:	6860      	ldr	r0, [r4, #4]
 801894c:	f007 ffca 	bl	80208e4 <rclc_action_find_goal_handle_by_uuid>
 8018950:	4607      	mov	r7, r0
 8018952:	2800      	cmp	r0, #0
 8018954:	f000 80bb 	beq.w	8018ace <_rclc_take_new_data+0x2ba>
 8018958:	2101      	movs	r1, #1
 801895a:	f990 0008 	ldrsb.w	r0, [r0, #8]
 801895e:	f007 ff4b 	bl	80207f8 <rcl_action_transition_goal_state>
 8018962:	2803      	cmp	r0, #3
 8018964:	4684      	mov	ip, r0
 8018966:	f040 80a7 	bne.w	8018ab8 <_rclc_take_new_data+0x2a4>
 801896a:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 801896e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8018970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018972:	e896 0003 	ldmia.w	r6, {r0, r1}
 8018976:	e884 0003 	stmia.w	r4, {r0, r1}
 801897a:	f887 c008 	strb.w	ip, [r7, #8]
 801897e:	e76b      	b.n	8018858 <_rclc_take_new_data+0x44>
 8018980:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8018982:	3010      	adds	r0, #16
 8018984:	f007 fbfc 	bl	8020180 <rcl_action_take_feedback>
 8018988:	4605      	mov	r5, r0
 801898a:	2800      	cmp	r0, #0
 801898c:	d1a5      	bne.n	80188da <_rclc_take_new_data+0xc6>
 801898e:	6860      	ldr	r0, [r4, #4]
 8018990:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8018992:	f007 ffa7 	bl	80208e4 <rclc_action_find_goal_handle_by_uuid>
 8018996:	4603      	mov	r3, r0
 8018998:	2800      	cmp	r0, #0
 801899a:	f000 80a3 	beq.w	8018ae4 <_rclc_take_new_data+0x2d0>
 801899e:	2201      	movs	r2, #1
 80189a0:	6860      	ldr	r0, [r4, #4]
 80189a2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80189a6:	e7a6      	b.n	80188f6 <_rclc_take_new_data+0xe2>
 80189a8:	f007 ff76 	bl	8020898 <rclc_action_take_goal_handle>
 80189ac:	4606      	mov	r6, r0
 80189ae:	6860      	ldr	r0, [r4, #4]
 80189b0:	2e00      	cmp	r6, #0
 80189b2:	f43f af47 	beq.w	8018844 <_rclc_take_new_data+0x30>
 80189b6:	6070      	str	r0, [r6, #4]
 80189b8:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 80189bc:	69f2      	ldr	r2, [r6, #28]
 80189be:	3010      	adds	r0, #16
 80189c0:	f007 fd1c 	bl	80203fc <rcl_action_take_goal_request>
 80189c4:	4605      	mov	r5, r0
 80189c6:	2800      	cmp	r0, #0
 80189c8:	f040 808e 	bne.w	8018ae8 <_rclc_take_new_data+0x2d4>
 80189cc:	69f7      	ldr	r7, [r6, #28]
 80189ce:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80189d0:	7235      	strb	r5, [r6, #8]
 80189d2:	f8c6 0009 	str.w	r0, [r6, #9]
 80189d6:	f8c6 100d 	str.w	r1, [r6, #13]
 80189da:	6860      	ldr	r0, [r4, #4]
 80189dc:	f8c6 2011 	str.w	r2, [r6, #17]
 80189e0:	f8c6 3015 	str.w	r3, [r6, #21]
 80189e4:	e72e      	b.n	8018844 <_rclc_take_new_data+0x30>
 80189e6:	aa04      	add	r2, sp, #16
 80189e8:	a90a      	add	r1, sp, #40	@ 0x28
 80189ea:	3010      	adds	r0, #16
 80189ec:	f007 fad0 	bl	801ff90 <rcl_action_take_goal_response>
 80189f0:	4605      	mov	r5, r0
 80189f2:	2800      	cmp	r0, #0
 80189f4:	f47f af71 	bne.w	80188da <_rclc_take_new_data+0xc6>
 80189f8:	6860      	ldr	r0, [r4, #4]
 80189fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80189fe:	f007 ff9f 	bl	8020940 <rclc_action_find_handle_by_goal_request_sequence_number>
 8018a02:	b130      	cbz	r0, 8018a12 <_rclc_take_new_data+0x1fe>
 8018a04:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8018a08:	2201      	movs	r2, #1
 8018a0a:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8018a0e:	f880 2020 	strb.w	r2, [r0, #32]
 8018a12:	6860      	ldr	r0, [r4, #4]
 8018a14:	e769      	b.n	80188ea <_rclc_take_new_data+0xd6>
 8018a16:	3010      	adds	r0, #16
 8018a18:	aa04      	add	r2, sp, #16
 8018a1a:	a90a      	add	r1, sp, #40	@ 0x28
 8018a1c:	f007 fd66 	bl	80204ec <rcl_action_take_result_request>
 8018a20:	4605      	mov	r5, r0
 8018a22:	2800      	cmp	r0, #0
 8018a24:	f47f af59 	bne.w	80188da <_rclc_take_new_data+0xc6>
 8018a28:	a904      	add	r1, sp, #16
 8018a2a:	6860      	ldr	r0, [r4, #4]
 8018a2c:	f007 ff5a 	bl	80208e4 <rclc_action_find_goal_handle_by_uuid>
 8018a30:	4607      	mov	r7, r0
 8018a32:	b160      	cbz	r0, 8018a4e <_rclc_take_new_data+0x23a>
 8018a34:	ad0a      	add	r5, sp, #40	@ 0x28
 8018a36:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8018a3a:	f04f 0c02 	mov.w	ip, #2
 8018a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018a40:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8018a42:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018a46:	e886 0003 	stmia.w	r6, {r0, r1}
 8018a4a:	f887 c008 	strb.w	ip, [r7, #8]
 8018a4e:	6860      	ldr	r0, [r4, #4]
 8018a50:	2300      	movs	r3, #0
 8018a52:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8018a56:	e6fa      	b.n	801884e <_rclc_take_new_data+0x3a>
 8018a58:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8018a5c:	a90a      	add	r1, sp, #40	@ 0x28
 8018a5e:	3010      	adds	r0, #16
 8018a60:	f007 fb4e 	bl	8020100 <rcl_action_take_cancel_response>
 8018a64:	4605      	mov	r5, r0
 8018a66:	2800      	cmp	r0, #0
 8018a68:	f47f af37 	bne.w	80188da <_rclc_take_new_data+0xc6>
 8018a6c:	6860      	ldr	r0, [r4, #4]
 8018a6e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8018a72:	f007 ff89 	bl	8020988 <rclc_action_find_handle_by_cancel_request_sequence_number>
 8018a76:	4606      	mov	r6, r0
 8018a78:	6860      	ldr	r0, [r4, #4]
 8018a7a:	2e00      	cmp	r6, #0
 8018a7c:	f43f af40 	beq.w	8018900 <_rclc_take_new_data+0xec>
 8018a80:	2701      	movs	r7, #1
 8018a82:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8018a84:	84b7      	strh	r7, [r6, #36]	@ 0x24
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	f43f af3a 	beq.w	8018900 <_rclc_take_new_data+0xec>
 8018a8c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8018a8e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8018a92:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8018a96:	f007 ff25 	bl	80208e4 <rclc_action_find_goal_handle_by_uuid>
 8018a9a:	b138      	cbz	r0, 8018aac <_rclc_take_new_data+0x298>
 8018a9c:	6860      	ldr	r0, [r4, #4]
 8018a9e:	3501      	adds	r5, #1
 8018aa0:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8018aa4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8018aa6:	42ab      	cmp	r3, r5
 8018aa8:	d8f0      	bhi.n	8018a8c <_rclc_take_new_data+0x278>
 8018aaa:	e729      	b.n	8018900 <_rclc_take_new_data+0xec>
 8018aac:	6860      	ldr	r0, [r4, #4]
 8018aae:	3501      	adds	r5, #1
 8018ab0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8018ab2:	42ab      	cmp	r3, r5
 8018ab4:	d8ea      	bhi.n	8018a8c <_rclc_take_new_data+0x278>
 8018ab6:	e723      	b.n	8018900 <_rclc_take_new_data+0xec>
 8018ab8:	ab06      	add	r3, sp, #24
 8018aba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018abc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8018ac0:	2103      	movs	r1, #3
 8018ac2:	6860      	ldr	r0, [r4, #4]
 8018ac4:	e896 000c 	ldmia.w	r6, {r2, r3}
 8018ac8:	f007 ffd2 	bl	8020a70 <rclc_action_server_goal_cancel_reject>
 8018acc:	e6c4      	b.n	8018858 <_rclc_take_new_data+0x44>
 8018ace:	ab06      	add	r3, sp, #24
 8018ad0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018ad2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8018ad6:	2102      	movs	r1, #2
 8018ad8:	6860      	ldr	r0, [r4, #4]
 8018ada:	e896 000c 	ldmia.w	r6, {r2, r3}
 8018ade:	f007 ffc7 	bl	8020a70 <rclc_action_server_goal_cancel_reject>
 8018ae2:	e6b9      	b.n	8018858 <_rclc_take_new_data+0x44>
 8018ae4:	6860      	ldr	r0, [r4, #4]
 8018ae6:	e706      	b.n	80188f6 <_rclc_take_new_data+0xe2>
 8018ae8:	4631      	mov	r1, r6
 8018aea:	6860      	ldr	r0, [r4, #4]
 8018aec:	f007 fee4 	bl	80208b8 <rclc_action_remove_used_goal_handle>
 8018af0:	f000 fda6 	bl	8019640 <rcutils_reset_error>
 8018af4:	e6b0      	b.n	8018858 <_rclc_take_new_data+0x44>
 8018af6:	2501      	movs	r5, #1
 8018af8:	e6ae      	b.n	8018858 <_rclc_take_new_data+0x44>
 8018afa:	bf00      	nop

08018afc <_rclc_execute.part.0>:
 8018afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018afe:	7803      	ldrb	r3, [r0, #0]
 8018b00:	b085      	sub	sp, #20
 8018b02:	4604      	mov	r4, r0
 8018b04:	2b0a      	cmp	r3, #10
 8018b06:	f200 8139 	bhi.w	8018d7c <_rclc_execute.part.0+0x280>
 8018b0a:	e8df f003 	tbb	[pc, r3]
 8018b0e:	4268      	.short	0x4268
 8018b10:	06a75b4d 	.word	0x06a75b4d
 8018b14:	721d0606 	.word	0x721d0606
 8018b18:	62          	.byte	0x62
 8018b19:	00          	.byte	0x00
 8018b1a:	2b06      	cmp	r3, #6
 8018b1c:	f000 8126 	beq.w	8018d6c <_rclc_execute.part.0+0x270>
 8018b20:	2b07      	cmp	r3, #7
 8018b22:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018b24:	f040 811c 	bne.w	8018d60 <_rclc_execute.part.0+0x264>
 8018b28:	f104 0510 	add.w	r5, r4, #16
 8018b2c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 8018b30:	6880      	ldr	r0, [r0, #8]
 8018b32:	4798      	blx	r3
 8018b34:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8018b36:	4629      	mov	r1, r5
 8018b38:	6860      	ldr	r0, [r4, #4]
 8018b3a:	f006 f937 	bl	801edac <rcl_send_response>
 8018b3e:	4604      	mov	r4, r0
 8018b40:	b378      	cbz	r0, 8018ba2 <_rclc_execute.part.0+0xa6>
 8018b42:	f000 fd7d 	bl	8019640 <rcutils_reset_error>
 8018b46:	e02c      	b.n	8018ba2 <_rclc_execute.part.0+0xa6>
 8018b48:	6840      	ldr	r0, [r0, #4]
 8018b4a:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	f000 808e 	beq.w	8018c70 <_rclc_execute.part.0+0x174>
 8018b54:	2600      	movs	r6, #0
 8018b56:	2701      	movs	r7, #1
 8018b58:	e004      	b.n	8018b64 <_rclc_execute.part.0+0x68>
 8018b5a:	f007 fe77 	bl	802084c <rclc_action_send_result_request>
 8018b5e:	b998      	cbnz	r0, 8018b88 <_rclc_execute.part.0+0x8c>
 8018b60:	722f      	strb	r7, [r5, #8]
 8018b62:	6860      	ldr	r0, [r4, #4]
 8018b64:	f007 ff22 	bl	80209ac <rclc_action_find_first_handle_with_goal_response>
 8018b68:	4605      	mov	r5, r0
 8018b6a:	2800      	cmp	r0, #0
 8018b6c:	d07f      	beq.n	8018c6e <_rclc_execute.part.0+0x172>
 8018b6e:	6863      	ldr	r3, [r4, #4]
 8018b70:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8018b72:	699b      	ldr	r3, [r3, #24]
 8018b74:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8018b78:	f885 6020 	strb.w	r6, [r5, #32]
 8018b7c:	4798      	blx	r3
 8018b7e:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8018b82:	4628      	mov	r0, r5
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	d1e8      	bne.n	8018b5a <_rclc_execute.part.0+0x5e>
 8018b88:	6860      	ldr	r0, [r4, #4]
 8018b8a:	4629      	mov	r1, r5
 8018b8c:	f007 fe94 	bl	80208b8 <rclc_action_remove_used_goal_handle>
 8018b90:	e7e7      	b.n	8018b62 <_rclc_execute.part.0+0x66>
 8018b92:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8018b96:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 8018b9a:	b100      	cbz	r0, 8018b9e <_rclc_execute.part.0+0xa2>
 8018b9c:	68a0      	ldr	r0, [r4, #8]
 8018b9e:	2400      	movs	r4, #0
 8018ba0:	4798      	blx	r3
 8018ba2:	4620      	mov	r0, r4
 8018ba4:	b005      	add	sp, #20
 8018ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ba8:	6840      	ldr	r0, [r0, #4]
 8018baa:	f006 fb17 	bl	801f1dc <rcl_timer_call>
 8018bae:	f240 3321 	movw	r3, #801	@ 0x321
 8018bb2:	4604      	mov	r4, r0
 8018bb4:	4298      	cmp	r0, r3
 8018bb6:	d001      	beq.n	8018bbc <_rclc_execute.part.0+0xc0>
 8018bb8:	2800      	cmp	r0, #0
 8018bba:	d1c2      	bne.n	8018b42 <_rclc_execute.part.0+0x46>
 8018bbc:	2400      	movs	r4, #0
 8018bbe:	4620      	mov	r0, r4
 8018bc0:	b005      	add	sp, #20
 8018bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018bc4:	2400      	movs	r4, #0
 8018bc6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018bc8:	6880      	ldr	r0, [r0, #8]
 8018bca:	4798      	blx	r3
 8018bcc:	4620      	mov	r0, r4
 8018bce:	b005      	add	sp, #20
 8018bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018bd2:	2400      	movs	r4, #0
 8018bd4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018bd6:	4798      	blx	r3
 8018bd8:	4620      	mov	r0, r4
 8018bda:	b005      	add	sp, #20
 8018bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018bde:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8018be2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018be4:	b100      	cbz	r0, 8018be8 <_rclc_execute.part.0+0xec>
 8018be6:	68a0      	ldr	r0, [r4, #8]
 8018be8:	2400      	movs	r4, #0
 8018bea:	4798      	blx	r3
 8018bec:	4620      	mov	r0, r4
 8018bee:	b005      	add	sp, #20
 8018bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018bf2:	6840      	ldr	r0, [r0, #4]
 8018bf4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8018bf8:	bb3b      	cbnz	r3, 8018c4a <_rclc_execute.part.0+0x14e>
 8018bfa:	f890 3020 	ldrb.w	r3, [r0, #32]
 8018bfe:	2b00      	cmp	r3, #0
 8018c00:	d07d      	beq.n	8018cfe <_rclc_execute.part.0+0x202>
 8018c02:	f640 0634 	movw	r6, #2100	@ 0x834
 8018c06:	2701      	movs	r7, #1
 8018c08:	e007      	b.n	8018c1a <_rclc_execute.part.0+0x11e>
 8018c0a:	4628      	mov	r0, r5
 8018c0c:	f007 fee6 	bl	80209dc <rclc_action_server_response_goal_request>
 8018c10:	4629      	mov	r1, r5
 8018c12:	6860      	ldr	r0, [r4, #4]
 8018c14:	f007 fe50 	bl	80208b8 <rclc_action_remove_used_goal_handle>
 8018c18:	6860      	ldr	r0, [r4, #4]
 8018c1a:	2100      	movs	r1, #0
 8018c1c:	f007 fe78 	bl	8020910 <rclc_action_find_first_handle_by_status>
 8018c20:	4605      	mov	r5, r0
 8018c22:	2800      	cmp	r0, #0
 8018c24:	d068      	beq.n	8018cf8 <_rclc_execute.part.0+0x1fc>
 8018c26:	6863      	ldr	r3, [r4, #4]
 8018c28:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8018c2a:	699b      	ldr	r3, [r3, #24]
 8018c2c:	4798      	blx	r3
 8018c2e:	42b0      	cmp	r0, r6
 8018c30:	f04f 0100 	mov.w	r1, #0
 8018c34:	d1e9      	bne.n	8018c0a <_rclc_execute.part.0+0x10e>
 8018c36:	2101      	movs	r1, #1
 8018c38:	4628      	mov	r0, r5
 8018c3a:	f007 fecf 	bl	80209dc <rclc_action_server_response_goal_request>
 8018c3e:	722f      	strb	r7, [r5, #8]
 8018c40:	e7ea      	b.n	8018c18 <_rclc_execute.part.0+0x11c>
 8018c42:	6848      	ldr	r0, [r1, #4]
 8018c44:	f007 fe38 	bl	80208b8 <rclc_action_remove_used_goal_handle>
 8018c48:	6860      	ldr	r0, [r4, #4]
 8018c4a:	f007 fe6d 	bl	8020928 <rclc_action_find_first_terminated_handle>
 8018c4e:	4601      	mov	r1, r0
 8018c50:	2800      	cmp	r0, #0
 8018c52:	d1f6      	bne.n	8018c42 <_rclc_execute.part.0+0x146>
 8018c54:	6860      	ldr	r0, [r4, #4]
 8018c56:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8018c5a:	e7ce      	b.n	8018bfa <_rclc_execute.part.0+0xfe>
 8018c5c:	2400      	movs	r4, #0
 8018c5e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018c60:	f100 0110 	add.w	r1, r0, #16
 8018c64:	6880      	ldr	r0, [r0, #8]
 8018c66:	4798      	blx	r3
 8018c68:	4620      	mov	r0, r4
 8018c6a:	b005      	add	sp, #20
 8018c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c6e:	6860      	ldr	r0, [r4, #4]
 8018c70:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8018c74:	b18b      	cbz	r3, 8018c9a <_rclc_execute.part.0+0x19e>
 8018c76:	68c5      	ldr	r5, [r0, #12]
 8018c78:	b32d      	cbz	r5, 8018cc6 <_rclc_execute.part.0+0x1ca>
 8018c7a:	2600      	movs	r6, #0
 8018c7c:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8018c80:	b143      	cbz	r3, 8018c94 <_rclc_execute.part.0+0x198>
 8018c82:	69c3      	ldr	r3, [r0, #28]
 8018c84:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8018c88:	b123      	cbz	r3, 8018c94 <_rclc_execute.part.0+0x198>
 8018c8a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8018c8c:	4628      	mov	r0, r5
 8018c8e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8018c90:	4798      	blx	r3
 8018c92:	6860      	ldr	r0, [r4, #4]
 8018c94:	682d      	ldr	r5, [r5, #0]
 8018c96:	2d00      	cmp	r5, #0
 8018c98:	d1f0      	bne.n	8018c7c <_rclc_execute.part.0+0x180>
 8018c9a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8018c9e:	b193      	cbz	r3, 8018cc6 <_rclc_execute.part.0+0x1ca>
 8018ca0:	68c5      	ldr	r5, [r0, #12]
 8018ca2:	b185      	cbz	r5, 8018cc6 <_rclc_execute.part.0+0x1ca>
 8018ca4:	2600      	movs	r6, #0
 8018ca6:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8018caa:	b14b      	cbz	r3, 8018cc0 <_rclc_execute.part.0+0x1c4>
 8018cac:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8018cae:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8018cb2:	b12b      	cbz	r3, 8018cc0 <_rclc_execute.part.0+0x1c4>
 8018cb4:	4628      	mov	r0, r5
 8018cb6:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8018cba:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8018cbc:	4798      	blx	r3
 8018cbe:	6860      	ldr	r0, [r4, #4]
 8018cc0:	682d      	ldr	r5, [r5, #0]
 8018cc2:	2d00      	cmp	r5, #0
 8018cc4:	d1ef      	bne.n	8018ca6 <_rclc_execute.part.0+0x1aa>
 8018cc6:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	f43f af76 	beq.w	8018bbc <_rclc_execute.part.0+0xc0>
 8018cd0:	2700      	movs	r7, #0
 8018cd2:	e00b      	b.n	8018cec <_rclc_execute.part.0+0x1f0>
 8018cd4:	6863      	ldr	r3, [r4, #4]
 8018cd6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8018cd8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8018cda:	6a1e      	ldr	r6, [r3, #32]
 8018cdc:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8018ce0:	47b0      	blx	r6
 8018ce2:	6860      	ldr	r0, [r4, #4]
 8018ce4:	4629      	mov	r1, r5
 8018ce6:	f007 fde7 	bl	80208b8 <rclc_action_remove_used_goal_handle>
 8018cea:	6860      	ldr	r0, [r4, #4]
 8018cec:	f007 fe6a 	bl	80209c4 <rclc_action_find_first_handle_with_result_response>
 8018cf0:	4605      	mov	r5, r0
 8018cf2:	2800      	cmp	r0, #0
 8018cf4:	d1ee      	bne.n	8018cd4 <_rclc_execute.part.0+0x1d8>
 8018cf6:	e761      	b.n	8018bbc <_rclc_execute.part.0+0xc0>
 8018cf8:	6860      	ldr	r0, [r4, #4]
 8018cfa:	f880 5020 	strb.w	r5, [r0, #32]
 8018cfe:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	f43f af5a 	beq.w	8018bbc <_rclc_execute.part.0+0xc0>
 8018d08:	68c5      	ldr	r5, [r0, #12]
 8018d0a:	b1b5      	cbz	r5, 8018d3a <_rclc_execute.part.0+0x23e>
 8018d0c:	2602      	movs	r6, #2
 8018d0e:	e001      	b.n	8018d14 <_rclc_execute.part.0+0x218>
 8018d10:	682d      	ldr	r5, [r5, #0]
 8018d12:	b195      	cbz	r5, 8018d3a <_rclc_execute.part.0+0x23e>
 8018d14:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8018d18:	2b03      	cmp	r3, #3
 8018d1a:	d1f9      	bne.n	8018d10 <_rclc_execute.part.0+0x214>
 8018d1c:	69c3      	ldr	r3, [r0, #28]
 8018d1e:	4628      	mov	r0, r5
 8018d20:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8018d22:	4798      	blx	r3
 8018d24:	4603      	mov	r3, r0
 8018d26:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8018d2a:	4628      	mov	r0, r5
 8018d2c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8018d30:	b143      	cbz	r3, 8018d44 <_rclc_execute.part.0+0x248>
 8018d32:	f007 fe71 	bl	8020a18 <rclc_action_server_goal_cancel_accept>
 8018d36:	6860      	ldr	r0, [r4, #4]
 8018d38:	e7ea      	b.n	8018d10 <_rclc_execute.part.0+0x214>
 8018d3a:	2300      	movs	r3, #0
 8018d3c:	461c      	mov	r4, r3
 8018d3e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8018d42:	e72e      	b.n	8018ba2 <_rclc_execute.part.0+0xa6>
 8018d44:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8018d46:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8018d4a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8018d4e:	2101      	movs	r1, #1
 8018d50:	6860      	ldr	r0, [r4, #4]
 8018d52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018d56:	f007 fe8b 	bl	8020a70 <rclc_action_server_goal_cancel_reject>
 8018d5a:	722e      	strb	r6, [r5, #8]
 8018d5c:	6860      	ldr	r0, [r4, #4]
 8018d5e:	e7d7      	b.n	8018d10 <_rclc_execute.part.0+0x214>
 8018d60:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8018d62:	f104 0510 	add.w	r5, r4, #16
 8018d66:	6880      	ldr	r0, [r0, #8]
 8018d68:	4798      	blx	r3
 8018d6a:	e6e3      	b.n	8018b34 <_rclc_execute.part.0+0x38>
 8018d6c:	f100 0510 	add.w	r5, r0, #16
 8018d70:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018d72:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8018d74:	4629      	mov	r1, r5
 8018d76:	6880      	ldr	r0, [r0, #8]
 8018d78:	4798      	blx	r3
 8018d7a:	e6db      	b.n	8018b34 <_rclc_execute.part.0+0x38>
 8018d7c:	2401      	movs	r4, #1
 8018d7e:	e710      	b.n	8018ba2 <_rclc_execute.part.0+0xa6>

08018d80 <rclc_executor_trigger_any>:
 8018d80:	2800      	cmp	r0, #0
 8018d82:	d03d      	beq.n	8018e00 <rclc_executor_trigger_any+0x80>
 8018d84:	2900      	cmp	r1, #0
 8018d86:	d03c      	beq.n	8018e02 <rclc_executor_trigger_any+0x82>
 8018d88:	4603      	mov	r3, r0
 8018d8a:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8018d8e:	2200      	movs	r2, #0
 8018d90:	2800      	cmp	r0, #0
 8018d92:	d035      	beq.n	8018e00 <rclc_executor_trigger_any+0x80>
 8018d94:	b430      	push	{r4, r5}
 8018d96:	f893 c000 	ldrb.w	ip, [r3]
 8018d9a:	f1bc 0f08 	cmp.w	ip, #8
 8018d9e:	d11d      	bne.n	8018ddc <rclc_executor_trigger_any+0x5c>
 8018da0:	685c      	ldr	r4, [r3, #4]
 8018da2:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8018da4:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8018da8:	d105      	bne.n	8018db6 <rclc_executor_trigger_any+0x36>
 8018daa:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8018dae:	b910      	cbnz	r0, 8018db6 <rclc_executor_trigger_any+0x36>
 8018db0:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8018db4:	b128      	cbz	r0, 8018dc2 <rclc_executor_trigger_any+0x42>
 8018db6:	bc30      	pop	{r4, r5}
 8018db8:	4770      	bx	lr
 8018dba:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8018dbe:	2800      	cmp	r0, #0
 8018dc0:	d1f9      	bne.n	8018db6 <rclc_executor_trigger_any+0x36>
 8018dc2:	3201      	adds	r2, #1
 8018dc4:	3340      	adds	r3, #64	@ 0x40
 8018dc6:	4291      	cmp	r1, r2
 8018dc8:	d017      	beq.n	8018dfa <rclc_executor_trigger_any+0x7a>
 8018dca:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8018dce:	2800      	cmp	r0, #0
 8018dd0:	d0f1      	beq.n	8018db6 <rclc_executor_trigger_any+0x36>
 8018dd2:	f893 c000 	ldrb.w	ip, [r3]
 8018dd6:	f1bc 0f08 	cmp.w	ip, #8
 8018dda:	d0e1      	beq.n	8018da0 <rclc_executor_trigger_any+0x20>
 8018ddc:	f1bc 0f09 	cmp.w	ip, #9
 8018de0:	d1eb      	bne.n	8018dba <rclc_executor_trigger_any+0x3a>
 8018de2:	685c      	ldr	r4, [r3, #4]
 8018de4:	6a25      	ldr	r5, [r4, #32]
 8018de6:	2d00      	cmp	r5, #0
 8018de8:	d1e5      	bne.n	8018db6 <rclc_executor_trigger_any+0x36>
 8018dea:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8018dee:	2800      	cmp	r0, #0
 8018df0:	d1e1      	bne.n	8018db6 <rclc_executor_trigger_any+0x36>
 8018df2:	3201      	adds	r2, #1
 8018df4:	3340      	adds	r3, #64	@ 0x40
 8018df6:	4291      	cmp	r1, r2
 8018df8:	d1e7      	bne.n	8018dca <rclc_executor_trigger_any+0x4a>
 8018dfa:	2000      	movs	r0, #0
 8018dfc:	bc30      	pop	{r4, r5}
 8018dfe:	4770      	bx	lr
 8018e00:	4770      	bx	lr
 8018e02:	4608      	mov	r0, r1
 8018e04:	4770      	bx	lr
 8018e06:	bf00      	nop

08018e08 <rclc_executor_init>:
 8018e08:	2900      	cmp	r1, #0
 8018e0a:	d06a      	beq.n	8018ee2 <rclc_executor_init+0xda>
 8018e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e10:	4605      	mov	r5, r0
 8018e12:	b0b0      	sub	sp, #192	@ 0xc0
 8018e14:	2800      	cmp	r0, #0
 8018e16:	d05c      	beq.n	8018ed2 <rclc_executor_init+0xca>
 8018e18:	4616      	mov	r6, r2
 8018e1a:	4618      	mov	r0, r3
 8018e1c:	4688      	mov	r8, r1
 8018e1e:	461f      	mov	r7, r3
 8018e20:	f000 fbe8 	bl	80195f4 <rcutils_allocator_is_valid>
 8018e24:	2e00      	cmp	r6, #0
 8018e26:	d054      	beq.n	8018ed2 <rclc_executor_init+0xca>
 8018e28:	f080 0401 	eor.w	r4, r0, #1
 8018e2c:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8018e30:	d14f      	bne.n	8018ed2 <rclc_executor_init+0xca>
 8018e32:	2288      	movs	r2, #136	@ 0x88
 8018e34:	4930      	ldr	r1, [pc, #192]	@ (8018ef8 <rclc_executor_init+0xf0>)
 8018e36:	a80e      	add	r0, sp, #56	@ 0x38
 8018e38:	f00c fdf3 	bl	8025a22 <memcpy>
 8018e3c:	a90e      	add	r1, sp, #56	@ 0x38
 8018e3e:	2288      	movs	r2, #136	@ 0x88
 8018e40:	4628      	mov	r0, r5
 8018e42:	f00c fdee 	bl	8025a22 <memcpy>
 8018e46:	4668      	mov	r0, sp
 8018e48:	f8c5 8000 	str.w	r8, [r5]
 8018e4c:	60ae      	str	r6, [r5, #8]
 8018e4e:	f006 facd 	bl	801f3ec <rcl_get_zero_initialized_wait_set>
 8018e52:	46ec      	mov	ip, sp
 8018e54:	f105 0e14 	add.w	lr, r5, #20
 8018e58:	f8d7 8000 	ldr.w	r8, [r7]
 8018e5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018e60:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018e64:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018e68:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018e6c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018e70:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8018ef0 <rclc_executor_init+0xe8>
 8018e74:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018e78:	f8dc 3000 	ldr.w	r3, [ip]
 8018e7c:	01b0      	lsls	r0, r6, #6
 8018e7e:	6939      	ldr	r1, [r7, #16]
 8018e80:	f8ce 3000 	str.w	r3, [lr]
 8018e84:	612f      	str	r7, [r5, #16]
 8018e86:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8018e8a:	47c0      	blx	r8
 8018e8c:	6068      	str	r0, [r5, #4]
 8018e8e:	b908      	cbnz	r0, 8018e94 <rclc_executor_init+0x8c>
 8018e90:	e029      	b.n	8018ee6 <rclc_executor_init+0xde>
 8018e92:	6868      	ldr	r0, [r5, #4]
 8018e94:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8018e98:	3401      	adds	r4, #1
 8018e9a:	4631      	mov	r1, r6
 8018e9c:	f000 fa7c 	bl	8019398 <rclc_executor_handle_init>
 8018ea0:	42a6      	cmp	r6, r4
 8018ea2:	d8f6      	bhi.n	8018e92 <rclc_executor_init+0x8a>
 8018ea4:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8018ea8:	f000 fa6a 	bl	8019380 <rclc_executor_handle_counters_zero_init>
 8018eac:	4a13      	ldr	r2, [pc, #76]	@ (8018efc <rclc_executor_init+0xf4>)
 8018eae:	2300      	movs	r3, #0
 8018eb0:	6868      	ldr	r0, [r5, #4]
 8018eb2:	e9c5 231e 	strd	r2, r3, [r5, #120]	@ 0x78
 8018eb6:	b168      	cbz	r0, 8018ed4 <rclc_executor_init+0xcc>
 8018eb8:	68ab      	ldr	r3, [r5, #8]
 8018eba:	b173      	cbz	r3, 8018eda <rclc_executor_init+0xd2>
 8018ebc:	692a      	ldr	r2, [r5, #16]
 8018ebe:	fab2 f382 	clz	r3, r2
 8018ec2:	095b      	lsrs	r3, r3, #5
 8018ec4:	b14a      	cbz	r2, 8018eda <rclc_executor_init+0xd2>
 8018ec6:	4618      	mov	r0, r3
 8018ec8:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
 8018ecc:	b030      	add	sp, #192	@ 0xc0
 8018ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ed2:	200b      	movs	r0, #11
 8018ed4:	b030      	add	sp, #192	@ 0xc0
 8018ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018eda:	2000      	movs	r0, #0
 8018edc:	b030      	add	sp, #192	@ 0xc0
 8018ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ee2:	200b      	movs	r0, #11
 8018ee4:	4770      	bx	lr
 8018ee6:	200a      	movs	r0, #10
 8018ee8:	e7f4      	b.n	8018ed4 <rclc_executor_init+0xcc>
 8018eea:	bf00      	nop
 8018eec:	f3af 8000 	nop.w
 8018ef0:	3b9aca00 	.word	0x3b9aca00
 8018ef4:	00000000 	.word	0x00000000
 8018ef8:	0802a360 	.word	0x0802a360
 8018efc:	08018d81 	.word	0x08018d81

08018f00 <rclc_executor_add_subscription>:
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	bf18      	it	ne
 8018f04:	2a00      	cmpne	r2, #0
 8018f06:	b570      	push	{r4, r5, r6, lr}
 8018f08:	4604      	mov	r4, r0
 8018f0a:	bf0c      	ite	eq
 8018f0c:	2001      	moveq	r0, #1
 8018f0e:	2000      	movne	r0, #0
 8018f10:	f89d c010 	ldrb.w	ip, [sp, #16]
 8018f14:	2900      	cmp	r1, #0
 8018f16:	bf08      	it	eq
 8018f18:	f040 0001 	orreq.w	r0, r0, #1
 8018f1c:	bb28      	cbnz	r0, 8018f6a <rclc_executor_add_subscription+0x6a>
 8018f1e:	fab4 f584 	clz	r5, r4
 8018f22:	096d      	lsrs	r5, r5, #5
 8018f24:	b30c      	cbz	r4, 8018f6a <rclc_executor_add_subscription+0x6a>
 8018f26:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 8018f2a:	4286      	cmp	r6, r0
 8018f2c:	d301      	bcc.n	8018f32 <rclc_executor_add_subscription+0x32>
 8018f2e:	2001      	movs	r0, #1
 8018f30:	bd70      	pop	{r4, r5, r6, pc}
 8018f32:	6860      	ldr	r0, [r4, #4]
 8018f34:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 8018f38:	f800 500e 	strb.w	r5, [r0, lr]
 8018f3c:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8018f40:	3601      	adds	r6, #1
 8018f42:	6303      	str	r3, [r0, #48]	@ 0x30
 8018f44:	2301      	movs	r3, #1
 8018f46:	62c5      	str	r5, [r0, #44]	@ 0x2c
 8018f48:	f104 0514 	add.w	r5, r4, #20
 8018f4c:	f880 c001 	strb.w	ip, [r0, #1]
 8018f50:	8703      	strh	r3, [r0, #56]	@ 0x38
 8018f52:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8018f56:	4628      	mov	r0, r5
 8018f58:	60e6      	str	r6, [r4, #12]
 8018f5a:	f006 fa5b 	bl	801f414 <rcl_wait_set_is_valid>
 8018f5e:	b930      	cbnz	r0, 8018f6e <rclc_executor_add_subscription+0x6e>
 8018f60:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8018f62:	2000      	movs	r0, #0
 8018f64:	3301      	adds	r3, #1
 8018f66:	64a3      	str	r3, [r4, #72]	@ 0x48
 8018f68:	bd70      	pop	{r4, r5, r6, pc}
 8018f6a:	200b      	movs	r0, #11
 8018f6c:	bd70      	pop	{r4, r5, r6, pc}
 8018f6e:	4628      	mov	r0, r5
 8018f70:	f006 fa56 	bl	801f420 <rcl_wait_set_fini>
 8018f74:	2800      	cmp	r0, #0
 8018f76:	d0f3      	beq.n	8018f60 <rclc_executor_add_subscription+0x60>
 8018f78:	bd70      	pop	{r4, r5, r6, pc}
 8018f7a:	bf00      	nop

08018f7c <rclc_executor_prepare>:
 8018f7c:	2800      	cmp	r0, #0
 8018f7e:	d044      	beq.n	801900a <rclc_executor_prepare+0x8e>
 8018f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f82:	f100 0514 	add.w	r5, r0, #20
 8018f86:	b09b      	sub	sp, #108	@ 0x6c
 8018f88:	4604      	mov	r4, r0
 8018f8a:	4628      	mov	r0, r5
 8018f8c:	f006 fa42 	bl	801f414 <rcl_wait_set_is_valid>
 8018f90:	b110      	cbz	r0, 8018f98 <rclc_executor_prepare+0x1c>
 8018f92:	2000      	movs	r0, #0
 8018f94:	b01b      	add	sp, #108	@ 0x6c
 8018f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f98:	4628      	mov	r0, r5
 8018f9a:	f006 fa41 	bl	801f420 <rcl_wait_set_fini>
 8018f9e:	2800      	cmp	r0, #0
 8018fa0:	d130      	bne.n	8019004 <rclc_executor_prepare+0x88>
 8018fa2:	a80c      	add	r0, sp, #48	@ 0x30
 8018fa4:	ae04      	add	r6, sp, #16
 8018fa6:	f006 fa21 	bl	801f3ec <rcl_get_zero_initialized_wait_set>
 8018faa:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8018fae:	46ae      	mov	lr, r5
 8018fb0:	6927      	ldr	r7, [r4, #16]
 8018fb2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018fb6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018fba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018fbe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018fc2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018fc6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018fca:	f8dc 3000 	ldr.w	r3, [ip]
 8018fce:	f8ce 3000 	str.w	r3, [lr]
 8018fd2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8018fd4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8018fd6:	683b      	ldr	r3, [r7, #0]
 8018fd8:	4628      	mov	r0, r5
 8018fda:	6822      	ldr	r2, [r4, #0]
 8018fdc:	6033      	str	r3, [r6, #0]
 8018fde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018fe0:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8018fe2:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8018fe6:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 8018fea:	e9cd 2100 	strd	r2, r1, [sp]
 8018fee:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8018ff0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8018ff2:	f006 fd15 	bl	801fa20 <rcl_wait_set_init>
 8018ff6:	2800      	cmp	r0, #0
 8018ff8:	d0cc      	beq.n	8018f94 <rclc_executor_prepare+0x18>
 8018ffa:	900b      	str	r0, [sp, #44]	@ 0x2c
 8018ffc:	f000 fb20 	bl	8019640 <rcutils_reset_error>
 8019000:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8019002:	e7c7      	b.n	8018f94 <rclc_executor_prepare+0x18>
 8019004:	f000 fb1c 	bl	8019640 <rcutils_reset_error>
 8019008:	e7cb      	b.n	8018fa2 <rclc_executor_prepare+0x26>
 801900a:	200b      	movs	r0, #11
 801900c:	4770      	bx	lr
 801900e:	bf00      	nop

08019010 <rclc_executor_spin_some.part.0>:
 8019010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019014:	4605      	mov	r5, r0
 8019016:	4691      	mov	r9, r2
 8019018:	4698      	mov	r8, r3
 801901a:	f7ff ffaf 	bl	8018f7c <rclc_executor_prepare>
 801901e:	f105 0614 	add.w	r6, r5, #20
 8019022:	4630      	mov	r0, r6
 8019024:	f006 fac8 	bl	801f5b8 <rcl_wait_set_clear>
 8019028:	4607      	mov	r7, r0
 801902a:	2800      	cmp	r0, #0
 801902c:	f040 80a8 	bne.w	8019180 <rclc_executor_spin_some.part.0+0x170>
 8019030:	68ab      	ldr	r3, [r5, #8]
 8019032:	b30b      	cbz	r3, 8019078 <rclc_executor_spin_some.part.0+0x68>
 8019034:	4604      	mov	r4, r0
 8019036:	6869      	ldr	r1, [r5, #4]
 8019038:	01a2      	lsls	r2, r4, #6
 801903a:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 801903e:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8019042:	b1cb      	cbz	r3, 8019078 <rclc_executor_spin_some.part.0+0x68>
 8019044:	5c8b      	ldrb	r3, [r1, r2]
 8019046:	2b0a      	cmp	r3, #10
 8019048:	f200 80de 	bhi.w	8019208 <rclc_executor_spin_some.part.0+0x1f8>
 801904c:	e8df f003 	tbb	[pc, r3]
 8019050:	8da99d9d 	.word	0x8da99d9d
 8019054:	0606068d 	.word	0x0606068d
 8019058:	c1ce      	.short	0xc1ce
 801905a:	b5          	.byte	0xb5
 801905b:	00          	.byte	0x00
 801905c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8019060:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8019064:	4630      	mov	r0, r6
 8019066:	f006 fdf7 	bl	801fc58 <rcl_wait_set_add_service>
 801906a:	2800      	cmp	r0, #0
 801906c:	f040 8087 	bne.w	801917e <rclc_executor_spin_some.part.0+0x16e>
 8019070:	3401      	adds	r4, #1
 8019072:	68ab      	ldr	r3, [r5, #8]
 8019074:	429c      	cmp	r4, r3
 8019076:	d3de      	bcc.n	8019036 <rclc_executor_spin_some.part.0+0x26>
 8019078:	4643      	mov	r3, r8
 801907a:	464a      	mov	r2, r9
 801907c:	4630      	mov	r0, r6
 801907e:	f006 fe17 	bl	801fcb0 <rcl_wait>
 8019082:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 8019086:	2b00      	cmp	r3, #0
 8019088:	f000 80c6 	beq.w	8019218 <rclc_executor_spin_some.part.0+0x208>
 801908c:	2b01      	cmp	r3, #1
 801908e:	f040 80bb 	bne.w	8019208 <rclc_executor_spin_some.part.0+0x1f8>
 8019092:	68ab      	ldr	r3, [r5, #8]
 8019094:	2b00      	cmp	r3, #0
 8019096:	f000 8159 	beq.w	801934c <rclc_executor_spin_some.part.0+0x33c>
 801909a:	2400      	movs	r4, #0
 801909c:	f240 1991 	movw	r9, #401	@ 0x191
 80190a0:	46a0      	mov	r8, r4
 80190a2:	e00a      	b.n	80190ba <rclc_executor_spin_some.part.0+0xaa>
 80190a4:	f7ff fb68 	bl	8018778 <_rclc_check_for_new_data>
 80190a8:	4604      	mov	r4, r0
 80190aa:	b110      	cbz	r0, 80190b2 <rclc_executor_spin_some.part.0+0xa2>
 80190ac:	4548      	cmp	r0, r9
 80190ae:	f040 80b1 	bne.w	8019214 <rclc_executor_spin_some.part.0+0x204>
 80190b2:	68ab      	ldr	r3, [r5, #8]
 80190b4:	4598      	cmp	r8, r3
 80190b6:	f080 8126 	bcs.w	8019306 <rclc_executor_spin_some.part.0+0x2f6>
 80190ba:	686a      	ldr	r2, [r5, #4]
 80190bc:	4631      	mov	r1, r6
 80190be:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 80190c2:	f108 0801 	add.w	r8, r8, #1
 80190c6:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 80190ca:	f1bc 0f00 	cmp.w	ip, #0
 80190ce:	d1e9      	bne.n	80190a4 <rclc_executor_spin_some.part.0+0x94>
 80190d0:	4619      	mov	r1, r3
 80190d2:	4610      	mov	r0, r2
 80190d4:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 80190d8:	4798      	blx	r3
 80190da:	2800      	cmp	r0, #0
 80190dc:	f000 809a 	beq.w	8019214 <rclc_executor_spin_some.part.0+0x204>
 80190e0:	68ab      	ldr	r3, [r5, #8]
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	f000 8096 	beq.w	8019214 <rclc_executor_spin_some.part.0+0x204>
 80190e8:	f04f 0800 	mov.w	r8, #0
 80190ec:	f240 1991 	movw	r9, #401	@ 0x191
 80190f0:	e009      	b.n	8019106 <rclc_executor_spin_some.part.0+0xf6>
 80190f2:	f7ff fb8f 	bl	8018814 <_rclc_take_new_data>
 80190f6:	4604      	mov	r4, r0
 80190f8:	b110      	cbz	r0, 8019100 <rclc_executor_spin_some.part.0+0xf0>
 80190fa:	4548      	cmp	r0, r9
 80190fc:	f040 808a 	bne.w	8019214 <rclc_executor_spin_some.part.0+0x204>
 8019100:	68ab      	ldr	r3, [r5, #8]
 8019102:	4598      	cmp	r8, r3
 8019104:	d209      	bcs.n	801911a <rclc_executor_spin_some.part.0+0x10a>
 8019106:	6868      	ldr	r0, [r5, #4]
 8019108:	4631      	mov	r1, r6
 801910a:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 801910e:	f108 0801 	add.w	r8, r8, #1
 8019112:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8019116:	2a00      	cmp	r2, #0
 8019118:	d1eb      	bne.n	80190f2 <rclc_executor_spin_some.part.0+0xe2>
 801911a:	2b00      	cmp	r3, #0
 801911c:	d07a      	beq.n	8019214 <rclc_executor_spin_some.part.0+0x204>
 801911e:	2600      	movs	r6, #0
 8019120:	e00e      	b.n	8019140 <rclc_executor_spin_some.part.0+0x130>
 8019122:	f812 200c 	ldrb.w	r2, [r2, ip]
 8019126:	2a08      	cmp	r2, #8
 8019128:	f000 80fc 	beq.w	8019324 <rclc_executor_spin_some.part.0+0x314>
 801912c:	2a09      	cmp	r2, #9
 801912e:	f000 80ee 	beq.w	801930e <rclc_executor_spin_some.part.0+0x2fe>
 8019132:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 8019136:	b98a      	cbnz	r2, 801915c <rclc_executor_spin_some.part.0+0x14c>
 8019138:	3601      	adds	r6, #1
 801913a:	429e      	cmp	r6, r3
 801913c:	d267      	bcs.n	801920e <rclc_executor_spin_some.part.0+0x1fe>
 801913e:	2400      	movs	r4, #0
 8019140:	686a      	ldr	r2, [r5, #4]
 8019142:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8019146:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 801914a:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 801914e:	2900      	cmp	r1, #0
 8019150:	d060      	beq.n	8019214 <rclc_executor_spin_some.part.0+0x204>
 8019152:	7841      	ldrb	r1, [r0, #1]
 8019154:	2900      	cmp	r1, #0
 8019156:	d0e4      	beq.n	8019122 <rclc_executor_spin_some.part.0+0x112>
 8019158:	2901      	cmp	r1, #1
 801915a:	d1ed      	bne.n	8019138 <rclc_executor_spin_some.part.0+0x128>
 801915c:	f7ff fcce 	bl	8018afc <_rclc_execute.part.0>
 8019160:	2800      	cmp	r0, #0
 8019162:	f040 80b5 	bne.w	80192d0 <rclc_executor_spin_some.part.0+0x2c0>
 8019166:	68ab      	ldr	r3, [r5, #8]
 8019168:	e7e6      	b.n	8019138 <rclc_executor_spin_some.part.0+0x128>
 801916a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801916e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8019172:	4630      	mov	r0, r6
 8019174:	f006 fd44 	bl	801fc00 <rcl_wait_set_add_client>
 8019178:	2800      	cmp	r0, #0
 801917a:	f43f af79 	beq.w	8019070 <rclc_executor_spin_some.part.0+0x60>
 801917e:	4607      	mov	r7, r0
 8019180:	f000 fa5e 	bl	8019640 <rcutils_reset_error>
 8019184:	4638      	mov	r0, r7
 8019186:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801918a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801918e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8019192:	4630      	mov	r0, r6
 8019194:	f006 f9e4 	bl	801f560 <rcl_wait_set_add_subscription>
 8019198:	2800      	cmp	r0, #0
 801919a:	f43f af69 	beq.w	8019070 <rclc_executor_spin_some.part.0+0x60>
 801919e:	4607      	mov	r7, r0
 80191a0:	e7ee      	b.n	8019180 <rclc_executor_spin_some.part.0+0x170>
 80191a2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80191a6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80191aa:	4630      	mov	r0, r6
 80191ac:	f006 fcf8 	bl	801fba0 <rcl_wait_set_add_timer>
 80191b0:	2800      	cmp	r0, #0
 80191b2:	f43f af5d 	beq.w	8019070 <rclc_executor_spin_some.part.0+0x60>
 80191b6:	4607      	mov	r7, r0
 80191b8:	e7e2      	b.n	8019180 <rclc_executor_spin_some.part.0+0x170>
 80191ba:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80191be:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80191c2:	4630      	mov	r0, r6
 80191c4:	f006 fcc0 	bl	801fb48 <rcl_wait_set_add_guard_condition>
 80191c8:	2800      	cmp	r0, #0
 80191ca:	f43f af51 	beq.w	8019070 <rclc_executor_spin_some.part.0+0x60>
 80191ce:	4607      	mov	r7, r0
 80191d0:	e7d6      	b.n	8019180 <rclc_executor_spin_some.part.0+0x170>
 80191d2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80191d6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80191da:	4630      	mov	r0, r6
 80191dc:	3110      	adds	r1, #16
 80191de:	f007 fa3d 	bl	802065c <rcl_action_wait_set_add_action_server>
 80191e2:	2800      	cmp	r0, #0
 80191e4:	f43f af44 	beq.w	8019070 <rclc_executor_spin_some.part.0+0x60>
 80191e8:	4607      	mov	r7, r0
 80191ea:	e7c9      	b.n	8019180 <rclc_executor_spin_some.part.0+0x170>
 80191ec:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80191f0:	2300      	movs	r3, #0
 80191f2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80191f6:	4630      	mov	r0, r6
 80191f8:	3110      	adds	r1, #16
 80191fa:	f007 f805 	bl	8020208 <rcl_action_wait_set_add_action_client>
 80191fe:	2800      	cmp	r0, #0
 8019200:	f43f af36 	beq.w	8019070 <rclc_executor_spin_some.part.0+0x60>
 8019204:	4607      	mov	r7, r0
 8019206:	e7bb      	b.n	8019180 <rclc_executor_spin_some.part.0+0x170>
 8019208:	2701      	movs	r7, #1
 801920a:	f000 fa19 	bl	8019640 <rcutils_reset_error>
 801920e:	4638      	mov	r0, r7
 8019210:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019214:	4627      	mov	r7, r4
 8019216:	e7fa      	b.n	801920e <rclc_executor_spin_some.part.0+0x1fe>
 8019218:	68ab      	ldr	r3, [r5, #8]
 801921a:	2b00      	cmp	r3, #0
 801921c:	f000 8093 	beq.w	8019346 <rclc_executor_spin_some.part.0+0x336>
 8019220:	2400      	movs	r4, #0
 8019222:	f240 1991 	movw	r9, #401	@ 0x191
 8019226:	46a0      	mov	r8, r4
 8019228:	e008      	b.n	801923c <rclc_executor_spin_some.part.0+0x22c>
 801922a:	f7ff faa5 	bl	8018778 <_rclc_check_for_new_data>
 801922e:	4604      	mov	r4, r0
 8019230:	b108      	cbz	r0, 8019236 <rclc_executor_spin_some.part.0+0x226>
 8019232:	4548      	cmp	r0, r9
 8019234:	d1ee      	bne.n	8019214 <rclc_executor_spin_some.part.0+0x204>
 8019236:	68ab      	ldr	r3, [r5, #8]
 8019238:	4598      	cmp	r8, r3
 801923a:	d266      	bcs.n	801930a <rclc_executor_spin_some.part.0+0x2fa>
 801923c:	686a      	ldr	r2, [r5, #4]
 801923e:	4631      	mov	r1, r6
 8019240:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8019244:	f108 0801 	add.w	r8, r8, #1
 8019248:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 801924c:	f1bc 0f00 	cmp.w	ip, #0
 8019250:	d1eb      	bne.n	801922a <rclc_executor_spin_some.part.0+0x21a>
 8019252:	4619      	mov	r1, r3
 8019254:	4610      	mov	r0, r2
 8019256:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 801925a:	4798      	blx	r3
 801925c:	2800      	cmp	r0, #0
 801925e:	d0d9      	beq.n	8019214 <rclc_executor_spin_some.part.0+0x204>
 8019260:	68ab      	ldr	r3, [r5, #8]
 8019262:	2b00      	cmp	r3, #0
 8019264:	d0d6      	beq.n	8019214 <rclc_executor_spin_some.part.0+0x204>
 8019266:	f04f 0a00 	mov.w	sl, #0
 801926a:	f240 1891 	movw	r8, #401	@ 0x191
 801926e:	f240 2959 	movw	r9, #601	@ 0x259
 8019272:	e00e      	b.n	8019292 <rclc_executor_spin_some.part.0+0x282>
 8019274:	f813 300b 	ldrb.w	r3, [r3, fp]
 8019278:	2b08      	cmp	r3, #8
 801927a:	d034      	beq.n	80192e6 <rclc_executor_spin_some.part.0+0x2d6>
 801927c:	2b09      	cmp	r3, #9
 801927e:	d029      	beq.n	80192d4 <rclc_executor_spin_some.part.0+0x2c4>
 8019280:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8019284:	bb03      	cbnz	r3, 80192c8 <rclc_executor_spin_some.part.0+0x2b8>
 8019286:	f10a 0a01 	add.w	sl, sl, #1
 801928a:	68ab      	ldr	r3, [r5, #8]
 801928c:	459a      	cmp	sl, r3
 801928e:	d2be      	bcs.n	801920e <rclc_executor_spin_some.part.0+0x1fe>
 8019290:	2400      	movs	r4, #0
 8019292:	6868      	ldr	r0, [r5, #4]
 8019294:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8019298:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 801929c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d0b7      	beq.n	8019214 <rclc_executor_spin_some.part.0+0x204>
 80192a4:	4631      	mov	r1, r6
 80192a6:	f7ff fab5 	bl	8018814 <_rclc_take_new_data>
 80192aa:	2800      	cmp	r0, #0
 80192ac:	bf18      	it	ne
 80192ae:	4540      	cmpne	r0, r8
 80192b0:	d001      	beq.n	80192b6 <rclc_executor_spin_some.part.0+0x2a6>
 80192b2:	4548      	cmp	r0, r9
 80192b4:	d10c      	bne.n	80192d0 <rclc_executor_spin_some.part.0+0x2c0>
 80192b6:	686b      	ldr	r3, [r5, #4]
 80192b8:	eb13 000b 	adds.w	r0, r3, fp
 80192bc:	d021      	beq.n	8019302 <rclc_executor_spin_some.part.0+0x2f2>
 80192be:	7842      	ldrb	r2, [r0, #1]
 80192c0:	2a00      	cmp	r2, #0
 80192c2:	d0d7      	beq.n	8019274 <rclc_executor_spin_some.part.0+0x264>
 80192c4:	2a01      	cmp	r2, #1
 80192c6:	d1de      	bne.n	8019286 <rclc_executor_spin_some.part.0+0x276>
 80192c8:	f7ff fc18 	bl	8018afc <_rclc_execute.part.0>
 80192cc:	2800      	cmp	r0, #0
 80192ce:	d0da      	beq.n	8019286 <rclc_executor_spin_some.part.0+0x276>
 80192d0:	4607      	mov	r7, r0
 80192d2:	e79c      	b.n	801920e <rclc_executor_spin_some.part.0+0x1fe>
 80192d4:	6843      	ldr	r3, [r0, #4]
 80192d6:	6a1a      	ldr	r2, [r3, #32]
 80192d8:	2a00      	cmp	r2, #0
 80192da:	d1f5      	bne.n	80192c8 <rclc_executor_spin_some.part.0+0x2b8>
 80192dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d0d0      	beq.n	8019286 <rclc_executor_spin_some.part.0+0x276>
 80192e4:	e7f0      	b.n	80192c8 <rclc_executor_spin_some.part.0+0x2b8>
 80192e6:	6843      	ldr	r3, [r0, #4]
 80192e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80192ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80192ee:	d1eb      	bne.n	80192c8 <rclc_executor_spin_some.part.0+0x2b8>
 80192f0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80192f4:	2a00      	cmp	r2, #0
 80192f6:	d1e7      	bne.n	80192c8 <rclc_executor_spin_some.part.0+0x2b8>
 80192f8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	d0c2      	beq.n	8019286 <rclc_executor_spin_some.part.0+0x276>
 8019300:	e7e2      	b.n	80192c8 <rclc_executor_spin_some.part.0+0x2b8>
 8019302:	270b      	movs	r7, #11
 8019304:	e783      	b.n	801920e <rclc_executor_spin_some.part.0+0x1fe>
 8019306:	686a      	ldr	r2, [r5, #4]
 8019308:	e6e2      	b.n	80190d0 <rclc_executor_spin_some.part.0+0xc0>
 801930a:	686a      	ldr	r2, [r5, #4]
 801930c:	e7a1      	b.n	8019252 <rclc_executor_spin_some.part.0+0x242>
 801930e:	6842      	ldr	r2, [r0, #4]
 8019310:	6a11      	ldr	r1, [r2, #32]
 8019312:	2900      	cmp	r1, #0
 8019314:	f47f af22 	bne.w	801915c <rclc_executor_spin_some.part.0+0x14c>
 8019318:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 801931c:	2a00      	cmp	r2, #0
 801931e:	f43f af0b 	beq.w	8019138 <rclc_executor_spin_some.part.0+0x128>
 8019322:	e71b      	b.n	801915c <rclc_executor_spin_some.part.0+0x14c>
 8019324:	6842      	ldr	r2, [r0, #4]
 8019326:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8019328:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 801932c:	f47f af16 	bne.w	801915c <rclc_executor_spin_some.part.0+0x14c>
 8019330:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 8019334:	2900      	cmp	r1, #0
 8019336:	f47f af11 	bne.w	801915c <rclc_executor_spin_some.part.0+0x14c>
 801933a:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 801933e:	2a00      	cmp	r2, #0
 8019340:	f43f aefa 	beq.w	8019138 <rclc_executor_spin_some.part.0+0x128>
 8019344:	e70a      	b.n	801915c <rclc_executor_spin_some.part.0+0x14c>
 8019346:	686a      	ldr	r2, [r5, #4]
 8019348:	461c      	mov	r4, r3
 801934a:	e782      	b.n	8019252 <rclc_executor_spin_some.part.0+0x242>
 801934c:	686a      	ldr	r2, [r5, #4]
 801934e:	461c      	mov	r4, r3
 8019350:	e6be      	b.n	80190d0 <rclc_executor_spin_some.part.0+0xc0>
 8019352:	bf00      	nop

08019354 <rclc_executor_spin_some>:
 8019354:	b190      	cbz	r0, 801937c <rclc_executor_spin_some+0x28>
 8019356:	b570      	push	{r4, r5, r6, lr}
 8019358:	4604      	mov	r4, r0
 801935a:	6800      	ldr	r0, [r0, #0]
 801935c:	4616      	mov	r6, r2
 801935e:	461d      	mov	r5, r3
 8019360:	f004 ffe6 	bl	801e330 <rcl_context_is_valid>
 8019364:	b130      	cbz	r0, 8019374 <rclc_executor_spin_some+0x20>
 8019366:	4632      	mov	r2, r6
 8019368:	462b      	mov	r3, r5
 801936a:	4620      	mov	r0, r4
 801936c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019370:	f7ff be4e 	b.w	8019010 <rclc_executor_spin_some.part.0>
 8019374:	f000 f964 	bl	8019640 <rcutils_reset_error>
 8019378:	2001      	movs	r0, #1
 801937a:	bd70      	pop	{r4, r5, r6, pc}
 801937c:	200b      	movs	r0, #11
 801937e:	4770      	bx	lr

08019380 <rclc_executor_handle_counters_zero_init>:
 8019380:	b130      	cbz	r0, 8019390 <rclc_executor_handle_counters_zero_init+0x10>
 8019382:	2220      	movs	r2, #32
 8019384:	2100      	movs	r1, #0
 8019386:	b508      	push	{r3, lr}
 8019388:	f00c fa24 	bl	80257d4 <memset>
 801938c:	2000      	movs	r0, #0
 801938e:	bd08      	pop	{r3, pc}
 8019390:	200b      	movs	r0, #11
 8019392:	4770      	bx	lr
 8019394:	0000      	movs	r0, r0
	...

08019398 <rclc_executor_handle_init>:
 8019398:	4603      	mov	r3, r0
 801939a:	b178      	cbz	r0, 80193bc <rclc_executor_handle_init+0x24>
 801939c:	2200      	movs	r2, #0
 801939e:	f04f 0c0b 	mov.w	ip, #11
 80193a2:	6341      	str	r1, [r0, #52]	@ 0x34
 80193a4:	4610      	mov	r0, r2
 80193a6:	f8a3 c000 	strh.w	ip, [r3]
 80193aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80193ac:	871a      	strh	r2, [r3, #56]	@ 0x38
 80193ae:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 80193c0 <rclc_executor_handle_init+0x28>
 80193b2:	e9c3 2201 	strd	r2, r2, [r3, #4]
 80193b6:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 80193ba:	4770      	bx	lr
 80193bc:	200b      	movs	r0, #11
 80193be:	4770      	bx	lr
	...

080193c8 <rclc_support_init>:
 80193c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80193cc:	b086      	sub	sp, #24
 80193ce:	b3bb      	cbz	r3, 8019440 <rclc_support_init+0x78>
 80193d0:	4606      	mov	r6, r0
 80193d2:	b3a8      	cbz	r0, 8019440 <rclc_support_init+0x78>
 80193d4:	461c      	mov	r4, r3
 80193d6:	460f      	mov	r7, r1
 80193d8:	4690      	mov	r8, r2
 80193da:	f005 f8ff 	bl	801e5dc <rcl_get_zero_initialized_init_options>
 80193de:	f104 050c 	add.w	r5, r4, #12
 80193e2:	9005      	str	r0, [sp, #20]
 80193e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80193e8:	e88d 0003 	stmia.w	sp, {r0, r1}
 80193ec:	a805      	add	r0, sp, #20
 80193ee:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80193f2:	f005 f8f5 	bl	801e5e0 <rcl_init_options_init>
 80193f6:	4605      	mov	r5, r0
 80193f8:	b9e0      	cbnz	r0, 8019434 <rclc_support_init+0x6c>
 80193fa:	ad02      	add	r5, sp, #8
 80193fc:	4628      	mov	r0, r5
 80193fe:	f004 ff8d 	bl	801e31c <rcl_get_zero_initialized_context>
 8019402:	4633      	mov	r3, r6
 8019404:	aa05      	add	r2, sp, #20
 8019406:	e895 0003 	ldmia.w	r5, {r0, r1}
 801940a:	e886 0003 	stmia.w	r6, {r0, r1}
 801940e:	4641      	mov	r1, r8
 8019410:	4638      	mov	r0, r7
 8019412:	f004 fff3 	bl	801e3fc <rcl_init>
 8019416:	4605      	mov	r5, r0
 8019418:	b9b8      	cbnz	r0, 801944a <rclc_support_init+0x82>
 801941a:	4622      	mov	r2, r4
 801941c:	f106 010c 	add.w	r1, r6, #12
 8019420:	2003      	movs	r0, #3
 8019422:	60b4      	str	r4, [r6, #8]
 8019424:	f005 fe46 	bl	801f0b4 <rcl_clock_init>
 8019428:	4605      	mov	r5, r0
 801942a:	b970      	cbnz	r0, 801944a <rclc_support_init+0x82>
 801942c:	a805      	add	r0, sp, #20
 801942e:	f005 f93d 	bl	801e6ac <rcl_init_options_fini>
 8019432:	b108      	cbz	r0, 8019438 <rclc_support_init+0x70>
 8019434:	f000 f904 	bl	8019640 <rcutils_reset_error>
 8019438:	4628      	mov	r0, r5
 801943a:	b006      	add	sp, #24
 801943c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019440:	250b      	movs	r5, #11
 8019442:	4628      	mov	r0, r5
 8019444:	b006      	add	sp, #24
 8019446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801944a:	f000 f8f9 	bl	8019640 <rcutils_reset_error>
 801944e:	a805      	add	r0, sp, #20
 8019450:	f005 f92c 	bl	801e6ac <rcl_init_options_fini>
 8019454:	2800      	cmp	r0, #0
 8019456:	d0ef      	beq.n	8019438 <rclc_support_init+0x70>
 8019458:	e7ec      	b.n	8019434 <rclc_support_init+0x6c>
 801945a:	bf00      	nop

0801945c <rclc_node_init_default>:
 801945c:	2b00      	cmp	r3, #0
 801945e:	bf18      	it	ne
 8019460:	2a00      	cmpne	r2, #0
 8019462:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019466:	4616      	mov	r6, r2
 8019468:	bf0c      	ite	eq
 801946a:	2201      	moveq	r2, #1
 801946c:	2200      	movne	r2, #0
 801946e:	b0a1      	sub	sp, #132	@ 0x84
 8019470:	2900      	cmp	r1, #0
 8019472:	bf08      	it	eq
 8019474:	f042 0201 	orreq.w	r2, r2, #1
 8019478:	bb22      	cbnz	r2, 80194c4 <rclc_node_init_default+0x68>
 801947a:	4604      	mov	r4, r0
 801947c:	b310      	cbz	r0, 80194c4 <rclc_node_init_default+0x68>
 801947e:	f10d 0810 	add.w	r8, sp, #16
 8019482:	461f      	mov	r7, r3
 8019484:	460d      	mov	r5, r1
 8019486:	f10d 0918 	add.w	r9, sp, #24
 801948a:	4640      	mov	r0, r8
 801948c:	f005 f9c8 	bl	801e820 <rcl_get_zero_initialized_node>
 8019490:	e898 0003 	ldmia.w	r8, {r0, r1}
 8019494:	e884 0003 	stmia.w	r4, {r0, r1}
 8019498:	4648      	mov	r0, r9
 801949a:	f005 fb3b 	bl	801eb14 <rcl_node_get_default_options>
 801949e:	4640      	mov	r0, r8
 80194a0:	f005 f9be 	bl	801e820 <rcl_get_zero_initialized_node>
 80194a4:	f8cd 9000 	str.w	r9, [sp]
 80194a8:	463b      	mov	r3, r7
 80194aa:	4632      	mov	r2, r6
 80194ac:	e898 0003 	ldmia.w	r8, {r0, r1}
 80194b0:	e884 0003 	stmia.w	r4, {r0, r1}
 80194b4:	4629      	mov	r1, r5
 80194b6:	4620      	mov	r0, r4
 80194b8:	f005 f9bc 	bl	801e834 <rcl_node_init>
 80194bc:	b930      	cbnz	r0, 80194cc <rclc_node_init_default+0x70>
 80194be:	b021      	add	sp, #132	@ 0x84
 80194c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194c4:	200b      	movs	r0, #11
 80194c6:	b021      	add	sp, #132	@ 0x84
 80194c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194cc:	9003      	str	r0, [sp, #12]
 80194ce:	f000 f8b7 	bl	8019640 <rcutils_reset_error>
 80194d2:	f000 f8b5 	bl	8019640 <rcutils_reset_error>
 80194d6:	9803      	ldr	r0, [sp, #12]
 80194d8:	b021      	add	sp, #132	@ 0x84
 80194da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194de:	bf00      	nop

080194e0 <rclc_publisher_init_default>:
 80194e0:	2b00      	cmp	r3, #0
 80194e2:	bf18      	it	ne
 80194e4:	2a00      	cmpne	r2, #0
 80194e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194ea:	4616      	mov	r6, r2
 80194ec:	bf0c      	ite	eq
 80194ee:	2201      	moveq	r2, #1
 80194f0:	2200      	movne	r2, #0
 80194f2:	b0a0      	sub	sp, #128	@ 0x80
 80194f4:	2900      	cmp	r1, #0
 80194f6:	bf08      	it	eq
 80194f8:	f042 0201 	orreq.w	r2, r2, #1
 80194fc:	bb1a      	cbnz	r2, 8019546 <rclc_publisher_init_default+0x66>
 80194fe:	4604      	mov	r4, r0
 8019500:	b308      	cbz	r0, 8019546 <rclc_publisher_init_default+0x66>
 8019502:	f10d 0810 	add.w	r8, sp, #16
 8019506:	461f      	mov	r7, r3
 8019508:	460d      	mov	r5, r1
 801950a:	f7ff f821 	bl	8018550 <rcl_get_zero_initialized_publisher>
 801950e:	6020      	str	r0, [r4, #0]
 8019510:	4640      	mov	r0, r8
 8019512:	f7ff f8bd 	bl	8018690 <rcl_publisher_get_default_options>
 8019516:	2250      	movs	r2, #80	@ 0x50
 8019518:	490d      	ldr	r1, [pc, #52]	@ (8019550 <rclc_publisher_init_default+0x70>)
 801951a:	4640      	mov	r0, r8
 801951c:	f00c fa81 	bl	8025a22 <memcpy>
 8019520:	463b      	mov	r3, r7
 8019522:	4632      	mov	r2, r6
 8019524:	4629      	mov	r1, r5
 8019526:	4620      	mov	r0, r4
 8019528:	f8cd 8000 	str.w	r8, [sp]
 801952c:	f7ff f816 	bl	801855c <rcl_publisher_init>
 8019530:	b910      	cbnz	r0, 8019538 <rclc_publisher_init_default+0x58>
 8019532:	b020      	add	sp, #128	@ 0x80
 8019534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019538:	9003      	str	r0, [sp, #12]
 801953a:	f000 f881 	bl	8019640 <rcutils_reset_error>
 801953e:	9803      	ldr	r0, [sp, #12]
 8019540:	b020      	add	sp, #128	@ 0x80
 8019542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019546:	200b      	movs	r0, #11
 8019548:	b020      	add	sp, #128	@ 0x80
 801954a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801954e:	bf00      	nop
 8019550:	0802a3e8 	.word	0x0802a3e8

08019554 <rclc_subscription_init_default>:
 8019554:	2b00      	cmp	r3, #0
 8019556:	bf18      	it	ne
 8019558:	2a00      	cmpne	r2, #0
 801955a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801955e:	4616      	mov	r6, r2
 8019560:	bf0c      	ite	eq
 8019562:	2201      	moveq	r2, #1
 8019564:	2200      	movne	r2, #0
 8019566:	b0a0      	sub	sp, #128	@ 0x80
 8019568:	2900      	cmp	r1, #0
 801956a:	bf08      	it	eq
 801956c:	f042 0201 	orreq.w	r2, r2, #1
 8019570:	bb1a      	cbnz	r2, 80195ba <rclc_subscription_init_default+0x66>
 8019572:	4604      	mov	r4, r0
 8019574:	b308      	cbz	r0, 80195ba <rclc_subscription_init_default+0x66>
 8019576:	f10d 0810 	add.w	r8, sp, #16
 801957a:	461f      	mov	r7, r3
 801957c:	460d      	mov	r5, r1
 801957e:	f005 fc37 	bl	801edf0 <rcl_get_zero_initialized_subscription>
 8019582:	6020      	str	r0, [r4, #0]
 8019584:	4640      	mov	r0, r8
 8019586:	f005 fce7 	bl	801ef58 <rcl_subscription_get_default_options>
 801958a:	2250      	movs	r2, #80	@ 0x50
 801958c:	490d      	ldr	r1, [pc, #52]	@ (80195c4 <rclc_subscription_init_default+0x70>)
 801958e:	4640      	mov	r0, r8
 8019590:	f00c fa47 	bl	8025a22 <memcpy>
 8019594:	463b      	mov	r3, r7
 8019596:	4632      	mov	r2, r6
 8019598:	4629      	mov	r1, r5
 801959a:	4620      	mov	r0, r4
 801959c:	f8cd 8000 	str.w	r8, [sp]
 80195a0:	f005 fc2c 	bl	801edfc <rcl_subscription_init>
 80195a4:	b910      	cbnz	r0, 80195ac <rclc_subscription_init_default+0x58>
 80195a6:	b020      	add	sp, #128	@ 0x80
 80195a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195ac:	9003      	str	r0, [sp, #12]
 80195ae:	f000 f847 	bl	8019640 <rcutils_reset_error>
 80195b2:	9803      	ldr	r0, [sp, #12]
 80195b4:	b020      	add	sp, #128	@ 0x80
 80195b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195ba:	200b      	movs	r0, #11
 80195bc:	b020      	add	sp, #128	@ 0x80
 80195be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195c2:	bf00      	nop
 80195c4:	0802a438 	.word	0x0802a438

080195c8 <__default_zero_allocate>:
 80195c8:	f00b bb90 	b.w	8024cec <calloc>

080195cc <__default_reallocate>:
 80195cc:	f00b bd2e 	b.w	802502c <realloc>

080195d0 <__default_deallocate>:
 80195d0:	f00b bc0a 	b.w	8024de8 <free>

080195d4 <__default_allocate>:
 80195d4:	f00b bc00 	b.w	8024dd8 <malloc>

080195d8 <rcutils_get_default_allocator>:
 80195d8:	b510      	push	{r4, lr}
 80195da:	4c05      	ldr	r4, [pc, #20]	@ (80195f0 <rcutils_get_default_allocator+0x18>)
 80195dc:	4686      	mov	lr, r0
 80195de:	4684      	mov	ip, r0
 80195e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80195e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80195e6:	6823      	ldr	r3, [r4, #0]
 80195e8:	4670      	mov	r0, lr
 80195ea:	f8cc 3000 	str.w	r3, [ip]
 80195ee:	bd10      	pop	{r4, pc}
 80195f0:	20000038 	.word	0x20000038

080195f4 <rcutils_allocator_is_valid>:
 80195f4:	b158      	cbz	r0, 801960e <rcutils_allocator_is_valid+0x1a>
 80195f6:	6803      	ldr	r3, [r0, #0]
 80195f8:	b143      	cbz	r3, 801960c <rcutils_allocator_is_valid+0x18>
 80195fa:	6843      	ldr	r3, [r0, #4]
 80195fc:	b133      	cbz	r3, 801960c <rcutils_allocator_is_valid+0x18>
 80195fe:	68c3      	ldr	r3, [r0, #12]
 8019600:	b123      	cbz	r3, 801960c <rcutils_allocator_is_valid+0x18>
 8019602:	6880      	ldr	r0, [r0, #8]
 8019604:	3800      	subs	r0, #0
 8019606:	bf18      	it	ne
 8019608:	2001      	movne	r0, #1
 801960a:	4770      	bx	lr
 801960c:	4618      	mov	r0, r3
 801960e:	4770      	bx	lr

08019610 <rcutils_get_error_string>:
 8019610:	4b06      	ldr	r3, [pc, #24]	@ (801962c <rcutils_get_error_string+0x1c>)
 8019612:	781b      	ldrb	r3, [r3, #0]
 8019614:	b13b      	cbz	r3, 8019626 <rcutils_get_error_string+0x16>
 8019616:	4b06      	ldr	r3, [pc, #24]	@ (8019630 <rcutils_get_error_string+0x20>)
 8019618:	781a      	ldrb	r2, [r3, #0]
 801961a:	b90a      	cbnz	r2, 8019620 <rcutils_get_error_string+0x10>
 801961c:	2201      	movs	r2, #1
 801961e:	701a      	strb	r2, [r3, #0]
 8019620:	4b04      	ldr	r3, [pc, #16]	@ (8019634 <rcutils_get_error_string+0x24>)
 8019622:	7818      	ldrb	r0, [r3, #0]
 8019624:	4770      	bx	lr
 8019626:	4b04      	ldr	r3, [pc, #16]	@ (8019638 <rcutils_get_error_string+0x28>)
 8019628:	7818      	ldrb	r0, [r3, #0]
 801962a:	4770      	bx	lr
 801962c:	20010050 	.word	0x20010050
 8019630:	20010069 	.word	0x20010069
 8019634:	20010068 	.word	0x20010068
 8019638:	0802a488 	.word	0x0802a488
 801963c:	00000000 	.word	0x00000000

08019640 <rcutils_reset_error>:
 8019640:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8019660 <rcutils_reset_error+0x20>
 8019644:	2300      	movs	r3, #0
 8019646:	4a08      	ldr	r2, [pc, #32]	@ (8019668 <rcutils_reset_error+0x28>)
 8019648:	4808      	ldr	r0, [pc, #32]	@ (801966c <rcutils_reset_error+0x2c>)
 801964a:	8013      	strh	r3, [r2, #0]
 801964c:	4908      	ldr	r1, [pc, #32]	@ (8019670 <rcutils_reset_error+0x30>)
 801964e:	7003      	strb	r3, [r0, #0]
 8019650:	700b      	strb	r3, [r1, #0]
 8019652:	ed82 7b02 	vstr	d7, [r2, #8]
 8019656:	4a07      	ldr	r2, [pc, #28]	@ (8019674 <rcutils_reset_error+0x34>)
 8019658:	7013      	strb	r3, [r2, #0]
 801965a:	4770      	bx	lr
 801965c:	f3af 8000 	nop.w
	...
 8019668:	20010058 	.word	0x20010058
 801966c:	20010069 	.word	0x20010069
 8019670:	20010068 	.word	0x20010068
 8019674:	20010050 	.word	0x20010050

08019678 <rcutils_system_time_now>:
 8019678:	b300      	cbz	r0, 80196bc <rcutils_system_time_now+0x44>
 801967a:	b570      	push	{r4, r5, r6, lr}
 801967c:	b084      	sub	sp, #16
 801967e:	4604      	mov	r4, r0
 8019680:	2001      	movs	r0, #1
 8019682:	4669      	mov	r1, sp
 8019684:	f7e7 f87c 	bl	8000780 <clock_gettime>
 8019688:	e9dd 3100 	ldrd	r3, r1, [sp]
 801968c:	2900      	cmp	r1, #0
 801968e:	db12      	blt.n	80196b6 <rcutils_system_time_now+0x3e>
 8019690:	ea53 0201 	orrs.w	r2, r3, r1
 8019694:	9d02      	ldr	r5, [sp, #8]
 8019696:	d101      	bne.n	801969c <rcutils_system_time_now+0x24>
 8019698:	2d00      	cmp	r5, #0
 801969a:	db0c      	blt.n	80196b6 <rcutils_system_time_now+0x3e>
 801969c:	4e08      	ldr	r6, [pc, #32]	@ (80196c0 <rcutils_system_time_now+0x48>)
 801969e:	2000      	movs	r0, #0
 80196a0:	fba3 3206 	umull	r3, r2, r3, r6
 80196a4:	195b      	adds	r3, r3, r5
 80196a6:	fb06 2201 	mla	r2, r6, r1, r2
 80196aa:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80196ae:	e9c4 3200 	strd	r3, r2, [r4]
 80196b2:	b004      	add	sp, #16
 80196b4:	bd70      	pop	{r4, r5, r6, pc}
 80196b6:	2002      	movs	r0, #2
 80196b8:	b004      	add	sp, #16
 80196ba:	bd70      	pop	{r4, r5, r6, pc}
 80196bc:	200b      	movs	r0, #11
 80196be:	4770      	bx	lr
 80196c0:	3b9aca00 	.word	0x3b9aca00

080196c4 <rcutils_steady_time_now>:
 80196c4:	b300      	cbz	r0, 8019708 <rcutils_steady_time_now+0x44>
 80196c6:	b570      	push	{r4, r5, r6, lr}
 80196c8:	b084      	sub	sp, #16
 80196ca:	4604      	mov	r4, r0
 80196cc:	2000      	movs	r0, #0
 80196ce:	4669      	mov	r1, sp
 80196d0:	f7e7 f856 	bl	8000780 <clock_gettime>
 80196d4:	e9dd 3100 	ldrd	r3, r1, [sp]
 80196d8:	2900      	cmp	r1, #0
 80196da:	db12      	blt.n	8019702 <rcutils_steady_time_now+0x3e>
 80196dc:	ea53 0201 	orrs.w	r2, r3, r1
 80196e0:	9d02      	ldr	r5, [sp, #8]
 80196e2:	d101      	bne.n	80196e8 <rcutils_steady_time_now+0x24>
 80196e4:	2d00      	cmp	r5, #0
 80196e6:	db0c      	blt.n	8019702 <rcutils_steady_time_now+0x3e>
 80196e8:	4e08      	ldr	r6, [pc, #32]	@ (801970c <rcutils_steady_time_now+0x48>)
 80196ea:	2000      	movs	r0, #0
 80196ec:	fba3 3206 	umull	r3, r2, r3, r6
 80196f0:	195b      	adds	r3, r3, r5
 80196f2:	fb06 2201 	mla	r2, r6, r1, r2
 80196f6:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80196fa:	e9c4 3200 	strd	r3, r2, [r4]
 80196fe:	b004      	add	sp, #16
 8019700:	bd70      	pop	{r4, r5, r6, pc}
 8019702:	2002      	movs	r0, #2
 8019704:	b004      	add	sp, #16
 8019706:	bd70      	pop	{r4, r5, r6, pc}
 8019708:	200b      	movs	r0, #11
 801970a:	4770      	bx	lr
 801970c:	3b9aca00 	.word	0x3b9aca00

08019710 <rmw_get_default_publisher_options>:
 8019710:	2200      	movs	r2, #0
 8019712:	6002      	str	r2, [r0, #0]
 8019714:	7102      	strb	r2, [r0, #4]
 8019716:	4770      	bx	lr

08019718 <rmw_uros_set_custom_transport>:
 8019718:	b470      	push	{r4, r5, r6}
 801971a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 801971e:	b162      	cbz	r2, 801973a <rmw_uros_set_custom_transport+0x22>
 8019720:	b15b      	cbz	r3, 801973a <rmw_uros_set_custom_transport+0x22>
 8019722:	b155      	cbz	r5, 801973a <rmw_uros_set_custom_transport+0x22>
 8019724:	b14e      	cbz	r6, 801973a <rmw_uros_set_custom_transport+0x22>
 8019726:	4c06      	ldr	r4, [pc, #24]	@ (8019740 <rmw_uros_set_custom_transport+0x28>)
 8019728:	7020      	strb	r0, [r4, #0]
 801972a:	2000      	movs	r0, #0
 801972c:	6166      	str	r6, [r4, #20]
 801972e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8019732:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8019736:	bc70      	pop	{r4, r5, r6}
 8019738:	4770      	bx	lr
 801973a:	200b      	movs	r0, #11
 801973c:	bc70      	pop	{r4, r5, r6}
 801973e:	4770      	bx	lr
 8019740:	2001006c 	.word	0x2001006c

08019744 <flush_session>:
 8019744:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 8019746:	f002 bdbf 	b.w	801c2c8 <uxr_run_session_until_confirm_delivery>
 801974a:	bf00      	nop

0801974c <rmw_publish>:
 801974c:	2800      	cmp	r0, #0
 801974e:	d053      	beq.n	80197f8 <rmw_publish+0xac>
 8019750:	b570      	push	{r4, r5, r6, lr}
 8019752:	460d      	mov	r5, r1
 8019754:	b08e      	sub	sp, #56	@ 0x38
 8019756:	2900      	cmp	r1, #0
 8019758:	d04b      	beq.n	80197f2 <rmw_publish+0xa6>
 801975a:	4604      	mov	r4, r0
 801975c:	6800      	ldr	r0, [r0, #0]
 801975e:	f000 fcff 	bl	801a160 <is_uxrce_rmw_identifier_valid>
 8019762:	2800      	cmp	r0, #0
 8019764:	d045      	beq.n	80197f2 <rmw_publish+0xa6>
 8019766:	6866      	ldr	r6, [r4, #4]
 8019768:	2e00      	cmp	r6, #0
 801976a:	d042      	beq.n	80197f2 <rmw_publish+0xa6>
 801976c:	69b4      	ldr	r4, [r6, #24]
 801976e:	4628      	mov	r0, r5
 8019770:	6923      	ldr	r3, [r4, #16]
 8019772:	4798      	blx	r3
 8019774:	69f3      	ldr	r3, [r6, #28]
 8019776:	9005      	str	r0, [sp, #20]
 8019778:	b113      	cbz	r3, 8019780 <rmw_publish+0x34>
 801977a:	a805      	add	r0, sp, #20
 801977c:	4798      	blx	r3
 801977e:	9805      	ldr	r0, [sp, #20]
 8019780:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8019784:	691b      	ldr	r3, [r3, #16]
 8019786:	9000      	str	r0, [sp, #0]
 8019788:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801978c:	6972      	ldr	r2, [r6, #20]
 801978e:	ab06      	add	r3, sp, #24
 8019790:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8019792:	f003 fb97 	bl	801cec4 <uxr_prepare_output_stream>
 8019796:	b1d8      	cbz	r0, 80197d0 <rmw_publish+0x84>
 8019798:	68a3      	ldr	r3, [r4, #8]
 801979a:	a906      	add	r1, sp, #24
 801979c:	4628      	mov	r0, r5
 801979e:	4798      	blx	r3
 80197a0:	6a33      	ldr	r3, [r6, #32]
 80197a2:	4604      	mov	r4, r0
 80197a4:	b10b      	cbz	r3, 80197aa <rmw_publish+0x5e>
 80197a6:	a806      	add	r0, sp, #24
 80197a8:	4798      	blx	r3
 80197aa:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 80197ae:	2b01      	cmp	r3, #1
 80197b0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80197b4:	d022      	beq.n	80197fc <rmw_publish+0xb0>
 80197b6:	6918      	ldr	r0, [r3, #16]
 80197b8:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 80197ba:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80197be:	f002 fd83 	bl	801c2c8 <uxr_run_session_until_confirm_delivery>
 80197c2:	4020      	ands	r0, r4
 80197c4:	b2c4      	uxtb	r4, r0
 80197c6:	f084 0001 	eor.w	r0, r4, #1
 80197ca:	b2c0      	uxtb	r0, r0
 80197cc:	b00e      	add	sp, #56	@ 0x38
 80197ce:	bd70      	pop	{r4, r5, r6, pc}
 80197d0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80197d4:	6918      	ldr	r0, [r3, #16]
 80197d6:	9b05      	ldr	r3, [sp, #20]
 80197d8:	9602      	str	r6, [sp, #8]
 80197da:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80197de:	9300      	str	r3, [sp, #0]
 80197e0:	4b09      	ldr	r3, [pc, #36]	@ (8019808 <rmw_publish+0xbc>)
 80197e2:	9301      	str	r3, [sp, #4]
 80197e4:	ab06      	add	r3, sp, #24
 80197e6:	6972      	ldr	r2, [r6, #20]
 80197e8:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 80197ea:	f003 fb9b 	bl	801cf24 <uxr_prepare_output_stream_fragmented>
 80197ee:	2800      	cmp	r0, #0
 80197f0:	d1d2      	bne.n	8019798 <rmw_publish+0x4c>
 80197f2:	2001      	movs	r0, #1
 80197f4:	b00e      	add	sp, #56	@ 0x38
 80197f6:	bd70      	pop	{r4, r5, r6, pc}
 80197f8:	2001      	movs	r0, #1
 80197fa:	4770      	bx	lr
 80197fc:	6918      	ldr	r0, [r3, #16]
 80197fe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019802:	f002 f9a7 	bl	801bb54 <uxr_flash_output_streams>
 8019806:	e7de      	b.n	80197c6 <rmw_publish+0x7a>
 8019808:	08019745 	.word	0x08019745

0801980c <rmw_create_publisher>:
 801980c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019810:	b087      	sub	sp, #28
 8019812:	2800      	cmp	r0, #0
 8019814:	f000 80d2 	beq.w	80199bc <rmw_create_publisher+0x1b0>
 8019818:	460e      	mov	r6, r1
 801981a:	2900      	cmp	r1, #0
 801981c:	f000 80ce 	beq.w	80199bc <rmw_create_publisher+0x1b0>
 8019820:	4604      	mov	r4, r0
 8019822:	6800      	ldr	r0, [r0, #0]
 8019824:	4615      	mov	r5, r2
 8019826:	461f      	mov	r7, r3
 8019828:	f000 fc9a 	bl	801a160 <is_uxrce_rmw_identifier_valid>
 801982c:	f080 0001 	eor.w	r0, r0, #1
 8019830:	b2c0      	uxtb	r0, r0
 8019832:	2800      	cmp	r0, #0
 8019834:	f040 80c2 	bne.w	80199bc <rmw_create_publisher+0x1b0>
 8019838:	2d00      	cmp	r5, #0
 801983a:	f000 80bf 	beq.w	80199bc <rmw_create_publisher+0x1b0>
 801983e:	782b      	ldrb	r3, [r5, #0]
 8019840:	2b00      	cmp	r3, #0
 8019842:	f000 80bb 	beq.w	80199bc <rmw_create_publisher+0x1b0>
 8019846:	2f00      	cmp	r7, #0
 8019848:	f000 80b8 	beq.w	80199bc <rmw_create_publisher+0x1b0>
 801984c:	485e      	ldr	r0, [pc, #376]	@ (80199c8 <rmw_create_publisher+0x1bc>)
 801984e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8019852:	f007 febf 	bl	80215d4 <get_memory>
 8019856:	2800      	cmp	r0, #0
 8019858:	f000 80b0 	beq.w	80199bc <rmw_create_publisher+0x1b0>
 801985c:	6884      	ldr	r4, [r0, #8]
 801985e:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 8019862:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8019866:	f007 ff1d 	bl	80216a4 <rmw_get_implementation_identifier>
 801986a:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 801986e:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8019872:	4628      	mov	r0, r5
 8019874:	f7e6 fcee 	bl	8000254 <strlen>
 8019878:	3001      	adds	r0, #1
 801987a:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 801987e:	283c      	cmp	r0, #60	@ 0x3c
 8019880:	f200 808f 	bhi.w	80199a2 <rmw_create_publisher+0x196>
 8019884:	462b      	mov	r3, r5
 8019886:	4a51      	ldr	r2, [pc, #324]	@ (80199cc <rmw_create_publisher+0x1c0>)
 8019888:	213c      	movs	r1, #60	@ 0x3c
 801988a:	4650      	mov	r0, sl
 801988c:	f00b fe2e 	bl	80254ec <sniprintf>
 8019890:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019894:	4639      	mov	r1, r7
 8019896:	2250      	movs	r2, #80	@ 0x50
 8019898:	67e3      	str	r3, [r4, #124]	@ 0x7c
 801989a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801989e:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 80198a2:	f00c f8be 	bl	8025a22 <memcpy>
 80198a6:	7a3b      	ldrb	r3, [r7, #8]
 80198a8:	4630      	mov	r0, r6
 80198aa:	4949      	ldr	r1, [pc, #292]	@ (80199d0 <rmw_create_publisher+0x1c4>)
 80198ac:	2b02      	cmp	r3, #2
 80198ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80198b2:	bf0c      	ite	eq
 80198b4:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 80198b8:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 80198bc:	67a3      	str	r3, [r4, #120]	@ 0x78
 80198be:	2300      	movs	r3, #0
 80198c0:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80198c4:	f000 fc5a 	bl	801a17c <get_message_typesupport_handle>
 80198c8:	2800      	cmp	r0, #0
 80198ca:	d06a      	beq.n	80199a2 <rmw_create_publisher+0x196>
 80198cc:	6842      	ldr	r2, [r0, #4]
 80198ce:	61a2      	str	r2, [r4, #24]
 80198d0:	2a00      	cmp	r2, #0
 80198d2:	d066      	beq.n	80199a2 <rmw_create_publisher+0x196>
 80198d4:	4629      	mov	r1, r5
 80198d6:	463b      	mov	r3, r7
 80198d8:	4648      	mov	r0, r9
 80198da:	f008 f971 	bl	8021bc0 <create_topic>
 80198de:	6260      	str	r0, [r4, #36]	@ 0x24
 80198e0:	2800      	cmp	r0, #0
 80198e2:	d062      	beq.n	80199aa <rmw_create_publisher+0x19e>
 80198e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80198e8:	2103      	movs	r1, #3
 80198ea:	2506      	movs	r5, #6
 80198ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80198f0:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 80198f4:	1c42      	adds	r2, r0, #1
 80198f6:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 80198fa:	f001 ffdb 	bl	801b8b4 <uxr_object_id>
 80198fe:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8019902:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019906:	6120      	str	r0, [r4, #16]
 8019908:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 801990c:	6910      	ldr	r0, [r2, #16]
 801990e:	9500      	str	r5, [sp, #0]
 8019910:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019914:	6819      	ldr	r1, [r3, #0]
 8019916:	6922      	ldr	r2, [r4, #16]
 8019918:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801991c:	f001 fe7c 	bl	801b618 <uxr_buffer_create_publisher_bin>
 8019920:	4602      	mov	r2, r0
 8019922:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8019926:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801992a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801992e:	f000 fb9d 	bl	801a06c <run_xrce_session>
 8019932:	b3b0      	cbz	r0, 80199a2 <rmw_create_publisher+0x196>
 8019934:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019938:	2105      	movs	r1, #5
 801993a:	f10d 0a10 	add.w	sl, sp, #16
 801993e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019942:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8019946:	1c42      	adds	r2, r0, #1
 8019948:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 801994c:	f001 ffb2 	bl	801b8b4 <uxr_object_id>
 8019950:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8019954:	4639      	mov	r1, r7
 8019956:	6160      	str	r0, [r4, #20]
 8019958:	691e      	ldr	r6, [r3, #16]
 801995a:	4650      	mov	r0, sl
 801995c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019960:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8019964:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8019968:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 801996c:	f000 fb9a 	bl	801a0a4 <convert_qos_profile>
 8019970:	9503      	str	r5, [sp, #12]
 8019972:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8019976:	9001      	str	r0, [sp, #4]
 8019978:	4630      	mov	r0, r6
 801997a:	f8ad 1008 	strh.w	r1, [sp, #8]
 801997e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8019982:	9300      	str	r3, [sp, #0]
 8019984:	6839      	ldr	r1, [r7, #0]
 8019986:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801998a:	f001 fea5 	bl	801b6d8 <uxr_buffer_create_datawriter_bin>
 801998e:	4602      	mov	r2, r0
 8019990:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8019994:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8019998:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801999c:	f000 fb66 	bl	801a06c <run_xrce_session>
 80199a0:	b970      	cbnz	r0, 80199c0 <rmw_create_publisher+0x1b4>
 80199a2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80199a4:	b108      	cbz	r0, 80199aa <rmw_create_publisher+0x19e>
 80199a6:	f000 fa53 	bl	8019e50 <rmw_uxrce_fini_topic_memory>
 80199aa:	4640      	mov	r0, r8
 80199ac:	f04f 0800 	mov.w	r8, #0
 80199b0:	f000 f9f6 	bl	8019da0 <rmw_uxrce_fini_publisher_memory>
 80199b4:	4640      	mov	r0, r8
 80199b6:	b007      	add	sp, #28
 80199b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199bc:	f04f 0800 	mov.w	r8, #0
 80199c0:	4640      	mov	r0, r8
 80199c2:	b007      	add	sp, #28
 80199c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199c8:	20014964 	.word	0x20014964
 80199cc:	0802a4c0 	.word	0x0802a4c0
 80199d0:	0802a48c 	.word	0x0802a48c

080199d4 <rmw_publisher_get_actual_qos>:
 80199d4:	b178      	cbz	r0, 80199f6 <rmw_publisher_get_actual_qos+0x22>
 80199d6:	b510      	push	{r4, lr}
 80199d8:	fab1 f481 	clz	r4, r1
 80199dc:	0964      	lsrs	r4, r4, #5
 80199de:	b141      	cbz	r1, 80199f2 <rmw_publisher_get_actual_qos+0x1e>
 80199e0:	6843      	ldr	r3, [r0, #4]
 80199e2:	2250      	movs	r2, #80	@ 0x50
 80199e4:	4608      	mov	r0, r1
 80199e6:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80199ea:	f00c f81a 	bl	8025a22 <memcpy>
 80199ee:	4620      	mov	r0, r4
 80199f0:	bd10      	pop	{r4, pc}
 80199f2:	200b      	movs	r0, #11
 80199f4:	bd10      	pop	{r4, pc}
 80199f6:	200b      	movs	r0, #11
 80199f8:	4770      	bx	lr
 80199fa:	bf00      	nop

080199fc <rmw_destroy_publisher>:
 80199fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a00:	b128      	cbz	r0, 8019a0e <rmw_destroy_publisher+0x12>
 8019a02:	4604      	mov	r4, r0
 8019a04:	6800      	ldr	r0, [r0, #0]
 8019a06:	460d      	mov	r5, r1
 8019a08:	f000 fbaa 	bl	801a160 <is_uxrce_rmw_identifier_valid>
 8019a0c:	b918      	cbnz	r0, 8019a16 <rmw_destroy_publisher+0x1a>
 8019a0e:	2401      	movs	r4, #1
 8019a10:	4620      	mov	r0, r4
 8019a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a16:	6863      	ldr	r3, [r4, #4]
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d0f8      	beq.n	8019a0e <rmw_destroy_publisher+0x12>
 8019a1c:	fab5 f485 	clz	r4, r5
 8019a20:	0964      	lsrs	r4, r4, #5
 8019a22:	2d00      	cmp	r5, #0
 8019a24:	d0f3      	beq.n	8019a0e <rmw_destroy_publisher+0x12>
 8019a26:	6828      	ldr	r0, [r5, #0]
 8019a28:	f000 fb9a 	bl	801a160 <is_uxrce_rmw_identifier_valid>
 8019a2c:	2800      	cmp	r0, #0
 8019a2e:	d0ee      	beq.n	8019a0e <rmw_destroy_publisher+0x12>
 8019a30:	686e      	ldr	r6, [r5, #4]
 8019a32:	2e00      	cmp	r6, #0
 8019a34:	d0eb      	beq.n	8019a0e <rmw_destroy_publisher+0x12>
 8019a36:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8019a38:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 8019a3c:	f008 f910 	bl	8021c60 <destroy_topic>
 8019a40:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8019a44:	6972      	ldr	r2, [r6, #20]
 8019a46:	6918      	ldr	r0, [r3, #16]
 8019a48:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019a4c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019a50:	6819      	ldr	r1, [r3, #0]
 8019a52:	f001 fd2d 	bl	801b4b0 <uxr_buffer_delete_entity>
 8019a56:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8019a5a:	4680      	mov	r8, r0
 8019a5c:	6932      	ldr	r2, [r6, #16]
 8019a5e:	6918      	ldr	r0, [r3, #16]
 8019a60:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019a64:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019a68:	6819      	ldr	r1, [r3, #0]
 8019a6a:	f001 fd21 	bl	801b4b0 <uxr_buffer_delete_entity>
 8019a6e:	4606      	mov	r6, r0
 8019a70:	6938      	ldr	r0, [r7, #16]
 8019a72:	4642      	mov	r2, r8
 8019a74:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8019a78:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8019a7c:	f000 faf6 	bl	801a06c <run_xrce_session>
 8019a80:	693f      	ldr	r7, [r7, #16]
 8019a82:	4632      	mov	r2, r6
 8019a84:	4606      	mov	r6, r0
 8019a86:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8019a8a:	4638      	mov	r0, r7
 8019a8c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8019a90:	f000 faec 	bl	801a06c <run_xrce_session>
 8019a94:	b126      	cbz	r6, 8019aa0 <rmw_destroy_publisher+0xa4>
 8019a96:	b118      	cbz	r0, 8019aa0 <rmw_destroy_publisher+0xa4>
 8019a98:	4628      	mov	r0, r5
 8019a9a:	f000 f981 	bl	8019da0 <rmw_uxrce_fini_publisher_memory>
 8019a9e:	e7b7      	b.n	8019a10 <rmw_destroy_publisher+0x14>
 8019aa0:	2402      	movs	r4, #2
 8019aa2:	e7f9      	b.n	8019a98 <rmw_destroy_publisher+0x9c>

08019aa4 <rmw_uxrce_init_service_memory>:
 8019aa4:	b1e2      	cbz	r2, 8019ae0 <rmw_uxrce_init_service_memory+0x3c>
 8019aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019aaa:	7b05      	ldrb	r5, [r0, #12]
 8019aac:	4606      	mov	r6, r0
 8019aae:	b9ad      	cbnz	r5, 8019adc <rmw_uxrce_init_service_memory+0x38>
 8019ab0:	23c8      	movs	r3, #200	@ 0xc8
 8019ab2:	4617      	mov	r7, r2
 8019ab4:	460c      	mov	r4, r1
 8019ab6:	46a8      	mov	r8, r5
 8019ab8:	6083      	str	r3, [r0, #8]
 8019aba:	f240 1301 	movw	r3, #257	@ 0x101
 8019abe:	e9c0 5500 	strd	r5, r5, [r0]
 8019ac2:	8183      	strh	r3, [r0, #12]
 8019ac4:	3501      	adds	r5, #1
 8019ac6:	4621      	mov	r1, r4
 8019ac8:	4630      	mov	r0, r6
 8019aca:	f007 fd93 	bl	80215f4 <put_memory>
 8019ace:	42af      	cmp	r7, r5
 8019ad0:	60a4      	str	r4, [r4, #8]
 8019ad2:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8019ad6:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8019ada:	d1f3      	bne.n	8019ac4 <rmw_uxrce_init_service_memory+0x20>
 8019adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ae0:	4770      	bx	lr
 8019ae2:	bf00      	nop

08019ae4 <rmw_uxrce_init_client_memory>:
 8019ae4:	b1e2      	cbz	r2, 8019b20 <rmw_uxrce_init_client_memory+0x3c>
 8019ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019aea:	7b05      	ldrb	r5, [r0, #12]
 8019aec:	4606      	mov	r6, r0
 8019aee:	b9ad      	cbnz	r5, 8019b1c <rmw_uxrce_init_client_memory+0x38>
 8019af0:	23c8      	movs	r3, #200	@ 0xc8
 8019af2:	4617      	mov	r7, r2
 8019af4:	460c      	mov	r4, r1
 8019af6:	46a8      	mov	r8, r5
 8019af8:	6083      	str	r3, [r0, #8]
 8019afa:	f240 1301 	movw	r3, #257	@ 0x101
 8019afe:	e9c0 5500 	strd	r5, r5, [r0]
 8019b02:	8183      	strh	r3, [r0, #12]
 8019b04:	3501      	adds	r5, #1
 8019b06:	4621      	mov	r1, r4
 8019b08:	4630      	mov	r0, r6
 8019b0a:	f007 fd73 	bl	80215f4 <put_memory>
 8019b0e:	42af      	cmp	r7, r5
 8019b10:	60a4      	str	r4, [r4, #8]
 8019b12:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8019b16:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8019b1a:	d1f3      	bne.n	8019b04 <rmw_uxrce_init_client_memory+0x20>
 8019b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b20:	4770      	bx	lr
 8019b22:	bf00      	nop

08019b24 <rmw_uxrce_init_publisher_memory>:
 8019b24:	b1e2      	cbz	r2, 8019b60 <rmw_uxrce_init_publisher_memory+0x3c>
 8019b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b2a:	7b05      	ldrb	r5, [r0, #12]
 8019b2c:	4606      	mov	r6, r0
 8019b2e:	b9ad      	cbnz	r5, 8019b5c <rmw_uxrce_init_publisher_memory+0x38>
 8019b30:	23d8      	movs	r3, #216	@ 0xd8
 8019b32:	4617      	mov	r7, r2
 8019b34:	460c      	mov	r4, r1
 8019b36:	46a8      	mov	r8, r5
 8019b38:	6083      	str	r3, [r0, #8]
 8019b3a:	f240 1301 	movw	r3, #257	@ 0x101
 8019b3e:	e9c0 5500 	strd	r5, r5, [r0]
 8019b42:	8183      	strh	r3, [r0, #12]
 8019b44:	3501      	adds	r5, #1
 8019b46:	4621      	mov	r1, r4
 8019b48:	4630      	mov	r0, r6
 8019b4a:	f007 fd53 	bl	80215f4 <put_memory>
 8019b4e:	42af      	cmp	r7, r5
 8019b50:	60a4      	str	r4, [r4, #8]
 8019b52:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8019b56:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8019b5a:	d1f3      	bne.n	8019b44 <rmw_uxrce_init_publisher_memory+0x20>
 8019b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b60:	4770      	bx	lr
 8019b62:	bf00      	nop

08019b64 <rmw_uxrce_init_subscription_memory>:
 8019b64:	b1e2      	cbz	r2, 8019ba0 <rmw_uxrce_init_subscription_memory+0x3c>
 8019b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b6a:	7b05      	ldrb	r5, [r0, #12]
 8019b6c:	4606      	mov	r6, r0
 8019b6e:	b9ad      	cbnz	r5, 8019b9c <rmw_uxrce_init_subscription_memory+0x38>
 8019b70:	23d8      	movs	r3, #216	@ 0xd8
 8019b72:	4617      	mov	r7, r2
 8019b74:	460c      	mov	r4, r1
 8019b76:	46a8      	mov	r8, r5
 8019b78:	6083      	str	r3, [r0, #8]
 8019b7a:	f240 1301 	movw	r3, #257	@ 0x101
 8019b7e:	e9c0 5500 	strd	r5, r5, [r0]
 8019b82:	8183      	strh	r3, [r0, #12]
 8019b84:	3501      	adds	r5, #1
 8019b86:	4621      	mov	r1, r4
 8019b88:	4630      	mov	r0, r6
 8019b8a:	f007 fd33 	bl	80215f4 <put_memory>
 8019b8e:	42af      	cmp	r7, r5
 8019b90:	60a4      	str	r4, [r4, #8]
 8019b92:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8019b96:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8019b9a:	d1f3      	bne.n	8019b84 <rmw_uxrce_init_subscription_memory+0x20>
 8019b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ba0:	4770      	bx	lr
 8019ba2:	bf00      	nop

08019ba4 <rmw_uxrce_init_node_memory>:
 8019ba4:	b1e2      	cbz	r2, 8019be0 <rmw_uxrce_init_node_memory+0x3c>
 8019ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019baa:	7b05      	ldrb	r5, [r0, #12]
 8019bac:	4606      	mov	r6, r0
 8019bae:	b9ad      	cbnz	r5, 8019bdc <rmw_uxrce_init_node_memory+0x38>
 8019bb0:	23a4      	movs	r3, #164	@ 0xa4
 8019bb2:	4617      	mov	r7, r2
 8019bb4:	460c      	mov	r4, r1
 8019bb6:	46a8      	mov	r8, r5
 8019bb8:	6083      	str	r3, [r0, #8]
 8019bba:	f240 1301 	movw	r3, #257	@ 0x101
 8019bbe:	e9c0 5500 	strd	r5, r5, [r0]
 8019bc2:	8183      	strh	r3, [r0, #12]
 8019bc4:	3501      	adds	r5, #1
 8019bc6:	4621      	mov	r1, r4
 8019bc8:	4630      	mov	r0, r6
 8019bca:	f007 fd13 	bl	80215f4 <put_memory>
 8019bce:	42af      	cmp	r7, r5
 8019bd0:	60a4      	str	r4, [r4, #8]
 8019bd2:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8019bd6:	f804 8c98 	strb.w	r8, [r4, #-152]
 8019bda:	d1f3      	bne.n	8019bc4 <rmw_uxrce_init_node_memory+0x20>
 8019bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019be0:	4770      	bx	lr
 8019be2:	bf00      	nop

08019be4 <rmw_uxrce_init_session_memory>:
 8019be4:	b1ea      	cbz	r2, 8019c22 <rmw_uxrce_init_session_memory+0x3e>
 8019be6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019bea:	7b05      	ldrb	r5, [r0, #12]
 8019bec:	4606      	mov	r6, r0
 8019bee:	b9b5      	cbnz	r5, 8019c1e <rmw_uxrce_init_session_memory+0x3a>
 8019bf0:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8019bf4:	f240 1301 	movw	r3, #257	@ 0x101
 8019bf8:	4617      	mov	r7, r2
 8019bfa:	460c      	mov	r4, r1
 8019bfc:	46a9      	mov	r9, r5
 8019bfe:	f8c0 8008 	str.w	r8, [r0, #8]
 8019c02:	8183      	strh	r3, [r0, #12]
 8019c04:	e9c0 5500 	strd	r5, r5, [r0]
 8019c08:	3501      	adds	r5, #1
 8019c0a:	4621      	mov	r1, r4
 8019c0c:	4630      	mov	r0, r6
 8019c0e:	f007 fcf1 	bl	80215f4 <put_memory>
 8019c12:	42af      	cmp	r7, r5
 8019c14:	60a4      	str	r4, [r4, #8]
 8019c16:	f884 900c 	strb.w	r9, [r4, #12]
 8019c1a:	4444      	add	r4, r8
 8019c1c:	d1f4      	bne.n	8019c08 <rmw_uxrce_init_session_memory+0x24>
 8019c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c22:	4770      	bx	lr

08019c24 <rmw_uxrce_init_topic_memory>:
 8019c24:	b1e2      	cbz	r2, 8019c60 <rmw_uxrce_init_topic_memory+0x3c>
 8019c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c2a:	7b05      	ldrb	r5, [r0, #12]
 8019c2c:	4606      	mov	r6, r0
 8019c2e:	b9ad      	cbnz	r5, 8019c5c <rmw_uxrce_init_topic_memory+0x38>
 8019c30:	231c      	movs	r3, #28
 8019c32:	4617      	mov	r7, r2
 8019c34:	460c      	mov	r4, r1
 8019c36:	46a8      	mov	r8, r5
 8019c38:	6083      	str	r3, [r0, #8]
 8019c3a:	f240 1301 	movw	r3, #257	@ 0x101
 8019c3e:	e9c0 5500 	strd	r5, r5, [r0]
 8019c42:	8183      	strh	r3, [r0, #12]
 8019c44:	3501      	adds	r5, #1
 8019c46:	4621      	mov	r1, r4
 8019c48:	4630      	mov	r0, r6
 8019c4a:	f007 fcd3 	bl	80215f4 <put_memory>
 8019c4e:	42af      	cmp	r7, r5
 8019c50:	60a4      	str	r4, [r4, #8]
 8019c52:	f104 041c 	add.w	r4, r4, #28
 8019c56:	f804 8c10 	strb.w	r8, [r4, #-16]
 8019c5a:	d1f3      	bne.n	8019c44 <rmw_uxrce_init_topic_memory+0x20>
 8019c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c60:	4770      	bx	lr
 8019c62:	bf00      	nop

08019c64 <rmw_uxrce_init_static_input_buffer_memory>:
 8019c64:	b1ea      	cbz	r2, 8019ca2 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8019c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c6a:	7b05      	ldrb	r5, [r0, #12]
 8019c6c:	4606      	mov	r6, r0
 8019c6e:	b9b5      	cbnz	r5, 8019c9e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8019c70:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8019c74:	4617      	mov	r7, r2
 8019c76:	460c      	mov	r4, r1
 8019c78:	46a8      	mov	r8, r5
 8019c7a:	6083      	str	r3, [r0, #8]
 8019c7c:	f240 1301 	movw	r3, #257	@ 0x101
 8019c80:	e9c0 5500 	strd	r5, r5, [r0]
 8019c84:	8183      	strh	r3, [r0, #12]
 8019c86:	3501      	adds	r5, #1
 8019c88:	4621      	mov	r1, r4
 8019c8a:	4630      	mov	r0, r6
 8019c8c:	f007 fcb2 	bl	80215f4 <put_memory>
 8019c90:	42af      	cmp	r7, r5
 8019c92:	60a4      	str	r4, [r4, #8]
 8019c94:	f884 800c 	strb.w	r8, [r4, #12]
 8019c98:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8019c9c:	d1f3      	bne.n	8019c86 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8019c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ca2:	4770      	bx	lr

08019ca4 <rmw_uxrce_init_init_options_impl_memory>:
 8019ca4:	b1e2      	cbz	r2, 8019ce0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8019ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019caa:	7b05      	ldrb	r5, [r0, #12]
 8019cac:	4606      	mov	r6, r0
 8019cae:	b9ad      	cbnz	r5, 8019cdc <rmw_uxrce_init_init_options_impl_memory+0x38>
 8019cb0:	232c      	movs	r3, #44	@ 0x2c
 8019cb2:	4617      	mov	r7, r2
 8019cb4:	460c      	mov	r4, r1
 8019cb6:	46a8      	mov	r8, r5
 8019cb8:	6083      	str	r3, [r0, #8]
 8019cba:	f240 1301 	movw	r3, #257	@ 0x101
 8019cbe:	e9c0 5500 	strd	r5, r5, [r0]
 8019cc2:	8183      	strh	r3, [r0, #12]
 8019cc4:	3501      	adds	r5, #1
 8019cc6:	4621      	mov	r1, r4
 8019cc8:	4630      	mov	r0, r6
 8019cca:	f007 fc93 	bl	80215f4 <put_memory>
 8019cce:	42af      	cmp	r7, r5
 8019cd0:	60a4      	str	r4, [r4, #8]
 8019cd2:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8019cd6:	f804 8c20 	strb.w	r8, [r4, #-32]
 8019cda:	d1f3      	bne.n	8019cc4 <rmw_uxrce_init_init_options_impl_memory+0x20>
 8019cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ce0:	4770      	bx	lr
 8019ce2:	bf00      	nop

08019ce4 <rmw_uxrce_init_wait_set_memory>:
 8019ce4:	b1e2      	cbz	r2, 8019d20 <rmw_uxrce_init_wait_set_memory+0x3c>
 8019ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019cea:	7b05      	ldrb	r5, [r0, #12]
 8019cec:	4606      	mov	r6, r0
 8019cee:	b9ad      	cbnz	r5, 8019d1c <rmw_uxrce_init_wait_set_memory+0x38>
 8019cf0:	231c      	movs	r3, #28
 8019cf2:	4617      	mov	r7, r2
 8019cf4:	460c      	mov	r4, r1
 8019cf6:	46a8      	mov	r8, r5
 8019cf8:	6083      	str	r3, [r0, #8]
 8019cfa:	f240 1301 	movw	r3, #257	@ 0x101
 8019cfe:	e9c0 5500 	strd	r5, r5, [r0]
 8019d02:	8183      	strh	r3, [r0, #12]
 8019d04:	3501      	adds	r5, #1
 8019d06:	4621      	mov	r1, r4
 8019d08:	4630      	mov	r0, r6
 8019d0a:	f007 fc73 	bl	80215f4 <put_memory>
 8019d0e:	42af      	cmp	r7, r5
 8019d10:	60a4      	str	r4, [r4, #8]
 8019d12:	f104 041c 	add.w	r4, r4, #28
 8019d16:	f804 8c10 	strb.w	r8, [r4, #-16]
 8019d1a:	d1f3      	bne.n	8019d04 <rmw_uxrce_init_wait_set_memory+0x20>
 8019d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d20:	4770      	bx	lr
 8019d22:	bf00      	nop

08019d24 <rmw_uxrce_init_guard_condition_memory>:
 8019d24:	b1e2      	cbz	r2, 8019d60 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8019d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d2a:	7b05      	ldrb	r5, [r0, #12]
 8019d2c:	4606      	mov	r6, r0
 8019d2e:	b9ad      	cbnz	r5, 8019d5c <rmw_uxrce_init_guard_condition_memory+0x38>
 8019d30:	2320      	movs	r3, #32
 8019d32:	4617      	mov	r7, r2
 8019d34:	460c      	mov	r4, r1
 8019d36:	46a8      	mov	r8, r5
 8019d38:	6083      	str	r3, [r0, #8]
 8019d3a:	f240 1301 	movw	r3, #257	@ 0x101
 8019d3e:	e9c0 5500 	strd	r5, r5, [r0]
 8019d42:	8183      	strh	r3, [r0, #12]
 8019d44:	3501      	adds	r5, #1
 8019d46:	4621      	mov	r1, r4
 8019d48:	4630      	mov	r0, r6
 8019d4a:	f007 fc53 	bl	80215f4 <put_memory>
 8019d4e:	42af      	cmp	r7, r5
 8019d50:	60a4      	str	r4, [r4, #8]
 8019d52:	f104 0420 	add.w	r4, r4, #32
 8019d56:	f804 8c14 	strb.w	r8, [r4, #-20]
 8019d5a:	d1f3      	bne.n	8019d44 <rmw_uxrce_init_guard_condition_memory+0x20>
 8019d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d60:	4770      	bx	lr
 8019d62:	bf00      	nop

08019d64 <rmw_uxrce_fini_session_memory>:
 8019d64:	4601      	mov	r1, r0
 8019d66:	4801      	ldr	r0, [pc, #4]	@ (8019d6c <rmw_uxrce_fini_session_memory+0x8>)
 8019d68:	f007 bc44 	b.w	80215f4 <put_memory>
 8019d6c:	20014984 	.word	0x20014984

08019d70 <rmw_uxrce_fini_node_memory>:
 8019d70:	b538      	push	{r3, r4, r5, lr}
 8019d72:	4604      	mov	r4, r0
 8019d74:	6800      	ldr	r0, [r0, #0]
 8019d76:	b128      	cbz	r0, 8019d84 <rmw_uxrce_fini_node_memory+0x14>
 8019d78:	4b07      	ldr	r3, [pc, #28]	@ (8019d98 <rmw_uxrce_fini_node_memory+0x28>)
 8019d7a:	6819      	ldr	r1, [r3, #0]
 8019d7c:	f7e6 fa60 	bl	8000240 <strcmp>
 8019d80:	b940      	cbnz	r0, 8019d94 <rmw_uxrce_fini_node_memory+0x24>
 8019d82:	6020      	str	r0, [r4, #0]
 8019d84:	6861      	ldr	r1, [r4, #4]
 8019d86:	b129      	cbz	r1, 8019d94 <rmw_uxrce_fini_node_memory+0x24>
 8019d88:	2500      	movs	r5, #0
 8019d8a:	4804      	ldr	r0, [pc, #16]	@ (8019d9c <rmw_uxrce_fini_node_memory+0x2c>)
 8019d8c:	610d      	str	r5, [r1, #16]
 8019d8e:	f007 fc31 	bl	80215f4 <put_memory>
 8019d92:	6065      	str	r5, [r4, #4]
 8019d94:	bd38      	pop	{r3, r4, r5, pc}
 8019d96:	bf00      	nop
 8019d98:	0802ad38 	.word	0x0802ad38
 8019d9c:	20014954 	.word	0x20014954

08019da0 <rmw_uxrce_fini_publisher_memory>:
 8019da0:	b510      	push	{r4, lr}
 8019da2:	4604      	mov	r4, r0
 8019da4:	6800      	ldr	r0, [r0, #0]
 8019da6:	b128      	cbz	r0, 8019db4 <rmw_uxrce_fini_publisher_memory+0x14>
 8019da8:	4b06      	ldr	r3, [pc, #24]	@ (8019dc4 <rmw_uxrce_fini_publisher_memory+0x24>)
 8019daa:	6819      	ldr	r1, [r3, #0]
 8019dac:	f7e6 fa48 	bl	8000240 <strcmp>
 8019db0:	b938      	cbnz	r0, 8019dc2 <rmw_uxrce_fini_publisher_memory+0x22>
 8019db2:	6020      	str	r0, [r4, #0]
 8019db4:	6861      	ldr	r1, [r4, #4]
 8019db6:	b121      	cbz	r1, 8019dc2 <rmw_uxrce_fini_publisher_memory+0x22>
 8019db8:	4803      	ldr	r0, [pc, #12]	@ (8019dc8 <rmw_uxrce_fini_publisher_memory+0x28>)
 8019dba:	f007 fc1b 	bl	80215f4 <put_memory>
 8019dbe:	2300      	movs	r3, #0
 8019dc0:	6063      	str	r3, [r4, #4]
 8019dc2:	bd10      	pop	{r4, pc}
 8019dc4:	0802ad38 	.word	0x0802ad38
 8019dc8:	20014964 	.word	0x20014964

08019dcc <rmw_uxrce_fini_subscription_memory>:
 8019dcc:	b510      	push	{r4, lr}
 8019dce:	4604      	mov	r4, r0
 8019dd0:	6800      	ldr	r0, [r0, #0]
 8019dd2:	b128      	cbz	r0, 8019de0 <rmw_uxrce_fini_subscription_memory+0x14>
 8019dd4:	4b06      	ldr	r3, [pc, #24]	@ (8019df0 <rmw_uxrce_fini_subscription_memory+0x24>)
 8019dd6:	6819      	ldr	r1, [r3, #0]
 8019dd8:	f7e6 fa32 	bl	8000240 <strcmp>
 8019ddc:	b938      	cbnz	r0, 8019dee <rmw_uxrce_fini_subscription_memory+0x22>
 8019dde:	6020      	str	r0, [r4, #0]
 8019de0:	6861      	ldr	r1, [r4, #4]
 8019de2:	b121      	cbz	r1, 8019dee <rmw_uxrce_fini_subscription_memory+0x22>
 8019de4:	4803      	ldr	r0, [pc, #12]	@ (8019df4 <rmw_uxrce_fini_subscription_memory+0x28>)
 8019de6:	f007 fc05 	bl	80215f4 <put_memory>
 8019dea:	2300      	movs	r3, #0
 8019dec:	6063      	str	r3, [r4, #4]
 8019dee:	bd10      	pop	{r4, pc}
 8019df0:	0802ad38 	.word	0x0802ad38
 8019df4:	200149a4 	.word	0x200149a4

08019df8 <rmw_uxrce_fini_service_memory>:
 8019df8:	b510      	push	{r4, lr}
 8019dfa:	4604      	mov	r4, r0
 8019dfc:	6800      	ldr	r0, [r0, #0]
 8019dfe:	b128      	cbz	r0, 8019e0c <rmw_uxrce_fini_service_memory+0x14>
 8019e00:	4b06      	ldr	r3, [pc, #24]	@ (8019e1c <rmw_uxrce_fini_service_memory+0x24>)
 8019e02:	6819      	ldr	r1, [r3, #0]
 8019e04:	f7e6 fa1c 	bl	8000240 <strcmp>
 8019e08:	b938      	cbnz	r0, 8019e1a <rmw_uxrce_fini_service_memory+0x22>
 8019e0a:	6020      	str	r0, [r4, #0]
 8019e0c:	6861      	ldr	r1, [r4, #4]
 8019e0e:	b121      	cbz	r1, 8019e1a <rmw_uxrce_fini_service_memory+0x22>
 8019e10:	4803      	ldr	r0, [pc, #12]	@ (8019e20 <rmw_uxrce_fini_service_memory+0x28>)
 8019e12:	f007 fbef 	bl	80215f4 <put_memory>
 8019e16:	2300      	movs	r3, #0
 8019e18:	6063      	str	r3, [r4, #4]
 8019e1a:	bd10      	pop	{r4, pc}
 8019e1c:	0802ad38 	.word	0x0802ad38
 8019e20:	20014974 	.word	0x20014974

08019e24 <rmw_uxrce_fini_client_memory>:
 8019e24:	b510      	push	{r4, lr}
 8019e26:	4604      	mov	r4, r0
 8019e28:	6800      	ldr	r0, [r0, #0]
 8019e2a:	b128      	cbz	r0, 8019e38 <rmw_uxrce_fini_client_memory+0x14>
 8019e2c:	4b06      	ldr	r3, [pc, #24]	@ (8019e48 <rmw_uxrce_fini_client_memory+0x24>)
 8019e2e:	6819      	ldr	r1, [r3, #0]
 8019e30:	f7e6 fa06 	bl	8000240 <strcmp>
 8019e34:	b938      	cbnz	r0, 8019e46 <rmw_uxrce_fini_client_memory+0x22>
 8019e36:	6020      	str	r0, [r4, #0]
 8019e38:	6861      	ldr	r1, [r4, #4]
 8019e3a:	b121      	cbz	r1, 8019e46 <rmw_uxrce_fini_client_memory+0x22>
 8019e3c:	4803      	ldr	r0, [pc, #12]	@ (8019e4c <rmw_uxrce_fini_client_memory+0x28>)
 8019e3e:	f007 fbd9 	bl	80215f4 <put_memory>
 8019e42:	2300      	movs	r3, #0
 8019e44:	6063      	str	r3, [r4, #4]
 8019e46:	bd10      	pop	{r4, pc}
 8019e48:	0802ad38 	.word	0x0802ad38
 8019e4c:	20010088 	.word	0x20010088

08019e50 <rmw_uxrce_fini_topic_memory>:
 8019e50:	b510      	push	{r4, lr}
 8019e52:	4604      	mov	r4, r0
 8019e54:	4803      	ldr	r0, [pc, #12]	@ (8019e64 <rmw_uxrce_fini_topic_memory+0x14>)
 8019e56:	4621      	mov	r1, r4
 8019e58:	f007 fbcc 	bl	80215f4 <put_memory>
 8019e5c:	2300      	movs	r3, #0
 8019e5e:	61a3      	str	r3, [r4, #24]
 8019e60:	bd10      	pop	{r4, pc}
 8019e62:	bf00      	nop
 8019e64:	200149b4 	.word	0x200149b4

08019e68 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8019e68:	b082      	sub	sp, #8
 8019e6a:	492b      	ldr	r1, [pc, #172]	@ (8019f18 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8019e6c:	b530      	push	{r4, r5, lr}
 8019e6e:	680d      	ldr	r5, [r1, #0]
 8019e70:	ac03      	add	r4, sp, #12
 8019e72:	e884 000c 	stmia.w	r4, {r2, r3}
 8019e76:	461c      	mov	r4, r3
 8019e78:	2d00      	cmp	r5, #0
 8019e7a:	d04b      	beq.n	8019f14 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8019e7c:	462b      	mov	r3, r5
 8019e7e:	2100      	movs	r1, #0
 8019e80:	689a      	ldr	r2, [r3, #8]
 8019e82:	685b      	ldr	r3, [r3, #4]
 8019e84:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8019e88:	4290      	cmp	r0, r2
 8019e8a:	bf08      	it	eq
 8019e8c:	3101      	addeq	r1, #1
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	d1f6      	bne.n	8019e80 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8019e92:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8019e96:	2b02      	cmp	r3, #2
 8019e98:	d029      	beq.n	8019eee <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8019e9a:	d820      	bhi.n	8019ede <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8019e9c:	428c      	cmp	r4, r1
 8019e9e:	d828      	bhi.n	8019ef2 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8019ea0:	fab4 f284 	clz	r2, r4
 8019ea4:	0952      	lsrs	r2, r2, #5
 8019ea6:	b324      	cbz	r4, 8019ef2 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8019ea8:	b1dd      	cbz	r5, 8019ee2 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8019eaa:	f04f 3cff 	mov.w	ip, #4294967295
 8019eae:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8019eb2:	e001      	b.n	8019eb8 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8019eb4:	686d      	ldr	r5, [r5, #4]
 8019eb6:	b1ad      	cbz	r5, 8019ee4 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8019eb8:	68ab      	ldr	r3, [r5, #8]
 8019eba:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 8019ebe:	4288      	cmp	r0, r1
 8019ec0:	d1f8      	bne.n	8019eb4 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8019ec2:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 8019ec6:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8019eca:	4561      	cmp	r1, ip
 8019ecc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8019ed0:	eb73 0e04 	sbcs.w	lr, r3, r4
 8019ed4:	daee      	bge.n	8019eb4 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8019ed6:	468c      	mov	ip, r1
 8019ed8:	461c      	mov	r4, r3
 8019eda:	462a      	mov	r2, r5
 8019edc:	e7ea      	b.n	8019eb4 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8019ede:	2b03      	cmp	r3, #3
 8019ee0:	d0dc      	beq.n	8019e9c <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8019ee2:	2200      	movs	r2, #0
 8019ee4:	4610      	mov	r0, r2
 8019ee6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019eea:	b002      	add	sp, #8
 8019eec:	4770      	bx	lr
 8019eee:	428c      	cmp	r4, r1
 8019ef0:	d905      	bls.n	8019efe <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8019ef2:	4809      	ldr	r0, [pc, #36]	@ (8019f18 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8019ef4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019ef8:	b002      	add	sp, #8
 8019efa:	f007 bb6b 	b.w	80215d4 <get_memory>
 8019efe:	fab4 f284 	clz	r2, r4
 8019f02:	0952      	lsrs	r2, r2, #5
 8019f04:	2c00      	cmp	r4, #0
 8019f06:	d1ed      	bne.n	8019ee4 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8019f08:	4803      	ldr	r0, [pc, #12]	@ (8019f18 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8019f0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019f0e:	b002      	add	sp, #8
 8019f10:	f007 bb60 	b.w	80215d4 <get_memory>
 8019f14:	4629      	mov	r1, r5
 8019f16:	e7bc      	b.n	8019e92 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8019f18:	20014994 	.word	0x20014994

08019f1c <rmw_uxrce_find_static_input_buffer_by_owner>:
 8019f1c:	4b12      	ldr	r3, [pc, #72]	@ (8019f68 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	b530      	push	{r4, r5, lr}
 8019f22:	b1f3      	cbz	r3, 8019f62 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8019f24:	f04f 3eff 	mov.w	lr, #4294967295
 8019f28:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8019f2c:	2400      	movs	r4, #0
 8019f2e:	e001      	b.n	8019f34 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8019f30:	685b      	ldr	r3, [r3, #4]
 8019f32:	b1a3      	cbz	r3, 8019f5e <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8019f34:	689a      	ldr	r2, [r3, #8]
 8019f36:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8019f3a:	4288      	cmp	r0, r1
 8019f3c:	d1f8      	bne.n	8019f30 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8019f3e:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8019f42:	f502 6202 	add.w	r2, r2, #2080	@ 0x820
 8019f46:	4571      	cmp	r1, lr
 8019f48:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8019f4c:	eb72 050c 	sbcs.w	r5, r2, ip
 8019f50:	daee      	bge.n	8019f30 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8019f52:	461c      	mov	r4, r3
 8019f54:	685b      	ldr	r3, [r3, #4]
 8019f56:	468e      	mov	lr, r1
 8019f58:	4694      	mov	ip, r2
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d1ea      	bne.n	8019f34 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8019f5e:	4620      	mov	r0, r4
 8019f60:	bd30      	pop	{r4, r5, pc}
 8019f62:	461c      	mov	r4, r3
 8019f64:	4620      	mov	r0, r4
 8019f66:	bd30      	pop	{r4, r5, pc}
 8019f68:	20014994 	.word	0x20014994
 8019f6c:	00000000 	.word	0x00000000

08019f70 <rmw_uxrce_clean_expired_static_input_buffer>:
 8019f70:	4b3d      	ldr	r3, [pc, #244]	@ (801a068 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8019f72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f76:	681f      	ldr	r7, [r3, #0]
 8019f78:	ed2d 8b06 	vpush	{d8-d10}
 8019f7c:	b08d      	sub	sp, #52	@ 0x34
 8019f7e:	f008 fc95 	bl	80228ac <rmw_uros_epoch_nanos>
 8019f82:	2f00      	cmp	r7, #0
 8019f84:	d05d      	beq.n	801a042 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8019f86:	46b8      	mov	r8, r7
 8019f88:	4681      	mov	r9, r0
 8019f8a:	468a      	mov	sl, r1
 8019f8c:	ac04      	add	r4, sp, #16
 8019f8e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8019f92:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8019f96:	2b04      	cmp	r3, #4
 8019f98:	ed9f 8b2d 	vldr	d8, [pc, #180]	@ 801a050 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8019f9c:	ed9f ab2e 	vldr	d10, [pc, #184]	@ 801a058 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8019fa0:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 801a060 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8019fa4:	d03f      	beq.n	801a026 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8019fa6:	2b05      	cmp	r3, #5
 8019fa8:	d044      	beq.n	801a034 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8019faa:	2b03      	cmp	r3, #3
 8019fac:	d03b      	beq.n	801a026 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8019fae:	ed8d 8b04 	vstr	d8, [sp, #16]
 8019fb2:	ed8d ab06 	vstr	d10, [sp, #24]
 8019fb6:	ab08      	add	r3, sp, #32
 8019fb8:	ed8d 8b08 	vstr	d8, [sp, #32]
 8019fbc:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8019fc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019fc2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8019fc6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8019fca:	f007 f925 	bl	8021218 <rmw_time_equal>
 8019fce:	b118      	cbz	r0, 8019fd8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8019fd0:	ed8d 9b04 	vstr	d9, [sp, #16]
 8019fd4:	ed8d 8b06 	vstr	d8, [sp, #24]
 8019fd8:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8019fdc:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8019fe0:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8019fe4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8019fe8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8019fec:	f007 f96a 	bl	80212c4 <rmw_time_total_nsec>
 8019ff0:	1830      	adds	r0, r6, r0
 8019ff2:	eb47 0101 	adc.w	r1, r7, r1
 8019ff6:	4548      	cmp	r0, r9
 8019ff8:	eb71 030a 	sbcs.w	r3, r1, sl
 8019ffc:	db05      	blt.n	801a00a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8019ffe:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 801a002:	4591      	cmp	r9, r2
 801a004:	eb7a 0303 	sbcs.w	r3, sl, r3
 801a008:	da03      	bge.n	801a012 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 801a00a:	4641      	mov	r1, r8
 801a00c:	4816      	ldr	r0, [pc, #88]	@ (801a068 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 801a00e:	f007 faf1 	bl	80215f4 <put_memory>
 801a012:	f1bb 0f00 	cmp.w	fp, #0
 801a016:	d014      	beq.n	801a042 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 801a018:	46d8      	mov	r8, fp
 801a01a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801a01e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801a022:	2b04      	cmp	r3, #4
 801a024:	d1bf      	bne.n	8019fa6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 801a026:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 801a02a:	3340      	adds	r3, #64	@ 0x40
 801a02c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a02e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801a032:	e7c0      	b.n	8019fb6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801a034:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 801a038:	3348      	adds	r3, #72	@ 0x48
 801a03a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a03c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801a040:	e7b9      	b.n	8019fb6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801a042:	b00d      	add	sp, #52	@ 0x34
 801a044:	ecbd 8b06 	vpop	{d8-d10}
 801a048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a04c:	f3af 8000 	nop.w
	...
 801a058:	00000001 	.word	0x00000001
 801a05c:	00000000 	.word	0x00000000
 801a060:	0000001e 	.word	0x0000001e
 801a064:	00000000 	.word	0x00000000
 801a068:	20014994 	.word	0x20014994

0801a06c <run_xrce_session>:
 801a06c:	b510      	push	{r4, lr}
 801a06e:	788c      	ldrb	r4, [r1, #2]
 801a070:	b086      	sub	sp, #24
 801a072:	2c01      	cmp	r4, #1
 801a074:	f8ad 200e 	strh.w	r2, [sp, #14]
 801a078:	d00c      	beq.n	801a094 <run_xrce_session+0x28>
 801a07a:	2401      	movs	r4, #1
 801a07c:	4619      	mov	r1, r3
 801a07e:	f10d 020e 	add.w	r2, sp, #14
 801a082:	f10d 0317 	add.w	r3, sp, #23
 801a086:	9400      	str	r4, [sp, #0]
 801a088:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a08c:	f002 f940 	bl	801c310 <uxr_run_session_until_all_status>
 801a090:	b006      	add	sp, #24
 801a092:	bd10      	pop	{r4, pc}
 801a094:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a098:	f001 fd5c 	bl	801bb54 <uxr_flash_output_streams>
 801a09c:	4620      	mov	r0, r4
 801a09e:	b006      	add	sp, #24
 801a0a0:	bd10      	pop	{r4, pc}
 801a0a2:	bf00      	nop

0801a0a4 <convert_qos_profile>:
 801a0a4:	7a4a      	ldrb	r2, [r1, #9]
 801a0a6:	f891 c008 	ldrb.w	ip, [r1, #8]
 801a0aa:	2a02      	cmp	r2, #2
 801a0ac:	bf18      	it	ne
 801a0ae:	2200      	movne	r2, #0
 801a0b0:	7002      	strb	r2, [r0, #0]
 801a0b2:	f1ac 0202 	sub.w	r2, ip, #2
 801a0b6:	fab2 f282 	clz	r2, r2
 801a0ba:	0952      	lsrs	r2, r2, #5
 801a0bc:	7042      	strb	r2, [r0, #1]
 801a0be:	780a      	ldrb	r2, [r1, #0]
 801a0c0:	8889      	ldrh	r1, [r1, #4]
 801a0c2:	f1a2 0202 	sub.w	r2, r2, #2
 801a0c6:	8081      	strh	r1, [r0, #4]
 801a0c8:	fab2 f282 	clz	r2, r2
 801a0cc:	0952      	lsrs	r2, r2, #5
 801a0ce:	7082      	strb	r2, [r0, #2]
 801a0d0:	4770      	bx	lr
 801a0d2:	bf00      	nop

0801a0d4 <generate_type_name>:
 801a0d4:	2300      	movs	r3, #0
 801a0d6:	b530      	push	{r4, r5, lr}
 801a0d8:	700b      	strb	r3, [r1, #0]
 801a0da:	b087      	sub	sp, #28
 801a0dc:	6803      	ldr	r3, [r0, #0]
 801a0de:	4614      	mov	r4, r2
 801a0e0:	b1bb      	cbz	r3, 801a112 <generate_type_name+0x3e>
 801a0e2:	4a0e      	ldr	r2, [pc, #56]	@ (801a11c <generate_type_name+0x48>)
 801a0e4:	4615      	mov	r5, r2
 801a0e6:	9500      	str	r5, [sp, #0]
 801a0e8:	9203      	str	r2, [sp, #12]
 801a0ea:	4d0d      	ldr	r5, [pc, #52]	@ (801a120 <generate_type_name+0x4c>)
 801a0ec:	6842      	ldr	r2, [r0, #4]
 801a0ee:	4608      	mov	r0, r1
 801a0f0:	490c      	ldr	r1, [pc, #48]	@ (801a124 <generate_type_name+0x50>)
 801a0f2:	9204      	str	r2, [sp, #16]
 801a0f4:	9105      	str	r1, [sp, #20]
 801a0f6:	9102      	str	r1, [sp, #8]
 801a0f8:	4621      	mov	r1, r4
 801a0fa:	4a0b      	ldr	r2, [pc, #44]	@ (801a128 <generate_type_name+0x54>)
 801a0fc:	9501      	str	r5, [sp, #4]
 801a0fe:	f00b f9f5 	bl	80254ec <sniprintf>
 801a102:	2800      	cmp	r0, #0
 801a104:	bfa8      	it	ge
 801a106:	4284      	cmpge	r4, r0
 801a108:	bfcc      	ite	gt
 801a10a:	2001      	movgt	r0, #1
 801a10c:	2000      	movle	r0, #0
 801a10e:	b007      	add	sp, #28
 801a110:	bd30      	pop	{r4, r5, pc}
 801a112:	4b06      	ldr	r3, [pc, #24]	@ (801a12c <generate_type_name+0x58>)
 801a114:	4a01      	ldr	r2, [pc, #4]	@ (801a11c <generate_type_name+0x48>)
 801a116:	461d      	mov	r5, r3
 801a118:	e7e5      	b.n	801a0e6 <generate_type_name+0x12>
 801a11a:	bf00      	nop
 801a11c:	0802a4b0 	.word	0x0802a4b0
 801a120:	0802a4c8 	.word	0x0802a4c8
 801a124:	0802a4c4 	.word	0x0802a4c4
 801a128:	0802a4b4 	.word	0x0802a4b4
 801a12c:	0802aa90 	.word	0x0802aa90

0801a130 <generate_topic_name>:
 801a130:	b530      	push	{r4, r5, lr}
 801a132:	4614      	mov	r4, r2
 801a134:	b083      	sub	sp, #12
 801a136:	4605      	mov	r5, r0
 801a138:	4b07      	ldr	r3, [pc, #28]	@ (801a158 <generate_topic_name+0x28>)
 801a13a:	4a08      	ldr	r2, [pc, #32]	@ (801a15c <generate_topic_name+0x2c>)
 801a13c:	4608      	mov	r0, r1
 801a13e:	9500      	str	r5, [sp, #0]
 801a140:	4621      	mov	r1, r4
 801a142:	f00b f9d3 	bl	80254ec <sniprintf>
 801a146:	2800      	cmp	r0, #0
 801a148:	bfa8      	it	ge
 801a14a:	4284      	cmpge	r4, r0
 801a14c:	bfcc      	ite	gt
 801a14e:	2001      	movgt	r0, #1
 801a150:	2000      	movle	r0, #0
 801a152:	b003      	add	sp, #12
 801a154:	bd30      	pop	{r4, r5, pc}
 801a156:	bf00      	nop
 801a158:	0802ab38 	.word	0x0802ab38
 801a15c:	0802a4cc 	.word	0x0802a4cc

0801a160 <is_uxrce_rmw_identifier_valid>:
 801a160:	b510      	push	{r4, lr}
 801a162:	4604      	mov	r4, r0
 801a164:	b140      	cbz	r0, 801a178 <is_uxrce_rmw_identifier_valid+0x18>
 801a166:	f007 fa9d 	bl	80216a4 <rmw_get_implementation_identifier>
 801a16a:	4601      	mov	r1, r0
 801a16c:	4620      	mov	r0, r4
 801a16e:	f7e6 f867 	bl	8000240 <strcmp>
 801a172:	fab0 f080 	clz	r0, r0
 801a176:	0940      	lsrs	r0, r0, #5
 801a178:	bd10      	pop	{r4, pc}
 801a17a:	bf00      	nop

0801a17c <get_message_typesupport_handle>:
 801a17c:	6883      	ldr	r3, [r0, #8]
 801a17e:	4718      	bx	r3

0801a180 <get_message_typesupport_handle_function>:
 801a180:	b510      	push	{r4, lr}
 801a182:	4604      	mov	r4, r0
 801a184:	6800      	ldr	r0, [r0, #0]
 801a186:	f7e6 f85b 	bl	8000240 <strcmp>
 801a18a:	2800      	cmp	r0, #0
 801a18c:	bf0c      	ite	eq
 801a18e:	4620      	moveq	r0, r4
 801a190:	2000      	movne	r0, #0
 801a192:	bd10      	pop	{r4, pc}

0801a194 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 801a194:	4b04      	ldr	r3, [pc, #16]	@ (801a1a8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801a196:	681a      	ldr	r2, [r3, #0]
 801a198:	b10a      	cbz	r2, 801a19e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 801a19a:	4803      	ldr	r0, [pc, #12]	@ (801a1a8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801a19c:	4770      	bx	lr
 801a19e:	4a03      	ldr	r2, [pc, #12]	@ (801a1ac <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 801a1a0:	4801      	ldr	r0, [pc, #4]	@ (801a1a8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801a1a2:	6812      	ldr	r2, [r2, #0]
 801a1a4:	601a      	str	r2, [r3, #0]
 801a1a6:	4770      	bx	lr
 801a1a8:	20000054 	.word	0x20000054
 801a1ac:	20000154 	.word	0x20000154

0801a1b0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 801a1b0:	4a02      	ldr	r2, [pc, #8]	@ (801a1bc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 801a1b2:	4b03      	ldr	r3, [pc, #12]	@ (801a1c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 801a1b4:	6812      	ldr	r2, [r2, #0]
 801a1b6:	601a      	str	r2, [r3, #0]
 801a1b8:	4770      	bx	lr
 801a1ba:	bf00      	nop
 801a1bc:	20000154 	.word	0x20000154
 801a1c0:	20000054 	.word	0x20000054

0801a1c4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 801a1c4:	4b04      	ldr	r3, [pc, #16]	@ (801a1d8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 801a1c6:	681a      	ldr	r2, [r3, #0]
 801a1c8:	b10a      	cbz	r2, 801a1ce <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 801a1ca:	4803      	ldr	r0, [pc, #12]	@ (801a1d8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 801a1cc:	4770      	bx	lr
 801a1ce:	4a03      	ldr	r2, [pc, #12]	@ (801a1dc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 801a1d0:	4801      	ldr	r0, [pc, #4]	@ (801a1d8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 801a1d2:	6812      	ldr	r2, [r2, #0]
 801a1d4:	601a      	str	r2, [r3, #0]
 801a1d6:	4770      	bx	lr
 801a1d8:	20000068 	.word	0x20000068
 801a1dc:	20000154 	.word	0x20000154

0801a1e0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 801a1e0:	4a02      	ldr	r2, [pc, #8]	@ (801a1ec <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xc>)
 801a1e2:	4b03      	ldr	r3, [pc, #12]	@ (801a1f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x10>)
 801a1e4:	6812      	ldr	r2, [r2, #0]
 801a1e6:	601a      	str	r2, [r3, #0]
 801a1e8:	4770      	bx	lr
 801a1ea:	bf00      	nop
 801a1ec:	20000154 	.word	0x20000154
 801a1f0:	20000068 	.word	0x20000068

0801a1f4 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 801a1f4:	f008 bb96 	b.w	8022924 <std_msgs__msg__Int32__init>

0801a1f8 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 801a1f8:	f008 bb98 	b.w	802292c <std_msgs__msg__Int32__fini>

0801a1fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 801a1fc:	4b04      	ldr	r3, [pc, #16]	@ (801a210 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801a1fe:	681a      	ldr	r2, [r3, #0]
 801a200:	b10a      	cbz	r2, 801a206 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 801a202:	4803      	ldr	r0, [pc, #12]	@ (801a210 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801a204:	4770      	bx	lr
 801a206:	4a03      	ldr	r2, [pc, #12]	@ (801a214 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 801a208:	4801      	ldr	r0, [pc, #4]	@ (801a210 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801a20a:	6812      	ldr	r2, [r2, #0]
 801a20c:	601a      	str	r2, [r3, #0]
 801a20e:	4770      	bx	lr
 801a210:	200000b0 	.word	0x200000b0
 801a214:	20000158 	.word	0x20000158

0801a218 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_init_function>:
 801a218:	f008 bb8a 	b.w	8022930 <std_msgs__msg__String__init>

0801a21c <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_fini_function>:
 801a21c:	f008 bb9a 	b.w	8022954 <std_msgs__msg__String__fini>

0801a220 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String>:
 801a220:	4b04      	ldr	r3, [pc, #16]	@ (801a234 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 801a222:	681a      	ldr	r2, [r3, #0]
 801a224:	b10a      	cbz	r2, 801a22a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 801a226:	4803      	ldr	r0, [pc, #12]	@ (801a234 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 801a228:	4770      	bx	lr
 801a22a:	4a03      	ldr	r2, [pc, #12]	@ (801a238 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 801a22c:	4801      	ldr	r0, [pc, #4]	@ (801a234 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 801a22e:	6812      	ldr	r2, [r2, #0]
 801a230:	601a      	str	r2, [r3, #0]
 801a232:	4770      	bx	lr
 801a234:	200000f8 	.word	0x200000f8
 801a238:	20000158 	.word	0x20000158

0801a23c <_Int32__max_serialized_size>:
 801a23c:	2104      	movs	r1, #4
 801a23e:	2000      	movs	r0, #0
 801a240:	b508      	push	{r3, lr}
 801a242:	f001 f86d 	bl	801b320 <ucdr_alignment>
 801a246:	3004      	adds	r0, #4
 801a248:	bd08      	pop	{r3, pc}
 801a24a:	bf00      	nop

0801a24c <_Int32__cdr_deserialize>:
 801a24c:	b109      	cbz	r1, 801a252 <_Int32__cdr_deserialize+0x6>
 801a24e:	f000 bf7f 	b.w	801b150 <ucdr_deserialize_int32_t>
 801a252:	4608      	mov	r0, r1
 801a254:	4770      	bx	lr
 801a256:	bf00      	nop

0801a258 <get_serialized_size_std_msgs__msg__Int32>:
 801a258:	b138      	cbz	r0, 801a26a <get_serialized_size_std_msgs__msg__Int32+0x12>
 801a25a:	b508      	push	{r3, lr}
 801a25c:	460b      	mov	r3, r1
 801a25e:	2104      	movs	r1, #4
 801a260:	4618      	mov	r0, r3
 801a262:	f001 f85d 	bl	801b320 <ucdr_alignment>
 801a266:	3004      	adds	r0, #4
 801a268:	bd08      	pop	{r3, pc}
 801a26a:	4770      	bx	lr

0801a26c <_Int32__cdr_serialize>:
 801a26c:	460a      	mov	r2, r1
 801a26e:	b118      	cbz	r0, 801a278 <_Int32__cdr_serialize+0xc>
 801a270:	6801      	ldr	r1, [r0, #0]
 801a272:	4610      	mov	r0, r2
 801a274:	f000 bed4 	b.w	801b020 <ucdr_serialize_int32_t>
 801a278:	4770      	bx	lr
 801a27a:	bf00      	nop

0801a27c <_Int32__get_serialized_size>:
 801a27c:	b130      	cbz	r0, 801a28c <_Int32__get_serialized_size+0x10>
 801a27e:	2104      	movs	r1, #4
 801a280:	2000      	movs	r0, #0
 801a282:	b508      	push	{r3, lr}
 801a284:	f001 f84c 	bl	801b320 <ucdr_alignment>
 801a288:	3004      	adds	r0, #4
 801a28a:	bd08      	pop	{r3, pc}
 801a28c:	4770      	bx	lr
 801a28e:	bf00      	nop

0801a290 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 801a290:	4800      	ldr	r0, [pc, #0]	@ (801a294 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 801a292:	4770      	bx	lr
 801a294:	20000104 	.word	0x20000104

0801a298 <_String__max_serialized_size>:
 801a298:	2000      	movs	r0, #0
 801a29a:	4770      	bx	lr

0801a29c <_String__cdr_serialize>:
 801a29c:	b1c8      	cbz	r0, 801a2d2 <_String__cdr_serialize+0x36>
 801a29e:	b570      	push	{r4, r5, r6, lr}
 801a2a0:	6806      	ldr	r6, [r0, #0]
 801a2a2:	4604      	mov	r4, r0
 801a2a4:	460d      	mov	r5, r1
 801a2a6:	b15e      	cbz	r6, 801a2c0 <_String__cdr_serialize+0x24>
 801a2a8:	4630      	mov	r0, r6
 801a2aa:	f7e5 ffd3 	bl	8000254 <strlen>
 801a2ae:	4603      	mov	r3, r0
 801a2b0:	1c42      	adds	r2, r0, #1
 801a2b2:	4631      	mov	r1, r6
 801a2b4:	4628      	mov	r0, r5
 801a2b6:	6063      	str	r3, [r4, #4]
 801a2b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a2bc:	f001 b8a0 	b.w	801b400 <ucdr_serialize_sequence_char>
 801a2c0:	4633      	mov	r3, r6
 801a2c2:	4632      	mov	r2, r6
 801a2c4:	4631      	mov	r1, r6
 801a2c6:	4628      	mov	r0, r5
 801a2c8:	6063      	str	r3, [r4, #4]
 801a2ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a2ce:	f001 b897 	b.w	801b400 <ucdr_serialize_sequence_char>
 801a2d2:	4770      	bx	lr

0801a2d4 <get_serialized_size_std_msgs__msg__String>:
 801a2d4:	b510      	push	{r4, lr}
 801a2d6:	4604      	mov	r4, r0
 801a2d8:	b130      	cbz	r0, 801a2e8 <get_serialized_size_std_msgs__msg__String+0x14>
 801a2da:	4608      	mov	r0, r1
 801a2dc:	2104      	movs	r1, #4
 801a2de:	f001 f81f 	bl	801b320 <ucdr_alignment>
 801a2e2:	6863      	ldr	r3, [r4, #4]
 801a2e4:	3305      	adds	r3, #5
 801a2e6:	4418      	add	r0, r3
 801a2e8:	bd10      	pop	{r4, pc}
 801a2ea:	bf00      	nop

0801a2ec <_String__cdr_deserialize>:
 801a2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a2ee:	460c      	mov	r4, r1
 801a2f0:	b083      	sub	sp, #12
 801a2f2:	b1a1      	cbz	r1, 801a31e <_String__cdr_deserialize+0x32>
 801a2f4:	688f      	ldr	r7, [r1, #8]
 801a2f6:	ab01      	add	r3, sp, #4
 801a2f8:	6809      	ldr	r1, [r1, #0]
 801a2fa:	4606      	mov	r6, r0
 801a2fc:	463a      	mov	r2, r7
 801a2fe:	f001 f891 	bl	801b424 <ucdr_deserialize_sequence_char>
 801a302:	9b01      	ldr	r3, [sp, #4]
 801a304:	4605      	mov	r5, r0
 801a306:	b920      	cbnz	r0, 801a312 <_String__cdr_deserialize+0x26>
 801a308:	429f      	cmp	r7, r3
 801a30a:	d30c      	bcc.n	801a326 <_String__cdr_deserialize+0x3a>
 801a30c:	4628      	mov	r0, r5
 801a30e:	b003      	add	sp, #12
 801a310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a312:	b103      	cbz	r3, 801a316 <_String__cdr_deserialize+0x2a>
 801a314:	3b01      	subs	r3, #1
 801a316:	4628      	mov	r0, r5
 801a318:	6063      	str	r3, [r4, #4]
 801a31a:	b003      	add	sp, #12
 801a31c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a31e:	460d      	mov	r5, r1
 801a320:	4628      	mov	r0, r5
 801a322:	b003      	add	sp, #12
 801a324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a326:	2101      	movs	r1, #1
 801a328:	4630      	mov	r0, r6
 801a32a:	75b5      	strb	r5, [r6, #22]
 801a32c:	7571      	strb	r1, [r6, #21]
 801a32e:	6065      	str	r5, [r4, #4]
 801a330:	f001 f80e 	bl	801b350 <ucdr_align_to>
 801a334:	4630      	mov	r0, r6
 801a336:	9901      	ldr	r1, [sp, #4]
 801a338:	f001 f842 	bl	801b3c0 <ucdr_advance_buffer>
 801a33c:	4628      	mov	r0, r5
 801a33e:	b003      	add	sp, #12
 801a340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a342:	bf00      	nop

0801a344 <_String__get_serialized_size>:
 801a344:	b510      	push	{r4, lr}
 801a346:	4604      	mov	r4, r0
 801a348:	b130      	cbz	r0, 801a358 <_String__get_serialized_size+0x14>
 801a34a:	2104      	movs	r1, #4
 801a34c:	2000      	movs	r0, #0
 801a34e:	f000 ffe7 	bl	801b320 <ucdr_alignment>
 801a352:	6863      	ldr	r3, [r4, #4]
 801a354:	3305      	adds	r3, #5
 801a356:	4418      	add	r0, r3
 801a358:	bd10      	pop	{r4, pc}
 801a35a:	bf00      	nop

0801a35c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 801a35c:	4800      	ldr	r0, [pc, #0]	@ (801a360 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 801a35e:	4770      	bx	lr
 801a360:	2000012c 	.word	0x2000012c

0801a364 <ucdr_serialize_bool>:
 801a364:	b538      	push	{r3, r4, r5, lr}
 801a366:	460d      	mov	r5, r1
 801a368:	2101      	movs	r1, #1
 801a36a:	4604      	mov	r4, r0
 801a36c:	f000 ff8c 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801a370:	b148      	cbz	r0, 801a386 <ucdr_serialize_bool+0x22>
 801a372:	68a3      	ldr	r3, [r4, #8]
 801a374:	2101      	movs	r1, #1
 801a376:	701d      	strb	r5, [r3, #0]
 801a378:	68a2      	ldr	r2, [r4, #8]
 801a37a:	6923      	ldr	r3, [r4, #16]
 801a37c:	440a      	add	r2, r1
 801a37e:	7561      	strb	r1, [r4, #21]
 801a380:	440b      	add	r3, r1
 801a382:	60a2      	str	r2, [r4, #8]
 801a384:	6123      	str	r3, [r4, #16]
 801a386:	7da0      	ldrb	r0, [r4, #22]
 801a388:	f080 0001 	eor.w	r0, r0, #1
 801a38c:	bd38      	pop	{r3, r4, r5, pc}
 801a38e:	bf00      	nop

0801a390 <ucdr_deserialize_bool>:
 801a390:	b538      	push	{r3, r4, r5, lr}
 801a392:	460d      	mov	r5, r1
 801a394:	2101      	movs	r1, #1
 801a396:	4604      	mov	r4, r0
 801a398:	f000 ff76 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801a39c:	b160      	cbz	r0, 801a3b8 <ucdr_deserialize_bool+0x28>
 801a39e:	68a2      	ldr	r2, [r4, #8]
 801a3a0:	2101      	movs	r1, #1
 801a3a2:	6923      	ldr	r3, [r4, #16]
 801a3a4:	f812 0b01 	ldrb.w	r0, [r2], #1
 801a3a8:	440b      	add	r3, r1
 801a3aa:	3800      	subs	r0, #0
 801a3ac:	bf18      	it	ne
 801a3ae:	2001      	movne	r0, #1
 801a3b0:	7028      	strb	r0, [r5, #0]
 801a3b2:	60a2      	str	r2, [r4, #8]
 801a3b4:	6123      	str	r3, [r4, #16]
 801a3b6:	7561      	strb	r1, [r4, #21]
 801a3b8:	7da0      	ldrb	r0, [r4, #22]
 801a3ba:	f080 0001 	eor.w	r0, r0, #1
 801a3be:	bd38      	pop	{r3, r4, r5, pc}

0801a3c0 <ucdr_serialize_uint8_t>:
 801a3c0:	b538      	push	{r3, r4, r5, lr}
 801a3c2:	460d      	mov	r5, r1
 801a3c4:	2101      	movs	r1, #1
 801a3c6:	4604      	mov	r4, r0
 801a3c8:	f000 ff5e 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801a3cc:	b148      	cbz	r0, 801a3e2 <ucdr_serialize_uint8_t+0x22>
 801a3ce:	68a3      	ldr	r3, [r4, #8]
 801a3d0:	2101      	movs	r1, #1
 801a3d2:	701d      	strb	r5, [r3, #0]
 801a3d4:	68a2      	ldr	r2, [r4, #8]
 801a3d6:	6923      	ldr	r3, [r4, #16]
 801a3d8:	440a      	add	r2, r1
 801a3da:	7561      	strb	r1, [r4, #21]
 801a3dc:	440b      	add	r3, r1
 801a3de:	60a2      	str	r2, [r4, #8]
 801a3e0:	6123      	str	r3, [r4, #16]
 801a3e2:	7da0      	ldrb	r0, [r4, #22]
 801a3e4:	f080 0001 	eor.w	r0, r0, #1
 801a3e8:	bd38      	pop	{r3, r4, r5, pc}
 801a3ea:	bf00      	nop

0801a3ec <ucdr_deserialize_uint8_t>:
 801a3ec:	b538      	push	{r3, r4, r5, lr}
 801a3ee:	460d      	mov	r5, r1
 801a3f0:	2101      	movs	r1, #1
 801a3f2:	4604      	mov	r4, r0
 801a3f4:	f000 ff48 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801a3f8:	b150      	cbz	r0, 801a410 <ucdr_deserialize_uint8_t+0x24>
 801a3fa:	68a3      	ldr	r3, [r4, #8]
 801a3fc:	2101      	movs	r1, #1
 801a3fe:	781b      	ldrb	r3, [r3, #0]
 801a400:	702b      	strb	r3, [r5, #0]
 801a402:	68a2      	ldr	r2, [r4, #8]
 801a404:	6923      	ldr	r3, [r4, #16]
 801a406:	440a      	add	r2, r1
 801a408:	7561      	strb	r1, [r4, #21]
 801a40a:	440b      	add	r3, r1
 801a40c:	60a2      	str	r2, [r4, #8]
 801a40e:	6123      	str	r3, [r4, #16]
 801a410:	7da0      	ldrb	r0, [r4, #22]
 801a412:	f080 0001 	eor.w	r0, r0, #1
 801a416:	bd38      	pop	{r3, r4, r5, pc}

0801a418 <ucdr_serialize_uint16_t>:
 801a418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a41c:	460b      	mov	r3, r1
 801a41e:	b082      	sub	sp, #8
 801a420:	4604      	mov	r4, r0
 801a422:	2102      	movs	r1, #2
 801a424:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a428:	f000 ff82 	bl	801b330 <ucdr_buffer_alignment>
 801a42c:	4601      	mov	r1, r0
 801a42e:	4620      	mov	r0, r4
 801a430:	7d67      	ldrb	r7, [r4, #21]
 801a432:	f000 ffc5 	bl	801b3c0 <ucdr_advance_buffer>
 801a436:	2102      	movs	r1, #2
 801a438:	4620      	mov	r0, r4
 801a43a:	f000 ff19 	bl	801b270 <ucdr_check_buffer_available_for>
 801a43e:	bb78      	cbnz	r0, 801a4a0 <ucdr_serialize_uint16_t+0x88>
 801a440:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801a444:	42ab      	cmp	r3, r5
 801a446:	d926      	bls.n	801a496 <ucdr_serialize_uint16_t+0x7e>
 801a448:	1b5e      	subs	r6, r3, r5
 801a44a:	60a3      	str	r3, [r4, #8]
 801a44c:	6923      	ldr	r3, [r4, #16]
 801a44e:	4620      	mov	r0, r4
 801a450:	f1c6 0802 	rsb	r8, r6, #2
 801a454:	4433      	add	r3, r6
 801a456:	4641      	mov	r1, r8
 801a458:	6123      	str	r3, [r4, #16]
 801a45a:	f000 ff15 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801a45e:	2800      	cmp	r0, #0
 801a460:	d03b      	beq.n	801a4da <ucdr_serialize_uint16_t+0xc2>
 801a462:	7d23      	ldrb	r3, [r4, #20]
 801a464:	2b01      	cmp	r3, #1
 801a466:	d04a      	beq.n	801a4fe <ucdr_serialize_uint16_t+0xe6>
 801a468:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801a46c:	702b      	strb	r3, [r5, #0]
 801a46e:	2e00      	cmp	r6, #0
 801a470:	d040      	beq.n	801a4f4 <ucdr_serialize_uint16_t+0xdc>
 801a472:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801a476:	706b      	strb	r3, [r5, #1]
 801a478:	6923      	ldr	r3, [r4, #16]
 801a47a:	2102      	movs	r1, #2
 801a47c:	68a2      	ldr	r2, [r4, #8]
 801a47e:	3302      	adds	r3, #2
 801a480:	7da0      	ldrb	r0, [r4, #22]
 801a482:	4442      	add	r2, r8
 801a484:	7561      	strb	r1, [r4, #21]
 801a486:	1b9e      	subs	r6, r3, r6
 801a488:	f080 0001 	eor.w	r0, r0, #1
 801a48c:	60a2      	str	r2, [r4, #8]
 801a48e:	6126      	str	r6, [r4, #16]
 801a490:	b002      	add	sp, #8
 801a492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a496:	2102      	movs	r1, #2
 801a498:	4620      	mov	r0, r4
 801a49a:	f000 fef5 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801a49e:	b190      	cbz	r0, 801a4c6 <ucdr_serialize_uint16_t+0xae>
 801a4a0:	7d23      	ldrb	r3, [r4, #20]
 801a4a2:	2b01      	cmp	r3, #1
 801a4a4:	68a3      	ldr	r3, [r4, #8]
 801a4a6:	d014      	beq.n	801a4d2 <ucdr_serialize_uint16_t+0xba>
 801a4a8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801a4ac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801a4b0:	7019      	strb	r1, [r3, #0]
 801a4b2:	68a3      	ldr	r3, [r4, #8]
 801a4b4:	705a      	strb	r2, [r3, #1]
 801a4b6:	2102      	movs	r1, #2
 801a4b8:	68a2      	ldr	r2, [r4, #8]
 801a4ba:	6923      	ldr	r3, [r4, #16]
 801a4bc:	440a      	add	r2, r1
 801a4be:	7561      	strb	r1, [r4, #21]
 801a4c0:	440b      	add	r3, r1
 801a4c2:	60a2      	str	r2, [r4, #8]
 801a4c4:	6123      	str	r3, [r4, #16]
 801a4c6:	7da0      	ldrb	r0, [r4, #22]
 801a4c8:	f080 0001 	eor.w	r0, r0, #1
 801a4cc:	b002      	add	sp, #8
 801a4ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a4d2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801a4d6:	801a      	strh	r2, [r3, #0]
 801a4d8:	e7ed      	b.n	801a4b6 <ucdr_serialize_uint16_t+0x9e>
 801a4da:	68a2      	ldr	r2, [r4, #8]
 801a4dc:	6923      	ldr	r3, [r4, #16]
 801a4de:	7da0      	ldrb	r0, [r4, #22]
 801a4e0:	1b92      	subs	r2, r2, r6
 801a4e2:	1b9b      	subs	r3, r3, r6
 801a4e4:	7567      	strb	r7, [r4, #21]
 801a4e6:	f080 0001 	eor.w	r0, r0, #1
 801a4ea:	60a2      	str	r2, [r4, #8]
 801a4ec:	6123      	str	r3, [r4, #16]
 801a4ee:	b002      	add	sp, #8
 801a4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a4f4:	68a3      	ldr	r3, [r4, #8]
 801a4f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801a4fa:	701a      	strb	r2, [r3, #0]
 801a4fc:	e7bc      	b.n	801a478 <ucdr_serialize_uint16_t+0x60>
 801a4fe:	4628      	mov	r0, r5
 801a500:	f10d 0506 	add.w	r5, sp, #6
 801a504:	4632      	mov	r2, r6
 801a506:	4629      	mov	r1, r5
 801a508:	f00b fa8b 	bl	8025a22 <memcpy>
 801a50c:	4642      	mov	r2, r8
 801a50e:	19a9      	adds	r1, r5, r6
 801a510:	68a0      	ldr	r0, [r4, #8]
 801a512:	f00b fa86 	bl	8025a22 <memcpy>
 801a516:	e7af      	b.n	801a478 <ucdr_serialize_uint16_t+0x60>

0801a518 <ucdr_serialize_endian_uint16_t>:
 801a518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a51c:	4604      	mov	r4, r0
 801a51e:	b083      	sub	sp, #12
 801a520:	460d      	mov	r5, r1
 801a522:	2102      	movs	r1, #2
 801a524:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a528:	f000 ff02 	bl	801b330 <ucdr_buffer_alignment>
 801a52c:	4601      	mov	r1, r0
 801a52e:	4620      	mov	r0, r4
 801a530:	f894 8015 	ldrb.w	r8, [r4, #21]
 801a534:	f000 ff44 	bl	801b3c0 <ucdr_advance_buffer>
 801a538:	2102      	movs	r1, #2
 801a53a:	4620      	mov	r0, r4
 801a53c:	f000 fe98 	bl	801b270 <ucdr_check_buffer_available_for>
 801a540:	bb70      	cbnz	r0, 801a5a0 <ucdr_serialize_endian_uint16_t+0x88>
 801a542:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801a546:	42be      	cmp	r6, r7
 801a548:	d925      	bls.n	801a596 <ucdr_serialize_endian_uint16_t+0x7e>
 801a54a:	6923      	ldr	r3, [r4, #16]
 801a54c:	4620      	mov	r0, r4
 801a54e:	60a6      	str	r6, [r4, #8]
 801a550:	1bf6      	subs	r6, r6, r7
 801a552:	4433      	add	r3, r6
 801a554:	f1c6 0902 	rsb	r9, r6, #2
 801a558:	6123      	str	r3, [r4, #16]
 801a55a:	4649      	mov	r1, r9
 801a55c:	f000 fe94 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801a560:	2800      	cmp	r0, #0
 801a562:	d039      	beq.n	801a5d8 <ucdr_serialize_endian_uint16_t+0xc0>
 801a564:	2d01      	cmp	r5, #1
 801a566:	d04a      	beq.n	801a5fe <ucdr_serialize_endian_uint16_t+0xe6>
 801a568:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801a56c:	703b      	strb	r3, [r7, #0]
 801a56e:	2e00      	cmp	r6, #0
 801a570:	d040      	beq.n	801a5f4 <ucdr_serialize_endian_uint16_t+0xdc>
 801a572:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801a576:	707b      	strb	r3, [r7, #1]
 801a578:	6923      	ldr	r3, [r4, #16]
 801a57a:	2102      	movs	r1, #2
 801a57c:	68a2      	ldr	r2, [r4, #8]
 801a57e:	7da0      	ldrb	r0, [r4, #22]
 801a580:	3302      	adds	r3, #2
 801a582:	444a      	add	r2, r9
 801a584:	7561      	strb	r1, [r4, #21]
 801a586:	1b9b      	subs	r3, r3, r6
 801a588:	f080 0001 	eor.w	r0, r0, #1
 801a58c:	60a2      	str	r2, [r4, #8]
 801a58e:	6123      	str	r3, [r4, #16]
 801a590:	b003      	add	sp, #12
 801a592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a596:	2102      	movs	r1, #2
 801a598:	4620      	mov	r0, r4
 801a59a:	f000 fe75 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801a59e:	b188      	cbz	r0, 801a5c4 <ucdr_serialize_endian_uint16_t+0xac>
 801a5a0:	2d01      	cmp	r5, #1
 801a5a2:	68a3      	ldr	r3, [r4, #8]
 801a5a4:	d014      	beq.n	801a5d0 <ucdr_serialize_endian_uint16_t+0xb8>
 801a5a6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801a5aa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801a5ae:	7019      	strb	r1, [r3, #0]
 801a5b0:	68a3      	ldr	r3, [r4, #8]
 801a5b2:	705a      	strb	r2, [r3, #1]
 801a5b4:	2102      	movs	r1, #2
 801a5b6:	68a2      	ldr	r2, [r4, #8]
 801a5b8:	6923      	ldr	r3, [r4, #16]
 801a5ba:	440a      	add	r2, r1
 801a5bc:	7561      	strb	r1, [r4, #21]
 801a5be:	440b      	add	r3, r1
 801a5c0:	60a2      	str	r2, [r4, #8]
 801a5c2:	6123      	str	r3, [r4, #16]
 801a5c4:	7da0      	ldrb	r0, [r4, #22]
 801a5c6:	f080 0001 	eor.w	r0, r0, #1
 801a5ca:	b003      	add	sp, #12
 801a5cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a5d0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801a5d4:	801a      	strh	r2, [r3, #0]
 801a5d6:	e7ed      	b.n	801a5b4 <ucdr_serialize_endian_uint16_t+0x9c>
 801a5d8:	68a2      	ldr	r2, [r4, #8]
 801a5da:	6923      	ldr	r3, [r4, #16]
 801a5dc:	7da0      	ldrb	r0, [r4, #22]
 801a5de:	1b92      	subs	r2, r2, r6
 801a5e0:	1b9b      	subs	r3, r3, r6
 801a5e2:	f884 8015 	strb.w	r8, [r4, #21]
 801a5e6:	f080 0001 	eor.w	r0, r0, #1
 801a5ea:	60a2      	str	r2, [r4, #8]
 801a5ec:	6123      	str	r3, [r4, #16]
 801a5ee:	b003      	add	sp, #12
 801a5f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a5f4:	68a3      	ldr	r3, [r4, #8]
 801a5f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801a5fa:	701a      	strb	r2, [r3, #0]
 801a5fc:	e7bc      	b.n	801a578 <ucdr_serialize_endian_uint16_t+0x60>
 801a5fe:	f10d 0506 	add.w	r5, sp, #6
 801a602:	4632      	mov	r2, r6
 801a604:	4638      	mov	r0, r7
 801a606:	4629      	mov	r1, r5
 801a608:	f00b fa0b 	bl	8025a22 <memcpy>
 801a60c:	464a      	mov	r2, r9
 801a60e:	19a9      	adds	r1, r5, r6
 801a610:	68a0      	ldr	r0, [r4, #8]
 801a612:	f00b fa06 	bl	8025a22 <memcpy>
 801a616:	e7af      	b.n	801a578 <ucdr_serialize_endian_uint16_t+0x60>

0801a618 <ucdr_deserialize_uint16_t>:
 801a618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a61c:	4604      	mov	r4, r0
 801a61e:	460d      	mov	r5, r1
 801a620:	2102      	movs	r1, #2
 801a622:	f000 fe85 	bl	801b330 <ucdr_buffer_alignment>
 801a626:	4601      	mov	r1, r0
 801a628:	4620      	mov	r0, r4
 801a62a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801a62e:	f000 fec7 	bl	801b3c0 <ucdr_advance_buffer>
 801a632:	2102      	movs	r1, #2
 801a634:	4620      	mov	r0, r4
 801a636:	f000 fe1b 	bl	801b270 <ucdr_check_buffer_available_for>
 801a63a:	bb60      	cbnz	r0, 801a696 <ucdr_deserialize_uint16_t+0x7e>
 801a63c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801a640:	42be      	cmp	r6, r7
 801a642:	d923      	bls.n	801a68c <ucdr_deserialize_uint16_t+0x74>
 801a644:	6923      	ldr	r3, [r4, #16]
 801a646:	4620      	mov	r0, r4
 801a648:	60a6      	str	r6, [r4, #8]
 801a64a:	1bf6      	subs	r6, r6, r7
 801a64c:	4433      	add	r3, r6
 801a64e:	f1c6 0902 	rsb	r9, r6, #2
 801a652:	6123      	str	r3, [r4, #16]
 801a654:	4649      	mov	r1, r9
 801a656:	f000 fe17 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801a65a:	2800      	cmp	r0, #0
 801a65c:	d034      	beq.n	801a6c8 <ucdr_deserialize_uint16_t+0xb0>
 801a65e:	7d23      	ldrb	r3, [r4, #20]
 801a660:	2b01      	cmp	r3, #1
 801a662:	d042      	beq.n	801a6ea <ucdr_deserialize_uint16_t+0xd2>
 801a664:	787b      	ldrb	r3, [r7, #1]
 801a666:	702b      	strb	r3, [r5, #0]
 801a668:	2e00      	cmp	r6, #0
 801a66a:	d03a      	beq.n	801a6e2 <ucdr_deserialize_uint16_t+0xca>
 801a66c:	783b      	ldrb	r3, [r7, #0]
 801a66e:	706b      	strb	r3, [r5, #1]
 801a670:	6923      	ldr	r3, [r4, #16]
 801a672:	2102      	movs	r1, #2
 801a674:	68a2      	ldr	r2, [r4, #8]
 801a676:	3302      	adds	r3, #2
 801a678:	7da0      	ldrb	r0, [r4, #22]
 801a67a:	444a      	add	r2, r9
 801a67c:	7561      	strb	r1, [r4, #21]
 801a67e:	1b9b      	subs	r3, r3, r6
 801a680:	f080 0001 	eor.w	r0, r0, #1
 801a684:	60a2      	str	r2, [r4, #8]
 801a686:	6123      	str	r3, [r4, #16]
 801a688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a68c:	2102      	movs	r1, #2
 801a68e:	4620      	mov	r0, r4
 801a690:	f000 fdfa 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801a694:	b180      	cbz	r0, 801a6b8 <ucdr_deserialize_uint16_t+0xa0>
 801a696:	7d23      	ldrb	r3, [r4, #20]
 801a698:	2b01      	cmp	r3, #1
 801a69a:	68a3      	ldr	r3, [r4, #8]
 801a69c:	d011      	beq.n	801a6c2 <ucdr_deserialize_uint16_t+0xaa>
 801a69e:	785b      	ldrb	r3, [r3, #1]
 801a6a0:	702b      	strb	r3, [r5, #0]
 801a6a2:	68a3      	ldr	r3, [r4, #8]
 801a6a4:	781b      	ldrb	r3, [r3, #0]
 801a6a6:	706b      	strb	r3, [r5, #1]
 801a6a8:	2102      	movs	r1, #2
 801a6aa:	68a2      	ldr	r2, [r4, #8]
 801a6ac:	6923      	ldr	r3, [r4, #16]
 801a6ae:	440a      	add	r2, r1
 801a6b0:	7561      	strb	r1, [r4, #21]
 801a6b2:	440b      	add	r3, r1
 801a6b4:	60a2      	str	r2, [r4, #8]
 801a6b6:	6123      	str	r3, [r4, #16]
 801a6b8:	7da0      	ldrb	r0, [r4, #22]
 801a6ba:	f080 0001 	eor.w	r0, r0, #1
 801a6be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a6c2:	881b      	ldrh	r3, [r3, #0]
 801a6c4:	802b      	strh	r3, [r5, #0]
 801a6c6:	e7ef      	b.n	801a6a8 <ucdr_deserialize_uint16_t+0x90>
 801a6c8:	68a2      	ldr	r2, [r4, #8]
 801a6ca:	6923      	ldr	r3, [r4, #16]
 801a6cc:	1b92      	subs	r2, r2, r6
 801a6ce:	7da0      	ldrb	r0, [r4, #22]
 801a6d0:	1b9b      	subs	r3, r3, r6
 801a6d2:	f884 8015 	strb.w	r8, [r4, #21]
 801a6d6:	f080 0001 	eor.w	r0, r0, #1
 801a6da:	60a2      	str	r2, [r4, #8]
 801a6dc:	6123      	str	r3, [r4, #16]
 801a6de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a6e2:	68a3      	ldr	r3, [r4, #8]
 801a6e4:	781b      	ldrb	r3, [r3, #0]
 801a6e6:	706b      	strb	r3, [r5, #1]
 801a6e8:	e7c2      	b.n	801a670 <ucdr_deserialize_uint16_t+0x58>
 801a6ea:	4639      	mov	r1, r7
 801a6ec:	4632      	mov	r2, r6
 801a6ee:	4628      	mov	r0, r5
 801a6f0:	f00b f997 	bl	8025a22 <memcpy>
 801a6f4:	464a      	mov	r2, r9
 801a6f6:	19a8      	adds	r0, r5, r6
 801a6f8:	68a1      	ldr	r1, [r4, #8]
 801a6fa:	f00b f992 	bl	8025a22 <memcpy>
 801a6fe:	e7b7      	b.n	801a670 <ucdr_deserialize_uint16_t+0x58>

0801a700 <ucdr_deserialize_endian_uint16_t>:
 801a700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a704:	4604      	mov	r4, r0
 801a706:	460e      	mov	r6, r1
 801a708:	2102      	movs	r1, #2
 801a70a:	4615      	mov	r5, r2
 801a70c:	f000 fe10 	bl	801b330 <ucdr_buffer_alignment>
 801a710:	4601      	mov	r1, r0
 801a712:	4620      	mov	r0, r4
 801a714:	f894 8015 	ldrb.w	r8, [r4, #21]
 801a718:	f000 fe52 	bl	801b3c0 <ucdr_advance_buffer>
 801a71c:	2102      	movs	r1, #2
 801a71e:	4620      	mov	r0, r4
 801a720:	f000 fda6 	bl	801b270 <ucdr_check_buffer_available_for>
 801a724:	bb70      	cbnz	r0, 801a784 <ucdr_deserialize_endian_uint16_t+0x84>
 801a726:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 801a72a:	454f      	cmp	r7, r9
 801a72c:	d925      	bls.n	801a77a <ucdr_deserialize_endian_uint16_t+0x7a>
 801a72e:	6923      	ldr	r3, [r4, #16]
 801a730:	4620      	mov	r0, r4
 801a732:	60a7      	str	r7, [r4, #8]
 801a734:	eba7 0709 	sub.w	r7, r7, r9
 801a738:	443b      	add	r3, r7
 801a73a:	f1c7 0a02 	rsb	sl, r7, #2
 801a73e:	6123      	str	r3, [r4, #16]
 801a740:	4651      	mov	r1, sl
 801a742:	f000 fda1 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801a746:	2800      	cmp	r0, #0
 801a748:	d034      	beq.n	801a7b4 <ucdr_deserialize_endian_uint16_t+0xb4>
 801a74a:	2e01      	cmp	r6, #1
 801a74c:	d043      	beq.n	801a7d6 <ucdr_deserialize_endian_uint16_t+0xd6>
 801a74e:	f899 3001 	ldrb.w	r3, [r9, #1]
 801a752:	702b      	strb	r3, [r5, #0]
 801a754:	2f00      	cmp	r7, #0
 801a756:	d03a      	beq.n	801a7ce <ucdr_deserialize_endian_uint16_t+0xce>
 801a758:	f899 3000 	ldrb.w	r3, [r9]
 801a75c:	706b      	strb	r3, [r5, #1]
 801a75e:	6923      	ldr	r3, [r4, #16]
 801a760:	2102      	movs	r1, #2
 801a762:	68a2      	ldr	r2, [r4, #8]
 801a764:	3302      	adds	r3, #2
 801a766:	7da0      	ldrb	r0, [r4, #22]
 801a768:	4452      	add	r2, sl
 801a76a:	7561      	strb	r1, [r4, #21]
 801a76c:	1bdb      	subs	r3, r3, r7
 801a76e:	f080 0001 	eor.w	r0, r0, #1
 801a772:	60a2      	str	r2, [r4, #8]
 801a774:	6123      	str	r3, [r4, #16]
 801a776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a77a:	2102      	movs	r1, #2
 801a77c:	4620      	mov	r0, r4
 801a77e:	f000 fd83 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801a782:	b178      	cbz	r0, 801a7a4 <ucdr_deserialize_endian_uint16_t+0xa4>
 801a784:	2e01      	cmp	r6, #1
 801a786:	68a3      	ldr	r3, [r4, #8]
 801a788:	d011      	beq.n	801a7ae <ucdr_deserialize_endian_uint16_t+0xae>
 801a78a:	785b      	ldrb	r3, [r3, #1]
 801a78c:	702b      	strb	r3, [r5, #0]
 801a78e:	68a3      	ldr	r3, [r4, #8]
 801a790:	781b      	ldrb	r3, [r3, #0]
 801a792:	706b      	strb	r3, [r5, #1]
 801a794:	2102      	movs	r1, #2
 801a796:	68a2      	ldr	r2, [r4, #8]
 801a798:	6923      	ldr	r3, [r4, #16]
 801a79a:	440a      	add	r2, r1
 801a79c:	7561      	strb	r1, [r4, #21]
 801a79e:	440b      	add	r3, r1
 801a7a0:	60a2      	str	r2, [r4, #8]
 801a7a2:	6123      	str	r3, [r4, #16]
 801a7a4:	7da0      	ldrb	r0, [r4, #22]
 801a7a6:	f080 0001 	eor.w	r0, r0, #1
 801a7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a7ae:	881b      	ldrh	r3, [r3, #0]
 801a7b0:	802b      	strh	r3, [r5, #0]
 801a7b2:	e7ef      	b.n	801a794 <ucdr_deserialize_endian_uint16_t+0x94>
 801a7b4:	68a2      	ldr	r2, [r4, #8]
 801a7b6:	6923      	ldr	r3, [r4, #16]
 801a7b8:	1bd2      	subs	r2, r2, r7
 801a7ba:	7da0      	ldrb	r0, [r4, #22]
 801a7bc:	1bdb      	subs	r3, r3, r7
 801a7be:	f884 8015 	strb.w	r8, [r4, #21]
 801a7c2:	f080 0001 	eor.w	r0, r0, #1
 801a7c6:	60a2      	str	r2, [r4, #8]
 801a7c8:	6123      	str	r3, [r4, #16]
 801a7ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a7ce:	68a3      	ldr	r3, [r4, #8]
 801a7d0:	781b      	ldrb	r3, [r3, #0]
 801a7d2:	706b      	strb	r3, [r5, #1]
 801a7d4:	e7c3      	b.n	801a75e <ucdr_deserialize_endian_uint16_t+0x5e>
 801a7d6:	4649      	mov	r1, r9
 801a7d8:	463a      	mov	r2, r7
 801a7da:	4628      	mov	r0, r5
 801a7dc:	f00b f921 	bl	8025a22 <memcpy>
 801a7e0:	4652      	mov	r2, sl
 801a7e2:	19e8      	adds	r0, r5, r7
 801a7e4:	68a1      	ldr	r1, [r4, #8]
 801a7e6:	f00b f91c 	bl	8025a22 <memcpy>
 801a7ea:	e7b8      	b.n	801a75e <ucdr_deserialize_endian_uint16_t+0x5e>

0801a7ec <ucdr_serialize_uint32_t>:
 801a7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7f0:	b082      	sub	sp, #8
 801a7f2:	4604      	mov	r4, r0
 801a7f4:	9101      	str	r1, [sp, #4]
 801a7f6:	2104      	movs	r1, #4
 801a7f8:	f000 fd9a 	bl	801b330 <ucdr_buffer_alignment>
 801a7fc:	4601      	mov	r1, r0
 801a7fe:	4620      	mov	r0, r4
 801a800:	7d67      	ldrb	r7, [r4, #21]
 801a802:	f000 fddd 	bl	801b3c0 <ucdr_advance_buffer>
 801a806:	2104      	movs	r1, #4
 801a808:	4620      	mov	r0, r4
 801a80a:	f000 fd31 	bl	801b270 <ucdr_check_buffer_available_for>
 801a80e:	2800      	cmp	r0, #0
 801a810:	d139      	bne.n	801a886 <ucdr_serialize_uint32_t+0x9a>
 801a812:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801a816:	42ab      	cmp	r3, r5
 801a818:	d930      	bls.n	801a87c <ucdr_serialize_uint32_t+0x90>
 801a81a:	1b5e      	subs	r6, r3, r5
 801a81c:	60a3      	str	r3, [r4, #8]
 801a81e:	6923      	ldr	r3, [r4, #16]
 801a820:	4620      	mov	r0, r4
 801a822:	f1c6 0804 	rsb	r8, r6, #4
 801a826:	4433      	add	r3, r6
 801a828:	4641      	mov	r1, r8
 801a82a:	6123      	str	r3, [r4, #16]
 801a82c:	f000 fd2c 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801a830:	2800      	cmp	r0, #0
 801a832:	d04c      	beq.n	801a8ce <ucdr_serialize_uint32_t+0xe2>
 801a834:	7d23      	ldrb	r3, [r4, #20]
 801a836:	2b01      	cmp	r3, #1
 801a838:	d063      	beq.n	801a902 <ucdr_serialize_uint32_t+0x116>
 801a83a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801a83e:	702b      	strb	r3, [r5, #0]
 801a840:	2e00      	cmp	r6, #0
 801a842:	d051      	beq.n	801a8e8 <ucdr_serialize_uint32_t+0xfc>
 801a844:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801a848:	2e01      	cmp	r6, #1
 801a84a:	706b      	strb	r3, [r5, #1]
 801a84c:	d050      	beq.n	801a8f0 <ucdr_serialize_uint32_t+0x104>
 801a84e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801a852:	2e02      	cmp	r6, #2
 801a854:	70ab      	strb	r3, [r5, #2]
 801a856:	d04f      	beq.n	801a8f8 <ucdr_serialize_uint32_t+0x10c>
 801a858:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801a85c:	70eb      	strb	r3, [r5, #3]
 801a85e:	6923      	ldr	r3, [r4, #16]
 801a860:	2104      	movs	r1, #4
 801a862:	68a2      	ldr	r2, [r4, #8]
 801a864:	3304      	adds	r3, #4
 801a866:	7da0      	ldrb	r0, [r4, #22]
 801a868:	4442      	add	r2, r8
 801a86a:	7561      	strb	r1, [r4, #21]
 801a86c:	1b9e      	subs	r6, r3, r6
 801a86e:	f080 0001 	eor.w	r0, r0, #1
 801a872:	60a2      	str	r2, [r4, #8]
 801a874:	6126      	str	r6, [r4, #16]
 801a876:	b002      	add	sp, #8
 801a878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a87c:	2104      	movs	r1, #4
 801a87e:	4620      	mov	r0, r4
 801a880:	f000 fd02 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801a884:	b1d0      	cbz	r0, 801a8bc <ucdr_serialize_uint32_t+0xd0>
 801a886:	7d23      	ldrb	r3, [r4, #20]
 801a888:	2b01      	cmp	r3, #1
 801a88a:	68a3      	ldr	r3, [r4, #8]
 801a88c:	d01c      	beq.n	801a8c8 <ucdr_serialize_uint32_t+0xdc>
 801a88e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801a892:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801a896:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801a89a:	7018      	strb	r0, [r3, #0]
 801a89c:	68a3      	ldr	r3, [r4, #8]
 801a89e:	705a      	strb	r2, [r3, #1]
 801a8a0:	68a3      	ldr	r3, [r4, #8]
 801a8a2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801a8a6:	7099      	strb	r1, [r3, #2]
 801a8a8:	68a3      	ldr	r3, [r4, #8]
 801a8aa:	70da      	strb	r2, [r3, #3]
 801a8ac:	2104      	movs	r1, #4
 801a8ae:	68a2      	ldr	r2, [r4, #8]
 801a8b0:	6923      	ldr	r3, [r4, #16]
 801a8b2:	440a      	add	r2, r1
 801a8b4:	7561      	strb	r1, [r4, #21]
 801a8b6:	440b      	add	r3, r1
 801a8b8:	60a2      	str	r2, [r4, #8]
 801a8ba:	6123      	str	r3, [r4, #16]
 801a8bc:	7da0      	ldrb	r0, [r4, #22]
 801a8be:	f080 0001 	eor.w	r0, r0, #1
 801a8c2:	b002      	add	sp, #8
 801a8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a8c8:	9a01      	ldr	r2, [sp, #4]
 801a8ca:	601a      	str	r2, [r3, #0]
 801a8cc:	e7ee      	b.n	801a8ac <ucdr_serialize_uint32_t+0xc0>
 801a8ce:	68a2      	ldr	r2, [r4, #8]
 801a8d0:	6923      	ldr	r3, [r4, #16]
 801a8d2:	7da0      	ldrb	r0, [r4, #22]
 801a8d4:	1b92      	subs	r2, r2, r6
 801a8d6:	1b9b      	subs	r3, r3, r6
 801a8d8:	7567      	strb	r7, [r4, #21]
 801a8da:	f080 0001 	eor.w	r0, r0, #1
 801a8de:	60a2      	str	r2, [r4, #8]
 801a8e0:	6123      	str	r3, [r4, #16]
 801a8e2:	b002      	add	sp, #8
 801a8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a8e8:	68a3      	ldr	r3, [r4, #8]
 801a8ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801a8ee:	701a      	strb	r2, [r3, #0]
 801a8f0:	68a3      	ldr	r3, [r4, #8]
 801a8f2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801a8f6:	701a      	strb	r2, [r3, #0]
 801a8f8:	68a3      	ldr	r3, [r4, #8]
 801a8fa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801a8fe:	701a      	strb	r2, [r3, #0]
 801a900:	e7ad      	b.n	801a85e <ucdr_serialize_uint32_t+0x72>
 801a902:	4628      	mov	r0, r5
 801a904:	ad01      	add	r5, sp, #4
 801a906:	4632      	mov	r2, r6
 801a908:	4629      	mov	r1, r5
 801a90a:	f00b f88a 	bl	8025a22 <memcpy>
 801a90e:	4642      	mov	r2, r8
 801a910:	19a9      	adds	r1, r5, r6
 801a912:	68a0      	ldr	r0, [r4, #8]
 801a914:	f00b f885 	bl	8025a22 <memcpy>
 801a918:	e7a1      	b.n	801a85e <ucdr_serialize_uint32_t+0x72>
 801a91a:	bf00      	nop

0801a91c <ucdr_serialize_endian_uint32_t>:
 801a91c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a920:	4604      	mov	r4, r0
 801a922:	b083      	sub	sp, #12
 801a924:	460d      	mov	r5, r1
 801a926:	2104      	movs	r1, #4
 801a928:	9201      	str	r2, [sp, #4]
 801a92a:	f000 fd01 	bl	801b330 <ucdr_buffer_alignment>
 801a92e:	4601      	mov	r1, r0
 801a930:	4620      	mov	r0, r4
 801a932:	f894 8015 	ldrb.w	r8, [r4, #21]
 801a936:	f000 fd43 	bl	801b3c0 <ucdr_advance_buffer>
 801a93a:	2104      	movs	r1, #4
 801a93c:	4620      	mov	r0, r4
 801a93e:	f000 fc97 	bl	801b270 <ucdr_check_buffer_available_for>
 801a942:	2800      	cmp	r0, #0
 801a944:	d138      	bne.n	801a9b8 <ucdr_serialize_endian_uint32_t+0x9c>
 801a946:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801a94a:	42b7      	cmp	r7, r6
 801a94c:	d92f      	bls.n	801a9ae <ucdr_serialize_endian_uint32_t+0x92>
 801a94e:	6923      	ldr	r3, [r4, #16]
 801a950:	4620      	mov	r0, r4
 801a952:	60a7      	str	r7, [r4, #8]
 801a954:	1bbf      	subs	r7, r7, r6
 801a956:	443b      	add	r3, r7
 801a958:	f1c7 0904 	rsb	r9, r7, #4
 801a95c:	6123      	str	r3, [r4, #16]
 801a95e:	4649      	mov	r1, r9
 801a960:	f000 fc92 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801a964:	2800      	cmp	r0, #0
 801a966:	d04a      	beq.n	801a9fe <ucdr_serialize_endian_uint32_t+0xe2>
 801a968:	2d01      	cmp	r5, #1
 801a96a:	d063      	beq.n	801aa34 <ucdr_serialize_endian_uint32_t+0x118>
 801a96c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801a970:	7033      	strb	r3, [r6, #0]
 801a972:	2f00      	cmp	r7, #0
 801a974:	d051      	beq.n	801aa1a <ucdr_serialize_endian_uint32_t+0xfe>
 801a976:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801a97a:	2f01      	cmp	r7, #1
 801a97c:	7073      	strb	r3, [r6, #1]
 801a97e:	d050      	beq.n	801aa22 <ucdr_serialize_endian_uint32_t+0x106>
 801a980:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801a984:	2f02      	cmp	r7, #2
 801a986:	70b3      	strb	r3, [r6, #2]
 801a988:	d04f      	beq.n	801aa2a <ucdr_serialize_endian_uint32_t+0x10e>
 801a98a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801a98e:	70f3      	strb	r3, [r6, #3]
 801a990:	6923      	ldr	r3, [r4, #16]
 801a992:	2104      	movs	r1, #4
 801a994:	68a2      	ldr	r2, [r4, #8]
 801a996:	7da0      	ldrb	r0, [r4, #22]
 801a998:	3304      	adds	r3, #4
 801a99a:	444a      	add	r2, r9
 801a99c:	7561      	strb	r1, [r4, #21]
 801a99e:	1bdb      	subs	r3, r3, r7
 801a9a0:	f080 0001 	eor.w	r0, r0, #1
 801a9a4:	60a2      	str	r2, [r4, #8]
 801a9a6:	6123      	str	r3, [r4, #16]
 801a9a8:	b003      	add	sp, #12
 801a9aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a9ae:	2104      	movs	r1, #4
 801a9b0:	4620      	mov	r0, r4
 801a9b2:	f000 fc69 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801a9b6:	b1c8      	cbz	r0, 801a9ec <ucdr_serialize_endian_uint32_t+0xd0>
 801a9b8:	2d01      	cmp	r5, #1
 801a9ba:	68a3      	ldr	r3, [r4, #8]
 801a9bc:	d01c      	beq.n	801a9f8 <ucdr_serialize_endian_uint32_t+0xdc>
 801a9be:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801a9c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801a9c6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801a9ca:	7018      	strb	r0, [r3, #0]
 801a9cc:	68a3      	ldr	r3, [r4, #8]
 801a9ce:	705a      	strb	r2, [r3, #1]
 801a9d0:	68a3      	ldr	r3, [r4, #8]
 801a9d2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801a9d6:	7099      	strb	r1, [r3, #2]
 801a9d8:	68a3      	ldr	r3, [r4, #8]
 801a9da:	70da      	strb	r2, [r3, #3]
 801a9dc:	2104      	movs	r1, #4
 801a9de:	68a2      	ldr	r2, [r4, #8]
 801a9e0:	6923      	ldr	r3, [r4, #16]
 801a9e2:	440a      	add	r2, r1
 801a9e4:	7561      	strb	r1, [r4, #21]
 801a9e6:	440b      	add	r3, r1
 801a9e8:	60a2      	str	r2, [r4, #8]
 801a9ea:	6123      	str	r3, [r4, #16]
 801a9ec:	7da0      	ldrb	r0, [r4, #22]
 801a9ee:	f080 0001 	eor.w	r0, r0, #1
 801a9f2:	b003      	add	sp, #12
 801a9f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a9f8:	9a01      	ldr	r2, [sp, #4]
 801a9fa:	601a      	str	r2, [r3, #0]
 801a9fc:	e7ee      	b.n	801a9dc <ucdr_serialize_endian_uint32_t+0xc0>
 801a9fe:	68a2      	ldr	r2, [r4, #8]
 801aa00:	6923      	ldr	r3, [r4, #16]
 801aa02:	7da0      	ldrb	r0, [r4, #22]
 801aa04:	1bd2      	subs	r2, r2, r7
 801aa06:	1bdb      	subs	r3, r3, r7
 801aa08:	f884 8015 	strb.w	r8, [r4, #21]
 801aa0c:	f080 0001 	eor.w	r0, r0, #1
 801aa10:	60a2      	str	r2, [r4, #8]
 801aa12:	6123      	str	r3, [r4, #16]
 801aa14:	b003      	add	sp, #12
 801aa16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aa1a:	68a3      	ldr	r3, [r4, #8]
 801aa1c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801aa20:	701a      	strb	r2, [r3, #0]
 801aa22:	68a3      	ldr	r3, [r4, #8]
 801aa24:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801aa28:	701a      	strb	r2, [r3, #0]
 801aa2a:	68a3      	ldr	r3, [r4, #8]
 801aa2c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801aa30:	701a      	strb	r2, [r3, #0]
 801aa32:	e7ad      	b.n	801a990 <ucdr_serialize_endian_uint32_t+0x74>
 801aa34:	ad01      	add	r5, sp, #4
 801aa36:	463a      	mov	r2, r7
 801aa38:	4630      	mov	r0, r6
 801aa3a:	4629      	mov	r1, r5
 801aa3c:	f00a fff1 	bl	8025a22 <memcpy>
 801aa40:	464a      	mov	r2, r9
 801aa42:	19e9      	adds	r1, r5, r7
 801aa44:	68a0      	ldr	r0, [r4, #8]
 801aa46:	f00a ffec 	bl	8025a22 <memcpy>
 801aa4a:	e7a1      	b.n	801a990 <ucdr_serialize_endian_uint32_t+0x74>

0801aa4c <ucdr_deserialize_uint32_t>:
 801aa4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aa50:	4604      	mov	r4, r0
 801aa52:	460d      	mov	r5, r1
 801aa54:	2104      	movs	r1, #4
 801aa56:	f000 fc6b 	bl	801b330 <ucdr_buffer_alignment>
 801aa5a:	4601      	mov	r1, r0
 801aa5c:	4620      	mov	r0, r4
 801aa5e:	f894 8015 	ldrb.w	r8, [r4, #21]
 801aa62:	f000 fcad 	bl	801b3c0 <ucdr_advance_buffer>
 801aa66:	2104      	movs	r1, #4
 801aa68:	4620      	mov	r0, r4
 801aa6a:	f000 fc01 	bl	801b270 <ucdr_check_buffer_available_for>
 801aa6e:	2800      	cmp	r0, #0
 801aa70:	d138      	bne.n	801aae4 <ucdr_deserialize_uint32_t+0x98>
 801aa72:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801aa76:	42b7      	cmp	r7, r6
 801aa78:	d92f      	bls.n	801aada <ucdr_deserialize_uint32_t+0x8e>
 801aa7a:	6923      	ldr	r3, [r4, #16]
 801aa7c:	4620      	mov	r0, r4
 801aa7e:	60a7      	str	r7, [r4, #8]
 801aa80:	1bbf      	subs	r7, r7, r6
 801aa82:	443b      	add	r3, r7
 801aa84:	f1c7 0904 	rsb	r9, r7, #4
 801aa88:	6123      	str	r3, [r4, #16]
 801aa8a:	4649      	mov	r1, r9
 801aa8c:	f000 fbfc 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801aa90:	2800      	cmp	r0, #0
 801aa92:	d046      	beq.n	801ab22 <ucdr_deserialize_uint32_t+0xd6>
 801aa94:	7d23      	ldrb	r3, [r4, #20]
 801aa96:	2b01      	cmp	r3, #1
 801aa98:	d05c      	beq.n	801ab54 <ucdr_deserialize_uint32_t+0x108>
 801aa9a:	78f3      	ldrb	r3, [r6, #3]
 801aa9c:	702b      	strb	r3, [r5, #0]
 801aa9e:	2f00      	cmp	r7, #0
 801aaa0:	d04c      	beq.n	801ab3c <ucdr_deserialize_uint32_t+0xf0>
 801aaa2:	78b3      	ldrb	r3, [r6, #2]
 801aaa4:	2f01      	cmp	r7, #1
 801aaa6:	706b      	strb	r3, [r5, #1]
 801aaa8:	f105 0302 	add.w	r3, r5, #2
 801aaac:	d04a      	beq.n	801ab44 <ucdr_deserialize_uint32_t+0xf8>
 801aaae:	7873      	ldrb	r3, [r6, #1]
 801aab0:	2f02      	cmp	r7, #2
 801aab2:	70ab      	strb	r3, [r5, #2]
 801aab4:	f105 0303 	add.w	r3, r5, #3
 801aab8:	d048      	beq.n	801ab4c <ucdr_deserialize_uint32_t+0x100>
 801aaba:	7833      	ldrb	r3, [r6, #0]
 801aabc:	70eb      	strb	r3, [r5, #3]
 801aabe:	6923      	ldr	r3, [r4, #16]
 801aac0:	2104      	movs	r1, #4
 801aac2:	68a2      	ldr	r2, [r4, #8]
 801aac4:	3304      	adds	r3, #4
 801aac6:	7da0      	ldrb	r0, [r4, #22]
 801aac8:	444a      	add	r2, r9
 801aaca:	7561      	strb	r1, [r4, #21]
 801aacc:	1bdb      	subs	r3, r3, r7
 801aace:	f080 0001 	eor.w	r0, r0, #1
 801aad2:	60a2      	str	r2, [r4, #8]
 801aad4:	6123      	str	r3, [r4, #16]
 801aad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aada:	2104      	movs	r1, #4
 801aadc:	4620      	mov	r0, r4
 801aade:	f000 fbd3 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801aae2:	b1b0      	cbz	r0, 801ab12 <ucdr_deserialize_uint32_t+0xc6>
 801aae4:	7d23      	ldrb	r3, [r4, #20]
 801aae6:	2b01      	cmp	r3, #1
 801aae8:	68a3      	ldr	r3, [r4, #8]
 801aaea:	d017      	beq.n	801ab1c <ucdr_deserialize_uint32_t+0xd0>
 801aaec:	78db      	ldrb	r3, [r3, #3]
 801aaee:	702b      	strb	r3, [r5, #0]
 801aaf0:	68a3      	ldr	r3, [r4, #8]
 801aaf2:	789b      	ldrb	r3, [r3, #2]
 801aaf4:	706b      	strb	r3, [r5, #1]
 801aaf6:	68a3      	ldr	r3, [r4, #8]
 801aaf8:	785b      	ldrb	r3, [r3, #1]
 801aafa:	70ab      	strb	r3, [r5, #2]
 801aafc:	68a3      	ldr	r3, [r4, #8]
 801aafe:	781b      	ldrb	r3, [r3, #0]
 801ab00:	70eb      	strb	r3, [r5, #3]
 801ab02:	2104      	movs	r1, #4
 801ab04:	68a2      	ldr	r2, [r4, #8]
 801ab06:	6923      	ldr	r3, [r4, #16]
 801ab08:	440a      	add	r2, r1
 801ab0a:	7561      	strb	r1, [r4, #21]
 801ab0c:	440b      	add	r3, r1
 801ab0e:	60a2      	str	r2, [r4, #8]
 801ab10:	6123      	str	r3, [r4, #16]
 801ab12:	7da0      	ldrb	r0, [r4, #22]
 801ab14:	f080 0001 	eor.w	r0, r0, #1
 801ab18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ab1c:	681b      	ldr	r3, [r3, #0]
 801ab1e:	602b      	str	r3, [r5, #0]
 801ab20:	e7ef      	b.n	801ab02 <ucdr_deserialize_uint32_t+0xb6>
 801ab22:	68a2      	ldr	r2, [r4, #8]
 801ab24:	6923      	ldr	r3, [r4, #16]
 801ab26:	1bd2      	subs	r2, r2, r7
 801ab28:	7da0      	ldrb	r0, [r4, #22]
 801ab2a:	1bdb      	subs	r3, r3, r7
 801ab2c:	f884 8015 	strb.w	r8, [r4, #21]
 801ab30:	f080 0001 	eor.w	r0, r0, #1
 801ab34:	60a2      	str	r2, [r4, #8]
 801ab36:	6123      	str	r3, [r4, #16]
 801ab38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ab3c:	68a3      	ldr	r3, [r4, #8]
 801ab3e:	789b      	ldrb	r3, [r3, #2]
 801ab40:	706b      	strb	r3, [r5, #1]
 801ab42:	1cab      	adds	r3, r5, #2
 801ab44:	68a2      	ldr	r2, [r4, #8]
 801ab46:	7852      	ldrb	r2, [r2, #1]
 801ab48:	f803 2b01 	strb.w	r2, [r3], #1
 801ab4c:	68a2      	ldr	r2, [r4, #8]
 801ab4e:	7812      	ldrb	r2, [r2, #0]
 801ab50:	701a      	strb	r2, [r3, #0]
 801ab52:	e7b4      	b.n	801aabe <ucdr_deserialize_uint32_t+0x72>
 801ab54:	4631      	mov	r1, r6
 801ab56:	463a      	mov	r2, r7
 801ab58:	4628      	mov	r0, r5
 801ab5a:	f00a ff62 	bl	8025a22 <memcpy>
 801ab5e:	464a      	mov	r2, r9
 801ab60:	19e8      	adds	r0, r5, r7
 801ab62:	68a1      	ldr	r1, [r4, #8]
 801ab64:	f00a ff5d 	bl	8025a22 <memcpy>
 801ab68:	e7a9      	b.n	801aabe <ucdr_deserialize_uint32_t+0x72>
 801ab6a:	bf00      	nop

0801ab6c <ucdr_deserialize_endian_uint32_t>:
 801ab6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab70:	4604      	mov	r4, r0
 801ab72:	460e      	mov	r6, r1
 801ab74:	2104      	movs	r1, #4
 801ab76:	4615      	mov	r5, r2
 801ab78:	f000 fbda 	bl	801b330 <ucdr_buffer_alignment>
 801ab7c:	4601      	mov	r1, r0
 801ab7e:	4620      	mov	r0, r4
 801ab80:	f894 8015 	ldrb.w	r8, [r4, #21]
 801ab84:	f000 fc1c 	bl	801b3c0 <ucdr_advance_buffer>
 801ab88:	2104      	movs	r1, #4
 801ab8a:	4620      	mov	r0, r4
 801ab8c:	f000 fb70 	bl	801b270 <ucdr_check_buffer_available_for>
 801ab90:	2800      	cmp	r0, #0
 801ab92:	d13c      	bne.n	801ac0e <ucdr_deserialize_endian_uint32_t+0xa2>
 801ab94:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 801ab98:	42bb      	cmp	r3, r7
 801ab9a:	d933      	bls.n	801ac04 <ucdr_deserialize_endian_uint32_t+0x98>
 801ab9c:	eba3 0907 	sub.w	r9, r3, r7
 801aba0:	60a3      	str	r3, [r4, #8]
 801aba2:	6923      	ldr	r3, [r4, #16]
 801aba4:	4620      	mov	r0, r4
 801aba6:	f1c9 0a04 	rsb	sl, r9, #4
 801abaa:	444b      	add	r3, r9
 801abac:	4651      	mov	r1, sl
 801abae:	6123      	str	r3, [r4, #16]
 801abb0:	f000 fb6a 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801abb4:	2800      	cmp	r0, #0
 801abb6:	d048      	beq.n	801ac4a <ucdr_deserialize_endian_uint32_t+0xde>
 801abb8:	2e01      	cmp	r6, #1
 801abba:	d061      	beq.n	801ac80 <ucdr_deserialize_endian_uint32_t+0x114>
 801abbc:	78fb      	ldrb	r3, [r7, #3]
 801abbe:	702b      	strb	r3, [r5, #0]
 801abc0:	f1b9 0f00 	cmp.w	r9, #0
 801abc4:	d050      	beq.n	801ac68 <ucdr_deserialize_endian_uint32_t+0xfc>
 801abc6:	78bb      	ldrb	r3, [r7, #2]
 801abc8:	f1b9 0f01 	cmp.w	r9, #1
 801abcc:	706b      	strb	r3, [r5, #1]
 801abce:	f105 0302 	add.w	r3, r5, #2
 801abd2:	d04d      	beq.n	801ac70 <ucdr_deserialize_endian_uint32_t+0x104>
 801abd4:	787b      	ldrb	r3, [r7, #1]
 801abd6:	f1b9 0f02 	cmp.w	r9, #2
 801abda:	70ab      	strb	r3, [r5, #2]
 801abdc:	f105 0303 	add.w	r3, r5, #3
 801abe0:	d04a      	beq.n	801ac78 <ucdr_deserialize_endian_uint32_t+0x10c>
 801abe2:	783b      	ldrb	r3, [r7, #0]
 801abe4:	70eb      	strb	r3, [r5, #3]
 801abe6:	6923      	ldr	r3, [r4, #16]
 801abe8:	2104      	movs	r1, #4
 801abea:	68a2      	ldr	r2, [r4, #8]
 801abec:	3304      	adds	r3, #4
 801abee:	7da0      	ldrb	r0, [r4, #22]
 801abf0:	4452      	add	r2, sl
 801abf2:	7561      	strb	r1, [r4, #21]
 801abf4:	eba3 0309 	sub.w	r3, r3, r9
 801abf8:	f080 0001 	eor.w	r0, r0, #1
 801abfc:	60a2      	str	r2, [r4, #8]
 801abfe:	6123      	str	r3, [r4, #16]
 801ac00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac04:	2104      	movs	r1, #4
 801ac06:	4620      	mov	r0, r4
 801ac08:	f000 fb3e 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801ac0c:	b1a8      	cbz	r0, 801ac3a <ucdr_deserialize_endian_uint32_t+0xce>
 801ac0e:	2e01      	cmp	r6, #1
 801ac10:	68a3      	ldr	r3, [r4, #8]
 801ac12:	d017      	beq.n	801ac44 <ucdr_deserialize_endian_uint32_t+0xd8>
 801ac14:	78db      	ldrb	r3, [r3, #3]
 801ac16:	702b      	strb	r3, [r5, #0]
 801ac18:	68a3      	ldr	r3, [r4, #8]
 801ac1a:	789b      	ldrb	r3, [r3, #2]
 801ac1c:	706b      	strb	r3, [r5, #1]
 801ac1e:	68a3      	ldr	r3, [r4, #8]
 801ac20:	785b      	ldrb	r3, [r3, #1]
 801ac22:	70ab      	strb	r3, [r5, #2]
 801ac24:	68a3      	ldr	r3, [r4, #8]
 801ac26:	781b      	ldrb	r3, [r3, #0]
 801ac28:	70eb      	strb	r3, [r5, #3]
 801ac2a:	2104      	movs	r1, #4
 801ac2c:	68a2      	ldr	r2, [r4, #8]
 801ac2e:	6923      	ldr	r3, [r4, #16]
 801ac30:	440a      	add	r2, r1
 801ac32:	7561      	strb	r1, [r4, #21]
 801ac34:	440b      	add	r3, r1
 801ac36:	60a2      	str	r2, [r4, #8]
 801ac38:	6123      	str	r3, [r4, #16]
 801ac3a:	7da0      	ldrb	r0, [r4, #22]
 801ac3c:	f080 0001 	eor.w	r0, r0, #1
 801ac40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac44:	681b      	ldr	r3, [r3, #0]
 801ac46:	602b      	str	r3, [r5, #0]
 801ac48:	e7ef      	b.n	801ac2a <ucdr_deserialize_endian_uint32_t+0xbe>
 801ac4a:	68a2      	ldr	r2, [r4, #8]
 801ac4c:	6923      	ldr	r3, [r4, #16]
 801ac4e:	eba2 0209 	sub.w	r2, r2, r9
 801ac52:	7da0      	ldrb	r0, [r4, #22]
 801ac54:	eba3 0309 	sub.w	r3, r3, r9
 801ac58:	f884 8015 	strb.w	r8, [r4, #21]
 801ac5c:	f080 0001 	eor.w	r0, r0, #1
 801ac60:	60a2      	str	r2, [r4, #8]
 801ac62:	6123      	str	r3, [r4, #16]
 801ac64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac68:	68a3      	ldr	r3, [r4, #8]
 801ac6a:	789b      	ldrb	r3, [r3, #2]
 801ac6c:	706b      	strb	r3, [r5, #1]
 801ac6e:	1cab      	adds	r3, r5, #2
 801ac70:	68a2      	ldr	r2, [r4, #8]
 801ac72:	7852      	ldrb	r2, [r2, #1]
 801ac74:	f803 2b01 	strb.w	r2, [r3], #1
 801ac78:	68a2      	ldr	r2, [r4, #8]
 801ac7a:	7812      	ldrb	r2, [r2, #0]
 801ac7c:	701a      	strb	r2, [r3, #0]
 801ac7e:	e7b2      	b.n	801abe6 <ucdr_deserialize_endian_uint32_t+0x7a>
 801ac80:	4639      	mov	r1, r7
 801ac82:	464a      	mov	r2, r9
 801ac84:	4628      	mov	r0, r5
 801ac86:	f00a fecc 	bl	8025a22 <memcpy>
 801ac8a:	4652      	mov	r2, sl
 801ac8c:	eb05 0009 	add.w	r0, r5, r9
 801ac90:	68a1      	ldr	r1, [r4, #8]
 801ac92:	f00a fec6 	bl	8025a22 <memcpy>
 801ac96:	e7a6      	b.n	801abe6 <ucdr_deserialize_endian_uint32_t+0x7a>

0801ac98 <ucdr_serialize_uint64_t>:
 801ac98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac9c:	4604      	mov	r4, r0
 801ac9e:	b082      	sub	sp, #8
 801aca0:	2108      	movs	r1, #8
 801aca2:	e9cd 2300 	strd	r2, r3, [sp]
 801aca6:	f000 fb43 	bl	801b330 <ucdr_buffer_alignment>
 801acaa:	4601      	mov	r1, r0
 801acac:	4620      	mov	r0, r4
 801acae:	7d67      	ldrb	r7, [r4, #21]
 801acb0:	f000 fb86 	bl	801b3c0 <ucdr_advance_buffer>
 801acb4:	2108      	movs	r1, #8
 801acb6:	4620      	mov	r0, r4
 801acb8:	f000 fada 	bl	801b270 <ucdr_check_buffer_available_for>
 801acbc:	2800      	cmp	r0, #0
 801acbe:	d14e      	bne.n	801ad5e <ucdr_serialize_uint64_t+0xc6>
 801acc0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801acc4:	42ab      	cmp	r3, r5
 801acc6:	d945      	bls.n	801ad54 <ucdr_serialize_uint64_t+0xbc>
 801acc8:	1b5e      	subs	r6, r3, r5
 801acca:	60a3      	str	r3, [r4, #8]
 801accc:	6923      	ldr	r3, [r4, #16]
 801acce:	4620      	mov	r0, r4
 801acd0:	f1c6 0808 	rsb	r8, r6, #8
 801acd4:	4433      	add	r3, r6
 801acd6:	4641      	mov	r1, r8
 801acd8:	6123      	str	r3, [r4, #16]
 801acda:	f000 fad5 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801acde:	2800      	cmp	r0, #0
 801ace0:	d074      	beq.n	801adcc <ucdr_serialize_uint64_t+0x134>
 801ace2:	7d23      	ldrb	r3, [r4, #20]
 801ace4:	2b01      	cmp	r3, #1
 801ace6:	f000 809b 	beq.w	801ae20 <ucdr_serialize_uint64_t+0x188>
 801acea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801acee:	702b      	strb	r3, [r5, #0]
 801acf0:	2e00      	cmp	r6, #0
 801acf2:	d078      	beq.n	801ade6 <ucdr_serialize_uint64_t+0x14e>
 801acf4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801acf8:	2e01      	cmp	r6, #1
 801acfa:	706b      	strb	r3, [r5, #1]
 801acfc:	d077      	beq.n	801adee <ucdr_serialize_uint64_t+0x156>
 801acfe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801ad02:	2e02      	cmp	r6, #2
 801ad04:	70ab      	strb	r3, [r5, #2]
 801ad06:	d076      	beq.n	801adf6 <ucdr_serialize_uint64_t+0x15e>
 801ad08:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801ad0c:	2e03      	cmp	r6, #3
 801ad0e:	70eb      	strb	r3, [r5, #3]
 801ad10:	d075      	beq.n	801adfe <ucdr_serialize_uint64_t+0x166>
 801ad12:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801ad16:	2e04      	cmp	r6, #4
 801ad18:	712b      	strb	r3, [r5, #4]
 801ad1a:	d074      	beq.n	801ae06 <ucdr_serialize_uint64_t+0x16e>
 801ad1c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801ad20:	2e05      	cmp	r6, #5
 801ad22:	716b      	strb	r3, [r5, #5]
 801ad24:	d073      	beq.n	801ae0e <ucdr_serialize_uint64_t+0x176>
 801ad26:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801ad2a:	2e06      	cmp	r6, #6
 801ad2c:	71ab      	strb	r3, [r5, #6]
 801ad2e:	d072      	beq.n	801ae16 <ucdr_serialize_uint64_t+0x17e>
 801ad30:	f89d 3000 	ldrb.w	r3, [sp]
 801ad34:	71eb      	strb	r3, [r5, #7]
 801ad36:	6923      	ldr	r3, [r4, #16]
 801ad38:	2108      	movs	r1, #8
 801ad3a:	68a2      	ldr	r2, [r4, #8]
 801ad3c:	3308      	adds	r3, #8
 801ad3e:	7da0      	ldrb	r0, [r4, #22]
 801ad40:	4442      	add	r2, r8
 801ad42:	7561      	strb	r1, [r4, #21]
 801ad44:	1b9e      	subs	r6, r3, r6
 801ad46:	f080 0001 	eor.w	r0, r0, #1
 801ad4a:	60a2      	str	r2, [r4, #8]
 801ad4c:	6126      	str	r6, [r4, #16]
 801ad4e:	b002      	add	sp, #8
 801ad50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad54:	2108      	movs	r1, #8
 801ad56:	4620      	mov	r0, r4
 801ad58:	f000 fa96 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801ad5c:	b350      	cbz	r0, 801adb4 <ucdr_serialize_uint64_t+0x11c>
 801ad5e:	7d23      	ldrb	r3, [r4, #20]
 801ad60:	2b01      	cmp	r3, #1
 801ad62:	d02d      	beq.n	801adc0 <ucdr_serialize_uint64_t+0x128>
 801ad64:	68a3      	ldr	r3, [r4, #8]
 801ad66:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801ad6a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801ad6e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801ad72:	7018      	strb	r0, [r3, #0]
 801ad74:	68a3      	ldr	r3, [r4, #8]
 801ad76:	705a      	strb	r2, [r3, #1]
 801ad78:	68a3      	ldr	r3, [r4, #8]
 801ad7a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801ad7e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 801ad82:	7099      	strb	r1, [r3, #2]
 801ad84:	68a3      	ldr	r3, [r4, #8]
 801ad86:	70da      	strb	r2, [r3, #3]
 801ad88:	68a3      	ldr	r3, [r4, #8]
 801ad8a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801ad8e:	f89d 1001 	ldrb.w	r1, [sp, #1]
 801ad92:	7118      	strb	r0, [r3, #4]
 801ad94:	68a3      	ldr	r3, [r4, #8]
 801ad96:	715a      	strb	r2, [r3, #5]
 801ad98:	68a3      	ldr	r3, [r4, #8]
 801ad9a:	f89d 2000 	ldrb.w	r2, [sp]
 801ad9e:	7199      	strb	r1, [r3, #6]
 801ada0:	68a3      	ldr	r3, [r4, #8]
 801ada2:	71da      	strb	r2, [r3, #7]
 801ada4:	2108      	movs	r1, #8
 801ada6:	68a2      	ldr	r2, [r4, #8]
 801ada8:	6923      	ldr	r3, [r4, #16]
 801adaa:	440a      	add	r2, r1
 801adac:	7561      	strb	r1, [r4, #21]
 801adae:	440b      	add	r3, r1
 801adb0:	60a2      	str	r2, [r4, #8]
 801adb2:	6123      	str	r3, [r4, #16]
 801adb4:	7da0      	ldrb	r0, [r4, #22]
 801adb6:	f080 0001 	eor.w	r0, r0, #1
 801adba:	b002      	add	sp, #8
 801adbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801adc0:	466b      	mov	r3, sp
 801adc2:	68a2      	ldr	r2, [r4, #8]
 801adc4:	cb03      	ldmia	r3!, {r0, r1}
 801adc6:	6010      	str	r0, [r2, #0]
 801adc8:	6051      	str	r1, [r2, #4]
 801adca:	e7eb      	b.n	801ada4 <ucdr_serialize_uint64_t+0x10c>
 801adcc:	68a2      	ldr	r2, [r4, #8]
 801adce:	6923      	ldr	r3, [r4, #16]
 801add0:	7da0      	ldrb	r0, [r4, #22]
 801add2:	1b92      	subs	r2, r2, r6
 801add4:	1b9b      	subs	r3, r3, r6
 801add6:	7567      	strb	r7, [r4, #21]
 801add8:	f080 0001 	eor.w	r0, r0, #1
 801addc:	60a2      	str	r2, [r4, #8]
 801adde:	6123      	str	r3, [r4, #16]
 801ade0:	b002      	add	sp, #8
 801ade2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ade6:	68a3      	ldr	r3, [r4, #8]
 801ade8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801adec:	701a      	strb	r2, [r3, #0]
 801adee:	68a3      	ldr	r3, [r4, #8]
 801adf0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801adf4:	701a      	strb	r2, [r3, #0]
 801adf6:	68a3      	ldr	r3, [r4, #8]
 801adf8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801adfc:	701a      	strb	r2, [r3, #0]
 801adfe:	68a3      	ldr	r3, [r4, #8]
 801ae00:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801ae04:	701a      	strb	r2, [r3, #0]
 801ae06:	68a3      	ldr	r3, [r4, #8]
 801ae08:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801ae0c:	701a      	strb	r2, [r3, #0]
 801ae0e:	68a3      	ldr	r3, [r4, #8]
 801ae10:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801ae14:	701a      	strb	r2, [r3, #0]
 801ae16:	68a3      	ldr	r3, [r4, #8]
 801ae18:	f89d 2000 	ldrb.w	r2, [sp]
 801ae1c:	701a      	strb	r2, [r3, #0]
 801ae1e:	e78a      	b.n	801ad36 <ucdr_serialize_uint64_t+0x9e>
 801ae20:	4628      	mov	r0, r5
 801ae22:	466d      	mov	r5, sp
 801ae24:	4632      	mov	r2, r6
 801ae26:	4629      	mov	r1, r5
 801ae28:	f00a fdfb 	bl	8025a22 <memcpy>
 801ae2c:	4642      	mov	r2, r8
 801ae2e:	19a9      	adds	r1, r5, r6
 801ae30:	68a0      	ldr	r0, [r4, #8]
 801ae32:	f00a fdf6 	bl	8025a22 <memcpy>
 801ae36:	e77e      	b.n	801ad36 <ucdr_serialize_uint64_t+0x9e>

0801ae38 <ucdr_serialize_int16_t>:
 801ae38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae3c:	460b      	mov	r3, r1
 801ae3e:	b082      	sub	sp, #8
 801ae40:	4604      	mov	r4, r0
 801ae42:	2102      	movs	r1, #2
 801ae44:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ae48:	f000 fa72 	bl	801b330 <ucdr_buffer_alignment>
 801ae4c:	4601      	mov	r1, r0
 801ae4e:	4620      	mov	r0, r4
 801ae50:	7d67      	ldrb	r7, [r4, #21]
 801ae52:	f000 fab5 	bl	801b3c0 <ucdr_advance_buffer>
 801ae56:	2102      	movs	r1, #2
 801ae58:	4620      	mov	r0, r4
 801ae5a:	f000 fa09 	bl	801b270 <ucdr_check_buffer_available_for>
 801ae5e:	bb78      	cbnz	r0, 801aec0 <ucdr_serialize_int16_t+0x88>
 801ae60:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801ae64:	42ab      	cmp	r3, r5
 801ae66:	d926      	bls.n	801aeb6 <ucdr_serialize_int16_t+0x7e>
 801ae68:	1b5e      	subs	r6, r3, r5
 801ae6a:	60a3      	str	r3, [r4, #8]
 801ae6c:	6923      	ldr	r3, [r4, #16]
 801ae6e:	4620      	mov	r0, r4
 801ae70:	f1c6 0802 	rsb	r8, r6, #2
 801ae74:	4433      	add	r3, r6
 801ae76:	4641      	mov	r1, r8
 801ae78:	6123      	str	r3, [r4, #16]
 801ae7a:	f000 fa05 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801ae7e:	2800      	cmp	r0, #0
 801ae80:	d03b      	beq.n	801aefa <ucdr_serialize_int16_t+0xc2>
 801ae82:	7d23      	ldrb	r3, [r4, #20]
 801ae84:	2b01      	cmp	r3, #1
 801ae86:	d04a      	beq.n	801af1e <ucdr_serialize_int16_t+0xe6>
 801ae88:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801ae8c:	702b      	strb	r3, [r5, #0]
 801ae8e:	2e00      	cmp	r6, #0
 801ae90:	d040      	beq.n	801af14 <ucdr_serialize_int16_t+0xdc>
 801ae92:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801ae96:	706b      	strb	r3, [r5, #1]
 801ae98:	6923      	ldr	r3, [r4, #16]
 801ae9a:	2102      	movs	r1, #2
 801ae9c:	68a2      	ldr	r2, [r4, #8]
 801ae9e:	3302      	adds	r3, #2
 801aea0:	7da0      	ldrb	r0, [r4, #22]
 801aea2:	4442      	add	r2, r8
 801aea4:	7561      	strb	r1, [r4, #21]
 801aea6:	1b9e      	subs	r6, r3, r6
 801aea8:	f080 0001 	eor.w	r0, r0, #1
 801aeac:	60a2      	str	r2, [r4, #8]
 801aeae:	6126      	str	r6, [r4, #16]
 801aeb0:	b002      	add	sp, #8
 801aeb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aeb6:	2102      	movs	r1, #2
 801aeb8:	4620      	mov	r0, r4
 801aeba:	f000 f9e5 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801aebe:	b190      	cbz	r0, 801aee6 <ucdr_serialize_int16_t+0xae>
 801aec0:	7d23      	ldrb	r3, [r4, #20]
 801aec2:	2b01      	cmp	r3, #1
 801aec4:	68a3      	ldr	r3, [r4, #8]
 801aec6:	d014      	beq.n	801aef2 <ucdr_serialize_int16_t+0xba>
 801aec8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801aecc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801aed0:	7019      	strb	r1, [r3, #0]
 801aed2:	68a3      	ldr	r3, [r4, #8]
 801aed4:	705a      	strb	r2, [r3, #1]
 801aed6:	2102      	movs	r1, #2
 801aed8:	68a2      	ldr	r2, [r4, #8]
 801aeda:	6923      	ldr	r3, [r4, #16]
 801aedc:	440a      	add	r2, r1
 801aede:	7561      	strb	r1, [r4, #21]
 801aee0:	440b      	add	r3, r1
 801aee2:	60a2      	str	r2, [r4, #8]
 801aee4:	6123      	str	r3, [r4, #16]
 801aee6:	7da0      	ldrb	r0, [r4, #22]
 801aee8:	f080 0001 	eor.w	r0, r0, #1
 801aeec:	b002      	add	sp, #8
 801aeee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aef2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801aef6:	801a      	strh	r2, [r3, #0]
 801aef8:	e7ed      	b.n	801aed6 <ucdr_serialize_int16_t+0x9e>
 801aefa:	68a2      	ldr	r2, [r4, #8]
 801aefc:	6923      	ldr	r3, [r4, #16]
 801aefe:	7da0      	ldrb	r0, [r4, #22]
 801af00:	1b92      	subs	r2, r2, r6
 801af02:	1b9b      	subs	r3, r3, r6
 801af04:	7567      	strb	r7, [r4, #21]
 801af06:	f080 0001 	eor.w	r0, r0, #1
 801af0a:	60a2      	str	r2, [r4, #8]
 801af0c:	6123      	str	r3, [r4, #16]
 801af0e:	b002      	add	sp, #8
 801af10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af14:	68a3      	ldr	r3, [r4, #8]
 801af16:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801af1a:	701a      	strb	r2, [r3, #0]
 801af1c:	e7bc      	b.n	801ae98 <ucdr_serialize_int16_t+0x60>
 801af1e:	4628      	mov	r0, r5
 801af20:	f10d 0506 	add.w	r5, sp, #6
 801af24:	4632      	mov	r2, r6
 801af26:	4629      	mov	r1, r5
 801af28:	f00a fd7b 	bl	8025a22 <memcpy>
 801af2c:	4642      	mov	r2, r8
 801af2e:	19a9      	adds	r1, r5, r6
 801af30:	68a0      	ldr	r0, [r4, #8]
 801af32:	f00a fd76 	bl	8025a22 <memcpy>
 801af36:	e7af      	b.n	801ae98 <ucdr_serialize_int16_t+0x60>

0801af38 <ucdr_deserialize_int16_t>:
 801af38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801af3c:	4604      	mov	r4, r0
 801af3e:	460d      	mov	r5, r1
 801af40:	2102      	movs	r1, #2
 801af42:	f000 f9f5 	bl	801b330 <ucdr_buffer_alignment>
 801af46:	4601      	mov	r1, r0
 801af48:	4620      	mov	r0, r4
 801af4a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801af4e:	f000 fa37 	bl	801b3c0 <ucdr_advance_buffer>
 801af52:	2102      	movs	r1, #2
 801af54:	4620      	mov	r0, r4
 801af56:	f000 f98b 	bl	801b270 <ucdr_check_buffer_available_for>
 801af5a:	bb60      	cbnz	r0, 801afb6 <ucdr_deserialize_int16_t+0x7e>
 801af5c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801af60:	42be      	cmp	r6, r7
 801af62:	d923      	bls.n	801afac <ucdr_deserialize_int16_t+0x74>
 801af64:	6923      	ldr	r3, [r4, #16]
 801af66:	4620      	mov	r0, r4
 801af68:	60a6      	str	r6, [r4, #8]
 801af6a:	1bf6      	subs	r6, r6, r7
 801af6c:	4433      	add	r3, r6
 801af6e:	f1c6 0902 	rsb	r9, r6, #2
 801af72:	6123      	str	r3, [r4, #16]
 801af74:	4649      	mov	r1, r9
 801af76:	f000 f987 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801af7a:	2800      	cmp	r0, #0
 801af7c:	d034      	beq.n	801afe8 <ucdr_deserialize_int16_t+0xb0>
 801af7e:	7d23      	ldrb	r3, [r4, #20]
 801af80:	2b01      	cmp	r3, #1
 801af82:	d042      	beq.n	801b00a <ucdr_deserialize_int16_t+0xd2>
 801af84:	787b      	ldrb	r3, [r7, #1]
 801af86:	702b      	strb	r3, [r5, #0]
 801af88:	2e00      	cmp	r6, #0
 801af8a:	d03a      	beq.n	801b002 <ucdr_deserialize_int16_t+0xca>
 801af8c:	783b      	ldrb	r3, [r7, #0]
 801af8e:	706b      	strb	r3, [r5, #1]
 801af90:	6923      	ldr	r3, [r4, #16]
 801af92:	2102      	movs	r1, #2
 801af94:	68a2      	ldr	r2, [r4, #8]
 801af96:	3302      	adds	r3, #2
 801af98:	7da0      	ldrb	r0, [r4, #22]
 801af9a:	444a      	add	r2, r9
 801af9c:	7561      	strb	r1, [r4, #21]
 801af9e:	1b9b      	subs	r3, r3, r6
 801afa0:	f080 0001 	eor.w	r0, r0, #1
 801afa4:	60a2      	str	r2, [r4, #8]
 801afa6:	6123      	str	r3, [r4, #16]
 801afa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801afac:	2102      	movs	r1, #2
 801afae:	4620      	mov	r0, r4
 801afb0:	f000 f96a 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801afb4:	b180      	cbz	r0, 801afd8 <ucdr_deserialize_int16_t+0xa0>
 801afb6:	7d23      	ldrb	r3, [r4, #20]
 801afb8:	2b01      	cmp	r3, #1
 801afba:	68a3      	ldr	r3, [r4, #8]
 801afbc:	d011      	beq.n	801afe2 <ucdr_deserialize_int16_t+0xaa>
 801afbe:	785b      	ldrb	r3, [r3, #1]
 801afc0:	702b      	strb	r3, [r5, #0]
 801afc2:	68a3      	ldr	r3, [r4, #8]
 801afc4:	781b      	ldrb	r3, [r3, #0]
 801afc6:	706b      	strb	r3, [r5, #1]
 801afc8:	2102      	movs	r1, #2
 801afca:	68a2      	ldr	r2, [r4, #8]
 801afcc:	6923      	ldr	r3, [r4, #16]
 801afce:	440a      	add	r2, r1
 801afd0:	7561      	strb	r1, [r4, #21]
 801afd2:	440b      	add	r3, r1
 801afd4:	60a2      	str	r2, [r4, #8]
 801afd6:	6123      	str	r3, [r4, #16]
 801afd8:	7da0      	ldrb	r0, [r4, #22]
 801afda:	f080 0001 	eor.w	r0, r0, #1
 801afde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801afe2:	881b      	ldrh	r3, [r3, #0]
 801afe4:	802b      	strh	r3, [r5, #0]
 801afe6:	e7ef      	b.n	801afc8 <ucdr_deserialize_int16_t+0x90>
 801afe8:	68a2      	ldr	r2, [r4, #8]
 801afea:	6923      	ldr	r3, [r4, #16]
 801afec:	1b92      	subs	r2, r2, r6
 801afee:	7da0      	ldrb	r0, [r4, #22]
 801aff0:	1b9b      	subs	r3, r3, r6
 801aff2:	f884 8015 	strb.w	r8, [r4, #21]
 801aff6:	f080 0001 	eor.w	r0, r0, #1
 801affa:	60a2      	str	r2, [r4, #8]
 801affc:	6123      	str	r3, [r4, #16]
 801affe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b002:	68a3      	ldr	r3, [r4, #8]
 801b004:	781b      	ldrb	r3, [r3, #0]
 801b006:	706b      	strb	r3, [r5, #1]
 801b008:	e7c2      	b.n	801af90 <ucdr_deserialize_int16_t+0x58>
 801b00a:	4639      	mov	r1, r7
 801b00c:	4632      	mov	r2, r6
 801b00e:	4628      	mov	r0, r5
 801b010:	f00a fd07 	bl	8025a22 <memcpy>
 801b014:	464a      	mov	r2, r9
 801b016:	19a8      	adds	r0, r5, r6
 801b018:	68a1      	ldr	r1, [r4, #8]
 801b01a:	f00a fd02 	bl	8025a22 <memcpy>
 801b01e:	e7b7      	b.n	801af90 <ucdr_deserialize_int16_t+0x58>

0801b020 <ucdr_serialize_int32_t>:
 801b020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b024:	b082      	sub	sp, #8
 801b026:	4604      	mov	r4, r0
 801b028:	9101      	str	r1, [sp, #4]
 801b02a:	2104      	movs	r1, #4
 801b02c:	f000 f980 	bl	801b330 <ucdr_buffer_alignment>
 801b030:	4601      	mov	r1, r0
 801b032:	4620      	mov	r0, r4
 801b034:	7d67      	ldrb	r7, [r4, #21]
 801b036:	f000 f9c3 	bl	801b3c0 <ucdr_advance_buffer>
 801b03a:	2104      	movs	r1, #4
 801b03c:	4620      	mov	r0, r4
 801b03e:	f000 f917 	bl	801b270 <ucdr_check_buffer_available_for>
 801b042:	2800      	cmp	r0, #0
 801b044:	d139      	bne.n	801b0ba <ucdr_serialize_int32_t+0x9a>
 801b046:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801b04a:	42ab      	cmp	r3, r5
 801b04c:	d930      	bls.n	801b0b0 <ucdr_serialize_int32_t+0x90>
 801b04e:	1b5e      	subs	r6, r3, r5
 801b050:	60a3      	str	r3, [r4, #8]
 801b052:	6923      	ldr	r3, [r4, #16]
 801b054:	4620      	mov	r0, r4
 801b056:	f1c6 0804 	rsb	r8, r6, #4
 801b05a:	4433      	add	r3, r6
 801b05c:	4641      	mov	r1, r8
 801b05e:	6123      	str	r3, [r4, #16]
 801b060:	f000 f912 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801b064:	2800      	cmp	r0, #0
 801b066:	d04c      	beq.n	801b102 <ucdr_serialize_int32_t+0xe2>
 801b068:	7d23      	ldrb	r3, [r4, #20]
 801b06a:	2b01      	cmp	r3, #1
 801b06c:	d063      	beq.n	801b136 <ucdr_serialize_int32_t+0x116>
 801b06e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801b072:	702b      	strb	r3, [r5, #0]
 801b074:	2e00      	cmp	r6, #0
 801b076:	d051      	beq.n	801b11c <ucdr_serialize_int32_t+0xfc>
 801b078:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801b07c:	2e01      	cmp	r6, #1
 801b07e:	706b      	strb	r3, [r5, #1]
 801b080:	d050      	beq.n	801b124 <ucdr_serialize_int32_t+0x104>
 801b082:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801b086:	2e02      	cmp	r6, #2
 801b088:	70ab      	strb	r3, [r5, #2]
 801b08a:	d04f      	beq.n	801b12c <ucdr_serialize_int32_t+0x10c>
 801b08c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801b090:	70eb      	strb	r3, [r5, #3]
 801b092:	6923      	ldr	r3, [r4, #16]
 801b094:	2104      	movs	r1, #4
 801b096:	68a2      	ldr	r2, [r4, #8]
 801b098:	3304      	adds	r3, #4
 801b09a:	7da0      	ldrb	r0, [r4, #22]
 801b09c:	4442      	add	r2, r8
 801b09e:	7561      	strb	r1, [r4, #21]
 801b0a0:	1b9e      	subs	r6, r3, r6
 801b0a2:	f080 0001 	eor.w	r0, r0, #1
 801b0a6:	60a2      	str	r2, [r4, #8]
 801b0a8:	6126      	str	r6, [r4, #16]
 801b0aa:	b002      	add	sp, #8
 801b0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0b0:	2104      	movs	r1, #4
 801b0b2:	4620      	mov	r0, r4
 801b0b4:	f000 f8e8 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801b0b8:	b1d0      	cbz	r0, 801b0f0 <ucdr_serialize_int32_t+0xd0>
 801b0ba:	7d23      	ldrb	r3, [r4, #20]
 801b0bc:	2b01      	cmp	r3, #1
 801b0be:	68a3      	ldr	r3, [r4, #8]
 801b0c0:	d01c      	beq.n	801b0fc <ucdr_serialize_int32_t+0xdc>
 801b0c2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801b0c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801b0ca:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801b0ce:	7018      	strb	r0, [r3, #0]
 801b0d0:	68a3      	ldr	r3, [r4, #8]
 801b0d2:	705a      	strb	r2, [r3, #1]
 801b0d4:	68a3      	ldr	r3, [r4, #8]
 801b0d6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801b0da:	7099      	strb	r1, [r3, #2]
 801b0dc:	68a3      	ldr	r3, [r4, #8]
 801b0de:	70da      	strb	r2, [r3, #3]
 801b0e0:	2104      	movs	r1, #4
 801b0e2:	68a2      	ldr	r2, [r4, #8]
 801b0e4:	6923      	ldr	r3, [r4, #16]
 801b0e6:	440a      	add	r2, r1
 801b0e8:	7561      	strb	r1, [r4, #21]
 801b0ea:	440b      	add	r3, r1
 801b0ec:	60a2      	str	r2, [r4, #8]
 801b0ee:	6123      	str	r3, [r4, #16]
 801b0f0:	7da0      	ldrb	r0, [r4, #22]
 801b0f2:	f080 0001 	eor.w	r0, r0, #1
 801b0f6:	b002      	add	sp, #8
 801b0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0fc:	9a01      	ldr	r2, [sp, #4]
 801b0fe:	601a      	str	r2, [r3, #0]
 801b100:	e7ee      	b.n	801b0e0 <ucdr_serialize_int32_t+0xc0>
 801b102:	68a2      	ldr	r2, [r4, #8]
 801b104:	6923      	ldr	r3, [r4, #16]
 801b106:	7da0      	ldrb	r0, [r4, #22]
 801b108:	1b92      	subs	r2, r2, r6
 801b10a:	1b9b      	subs	r3, r3, r6
 801b10c:	7567      	strb	r7, [r4, #21]
 801b10e:	f080 0001 	eor.w	r0, r0, #1
 801b112:	60a2      	str	r2, [r4, #8]
 801b114:	6123      	str	r3, [r4, #16]
 801b116:	b002      	add	sp, #8
 801b118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b11c:	68a3      	ldr	r3, [r4, #8]
 801b11e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801b122:	701a      	strb	r2, [r3, #0]
 801b124:	68a3      	ldr	r3, [r4, #8]
 801b126:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801b12a:	701a      	strb	r2, [r3, #0]
 801b12c:	68a3      	ldr	r3, [r4, #8]
 801b12e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801b132:	701a      	strb	r2, [r3, #0]
 801b134:	e7ad      	b.n	801b092 <ucdr_serialize_int32_t+0x72>
 801b136:	4628      	mov	r0, r5
 801b138:	ad01      	add	r5, sp, #4
 801b13a:	4632      	mov	r2, r6
 801b13c:	4629      	mov	r1, r5
 801b13e:	f00a fc70 	bl	8025a22 <memcpy>
 801b142:	4642      	mov	r2, r8
 801b144:	19a9      	adds	r1, r5, r6
 801b146:	68a0      	ldr	r0, [r4, #8]
 801b148:	f00a fc6b 	bl	8025a22 <memcpy>
 801b14c:	e7a1      	b.n	801b092 <ucdr_serialize_int32_t+0x72>
 801b14e:	bf00      	nop

0801b150 <ucdr_deserialize_int32_t>:
 801b150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b154:	4604      	mov	r4, r0
 801b156:	460d      	mov	r5, r1
 801b158:	2104      	movs	r1, #4
 801b15a:	f000 f8e9 	bl	801b330 <ucdr_buffer_alignment>
 801b15e:	4601      	mov	r1, r0
 801b160:	4620      	mov	r0, r4
 801b162:	f894 8015 	ldrb.w	r8, [r4, #21]
 801b166:	f000 f92b 	bl	801b3c0 <ucdr_advance_buffer>
 801b16a:	2104      	movs	r1, #4
 801b16c:	4620      	mov	r0, r4
 801b16e:	f000 f87f 	bl	801b270 <ucdr_check_buffer_available_for>
 801b172:	2800      	cmp	r0, #0
 801b174:	d138      	bne.n	801b1e8 <ucdr_deserialize_int32_t+0x98>
 801b176:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801b17a:	42b7      	cmp	r7, r6
 801b17c:	d92f      	bls.n	801b1de <ucdr_deserialize_int32_t+0x8e>
 801b17e:	6923      	ldr	r3, [r4, #16]
 801b180:	4620      	mov	r0, r4
 801b182:	60a7      	str	r7, [r4, #8]
 801b184:	1bbf      	subs	r7, r7, r6
 801b186:	443b      	add	r3, r7
 801b188:	f1c7 0904 	rsb	r9, r7, #4
 801b18c:	6123      	str	r3, [r4, #16]
 801b18e:	4649      	mov	r1, r9
 801b190:	f000 f87a 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801b194:	2800      	cmp	r0, #0
 801b196:	d046      	beq.n	801b226 <ucdr_deserialize_int32_t+0xd6>
 801b198:	7d23      	ldrb	r3, [r4, #20]
 801b19a:	2b01      	cmp	r3, #1
 801b19c:	d05c      	beq.n	801b258 <ucdr_deserialize_int32_t+0x108>
 801b19e:	78f3      	ldrb	r3, [r6, #3]
 801b1a0:	702b      	strb	r3, [r5, #0]
 801b1a2:	2f00      	cmp	r7, #0
 801b1a4:	d04c      	beq.n	801b240 <ucdr_deserialize_int32_t+0xf0>
 801b1a6:	78b3      	ldrb	r3, [r6, #2]
 801b1a8:	2f01      	cmp	r7, #1
 801b1aa:	706b      	strb	r3, [r5, #1]
 801b1ac:	f105 0302 	add.w	r3, r5, #2
 801b1b0:	d04a      	beq.n	801b248 <ucdr_deserialize_int32_t+0xf8>
 801b1b2:	7873      	ldrb	r3, [r6, #1]
 801b1b4:	2f02      	cmp	r7, #2
 801b1b6:	70ab      	strb	r3, [r5, #2]
 801b1b8:	f105 0303 	add.w	r3, r5, #3
 801b1bc:	d048      	beq.n	801b250 <ucdr_deserialize_int32_t+0x100>
 801b1be:	7833      	ldrb	r3, [r6, #0]
 801b1c0:	70eb      	strb	r3, [r5, #3]
 801b1c2:	6923      	ldr	r3, [r4, #16]
 801b1c4:	2104      	movs	r1, #4
 801b1c6:	68a2      	ldr	r2, [r4, #8]
 801b1c8:	3304      	adds	r3, #4
 801b1ca:	7da0      	ldrb	r0, [r4, #22]
 801b1cc:	444a      	add	r2, r9
 801b1ce:	7561      	strb	r1, [r4, #21]
 801b1d0:	1bdb      	subs	r3, r3, r7
 801b1d2:	f080 0001 	eor.w	r0, r0, #1
 801b1d6:	60a2      	str	r2, [r4, #8]
 801b1d8:	6123      	str	r3, [r4, #16]
 801b1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b1de:	2104      	movs	r1, #4
 801b1e0:	4620      	mov	r0, r4
 801b1e2:	f000 f851 	bl	801b288 <ucdr_check_final_buffer_behavior>
 801b1e6:	b1b0      	cbz	r0, 801b216 <ucdr_deserialize_int32_t+0xc6>
 801b1e8:	7d23      	ldrb	r3, [r4, #20]
 801b1ea:	2b01      	cmp	r3, #1
 801b1ec:	68a3      	ldr	r3, [r4, #8]
 801b1ee:	d017      	beq.n	801b220 <ucdr_deserialize_int32_t+0xd0>
 801b1f0:	78db      	ldrb	r3, [r3, #3]
 801b1f2:	702b      	strb	r3, [r5, #0]
 801b1f4:	68a3      	ldr	r3, [r4, #8]
 801b1f6:	789b      	ldrb	r3, [r3, #2]
 801b1f8:	706b      	strb	r3, [r5, #1]
 801b1fa:	68a3      	ldr	r3, [r4, #8]
 801b1fc:	785b      	ldrb	r3, [r3, #1]
 801b1fe:	70ab      	strb	r3, [r5, #2]
 801b200:	68a3      	ldr	r3, [r4, #8]
 801b202:	781b      	ldrb	r3, [r3, #0]
 801b204:	70eb      	strb	r3, [r5, #3]
 801b206:	2104      	movs	r1, #4
 801b208:	68a2      	ldr	r2, [r4, #8]
 801b20a:	6923      	ldr	r3, [r4, #16]
 801b20c:	440a      	add	r2, r1
 801b20e:	7561      	strb	r1, [r4, #21]
 801b210:	440b      	add	r3, r1
 801b212:	60a2      	str	r2, [r4, #8]
 801b214:	6123      	str	r3, [r4, #16]
 801b216:	7da0      	ldrb	r0, [r4, #22]
 801b218:	f080 0001 	eor.w	r0, r0, #1
 801b21c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b220:	681b      	ldr	r3, [r3, #0]
 801b222:	602b      	str	r3, [r5, #0]
 801b224:	e7ef      	b.n	801b206 <ucdr_deserialize_int32_t+0xb6>
 801b226:	68a2      	ldr	r2, [r4, #8]
 801b228:	6923      	ldr	r3, [r4, #16]
 801b22a:	1bd2      	subs	r2, r2, r7
 801b22c:	7da0      	ldrb	r0, [r4, #22]
 801b22e:	1bdb      	subs	r3, r3, r7
 801b230:	f884 8015 	strb.w	r8, [r4, #21]
 801b234:	f080 0001 	eor.w	r0, r0, #1
 801b238:	60a2      	str	r2, [r4, #8]
 801b23a:	6123      	str	r3, [r4, #16]
 801b23c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b240:	68a3      	ldr	r3, [r4, #8]
 801b242:	789b      	ldrb	r3, [r3, #2]
 801b244:	706b      	strb	r3, [r5, #1]
 801b246:	1cab      	adds	r3, r5, #2
 801b248:	68a2      	ldr	r2, [r4, #8]
 801b24a:	7852      	ldrb	r2, [r2, #1]
 801b24c:	f803 2b01 	strb.w	r2, [r3], #1
 801b250:	68a2      	ldr	r2, [r4, #8]
 801b252:	7812      	ldrb	r2, [r2, #0]
 801b254:	701a      	strb	r2, [r3, #0]
 801b256:	e7b4      	b.n	801b1c2 <ucdr_deserialize_int32_t+0x72>
 801b258:	4631      	mov	r1, r6
 801b25a:	463a      	mov	r2, r7
 801b25c:	4628      	mov	r0, r5
 801b25e:	f00a fbe0 	bl	8025a22 <memcpy>
 801b262:	464a      	mov	r2, r9
 801b264:	19e8      	adds	r0, r5, r7
 801b266:	68a1      	ldr	r1, [r4, #8]
 801b268:	f00a fbdb 	bl	8025a22 <memcpy>
 801b26c:	e7a9      	b.n	801b1c2 <ucdr_deserialize_int32_t+0x72>
 801b26e:	bf00      	nop

0801b270 <ucdr_check_buffer_available_for>:
 801b270:	7d83      	ldrb	r3, [r0, #22]
 801b272:	b93b      	cbnz	r3, 801b284 <ucdr_check_buffer_available_for+0x14>
 801b274:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 801b278:	4419      	add	r1, r3
 801b27a:	4288      	cmp	r0, r1
 801b27c:	bf34      	ite	cc
 801b27e:	2000      	movcc	r0, #0
 801b280:	2001      	movcs	r0, #1
 801b282:	4770      	bx	lr
 801b284:	2000      	movs	r0, #0
 801b286:	4770      	bx	lr

0801b288 <ucdr_check_final_buffer_behavior>:
 801b288:	7d83      	ldrb	r3, [r0, #22]
 801b28a:	b943      	cbnz	r3, 801b29e <ucdr_check_final_buffer_behavior+0x16>
 801b28c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 801b290:	b510      	push	{r4, lr}
 801b292:	4291      	cmp	r1, r2
 801b294:	4604      	mov	r4, r0
 801b296:	d205      	bcs.n	801b2a4 <ucdr_check_final_buffer_behavior+0x1c>
 801b298:	2301      	movs	r3, #1
 801b29a:	4618      	mov	r0, r3
 801b29c:	bd10      	pop	{r4, pc}
 801b29e:	2300      	movs	r3, #0
 801b2a0:	4618      	mov	r0, r3
 801b2a2:	4770      	bx	lr
 801b2a4:	6982      	ldr	r2, [r0, #24]
 801b2a6:	b13a      	cbz	r2, 801b2b8 <ucdr_check_final_buffer_behavior+0x30>
 801b2a8:	69c1      	ldr	r1, [r0, #28]
 801b2aa:	4790      	blx	r2
 801b2ac:	f080 0301 	eor.w	r3, r0, #1
 801b2b0:	75a0      	strb	r0, [r4, #22]
 801b2b2:	b2db      	uxtb	r3, r3
 801b2b4:	4618      	mov	r0, r3
 801b2b6:	bd10      	pop	{r4, pc}
 801b2b8:	2001      	movs	r0, #1
 801b2ba:	75a0      	strb	r0, [r4, #22]
 801b2bc:	e7fa      	b.n	801b2b4 <ucdr_check_final_buffer_behavior+0x2c>
 801b2be:	bf00      	nop

0801b2c0 <ucdr_set_on_full_buffer_callback>:
 801b2c0:	e9c0 1206 	strd	r1, r2, [r0, #24]
 801b2c4:	4770      	bx	lr
 801b2c6:	bf00      	nop

0801b2c8 <ucdr_init_buffer_origin_offset_endian>:
 801b2c8:	b410      	push	{r4}
 801b2ca:	9c01      	ldr	r4, [sp, #4]
 801b2cc:	440a      	add	r2, r1
 801b2ce:	6001      	str	r1, [r0, #0]
 801b2d0:	6042      	str	r2, [r0, #4]
 801b2d2:	190a      	adds	r2, r1, r4
 801b2d4:	441c      	add	r4, r3
 801b2d6:	6082      	str	r2, [r0, #8]
 801b2d8:	2200      	movs	r2, #0
 801b2da:	e9c0 3403 	strd	r3, r4, [r0, #12]
 801b2de:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801b2e2:	7542      	strb	r2, [r0, #21]
 801b2e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b2e8:	7582      	strb	r2, [r0, #22]
 801b2ea:	7503      	strb	r3, [r0, #20]
 801b2ec:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801b2f0:	4770      	bx	lr
 801b2f2:	bf00      	nop

0801b2f4 <ucdr_init_buffer_origin_offset>:
 801b2f4:	b510      	push	{r4, lr}
 801b2f6:	b082      	sub	sp, #8
 801b2f8:	9c04      	ldr	r4, [sp, #16]
 801b2fa:	9400      	str	r4, [sp, #0]
 801b2fc:	2401      	movs	r4, #1
 801b2fe:	9401      	str	r4, [sp, #4]
 801b300:	f7ff ffe2 	bl	801b2c8 <ucdr_init_buffer_origin_offset_endian>
 801b304:	b002      	add	sp, #8
 801b306:	bd10      	pop	{r4, pc}

0801b308 <ucdr_init_buffer_origin>:
 801b308:	b510      	push	{r4, lr}
 801b30a:	2400      	movs	r4, #0
 801b30c:	b082      	sub	sp, #8
 801b30e:	9400      	str	r4, [sp, #0]
 801b310:	f7ff fff0 	bl	801b2f4 <ucdr_init_buffer_origin_offset>
 801b314:	b002      	add	sp, #8
 801b316:	bd10      	pop	{r4, pc}

0801b318 <ucdr_init_buffer>:
 801b318:	2300      	movs	r3, #0
 801b31a:	f7ff bff5 	b.w	801b308 <ucdr_init_buffer_origin>
 801b31e:	bf00      	nop

0801b320 <ucdr_alignment>:
 801b320:	fbb0 f2f1 	udiv	r2, r0, r1
 801b324:	fb02 0011 	mls	r0, r2, r1, r0
 801b328:	1e4b      	subs	r3, r1, #1
 801b32a:	1a08      	subs	r0, r1, r0
 801b32c:	4018      	ands	r0, r3
 801b32e:	4770      	bx	lr

0801b330 <ucdr_buffer_alignment>:
 801b330:	7d43      	ldrb	r3, [r0, #21]
 801b332:	428b      	cmp	r3, r1
 801b334:	d209      	bcs.n	801b34a <ucdr_buffer_alignment+0x1a>
 801b336:	6903      	ldr	r3, [r0, #16]
 801b338:	1e4a      	subs	r2, r1, #1
 801b33a:	fbb3 f0f1 	udiv	r0, r3, r1
 801b33e:	fb01 3010 	mls	r0, r1, r0, r3
 801b342:	1a09      	subs	r1, r1, r0
 801b344:	ea01 0002 	and.w	r0, r1, r2
 801b348:	4770      	bx	lr
 801b34a:	2000      	movs	r0, #0
 801b34c:	4770      	bx	lr
 801b34e:	bf00      	nop

0801b350 <ucdr_align_to>:
 801b350:	b538      	push	{r3, r4, r5, lr}
 801b352:	4604      	mov	r4, r0
 801b354:	460d      	mov	r5, r1
 801b356:	f7ff ffeb 	bl	801b330 <ucdr_buffer_alignment>
 801b35a:	68a3      	ldr	r3, [r4, #8]
 801b35c:	7565      	strb	r5, [r4, #21]
 801b35e:	181a      	adds	r2, r3, r0
 801b360:	6923      	ldr	r3, [r4, #16]
 801b362:	4418      	add	r0, r3
 801b364:	6863      	ldr	r3, [r4, #4]
 801b366:	4293      	cmp	r3, r2
 801b368:	6120      	str	r0, [r4, #16]
 801b36a:	bf28      	it	cs
 801b36c:	4613      	movcs	r3, r2
 801b36e:	60a3      	str	r3, [r4, #8]
 801b370:	bd38      	pop	{r3, r4, r5, pc}
 801b372:	bf00      	nop

0801b374 <ucdr_buffer_length>:
 801b374:	6882      	ldr	r2, [r0, #8]
 801b376:	6800      	ldr	r0, [r0, #0]
 801b378:	1a10      	subs	r0, r2, r0
 801b37a:	4770      	bx	lr

0801b37c <ucdr_buffer_remaining>:
 801b37c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 801b380:	1a10      	subs	r0, r2, r0
 801b382:	4770      	bx	lr

0801b384 <ucdr_check_final_buffer_behavior_array>:
 801b384:	b538      	push	{r3, r4, r5, lr}
 801b386:	7d83      	ldrb	r3, [r0, #22]
 801b388:	b9a3      	cbnz	r3, 801b3b4 <ucdr_check_final_buffer_behavior_array+0x30>
 801b38a:	4604      	mov	r4, r0
 801b38c:	460d      	mov	r5, r1
 801b38e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801b392:	429a      	cmp	r2, r3
 801b394:	d300      	bcc.n	801b398 <ucdr_check_final_buffer_behavior_array+0x14>
 801b396:	b931      	cbnz	r1, 801b3a6 <ucdr_check_final_buffer_behavior_array+0x22>
 801b398:	4620      	mov	r0, r4
 801b39a:	f7ff ffef 	bl	801b37c <ucdr_buffer_remaining>
 801b39e:	42a8      	cmp	r0, r5
 801b3a0:	bf28      	it	cs
 801b3a2:	4628      	movcs	r0, r5
 801b3a4:	bd38      	pop	{r3, r4, r5, pc}
 801b3a6:	6983      	ldr	r3, [r0, #24]
 801b3a8:	b133      	cbz	r3, 801b3b8 <ucdr_check_final_buffer_behavior_array+0x34>
 801b3aa:	69c1      	ldr	r1, [r0, #28]
 801b3ac:	4798      	blx	r3
 801b3ae:	75a0      	strb	r0, [r4, #22]
 801b3b0:	2800      	cmp	r0, #0
 801b3b2:	d0f1      	beq.n	801b398 <ucdr_check_final_buffer_behavior_array+0x14>
 801b3b4:	2000      	movs	r0, #0
 801b3b6:	bd38      	pop	{r3, r4, r5, pc}
 801b3b8:	2301      	movs	r3, #1
 801b3ba:	7583      	strb	r3, [r0, #22]
 801b3bc:	e7fa      	b.n	801b3b4 <ucdr_check_final_buffer_behavior_array+0x30>
 801b3be:	bf00      	nop

0801b3c0 <ucdr_advance_buffer>:
 801b3c0:	b538      	push	{r3, r4, r5, lr}
 801b3c2:	4604      	mov	r4, r0
 801b3c4:	460d      	mov	r5, r1
 801b3c6:	f7ff ff53 	bl	801b270 <ucdr_check_buffer_available_for>
 801b3ca:	b178      	cbz	r0, 801b3ec <ucdr_advance_buffer+0x2c>
 801b3cc:	6923      	ldr	r3, [r4, #16]
 801b3ce:	68a2      	ldr	r2, [r4, #8]
 801b3d0:	442b      	add	r3, r5
 801b3d2:	442a      	add	r2, r5
 801b3d4:	6123      	str	r3, [r4, #16]
 801b3d6:	2301      	movs	r3, #1
 801b3d8:	60a2      	str	r2, [r4, #8]
 801b3da:	7563      	strb	r3, [r4, #21]
 801b3dc:	bd38      	pop	{r3, r4, r5, pc}
 801b3de:	68a2      	ldr	r2, [r4, #8]
 801b3e0:	1a2d      	subs	r5, r5, r0
 801b3e2:	6923      	ldr	r3, [r4, #16]
 801b3e4:	4402      	add	r2, r0
 801b3e6:	4418      	add	r0, r3
 801b3e8:	60a2      	str	r2, [r4, #8]
 801b3ea:	6120      	str	r0, [r4, #16]
 801b3ec:	4629      	mov	r1, r5
 801b3ee:	2201      	movs	r2, #1
 801b3f0:	4620      	mov	r0, r4
 801b3f2:	f7ff ffc7 	bl	801b384 <ucdr_check_final_buffer_behavior_array>
 801b3f6:	2800      	cmp	r0, #0
 801b3f8:	d1f1      	bne.n	801b3de <ucdr_advance_buffer+0x1e>
 801b3fa:	2301      	movs	r3, #1
 801b3fc:	7563      	strb	r3, [r4, #21]
 801b3fe:	bd38      	pop	{r3, r4, r5, pc}

0801b400 <ucdr_serialize_sequence_char>:
 801b400:	b570      	push	{r4, r5, r6, lr}
 801b402:	4615      	mov	r5, r2
 801b404:	460e      	mov	r6, r1
 801b406:	7d01      	ldrb	r1, [r0, #20]
 801b408:	4604      	mov	r4, r0
 801b40a:	f7ff fa87 	bl	801a91c <ucdr_serialize_endian_uint32_t>
 801b40e:	b90d      	cbnz	r5, 801b414 <ucdr_serialize_sequence_char+0x14>
 801b410:	2001      	movs	r0, #1
 801b412:	bd70      	pop	{r4, r5, r6, pc}
 801b414:	462b      	mov	r3, r5
 801b416:	4632      	mov	r2, r6
 801b418:	7d21      	ldrb	r1, [r4, #20]
 801b41a:	4620      	mov	r0, r4
 801b41c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b420:	f007 ba9c 	b.w	802295c <ucdr_serialize_endian_array_char>

0801b424 <ucdr_deserialize_sequence_char>:
 801b424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b428:	461d      	mov	r5, r3
 801b42a:	4616      	mov	r6, r2
 801b42c:	460f      	mov	r7, r1
 801b42e:	461a      	mov	r2, r3
 801b430:	7d01      	ldrb	r1, [r0, #20]
 801b432:	4604      	mov	r4, r0
 801b434:	f7ff fb9a 	bl	801ab6c <ucdr_deserialize_endian_uint32_t>
 801b438:	682b      	ldr	r3, [r5, #0]
 801b43a:	429e      	cmp	r6, r3
 801b43c:	d201      	bcs.n	801b442 <ucdr_deserialize_sequence_char+0x1e>
 801b43e:	2201      	movs	r2, #1
 801b440:	75a2      	strb	r2, [r4, #22]
 801b442:	b913      	cbnz	r3, 801b44a <ucdr_deserialize_sequence_char+0x26>
 801b444:	2001      	movs	r0, #1
 801b446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b44a:	463a      	mov	r2, r7
 801b44c:	7d21      	ldrb	r1, [r4, #20]
 801b44e:	4620      	mov	r0, r4
 801b450:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b454:	f007 bab4 	b.w	80229c0 <ucdr_deserialize_endian_array_char>

0801b458 <ucdr_serialize_sequence_uint8_t>:
 801b458:	b570      	push	{r4, r5, r6, lr}
 801b45a:	4615      	mov	r5, r2
 801b45c:	460e      	mov	r6, r1
 801b45e:	7d01      	ldrb	r1, [r0, #20]
 801b460:	4604      	mov	r4, r0
 801b462:	f7ff fa5b 	bl	801a91c <ucdr_serialize_endian_uint32_t>
 801b466:	b90d      	cbnz	r5, 801b46c <ucdr_serialize_sequence_uint8_t+0x14>
 801b468:	2001      	movs	r0, #1
 801b46a:	bd70      	pop	{r4, r5, r6, pc}
 801b46c:	462b      	mov	r3, r5
 801b46e:	4632      	mov	r2, r6
 801b470:	7d21      	ldrb	r1, [r4, #20]
 801b472:	4620      	mov	r0, r4
 801b474:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b478:	f007 bb08 	b.w	8022a8c <ucdr_serialize_endian_array_uint8_t>

0801b47c <ucdr_deserialize_sequence_uint8_t>:
 801b47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b480:	461d      	mov	r5, r3
 801b482:	4616      	mov	r6, r2
 801b484:	460f      	mov	r7, r1
 801b486:	461a      	mov	r2, r3
 801b488:	7d01      	ldrb	r1, [r0, #20]
 801b48a:	4604      	mov	r4, r0
 801b48c:	f7ff fb6e 	bl	801ab6c <ucdr_deserialize_endian_uint32_t>
 801b490:	682b      	ldr	r3, [r5, #0]
 801b492:	429e      	cmp	r6, r3
 801b494:	d201      	bcs.n	801b49a <ucdr_deserialize_sequence_uint8_t+0x1e>
 801b496:	2201      	movs	r2, #1
 801b498:	75a2      	strb	r2, [r4, #22]
 801b49a:	b913      	cbnz	r3, 801b4a2 <ucdr_deserialize_sequence_uint8_t+0x26>
 801b49c:	2001      	movs	r0, #1
 801b49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4a2:	463a      	mov	r2, r7
 801b4a4:	7d21      	ldrb	r1, [r4, #20]
 801b4a6:	4620      	mov	r0, r4
 801b4a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b4ac:	f007 bb54 	b.w	8022b58 <ucdr_deserialize_endian_array_uint8_t>

0801b4b0 <uxr_buffer_delete_entity>:
 801b4b0:	b510      	push	{r4, lr}
 801b4b2:	2300      	movs	r3, #0
 801b4b4:	b08e      	sub	sp, #56	@ 0x38
 801b4b6:	4604      	mov	r4, r0
 801b4b8:	9103      	str	r1, [sp, #12]
 801b4ba:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801b4be:	2303      	movs	r3, #3
 801b4c0:	2204      	movs	r2, #4
 801b4c2:	9300      	str	r3, [sp, #0]
 801b4c4:	ab06      	add	r3, sp, #24
 801b4c6:	f001 f94f 	bl	801c768 <uxr_prepare_stream_to_write_submessage>
 801b4ca:	b918      	cbnz	r0, 801b4d4 <uxr_buffer_delete_entity+0x24>
 801b4cc:	4604      	mov	r4, r0
 801b4ce:	4620      	mov	r0, r4
 801b4d0:	b00e      	add	sp, #56	@ 0x38
 801b4d2:	bd10      	pop	{r4, pc}
 801b4d4:	9902      	ldr	r1, [sp, #8]
 801b4d6:	aa05      	add	r2, sp, #20
 801b4d8:	4620      	mov	r0, r4
 801b4da:	f001 fa81 	bl	801c9e0 <uxr_init_base_object_request>
 801b4de:	4604      	mov	r4, r0
 801b4e0:	a905      	add	r1, sp, #20
 801b4e2:	a806      	add	r0, sp, #24
 801b4e4:	f002 fcd6 	bl	801de94 <uxr_serialize_DELETE_Payload>
 801b4e8:	4620      	mov	r0, r4
 801b4ea:	b00e      	add	sp, #56	@ 0x38
 801b4ec:	bd10      	pop	{r4, pc}
 801b4ee:	bf00      	nop

0801b4f0 <uxr_common_create_entity>:
 801b4f0:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801b4f4:	b510      	push	{r4, lr}
 801b4f6:	f1bc 0f01 	cmp.w	ip, #1
 801b4fa:	b08c      	sub	sp, #48	@ 0x30
 801b4fc:	4604      	mov	r4, r0
 801b4fe:	9202      	str	r2, [sp, #8]
 801b500:	bf0c      	ite	eq
 801b502:	f003 0201 	andeq.w	r2, r3, #1
 801b506:	2200      	movne	r2, #0
 801b508:	330e      	adds	r3, #14
 801b50a:	9103      	str	r1, [sp, #12]
 801b50c:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 801b510:	441a      	add	r2, r3
 801b512:	ab04      	add	r3, sp, #16
 801b514:	9101      	str	r1, [sp, #4]
 801b516:	2101      	movs	r1, #1
 801b518:	b292      	uxth	r2, r2
 801b51a:	9100      	str	r1, [sp, #0]
 801b51c:	9903      	ldr	r1, [sp, #12]
 801b51e:	f001 f923 	bl	801c768 <uxr_prepare_stream_to_write_submessage>
 801b522:	b918      	cbnz	r0, 801b52c <uxr_common_create_entity+0x3c>
 801b524:	4604      	mov	r4, r0
 801b526:	4620      	mov	r0, r4
 801b528:	b00c      	add	sp, #48	@ 0x30
 801b52a:	bd10      	pop	{r4, pc}
 801b52c:	9902      	ldr	r1, [sp, #8]
 801b52e:	4620      	mov	r0, r4
 801b530:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b532:	f001 fa55 	bl	801c9e0 <uxr_init_base_object_request>
 801b536:	4604      	mov	r4, r0
 801b538:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801b53a:	a804      	add	r0, sp, #16
 801b53c:	f002 fc04 	bl	801dd48 <uxr_serialize_CREATE_Payload>
 801b540:	4620      	mov	r0, r4
 801b542:	b00c      	add	sp, #48	@ 0x30
 801b544:	bd10      	pop	{r4, pc}
 801b546:	bf00      	nop

0801b548 <uxr_buffer_create_participant_bin>:
 801b548:	b570      	push	{r4, r5, r6, lr}
 801b54a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 801b54e:	4605      	mov	r5, r0
 801b550:	ac11      	add	r4, sp, #68	@ 0x44
 801b552:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 801b556:	2303      	movs	r3, #3
 801b558:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 801b55c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801b560:	7223      	strb	r3, [r4, #8]
 801b562:	2300      	movs	r3, #0
 801b564:	2201      	movs	r2, #1
 801b566:	f88d 3014 	strb.w	r3, [sp, #20]
 801b56a:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 801b56c:	7122      	strb	r2, [r4, #4]
 801b56e:	b1cb      	cbz	r3, 801b5a4 <uxr_buffer_create_participant_bin+0x5c>
 801b570:	f88d 201c 	strb.w	r2, [sp, #28]
 801b574:	9308      	str	r3, [sp, #32]
 801b576:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b57a:	a915      	add	r1, sp, #84	@ 0x54
 801b57c:	a809      	add	r0, sp, #36	@ 0x24
 801b57e:	f7ff fecb 	bl	801b318 <ucdr_init_buffer>
 801b582:	a905      	add	r1, sp, #20
 801b584:	a809      	add	r0, sp, #36	@ 0x24
 801b586:	f001 ffc9 	bl	801d51c <uxr_serialize_OBJK_DomainParticipant_Binary>
 801b58a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b58c:	9600      	str	r6, [sp, #0]
 801b58e:	4628      	mov	r0, r5
 801b590:	9401      	str	r4, [sp, #4]
 801b592:	60e3      	str	r3, [r4, #12]
 801b594:	b29b      	uxth	r3, r3
 801b596:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801b59a:	f7ff ffa9 	bl	801b4f0 <uxr_common_create_entity>
 801b59e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 801b5a2:	bd70      	pop	{r4, r5, r6, pc}
 801b5a4:	f88d 301c 	strb.w	r3, [sp, #28]
 801b5a8:	e7e5      	b.n	801b576 <uxr_buffer_create_participant_bin+0x2e>
 801b5aa:	bf00      	nop

0801b5ac <uxr_buffer_create_topic_bin>:
 801b5ac:	b570      	push	{r4, r5, r6, lr}
 801b5ae:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 801b5b2:	4605      	mov	r5, r0
 801b5b4:	4618      	mov	r0, r3
 801b5b6:	9105      	str	r1, [sp, #20]
 801b5b8:	a997      	add	r1, sp, #604	@ 0x25c
 801b5ba:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 801b5be:	ac13      	add	r4, sp, #76	@ 0x4c
 801b5c0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801b5c4:	2302      	movs	r3, #2
 801b5c6:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 801b5ca:	f000 f995 	bl	801b8f8 <uxr_object_id_to_raw>
 801b5ce:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 801b5d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b5d4:	a917      	add	r1, sp, #92	@ 0x5c
 801b5d6:	a80b      	add	r0, sp, #44	@ 0x2c
 801b5d8:	9306      	str	r3, [sp, #24]
 801b5da:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 801b5dc:	930a      	str	r3, [sp, #40]	@ 0x28
 801b5de:	2303      	movs	r3, #3
 801b5e0:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801b5e4:	2301      	movs	r3, #1
 801b5e6:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801b5ea:	2300      	movs	r3, #0
 801b5ec:	f88d 301c 	strb.w	r3, [sp, #28]
 801b5f0:	f7ff fe92 	bl	801b318 <ucdr_init_buffer>
 801b5f4:	a906      	add	r1, sp, #24
 801b5f6:	a80b      	add	r0, sp, #44	@ 0x2c
 801b5f8:	f001 ffb2 	bl	801d560 <uxr_serialize_OBJK_Topic_Binary>
 801b5fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b5fe:	4628      	mov	r0, r5
 801b600:	9600      	str	r6, [sp, #0]
 801b602:	9316      	str	r3, [sp, #88]	@ 0x58
 801b604:	b29b      	uxth	r3, r3
 801b606:	9401      	str	r4, [sp, #4]
 801b608:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801b60c:	f7ff ff70 	bl	801b4f0 <uxr_common_create_entity>
 801b610:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 801b614:	bd70      	pop	{r4, r5, r6, pc}
 801b616:	bf00      	nop

0801b618 <uxr_buffer_create_publisher_bin>:
 801b618:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b61a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 801b61e:	2603      	movs	r6, #3
 801b620:	4605      	mov	r5, r0
 801b622:	4618      	mov	r0, r3
 801b624:	9105      	str	r1, [sp, #20]
 801b626:	a992      	add	r1, sp, #584	@ 0x248
 801b628:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 801b62c:	ac0e      	add	r4, sp, #56	@ 0x38
 801b62e:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 801b632:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801b636:	f000 f95f 	bl	801b8f8 <uxr_object_id_to_raw>
 801b63a:	2300      	movs	r3, #0
 801b63c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b640:	a912      	add	r1, sp, #72	@ 0x48
 801b642:	a806      	add	r0, sp, #24
 801b644:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 801b648:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 801b64c:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 801b650:	f7ff fe62 	bl	801b318 <ucdr_init_buffer>
 801b654:	a993      	add	r1, sp, #588	@ 0x24c
 801b656:	a806      	add	r0, sp, #24
 801b658:	f002 f836 	bl	801d6c8 <uxr_serialize_OBJK_Publisher_Binary>
 801b65c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b65e:	4628      	mov	r0, r5
 801b660:	9700      	str	r7, [sp, #0]
 801b662:	9311      	str	r3, [sp, #68]	@ 0x44
 801b664:	b29b      	uxth	r3, r3
 801b666:	9401      	str	r4, [sp, #4]
 801b668:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801b66c:	f7ff ff40 	bl	801b4f0 <uxr_common_create_entity>
 801b670:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 801b674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b676:	bf00      	nop

0801b678 <uxr_buffer_create_subscriber_bin>:
 801b678:	b570      	push	{r4, r5, r6, lr}
 801b67a:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 801b67e:	4605      	mov	r5, r0
 801b680:	4618      	mov	r0, r3
 801b682:	9105      	str	r1, [sp, #20]
 801b684:	a992      	add	r1, sp, #584	@ 0x248
 801b686:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 801b68a:	ac0e      	add	r4, sp, #56	@ 0x38
 801b68c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801b690:	2304      	movs	r3, #4
 801b692:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 801b696:	f000 f92f 	bl	801b8f8 <uxr_object_id_to_raw>
 801b69a:	2300      	movs	r3, #0
 801b69c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b6a0:	a912      	add	r1, sp, #72	@ 0x48
 801b6a2:	a806      	add	r0, sp, #24
 801b6a4:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 801b6a8:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 801b6ac:	2303      	movs	r3, #3
 801b6ae:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 801b6b2:	f7ff fe31 	bl	801b318 <ucdr_init_buffer>
 801b6b6:	a993      	add	r1, sp, #588	@ 0x24c
 801b6b8:	a806      	add	r0, sp, #24
 801b6ba:	f002 f8b5 	bl	801d828 <uxr_serialize_OBJK_Subscriber_Binary>
 801b6be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b6c0:	4628      	mov	r0, r5
 801b6c2:	9600      	str	r6, [sp, #0]
 801b6c4:	9311      	str	r3, [sp, #68]	@ 0x44
 801b6c6:	b29b      	uxth	r3, r3
 801b6c8:	9401      	str	r4, [sp, #4]
 801b6ca:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801b6ce:	f7ff ff0f 	bl	801b4f0 <uxr_common_create_entity>
 801b6d2:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 801b6d6:	bd70      	pop	{r4, r5, r6, pc}

0801b6d8 <uxr_buffer_create_datawriter_bin>:
 801b6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b6dc:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801b6e0:	4606      	mov	r6, r0
 801b6e2:	4618      	mov	r0, r3
 801b6e4:	2703      	movs	r7, #3
 801b6e6:	ac1d      	add	r4, sp, #116	@ 0x74
 801b6e8:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 801b6ec:	9105      	str	r1, [sp, #20]
 801b6ee:	a9a1      	add	r1, sp, #644	@ 0x284
 801b6f0:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 801b6f4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801b6f8:	2305      	movs	r3, #5
 801b6fa:	7123      	strb	r3, [r4, #4]
 801b6fc:	f000 f8fc 	bl	801b8f8 <uxr_object_id_to_raw>
 801b700:	a90e      	add	r1, sp, #56	@ 0x38
 801b702:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 801b704:	7227      	strb	r7, [r4, #8]
 801b706:	f000 f8f7 	bl	801b8f8 <uxr_object_id_to_raw>
 801b70a:	2300      	movs	r3, #0
 801b70c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 801b710:	3d00      	subs	r5, #0
 801b712:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 801b716:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801b71a:	bf18      	it	ne
 801b71c:	2501      	movne	r5, #1
 801b71e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 801b722:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 801b726:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801b72a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801b72e:	2301      	movs	r3, #1
 801b730:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 801b734:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 801b738:	bb8a      	cbnz	r2, 801b79e <uxr_buffer_create_datawriter_bin+0xc6>
 801b73a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801b73e:	f04f 0c13 	mov.w	ip, #19
 801b742:	250b      	movs	r5, #11
 801b744:	2221      	movs	r2, #33	@ 0x21
 801b746:	2111      	movs	r1, #17
 801b748:	2009      	movs	r0, #9
 801b74a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801b74e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 801b752:	b923      	cbnz	r3, 801b75e <uxr_buffer_create_datawriter_bin+0x86>
 801b754:	4672      	mov	r2, lr
 801b756:	4661      	mov	r1, ip
 801b758:	4628      	mov	r0, r5
 801b75a:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801b75e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 801b762:	2b01      	cmp	r3, #1
 801b764:	d025      	beq.n	801b7b2 <uxr_buffer_create_datawriter_bin+0xda>
 801b766:	2b03      	cmp	r3, #3
 801b768:	d029      	beq.n	801b7be <uxr_buffer_create_datawriter_bin+0xe6>
 801b76a:	b32b      	cbz	r3, 801b7b8 <uxr_buffer_create_datawriter_bin+0xe0>
 801b76c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b770:	a921      	add	r1, sp, #132	@ 0x84
 801b772:	a806      	add	r0, sp, #24
 801b774:	f7ff fdd0 	bl	801b318 <ucdr_init_buffer>
 801b778:	a90e      	add	r1, sp, #56	@ 0x38
 801b77a:	a806      	add	r0, sp, #24
 801b77c:	f002 f906 	bl	801d98c <uxr_serialize_OBJK_DataWriter_Binary>
 801b780:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b782:	f8cd 8000 	str.w	r8, [sp]
 801b786:	4630      	mov	r0, r6
 801b788:	9401      	str	r4, [sp, #4]
 801b78a:	60e3      	str	r3, [r4, #12]
 801b78c:	b29b      	uxth	r3, r3
 801b78e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801b792:	f7ff fead 	bl	801b4f0 <uxr_common_create_entity>
 801b796:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801b79a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b79e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801b7a2:	f04f 0c12 	mov.w	ip, #18
 801b7a6:	250a      	movs	r5, #10
 801b7a8:	2220      	movs	r2, #32
 801b7aa:	2110      	movs	r1, #16
 801b7ac:	2008      	movs	r0, #8
 801b7ae:	2702      	movs	r7, #2
 801b7b0:	e7cd      	b.n	801b74e <uxr_buffer_create_datawriter_bin+0x76>
 801b7b2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801b7b6:	e7d9      	b.n	801b76c <uxr_buffer_create_datawriter_bin+0x94>
 801b7b8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801b7bc:	e7d6      	b.n	801b76c <uxr_buffer_create_datawriter_bin+0x94>
 801b7be:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801b7c2:	e7d3      	b.n	801b76c <uxr_buffer_create_datawriter_bin+0x94>

0801b7c4 <uxr_buffer_create_datareader_bin>:
 801b7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b7c8:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801b7cc:	4606      	mov	r6, r0
 801b7ce:	4618      	mov	r0, r3
 801b7d0:	2703      	movs	r7, #3
 801b7d2:	ac1f      	add	r4, sp, #124	@ 0x7c
 801b7d4:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 801b7d8:	9105      	str	r1, [sp, #20]
 801b7da:	a9a3      	add	r1, sp, #652	@ 0x28c
 801b7dc:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 801b7e0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801b7e4:	2306      	movs	r3, #6
 801b7e6:	7123      	strb	r3, [r4, #4]
 801b7e8:	f000 f886 	bl	801b8f8 <uxr_object_id_to_raw>
 801b7ec:	a90e      	add	r1, sp, #56	@ 0x38
 801b7ee:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 801b7f0:	7227      	strb	r7, [r4, #8]
 801b7f2:	f000 f881 	bl	801b8f8 <uxr_object_id_to_raw>
 801b7f6:	2300      	movs	r3, #0
 801b7f8:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 801b7fc:	3d00      	subs	r5, #0
 801b7fe:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 801b802:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 801b806:	bf18      	it	ne
 801b808:	2501      	movne	r5, #1
 801b80a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801b80e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 801b812:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 801b816:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801b81a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801b81e:	2301      	movs	r3, #1
 801b820:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 801b824:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 801b828:	bb8a      	cbnz	r2, 801b88e <uxr_buffer_create_datareader_bin+0xca>
 801b82a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801b82e:	f04f 0c13 	mov.w	ip, #19
 801b832:	250b      	movs	r5, #11
 801b834:	2221      	movs	r2, #33	@ 0x21
 801b836:	2111      	movs	r1, #17
 801b838:	2009      	movs	r0, #9
 801b83a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801b83e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 801b842:	b923      	cbnz	r3, 801b84e <uxr_buffer_create_datareader_bin+0x8a>
 801b844:	4672      	mov	r2, lr
 801b846:	4661      	mov	r1, ip
 801b848:	4628      	mov	r0, r5
 801b84a:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801b84e:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 801b852:	2b01      	cmp	r3, #1
 801b854:	d025      	beq.n	801b8a2 <uxr_buffer_create_datareader_bin+0xde>
 801b856:	2b03      	cmp	r3, #3
 801b858:	d029      	beq.n	801b8ae <uxr_buffer_create_datareader_bin+0xea>
 801b85a:	b32b      	cbz	r3, 801b8a8 <uxr_buffer_create_datareader_bin+0xe4>
 801b85c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b860:	a923      	add	r1, sp, #140	@ 0x8c
 801b862:	a806      	add	r0, sp, #24
 801b864:	f7ff fd58 	bl	801b318 <ucdr_init_buffer>
 801b868:	a90e      	add	r1, sp, #56	@ 0x38
 801b86a:	a806      	add	r0, sp, #24
 801b86c:	f002 f852 	bl	801d914 <uxr_serialize_OBJK_DataReader_Binary>
 801b870:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b872:	f8cd 8000 	str.w	r8, [sp]
 801b876:	4630      	mov	r0, r6
 801b878:	9401      	str	r4, [sp, #4]
 801b87a:	60e3      	str	r3, [r4, #12]
 801b87c:	b29b      	uxth	r3, r3
 801b87e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801b882:	f7ff fe35 	bl	801b4f0 <uxr_common_create_entity>
 801b886:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801b88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b88e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801b892:	f04f 0c12 	mov.w	ip, #18
 801b896:	250a      	movs	r5, #10
 801b898:	2220      	movs	r2, #32
 801b89a:	2110      	movs	r1, #16
 801b89c:	2008      	movs	r0, #8
 801b89e:	2702      	movs	r7, #2
 801b8a0:	e7cd      	b.n	801b83e <uxr_buffer_create_datareader_bin+0x7a>
 801b8a2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801b8a6:	e7d9      	b.n	801b85c <uxr_buffer_create_datareader_bin+0x98>
 801b8a8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801b8ac:	e7d6      	b.n	801b85c <uxr_buffer_create_datareader_bin+0x98>
 801b8ae:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801b8b2:	e7d3      	b.n	801b85c <uxr_buffer_create_datareader_bin+0x98>

0801b8b4 <uxr_object_id>:
 801b8b4:	b082      	sub	sp, #8
 801b8b6:	2300      	movs	r3, #0
 801b8b8:	f88d 1006 	strb.w	r1, [sp, #6]
 801b8bc:	f360 030f 	bfi	r3, r0, #0, #16
 801b8c0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801b8c4:	f362 431f 	bfi	r3, r2, #16, #16
 801b8c8:	4618      	mov	r0, r3
 801b8ca:	b002      	add	sp, #8
 801b8cc:	4770      	bx	lr
 801b8ce:	bf00      	nop

0801b8d0 <uxr_object_id_from_raw>:
 801b8d0:	7843      	ldrb	r3, [r0, #1]
 801b8d2:	b082      	sub	sp, #8
 801b8d4:	7801      	ldrb	r1, [r0, #0]
 801b8d6:	2000      	movs	r0, #0
 801b8d8:	091a      	lsrs	r2, r3, #4
 801b8da:	f003 030f 	and.w	r3, r3, #15
 801b8de:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 801b8e2:	f88d 3006 	strb.w	r3, [sp, #6]
 801b8e6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801b8ea:	f362 000f 	bfi	r0, r2, #0, #16
 801b8ee:	f363 401f 	bfi	r0, r3, #16, #16
 801b8f2:	b002      	add	sp, #8
 801b8f4:	4770      	bx	lr
 801b8f6:	bf00      	nop

0801b8f8 <uxr_object_id_to_raw>:
 801b8f8:	4602      	mov	r2, r0
 801b8fa:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801b8fe:	b082      	sub	sp, #8
 801b900:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 801b904:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 801b908:	f881 c000 	strb.w	ip, [r1]
 801b90c:	7048      	strb	r0, [r1, #1]
 801b90e:	b002      	add	sp, #8
 801b910:	4770      	bx	lr
 801b912:	bf00      	nop

0801b914 <on_get_fragmentation_info>:
 801b914:	b500      	push	{lr}
 801b916:	b08b      	sub	sp, #44	@ 0x2c
 801b918:	4601      	mov	r1, r0
 801b91a:	2204      	movs	r2, #4
 801b91c:	a802      	add	r0, sp, #8
 801b91e:	f7ff fcfb 	bl	801b318 <ucdr_init_buffer>
 801b922:	f10d 0305 	add.w	r3, sp, #5
 801b926:	f10d 0206 	add.w	r2, sp, #6
 801b92a:	a901      	add	r1, sp, #4
 801b92c:	a802      	add	r0, sp, #8
 801b92e:	f001 f9e1 	bl	801ccf4 <uxr_read_submessage_header>
 801b932:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801b936:	2b0d      	cmp	r3, #13
 801b938:	d003      	beq.n	801b942 <on_get_fragmentation_info+0x2e>
 801b93a:	2000      	movs	r0, #0
 801b93c:	b00b      	add	sp, #44	@ 0x2c
 801b93e:	f85d fb04 	ldr.w	pc, [sp], #4
 801b942:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801b946:	f013 0f02 	tst.w	r3, #2
 801b94a:	bf14      	ite	ne
 801b94c:	2002      	movne	r0, #2
 801b94e:	2001      	moveq	r0, #1
 801b950:	b00b      	add	sp, #44	@ 0x2c
 801b952:	f85d fb04 	ldr.w	pc, [sp], #4
 801b956:	bf00      	nop

0801b958 <read_submessage_get_info>:
 801b958:	b570      	push	{r4, r5, r6, lr}
 801b95a:	2500      	movs	r5, #0
 801b95c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 801b960:	460e      	mov	r6, r1
 801b962:	4604      	mov	r4, r0
 801b964:	f44f 7224 	mov.w	r2, #656	@ 0x290
 801b968:	4629      	mov	r1, r5
 801b96a:	a810      	add	r0, sp, #64	@ 0x40
 801b96c:	9503      	str	r5, [sp, #12]
 801b96e:	9504      	str	r5, [sp, #16]
 801b970:	f009 ff30 	bl	80257d4 <memset>
 801b974:	a903      	add	r1, sp, #12
 801b976:	4630      	mov	r0, r6
 801b978:	f002 fa76 	bl	801de68 <uxr_deserialize_GET_INFO_Payload>
 801b97c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801b980:	4620      	mov	r0, r4
 801b982:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801b986:	f001 f823 	bl	801c9d0 <uxr_session_header_offset>
 801b98a:	462b      	mov	r3, r5
 801b98c:	220c      	movs	r2, #12
 801b98e:	a905      	add	r1, sp, #20
 801b990:	9000      	str	r0, [sp, #0]
 801b992:	a808      	add	r0, sp, #32
 801b994:	f7ff fcae 	bl	801b2f4 <ucdr_init_buffer_origin_offset>
 801b998:	a910      	add	r1, sp, #64	@ 0x40
 801b99a:	a808      	add	r0, sp, #32
 801b99c:	f002 fad8 	bl	801df50 <uxr_serialize_INFO_Payload>
 801b9a0:	9b08      	ldr	r3, [sp, #32]
 801b9a2:	462a      	mov	r2, r5
 801b9a4:	4629      	mov	r1, r5
 801b9a6:	4620      	mov	r0, r4
 801b9a8:	f000 ffbe 	bl	801c928 <uxr_stamp_session_header>
 801b9ac:	a808      	add	r0, sp, #32
 801b9ae:	f7ff fce1 	bl	801b374 <ucdr_buffer_length>
 801b9b2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801b9b4:	4602      	mov	r2, r0
 801b9b6:	a905      	add	r1, sp, #20
 801b9b8:	e9d3 0400 	ldrd	r0, r4, [r3]
 801b9bc:	47a0      	blx	r4
 801b9be:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801b9c2:	bd70      	pop	{r4, r5, r6, pc}

0801b9c4 <write_submessage_acknack.isra.0>:
 801b9c4:	b570      	push	{r4, r5, r6, lr}
 801b9c6:	b092      	sub	sp, #72	@ 0x48
 801b9c8:	4605      	mov	r5, r0
 801b9ca:	460e      	mov	r6, r1
 801b9cc:	4614      	mov	r4, r2
 801b9ce:	f000 ffff 	bl	801c9d0 <uxr_session_header_offset>
 801b9d2:	a905      	add	r1, sp, #20
 801b9d4:	9000      	str	r0, [sp, #0]
 801b9d6:	2300      	movs	r3, #0
 801b9d8:	a80a      	add	r0, sp, #40	@ 0x28
 801b9da:	2211      	movs	r2, #17
 801b9dc:	f7ff fc8a 	bl	801b2f4 <ucdr_init_buffer_origin_offset>
 801b9e0:	2218      	movs	r2, #24
 801b9e2:	2300      	movs	r3, #0
 801b9e4:	210a      	movs	r1, #10
 801b9e6:	fb02 5404 	mla	r4, r2, r4, r5
 801b9ea:	a80a      	add	r0, sp, #40	@ 0x28
 801b9ec:	2205      	movs	r2, #5
 801b9ee:	3450      	adds	r4, #80	@ 0x50
 801b9f0:	f001 f966 	bl	801ccc0 <uxr_buffer_submessage_header>
 801b9f4:	a903      	add	r1, sp, #12
 801b9f6:	4620      	mov	r0, r4
 801b9f8:	f007 fb52 	bl	80230a0 <uxr_compute_acknack>
 801b9fc:	ba40      	rev16	r0, r0
 801b9fe:	a903      	add	r1, sp, #12
 801ba00:	f88d 6010 	strb.w	r6, [sp, #16]
 801ba04:	f8ad 000e 	strh.w	r0, [sp, #14]
 801ba08:	a80a      	add	r0, sp, #40	@ 0x28
 801ba0a:	f002 fb13 	bl	801e034 <uxr_serialize_ACKNACK_Payload>
 801ba0e:	2200      	movs	r2, #0
 801ba10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ba12:	4628      	mov	r0, r5
 801ba14:	4611      	mov	r1, r2
 801ba16:	f000 ff87 	bl	801c928 <uxr_stamp_session_header>
 801ba1a:	a80a      	add	r0, sp, #40	@ 0x28
 801ba1c:	f7ff fcaa 	bl	801b374 <ucdr_buffer_length>
 801ba20:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801ba22:	4602      	mov	r2, r0
 801ba24:	a905      	add	r1, sp, #20
 801ba26:	e9d3 0400 	ldrd	r0, r4, [r3]
 801ba2a:	47a0      	blx	r4
 801ba2c:	b012      	add	sp, #72	@ 0x48
 801ba2e:	bd70      	pop	{r4, r5, r6, pc}

0801ba30 <uxr_init_session>:
 801ba30:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801ba68 <uxr_init_session+0x38>
 801ba34:	2300      	movs	r3, #0
 801ba36:	b510      	push	{r4, lr}
 801ba38:	4604      	mov	r4, r0
 801ba3a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 801ba3e:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 801ba42:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 801ba46:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 801ba4a:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 801ba4e:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 801ba52:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 801ba56:	2181      	movs	r1, #129	@ 0x81
 801ba58:	f000 feca 	bl	801c7f0 <uxr_init_session_info>
 801ba5c:	f104 0008 	add.w	r0, r4, #8
 801ba60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ba64:	f001 b848 	b.w	801caf8 <uxr_init_stream_storage>
	...

0801ba70 <uxr_set_status_callback>:
 801ba70:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 801ba74:	4770      	bx	lr
 801ba76:	bf00      	nop

0801ba78 <uxr_set_topic_callback>:
 801ba78:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 801ba7c:	4770      	bx	lr
 801ba7e:	bf00      	nop

0801ba80 <uxr_set_request_callback>:
 801ba80:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 801ba84:	4770      	bx	lr
 801ba86:	bf00      	nop

0801ba88 <uxr_set_reply_callback>:
 801ba88:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 801ba8c:	4770      	bx	lr
 801ba8e:	bf00      	nop

0801ba90 <uxr_create_output_best_effort_stream>:
 801ba90:	b510      	push	{r4, lr}
 801ba92:	4604      	mov	r4, r0
 801ba94:	b084      	sub	sp, #16
 801ba96:	e9cd 2100 	strd	r2, r1, [sp]
 801ba9a:	f000 ff99 	bl	801c9d0 <uxr_session_header_offset>
 801ba9e:	4603      	mov	r3, r0
 801baa0:	f104 0008 	add.w	r0, r4, #8
 801baa4:	e9dd 2100 	ldrd	r2, r1, [sp]
 801baa8:	b004      	add	sp, #16
 801baaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801baae:	f001 b869 	b.w	801cb84 <uxr_add_output_best_effort_buffer>
 801bab2:	bf00      	nop

0801bab4 <uxr_create_output_reliable_stream>:
 801bab4:	b530      	push	{r4, r5, lr}
 801bab6:	b089      	sub	sp, #36	@ 0x24
 801bab8:	4604      	mov	r4, r0
 801baba:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801babe:	9303      	str	r3, [sp, #12]
 801bac0:	f000 ff86 	bl	801c9d0 <uxr_session_header_offset>
 801bac4:	4605      	mov	r5, r0
 801bac6:	9905      	ldr	r1, [sp, #20]
 801bac8:	f104 0008 	add.w	r0, r4, #8
 801bacc:	9500      	str	r5, [sp, #0]
 801bace:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 801bad2:	f001 f86b 	bl	801cbac <uxr_add_output_reliable_buffer>
 801bad6:	2200      	movs	r2, #0
 801bad8:	fa5f fc80 	uxtb.w	ip, r0
 801badc:	f3c0 2407 	ubfx	r4, r0, #8, #8
 801bae0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801bae4:	0e03      	lsrs	r3, r0, #24
 801bae6:	f36c 0207 	bfi	r2, ip, #0, #8
 801baea:	f364 220f 	bfi	r2, r4, #8, #8
 801baee:	f361 4217 	bfi	r2, r1, #16, #8
 801baf2:	f363 621f 	bfi	r2, r3, #24, #8
 801baf6:	4610      	mov	r0, r2
 801baf8:	b009      	add	sp, #36	@ 0x24
 801bafa:	bd30      	pop	{r4, r5, pc}

0801bafc <uxr_create_input_best_effort_stream>:
 801bafc:	b082      	sub	sp, #8
 801bafe:	3008      	adds	r0, #8
 801bb00:	b002      	add	sp, #8
 801bb02:	f001 b86d 	b.w	801cbe0 <uxr_add_input_best_effort_buffer>
 801bb06:	bf00      	nop

0801bb08 <uxr_create_input_reliable_stream>:
 801bb08:	b510      	push	{r4, lr}
 801bb0a:	4c0c      	ldr	r4, [pc, #48]	@ (801bb3c <uxr_create_input_reliable_stream+0x34>)
 801bb0c:	b084      	sub	sp, #16
 801bb0e:	3008      	adds	r0, #8
 801bb10:	9400      	str	r4, [sp, #0]
 801bb12:	f001 f87b 	bl	801cc0c <uxr_add_input_reliable_buffer>
 801bb16:	2200      	movs	r2, #0
 801bb18:	fa5f fe80 	uxtb.w	lr, r0
 801bb1c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 801bb20:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801bb24:	0e03      	lsrs	r3, r0, #24
 801bb26:	f36e 0207 	bfi	r2, lr, #0, #8
 801bb2a:	f36c 220f 	bfi	r2, ip, #8, #8
 801bb2e:	f361 4217 	bfi	r2, r1, #16, #8
 801bb32:	f363 621f 	bfi	r2, r3, #24, #8
 801bb36:	4610      	mov	r0, r2
 801bb38:	b004      	add	sp, #16
 801bb3a:	bd10      	pop	{r4, pc}
 801bb3c:	0801b915 	.word	0x0801b915

0801bb40 <uxr_epoch_nanos>:
 801bb40:	b510      	push	{r4, lr}
 801bb42:	4604      	mov	r4, r0
 801bb44:	f001 f91e 	bl	801cd84 <uxr_nanos>
 801bb48:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 801bb4c:	1ac0      	subs	r0, r0, r3
 801bb4e:	eb61 0102 	sbc.w	r1, r1, r2
 801bb52:	bd10      	pop	{r4, pc}

0801bb54 <uxr_flash_output_streams>:
 801bb54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bb58:	7e03      	ldrb	r3, [r0, #24]
 801bb5a:	b084      	sub	sp, #16
 801bb5c:	4604      	mov	r4, r0
 801bb5e:	b1fb      	cbz	r3, 801bba0 <uxr_flash_output_streams+0x4c>
 801bb60:	f04f 0900 	mov.w	r9, #0
 801bb64:	f10d 0802 	add.w	r8, sp, #2
 801bb68:	af03      	add	r7, sp, #12
 801bb6a:	ae02      	add	r6, sp, #8
 801bb6c:	4648      	mov	r0, r9
 801bb6e:	2201      	movs	r2, #1
 801bb70:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801bb74:	4611      	mov	r1, r2
 801bb76:	3508      	adds	r5, #8
 801bb78:	f000 ff64 	bl	801ca44 <uxr_stream_id>
 801bb7c:	4684      	mov	ip, r0
 801bb7e:	4643      	mov	r3, r8
 801bb80:	463a      	mov	r2, r7
 801bb82:	4631      	mov	r1, r6
 801bb84:	4628      	mov	r0, r5
 801bb86:	f8cd c004 	str.w	ip, [sp, #4]
 801bb8a:	f007 fb13 	bl	80231b4 <uxr_prepare_best_effort_buffer_to_send>
 801bb8e:	2800      	cmp	r0, #0
 801bb90:	d13d      	bne.n	801bc0e <uxr_flash_output_streams+0xba>
 801bb92:	f109 0901 	add.w	r9, r9, #1
 801bb96:	7e23      	ldrb	r3, [r4, #24]
 801bb98:	fa5f f089 	uxtb.w	r0, r9
 801bb9c:	4283      	cmp	r3, r0
 801bb9e:	d8e6      	bhi.n	801bb6e <uxr_flash_output_streams+0x1a>
 801bba0:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801bba4:	b383      	cbz	r3, 801bc08 <uxr_flash_output_streams+0xb4>
 801bba6:	f04f 0900 	mov.w	r9, #0
 801bbaa:	f10d 0802 	add.w	r8, sp, #2
 801bbae:	af03      	add	r7, sp, #12
 801bbb0:	ae02      	add	r6, sp, #8
 801bbb2:	4648      	mov	r0, r9
 801bbb4:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 801bbb8:	2201      	movs	r2, #1
 801bbba:	2102      	movs	r1, #2
 801bbbc:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 801bbc0:	f000 ff40 	bl	801ca44 <uxr_stream_id>
 801bbc4:	9001      	str	r0, [sp, #4]
 801bbc6:	3520      	adds	r5, #32
 801bbc8:	e00c      	b.n	801bbe4 <uxr_flash_output_streams+0x90>
 801bbca:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801bbce:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801bbd2:	9b02      	ldr	r3, [sp, #8]
 801bbd4:	f000 fea8 	bl	801c928 <uxr_stamp_session_header>
 801bbd8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801bbda:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801bbde:	e9d3 0a00 	ldrd	r0, sl, [r3]
 801bbe2:	47d0      	blx	sl
 801bbe4:	4643      	mov	r3, r8
 801bbe6:	463a      	mov	r2, r7
 801bbe8:	4631      	mov	r1, r6
 801bbea:	4628      	mov	r0, r5
 801bbec:	f007 fd04 	bl	80235f8 <uxr_prepare_next_reliable_buffer_to_send>
 801bbf0:	4603      	mov	r3, r0
 801bbf2:	4620      	mov	r0, r4
 801bbf4:	2b00      	cmp	r3, #0
 801bbf6:	d1e8      	bne.n	801bbca <uxr_flash_output_streams+0x76>
 801bbf8:	f109 0901 	add.w	r9, r9, #1
 801bbfc:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801bc00:	fa5f f089 	uxtb.w	r0, r9
 801bc04:	4283      	cmp	r3, r0
 801bc06:	d8d5      	bhi.n	801bbb4 <uxr_flash_output_streams+0x60>
 801bc08:	b004      	add	sp, #16
 801bc0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bc0e:	9b02      	ldr	r3, [sp, #8]
 801bc10:	4620      	mov	r0, r4
 801bc12:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801bc16:	f109 0901 	add.w	r9, r9, #1
 801bc1a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801bc1e:	f000 fe83 	bl	801c928 <uxr_stamp_session_header>
 801bc22:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801bc24:	9a03      	ldr	r2, [sp, #12]
 801bc26:	685d      	ldr	r5, [r3, #4]
 801bc28:	6818      	ldr	r0, [r3, #0]
 801bc2a:	9902      	ldr	r1, [sp, #8]
 801bc2c:	47a8      	blx	r5
 801bc2e:	7e23      	ldrb	r3, [r4, #24]
 801bc30:	fa5f f089 	uxtb.w	r0, r9
 801bc34:	4283      	cmp	r3, r0
 801bc36:	d89a      	bhi.n	801bb6e <uxr_flash_output_streams+0x1a>
 801bc38:	e7b2      	b.n	801bba0 <uxr_flash_output_streams+0x4c>
 801bc3a:	bf00      	nop

0801bc3c <read_submessage_info>:
 801bc3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc40:	460d      	mov	r5, r1
 801bc42:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801bc46:	4606      	mov	r6, r0
 801bc48:	4669      	mov	r1, sp
 801bc4a:	4628      	mov	r0, r5
 801bc4c:	f002 f81e 	bl	801dc8c <uxr_deserialize_BaseObjectReply>
 801bc50:	4604      	mov	r4, r0
 801bc52:	a902      	add	r1, sp, #8
 801bc54:	4628      	mov	r0, r5
 801bc56:	f89d 7005 	ldrb.w	r7, [sp, #5]
 801bc5a:	f7fe fb99 	bl	801a390 <ucdr_deserialize_bool>
 801bc5e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801bc62:	4004      	ands	r4, r0
 801bc64:	b2e4      	uxtb	r4, r4
 801bc66:	b95b      	cbnz	r3, 801bc80 <read_submessage_info+0x44>
 801bc68:	a987      	add	r1, sp, #540	@ 0x21c
 801bc6a:	4628      	mov	r0, r5
 801bc6c:	f7fe fb90 	bl	801a390 <ucdr_deserialize_bool>
 801bc70:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 801bc74:	4680      	mov	r8, r0
 801bc76:	b94b      	cbnz	r3, 801bc8c <read_submessage_info+0x50>
 801bc78:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801bc7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc80:	a903      	add	r1, sp, #12
 801bc82:	4628      	mov	r0, r5
 801bc84:	f001 feae 	bl	801d9e4 <uxr_deserialize_ObjectVariant>
 801bc88:	4004      	ands	r4, r0
 801bc8a:	e7ed      	b.n	801bc68 <read_submessage_info+0x2c>
 801bc8c:	a988      	add	r1, sp, #544	@ 0x220
 801bc8e:	4628      	mov	r0, r5
 801bc90:	f7fe fbac 	bl	801a3ec <ucdr_deserialize_uint8_t>
 801bc94:	ea14 0f08 	tst.w	r4, r8
 801bc98:	d0ee      	beq.n	801bc78 <read_submessage_info+0x3c>
 801bc9a:	2800      	cmp	r0, #0
 801bc9c:	d0ec      	beq.n	801bc78 <read_submessage_info+0x3c>
 801bc9e:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 801bca2:	2b0d      	cmp	r3, #13
 801bca4:	d1e8      	bne.n	801bc78 <read_submessage_info+0x3c>
 801bca6:	a98a      	add	r1, sp, #552	@ 0x228
 801bca8:	4628      	mov	r0, r5
 801bcaa:	f7ff f945 	bl	801af38 <ucdr_deserialize_int16_t>
 801bcae:	b138      	cbz	r0, 801bcc0 <read_submessage_info+0x84>
 801bcb0:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 801bcb4:	2b00      	cmp	r3, #0
 801bcb6:	dd06      	ble.n	801bcc6 <read_submessage_info+0x8a>
 801bcb8:	2f00      	cmp	r7, #0
 801bcba:	bf14      	ite	ne
 801bcbc:	2001      	movne	r0, #1
 801bcbe:	2002      	moveq	r0, #2
 801bcc0:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 801bcc4:	e7d8      	b.n	801bc78 <read_submessage_info+0x3c>
 801bcc6:	2000      	movs	r0, #0
 801bcc8:	e7fa      	b.n	801bcc0 <read_submessage_info+0x84>
 801bcca:	bf00      	nop

0801bccc <read_submessage_list>:
 801bccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcd0:	4604      	mov	r4, r0
 801bcd2:	b097      	sub	sp, #92	@ 0x5c
 801bcd4:	460d      	mov	r5, r1
 801bcd6:	4ec1      	ldr	r6, [pc, #772]	@ (801bfdc <read_submessage_list+0x310>)
 801bcd8:	9209      	str	r2, [sp, #36]	@ 0x24
 801bcda:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801bcde:	aa0c      	add	r2, sp, #48	@ 0x30
 801bce0:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 801bce4:	4628      	mov	r0, r5
 801bce6:	f001 f805 	bl	801ccf4 <uxr_read_submessage_header>
 801bcea:	2800      	cmp	r0, #0
 801bcec:	f000 8142 	beq.w	801bf74 <read_submessage_list+0x2a8>
 801bcf0:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 801bcf4:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 801bcf8:	3b02      	subs	r3, #2
 801bcfa:	2b0d      	cmp	r3, #13
 801bcfc:	d8ed      	bhi.n	801bcda <read_submessage_list+0xe>
 801bcfe:	a101      	add	r1, pc, #4	@ (adr r1, 801bd04 <read_submessage_list+0x38>)
 801bd00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801bd04:	0801bf6b 	.word	0x0801bf6b
 801bd08:	0801bcdb 	.word	0x0801bcdb
 801bd0c:	0801bf5b 	.word	0x0801bf5b
 801bd10:	0801bef9 	.word	0x0801bef9
 801bd14:	0801beef 	.word	0x0801beef
 801bd18:	0801bcdb 	.word	0x0801bcdb
 801bd1c:	0801bcdb 	.word	0x0801bcdb
 801bd20:	0801be45 	.word	0x0801be45
 801bd24:	0801bdd7 	.word	0x0801bdd7
 801bd28:	0801bd97 	.word	0x0801bd97
 801bd2c:	0801bcdb 	.word	0x0801bcdb
 801bd30:	0801bcdb 	.word	0x0801bcdb
 801bd34:	0801bcdb 	.word	0x0801bcdb
 801bd38:	0801bd3d 	.word	0x0801bd3d
 801bd3c:	a910      	add	r1, sp, #64	@ 0x40
 801bd3e:	4628      	mov	r0, r5
 801bd40:	f002 f9cc 	bl	801e0dc <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 801bd44:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 801bd48:	f1b8 0f00 	cmp.w	r8, #0
 801bd4c:	f000 811a 	beq.w	801bf84 <read_submessage_list+0x2b8>
 801bd50:	f001 f818 	bl	801cd84 <uxr_nanos>
 801bd54:	4602      	mov	r2, r0
 801bd56:	460b      	mov	r3, r1
 801bd58:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 801bd5c:	2100      	movs	r1, #0
 801bd5e:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801bd60:	9006      	str	r0, [sp, #24]
 801bd62:	468c      	mov	ip, r1
 801bd64:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801bd66:	fbc7 0c06 	smlal	r0, ip, r7, r6
 801bd6a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801bd6c:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 801bd70:	468c      	mov	ip, r1
 801bd72:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801bd74:	fbc7 0c06 	smlal	r0, ip, r7, r6
 801bd78:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 801bd7c:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 801bd80:	fbc7 0106 	smlal	r0, r1, r7, r6
 801bd84:	e9cd 0100 	strd	r0, r1, [sp]
 801bd88:	4620      	mov	r0, r4
 801bd8a:	47c0      	blx	r8
 801bd8c:	f04f 0301 	mov.w	r3, #1
 801bd90:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 801bd94:	e7a1      	b.n	801bcda <read_submessage_list+0xe>
 801bd96:	a910      	add	r1, sp, #64	@ 0x40
 801bd98:	4628      	mov	r0, r5
 801bd9a:	f002 f98b 	bl	801e0b4 <uxr_deserialize_HEARTBEAT_Payload>
 801bd9e:	2100      	movs	r1, #0
 801bda0:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801bda4:	f000 fe7c 	bl	801caa0 <uxr_stream_id_from_raw>
 801bda8:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801bdac:	900f      	str	r0, [sp, #60]	@ 0x3c
 801bdae:	f104 0008 	add.w	r0, r4, #8
 801bdb2:	4641      	mov	r1, r8
 801bdb4:	f000 ff62 	bl	801cc7c <uxr_get_input_reliable_stream>
 801bdb8:	2800      	cmp	r0, #0
 801bdba:	d08e      	beq.n	801bcda <read_submessage_list+0xe>
 801bdbc:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801bdc0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 801bdc4:	f007 f960 	bl	8023088 <uxr_process_heartbeat>
 801bdc8:	4642      	mov	r2, r8
 801bdca:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 801bdce:	4620      	mov	r0, r4
 801bdd0:	f7ff fdf8 	bl	801b9c4 <write_submessage_acknack.isra.0>
 801bdd4:	e781      	b.n	801bcda <read_submessage_list+0xe>
 801bdd6:	a910      	add	r1, sp, #64	@ 0x40
 801bdd8:	4628      	mov	r0, r5
 801bdda:	f002 f943 	bl	801e064 <uxr_deserialize_ACKNACK_Payload>
 801bdde:	2100      	movs	r1, #0
 801bde0:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801bde4:	f000 fe5c 	bl	801caa0 <uxr_stream_id_from_raw>
 801bde8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801bdec:	900d      	str	r0, [sp, #52]	@ 0x34
 801bdee:	f104 0008 	add.w	r0, r4, #8
 801bdf2:	f000 ff2d 	bl	801cc50 <uxr_get_output_reliable_stream>
 801bdf6:	4680      	mov	r8, r0
 801bdf8:	2800      	cmp	r0, #0
 801bdfa:	f43f af6e 	beq.w	801bcda <read_submessage_list+0xe>
 801bdfe:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 801be02:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801be06:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 801be0a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801be0e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801be12:	b289      	uxth	r1, r1
 801be14:	f007 fc98 	bl	8023748 <uxr_process_acknack>
 801be18:	4640      	mov	r0, r8
 801be1a:	f007 fc59 	bl	80236d0 <uxr_begin_output_nack_buffer_it>
 801be1e:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801be22:	e005      	b.n	801be30 <read_submessage_list+0x164>
 801be24:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801be26:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 801be2a:	e9d3 0900 	ldrd	r0, r9, [r3]
 801be2e:	47c8      	blx	r9
 801be30:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 801be34:	aa0f      	add	r2, sp, #60	@ 0x3c
 801be36:	4651      	mov	r1, sl
 801be38:	4640      	mov	r0, r8
 801be3a:	f007 fc4b 	bl	80236d4 <uxr_next_reliable_nack_buffer_to_send>
 801be3e:	2800      	cmp	r0, #0
 801be40:	d1f0      	bne.n	801be24 <read_submessage_list+0x158>
 801be42:	e74a      	b.n	801bcda <read_submessage_list+0xe>
 801be44:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 801be48:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801be4c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 801be50:	4628      	mov	r0, r5
 801be52:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 801be56:	4651      	mov	r1, sl
 801be58:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 801be5c:	f1a8 0804 	sub.w	r8, r8, #4
 801be60:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 801be64:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 801be68:	fa1f f888 	uxth.w	r8, r8
 801be6c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801be70:	f009 090e 	and.w	r9, r9, #14
 801be74:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 801be78:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 801be7c:	f001 fe54 	bl	801db28 <uxr_deserialize_BaseObjectRequest>
 801be80:	4650      	mov	r0, sl
 801be82:	a90f      	add	r1, sp, #60	@ 0x3c
 801be84:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801be88:	f000 fdca 	bl	801ca20 <uxr_parse_base_object_request>
 801be8c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801be8e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 801be92:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 801be96:	9110      	str	r1, [sp, #64]	@ 0x40
 801be98:	f1bb 0f00 	cmp.w	fp, #0
 801be9c:	d006      	beq.n	801beac <read_submessage_list+0x1e0>
 801be9e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801bea2:	4652      	mov	r2, sl
 801bea4:	4620      	mov	r0, r4
 801bea6:	9300      	str	r3, [sp, #0]
 801bea8:	2300      	movs	r3, #0
 801beaa:	47d8      	blx	fp
 801beac:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801beae:	b182      	cbz	r2, 801bed2 <read_submessage_list+0x206>
 801beb0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801beb2:	f04f 0c00 	mov.w	ip, #0
 801beb6:	3902      	subs	r1, #2
 801beb8:	e003      	b.n	801bec2 <read_submessage_list+0x1f6>
 801beba:	f10c 0c01 	add.w	ip, ip, #1
 801bebe:	4594      	cmp	ip, r2
 801bec0:	d007      	beq.n	801bed2 <read_submessage_list+0x206>
 801bec2:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 801bec6:	4553      	cmp	r3, sl
 801bec8:	d1f7      	bne.n	801beba <read_submessage_list+0x1ee>
 801beca:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801becc:	2200      	movs	r2, #0
 801bece:	f803 200c 	strb.w	r2, [r3, ip]
 801bed2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801bed6:	464b      	mov	r3, r9
 801bed8:	4642      	mov	r2, r8
 801beda:	4620      	mov	r0, r4
 801bedc:	9102      	str	r1, [sp, #8]
 801bede:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801bee0:	9101      	str	r1, [sp, #4]
 801bee2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801bee4:	9100      	str	r1, [sp, #0]
 801bee6:	4629      	mov	r1, r5
 801bee8:	f007 fcf0 	bl	80238cc <read_submessage_format>
 801beec:	e6f5      	b.n	801bcda <read_submessage_list+0xe>
 801beee:	4629      	mov	r1, r5
 801bef0:	4620      	mov	r0, r4
 801bef2:	f7ff fea3 	bl	801bc3c <read_submessage_info>
 801bef6:	e6f0      	b.n	801bcda <read_submessage_list+0xe>
 801bef8:	2a00      	cmp	r2, #0
 801befa:	d03e      	beq.n	801bf7a <read_submessage_list+0x2ae>
 801befc:	a910      	add	r1, sp, #64	@ 0x40
 801befe:	4628      	mov	r0, r5
 801bf00:	f002 f808 	bl	801df14 <uxr_deserialize_STATUS_Payload>
 801bf04:	a90e      	add	r1, sp, #56	@ 0x38
 801bf06:	aa0d      	add	r2, sp, #52	@ 0x34
 801bf08:	a810      	add	r0, sp, #64	@ 0x40
 801bf0a:	f000 fd89 	bl	801ca20 <uxr_parse_base_object_request>
 801bf0e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801bf10:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 801bf14:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 801bf18:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 801bf1c:	910f      	str	r1, [sp, #60]	@ 0x3c
 801bf1e:	f1ba 0f00 	cmp.w	sl, #0
 801bf22:	d006      	beq.n	801bf32 <read_submessage_list+0x266>
 801bf24:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801bf28:	4642      	mov	r2, r8
 801bf2a:	4620      	mov	r0, r4
 801bf2c:	9300      	str	r3, [sp, #0]
 801bf2e:	464b      	mov	r3, r9
 801bf30:	47d0      	blx	sl
 801bf32:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801bf34:	2a00      	cmp	r2, #0
 801bf36:	f43f aed0 	beq.w	801bcda <read_submessage_list+0xe>
 801bf3a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801bf3c:	2100      	movs	r1, #0
 801bf3e:	3802      	subs	r0, #2
 801bf40:	e003      	b.n	801bf4a <read_submessage_list+0x27e>
 801bf42:	3101      	adds	r1, #1
 801bf44:	4291      	cmp	r1, r2
 801bf46:	f43f aec8 	beq.w	801bcda <read_submessage_list+0xe>
 801bf4a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801bf4e:	4543      	cmp	r3, r8
 801bf50:	d1f7      	bne.n	801bf42 <read_submessage_list+0x276>
 801bf52:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801bf54:	f803 9001 	strb.w	r9, [r3, r1]
 801bf58:	e6bf      	b.n	801bcda <read_submessage_list+0xe>
 801bf5a:	2a00      	cmp	r2, #0
 801bf5c:	f47f aebd 	bne.w	801bcda <read_submessage_list+0xe>
 801bf60:	4629      	mov	r1, r5
 801bf62:	4620      	mov	r0, r4
 801bf64:	f000 fca0 	bl	801c8a8 <uxr_read_create_session_status>
 801bf68:	e6b7      	b.n	801bcda <read_submessage_list+0xe>
 801bf6a:	4629      	mov	r1, r5
 801bf6c:	4620      	mov	r0, r4
 801bf6e:	f7ff fcf3 	bl	801b958 <read_submessage_get_info>
 801bf72:	e6b2      	b.n	801bcda <read_submessage_list+0xe>
 801bf74:	b017      	add	sp, #92	@ 0x5c
 801bf76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf7a:	4629      	mov	r1, r5
 801bf7c:	4620      	mov	r0, r4
 801bf7e:	f000 fca1 	bl	801c8c4 <uxr_read_delete_session_status>
 801bf82:	e6aa      	b.n	801bcda <read_submessage_list+0xe>
 801bf84:	f000 fefe 	bl	801cd84 <uxr_nanos>
 801bf88:	4642      	mov	r2, r8
 801bf8a:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801bf8c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801bf8e:	fbc7 3206 	smlal	r3, r2, r7, r6
 801bf92:	1818      	adds	r0, r3, r0
 801bf94:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801bf96:	eb42 0101 	adc.w	r1, r2, r1
 801bf9a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bf9c:	4642      	mov	r2, r8
 801bf9e:	fbc7 3206 	smlal	r3, r2, r7, r6
 801bfa2:	469c      	mov	ip, r3
 801bfa4:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 801bfa8:	fbc3 7806 	smlal	r7, r8, r3, r6
 801bfac:	4643      	mov	r3, r8
 801bfae:	eb1c 0c07 	adds.w	ip, ip, r7
 801bfb2:	eb42 0203 	adc.w	r2, r2, r3
 801bfb6:	ebb0 030c 	subs.w	r3, r0, ip
 801bfba:	eb61 0202 	sbc.w	r2, r1, r2
 801bfbe:	2a00      	cmp	r2, #0
 801bfc0:	db08      	blt.n	801bfd4 <read_submessage_list+0x308>
 801bfc2:	085b      	lsrs	r3, r3, #1
 801bfc4:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 801bfc8:	1052      	asrs	r2, r2, #1
 801bfca:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 801bfce:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 801bfd2:	e6db      	b.n	801bd8c <read_submessage_list+0xc0>
 801bfd4:	3301      	adds	r3, #1
 801bfd6:	f142 0200 	adc.w	r2, r2, #0
 801bfda:	e7f2      	b.n	801bfc2 <read_submessage_list+0x2f6>
 801bfdc:	3b9aca00 	.word	0x3b9aca00

0801bfe0 <listen_message_reliably>:
 801bfe0:	1e0b      	subs	r3, r1, #0
 801bfe2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfe6:	bfb8      	it	lt
 801bfe8:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 801bfec:	b09d      	sub	sp, #116	@ 0x74
 801bfee:	4680      	mov	r8, r0
 801bff0:	9305      	str	r3, [sp, #20]
 801bff2:	f000 feab 	bl	801cd4c <uxr_millis>
 801bff6:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 801bffa:	4681      	mov	r9, r0
 801bffc:	2a00      	cmp	r2, #0
 801bffe:	f000 809a 	beq.w	801c136 <listen_message_reliably+0x156>
 801c002:	2600      	movs	r6, #0
 801c004:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c008:	f04f 3bff 	mov.w	fp, #4294967295
 801c00c:	460f      	mov	r7, r1
 801c00e:	4630      	mov	r0, r6
 801c010:	9303      	str	r3, [sp, #12]
 801c012:	e00e      	b.n	801c032 <listen_message_reliably+0x52>
 801c014:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c016:	3601      	adds	r6, #1
 801c018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c01a:	455a      	cmp	r2, fp
 801c01c:	9903      	ldr	r1, [sp, #12]
 801c01e:	b2f0      	uxtb	r0, r6
 801c020:	eb73 0101 	sbcs.w	r1, r3, r1
 801c024:	da01      	bge.n	801c02a <listen_message_reliably+0x4a>
 801c026:	4693      	mov	fp, r2
 801c028:	9303      	str	r3, [sp, #12]
 801c02a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801c02e:	4283      	cmp	r3, r0
 801c030:	d95f      	bls.n	801c0f2 <listen_message_reliably+0x112>
 801c032:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801c036:	2102      	movs	r1, #2
 801c038:	2201      	movs	r2, #1
 801c03a:	00e4      	lsls	r4, r4, #3
 801c03c:	f000 fd02 	bl	801ca44 <uxr_stream_id>
 801c040:	4601      	mov	r1, r0
 801c042:	f104 0520 	add.w	r5, r4, #32
 801c046:	463b      	mov	r3, r7
 801c048:	464a      	mov	r2, r9
 801c04a:	9109      	str	r1, [sp, #36]	@ 0x24
 801c04c:	4445      	add	r5, r8
 801c04e:	4628      	mov	r0, r5
 801c050:	f007 fb12 	bl	8023678 <uxr_update_output_stream_heartbeat_timestamp>
 801c054:	eb08 0304 	add.w	r3, r8, r4
 801c058:	2800      	cmp	r0, #0
 801c05a:	d0db      	beq.n	801c014 <listen_message_reliably+0x34>
 801c05c:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 801c060:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 801c064:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801c068:	4640      	mov	r0, r8
 801c06a:	3501      	adds	r5, #1
 801c06c:	4444      	add	r4, r8
 801c06e:	9304      	str	r3, [sp, #16]
 801c070:	f000 fcae 	bl	801c9d0 <uxr_session_header_offset>
 801c074:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801c078:	2300      	movs	r3, #0
 801c07a:	2211      	movs	r2, #17
 801c07c:	a90c      	add	r1, sp, #48	@ 0x30
 801c07e:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 801c082:	9000      	str	r0, [sp, #0]
 801c084:	4650      	mov	r0, sl
 801c086:	3601      	adds	r6, #1
 801c088:	f7ff f934 	bl	801b2f4 <ucdr_init_buffer_origin_offset>
 801c08c:	2300      	movs	r3, #0
 801c08e:	2205      	movs	r2, #5
 801c090:	210b      	movs	r1, #11
 801c092:	4650      	mov	r0, sl
 801c094:	f000 fe14 	bl	801ccc0 <uxr_buffer_submessage_header>
 801c098:	2101      	movs	r1, #1
 801c09a:	8968      	ldrh	r0, [r5, #10]
 801c09c:	f007 fce0 	bl	8023a60 <uxr_seq_num_add>
 801c0a0:	892b      	ldrh	r3, [r5, #8]
 801c0a2:	4602      	mov	r2, r0
 801c0a4:	a90a      	add	r1, sp, #40	@ 0x28
 801c0a6:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801c0aa:	4650      	mov	r0, sl
 801c0ac:	9b04      	ldr	r3, [sp, #16]
 801c0ae:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801c0b2:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801c0b6:	f001 ffe9 	bl	801e08c <uxr_serialize_HEARTBEAT_Payload>
 801c0ba:	2200      	movs	r2, #0
 801c0bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c0be:	4640      	mov	r0, r8
 801c0c0:	4611      	mov	r1, r2
 801c0c2:	f000 fc31 	bl	801c928 <uxr_stamp_session_header>
 801c0c6:	4650      	mov	r0, sl
 801c0c8:	f7ff f954 	bl	801b374 <ucdr_buffer_length>
 801c0cc:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 801c0d0:	4602      	mov	r2, r0
 801c0d2:	a90c      	add	r1, sp, #48	@ 0x30
 801c0d4:	e9d3 0500 	ldrd	r0, r5, [r3]
 801c0d8:	47a8      	blx	r5
 801c0da:	9903      	ldr	r1, [sp, #12]
 801c0dc:	b2f0      	uxtb	r0, r6
 801c0de:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 801c0e2:	455a      	cmp	r2, fp
 801c0e4:	eb73 0101 	sbcs.w	r1, r3, r1
 801c0e8:	db9d      	blt.n	801c026 <listen_message_reliably+0x46>
 801c0ea:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801c0ee:	4283      	cmp	r3, r0
 801c0f0:	d89f      	bhi.n	801c032 <listen_message_reliably+0x52>
 801c0f2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c0f6:	9a03      	ldr	r2, [sp, #12]
 801c0f8:	429a      	cmp	r2, r3
 801c0fa:	bf08      	it	eq
 801c0fc:	f1bb 3fff 	cmpeq.w	fp, #4294967295
 801c100:	d019      	beq.n	801c136 <listen_message_reliably+0x156>
 801c102:	ebab 0309 	sub.w	r3, fp, r9
 801c106:	2b00      	cmp	r3, #0
 801c108:	9d05      	ldr	r5, [sp, #20]
 801c10a:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 801c10e:	aa08      	add	r2, sp, #32
 801c110:	bf08      	it	eq
 801c112:	2301      	moveq	r3, #1
 801c114:	a907      	add	r1, sp, #28
 801c116:	6884      	ldr	r4, [r0, #8]
 801c118:	429d      	cmp	r5, r3
 801c11a:	6800      	ldr	r0, [r0, #0]
 801c11c:	bfa8      	it	ge
 801c11e:	461d      	movge	r5, r3
 801c120:	462b      	mov	r3, r5
 801c122:	47a0      	blx	r4
 801c124:	b948      	cbnz	r0, 801c13a <listen_message_reliably+0x15a>
 801c126:	9b05      	ldr	r3, [sp, #20]
 801c128:	1b5b      	subs	r3, r3, r5
 801c12a:	2b00      	cmp	r3, #0
 801c12c:	9305      	str	r3, [sp, #20]
 801c12e:	f73f af60 	bgt.w	801bff2 <listen_message_reliably+0x12>
 801c132:	4604      	mov	r4, r0
 801c134:	e012      	b.n	801c15c <listen_message_reliably+0x17c>
 801c136:	9b05      	ldr	r3, [sp, #20]
 801c138:	e7e5      	b.n	801c106 <listen_message_reliably+0x126>
 801c13a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801c13e:	4604      	mov	r4, r0
 801c140:	2500      	movs	r5, #0
 801c142:	a80c      	add	r0, sp, #48	@ 0x30
 801c144:	f7ff f8e8 	bl	801b318 <ucdr_init_buffer>
 801c148:	f10d 031a 	add.w	r3, sp, #26
 801c14c:	aa06      	add	r2, sp, #24
 801c14e:	a90c      	add	r1, sp, #48	@ 0x30
 801c150:	4640      	mov	r0, r8
 801c152:	f88d 5018 	strb.w	r5, [sp, #24]
 801c156:	f000 fbfb 	bl	801c950 <uxr_read_session_header>
 801c15a:	b918      	cbnz	r0, 801c164 <listen_message_reliably+0x184>
 801c15c:	4620      	mov	r0, r4
 801c15e:	b01d      	add	sp, #116	@ 0x74
 801c160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c164:	4629      	mov	r1, r5
 801c166:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801c16a:	f000 fc99 	bl	801caa0 <uxr_stream_id_from_raw>
 801c16e:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801c172:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 801c176:	f3c0 2507 	ubfx	r5, r0, #8, #8
 801c17a:	2e01      	cmp	r6, #1
 801c17c:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801c180:	d04b      	beq.n	801c21a <listen_message_reliably+0x23a>
 801c182:	2e02      	cmp	r6, #2
 801c184:	d00f      	beq.n	801c1a6 <listen_message_reliably+0x1c6>
 801c186:	2e00      	cmp	r6, #0
 801c188:	d1e8      	bne.n	801c15c <listen_message_reliably+0x17c>
 801c18a:	4631      	mov	r1, r6
 801c18c:	4630      	mov	r0, r6
 801c18e:	f000 fc87 	bl	801caa0 <uxr_stream_id_from_raw>
 801c192:	4602      	mov	r2, r0
 801c194:	a90c      	add	r1, sp, #48	@ 0x30
 801c196:	4640      	mov	r0, r8
 801c198:	920a      	str	r2, [sp, #40]	@ 0x28
 801c19a:	f7ff fd97 	bl	801bccc <read_submessage_list>
 801c19e:	4620      	mov	r0, r4
 801c1a0:	b01d      	add	sp, #116	@ 0x74
 801c1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1a6:	4629      	mov	r1, r5
 801c1a8:	f108 0008 	add.w	r0, r8, #8
 801c1ac:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 801c1b0:	f000 fd64 	bl	801cc7c <uxr_get_input_reliable_stream>
 801c1b4:	4607      	mov	r7, r0
 801c1b6:	b338      	cbz	r0, 801c208 <listen_message_reliably+0x228>
 801c1b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c1ba:	a80c      	add	r0, sp, #48	@ 0x30
 801c1bc:	9203      	str	r2, [sp, #12]
 801c1be:	f7ff f8dd 	bl	801b37c <ucdr_buffer_remaining>
 801c1c2:	4603      	mov	r3, r0
 801c1c4:	f10d 0019 	add.w	r0, sp, #25
 801c1c8:	9a03      	ldr	r2, [sp, #12]
 801c1ca:	4651      	mov	r1, sl
 801c1cc:	9000      	str	r0, [sp, #0]
 801c1ce:	4638      	mov	r0, r7
 801c1d0:	f006 fe5e 	bl	8022e90 <uxr_receive_reliable_message>
 801c1d4:	b1c0      	cbz	r0, 801c208 <listen_message_reliably+0x228>
 801c1d6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801c1da:	b393      	cbz	r3, 801c242 <listen_message_reliably+0x262>
 801c1dc:	ae14      	add	r6, sp, #80	@ 0x50
 801c1de:	f04f 0a02 	mov.w	sl, #2
 801c1e2:	e00a      	b.n	801c1fa <listen_message_reliably+0x21a>
 801c1e4:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 801c1e8:	4631      	mov	r1, r6
 801c1ea:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 801c1ee:	4640      	mov	r0, r8
 801c1f0:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 801c1f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c1f6:	f7ff fd69 	bl	801bccc <read_submessage_list>
 801c1fa:	2204      	movs	r2, #4
 801c1fc:	4631      	mov	r1, r6
 801c1fe:	4638      	mov	r0, r7
 801c200:	f006 fec8 	bl	8022f94 <uxr_next_input_reliable_buffer_available>
 801c204:	2800      	cmp	r0, #0
 801c206:	d1ed      	bne.n	801c1e4 <listen_message_reliably+0x204>
 801c208:	4640      	mov	r0, r8
 801c20a:	462a      	mov	r2, r5
 801c20c:	4649      	mov	r1, r9
 801c20e:	f7ff fbd9 	bl	801b9c4 <write_submessage_acknack.isra.0>
 801c212:	4620      	mov	r0, r4
 801c214:	b01d      	add	sp, #116	@ 0x74
 801c216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c21a:	4629      	mov	r1, r5
 801c21c:	f108 0008 	add.w	r0, r8, #8
 801c220:	f000 fd22 	bl	801cc68 <uxr_get_input_best_effort_stream>
 801c224:	2800      	cmp	r0, #0
 801c226:	d099      	beq.n	801c15c <listen_message_reliably+0x17c>
 801c228:	4651      	mov	r1, sl
 801c22a:	f006 fda7 	bl	8022d7c <uxr_receive_best_effort_message>
 801c22e:	2800      	cmp	r0, #0
 801c230:	d094      	beq.n	801c15c <listen_message_reliably+0x17c>
 801c232:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801c236:	a90c      	add	r1, sp, #48	@ 0x30
 801c238:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c23a:	4640      	mov	r0, r8
 801c23c:	f7ff fd46 	bl	801bccc <read_submessage_list>
 801c240:	e78c      	b.n	801c15c <listen_message_reliably+0x17c>
 801c242:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801c246:	a90c      	add	r1, sp, #48	@ 0x30
 801c248:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c24a:	4640      	mov	r0, r8
 801c24c:	f7ff fd3e 	bl	801bccc <read_submessage_list>
 801c250:	e7c4      	b.n	801c1dc <listen_message_reliably+0x1fc>
 801c252:	bf00      	nop

0801c254 <uxr_run_session_timeout>:
 801c254:	b570      	push	{r4, r5, r6, lr}
 801c256:	4604      	mov	r4, r0
 801c258:	460d      	mov	r5, r1
 801c25a:	f000 fd77 	bl	801cd4c <uxr_millis>
 801c25e:	4606      	mov	r6, r0
 801c260:	4620      	mov	r0, r4
 801c262:	f7ff fc77 	bl	801bb54 <uxr_flash_output_streams>
 801c266:	4629      	mov	r1, r5
 801c268:	4620      	mov	r0, r4
 801c26a:	f7ff feb9 	bl	801bfe0 <listen_message_reliably>
 801c26e:	f000 fd6d 	bl	801cd4c <uxr_millis>
 801c272:	1b83      	subs	r3, r0, r6
 801c274:	1ae9      	subs	r1, r5, r3
 801c276:	2900      	cmp	r1, #0
 801c278:	dcf6      	bgt.n	801c268 <uxr_run_session_timeout+0x14>
 801c27a:	f104 0008 	add.w	r0, r4, #8
 801c27e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c282:	f000 bd07 	b.w	801cc94 <uxr_output_streams_confirmed>
 801c286:	bf00      	nop

0801c288 <uxr_run_session_until_data>:
 801c288:	b570      	push	{r4, r5, r6, lr}
 801c28a:	4604      	mov	r4, r0
 801c28c:	460d      	mov	r5, r1
 801c28e:	f000 fd5d 	bl	801cd4c <uxr_millis>
 801c292:	4606      	mov	r6, r0
 801c294:	4620      	mov	r0, r4
 801c296:	f7ff fc5d 	bl	801bb54 <uxr_flash_output_streams>
 801c29a:	2300      	movs	r3, #0
 801c29c:	4629      	mov	r1, r5
 801c29e:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 801c2a2:	e005      	b.n	801c2b0 <uxr_run_session_until_data+0x28>
 801c2a4:	f000 fd52 	bl	801cd4c <uxr_millis>
 801c2a8:	1b83      	subs	r3, r0, r6
 801c2aa:	1ae9      	subs	r1, r5, r3
 801c2ac:	2900      	cmp	r1, #0
 801c2ae:	dd07      	ble.n	801c2c0 <uxr_run_session_until_data+0x38>
 801c2b0:	4620      	mov	r0, r4
 801c2b2:	f7ff fe95 	bl	801bfe0 <listen_message_reliably>
 801c2b6:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801c2ba:	2800      	cmp	r0, #0
 801c2bc:	d0f2      	beq.n	801c2a4 <uxr_run_session_until_data+0x1c>
 801c2be:	bd70      	pop	{r4, r5, r6, pc}
 801c2c0:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801c2c4:	bd70      	pop	{r4, r5, r6, pc}
 801c2c6:	bf00      	nop

0801c2c8 <uxr_run_session_until_confirm_delivery>:
 801c2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c2cc:	4606      	mov	r6, r0
 801c2ce:	460d      	mov	r5, r1
 801c2d0:	f000 fd3c 	bl	801cd4c <uxr_millis>
 801c2d4:	4607      	mov	r7, r0
 801c2d6:	4630      	mov	r0, r6
 801c2d8:	f106 0808 	add.w	r8, r6, #8
 801c2dc:	f7ff fc3a 	bl	801bb54 <uxr_flash_output_streams>
 801c2e0:	2d00      	cmp	r5, #0
 801c2e2:	db10      	blt.n	801c306 <uxr_run_session_until_confirm_delivery+0x3e>
 801c2e4:	462c      	mov	r4, r5
 801c2e6:	e006      	b.n	801c2f6 <uxr_run_session_until_confirm_delivery+0x2e>
 801c2e8:	f7ff fe7a 	bl	801bfe0 <listen_message_reliably>
 801c2ec:	f000 fd2e 	bl	801cd4c <uxr_millis>
 801c2f0:	1bc3      	subs	r3, r0, r7
 801c2f2:	1aec      	subs	r4, r5, r3
 801c2f4:	d407      	bmi.n	801c306 <uxr_run_session_until_confirm_delivery+0x3e>
 801c2f6:	4640      	mov	r0, r8
 801c2f8:	f000 fccc 	bl	801cc94 <uxr_output_streams_confirmed>
 801c2fc:	4603      	mov	r3, r0
 801c2fe:	4621      	mov	r1, r4
 801c300:	4630      	mov	r0, r6
 801c302:	2b00      	cmp	r3, #0
 801c304:	d0f0      	beq.n	801c2e8 <uxr_run_session_until_confirm_delivery+0x20>
 801c306:	4640      	mov	r0, r8
 801c308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c30c:	f000 bcc2 	b.w	801cc94 <uxr_output_streams_confirmed>

0801c310 <uxr_run_session_until_all_status>:
 801c310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c314:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 801c318:	4606      	mov	r6, r0
 801c31a:	4688      	mov	r8, r1
 801c31c:	4692      	mov	sl, r2
 801c31e:	461f      	mov	r7, r3
 801c320:	f7ff fc18 	bl	801bb54 <uxr_flash_output_streams>
 801c324:	f1bb 0f00 	cmp.w	fp, #0
 801c328:	d004      	beq.n	801c334 <uxr_run_session_until_all_status+0x24>
 801c32a:	465a      	mov	r2, fp
 801c32c:	21ff      	movs	r1, #255	@ 0xff
 801c32e:	4638      	mov	r0, r7
 801c330:	f009 fa50 	bl	80257d4 <memset>
 801c334:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 801c338:	1e7d      	subs	r5, r7, #1
 801c33a:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 801c33e:	f000 fd05 	bl	801cd4c <uxr_millis>
 801c342:	4641      	mov	r1, r8
 801c344:	4681      	mov	r9, r0
 801c346:	4630      	mov	r0, r6
 801c348:	f7ff fe4a 	bl	801bfe0 <listen_message_reliably>
 801c34c:	f000 fcfe 	bl	801cd4c <uxr_millis>
 801c350:	eba0 0009 	sub.w	r0, r0, r9
 801c354:	eba8 0100 	sub.w	r1, r8, r0
 801c358:	f1bb 0f00 	cmp.w	fp, #0
 801c35c:	d029      	beq.n	801c3b2 <uxr_run_session_until_all_status+0xa2>
 801c35e:	46ae      	mov	lr, r5
 801c360:	f04f 0c00 	mov.w	ip, #0
 801c364:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 801c368:	2cff      	cmp	r4, #255	@ 0xff
 801c36a:	d015      	beq.n	801c398 <uxr_run_session_until_all_status+0x88>
 801c36c:	f10c 0c01 	add.w	ip, ip, #1
 801c370:	45e3      	cmp	fp, ip
 801c372:	d8f7      	bhi.n	801c364 <uxr_run_session_until_all_status+0x54>
 801c374:	2300      	movs	r3, #0
 801c376:	67f3      	str	r3, [r6, #124]	@ 0x7c
 801c378:	e000      	b.n	801c37c <uxr_run_session_until_all_status+0x6c>
 801c37a:	b158      	cbz	r0, 801c394 <uxr_run_session_until_all_status+0x84>
 801c37c:	462b      	mov	r3, r5
 801c37e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 801c382:	3302      	adds	r3, #2
 801c384:	2801      	cmp	r0, #1
 801c386:	eba3 0307 	sub.w	r3, r3, r7
 801c38a:	bf8c      	ite	hi
 801c38c:	2000      	movhi	r0, #0
 801c38e:	2001      	movls	r0, #1
 801c390:	459b      	cmp	fp, r3
 801c392:	d8f2      	bhi.n	801c37a <uxr_run_session_until_all_status+0x6a>
 801c394:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c398:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 801c39c:	f10c 0c01 	add.w	ip, ip, #1
 801c3a0:	45dc      	cmp	ip, fp
 801c3a2:	d201      	bcs.n	801c3a8 <uxr_run_session_until_all_status+0x98>
 801c3a4:	2b00      	cmp	r3, #0
 801c3a6:	d0dd      	beq.n	801c364 <uxr_run_session_until_all_status+0x54>
 801c3a8:	2900      	cmp	r1, #0
 801c3aa:	dde3      	ble.n	801c374 <uxr_run_session_until_all_status+0x64>
 801c3ac:	2b00      	cmp	r3, #0
 801c3ae:	d1ca      	bne.n	801c346 <uxr_run_session_until_all_status+0x36>
 801c3b0:	e7e0      	b.n	801c374 <uxr_run_session_until_all_status+0x64>
 801c3b2:	2001      	movs	r0, #1
 801c3b4:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 801c3b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c3bc <wait_session_status>:
 801c3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3c0:	4604      	mov	r4, r0
 801c3c2:	b09d      	sub	sp, #116	@ 0x74
 801c3c4:	20ff      	movs	r0, #255	@ 0xff
 801c3c6:	9303      	str	r3, [sp, #12]
 801c3c8:	7160      	strb	r0, [r4, #5]
 801c3ca:	2b00      	cmp	r3, #0
 801c3cc:	f000 80b6 	beq.w	801c53c <wait_session_status+0x180>
 801c3d0:	4689      	mov	r9, r1
 801c3d2:	4692      	mov	sl, r2
 801c3d4:	f04f 0b00 	mov.w	fp, #0
 801c3d8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801c3da:	4652      	mov	r2, sl
 801c3dc:	4649      	mov	r1, r9
 801c3de:	e9d3 0500 	ldrd	r0, r5, [r3]
 801c3e2:	47a8      	blx	r5
 801c3e4:	f000 fcb2 	bl	801cd4c <uxr_millis>
 801c3e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801c3ec:	4605      	mov	r5, r0
 801c3ee:	e009      	b.n	801c404 <wait_session_status+0x48>
 801c3f0:	f000 fcac 	bl	801cd4c <uxr_millis>
 801c3f4:	1b40      	subs	r0, r0, r5
 801c3f6:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801c3fa:	2b00      	cmp	r3, #0
 801c3fc:	dd40      	ble.n	801c480 <wait_session_status+0xc4>
 801c3fe:	7960      	ldrb	r0, [r4, #5]
 801c400:	28ff      	cmp	r0, #255	@ 0xff
 801c402:	d145      	bne.n	801c490 <wait_session_status+0xd4>
 801c404:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801c406:	a908      	add	r1, sp, #32
 801c408:	6896      	ldr	r6, [r2, #8]
 801c40a:	6810      	ldr	r0, [r2, #0]
 801c40c:	aa09      	add	r2, sp, #36	@ 0x24
 801c40e:	47b0      	blx	r6
 801c410:	2800      	cmp	r0, #0
 801c412:	d0ed      	beq.n	801c3f0 <wait_session_status+0x34>
 801c414:	a80c      	add	r0, sp, #48	@ 0x30
 801c416:	2600      	movs	r6, #0
 801c418:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801c41c:	f7fe ff7c 	bl	801b318 <ucdr_init_buffer>
 801c420:	f10d 031e 	add.w	r3, sp, #30
 801c424:	aa07      	add	r2, sp, #28
 801c426:	a90c      	add	r1, sp, #48	@ 0x30
 801c428:	4620      	mov	r0, r4
 801c42a:	f88d 601c 	strb.w	r6, [sp, #28]
 801c42e:	f000 fa8f 	bl	801c950 <uxr_read_session_header>
 801c432:	2800      	cmp	r0, #0
 801c434:	d0dc      	beq.n	801c3f0 <wait_session_status+0x34>
 801c436:	4631      	mov	r1, r6
 801c438:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801c43c:	f000 fb30 	bl	801caa0 <uxr_stream_id_from_raw>
 801c440:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801c444:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801c448:	f3c0 2607 	ubfx	r6, r0, #8, #8
 801c44c:	2f01      	cmp	r7, #1
 801c44e:	9302      	str	r3, [sp, #8]
 801c450:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 801c454:	d05c      	beq.n	801c510 <wait_session_status+0x154>
 801c456:	2f02      	cmp	r7, #2
 801c458:	d020      	beq.n	801c49c <wait_session_status+0xe0>
 801c45a:	2f00      	cmp	r7, #0
 801c45c:	d1c8      	bne.n	801c3f0 <wait_session_status+0x34>
 801c45e:	4639      	mov	r1, r7
 801c460:	4638      	mov	r0, r7
 801c462:	f000 fb1d 	bl	801caa0 <uxr_stream_id_from_raw>
 801c466:	a90c      	add	r1, sp, #48	@ 0x30
 801c468:	4602      	mov	r2, r0
 801c46a:	900b      	str	r0, [sp, #44]	@ 0x2c
 801c46c:	4620      	mov	r0, r4
 801c46e:	f7ff fc2d 	bl	801bccc <read_submessage_list>
 801c472:	f000 fc6b 	bl	801cd4c <uxr_millis>
 801c476:	1b40      	subs	r0, r0, r5
 801c478:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801c47c:	2b00      	cmp	r3, #0
 801c47e:	dcbe      	bgt.n	801c3fe <wait_session_status+0x42>
 801c480:	f10b 0b01 	add.w	fp, fp, #1
 801c484:	9b03      	ldr	r3, [sp, #12]
 801c486:	7960      	ldrb	r0, [r4, #5]
 801c488:	455b      	cmp	r3, fp
 801c48a:	d001      	beq.n	801c490 <wait_session_status+0xd4>
 801c48c:	28ff      	cmp	r0, #255	@ 0xff
 801c48e:	d0a3      	beq.n	801c3d8 <wait_session_status+0x1c>
 801c490:	38ff      	subs	r0, #255	@ 0xff
 801c492:	bf18      	it	ne
 801c494:	2001      	movne	r0, #1
 801c496:	b01d      	add	sp, #116	@ 0x74
 801c498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c49c:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 801c4a0:	4631      	mov	r1, r6
 801c4a2:	f104 0008 	add.w	r0, r4, #8
 801c4a6:	9304      	str	r3, [sp, #16]
 801c4a8:	f000 fbe8 	bl	801cc7c <uxr_get_input_reliable_stream>
 801c4ac:	4680      	mov	r8, r0
 801c4ae:	b348      	cbz	r0, 801c504 <wait_session_status+0x148>
 801c4b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c4b2:	a80c      	add	r0, sp, #48	@ 0x30
 801c4b4:	9205      	str	r2, [sp, #20]
 801c4b6:	f7fe ff61 	bl	801b37c <ucdr_buffer_remaining>
 801c4ba:	4603      	mov	r3, r0
 801c4bc:	f10d 001d 	add.w	r0, sp, #29
 801c4c0:	9a05      	ldr	r2, [sp, #20]
 801c4c2:	9000      	str	r0, [sp, #0]
 801c4c4:	4640      	mov	r0, r8
 801c4c6:	9902      	ldr	r1, [sp, #8]
 801c4c8:	f006 fce2 	bl	8022e90 <uxr_receive_reliable_message>
 801c4cc:	b1d0      	cbz	r0, 801c504 <wait_session_status+0x148>
 801c4ce:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801c4d2:	2b00      	cmp	r3, #0
 801c4d4:	d03a      	beq.n	801c54c <wait_session_status+0x190>
 801c4d6:	9f04      	ldr	r7, [sp, #16]
 801c4d8:	e00a      	b.n	801c4f0 <wait_session_status+0x134>
 801c4da:	f04f 0302 	mov.w	r3, #2
 801c4de:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 801c4e2:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801c4e6:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 801c4ea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c4ec:	f7ff fbee 	bl	801bccc <read_submessage_list>
 801c4f0:	a914      	add	r1, sp, #80	@ 0x50
 801c4f2:	2204      	movs	r2, #4
 801c4f4:	4640      	mov	r0, r8
 801c4f6:	f006 fd4d 	bl	8022f94 <uxr_next_input_reliable_buffer_available>
 801c4fa:	4603      	mov	r3, r0
 801c4fc:	a914      	add	r1, sp, #80	@ 0x50
 801c4fe:	4620      	mov	r0, r4
 801c500:	2b00      	cmp	r3, #0
 801c502:	d1ea      	bne.n	801c4da <wait_session_status+0x11e>
 801c504:	4632      	mov	r2, r6
 801c506:	9904      	ldr	r1, [sp, #16]
 801c508:	4620      	mov	r0, r4
 801c50a:	f7ff fa5b 	bl	801b9c4 <write_submessage_acknack.isra.0>
 801c50e:	e76f      	b.n	801c3f0 <wait_session_status+0x34>
 801c510:	4631      	mov	r1, r6
 801c512:	f104 0008 	add.w	r0, r4, #8
 801c516:	f000 fba7 	bl	801cc68 <uxr_get_input_best_effort_stream>
 801c51a:	2800      	cmp	r0, #0
 801c51c:	f43f af68 	beq.w	801c3f0 <wait_session_status+0x34>
 801c520:	9902      	ldr	r1, [sp, #8]
 801c522:	f006 fc2b 	bl	8022d7c <uxr_receive_best_effort_message>
 801c526:	2800      	cmp	r0, #0
 801c528:	f43f af62 	beq.w	801c3f0 <wait_session_status+0x34>
 801c52c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801c530:	a90c      	add	r1, sp, #48	@ 0x30
 801c532:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c534:	4620      	mov	r0, r4
 801c536:	f7ff fbc9 	bl	801bccc <read_submessage_list>
 801c53a:	e759      	b.n	801c3f0 <wait_session_status+0x34>
 801c53c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801c53e:	e9d3 0400 	ldrd	r0, r4, [r3]
 801c542:	47a0      	blx	r4
 801c544:	2001      	movs	r0, #1
 801c546:	b01d      	add	sp, #116	@ 0x74
 801c548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c54c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801c550:	a90c      	add	r1, sp, #48	@ 0x30
 801c552:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c554:	4620      	mov	r0, r4
 801c556:	f7ff fbb9 	bl	801bccc <read_submessage_list>
 801c55a:	e7bc      	b.n	801c4d6 <wait_session_status+0x11a>

0801c55c <uxr_delete_session_retries>:
 801c55c:	b530      	push	{r4, r5, lr}
 801c55e:	b08f      	sub	sp, #60	@ 0x3c
 801c560:	4604      	mov	r4, r0
 801c562:	460d      	mov	r5, r1
 801c564:	f000 fa34 	bl	801c9d0 <uxr_session_header_offset>
 801c568:	2300      	movs	r3, #0
 801c56a:	2210      	movs	r2, #16
 801c56c:	a902      	add	r1, sp, #8
 801c56e:	9000      	str	r0, [sp, #0]
 801c570:	a806      	add	r0, sp, #24
 801c572:	f7fe febf 	bl	801b2f4 <ucdr_init_buffer_origin_offset>
 801c576:	a906      	add	r1, sp, #24
 801c578:	4620      	mov	r0, r4
 801c57a:	f000 f979 	bl	801c870 <uxr_buffer_delete_session>
 801c57e:	2200      	movs	r2, #0
 801c580:	9b06      	ldr	r3, [sp, #24]
 801c582:	4620      	mov	r0, r4
 801c584:	4611      	mov	r1, r2
 801c586:	f000 f9cf 	bl	801c928 <uxr_stamp_session_header>
 801c58a:	a806      	add	r0, sp, #24
 801c58c:	f7fe fef2 	bl	801b374 <ucdr_buffer_length>
 801c590:	462b      	mov	r3, r5
 801c592:	4602      	mov	r2, r0
 801c594:	a902      	add	r1, sp, #8
 801c596:	4620      	mov	r0, r4
 801c598:	f7ff ff10 	bl	801c3bc <wait_session_status>
 801c59c:	b118      	cbz	r0, 801c5a6 <uxr_delete_session_retries+0x4a>
 801c59e:	7960      	ldrb	r0, [r4, #5]
 801c5a0:	fab0 f080 	clz	r0, r0
 801c5a4:	0940      	lsrs	r0, r0, #5
 801c5a6:	b00f      	add	sp, #60	@ 0x3c
 801c5a8:	bd30      	pop	{r4, r5, pc}
 801c5aa:	bf00      	nop

0801c5ac <uxr_create_session>:
 801c5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5b0:	f100 0b08 	add.w	fp, r0, #8
 801c5b4:	4604      	mov	r4, r0
 801c5b6:	b0ab      	sub	sp, #172	@ 0xac
 801c5b8:	4658      	mov	r0, fp
 801c5ba:	465e      	mov	r6, fp
 801c5bc:	f000 faa6 	bl	801cb0c <uxr_reset_stream_storage>
 801c5c0:	4620      	mov	r0, r4
 801c5c2:	f000 fa05 	bl	801c9d0 <uxr_session_header_offset>
 801c5c6:	2300      	movs	r3, #0
 801c5c8:	221c      	movs	r2, #28
 801c5ca:	a90b      	add	r1, sp, #44	@ 0x2c
 801c5cc:	9000      	str	r0, [sp, #0]
 801c5ce:	a812      	add	r0, sp, #72	@ 0x48
 801c5d0:	f7fe fe90 	bl	801b2f4 <ucdr_init_buffer_origin_offset>
 801c5d4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801c5d6:	a912      	add	r1, sp, #72	@ 0x48
 801c5d8:	4620      	mov	r0, r4
 801c5da:	8a1a      	ldrh	r2, [r3, #16]
 801c5dc:	3a04      	subs	r2, #4
 801c5de:	b292      	uxth	r2, r2
 801c5e0:	f000 f91c 	bl	801c81c <uxr_buffer_create_session>
 801c5e4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801c5e6:	4620      	mov	r0, r4
 801c5e8:	f000 f98a 	bl	801c900 <uxr_stamp_create_session_header>
 801c5ec:	a812      	add	r0, sp, #72	@ 0x48
 801c5ee:	f7fe fec1 	bl	801b374 <ucdr_buffer_length>
 801c5f2:	23ff      	movs	r3, #255	@ 0xff
 801c5f4:	4681      	mov	r9, r0
 801c5f6:	7163      	strb	r3, [r4, #5]
 801c5f8:	230a      	movs	r3, #10
 801c5fa:	9303      	str	r3, [sp, #12]
 801c5fc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801c5fe:	464a      	mov	r2, r9
 801c600:	a90b      	add	r1, sp, #44	@ 0x2c
 801c602:	e9d3 0500 	ldrd	r0, r5, [r3]
 801c606:	47a8      	blx	r5
 801c608:	f000 fba0 	bl	801cd4c <uxr_millis>
 801c60c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801c610:	4605      	mov	r5, r0
 801c612:	e009      	b.n	801c628 <uxr_create_session+0x7c>
 801c614:	f000 fb9a 	bl	801cd4c <uxr_millis>
 801c618:	1b40      	subs	r0, r0, r5
 801c61a:	7962      	ldrb	r2, [r4, #5]
 801c61c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801c620:	2b00      	cmp	r3, #0
 801c622:	dd38      	ble.n	801c696 <uxr_create_session+0xea>
 801c624:	2aff      	cmp	r2, #255	@ 0xff
 801c626:	d13c      	bne.n	801c6a2 <uxr_create_session+0xf6>
 801c628:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801c62a:	a907      	add	r1, sp, #28
 801c62c:	6897      	ldr	r7, [r2, #8]
 801c62e:	6810      	ldr	r0, [r2, #0]
 801c630:	aa08      	add	r2, sp, #32
 801c632:	47b8      	blx	r7
 801c634:	2800      	cmp	r0, #0
 801c636:	d0ed      	beq.n	801c614 <uxr_create_session+0x68>
 801c638:	a81a      	add	r0, sp, #104	@ 0x68
 801c63a:	2700      	movs	r7, #0
 801c63c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801c640:	f7fe fe6a 	bl	801b318 <ucdr_init_buffer>
 801c644:	f10d 031a 	add.w	r3, sp, #26
 801c648:	aa06      	add	r2, sp, #24
 801c64a:	a91a      	add	r1, sp, #104	@ 0x68
 801c64c:	4620      	mov	r0, r4
 801c64e:	f88d 7018 	strb.w	r7, [sp, #24]
 801c652:	f000 f97d 	bl	801c950 <uxr_read_session_header>
 801c656:	2800      	cmp	r0, #0
 801c658:	d0dc      	beq.n	801c614 <uxr_create_session+0x68>
 801c65a:	4639      	mov	r1, r7
 801c65c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801c660:	f000 fa1e 	bl	801caa0 <uxr_stream_id_from_raw>
 801c664:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801c668:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 801c66c:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801c670:	2f01      	cmp	r7, #1
 801c672:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801c676:	d053      	beq.n	801c720 <uxr_create_session+0x174>
 801c678:	2f02      	cmp	r7, #2
 801c67a:	d018      	beq.n	801c6ae <uxr_create_session+0x102>
 801c67c:	2f00      	cmp	r7, #0
 801c67e:	d1c9      	bne.n	801c614 <uxr_create_session+0x68>
 801c680:	4639      	mov	r1, r7
 801c682:	4638      	mov	r0, r7
 801c684:	f000 fa0c 	bl	801caa0 <uxr_stream_id_from_raw>
 801c688:	a91a      	add	r1, sp, #104	@ 0x68
 801c68a:	4602      	mov	r2, r0
 801c68c:	900a      	str	r0, [sp, #40]	@ 0x28
 801c68e:	4620      	mov	r0, r4
 801c690:	f7ff fb1c 	bl	801bccc <read_submessage_list>
 801c694:	e7be      	b.n	801c614 <uxr_create_session+0x68>
 801c696:	9b03      	ldr	r3, [sp, #12]
 801c698:	3b01      	subs	r3, #1
 801c69a:	9303      	str	r3, [sp, #12]
 801c69c:	d001      	beq.n	801c6a2 <uxr_create_session+0xf6>
 801c69e:	2aff      	cmp	r2, #255	@ 0xff
 801c6a0:	d0ac      	beq.n	801c5fc <uxr_create_session+0x50>
 801c6a2:	2a00      	cmp	r2, #0
 801c6a4:	d051      	beq.n	801c74a <uxr_create_session+0x19e>
 801c6a6:	2000      	movs	r0, #0
 801c6a8:	b02b      	add	sp, #172	@ 0xac
 801c6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6ae:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801c6b2:	4641      	mov	r1, r8
 801c6b4:	4630      	mov	r0, r6
 801c6b6:	9304      	str	r3, [sp, #16]
 801c6b8:	f000 fae0 	bl	801cc7c <uxr_get_input_reliable_stream>
 801c6bc:	4682      	mov	sl, r0
 801c6be:	b348      	cbz	r0, 801c714 <uxr_create_session+0x168>
 801c6c0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801c6c2:	a81a      	add	r0, sp, #104	@ 0x68
 801c6c4:	9205      	str	r2, [sp, #20]
 801c6c6:	f7fe fe59 	bl	801b37c <ucdr_buffer_remaining>
 801c6ca:	4603      	mov	r3, r0
 801c6cc:	f10d 0019 	add.w	r0, sp, #25
 801c6d0:	9a05      	ldr	r2, [sp, #20]
 801c6d2:	4659      	mov	r1, fp
 801c6d4:	9000      	str	r0, [sp, #0]
 801c6d6:	4650      	mov	r0, sl
 801c6d8:	f006 fbda 	bl	8022e90 <uxr_receive_reliable_message>
 801c6dc:	b1d0      	cbz	r0, 801c714 <uxr_create_session+0x168>
 801c6de:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801c6e2:	2b00      	cmp	r3, #0
 801c6e4:	d038      	beq.n	801c758 <uxr_create_session+0x1ac>
 801c6e6:	9f04      	ldr	r7, [sp, #16]
 801c6e8:	e00a      	b.n	801c700 <uxr_create_session+0x154>
 801c6ea:	f04f 0302 	mov.w	r3, #2
 801c6ee:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 801c6f2:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 801c6f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c6fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c6fc:	f7ff fae6 	bl	801bccc <read_submessage_list>
 801c700:	a922      	add	r1, sp, #136	@ 0x88
 801c702:	2204      	movs	r2, #4
 801c704:	4650      	mov	r0, sl
 801c706:	f006 fc45 	bl	8022f94 <uxr_next_input_reliable_buffer_available>
 801c70a:	4603      	mov	r3, r0
 801c70c:	a922      	add	r1, sp, #136	@ 0x88
 801c70e:	4620      	mov	r0, r4
 801c710:	2b00      	cmp	r3, #0
 801c712:	d1ea      	bne.n	801c6ea <uxr_create_session+0x13e>
 801c714:	4642      	mov	r2, r8
 801c716:	9904      	ldr	r1, [sp, #16]
 801c718:	4620      	mov	r0, r4
 801c71a:	f7ff f953 	bl	801b9c4 <write_submessage_acknack.isra.0>
 801c71e:	e779      	b.n	801c614 <uxr_create_session+0x68>
 801c720:	4641      	mov	r1, r8
 801c722:	4630      	mov	r0, r6
 801c724:	f000 faa0 	bl	801cc68 <uxr_get_input_best_effort_stream>
 801c728:	2800      	cmp	r0, #0
 801c72a:	f43f af73 	beq.w	801c614 <uxr_create_session+0x68>
 801c72e:	4659      	mov	r1, fp
 801c730:	f006 fb24 	bl	8022d7c <uxr_receive_best_effort_message>
 801c734:	2800      	cmp	r0, #0
 801c736:	f43f af6d 	beq.w	801c614 <uxr_create_session+0x68>
 801c73a:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 801c73e:	a91a      	add	r1, sp, #104	@ 0x68
 801c740:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c742:	4620      	mov	r0, r4
 801c744:	f7ff fac2 	bl	801bccc <read_submessage_list>
 801c748:	e764      	b.n	801c614 <uxr_create_session+0x68>
 801c74a:	4630      	mov	r0, r6
 801c74c:	f000 f9de 	bl	801cb0c <uxr_reset_stream_storage>
 801c750:	2001      	movs	r0, #1
 801c752:	b02b      	add	sp, #172	@ 0xac
 801c754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c758:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 801c75c:	a91a      	add	r1, sp, #104	@ 0x68
 801c75e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c760:	4620      	mov	r0, r4
 801c762:	f7ff fab3 	bl	801bccc <read_submessage_list>
 801c766:	e7be      	b.n	801c6e6 <uxr_create_session+0x13a>

0801c768 <uxr_prepare_stream_to_write_submessage>:
 801c768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c76c:	b082      	sub	sp, #8
 801c76e:	4604      	mov	r4, r0
 801c770:	4610      	mov	r0, r2
 801c772:	4615      	mov	r5, r2
 801c774:	461e      	mov	r6, r3
 801c776:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 801c77a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 801c77e:	f105 0904 	add.w	r9, r5, #4
 801c782:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801c786:	9101      	str	r1, [sp, #4]
 801c788:	f000 fada 	bl	801cd40 <uxr_submessage_padding>
 801c78c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801c790:	4481      	add	r9, r0
 801c792:	2b01      	cmp	r3, #1
 801c794:	d01d      	beq.n	801c7d2 <uxr_prepare_stream_to_write_submessage+0x6a>
 801c796:	2b02      	cmp	r3, #2
 801c798:	d116      	bne.n	801c7c8 <uxr_prepare_stream_to_write_submessage+0x60>
 801c79a:	f104 0008 	add.w	r0, r4, #8
 801c79e:	4651      	mov	r1, sl
 801c7a0:	f000 fa56 	bl	801cc50 <uxr_get_output_reliable_stream>
 801c7a4:	4604      	mov	r4, r0
 801c7a6:	b158      	cbz	r0, 801c7c0 <uxr_prepare_stream_to_write_submessage+0x58>
 801c7a8:	4649      	mov	r1, r9
 801c7aa:	4632      	mov	r2, r6
 801c7ac:	f006 fdb6 	bl	802331c <uxr_prepare_reliable_buffer_to_write>
 801c7b0:	4604      	mov	r4, r0
 801c7b2:	b12c      	cbz	r4, 801c7c0 <uxr_prepare_stream_to_write_submessage+0x58>
 801c7b4:	4643      	mov	r3, r8
 801c7b6:	b2aa      	uxth	r2, r5
 801c7b8:	4639      	mov	r1, r7
 801c7ba:	4630      	mov	r0, r6
 801c7bc:	f000 fa80 	bl	801ccc0 <uxr_buffer_submessage_header>
 801c7c0:	4620      	mov	r0, r4
 801c7c2:	b002      	add	sp, #8
 801c7c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c7c8:	2400      	movs	r4, #0
 801c7ca:	4620      	mov	r0, r4
 801c7cc:	b002      	add	sp, #8
 801c7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c7d2:	f104 0008 	add.w	r0, r4, #8
 801c7d6:	4651      	mov	r1, sl
 801c7d8:	f000 fa32 	bl	801cc40 <uxr_get_output_best_effort_stream>
 801c7dc:	4604      	mov	r4, r0
 801c7de:	2800      	cmp	r0, #0
 801c7e0:	d0ee      	beq.n	801c7c0 <uxr_prepare_stream_to_write_submessage+0x58>
 801c7e2:	4649      	mov	r1, r9
 801c7e4:	4632      	mov	r2, r6
 801c7e6:	f006 fcc5 	bl	8023174 <uxr_prepare_best_effort_buffer_to_write>
 801c7ea:	4604      	mov	r4, r0
 801c7ec:	e7e1      	b.n	801c7b2 <uxr_prepare_stream_to_write_submessage+0x4a>
 801c7ee:	bf00      	nop

0801c7f0 <uxr_init_session_info>:
 801c7f0:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801c7f4:	23ff      	movs	r3, #255	@ 0xff
 801c7f6:	7102      	strb	r2, [r0, #4]
 801c7f8:	f880 c001 	strb.w	ip, [r0, #1]
 801c7fc:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801c800:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801c804:	7001      	strb	r1, [r0, #0]
 801c806:	f880 c002 	strb.w	ip, [r0, #2]
 801c80a:	7143      	strb	r3, [r0, #5]
 801c80c:	70c2      	strb	r2, [r0, #3]
 801c80e:	b500      	push	{lr}
 801c810:	f04f 0e09 	mov.w	lr, #9
 801c814:	f8a0 e006 	strh.w	lr, [r0, #6]
 801c818:	f85d fb04 	ldr.w	pc, [sp], #4

0801c81c <uxr_buffer_create_session>:
 801c81c:	b530      	push	{r4, r5, lr}
 801c81e:	2300      	movs	r3, #0
 801c820:	b089      	sub	sp, #36	@ 0x24
 801c822:	4d12      	ldr	r5, [pc, #72]	@ (801c86c <uxr_buffer_create_session+0x50>)
 801c824:	460c      	mov	r4, r1
 801c826:	9307      	str	r3, [sp, #28]
 801c828:	4619      	mov	r1, r3
 801c82a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801c82e:	2201      	movs	r2, #1
 801c830:	9301      	str	r3, [sp, #4]
 801c832:	80c2      	strh	r2, [r0, #6]
 801c834:	f88d 2004 	strb.w	r2, [sp, #4]
 801c838:	682a      	ldr	r2, [r5, #0]
 801c83a:	9303      	str	r3, [sp, #12]
 801c83c:	9200      	str	r2, [sp, #0]
 801c83e:	88aa      	ldrh	r2, [r5, #4]
 801c840:	9306      	str	r3, [sp, #24]
 801c842:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c846:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801c84a:	9202      	str	r2, [sp, #8]
 801c84c:	7802      	ldrb	r2, [r0, #0]
 801c84e:	4620      	mov	r0, r4
 801c850:	f88d 200c 	strb.w	r2, [sp, #12]
 801c854:	2210      	movs	r2, #16
 801c856:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801c85a:	f000 fa31 	bl	801ccc0 <uxr_buffer_submessage_header>
 801c85e:	4669      	mov	r1, sp
 801c860:	4620      	mov	r0, r4
 801c862:	f001 fa6f 	bl	801dd44 <uxr_serialize_CREATE_CLIENT_Payload>
 801c866:	b009      	add	sp, #36	@ 0x24
 801c868:	bd30      	pop	{r4, r5, pc}
 801c86a:	bf00      	nop
 801c86c:	0802a154 	.word	0x0802a154

0801c870 <uxr_buffer_delete_session>:
 801c870:	4a0c      	ldr	r2, [pc, #48]	@ (801c8a4 <uxr_buffer_delete_session+0x34>)
 801c872:	2302      	movs	r3, #2
 801c874:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 801c878:	b510      	push	{r4, lr}
 801c87a:	460c      	mov	r4, r1
 801c87c:	b082      	sub	sp, #8
 801c87e:	8911      	ldrh	r1, [r2, #8]
 801c880:	2204      	movs	r2, #4
 801c882:	80c3      	strh	r3, [r0, #6]
 801c884:	2300      	movs	r3, #0
 801c886:	f8ad 1006 	strh.w	r1, [sp, #6]
 801c88a:	4620      	mov	r0, r4
 801c88c:	2103      	movs	r1, #3
 801c88e:	f8ad c004 	strh.w	ip, [sp, #4]
 801c892:	f000 fa15 	bl	801ccc0 <uxr_buffer_submessage_header>
 801c896:	a901      	add	r1, sp, #4
 801c898:	4620      	mov	r0, r4
 801c89a:	f001 fafb 	bl	801de94 <uxr_serialize_DELETE_Payload>
 801c89e:	b002      	add	sp, #8
 801c8a0:	bd10      	pop	{r4, pc}
 801c8a2:	bf00      	nop
 801c8a4:	0802a154 	.word	0x0802a154

0801c8a8 <uxr_read_create_session_status>:
 801c8a8:	b510      	push	{r4, lr}
 801c8aa:	460b      	mov	r3, r1
 801c8ac:	b088      	sub	sp, #32
 801c8ae:	4604      	mov	r4, r0
 801c8b0:	a901      	add	r1, sp, #4
 801c8b2:	4618      	mov	r0, r3
 801c8b4:	f001 fafe 	bl	801deb4 <uxr_deserialize_STATUS_AGENT_Payload>
 801c8b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801c8bc:	7163      	strb	r3, [r4, #5]
 801c8be:	b008      	add	sp, #32
 801c8c0:	bd10      	pop	{r4, pc}
 801c8c2:	bf00      	nop

0801c8c4 <uxr_read_delete_session_status>:
 801c8c4:	b510      	push	{r4, lr}
 801c8c6:	b084      	sub	sp, #16
 801c8c8:	4604      	mov	r4, r0
 801c8ca:	4608      	mov	r0, r1
 801c8cc:	a902      	add	r1, sp, #8
 801c8ce:	f001 fb21 	bl	801df14 <uxr_deserialize_STATUS_Payload>
 801c8d2:	88e3      	ldrh	r3, [r4, #6]
 801c8d4:	2b02      	cmp	r3, #2
 801c8d6:	d001      	beq.n	801c8dc <uxr_read_delete_session_status+0x18>
 801c8d8:	b004      	add	sp, #16
 801c8da:	bd10      	pop	{r4, pc}
 801c8dc:	f10d 000a 	add.w	r0, sp, #10
 801c8e0:	f7fe fff6 	bl	801b8d0 <uxr_object_id_from_raw>
 801c8e4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801c8e8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 801c8ec:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801c8f0:	b29b      	uxth	r3, r3
 801c8f2:	2b02      	cmp	r3, #2
 801c8f4:	d1f0      	bne.n	801c8d8 <uxr_read_delete_session_status+0x14>
 801c8f6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801c8fa:	7163      	strb	r3, [r4, #5]
 801c8fc:	e7ec      	b.n	801c8d8 <uxr_read_delete_session_status+0x14>
 801c8fe:	bf00      	nop

0801c900 <uxr_stamp_create_session_header>:
 801c900:	b510      	push	{r4, lr}
 801c902:	2208      	movs	r2, #8
 801c904:	b08a      	sub	sp, #40	@ 0x28
 801c906:	4604      	mov	r4, r0
 801c908:	eb0d 0002 	add.w	r0, sp, r2
 801c90c:	f7fe fd04 	bl	801b318 <ucdr_init_buffer>
 801c910:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c914:	2300      	movs	r3, #0
 801c916:	a802      	add	r0, sp, #8
 801c918:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801c91c:	9400      	str	r4, [sp, #0]
 801c91e:	461a      	mov	r2, r3
 801c920:	f000 fbca 	bl	801d0b8 <uxr_serialize_message_header>
 801c924:	b00a      	add	sp, #40	@ 0x28
 801c926:	bd10      	pop	{r4, pc}

0801c928 <uxr_stamp_session_header>:
 801c928:	b530      	push	{r4, r5, lr}
 801c92a:	b08d      	sub	sp, #52	@ 0x34
 801c92c:	4604      	mov	r4, r0
 801c92e:	460d      	mov	r5, r1
 801c930:	4619      	mov	r1, r3
 801c932:	a804      	add	r0, sp, #16
 801c934:	9203      	str	r2, [sp, #12]
 801c936:	2208      	movs	r2, #8
 801c938:	f7fe fcee 	bl	801b318 <ucdr_init_buffer>
 801c93c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c940:	9b03      	ldr	r3, [sp, #12]
 801c942:	462a      	mov	r2, r5
 801c944:	a804      	add	r0, sp, #16
 801c946:	9400      	str	r4, [sp, #0]
 801c948:	f000 fbb6 	bl	801d0b8 <uxr_serialize_message_header>
 801c94c:	b00d      	add	sp, #52	@ 0x34
 801c94e:	bd30      	pop	{r4, r5, pc}

0801c950 <uxr_read_session_header>:
 801c950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c954:	4607      	mov	r7, r0
 801c956:	b084      	sub	sp, #16
 801c958:	4608      	mov	r0, r1
 801c95a:	460c      	mov	r4, r1
 801c95c:	4615      	mov	r5, r2
 801c95e:	461e      	mov	r6, r3
 801c960:	f7fe fd0c 	bl	801b37c <ucdr_buffer_remaining>
 801c964:	2808      	cmp	r0, #8
 801c966:	d803      	bhi.n	801c970 <uxr_read_session_header+0x20>
 801c968:	2000      	movs	r0, #0
 801c96a:	b004      	add	sp, #16
 801c96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c970:	f10d 080c 	add.w	r8, sp, #12
 801c974:	4633      	mov	r3, r6
 801c976:	462a      	mov	r2, r5
 801c978:	4620      	mov	r0, r4
 801c97a:	f10d 010b 	add.w	r1, sp, #11
 801c97e:	f8cd 8000 	str.w	r8, [sp]
 801c982:	f000 fbb7 	bl	801d0f4 <uxr_deserialize_message_header>
 801c986:	783a      	ldrb	r2, [r7, #0]
 801c988:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801c98c:	4293      	cmp	r3, r2
 801c98e:	d1eb      	bne.n	801c968 <uxr_read_session_header+0x18>
 801c990:	061b      	lsls	r3, r3, #24
 801c992:	d41b      	bmi.n	801c9cc <uxr_read_session_header+0x7c>
 801c994:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801c998:	787b      	ldrb	r3, [r7, #1]
 801c99a:	429a      	cmp	r2, r3
 801c99c:	d003      	beq.n	801c9a6 <uxr_read_session_header+0x56>
 801c99e:	2001      	movs	r0, #1
 801c9a0:	f080 0001 	eor.w	r0, r0, #1
 801c9a4:	e7e1      	b.n	801c96a <uxr_read_session_header+0x1a>
 801c9a6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801c9aa:	1cb8      	adds	r0, r7, #2
 801c9ac:	78bb      	ldrb	r3, [r7, #2]
 801c9ae:	429a      	cmp	r2, r3
 801c9b0:	d1f5      	bne.n	801c99e <uxr_read_session_header+0x4e>
 801c9b2:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801c9b6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801c9ba:	429a      	cmp	r2, r3
 801c9bc:	d1ef      	bne.n	801c99e <uxr_read_session_header+0x4e>
 801c9be:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801c9c2:	7843      	ldrb	r3, [r0, #1]
 801c9c4:	429a      	cmp	r2, r3
 801c9c6:	d1ea      	bne.n	801c99e <uxr_read_session_header+0x4e>
 801c9c8:	2000      	movs	r0, #0
 801c9ca:	e7e9      	b.n	801c9a0 <uxr_read_session_header+0x50>
 801c9cc:	2001      	movs	r0, #1
 801c9ce:	e7cc      	b.n	801c96a <uxr_read_session_header+0x1a>

0801c9d0 <uxr_session_header_offset>:
 801c9d0:	f990 3000 	ldrsb.w	r3, [r0]
 801c9d4:	2b00      	cmp	r3, #0
 801c9d6:	bfac      	ite	ge
 801c9d8:	2008      	movge	r0, #8
 801c9da:	2004      	movlt	r0, #4
 801c9dc:	4770      	bx	lr
 801c9de:	bf00      	nop

0801c9e0 <uxr_init_base_object_request>:
 801c9e0:	b510      	push	{r4, lr}
 801c9e2:	b082      	sub	sp, #8
 801c9e4:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 801c9e8:	9101      	str	r1, [sp, #4]
 801c9ea:	88c3      	ldrh	r3, [r0, #6]
 801c9ec:	f1a3 010a 	sub.w	r1, r3, #10
 801c9f0:	b289      	uxth	r1, r1
 801c9f2:	42a1      	cmp	r1, r4
 801c9f4:	d80f      	bhi.n	801ca16 <uxr_init_base_object_request+0x36>
 801c9f6:	3301      	adds	r3, #1
 801c9f8:	b29c      	uxth	r4, r3
 801c9fa:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 801c9fe:	b2db      	uxtb	r3, r3
 801ca00:	80c4      	strh	r4, [r0, #6]
 801ca02:	1c91      	adds	r1, r2, #2
 801ca04:	9801      	ldr	r0, [sp, #4]
 801ca06:	f882 c000 	strb.w	ip, [r2]
 801ca0a:	7053      	strb	r3, [r2, #1]
 801ca0c:	f7fe ff74 	bl	801b8f8 <uxr_object_id_to_raw>
 801ca10:	4620      	mov	r0, r4
 801ca12:	b002      	add	sp, #8
 801ca14:	bd10      	pop	{r4, pc}
 801ca16:	230a      	movs	r3, #10
 801ca18:	f04f 0c00 	mov.w	ip, #0
 801ca1c:	461c      	mov	r4, r3
 801ca1e:	e7ef      	b.n	801ca00 <uxr_init_base_object_request+0x20>

0801ca20 <uxr_parse_base_object_request>:
 801ca20:	b570      	push	{r4, r5, r6, lr}
 801ca22:	4604      	mov	r4, r0
 801ca24:	3002      	adds	r0, #2
 801ca26:	460d      	mov	r5, r1
 801ca28:	4616      	mov	r6, r2
 801ca2a:	f7fe ff51 	bl	801b8d0 <uxr_object_id_from_raw>
 801ca2e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801ca32:	8028      	strh	r0, [r5, #0]
 801ca34:	806b      	strh	r3, [r5, #2]
 801ca36:	7822      	ldrb	r2, [r4, #0]
 801ca38:	7863      	ldrb	r3, [r4, #1]
 801ca3a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801ca3e:	8033      	strh	r3, [r6, #0]
 801ca40:	bd70      	pop	{r4, r5, r6, pc}
 801ca42:	bf00      	nop

0801ca44 <uxr_stream_id>:
 801ca44:	2901      	cmp	r1, #1
 801ca46:	4684      	mov	ip, r0
 801ca48:	b500      	push	{lr}
 801ca4a:	b083      	sub	sp, #12
 801ca4c:	d01f      	beq.n	801ca8e <uxr_stream_id+0x4a>
 801ca4e:	2902      	cmp	r1, #2
 801ca50:	f04f 0e00 	mov.w	lr, #0
 801ca54:	d020      	beq.n	801ca98 <uxr_stream_id+0x54>
 801ca56:	2300      	movs	r3, #0
 801ca58:	2000      	movs	r0, #0
 801ca5a:	f36e 0307 	bfi	r3, lr, #0, #8
 801ca5e:	f36c 230f 	bfi	r3, ip, #8, #8
 801ca62:	f361 4317 	bfi	r3, r1, #16, #8
 801ca66:	f362 631f 	bfi	r3, r2, #24, #8
 801ca6a:	fa5f fc83 	uxtb.w	ip, r3
 801ca6e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801ca72:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801ca76:	0e1b      	lsrs	r3, r3, #24
 801ca78:	f36c 0007 	bfi	r0, ip, #0, #8
 801ca7c:	f361 200f 	bfi	r0, r1, #8, #8
 801ca80:	f362 4017 	bfi	r0, r2, #16, #8
 801ca84:	f363 601f 	bfi	r0, r3, #24, #8
 801ca88:	b003      	add	sp, #12
 801ca8a:	f85d fb04 	ldr.w	pc, [sp], #4
 801ca8e:	f100 0e01 	add.w	lr, r0, #1
 801ca92:	fa5f fe8e 	uxtb.w	lr, lr
 801ca96:	e7de      	b.n	801ca56 <uxr_stream_id+0x12>
 801ca98:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 801ca9c:	e7db      	b.n	801ca56 <uxr_stream_id+0x12>
 801ca9e:	bf00      	nop

0801caa0 <uxr_stream_id_from_raw>:
 801caa0:	b082      	sub	sp, #8
 801caa2:	b130      	cbz	r0, 801cab2 <uxr_stream_id_from_raw+0x12>
 801caa4:	0603      	lsls	r3, r0, #24
 801caa6:	d421      	bmi.n	801caec <uxr_stream_id_from_raw+0x4c>
 801caa8:	1e42      	subs	r2, r0, #1
 801caaa:	f04f 0c01 	mov.w	ip, #1
 801caae:	b2d2      	uxtb	r2, r2
 801cab0:	e001      	b.n	801cab6 <uxr_stream_id_from_raw+0x16>
 801cab2:	4684      	mov	ip, r0
 801cab4:	4602      	mov	r2, r0
 801cab6:	2300      	movs	r3, #0
 801cab8:	f360 0307 	bfi	r3, r0, #0, #8
 801cabc:	2000      	movs	r0, #0
 801cabe:	f362 230f 	bfi	r3, r2, #8, #8
 801cac2:	f36c 4317 	bfi	r3, ip, #16, #8
 801cac6:	f361 631f 	bfi	r3, r1, #24, #8
 801caca:	fa5f fc83 	uxtb.w	ip, r3
 801cace:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801cad2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801cad6:	0e1b      	lsrs	r3, r3, #24
 801cad8:	f36c 0007 	bfi	r0, ip, #0, #8
 801cadc:	f361 200f 	bfi	r0, r1, #8, #8
 801cae0:	f362 4017 	bfi	r0, r2, #16, #8
 801cae4:	f363 601f 	bfi	r0, r3, #24, #8
 801cae8:	b002      	add	sp, #8
 801caea:	4770      	bx	lr
 801caec:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801caf0:	f04f 0c02 	mov.w	ip, #2
 801caf4:	e7df      	b.n	801cab6 <uxr_stream_id_from_raw+0x16>
 801caf6:	bf00      	nop

0801caf8 <uxr_init_stream_storage>:
 801caf8:	2300      	movs	r3, #0
 801cafa:	7403      	strb	r3, [r0, #16]
 801cafc:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 801cb00:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 801cb04:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 801cb08:	4770      	bx	lr
 801cb0a:	bf00      	nop

0801cb0c <uxr_reset_stream_storage>:
 801cb0c:	b570      	push	{r4, r5, r6, lr}
 801cb0e:	7c03      	ldrb	r3, [r0, #16]
 801cb10:	4604      	mov	r4, r0
 801cb12:	b14b      	cbz	r3, 801cb28 <uxr_reset_stream_storage+0x1c>
 801cb14:	4606      	mov	r6, r0
 801cb16:	2500      	movs	r5, #0
 801cb18:	4630      	mov	r0, r6
 801cb1a:	3501      	adds	r5, #1
 801cb1c:	f006 fb24 	bl	8023168 <uxr_reset_output_best_effort_stream>
 801cb20:	7c23      	ldrb	r3, [r4, #16]
 801cb22:	3610      	adds	r6, #16
 801cb24:	42ab      	cmp	r3, r5
 801cb26:	d8f7      	bhi.n	801cb18 <uxr_reset_stream_storage+0xc>
 801cb28:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801cb2c:	b15b      	cbz	r3, 801cb46 <uxr_reset_stream_storage+0x3a>
 801cb2e:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801cb32:	2500      	movs	r5, #0
 801cb34:	4630      	mov	r0, r6
 801cb36:	3501      	adds	r5, #1
 801cb38:	f006 f91c 	bl	8022d74 <uxr_reset_input_best_effort_stream>
 801cb3c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801cb40:	3602      	adds	r6, #2
 801cb42:	42ab      	cmp	r3, r5
 801cb44:	d8f6      	bhi.n	801cb34 <uxr_reset_stream_storage+0x28>
 801cb46:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801cb4a:	b15b      	cbz	r3, 801cb64 <uxr_reset_stream_storage+0x58>
 801cb4c:	f104 0618 	add.w	r6, r4, #24
 801cb50:	2500      	movs	r5, #0
 801cb52:	4630      	mov	r0, r6
 801cb54:	3501      	adds	r5, #1
 801cb56:	f006 fbb3 	bl	80232c0 <uxr_reset_output_reliable_stream>
 801cb5a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801cb5e:	3628      	adds	r6, #40	@ 0x28
 801cb60:	42ab      	cmp	r3, r5
 801cb62:	d8f6      	bhi.n	801cb52 <uxr_reset_stream_storage+0x46>
 801cb64:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801cb68:	b15b      	cbz	r3, 801cb82 <uxr_reset_stream_storage+0x76>
 801cb6a:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 801cb6e:	2500      	movs	r5, #0
 801cb70:	4630      	mov	r0, r6
 801cb72:	3501      	adds	r5, #1
 801cb74:	f006 f96a 	bl	8022e4c <uxr_reset_input_reliable_stream>
 801cb78:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801cb7c:	3618      	adds	r6, #24
 801cb7e:	42ab      	cmp	r3, r5
 801cb80:	d8f6      	bhi.n	801cb70 <uxr_reset_stream_storage+0x64>
 801cb82:	bd70      	pop	{r4, r5, r6, pc}

0801cb84 <uxr_add_output_best_effort_buffer>:
 801cb84:	b510      	push	{r4, lr}
 801cb86:	7c04      	ldrb	r4, [r0, #16]
 801cb88:	b082      	sub	sp, #8
 801cb8a:	f104 0c01 	add.w	ip, r4, #1
 801cb8e:	f880 c010 	strb.w	ip, [r0, #16]
 801cb92:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801cb96:	f006 fadd 	bl	8023154 <uxr_init_output_best_effort_stream>
 801cb9a:	2201      	movs	r2, #1
 801cb9c:	4620      	mov	r0, r4
 801cb9e:	4611      	mov	r1, r2
 801cba0:	b002      	add	sp, #8
 801cba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cba6:	f7ff bf4d 	b.w	801ca44 <uxr_stream_id>
 801cbaa:	bf00      	nop

0801cbac <uxr_add_output_reliable_buffer>:
 801cbac:	b510      	push	{r4, lr}
 801cbae:	b084      	sub	sp, #16
 801cbb0:	4684      	mov	ip, r0
 801cbb2:	2028      	movs	r0, #40	@ 0x28
 801cbb4:	f89d 4018 	ldrb.w	r4, [sp, #24]
 801cbb8:	9400      	str	r4, [sp, #0]
 801cbba:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 801cbbe:	fb00 c004 	mla	r0, r0, r4, ip
 801cbc2:	f104 0e01 	add.w	lr, r4, #1
 801cbc6:	3018      	adds	r0, #24
 801cbc8:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 801cbcc:	f006 fb42 	bl	8023254 <uxr_init_output_reliable_stream>
 801cbd0:	2201      	movs	r2, #1
 801cbd2:	2102      	movs	r1, #2
 801cbd4:	4620      	mov	r0, r4
 801cbd6:	b004      	add	sp, #16
 801cbd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cbdc:	f7ff bf32 	b.w	801ca44 <uxr_stream_id>

0801cbe0 <uxr_add_input_best_effort_buffer>:
 801cbe0:	b510      	push	{r4, lr}
 801cbe2:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 801cbe6:	b082      	sub	sp, #8
 801cbe8:	1c62      	adds	r2, r4, #1
 801cbea:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 801cbee:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 801cbf2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801cbf6:	f006 f8b9 	bl	8022d6c <uxr_init_input_best_effort_stream>
 801cbfa:	2200      	movs	r2, #0
 801cbfc:	2101      	movs	r1, #1
 801cbfe:	4620      	mov	r0, r4
 801cc00:	b002      	add	sp, #8
 801cc02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc06:	f7ff bf1d 	b.w	801ca44 <uxr_stream_id>
 801cc0a:	bf00      	nop

0801cc0c <uxr_add_input_reliable_buffer>:
 801cc0c:	b510      	push	{r4, lr}
 801cc0e:	b084      	sub	sp, #16
 801cc10:	4684      	mov	ip, r0
 801cc12:	2018      	movs	r0, #24
 801cc14:	9c06      	ldr	r4, [sp, #24]
 801cc16:	9400      	str	r4, [sp, #0]
 801cc18:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 801cc1c:	fb00 c004 	mla	r0, r0, r4, ip
 801cc20:	f104 0e01 	add.w	lr, r4, #1
 801cc24:	3048      	adds	r0, #72	@ 0x48
 801cc26:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801cc2a:	f006 f8e9 	bl	8022e00 <uxr_init_input_reliable_stream>
 801cc2e:	2200      	movs	r2, #0
 801cc30:	2102      	movs	r1, #2
 801cc32:	4620      	mov	r0, r4
 801cc34:	b004      	add	sp, #16
 801cc36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc3a:	f7ff bf03 	b.w	801ca44 <uxr_stream_id>
 801cc3e:	bf00      	nop

0801cc40 <uxr_get_output_best_effort_stream>:
 801cc40:	7c03      	ldrb	r3, [r0, #16]
 801cc42:	428b      	cmp	r3, r1
 801cc44:	bf8c      	ite	hi
 801cc46:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801cc4a:	2000      	movls	r0, #0
 801cc4c:	4770      	bx	lr
 801cc4e:	bf00      	nop

0801cc50 <uxr_get_output_reliable_stream>:
 801cc50:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801cc54:	428b      	cmp	r3, r1
 801cc56:	d904      	bls.n	801cc62 <uxr_get_output_reliable_stream+0x12>
 801cc58:	2328      	movs	r3, #40	@ 0x28
 801cc5a:	fb03 0001 	mla	r0, r3, r1, r0
 801cc5e:	3018      	adds	r0, #24
 801cc60:	4770      	bx	lr
 801cc62:	2000      	movs	r0, #0
 801cc64:	4770      	bx	lr
 801cc66:	bf00      	nop

0801cc68 <uxr_get_input_best_effort_stream>:
 801cc68:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 801cc6c:	428b      	cmp	r3, r1
 801cc6e:	d903      	bls.n	801cc78 <uxr_get_input_best_effort_stream+0x10>
 801cc70:	3121      	adds	r1, #33	@ 0x21
 801cc72:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801cc76:	4770      	bx	lr
 801cc78:	2000      	movs	r0, #0
 801cc7a:	4770      	bx	lr

0801cc7c <uxr_get_input_reliable_stream>:
 801cc7c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 801cc80:	428b      	cmp	r3, r1
 801cc82:	d904      	bls.n	801cc8e <uxr_get_input_reliable_stream+0x12>
 801cc84:	2318      	movs	r3, #24
 801cc86:	fb03 0001 	mla	r0, r3, r1, r0
 801cc8a:	3048      	adds	r0, #72	@ 0x48
 801cc8c:	4770      	bx	lr
 801cc8e:	2000      	movs	r0, #0
 801cc90:	4770      	bx	lr
 801cc92:	bf00      	nop

0801cc94 <uxr_output_streams_confirmed>:
 801cc94:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801cc98:	b183      	cbz	r3, 801ccbc <uxr_output_streams_confirmed+0x28>
 801cc9a:	b570      	push	{r4, r5, r6, lr}
 801cc9c:	4606      	mov	r6, r0
 801cc9e:	f100 0518 	add.w	r5, r0, #24
 801cca2:	2400      	movs	r4, #0
 801cca4:	e000      	b.n	801cca8 <uxr_output_streams_confirmed+0x14>
 801cca6:	b140      	cbz	r0, 801ccba <uxr_output_streams_confirmed+0x26>
 801cca8:	4628      	mov	r0, r5
 801ccaa:	3401      	adds	r4, #1
 801ccac:	f006 fd7c 	bl	80237a8 <uxr_is_output_up_to_date>
 801ccb0:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 801ccb4:	3528      	adds	r5, #40	@ 0x28
 801ccb6:	42a3      	cmp	r3, r4
 801ccb8:	d8f5      	bhi.n	801cca6 <uxr_output_streams_confirmed+0x12>
 801ccba:	bd70      	pop	{r4, r5, r6, pc}
 801ccbc:	2001      	movs	r0, #1
 801ccbe:	4770      	bx	lr

0801ccc0 <uxr_buffer_submessage_header>:
 801ccc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ccc2:	460e      	mov	r6, r1
 801ccc4:	2104      	movs	r1, #4
 801ccc6:	4604      	mov	r4, r0
 801ccc8:	4615      	mov	r5, r2
 801ccca:	461f      	mov	r7, r3
 801cccc:	f7fe fb40 	bl	801b350 <ucdr_align_to>
 801ccd0:	2301      	movs	r3, #1
 801ccd2:	4631      	mov	r1, r6
 801ccd4:	4620      	mov	r0, r4
 801ccd6:	ea47 0203 	orr.w	r2, r7, r3
 801ccda:	7523      	strb	r3, [r4, #20]
 801ccdc:	462b      	mov	r3, r5
 801ccde:	f000 fa29 	bl	801d134 <uxr_serialize_submessage_header>
 801cce2:	4620      	mov	r0, r4
 801cce4:	f7fe fb4a 	bl	801b37c <ucdr_buffer_remaining>
 801cce8:	42a8      	cmp	r0, r5
 801ccea:	bf34      	ite	cc
 801ccec:	2000      	movcc	r0, #0
 801ccee:	2001      	movcs	r0, #1
 801ccf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ccf2:	bf00      	nop

0801ccf4 <uxr_read_submessage_header>:
 801ccf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ccf8:	4604      	mov	r4, r0
 801ccfa:	460d      	mov	r5, r1
 801ccfc:	2104      	movs	r1, #4
 801ccfe:	4616      	mov	r6, r2
 801cd00:	4698      	mov	r8, r3
 801cd02:	f7fe fb25 	bl	801b350 <ucdr_align_to>
 801cd06:	4620      	mov	r0, r4
 801cd08:	f7fe fb38 	bl	801b37c <ucdr_buffer_remaining>
 801cd0c:	2803      	cmp	r0, #3
 801cd0e:	bf8c      	ite	hi
 801cd10:	2701      	movhi	r7, #1
 801cd12:	2700      	movls	r7, #0
 801cd14:	d802      	bhi.n	801cd1c <uxr_read_submessage_header+0x28>
 801cd16:	4638      	mov	r0, r7
 801cd18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cd1c:	4633      	mov	r3, r6
 801cd1e:	4642      	mov	r2, r8
 801cd20:	4620      	mov	r0, r4
 801cd22:	4629      	mov	r1, r5
 801cd24:	f000 fa1a 	bl	801d15c <uxr_deserialize_submessage_header>
 801cd28:	f898 3000 	ldrb.w	r3, [r8]
 801cd2c:	4638      	mov	r0, r7
 801cd2e:	f003 0201 	and.w	r2, r3, #1
 801cd32:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 801cd36:	f888 3000 	strb.w	r3, [r8]
 801cd3a:	7522      	strb	r2, [r4, #20]
 801cd3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801cd40 <uxr_submessage_padding>:
 801cd40:	f010 0003 	ands.w	r0, r0, #3
 801cd44:	bf18      	it	ne
 801cd46:	f1c0 0004 	rsbne	r0, r0, #4
 801cd4a:	4770      	bx	lr

0801cd4c <uxr_millis>:
 801cd4c:	b510      	push	{r4, lr}
 801cd4e:	b084      	sub	sp, #16
 801cd50:	2001      	movs	r0, #1
 801cd52:	4669      	mov	r1, sp
 801cd54:	f7e3 fd14 	bl	8000780 <clock_gettime>
 801cd58:	4908      	ldr	r1, [pc, #32]	@ (801cd7c <uxr_millis+0x30>)
 801cd5a:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 801cd5e:	fba0 0301 	umull	r0, r3, r0, r1
 801cd62:	1900      	adds	r0, r0, r4
 801cd64:	fb01 3102 	mla	r1, r1, r2, r3
 801cd68:	4a05      	ldr	r2, [pc, #20]	@ (801cd80 <uxr_millis+0x34>)
 801cd6a:	f04f 0300 	mov.w	r3, #0
 801cd6e:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801cd72:	f7e3 facd 	bl	8000310 <__aeabi_ldivmod>
 801cd76:	b004      	add	sp, #16
 801cd78:	bd10      	pop	{r4, pc}
 801cd7a:	bf00      	nop
 801cd7c:	3b9aca00 	.word	0x3b9aca00
 801cd80:	000f4240 	.word	0x000f4240

0801cd84 <uxr_nanos>:
 801cd84:	b510      	push	{r4, lr}
 801cd86:	b084      	sub	sp, #16
 801cd88:	2001      	movs	r0, #1
 801cd8a:	4669      	mov	r1, sp
 801cd8c:	f7e3 fcf8 	bl	8000780 <clock_gettime>
 801cd90:	4a06      	ldr	r2, [pc, #24]	@ (801cdac <uxr_nanos+0x28>)
 801cd92:	9800      	ldr	r0, [sp, #0]
 801cd94:	9902      	ldr	r1, [sp, #8]
 801cd96:	fba0 0302 	umull	r0, r3, r0, r2
 801cd9a:	9c01      	ldr	r4, [sp, #4]
 801cd9c:	1840      	adds	r0, r0, r1
 801cd9e:	fb02 3304 	mla	r3, r2, r4, r3
 801cda2:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801cda6:	b004      	add	sp, #16
 801cda8:	bd10      	pop	{r4, pc}
 801cdaa:	bf00      	nop
 801cdac:	3b9aca00 	.word	0x3b9aca00

0801cdb0 <on_full_output_buffer_fragmented>:
 801cdb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cdb4:	460c      	mov	r4, r1
 801cdb6:	b08a      	sub	sp, #40	@ 0x28
 801cdb8:	4606      	mov	r6, r0
 801cdba:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 801cdbe:	f104 0008 	add.w	r0, r4, #8
 801cdc2:	f7ff ff45 	bl	801cc50 <uxr_get_output_reliable_stream>
 801cdc6:	4605      	mov	r5, r0
 801cdc8:	f006 fcf8 	bl	80237bc <get_available_free_slots>
 801cdcc:	b968      	cbnz	r0, 801cdea <on_full_output_buffer_fragmented+0x3a>
 801cdce:	4620      	mov	r0, r4
 801cdd0:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 801cdd4:	4798      	blx	r3
 801cdd6:	b918      	cbnz	r0, 801cde0 <on_full_output_buffer_fragmented+0x30>
 801cdd8:	2001      	movs	r0, #1
 801cdda:	b00a      	add	sp, #40	@ 0x28
 801cddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cde0:	4628      	mov	r0, r5
 801cde2:	f006 fceb 	bl	80237bc <get_available_free_slots>
 801cde6:	2800      	cmp	r0, #0
 801cde8:	d0f6      	beq.n	801cdd8 <on_full_output_buffer_fragmented+0x28>
 801cdea:	8929      	ldrh	r1, [r5, #8]
 801cdec:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801cdf0:	89eb      	ldrh	r3, [r5, #14]
 801cdf2:	7b28      	ldrb	r0, [r5, #12]
 801cdf4:	686f      	ldr	r7, [r5, #4]
 801cdf6:	1a12      	subs	r2, r2, r0
 801cdf8:	fbb3 f0f1 	udiv	r0, r3, r1
 801cdfc:	fbb7 f7f1 	udiv	r7, r7, r1
 801ce00:	fb01 3110 	mls	r1, r1, r0, r3
 801ce04:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 801ce08:	b289      	uxth	r1, r1
 801ce0a:	fb07 f101 	mul.w	r1, r7, r1
 801ce0e:	3f04      	subs	r7, #4
 801ce10:	443a      	add	r2, r7
 801ce12:	3104      	adds	r1, #4
 801ce14:	fa1f f882 	uxth.w	r8, r2
 801ce18:	463a      	mov	r2, r7
 801ce1a:	eba3 0308 	sub.w	r3, r3, r8
 801ce1e:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 801ce22:	682b      	ldr	r3, [r5, #0]
 801ce24:	4419      	add	r1, r3
 801ce26:	2300      	movs	r3, #0
 801ce28:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801ce2c:	9000      	str	r0, [sp, #0]
 801ce2e:	a802      	add	r0, sp, #8
 801ce30:	f7fe fa60 	bl	801b2f4 <ucdr_init_buffer_origin_offset>
 801ce34:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801ce38:	f102 0308 	add.w	r3, r2, #8
 801ce3c:	42bb      	cmp	r3, r7
 801ce3e:	d927      	bls.n	801ce90 <on_full_output_buffer_fragmented+0xe0>
 801ce40:	4642      	mov	r2, r8
 801ce42:	2300      	movs	r3, #0
 801ce44:	210d      	movs	r1, #13
 801ce46:	a802      	add	r0, sp, #8
 801ce48:	f7ff ff3a 	bl	801ccc0 <uxr_buffer_submessage_header>
 801ce4c:	8929      	ldrh	r1, [r5, #8]
 801ce4e:	89eb      	ldrh	r3, [r5, #14]
 801ce50:	686a      	ldr	r2, [r5, #4]
 801ce52:	fbb3 f0f1 	udiv	r0, r3, r1
 801ce56:	fbb2 f2f1 	udiv	r2, r2, r1
 801ce5a:	fb01 3310 	mls	r3, r1, r0, r3
 801ce5e:	b29b      	uxth	r3, r3
 801ce60:	fb02 f303 	mul.w	r3, r2, r3
 801ce64:	682a      	ldr	r2, [r5, #0]
 801ce66:	50d7      	str	r7, [r2, r3]
 801ce68:	2101      	movs	r1, #1
 801ce6a:	89e8      	ldrh	r0, [r5, #14]
 801ce6c:	f006 fdf8 	bl	8023a60 <uxr_seq_num_add>
 801ce70:	9904      	ldr	r1, [sp, #16]
 801ce72:	9a03      	ldr	r2, [sp, #12]
 801ce74:	81e8      	strh	r0, [r5, #14]
 801ce76:	4630      	mov	r0, r6
 801ce78:	1a52      	subs	r2, r2, r1
 801ce7a:	f7fe fa4d 	bl	801b318 <ucdr_init_buffer>
 801ce7e:	4630      	mov	r0, r6
 801ce80:	4622      	mov	r2, r4
 801ce82:	490f      	ldr	r1, [pc, #60]	@ (801cec0 <on_full_output_buffer_fragmented+0x110>)
 801ce84:	f7fe fa1c 	bl	801b2c0 <ucdr_set_on_full_buffer_callback>
 801ce88:	2000      	movs	r0, #0
 801ce8a:	b00a      	add	sp, #40	@ 0x28
 801ce8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce90:	b292      	uxth	r2, r2
 801ce92:	2302      	movs	r3, #2
 801ce94:	210d      	movs	r1, #13
 801ce96:	a802      	add	r0, sp, #8
 801ce98:	f7ff ff12 	bl	801ccc0 <uxr_buffer_submessage_header>
 801ce9c:	8928      	ldrh	r0, [r5, #8]
 801ce9e:	89eb      	ldrh	r3, [r5, #14]
 801cea0:	6869      	ldr	r1, [r5, #4]
 801cea2:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801cea6:	fbb3 f7f0 	udiv	r7, r3, r0
 801ceaa:	fbb1 f1f0 	udiv	r1, r1, r0
 801ceae:	fb00 3317 	mls	r3, r0, r7, r3
 801ceb2:	3208      	adds	r2, #8
 801ceb4:	b29b      	uxth	r3, r3
 801ceb6:	fb01 f303 	mul.w	r3, r1, r3
 801ceba:	6829      	ldr	r1, [r5, #0]
 801cebc:	50ca      	str	r2, [r1, r3]
 801cebe:	e7d3      	b.n	801ce68 <on_full_output_buffer_fragmented+0xb8>
 801cec0:	0801cdb1 	.word	0x0801cdb1

0801cec4 <uxr_prepare_output_stream>:
 801cec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cec6:	b087      	sub	sp, #28
 801cec8:	2707      	movs	r7, #7
 801ceca:	2500      	movs	r5, #0
 801cecc:	461c      	mov	r4, r3
 801cece:	4606      	mov	r6, r0
 801ced0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801ced4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ced6:	e9cd 7500 	strd	r7, r5, [sp]
 801ceda:	3204      	adds	r2, #4
 801cedc:	f7ff fc44 	bl	801c768 <uxr_prepare_stream_to_write_submessage>
 801cee0:	f080 0201 	eor.w	r2, r0, #1
 801cee4:	b2d2      	uxtb	r2, r2
 801cee6:	75a2      	strb	r2, [r4, #22]
 801cee8:	b112      	cbz	r2, 801cef0 <uxr_prepare_output_stream+0x2c>
 801ceea:	4628      	mov	r0, r5
 801ceec:	b007      	add	sp, #28
 801ceee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cef0:	aa05      	add	r2, sp, #20
 801cef2:	9902      	ldr	r1, [sp, #8]
 801cef4:	4630      	mov	r0, r6
 801cef6:	f7ff fd73 	bl	801c9e0 <uxr_init_base_object_request>
 801cefa:	a905      	add	r1, sp, #20
 801cefc:	4605      	mov	r5, r0
 801cefe:	4620      	mov	r0, r4
 801cf00:	f001 f888 	bl	801e014 <uxr_serialize_WRITE_DATA_Payload_Data>
 801cf04:	69a6      	ldr	r6, [r4, #24]
 801cf06:	69e7      	ldr	r7, [r4, #28]
 801cf08:	4620      	mov	r0, r4
 801cf0a:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801cf0e:	1a52      	subs	r2, r2, r1
 801cf10:	f7fe fa02 	bl	801b318 <ucdr_init_buffer>
 801cf14:	4620      	mov	r0, r4
 801cf16:	463a      	mov	r2, r7
 801cf18:	4631      	mov	r1, r6
 801cf1a:	f7fe f9d1 	bl	801b2c0 <ucdr_set_on_full_buffer_callback>
 801cf1e:	4628      	mov	r0, r5
 801cf20:	b007      	add	sp, #28
 801cf22:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cf24 <uxr_prepare_output_stream_fragmented>:
 801cf24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf28:	b091      	sub	sp, #68	@ 0x44
 801cf2a:	4605      	mov	r5, r0
 801cf2c:	3008      	adds	r0, #8
 801cf2e:	461e      	mov	r6, r3
 801cf30:	9105      	str	r1, [sp, #20]
 801cf32:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801cf36:	9204      	str	r2, [sp, #16]
 801cf38:	f7ff fe8a 	bl	801cc50 <uxr_get_output_reliable_stream>
 801cf3c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 801cf40:	2b01      	cmp	r3, #1
 801cf42:	f000 8093 	beq.w	801d06c <uxr_prepare_output_stream_fragmented+0x148>
 801cf46:	4604      	mov	r4, r0
 801cf48:	2800      	cmp	r0, #0
 801cf4a:	f000 808f 	beq.w	801d06c <uxr_prepare_output_stream_fragmented+0x148>
 801cf4e:	f006 fc35 	bl	80237bc <get_available_free_slots>
 801cf52:	2800      	cmp	r0, #0
 801cf54:	f000 8085 	beq.w	801d062 <uxr_prepare_output_stream_fragmented+0x13e>
 801cf58:	8923      	ldrh	r3, [r4, #8]
 801cf5a:	89e7      	ldrh	r7, [r4, #14]
 801cf5c:	6862      	ldr	r2, [r4, #4]
 801cf5e:	fbb7 f9f3 	udiv	r9, r7, r3
 801cf62:	fbb2 f2f3 	udiv	r2, r2, r3
 801cf66:	fb03 7919 	mls	r9, r3, r9, r7
 801cf6a:	6823      	ldr	r3, [r4, #0]
 801cf6c:	f1a2 0b04 	sub.w	fp, r2, #4
 801cf70:	9203      	str	r2, [sp, #12]
 801cf72:	fa1f f989 	uxth.w	r9, r9
 801cf76:	fb02 f909 	mul.w	r9, r2, r9
 801cf7a:	f109 0904 	add.w	r9, r9, #4
 801cf7e:	4499      	add	r9, r3
 801cf80:	7b23      	ldrb	r3, [r4, #12]
 801cf82:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801cf86:	4543      	cmp	r3, r8
 801cf88:	d37c      	bcc.n	801d084 <uxr_prepare_output_stream_fragmented+0x160>
 801cf8a:	f1ab 0a04 	sub.w	sl, fp, #4
 801cf8e:	465a      	mov	r2, fp
 801cf90:	4649      	mov	r1, r9
 801cf92:	a808      	add	r0, sp, #32
 801cf94:	ebaa 0a03 	sub.w	sl, sl, r3
 801cf98:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801cf9a:	f8cd 8000 	str.w	r8, [sp]
 801cf9e:	3308      	adds	r3, #8
 801cfa0:	fa1f fa8a 	uxth.w	sl, sl
 801cfa4:	9302      	str	r3, [sp, #8]
 801cfa6:	2300      	movs	r3, #0
 801cfa8:	f7fe f9a4 	bl	801b2f4 <ucdr_init_buffer_origin_offset>
 801cfac:	9b02      	ldr	r3, [sp, #8]
 801cfae:	4652      	mov	r2, sl
 801cfb0:	210d      	movs	r1, #13
 801cfb2:	455b      	cmp	r3, fp
 801cfb4:	bf34      	ite	cc
 801cfb6:	2302      	movcc	r3, #2
 801cfb8:	2300      	movcs	r3, #0
 801cfba:	a808      	add	r0, sp, #32
 801cfbc:	f7ff fe80 	bl	801ccc0 <uxr_buffer_submessage_header>
 801cfc0:	8921      	ldrh	r1, [r4, #8]
 801cfc2:	6863      	ldr	r3, [r4, #4]
 801cfc4:	4638      	mov	r0, r7
 801cfc6:	fbb7 f2f1 	udiv	r2, r7, r1
 801cfca:	fbb3 f3f1 	udiv	r3, r3, r1
 801cfce:	fb01 7212 	mls	r2, r1, r2, r7
 801cfd2:	2101      	movs	r1, #1
 801cfd4:	b292      	uxth	r2, r2
 801cfd6:	fb02 f303 	mul.w	r3, r2, r3
 801cfda:	6822      	ldr	r2, [r4, #0]
 801cfdc:	f842 b003 	str.w	fp, [r2, r3]
 801cfe0:	f006 fd3e 	bl	8023a60 <uxr_seq_num_add>
 801cfe4:	9b03      	ldr	r3, [sp, #12]
 801cfe6:	f108 0104 	add.w	r1, r8, #4
 801cfea:	4607      	mov	r7, r0
 801cfec:	f1a3 0208 	sub.w	r2, r3, #8
 801cff0:	4630      	mov	r0, r6
 801cff2:	4449      	add	r1, r9
 801cff4:	eba2 0208 	sub.w	r2, r2, r8
 801cff8:	f7fe f98e 	bl	801b318 <ucdr_init_buffer>
 801cffc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801cffe:	2107      	movs	r1, #7
 801d000:	81e7      	strh	r7, [r4, #14]
 801d002:	1d1a      	adds	r2, r3, #4
 801d004:	2300      	movs	r3, #0
 801d006:	4630      	mov	r0, r6
 801d008:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 801d00c:	bf28      	it	cs
 801d00e:	461a      	movcs	r2, r3
 801d010:	b292      	uxth	r2, r2
 801d012:	f7ff fe55 	bl	801ccc0 <uxr_buffer_submessage_header>
 801d016:	aa07      	add	r2, sp, #28
 801d018:	9904      	ldr	r1, [sp, #16]
 801d01a:	4628      	mov	r0, r5
 801d01c:	f7ff fce0 	bl	801c9e0 <uxr_init_base_object_request>
 801d020:	4604      	mov	r4, r0
 801d022:	b320      	cbz	r0, 801d06e <uxr_prepare_output_stream_fragmented+0x14a>
 801d024:	a907      	add	r1, sp, #28
 801d026:	4630      	mov	r0, r6
 801d028:	f000 fff4 	bl	801e014 <uxr_serialize_WRITE_DATA_Payload_Data>
 801d02c:	4630      	mov	r0, r6
 801d02e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801d032:	1a52      	subs	r2, r2, r1
 801d034:	f7fe f970 	bl	801b318 <ucdr_init_buffer>
 801d038:	9b05      	ldr	r3, [sp, #20]
 801d03a:	9a02      	ldr	r2, [sp, #8]
 801d03c:	4630      	mov	r0, r6
 801d03e:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 801d042:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801d044:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 801d048:	462a      	mov	r2, r5
 801d04a:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 801d04e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801d050:	4918      	ldr	r1, [pc, #96]	@ (801d0b4 <uxr_prepare_output_stream_fragmented+0x190>)
 801d052:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 801d056:	f7fe f933 	bl	801b2c0 <ucdr_set_on_full_buffer_callback>
 801d05a:	4620      	mov	r0, r4
 801d05c:	b011      	add	sp, #68	@ 0x44
 801d05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d062:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801d064:	4628      	mov	r0, r5
 801d066:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801d068:	4798      	blx	r3
 801d06a:	b920      	cbnz	r0, 801d076 <uxr_prepare_output_stream_fragmented+0x152>
 801d06c:	2400      	movs	r4, #0
 801d06e:	4620      	mov	r0, r4
 801d070:	b011      	add	sp, #68	@ 0x44
 801d072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d076:	4620      	mov	r0, r4
 801d078:	f006 fba0 	bl	80237bc <get_available_free_slots>
 801d07c:	2800      	cmp	r0, #0
 801d07e:	f47f af6b 	bne.w	801cf58 <uxr_prepare_output_stream_fragmented+0x34>
 801d082:	e7f3      	b.n	801d06c <uxr_prepare_output_stream_fragmented+0x148>
 801d084:	4638      	mov	r0, r7
 801d086:	2101      	movs	r1, #1
 801d088:	f006 fcea 	bl	8023a60 <uxr_seq_num_add>
 801d08c:	8922      	ldrh	r2, [r4, #8]
 801d08e:	6863      	ldr	r3, [r4, #4]
 801d090:	4607      	mov	r7, r0
 801d092:	fbb3 f9f2 	udiv	r9, r3, r2
 801d096:	fbb0 f3f2 	udiv	r3, r0, r2
 801d09a:	fb02 0313 	mls	r3, r2, r3, r0
 801d09e:	b29b      	uxth	r3, r3
 801d0a0:	fb03 f909 	mul.w	r9, r3, r9
 801d0a4:	6823      	ldr	r3, [r4, #0]
 801d0a6:	f109 0904 	add.w	r9, r9, #4
 801d0aa:	4499      	add	r9, r3
 801d0ac:	7b23      	ldrb	r3, [r4, #12]
 801d0ae:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801d0b2:	e76a      	b.n	801cf8a <uxr_prepare_output_stream_fragmented+0x66>
 801d0b4:	0801cdb1 	.word	0x0801cdb1

0801d0b8 <uxr_serialize_message_header>:
 801d0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d0ba:	4616      	mov	r6, r2
 801d0bc:	b083      	sub	sp, #12
 801d0be:	4604      	mov	r4, r0
 801d0c0:	460d      	mov	r5, r1
 801d0c2:	9301      	str	r3, [sp, #4]
 801d0c4:	9f08      	ldr	r7, [sp, #32]
 801d0c6:	f7fd f97b 	bl	801a3c0 <ucdr_serialize_uint8_t>
 801d0ca:	4631      	mov	r1, r6
 801d0cc:	4620      	mov	r0, r4
 801d0ce:	f7fd f977 	bl	801a3c0 <ucdr_serialize_uint8_t>
 801d0d2:	9a01      	ldr	r2, [sp, #4]
 801d0d4:	2101      	movs	r1, #1
 801d0d6:	4620      	mov	r0, r4
 801d0d8:	f7fd fa1e 	bl	801a518 <ucdr_serialize_endian_uint16_t>
 801d0dc:	062b      	lsls	r3, r5, #24
 801d0de:	d501      	bpl.n	801d0e4 <uxr_serialize_message_header+0x2c>
 801d0e0:	b003      	add	sp, #12
 801d0e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d0e4:	2204      	movs	r2, #4
 801d0e6:	4639      	mov	r1, r7
 801d0e8:	4620      	mov	r0, r4
 801d0ea:	b003      	add	sp, #12
 801d0ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801d0f0:	f005 bc9a 	b.w	8022a28 <ucdr_serialize_array_uint8_t>

0801d0f4 <uxr_deserialize_message_header>:
 801d0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d0f6:	4616      	mov	r6, r2
 801d0f8:	b083      	sub	sp, #12
 801d0fa:	4604      	mov	r4, r0
 801d0fc:	460d      	mov	r5, r1
 801d0fe:	9301      	str	r3, [sp, #4]
 801d100:	9f08      	ldr	r7, [sp, #32]
 801d102:	f7fd f973 	bl	801a3ec <ucdr_deserialize_uint8_t>
 801d106:	4631      	mov	r1, r6
 801d108:	4620      	mov	r0, r4
 801d10a:	f7fd f96f 	bl	801a3ec <ucdr_deserialize_uint8_t>
 801d10e:	9a01      	ldr	r2, [sp, #4]
 801d110:	2101      	movs	r1, #1
 801d112:	4620      	mov	r0, r4
 801d114:	f7fd faf4 	bl	801a700 <ucdr_deserialize_endian_uint16_t>
 801d118:	f995 3000 	ldrsb.w	r3, [r5]
 801d11c:	2b00      	cmp	r3, #0
 801d11e:	da01      	bge.n	801d124 <uxr_deserialize_message_header+0x30>
 801d120:	b003      	add	sp, #12
 801d122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d124:	2204      	movs	r2, #4
 801d126:	4639      	mov	r1, r7
 801d128:	4620      	mov	r0, r4
 801d12a:	b003      	add	sp, #12
 801d12c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801d130:	f005 bcde 	b.w	8022af0 <ucdr_deserialize_array_uint8_t>

0801d134 <uxr_serialize_submessage_header>:
 801d134:	b530      	push	{r4, r5, lr}
 801d136:	4615      	mov	r5, r2
 801d138:	b083      	sub	sp, #12
 801d13a:	4604      	mov	r4, r0
 801d13c:	9301      	str	r3, [sp, #4]
 801d13e:	f7fd f93f 	bl	801a3c0 <ucdr_serialize_uint8_t>
 801d142:	4629      	mov	r1, r5
 801d144:	4620      	mov	r0, r4
 801d146:	f7fd f93b 	bl	801a3c0 <ucdr_serialize_uint8_t>
 801d14a:	9a01      	ldr	r2, [sp, #4]
 801d14c:	2101      	movs	r1, #1
 801d14e:	4620      	mov	r0, r4
 801d150:	b003      	add	sp, #12
 801d152:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d156:	f7fd b9df 	b.w	801a518 <ucdr_serialize_endian_uint16_t>
 801d15a:	bf00      	nop

0801d15c <uxr_deserialize_submessage_header>:
 801d15c:	b530      	push	{r4, r5, lr}
 801d15e:	4615      	mov	r5, r2
 801d160:	b083      	sub	sp, #12
 801d162:	4604      	mov	r4, r0
 801d164:	9301      	str	r3, [sp, #4]
 801d166:	f7fd f941 	bl	801a3ec <ucdr_deserialize_uint8_t>
 801d16a:	4629      	mov	r1, r5
 801d16c:	4620      	mov	r0, r4
 801d16e:	f7fd f93d 	bl	801a3ec <ucdr_deserialize_uint8_t>
 801d172:	9a01      	ldr	r2, [sp, #4]
 801d174:	2101      	movs	r1, #1
 801d176:	4620      	mov	r0, r4
 801d178:	b003      	add	sp, #12
 801d17a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d17e:	f7fd babf 	b.w	801a700 <ucdr_deserialize_endian_uint16_t>
 801d182:	bf00      	nop

0801d184 <uxr_serialize_CLIENT_Representation>:
 801d184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d188:	2204      	movs	r2, #4
 801d18a:	460e      	mov	r6, r1
 801d18c:	4605      	mov	r5, r0
 801d18e:	f005 fc4b 	bl	8022a28 <ucdr_serialize_array_uint8_t>
 801d192:	4607      	mov	r7, r0
 801d194:	2202      	movs	r2, #2
 801d196:	1d31      	adds	r1, r6, #4
 801d198:	4628      	mov	r0, r5
 801d19a:	f005 fc45 	bl	8022a28 <ucdr_serialize_array_uint8_t>
 801d19e:	4038      	ands	r0, r7
 801d1a0:	2202      	movs	r2, #2
 801d1a2:	1db1      	adds	r1, r6, #6
 801d1a4:	b2c7      	uxtb	r7, r0
 801d1a6:	4628      	mov	r0, r5
 801d1a8:	f005 fc3e 	bl	8022a28 <ucdr_serialize_array_uint8_t>
 801d1ac:	2204      	movs	r2, #4
 801d1ae:	4007      	ands	r7, r0
 801d1b0:	f106 0108 	add.w	r1, r6, #8
 801d1b4:	4628      	mov	r0, r5
 801d1b6:	f005 fc37 	bl	8022a28 <ucdr_serialize_array_uint8_t>
 801d1ba:	4007      	ands	r7, r0
 801d1bc:	7b31      	ldrb	r1, [r6, #12]
 801d1be:	4628      	mov	r0, r5
 801d1c0:	f7fd f8fe 	bl	801a3c0 <ucdr_serialize_uint8_t>
 801d1c4:	7b71      	ldrb	r1, [r6, #13]
 801d1c6:	4007      	ands	r7, r0
 801d1c8:	4628      	mov	r0, r5
 801d1ca:	f7fd f8cb 	bl	801a364 <ucdr_serialize_bool>
 801d1ce:	7b73      	ldrb	r3, [r6, #13]
 801d1d0:	ea07 0800 	and.w	r8, r7, r0
 801d1d4:	b93b      	cbnz	r3, 801d1e6 <uxr_serialize_CLIENT_Representation+0x62>
 801d1d6:	8bb1      	ldrh	r1, [r6, #28]
 801d1d8:	4628      	mov	r0, r5
 801d1da:	f7fd f91d 	bl	801a418 <ucdr_serialize_uint16_t>
 801d1de:	ea08 0000 	and.w	r0, r8, r0
 801d1e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d1e6:	6931      	ldr	r1, [r6, #16]
 801d1e8:	4628      	mov	r0, r5
 801d1ea:	f7fd faff 	bl	801a7ec <ucdr_serialize_uint32_t>
 801d1ee:	6933      	ldr	r3, [r6, #16]
 801d1f0:	b1e3      	cbz	r3, 801d22c <uxr_serialize_CLIENT_Representation+0xa8>
 801d1f2:	b1c0      	cbz	r0, 801d226 <uxr_serialize_CLIENT_Representation+0xa2>
 801d1f4:	4637      	mov	r7, r6
 801d1f6:	f04f 0900 	mov.w	r9, #0
 801d1fa:	e000      	b.n	801d1fe <uxr_serialize_CLIENT_Representation+0x7a>
 801d1fc:	b19c      	cbz	r4, 801d226 <uxr_serialize_CLIENT_Representation+0xa2>
 801d1fe:	6979      	ldr	r1, [r7, #20]
 801d200:	4628      	mov	r0, r5
 801d202:	f005 fcdd 	bl	8022bc0 <ucdr_serialize_string>
 801d206:	69b9      	ldr	r1, [r7, #24]
 801d208:	4604      	mov	r4, r0
 801d20a:	4628      	mov	r0, r5
 801d20c:	f005 fcd8 	bl	8022bc0 <ucdr_serialize_string>
 801d210:	f109 0901 	add.w	r9, r9, #1
 801d214:	6933      	ldr	r3, [r6, #16]
 801d216:	4004      	ands	r4, r0
 801d218:	3708      	adds	r7, #8
 801d21a:	4599      	cmp	r9, r3
 801d21c:	b2e4      	uxtb	r4, r4
 801d21e:	d3ed      	bcc.n	801d1fc <uxr_serialize_CLIENT_Representation+0x78>
 801d220:	ea08 0804 	and.w	r8, r8, r4
 801d224:	e7d7      	b.n	801d1d6 <uxr_serialize_CLIENT_Representation+0x52>
 801d226:	f04f 0800 	mov.w	r8, #0
 801d22a:	e7d4      	b.n	801d1d6 <uxr_serialize_CLIENT_Representation+0x52>
 801d22c:	ea08 0800 	and.w	r8, r8, r0
 801d230:	e7d1      	b.n	801d1d6 <uxr_serialize_CLIENT_Representation+0x52>
 801d232:	bf00      	nop

0801d234 <uxr_deserialize_CLIENT_Representation>:
 801d234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d238:	2204      	movs	r2, #4
 801d23a:	460c      	mov	r4, r1
 801d23c:	4605      	mov	r5, r0
 801d23e:	f005 fc57 	bl	8022af0 <ucdr_deserialize_array_uint8_t>
 801d242:	4607      	mov	r7, r0
 801d244:	2202      	movs	r2, #2
 801d246:	1d21      	adds	r1, r4, #4
 801d248:	4628      	mov	r0, r5
 801d24a:	f005 fc51 	bl	8022af0 <ucdr_deserialize_array_uint8_t>
 801d24e:	4038      	ands	r0, r7
 801d250:	2202      	movs	r2, #2
 801d252:	1da1      	adds	r1, r4, #6
 801d254:	b2c6      	uxtb	r6, r0
 801d256:	4628      	mov	r0, r5
 801d258:	f005 fc4a 	bl	8022af0 <ucdr_deserialize_array_uint8_t>
 801d25c:	2204      	movs	r2, #4
 801d25e:	4006      	ands	r6, r0
 801d260:	f104 0108 	add.w	r1, r4, #8
 801d264:	4628      	mov	r0, r5
 801d266:	f005 fc43 	bl	8022af0 <ucdr_deserialize_array_uint8_t>
 801d26a:	4006      	ands	r6, r0
 801d26c:	f104 010c 	add.w	r1, r4, #12
 801d270:	4628      	mov	r0, r5
 801d272:	f7fd f8bb 	bl	801a3ec <ucdr_deserialize_uint8_t>
 801d276:	f104 010d 	add.w	r1, r4, #13
 801d27a:	ea06 0700 	and.w	r7, r6, r0
 801d27e:	4628      	mov	r0, r5
 801d280:	f7fd f886 	bl	801a390 <ucdr_deserialize_bool>
 801d284:	7b63      	ldrb	r3, [r4, #13]
 801d286:	4007      	ands	r7, r0
 801d288:	b93b      	cbnz	r3, 801d29a <uxr_deserialize_CLIENT_Representation+0x66>
 801d28a:	f104 011c 	add.w	r1, r4, #28
 801d28e:	4628      	mov	r0, r5
 801d290:	f7fd f9c2 	bl	801a618 <ucdr_deserialize_uint16_t>
 801d294:	4038      	ands	r0, r7
 801d296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d29a:	f104 0110 	add.w	r1, r4, #16
 801d29e:	4628      	mov	r0, r5
 801d2a0:	f7fd fbd4 	bl	801aa4c <ucdr_deserialize_uint32_t>
 801d2a4:	6923      	ldr	r3, [r4, #16]
 801d2a6:	2b01      	cmp	r3, #1
 801d2a8:	d903      	bls.n	801d2b2 <uxr_deserialize_CLIENT_Representation+0x7e>
 801d2aa:	2301      	movs	r3, #1
 801d2ac:	2700      	movs	r7, #0
 801d2ae:	75ab      	strb	r3, [r5, #22]
 801d2b0:	e7eb      	b.n	801d28a <uxr_deserialize_CLIENT_Representation+0x56>
 801d2b2:	b30b      	cbz	r3, 801d2f8 <uxr_deserialize_CLIENT_Representation+0xc4>
 801d2b4:	b1f0      	cbz	r0, 801d2f4 <uxr_deserialize_CLIENT_Representation+0xc0>
 801d2b6:	46a0      	mov	r8, r4
 801d2b8:	f04f 0900 	mov.w	r9, #0
 801d2bc:	e000      	b.n	801d2c0 <uxr_deserialize_CLIENT_Representation+0x8c>
 801d2be:	b1ce      	cbz	r6, 801d2f4 <uxr_deserialize_CLIENT_Representation+0xc0>
 801d2c0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801d2c4:	f108 0808 	add.w	r8, r8, #8
 801d2c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801d2cc:	4628      	mov	r0, r5
 801d2ce:	f005 fc87 	bl	8022be0 <ucdr_deserialize_string>
 801d2d2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801d2d6:	4606      	mov	r6, r0
 801d2d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801d2dc:	4628      	mov	r0, r5
 801d2de:	f109 0901 	add.w	r9, r9, #1
 801d2e2:	f005 fc7d 	bl	8022be0 <ucdr_deserialize_string>
 801d2e6:	6923      	ldr	r3, [r4, #16]
 801d2e8:	4006      	ands	r6, r0
 801d2ea:	4599      	cmp	r9, r3
 801d2ec:	b2f6      	uxtb	r6, r6
 801d2ee:	d3e6      	bcc.n	801d2be <uxr_deserialize_CLIENT_Representation+0x8a>
 801d2f0:	4037      	ands	r7, r6
 801d2f2:	e7ca      	b.n	801d28a <uxr_deserialize_CLIENT_Representation+0x56>
 801d2f4:	2700      	movs	r7, #0
 801d2f6:	e7c8      	b.n	801d28a <uxr_deserialize_CLIENT_Representation+0x56>
 801d2f8:	4007      	ands	r7, r0
 801d2fa:	e7c6      	b.n	801d28a <uxr_deserialize_CLIENT_Representation+0x56>

0801d2fc <uxr_serialize_AGENT_Representation>:
 801d2fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d300:	2204      	movs	r2, #4
 801d302:	460f      	mov	r7, r1
 801d304:	4605      	mov	r5, r0
 801d306:	f005 fb8f 	bl	8022a28 <ucdr_serialize_array_uint8_t>
 801d30a:	4604      	mov	r4, r0
 801d30c:	2202      	movs	r2, #2
 801d30e:	1d39      	adds	r1, r7, #4
 801d310:	4628      	mov	r0, r5
 801d312:	f005 fb89 	bl	8022a28 <ucdr_serialize_array_uint8_t>
 801d316:	4020      	ands	r0, r4
 801d318:	2202      	movs	r2, #2
 801d31a:	1db9      	adds	r1, r7, #6
 801d31c:	b2c4      	uxtb	r4, r0
 801d31e:	4628      	mov	r0, r5
 801d320:	f005 fb82 	bl	8022a28 <ucdr_serialize_array_uint8_t>
 801d324:	7a39      	ldrb	r1, [r7, #8]
 801d326:	4004      	ands	r4, r0
 801d328:	4628      	mov	r0, r5
 801d32a:	f7fd f81b 	bl	801a364 <ucdr_serialize_bool>
 801d32e:	7a3b      	ldrb	r3, [r7, #8]
 801d330:	ea00 0804 	and.w	r8, r0, r4
 801d334:	b913      	cbnz	r3, 801d33c <uxr_serialize_AGENT_Representation+0x40>
 801d336:	4640      	mov	r0, r8
 801d338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d33c:	68f9      	ldr	r1, [r7, #12]
 801d33e:	4628      	mov	r0, r5
 801d340:	f7fd fa54 	bl	801a7ec <ucdr_serialize_uint32_t>
 801d344:	68fb      	ldr	r3, [r7, #12]
 801d346:	b303      	cbz	r3, 801d38a <uxr_serialize_AGENT_Representation+0x8e>
 801d348:	b1d0      	cbz	r0, 801d380 <uxr_serialize_AGENT_Representation+0x84>
 801d34a:	463e      	mov	r6, r7
 801d34c:	f04f 0900 	mov.w	r9, #0
 801d350:	e000      	b.n	801d354 <uxr_serialize_AGENT_Representation+0x58>
 801d352:	b1ac      	cbz	r4, 801d380 <uxr_serialize_AGENT_Representation+0x84>
 801d354:	6931      	ldr	r1, [r6, #16]
 801d356:	4628      	mov	r0, r5
 801d358:	f005 fc32 	bl	8022bc0 <ucdr_serialize_string>
 801d35c:	6971      	ldr	r1, [r6, #20]
 801d35e:	4604      	mov	r4, r0
 801d360:	4628      	mov	r0, r5
 801d362:	f005 fc2d 	bl	8022bc0 <ucdr_serialize_string>
 801d366:	f109 0901 	add.w	r9, r9, #1
 801d36a:	68fb      	ldr	r3, [r7, #12]
 801d36c:	4004      	ands	r4, r0
 801d36e:	3608      	adds	r6, #8
 801d370:	4599      	cmp	r9, r3
 801d372:	b2e4      	uxtb	r4, r4
 801d374:	d3ed      	bcc.n	801d352 <uxr_serialize_AGENT_Representation+0x56>
 801d376:	ea08 0804 	and.w	r8, r8, r4
 801d37a:	4640      	mov	r0, r8
 801d37c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d380:	f04f 0800 	mov.w	r8, #0
 801d384:	4640      	mov	r0, r8
 801d386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d38a:	ea08 0800 	and.w	r8, r8, r0
 801d38e:	e7d2      	b.n	801d336 <uxr_serialize_AGENT_Representation+0x3a>

0801d390 <uxr_serialize_DATAWRITER_Representation>:
 801d390:	b570      	push	{r4, r5, r6, lr}
 801d392:	460d      	mov	r5, r1
 801d394:	7809      	ldrb	r1, [r1, #0]
 801d396:	4606      	mov	r6, r0
 801d398:	f7fd f812 	bl	801a3c0 <ucdr_serialize_uint8_t>
 801d39c:	4604      	mov	r4, r0
 801d39e:	b130      	cbz	r0, 801d3ae <uxr_serialize_DATAWRITER_Representation+0x1e>
 801d3a0:	782b      	ldrb	r3, [r5, #0]
 801d3a2:	2b02      	cmp	r3, #2
 801d3a4:	d00c      	beq.n	801d3c0 <uxr_serialize_DATAWRITER_Representation+0x30>
 801d3a6:	2b03      	cmp	r3, #3
 801d3a8:	d010      	beq.n	801d3cc <uxr_serialize_DATAWRITER_Representation+0x3c>
 801d3aa:	2b01      	cmp	r3, #1
 801d3ac:	d008      	beq.n	801d3c0 <uxr_serialize_DATAWRITER_Representation+0x30>
 801d3ae:	2202      	movs	r2, #2
 801d3b0:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801d3b4:	4630      	mov	r0, r6
 801d3b6:	f005 fb37 	bl	8022a28 <ucdr_serialize_array_uint8_t>
 801d3ba:	4020      	ands	r0, r4
 801d3bc:	b2c0      	uxtb	r0, r0
 801d3be:	bd70      	pop	{r4, r5, r6, pc}
 801d3c0:	6869      	ldr	r1, [r5, #4]
 801d3c2:	4630      	mov	r0, r6
 801d3c4:	f005 fbfc 	bl	8022bc0 <ucdr_serialize_string>
 801d3c8:	4604      	mov	r4, r0
 801d3ca:	e7f0      	b.n	801d3ae <uxr_serialize_DATAWRITER_Representation+0x1e>
 801d3cc:	4629      	mov	r1, r5
 801d3ce:	4630      	mov	r0, r6
 801d3d0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801d3d4:	3104      	adds	r1, #4
 801d3d6:	f7fe f83f 	bl	801b458 <ucdr_serialize_sequence_uint8_t>
 801d3da:	4604      	mov	r4, r0
 801d3dc:	e7e7      	b.n	801d3ae <uxr_serialize_DATAWRITER_Representation+0x1e>
 801d3de:	bf00      	nop

0801d3e0 <uxr_serialize_ObjectVariant.part.0>:
 801d3e0:	b570      	push	{r4, r5, r6, lr}
 801d3e2:	780b      	ldrb	r3, [r1, #0]
 801d3e4:	460c      	mov	r4, r1
 801d3e6:	4605      	mov	r5, r0
 801d3e8:	3b01      	subs	r3, #1
 801d3ea:	2b0d      	cmp	r3, #13
 801d3ec:	d854      	bhi.n	801d498 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801d3ee:	e8df f003 	tbb	[pc, r3]
 801d3f2:	0730      	.short	0x0730
 801d3f4:	07071b1b 	.word	0x07071b1b
 801d3f8:	0c530707 	.word	0x0c530707
 801d3fc:	494e0c0c 	.word	0x494e0c0c
 801d400:	3104      	adds	r1, #4
 801d402:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d406:	f7ff bfc3 	b.w	801d390 <uxr_serialize_DATAWRITER_Representation>
 801d40a:	7909      	ldrb	r1, [r1, #4]
 801d40c:	f7fc ffd8 	bl	801a3c0 <ucdr_serialize_uint8_t>
 801d410:	b1e8      	cbz	r0, 801d44e <uxr_serialize_ObjectVariant.part.0+0x6e>
 801d412:	7923      	ldrb	r3, [r4, #4]
 801d414:	2b01      	cmp	r3, #1
 801d416:	d001      	beq.n	801d41c <uxr_serialize_ObjectVariant.part.0+0x3c>
 801d418:	2b02      	cmp	r3, #2
 801d41a:	d13d      	bne.n	801d498 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801d41c:	68a1      	ldr	r1, [r4, #8]
 801d41e:	4628      	mov	r0, r5
 801d420:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d424:	f005 bbcc 	b.w	8022bc0 <ucdr_serialize_string>
 801d428:	7909      	ldrb	r1, [r1, #4]
 801d42a:	f7fc ffc9 	bl	801a3c0 <ucdr_serialize_uint8_t>
 801d42e:	4606      	mov	r6, r0
 801d430:	b120      	cbz	r0, 801d43c <uxr_serialize_ObjectVariant.part.0+0x5c>
 801d432:	7923      	ldrb	r3, [r4, #4]
 801d434:	2b02      	cmp	r3, #2
 801d436:	d039      	beq.n	801d4ac <uxr_serialize_ObjectVariant.part.0+0xcc>
 801d438:	2b03      	cmp	r3, #3
 801d43a:	d02f      	beq.n	801d49c <uxr_serialize_ObjectVariant.part.0+0xbc>
 801d43c:	2202      	movs	r2, #2
 801d43e:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801d442:	4628      	mov	r0, r5
 801d444:	f005 faf0 	bl	8022a28 <ucdr_serialize_array_uint8_t>
 801d448:	4030      	ands	r0, r6
 801d44a:	b2c0      	uxtb	r0, r0
 801d44c:	bd70      	pop	{r4, r5, r6, pc}
 801d44e:	2000      	movs	r0, #0
 801d450:	bd70      	pop	{r4, r5, r6, pc}
 801d452:	7909      	ldrb	r1, [r1, #4]
 801d454:	f7fc ffb4 	bl	801a3c0 <ucdr_serialize_uint8_t>
 801d458:	4606      	mov	r6, r0
 801d45a:	b158      	cbz	r0, 801d474 <uxr_serialize_ObjectVariant.part.0+0x94>
 801d45c:	7923      	ldrb	r3, [r4, #4]
 801d45e:	2b02      	cmp	r3, #2
 801d460:	d003      	beq.n	801d46a <uxr_serialize_ObjectVariant.part.0+0x8a>
 801d462:	2b03      	cmp	r3, #3
 801d464:	d028      	beq.n	801d4b8 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801d466:	2b01      	cmp	r3, #1
 801d468:	d104      	bne.n	801d474 <uxr_serialize_ObjectVariant.part.0+0x94>
 801d46a:	68a1      	ldr	r1, [r4, #8]
 801d46c:	4628      	mov	r0, r5
 801d46e:	f005 fba7 	bl	8022bc0 <ucdr_serialize_string>
 801d472:	4606      	mov	r6, r0
 801d474:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 801d478:	4628      	mov	r0, r5
 801d47a:	f7fd fcdd 	bl	801ae38 <ucdr_serialize_int16_t>
 801d47e:	4030      	ands	r0, r6
 801d480:	b2c0      	uxtb	r0, r0
 801d482:	bd70      	pop	{r4, r5, r6, pc}
 801d484:	3104      	adds	r1, #4
 801d486:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d48a:	f7ff be7b 	b.w	801d184 <uxr_serialize_CLIENT_Representation>
 801d48e:	3104      	adds	r1, #4
 801d490:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d494:	f7ff bf32 	b.w	801d2fc <uxr_serialize_AGENT_Representation>
 801d498:	2001      	movs	r0, #1
 801d49a:	bd70      	pop	{r4, r5, r6, pc}
 801d49c:	68a2      	ldr	r2, [r4, #8]
 801d49e:	f104 010c 	add.w	r1, r4, #12
 801d4a2:	4628      	mov	r0, r5
 801d4a4:	f7fd ffd8 	bl	801b458 <ucdr_serialize_sequence_uint8_t>
 801d4a8:	4606      	mov	r6, r0
 801d4aa:	e7c7      	b.n	801d43c <uxr_serialize_ObjectVariant.part.0+0x5c>
 801d4ac:	68a1      	ldr	r1, [r4, #8]
 801d4ae:	4628      	mov	r0, r5
 801d4b0:	f005 fb86 	bl	8022bc0 <ucdr_serialize_string>
 801d4b4:	4606      	mov	r6, r0
 801d4b6:	e7c1      	b.n	801d43c <uxr_serialize_ObjectVariant.part.0+0x5c>
 801d4b8:	68a2      	ldr	r2, [r4, #8]
 801d4ba:	f104 010c 	add.w	r1, r4, #12
 801d4be:	4628      	mov	r0, r5
 801d4c0:	f7fd ffca 	bl	801b458 <ucdr_serialize_sequence_uint8_t>
 801d4c4:	4606      	mov	r6, r0
 801d4c6:	e7d5      	b.n	801d474 <uxr_serialize_ObjectVariant.part.0+0x94>

0801d4c8 <uxr_deserialize_DATAWRITER_Representation>:
 801d4c8:	b570      	push	{r4, r5, r6, lr}
 801d4ca:	4606      	mov	r6, r0
 801d4cc:	460d      	mov	r5, r1
 801d4ce:	f7fc ff8d 	bl	801a3ec <ucdr_deserialize_uint8_t>
 801d4d2:	4604      	mov	r4, r0
 801d4d4:	b130      	cbz	r0, 801d4e4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801d4d6:	782b      	ldrb	r3, [r5, #0]
 801d4d8:	2b02      	cmp	r3, #2
 801d4da:	d00c      	beq.n	801d4f6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801d4dc:	2b03      	cmp	r3, #3
 801d4de:	d012      	beq.n	801d506 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 801d4e0:	2b01      	cmp	r3, #1
 801d4e2:	d008      	beq.n	801d4f6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801d4e4:	2202      	movs	r2, #2
 801d4e6:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801d4ea:	4630      	mov	r0, r6
 801d4ec:	f005 fb00 	bl	8022af0 <ucdr_deserialize_array_uint8_t>
 801d4f0:	4020      	ands	r0, r4
 801d4f2:	b2c0      	uxtb	r0, r0
 801d4f4:	bd70      	pop	{r4, r5, r6, pc}
 801d4f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801d4fa:	6869      	ldr	r1, [r5, #4]
 801d4fc:	4630      	mov	r0, r6
 801d4fe:	f005 fb6f 	bl	8022be0 <ucdr_deserialize_string>
 801d502:	4604      	mov	r4, r0
 801d504:	e7ee      	b.n	801d4e4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801d506:	1d2b      	adds	r3, r5, #4
 801d508:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801d50c:	f105 0108 	add.w	r1, r5, #8
 801d510:	4630      	mov	r0, r6
 801d512:	f7fd ffb3 	bl	801b47c <ucdr_deserialize_sequence_uint8_t>
 801d516:	4604      	mov	r4, r0
 801d518:	e7e4      	b.n	801d4e4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801d51a:	bf00      	nop

0801d51c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801d51c:	b570      	push	{r4, r5, r6, lr}
 801d51e:	460d      	mov	r5, r1
 801d520:	7809      	ldrb	r1, [r1, #0]
 801d522:	4606      	mov	r6, r0
 801d524:	f7fc ff1e 	bl	801a364 <ucdr_serialize_bool>
 801d528:	782b      	ldrb	r3, [r5, #0]
 801d52a:	4604      	mov	r4, r0
 801d52c:	b94b      	cbnz	r3, 801d542 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801d52e:	7a29      	ldrb	r1, [r5, #8]
 801d530:	4630      	mov	r0, r6
 801d532:	f7fc ff17 	bl	801a364 <ucdr_serialize_bool>
 801d536:	7a2b      	ldrb	r3, [r5, #8]
 801d538:	4004      	ands	r4, r0
 801d53a:	b2e4      	uxtb	r4, r4
 801d53c:	b943      	cbnz	r3, 801d550 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801d53e:	4620      	mov	r0, r4
 801d540:	bd70      	pop	{r4, r5, r6, pc}
 801d542:	6869      	ldr	r1, [r5, #4]
 801d544:	4630      	mov	r0, r6
 801d546:	f005 fb3b 	bl	8022bc0 <ucdr_serialize_string>
 801d54a:	4004      	ands	r4, r0
 801d54c:	b2e4      	uxtb	r4, r4
 801d54e:	e7ee      	b.n	801d52e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801d550:	68e9      	ldr	r1, [r5, #12]
 801d552:	4630      	mov	r0, r6
 801d554:	f005 fb34 	bl	8022bc0 <ucdr_serialize_string>
 801d558:	4004      	ands	r4, r0
 801d55a:	4620      	mov	r0, r4
 801d55c:	bd70      	pop	{r4, r5, r6, pc}
 801d55e:	bf00      	nop

0801d560 <uxr_serialize_OBJK_Topic_Binary>:
 801d560:	b570      	push	{r4, r5, r6, lr}
 801d562:	460d      	mov	r5, r1
 801d564:	4606      	mov	r6, r0
 801d566:	6809      	ldr	r1, [r1, #0]
 801d568:	f005 fb2a 	bl	8022bc0 <ucdr_serialize_string>
 801d56c:	4604      	mov	r4, r0
 801d56e:	7929      	ldrb	r1, [r5, #4]
 801d570:	4630      	mov	r0, r6
 801d572:	f7fc fef7 	bl	801a364 <ucdr_serialize_bool>
 801d576:	792b      	ldrb	r3, [r5, #4]
 801d578:	4004      	ands	r4, r0
 801d57a:	b2e4      	uxtb	r4, r4
 801d57c:	b943      	cbnz	r3, 801d590 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801d57e:	7b29      	ldrb	r1, [r5, #12]
 801d580:	4630      	mov	r0, r6
 801d582:	f7fc feef 	bl	801a364 <ucdr_serialize_bool>
 801d586:	7b2b      	ldrb	r3, [r5, #12]
 801d588:	4004      	ands	r4, r0
 801d58a:	b93b      	cbnz	r3, 801d59c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801d58c:	4620      	mov	r0, r4
 801d58e:	bd70      	pop	{r4, r5, r6, pc}
 801d590:	68a9      	ldr	r1, [r5, #8]
 801d592:	4630      	mov	r0, r6
 801d594:	f005 fb14 	bl	8022bc0 <ucdr_serialize_string>
 801d598:	4004      	ands	r4, r0
 801d59a:	e7f0      	b.n	801d57e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801d59c:	6929      	ldr	r1, [r5, #16]
 801d59e:	4630      	mov	r0, r6
 801d5a0:	f005 fb0e 	bl	8022bc0 <ucdr_serialize_string>
 801d5a4:	4004      	ands	r4, r0
 801d5a6:	b2e4      	uxtb	r4, r4
 801d5a8:	4620      	mov	r0, r4
 801d5aa:	bd70      	pop	{r4, r5, r6, pc}

0801d5ac <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801d5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d5b0:	460c      	mov	r4, r1
 801d5b2:	7809      	ldrb	r1, [r1, #0]
 801d5b4:	4606      	mov	r6, r0
 801d5b6:	f7fc fed5 	bl	801a364 <ucdr_serialize_bool>
 801d5ba:	7823      	ldrb	r3, [r4, #0]
 801d5bc:	4605      	mov	r5, r0
 801d5be:	b96b      	cbnz	r3, 801d5dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 801d5c0:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801d5c4:	4630      	mov	r0, r6
 801d5c6:	f7fc fecd 	bl	801a364 <ucdr_serialize_bool>
 801d5ca:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801d5ce:	4005      	ands	r5, r0
 801d5d0:	b2ed      	uxtb	r5, r5
 801d5d2:	2b00      	cmp	r3, #0
 801d5d4:	d169      	bne.n	801d6aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801d5d6:	4628      	mov	r0, r5
 801d5d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d5dc:	6861      	ldr	r1, [r4, #4]
 801d5de:	4630      	mov	r0, r6
 801d5e0:	f7fd f904 	bl	801a7ec <ucdr_serialize_uint32_t>
 801d5e4:	6863      	ldr	r3, [r4, #4]
 801d5e6:	2b00      	cmp	r3, #0
 801d5e8:	d06b      	beq.n	801d6c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801d5ea:	2800      	cmp	r0, #0
 801d5ec:	d067      	beq.n	801d6be <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801d5ee:	68a1      	ldr	r1, [r4, #8]
 801d5f0:	4630      	mov	r0, r6
 801d5f2:	f005 fae5 	bl	8022bc0 <ucdr_serialize_string>
 801d5f6:	6863      	ldr	r3, [r4, #4]
 801d5f8:	2b01      	cmp	r3, #1
 801d5fa:	d953      	bls.n	801d6a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801d5fc:	2800      	cmp	r0, #0
 801d5fe:	d05e      	beq.n	801d6be <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801d600:	68e1      	ldr	r1, [r4, #12]
 801d602:	4630      	mov	r0, r6
 801d604:	f005 fadc 	bl	8022bc0 <ucdr_serialize_string>
 801d608:	6863      	ldr	r3, [r4, #4]
 801d60a:	2b02      	cmp	r3, #2
 801d60c:	d94a      	bls.n	801d6a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801d60e:	2800      	cmp	r0, #0
 801d610:	d055      	beq.n	801d6be <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801d612:	6921      	ldr	r1, [r4, #16]
 801d614:	4630      	mov	r0, r6
 801d616:	f005 fad3 	bl	8022bc0 <ucdr_serialize_string>
 801d61a:	6863      	ldr	r3, [r4, #4]
 801d61c:	2b03      	cmp	r3, #3
 801d61e:	d941      	bls.n	801d6a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801d620:	2800      	cmp	r0, #0
 801d622:	d04c      	beq.n	801d6be <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801d624:	6961      	ldr	r1, [r4, #20]
 801d626:	4630      	mov	r0, r6
 801d628:	f005 faca 	bl	8022bc0 <ucdr_serialize_string>
 801d62c:	6863      	ldr	r3, [r4, #4]
 801d62e:	2b04      	cmp	r3, #4
 801d630:	d938      	bls.n	801d6a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801d632:	2800      	cmp	r0, #0
 801d634:	d043      	beq.n	801d6be <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801d636:	69a1      	ldr	r1, [r4, #24]
 801d638:	4630      	mov	r0, r6
 801d63a:	f005 fac1 	bl	8022bc0 <ucdr_serialize_string>
 801d63e:	6863      	ldr	r3, [r4, #4]
 801d640:	2b05      	cmp	r3, #5
 801d642:	d92f      	bls.n	801d6a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801d644:	2800      	cmp	r0, #0
 801d646:	d03a      	beq.n	801d6be <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801d648:	69e1      	ldr	r1, [r4, #28]
 801d64a:	4630      	mov	r0, r6
 801d64c:	f005 fab8 	bl	8022bc0 <ucdr_serialize_string>
 801d650:	6863      	ldr	r3, [r4, #4]
 801d652:	2b06      	cmp	r3, #6
 801d654:	d926      	bls.n	801d6a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801d656:	b390      	cbz	r0, 801d6be <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801d658:	6a21      	ldr	r1, [r4, #32]
 801d65a:	4630      	mov	r0, r6
 801d65c:	f005 fab0 	bl	8022bc0 <ucdr_serialize_string>
 801d660:	6863      	ldr	r3, [r4, #4]
 801d662:	2b07      	cmp	r3, #7
 801d664:	d91e      	bls.n	801d6a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801d666:	b350      	cbz	r0, 801d6be <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801d668:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801d66a:	4630      	mov	r0, r6
 801d66c:	f005 faa8 	bl	8022bc0 <ucdr_serialize_string>
 801d670:	6863      	ldr	r3, [r4, #4]
 801d672:	2b08      	cmp	r3, #8
 801d674:	d916      	bls.n	801d6a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801d676:	b310      	cbz	r0, 801d6be <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801d678:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801d67a:	4630      	mov	r0, r6
 801d67c:	f005 faa0 	bl	8022bc0 <ucdr_serialize_string>
 801d680:	6863      	ldr	r3, [r4, #4]
 801d682:	2b09      	cmp	r3, #9
 801d684:	d90e      	bls.n	801d6a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801d686:	b1d0      	cbz	r0, 801d6be <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801d688:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801d68c:	2709      	movs	r7, #9
 801d68e:	e000      	b.n	801d692 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 801d690:	b1a8      	cbz	r0, 801d6be <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801d692:	f858 1b04 	ldr.w	r1, [r8], #4
 801d696:	4630      	mov	r0, r6
 801d698:	f005 fa92 	bl	8022bc0 <ucdr_serialize_string>
 801d69c:	3701      	adds	r7, #1
 801d69e:	6862      	ldr	r2, [r4, #4]
 801d6a0:	4297      	cmp	r7, r2
 801d6a2:	d3f5      	bcc.n	801d690 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801d6a4:	4005      	ands	r5, r0
 801d6a6:	b2ed      	uxtb	r5, r5
 801d6a8:	e78a      	b.n	801d5c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801d6aa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801d6ac:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801d6b0:	4630      	mov	r0, r6
 801d6b2:	f7fd fed1 	bl	801b458 <ucdr_serialize_sequence_uint8_t>
 801d6b6:	4005      	ands	r5, r0
 801d6b8:	4628      	mov	r0, r5
 801d6ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d6be:	2500      	movs	r5, #0
 801d6c0:	e77e      	b.n	801d5c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801d6c2:	4028      	ands	r0, r5
 801d6c4:	b2c5      	uxtb	r5, r0
 801d6c6:	e77b      	b.n	801d5c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0801d6c8 <uxr_serialize_OBJK_Publisher_Binary>:
 801d6c8:	b570      	push	{r4, r5, r6, lr}
 801d6ca:	460d      	mov	r5, r1
 801d6cc:	7809      	ldrb	r1, [r1, #0]
 801d6ce:	4606      	mov	r6, r0
 801d6d0:	f7fc fe48 	bl	801a364 <ucdr_serialize_bool>
 801d6d4:	782b      	ldrb	r3, [r5, #0]
 801d6d6:	4604      	mov	r4, r0
 801d6d8:	b94b      	cbnz	r3, 801d6ee <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801d6da:	7a29      	ldrb	r1, [r5, #8]
 801d6dc:	4630      	mov	r0, r6
 801d6de:	f7fc fe41 	bl	801a364 <ucdr_serialize_bool>
 801d6e2:	7a2b      	ldrb	r3, [r5, #8]
 801d6e4:	4004      	ands	r4, r0
 801d6e6:	b2e4      	uxtb	r4, r4
 801d6e8:	b943      	cbnz	r3, 801d6fc <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801d6ea:	4620      	mov	r0, r4
 801d6ec:	bd70      	pop	{r4, r5, r6, pc}
 801d6ee:	6869      	ldr	r1, [r5, #4]
 801d6f0:	4630      	mov	r0, r6
 801d6f2:	f005 fa65 	bl	8022bc0 <ucdr_serialize_string>
 801d6f6:	4004      	ands	r4, r0
 801d6f8:	b2e4      	uxtb	r4, r4
 801d6fa:	e7ee      	b.n	801d6da <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801d6fc:	f105 010c 	add.w	r1, r5, #12
 801d700:	4630      	mov	r0, r6
 801d702:	f7ff ff53 	bl	801d5ac <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801d706:	4004      	ands	r4, r0
 801d708:	4620      	mov	r0, r4
 801d70a:	bd70      	pop	{r4, r5, r6, pc}

0801d70c <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 801d70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d710:	460c      	mov	r4, r1
 801d712:	7809      	ldrb	r1, [r1, #0]
 801d714:	4606      	mov	r6, r0
 801d716:	f7fc fe25 	bl	801a364 <ucdr_serialize_bool>
 801d71a:	7823      	ldrb	r3, [r4, #0]
 801d71c:	4605      	mov	r5, r0
 801d71e:	b96b      	cbnz	r3, 801d73c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 801d720:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801d724:	4630      	mov	r0, r6
 801d726:	f7fc fe1d 	bl	801a364 <ucdr_serialize_bool>
 801d72a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801d72e:	4005      	ands	r5, r0
 801d730:	b2ed      	uxtb	r5, r5
 801d732:	2b00      	cmp	r3, #0
 801d734:	d169      	bne.n	801d80a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801d736:	4628      	mov	r0, r5
 801d738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d73c:	6861      	ldr	r1, [r4, #4]
 801d73e:	4630      	mov	r0, r6
 801d740:	f7fd f854 	bl	801a7ec <ucdr_serialize_uint32_t>
 801d744:	6863      	ldr	r3, [r4, #4]
 801d746:	2b00      	cmp	r3, #0
 801d748:	d06b      	beq.n	801d822 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801d74a:	2800      	cmp	r0, #0
 801d74c:	d067      	beq.n	801d81e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801d74e:	68a1      	ldr	r1, [r4, #8]
 801d750:	4630      	mov	r0, r6
 801d752:	f005 fa35 	bl	8022bc0 <ucdr_serialize_string>
 801d756:	6863      	ldr	r3, [r4, #4]
 801d758:	2b01      	cmp	r3, #1
 801d75a:	d953      	bls.n	801d804 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801d75c:	2800      	cmp	r0, #0
 801d75e:	d05e      	beq.n	801d81e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801d760:	68e1      	ldr	r1, [r4, #12]
 801d762:	4630      	mov	r0, r6
 801d764:	f005 fa2c 	bl	8022bc0 <ucdr_serialize_string>
 801d768:	6863      	ldr	r3, [r4, #4]
 801d76a:	2b02      	cmp	r3, #2
 801d76c:	d94a      	bls.n	801d804 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801d76e:	2800      	cmp	r0, #0
 801d770:	d055      	beq.n	801d81e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801d772:	6921      	ldr	r1, [r4, #16]
 801d774:	4630      	mov	r0, r6
 801d776:	f005 fa23 	bl	8022bc0 <ucdr_serialize_string>
 801d77a:	6863      	ldr	r3, [r4, #4]
 801d77c:	2b03      	cmp	r3, #3
 801d77e:	d941      	bls.n	801d804 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801d780:	2800      	cmp	r0, #0
 801d782:	d04c      	beq.n	801d81e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801d784:	6961      	ldr	r1, [r4, #20]
 801d786:	4630      	mov	r0, r6
 801d788:	f005 fa1a 	bl	8022bc0 <ucdr_serialize_string>
 801d78c:	6863      	ldr	r3, [r4, #4]
 801d78e:	2b04      	cmp	r3, #4
 801d790:	d938      	bls.n	801d804 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801d792:	2800      	cmp	r0, #0
 801d794:	d043      	beq.n	801d81e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801d796:	69a1      	ldr	r1, [r4, #24]
 801d798:	4630      	mov	r0, r6
 801d79a:	f005 fa11 	bl	8022bc0 <ucdr_serialize_string>
 801d79e:	6863      	ldr	r3, [r4, #4]
 801d7a0:	2b05      	cmp	r3, #5
 801d7a2:	d92f      	bls.n	801d804 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801d7a4:	2800      	cmp	r0, #0
 801d7a6:	d03a      	beq.n	801d81e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801d7a8:	69e1      	ldr	r1, [r4, #28]
 801d7aa:	4630      	mov	r0, r6
 801d7ac:	f005 fa08 	bl	8022bc0 <ucdr_serialize_string>
 801d7b0:	6863      	ldr	r3, [r4, #4]
 801d7b2:	2b06      	cmp	r3, #6
 801d7b4:	d926      	bls.n	801d804 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801d7b6:	b390      	cbz	r0, 801d81e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801d7b8:	6a21      	ldr	r1, [r4, #32]
 801d7ba:	4630      	mov	r0, r6
 801d7bc:	f005 fa00 	bl	8022bc0 <ucdr_serialize_string>
 801d7c0:	6863      	ldr	r3, [r4, #4]
 801d7c2:	2b07      	cmp	r3, #7
 801d7c4:	d91e      	bls.n	801d804 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801d7c6:	b350      	cbz	r0, 801d81e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801d7c8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801d7ca:	4630      	mov	r0, r6
 801d7cc:	f005 f9f8 	bl	8022bc0 <ucdr_serialize_string>
 801d7d0:	6863      	ldr	r3, [r4, #4]
 801d7d2:	2b08      	cmp	r3, #8
 801d7d4:	d916      	bls.n	801d804 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801d7d6:	b310      	cbz	r0, 801d81e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801d7d8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801d7da:	4630      	mov	r0, r6
 801d7dc:	f005 f9f0 	bl	8022bc0 <ucdr_serialize_string>
 801d7e0:	6863      	ldr	r3, [r4, #4]
 801d7e2:	2b09      	cmp	r3, #9
 801d7e4:	d90e      	bls.n	801d804 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801d7e6:	b1d0      	cbz	r0, 801d81e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801d7e8:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801d7ec:	2709      	movs	r7, #9
 801d7ee:	e000      	b.n	801d7f2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 801d7f0:	b1a8      	cbz	r0, 801d81e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801d7f2:	f858 1b04 	ldr.w	r1, [r8], #4
 801d7f6:	4630      	mov	r0, r6
 801d7f8:	f005 f9e2 	bl	8022bc0 <ucdr_serialize_string>
 801d7fc:	3701      	adds	r7, #1
 801d7fe:	6862      	ldr	r2, [r4, #4]
 801d800:	4297      	cmp	r7, r2
 801d802:	d3f5      	bcc.n	801d7f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 801d804:	4005      	ands	r5, r0
 801d806:	b2ed      	uxtb	r5, r5
 801d808:	e78a      	b.n	801d720 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801d80a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801d80c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801d810:	4630      	mov	r0, r6
 801d812:	f7fd fe21 	bl	801b458 <ucdr_serialize_sequence_uint8_t>
 801d816:	4005      	ands	r5, r0
 801d818:	4628      	mov	r0, r5
 801d81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d81e:	2500      	movs	r5, #0
 801d820:	e77e      	b.n	801d720 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801d822:	4028      	ands	r0, r5
 801d824:	b2c5      	uxtb	r5, r0
 801d826:	e77b      	b.n	801d720 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0801d828 <uxr_serialize_OBJK_Subscriber_Binary>:
 801d828:	b570      	push	{r4, r5, r6, lr}
 801d82a:	460d      	mov	r5, r1
 801d82c:	7809      	ldrb	r1, [r1, #0]
 801d82e:	4606      	mov	r6, r0
 801d830:	f7fc fd98 	bl	801a364 <ucdr_serialize_bool>
 801d834:	782b      	ldrb	r3, [r5, #0]
 801d836:	4604      	mov	r4, r0
 801d838:	b94b      	cbnz	r3, 801d84e <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801d83a:	7a29      	ldrb	r1, [r5, #8]
 801d83c:	4630      	mov	r0, r6
 801d83e:	f7fc fd91 	bl	801a364 <ucdr_serialize_bool>
 801d842:	7a2b      	ldrb	r3, [r5, #8]
 801d844:	4004      	ands	r4, r0
 801d846:	b2e4      	uxtb	r4, r4
 801d848:	b943      	cbnz	r3, 801d85c <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801d84a:	4620      	mov	r0, r4
 801d84c:	bd70      	pop	{r4, r5, r6, pc}
 801d84e:	6869      	ldr	r1, [r5, #4]
 801d850:	4630      	mov	r0, r6
 801d852:	f005 f9b5 	bl	8022bc0 <ucdr_serialize_string>
 801d856:	4004      	ands	r4, r0
 801d858:	b2e4      	uxtb	r4, r4
 801d85a:	e7ee      	b.n	801d83a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801d85c:	f105 010c 	add.w	r1, r5, #12
 801d860:	4630      	mov	r0, r6
 801d862:	f7ff ff53 	bl	801d70c <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801d866:	4004      	ands	r4, r0
 801d868:	4620      	mov	r0, r4
 801d86a:	bd70      	pop	{r4, r5, r6, pc}

0801d86c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801d86c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 801d870:	4688      	mov	r8, r1
 801d872:	4681      	mov	r9, r0
 801d874:	8809      	ldrh	r1, [r1, #0]
 801d876:	f7fc fdcf 	bl	801a418 <ucdr_serialize_uint16_t>
 801d87a:	4606      	mov	r6, r0
 801d87c:	f898 1002 	ldrb.w	r1, [r8, #2]
 801d880:	4648      	mov	r0, r9
 801d882:	f7fc fd6f 	bl	801a364 <ucdr_serialize_bool>
 801d886:	f898 3002 	ldrb.w	r3, [r8, #2]
 801d88a:	4006      	ands	r6, r0
 801d88c:	b2f5      	uxtb	r5, r6
 801d88e:	b9eb      	cbnz	r3, 801d8cc <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801d890:	f898 1006 	ldrb.w	r1, [r8, #6]
 801d894:	4648      	mov	r0, r9
 801d896:	f7fc fd65 	bl	801a364 <ucdr_serialize_bool>
 801d89a:	f898 3006 	ldrb.w	r3, [r8, #6]
 801d89e:	4005      	ands	r5, r0
 801d8a0:	bb7b      	cbnz	r3, 801d902 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801d8a2:	f898 100c 	ldrb.w	r1, [r8, #12]
 801d8a6:	4648      	mov	r0, r9
 801d8a8:	f7fc fd5c 	bl	801a364 <ucdr_serialize_bool>
 801d8ac:	f898 300c 	ldrb.w	r3, [r8, #12]
 801d8b0:	4005      	ands	r5, r0
 801d8b2:	b9f3      	cbnz	r3, 801d8f2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801d8b4:	f898 1014 	ldrb.w	r1, [r8, #20]
 801d8b8:	4648      	mov	r0, r9
 801d8ba:	f7fc fd53 	bl	801a364 <ucdr_serialize_bool>
 801d8be:	f898 3014 	ldrb.w	r3, [r8, #20]
 801d8c2:	4005      	ands	r5, r0
 801d8c4:	b94b      	cbnz	r3, 801d8da <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801d8c6:	4628      	mov	r0, r5
 801d8c8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801d8cc:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801d8d0:	4648      	mov	r0, r9
 801d8d2:	f7fc fda1 	bl	801a418 <ucdr_serialize_uint16_t>
 801d8d6:	4005      	ands	r5, r0
 801d8d8:	e7da      	b.n	801d890 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801d8da:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801d8de:	f108 011c 	add.w	r1, r8, #28
 801d8e2:	4648      	mov	r0, r9
 801d8e4:	f7fd fdb8 	bl	801b458 <ucdr_serialize_sequence_uint8_t>
 801d8e8:	4028      	ands	r0, r5
 801d8ea:	b2c5      	uxtb	r5, r0
 801d8ec:	4628      	mov	r0, r5
 801d8ee:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801d8f2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801d8f6:	4648      	mov	r0, r9
 801d8f8:	f7fc ff78 	bl	801a7ec <ucdr_serialize_uint32_t>
 801d8fc:	4028      	ands	r0, r5
 801d8fe:	b2c5      	uxtb	r5, r0
 801d900:	e7d8      	b.n	801d8b4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801d902:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801d906:	4648      	mov	r0, r9
 801d908:	f7fc ff70 	bl	801a7ec <ucdr_serialize_uint32_t>
 801d90c:	4028      	ands	r0, r5
 801d90e:	b2c5      	uxtb	r5, r0
 801d910:	e7c7      	b.n	801d8a2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801d912:	bf00      	nop

0801d914 <uxr_serialize_OBJK_DataReader_Binary>:
 801d914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d916:	2202      	movs	r2, #2
 801d918:	460c      	mov	r4, r1
 801d91a:	4606      	mov	r6, r0
 801d91c:	f005 f884 	bl	8022a28 <ucdr_serialize_array_uint8_t>
 801d920:	4605      	mov	r5, r0
 801d922:	78a1      	ldrb	r1, [r4, #2]
 801d924:	4630      	mov	r0, r6
 801d926:	f7fc fd1d 	bl	801a364 <ucdr_serialize_bool>
 801d92a:	78a3      	ldrb	r3, [r4, #2]
 801d92c:	4005      	ands	r5, r0
 801d92e:	b2ed      	uxtb	r5, r5
 801d930:	b90b      	cbnz	r3, 801d936 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801d932:	4628      	mov	r0, r5
 801d934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d936:	f104 0108 	add.w	r1, r4, #8
 801d93a:	4630      	mov	r0, r6
 801d93c:	f7ff ff96 	bl	801d86c <uxr_serialize_OBJK_Endpoint_QosBinary>
 801d940:	4607      	mov	r7, r0
 801d942:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801d946:	4630      	mov	r0, r6
 801d948:	f7fc fd0c 	bl	801a364 <ucdr_serialize_bool>
 801d94c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801d950:	4038      	ands	r0, r7
 801d952:	b2c7      	uxtb	r7, r0
 801d954:	b95b      	cbnz	r3, 801d96e <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801d956:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801d95a:	4630      	mov	r0, r6
 801d95c:	f7fc fd02 	bl	801a364 <ucdr_serialize_bool>
 801d960:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801d964:	4007      	ands	r7, r0
 801d966:	b94b      	cbnz	r3, 801d97c <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801d968:	403d      	ands	r5, r7
 801d96a:	4628      	mov	r0, r5
 801d96c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d96e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 801d972:	4630      	mov	r0, r6
 801d974:	f7fd f990 	bl	801ac98 <ucdr_serialize_uint64_t>
 801d978:	4007      	ands	r7, r0
 801d97a:	e7ec      	b.n	801d956 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801d97c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801d97e:	4630      	mov	r0, r6
 801d980:	f005 f91e 	bl	8022bc0 <ucdr_serialize_string>
 801d984:	4007      	ands	r7, r0
 801d986:	b2ff      	uxtb	r7, r7
 801d988:	e7ee      	b.n	801d968 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801d98a:	bf00      	nop

0801d98c <uxr_serialize_OBJK_DataWriter_Binary>:
 801d98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d98e:	2202      	movs	r2, #2
 801d990:	460d      	mov	r5, r1
 801d992:	4606      	mov	r6, r0
 801d994:	f005 f848 	bl	8022a28 <ucdr_serialize_array_uint8_t>
 801d998:	4604      	mov	r4, r0
 801d99a:	78a9      	ldrb	r1, [r5, #2]
 801d99c:	4630      	mov	r0, r6
 801d99e:	f7fc fce1 	bl	801a364 <ucdr_serialize_bool>
 801d9a2:	78ab      	ldrb	r3, [r5, #2]
 801d9a4:	4004      	ands	r4, r0
 801d9a6:	b2e4      	uxtb	r4, r4
 801d9a8:	b90b      	cbnz	r3, 801d9ae <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801d9aa:	4620      	mov	r0, r4
 801d9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d9ae:	f105 0108 	add.w	r1, r5, #8
 801d9b2:	4630      	mov	r0, r6
 801d9b4:	f7ff ff5a 	bl	801d86c <uxr_serialize_OBJK_Endpoint_QosBinary>
 801d9b8:	4607      	mov	r7, r0
 801d9ba:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801d9be:	4630      	mov	r0, r6
 801d9c0:	f7fc fcd0 	bl	801a364 <ucdr_serialize_bool>
 801d9c4:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801d9c8:	4038      	ands	r0, r7
 801d9ca:	b2c7      	uxtb	r7, r0
 801d9cc:	b913      	cbnz	r3, 801d9d4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801d9ce:	403c      	ands	r4, r7
 801d9d0:	4620      	mov	r0, r4
 801d9d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d9d4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 801d9d8:	4630      	mov	r0, r6
 801d9da:	f7fd f95d 	bl	801ac98 <ucdr_serialize_uint64_t>
 801d9de:	4007      	ands	r7, r0
 801d9e0:	e7f5      	b.n	801d9ce <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801d9e2:	bf00      	nop

0801d9e4 <uxr_deserialize_ObjectVariant>:
 801d9e4:	b570      	push	{r4, r5, r6, lr}
 801d9e6:	4605      	mov	r5, r0
 801d9e8:	460e      	mov	r6, r1
 801d9ea:	f7fc fcff 	bl	801a3ec <ucdr_deserialize_uint8_t>
 801d9ee:	b168      	cbz	r0, 801da0c <uxr_deserialize_ObjectVariant+0x28>
 801d9f0:	7833      	ldrb	r3, [r6, #0]
 801d9f2:	4604      	mov	r4, r0
 801d9f4:	3b01      	subs	r3, #1
 801d9f6:	2b0d      	cmp	r3, #13
 801d9f8:	d809      	bhi.n	801da0e <uxr_deserialize_ObjectVariant+0x2a>
 801d9fa:	e8df f003 	tbb	[pc, r3]
 801d9fe:	0a41      	.short	0x0a41
 801da00:	0a0a2323 	.word	0x0a0a2323
 801da04:	10080a0a 	.word	0x10080a0a
 801da08:	565c1010 	.word	0x565c1010
 801da0c:	2400      	movs	r4, #0
 801da0e:	4620      	mov	r0, r4
 801da10:	bd70      	pop	{r4, r5, r6, pc}
 801da12:	1d31      	adds	r1, r6, #4
 801da14:	4628      	mov	r0, r5
 801da16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801da1a:	f7ff bd55 	b.w	801d4c8 <uxr_deserialize_DATAWRITER_Representation>
 801da1e:	1d31      	adds	r1, r6, #4
 801da20:	4628      	mov	r0, r5
 801da22:	f7fc fce3 	bl	801a3ec <ucdr_deserialize_uint8_t>
 801da26:	2800      	cmp	r0, #0
 801da28:	d0f0      	beq.n	801da0c <uxr_deserialize_ObjectVariant+0x28>
 801da2a:	7933      	ldrb	r3, [r6, #4]
 801da2c:	2b01      	cmp	r3, #1
 801da2e:	d001      	beq.n	801da34 <uxr_deserialize_ObjectVariant+0x50>
 801da30:	2b02      	cmp	r3, #2
 801da32:	d1ec      	bne.n	801da0e <uxr_deserialize_ObjectVariant+0x2a>
 801da34:	68b1      	ldr	r1, [r6, #8]
 801da36:	4628      	mov	r0, r5
 801da38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801da3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801da40:	f005 b8ce 	b.w	8022be0 <ucdr_deserialize_string>
 801da44:	1d31      	adds	r1, r6, #4
 801da46:	4628      	mov	r0, r5
 801da48:	f7fc fcd0 	bl	801a3ec <ucdr_deserialize_uint8_t>
 801da4c:	4604      	mov	r4, r0
 801da4e:	b170      	cbz	r0, 801da6e <uxr_deserialize_ObjectVariant+0x8a>
 801da50:	7933      	ldrb	r3, [r6, #4]
 801da52:	2b02      	cmp	r3, #2
 801da54:	d04c      	beq.n	801daf0 <uxr_deserialize_ObjectVariant+0x10c>
 801da56:	2b03      	cmp	r3, #3
 801da58:	d109      	bne.n	801da6e <uxr_deserialize_ObjectVariant+0x8a>
 801da5a:	f106 0308 	add.w	r3, r6, #8
 801da5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801da62:	f106 010c 	add.w	r1, r6, #12
 801da66:	4628      	mov	r0, r5
 801da68:	f7fd fd08 	bl	801b47c <ucdr_deserialize_sequence_uint8_t>
 801da6c:	4604      	mov	r4, r0
 801da6e:	2202      	movs	r2, #2
 801da70:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801da74:	4628      	mov	r0, r5
 801da76:	f005 f83b 	bl	8022af0 <ucdr_deserialize_array_uint8_t>
 801da7a:	4020      	ands	r0, r4
 801da7c:	b2c4      	uxtb	r4, r0
 801da7e:	e7c6      	b.n	801da0e <uxr_deserialize_ObjectVariant+0x2a>
 801da80:	1d31      	adds	r1, r6, #4
 801da82:	4628      	mov	r0, r5
 801da84:	f7fc fcb2 	bl	801a3ec <ucdr_deserialize_uint8_t>
 801da88:	4604      	mov	r4, r0
 801da8a:	b130      	cbz	r0, 801da9a <uxr_deserialize_ObjectVariant+0xb6>
 801da8c:	7933      	ldrb	r3, [r6, #4]
 801da8e:	2b02      	cmp	r3, #2
 801da90:	d036      	beq.n	801db00 <uxr_deserialize_ObjectVariant+0x11c>
 801da92:	2b03      	cmp	r3, #3
 801da94:	d03c      	beq.n	801db10 <uxr_deserialize_ObjectVariant+0x12c>
 801da96:	2b01      	cmp	r3, #1
 801da98:	d032      	beq.n	801db00 <uxr_deserialize_ObjectVariant+0x11c>
 801da9a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801da9e:	4628      	mov	r0, r5
 801daa0:	f7fd fa4a 	bl	801af38 <ucdr_deserialize_int16_t>
 801daa4:	4020      	ands	r0, r4
 801daa6:	b2c4      	uxtb	r4, r0
 801daa8:	e7b1      	b.n	801da0e <uxr_deserialize_ObjectVariant+0x2a>
 801daaa:	1d31      	adds	r1, r6, #4
 801daac:	4628      	mov	r0, r5
 801daae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dab2:	f7ff bbbf 	b.w	801d234 <uxr_deserialize_CLIENT_Representation>
 801dab6:	2204      	movs	r2, #4
 801dab8:	4628      	mov	r0, r5
 801daba:	18b1      	adds	r1, r6, r2
 801dabc:	f005 f818 	bl	8022af0 <ucdr_deserialize_array_uint8_t>
 801dac0:	4604      	mov	r4, r0
 801dac2:	2202      	movs	r2, #2
 801dac4:	f106 0108 	add.w	r1, r6, #8
 801dac8:	4628      	mov	r0, r5
 801daca:	f005 f811 	bl	8022af0 <ucdr_deserialize_array_uint8_t>
 801dace:	4004      	ands	r4, r0
 801dad0:	2202      	movs	r2, #2
 801dad2:	f106 010a 	add.w	r1, r6, #10
 801dad6:	4628      	mov	r0, r5
 801dad8:	b2e4      	uxtb	r4, r4
 801dada:	f005 f809 	bl	8022af0 <ucdr_deserialize_array_uint8_t>
 801dade:	4603      	mov	r3, r0
 801dae0:	f106 010c 	add.w	r1, r6, #12
 801dae4:	4628      	mov	r0, r5
 801dae6:	401c      	ands	r4, r3
 801dae8:	f7fc fc52 	bl	801a390 <ucdr_deserialize_bool>
 801daec:	4004      	ands	r4, r0
 801daee:	e78e      	b.n	801da0e <uxr_deserialize_ObjectVariant+0x2a>
 801daf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801daf4:	68b1      	ldr	r1, [r6, #8]
 801daf6:	4628      	mov	r0, r5
 801daf8:	f005 f872 	bl	8022be0 <ucdr_deserialize_string>
 801dafc:	4604      	mov	r4, r0
 801dafe:	e7b6      	b.n	801da6e <uxr_deserialize_ObjectVariant+0x8a>
 801db00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801db04:	68b1      	ldr	r1, [r6, #8]
 801db06:	4628      	mov	r0, r5
 801db08:	f005 f86a 	bl	8022be0 <ucdr_deserialize_string>
 801db0c:	4604      	mov	r4, r0
 801db0e:	e7c4      	b.n	801da9a <uxr_deserialize_ObjectVariant+0xb6>
 801db10:	f106 0308 	add.w	r3, r6, #8
 801db14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801db18:	f106 010c 	add.w	r1, r6, #12
 801db1c:	4628      	mov	r0, r5
 801db1e:	f7fd fcad 	bl	801b47c <ucdr_deserialize_sequence_uint8_t>
 801db22:	4604      	mov	r4, r0
 801db24:	e7b9      	b.n	801da9a <uxr_deserialize_ObjectVariant+0xb6>
 801db26:	bf00      	nop

0801db28 <uxr_deserialize_BaseObjectRequest>:
 801db28:	b570      	push	{r4, r5, r6, lr}
 801db2a:	2202      	movs	r2, #2
 801db2c:	4605      	mov	r5, r0
 801db2e:	460e      	mov	r6, r1
 801db30:	f004 ffde 	bl	8022af0 <ucdr_deserialize_array_uint8_t>
 801db34:	2202      	movs	r2, #2
 801db36:	4604      	mov	r4, r0
 801db38:	4628      	mov	r0, r5
 801db3a:	18b1      	adds	r1, r6, r2
 801db3c:	f004 ffd8 	bl	8022af0 <ucdr_deserialize_array_uint8_t>
 801db40:	4020      	ands	r0, r4
 801db42:	b2c0      	uxtb	r0, r0
 801db44:	bd70      	pop	{r4, r5, r6, pc}
 801db46:	bf00      	nop

0801db48 <uxr_serialize_ActivityInfoVariant>:
 801db48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801db4c:	460e      	mov	r6, r1
 801db4e:	7809      	ldrb	r1, [r1, #0]
 801db50:	4680      	mov	r8, r0
 801db52:	f7fc fc35 	bl	801a3c0 <ucdr_serialize_uint8_t>
 801db56:	4607      	mov	r7, r0
 801db58:	b138      	cbz	r0, 801db6a <uxr_serialize_ActivityInfoVariant+0x22>
 801db5a:	7833      	ldrb	r3, [r6, #0]
 801db5c:	2b06      	cmp	r3, #6
 801db5e:	f000 8081 	beq.w	801dc64 <uxr_serialize_ActivityInfoVariant+0x11c>
 801db62:	2b0d      	cmp	r3, #13
 801db64:	d014      	beq.n	801db90 <uxr_serialize_ActivityInfoVariant+0x48>
 801db66:	2b05      	cmp	r3, #5
 801db68:	d002      	beq.n	801db70 <uxr_serialize_ActivityInfoVariant+0x28>
 801db6a:	4638      	mov	r0, r7
 801db6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801db70:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801db74:	4640      	mov	r0, r8
 801db76:	f7fd f95f 	bl	801ae38 <ucdr_serialize_int16_t>
 801db7a:	4607      	mov	r7, r0
 801db7c:	4640      	mov	r0, r8
 801db7e:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801db82:	f7fd f889 	bl	801ac98 <ucdr_serialize_uint64_t>
 801db86:	4038      	ands	r0, r7
 801db88:	b2c7      	uxtb	r7, r0
 801db8a:	4638      	mov	r0, r7
 801db8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801db90:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801db94:	4640      	mov	r0, r8
 801db96:	f7fd f94f 	bl	801ae38 <ucdr_serialize_int16_t>
 801db9a:	68f1      	ldr	r1, [r6, #12]
 801db9c:	4607      	mov	r7, r0
 801db9e:	4640      	mov	r0, r8
 801dba0:	f7fc fe24 	bl	801a7ec <ucdr_serialize_uint32_t>
 801dba4:	68f3      	ldr	r3, [r6, #12]
 801dba6:	2b00      	cmp	r3, #0
 801dba8:	d0ed      	beq.n	801db86 <uxr_serialize_ActivityInfoVariant+0x3e>
 801dbaa:	b318      	cbz	r0, 801dbf4 <uxr_serialize_ActivityInfoVariant+0xac>
 801dbac:	f106 090c 	add.w	r9, r6, #12
 801dbb0:	2400      	movs	r4, #0
 801dbb2:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801dbb6:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801dbba:	7c29      	ldrb	r1, [r5, #16]
 801dbbc:	4640      	mov	r0, r8
 801dbbe:	f7fc fbff 	bl	801a3c0 <ucdr_serialize_uint8_t>
 801dbc2:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801dbc6:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801dbca:	2800      	cmp	r0, #0
 801dbcc:	d051      	beq.n	801dc72 <uxr_serialize_ActivityInfoVariant+0x12a>
 801dbce:	7c2b      	ldrb	r3, [r5, #16]
 801dbd0:	00c9      	lsls	r1, r1, #3
 801dbd2:	2b03      	cmp	r3, #3
 801dbd4:	d854      	bhi.n	801dc80 <uxr_serialize_ActivityInfoVariant+0x138>
 801dbd6:	e8df f003 	tbb	[pc, r3]
 801dbda:	2133      	.short	0x2133
 801dbdc:	020f      	.short	0x020f
 801dbde:	4449      	add	r1, r9
 801dbe0:	4640      	mov	r0, r8
 801dbe2:	6889      	ldr	r1, [r1, #8]
 801dbe4:	f004 ffec 	bl	8022bc0 <ucdr_serialize_string>
 801dbe8:	3401      	adds	r4, #1
 801dbea:	68f2      	ldr	r2, [r6, #12]
 801dbec:	4294      	cmp	r4, r2
 801dbee:	d244      	bcs.n	801dc7a <uxr_serialize_ActivityInfoVariant+0x132>
 801dbf0:	2800      	cmp	r0, #0
 801dbf2:	d1de      	bne.n	801dbb2 <uxr_serialize_ActivityInfoVariant+0x6a>
 801dbf4:	2700      	movs	r7, #0
 801dbf6:	e7b8      	b.n	801db6a <uxr_serialize_ActivityInfoVariant+0x22>
 801dbf8:	3108      	adds	r1, #8
 801dbfa:	44a2      	add	sl, r4
 801dbfc:	2210      	movs	r2, #16
 801dbfe:	4640      	mov	r0, r8
 801dc00:	4449      	add	r1, r9
 801dc02:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801dc06:	f004 ff0f 	bl	8022a28 <ucdr_serialize_array_uint8_t>
 801dc0a:	4605      	mov	r5, r0
 801dc0c:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 801dc10:	4640      	mov	r0, r8
 801dc12:	f7fc fdeb 	bl	801a7ec <ucdr_serialize_uint32_t>
 801dc16:	4028      	ands	r0, r5
 801dc18:	b2c0      	uxtb	r0, r0
 801dc1a:	e7e5      	b.n	801dbe8 <uxr_serialize_ActivityInfoVariant+0xa0>
 801dc1c:	3108      	adds	r1, #8
 801dc1e:	44a2      	add	sl, r4
 801dc20:	2204      	movs	r2, #4
 801dc22:	4640      	mov	r0, r8
 801dc24:	4449      	add	r1, r9
 801dc26:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801dc2a:	f004 fefd 	bl	8022a28 <ucdr_serialize_array_uint8_t>
 801dc2e:	4605      	mov	r5, r0
 801dc30:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 801dc34:	4640      	mov	r0, r8
 801dc36:	f7fc fbef 	bl	801a418 <ucdr_serialize_uint16_t>
 801dc3a:	4028      	ands	r0, r5
 801dc3c:	b2c0      	uxtb	r0, r0
 801dc3e:	e7d3      	b.n	801dbe8 <uxr_serialize_ActivityInfoVariant+0xa0>
 801dc40:	3108      	adds	r1, #8
 801dc42:	44a2      	add	sl, r4
 801dc44:	2202      	movs	r2, #2
 801dc46:	4640      	mov	r0, r8
 801dc48:	4449      	add	r1, r9
 801dc4a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801dc4e:	f004 feeb 	bl	8022a28 <ucdr_serialize_array_uint8_t>
 801dc52:	4605      	mov	r5, r0
 801dc54:	f89a 1016 	ldrb.w	r1, [sl, #22]
 801dc58:	4640      	mov	r0, r8
 801dc5a:	f7fc fbb1 	bl	801a3c0 <ucdr_serialize_uint8_t>
 801dc5e:	4028      	ands	r0, r5
 801dc60:	b2c0      	uxtb	r0, r0
 801dc62:	e7c1      	b.n	801dbe8 <uxr_serialize_ActivityInfoVariant+0xa0>
 801dc64:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801dc68:	4640      	mov	r0, r8
 801dc6a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dc6e:	f7fd b8e3 	b.w	801ae38 <ucdr_serialize_int16_t>
 801dc72:	3401      	adds	r4, #1
 801dc74:	68f2      	ldr	r2, [r6, #12]
 801dc76:	42a2      	cmp	r2, r4
 801dc78:	d8bc      	bhi.n	801dbf4 <uxr_serialize_ActivityInfoVariant+0xac>
 801dc7a:	4007      	ands	r7, r0
 801dc7c:	b2ff      	uxtb	r7, r7
 801dc7e:	e774      	b.n	801db6a <uxr_serialize_ActivityInfoVariant+0x22>
 801dc80:	3401      	adds	r4, #1
 801dc82:	68f3      	ldr	r3, [r6, #12]
 801dc84:	3518      	adds	r5, #24
 801dc86:	429c      	cmp	r4, r3
 801dc88:	d397      	bcc.n	801dbba <uxr_serialize_ActivityInfoVariant+0x72>
 801dc8a:	e76e      	b.n	801db6a <uxr_serialize_ActivityInfoVariant+0x22>

0801dc8c <uxr_deserialize_BaseObjectReply>:
 801dc8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc90:	2202      	movs	r2, #2
 801dc92:	4606      	mov	r6, r0
 801dc94:	460f      	mov	r7, r1
 801dc96:	f004 ff2b 	bl	8022af0 <ucdr_deserialize_array_uint8_t>
 801dc9a:	2202      	movs	r2, #2
 801dc9c:	4605      	mov	r5, r0
 801dc9e:	4630      	mov	r0, r6
 801dca0:	18b9      	adds	r1, r7, r2
 801dca2:	f004 ff25 	bl	8022af0 <ucdr_deserialize_array_uint8_t>
 801dca6:	4680      	mov	r8, r0
 801dca8:	1d39      	adds	r1, r7, #4
 801dcaa:	4630      	mov	r0, r6
 801dcac:	f7fc fb9e 	bl	801a3ec <ucdr_deserialize_uint8_t>
 801dcb0:	ea05 0508 	and.w	r5, r5, r8
 801dcb4:	4604      	mov	r4, r0
 801dcb6:	1d79      	adds	r1, r7, #5
 801dcb8:	4630      	mov	r0, r6
 801dcba:	402c      	ands	r4, r5
 801dcbc:	f7fc fb96 	bl	801a3ec <ucdr_deserialize_uint8_t>
 801dcc0:	4020      	ands	r0, r4
 801dcc2:	b2c0      	uxtb	r0, r0
 801dcc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801dcc8 <uxr_serialize_ReadSpecification>:
 801dcc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dcca:	460e      	mov	r6, r1
 801dccc:	4607      	mov	r7, r0
 801dcce:	7809      	ldrb	r1, [r1, #0]
 801dcd0:	f7fc fb76 	bl	801a3c0 <ucdr_serialize_uint8_t>
 801dcd4:	4604      	mov	r4, r0
 801dcd6:	7871      	ldrb	r1, [r6, #1]
 801dcd8:	4638      	mov	r0, r7
 801dcda:	f7fc fb71 	bl	801a3c0 <ucdr_serialize_uint8_t>
 801dcde:	4004      	ands	r4, r0
 801dce0:	78b1      	ldrb	r1, [r6, #2]
 801dce2:	4638      	mov	r0, r7
 801dce4:	f7fc fb3e 	bl	801a364 <ucdr_serialize_bool>
 801dce8:	78b3      	ldrb	r3, [r6, #2]
 801dcea:	b2e4      	uxtb	r4, r4
 801dcec:	4004      	ands	r4, r0
 801dcee:	b943      	cbnz	r3, 801dd02 <uxr_serialize_ReadSpecification+0x3a>
 801dcf0:	7a31      	ldrb	r1, [r6, #8]
 801dcf2:	4638      	mov	r0, r7
 801dcf4:	f7fc fb36 	bl	801a364 <ucdr_serialize_bool>
 801dcf8:	7a33      	ldrb	r3, [r6, #8]
 801dcfa:	4004      	ands	r4, r0
 801dcfc:	b93b      	cbnz	r3, 801dd0e <uxr_serialize_ReadSpecification+0x46>
 801dcfe:	4620      	mov	r0, r4
 801dd00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dd02:	6871      	ldr	r1, [r6, #4]
 801dd04:	4638      	mov	r0, r7
 801dd06:	f004 ff5b 	bl	8022bc0 <ucdr_serialize_string>
 801dd0a:	4004      	ands	r4, r0
 801dd0c:	e7f0      	b.n	801dcf0 <uxr_serialize_ReadSpecification+0x28>
 801dd0e:	8971      	ldrh	r1, [r6, #10]
 801dd10:	4638      	mov	r0, r7
 801dd12:	f7fc fb81 	bl	801a418 <ucdr_serialize_uint16_t>
 801dd16:	4605      	mov	r5, r0
 801dd18:	89b1      	ldrh	r1, [r6, #12]
 801dd1a:	4638      	mov	r0, r7
 801dd1c:	f7fc fb7c 	bl	801a418 <ucdr_serialize_uint16_t>
 801dd20:	4005      	ands	r5, r0
 801dd22:	89f1      	ldrh	r1, [r6, #14]
 801dd24:	4638      	mov	r0, r7
 801dd26:	b2ed      	uxtb	r5, r5
 801dd28:	f7fc fb76 	bl	801a418 <ucdr_serialize_uint16_t>
 801dd2c:	8a31      	ldrh	r1, [r6, #16]
 801dd2e:	4025      	ands	r5, r4
 801dd30:	4604      	mov	r4, r0
 801dd32:	4638      	mov	r0, r7
 801dd34:	4025      	ands	r5, r4
 801dd36:	f7fc fb6f 	bl	801a418 <ucdr_serialize_uint16_t>
 801dd3a:	ea00 0405 	and.w	r4, r0, r5
 801dd3e:	4620      	mov	r0, r4
 801dd40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dd42:	bf00      	nop

0801dd44 <uxr_serialize_CREATE_CLIENT_Payload>:
 801dd44:	f7ff ba1e 	b.w	801d184 <uxr_serialize_CLIENT_Representation>

0801dd48 <uxr_serialize_CREATE_Payload>:
 801dd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd4a:	2202      	movs	r2, #2
 801dd4c:	4607      	mov	r7, r0
 801dd4e:	460e      	mov	r6, r1
 801dd50:	f004 fe6a 	bl	8022a28 <ucdr_serialize_array_uint8_t>
 801dd54:	2202      	movs	r2, #2
 801dd56:	4605      	mov	r5, r0
 801dd58:	4638      	mov	r0, r7
 801dd5a:	18b1      	adds	r1, r6, r2
 801dd5c:	f004 fe64 	bl	8022a28 <ucdr_serialize_array_uint8_t>
 801dd60:	7931      	ldrb	r1, [r6, #4]
 801dd62:	4604      	mov	r4, r0
 801dd64:	4638      	mov	r0, r7
 801dd66:	f7fc fb2b 	bl	801a3c0 <ucdr_serialize_uint8_t>
 801dd6a:	b170      	cbz	r0, 801dd8a <uxr_serialize_CREATE_Payload+0x42>
 801dd6c:	7933      	ldrb	r3, [r6, #4]
 801dd6e:	402c      	ands	r4, r5
 801dd70:	3b01      	subs	r3, #1
 801dd72:	b2e4      	uxtb	r4, r4
 801dd74:	2b0d      	cmp	r3, #13
 801dd76:	d809      	bhi.n	801dd8c <uxr_serialize_CREATE_Payload+0x44>
 801dd78:	e8df f003 	tbb	[pc, r3]
 801dd7c:	23230a4c 	.word	0x23230a4c
 801dd80:	0a0a0a0a 	.word	0x0a0a0a0a
 801dd84:	12121208 	.word	0x12121208
 801dd88:	3e45      	.short	0x3e45
 801dd8a:	2400      	movs	r4, #0
 801dd8c:	4620      	mov	r0, r4
 801dd8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dd90:	f106 0108 	add.w	r1, r6, #8
 801dd94:	4638      	mov	r0, r7
 801dd96:	f7ff fafb 	bl	801d390 <uxr_serialize_DATAWRITER_Representation>
 801dd9a:	4004      	ands	r4, r0
 801dd9c:	4620      	mov	r0, r4
 801dd9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dda0:	7a31      	ldrb	r1, [r6, #8]
 801dda2:	4638      	mov	r0, r7
 801dda4:	f7fc fb0c 	bl	801a3c0 <ucdr_serialize_uint8_t>
 801dda8:	2800      	cmp	r0, #0
 801ddaa:	d0ee      	beq.n	801dd8a <uxr_serialize_CREATE_Payload+0x42>
 801ddac:	7a33      	ldrb	r3, [r6, #8]
 801ddae:	2b01      	cmp	r3, #1
 801ddb0:	d001      	beq.n	801ddb6 <uxr_serialize_CREATE_Payload+0x6e>
 801ddb2:	2b02      	cmp	r3, #2
 801ddb4:	d1ea      	bne.n	801dd8c <uxr_serialize_CREATE_Payload+0x44>
 801ddb6:	68f1      	ldr	r1, [r6, #12]
 801ddb8:	4638      	mov	r0, r7
 801ddba:	f004 ff01 	bl	8022bc0 <ucdr_serialize_string>
 801ddbe:	4004      	ands	r4, r0
 801ddc0:	e7e4      	b.n	801dd8c <uxr_serialize_CREATE_Payload+0x44>
 801ddc2:	7a31      	ldrb	r1, [r6, #8]
 801ddc4:	4638      	mov	r0, r7
 801ddc6:	f7fc fafb 	bl	801a3c0 <ucdr_serialize_uint8_t>
 801ddca:	4605      	mov	r5, r0
 801ddcc:	b158      	cbz	r0, 801dde6 <uxr_serialize_CREATE_Payload+0x9e>
 801ddce:	7a33      	ldrb	r3, [r6, #8]
 801ddd0:	2b02      	cmp	r3, #2
 801ddd2:	d034      	beq.n	801de3e <uxr_serialize_CREATE_Payload+0xf6>
 801ddd4:	2b03      	cmp	r3, #3
 801ddd6:	d106      	bne.n	801dde6 <uxr_serialize_CREATE_Payload+0x9e>
 801ddd8:	68f2      	ldr	r2, [r6, #12]
 801ddda:	f106 0110 	add.w	r1, r6, #16
 801ddde:	4638      	mov	r0, r7
 801dde0:	f7fd fb3a 	bl	801b458 <ucdr_serialize_sequence_uint8_t>
 801dde4:	4605      	mov	r5, r0
 801dde6:	2202      	movs	r2, #2
 801dde8:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 801ddec:	4638      	mov	r0, r7
 801ddee:	f004 fe1b 	bl	8022a28 <ucdr_serialize_array_uint8_t>
 801ddf2:	4028      	ands	r0, r5
 801ddf4:	4004      	ands	r4, r0
 801ddf6:	e7c9      	b.n	801dd8c <uxr_serialize_CREATE_Payload+0x44>
 801ddf8:	f106 0108 	add.w	r1, r6, #8
 801ddfc:	4638      	mov	r0, r7
 801ddfe:	f7ff f9c1 	bl	801d184 <uxr_serialize_CLIENT_Representation>
 801de02:	4004      	ands	r4, r0
 801de04:	e7c2      	b.n	801dd8c <uxr_serialize_CREATE_Payload+0x44>
 801de06:	f106 0108 	add.w	r1, r6, #8
 801de0a:	4638      	mov	r0, r7
 801de0c:	f7ff fa76 	bl	801d2fc <uxr_serialize_AGENT_Representation>
 801de10:	4004      	ands	r4, r0
 801de12:	e7bb      	b.n	801dd8c <uxr_serialize_CREATE_Payload+0x44>
 801de14:	7a31      	ldrb	r1, [r6, #8]
 801de16:	4638      	mov	r0, r7
 801de18:	f7fc fad2 	bl	801a3c0 <ucdr_serialize_uint8_t>
 801de1c:	4605      	mov	r5, r0
 801de1e:	b130      	cbz	r0, 801de2e <uxr_serialize_CREATE_Payload+0xe6>
 801de20:	7a33      	ldrb	r3, [r6, #8]
 801de22:	2b02      	cmp	r3, #2
 801de24:	d011      	beq.n	801de4a <uxr_serialize_CREATE_Payload+0x102>
 801de26:	2b03      	cmp	r3, #3
 801de28:	d015      	beq.n	801de56 <uxr_serialize_CREATE_Payload+0x10e>
 801de2a:	2b01      	cmp	r3, #1
 801de2c:	d00d      	beq.n	801de4a <uxr_serialize_CREATE_Payload+0x102>
 801de2e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801de32:	4638      	mov	r0, r7
 801de34:	f7fd f800 	bl	801ae38 <ucdr_serialize_int16_t>
 801de38:	4028      	ands	r0, r5
 801de3a:	4004      	ands	r4, r0
 801de3c:	e7a6      	b.n	801dd8c <uxr_serialize_CREATE_Payload+0x44>
 801de3e:	68f1      	ldr	r1, [r6, #12]
 801de40:	4638      	mov	r0, r7
 801de42:	f004 febd 	bl	8022bc0 <ucdr_serialize_string>
 801de46:	4605      	mov	r5, r0
 801de48:	e7cd      	b.n	801dde6 <uxr_serialize_CREATE_Payload+0x9e>
 801de4a:	68f1      	ldr	r1, [r6, #12]
 801de4c:	4638      	mov	r0, r7
 801de4e:	f004 feb7 	bl	8022bc0 <ucdr_serialize_string>
 801de52:	4605      	mov	r5, r0
 801de54:	e7eb      	b.n	801de2e <uxr_serialize_CREATE_Payload+0xe6>
 801de56:	68f2      	ldr	r2, [r6, #12]
 801de58:	f106 0110 	add.w	r1, r6, #16
 801de5c:	4638      	mov	r0, r7
 801de5e:	f7fd fafb 	bl	801b458 <ucdr_serialize_sequence_uint8_t>
 801de62:	4605      	mov	r5, r0
 801de64:	e7e3      	b.n	801de2e <uxr_serialize_CREATE_Payload+0xe6>
 801de66:	bf00      	nop

0801de68 <uxr_deserialize_GET_INFO_Payload>:
 801de68:	b570      	push	{r4, r5, r6, lr}
 801de6a:	2202      	movs	r2, #2
 801de6c:	4605      	mov	r5, r0
 801de6e:	460e      	mov	r6, r1
 801de70:	f004 fe3e 	bl	8022af0 <ucdr_deserialize_array_uint8_t>
 801de74:	2202      	movs	r2, #2
 801de76:	4604      	mov	r4, r0
 801de78:	4628      	mov	r0, r5
 801de7a:	18b1      	adds	r1, r6, r2
 801de7c:	f004 fe38 	bl	8022af0 <ucdr_deserialize_array_uint8_t>
 801de80:	4603      	mov	r3, r0
 801de82:	1d31      	adds	r1, r6, #4
 801de84:	4628      	mov	r0, r5
 801de86:	401c      	ands	r4, r3
 801de88:	f7fc fde0 	bl	801aa4c <ucdr_deserialize_uint32_t>
 801de8c:	b2e4      	uxtb	r4, r4
 801de8e:	4020      	ands	r0, r4
 801de90:	bd70      	pop	{r4, r5, r6, pc}
 801de92:	bf00      	nop

0801de94 <uxr_serialize_DELETE_Payload>:
 801de94:	b570      	push	{r4, r5, r6, lr}
 801de96:	2202      	movs	r2, #2
 801de98:	4605      	mov	r5, r0
 801de9a:	460e      	mov	r6, r1
 801de9c:	f004 fdc4 	bl	8022a28 <ucdr_serialize_array_uint8_t>
 801dea0:	2202      	movs	r2, #2
 801dea2:	4604      	mov	r4, r0
 801dea4:	4628      	mov	r0, r5
 801dea6:	18b1      	adds	r1, r6, r2
 801dea8:	f004 fdbe 	bl	8022a28 <ucdr_serialize_array_uint8_t>
 801deac:	4020      	ands	r0, r4
 801deae:	b2c0      	uxtb	r0, r0
 801deb0:	bd70      	pop	{r4, r5, r6, pc}
 801deb2:	bf00      	nop

0801deb4 <uxr_deserialize_STATUS_AGENT_Payload>:
 801deb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801deb8:	460e      	mov	r6, r1
 801deba:	4605      	mov	r5, r0
 801debc:	f7fc fa96 	bl	801a3ec <ucdr_deserialize_uint8_t>
 801dec0:	4604      	mov	r4, r0
 801dec2:	1c71      	adds	r1, r6, #1
 801dec4:	4628      	mov	r0, r5
 801dec6:	f7fc fa91 	bl	801a3ec <ucdr_deserialize_uint8_t>
 801deca:	2204      	movs	r2, #4
 801decc:	4681      	mov	r9, r0
 801dece:	4628      	mov	r0, r5
 801ded0:	18b1      	adds	r1, r6, r2
 801ded2:	f004 fe0d 	bl	8022af0 <ucdr_deserialize_array_uint8_t>
 801ded6:	f106 0108 	add.w	r1, r6, #8
 801deda:	4680      	mov	r8, r0
 801dedc:	2202      	movs	r2, #2
 801dede:	4628      	mov	r0, r5
 801dee0:	f004 fe06 	bl	8022af0 <ucdr_deserialize_array_uint8_t>
 801dee4:	ea04 0309 	and.w	r3, r4, r9
 801dee8:	4607      	mov	r7, r0
 801deea:	2202      	movs	r2, #2
 801deec:	b2db      	uxtb	r3, r3
 801deee:	f106 010a 	add.w	r1, r6, #10
 801def2:	4628      	mov	r0, r5
 801def4:	ea03 0408 	and.w	r4, r3, r8
 801def8:	f004 fdfa 	bl	8022af0 <ucdr_deserialize_array_uint8_t>
 801defc:	4603      	mov	r3, r0
 801defe:	4628      	mov	r0, r5
 801df00:	403c      	ands	r4, r7
 801df02:	f106 010c 	add.w	r1, r6, #12
 801df06:	461d      	mov	r5, r3
 801df08:	f7fc fa42 	bl	801a390 <ucdr_deserialize_bool>
 801df0c:	4025      	ands	r5, r4
 801df0e:	4028      	ands	r0, r5
 801df10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801df14 <uxr_deserialize_STATUS_Payload>:
 801df14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df18:	2202      	movs	r2, #2
 801df1a:	4606      	mov	r6, r0
 801df1c:	460f      	mov	r7, r1
 801df1e:	f004 fde7 	bl	8022af0 <ucdr_deserialize_array_uint8_t>
 801df22:	2202      	movs	r2, #2
 801df24:	4605      	mov	r5, r0
 801df26:	4630      	mov	r0, r6
 801df28:	18b9      	adds	r1, r7, r2
 801df2a:	f004 fde1 	bl	8022af0 <ucdr_deserialize_array_uint8_t>
 801df2e:	4680      	mov	r8, r0
 801df30:	1d39      	adds	r1, r7, #4
 801df32:	4630      	mov	r0, r6
 801df34:	f7fc fa5a 	bl	801a3ec <ucdr_deserialize_uint8_t>
 801df38:	ea05 0508 	and.w	r5, r5, r8
 801df3c:	4604      	mov	r4, r0
 801df3e:	1d79      	adds	r1, r7, #5
 801df40:	4630      	mov	r0, r6
 801df42:	402c      	ands	r4, r5
 801df44:	f7fc fa52 	bl	801a3ec <ucdr_deserialize_uint8_t>
 801df48:	4020      	ands	r0, r4
 801df4a:	b2c0      	uxtb	r0, r0
 801df4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801df50 <uxr_serialize_INFO_Payload>:
 801df50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df54:	2202      	movs	r2, #2
 801df56:	460c      	mov	r4, r1
 801df58:	4605      	mov	r5, r0
 801df5a:	f004 fd65 	bl	8022a28 <ucdr_serialize_array_uint8_t>
 801df5e:	2202      	movs	r2, #2
 801df60:	4680      	mov	r8, r0
 801df62:	4628      	mov	r0, r5
 801df64:	18a1      	adds	r1, r4, r2
 801df66:	f004 fd5f 	bl	8022a28 <ucdr_serialize_array_uint8_t>
 801df6a:	4607      	mov	r7, r0
 801df6c:	7921      	ldrb	r1, [r4, #4]
 801df6e:	4628      	mov	r0, r5
 801df70:	f7fc fa26 	bl	801a3c0 <ucdr_serialize_uint8_t>
 801df74:	ea08 0807 	and.w	r8, r8, r7
 801df78:	4606      	mov	r6, r0
 801df7a:	7961      	ldrb	r1, [r4, #5]
 801df7c:	4628      	mov	r0, r5
 801df7e:	ea06 0608 	and.w	r6, r6, r8
 801df82:	f7fc fa1d 	bl	801a3c0 <ucdr_serialize_uint8_t>
 801df86:	7a21      	ldrb	r1, [r4, #8]
 801df88:	4030      	ands	r0, r6
 801df8a:	b2c7      	uxtb	r7, r0
 801df8c:	4628      	mov	r0, r5
 801df8e:	f7fc f9e9 	bl	801a364 <ucdr_serialize_bool>
 801df92:	7a23      	ldrb	r3, [r4, #8]
 801df94:	4606      	mov	r6, r0
 801df96:	b96b      	cbnz	r3, 801dfb4 <uxr_serialize_INFO_Payload+0x64>
 801df98:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 801df9c:	4628      	mov	r0, r5
 801df9e:	f7fc f9e1 	bl	801a364 <ucdr_serialize_bool>
 801dfa2:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801dfa6:	4030      	ands	r0, r6
 801dfa8:	b2c6      	uxtb	r6, r0
 801dfaa:	b983      	cbnz	r3, 801dfce <uxr_serialize_INFO_Payload+0x7e>
 801dfac:	ea06 0007 	and.w	r0, r6, r7
 801dfb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dfb4:	7b21      	ldrb	r1, [r4, #12]
 801dfb6:	4628      	mov	r0, r5
 801dfb8:	f7fc fa02 	bl	801a3c0 <ucdr_serialize_uint8_t>
 801dfbc:	b188      	cbz	r0, 801dfe2 <uxr_serialize_INFO_Payload+0x92>
 801dfbe:	f104 010c 	add.w	r1, r4, #12
 801dfc2:	4628      	mov	r0, r5
 801dfc4:	f7ff fa0c 	bl	801d3e0 <uxr_serialize_ObjectVariant.part.0>
 801dfc8:	4030      	ands	r0, r6
 801dfca:	b2c6      	uxtb	r6, r0
 801dfcc:	e7e4      	b.n	801df98 <uxr_serialize_INFO_Payload+0x48>
 801dfce:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801dfd2:	4628      	mov	r0, r5
 801dfd4:	f7ff fdb8 	bl	801db48 <uxr_serialize_ActivityInfoVariant>
 801dfd8:	4006      	ands	r6, r0
 801dfda:	ea06 0007 	and.w	r0, r6, r7
 801dfde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dfe2:	4606      	mov	r6, r0
 801dfe4:	e7d8      	b.n	801df98 <uxr_serialize_INFO_Payload+0x48>
 801dfe6:	bf00      	nop

0801dfe8 <uxr_serialize_READ_DATA_Payload>:
 801dfe8:	b570      	push	{r4, r5, r6, lr}
 801dfea:	2202      	movs	r2, #2
 801dfec:	4605      	mov	r5, r0
 801dfee:	460e      	mov	r6, r1
 801dff0:	f004 fd1a 	bl	8022a28 <ucdr_serialize_array_uint8_t>
 801dff4:	2202      	movs	r2, #2
 801dff6:	4604      	mov	r4, r0
 801dff8:	4628      	mov	r0, r5
 801dffa:	18b1      	adds	r1, r6, r2
 801dffc:	f004 fd14 	bl	8022a28 <ucdr_serialize_array_uint8_t>
 801e000:	4603      	mov	r3, r0
 801e002:	1d31      	adds	r1, r6, #4
 801e004:	4628      	mov	r0, r5
 801e006:	401c      	ands	r4, r3
 801e008:	f7ff fe5e 	bl	801dcc8 <uxr_serialize_ReadSpecification>
 801e00c:	b2e4      	uxtb	r4, r4
 801e00e:	4020      	ands	r0, r4
 801e010:	bd70      	pop	{r4, r5, r6, pc}
 801e012:	bf00      	nop

0801e014 <uxr_serialize_WRITE_DATA_Payload_Data>:
 801e014:	b570      	push	{r4, r5, r6, lr}
 801e016:	2202      	movs	r2, #2
 801e018:	4605      	mov	r5, r0
 801e01a:	460e      	mov	r6, r1
 801e01c:	f004 fd04 	bl	8022a28 <ucdr_serialize_array_uint8_t>
 801e020:	2202      	movs	r2, #2
 801e022:	4604      	mov	r4, r0
 801e024:	4628      	mov	r0, r5
 801e026:	18b1      	adds	r1, r6, r2
 801e028:	f004 fcfe 	bl	8022a28 <ucdr_serialize_array_uint8_t>
 801e02c:	4020      	ands	r0, r4
 801e02e:	b2c0      	uxtb	r0, r0
 801e030:	bd70      	pop	{r4, r5, r6, pc}
 801e032:	bf00      	nop

0801e034 <uxr_serialize_ACKNACK_Payload>:
 801e034:	b570      	push	{r4, r5, r6, lr}
 801e036:	460c      	mov	r4, r1
 801e038:	4605      	mov	r5, r0
 801e03a:	460e      	mov	r6, r1
 801e03c:	f834 1b02 	ldrh.w	r1, [r4], #2
 801e040:	f7fc f9ea 	bl	801a418 <ucdr_serialize_uint16_t>
 801e044:	2202      	movs	r2, #2
 801e046:	4621      	mov	r1, r4
 801e048:	4604      	mov	r4, r0
 801e04a:	4628      	mov	r0, r5
 801e04c:	f004 fcec 	bl	8022a28 <ucdr_serialize_array_uint8_t>
 801e050:	4603      	mov	r3, r0
 801e052:	7931      	ldrb	r1, [r6, #4]
 801e054:	4628      	mov	r0, r5
 801e056:	401c      	ands	r4, r3
 801e058:	f7fc f9b2 	bl	801a3c0 <ucdr_serialize_uint8_t>
 801e05c:	b2e4      	uxtb	r4, r4
 801e05e:	4020      	ands	r0, r4
 801e060:	bd70      	pop	{r4, r5, r6, pc}
 801e062:	bf00      	nop

0801e064 <uxr_deserialize_ACKNACK_Payload>:
 801e064:	b570      	push	{r4, r5, r6, lr}
 801e066:	460e      	mov	r6, r1
 801e068:	4605      	mov	r5, r0
 801e06a:	f7fc fad5 	bl	801a618 <ucdr_deserialize_uint16_t>
 801e06e:	2202      	movs	r2, #2
 801e070:	4604      	mov	r4, r0
 801e072:	4628      	mov	r0, r5
 801e074:	18b1      	adds	r1, r6, r2
 801e076:	f004 fd3b 	bl	8022af0 <ucdr_deserialize_array_uint8_t>
 801e07a:	4603      	mov	r3, r0
 801e07c:	1d31      	adds	r1, r6, #4
 801e07e:	4628      	mov	r0, r5
 801e080:	401c      	ands	r4, r3
 801e082:	f7fc f9b3 	bl	801a3ec <ucdr_deserialize_uint8_t>
 801e086:	b2e4      	uxtb	r4, r4
 801e088:	4020      	ands	r0, r4
 801e08a:	bd70      	pop	{r4, r5, r6, pc}

0801e08c <uxr_serialize_HEARTBEAT_Payload>:
 801e08c:	b570      	push	{r4, r5, r6, lr}
 801e08e:	460d      	mov	r5, r1
 801e090:	4606      	mov	r6, r0
 801e092:	8809      	ldrh	r1, [r1, #0]
 801e094:	f7fc f9c0 	bl	801a418 <ucdr_serialize_uint16_t>
 801e098:	8869      	ldrh	r1, [r5, #2]
 801e09a:	4604      	mov	r4, r0
 801e09c:	4630      	mov	r0, r6
 801e09e:	f7fc f9bb 	bl	801a418 <ucdr_serialize_uint16_t>
 801e0a2:	4603      	mov	r3, r0
 801e0a4:	7929      	ldrb	r1, [r5, #4]
 801e0a6:	4630      	mov	r0, r6
 801e0a8:	401c      	ands	r4, r3
 801e0aa:	f7fc f989 	bl	801a3c0 <ucdr_serialize_uint8_t>
 801e0ae:	b2e4      	uxtb	r4, r4
 801e0b0:	4020      	ands	r0, r4
 801e0b2:	bd70      	pop	{r4, r5, r6, pc}

0801e0b4 <uxr_deserialize_HEARTBEAT_Payload>:
 801e0b4:	b570      	push	{r4, r5, r6, lr}
 801e0b6:	460e      	mov	r6, r1
 801e0b8:	4605      	mov	r5, r0
 801e0ba:	f7fc faad 	bl	801a618 <ucdr_deserialize_uint16_t>
 801e0be:	4604      	mov	r4, r0
 801e0c0:	1cb1      	adds	r1, r6, #2
 801e0c2:	4628      	mov	r0, r5
 801e0c4:	f7fc faa8 	bl	801a618 <ucdr_deserialize_uint16_t>
 801e0c8:	4603      	mov	r3, r0
 801e0ca:	1d31      	adds	r1, r6, #4
 801e0cc:	4628      	mov	r0, r5
 801e0ce:	401c      	ands	r4, r3
 801e0d0:	f7fc f98c 	bl	801a3ec <ucdr_deserialize_uint8_t>
 801e0d4:	b2e4      	uxtb	r4, r4
 801e0d6:	4020      	ands	r0, r4
 801e0d8:	bd70      	pop	{r4, r5, r6, pc}
 801e0da:	bf00      	nop

0801e0dc <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801e0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e0e0:	460e      	mov	r6, r1
 801e0e2:	4605      	mov	r5, r0
 801e0e4:	f7fd f834 	bl	801b150 <ucdr_deserialize_int32_t>
 801e0e8:	4607      	mov	r7, r0
 801e0ea:	1d31      	adds	r1, r6, #4
 801e0ec:	4628      	mov	r0, r5
 801e0ee:	f7fc fcad 	bl	801aa4c <ucdr_deserialize_uint32_t>
 801e0f2:	4680      	mov	r8, r0
 801e0f4:	f106 0108 	add.w	r1, r6, #8
 801e0f8:	4628      	mov	r0, r5
 801e0fa:	f7fd f829 	bl	801b150 <ucdr_deserialize_int32_t>
 801e0fe:	ea07 0708 	and.w	r7, r7, r8
 801e102:	4604      	mov	r4, r0
 801e104:	f106 010c 	add.w	r1, r6, #12
 801e108:	4628      	mov	r0, r5
 801e10a:	403c      	ands	r4, r7
 801e10c:	f7fc fc9e 	bl	801aa4c <ucdr_deserialize_uint32_t>
 801e110:	f106 0110 	add.w	r1, r6, #16
 801e114:	4004      	ands	r4, r0
 801e116:	4628      	mov	r0, r5
 801e118:	f7fd f81a 	bl	801b150 <ucdr_deserialize_int32_t>
 801e11c:	4603      	mov	r3, r0
 801e11e:	b2e4      	uxtb	r4, r4
 801e120:	4628      	mov	r0, r5
 801e122:	461d      	mov	r5, r3
 801e124:	f106 0114 	add.w	r1, r6, #20
 801e128:	f7fc fc90 	bl	801aa4c <ucdr_deserialize_uint32_t>
 801e12c:	402c      	ands	r4, r5
 801e12e:	4020      	ands	r0, r4
 801e130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e134 <uxr_serialize_SampleIdentity>:
 801e134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e138:	4604      	mov	r4, r0
 801e13a:	460d      	mov	r5, r1
 801e13c:	220c      	movs	r2, #12
 801e13e:	f004 fc73 	bl	8022a28 <ucdr_serialize_array_uint8_t>
 801e142:	2203      	movs	r2, #3
 801e144:	f105 010c 	add.w	r1, r5, #12
 801e148:	4607      	mov	r7, r0
 801e14a:	4620      	mov	r0, r4
 801e14c:	f004 fc6c 	bl	8022a28 <ucdr_serialize_array_uint8_t>
 801e150:	7be9      	ldrb	r1, [r5, #15]
 801e152:	4680      	mov	r8, r0
 801e154:	4620      	mov	r0, r4
 801e156:	f7fc f933 	bl	801a3c0 <ucdr_serialize_uint8_t>
 801e15a:	6929      	ldr	r1, [r5, #16]
 801e15c:	4606      	mov	r6, r0
 801e15e:	4620      	mov	r0, r4
 801e160:	f7fc ff5e 	bl	801b020 <ucdr_serialize_int32_t>
 801e164:	ea07 0708 	and.w	r7, r7, r8
 801e168:	4603      	mov	r3, r0
 801e16a:	4620      	mov	r0, r4
 801e16c:	403e      	ands	r6, r7
 801e16e:	6969      	ldr	r1, [r5, #20]
 801e170:	461c      	mov	r4, r3
 801e172:	f7fc fb3b 	bl	801a7ec <ucdr_serialize_uint32_t>
 801e176:	4034      	ands	r4, r6
 801e178:	4020      	ands	r0, r4
 801e17a:	b2c0      	uxtb	r0, r0
 801e17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e180 <uxr_deserialize_SampleIdentity>:
 801e180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e184:	4604      	mov	r4, r0
 801e186:	460d      	mov	r5, r1
 801e188:	220c      	movs	r2, #12
 801e18a:	f004 fcb1 	bl	8022af0 <ucdr_deserialize_array_uint8_t>
 801e18e:	2203      	movs	r2, #3
 801e190:	f105 010c 	add.w	r1, r5, #12
 801e194:	4607      	mov	r7, r0
 801e196:	4620      	mov	r0, r4
 801e198:	f004 fcaa 	bl	8022af0 <ucdr_deserialize_array_uint8_t>
 801e19c:	f105 010f 	add.w	r1, r5, #15
 801e1a0:	4680      	mov	r8, r0
 801e1a2:	4620      	mov	r0, r4
 801e1a4:	f7fc f922 	bl	801a3ec <ucdr_deserialize_uint8_t>
 801e1a8:	f105 0110 	add.w	r1, r5, #16
 801e1ac:	4606      	mov	r6, r0
 801e1ae:	4620      	mov	r0, r4
 801e1b0:	f7fc ffce 	bl	801b150 <ucdr_deserialize_int32_t>
 801e1b4:	ea07 0708 	and.w	r7, r7, r8
 801e1b8:	4603      	mov	r3, r0
 801e1ba:	4620      	mov	r0, r4
 801e1bc:	403e      	ands	r6, r7
 801e1be:	f105 0114 	add.w	r1, r5, #20
 801e1c2:	461c      	mov	r4, r3
 801e1c4:	f7fc fc42 	bl	801aa4c <ucdr_deserialize_uint32_t>
 801e1c8:	4034      	ands	r4, r6
 801e1ca:	4020      	ands	r0, r4
 801e1cc:	b2c0      	uxtb	r0, r0
 801e1ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1d2:	bf00      	nop

0801e1d4 <rcl_client_get_rmw_handle>:
 801e1d4:	b118      	cbz	r0, 801e1de <rcl_client_get_rmw_handle+0xa>
 801e1d6:	6800      	ldr	r0, [r0, #0]
 801e1d8:	b108      	cbz	r0, 801e1de <rcl_client_get_rmw_handle+0xa>
 801e1da:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801e1de:	4770      	bx	lr

0801e1e0 <rcl_send_request>:
 801e1e0:	b570      	push	{r4, r5, r6, lr}
 801e1e2:	b082      	sub	sp, #8
 801e1e4:	b1f8      	cbz	r0, 801e226 <rcl_send_request+0x46>
 801e1e6:	4604      	mov	r4, r0
 801e1e8:	6800      	ldr	r0, [r0, #0]
 801e1ea:	b1e0      	cbz	r0, 801e226 <rcl_send_request+0x46>
 801e1ec:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 801e1f0:	b1cb      	cbz	r3, 801e226 <rcl_send_request+0x46>
 801e1f2:	460e      	mov	r6, r1
 801e1f4:	b1e1      	cbz	r1, 801e230 <rcl_send_request+0x50>
 801e1f6:	4615      	mov	r5, r2
 801e1f8:	b1d2      	cbz	r2, 801e230 <rcl_send_request+0x50>
 801e1fa:	2105      	movs	r1, #5
 801e1fc:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801e200:	f002 fc56 	bl	8020ab0 <__atomic_load_8>
 801e204:	4602      	mov	r2, r0
 801e206:	460b      	mov	r3, r1
 801e208:	4631      	mov	r1, r6
 801e20a:	e9c5 2300 	strd	r2, r3, [r5]
 801e20e:	6823      	ldr	r3, [r4, #0]
 801e210:	462a      	mov	r2, r5
 801e212:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801e216:	f003 fe5b 	bl	8021ed0 <rmw_send_request>
 801e21a:	4606      	mov	r6, r0
 801e21c:	b160      	cbz	r0, 801e238 <rcl_send_request+0x58>
 801e21e:	2601      	movs	r6, #1
 801e220:	4630      	mov	r0, r6
 801e222:	b002      	add	sp, #8
 801e224:	bd70      	pop	{r4, r5, r6, pc}
 801e226:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801e22a:	4630      	mov	r0, r6
 801e22c:	b002      	add	sp, #8
 801e22e:	bd70      	pop	{r4, r5, r6, pc}
 801e230:	260b      	movs	r6, #11
 801e232:	4630      	mov	r0, r6
 801e234:	b002      	add	sp, #8
 801e236:	bd70      	pop	{r4, r5, r6, pc}
 801e238:	6820      	ldr	r0, [r4, #0]
 801e23a:	2105      	movs	r1, #5
 801e23c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801e240:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801e244:	9100      	str	r1, [sp, #0]
 801e246:	f002 fc9f 	bl	8020b88 <__atomic_exchange_8>
 801e24a:	4630      	mov	r0, r6
 801e24c:	b002      	add	sp, #8
 801e24e:	bd70      	pop	{r4, r5, r6, pc}

0801e250 <rcl_take_response>:
 801e250:	b570      	push	{r4, r5, r6, lr}
 801e252:	468e      	mov	lr, r1
 801e254:	b08c      	sub	sp, #48	@ 0x30
 801e256:	460c      	mov	r4, r1
 801e258:	4616      	mov	r6, r2
 801e25a:	f10d 0c18 	add.w	ip, sp, #24
 801e25e:	4605      	mov	r5, r0
 801e260:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e264:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e268:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801e26c:	e88c 0003 	stmia.w	ip, {r0, r1}
 801e270:	b35d      	cbz	r5, 801e2ca <rcl_take_response+0x7a>
 801e272:	682b      	ldr	r3, [r5, #0]
 801e274:	b34b      	cbz	r3, 801e2ca <rcl_take_response+0x7a>
 801e276:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801e27a:	b330      	cbz	r0, 801e2ca <rcl_take_response+0x7a>
 801e27c:	b346      	cbz	r6, 801e2d0 <rcl_take_response+0x80>
 801e27e:	2300      	movs	r3, #0
 801e280:	4632      	mov	r2, r6
 801e282:	a902      	add	r1, sp, #8
 801e284:	f88d 3007 	strb.w	r3, [sp, #7]
 801e288:	f10d 0307 	add.w	r3, sp, #7
 801e28c:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 801e2d8 <rcl_take_response+0x88>
 801e290:	ed8d 7b02 	vstr	d7, [sp, #8]
 801e294:	ed8d 7b04 	vstr	d7, [sp, #16]
 801e298:	f003 ff22 	bl	80220e0 <rmw_take_response>
 801e29c:	4605      	mov	r5, r0
 801e29e:	b9c8      	cbnz	r0, 801e2d4 <rcl_take_response+0x84>
 801e2a0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801e2a4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 801e2a8:	2a00      	cmp	r2, #0
 801e2aa:	bf08      	it	eq
 801e2ac:	461d      	moveq	r5, r3
 801e2ae:	f10d 0e18 	add.w	lr, sp, #24
 801e2b2:	46a4      	mov	ip, r4
 801e2b4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e2b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e2bc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801e2c0:	e88c 0003 	stmia.w	ip, {r0, r1}
 801e2c4:	4628      	mov	r0, r5
 801e2c6:	b00c      	add	sp, #48	@ 0x30
 801e2c8:	bd70      	pop	{r4, r5, r6, pc}
 801e2ca:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801e2ce:	e7ee      	b.n	801e2ae <rcl_take_response+0x5e>
 801e2d0:	250b      	movs	r5, #11
 801e2d2:	e7ec      	b.n	801e2ae <rcl_take_response+0x5e>
 801e2d4:	2501      	movs	r5, #1
 801e2d6:	e7ea      	b.n	801e2ae <rcl_take_response+0x5e>
	...

0801e2e0 <rcl_client_is_valid>:
 801e2e0:	b130      	cbz	r0, 801e2f0 <rcl_client_is_valid+0x10>
 801e2e2:	6800      	ldr	r0, [r0, #0]
 801e2e4:	b120      	cbz	r0, 801e2f0 <rcl_client_is_valid+0x10>
 801e2e6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801e2ea:	3800      	subs	r0, #0
 801e2ec:	bf18      	it	ne
 801e2ee:	2001      	movne	r0, #1
 801e2f0:	4770      	bx	lr
 801e2f2:	bf00      	nop

0801e2f4 <rcl_convert_rmw_ret_to_rcl_ret>:
 801e2f4:	280b      	cmp	r0, #11
 801e2f6:	dc0d      	bgt.n	801e314 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801e2f8:	2800      	cmp	r0, #0
 801e2fa:	db09      	blt.n	801e310 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801e2fc:	280b      	cmp	r0, #11
 801e2fe:	d807      	bhi.n	801e310 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801e300:	e8df f000 	tbb	[pc, r0]
 801e304:	07060607 	.word	0x07060607
 801e308:	06060606 	.word	0x06060606
 801e30c:	07070606 	.word	0x07070606
 801e310:	2001      	movs	r0, #1
 801e312:	4770      	bx	lr
 801e314:	28cb      	cmp	r0, #203	@ 0xcb
 801e316:	bf18      	it	ne
 801e318:	2001      	movne	r0, #1
 801e31a:	4770      	bx	lr

0801e31c <rcl_get_zero_initialized_context>:
 801e31c:	4a03      	ldr	r2, [pc, #12]	@ (801e32c <rcl_get_zero_initialized_context+0x10>)
 801e31e:	4603      	mov	r3, r0
 801e320:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e324:	e883 0003 	stmia.w	r3, {r0, r1}
 801e328:	4618      	mov	r0, r3
 801e32a:	4770      	bx	lr
 801e32c:	0802abbc 	.word	0x0802abbc

0801e330 <rcl_context_is_valid>:
 801e330:	b118      	cbz	r0, 801e33a <rcl_context_is_valid+0xa>
 801e332:	6840      	ldr	r0, [r0, #4]
 801e334:	3800      	subs	r0, #0
 801e336:	bf18      	it	ne
 801e338:	2001      	movne	r0, #1
 801e33a:	4770      	bx	lr

0801e33c <__cleanup_context>:
 801e33c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e340:	4606      	mov	r6, r0
 801e342:	2300      	movs	r3, #0
 801e344:	6800      	ldr	r0, [r0, #0]
 801e346:	6073      	str	r3, [r6, #4]
 801e348:	2800      	cmp	r0, #0
 801e34a:	d049      	beq.n	801e3e0 <__cleanup_context+0xa4>
 801e34c:	6947      	ldr	r7, [r0, #20]
 801e34e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801e352:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801e356:	b137      	cbz	r7, 801e366 <__cleanup_context+0x2a>
 801e358:	3014      	adds	r0, #20
 801e35a:	f000 f9a7 	bl	801e6ac <rcl_init_options_fini>
 801e35e:	4607      	mov	r7, r0
 801e360:	2800      	cmp	r0, #0
 801e362:	d144      	bne.n	801e3ee <__cleanup_context+0xb2>
 801e364:	6830      	ldr	r0, [r6, #0]
 801e366:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801e368:	b143      	cbz	r3, 801e37c <__cleanup_context+0x40>
 801e36a:	3028      	adds	r0, #40	@ 0x28
 801e36c:	f003 fbf6 	bl	8021b5c <rmw_context_fini>
 801e370:	b118      	cbz	r0, 801e37a <__cleanup_context+0x3e>
 801e372:	2f00      	cmp	r7, #0
 801e374:	d03e      	beq.n	801e3f4 <__cleanup_context+0xb8>
 801e376:	f7fb f963 	bl	8019640 <rcutils_reset_error>
 801e37a:	6830      	ldr	r0, [r6, #0]
 801e37c:	6a03      	ldr	r3, [r0, #32]
 801e37e:	b1db      	cbz	r3, 801e3b8 <__cleanup_context+0x7c>
 801e380:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801e384:	2a01      	cmp	r2, #1
 801e386:	f17c 0100 	sbcs.w	r1, ip, #0
 801e38a:	db11      	blt.n	801e3b0 <__cleanup_context+0x74>
 801e38c:	2400      	movs	r4, #0
 801e38e:	4625      	mov	r5, r4
 801e390:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e394:	4649      	mov	r1, r9
 801e396:	b1b8      	cbz	r0, 801e3c8 <__cleanup_context+0x8c>
 801e398:	47c0      	blx	r8
 801e39a:	6833      	ldr	r3, [r6, #0]
 801e39c:	3401      	adds	r4, #1
 801e39e:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801e3a2:	f145 0500 	adc.w	r5, r5, #0
 801e3a6:	6a1b      	ldr	r3, [r3, #32]
 801e3a8:	4294      	cmp	r4, r2
 801e3aa:	eb75 010c 	sbcs.w	r1, r5, ip
 801e3ae:	dbef      	blt.n	801e390 <__cleanup_context+0x54>
 801e3b0:	4618      	mov	r0, r3
 801e3b2:	4649      	mov	r1, r9
 801e3b4:	47c0      	blx	r8
 801e3b6:	6830      	ldr	r0, [r6, #0]
 801e3b8:	4649      	mov	r1, r9
 801e3ba:	47c0      	blx	r8
 801e3bc:	2300      	movs	r3, #0
 801e3be:	4638      	mov	r0, r7
 801e3c0:	e9c6 3300 	strd	r3, r3, [r6]
 801e3c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e3c8:	3401      	adds	r4, #1
 801e3ca:	f145 0500 	adc.w	r5, r5, #0
 801e3ce:	4294      	cmp	r4, r2
 801e3d0:	eb75 010c 	sbcs.w	r1, r5, ip
 801e3d4:	dbdc      	blt.n	801e390 <__cleanup_context+0x54>
 801e3d6:	4618      	mov	r0, r3
 801e3d8:	4649      	mov	r1, r9
 801e3da:	47c0      	blx	r8
 801e3dc:	6830      	ldr	r0, [r6, #0]
 801e3de:	e7eb      	b.n	801e3b8 <__cleanup_context+0x7c>
 801e3e0:	4607      	mov	r7, r0
 801e3e2:	2300      	movs	r3, #0
 801e3e4:	4638      	mov	r0, r7
 801e3e6:	e9c6 3300 	strd	r3, r3, [r6]
 801e3ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e3ee:	f7fb f927 	bl	8019640 <rcutils_reset_error>
 801e3f2:	e7b7      	b.n	801e364 <__cleanup_context+0x28>
 801e3f4:	f7ff ff7e 	bl	801e2f4 <rcl_convert_rmw_ret_to_rcl_ret>
 801e3f8:	4607      	mov	r7, r0
 801e3fa:	e7bc      	b.n	801e376 <__cleanup_context+0x3a>

0801e3fc <rcl_init>:
 801e3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e400:	1e05      	subs	r5, r0, #0
 801e402:	b09c      	sub	sp, #112	@ 0x70
 801e404:	460e      	mov	r6, r1
 801e406:	4690      	mov	r8, r2
 801e408:	461f      	mov	r7, r3
 801e40a:	f340 809c 	ble.w	801e546 <rcl_init+0x14a>
 801e40e:	2900      	cmp	r1, #0
 801e410:	f000 809c 	beq.w	801e54c <rcl_init+0x150>
 801e414:	f1a1 0e04 	sub.w	lr, r1, #4
 801e418:	f04f 0c00 	mov.w	ip, #0
 801e41c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 801e420:	f10c 0c01 	add.w	ip, ip, #1
 801e424:	2c00      	cmp	r4, #0
 801e426:	f000 8091 	beq.w	801e54c <rcl_init+0x150>
 801e42a:	4565      	cmp	r5, ip
 801e42c:	d1f6      	bne.n	801e41c <rcl_init+0x20>
 801e42e:	f1b8 0f00 	cmp.w	r8, #0
 801e432:	f000 808b 	beq.w	801e54c <rcl_init+0x150>
 801e436:	f8d8 4000 	ldr.w	r4, [r8]
 801e43a:	2c00      	cmp	r4, #0
 801e43c:	f000 8086 	beq.w	801e54c <rcl_init+0x150>
 801e440:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 801e444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e446:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e44a:	6823      	ldr	r3, [r4, #0]
 801e44c:	a817      	add	r0, sp, #92	@ 0x5c
 801e44e:	f8cc 3000 	str.w	r3, [ip]
 801e452:	f7fb f8cf 	bl	80195f4 <rcutils_allocator_is_valid>
 801e456:	f080 0001 	eor.w	r0, r0, #1
 801e45a:	b2c0      	uxtb	r0, r0
 801e45c:	2800      	cmp	r0, #0
 801e45e:	d175      	bne.n	801e54c <rcl_init+0x150>
 801e460:	2f00      	cmp	r7, #0
 801e462:	d073      	beq.n	801e54c <rcl_init+0x150>
 801e464:	683b      	ldr	r3, [r7, #0]
 801e466:	2b00      	cmp	r3, #0
 801e468:	d175      	bne.n	801e556 <rcl_init+0x15a>
 801e46a:	2178      	movs	r1, #120	@ 0x78
 801e46c:	2001      	movs	r0, #1
 801e46e:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 801e472:	4798      	blx	r3
 801e474:	4604      	mov	r4, r0
 801e476:	6038      	str	r0, [r7, #0]
 801e478:	2800      	cmp	r0, #0
 801e47a:	f000 80a0 	beq.w	801e5be <rcl_init+0x1c2>
 801e47e:	a802      	add	r0, sp, #8
 801e480:	f002 fe82 	bl	8021188 <rmw_get_zero_initialized_context>
 801e484:	a902      	add	r1, sp, #8
 801e486:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801e48a:	2250      	movs	r2, #80	@ 0x50
 801e48c:	f007 fac9 	bl	8025a22 <memcpy>
 801e490:	ac17      	add	r4, sp, #92	@ 0x5c
 801e492:	f8d7 e000 	ldr.w	lr, [r7]
 801e496:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e498:	46f4      	mov	ip, lr
 801e49a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e49e:	6823      	ldr	r3, [r4, #0]
 801e4a0:	f10e 0114 	add.w	r1, lr, #20
 801e4a4:	4640      	mov	r0, r8
 801e4a6:	f8cc 3000 	str.w	r3, [ip]
 801e4aa:	f000 f929 	bl	801e700 <rcl_init_options_copy>
 801e4ae:	4604      	mov	r4, r0
 801e4b0:	2800      	cmp	r0, #0
 801e4b2:	d144      	bne.n	801e53e <rcl_init+0x142>
 801e4b4:	f8d7 9000 	ldr.w	r9, [r7]
 801e4b8:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801e4bc:	f8c9 0020 	str.w	r0, [r9, #32]
 801e4c0:	f8c9 5018 	str.w	r5, [r9, #24]
 801e4c4:	f8c9 801c 	str.w	r8, [r9, #28]
 801e4c8:	2d00      	cmp	r5, #0
 801e4ca:	d04b      	beq.n	801e564 <rcl_init+0x168>
 801e4cc:	2e00      	cmp	r6, #0
 801e4ce:	d049      	beq.n	801e564 <rcl_init+0x168>
 801e4d0:	2104      	movs	r1, #4
 801e4d2:	4628      	mov	r0, r5
 801e4d4:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 801e4d8:	4798      	blx	r3
 801e4da:	f8c9 0020 	str.w	r0, [r9, #32]
 801e4de:	f8d7 9000 	ldr.w	r9, [r7]
 801e4e2:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801e4e6:	46ca      	mov	sl, r9
 801e4e8:	b343      	cbz	r3, 801e53c <rcl_init+0x140>
 801e4ea:	2d01      	cmp	r5, #1
 801e4ec:	f178 0300 	sbcs.w	r3, r8, #0
 801e4f0:	db38      	blt.n	801e564 <rcl_init+0x168>
 801e4f2:	2400      	movs	r4, #0
 801e4f4:	3e04      	subs	r6, #4
 801e4f6:	46a1      	mov	r9, r4
 801e4f8:	e00b      	b.n	801e512 <rcl_init+0x116>
 801e4fa:	6831      	ldr	r1, [r6, #0]
 801e4fc:	f007 fa91 	bl	8025a22 <memcpy>
 801e500:	3401      	adds	r4, #1
 801e502:	f149 0900 	adc.w	r9, r9, #0
 801e506:	45c8      	cmp	r8, r9
 801e508:	bf08      	it	eq
 801e50a:	42a5      	cmpeq	r5, r4
 801e50c:	d028      	beq.n	801e560 <rcl_init+0x164>
 801e50e:	f8d7 a000 	ldr.w	sl, [r7]
 801e512:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801e516:	f7e1 fe9d 	bl	8000254 <strlen>
 801e51a:	1c42      	adds	r2, r0, #1
 801e51c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e51e:	4610      	mov	r0, r2
 801e520:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801e522:	f8da a020 	ldr.w	sl, [sl, #32]
 801e526:	9201      	str	r2, [sp, #4]
 801e528:	4798      	blx	r3
 801e52a:	683b      	ldr	r3, [r7, #0]
 801e52c:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801e530:	6a1b      	ldr	r3, [r3, #32]
 801e532:	9a01      	ldr	r2, [sp, #4]
 801e534:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e538:	2800      	cmp	r0, #0
 801e53a:	d1de      	bne.n	801e4fa <rcl_init+0xfe>
 801e53c:	240a      	movs	r4, #10
 801e53e:	4638      	mov	r0, r7
 801e540:	f7ff fefc 	bl	801e33c <__cleanup_context>
 801e544:	e003      	b.n	801e54e <rcl_init+0x152>
 801e546:	2900      	cmp	r1, #0
 801e548:	f43f af71 	beq.w	801e42e <rcl_init+0x32>
 801e54c:	240b      	movs	r4, #11
 801e54e:	4620      	mov	r0, r4
 801e550:	b01c      	add	sp, #112	@ 0x70
 801e552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e556:	2464      	movs	r4, #100	@ 0x64
 801e558:	4620      	mov	r0, r4
 801e55a:	b01c      	add	sp, #112	@ 0x70
 801e55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e560:	f8d7 9000 	ldr.w	r9, [r7]
 801e564:	491c      	ldr	r1, [pc, #112]	@ (801e5d8 <rcl_init+0x1dc>)
 801e566:	680b      	ldr	r3, [r1, #0]
 801e568:	3301      	adds	r3, #1
 801e56a:	d023      	beq.n	801e5b4 <rcl_init+0x1b8>
 801e56c:	461a      	mov	r2, r3
 801e56e:	2400      	movs	r4, #0
 801e570:	600b      	str	r3, [r1, #0]
 801e572:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801e576:	607b      	str	r3, [r7, #4]
 801e578:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801e57a:	6182      	str	r2, [r0, #24]
 801e57c:	3301      	adds	r3, #1
 801e57e:	61c4      	str	r4, [r0, #28]
 801e580:	d01f      	beq.n	801e5c2 <rcl_init+0x1c6>
 801e582:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 801e586:	b94b      	cbnz	r3, 801e59c <rcl_init+0x1a0>
 801e588:	3030      	adds	r0, #48	@ 0x30
 801e58a:	f000 f927 	bl	801e7dc <rcl_get_localhost_only>
 801e58e:	4604      	mov	r4, r0
 801e590:	2800      	cmp	r0, #0
 801e592:	d1d4      	bne.n	801e53e <rcl_init+0x142>
 801e594:	f8d7 9000 	ldr.w	r9, [r7]
 801e598:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801e59c:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 801e5a0:	3018      	adds	r0, #24
 801e5a2:	f003 f9a5 	bl	80218f0 <rmw_init>
 801e5a6:	4604      	mov	r4, r0
 801e5a8:	2800      	cmp	r0, #0
 801e5aa:	d0d0      	beq.n	801e54e <rcl_init+0x152>
 801e5ac:	f7ff fea2 	bl	801e2f4 <rcl_convert_rmw_ret_to_rcl_ret>
 801e5b0:	4604      	mov	r4, r0
 801e5b2:	e7c4      	b.n	801e53e <rcl_init+0x142>
 801e5b4:	2201      	movs	r2, #1
 801e5b6:	461c      	mov	r4, r3
 801e5b8:	600a      	str	r2, [r1, #0]
 801e5ba:	4613      	mov	r3, r2
 801e5bc:	e7d9      	b.n	801e572 <rcl_init+0x176>
 801e5be:	240a      	movs	r4, #10
 801e5c0:	e7c5      	b.n	801e54e <rcl_init+0x152>
 801e5c2:	3024      	adds	r0, #36	@ 0x24
 801e5c4:	f005 fee8 	bl	8024398 <rcl_get_default_domain_id>
 801e5c8:	4604      	mov	r4, r0
 801e5ca:	2800      	cmp	r0, #0
 801e5cc:	d1b7      	bne.n	801e53e <rcl_init+0x142>
 801e5ce:	f8d7 9000 	ldr.w	r9, [r7]
 801e5d2:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801e5d6:	e7d4      	b.n	801e582 <rcl_init+0x186>
 801e5d8:	200149d4 	.word	0x200149d4

0801e5dc <rcl_get_zero_initialized_init_options>:
 801e5dc:	2000      	movs	r0, #0
 801e5de:	4770      	bx	lr

0801e5e0 <rcl_init_options_init>:
 801e5e0:	b084      	sub	sp, #16
 801e5e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e5e4:	b097      	sub	sp, #92	@ 0x5c
 801e5e6:	ae1d      	add	r6, sp, #116	@ 0x74
 801e5e8:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 801e5ec:	2800      	cmp	r0, #0
 801e5ee:	d058      	beq.n	801e6a2 <rcl_init_options_init+0xc2>
 801e5f0:	6803      	ldr	r3, [r0, #0]
 801e5f2:	4605      	mov	r5, r0
 801e5f4:	b133      	cbz	r3, 801e604 <rcl_init_options_init+0x24>
 801e5f6:	2464      	movs	r4, #100	@ 0x64
 801e5f8:	4620      	mov	r0, r4
 801e5fa:	b017      	add	sp, #92	@ 0x5c
 801e5fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e600:	b004      	add	sp, #16
 801e602:	4770      	bx	lr
 801e604:	4630      	mov	r0, r6
 801e606:	f7fa fff5 	bl	80195f4 <rcutils_allocator_is_valid>
 801e60a:	2800      	cmp	r0, #0
 801e60c:	d049      	beq.n	801e6a2 <rcl_init_options_init+0xc2>
 801e60e:	46b4      	mov	ip, r6
 801e610:	ac11      	add	r4, sp, #68	@ 0x44
 801e612:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801e616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e618:	f8dc 3000 	ldr.w	r3, [ip]
 801e61c:	2050      	movs	r0, #80	@ 0x50
 801e61e:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801e620:	6023      	str	r3, [r4, #0]
 801e622:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e624:	4798      	blx	r3
 801e626:	4604      	mov	r4, r0
 801e628:	6028      	str	r0, [r5, #0]
 801e62a:	2800      	cmp	r0, #0
 801e62c:	d03b      	beq.n	801e6a6 <rcl_init_options_init+0xc6>
 801e62e:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801e632:	4686      	mov	lr, r0
 801e634:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801e638:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801e63c:	f8dc 3000 	ldr.w	r3, [ip]
 801e640:	a802      	add	r0, sp, #8
 801e642:	f8ce 3000 	str.w	r3, [lr]
 801e646:	f002 fdb3 	bl	80211b0 <rmw_get_zero_initialized_init_options>
 801e64a:	f10d 0e08 	add.w	lr, sp, #8
 801e64e:	f104 0c18 	add.w	ip, r4, #24
 801e652:	682f      	ldr	r7, [r5, #0]
 801e654:	ac20      	add	r4, sp, #128	@ 0x80
 801e656:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e65a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e65e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e662:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e666:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e66a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e66e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801e672:	e88c 0003 	stmia.w	ip, {r0, r1}
 801e676:	e894 0003 	ldmia.w	r4, {r0, r1}
 801e67a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801e67e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801e682:	f107 0018 	add.w	r0, r7, #24
 801e686:	f003 f813 	bl	80216b0 <rmw_init_options_init>
 801e68a:	4604      	mov	r4, r0
 801e68c:	2800      	cmp	r0, #0
 801e68e:	d0b3      	beq.n	801e5f8 <rcl_init_options_init+0x18>
 801e690:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801e692:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801e694:	6828      	ldr	r0, [r5, #0]
 801e696:	4798      	blx	r3
 801e698:	4620      	mov	r0, r4
 801e69a:	f7ff fe2b 	bl	801e2f4 <rcl_convert_rmw_ret_to_rcl_ret>
 801e69e:	4604      	mov	r4, r0
 801e6a0:	e7aa      	b.n	801e5f8 <rcl_init_options_init+0x18>
 801e6a2:	240b      	movs	r4, #11
 801e6a4:	e7a8      	b.n	801e5f8 <rcl_init_options_init+0x18>
 801e6a6:	240a      	movs	r4, #10
 801e6a8:	e7a6      	b.n	801e5f8 <rcl_init_options_init+0x18>
 801e6aa:	bf00      	nop

0801e6ac <rcl_init_options_fini>:
 801e6ac:	b530      	push	{r4, r5, lr}
 801e6ae:	b087      	sub	sp, #28
 801e6b0:	b1f0      	cbz	r0, 801e6f0 <rcl_init_options_fini+0x44>
 801e6b2:	6803      	ldr	r3, [r0, #0]
 801e6b4:	4604      	mov	r4, r0
 801e6b6:	b1db      	cbz	r3, 801e6f0 <rcl_init_options_fini+0x44>
 801e6b8:	469c      	mov	ip, r3
 801e6ba:	f10d 0e04 	add.w	lr, sp, #4
 801e6be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801e6c2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801e6c6:	f8dc 3000 	ldr.w	r3, [ip]
 801e6ca:	a801      	add	r0, sp, #4
 801e6cc:	f8ce 3000 	str.w	r3, [lr]
 801e6d0:	f7fa ff90 	bl	80195f4 <rcutils_allocator_is_valid>
 801e6d4:	b160      	cbz	r0, 801e6f0 <rcl_init_options_fini+0x44>
 801e6d6:	6820      	ldr	r0, [r4, #0]
 801e6d8:	3018      	adds	r0, #24
 801e6da:	f003 f8c1 	bl	8021860 <rmw_init_options_fini>
 801e6de:	4605      	mov	r5, r0
 801e6e0:	b950      	cbnz	r0, 801e6f8 <rcl_init_options_fini+0x4c>
 801e6e2:	6820      	ldr	r0, [r4, #0]
 801e6e4:	9b02      	ldr	r3, [sp, #8]
 801e6e6:	9905      	ldr	r1, [sp, #20]
 801e6e8:	4798      	blx	r3
 801e6ea:	4628      	mov	r0, r5
 801e6ec:	b007      	add	sp, #28
 801e6ee:	bd30      	pop	{r4, r5, pc}
 801e6f0:	250b      	movs	r5, #11
 801e6f2:	4628      	mov	r0, r5
 801e6f4:	b007      	add	sp, #28
 801e6f6:	bd30      	pop	{r4, r5, pc}
 801e6f8:	f7ff fdfc 	bl	801e2f4 <rcl_convert_rmw_ret_to_rcl_ret>
 801e6fc:	4605      	mov	r5, r0
 801e6fe:	e7f8      	b.n	801e6f2 <rcl_init_options_fini+0x46>

0801e700 <rcl_init_options_copy>:
 801e700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e704:	b094      	sub	sp, #80	@ 0x50
 801e706:	2800      	cmp	r0, #0
 801e708:	d05b      	beq.n	801e7c2 <rcl_init_options_copy+0xc2>
 801e70a:	4604      	mov	r4, r0
 801e70c:	6800      	ldr	r0, [r0, #0]
 801e70e:	2800      	cmp	r0, #0
 801e710:	d057      	beq.n	801e7c2 <rcl_init_options_copy+0xc2>
 801e712:	460e      	mov	r6, r1
 801e714:	f7fa ff6e 	bl	80195f4 <rcutils_allocator_is_valid>
 801e718:	2e00      	cmp	r6, #0
 801e71a:	d052      	beq.n	801e7c2 <rcl_init_options_copy+0xc2>
 801e71c:	f080 0001 	eor.w	r0, r0, #1
 801e720:	b2c0      	uxtb	r0, r0
 801e722:	2800      	cmp	r0, #0
 801e724:	d14d      	bne.n	801e7c2 <rcl_init_options_copy+0xc2>
 801e726:	6833      	ldr	r3, [r6, #0]
 801e728:	b123      	cbz	r3, 801e734 <rcl_init_options_copy+0x34>
 801e72a:	2464      	movs	r4, #100	@ 0x64
 801e72c:	4620      	mov	r0, r4
 801e72e:	b014      	add	sp, #80	@ 0x50
 801e730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e734:	6827      	ldr	r7, [r4, #0]
 801e736:	ad0f      	add	r5, sp, #60	@ 0x3c
 801e738:	46bc      	mov	ip, r7
 801e73a:	f8d7 8000 	ldr.w	r8, [r7]
 801e73e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801e742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e744:	f8dc 3000 	ldr.w	r3, [ip]
 801e748:	2050      	movs	r0, #80	@ 0x50
 801e74a:	4619      	mov	r1, r3
 801e74c:	602b      	str	r3, [r5, #0]
 801e74e:	47c0      	blx	r8
 801e750:	4605      	mov	r5, r0
 801e752:	6030      	str	r0, [r6, #0]
 801e754:	b3d0      	cbz	r0, 801e7cc <rcl_init_options_copy+0xcc>
 801e756:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 801e75a:	4686      	mov	lr, r0
 801e75c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801e760:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801e764:	f8dc 3000 	ldr.w	r3, [ip]
 801e768:	4668      	mov	r0, sp
 801e76a:	f8ce 3000 	str.w	r3, [lr]
 801e76e:	f002 fd1f 	bl	80211b0 <rmw_get_zero_initialized_init_options>
 801e772:	46ee      	mov	lr, sp
 801e774:	f105 0c18 	add.w	ip, r5, #24
 801e778:	6824      	ldr	r4, [r4, #0]
 801e77a:	6835      	ldr	r5, [r6, #0]
 801e77c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e780:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e784:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e788:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e78c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e790:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e794:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801e798:	e88c 0003 	stmia.w	ip, {r0, r1}
 801e79c:	f104 0018 	add.w	r0, r4, #24
 801e7a0:	f105 0118 	add.w	r1, r5, #24
 801e7a4:	f002 ffe6 	bl	8021774 <rmw_init_options_copy>
 801e7a8:	4604      	mov	r4, r0
 801e7aa:	2800      	cmp	r0, #0
 801e7ac:	d0be      	beq.n	801e72c <rcl_init_options_copy+0x2c>
 801e7ae:	f7fa ff2f 	bl	8019610 <rcutils_get_error_string>
 801e7b2:	f7fa ff45 	bl	8019640 <rcutils_reset_error>
 801e7b6:	4630      	mov	r0, r6
 801e7b8:	f7ff ff78 	bl	801e6ac <rcl_init_options_fini>
 801e7bc:	b140      	cbz	r0, 801e7d0 <rcl_init_options_copy+0xd0>
 801e7be:	4604      	mov	r4, r0
 801e7c0:	e7b4      	b.n	801e72c <rcl_init_options_copy+0x2c>
 801e7c2:	240b      	movs	r4, #11
 801e7c4:	4620      	mov	r0, r4
 801e7c6:	b014      	add	sp, #80	@ 0x50
 801e7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e7cc:	240a      	movs	r4, #10
 801e7ce:	e7ad      	b.n	801e72c <rcl_init_options_copy+0x2c>
 801e7d0:	4620      	mov	r0, r4
 801e7d2:	b014      	add	sp, #80	@ 0x50
 801e7d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e7d8:	f7ff bd8c 	b.w	801e2f4 <rcl_convert_rmw_ret_to_rcl_ret>

0801e7dc <rcl_get_localhost_only>:
 801e7dc:	b510      	push	{r4, lr}
 801e7de:	2300      	movs	r3, #0
 801e7e0:	b082      	sub	sp, #8
 801e7e2:	9301      	str	r3, [sp, #4]
 801e7e4:	b1b8      	cbz	r0, 801e816 <rcl_get_localhost_only+0x3a>
 801e7e6:	4604      	mov	r4, r0
 801e7e8:	a901      	add	r1, sp, #4
 801e7ea:	480c      	ldr	r0, [pc, #48]	@ (801e81c <rcl_get_localhost_only+0x40>)
 801e7ec:	f002 fa04 	bl	8020bf8 <rcutils_get_env>
 801e7f0:	b110      	cbz	r0, 801e7f8 <rcl_get_localhost_only+0x1c>
 801e7f2:	2001      	movs	r0, #1
 801e7f4:	b002      	add	sp, #8
 801e7f6:	bd10      	pop	{r4, pc}
 801e7f8:	9b01      	ldr	r3, [sp, #4]
 801e7fa:	b113      	cbz	r3, 801e802 <rcl_get_localhost_only+0x26>
 801e7fc:	781a      	ldrb	r2, [r3, #0]
 801e7fe:	2a31      	cmp	r2, #49	@ 0x31
 801e800:	d004      	beq.n	801e80c <rcl_get_localhost_only+0x30>
 801e802:	2302      	movs	r3, #2
 801e804:	2000      	movs	r0, #0
 801e806:	7023      	strb	r3, [r4, #0]
 801e808:	b002      	add	sp, #8
 801e80a:	bd10      	pop	{r4, pc}
 801e80c:	785b      	ldrb	r3, [r3, #1]
 801e80e:	2b00      	cmp	r3, #0
 801e810:	d1f7      	bne.n	801e802 <rcl_get_localhost_only+0x26>
 801e812:	2301      	movs	r3, #1
 801e814:	e7f6      	b.n	801e804 <rcl_get_localhost_only+0x28>
 801e816:	200b      	movs	r0, #11
 801e818:	b002      	add	sp, #8
 801e81a:	bd10      	pop	{r4, pc}
 801e81c:	0802a69c 	.word	0x0802a69c

0801e820 <rcl_get_zero_initialized_node>:
 801e820:	4a03      	ldr	r2, [pc, #12]	@ (801e830 <rcl_get_zero_initialized_node+0x10>)
 801e822:	4603      	mov	r3, r0
 801e824:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e828:	e883 0003 	stmia.w	r3, {r0, r1}
 801e82c:	4618      	mov	r0, r3
 801e82e:	4770      	bx	lr
 801e830:	0802abc4 	.word	0x0802abc4

0801e834 <rcl_node_init>:
 801e834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e838:	b0a9      	sub	sp, #164	@ 0xa4
 801e83a:	4604      	mov	r4, r0
 801e83c:	460e      	mov	r6, r1
 801e83e:	4615      	mov	r5, r2
 801e840:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 801e844:	a823      	add	r0, sp, #140	@ 0x8c
 801e846:	461f      	mov	r7, r3
 801e848:	f005 ffcc 	bl	80247e4 <rcl_guard_condition_get_default_options>
 801e84c:	f1b8 0f00 	cmp.w	r8, #0
 801e850:	f000 80f3 	beq.w	801ea3a <rcl_node_init+0x206>
 801e854:	4640      	mov	r0, r8
 801e856:	f7fa fecd 	bl	80195f4 <rcutils_allocator_is_valid>
 801e85a:	2d00      	cmp	r5, #0
 801e85c:	bf18      	it	ne
 801e85e:	2c00      	cmpne	r4, #0
 801e860:	f080 0001 	eor.w	r0, r0, #1
 801e864:	bf0c      	ite	eq
 801e866:	f04f 0c01 	moveq.w	ip, #1
 801e86a:	f04f 0c00 	movne.w	ip, #0
 801e86e:	2e00      	cmp	r6, #0
 801e870:	bf08      	it	eq
 801e872:	f04c 0c01 	orreq.w	ip, ip, #1
 801e876:	ea4c 0c00 	orr.w	ip, ip, r0
 801e87a:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 801e87e:	f040 80dc 	bne.w	801ea3a <rcl_node_init+0x206>
 801e882:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801e886:	f1ba 0f00 	cmp.w	sl, #0
 801e88a:	f040 80fc 	bne.w	801ea86 <rcl_node_init+0x252>
 801e88e:	2f00      	cmp	r7, #0
 801e890:	f000 80d3 	beq.w	801ea3a <rcl_node_init+0x206>
 801e894:	4638      	mov	r0, r7
 801e896:	f7ff fd4b 	bl	801e330 <rcl_context_is_valid>
 801e89a:	4683      	mov	fp, r0
 801e89c:	2800      	cmp	r0, #0
 801e89e:	f000 80d2 	beq.w	801ea46 <rcl_node_init+0x212>
 801e8a2:	4652      	mov	r2, sl
 801e8a4:	4630      	mov	r0, r6
 801e8a6:	a922      	add	r1, sp, #136	@ 0x88
 801e8a8:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 801e8ac:	f002 fe32 	bl	8021514 <rmw_validate_node_name>
 801e8b0:	4682      	mov	sl, r0
 801e8b2:	2800      	cmp	r0, #0
 801e8b4:	f040 80c3 	bne.w	801ea3e <rcl_node_init+0x20a>
 801e8b8:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801e8ba:	2800      	cmp	r0, #0
 801e8bc:	f040 80f1 	bne.w	801eaa2 <rcl_node_init+0x26e>
 801e8c0:	4628      	mov	r0, r5
 801e8c2:	f7e1 fcc7 	bl	8000254 <strlen>
 801e8c6:	2800      	cmp	r0, #0
 801e8c8:	f040 80c0 	bne.w	801ea4c <rcl_node_init+0x218>
 801e8cc:	4d79      	ldr	r5, [pc, #484]	@ (801eab4 <rcl_node_init+0x280>)
 801e8ce:	a922      	add	r1, sp, #136	@ 0x88
 801e8d0:	2200      	movs	r2, #0
 801e8d2:	4628      	mov	r0, r5
 801e8d4:	f002 fe00 	bl	80214d8 <rmw_validate_namespace>
 801e8d8:	4682      	mov	sl, r0
 801e8da:	2800      	cmp	r0, #0
 801e8dc:	f040 80af 	bne.w	801ea3e <rcl_node_init+0x20a>
 801e8e0:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801e8e2:	2800      	cmp	r0, #0
 801e8e4:	f040 80d5 	bne.w	801ea92 <rcl_node_init+0x25e>
 801e8e8:	f8d8 3000 	ldr.w	r3, [r8]
 801e8ec:	2078      	movs	r0, #120	@ 0x78
 801e8ee:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801e8f2:	4798      	blx	r3
 801e8f4:	4682      	mov	sl, r0
 801e8f6:	6060      	str	r0, [r4, #4]
 801e8f8:	2800      	cmp	r0, #0
 801e8fa:	f000 80cf 	beq.w	801ea9c <rcl_node_init+0x268>
 801e8fe:	2200      	movs	r2, #0
 801e900:	2300      	movs	r3, #0
 801e902:	a808      	add	r0, sp, #32
 801e904:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 801e908:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 801e90c:	f000 f902 	bl	801eb14 <rcl_node_get_default_options>
 801e910:	a908      	add	r1, sp, #32
 801e912:	4650      	mov	r0, sl
 801e914:	2268      	movs	r2, #104	@ 0x68
 801e916:	f007 f884 	bl	8025a22 <memcpy>
 801e91a:	6861      	ldr	r1, [r4, #4]
 801e91c:	4640      	mov	r0, r8
 801e91e:	6027      	str	r7, [r4, #0]
 801e920:	f000 f906 	bl	801eb30 <rcl_node_options_copy>
 801e924:	2800      	cmp	r0, #0
 801e926:	d158      	bne.n	801e9da <rcl_node_init+0x1a6>
 801e928:	4628      	mov	r0, r5
 801e92a:	f7e1 fc93 	bl	8000254 <strlen>
 801e92e:	4428      	add	r0, r5
 801e930:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801e934:	e9cd 5603 	strd	r5, r6, [sp, #12]
 801e938:	2b2f      	cmp	r3, #47	@ 0x2f
 801e93a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801e93e:	9300      	str	r3, [sp, #0]
 801e940:	bf0c      	ite	eq
 801e942:	4b5d      	ldreq	r3, [pc, #372]	@ (801eab8 <rcl_node_init+0x284>)
 801e944:	4b5d      	ldrne	r3, [pc, #372]	@ (801eabc <rcl_node_init+0x288>)
 801e946:	9302      	str	r3, [sp, #8]
 801e948:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801e94c:	9301      	str	r3, [sp, #4]
 801e94e:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801e952:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801e956:	f002 f967 	bl	8020c28 <rcutils_format_string_limit>
 801e95a:	6823      	ldr	r3, [r4, #0]
 801e95c:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 801e960:	4631      	mov	r1, r6
 801e962:	6818      	ldr	r0, [r3, #0]
 801e964:	462a      	mov	r2, r5
 801e966:	6866      	ldr	r6, [r4, #4]
 801e968:	3028      	adds	r0, #40	@ 0x28
 801e96a:	f003 fa1b 	bl	8021da4 <rmw_create_node>
 801e96e:	6863      	ldr	r3, [r4, #4]
 801e970:	66b0      	str	r0, [r6, #104]	@ 0x68
 801e972:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801e974:	2800      	cmp	r0, #0
 801e976:	d032      	beq.n	801e9de <rcl_node_init+0x1aa>
 801e978:	f003 faa4 	bl	8021ec4 <rmw_node_get_graph_guard_condition>
 801e97c:	4682      	mov	sl, r0
 801e97e:	b360      	cbz	r0, 801e9da <rcl_node_init+0x1a6>
 801e980:	f8d8 3000 	ldr.w	r3, [r8]
 801e984:	2008      	movs	r0, #8
 801e986:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801e98a:	6866      	ldr	r6, [r4, #4]
 801e98c:	4798      	blx	r3
 801e98e:	6863      	ldr	r3, [r4, #4]
 801e990:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801e992:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 801e996:	f1bb 0f00 	cmp.w	fp, #0
 801e99a:	d020      	beq.n	801e9de <rcl_node_init+0x1aa>
 801e99c:	a806      	add	r0, sp, #24
 801e99e:	ae23      	add	r6, sp, #140	@ 0x8c
 801e9a0:	f005 fe94 	bl	80246cc <rcl_get_zero_initialized_guard_condition>
 801e9a4:	a806      	add	r0, sp, #24
 801e9a6:	6863      	ldr	r3, [r4, #4]
 801e9a8:	46c4      	mov	ip, r8
 801e9aa:	c803      	ldmia	r0, {r0, r1}
 801e9ac:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 801e9b0:	e88b 0003 	stmia.w	fp, {r0, r1}
 801e9b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801e9b8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801e9ba:	f8dc 3000 	ldr.w	r3, [ip]
 801e9be:	6033      	str	r3, [r6, #0]
 801e9c0:	ab28      	add	r3, sp, #160	@ 0xa0
 801e9c2:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801e9c6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801e9ca:	4651      	mov	r1, sl
 801e9cc:	463a      	mov	r2, r7
 801e9ce:	4670      	mov	r0, lr
 801e9d0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e9d2:	f005 fe85 	bl	80246e0 <rcl_guard_condition_init_from_rmw>
 801e9d6:	4682      	mov	sl, r0
 801e9d8:	b328      	cbz	r0, 801ea26 <rcl_node_init+0x1f2>
 801e9da:	6863      	ldr	r3, [r4, #4]
 801e9dc:	b1f3      	cbz	r3, 801ea1c <rcl_node_init+0x1e8>
 801e9de:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801e9e0:	b128      	cbz	r0, 801e9ee <rcl_node_init+0x1ba>
 801e9e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e9e6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801e9ea:	4798      	blx	r3
 801e9ec:	6863      	ldr	r3, [r4, #4]
 801e9ee:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801e9f0:	b110      	cbz	r0, 801e9f8 <rcl_node_init+0x1c4>
 801e9f2:	f003 f9e9 	bl	8021dc8 <rmw_destroy_node>
 801e9f6:	6863      	ldr	r3, [r4, #4]
 801e9f8:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801e9fa:	b148      	cbz	r0, 801ea10 <rcl_node_init+0x1dc>
 801e9fc:	f005 fecc 	bl	8024798 <rcl_guard_condition_fini>
 801ea00:	6863      	ldr	r3, [r4, #4]
 801ea02:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801ea06:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801ea08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ea0c:	4798      	blx	r3
 801ea0e:	6863      	ldr	r3, [r4, #4]
 801ea10:	4618      	mov	r0, r3
 801ea12:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801ea16:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ea1a:	4798      	blx	r3
 801ea1c:	2300      	movs	r3, #0
 801ea1e:	f04f 0a01 	mov.w	sl, #1
 801ea22:	e9c4 3300 	strd	r3, r3, [r4]
 801ea26:	f1b9 0f00 	cmp.w	r9, #0
 801ea2a:	d008      	beq.n	801ea3e <rcl_node_init+0x20a>
 801ea2c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ea30:	4628      	mov	r0, r5
 801ea32:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801ea36:	4798      	blx	r3
 801ea38:	e001      	b.n	801ea3e <rcl_node_init+0x20a>
 801ea3a:	f04f 0a0b 	mov.w	sl, #11
 801ea3e:	4650      	mov	r0, sl
 801ea40:	b029      	add	sp, #164	@ 0xa4
 801ea42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea46:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 801ea4a:	e7f8      	b.n	801ea3e <rcl_node_init+0x20a>
 801ea4c:	782b      	ldrb	r3, [r5, #0]
 801ea4e:	2b2f      	cmp	r3, #47	@ 0x2f
 801ea50:	f43f af3d 	beq.w	801e8ce <rcl_node_init+0x9a>
 801ea54:	9503      	str	r5, [sp, #12]
 801ea56:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801ea5a:	9300      	str	r3, [sp, #0]
 801ea5c:	4b18      	ldr	r3, [pc, #96]	@ (801eac0 <rcl_node_init+0x28c>)
 801ea5e:	9302      	str	r3, [sp, #8]
 801ea60:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801ea64:	9301      	str	r3, [sp, #4]
 801ea66:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801ea6a:	f002 f8dd 	bl	8020c28 <rcutils_format_string_limit>
 801ea6e:	4605      	mov	r5, r0
 801ea70:	b1e0      	cbz	r0, 801eaac <rcl_node_init+0x278>
 801ea72:	2200      	movs	r2, #0
 801ea74:	a922      	add	r1, sp, #136	@ 0x88
 801ea76:	9222      	str	r2, [sp, #136]	@ 0x88
 801ea78:	f002 fd2e 	bl	80214d8 <rmw_validate_namespace>
 801ea7c:	4682      	mov	sl, r0
 801ea7e:	2800      	cmp	r0, #0
 801ea80:	d1d4      	bne.n	801ea2c <rcl_node_init+0x1f8>
 801ea82:	46d9      	mov	r9, fp
 801ea84:	e72c      	b.n	801e8e0 <rcl_node_init+0xac>
 801ea86:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 801ea8a:	4650      	mov	r0, sl
 801ea8c:	b029      	add	sp, #164	@ 0xa4
 801ea8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea92:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 801ea96:	f002 fd31 	bl	80214fc <rmw_namespace_validation_result_string>
 801ea9a:	e7c4      	b.n	801ea26 <rcl_node_init+0x1f2>
 801ea9c:	f04f 0a0a 	mov.w	sl, #10
 801eaa0:	e7c1      	b.n	801ea26 <rcl_node_init+0x1f2>
 801eaa2:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 801eaa6:	f002 fd89 	bl	80215bc <rmw_node_name_validation_result_string>
 801eaaa:	e7c8      	b.n	801ea3e <rcl_node_init+0x20a>
 801eaac:	f04f 0a0a 	mov.w	sl, #10
 801eab0:	e7c5      	b.n	801ea3e <rcl_node_init+0x20a>
 801eab2:	bf00      	nop
 801eab4:	0802a6b4 	.word	0x0802a6b4
 801eab8:	0802a4cc 	.word	0x0802a4cc
 801eabc:	0802a6bc 	.word	0x0802a6bc
 801eac0:	0802a6b8 	.word	0x0802a6b8

0801eac4 <rcl_node_is_valid>:
 801eac4:	b130      	cbz	r0, 801ead4 <rcl_node_is_valid+0x10>
 801eac6:	6843      	ldr	r3, [r0, #4]
 801eac8:	b123      	cbz	r3, 801ead4 <rcl_node_is_valid+0x10>
 801eaca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801eacc:	b113      	cbz	r3, 801ead4 <rcl_node_is_valid+0x10>
 801eace:	6800      	ldr	r0, [r0, #0]
 801ead0:	f7ff bc2e 	b.w	801e330 <rcl_context_is_valid>
 801ead4:	2000      	movs	r0, #0
 801ead6:	4770      	bx	lr

0801ead8 <rcl_node_get_name>:
 801ead8:	b120      	cbz	r0, 801eae4 <rcl_node_get_name+0xc>
 801eada:	6840      	ldr	r0, [r0, #4]
 801eadc:	b110      	cbz	r0, 801eae4 <rcl_node_get_name+0xc>
 801eade:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801eae0:	b100      	cbz	r0, 801eae4 <rcl_node_get_name+0xc>
 801eae2:	6880      	ldr	r0, [r0, #8]
 801eae4:	4770      	bx	lr
 801eae6:	bf00      	nop

0801eae8 <rcl_node_get_namespace>:
 801eae8:	b120      	cbz	r0, 801eaf4 <rcl_node_get_namespace+0xc>
 801eaea:	6840      	ldr	r0, [r0, #4]
 801eaec:	b110      	cbz	r0, 801eaf4 <rcl_node_get_namespace+0xc>
 801eaee:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801eaf0:	b100      	cbz	r0, 801eaf4 <rcl_node_get_namespace+0xc>
 801eaf2:	68c0      	ldr	r0, [r0, #12]
 801eaf4:	4770      	bx	lr
 801eaf6:	bf00      	nop

0801eaf8 <rcl_node_get_options>:
 801eaf8:	b128      	cbz	r0, 801eb06 <rcl_node_get_options+0xe>
 801eafa:	6840      	ldr	r0, [r0, #4]
 801eafc:	b118      	cbz	r0, 801eb06 <rcl_node_get_options+0xe>
 801eafe:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801eb00:	2b00      	cmp	r3, #0
 801eb02:	bf08      	it	eq
 801eb04:	2000      	moveq	r0, #0
 801eb06:	4770      	bx	lr

0801eb08 <rcl_node_get_rmw_handle>:
 801eb08:	b110      	cbz	r0, 801eb10 <rcl_node_get_rmw_handle+0x8>
 801eb0a:	6840      	ldr	r0, [r0, #4]
 801eb0c:	b100      	cbz	r0, 801eb10 <rcl_node_get_rmw_handle+0x8>
 801eb0e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801eb10:	4770      	bx	lr
 801eb12:	bf00      	nop

0801eb14 <rcl_node_get_default_options>:
 801eb14:	b510      	push	{r4, lr}
 801eb16:	4604      	mov	r4, r0
 801eb18:	2268      	movs	r2, #104	@ 0x68
 801eb1a:	2100      	movs	r1, #0
 801eb1c:	f006 fe5a 	bl	80257d4 <memset>
 801eb20:	4620      	mov	r0, r4
 801eb22:	f7fa fd59 	bl	80195d8 <rcutils_get_default_allocator>
 801eb26:	2301      	movs	r3, #1
 801eb28:	4620      	mov	r0, r4
 801eb2a:	7523      	strb	r3, [r4, #20]
 801eb2c:	bd10      	pop	{r4, pc}
 801eb2e:	bf00      	nop

0801eb30 <rcl_node_options_copy>:
 801eb30:	2800      	cmp	r0, #0
 801eb32:	bf18      	it	ne
 801eb34:	4288      	cmpne	r0, r1
 801eb36:	d01b      	beq.n	801eb70 <rcl_node_options_copy+0x40>
 801eb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb3a:	fab1 f681 	clz	r6, r1
 801eb3e:	460c      	mov	r4, r1
 801eb40:	0976      	lsrs	r6, r6, #5
 801eb42:	b199      	cbz	r1, 801eb6c <rcl_node_options_copy+0x3c>
 801eb44:	4605      	mov	r5, r0
 801eb46:	8a87      	ldrh	r7, [r0, #20]
 801eb48:	4684      	mov	ip, r0
 801eb4a:	468e      	mov	lr, r1
 801eb4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801eb4e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801eb52:	682b      	ldr	r3, [r5, #0]
 801eb54:	2250      	movs	r2, #80	@ 0x50
 801eb56:	f10c 0118 	add.w	r1, ip, #24
 801eb5a:	f104 0018 	add.w	r0, r4, #24
 801eb5e:	f8ce 3000 	str.w	r3, [lr]
 801eb62:	82a7      	strh	r7, [r4, #20]
 801eb64:	f006 ff5d 	bl	8025a22 <memcpy>
 801eb68:	4630      	mov	r0, r6
 801eb6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eb6c:	200b      	movs	r0, #11
 801eb6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eb70:	200b      	movs	r0, #11
 801eb72:	4770      	bx	lr

0801eb74 <rcl_node_resolve_name>:
 801eb74:	b082      	sub	sp, #8
 801eb76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb7a:	b091      	sub	sp, #68	@ 0x44
 801eb7c:	ac1a      	add	r4, sp, #104	@ 0x68
 801eb7e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 801eb82:	e884 000c 	stmia.w	r4, {r2, r3}
 801eb86:	2800      	cmp	r0, #0
 801eb88:	d03d      	beq.n	801ec06 <rcl_node_resolve_name+0x92>
 801eb8a:	460c      	mov	r4, r1
 801eb8c:	4605      	mov	r5, r0
 801eb8e:	f7ff ffb3 	bl	801eaf8 <rcl_node_get_options>
 801eb92:	2800      	cmp	r0, #0
 801eb94:	d03a      	beq.n	801ec0c <rcl_node_resolve_name+0x98>
 801eb96:	4628      	mov	r0, r5
 801eb98:	f7ff ff9e 	bl	801ead8 <rcl_node_get_name>
 801eb9c:	4606      	mov	r6, r0
 801eb9e:	4628      	mov	r0, r5
 801eba0:	ad0b      	add	r5, sp, #44	@ 0x2c
 801eba2:	f7ff ffa1 	bl	801eae8 <rcl_node_get_namespace>
 801eba6:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 801ebaa:	4607      	mov	r7, r0
 801ebac:	46ac      	mov	ip, r5
 801ebae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ebb2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ebb6:	f8de 3000 	ldr.w	r3, [lr]
 801ebba:	f8cc 3000 	str.w	r3, [ip]
 801ebbe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ebc0:	b30b      	cbz	r3, 801ec06 <rcl_node_resolve_name+0x92>
 801ebc2:	4689      	mov	r9, r1
 801ebc4:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 801ebc8:	f002 f9ae 	bl	8020f28 <rcutils_get_zero_initialized_string_map>
 801ebcc:	ab10      	add	r3, sp, #64	@ 0x40
 801ebce:	9008      	str	r0, [sp, #32]
 801ebd0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801ebd4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801ebd8:	2100      	movs	r1, #0
 801ebda:	a808      	add	r0, sp, #32
 801ebdc:	e895 000c 	ldmia.w	r5, {r2, r3}
 801ebe0:	f002 fa18 	bl	8021014 <rcutils_string_map_init>
 801ebe4:	4683      	mov	fp, r0
 801ebe6:	b1a0      	cbz	r0, 801ec12 <rcl_node_resolve_name+0x9e>
 801ebe8:	f7fa fd12 	bl	8019610 <rcutils_get_error_string>
 801ebec:	f7fa fd28 	bl	8019640 <rcutils_reset_error>
 801ebf0:	f1bb 0f0a 	cmp.w	fp, #10
 801ebf4:	bf18      	it	ne
 801ebf6:	f04f 0b01 	movne.w	fp, #1
 801ebfa:	4658      	mov	r0, fp
 801ebfc:	b011      	add	sp, #68	@ 0x44
 801ebfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec02:	b002      	add	sp, #8
 801ec04:	4770      	bx	lr
 801ec06:	f04f 0b0b 	mov.w	fp, #11
 801ec0a:	e7f6      	b.n	801ebfa <rcl_node_resolve_name+0x86>
 801ec0c:	f04f 0b01 	mov.w	fp, #1
 801ec10:	e7f3      	b.n	801ebfa <rcl_node_resolve_name+0x86>
 801ec12:	9009      	str	r0, [sp, #36]	@ 0x24
 801ec14:	9007      	str	r0, [sp, #28]
 801ec16:	a808      	add	r0, sp, #32
 801ec18:	f005 fd52 	bl	80246c0 <rcl_get_default_topic_name_substitutions>
 801ec1c:	4683      	mov	fp, r0
 801ec1e:	b180      	cbz	r0, 801ec42 <rcl_node_resolve_name+0xce>
 801ec20:	280a      	cmp	r0, #10
 801ec22:	a808      	add	r0, sp, #32
 801ec24:	bf18      	it	ne
 801ec26:	f04f 0b01 	movne.w	fp, #1
 801ec2a:	f002 fa33 	bl	8021094 <rcutils_string_map_fini>
 801ec2e:	4604      	mov	r4, r0
 801ec30:	2800      	cmp	r0, #0
 801ec32:	d15b      	bne.n	801ecec <rcl_node_resolve_name+0x178>
 801ec34:	4651      	mov	r1, sl
 801ec36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ec38:	47c8      	blx	r9
 801ec3a:	4651      	mov	r1, sl
 801ec3c:	4620      	mov	r0, r4
 801ec3e:	47c8      	blx	r9
 801ec40:	e7db      	b.n	801ebfa <rcl_node_resolve_name+0x86>
 801ec42:	ab09      	add	r3, sp, #36	@ 0x24
 801ec44:	46ec      	mov	ip, sp
 801ec46:	9305      	str	r3, [sp, #20]
 801ec48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ec4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ec4e:	682b      	ldr	r3, [r5, #0]
 801ec50:	463a      	mov	r2, r7
 801ec52:	4631      	mov	r1, r6
 801ec54:	4620      	mov	r0, r4
 801ec56:	f8cc 3000 	str.w	r3, [ip]
 801ec5a:	ab08      	add	r3, sp, #32
 801ec5c:	f005 fbd0 	bl	8024400 <rcl_expand_topic_name>
 801ec60:	4683      	mov	fp, r0
 801ec62:	b9d8      	cbnz	r0, 801ec9c <rcl_node_resolve_name+0x128>
 801ec64:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801ec66:	4602      	mov	r2, r0
 801ec68:	9009      	str	r0, [sp, #36]	@ 0x24
 801ec6a:	a90a      	add	r1, sp, #40	@ 0x28
 801ec6c:	4620      	mov	r0, r4
 801ec6e:	f002 fb63 	bl	8021338 <rmw_validate_full_topic_name>
 801ec72:	bb50      	cbnz	r0, 801ecca <rcl_node_resolve_name+0x156>
 801ec74:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801ec76:	2d00      	cmp	r5, #0
 801ec78:	d140      	bne.n	801ecfc <rcl_node_resolve_name+0x188>
 801ec7a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ec7c:	a808      	add	r0, sp, #32
 801ec7e:	601c      	str	r4, [r3, #0]
 801ec80:	f002 fa08 	bl	8021094 <rcutils_string_map_fini>
 801ec84:	4683      	mov	fp, r0
 801ec86:	2800      	cmp	r0, #0
 801ec88:	d043      	beq.n	801ed12 <rcl_node_resolve_name+0x19e>
 801ec8a:	f7fa fcc1 	bl	8019610 <rcutils_get_error_string>
 801ec8e:	46a8      	mov	r8, r5
 801ec90:	f04f 0b01 	mov.w	fp, #1
 801ec94:	462c      	mov	r4, r5
 801ec96:	f7fa fcd3 	bl	8019640 <rcutils_reset_error>
 801ec9a:	e00a      	b.n	801ecb2 <rcl_node_resolve_name+0x13e>
 801ec9c:	2867      	cmp	r0, #103	@ 0x67
 801ec9e:	bf14      	ite	ne
 801eca0:	f04f 0800 	movne.w	r8, #0
 801eca4:	f008 0801 	andeq.w	r8, r8, #1
 801eca8:	9c07      	ldr	r4, [sp, #28]
 801ecaa:	a808      	add	r0, sp, #32
 801ecac:	f002 f9f2 	bl	8021094 <rcutils_string_map_fini>
 801ecb0:	bb50      	cbnz	r0, 801ed08 <rcl_node_resolve_name+0x194>
 801ecb2:	4651      	mov	r1, sl
 801ecb4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ecb6:	47c8      	blx	r9
 801ecb8:	4651      	mov	r1, sl
 801ecba:	4620      	mov	r0, r4
 801ecbc:	47c8      	blx	r9
 801ecbe:	f1b8 0f00 	cmp.w	r8, #0
 801ecc2:	bf18      	it	ne
 801ecc4:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 801ecc8:	e797      	b.n	801ebfa <rcl_node_resolve_name+0x86>
 801ecca:	f7fa fca1 	bl	8019610 <rcutils_get_error_string>
 801ecce:	f7fa fcb7 	bl	8019640 <rcutils_reset_error>
 801ecd2:	a808      	add	r0, sp, #32
 801ecd4:	f002 f9de 	bl	8021094 <rcutils_string_map_fini>
 801ecd8:	b998      	cbnz	r0, 801ed02 <rcl_node_resolve_name+0x18e>
 801ecda:	4651      	mov	r1, sl
 801ecdc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ecde:	47c8      	blx	r9
 801ece0:	4651      	mov	r1, sl
 801ece2:	4620      	mov	r0, r4
 801ece4:	f04f 0b01 	mov.w	fp, #1
 801ece8:	47c8      	blx	r9
 801ecea:	e786      	b.n	801ebfa <rcl_node_resolve_name+0x86>
 801ecec:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801ecf0:	f7fa fc8e 	bl	8019610 <rcutils_get_error_string>
 801ecf4:	f7fa fca4 	bl	8019640 <rcutils_reset_error>
 801ecf8:	4644      	mov	r4, r8
 801ecfa:	e7da      	b.n	801ecb2 <rcl_node_resolve_name+0x13e>
 801ecfc:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 801ed00:	e7d3      	b.n	801ecaa <rcl_node_resolve_name+0x136>
 801ed02:	46d8      	mov	r8, fp
 801ed04:	f04f 0b01 	mov.w	fp, #1
 801ed08:	f7fa fc82 	bl	8019610 <rcutils_get_error_string>
 801ed0c:	f7fa fc98 	bl	8019640 <rcutils_reset_error>
 801ed10:	e7cf      	b.n	801ecb2 <rcl_node_resolve_name+0x13e>
 801ed12:	4651      	mov	r1, sl
 801ed14:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ed16:	47c8      	blx	r9
 801ed18:	4651      	mov	r1, sl
 801ed1a:	4658      	mov	r0, fp
 801ed1c:	47c8      	blx	r9
 801ed1e:	e76c      	b.n	801ebfa <rcl_node_resolve_name+0x86>

0801ed20 <rcl_service_get_rmw_handle>:
 801ed20:	b118      	cbz	r0, 801ed2a <rcl_service_get_rmw_handle+0xa>
 801ed22:	6800      	ldr	r0, [r0, #0]
 801ed24:	b108      	cbz	r0, 801ed2a <rcl_service_get_rmw_handle+0xa>
 801ed26:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801ed2a:	4770      	bx	lr

0801ed2c <rcl_take_request>:
 801ed2c:	b570      	push	{r4, r5, r6, lr}
 801ed2e:	468e      	mov	lr, r1
 801ed30:	b08c      	sub	sp, #48	@ 0x30
 801ed32:	460c      	mov	r4, r1
 801ed34:	4616      	mov	r6, r2
 801ed36:	f10d 0c18 	add.w	ip, sp, #24
 801ed3a:	4605      	mov	r5, r0
 801ed3c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ed40:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ed44:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801ed48:	e88c 0003 	stmia.w	ip, {r0, r1}
 801ed4c:	b30d      	cbz	r5, 801ed92 <rcl_take_request+0x66>
 801ed4e:	682b      	ldr	r3, [r5, #0]
 801ed50:	b1fb      	cbz	r3, 801ed92 <rcl_take_request+0x66>
 801ed52:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801ed56:	b1e0      	cbz	r0, 801ed92 <rcl_take_request+0x66>
 801ed58:	b336      	cbz	r6, 801eda8 <rcl_take_request+0x7c>
 801ed5a:	2300      	movs	r3, #0
 801ed5c:	4632      	mov	r2, r6
 801ed5e:	a902      	add	r1, sp, #8
 801ed60:	f88d 3007 	strb.w	r3, [sp, #7]
 801ed64:	f10d 0307 	add.w	r3, sp, #7
 801ed68:	f003 f900 	bl	8021f6c <rmw_take_request>
 801ed6c:	4605      	mov	r5, r0
 801ed6e:	b198      	cbz	r0, 801ed98 <rcl_take_request+0x6c>
 801ed70:	280a      	cmp	r0, #10
 801ed72:	bf18      	it	ne
 801ed74:	2501      	movne	r5, #1
 801ed76:	f10d 0e18 	add.w	lr, sp, #24
 801ed7a:	46a4      	mov	ip, r4
 801ed7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ed80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ed84:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801ed88:	e88c 0003 	stmia.w	ip, {r0, r1}
 801ed8c:	4628      	mov	r0, r5
 801ed8e:	b00c      	add	sp, #48	@ 0x30
 801ed90:	bd70      	pop	{r4, r5, r6, pc}
 801ed92:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801ed96:	e7ee      	b.n	801ed76 <rcl_take_request+0x4a>
 801ed98:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801ed9c:	f240 2359 	movw	r3, #601	@ 0x259
 801eda0:	2a00      	cmp	r2, #0
 801eda2:	bf08      	it	eq
 801eda4:	461d      	moveq	r5, r3
 801eda6:	e7e6      	b.n	801ed76 <rcl_take_request+0x4a>
 801eda8:	250b      	movs	r5, #11
 801edaa:	e7e4      	b.n	801ed76 <rcl_take_request+0x4a>

0801edac <rcl_send_response>:
 801edac:	b170      	cbz	r0, 801edcc <rcl_send_response+0x20>
 801edae:	6800      	ldr	r0, [r0, #0]
 801edb0:	b160      	cbz	r0, 801edcc <rcl_send_response+0x20>
 801edb2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801edb6:	b148      	cbz	r0, 801edcc <rcl_send_response+0x20>
 801edb8:	b169      	cbz	r1, 801edd6 <rcl_send_response+0x2a>
 801edba:	b510      	push	{r4, lr}
 801edbc:	b14a      	cbz	r2, 801edd2 <rcl_send_response+0x26>
 801edbe:	f003 f933 	bl	8022028 <rmw_send_response>
 801edc2:	b110      	cbz	r0, 801edca <rcl_send_response+0x1e>
 801edc4:	2802      	cmp	r0, #2
 801edc6:	bf18      	it	ne
 801edc8:	2001      	movne	r0, #1
 801edca:	bd10      	pop	{r4, pc}
 801edcc:	f44f 7016 	mov.w	r0, #600	@ 0x258
 801edd0:	4770      	bx	lr
 801edd2:	200b      	movs	r0, #11
 801edd4:	bd10      	pop	{r4, pc}
 801edd6:	200b      	movs	r0, #11
 801edd8:	4770      	bx	lr
 801edda:	bf00      	nop

0801eddc <rcl_service_is_valid>:
 801eddc:	b130      	cbz	r0, 801edec <rcl_service_is_valid+0x10>
 801edde:	6800      	ldr	r0, [r0, #0]
 801ede0:	b120      	cbz	r0, 801edec <rcl_service_is_valid+0x10>
 801ede2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801ede6:	3800      	subs	r0, #0
 801ede8:	bf18      	it	ne
 801edea:	2001      	movne	r0, #1
 801edec:	4770      	bx	lr
 801edee:	bf00      	nop

0801edf0 <rcl_get_zero_initialized_subscription>:
 801edf0:	4b01      	ldr	r3, [pc, #4]	@ (801edf8 <rcl_get_zero_initialized_subscription+0x8>)
 801edf2:	6818      	ldr	r0, [r3, #0]
 801edf4:	4770      	bx	lr
 801edf6:	bf00      	nop
 801edf8:	0802abcc 	.word	0x0802abcc

0801edfc <rcl_subscription_init>:
 801edfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ee00:	b088      	sub	sp, #32
 801ee02:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801ee04:	b1ff      	cbz	r7, 801ee46 <rcl_subscription_init+0x4a>
 801ee06:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 801ee0a:	4605      	mov	r5, r0
 801ee0c:	460e      	mov	r6, r1
 801ee0e:	4691      	mov	r9, r2
 801ee10:	4650      	mov	r0, sl
 801ee12:	4698      	mov	r8, r3
 801ee14:	f7fa fbee 	bl	80195f4 <rcutils_allocator_is_valid>
 801ee18:	f080 0401 	eor.w	r4, r0, #1
 801ee1c:	b2e4      	uxtb	r4, r4
 801ee1e:	b994      	cbnz	r4, 801ee46 <rcl_subscription_init+0x4a>
 801ee20:	b18d      	cbz	r5, 801ee46 <rcl_subscription_init+0x4a>
 801ee22:	4630      	mov	r0, r6
 801ee24:	f7ff fe4e 	bl	801eac4 <rcl_node_is_valid>
 801ee28:	2800      	cmp	r0, #0
 801ee2a:	d055      	beq.n	801eed8 <rcl_subscription_init+0xdc>
 801ee2c:	f1b9 0f00 	cmp.w	r9, #0
 801ee30:	d009      	beq.n	801ee46 <rcl_subscription_init+0x4a>
 801ee32:	f1b8 0f00 	cmp.w	r8, #0
 801ee36:	d006      	beq.n	801ee46 <rcl_subscription_init+0x4a>
 801ee38:	682b      	ldr	r3, [r5, #0]
 801ee3a:	b14b      	cbz	r3, 801ee50 <rcl_subscription_init+0x54>
 801ee3c:	2464      	movs	r4, #100	@ 0x64
 801ee3e:	4620      	mov	r0, r4
 801ee40:	b008      	add	sp, #32
 801ee42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ee46:	240b      	movs	r4, #11
 801ee48:	4620      	mov	r0, r4
 801ee4a:	b008      	add	sp, #32
 801ee4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ee50:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801ee54:	aa07      	add	r2, sp, #28
 801ee56:	9307      	str	r3, [sp, #28]
 801ee58:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801ee5c:	9205      	str	r2, [sp, #20]
 801ee5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ee62:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801ee66:	4641      	mov	r1, r8
 801ee68:	4630      	mov	r0, r6
 801ee6a:	e89a 000c 	ldmia.w	sl, {r2, r3}
 801ee6e:	f7ff fe81 	bl	801eb74 <rcl_node_resolve_name>
 801ee72:	2800      	cmp	r0, #0
 801ee74:	d15f      	bne.n	801ef36 <rcl_subscription_init+0x13a>
 801ee76:	21c8      	movs	r1, #200	@ 0xc8
 801ee78:	2001      	movs	r0, #1
 801ee7a:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	@ 0x5c
 801ee7e:	4798      	blx	r3
 801ee80:	6028      	str	r0, [r5, #0]
 801ee82:	2800      	cmp	r0, #0
 801ee84:	d05f      	beq.n	801ef46 <rcl_subscription_init+0x14a>
 801ee86:	4630      	mov	r0, r6
 801ee88:	f7ff fe3e 	bl	801eb08 <rcl_node_get_rmw_handle>
 801ee8c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801ee90:	4649      	mov	r1, r9
 801ee92:	9a07      	ldr	r2, [sp, #28]
 801ee94:	9300      	str	r3, [sp, #0]
 801ee96:	463b      	mov	r3, r7
 801ee98:	682c      	ldr	r4, [r5, #0]
 801ee9a:	f003 f9ad 	bl	80221f8 <rmw_create_subscription>
 801ee9e:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 801eea2:	682c      	ldr	r4, [r5, #0]
 801eea4:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 801eea8:	b348      	cbz	r0, 801eefe <rcl_subscription_init+0x102>
 801eeaa:	f104 0170 	add.w	r1, r4, #112	@ 0x70
 801eeae:	f003 fa99 	bl	80223e4 <rmw_subscription_get_actual_qos>
 801eeb2:	4604      	mov	r4, r0
 801eeb4:	b9a8      	cbnz	r0, 801eee2 <rcl_subscription_init+0xe6>
 801eeb6:	6828      	ldr	r0, [r5, #0]
 801eeb8:	2270      	movs	r2, #112	@ 0x70
 801eeba:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801eebe:	4639      	mov	r1, r7
 801eec0:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 801eec4:	f006 fdad 	bl	8025a22 <memcpy>
 801eec8:	9807      	ldr	r0, [sp, #28]
 801eeca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801eecc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801eece:	4798      	blx	r3
 801eed0:	4620      	mov	r0, r4
 801eed2:	b008      	add	sp, #32
 801eed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eed8:	24c8      	movs	r4, #200	@ 0xc8
 801eeda:	4620      	mov	r0, r4
 801eedc:	b008      	add	sp, #32
 801eede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eee2:	682c      	ldr	r4, [r5, #0]
 801eee4:	b36c      	cbz	r4, 801ef42 <rcl_subscription_init+0x146>
 801eee6:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 801eeea:	b14b      	cbz	r3, 801ef00 <rcl_subscription_init+0x104>
 801eeec:	4630      	mov	r0, r6
 801eeee:	f7ff fe0b 	bl	801eb08 <rcl_node_get_rmw_handle>
 801eef2:	682b      	ldr	r3, [r5, #0]
 801eef4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 801eef8:	f003 fa88 	bl	802240c <rmw_destroy_subscription>
 801eefc:	682c      	ldr	r4, [r5, #0]
 801eefe:	b194      	cbz	r4, 801ef26 <rcl_subscription_init+0x12a>
 801ef00:	f104 0650 	add.w	r6, r4, #80	@ 0x50
 801ef04:	4630      	mov	r0, r6
 801ef06:	f7fa fb75 	bl	80195f4 <rcutils_allocator_is_valid>
 801ef0a:	b158      	cbz	r0, 801ef24 <rcl_subscription_init+0x128>
 801ef0c:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 801ef0e:	b148      	cbz	r0, 801ef24 <rcl_subscription_init+0x128>
 801ef10:	4631      	mov	r1, r6
 801ef12:	f002 f961 	bl	80211d8 <rmw_subscription_content_filter_options_fini>
 801ef16:	4606      	mov	r6, r0
 801ef18:	b9c8      	cbnz	r0, 801ef4e <rcl_subscription_init+0x152>
 801ef1a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801ef1c:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 801ef1e:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 801ef20:	4798      	blx	r3
 801ef22:	66e6      	str	r6, [r4, #108]	@ 0x6c
 801ef24:	682c      	ldr	r4, [r5, #0]
 801ef26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ef28:	4620      	mov	r0, r4
 801ef2a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801ef2c:	2401      	movs	r4, #1
 801ef2e:	4798      	blx	r3
 801ef30:	2300      	movs	r3, #0
 801ef32:	602b      	str	r3, [r5, #0]
 801ef34:	e7c8      	b.n	801eec8 <rcl_subscription_init+0xcc>
 801ef36:	2867      	cmp	r0, #103	@ 0x67
 801ef38:	d007      	beq.n	801ef4a <rcl_subscription_init+0x14e>
 801ef3a:	2869      	cmp	r0, #105	@ 0x69
 801ef3c:	d005      	beq.n	801ef4a <rcl_subscription_init+0x14e>
 801ef3e:	280a      	cmp	r0, #10
 801ef40:	d001      	beq.n	801ef46 <rcl_subscription_init+0x14a>
 801ef42:	2401      	movs	r4, #1
 801ef44:	e7c0      	b.n	801eec8 <rcl_subscription_init+0xcc>
 801ef46:	240a      	movs	r4, #10
 801ef48:	e7be      	b.n	801eec8 <rcl_subscription_init+0xcc>
 801ef4a:	2467      	movs	r4, #103	@ 0x67
 801ef4c:	e7bc      	b.n	801eec8 <rcl_subscription_init+0xcc>
 801ef4e:	f7ff f9d1 	bl	801e2f4 <rcl_convert_rmw_ret_to_rcl_ret>
 801ef52:	682c      	ldr	r4, [r5, #0]
 801ef54:	e7e7      	b.n	801ef26 <rcl_subscription_init+0x12a>
 801ef56:	bf00      	nop

0801ef58 <rcl_subscription_get_default_options>:
 801ef58:	b570      	push	{r4, r5, r6, lr}
 801ef5a:	4d14      	ldr	r5, [pc, #80]	@ (801efac <rcl_subscription_get_default_options+0x54>)
 801ef5c:	b08a      	sub	sp, #40	@ 0x28
 801ef5e:	4604      	mov	r4, r0
 801ef60:	2250      	movs	r2, #80	@ 0x50
 801ef62:	4913      	ldr	r1, [pc, #76]	@ (801efb0 <rcl_subscription_get_default_options+0x58>)
 801ef64:	4628      	mov	r0, r5
 801ef66:	f006 fd5c 	bl	8025a22 <memcpy>
 801ef6a:	a804      	add	r0, sp, #16
 801ef6c:	f7fa fb34 	bl	80195d8 <rcutils_get_default_allocator>
 801ef70:	f10d 0c10 	add.w	ip, sp, #16
 801ef74:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 801ef78:	466e      	mov	r6, sp
 801ef7a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ef7e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801ef82:	f8dc 3000 	ldr.w	r3, [ip]
 801ef86:	4630      	mov	r0, r6
 801ef88:	f8ce 3000 	str.w	r3, [lr]
 801ef8c:	f002 f93e 	bl	802120c <rmw_get_default_subscription_options>
 801ef90:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 801ef94:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801ef98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801ef9c:	2270      	movs	r2, #112	@ 0x70
 801ef9e:	4629      	mov	r1, r5
 801efa0:	4620      	mov	r0, r4
 801efa2:	f006 fd3e 	bl	8025a22 <memcpy>
 801efa6:	4620      	mov	r0, r4
 801efa8:	b00a      	add	sp, #40	@ 0x28
 801efaa:	bd70      	pop	{r4, r5, r6, pc}
 801efac:	200149d8 	.word	0x200149d8
 801efb0:	0802abd0 	.word	0x0802abd0

0801efb4 <rcl_take>:
 801efb4:	2800      	cmp	r0, #0
 801efb6:	d049      	beq.n	801f04c <rcl_take+0x98>
 801efb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801efbc:	4615      	mov	r5, r2
 801efbe:	6802      	ldr	r2, [r0, #0]
 801efc0:	b0a4      	sub	sp, #144	@ 0x90
 801efc2:	4604      	mov	r4, r0
 801efc4:	2a00      	cmp	r2, #0
 801efc6:	d039      	beq.n	801f03c <rcl_take+0x88>
 801efc8:	461f      	mov	r7, r3
 801efca:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 801efce:	b3ab      	cbz	r3, 801f03c <rcl_take+0x88>
 801efd0:	460e      	mov	r6, r1
 801efd2:	2900      	cmp	r1, #0
 801efd4:	d038      	beq.n	801f048 <rcl_take+0x94>
 801efd6:	2d00      	cmp	r5, #0
 801efd8:	d03c      	beq.n	801f054 <rcl_take+0xa0>
 801efda:	a802      	add	r0, sp, #8
 801efdc:	f04f 0800 	mov.w	r8, #0
 801efe0:	f002 f9a2 	bl	8021328 <rmw_get_zero_initialized_message_info>
 801efe4:	f10d 0c08 	add.w	ip, sp, #8
 801efe8:	46ae      	mov	lr, r5
 801efea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801efee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801eff2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801eff6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801effa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801effe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801f002:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801f006:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801f00a:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 801f00e:	462b      	mov	r3, r5
 801f010:	6820      	ldr	r0, [r4, #0]
 801f012:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 801f016:	4631      	mov	r1, r6
 801f018:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801f01c:	9700      	str	r7, [sp, #0]
 801f01e:	f003 fa57 	bl	80224d0 <rmw_take_with_info>
 801f022:	4603      	mov	r3, r0
 801f024:	b9c0      	cbnz	r0, 801f058 <rcl_take+0xa4>
 801f026:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 801f02a:	f240 1291 	movw	r2, #401	@ 0x191
 801f02e:	2900      	cmp	r1, #0
 801f030:	bf08      	it	eq
 801f032:	4613      	moveq	r3, r2
 801f034:	4618      	mov	r0, r3
 801f036:	b024      	add	sp, #144	@ 0x90
 801f038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f03c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801f040:	4618      	mov	r0, r3
 801f042:	b024      	add	sp, #144	@ 0x90
 801f044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f048:	230b      	movs	r3, #11
 801f04a:	e7f3      	b.n	801f034 <rcl_take+0x80>
 801f04c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801f050:	4618      	mov	r0, r3
 801f052:	4770      	bx	lr
 801f054:	ad14      	add	r5, sp, #80	@ 0x50
 801f056:	e7c0      	b.n	801efda <rcl_take+0x26>
 801f058:	f7ff f94c 	bl	801e2f4 <rcl_convert_rmw_ret_to_rcl_ret>
 801f05c:	4603      	mov	r3, r0
 801f05e:	e7e9      	b.n	801f034 <rcl_take+0x80>

0801f060 <rcl_subscription_get_rmw_handle>:
 801f060:	b118      	cbz	r0, 801f06a <rcl_subscription_get_rmw_handle+0xa>
 801f062:	6800      	ldr	r0, [r0, #0]
 801f064:	b108      	cbz	r0, 801f06a <rcl_subscription_get_rmw_handle+0xa>
 801f066:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801f06a:	4770      	bx	lr

0801f06c <rcl_subscription_is_valid>:
 801f06c:	b130      	cbz	r0, 801f07c <rcl_subscription_is_valid+0x10>
 801f06e:	6800      	ldr	r0, [r0, #0]
 801f070:	b120      	cbz	r0, 801f07c <rcl_subscription_is_valid+0x10>
 801f072:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801f076:	3800      	subs	r0, #0
 801f078:	bf18      	it	ne
 801f07a:	2001      	movne	r0, #1
 801f07c:	4770      	bx	lr
 801f07e:	bf00      	nop

0801f080 <rcl_get_system_time>:
 801f080:	4608      	mov	r0, r1
 801f082:	f7fa baf9 	b.w	8019678 <rcutils_system_time_now>
 801f086:	bf00      	nop

0801f088 <rcl_get_steady_time>:
 801f088:	4608      	mov	r0, r1
 801f08a:	f7fa bb1b 	b.w	80196c4 <rcutils_steady_time_now>
 801f08e:	bf00      	nop

0801f090 <rcl_get_ros_time>:
 801f090:	7a03      	ldrb	r3, [r0, #8]
 801f092:	b510      	push	{r4, lr}
 801f094:	460c      	mov	r4, r1
 801f096:	b143      	cbz	r3, 801f0aa <rcl_get_ros_time+0x1a>
 801f098:	2105      	movs	r1, #5
 801f09a:	f001 fd09 	bl	8020ab0 <__atomic_load_8>
 801f09e:	4602      	mov	r2, r0
 801f0a0:	460b      	mov	r3, r1
 801f0a2:	2000      	movs	r0, #0
 801f0a4:	e9c4 2300 	strd	r2, r3, [r4]
 801f0a8:	bd10      	pop	{r4, pc}
 801f0aa:	4608      	mov	r0, r1
 801f0ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f0b0:	f7fa bae2 	b.w	8019678 <rcutils_system_time_now>

0801f0b4 <rcl_clock_init>:
 801f0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f0b6:	4605      	mov	r5, r0
 801f0b8:	4610      	mov	r0, r2
 801f0ba:	4614      	mov	r4, r2
 801f0bc:	460e      	mov	r6, r1
 801f0be:	f7fa fa99 	bl	80195f4 <rcutils_allocator_is_valid>
 801f0c2:	b128      	cbz	r0, 801f0d0 <rcl_clock_init+0x1c>
 801f0c4:	2d03      	cmp	r5, #3
 801f0c6:	d803      	bhi.n	801f0d0 <rcl_clock_init+0x1c>
 801f0c8:	e8df f005 	tbb	[pc, r5]
 801f0cc:	0659301f 	.word	0x0659301f
 801f0d0:	f04f 0c0b 	mov.w	ip, #11
 801f0d4:	4660      	mov	r0, ip
 801f0d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f0d8:	2c00      	cmp	r4, #0
 801f0da:	d0f9      	beq.n	801f0d0 <rcl_clock_init+0x1c>
 801f0dc:	fab6 f386 	clz	r3, r6
 801f0e0:	095b      	lsrs	r3, r3, #5
 801f0e2:	2e00      	cmp	r6, #0
 801f0e4:	d0f4      	beq.n	801f0d0 <rcl_clock_init+0x1c>
 801f0e6:	6133      	str	r3, [r6, #16]
 801f0e8:	469c      	mov	ip, r3
 801f0ea:	f106 0514 	add.w	r5, r6, #20
 801f0ee:	4f32      	ldr	r7, [pc, #200]	@ (801f1b8 <rcl_clock_init+0x104>)
 801f0f0:	f04f 0e03 	mov.w	lr, #3
 801f0f4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801f0f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801f0fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801f0fc:	6823      	ldr	r3, [r4, #0]
 801f0fe:	4660      	mov	r0, ip
 801f100:	602b      	str	r3, [r5, #0]
 801f102:	60f7      	str	r7, [r6, #12]
 801f104:	f886 e000 	strb.w	lr, [r6]
 801f108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f10a:	2e00      	cmp	r6, #0
 801f10c:	d0e0      	beq.n	801f0d0 <rcl_clock_init+0x1c>
 801f10e:	2300      	movs	r3, #0
 801f110:	f106 0514 	add.w	r5, r6, #20
 801f114:	7033      	strb	r3, [r6, #0]
 801f116:	469c      	mov	ip, r3
 801f118:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801f11c:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801f120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801f122:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801f124:	6823      	ldr	r3, [r4, #0]
 801f126:	4660      	mov	r0, ip
 801f128:	602b      	str	r3, [r5, #0]
 801f12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f12c:	2c00      	cmp	r4, #0
 801f12e:	d0cf      	beq.n	801f0d0 <rcl_clock_init+0x1c>
 801f130:	fab6 f586 	clz	r5, r6
 801f134:	096d      	lsrs	r5, r5, #5
 801f136:	2e00      	cmp	r6, #0
 801f138:	d0ca      	beq.n	801f0d0 <rcl_clock_init+0x1c>
 801f13a:	46a6      	mov	lr, r4
 801f13c:	7035      	strb	r5, [r6, #0]
 801f13e:	f106 0c14 	add.w	ip, r6, #20
 801f142:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801f146:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801f14a:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801f14e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801f152:	f8de 3000 	ldr.w	r3, [lr]
 801f156:	2010      	movs	r0, #16
 801f158:	f8cc 3000 	str.w	r3, [ip]
 801f15c:	6823      	ldr	r3, [r4, #0]
 801f15e:	6921      	ldr	r1, [r4, #16]
 801f160:	4798      	blx	r3
 801f162:	6130      	str	r0, [r6, #16]
 801f164:	b320      	cbz	r0, 801f1b0 <rcl_clock_init+0xfc>
 801f166:	2200      	movs	r2, #0
 801f168:	2300      	movs	r3, #0
 801f16a:	46ac      	mov	ip, r5
 801f16c:	7205      	strb	r5, [r0, #8]
 801f16e:	e9c0 2300 	strd	r2, r3, [r0]
 801f172:	4a12      	ldr	r2, [pc, #72]	@ (801f1bc <rcl_clock_init+0x108>)
 801f174:	2301      	movs	r3, #1
 801f176:	4660      	mov	r0, ip
 801f178:	60f2      	str	r2, [r6, #12]
 801f17a:	7033      	strb	r3, [r6, #0]
 801f17c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f17e:	2c00      	cmp	r4, #0
 801f180:	d0a6      	beq.n	801f0d0 <rcl_clock_init+0x1c>
 801f182:	fab6 f386 	clz	r3, r6
 801f186:	095b      	lsrs	r3, r3, #5
 801f188:	2e00      	cmp	r6, #0
 801f18a:	d0a1      	beq.n	801f0d0 <rcl_clock_init+0x1c>
 801f18c:	6133      	str	r3, [r6, #16]
 801f18e:	469c      	mov	ip, r3
 801f190:	f106 0514 	add.w	r5, r6, #20
 801f194:	f8df e028 	ldr.w	lr, [pc, #40]	@ 801f1c0 <rcl_clock_init+0x10c>
 801f198:	2702      	movs	r7, #2
 801f19a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801f19e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801f1a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801f1a2:	6823      	ldr	r3, [r4, #0]
 801f1a4:	4660      	mov	r0, ip
 801f1a6:	602b      	str	r3, [r5, #0]
 801f1a8:	f8c6 e00c 	str.w	lr, [r6, #12]
 801f1ac:	7037      	strb	r7, [r6, #0]
 801f1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f1b0:	f04f 0c0a 	mov.w	ip, #10
 801f1b4:	e78e      	b.n	801f0d4 <rcl_clock_init+0x20>
 801f1b6:	bf00      	nop
 801f1b8:	0801f089 	.word	0x0801f089
 801f1bc:	0801f091 	.word	0x0801f091
 801f1c0:	0801f081 	.word	0x0801f081

0801f1c4 <rcl_clock_get_now>:
 801f1c4:	b140      	cbz	r0, 801f1d8 <rcl_clock_get_now+0x14>
 801f1c6:	b139      	cbz	r1, 801f1d8 <rcl_clock_get_now+0x14>
 801f1c8:	7803      	ldrb	r3, [r0, #0]
 801f1ca:	b11b      	cbz	r3, 801f1d4 <rcl_clock_get_now+0x10>
 801f1cc:	68c3      	ldr	r3, [r0, #12]
 801f1ce:	b10b      	cbz	r3, 801f1d4 <rcl_clock_get_now+0x10>
 801f1d0:	6900      	ldr	r0, [r0, #16]
 801f1d2:	4718      	bx	r3
 801f1d4:	2001      	movs	r0, #1
 801f1d6:	4770      	bx	lr
 801f1d8:	200b      	movs	r0, #11
 801f1da:	4770      	bx	lr

0801f1dc <rcl_timer_call>:
 801f1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1e0:	b087      	sub	sp, #28
 801f1e2:	2800      	cmp	r0, #0
 801f1e4:	d06c      	beq.n	801f2c0 <rcl_timer_call+0xe4>
 801f1e6:	6803      	ldr	r3, [r0, #0]
 801f1e8:	4604      	mov	r4, r0
 801f1ea:	2b00      	cmp	r3, #0
 801f1ec:	d062      	beq.n	801f2b4 <rcl_timer_call+0xd8>
 801f1ee:	f3bf 8f5b 	dmb	ish
 801f1f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801f1f6:	f3bf 8f5b 	dmb	ish
 801f1fa:	2b00      	cmp	r3, #0
 801f1fc:	d14f      	bne.n	801f29e <rcl_timer_call+0xc2>
 801f1fe:	6803      	ldr	r3, [r0, #0]
 801f200:	a904      	add	r1, sp, #16
 801f202:	6818      	ldr	r0, [r3, #0]
 801f204:	f7ff ffde 	bl	801f1c4 <rcl_clock_get_now>
 801f208:	4605      	mov	r5, r0
 801f20a:	2800      	cmp	r0, #0
 801f20c:	d149      	bne.n	801f2a2 <rcl_timer_call+0xc6>
 801f20e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f212:	2b00      	cmp	r3, #0
 801f214:	db49      	blt.n	801f2aa <rcl_timer_call+0xce>
 801f216:	2605      	movs	r6, #5
 801f218:	6820      	ldr	r0, [r4, #0]
 801f21a:	9600      	str	r6, [sp, #0]
 801f21c:	3020      	adds	r0, #32
 801f21e:	f001 fcb3 	bl	8020b88 <__atomic_exchange_8>
 801f222:	6823      	ldr	r3, [r4, #0]
 801f224:	4680      	mov	r8, r0
 801f226:	f3bf 8f5b 	dmb	ish
 801f22a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801f22e:	f3bf 8f5b 	dmb	ish
 801f232:	6820      	ldr	r0, [r4, #0]
 801f234:	4689      	mov	r9, r1
 801f236:	4631      	mov	r1, r6
 801f238:	3028      	adds	r0, #40	@ 0x28
 801f23a:	f001 fc39 	bl	8020ab0 <__atomic_load_8>
 801f23e:	460f      	mov	r7, r1
 801f240:	4631      	mov	r1, r6
 801f242:	4606      	mov	r6, r0
 801f244:	6820      	ldr	r0, [r4, #0]
 801f246:	3018      	adds	r0, #24
 801f248:	f001 fc32 	bl	8020ab0 <__atomic_load_8>
 801f24c:	4602      	mov	r2, r0
 801f24e:	9804      	ldr	r0, [sp, #16]
 801f250:	460b      	mov	r3, r1
 801f252:	18b6      	adds	r6, r6, r2
 801f254:	f8dd c014 	ldr.w	ip, [sp, #20]
 801f258:	4692      	mov	sl, r2
 801f25a:	eb47 0701 	adc.w	r7, r7, r1
 801f25e:	4286      	cmp	r6, r0
 801f260:	eb77 010c 	sbcs.w	r1, r7, ip
 801f264:	da04      	bge.n	801f270 <rcl_timer_call+0x94>
 801f266:	ea53 0102 	orrs.w	r1, r3, r2
 801f26a:	d12e      	bne.n	801f2ca <rcl_timer_call+0xee>
 801f26c:	4606      	mov	r6, r0
 801f26e:	4667      	mov	r7, ip
 801f270:	6820      	ldr	r0, [r4, #0]
 801f272:	2105      	movs	r1, #5
 801f274:	4632      	mov	r2, r6
 801f276:	463b      	mov	r3, r7
 801f278:	3028      	adds	r0, #40	@ 0x28
 801f27a:	9100      	str	r1, [sp, #0]
 801f27c:	f001 fc4e 	bl	8020b1c <__atomic_store_8>
 801f280:	f1bb 0f00 	cmp.w	fp, #0
 801f284:	d00d      	beq.n	801f2a2 <rcl_timer_call+0xc6>
 801f286:	9a04      	ldr	r2, [sp, #16]
 801f288:	4620      	mov	r0, r4
 801f28a:	9b05      	ldr	r3, [sp, #20]
 801f28c:	ebb2 0208 	subs.w	r2, r2, r8
 801f290:	eb63 0309 	sbc.w	r3, r3, r9
 801f294:	47d8      	blx	fp
 801f296:	4628      	mov	r0, r5
 801f298:	b007      	add	sp, #28
 801f29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f29e:	f240 3521 	movw	r5, #801	@ 0x321
 801f2a2:	4628      	mov	r0, r5
 801f2a4:	b007      	add	sp, #28
 801f2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2aa:	2501      	movs	r5, #1
 801f2ac:	4628      	mov	r0, r5
 801f2ae:	b007      	add	sp, #28
 801f2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2b4:	f44f 7548 	mov.w	r5, #800	@ 0x320
 801f2b8:	4628      	mov	r0, r5
 801f2ba:	b007      	add	sp, #28
 801f2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2c0:	250b      	movs	r5, #11
 801f2c2:	4628      	mov	r0, r5
 801f2c4:	b007      	add	sp, #28
 801f2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2ca:	1b80      	subs	r0, r0, r6
 801f2cc:	eb6c 0107 	sbc.w	r1, ip, r7
 801f2d0:	3801      	subs	r0, #1
 801f2d2:	f161 0100 	sbc.w	r1, r1, #0
 801f2d6:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801f2da:	f7e1 f819 	bl	8000310 <__aeabi_ldivmod>
 801f2de:	9b02      	ldr	r3, [sp, #8]
 801f2e0:	3001      	adds	r0, #1
 801f2e2:	f141 0100 	adc.w	r1, r1, #0
 801f2e6:	fb00 f303 	mul.w	r3, r0, r3
 801f2ea:	fb01 330a 	mla	r3, r1, sl, r3
 801f2ee:	fba0 0a0a 	umull	r0, sl, r0, sl
 801f2f2:	1986      	adds	r6, r0, r6
 801f2f4:	4453      	add	r3, sl
 801f2f6:	eb43 0707 	adc.w	r7, r3, r7
 801f2fa:	e7b9      	b.n	801f270 <rcl_timer_call+0x94>

0801f2fc <rcl_timer_is_ready>:
 801f2fc:	b570      	push	{r4, r5, r6, lr}
 801f2fe:	b082      	sub	sp, #8
 801f300:	b380      	cbz	r0, 801f364 <rcl_timer_is_ready+0x68>
 801f302:	6803      	ldr	r3, [r0, #0]
 801f304:	4604      	mov	r4, r0
 801f306:	b38b      	cbz	r3, 801f36c <rcl_timer_is_ready+0x70>
 801f308:	460d      	mov	r5, r1
 801f30a:	b359      	cbz	r1, 801f364 <rcl_timer_is_ready+0x68>
 801f30c:	f3bf 8f5b 	dmb	ish
 801f310:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801f314:	f3bf 8f5b 	dmb	ish
 801f318:	b953      	cbnz	r3, 801f330 <rcl_timer_is_ready+0x34>
 801f31a:	6803      	ldr	r3, [r0, #0]
 801f31c:	4669      	mov	r1, sp
 801f31e:	6818      	ldr	r0, [r3, #0]
 801f320:	f7ff ff50 	bl	801f1c4 <rcl_clock_get_now>
 801f324:	4606      	mov	r6, r0
 801f326:	b148      	cbz	r0, 801f33c <rcl_timer_is_ready+0x40>
 801f328:	f240 3321 	movw	r3, #801	@ 0x321
 801f32c:	4298      	cmp	r0, r3
 801f32e:	d102      	bne.n	801f336 <rcl_timer_is_ready+0x3a>
 801f330:	2300      	movs	r3, #0
 801f332:	461e      	mov	r6, r3
 801f334:	702b      	strb	r3, [r5, #0]
 801f336:	4630      	mov	r0, r6
 801f338:	b002      	add	sp, #8
 801f33a:	bd70      	pop	{r4, r5, r6, pc}
 801f33c:	6820      	ldr	r0, [r4, #0]
 801f33e:	2105      	movs	r1, #5
 801f340:	3028      	adds	r0, #40	@ 0x28
 801f342:	f001 fbb5 	bl	8020ab0 <__atomic_load_8>
 801f346:	9b00      	ldr	r3, [sp, #0]
 801f348:	1ac0      	subs	r0, r0, r3
 801f34a:	9b01      	ldr	r3, [sp, #4]
 801f34c:	eb61 0103 	sbc.w	r1, r1, r3
 801f350:	2801      	cmp	r0, #1
 801f352:	4630      	mov	r0, r6
 801f354:	f171 0300 	sbcs.w	r3, r1, #0
 801f358:	bfb4      	ite	lt
 801f35a:	2301      	movlt	r3, #1
 801f35c:	2300      	movge	r3, #0
 801f35e:	702b      	strb	r3, [r5, #0]
 801f360:	b002      	add	sp, #8
 801f362:	bd70      	pop	{r4, r5, r6, pc}
 801f364:	260b      	movs	r6, #11
 801f366:	4630      	mov	r0, r6
 801f368:	b002      	add	sp, #8
 801f36a:	bd70      	pop	{r4, r5, r6, pc}
 801f36c:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801f370:	e7e1      	b.n	801f336 <rcl_timer_is_ready+0x3a>
 801f372:	bf00      	nop

0801f374 <rcl_timer_get_time_until_next_call>:
 801f374:	b570      	push	{r4, r5, r6, lr}
 801f376:	b082      	sub	sp, #8
 801f378:	b330      	cbz	r0, 801f3c8 <rcl_timer_get_time_until_next_call+0x54>
 801f37a:	6803      	ldr	r3, [r0, #0]
 801f37c:	4604      	mov	r4, r0
 801f37e:	b33b      	cbz	r3, 801f3d0 <rcl_timer_get_time_until_next_call+0x5c>
 801f380:	460d      	mov	r5, r1
 801f382:	b309      	cbz	r1, 801f3c8 <rcl_timer_get_time_until_next_call+0x54>
 801f384:	f3bf 8f5b 	dmb	ish
 801f388:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801f38c:	f3bf 8f5b 	dmb	ish
 801f390:	b9ab      	cbnz	r3, 801f3be <rcl_timer_get_time_until_next_call+0x4a>
 801f392:	6803      	ldr	r3, [r0, #0]
 801f394:	4669      	mov	r1, sp
 801f396:	6818      	ldr	r0, [r3, #0]
 801f398:	f7ff ff14 	bl	801f1c4 <rcl_clock_get_now>
 801f39c:	4606      	mov	r6, r0
 801f39e:	b958      	cbnz	r0, 801f3b8 <rcl_timer_get_time_until_next_call+0x44>
 801f3a0:	6820      	ldr	r0, [r4, #0]
 801f3a2:	2105      	movs	r1, #5
 801f3a4:	3028      	adds	r0, #40	@ 0x28
 801f3a6:	f001 fb83 	bl	8020ab0 <__atomic_load_8>
 801f3aa:	9b00      	ldr	r3, [sp, #0]
 801f3ac:	1ac0      	subs	r0, r0, r3
 801f3ae:	9b01      	ldr	r3, [sp, #4]
 801f3b0:	eb61 0103 	sbc.w	r1, r1, r3
 801f3b4:	6028      	str	r0, [r5, #0]
 801f3b6:	6069      	str	r1, [r5, #4]
 801f3b8:	4630      	mov	r0, r6
 801f3ba:	b002      	add	sp, #8
 801f3bc:	bd70      	pop	{r4, r5, r6, pc}
 801f3be:	f240 3621 	movw	r6, #801	@ 0x321
 801f3c2:	4630      	mov	r0, r6
 801f3c4:	b002      	add	sp, #8
 801f3c6:	bd70      	pop	{r4, r5, r6, pc}
 801f3c8:	260b      	movs	r6, #11
 801f3ca:	4630      	mov	r0, r6
 801f3cc:	b002      	add	sp, #8
 801f3ce:	bd70      	pop	{r4, r5, r6, pc}
 801f3d0:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801f3d4:	e7f0      	b.n	801f3b8 <rcl_timer_get_time_until_next_call+0x44>
 801f3d6:	bf00      	nop

0801f3d8 <rcl_timer_get_guard_condition>:
 801f3d8:	b130      	cbz	r0, 801f3e8 <rcl_timer_get_guard_condition+0x10>
 801f3da:	6800      	ldr	r0, [r0, #0]
 801f3dc:	b120      	cbz	r0, 801f3e8 <rcl_timer_get_guard_condition+0x10>
 801f3de:	68c3      	ldr	r3, [r0, #12]
 801f3e0:	b10b      	cbz	r3, 801f3e6 <rcl_timer_get_guard_condition+0xe>
 801f3e2:	3008      	adds	r0, #8
 801f3e4:	4770      	bx	lr
 801f3e6:	4618      	mov	r0, r3
 801f3e8:	4770      	bx	lr
 801f3ea:	bf00      	nop

0801f3ec <rcl_get_zero_initialized_wait_set>:
 801f3ec:	b510      	push	{r4, lr}
 801f3ee:	4c08      	ldr	r4, [pc, #32]	@ (801f410 <rcl_get_zero_initialized_wait_set+0x24>)
 801f3f0:	4686      	mov	lr, r0
 801f3f2:	4684      	mov	ip, r0
 801f3f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801f3f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801f3fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801f3fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801f400:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801f402:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801f406:	6823      	ldr	r3, [r4, #0]
 801f408:	4670      	mov	r0, lr
 801f40a:	f8cc 3000 	str.w	r3, [ip]
 801f40e:	bd10      	pop	{r4, pc}
 801f410:	0802ac20 	.word	0x0802ac20

0801f414 <rcl_wait_set_is_valid>:
 801f414:	b118      	cbz	r0, 801f41e <rcl_wait_set_is_valid+0xa>
 801f416:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801f418:	3800      	subs	r0, #0
 801f41a:	bf18      	it	ne
 801f41c:	2001      	movne	r0, #1
 801f41e:	4770      	bx	lr

0801f420 <rcl_wait_set_fini>:
 801f420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f424:	b082      	sub	sp, #8
 801f426:	2800      	cmp	r0, #0
 801f428:	f000 8095 	beq.w	801f556 <rcl_wait_set_fini+0x136>
 801f42c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801f42e:	4604      	mov	r4, r0
 801f430:	2e00      	cmp	r6, #0
 801f432:	f000 808c 	beq.w	801f54e <rcl_wait_set_fini+0x12e>
 801f436:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801f438:	f003 fa24 	bl	8022884 <rmw_destroy_wait_set>
 801f43c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801f43e:	1e06      	subs	r6, r0, #0
 801f440:	bf18      	it	ne
 801f442:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801f446:	2d00      	cmp	r5, #0
 801f448:	f000 8081 	beq.w	801f54e <rcl_wait_set_fini+0x12e>
 801f44c:	2700      	movs	r7, #0
 801f44e:	6820      	ldr	r0, [r4, #0]
 801f450:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801f454:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801f456:	6067      	str	r7, [r4, #4]
 801f458:	602f      	str	r7, [r5, #0]
 801f45a:	b120      	cbz	r0, 801f466 <rcl_wait_set_fini+0x46>
 801f45c:	9101      	str	r1, [sp, #4]
 801f45e:	47c0      	blx	r8
 801f460:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801f462:	9901      	ldr	r1, [sp, #4]
 801f464:	6027      	str	r7, [r4, #0]
 801f466:	68a8      	ldr	r0, [r5, #8]
 801f468:	b120      	cbz	r0, 801f474 <rcl_wait_set_fini+0x54>
 801f46a:	47c0      	blx	r8
 801f46c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801f46e:	2300      	movs	r3, #0
 801f470:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801f474:	f04f 0800 	mov.w	r8, #0
 801f478:	68a0      	ldr	r0, [r4, #8]
 801f47a:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801f47c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801f47e:	f8c4 800c 	str.w	r8, [r4, #12]
 801f482:	f8c5 800c 	str.w	r8, [r5, #12]
 801f486:	b128      	cbz	r0, 801f494 <rcl_wait_set_fini+0x74>
 801f488:	47b8      	blx	r7
 801f48a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801f48c:	f8c4 8008 	str.w	r8, [r4, #8]
 801f490:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801f492:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801f494:	f04f 0800 	mov.w	r8, #0
 801f498:	6968      	ldr	r0, [r5, #20]
 801f49a:	f8c5 8010 	str.w	r8, [r5, #16]
 801f49e:	b128      	cbz	r0, 801f4ac <rcl_wait_set_fini+0x8c>
 801f4a0:	47b8      	blx	r7
 801f4a2:	f8c5 8014 	str.w	r8, [r5, #20]
 801f4a6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801f4a8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801f4aa:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801f4ac:	f04f 0800 	mov.w	r8, #0
 801f4b0:	6920      	ldr	r0, [r4, #16]
 801f4b2:	f8c4 8014 	str.w	r8, [r4, #20]
 801f4b6:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801f4ba:	b128      	cbz	r0, 801f4c8 <rcl_wait_set_fini+0xa8>
 801f4bc:	47b8      	blx	r7
 801f4be:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801f4c0:	f8c4 8010 	str.w	r8, [r4, #16]
 801f4c4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801f4c6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801f4c8:	f04f 0800 	mov.w	r8, #0
 801f4cc:	69a0      	ldr	r0, [r4, #24]
 801f4ce:	f8c4 801c 	str.w	r8, [r4, #28]
 801f4d2:	f8c5 8018 	str.w	r8, [r5, #24]
 801f4d6:	b128      	cbz	r0, 801f4e4 <rcl_wait_set_fini+0xc4>
 801f4d8:	9101      	str	r1, [sp, #4]
 801f4da:	47b8      	blx	r7
 801f4dc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801f4de:	9901      	ldr	r1, [sp, #4]
 801f4e0:	f8c4 8018 	str.w	r8, [r4, #24]
 801f4e4:	6a28      	ldr	r0, [r5, #32]
 801f4e6:	b120      	cbz	r0, 801f4f2 <rcl_wait_set_fini+0xd2>
 801f4e8:	47b8      	blx	r7
 801f4ea:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801f4ec:	2300      	movs	r3, #0
 801f4ee:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801f4f2:	2700      	movs	r7, #0
 801f4f4:	6a20      	ldr	r0, [r4, #32]
 801f4f6:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801f4fa:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801f4fc:	6267      	str	r7, [r4, #36]	@ 0x24
 801f4fe:	626f      	str	r7, [r5, #36]	@ 0x24
 801f500:	b120      	cbz	r0, 801f50c <rcl_wait_set_fini+0xec>
 801f502:	9101      	str	r1, [sp, #4]
 801f504:	47c0      	blx	r8
 801f506:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801f508:	9901      	ldr	r1, [sp, #4]
 801f50a:	6227      	str	r7, [r4, #32]
 801f50c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801f50e:	b120      	cbz	r0, 801f51a <rcl_wait_set_fini+0xfa>
 801f510:	47c0      	blx	r8
 801f512:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801f514:	2300      	movs	r3, #0
 801f516:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801f51a:	2700      	movs	r7, #0
 801f51c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f51e:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801f522:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801f524:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801f526:	632f      	str	r7, [r5, #48]	@ 0x30
 801f528:	b120      	cbz	r0, 801f534 <rcl_wait_set_fini+0x114>
 801f52a:	9101      	str	r1, [sp, #4]
 801f52c:	47c0      	blx	r8
 801f52e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801f530:	9901      	ldr	r1, [sp, #4]
 801f532:	62a7      	str	r7, [r4, #40]	@ 0x28
 801f534:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801f536:	b120      	cbz	r0, 801f542 <rcl_wait_set_fini+0x122>
 801f538:	47c0      	blx	r8
 801f53a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801f53c:	2300      	movs	r3, #0
 801f53e:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801f542:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801f544:	4628      	mov	r0, r5
 801f546:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801f548:	4798      	blx	r3
 801f54a:	2300      	movs	r3, #0
 801f54c:	6323      	str	r3, [r4, #48]	@ 0x30
 801f54e:	4630      	mov	r0, r6
 801f550:	b002      	add	sp, #8
 801f552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f556:	260b      	movs	r6, #11
 801f558:	4630      	mov	r0, r6
 801f55a:	b002      	add	sp, #8
 801f55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f560 <rcl_wait_set_add_subscription>:
 801f560:	b318      	cbz	r0, 801f5aa <rcl_wait_set_add_subscription+0x4a>
 801f562:	b538      	push	{r3, r4, r5, lr}
 801f564:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801f566:	4604      	mov	r4, r0
 801f568:	b30b      	cbz	r3, 801f5ae <rcl_wait_set_add_subscription+0x4e>
 801f56a:	b319      	cbz	r1, 801f5b4 <rcl_wait_set_add_subscription+0x54>
 801f56c:	681d      	ldr	r5, [r3, #0]
 801f56e:	6840      	ldr	r0, [r0, #4]
 801f570:	4285      	cmp	r5, r0
 801f572:	d217      	bcs.n	801f5a4 <rcl_wait_set_add_subscription+0x44>
 801f574:	1c68      	adds	r0, r5, #1
 801f576:	6018      	str	r0, [r3, #0]
 801f578:	6823      	ldr	r3, [r4, #0]
 801f57a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801f57e:	b102      	cbz	r2, 801f582 <rcl_wait_set_add_subscription+0x22>
 801f580:	6015      	str	r5, [r2, #0]
 801f582:	4608      	mov	r0, r1
 801f584:	f7ff fd6c 	bl	801f060 <rcl_subscription_get_rmw_handle>
 801f588:	b150      	cbz	r0, 801f5a0 <rcl_wait_set_add_subscription+0x40>
 801f58a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f58c:	6842      	ldr	r2, [r0, #4]
 801f58e:	2000      	movs	r0, #0
 801f590:	689b      	ldr	r3, [r3, #8]
 801f592:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801f596:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801f598:	6853      	ldr	r3, [r2, #4]
 801f59a:	3301      	adds	r3, #1
 801f59c:	6053      	str	r3, [r2, #4]
 801f59e:	bd38      	pop	{r3, r4, r5, pc}
 801f5a0:	2001      	movs	r0, #1
 801f5a2:	bd38      	pop	{r3, r4, r5, pc}
 801f5a4:	f240 3086 	movw	r0, #902	@ 0x386
 801f5a8:	bd38      	pop	{r3, r4, r5, pc}
 801f5aa:	200b      	movs	r0, #11
 801f5ac:	4770      	bx	lr
 801f5ae:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801f5b2:	bd38      	pop	{r3, r4, r5, pc}
 801f5b4:	200b      	movs	r0, #11
 801f5b6:	bd38      	pop	{r3, r4, r5, pc}

0801f5b8 <rcl_wait_set_clear>:
 801f5b8:	2800      	cmp	r0, #0
 801f5ba:	d074      	beq.n	801f6a6 <rcl_wait_set_clear+0xee>
 801f5bc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801f5be:	b510      	push	{r4, lr}
 801f5c0:	4604      	mov	r4, r0
 801f5c2:	2b00      	cmp	r3, #0
 801f5c4:	d071      	beq.n	801f6aa <rcl_wait_set_clear+0xf2>
 801f5c6:	6800      	ldr	r0, [r0, #0]
 801f5c8:	b138      	cbz	r0, 801f5da <rcl_wait_set_clear+0x22>
 801f5ca:	6862      	ldr	r2, [r4, #4]
 801f5cc:	2100      	movs	r1, #0
 801f5ce:	0092      	lsls	r2, r2, #2
 801f5d0:	f006 f900 	bl	80257d4 <memset>
 801f5d4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f5d6:	2200      	movs	r2, #0
 801f5d8:	601a      	str	r2, [r3, #0]
 801f5da:	68a0      	ldr	r0, [r4, #8]
 801f5dc:	b138      	cbz	r0, 801f5ee <rcl_wait_set_clear+0x36>
 801f5de:	68e2      	ldr	r2, [r4, #12]
 801f5e0:	2100      	movs	r1, #0
 801f5e2:	0092      	lsls	r2, r2, #2
 801f5e4:	f006 f8f6 	bl	80257d4 <memset>
 801f5e8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f5ea:	2200      	movs	r2, #0
 801f5ec:	60da      	str	r2, [r3, #12]
 801f5ee:	69a0      	ldr	r0, [r4, #24]
 801f5f0:	b138      	cbz	r0, 801f602 <rcl_wait_set_clear+0x4a>
 801f5f2:	69e2      	ldr	r2, [r4, #28]
 801f5f4:	2100      	movs	r1, #0
 801f5f6:	0092      	lsls	r2, r2, #2
 801f5f8:	f006 f8ec 	bl	80257d4 <memset>
 801f5fc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f5fe:	2200      	movs	r2, #0
 801f600:	619a      	str	r2, [r3, #24]
 801f602:	6a20      	ldr	r0, [r4, #32]
 801f604:	b138      	cbz	r0, 801f616 <rcl_wait_set_clear+0x5e>
 801f606:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801f608:	2100      	movs	r1, #0
 801f60a:	0092      	lsls	r2, r2, #2
 801f60c:	f006 f8e2 	bl	80257d4 <memset>
 801f610:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f612:	2200      	movs	r2, #0
 801f614:	625a      	str	r2, [r3, #36]	@ 0x24
 801f616:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f618:	b138      	cbz	r0, 801f62a <rcl_wait_set_clear+0x72>
 801f61a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801f61c:	2100      	movs	r1, #0
 801f61e:	0092      	lsls	r2, r2, #2
 801f620:	f006 f8d8 	bl	80257d4 <memset>
 801f624:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f626:	2200      	movs	r2, #0
 801f628:	631a      	str	r2, [r3, #48]	@ 0x30
 801f62a:	6920      	ldr	r0, [r4, #16]
 801f62c:	b138      	cbz	r0, 801f63e <rcl_wait_set_clear+0x86>
 801f62e:	6962      	ldr	r2, [r4, #20]
 801f630:	2100      	movs	r1, #0
 801f632:	0092      	lsls	r2, r2, #2
 801f634:	f006 f8ce 	bl	80257d4 <memset>
 801f638:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f63a:	2200      	movs	r2, #0
 801f63c:	641a      	str	r2, [r3, #64]	@ 0x40
 801f63e:	6898      	ldr	r0, [r3, #8]
 801f640:	b138      	cbz	r0, 801f652 <rcl_wait_set_clear+0x9a>
 801f642:	685a      	ldr	r2, [r3, #4]
 801f644:	2100      	movs	r1, #0
 801f646:	0092      	lsls	r2, r2, #2
 801f648:	f006 f8c4 	bl	80257d4 <memset>
 801f64c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f64e:	2200      	movs	r2, #0
 801f650:	605a      	str	r2, [r3, #4]
 801f652:	6958      	ldr	r0, [r3, #20]
 801f654:	b138      	cbz	r0, 801f666 <rcl_wait_set_clear+0xae>
 801f656:	691a      	ldr	r2, [r3, #16]
 801f658:	2100      	movs	r1, #0
 801f65a:	0092      	lsls	r2, r2, #2
 801f65c:	f006 f8ba 	bl	80257d4 <memset>
 801f660:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f662:	2200      	movs	r2, #0
 801f664:	611a      	str	r2, [r3, #16]
 801f666:	6a18      	ldr	r0, [r3, #32]
 801f668:	b138      	cbz	r0, 801f67a <rcl_wait_set_clear+0xc2>
 801f66a:	69da      	ldr	r2, [r3, #28]
 801f66c:	2100      	movs	r1, #0
 801f66e:	0092      	lsls	r2, r2, #2
 801f670:	f006 f8b0 	bl	80257d4 <memset>
 801f674:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f676:	2200      	movs	r2, #0
 801f678:	61da      	str	r2, [r3, #28]
 801f67a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801f67c:	b138      	cbz	r0, 801f68e <rcl_wait_set_clear+0xd6>
 801f67e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801f680:	2100      	movs	r1, #0
 801f682:	0092      	lsls	r2, r2, #2
 801f684:	f006 f8a6 	bl	80257d4 <memset>
 801f688:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f68a:	2200      	movs	r2, #0
 801f68c:	629a      	str	r2, [r3, #40]	@ 0x28
 801f68e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801f690:	b140      	cbz	r0, 801f6a4 <rcl_wait_set_clear+0xec>
 801f692:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801f694:	2100      	movs	r1, #0
 801f696:	0092      	lsls	r2, r2, #2
 801f698:	f006 f89c 	bl	80257d4 <memset>
 801f69c:	2300      	movs	r3, #0
 801f69e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801f6a0:	4618      	mov	r0, r3
 801f6a2:	6353      	str	r3, [r2, #52]	@ 0x34
 801f6a4:	bd10      	pop	{r4, pc}
 801f6a6:	200b      	movs	r0, #11
 801f6a8:	4770      	bx	lr
 801f6aa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801f6ae:	bd10      	pop	{r4, pc}

0801f6b0 <rcl_wait_set_resize>:
 801f6b0:	2800      	cmp	r0, #0
 801f6b2:	f000 8180 	beq.w	801f9b6 <rcl_wait_set_resize+0x306>
 801f6b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6ba:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 801f6bc:	b083      	sub	sp, #12
 801f6be:	4605      	mov	r5, r0
 801f6c0:	2c00      	cmp	r4, #0
 801f6c2:	f000 817a 	beq.w	801f9ba <rcl_wait_set_resize+0x30a>
 801f6c6:	f04f 0900 	mov.w	r9, #0
 801f6ca:	461f      	mov	r7, r3
 801f6cc:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801f6d0:	4688      	mov	r8, r1
 801f6d2:	4616      	mov	r6, r2
 801f6d4:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801f6d8:	f8c0 9004 	str.w	r9, [r0, #4]
 801f6dc:	f8c4 9000 	str.w	r9, [r4]
 801f6e0:	2900      	cmp	r1, #0
 801f6e2:	f000 80bf 	beq.w	801f864 <rcl_wait_set_resize+0x1b4>
 801f6e6:	008c      	lsls	r4, r1, #2
 801f6e8:	4652      	mov	r2, sl
 801f6ea:	6800      	ldr	r0, [r0, #0]
 801f6ec:	4621      	mov	r1, r4
 801f6ee:	9301      	str	r3, [sp, #4]
 801f6f0:	4798      	blx	r3
 801f6f2:	9b01      	ldr	r3, [sp, #4]
 801f6f4:	6028      	str	r0, [r5, #0]
 801f6f6:	2800      	cmp	r0, #0
 801f6f8:	f000 80f6 	beq.w	801f8e8 <rcl_wait_set_resize+0x238>
 801f6fc:	4622      	mov	r2, r4
 801f6fe:	4649      	mov	r1, r9
 801f700:	9301      	str	r3, [sp, #4]
 801f702:	f006 f867 	bl	80257d4 <memset>
 801f706:	f8c5 8004 	str.w	r8, [r5, #4]
 801f70a:	4652      	mov	r2, sl
 801f70c:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801f710:	4621      	mov	r1, r4
 801f712:	9b01      	ldr	r3, [sp, #4]
 801f714:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801f718:	f8c8 9004 	str.w	r9, [r8, #4]
 801f71c:	4798      	blx	r3
 801f71e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801f720:	f8c8 0008 	str.w	r0, [r8, #8]
 801f724:	689b      	ldr	r3, [r3, #8]
 801f726:	2b00      	cmp	r3, #0
 801f728:	f000 814a 	beq.w	801f9c0 <rcl_wait_set_resize+0x310>
 801f72c:	4622      	mov	r2, r4
 801f72e:	4649      	mov	r1, r9
 801f730:	4618      	mov	r0, r3
 801f732:	f006 f84f 	bl	80257d4 <memset>
 801f736:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801f738:	f04f 0800 	mov.w	r8, #0
 801f73c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801f740:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 801f744:	f8c5 800c 	str.w	r8, [r5, #12]
 801f748:	f8c4 800c 	str.w	r8, [r4, #12]
 801f74c:	2e00      	cmp	r6, #0
 801f74e:	f040 809b 	bne.w	801f888 <rcl_wait_set_resize+0x1d8>
 801f752:	68a8      	ldr	r0, [r5, #8]
 801f754:	b128      	cbz	r0, 801f762 <rcl_wait_set_resize+0xb2>
 801f756:	4649      	mov	r1, r9
 801f758:	4790      	blx	r2
 801f75a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801f75c:	60ae      	str	r6, [r5, #8]
 801f75e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801f762:	f04f 0800 	mov.w	r8, #0
 801f766:	19f6      	adds	r6, r6, r7
 801f768:	f8c4 8010 	str.w	r8, [r4, #16]
 801f76c:	f040 80a2 	bne.w	801f8b4 <rcl_wait_set_resize+0x204>
 801f770:	6960      	ldr	r0, [r4, #20]
 801f772:	b130      	cbz	r0, 801f782 <rcl_wait_set_resize+0xd2>
 801f774:	4649      	mov	r1, r9
 801f776:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801f778:	4798      	blx	r3
 801f77a:	6166      	str	r6, [r4, #20]
 801f77c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801f77e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801f782:	2600      	movs	r6, #0
 801f784:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801f788:	616e      	str	r6, [r5, #20]
 801f78a:	6426      	str	r6, [r4, #64]	@ 0x40
 801f78c:	2f00      	cmp	r7, #0
 801f78e:	f040 80af 	bne.w	801f8f0 <rcl_wait_set_resize+0x240>
 801f792:	6928      	ldr	r0, [r5, #16]
 801f794:	b138      	cbz	r0, 801f7a6 <rcl_wait_set_resize+0xf6>
 801f796:	4649      	mov	r1, r9
 801f798:	47d0      	blx	sl
 801f79a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801f79c:	612f      	str	r7, [r5, #16]
 801f79e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801f7a2:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801f7a6:	2600      	movs	r6, #0
 801f7a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f7aa:	61ee      	str	r6, [r5, #28]
 801f7ac:	61a6      	str	r6, [r4, #24]
 801f7ae:	2b00      	cmp	r3, #0
 801f7b0:	f040 8093 	bne.w	801f8da <rcl_wait_set_resize+0x22a>
 801f7b4:	69a8      	ldr	r0, [r5, #24]
 801f7b6:	b120      	cbz	r0, 801f7c2 <rcl_wait_set_resize+0x112>
 801f7b8:	4649      	mov	r1, r9
 801f7ba:	47d0      	blx	sl
 801f7bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f7be:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801f7c0:	61ab      	str	r3, [r5, #24]
 801f7c2:	6a20      	ldr	r0, [r4, #32]
 801f7c4:	b128      	cbz	r0, 801f7d2 <rcl_wait_set_resize+0x122>
 801f7c6:	4649      	mov	r1, r9
 801f7c8:	47d0      	blx	sl
 801f7ca:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801f7cc:	2300      	movs	r3, #0
 801f7ce:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801f7d2:	2600      	movs	r6, #0
 801f7d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f7d6:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801f7d8:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801f7dc:	626e      	str	r6, [r5, #36]	@ 0x24
 801f7de:	6266      	str	r6, [r4, #36]	@ 0x24
 801f7e0:	2b00      	cmp	r3, #0
 801f7e2:	f000 8098 	beq.w	801f916 <rcl_wait_set_resize+0x266>
 801f7e6:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801f7ea:	463a      	mov	r2, r7
 801f7ec:	6a28      	ldr	r0, [r5, #32]
 801f7ee:	4651      	mov	r1, sl
 801f7f0:	47c8      	blx	r9
 801f7f2:	6228      	str	r0, [r5, #32]
 801f7f4:	2800      	cmp	r0, #0
 801f7f6:	d077      	beq.n	801f8e8 <rcl_wait_set_resize+0x238>
 801f7f8:	4652      	mov	r2, sl
 801f7fa:	4631      	mov	r1, r6
 801f7fc:	f005 ffea 	bl	80257d4 <memset>
 801f800:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801f802:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f804:	463a      	mov	r2, r7
 801f806:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801f808:	4651      	mov	r1, sl
 801f80a:	626b      	str	r3, [r5, #36]	@ 0x24
 801f80c:	62a6      	str	r6, [r4, #40]	@ 0x28
 801f80e:	47c8      	blx	r9
 801f810:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801f812:	62e0      	str	r0, [r4, #44]	@ 0x2c
 801f814:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801f816:	2c00      	cmp	r4, #0
 801f818:	f000 80f2 	beq.w	801fa00 <rcl_wait_set_resize+0x350>
 801f81c:	4620      	mov	r0, r4
 801f81e:	4652      	mov	r2, sl
 801f820:	4631      	mov	r1, r6
 801f822:	f005 ffd7 	bl	80257d4 <memset>
 801f826:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801f828:	2600      	movs	r6, #0
 801f82a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f82c:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801f82e:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801f832:	62ee      	str	r6, [r5, #44]	@ 0x2c
 801f834:	6326      	str	r6, [r4, #48]	@ 0x30
 801f836:	2b00      	cmp	r3, #0
 801f838:	f040 8097 	bne.w	801f96a <rcl_wait_set_resize+0x2ba>
 801f83c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801f83e:	b120      	cbz	r0, 801f84a <rcl_wait_set_resize+0x19a>
 801f840:	4639      	mov	r1, r7
 801f842:	47c0      	blx	r8
 801f844:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f846:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801f848:	62ab      	str	r3, [r5, #40]	@ 0x28
 801f84a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801f84c:	2800      	cmp	r0, #0
 801f84e:	d04c      	beq.n	801f8ea <rcl_wait_set_resize+0x23a>
 801f850:	4639      	mov	r1, r7
 801f852:	47c0      	blx	r8
 801f854:	2300      	movs	r3, #0
 801f856:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801f858:	4618      	mov	r0, r3
 801f85a:	e9c2 330d 	strd	r3, r3, [r2, #52]	@ 0x34
 801f85e:	b003      	add	sp, #12
 801f860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f864:	6800      	ldr	r0, [r0, #0]
 801f866:	b120      	cbz	r0, 801f872 <rcl_wait_set_resize+0x1c2>
 801f868:	4651      	mov	r1, sl
 801f86a:	47d8      	blx	fp
 801f86c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801f86e:	f8c5 8000 	str.w	r8, [r5]
 801f872:	68a0      	ldr	r0, [r4, #8]
 801f874:	2800      	cmp	r0, #0
 801f876:	f43f af5f 	beq.w	801f738 <rcl_wait_set_resize+0x88>
 801f87a:	4651      	mov	r1, sl
 801f87c:	47d8      	blx	fp
 801f87e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801f880:	2300      	movs	r3, #0
 801f882:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801f886:	e757      	b.n	801f738 <rcl_wait_set_resize+0x88>
 801f888:	00b4      	lsls	r4, r6, #2
 801f88a:	464a      	mov	r2, r9
 801f88c:	68a8      	ldr	r0, [r5, #8]
 801f88e:	4621      	mov	r1, r4
 801f890:	4798      	blx	r3
 801f892:	60a8      	str	r0, [r5, #8]
 801f894:	b340      	cbz	r0, 801f8e8 <rcl_wait_set_resize+0x238>
 801f896:	4622      	mov	r2, r4
 801f898:	4641      	mov	r1, r8
 801f89a:	f005 ff9b 	bl	80257d4 <memset>
 801f89e:	f04f 0800 	mov.w	r8, #0
 801f8a2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801f8a4:	60ee      	str	r6, [r5, #12]
 801f8a6:	19f6      	adds	r6, r6, r7
 801f8a8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801f8ac:	f8c4 8010 	str.w	r8, [r4, #16]
 801f8b0:	f43f af5e 	beq.w	801f770 <rcl_wait_set_resize+0xc0>
 801f8b4:	00b6      	lsls	r6, r6, #2
 801f8b6:	464a      	mov	r2, r9
 801f8b8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801f8ba:	6960      	ldr	r0, [r4, #20]
 801f8bc:	4631      	mov	r1, r6
 801f8be:	4798      	blx	r3
 801f8c0:	4681      	mov	r9, r0
 801f8c2:	6160      	str	r0, [r4, #20]
 801f8c4:	2800      	cmp	r0, #0
 801f8c6:	f000 8084 	beq.w	801f9d2 <rcl_wait_set_resize+0x322>
 801f8ca:	4632      	mov	r2, r6
 801f8cc:	4641      	mov	r1, r8
 801f8ce:	f005 ff81 	bl	80257d4 <memset>
 801f8d2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801f8d4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801f8d8:	e753      	b.n	801f782 <rcl_wait_set_resize+0xd2>
 801f8da:	009c      	lsls	r4, r3, #2
 801f8dc:	464a      	mov	r2, r9
 801f8de:	69a8      	ldr	r0, [r5, #24]
 801f8e0:	4621      	mov	r1, r4
 801f8e2:	47c0      	blx	r8
 801f8e4:	61a8      	str	r0, [r5, #24]
 801f8e6:	bb40      	cbnz	r0, 801f93a <rcl_wait_set_resize+0x28a>
 801f8e8:	200a      	movs	r0, #10
 801f8ea:	b003      	add	sp, #12
 801f8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8f0:	00bc      	lsls	r4, r7, #2
 801f8f2:	464a      	mov	r2, r9
 801f8f4:	6928      	ldr	r0, [r5, #16]
 801f8f6:	4621      	mov	r1, r4
 801f8f8:	47c0      	blx	r8
 801f8fa:	6128      	str	r0, [r5, #16]
 801f8fc:	2800      	cmp	r0, #0
 801f8fe:	d0f3      	beq.n	801f8e8 <rcl_wait_set_resize+0x238>
 801f900:	4622      	mov	r2, r4
 801f902:	4631      	mov	r1, r6
 801f904:	f005 ff66 	bl	80257d4 <memset>
 801f908:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801f90a:	616f      	str	r7, [r5, #20]
 801f90c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801f910:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801f914:	e747      	b.n	801f7a6 <rcl_wait_set_resize+0xf6>
 801f916:	6a28      	ldr	r0, [r5, #32]
 801f918:	b120      	cbz	r0, 801f924 <rcl_wait_set_resize+0x274>
 801f91a:	4639      	mov	r1, r7
 801f91c:	47c0      	blx	r8
 801f91e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f920:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801f922:	622b      	str	r3, [r5, #32]
 801f924:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801f926:	2800      	cmp	r0, #0
 801f928:	f43f af7e 	beq.w	801f828 <rcl_wait_set_resize+0x178>
 801f92c:	4639      	mov	r1, r7
 801f92e:	47c0      	blx	r8
 801f930:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801f932:	2300      	movs	r3, #0
 801f934:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801f938:	e776      	b.n	801f828 <rcl_wait_set_resize+0x178>
 801f93a:	4622      	mov	r2, r4
 801f93c:	4631      	mov	r1, r6
 801f93e:	f005 ff49 	bl	80257d4 <memset>
 801f942:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 801f944:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f946:	464a      	mov	r2, r9
 801f948:	6a38      	ldr	r0, [r7, #32]
 801f94a:	4621      	mov	r1, r4
 801f94c:	61eb      	str	r3, [r5, #28]
 801f94e:	61fe      	str	r6, [r7, #28]
 801f950:	47c0      	blx	r8
 801f952:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801f954:	6238      	str	r0, [r7, #32]
 801f956:	6a1f      	ldr	r7, [r3, #32]
 801f958:	2f00      	cmp	r7, #0
 801f95a:	d04a      	beq.n	801f9f2 <rcl_wait_set_resize+0x342>
 801f95c:	4622      	mov	r2, r4
 801f95e:	4631      	mov	r1, r6
 801f960:	4638      	mov	r0, r7
 801f962:	f005 ff37 	bl	80257d4 <memset>
 801f966:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801f968:	e733      	b.n	801f7d2 <rcl_wait_set_resize+0x122>
 801f96a:	009c      	lsls	r4, r3, #2
 801f96c:	463a      	mov	r2, r7
 801f96e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801f970:	4621      	mov	r1, r4
 801f972:	47c8      	blx	r9
 801f974:	62a8      	str	r0, [r5, #40]	@ 0x28
 801f976:	2800      	cmp	r0, #0
 801f978:	d0b6      	beq.n	801f8e8 <rcl_wait_set_resize+0x238>
 801f97a:	4622      	mov	r2, r4
 801f97c:	4631      	mov	r1, r6
 801f97e:	f005 ff29 	bl	80257d4 <memset>
 801f982:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801f986:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f988:	463a      	mov	r2, r7
 801f98a:	4621      	mov	r1, r4
 801f98c:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801f990:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801f992:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801f996:	47c8      	blx	r9
 801f998:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801f99a:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801f99e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f9a0:	2b00      	cmp	r3, #0
 801f9a2:	d034      	beq.n	801fa0e <rcl_wait_set_resize+0x35e>
 801f9a4:	4622      	mov	r2, r4
 801f9a6:	4631      	mov	r1, r6
 801f9a8:	4618      	mov	r0, r3
 801f9aa:	f005 ff13 	bl	80257d4 <memset>
 801f9ae:	4630      	mov	r0, r6
 801f9b0:	b003      	add	sp, #12
 801f9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9b6:	200b      	movs	r0, #11
 801f9b8:	4770      	bx	lr
 801f9ba:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801f9be:	e794      	b.n	801f8ea <rcl_wait_set_resize+0x23a>
 801f9c0:	6828      	ldr	r0, [r5, #0]
 801f9c2:	4651      	mov	r1, sl
 801f9c4:	9301      	str	r3, [sp, #4]
 801f9c6:	47d8      	blx	fp
 801f9c8:	9b01      	ldr	r3, [sp, #4]
 801f9ca:	200a      	movs	r0, #10
 801f9cc:	e9c5 3300 	strd	r3, r3, [r5]
 801f9d0:	e78b      	b.n	801f8ea <rcl_wait_set_resize+0x23a>
 801f9d2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801f9d4:	68a8      	ldr	r0, [r5, #8]
 801f9d6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801f9d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801f9da:	4798      	blx	r3
 801f9dc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801f9de:	6928      	ldr	r0, [r5, #16]
 801f9e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801f9e2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801f9e4:	e9c5 9902 	strd	r9, r9, [r5, #8]
 801f9e8:	4790      	blx	r2
 801f9ea:	200a      	movs	r0, #10
 801f9ec:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801f9f0:	e77b      	b.n	801f8ea <rcl_wait_set_resize+0x23a>
 801f9f2:	69a8      	ldr	r0, [r5, #24]
 801f9f4:	4649      	mov	r1, r9
 801f9f6:	47d0      	blx	sl
 801f9f8:	200a      	movs	r0, #10
 801f9fa:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801f9fe:	e774      	b.n	801f8ea <rcl_wait_set_resize+0x23a>
 801fa00:	6a28      	ldr	r0, [r5, #32]
 801fa02:	4639      	mov	r1, r7
 801fa04:	47c0      	blx	r8
 801fa06:	200a      	movs	r0, #10
 801fa08:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801fa0c:	e76d      	b.n	801f8ea <rcl_wait_set_resize+0x23a>
 801fa0e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801fa10:	4639      	mov	r1, r7
 801fa12:	9301      	str	r3, [sp, #4]
 801fa14:	47c0      	blx	r8
 801fa16:	9b01      	ldr	r3, [sp, #4]
 801fa18:	200a      	movs	r0, #10
 801fa1a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801fa1e:	e764      	b.n	801f8ea <rcl_wait_set_resize+0x23a>

0801fa20 <rcl_wait_set_init>:
 801fa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa24:	b085      	sub	sp, #20
 801fa26:	4605      	mov	r5, r0
 801fa28:	460e      	mov	r6, r1
 801fa2a:	4617      	mov	r7, r2
 801fa2c:	a812      	add	r0, sp, #72	@ 0x48
 801fa2e:	4698      	mov	r8, r3
 801fa30:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 801fa34:	f7f9 fdde 	bl	80195f4 <rcutils_allocator_is_valid>
 801fa38:	2d00      	cmp	r5, #0
 801fa3a:	d072      	beq.n	801fb22 <rcl_wait_set_init+0x102>
 801fa3c:	f080 0001 	eor.w	r0, r0, #1
 801fa40:	b2c0      	uxtb	r0, r0
 801fa42:	2800      	cmp	r0, #0
 801fa44:	d16d      	bne.n	801fb22 <rcl_wait_set_init+0x102>
 801fa46:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801fa4a:	f1ba 0f00 	cmp.w	sl, #0
 801fa4e:	d004      	beq.n	801fa5a <rcl_wait_set_init+0x3a>
 801fa50:	2464      	movs	r4, #100	@ 0x64
 801fa52:	4620      	mov	r0, r4
 801fa54:	b005      	add	sp, #20
 801fa56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa5a:	f1b9 0f00 	cmp.w	r9, #0
 801fa5e:	d060      	beq.n	801fb22 <rcl_wait_set_init+0x102>
 801fa60:	4648      	mov	r0, r9
 801fa62:	f7fe fc65 	bl	801e330 <rcl_context_is_valid>
 801fa66:	2800      	cmp	r0, #0
 801fa68:	d068      	beq.n	801fb3c <rcl_wait_set_init+0x11c>
 801fa6a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801fa6c:	205c      	movs	r0, #92	@ 0x5c
 801fa6e:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801fa70:	4798      	blx	r3
 801fa72:	6328      	str	r0, [r5, #48]	@ 0x30
 801fa74:	2800      	cmp	r0, #0
 801fa76:	d063      	beq.n	801fb40 <rcl_wait_set_init+0x120>
 801fa78:	225c      	movs	r2, #92	@ 0x5c
 801fa7a:	4651      	mov	r1, sl
 801fa7c:	f005 feaa 	bl	80257d4 <memset>
 801fa80:	ac12      	add	r4, sp, #72	@ 0x48
 801fa82:	f8d5 b030 	ldr.w	fp, [r5, #48]	@ 0x30
 801fa86:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801fa8a:	f10b 0c48 	add.w	ip, fp, #72	@ 0x48
 801fa8e:	f8cb 9044 	str.w	r9, [fp, #68]	@ 0x44
 801fa92:	eb03 0e02 	add.w	lr, r3, r2
 801fa96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fa98:	f8d9 9000 	ldr.w	r9, [r9]
 801fa9c:	449e      	add	lr, r3
 801fa9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801faa0:	e9cb aa01 	strd	sl, sl, [fp, #4]
 801faa4:	e9cb aa04 	strd	sl, sl, [fp, #16]
 801faa8:	e9cb aa07 	strd	sl, sl, [fp, #28]
 801faac:	e9cb aa0a 	strd	sl, sl, [fp, #40]	@ 0x28
 801fab0:	e9cb aa0d 	strd	sl, sl, [fp, #52]	@ 0x34
 801fab4:	44be      	add	lr, r7
 801fab6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801faba:	6823      	ldr	r3, [r4, #0]
 801fabc:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 801fac0:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 801fac4:	f8cc 3000 	str.w	r3, [ip]
 801fac8:	f002 fed2 	bl	8022870 <rmw_create_wait_set>
 801facc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801face:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 801fad2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801fad4:	b350      	cbz	r0, 801fb2c <rcl_wait_set_init+0x10c>
 801fad6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801fad8:	4643      	mov	r3, r8
 801fada:	463a      	mov	r2, r7
 801fadc:	4631      	mov	r1, r6
 801fade:	9402      	str	r4, [sp, #8]
 801fae0:	4628      	mov	r0, r5
 801fae2:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801fae4:	9401      	str	r4, [sp, #4]
 801fae6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801fae8:	9400      	str	r4, [sp, #0]
 801faea:	f7ff fde1 	bl	801f6b0 <rcl_wait_set_resize>
 801faee:	4604      	mov	r4, r0
 801faf0:	2800      	cmp	r0, #0
 801faf2:	d0ae      	beq.n	801fa52 <rcl_wait_set_init+0x32>
 801faf4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801faf6:	bb2b      	cbnz	r3, 801fb44 <rcl_wait_set_init+0x124>
 801faf8:	2600      	movs	r6, #0
 801fafa:	4628      	mov	r0, r5
 801fafc:	4633      	mov	r3, r6
 801fafe:	4632      	mov	r2, r6
 801fb00:	4631      	mov	r1, r6
 801fb02:	9600      	str	r6, [sp, #0]
 801fb04:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801fb08:	f7ff fdd2 	bl	801f6b0 <rcl_wait_set_resize>
 801fb0c:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801fb0e:	2800      	cmp	r0, #0
 801fb10:	d09f      	beq.n	801fa52 <rcl_wait_set_init+0x32>
 801fb12:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801fb14:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 801fb16:	4798      	blx	r3
 801fb18:	4620      	mov	r0, r4
 801fb1a:	632e      	str	r6, [r5, #48]	@ 0x30
 801fb1c:	b005      	add	sp, #20
 801fb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb22:	240b      	movs	r4, #11
 801fb24:	4620      	mov	r0, r4
 801fb26:	b005      	add	sp, #20
 801fb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb2c:	2401      	movs	r4, #1
 801fb2e:	f002 fea9 	bl	8022884 <rmw_destroy_wait_set>
 801fb32:	2800      	cmp	r0, #0
 801fb34:	bf18      	it	ne
 801fb36:	f44f 7461 	movne.w	r4, #900	@ 0x384
 801fb3a:	e7dd      	b.n	801faf8 <rcl_wait_set_init+0xd8>
 801fb3c:	2465      	movs	r4, #101	@ 0x65
 801fb3e:	e788      	b.n	801fa52 <rcl_wait_set_init+0x32>
 801fb40:	240a      	movs	r4, #10
 801fb42:	e786      	b.n	801fa52 <rcl_wait_set_init+0x32>
 801fb44:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801fb46:	e7f2      	b.n	801fb2e <rcl_wait_set_init+0x10e>

0801fb48 <rcl_wait_set_add_guard_condition>:
 801fb48:	b318      	cbz	r0, 801fb92 <rcl_wait_set_add_guard_condition+0x4a>
 801fb4a:	b538      	push	{r3, r4, r5, lr}
 801fb4c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801fb4e:	4604      	mov	r4, r0
 801fb50:	b30b      	cbz	r3, 801fb96 <rcl_wait_set_add_guard_condition+0x4e>
 801fb52:	b319      	cbz	r1, 801fb9c <rcl_wait_set_add_guard_condition+0x54>
 801fb54:	68dd      	ldr	r5, [r3, #12]
 801fb56:	68c0      	ldr	r0, [r0, #12]
 801fb58:	4285      	cmp	r5, r0
 801fb5a:	d217      	bcs.n	801fb8c <rcl_wait_set_add_guard_condition+0x44>
 801fb5c:	1c68      	adds	r0, r5, #1
 801fb5e:	60d8      	str	r0, [r3, #12]
 801fb60:	68a3      	ldr	r3, [r4, #8]
 801fb62:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801fb66:	b102      	cbz	r2, 801fb6a <rcl_wait_set_add_guard_condition+0x22>
 801fb68:	6015      	str	r5, [r2, #0]
 801fb6a:	4608      	mov	r0, r1
 801fb6c:	f004 fe56 	bl	802481c <rcl_guard_condition_get_rmw_handle>
 801fb70:	b150      	cbz	r0, 801fb88 <rcl_wait_set_add_guard_condition+0x40>
 801fb72:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801fb74:	6842      	ldr	r2, [r0, #4]
 801fb76:	2000      	movs	r0, #0
 801fb78:	695b      	ldr	r3, [r3, #20]
 801fb7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801fb7e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801fb80:	6913      	ldr	r3, [r2, #16]
 801fb82:	3301      	adds	r3, #1
 801fb84:	6113      	str	r3, [r2, #16]
 801fb86:	bd38      	pop	{r3, r4, r5, pc}
 801fb88:	2001      	movs	r0, #1
 801fb8a:	bd38      	pop	{r3, r4, r5, pc}
 801fb8c:	f240 3086 	movw	r0, #902	@ 0x386
 801fb90:	bd38      	pop	{r3, r4, r5, pc}
 801fb92:	200b      	movs	r0, #11
 801fb94:	4770      	bx	lr
 801fb96:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801fb9a:	bd38      	pop	{r3, r4, r5, pc}
 801fb9c:	200b      	movs	r0, #11
 801fb9e:	bd38      	pop	{r3, r4, r5, pc}

0801fba0 <rcl_wait_set_add_timer>:
 801fba0:	b328      	cbz	r0, 801fbee <rcl_wait_set_add_timer+0x4e>
 801fba2:	b538      	push	{r3, r4, r5, lr}
 801fba4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801fba6:	4604      	mov	r4, r0
 801fba8:	b31b      	cbz	r3, 801fbf2 <rcl_wait_set_add_timer+0x52>
 801fbaa:	b329      	cbz	r1, 801fbf8 <rcl_wait_set_add_timer+0x58>
 801fbac:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801fbae:	6965      	ldr	r5, [r4, #20]
 801fbb0:	42a8      	cmp	r0, r5
 801fbb2:	d219      	bcs.n	801fbe8 <rcl_wait_set_add_timer+0x48>
 801fbb4:	1c45      	adds	r5, r0, #1
 801fbb6:	641d      	str	r5, [r3, #64]	@ 0x40
 801fbb8:	6923      	ldr	r3, [r4, #16]
 801fbba:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 801fbbe:	b102      	cbz	r2, 801fbc2 <rcl_wait_set_add_timer+0x22>
 801fbc0:	6010      	str	r0, [r2, #0]
 801fbc2:	4608      	mov	r0, r1
 801fbc4:	f7ff fc08 	bl	801f3d8 <rcl_timer_get_guard_condition>
 801fbc8:	b168      	cbz	r0, 801fbe6 <rcl_wait_set_add_timer+0x46>
 801fbca:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801fbcc:	68e3      	ldr	r3, [r4, #12]
 801fbce:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 801fbd0:	3b01      	subs	r3, #1
 801fbd2:	441d      	add	r5, r3
 801fbd4:	f004 fe22 	bl	802481c <rcl_guard_condition_get_rmw_handle>
 801fbd8:	b180      	cbz	r0, 801fbfc <rcl_wait_set_add_timer+0x5c>
 801fbda:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801fbdc:	6842      	ldr	r2, [r0, #4]
 801fbde:	2000      	movs	r0, #0
 801fbe0:	695b      	ldr	r3, [r3, #20]
 801fbe2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801fbe6:	bd38      	pop	{r3, r4, r5, pc}
 801fbe8:	f240 3086 	movw	r0, #902	@ 0x386
 801fbec:	bd38      	pop	{r3, r4, r5, pc}
 801fbee:	200b      	movs	r0, #11
 801fbf0:	4770      	bx	lr
 801fbf2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801fbf6:	bd38      	pop	{r3, r4, r5, pc}
 801fbf8:	200b      	movs	r0, #11
 801fbfa:	bd38      	pop	{r3, r4, r5, pc}
 801fbfc:	2001      	movs	r0, #1
 801fbfe:	bd38      	pop	{r3, r4, r5, pc}

0801fc00 <rcl_wait_set_add_client>:
 801fc00:	b318      	cbz	r0, 801fc4a <rcl_wait_set_add_client+0x4a>
 801fc02:	b538      	push	{r3, r4, r5, lr}
 801fc04:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801fc06:	4604      	mov	r4, r0
 801fc08:	b30b      	cbz	r3, 801fc4e <rcl_wait_set_add_client+0x4e>
 801fc0a:	b319      	cbz	r1, 801fc54 <rcl_wait_set_add_client+0x54>
 801fc0c:	699d      	ldr	r5, [r3, #24]
 801fc0e:	69c0      	ldr	r0, [r0, #28]
 801fc10:	4285      	cmp	r5, r0
 801fc12:	d217      	bcs.n	801fc44 <rcl_wait_set_add_client+0x44>
 801fc14:	1c68      	adds	r0, r5, #1
 801fc16:	6198      	str	r0, [r3, #24]
 801fc18:	69a3      	ldr	r3, [r4, #24]
 801fc1a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801fc1e:	b102      	cbz	r2, 801fc22 <rcl_wait_set_add_client+0x22>
 801fc20:	6015      	str	r5, [r2, #0]
 801fc22:	4608      	mov	r0, r1
 801fc24:	f7fe fad6 	bl	801e1d4 <rcl_client_get_rmw_handle>
 801fc28:	b150      	cbz	r0, 801fc40 <rcl_wait_set_add_client+0x40>
 801fc2a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801fc2c:	6842      	ldr	r2, [r0, #4]
 801fc2e:	2000      	movs	r0, #0
 801fc30:	6a1b      	ldr	r3, [r3, #32]
 801fc32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801fc36:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801fc38:	69d3      	ldr	r3, [r2, #28]
 801fc3a:	3301      	adds	r3, #1
 801fc3c:	61d3      	str	r3, [r2, #28]
 801fc3e:	bd38      	pop	{r3, r4, r5, pc}
 801fc40:	2001      	movs	r0, #1
 801fc42:	bd38      	pop	{r3, r4, r5, pc}
 801fc44:	f240 3086 	movw	r0, #902	@ 0x386
 801fc48:	bd38      	pop	{r3, r4, r5, pc}
 801fc4a:	200b      	movs	r0, #11
 801fc4c:	4770      	bx	lr
 801fc4e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801fc52:	bd38      	pop	{r3, r4, r5, pc}
 801fc54:	200b      	movs	r0, #11
 801fc56:	bd38      	pop	{r3, r4, r5, pc}

0801fc58 <rcl_wait_set_add_service>:
 801fc58:	b318      	cbz	r0, 801fca2 <rcl_wait_set_add_service+0x4a>
 801fc5a:	b538      	push	{r3, r4, r5, lr}
 801fc5c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801fc5e:	4604      	mov	r4, r0
 801fc60:	b30b      	cbz	r3, 801fca6 <rcl_wait_set_add_service+0x4e>
 801fc62:	b319      	cbz	r1, 801fcac <rcl_wait_set_add_service+0x54>
 801fc64:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801fc66:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801fc68:	4285      	cmp	r5, r0
 801fc6a:	d217      	bcs.n	801fc9c <rcl_wait_set_add_service+0x44>
 801fc6c:	1c68      	adds	r0, r5, #1
 801fc6e:	6258      	str	r0, [r3, #36]	@ 0x24
 801fc70:	6a23      	ldr	r3, [r4, #32]
 801fc72:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801fc76:	b102      	cbz	r2, 801fc7a <rcl_wait_set_add_service+0x22>
 801fc78:	6015      	str	r5, [r2, #0]
 801fc7a:	4608      	mov	r0, r1
 801fc7c:	f7ff f850 	bl	801ed20 <rcl_service_get_rmw_handle>
 801fc80:	b150      	cbz	r0, 801fc98 <rcl_wait_set_add_service+0x40>
 801fc82:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801fc84:	6842      	ldr	r2, [r0, #4]
 801fc86:	2000      	movs	r0, #0
 801fc88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fc8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801fc8e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801fc90:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 801fc92:	3301      	adds	r3, #1
 801fc94:	6293      	str	r3, [r2, #40]	@ 0x28
 801fc96:	bd38      	pop	{r3, r4, r5, pc}
 801fc98:	2001      	movs	r0, #1
 801fc9a:	bd38      	pop	{r3, r4, r5, pc}
 801fc9c:	f240 3086 	movw	r0, #902	@ 0x386
 801fca0:	bd38      	pop	{r3, r4, r5, pc}
 801fca2:	200b      	movs	r0, #11
 801fca4:	4770      	bx	lr
 801fca6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801fcaa:	bd38      	pop	{r3, r4, r5, pc}
 801fcac:	200b      	movs	r0, #11
 801fcae:	bd38      	pop	{r3, r4, r5, pc}

0801fcb0 <rcl_wait>:
 801fcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcb4:	ed2d 8b02 	vpush	{d8}
 801fcb8:	b08d      	sub	sp, #52	@ 0x34
 801fcba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801fcbe:	2800      	cmp	r0, #0
 801fcc0:	f000 814f 	beq.w	801ff62 <rcl_wait+0x2b2>
 801fcc4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801fcc6:	4605      	mov	r5, r0
 801fcc8:	2e00      	cmp	r6, #0
 801fcca:	f000 811a 	beq.w	801ff02 <rcl_wait+0x252>
 801fcce:	6843      	ldr	r3, [r0, #4]
 801fcd0:	b983      	cbnz	r3, 801fcf4 <rcl_wait+0x44>
 801fcd2:	68eb      	ldr	r3, [r5, #12]
 801fcd4:	b973      	cbnz	r3, 801fcf4 <rcl_wait+0x44>
 801fcd6:	696b      	ldr	r3, [r5, #20]
 801fcd8:	b963      	cbnz	r3, 801fcf4 <rcl_wait+0x44>
 801fcda:	69eb      	ldr	r3, [r5, #28]
 801fcdc:	b953      	cbnz	r3, 801fcf4 <rcl_wait+0x44>
 801fcde:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801fce0:	b943      	cbnz	r3, 801fcf4 <rcl_wait+0x44>
 801fce2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801fce4:	b933      	cbnz	r3, 801fcf4 <rcl_wait+0x44>
 801fce6:	f240 3085 	movw	r0, #901	@ 0x385
 801fcea:	b00d      	add	sp, #52	@ 0x34
 801fcec:	ecbd 8b02 	vpop	{d8}
 801fcf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fcf4:	9b04      	ldr	r3, [sp, #16]
 801fcf6:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 801fcf8:	2b01      	cmp	r3, #1
 801fcfa:	9b05      	ldr	r3, [sp, #20]
 801fcfc:	f173 0300 	sbcs.w	r3, r3, #0
 801fd00:	f2c0 80f8 	blt.w	801fef4 <rcl_wait+0x244>
 801fd04:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 801fd08:	2a00      	cmp	r2, #0
 801fd0a:	f000 810f 	beq.w	801ff2c <rcl_wait+0x27c>
 801fd0e:	2400      	movs	r4, #0
 801fd10:	4613      	mov	r3, r2
 801fd12:	f240 3921 	movw	r9, #801	@ 0x321
 801fd16:	4632      	mov	r2, r6
 801fd18:	46a2      	mov	sl, r4
 801fd1a:	46a3      	mov	fp, r4
 801fd1c:	ed9f 8b98 	vldr	d8, [pc, #608]	@ 801ff80 <rcl_wait+0x2d0>
 801fd20:	e014      	b.n	801fd4c <rcl_wait+0x9c>
 801fd22:	2800      	cmp	r0, #0
 801fd24:	d1e1      	bne.n	801fcea <rcl_wait+0x3a>
 801fd26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801fd2a:	4542      	cmp	r2, r8
 801fd2c:	eb73 0107 	sbcs.w	r1, r3, r7
 801fd30:	da03      	bge.n	801fd3a <rcl_wait+0x8a>
 801fd32:	4690      	mov	r8, r2
 801fd34:	461f      	mov	r7, r3
 801fd36:	f04f 0b01 	mov.w	fp, #1
 801fd3a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801fd3c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801fd3e:	3401      	adds	r4, #1
 801fd40:	f14a 0a00 	adc.w	sl, sl, #0
 801fd44:	429c      	cmp	r4, r3
 801fd46:	f17a 0100 	sbcs.w	r1, sl, #0
 801fd4a:	d228      	bcs.n	801fd9e <rcl_wait+0xee>
 801fd4c:	6928      	ldr	r0, [r5, #16]
 801fd4e:	a908      	add	r1, sp, #32
 801fd50:	00a6      	lsls	r6, r4, #2
 801fd52:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801fd56:	2800      	cmp	r0, #0
 801fd58:	d0f1      	beq.n	801fd3e <rcl_wait+0x8e>
 801fd5a:	68eb      	ldr	r3, [r5, #12]
 801fd5c:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801fd60:	4423      	add	r3, r4
 801fd62:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 801fd66:	f1be 0f00 	cmp.w	lr, #0
 801fd6a:	d006      	beq.n	801fd7a <rcl_wait+0xca>
 801fd6c:	6913      	ldr	r3, [r2, #16]
 801fd6e:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801fd72:	3301      	adds	r3, #1
 801fd74:	6113      	str	r3, [r2, #16]
 801fd76:	692b      	ldr	r3, [r5, #16]
 801fd78:	5998      	ldr	r0, [r3, r6]
 801fd7a:	ed8d 8b08 	vstr	d8, [sp, #32]
 801fd7e:	f7ff faf9 	bl	801f374 <rcl_timer_get_time_until_next_call>
 801fd82:	4548      	cmp	r0, r9
 801fd84:	d1cd      	bne.n	801fd22 <rcl_wait+0x72>
 801fd86:	692b      	ldr	r3, [r5, #16]
 801fd88:	2200      	movs	r2, #0
 801fd8a:	3401      	adds	r4, #1
 801fd8c:	519a      	str	r2, [r3, r6]
 801fd8e:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801fd90:	f14a 0a00 	adc.w	sl, sl, #0
 801fd94:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801fd96:	429c      	cmp	r4, r3
 801fd98:	f17a 0100 	sbcs.w	r1, sl, #0
 801fd9c:	d3d6      	bcc.n	801fd4c <rcl_wait+0x9c>
 801fd9e:	4659      	mov	r1, fp
 801fda0:	4616      	mov	r6, r2
 801fda2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801fda6:	4313      	orrs	r3, r2
 801fda8:	f040 80b4 	bne.w	801ff14 <rcl_wait+0x264>
 801fdac:	2300      	movs	r3, #0
 801fdae:	2200      	movs	r2, #0
 801fdb0:	460c      	mov	r4, r1
 801fdb2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801fdb6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801fdba:	ab08      	add	r3, sp, #32
 801fdbc:	9302      	str	r3, [sp, #8]
 801fdbe:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 801fdc2:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 801fdc4:	f106 0110 	add.w	r1, r6, #16
 801fdc8:	9300      	str	r3, [sp, #0]
 801fdca:	1d30      	adds	r0, r6, #4
 801fdcc:	f106 031c 	add.w	r3, r6, #28
 801fdd0:	9201      	str	r2, [sp, #4]
 801fdd2:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 801fdd6:	f002 fbe7 	bl	80225a8 <rmw_wait>
 801fdda:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801fddc:	4680      	mov	r8, r0
 801fdde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801fde0:	b1e2      	cbz	r2, 801fe1c <rcl_wait+0x16c>
 801fde2:	f04f 0900 	mov.w	r9, #0
 801fde6:	464f      	mov	r7, r9
 801fde8:	692a      	ldr	r2, [r5, #16]
 801fdea:	f10d 011f 	add.w	r1, sp, #31
 801fdee:	ea4f 0689 	mov.w	r6, r9, lsl #2
 801fdf2:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801fdf6:	b160      	cbz	r0, 801fe12 <rcl_wait+0x162>
 801fdf8:	f88d 701f 	strb.w	r7, [sp, #31]
 801fdfc:	f7ff fa7e 	bl	801f2fc <rcl_timer_is_ready>
 801fe00:	2800      	cmp	r0, #0
 801fe02:	f47f af72 	bne.w	801fcea <rcl_wait+0x3a>
 801fe06:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801fe0a:	b90b      	cbnz	r3, 801fe10 <rcl_wait+0x160>
 801fe0c:	692a      	ldr	r2, [r5, #16]
 801fe0e:	5193      	str	r3, [r2, r6]
 801fe10:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801fe12:	f109 0901 	add.w	r9, r9, #1
 801fe16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801fe18:	454a      	cmp	r2, r9
 801fe1a:	d8e5      	bhi.n	801fde8 <rcl_wait+0x138>
 801fe1c:	f038 0002 	bics.w	r0, r8, #2
 801fe20:	d176      	bne.n	801ff10 <rcl_wait+0x260>
 801fe22:	686f      	ldr	r7, [r5, #4]
 801fe24:	b17f      	cbz	r7, 801fe46 <rcl_wait+0x196>
 801fe26:	4602      	mov	r2, r0
 801fe28:	e002      	b.n	801fe30 <rcl_wait+0x180>
 801fe2a:	3201      	adds	r2, #1
 801fe2c:	42ba      	cmp	r2, r7
 801fe2e:	d00a      	beq.n	801fe46 <rcl_wait+0x196>
 801fe30:	6899      	ldr	r1, [r3, #8]
 801fe32:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801fe36:	2900      	cmp	r1, #0
 801fe38:	d1f7      	bne.n	801fe2a <rcl_wait+0x17a>
 801fe3a:	682e      	ldr	r6, [r5, #0]
 801fe3c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801fe40:	3201      	adds	r2, #1
 801fe42:	42ba      	cmp	r2, r7
 801fe44:	d1f4      	bne.n	801fe30 <rcl_wait+0x180>
 801fe46:	68ef      	ldr	r7, [r5, #12]
 801fe48:	b17f      	cbz	r7, 801fe6a <rcl_wait+0x1ba>
 801fe4a:	2200      	movs	r2, #0
 801fe4c:	e002      	b.n	801fe54 <rcl_wait+0x1a4>
 801fe4e:	3201      	adds	r2, #1
 801fe50:	42ba      	cmp	r2, r7
 801fe52:	d00a      	beq.n	801fe6a <rcl_wait+0x1ba>
 801fe54:	6959      	ldr	r1, [r3, #20]
 801fe56:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801fe5a:	2900      	cmp	r1, #0
 801fe5c:	d1f7      	bne.n	801fe4e <rcl_wait+0x19e>
 801fe5e:	68ae      	ldr	r6, [r5, #8]
 801fe60:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801fe64:	3201      	adds	r2, #1
 801fe66:	42ba      	cmp	r2, r7
 801fe68:	d1f4      	bne.n	801fe54 <rcl_wait+0x1a4>
 801fe6a:	69ef      	ldr	r7, [r5, #28]
 801fe6c:	b17f      	cbz	r7, 801fe8e <rcl_wait+0x1de>
 801fe6e:	2200      	movs	r2, #0
 801fe70:	e002      	b.n	801fe78 <rcl_wait+0x1c8>
 801fe72:	3201      	adds	r2, #1
 801fe74:	42ba      	cmp	r2, r7
 801fe76:	d00a      	beq.n	801fe8e <rcl_wait+0x1de>
 801fe78:	6a19      	ldr	r1, [r3, #32]
 801fe7a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801fe7e:	2900      	cmp	r1, #0
 801fe80:	d1f7      	bne.n	801fe72 <rcl_wait+0x1c2>
 801fe82:	69ae      	ldr	r6, [r5, #24]
 801fe84:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801fe88:	3201      	adds	r2, #1
 801fe8a:	42ba      	cmp	r2, r7
 801fe8c:	d1f4      	bne.n	801fe78 <rcl_wait+0x1c8>
 801fe8e:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 801fe90:	b17f      	cbz	r7, 801feb2 <rcl_wait+0x202>
 801fe92:	2200      	movs	r2, #0
 801fe94:	e002      	b.n	801fe9c <rcl_wait+0x1ec>
 801fe96:	3201      	adds	r2, #1
 801fe98:	42ba      	cmp	r2, r7
 801fe9a:	d00a      	beq.n	801feb2 <rcl_wait+0x202>
 801fe9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801fe9e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801fea2:	2900      	cmp	r1, #0
 801fea4:	d1f7      	bne.n	801fe96 <rcl_wait+0x1e6>
 801fea6:	6a2e      	ldr	r6, [r5, #32]
 801fea8:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801feac:	3201      	adds	r2, #1
 801feae:	42ba      	cmp	r2, r7
 801feb0:	d1f4      	bne.n	801fe9c <rcl_wait+0x1ec>
 801feb2:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 801feb4:	b17f      	cbz	r7, 801fed6 <rcl_wait+0x226>
 801feb6:	2200      	movs	r2, #0
 801feb8:	e002      	b.n	801fec0 <rcl_wait+0x210>
 801feba:	3201      	adds	r2, #1
 801febc:	42ba      	cmp	r2, r7
 801febe:	d00a      	beq.n	801fed6 <rcl_wait+0x226>
 801fec0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801fec2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801fec6:	2900      	cmp	r1, #0
 801fec8:	d1f7      	bne.n	801feba <rcl_wait+0x20a>
 801feca:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 801fecc:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801fed0:	3201      	adds	r2, #1
 801fed2:	42ba      	cmp	r2, r7
 801fed4:	d1f4      	bne.n	801fec0 <rcl_wait+0x210>
 801fed6:	f1b8 0f02 	cmp.w	r8, #2
 801feda:	f47f af06 	bne.w	801fcea <rcl_wait+0x3a>
 801fede:	f084 0301 	eor.w	r3, r4, #1
 801fee2:	b2db      	uxtb	r3, r3
 801fee4:	2b00      	cmp	r3, #0
 801fee6:	bf18      	it	ne
 801fee8:	2002      	movne	r0, #2
 801feea:	b00d      	add	sp, #52	@ 0x34
 801feec:	ecbd 8b02 	vpop	{d8}
 801fef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fef4:	2a00      	cmp	r2, #0
 801fef6:	d03a      	beq.n	801ff6e <rcl_wait+0x2be>
 801fef8:	f04f 38ff 	mov.w	r8, #4294967295
 801fefc:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801ff00:	e705      	b.n	801fd0e <rcl_wait+0x5e>
 801ff02:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801ff06:	b00d      	add	sp, #52	@ 0x34
 801ff08:	ecbd 8b02 	vpop	{d8}
 801ff0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff10:	2001      	movs	r0, #1
 801ff12:	e6ea      	b.n	801fcea <rcl_wait+0x3a>
 801ff14:	9b04      	ldr	r3, [sp, #16]
 801ff16:	460c      	mov	r4, r1
 801ff18:	2b01      	cmp	r3, #1
 801ff1a:	9b05      	ldr	r3, [sp, #20]
 801ff1c:	f173 0300 	sbcs.w	r3, r3, #0
 801ff20:	bfa8      	it	ge
 801ff22:	f044 0401 	orrge.w	r4, r4, #1
 801ff26:	b914      	cbnz	r4, 801ff2e <rcl_wait+0x27e>
 801ff28:	4623      	mov	r3, r4
 801ff2a:	e747      	b.n	801fdbc <rcl_wait+0x10c>
 801ff2c:	4611      	mov	r1, r2
 801ff2e:	2f00      	cmp	r7, #0
 801ff30:	da02      	bge.n	801ff38 <rcl_wait+0x288>
 801ff32:	f04f 0800 	mov.w	r8, #0
 801ff36:	4647      	mov	r7, r8
 801ff38:	460c      	mov	r4, r1
 801ff3a:	4640      	mov	r0, r8
 801ff3c:	4639      	mov	r1, r7
 801ff3e:	a312      	add	r3, pc, #72	@ (adr r3, 801ff88 <rcl_wait+0x2d8>)
 801ff40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff44:	f7e0 f9e4 	bl	8000310 <__aeabi_ldivmod>
 801ff48:	a30f      	add	r3, pc, #60	@ (adr r3, 801ff88 <rcl_wait+0x2d8>)
 801ff4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff4e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801ff52:	4640      	mov	r0, r8
 801ff54:	4639      	mov	r1, r7
 801ff56:	f7e0 f9db 	bl	8000310 <__aeabi_ldivmod>
 801ff5a:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801ff5e:	ab08      	add	r3, sp, #32
 801ff60:	e72c      	b.n	801fdbc <rcl_wait+0x10c>
 801ff62:	200b      	movs	r0, #11
 801ff64:	b00d      	add	sp, #52	@ 0x34
 801ff66:	ecbd 8b02 	vpop	{d8}
 801ff6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff6e:	4611      	mov	r1, r2
 801ff70:	f04f 38ff 	mov.w	r8, #4294967295
 801ff74:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801ff78:	e713      	b.n	801fda2 <rcl_wait+0xf2>
 801ff7a:	bf00      	nop
 801ff7c:	f3af 8000 	nop.w
 801ff80:	ffffffff 	.word	0xffffffff
 801ff84:	7fffffff 	.word	0x7fffffff
 801ff88:	3b9aca00 	.word	0x3b9aca00
 801ff8c:	00000000 	.word	0x00000000

0801ff90 <rcl_action_take_goal_response>:
 801ff90:	2800      	cmp	r0, #0
 801ff92:	d039      	beq.n	8020008 <rcl_action_take_goal_response+0x78>
 801ff94:	b570      	push	{r4, r5, r6, lr}
 801ff96:	4604      	mov	r4, r0
 801ff98:	6800      	ldr	r0, [r0, #0]
 801ff9a:	b380      	cbz	r0, 801fffe <rcl_action_take_goal_response+0x6e>
 801ff9c:	460e      	mov	r6, r1
 801ff9e:	4615      	mov	r5, r2
 801ffa0:	f7fe f99e 	bl	801e2e0 <rcl_client_is_valid>
 801ffa4:	b330      	cbz	r0, 801fff4 <rcl_action_take_goal_response+0x64>
 801ffa6:	6820      	ldr	r0, [r4, #0]
 801ffa8:	3004      	adds	r0, #4
 801ffaa:	f7fe f999 	bl	801e2e0 <rcl_client_is_valid>
 801ffae:	b308      	cbz	r0, 801fff4 <rcl_action_take_goal_response+0x64>
 801ffb0:	6820      	ldr	r0, [r4, #0]
 801ffb2:	3008      	adds	r0, #8
 801ffb4:	f7fe f994 	bl	801e2e0 <rcl_client_is_valid>
 801ffb8:	b1e0      	cbz	r0, 801fff4 <rcl_action_take_goal_response+0x64>
 801ffba:	6820      	ldr	r0, [r4, #0]
 801ffbc:	300c      	adds	r0, #12
 801ffbe:	f7ff f855 	bl	801f06c <rcl_subscription_is_valid>
 801ffc2:	b1b8      	cbz	r0, 801fff4 <rcl_action_take_goal_response+0x64>
 801ffc4:	6820      	ldr	r0, [r4, #0]
 801ffc6:	3010      	adds	r0, #16
 801ffc8:	f7ff f850 	bl	801f06c <rcl_subscription_is_valid>
 801ffcc:	b190      	cbz	r0, 801fff4 <rcl_action_take_goal_response+0x64>
 801ffce:	b1cd      	cbz	r5, 8020004 <rcl_action_take_goal_response+0x74>
 801ffd0:	b1c6      	cbz	r6, 8020004 <rcl_action_take_goal_response+0x74>
 801ffd2:	462a      	mov	r2, r5
 801ffd4:	4631      	mov	r1, r6
 801ffd6:	6820      	ldr	r0, [r4, #0]
 801ffd8:	f7fe f93a 	bl	801e250 <rcl_take_response>
 801ffdc:	b148      	cbz	r0, 801fff2 <rcl_action_take_goal_response+0x62>
 801ffde:	280a      	cmp	r0, #10
 801ffe0:	d007      	beq.n	801fff2 <rcl_action_take_goal_response+0x62>
 801ffe2:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801ffe6:	f640 0337 	movw	r3, #2103	@ 0x837
 801ffea:	4290      	cmp	r0, r2
 801ffec:	bf0c      	ite	eq
 801ffee:	4618      	moveq	r0, r3
 801fff0:	2001      	movne	r0, #1
 801fff2:	bd70      	pop	{r4, r5, r6, pc}
 801fff4:	f7f9 fb24 	bl	8019640 <rcutils_reset_error>
 801fff8:	f640 0036 	movw	r0, #2102	@ 0x836
 801fffc:	bd70      	pop	{r4, r5, r6, pc}
 801fffe:	f640 0036 	movw	r0, #2102	@ 0x836
 8020002:	bd70      	pop	{r4, r5, r6, pc}
 8020004:	200b      	movs	r0, #11
 8020006:	bd70      	pop	{r4, r5, r6, pc}
 8020008:	f640 0036 	movw	r0, #2102	@ 0x836
 802000c:	4770      	bx	lr
 802000e:	bf00      	nop

08020010 <rcl_action_send_result_request>:
 8020010:	b390      	cbz	r0, 8020078 <rcl_action_send_result_request+0x68>
 8020012:	b570      	push	{r4, r5, r6, lr}
 8020014:	4604      	mov	r4, r0
 8020016:	6800      	ldr	r0, [r0, #0]
 8020018:	b348      	cbz	r0, 802006e <rcl_action_send_result_request+0x5e>
 802001a:	460e      	mov	r6, r1
 802001c:	4615      	mov	r5, r2
 802001e:	f7fe f95f 	bl	801e2e0 <rcl_client_is_valid>
 8020022:	b1f8      	cbz	r0, 8020064 <rcl_action_send_result_request+0x54>
 8020024:	6820      	ldr	r0, [r4, #0]
 8020026:	3004      	adds	r0, #4
 8020028:	f7fe f95a 	bl	801e2e0 <rcl_client_is_valid>
 802002c:	b1d0      	cbz	r0, 8020064 <rcl_action_send_result_request+0x54>
 802002e:	6820      	ldr	r0, [r4, #0]
 8020030:	3008      	adds	r0, #8
 8020032:	f7fe f955 	bl	801e2e0 <rcl_client_is_valid>
 8020036:	b1a8      	cbz	r0, 8020064 <rcl_action_send_result_request+0x54>
 8020038:	6820      	ldr	r0, [r4, #0]
 802003a:	300c      	adds	r0, #12
 802003c:	f7ff f816 	bl	801f06c <rcl_subscription_is_valid>
 8020040:	b180      	cbz	r0, 8020064 <rcl_action_send_result_request+0x54>
 8020042:	6820      	ldr	r0, [r4, #0]
 8020044:	3010      	adds	r0, #16
 8020046:	f7ff f811 	bl	801f06c <rcl_subscription_is_valid>
 802004a:	b158      	cbz	r0, 8020064 <rcl_action_send_result_request+0x54>
 802004c:	b195      	cbz	r5, 8020074 <rcl_action_send_result_request+0x64>
 802004e:	b18e      	cbz	r6, 8020074 <rcl_action_send_result_request+0x64>
 8020050:	6820      	ldr	r0, [r4, #0]
 8020052:	462a      	mov	r2, r5
 8020054:	4631      	mov	r1, r6
 8020056:	3008      	adds	r0, #8
 8020058:	f7fe f8c2 	bl	801e1e0 <rcl_send_request>
 802005c:	3800      	subs	r0, #0
 802005e:	bf18      	it	ne
 8020060:	2001      	movne	r0, #1
 8020062:	bd70      	pop	{r4, r5, r6, pc}
 8020064:	f7f9 faec 	bl	8019640 <rcutils_reset_error>
 8020068:	f640 0036 	movw	r0, #2102	@ 0x836
 802006c:	bd70      	pop	{r4, r5, r6, pc}
 802006e:	f640 0036 	movw	r0, #2102	@ 0x836
 8020072:	bd70      	pop	{r4, r5, r6, pc}
 8020074:	200b      	movs	r0, #11
 8020076:	bd70      	pop	{r4, r5, r6, pc}
 8020078:	f640 0036 	movw	r0, #2102	@ 0x836
 802007c:	4770      	bx	lr
 802007e:	bf00      	nop

08020080 <rcl_action_take_result_response>:
 8020080:	2800      	cmp	r0, #0
 8020082:	d03a      	beq.n	80200fa <rcl_action_take_result_response+0x7a>
 8020084:	b570      	push	{r4, r5, r6, lr}
 8020086:	4604      	mov	r4, r0
 8020088:	6800      	ldr	r0, [r0, #0]
 802008a:	b388      	cbz	r0, 80200f0 <rcl_action_take_result_response+0x70>
 802008c:	460e      	mov	r6, r1
 802008e:	4615      	mov	r5, r2
 8020090:	f7fe f926 	bl	801e2e0 <rcl_client_is_valid>
 8020094:	b338      	cbz	r0, 80200e6 <rcl_action_take_result_response+0x66>
 8020096:	6820      	ldr	r0, [r4, #0]
 8020098:	3004      	adds	r0, #4
 802009a:	f7fe f921 	bl	801e2e0 <rcl_client_is_valid>
 802009e:	b310      	cbz	r0, 80200e6 <rcl_action_take_result_response+0x66>
 80200a0:	6820      	ldr	r0, [r4, #0]
 80200a2:	3008      	adds	r0, #8
 80200a4:	f7fe f91c 	bl	801e2e0 <rcl_client_is_valid>
 80200a8:	b1e8      	cbz	r0, 80200e6 <rcl_action_take_result_response+0x66>
 80200aa:	6820      	ldr	r0, [r4, #0]
 80200ac:	300c      	adds	r0, #12
 80200ae:	f7fe ffdd 	bl	801f06c <rcl_subscription_is_valid>
 80200b2:	b1c0      	cbz	r0, 80200e6 <rcl_action_take_result_response+0x66>
 80200b4:	6820      	ldr	r0, [r4, #0]
 80200b6:	3010      	adds	r0, #16
 80200b8:	f7fe ffd8 	bl	801f06c <rcl_subscription_is_valid>
 80200bc:	b198      	cbz	r0, 80200e6 <rcl_action_take_result_response+0x66>
 80200be:	b1d5      	cbz	r5, 80200f6 <rcl_action_take_result_response+0x76>
 80200c0:	b1ce      	cbz	r6, 80200f6 <rcl_action_take_result_response+0x76>
 80200c2:	6820      	ldr	r0, [r4, #0]
 80200c4:	462a      	mov	r2, r5
 80200c6:	4631      	mov	r1, r6
 80200c8:	3008      	adds	r0, #8
 80200ca:	f7fe f8c1 	bl	801e250 <rcl_take_response>
 80200ce:	b148      	cbz	r0, 80200e4 <rcl_action_take_result_response+0x64>
 80200d0:	280a      	cmp	r0, #10
 80200d2:	d007      	beq.n	80200e4 <rcl_action_take_result_response+0x64>
 80200d4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80200d8:	f640 0337 	movw	r3, #2103	@ 0x837
 80200dc:	4290      	cmp	r0, r2
 80200de:	bf0c      	ite	eq
 80200e0:	4618      	moveq	r0, r3
 80200e2:	2001      	movne	r0, #1
 80200e4:	bd70      	pop	{r4, r5, r6, pc}
 80200e6:	f7f9 faab 	bl	8019640 <rcutils_reset_error>
 80200ea:	f640 0036 	movw	r0, #2102	@ 0x836
 80200ee:	bd70      	pop	{r4, r5, r6, pc}
 80200f0:	f640 0036 	movw	r0, #2102	@ 0x836
 80200f4:	bd70      	pop	{r4, r5, r6, pc}
 80200f6:	200b      	movs	r0, #11
 80200f8:	bd70      	pop	{r4, r5, r6, pc}
 80200fa:	f640 0036 	movw	r0, #2102	@ 0x836
 80200fe:	4770      	bx	lr

08020100 <rcl_action_take_cancel_response>:
 8020100:	2800      	cmp	r0, #0
 8020102:	d03a      	beq.n	802017a <rcl_action_take_cancel_response+0x7a>
 8020104:	b570      	push	{r4, r5, r6, lr}
 8020106:	4604      	mov	r4, r0
 8020108:	6800      	ldr	r0, [r0, #0]
 802010a:	b388      	cbz	r0, 8020170 <rcl_action_take_cancel_response+0x70>
 802010c:	460e      	mov	r6, r1
 802010e:	4615      	mov	r5, r2
 8020110:	f7fe f8e6 	bl	801e2e0 <rcl_client_is_valid>
 8020114:	b338      	cbz	r0, 8020166 <rcl_action_take_cancel_response+0x66>
 8020116:	6820      	ldr	r0, [r4, #0]
 8020118:	3004      	adds	r0, #4
 802011a:	f7fe f8e1 	bl	801e2e0 <rcl_client_is_valid>
 802011e:	b310      	cbz	r0, 8020166 <rcl_action_take_cancel_response+0x66>
 8020120:	6820      	ldr	r0, [r4, #0]
 8020122:	3008      	adds	r0, #8
 8020124:	f7fe f8dc 	bl	801e2e0 <rcl_client_is_valid>
 8020128:	b1e8      	cbz	r0, 8020166 <rcl_action_take_cancel_response+0x66>
 802012a:	6820      	ldr	r0, [r4, #0]
 802012c:	300c      	adds	r0, #12
 802012e:	f7fe ff9d 	bl	801f06c <rcl_subscription_is_valid>
 8020132:	b1c0      	cbz	r0, 8020166 <rcl_action_take_cancel_response+0x66>
 8020134:	6820      	ldr	r0, [r4, #0]
 8020136:	3010      	adds	r0, #16
 8020138:	f7fe ff98 	bl	801f06c <rcl_subscription_is_valid>
 802013c:	b198      	cbz	r0, 8020166 <rcl_action_take_cancel_response+0x66>
 802013e:	b1d5      	cbz	r5, 8020176 <rcl_action_take_cancel_response+0x76>
 8020140:	b1ce      	cbz	r6, 8020176 <rcl_action_take_cancel_response+0x76>
 8020142:	6820      	ldr	r0, [r4, #0]
 8020144:	462a      	mov	r2, r5
 8020146:	4631      	mov	r1, r6
 8020148:	3004      	adds	r0, #4
 802014a:	f7fe f881 	bl	801e250 <rcl_take_response>
 802014e:	b148      	cbz	r0, 8020164 <rcl_action_take_cancel_response+0x64>
 8020150:	280a      	cmp	r0, #10
 8020152:	d007      	beq.n	8020164 <rcl_action_take_cancel_response+0x64>
 8020154:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8020158:	f640 0337 	movw	r3, #2103	@ 0x837
 802015c:	4290      	cmp	r0, r2
 802015e:	bf0c      	ite	eq
 8020160:	4618      	moveq	r0, r3
 8020162:	2001      	movne	r0, #1
 8020164:	bd70      	pop	{r4, r5, r6, pc}
 8020166:	f7f9 fa6b 	bl	8019640 <rcutils_reset_error>
 802016a:	f640 0036 	movw	r0, #2102	@ 0x836
 802016e:	bd70      	pop	{r4, r5, r6, pc}
 8020170:	f640 0036 	movw	r0, #2102	@ 0x836
 8020174:	bd70      	pop	{r4, r5, r6, pc}
 8020176:	200b      	movs	r0, #11
 8020178:	bd70      	pop	{r4, r5, r6, pc}
 802017a:	f640 0036 	movw	r0, #2102	@ 0x836
 802017e:	4770      	bx	lr

08020180 <rcl_action_take_feedback>:
 8020180:	2800      	cmp	r0, #0
 8020182:	d038      	beq.n	80201f6 <rcl_action_take_feedback+0x76>
 8020184:	b530      	push	{r4, r5, lr}
 8020186:	4604      	mov	r4, r0
 8020188:	6800      	ldr	r0, [r0, #0]
 802018a:	b091      	sub	sp, #68	@ 0x44
 802018c:	b378      	cbz	r0, 80201ee <rcl_action_take_feedback+0x6e>
 802018e:	460d      	mov	r5, r1
 8020190:	f7fe f8a6 	bl	801e2e0 <rcl_client_is_valid>
 8020194:	b328      	cbz	r0, 80201e2 <rcl_action_take_feedback+0x62>
 8020196:	6820      	ldr	r0, [r4, #0]
 8020198:	3004      	adds	r0, #4
 802019a:	f7fe f8a1 	bl	801e2e0 <rcl_client_is_valid>
 802019e:	b300      	cbz	r0, 80201e2 <rcl_action_take_feedback+0x62>
 80201a0:	6820      	ldr	r0, [r4, #0]
 80201a2:	3008      	adds	r0, #8
 80201a4:	f7fe f89c 	bl	801e2e0 <rcl_client_is_valid>
 80201a8:	b1d8      	cbz	r0, 80201e2 <rcl_action_take_feedback+0x62>
 80201aa:	6820      	ldr	r0, [r4, #0]
 80201ac:	300c      	adds	r0, #12
 80201ae:	f7fe ff5d 	bl	801f06c <rcl_subscription_is_valid>
 80201b2:	b1b0      	cbz	r0, 80201e2 <rcl_action_take_feedback+0x62>
 80201b4:	6820      	ldr	r0, [r4, #0]
 80201b6:	3010      	adds	r0, #16
 80201b8:	f7fe ff58 	bl	801f06c <rcl_subscription_is_valid>
 80201bc:	b188      	cbz	r0, 80201e2 <rcl_action_take_feedback+0x62>
 80201be:	b1ed      	cbz	r5, 80201fc <rcl_action_take_feedback+0x7c>
 80201c0:	6820      	ldr	r0, [r4, #0]
 80201c2:	2300      	movs	r3, #0
 80201c4:	466a      	mov	r2, sp
 80201c6:	4629      	mov	r1, r5
 80201c8:	300c      	adds	r0, #12
 80201ca:	f7fe fef3 	bl	801efb4 <rcl_take>
 80201ce:	b160      	cbz	r0, 80201ea <rcl_action_take_feedback+0x6a>
 80201d0:	f240 1391 	movw	r3, #401	@ 0x191
 80201d4:	4298      	cmp	r0, r3
 80201d6:	d014      	beq.n	8020202 <rcl_action_take_feedback+0x82>
 80201d8:	280a      	cmp	r0, #10
 80201da:	bf18      	it	ne
 80201dc:	2001      	movne	r0, #1
 80201de:	b011      	add	sp, #68	@ 0x44
 80201e0:	bd30      	pop	{r4, r5, pc}
 80201e2:	f7f9 fa2d 	bl	8019640 <rcutils_reset_error>
 80201e6:	f640 0036 	movw	r0, #2102	@ 0x836
 80201ea:	b011      	add	sp, #68	@ 0x44
 80201ec:	bd30      	pop	{r4, r5, pc}
 80201ee:	f640 0036 	movw	r0, #2102	@ 0x836
 80201f2:	b011      	add	sp, #68	@ 0x44
 80201f4:	bd30      	pop	{r4, r5, pc}
 80201f6:	f640 0036 	movw	r0, #2102	@ 0x836
 80201fa:	4770      	bx	lr
 80201fc:	200b      	movs	r0, #11
 80201fe:	b011      	add	sp, #68	@ 0x44
 8020200:	bd30      	pop	{r4, r5, pc}
 8020202:	f640 0037 	movw	r0, #2103	@ 0x837
 8020206:	e7f0      	b.n	80201ea <rcl_action_take_feedback+0x6a>

08020208 <rcl_action_wait_set_add_action_client>:
 8020208:	2800      	cmp	r0, #0
 802020a:	d048      	beq.n	802029e <rcl_action_wait_set_add_action_client+0x96>
 802020c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802020e:	460c      	mov	r4, r1
 8020210:	2900      	cmp	r1, #0
 8020212:	d03c      	beq.n	802028e <rcl_action_wait_set_add_action_client+0x86>
 8020214:	4605      	mov	r5, r0
 8020216:	6808      	ldr	r0, [r1, #0]
 8020218:	2800      	cmp	r0, #0
 802021a:	d038      	beq.n	802028e <rcl_action_wait_set_add_action_client+0x86>
 802021c:	4617      	mov	r7, r2
 802021e:	461e      	mov	r6, r3
 8020220:	f7fe f85e 	bl	801e2e0 <rcl_client_is_valid>
 8020224:	b3b0      	cbz	r0, 8020294 <rcl_action_wait_set_add_action_client+0x8c>
 8020226:	6820      	ldr	r0, [r4, #0]
 8020228:	3004      	adds	r0, #4
 802022a:	f7fe f859 	bl	801e2e0 <rcl_client_is_valid>
 802022e:	b388      	cbz	r0, 8020294 <rcl_action_wait_set_add_action_client+0x8c>
 8020230:	6820      	ldr	r0, [r4, #0]
 8020232:	3008      	adds	r0, #8
 8020234:	f7fe f854 	bl	801e2e0 <rcl_client_is_valid>
 8020238:	b360      	cbz	r0, 8020294 <rcl_action_wait_set_add_action_client+0x8c>
 802023a:	6820      	ldr	r0, [r4, #0]
 802023c:	300c      	adds	r0, #12
 802023e:	f7fe ff15 	bl	801f06c <rcl_subscription_is_valid>
 8020242:	b338      	cbz	r0, 8020294 <rcl_action_wait_set_add_action_client+0x8c>
 8020244:	6820      	ldr	r0, [r4, #0]
 8020246:	3010      	adds	r0, #16
 8020248:	f7fe ff10 	bl	801f06c <rcl_subscription_is_valid>
 802024c:	b310      	cbz	r0, 8020294 <rcl_action_wait_set_add_action_client+0x8c>
 802024e:	6821      	ldr	r1, [r4, #0]
 8020250:	4628      	mov	r0, r5
 8020252:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8020256:	f7ff fcd3 	bl	801fc00 <rcl_wait_set_add_client>
 802025a:	b9b8      	cbnz	r0, 802028c <rcl_action_wait_set_add_action_client+0x84>
 802025c:	6821      	ldr	r1, [r4, #0]
 802025e:	4628      	mov	r0, r5
 8020260:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8020264:	3104      	adds	r1, #4
 8020266:	f7ff fccb 	bl	801fc00 <rcl_wait_set_add_client>
 802026a:	b978      	cbnz	r0, 802028c <rcl_action_wait_set_add_action_client+0x84>
 802026c:	6821      	ldr	r1, [r4, #0]
 802026e:	4628      	mov	r0, r5
 8020270:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8020274:	3108      	adds	r1, #8
 8020276:	f7ff fcc3 	bl	801fc00 <rcl_wait_set_add_client>
 802027a:	b938      	cbnz	r0, 802028c <rcl_action_wait_set_add_action_client+0x84>
 802027c:	6821      	ldr	r1, [r4, #0]
 802027e:	4628      	mov	r0, r5
 8020280:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8020284:	310c      	adds	r1, #12
 8020286:	f7ff f96b 	bl	801f560 <rcl_wait_set_add_subscription>
 802028a:	b158      	cbz	r0, 80202a4 <rcl_action_wait_set_add_action_client+0x9c>
 802028c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802028e:	f640 0036 	movw	r0, #2102	@ 0x836
 8020292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020294:	f7f9 f9d4 	bl	8019640 <rcutils_reset_error>
 8020298:	f640 0036 	movw	r0, #2102	@ 0x836
 802029c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802029e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80202a2:	4770      	bx	lr
 80202a4:	6821      	ldr	r1, [r4, #0]
 80202a6:	4628      	mov	r0, r5
 80202a8:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80202ac:	3110      	adds	r1, #16
 80202ae:	f7ff f957 	bl	801f560 <rcl_wait_set_add_subscription>
 80202b2:	2800      	cmp	r0, #0
 80202b4:	d1ea      	bne.n	802028c <rcl_action_wait_set_add_action_client+0x84>
 80202b6:	b11f      	cbz	r7, 80202c0 <rcl_action_wait_set_add_action_client+0xb8>
 80202b8:	6823      	ldr	r3, [r4, #0]
 80202ba:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80202be:	603b      	str	r3, [r7, #0]
 80202c0:	2e00      	cmp	r6, #0
 80202c2:	d0e3      	beq.n	802028c <rcl_action_wait_set_add_action_client+0x84>
 80202c4:	6823      	ldr	r3, [r4, #0]
 80202c6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80202ca:	6033      	str	r3, [r6, #0]
 80202cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80202ce:	bf00      	nop

080202d0 <rcl_action_client_wait_set_get_entities_ready>:
 80202d0:	2800      	cmp	r0, #0
 80202d2:	d050      	beq.n	8020376 <rcl_action_client_wait_set_get_entities_ready+0xa6>
 80202d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80202d8:	460c      	mov	r4, r1
 80202da:	2900      	cmp	r1, #0
 80202dc:	d03e      	beq.n	802035c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80202de:	4605      	mov	r5, r0
 80202e0:	6808      	ldr	r0, [r1, #0]
 80202e2:	2800      	cmp	r0, #0
 80202e4:	d03a      	beq.n	802035c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80202e6:	4616      	mov	r6, r2
 80202e8:	461f      	mov	r7, r3
 80202ea:	f7fd fff9 	bl	801e2e0 <rcl_client_is_valid>
 80202ee:	2800      	cmp	r0, #0
 80202f0:	d038      	beq.n	8020364 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80202f2:	6820      	ldr	r0, [r4, #0]
 80202f4:	3004      	adds	r0, #4
 80202f6:	f7fd fff3 	bl	801e2e0 <rcl_client_is_valid>
 80202fa:	2800      	cmp	r0, #0
 80202fc:	d032      	beq.n	8020364 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80202fe:	6820      	ldr	r0, [r4, #0]
 8020300:	3008      	adds	r0, #8
 8020302:	f7fd ffed 	bl	801e2e0 <rcl_client_is_valid>
 8020306:	b368      	cbz	r0, 8020364 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8020308:	6820      	ldr	r0, [r4, #0]
 802030a:	300c      	adds	r0, #12
 802030c:	f7fe feae 	bl	801f06c <rcl_subscription_is_valid>
 8020310:	b340      	cbz	r0, 8020364 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8020312:	6820      	ldr	r0, [r4, #0]
 8020314:	3010      	adds	r0, #16
 8020316:	f7fe fea9 	bl	801f06c <rcl_subscription_is_valid>
 802031a:	b318      	cbz	r0, 8020364 <rcl_action_client_wait_set_get_entities_ready+0x94>
 802031c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
 8020320:	2a00      	cmp	r2, #0
 8020322:	bf18      	it	ne
 8020324:	2b00      	cmpne	r3, #0
 8020326:	9b08      	ldr	r3, [sp, #32]
 8020328:	bf0c      	ite	eq
 802032a:	2101      	moveq	r1, #1
 802032c:	2100      	movne	r1, #0
 802032e:	2b00      	cmp	r3, #0
 8020330:	bf08      	it	eq
 8020332:	f041 0101 	orreq.w	r1, r1, #1
 8020336:	2f00      	cmp	r7, #0
 8020338:	bf08      	it	eq
 802033a:	f041 0101 	orreq.w	r1, r1, #1
 802033e:	b9b9      	cbnz	r1, 8020370 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8020340:	b1b6      	cbz	r6, 8020370 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8020342:	6823      	ldr	r3, [r4, #0]
 8020344:	686c      	ldr	r4, [r5, #4]
 8020346:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	@ 0x1d0
 802034a:	428a      	cmp	r2, r1
 802034c:	4610      	mov	r0, r2
 802034e:	bf38      	it	cc
 8020350:	4608      	movcc	r0, r1
 8020352:	4284      	cmp	r4, r0
 8020354:	d812      	bhi.n	802037c <rcl_action_client_wait_set_get_entities_ready+0xac>
 8020356:	2001      	movs	r0, #1
 8020358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802035c:	f640 0036 	movw	r0, #2102	@ 0x836
 8020360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020364:	f7f9 f96c 	bl	8019640 <rcutils_reset_error>
 8020368:	f640 0036 	movw	r0, #2102	@ 0x836
 802036c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020370:	200b      	movs	r0, #11
 8020372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020376:	f44f 7061 	mov.w	r0, #900	@ 0x384
 802037a:	4770      	bx	lr
 802037c:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	@ 0x1c4
 8020380:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	@ 0x1cc
 8020384:	45f0      	cmp	r8, lr
 8020386:	4640      	mov	r0, r8
 8020388:	69ec      	ldr	r4, [r5, #28]
 802038a:	bf38      	it	cc
 802038c:	4670      	movcc	r0, lr
 802038e:	4560      	cmp	r0, ip
 8020390:	bf38      	it	cc
 8020392:	4660      	movcc	r0, ip
 8020394:	4284      	cmp	r4, r0
 8020396:	d9de      	bls.n	8020356 <rcl_action_client_wait_set_get_entities_ready+0x86>
 8020398:	f8d5 9018 	ldr.w	r9, [r5, #24]
 802039c:	682d      	ldr	r5, [r5, #0]
 802039e:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 80203a2:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 80203a6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80203aa:	1a18      	subs	r0, r3, r0
 80203ac:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 80203b0:	f103 0c0c 	add.w	ip, r3, #12
 80203b4:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 80203b8:	fab0 f080 	clz	r0, r0
 80203bc:	eba5 050c 	sub.w	r5, r5, ip
 80203c0:	0940      	lsrs	r0, r0, #5
 80203c2:	fab5 f585 	clz	r5, r5
 80203c6:	096d      	lsrs	r5, r5, #5
 80203c8:	7035      	strb	r5, [r6, #0]
 80203ca:	f103 0510 	add.w	r5, r3, #16
 80203ce:	1b64      	subs	r4, r4, r5
 80203d0:	9d08      	ldr	r5, [sp, #32]
 80203d2:	fab4 f484 	clz	r4, r4
 80203d6:	0964      	lsrs	r4, r4, #5
 80203d8:	703c      	strb	r4, [r7, #0]
 80203da:	1d1c      	adds	r4, r3, #4
 80203dc:	3308      	adds	r3, #8
 80203de:	7028      	strb	r0, [r5, #0]
 80203e0:	1b09      	subs	r1, r1, r4
 80203e2:	2000      	movs	r0, #0
 80203e4:	1ad3      	subs	r3, r2, r3
 80203e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80203e8:	fab1 f181 	clz	r1, r1
 80203ec:	fab3 f383 	clz	r3, r3
 80203f0:	0949      	lsrs	r1, r1, #5
 80203f2:	095b      	lsrs	r3, r3, #5
 80203f4:	7011      	strb	r1, [r2, #0]
 80203f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80203f8:	7013      	strb	r3, [r2, #0]
 80203fa:	e7b1      	b.n	8020360 <rcl_action_client_wait_set_get_entities_ready+0x90>

080203fc <rcl_action_take_goal_request>:
 80203fc:	2800      	cmp	r0, #0
 80203fe:	d039      	beq.n	8020474 <rcl_action_take_goal_request+0x78>
 8020400:	b570      	push	{r4, r5, r6, lr}
 8020402:	4604      	mov	r4, r0
 8020404:	6800      	ldr	r0, [r0, #0]
 8020406:	b380      	cbz	r0, 802046a <rcl_action_take_goal_request+0x6e>
 8020408:	460e      	mov	r6, r1
 802040a:	4615      	mov	r5, r2
 802040c:	f7fe fce6 	bl	801eddc <rcl_service_is_valid>
 8020410:	b330      	cbz	r0, 8020460 <rcl_action_take_goal_request+0x64>
 8020412:	6820      	ldr	r0, [r4, #0]
 8020414:	3004      	adds	r0, #4
 8020416:	f7fe fce1 	bl	801eddc <rcl_service_is_valid>
 802041a:	b308      	cbz	r0, 8020460 <rcl_action_take_goal_request+0x64>
 802041c:	6820      	ldr	r0, [r4, #0]
 802041e:	3008      	adds	r0, #8
 8020420:	f7fe fcdc 	bl	801eddc <rcl_service_is_valid>
 8020424:	b1e0      	cbz	r0, 8020460 <rcl_action_take_goal_request+0x64>
 8020426:	6820      	ldr	r0, [r4, #0]
 8020428:	300c      	adds	r0, #12
 802042a:	f7f8 f983 	bl	8018734 <rcl_publisher_is_valid>
 802042e:	b1b8      	cbz	r0, 8020460 <rcl_action_take_goal_request+0x64>
 8020430:	6820      	ldr	r0, [r4, #0]
 8020432:	3010      	adds	r0, #16
 8020434:	f7f8 f97e 	bl	8018734 <rcl_publisher_is_valid>
 8020438:	b190      	cbz	r0, 8020460 <rcl_action_take_goal_request+0x64>
 802043a:	b1cd      	cbz	r5, 8020470 <rcl_action_take_goal_request+0x74>
 802043c:	b1c6      	cbz	r6, 8020470 <rcl_action_take_goal_request+0x74>
 802043e:	462a      	mov	r2, r5
 8020440:	4631      	mov	r1, r6
 8020442:	6820      	ldr	r0, [r4, #0]
 8020444:	f7fe fc72 	bl	801ed2c <rcl_take_request>
 8020448:	b148      	cbz	r0, 802045e <rcl_action_take_goal_request+0x62>
 802044a:	280a      	cmp	r0, #10
 802044c:	d007      	beq.n	802045e <rcl_action_take_goal_request+0x62>
 802044e:	f240 2259 	movw	r2, #601	@ 0x259
 8020452:	f640 0399 	movw	r3, #2201	@ 0x899
 8020456:	4290      	cmp	r0, r2
 8020458:	bf0c      	ite	eq
 802045a:	4618      	moveq	r0, r3
 802045c:	2001      	movne	r0, #1
 802045e:	bd70      	pop	{r4, r5, r6, pc}
 8020460:	f7f9 f8ee 	bl	8019640 <rcutils_reset_error>
 8020464:	f640 0098 	movw	r0, #2200	@ 0x898
 8020468:	bd70      	pop	{r4, r5, r6, pc}
 802046a:	f640 0098 	movw	r0, #2200	@ 0x898
 802046e:	bd70      	pop	{r4, r5, r6, pc}
 8020470:	200b      	movs	r0, #11
 8020472:	bd70      	pop	{r4, r5, r6, pc}
 8020474:	f640 0098 	movw	r0, #2200	@ 0x898
 8020478:	4770      	bx	lr
 802047a:	bf00      	nop

0802047c <rcl_action_send_goal_response>:
 802047c:	b390      	cbz	r0, 80204e4 <rcl_action_send_goal_response+0x68>
 802047e:	b570      	push	{r4, r5, r6, lr}
 8020480:	4604      	mov	r4, r0
 8020482:	6800      	ldr	r0, [r0, #0]
 8020484:	b348      	cbz	r0, 80204da <rcl_action_send_goal_response+0x5e>
 8020486:	460e      	mov	r6, r1
 8020488:	4615      	mov	r5, r2
 802048a:	f7fe fca7 	bl	801eddc <rcl_service_is_valid>
 802048e:	b1f8      	cbz	r0, 80204d0 <rcl_action_send_goal_response+0x54>
 8020490:	6820      	ldr	r0, [r4, #0]
 8020492:	3004      	adds	r0, #4
 8020494:	f7fe fca2 	bl	801eddc <rcl_service_is_valid>
 8020498:	b1d0      	cbz	r0, 80204d0 <rcl_action_send_goal_response+0x54>
 802049a:	6820      	ldr	r0, [r4, #0]
 802049c:	3008      	adds	r0, #8
 802049e:	f7fe fc9d 	bl	801eddc <rcl_service_is_valid>
 80204a2:	b1a8      	cbz	r0, 80204d0 <rcl_action_send_goal_response+0x54>
 80204a4:	6820      	ldr	r0, [r4, #0]
 80204a6:	300c      	adds	r0, #12
 80204a8:	f7f8 f944 	bl	8018734 <rcl_publisher_is_valid>
 80204ac:	b180      	cbz	r0, 80204d0 <rcl_action_send_goal_response+0x54>
 80204ae:	6820      	ldr	r0, [r4, #0]
 80204b0:	3010      	adds	r0, #16
 80204b2:	f7f8 f93f 	bl	8018734 <rcl_publisher_is_valid>
 80204b6:	b158      	cbz	r0, 80204d0 <rcl_action_send_goal_response+0x54>
 80204b8:	b195      	cbz	r5, 80204e0 <rcl_action_send_goal_response+0x64>
 80204ba:	b18e      	cbz	r6, 80204e0 <rcl_action_send_goal_response+0x64>
 80204bc:	462a      	mov	r2, r5
 80204be:	4631      	mov	r1, r6
 80204c0:	6820      	ldr	r0, [r4, #0]
 80204c2:	f7fe fc73 	bl	801edac <rcl_send_response>
 80204c6:	b110      	cbz	r0, 80204ce <rcl_action_send_goal_response+0x52>
 80204c8:	2802      	cmp	r0, #2
 80204ca:	bf18      	it	ne
 80204cc:	2001      	movne	r0, #1
 80204ce:	bd70      	pop	{r4, r5, r6, pc}
 80204d0:	f7f9 f8b6 	bl	8019640 <rcutils_reset_error>
 80204d4:	f640 0098 	movw	r0, #2200	@ 0x898
 80204d8:	bd70      	pop	{r4, r5, r6, pc}
 80204da:	f640 0098 	movw	r0, #2200	@ 0x898
 80204de:	bd70      	pop	{r4, r5, r6, pc}
 80204e0:	200b      	movs	r0, #11
 80204e2:	bd70      	pop	{r4, r5, r6, pc}
 80204e4:	f640 0098 	movw	r0, #2200	@ 0x898
 80204e8:	4770      	bx	lr
 80204ea:	bf00      	nop

080204ec <rcl_action_take_result_request>:
 80204ec:	2800      	cmp	r0, #0
 80204ee:	d03a      	beq.n	8020566 <rcl_action_take_result_request+0x7a>
 80204f0:	b570      	push	{r4, r5, r6, lr}
 80204f2:	4604      	mov	r4, r0
 80204f4:	6800      	ldr	r0, [r0, #0]
 80204f6:	b388      	cbz	r0, 802055c <rcl_action_take_result_request+0x70>
 80204f8:	460e      	mov	r6, r1
 80204fa:	4615      	mov	r5, r2
 80204fc:	f7fe fc6e 	bl	801eddc <rcl_service_is_valid>
 8020500:	b338      	cbz	r0, 8020552 <rcl_action_take_result_request+0x66>
 8020502:	6820      	ldr	r0, [r4, #0]
 8020504:	3004      	adds	r0, #4
 8020506:	f7fe fc69 	bl	801eddc <rcl_service_is_valid>
 802050a:	b310      	cbz	r0, 8020552 <rcl_action_take_result_request+0x66>
 802050c:	6820      	ldr	r0, [r4, #0]
 802050e:	3008      	adds	r0, #8
 8020510:	f7fe fc64 	bl	801eddc <rcl_service_is_valid>
 8020514:	b1e8      	cbz	r0, 8020552 <rcl_action_take_result_request+0x66>
 8020516:	6820      	ldr	r0, [r4, #0]
 8020518:	300c      	adds	r0, #12
 802051a:	f7f8 f90b 	bl	8018734 <rcl_publisher_is_valid>
 802051e:	b1c0      	cbz	r0, 8020552 <rcl_action_take_result_request+0x66>
 8020520:	6820      	ldr	r0, [r4, #0]
 8020522:	3010      	adds	r0, #16
 8020524:	f7f8 f906 	bl	8018734 <rcl_publisher_is_valid>
 8020528:	b198      	cbz	r0, 8020552 <rcl_action_take_result_request+0x66>
 802052a:	b1d5      	cbz	r5, 8020562 <rcl_action_take_result_request+0x76>
 802052c:	b1ce      	cbz	r6, 8020562 <rcl_action_take_result_request+0x76>
 802052e:	6820      	ldr	r0, [r4, #0]
 8020530:	462a      	mov	r2, r5
 8020532:	4631      	mov	r1, r6
 8020534:	3008      	adds	r0, #8
 8020536:	f7fe fbf9 	bl	801ed2c <rcl_take_request>
 802053a:	b148      	cbz	r0, 8020550 <rcl_action_take_result_request+0x64>
 802053c:	280a      	cmp	r0, #10
 802053e:	d007      	beq.n	8020550 <rcl_action_take_result_request+0x64>
 8020540:	f240 2259 	movw	r2, #601	@ 0x259
 8020544:	f640 0399 	movw	r3, #2201	@ 0x899
 8020548:	4290      	cmp	r0, r2
 802054a:	bf0c      	ite	eq
 802054c:	4618      	moveq	r0, r3
 802054e:	2001      	movne	r0, #1
 8020550:	bd70      	pop	{r4, r5, r6, pc}
 8020552:	f7f9 f875 	bl	8019640 <rcutils_reset_error>
 8020556:	f640 0098 	movw	r0, #2200	@ 0x898
 802055a:	bd70      	pop	{r4, r5, r6, pc}
 802055c:	f640 0098 	movw	r0, #2200	@ 0x898
 8020560:	bd70      	pop	{r4, r5, r6, pc}
 8020562:	200b      	movs	r0, #11
 8020564:	bd70      	pop	{r4, r5, r6, pc}
 8020566:	f640 0098 	movw	r0, #2200	@ 0x898
 802056a:	4770      	bx	lr

0802056c <rcl_action_take_cancel_request>:
 802056c:	2800      	cmp	r0, #0
 802056e:	d03a      	beq.n	80205e6 <rcl_action_take_cancel_request+0x7a>
 8020570:	b570      	push	{r4, r5, r6, lr}
 8020572:	4604      	mov	r4, r0
 8020574:	6800      	ldr	r0, [r0, #0]
 8020576:	b388      	cbz	r0, 80205dc <rcl_action_take_cancel_request+0x70>
 8020578:	460e      	mov	r6, r1
 802057a:	4615      	mov	r5, r2
 802057c:	f7fe fc2e 	bl	801eddc <rcl_service_is_valid>
 8020580:	b338      	cbz	r0, 80205d2 <rcl_action_take_cancel_request+0x66>
 8020582:	6820      	ldr	r0, [r4, #0]
 8020584:	3004      	adds	r0, #4
 8020586:	f7fe fc29 	bl	801eddc <rcl_service_is_valid>
 802058a:	b310      	cbz	r0, 80205d2 <rcl_action_take_cancel_request+0x66>
 802058c:	6820      	ldr	r0, [r4, #0]
 802058e:	3008      	adds	r0, #8
 8020590:	f7fe fc24 	bl	801eddc <rcl_service_is_valid>
 8020594:	b1e8      	cbz	r0, 80205d2 <rcl_action_take_cancel_request+0x66>
 8020596:	6820      	ldr	r0, [r4, #0]
 8020598:	300c      	adds	r0, #12
 802059a:	f7f8 f8cb 	bl	8018734 <rcl_publisher_is_valid>
 802059e:	b1c0      	cbz	r0, 80205d2 <rcl_action_take_cancel_request+0x66>
 80205a0:	6820      	ldr	r0, [r4, #0]
 80205a2:	3010      	adds	r0, #16
 80205a4:	f7f8 f8c6 	bl	8018734 <rcl_publisher_is_valid>
 80205a8:	b198      	cbz	r0, 80205d2 <rcl_action_take_cancel_request+0x66>
 80205aa:	b1d5      	cbz	r5, 80205e2 <rcl_action_take_cancel_request+0x76>
 80205ac:	b1ce      	cbz	r6, 80205e2 <rcl_action_take_cancel_request+0x76>
 80205ae:	6820      	ldr	r0, [r4, #0]
 80205b0:	462a      	mov	r2, r5
 80205b2:	4631      	mov	r1, r6
 80205b4:	3004      	adds	r0, #4
 80205b6:	f7fe fbb9 	bl	801ed2c <rcl_take_request>
 80205ba:	b148      	cbz	r0, 80205d0 <rcl_action_take_cancel_request+0x64>
 80205bc:	280a      	cmp	r0, #10
 80205be:	d007      	beq.n	80205d0 <rcl_action_take_cancel_request+0x64>
 80205c0:	f240 2259 	movw	r2, #601	@ 0x259
 80205c4:	f640 0399 	movw	r3, #2201	@ 0x899
 80205c8:	4290      	cmp	r0, r2
 80205ca:	bf0c      	ite	eq
 80205cc:	4618      	moveq	r0, r3
 80205ce:	2001      	movne	r0, #1
 80205d0:	bd70      	pop	{r4, r5, r6, pc}
 80205d2:	f7f9 f835 	bl	8019640 <rcutils_reset_error>
 80205d6:	f640 0098 	movw	r0, #2200	@ 0x898
 80205da:	bd70      	pop	{r4, r5, r6, pc}
 80205dc:	f640 0098 	movw	r0, #2200	@ 0x898
 80205e0:	bd70      	pop	{r4, r5, r6, pc}
 80205e2:	200b      	movs	r0, #11
 80205e4:	bd70      	pop	{r4, r5, r6, pc}
 80205e6:	f640 0098 	movw	r0, #2200	@ 0x898
 80205ea:	4770      	bx	lr

080205ec <rcl_action_send_cancel_response>:
 80205ec:	b398      	cbz	r0, 8020656 <rcl_action_send_cancel_response+0x6a>
 80205ee:	b570      	push	{r4, r5, r6, lr}
 80205f0:	4604      	mov	r4, r0
 80205f2:	6800      	ldr	r0, [r0, #0]
 80205f4:	b350      	cbz	r0, 802064c <rcl_action_send_cancel_response+0x60>
 80205f6:	460e      	mov	r6, r1
 80205f8:	4615      	mov	r5, r2
 80205fa:	f7fe fbef 	bl	801eddc <rcl_service_is_valid>
 80205fe:	b300      	cbz	r0, 8020642 <rcl_action_send_cancel_response+0x56>
 8020600:	6820      	ldr	r0, [r4, #0]
 8020602:	3004      	adds	r0, #4
 8020604:	f7fe fbea 	bl	801eddc <rcl_service_is_valid>
 8020608:	b1d8      	cbz	r0, 8020642 <rcl_action_send_cancel_response+0x56>
 802060a:	6820      	ldr	r0, [r4, #0]
 802060c:	3008      	adds	r0, #8
 802060e:	f7fe fbe5 	bl	801eddc <rcl_service_is_valid>
 8020612:	b1b0      	cbz	r0, 8020642 <rcl_action_send_cancel_response+0x56>
 8020614:	6820      	ldr	r0, [r4, #0]
 8020616:	300c      	adds	r0, #12
 8020618:	f7f8 f88c 	bl	8018734 <rcl_publisher_is_valid>
 802061c:	b188      	cbz	r0, 8020642 <rcl_action_send_cancel_response+0x56>
 802061e:	6820      	ldr	r0, [r4, #0]
 8020620:	3010      	adds	r0, #16
 8020622:	f7f8 f887 	bl	8018734 <rcl_publisher_is_valid>
 8020626:	b160      	cbz	r0, 8020642 <rcl_action_send_cancel_response+0x56>
 8020628:	b19d      	cbz	r5, 8020652 <rcl_action_send_cancel_response+0x66>
 802062a:	b196      	cbz	r6, 8020652 <rcl_action_send_cancel_response+0x66>
 802062c:	6820      	ldr	r0, [r4, #0]
 802062e:	462a      	mov	r2, r5
 8020630:	4631      	mov	r1, r6
 8020632:	3004      	adds	r0, #4
 8020634:	f7fe fbba 	bl	801edac <rcl_send_response>
 8020638:	b110      	cbz	r0, 8020640 <rcl_action_send_cancel_response+0x54>
 802063a:	2802      	cmp	r0, #2
 802063c:	bf18      	it	ne
 802063e:	2001      	movne	r0, #1
 8020640:	bd70      	pop	{r4, r5, r6, pc}
 8020642:	f7f8 fffd 	bl	8019640 <rcutils_reset_error>
 8020646:	f640 0098 	movw	r0, #2200	@ 0x898
 802064a:	bd70      	pop	{r4, r5, r6, pc}
 802064c:	f640 0098 	movw	r0, #2200	@ 0x898
 8020650:	bd70      	pop	{r4, r5, r6, pc}
 8020652:	200b      	movs	r0, #11
 8020654:	bd70      	pop	{r4, r5, r6, pc}
 8020656:	f640 0098 	movw	r0, #2200	@ 0x898
 802065a:	4770      	bx	lr

0802065c <rcl_action_wait_set_add_action_server>:
 802065c:	2800      	cmp	r0, #0
 802065e:	d04d      	beq.n	80206fc <rcl_action_wait_set_add_action_server+0xa0>
 8020660:	b570      	push	{r4, r5, r6, lr}
 8020662:	460c      	mov	r4, r1
 8020664:	b159      	cbz	r1, 802067e <rcl_action_wait_set_add_action_server+0x22>
 8020666:	4605      	mov	r5, r0
 8020668:	6808      	ldr	r0, [r1, #0]
 802066a:	b140      	cbz	r0, 802067e <rcl_action_wait_set_add_action_server+0x22>
 802066c:	4616      	mov	r6, r2
 802066e:	f7fe fbb5 	bl	801eddc <rcl_service_is_valid>
 8020672:	b120      	cbz	r0, 802067e <rcl_action_wait_set_add_action_server+0x22>
 8020674:	6820      	ldr	r0, [r4, #0]
 8020676:	3004      	adds	r0, #4
 8020678:	f7fe fbb0 	bl	801eddc <rcl_service_is_valid>
 802067c:	b910      	cbnz	r0, 8020684 <rcl_action_wait_set_add_action_server+0x28>
 802067e:	f640 0098 	movw	r0, #2200	@ 0x898
 8020682:	bd70      	pop	{r4, r5, r6, pc}
 8020684:	6820      	ldr	r0, [r4, #0]
 8020686:	3008      	adds	r0, #8
 8020688:	f7fe fba8 	bl	801eddc <rcl_service_is_valid>
 802068c:	2800      	cmp	r0, #0
 802068e:	d0f6      	beq.n	802067e <rcl_action_wait_set_add_action_server+0x22>
 8020690:	6820      	ldr	r0, [r4, #0]
 8020692:	300c      	adds	r0, #12
 8020694:	f7f8 f866 	bl	8018764 <rcl_publisher_is_valid_except_context>
 8020698:	2800      	cmp	r0, #0
 802069a:	d0f0      	beq.n	802067e <rcl_action_wait_set_add_action_server+0x22>
 802069c:	6820      	ldr	r0, [r4, #0]
 802069e:	3010      	adds	r0, #16
 80206a0:	f7f8 f860 	bl	8018764 <rcl_publisher_is_valid_except_context>
 80206a4:	2800      	cmp	r0, #0
 80206a6:	d0ea      	beq.n	802067e <rcl_action_wait_set_add_action_server+0x22>
 80206a8:	6821      	ldr	r1, [r4, #0]
 80206aa:	4628      	mov	r0, r5
 80206ac:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80206b0:	f7ff fad2 	bl	801fc58 <rcl_wait_set_add_service>
 80206b4:	2800      	cmp	r0, #0
 80206b6:	d1e4      	bne.n	8020682 <rcl_action_wait_set_add_action_server+0x26>
 80206b8:	6821      	ldr	r1, [r4, #0]
 80206ba:	4628      	mov	r0, r5
 80206bc:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80206c0:	3104      	adds	r1, #4
 80206c2:	f7ff fac9 	bl	801fc58 <rcl_wait_set_add_service>
 80206c6:	2800      	cmp	r0, #0
 80206c8:	d1db      	bne.n	8020682 <rcl_action_wait_set_add_action_server+0x26>
 80206ca:	6821      	ldr	r1, [r4, #0]
 80206cc:	4628      	mov	r0, r5
 80206ce:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80206d2:	3108      	adds	r1, #8
 80206d4:	f7ff fac0 	bl	801fc58 <rcl_wait_set_add_service>
 80206d8:	2800      	cmp	r0, #0
 80206da:	d1d2      	bne.n	8020682 <rcl_action_wait_set_add_action_server+0x26>
 80206dc:	6821      	ldr	r1, [r4, #0]
 80206de:	4628      	mov	r0, r5
 80206e0:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80206e4:	3114      	adds	r1, #20
 80206e6:	f7ff fa5b 	bl	801fba0 <rcl_wait_set_add_timer>
 80206ea:	2800      	cmp	r0, #0
 80206ec:	d1c9      	bne.n	8020682 <rcl_action_wait_set_add_action_server+0x26>
 80206ee:	2e00      	cmp	r6, #0
 80206f0:	d0c7      	beq.n	8020682 <rcl_action_wait_set_add_action_server+0x26>
 80206f2:	6823      	ldr	r3, [r4, #0]
 80206f4:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80206f8:	6033      	str	r3, [r6, #0]
 80206fa:	bd70      	pop	{r4, r5, r6, pc}
 80206fc:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8020700:	4770      	bx	lr
 8020702:	bf00      	nop

08020704 <rcl_action_server_wait_set_get_entities_ready>:
 8020704:	2800      	cmp	r0, #0
 8020706:	d067      	beq.n	80207d8 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 8020708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802070c:	460c      	mov	r4, r1
 802070e:	b161      	cbz	r1, 802072a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8020710:	4605      	mov	r5, r0
 8020712:	6808      	ldr	r0, [r1, #0]
 8020714:	b148      	cbz	r0, 802072a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8020716:	4616      	mov	r6, r2
 8020718:	4698      	mov	r8, r3
 802071a:	f7fe fb5f 	bl	801eddc <rcl_service_is_valid>
 802071e:	b120      	cbz	r0, 802072a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8020720:	6820      	ldr	r0, [r4, #0]
 8020722:	3004      	adds	r0, #4
 8020724:	f7fe fb5a 	bl	801eddc <rcl_service_is_valid>
 8020728:	b918      	cbnz	r0, 8020732 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 802072a:	f640 0098 	movw	r0, #2200	@ 0x898
 802072e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020732:	6820      	ldr	r0, [r4, #0]
 8020734:	3008      	adds	r0, #8
 8020736:	f7fe fb51 	bl	801eddc <rcl_service_is_valid>
 802073a:	2800      	cmp	r0, #0
 802073c:	d0f5      	beq.n	802072a <rcl_action_server_wait_set_get_entities_ready+0x26>
 802073e:	6820      	ldr	r0, [r4, #0]
 8020740:	300c      	adds	r0, #12
 8020742:	f7f8 f80f 	bl	8018764 <rcl_publisher_is_valid_except_context>
 8020746:	2800      	cmp	r0, #0
 8020748:	d0ef      	beq.n	802072a <rcl_action_server_wait_set_get_entities_ready+0x26>
 802074a:	6820      	ldr	r0, [r4, #0]
 802074c:	3010      	adds	r0, #16
 802074e:	f7f8 f809 	bl	8018764 <rcl_publisher_is_valid_except_context>
 8020752:	2800      	cmp	r0, #0
 8020754:	d0e9      	beq.n	802072a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8020756:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802075a:	2a00      	cmp	r2, #0
 802075c:	bf18      	it	ne
 802075e:	2b00      	cmpne	r3, #0
 8020760:	bf0c      	ite	eq
 8020762:	2101      	moveq	r1, #1
 8020764:	2100      	movne	r1, #0
 8020766:	f1b8 0f00 	cmp.w	r8, #0
 802076a:	bf08      	it	eq
 802076c:	f041 0101 	orreq.w	r1, r1, #1
 8020770:	bba9      	cbnz	r1, 80207de <rcl_action_server_wait_set_get_entities_ready+0xda>
 8020772:	b3a6      	cbz	r6, 80207de <rcl_action_server_wait_set_get_entities_ready+0xda>
 8020774:	6821      	ldr	r1, [r4, #0]
 8020776:	2000      	movs	r0, #0
 8020778:	692c      	ldr	r4, [r5, #16]
 802077a:	f8d1 21e8 	ldr.w	r2, [r1, #488]	@ 0x1e8
 802077e:	6a2f      	ldr	r7, [r5, #32]
 8020780:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8020784:	f8d1 41dc 	ldr.w	r4, [r1, #476]	@ 0x1dc
 8020788:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 802078c:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 8020790:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 8020794:	1a64      	subs	r4, r4, r1
 8020796:	f8d1 31e4 	ldr.w	r3, [r1, #484]	@ 0x1e4
 802079a:	fab4 f484 	clz	r4, r4
 802079e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80207a2:	0964      	lsrs	r4, r4, #5
 80207a4:	7034      	strb	r4, [r6, #0]
 80207a6:	1d0c      	adds	r4, r1, #4
 80207a8:	1b2c      	subs	r4, r5, r4
 80207aa:	fab4 f484 	clz	r4, r4
 80207ae:	0964      	lsrs	r4, r4, #5
 80207b0:	f888 4000 	strb.w	r4, [r8]
 80207b4:	f101 0408 	add.w	r4, r1, #8
 80207b8:	1b1b      	subs	r3, r3, r4
 80207ba:	9c06      	ldr	r4, [sp, #24]
 80207bc:	fab3 f383 	clz	r3, r3
 80207c0:	095b      	lsrs	r3, r3, #5
 80207c2:	7023      	strb	r3, [r4, #0]
 80207c4:	f101 0314 	add.w	r3, r1, #20
 80207c8:	1ad3      	subs	r3, r2, r3
 80207ca:	9a07      	ldr	r2, [sp, #28]
 80207cc:	fab3 f383 	clz	r3, r3
 80207d0:	095b      	lsrs	r3, r3, #5
 80207d2:	7013      	strb	r3, [r2, #0]
 80207d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80207d8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80207dc:	4770      	bx	lr
 80207de:	200b      	movs	r0, #11
 80207e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080207e4 <_execute_event_handler>:
 80207e4:	2002      	movs	r0, #2
 80207e6:	4770      	bx	lr

080207e8 <_cancel_goal_event_handler>:
 80207e8:	2003      	movs	r0, #3
 80207ea:	4770      	bx	lr

080207ec <_succeed_event_handler>:
 80207ec:	2004      	movs	r0, #4
 80207ee:	4770      	bx	lr

080207f0 <_abort_event_handler>:
 80207f0:	2006      	movs	r0, #6
 80207f2:	4770      	bx	lr

080207f4 <_canceled_event_handler>:
 80207f4:	2005      	movs	r0, #5
 80207f6:	4770      	bx	lr

080207f8 <rcl_action_transition_goal_state>:
 80207f8:	b2c2      	uxtb	r2, r0
 80207fa:	2a06      	cmp	r2, #6
 80207fc:	d810      	bhi.n	8020820 <rcl_action_transition_goal_state+0x28>
 80207fe:	2904      	cmp	r1, #4
 8020800:	d80e      	bhi.n	8020820 <rcl_action_transition_goal_state+0x28>
 8020802:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8020806:	b410      	push	{r4}
 8020808:	1853      	adds	r3, r2, r1
 802080a:	4c06      	ldr	r4, [pc, #24]	@ (8020824 <rcl_action_transition_goal_state+0x2c>)
 802080c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8020810:	b113      	cbz	r3, 8020818 <rcl_action_transition_goal_state+0x20>
 8020812:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020816:	4718      	bx	r3
 8020818:	2000      	movs	r0, #0
 802081a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802081e:	4770      	bx	lr
 8020820:	2000      	movs	r0, #0
 8020822:	4770      	bx	lr
 8020824:	0802ac54 	.word	0x0802ac54

08020828 <rcl_action_get_zero_initialized_cancel_response>:
 8020828:	b510      	push	{r4, lr}
 802082a:	4c07      	ldr	r4, [pc, #28]	@ (8020848 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 802082c:	4686      	mov	lr, r0
 802082e:	4684      	mov	ip, r0
 8020830:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8020832:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8020836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8020838:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802083c:	6823      	ldr	r3, [r4, #0]
 802083e:	4670      	mov	r0, lr
 8020840:	f8cc 3000 	str.w	r3, [ip]
 8020844:	bd10      	pop	{r4, pc}
 8020846:	bf00      	nop
 8020848:	0802ace0 	.word	0x0802ace0

0802084c <rclc_action_send_result_request>:
 802084c:	b1d0      	cbz	r0, 8020884 <rclc_action_send_result_request+0x38>
 802084e:	4684      	mov	ip, r0
 8020850:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8020854:	b500      	push	{lr}
 8020856:	b087      	sub	sp, #28
 8020858:	f8dc 100d 	ldr.w	r1, [ip, #13]
 802085c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8020860:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8020864:	f10d 0e08 	add.w	lr, sp, #8
 8020868:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 802086c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8020870:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8020874:	a902      	add	r1, sp, #8
 8020876:	3010      	adds	r0, #16
 8020878:	f7ff fbca 	bl	8020010 <rcl_action_send_result_request>
 802087c:	b920      	cbnz	r0, 8020888 <rclc_action_send_result_request+0x3c>
 802087e:	b007      	add	sp, #28
 8020880:	f85d fb04 	ldr.w	pc, [sp], #4
 8020884:	200b      	movs	r0, #11
 8020886:	4770      	bx	lr
 8020888:	9001      	str	r0, [sp, #4]
 802088a:	f7f8 fed9 	bl	8019640 <rcutils_reset_error>
 802088e:	9801      	ldr	r0, [sp, #4]
 8020890:	b007      	add	sp, #28
 8020892:	f85d fb04 	ldr.w	pc, [sp], #4
 8020896:	bf00      	nop

08020898 <rclc_action_take_goal_handle>:
 8020898:	b160      	cbz	r0, 80208b4 <rclc_action_take_goal_handle+0x1c>
 802089a:	6883      	ldr	r3, [r0, #8]
 802089c:	b143      	cbz	r3, 80208b0 <rclc_action_take_goal_handle+0x18>
 802089e:	6819      	ldr	r1, [r3, #0]
 80208a0:	2200      	movs	r2, #0
 80208a2:	6081      	str	r1, [r0, #8]
 80208a4:	721a      	strb	r2, [r3, #8]
 80208a6:	68c1      	ldr	r1, [r0, #12]
 80208a8:	621a      	str	r2, [r3, #32]
 80208aa:	849a      	strh	r2, [r3, #36]	@ 0x24
 80208ac:	6019      	str	r1, [r3, #0]
 80208ae:	60c3      	str	r3, [r0, #12]
 80208b0:	4618      	mov	r0, r3
 80208b2:	4770      	bx	lr
 80208b4:	4603      	mov	r3, r0
 80208b6:	e7fb      	b.n	80208b0 <rclc_action_take_goal_handle+0x18>

080208b8 <rclc_action_remove_used_goal_handle>:
 80208b8:	b180      	cbz	r0, 80208dc <rclc_action_remove_used_goal_handle+0x24>
 80208ba:	b179      	cbz	r1, 80208dc <rclc_action_remove_used_goal_handle+0x24>
 80208bc:	68c3      	ldr	r3, [r0, #12]
 80208be:	4299      	cmp	r1, r3
 80208c0:	d00d      	beq.n	80208de <rclc_action_remove_used_goal_handle+0x26>
 80208c2:	b12b      	cbz	r3, 80208d0 <rclc_action_remove_used_goal_handle+0x18>
 80208c4:	681a      	ldr	r2, [r3, #0]
 80208c6:	4291      	cmp	r1, r2
 80208c8:	d003      	beq.n	80208d2 <rclc_action_remove_used_goal_handle+0x1a>
 80208ca:	4613      	mov	r3, r2
 80208cc:	2b00      	cmp	r3, #0
 80208ce:	d1f9      	bne.n	80208c4 <rclc_action_remove_used_goal_handle+0xc>
 80208d0:	4770      	bx	lr
 80208d2:	680a      	ldr	r2, [r1, #0]
 80208d4:	601a      	str	r2, [r3, #0]
 80208d6:	6883      	ldr	r3, [r0, #8]
 80208d8:	600b      	str	r3, [r1, #0]
 80208da:	6081      	str	r1, [r0, #8]
 80208dc:	4770      	bx	lr
 80208de:	680b      	ldr	r3, [r1, #0]
 80208e0:	60c3      	str	r3, [r0, #12]
 80208e2:	e7f8      	b.n	80208d6 <rclc_action_remove_used_goal_handle+0x1e>

080208e4 <rclc_action_find_goal_handle_by_uuid>:
 80208e4:	b538      	push	{r3, r4, r5, lr}
 80208e6:	b181      	cbz	r1, 802090a <rclc_action_find_goal_handle_by_uuid+0x26>
 80208e8:	b178      	cbz	r0, 802090a <rclc_action_find_goal_handle_by_uuid+0x26>
 80208ea:	68c4      	ldr	r4, [r0, #12]
 80208ec:	460d      	mov	r5, r1
 80208ee:	b914      	cbnz	r4, 80208f6 <rclc_action_find_goal_handle_by_uuid+0x12>
 80208f0:	e009      	b.n	8020906 <rclc_action_find_goal_handle_by_uuid+0x22>
 80208f2:	6824      	ldr	r4, [r4, #0]
 80208f4:	b13c      	cbz	r4, 8020906 <rclc_action_find_goal_handle_by_uuid+0x22>
 80208f6:	f104 0009 	add.w	r0, r4, #9
 80208fa:	2210      	movs	r2, #16
 80208fc:	4629      	mov	r1, r5
 80208fe:	f004 ff3f 	bl	8025780 <memcmp>
 8020902:	2800      	cmp	r0, #0
 8020904:	d1f5      	bne.n	80208f2 <rclc_action_find_goal_handle_by_uuid+0xe>
 8020906:	4620      	mov	r0, r4
 8020908:	bd38      	pop	{r3, r4, r5, pc}
 802090a:	2400      	movs	r4, #0
 802090c:	4620      	mov	r0, r4
 802090e:	bd38      	pop	{r3, r4, r5, pc}

08020910 <rclc_action_find_first_handle_by_status>:
 8020910:	b140      	cbz	r0, 8020924 <rclc_action_find_first_handle_by_status+0x14>
 8020912:	68c0      	ldr	r0, [r0, #12]
 8020914:	b910      	cbnz	r0, 802091c <rclc_action_find_first_handle_by_status+0xc>
 8020916:	e005      	b.n	8020924 <rclc_action_find_first_handle_by_status+0x14>
 8020918:	6800      	ldr	r0, [r0, #0]
 802091a:	b118      	cbz	r0, 8020924 <rclc_action_find_first_handle_by_status+0x14>
 802091c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8020920:	428b      	cmp	r3, r1
 8020922:	d1f9      	bne.n	8020918 <rclc_action_find_first_handle_by_status+0x8>
 8020924:	4770      	bx	lr
 8020926:	bf00      	nop

08020928 <rclc_action_find_first_terminated_handle>:
 8020928:	b140      	cbz	r0, 802093c <rclc_action_find_first_terminated_handle+0x14>
 802092a:	68c0      	ldr	r0, [r0, #12]
 802092c:	b910      	cbnz	r0, 8020934 <rclc_action_find_first_terminated_handle+0xc>
 802092e:	e005      	b.n	802093c <rclc_action_find_first_terminated_handle+0x14>
 8020930:	6800      	ldr	r0, [r0, #0]
 8020932:	b118      	cbz	r0, 802093c <rclc_action_find_first_terminated_handle+0x14>
 8020934:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8020938:	2b03      	cmp	r3, #3
 802093a:	ddf9      	ble.n	8020930 <rclc_action_find_first_terminated_handle+0x8>
 802093c:	4770      	bx	lr
 802093e:	bf00      	nop

08020940 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8020940:	b170      	cbz	r0, 8020960 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8020942:	68c0      	ldr	r0, [r0, #12]
 8020944:	b160      	cbz	r0, 8020960 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8020946:	b410      	push	{r4}
 8020948:	e001      	b.n	802094e <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 802094a:	6800      	ldr	r0, [r0, #0]
 802094c:	b128      	cbz	r0, 802095a <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 802094e:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8020952:	4299      	cmp	r1, r3
 8020954:	bf08      	it	eq
 8020956:	4294      	cmpeq	r4, r2
 8020958:	d1f7      	bne.n	802094a <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 802095a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802095e:	4770      	bx	lr
 8020960:	4770      	bx	lr
 8020962:	bf00      	nop

08020964 <rclc_action_find_handle_by_result_request_sequence_number>:
 8020964:	b170      	cbz	r0, 8020984 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8020966:	68c0      	ldr	r0, [r0, #12]
 8020968:	b160      	cbz	r0, 8020984 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 802096a:	b410      	push	{r4}
 802096c:	e001      	b.n	8020972 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 802096e:	6800      	ldr	r0, [r0, #0]
 8020970:	b128      	cbz	r0, 802097e <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8020972:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8020976:	4299      	cmp	r1, r3
 8020978:	bf08      	it	eq
 802097a:	4294      	cmpeq	r4, r2
 802097c:	d1f7      	bne.n	802096e <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 802097e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020982:	4770      	bx	lr
 8020984:	4770      	bx	lr
 8020986:	bf00      	nop

08020988 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8020988:	b170      	cbz	r0, 80209a8 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 802098a:	68c0      	ldr	r0, [r0, #12]
 802098c:	b160      	cbz	r0, 80209a8 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 802098e:	b410      	push	{r4}
 8020990:	e001      	b.n	8020996 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8020992:	6800      	ldr	r0, [r0, #0]
 8020994:	b128      	cbz	r0, 80209a2 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8020996:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 802099a:	4299      	cmp	r1, r3
 802099c:	bf08      	it	eq
 802099e:	4294      	cmpeq	r4, r2
 80209a0:	d1f7      	bne.n	8020992 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80209a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80209a6:	4770      	bx	lr
 80209a8:	4770      	bx	lr
 80209aa:	bf00      	nop

080209ac <rclc_action_find_first_handle_with_goal_response>:
 80209ac:	b140      	cbz	r0, 80209c0 <rclc_action_find_first_handle_with_goal_response+0x14>
 80209ae:	68c0      	ldr	r0, [r0, #12]
 80209b0:	b910      	cbnz	r0, 80209b8 <rclc_action_find_first_handle_with_goal_response+0xc>
 80209b2:	e005      	b.n	80209c0 <rclc_action_find_first_handle_with_goal_response+0x14>
 80209b4:	6800      	ldr	r0, [r0, #0]
 80209b6:	b118      	cbz	r0, 80209c0 <rclc_action_find_first_handle_with_goal_response+0x14>
 80209b8:	f890 3020 	ldrb.w	r3, [r0, #32]
 80209bc:	2b00      	cmp	r3, #0
 80209be:	d0f9      	beq.n	80209b4 <rclc_action_find_first_handle_with_goal_response+0x8>
 80209c0:	4770      	bx	lr
 80209c2:	bf00      	nop

080209c4 <rclc_action_find_first_handle_with_result_response>:
 80209c4:	b140      	cbz	r0, 80209d8 <rclc_action_find_first_handle_with_result_response+0x14>
 80209c6:	68c0      	ldr	r0, [r0, #12]
 80209c8:	b910      	cbnz	r0, 80209d0 <rclc_action_find_first_handle_with_result_response+0xc>
 80209ca:	e005      	b.n	80209d8 <rclc_action_find_first_handle_with_result_response+0x14>
 80209cc:	6800      	ldr	r0, [r0, #0]
 80209ce:	b118      	cbz	r0, 80209d8 <rclc_action_find_first_handle_with_result_response+0x14>
 80209d0:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80209d4:	2b00      	cmp	r3, #0
 80209d6:	d0f9      	beq.n	80209cc <rclc_action_find_first_handle_with_result_response+0x8>
 80209d8:	4770      	bx	lr
 80209da:	bf00      	nop

080209dc <rclc_action_server_response_goal_request>:
 80209dc:	b198      	cbz	r0, 8020a06 <rclc_action_server_response_goal_request+0x2a>
 80209de:	2200      	movs	r2, #0
 80209e0:	460b      	mov	r3, r1
 80209e2:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80209e6:	b510      	push	{r4, lr}
 80209e8:	6844      	ldr	r4, [r0, #4]
 80209ea:	b086      	sub	sp, #24
 80209ec:	f104 0010 	add.w	r0, r4, #16
 80209f0:	9205      	str	r2, [sp, #20]
 80209f2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80209f6:	aa03      	add	r2, sp, #12
 80209f8:	f88d 300c 	strb.w	r3, [sp, #12]
 80209fc:	f7ff fd3e 	bl	802047c <rcl_action_send_goal_response>
 8020a00:	b918      	cbnz	r0, 8020a0a <rclc_action_server_response_goal_request+0x2e>
 8020a02:	b006      	add	sp, #24
 8020a04:	bd10      	pop	{r4, pc}
 8020a06:	200b      	movs	r0, #11
 8020a08:	4770      	bx	lr
 8020a0a:	9001      	str	r0, [sp, #4]
 8020a0c:	f7f8 fe18 	bl	8019640 <rcutils_reset_error>
 8020a10:	9801      	ldr	r0, [sp, #4]
 8020a12:	b006      	add	sp, #24
 8020a14:	bd10      	pop	{r4, pc}
 8020a16:	bf00      	nop

08020a18 <rclc_action_server_goal_cancel_accept>:
 8020a18:	b310      	cbz	r0, 8020a60 <rclc_action_server_goal_cancel_accept+0x48>
 8020a1a:	b510      	push	{r4, lr}
 8020a1c:	b090      	sub	sp, #64	@ 0x40
 8020a1e:	4604      	mov	r4, r0
 8020a20:	a806      	add	r0, sp, #24
 8020a22:	f7ff ff01 	bl	8020828 <rcl_action_get_zero_initialized_cancel_response>
 8020a26:	2300      	movs	r3, #0
 8020a28:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8020a2c:	46ec      	mov	ip, sp
 8020a2e:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8020a32:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8020a36:	f88d 3018 	strb.w	r3, [sp, #24]
 8020a3a:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8020a3e:	f8cd d01c 	str.w	sp, [sp, #28]
 8020a42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8020a46:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8020a68 <rclc_action_server_goal_cancel_accept+0x50>
 8020a4a:	6860      	ldr	r0, [r4, #4]
 8020a4c:	aa06      	add	r2, sp, #24
 8020a4e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8020a52:	3010      	adds	r0, #16
 8020a54:	ed8d 7b08 	vstr	d7, [sp, #32]
 8020a58:	f7ff fdc8 	bl	80205ec <rcl_action_send_cancel_response>
 8020a5c:	b010      	add	sp, #64	@ 0x40
 8020a5e:	bd10      	pop	{r4, pc}
 8020a60:	200b      	movs	r0, #11
 8020a62:	4770      	bx	lr
 8020a64:	f3af 8000 	nop.w
 8020a68:	00000001 	.word	0x00000001
 8020a6c:	00000001 	.word	0x00000001

08020a70 <rclc_action_server_goal_cancel_reject>:
 8020a70:	b082      	sub	sp, #8
 8020a72:	b530      	push	{r4, r5, lr}
 8020a74:	b08b      	sub	sp, #44	@ 0x2c
 8020a76:	ac0e      	add	r4, sp, #56	@ 0x38
 8020a78:	e884 000c 	stmia.w	r4, {r2, r3}
 8020a7c:	b188      	cbz	r0, 8020aa2 <rclc_action_server_goal_cancel_reject+0x32>
 8020a7e:	4604      	mov	r4, r0
 8020a80:	a801      	add	r0, sp, #4
 8020a82:	460d      	mov	r5, r1
 8020a84:	f7ff fed0 	bl	8020828 <rcl_action_get_zero_initialized_cancel_response>
 8020a88:	aa01      	add	r2, sp, #4
 8020a8a:	a90e      	add	r1, sp, #56	@ 0x38
 8020a8c:	f104 0010 	add.w	r0, r4, #16
 8020a90:	f88d 5004 	strb.w	r5, [sp, #4]
 8020a94:	f7ff fdaa 	bl	80205ec <rcl_action_send_cancel_response>
 8020a98:	b00b      	add	sp, #44	@ 0x2c
 8020a9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020a9e:	b002      	add	sp, #8
 8020aa0:	4770      	bx	lr
 8020aa2:	200b      	movs	r0, #11
 8020aa4:	b00b      	add	sp, #44	@ 0x2c
 8020aa6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020aaa:	b002      	add	sp, #8
 8020aac:	4770      	bx	lr
 8020aae:	bf00      	nop

08020ab0 <__atomic_load_8>:
 8020ab0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8020ab4:	4a16      	ldr	r2, [pc, #88]	@ (8020b10 <__atomic_load_8+0x60>)
 8020ab6:	4b17      	ldr	r3, [pc, #92]	@ (8020b14 <__atomic_load_8+0x64>)
 8020ab8:	f04f 0c01 	mov.w	ip, #1
 8020abc:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8020ac0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8020ac4:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8020ac8:	fb02 f101 	mul.w	r1, r2, r1
 8020acc:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8020ad0:	fba3 2301 	umull	r2, r3, r3, r1
 8020ad4:	091b      	lsrs	r3, r3, #4
 8020ad6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8020ada:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8020ade:	b4d0      	push	{r4, r6, r7}
 8020ae0:	1ac9      	subs	r1, r1, r3
 8020ae2:	4c0d      	ldr	r4, [pc, #52]	@ (8020b18 <__atomic_load_8+0x68>)
 8020ae4:	1862      	adds	r2, r4, r1
 8020ae6:	e8d2 3f4f 	ldrexb	r3, [r2]
 8020aea:	e8c2 cf46 	strexb	r6, ip, [r2]
 8020aee:	2e00      	cmp	r6, #0
 8020af0:	d1f9      	bne.n	8020ae6 <__atomic_load_8+0x36>
 8020af2:	b2db      	uxtb	r3, r3
 8020af4:	f3bf 8f5b 	dmb	ish
 8020af8:	2b00      	cmp	r3, #0
 8020afa:	d1f4      	bne.n	8020ae6 <__atomic_load_8+0x36>
 8020afc:	e9d0 6700 	ldrd	r6, r7, [r0]
 8020b00:	f3bf 8f5b 	dmb	ish
 8020b04:	5463      	strb	r3, [r4, r1]
 8020b06:	4630      	mov	r0, r6
 8020b08:	4639      	mov	r1, r7
 8020b0a:	bcd0      	pop	{r4, r6, r7}
 8020b0c:	4770      	bx	lr
 8020b0e:	bf00      	nop
 8020b10:	27d4eb2d 	.word	0x27d4eb2d
 8020b14:	b21642c9 	.word	0xb21642c9
 8020b18:	20014a48 	.word	0x20014a48

08020b1c <__atomic_store_8>:
 8020b1c:	b570      	push	{r4, r5, r6, lr}
 8020b1e:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8020b22:	4916      	ldr	r1, [pc, #88]	@ (8020b7c <__atomic_store_8+0x60>)
 8020b24:	4c16      	ldr	r4, [pc, #88]	@ (8020b80 <__atomic_store_8+0x64>)
 8020b26:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 8020b2a:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8020b2e:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8020b32:	fb01 fe0e 	mul.w	lr, r1, lr
 8020b36:	4913      	ldr	r1, [pc, #76]	@ (8020b84 <__atomic_store_8+0x68>)
 8020b38:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8020b3c:	fba1 510e 	umull	r5, r1, r1, lr
 8020b40:	f04f 0501 	mov.w	r5, #1
 8020b44:	0909      	lsrs	r1, r1, #4
 8020b46:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8020b4a:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 8020b4e:	ebae 0e01 	sub.w	lr, lr, r1
 8020b52:	eb04 0c0e 	add.w	ip, r4, lr
 8020b56:	e8dc 1f4f 	ldrexb	r1, [ip]
 8020b5a:	e8cc 5f46 	strexb	r6, r5, [ip]
 8020b5e:	2e00      	cmp	r6, #0
 8020b60:	d1f9      	bne.n	8020b56 <__atomic_store_8+0x3a>
 8020b62:	b2c9      	uxtb	r1, r1
 8020b64:	f3bf 8f5b 	dmb	ish
 8020b68:	2900      	cmp	r1, #0
 8020b6a:	d1f4      	bne.n	8020b56 <__atomic_store_8+0x3a>
 8020b6c:	e9c0 2300 	strd	r2, r3, [r0]
 8020b70:	f3bf 8f5b 	dmb	ish
 8020b74:	f804 100e 	strb.w	r1, [r4, lr]
 8020b78:	bd70      	pop	{r4, r5, r6, pc}
 8020b7a:	bf00      	nop
 8020b7c:	27d4eb2d 	.word	0x27d4eb2d
 8020b80:	20014a48 	.word	0x20014a48
 8020b84:	b21642c9 	.word	0xb21642c9

08020b88 <__atomic_exchange_8>:
 8020b88:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8020b8c:	4917      	ldr	r1, [pc, #92]	@ (8020bec <__atomic_exchange_8+0x64>)
 8020b8e:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8020b92:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8020b96:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8020b9a:	fb01 fc0c 	mul.w	ip, r1, ip
 8020b9e:	4914      	ldr	r1, [pc, #80]	@ (8020bf0 <__atomic_exchange_8+0x68>)
 8020ba0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8020ba4:	b570      	push	{r4, r5, r6, lr}
 8020ba6:	4686      	mov	lr, r0
 8020ba8:	fba1 010c 	umull	r0, r1, r1, ip
 8020bac:	4d11      	ldr	r5, [pc, #68]	@ (8020bf4 <__atomic_exchange_8+0x6c>)
 8020bae:	f04f 0001 	mov.w	r0, #1
 8020bb2:	0909      	lsrs	r1, r1, #4
 8020bb4:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8020bb8:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8020bbc:	ebac 0c01 	sub.w	ip, ip, r1
 8020bc0:	eb05 010c 	add.w	r1, r5, ip
 8020bc4:	e8d1 4f4f 	ldrexb	r4, [r1]
 8020bc8:	e8c1 0f46 	strexb	r6, r0, [r1]
 8020bcc:	2e00      	cmp	r6, #0
 8020bce:	d1f9      	bne.n	8020bc4 <__atomic_exchange_8+0x3c>
 8020bd0:	b2e4      	uxtb	r4, r4
 8020bd2:	f3bf 8f5b 	dmb	ish
 8020bd6:	2c00      	cmp	r4, #0
 8020bd8:	d1f4      	bne.n	8020bc4 <__atomic_exchange_8+0x3c>
 8020bda:	e9de 0100 	ldrd	r0, r1, [lr]
 8020bde:	e9ce 2300 	strd	r2, r3, [lr]
 8020be2:	f3bf 8f5b 	dmb	ish
 8020be6:	f805 400c 	strb.w	r4, [r5, ip]
 8020bea:	bd70      	pop	{r4, r5, r6, pc}
 8020bec:	27d4eb2d 	.word	0x27d4eb2d
 8020bf0:	b21642c9 	.word	0xb21642c9
 8020bf4:	20014a48 	.word	0x20014a48

08020bf8 <rcutils_get_env>:
 8020bf8:	b168      	cbz	r0, 8020c16 <rcutils_get_env+0x1e>
 8020bfa:	b510      	push	{r4, lr}
 8020bfc:	460c      	mov	r4, r1
 8020bfe:	b129      	cbz	r1, 8020c0c <rcutils_get_env+0x14>
 8020c00:	f004 f8a2 	bl	8024d48 <getenv>
 8020c04:	b120      	cbz	r0, 8020c10 <rcutils_get_env+0x18>
 8020c06:	6020      	str	r0, [r4, #0]
 8020c08:	2000      	movs	r0, #0
 8020c0a:	bd10      	pop	{r4, pc}
 8020c0c:	4803      	ldr	r0, [pc, #12]	@ (8020c1c <rcutils_get_env+0x24>)
 8020c0e:	bd10      	pop	{r4, pc}
 8020c10:	4b03      	ldr	r3, [pc, #12]	@ (8020c20 <rcutils_get_env+0x28>)
 8020c12:	6023      	str	r3, [r4, #0]
 8020c14:	bd10      	pop	{r4, pc}
 8020c16:	4803      	ldr	r0, [pc, #12]	@ (8020c24 <rcutils_get_env+0x2c>)
 8020c18:	4770      	bx	lr
 8020c1a:	bf00      	nop
 8020c1c:	0802a6e0 	.word	0x0802a6e0
 8020c20:	0802aa90 	.word	0x0802aa90
 8020c24:	0802a6c4 	.word	0x0802a6c4

08020c28 <rcutils_format_string_limit>:
 8020c28:	b40f      	push	{r0, r1, r2, r3}
 8020c2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020c2c:	b083      	sub	sp, #12
 8020c2e:	ac08      	add	r4, sp, #32
 8020c30:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8020c32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8020c36:	b326      	cbz	r6, 8020c82 <rcutils_format_string_limit+0x5a>
 8020c38:	a808      	add	r0, sp, #32
 8020c3a:	f7f8 fcdb 	bl	80195f4 <rcutils_allocator_is_valid>
 8020c3e:	b300      	cbz	r0, 8020c82 <rcutils_format_string_limit+0x5a>
 8020c40:	2100      	movs	r1, #0
 8020c42:	ab0f      	add	r3, sp, #60	@ 0x3c
 8020c44:	4632      	mov	r2, r6
 8020c46:	4608      	mov	r0, r1
 8020c48:	e9cd 3300 	strd	r3, r3, [sp]
 8020c4c:	f000 f906 	bl	8020e5c <rcutils_vsnprintf>
 8020c50:	1c43      	adds	r3, r0, #1
 8020c52:	4605      	mov	r5, r0
 8020c54:	d015      	beq.n	8020c82 <rcutils_format_string_limit+0x5a>
 8020c56:	1c47      	adds	r7, r0, #1
 8020c58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020c5a:	429f      	cmp	r7, r3
 8020c5c:	d901      	bls.n	8020c62 <rcutils_format_string_limit+0x3a>
 8020c5e:	1e5d      	subs	r5, r3, #1
 8020c60:	461f      	mov	r7, r3
 8020c62:	9b08      	ldr	r3, [sp, #32]
 8020c64:	4638      	mov	r0, r7
 8020c66:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8020c68:	4798      	blx	r3
 8020c6a:	4604      	mov	r4, r0
 8020c6c:	b148      	cbz	r0, 8020c82 <rcutils_format_string_limit+0x5a>
 8020c6e:	4632      	mov	r2, r6
 8020c70:	4639      	mov	r1, r7
 8020c72:	9b01      	ldr	r3, [sp, #4]
 8020c74:	f000 f8f2 	bl	8020e5c <rcutils_vsnprintf>
 8020c78:	2800      	cmp	r0, #0
 8020c7a:	db09      	blt.n	8020c90 <rcutils_format_string_limit+0x68>
 8020c7c:	2300      	movs	r3, #0
 8020c7e:	5563      	strb	r3, [r4, r5]
 8020c80:	e000      	b.n	8020c84 <rcutils_format_string_limit+0x5c>
 8020c82:	2400      	movs	r4, #0
 8020c84:	4620      	mov	r0, r4
 8020c86:	b003      	add	sp, #12
 8020c88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8020c8c:	b004      	add	sp, #16
 8020c8e:	4770      	bx	lr
 8020c90:	4620      	mov	r0, r4
 8020c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020c94:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8020c96:	2400      	movs	r4, #0
 8020c98:	4798      	blx	r3
 8020c9a:	e7f3      	b.n	8020c84 <rcutils_format_string_limit+0x5c>

08020c9c <rcutils_repl_str>:
 8020c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ca0:	ed2d 8b02 	vpush	{d8}
 8020ca4:	b087      	sub	sp, #28
 8020ca6:	2600      	movs	r6, #0
 8020ca8:	4680      	mov	r8, r0
 8020caa:	468a      	mov	sl, r1
 8020cac:	9000      	str	r0, [sp, #0]
 8020cae:	4608      	mov	r0, r1
 8020cb0:	ee08 2a10 	vmov	s16, r2
 8020cb4:	4699      	mov	r9, r3
 8020cb6:	2510      	movs	r5, #16
 8020cb8:	f7df facc 	bl	8000254 <strlen>
 8020cbc:	4637      	mov	r7, r6
 8020cbe:	46b3      	mov	fp, r6
 8020cc0:	9001      	str	r0, [sp, #4]
 8020cc2:	e01e      	b.n	8020d02 <rcutils_repl_str+0x66>
 8020cc4:	f10b 0b01 	add.w	fp, fp, #1
 8020cc8:	9b01      	ldr	r3, [sp, #4]
 8020cca:	455e      	cmp	r6, fp
 8020ccc:	eb04 0803 	add.w	r8, r4, r3
 8020cd0:	d211      	bcs.n	8020cf6 <rcutils_repl_str+0x5a>
 8020cd2:	442e      	add	r6, r5
 8020cd4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8020cd8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8020cdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020ce0:	00b1      	lsls	r1, r6, #2
 8020ce2:	4798      	blx	r3
 8020ce4:	2800      	cmp	r0, #0
 8020ce6:	f000 8088 	beq.w	8020dfa <rcutils_repl_str+0x15e>
 8020cea:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8020cee:	4607      	mov	r7, r0
 8020cf0:	bf28      	it	cs
 8020cf2:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8020cf6:	9a00      	ldr	r2, [sp, #0]
 8020cf8:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8020cfc:	1aa4      	subs	r4, r4, r2
 8020cfe:	f843 4c04 	str.w	r4, [r3, #-4]
 8020d02:	4651      	mov	r1, sl
 8020d04:	4640      	mov	r0, r8
 8020d06:	f004 fd8c 	bl	8025822 <strstr>
 8020d0a:	4604      	mov	r4, r0
 8020d0c:	4638      	mov	r0, r7
 8020d0e:	2c00      	cmp	r4, #0
 8020d10:	d1d8      	bne.n	8020cc4 <rcutils_repl_str+0x28>
 8020d12:	4640      	mov	r0, r8
 8020d14:	f7df fa9e 	bl	8000254 <strlen>
 8020d18:	9b00      	ldr	r3, [sp, #0]
 8020d1a:	eba8 0803 	sub.w	r8, r8, r3
 8020d1e:	eb08 0400 	add.w	r4, r8, r0
 8020d22:	9402      	str	r4, [sp, #8]
 8020d24:	f1bb 0f00 	cmp.w	fp, #0
 8020d28:	d045      	beq.n	8020db6 <rcutils_repl_str+0x11a>
 8020d2a:	ee18 0a10 	vmov	r0, s16
 8020d2e:	f7df fa91 	bl	8000254 <strlen>
 8020d32:	9a01      	ldr	r2, [sp, #4]
 8020d34:	4606      	mov	r6, r0
 8020d36:	f8d9 3000 	ldr.w	r3, [r9]
 8020d3a:	1a82      	subs	r2, r0, r2
 8020d3c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8020d40:	fb0b 4202 	mla	r2, fp, r2, r4
 8020d44:	1c50      	adds	r0, r2, #1
 8020d46:	9205      	str	r2, [sp, #20]
 8020d48:	4798      	blx	r3
 8020d4a:	4682      	mov	sl, r0
 8020d4c:	2800      	cmp	r0, #0
 8020d4e:	d054      	beq.n	8020dfa <rcutils_repl_str+0x15e>
 8020d50:	683a      	ldr	r2, [r7, #0]
 8020d52:	463d      	mov	r5, r7
 8020d54:	9900      	ldr	r1, [sp, #0]
 8020d56:	2401      	movs	r4, #1
 8020d58:	f004 fe63 	bl	8025a22 <memcpy>
 8020d5c:	683b      	ldr	r3, [r7, #0]
 8020d5e:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8020d62:	eb0a 0803 	add.w	r8, sl, r3
 8020d66:	ee18 7a10 	vmov	r7, s16
 8020d6a:	f8dd a000 	ldr.w	sl, [sp]
 8020d6e:	f8cd 9000 	str.w	r9, [sp]
 8020d72:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8020d76:	4632      	mov	r2, r6
 8020d78:	4639      	mov	r1, r7
 8020d7a:	4640      	mov	r0, r8
 8020d7c:	44b0      	add	r8, r6
 8020d7e:	f004 fe50 	bl	8025a22 <memcpy>
 8020d82:	f855 2b04 	ldr.w	r2, [r5], #4
 8020d86:	45a3      	cmp	fp, r4
 8020d88:	444a      	add	r2, r9
 8020d8a:	eb0a 0102 	add.w	r1, sl, r2
 8020d8e:	d02a      	beq.n	8020de6 <rcutils_repl_str+0x14a>
 8020d90:	6828      	ldr	r0, [r5, #0]
 8020d92:	1a82      	subs	r2, r0, r2
 8020d94:	4640      	mov	r0, r8
 8020d96:	4490      	add	r8, r2
 8020d98:	f004 fe43 	bl	8025a22 <memcpy>
 8020d9c:	1c62      	adds	r2, r4, #1
 8020d9e:	45a3      	cmp	fp, r4
 8020da0:	4614      	mov	r4, r2
 8020da2:	d8e8      	bhi.n	8020d76 <rcutils_repl_str+0xda>
 8020da4:	f8dd 9000 	ldr.w	r9, [sp]
 8020da8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8020dac:	2300      	movs	r3, #0
 8020dae:	9a05      	ldr	r2, [sp, #20]
 8020db0:	f80a 3002 	strb.w	r3, [sl, r2]
 8020db4:	e00b      	b.n	8020dce <rcutils_repl_str+0x132>
 8020db6:	4620      	mov	r0, r4
 8020db8:	f8d9 3000 	ldr.w	r3, [r9]
 8020dbc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8020dc0:	3001      	adds	r0, #1
 8020dc2:	4798      	blx	r3
 8020dc4:	4682      	mov	sl, r0
 8020dc6:	b110      	cbz	r0, 8020dce <rcutils_repl_str+0x132>
 8020dc8:	9900      	ldr	r1, [sp, #0]
 8020dca:	f004 fe22 	bl	8025a12 <strcpy>
 8020dce:	4638      	mov	r0, r7
 8020dd0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8020dd4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8020dd8:	4798      	blx	r3
 8020dda:	4650      	mov	r0, sl
 8020ddc:	b007      	add	sp, #28
 8020dde:	ecbd 8b02 	vpop	{d8}
 8020de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020de6:	9b02      	ldr	r3, [sp, #8]
 8020de8:	4640      	mov	r0, r8
 8020dea:	f8dd 9000 	ldr.w	r9, [sp]
 8020dee:	1a9a      	subs	r2, r3, r2
 8020df0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8020df4:	f004 fe15 	bl	8025a22 <memcpy>
 8020df8:	e7d8      	b.n	8020dac <rcutils_repl_str+0x110>
 8020dfa:	f04f 0a00 	mov.w	sl, #0
 8020dfe:	e7e6      	b.n	8020dce <rcutils_repl_str+0x132>

08020e00 <rcutils_snprintf>:
 8020e00:	b40c      	push	{r2, r3}
 8020e02:	b530      	push	{r4, r5, lr}
 8020e04:	b083      	sub	sp, #12
 8020e06:	ab06      	add	r3, sp, #24
 8020e08:	f853 2b04 	ldr.w	r2, [r3], #4
 8020e0c:	9301      	str	r3, [sp, #4]
 8020e0e:	b1e2      	cbz	r2, 8020e4a <rcutils_snprintf+0x4a>
 8020e10:	fab0 f480 	clz	r4, r0
 8020e14:	fab1 f581 	clz	r5, r1
 8020e18:	ea50 0c01 	orrs.w	ip, r0, r1
 8020e1c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8020e20:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8020e24:	d008      	beq.n	8020e38 <rcutils_snprintf+0x38>
 8020e26:	b984      	cbnz	r4, 8020e4a <rcutils_snprintf+0x4a>
 8020e28:	b97d      	cbnz	r5, 8020e4a <rcutils_snprintf+0x4a>
 8020e2a:	f004 fc07 	bl	802563c <vsniprintf>
 8020e2e:	b003      	add	sp, #12
 8020e30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020e34:	b002      	add	sp, #8
 8020e36:	4770      	bx	lr
 8020e38:	4661      	mov	r1, ip
 8020e3a:	4660      	mov	r0, ip
 8020e3c:	f004 fbfe 	bl	802563c <vsniprintf>
 8020e40:	b003      	add	sp, #12
 8020e42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020e46:	b002      	add	sp, #8
 8020e48:	4770      	bx	lr
 8020e4a:	4b03      	ldr	r3, [pc, #12]	@ (8020e58 <rcutils_snprintf+0x58>)
 8020e4c:	2216      	movs	r2, #22
 8020e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8020e52:	601a      	str	r2, [r3, #0]
 8020e54:	e7eb      	b.n	8020e2e <rcutils_snprintf+0x2e>
 8020e56:	bf00      	nop
 8020e58:	20014c9c 	.word	0x20014c9c

08020e5c <rcutils_vsnprintf>:
 8020e5c:	b1f2      	cbz	r2, 8020e9c <rcutils_vsnprintf+0x40>
 8020e5e:	ea50 0c01 	orrs.w	ip, r0, r1
 8020e62:	b530      	push	{r4, r5, lr}
 8020e64:	fab0 f480 	clz	r4, r0
 8020e68:	fab1 f581 	clz	r5, r1
 8020e6c:	468e      	mov	lr, r1
 8020e6e:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8020e72:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8020e76:	d005      	beq.n	8020e84 <rcutils_vsnprintf+0x28>
 8020e78:	b954      	cbnz	r4, 8020e90 <rcutils_vsnprintf+0x34>
 8020e7a:	b94d      	cbnz	r5, 8020e90 <rcutils_vsnprintf+0x34>
 8020e7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020e80:	f004 bbdc 	b.w	802563c <vsniprintf>
 8020e84:	4661      	mov	r1, ip
 8020e86:	4660      	mov	r0, ip
 8020e88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020e8c:	f004 bbd6 	b.w	802563c <vsniprintf>
 8020e90:	4b05      	ldr	r3, [pc, #20]	@ (8020ea8 <rcutils_vsnprintf+0x4c>)
 8020e92:	2216      	movs	r2, #22
 8020e94:	f04f 30ff 	mov.w	r0, #4294967295
 8020e98:	601a      	str	r2, [r3, #0]
 8020e9a:	bd30      	pop	{r4, r5, pc}
 8020e9c:	4b02      	ldr	r3, [pc, #8]	@ (8020ea8 <rcutils_vsnprintf+0x4c>)
 8020e9e:	2216      	movs	r2, #22
 8020ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8020ea4:	601a      	str	r2, [r3, #0]
 8020ea6:	4770      	bx	lr
 8020ea8:	20014c9c 	.word	0x20014c9c

08020eac <rcutils_strdup>:
 8020eac:	b084      	sub	sp, #16
 8020eae:	b570      	push	{r4, r5, r6, lr}
 8020eb0:	b082      	sub	sp, #8
 8020eb2:	4605      	mov	r5, r0
 8020eb4:	ac07      	add	r4, sp, #28
 8020eb6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8020eba:	b1b0      	cbz	r0, 8020eea <rcutils_strdup+0x3e>
 8020ebc:	f7df f9ca 	bl	8000254 <strlen>
 8020ec0:	1c42      	adds	r2, r0, #1
 8020ec2:	9b07      	ldr	r3, [sp, #28]
 8020ec4:	4606      	mov	r6, r0
 8020ec6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020ec8:	4610      	mov	r0, r2
 8020eca:	9201      	str	r2, [sp, #4]
 8020ecc:	4798      	blx	r3
 8020ece:	4604      	mov	r4, r0
 8020ed0:	b128      	cbz	r0, 8020ede <rcutils_strdup+0x32>
 8020ed2:	9a01      	ldr	r2, [sp, #4]
 8020ed4:	4629      	mov	r1, r5
 8020ed6:	f004 fda4 	bl	8025a22 <memcpy>
 8020eda:	2300      	movs	r3, #0
 8020edc:	55a3      	strb	r3, [r4, r6]
 8020ede:	4620      	mov	r0, r4
 8020ee0:	b002      	add	sp, #8
 8020ee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020ee6:	b004      	add	sp, #16
 8020ee8:	4770      	bx	lr
 8020eea:	4604      	mov	r4, r0
 8020eec:	e7f7      	b.n	8020ede <rcutils_strdup+0x32>
 8020eee:	bf00      	nop

08020ef0 <rcutils_strndup>:
 8020ef0:	b082      	sub	sp, #8
 8020ef2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020ef4:	ac06      	add	r4, sp, #24
 8020ef6:	4605      	mov	r5, r0
 8020ef8:	e884 000c 	stmia.w	r4, {r2, r3}
 8020efc:	b188      	cbz	r0, 8020f22 <rcutils_strndup+0x32>
 8020efe:	1c4f      	adds	r7, r1, #1
 8020f00:	460e      	mov	r6, r1
 8020f02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020f04:	4638      	mov	r0, r7
 8020f06:	4790      	blx	r2
 8020f08:	4604      	mov	r4, r0
 8020f0a:	b128      	cbz	r0, 8020f18 <rcutils_strndup+0x28>
 8020f0c:	463a      	mov	r2, r7
 8020f0e:	4629      	mov	r1, r5
 8020f10:	f004 fd87 	bl	8025a22 <memcpy>
 8020f14:	2300      	movs	r3, #0
 8020f16:	55a3      	strb	r3, [r4, r6]
 8020f18:	4620      	mov	r0, r4
 8020f1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8020f1e:	b002      	add	sp, #8
 8020f20:	4770      	bx	lr
 8020f22:	4604      	mov	r4, r0
 8020f24:	e7f8      	b.n	8020f18 <rcutils_strndup+0x28>
 8020f26:	bf00      	nop

08020f28 <rcutils_get_zero_initialized_string_map>:
 8020f28:	2000      	movs	r0, #0
 8020f2a:	4b01      	ldr	r3, [pc, #4]	@ (8020f30 <rcutils_get_zero_initialized_string_map+0x8>)
 8020f2c:	6018      	str	r0, [r3, #0]
 8020f2e:	4770      	bx	lr
 8020f30:	20014a60 	.word	0x20014a60

08020f34 <rcutils_string_map_reserve>:
 8020f34:	2800      	cmp	r0, #0
 8020f36:	d05e      	beq.n	8020ff6 <rcutils_string_map_reserve+0xc2>
 8020f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020f3c:	460c      	mov	r4, r1
 8020f3e:	6801      	ldr	r1, [r0, #0]
 8020f40:	b082      	sub	sp, #8
 8020f42:	4605      	mov	r5, r0
 8020f44:	b129      	cbz	r1, 8020f52 <rcutils_string_map_reserve+0x1e>
 8020f46:	68cb      	ldr	r3, [r1, #12]
 8020f48:	42a3      	cmp	r3, r4
 8020f4a:	d906      	bls.n	8020f5a <rcutils_string_map_reserve+0x26>
 8020f4c:	461c      	mov	r4, r3
 8020f4e:	2900      	cmp	r1, #0
 8020f50:	d1f9      	bne.n	8020f46 <rcutils_string_map_reserve+0x12>
 8020f52:	201f      	movs	r0, #31
 8020f54:	b002      	add	sp, #8
 8020f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020f5a:	688b      	ldr	r3, [r1, #8]
 8020f5c:	42a3      	cmp	r3, r4
 8020f5e:	d046      	beq.n	8020fee <rcutils_string_map_reserve+0xba>
 8020f60:	6a0e      	ldr	r6, [r1, #32]
 8020f62:	2c00      	cmp	r4, #0
 8020f64:	d033      	beq.n	8020fce <rcutils_string_map_reserve+0x9a>
 8020f66:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8020f6a:	d242      	bcs.n	8020ff2 <rcutils_string_map_reserve+0xbe>
 8020f6c:	00a7      	lsls	r7, r4, #2
 8020f6e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8020f72:	6808      	ldr	r0, [r1, #0]
 8020f74:	4632      	mov	r2, r6
 8020f76:	4639      	mov	r1, r7
 8020f78:	47c0      	blx	r8
 8020f7a:	2800      	cmp	r0, #0
 8020f7c:	d039      	beq.n	8020ff2 <rcutils_string_map_reserve+0xbe>
 8020f7e:	682b      	ldr	r3, [r5, #0]
 8020f80:	4632      	mov	r2, r6
 8020f82:	4639      	mov	r1, r7
 8020f84:	6018      	str	r0, [r3, #0]
 8020f86:	6858      	ldr	r0, [r3, #4]
 8020f88:	47c0      	blx	r8
 8020f8a:	2800      	cmp	r0, #0
 8020f8c:	d031      	beq.n	8020ff2 <rcutils_string_map_reserve+0xbe>
 8020f8e:	682d      	ldr	r5, [r5, #0]
 8020f90:	68ab      	ldr	r3, [r5, #8]
 8020f92:	6068      	str	r0, [r5, #4]
 8020f94:	42a3      	cmp	r3, r4
 8020f96:	d225      	bcs.n	8020fe4 <rcutils_string_map_reserve+0xb0>
 8020f98:	682a      	ldr	r2, [r5, #0]
 8020f9a:	eb00 0c07 	add.w	ip, r0, r7
 8020f9e:	0099      	lsls	r1, r3, #2
 8020fa0:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8020fa4:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8020fa8:	45e6      	cmp	lr, ip
 8020faa:	d203      	bcs.n	8020fb4 <rcutils_string_map_reserve+0x80>
 8020fac:	eb02 0c07 	add.w	ip, r2, r7
 8020fb0:	4566      	cmp	r6, ip
 8020fb2:	d322      	bcc.n	8020ffa <rcutils_string_map_reserve+0xc6>
 8020fb4:	1ae3      	subs	r3, r4, r3
 8020fb6:	4670      	mov	r0, lr
 8020fb8:	2100      	movs	r1, #0
 8020fba:	009a      	lsls	r2, r3, #2
 8020fbc:	9201      	str	r2, [sp, #4]
 8020fbe:	f004 fc09 	bl	80257d4 <memset>
 8020fc2:	9a01      	ldr	r2, [sp, #4]
 8020fc4:	2100      	movs	r1, #0
 8020fc6:	4630      	mov	r0, r6
 8020fc8:	f004 fc04 	bl	80257d4 <memset>
 8020fcc:	e00a      	b.n	8020fe4 <rcutils_string_map_reserve+0xb0>
 8020fce:	694f      	ldr	r7, [r1, #20]
 8020fd0:	6808      	ldr	r0, [r1, #0]
 8020fd2:	4631      	mov	r1, r6
 8020fd4:	47b8      	blx	r7
 8020fd6:	682b      	ldr	r3, [r5, #0]
 8020fd8:	4631      	mov	r1, r6
 8020fda:	6858      	ldr	r0, [r3, #4]
 8020fdc:	601c      	str	r4, [r3, #0]
 8020fde:	47b8      	blx	r7
 8020fe0:	682d      	ldr	r5, [r5, #0]
 8020fe2:	606c      	str	r4, [r5, #4]
 8020fe4:	2000      	movs	r0, #0
 8020fe6:	60ac      	str	r4, [r5, #8]
 8020fe8:	b002      	add	sp, #8
 8020fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020fee:	2000      	movs	r0, #0
 8020ff0:	e7b0      	b.n	8020f54 <rcutils_string_map_reserve+0x20>
 8020ff2:	200a      	movs	r0, #10
 8020ff4:	e7ae      	b.n	8020f54 <rcutils_string_map_reserve+0x20>
 8020ff6:	200b      	movs	r0, #11
 8020ff8:	4770      	bx	lr
 8020ffa:	1f0b      	subs	r3, r1, #4
 8020ffc:	4418      	add	r0, r3
 8020ffe:	4413      	add	r3, r2
 8021000:	3a04      	subs	r2, #4
 8021002:	4417      	add	r7, r2
 8021004:	2200      	movs	r2, #0
 8021006:	f843 2f04 	str.w	r2, [r3, #4]!
 802100a:	42bb      	cmp	r3, r7
 802100c:	f840 2f04 	str.w	r2, [r0, #4]!
 8021010:	d1f9      	bne.n	8021006 <rcutils_string_map_reserve+0xd2>
 8021012:	e7e7      	b.n	8020fe4 <rcutils_string_map_reserve+0xb0>

08021014 <rcutils_string_map_init>:
 8021014:	b082      	sub	sp, #8
 8021016:	b570      	push	{r4, r5, r6, lr}
 8021018:	ac04      	add	r4, sp, #16
 802101a:	e884 000c 	stmia.w	r4, {r2, r3}
 802101e:	b380      	cbz	r0, 8021082 <rcutils_string_map_init+0x6e>
 8021020:	6806      	ldr	r6, [r0, #0]
 8021022:	4604      	mov	r4, r0
 8021024:	b12e      	cbz	r6, 8021032 <rcutils_string_map_init+0x1e>
 8021026:	251e      	movs	r5, #30
 8021028:	4628      	mov	r0, r5
 802102a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802102e:	b002      	add	sp, #8
 8021030:	4770      	bx	lr
 8021032:	a804      	add	r0, sp, #16
 8021034:	460d      	mov	r5, r1
 8021036:	f7f8 fadd 	bl	80195f4 <rcutils_allocator_is_valid>
 802103a:	b310      	cbz	r0, 8021082 <rcutils_string_map_init+0x6e>
 802103c:	9b04      	ldr	r3, [sp, #16]
 802103e:	2024      	movs	r0, #36	@ 0x24
 8021040:	9908      	ldr	r1, [sp, #32]
 8021042:	4798      	blx	r3
 8021044:	6020      	str	r0, [r4, #0]
 8021046:	b310      	cbz	r0, 802108e <rcutils_string_map_init+0x7a>
 8021048:	f10d 0e10 	add.w	lr, sp, #16
 802104c:	f100 0c10 	add.w	ip, r0, #16
 8021050:	e9c0 6600 	strd	r6, r6, [r0]
 8021054:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8021058:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 802105c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021060:	f8de 3000 	ldr.w	r3, [lr]
 8021064:	4629      	mov	r1, r5
 8021066:	4620      	mov	r0, r4
 8021068:	f8cc 3000 	str.w	r3, [ip]
 802106c:	f7ff ff62 	bl	8020f34 <rcutils_string_map_reserve>
 8021070:	4605      	mov	r5, r0
 8021072:	2800      	cmp	r0, #0
 8021074:	d0d8      	beq.n	8021028 <rcutils_string_map_init+0x14>
 8021076:	9b05      	ldr	r3, [sp, #20]
 8021078:	9908      	ldr	r1, [sp, #32]
 802107a:	6820      	ldr	r0, [r4, #0]
 802107c:	4798      	blx	r3
 802107e:	6026      	str	r6, [r4, #0]
 8021080:	e7d2      	b.n	8021028 <rcutils_string_map_init+0x14>
 8021082:	250b      	movs	r5, #11
 8021084:	4628      	mov	r0, r5
 8021086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802108a:	b002      	add	sp, #8
 802108c:	4770      	bx	lr
 802108e:	250a      	movs	r5, #10
 8021090:	e7ca      	b.n	8021028 <rcutils_string_map_init+0x14>
 8021092:	bf00      	nop

08021094 <rcutils_string_map_fini>:
 8021094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021098:	b082      	sub	sp, #8
 802109a:	2800      	cmp	r0, #0
 802109c:	d03a      	beq.n	8021114 <rcutils_string_map_fini+0x80>
 802109e:	6804      	ldr	r4, [r0, #0]
 80210a0:	4606      	mov	r6, r0
 80210a2:	2c00      	cmp	r4, #0
 80210a4:	d032      	beq.n	802110c <rcutils_string_map_fini+0x78>
 80210a6:	68a3      	ldr	r3, [r4, #8]
 80210a8:	b32b      	cbz	r3, 80210f6 <rcutils_string_map_fini+0x62>
 80210aa:	2500      	movs	r5, #0
 80210ac:	6822      	ldr	r2, [r4, #0]
 80210ae:	462f      	mov	r7, r5
 80210b0:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80210b4:	b1e0      	cbz	r0, 80210f0 <rcutils_string_map_fini+0x5c>
 80210b6:	6a21      	ldr	r1, [r4, #32]
 80210b8:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80210bc:	9101      	str	r1, [sp, #4]
 80210be:	47c0      	blx	r8
 80210c0:	9901      	ldr	r1, [sp, #4]
 80210c2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80210c6:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 80210ca:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80210ce:	47c0      	blx	r8
 80210d0:	68e3      	ldr	r3, [r4, #12]
 80210d2:	6862      	ldr	r2, [r4, #4]
 80210d4:	3b01      	subs	r3, #1
 80210d6:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80210da:	3501      	adds	r5, #1
 80210dc:	60e3      	str	r3, [r4, #12]
 80210de:	6834      	ldr	r4, [r6, #0]
 80210e0:	68a3      	ldr	r3, [r4, #8]
 80210e2:	429d      	cmp	r5, r3
 80210e4:	d207      	bcs.n	80210f6 <rcutils_string_map_fini+0x62>
 80210e6:	6822      	ldr	r2, [r4, #0]
 80210e8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80210ec:	2800      	cmp	r0, #0
 80210ee:	d1e2      	bne.n	80210b6 <rcutils_string_map_fini+0x22>
 80210f0:	3501      	adds	r5, #1
 80210f2:	429d      	cmp	r5, r3
 80210f4:	d3dc      	bcc.n	80210b0 <rcutils_string_map_fini+0x1c>
 80210f6:	2100      	movs	r1, #0
 80210f8:	4630      	mov	r0, r6
 80210fa:	f7ff ff1b 	bl	8020f34 <rcutils_string_map_reserve>
 80210fe:	4604      	mov	r4, r0
 8021100:	b920      	cbnz	r0, 802110c <rcutils_string_map_fini+0x78>
 8021102:	6830      	ldr	r0, [r6, #0]
 8021104:	6943      	ldr	r3, [r0, #20]
 8021106:	6a01      	ldr	r1, [r0, #32]
 8021108:	4798      	blx	r3
 802110a:	6034      	str	r4, [r6, #0]
 802110c:	4620      	mov	r0, r4
 802110e:	b002      	add	sp, #8
 8021110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021114:	240b      	movs	r4, #11
 8021116:	4620      	mov	r0, r4
 8021118:	b002      	add	sp, #8
 802111a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802111e:	bf00      	nop

08021120 <rcutils_string_map_getn>:
 8021120:	b378      	cbz	r0, 8021182 <rcutils_string_map_getn+0x62>
 8021122:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021126:	f8d0 b000 	ldr.w	fp, [r0]
 802112a:	f1bb 0f00 	cmp.w	fp, #0
 802112e:	d01f      	beq.n	8021170 <rcutils_string_map_getn+0x50>
 8021130:	fab1 f481 	clz	r4, r1
 8021134:	4688      	mov	r8, r1
 8021136:	0964      	lsrs	r4, r4, #5
 8021138:	b1d1      	cbz	r1, 8021170 <rcutils_string_map_getn+0x50>
 802113a:	f8db 7008 	ldr.w	r7, [fp, #8]
 802113e:	f8db 6000 	ldr.w	r6, [fp]
 8021142:	b1af      	cbz	r7, 8021170 <rcutils_string_map_getn+0x50>
 8021144:	4691      	mov	r9, r2
 8021146:	3e04      	subs	r6, #4
 8021148:	f856 5f04 	ldr.w	r5, [r6, #4]!
 802114c:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8021150:	3401      	adds	r4, #1
 8021152:	4628      	mov	r0, r5
 8021154:	b155      	cbz	r5, 802116c <rcutils_string_map_getn+0x4c>
 8021156:	f7df f87d 	bl	8000254 <strlen>
 802115a:	4602      	mov	r2, r0
 802115c:	4629      	mov	r1, r5
 802115e:	4640      	mov	r0, r8
 8021160:	454a      	cmp	r2, r9
 8021162:	bf38      	it	cc
 8021164:	464a      	movcc	r2, r9
 8021166:	f004 fb4a 	bl	80257fe <strncmp>
 802116a:	b120      	cbz	r0, 8021176 <rcutils_string_map_getn+0x56>
 802116c:	42a7      	cmp	r7, r4
 802116e:	d1eb      	bne.n	8021148 <rcutils_string_map_getn+0x28>
 8021170:	2000      	movs	r0, #0
 8021172:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021176:	f8db 3004 	ldr.w	r3, [fp, #4]
 802117a:	f853 000a 	ldr.w	r0, [r3, sl]
 802117e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021182:	4770      	bx	lr
 8021184:	0000      	movs	r0, r0
	...

08021188 <rmw_get_zero_initialized_context>:
 8021188:	b510      	push	{r4, lr}
 802118a:	4604      	mov	r4, r0
 802118c:	3010      	adds	r0, #16
 802118e:	f000 f80f 	bl	80211b0 <rmw_get_zero_initialized_init_options>
 8021192:	2300      	movs	r3, #0
 8021194:	4620      	mov	r0, r4
 8021196:	60a3      	str	r3, [r4, #8]
 8021198:	64a3      	str	r3, [r4, #72]	@ 0x48
 802119a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 802119c:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 80211a8 <rmw_get_zero_initialized_context+0x20>
 80211a0:	ed84 7b00 	vstr	d7, [r4]
 80211a4:	bd10      	pop	{r4, pc}
 80211a6:	bf00      	nop
	...

080211b0 <rmw_get_zero_initialized_init_options>:
 80211b0:	b510      	push	{r4, lr}
 80211b2:	4604      	mov	r4, r0
 80211b4:	2238      	movs	r2, #56	@ 0x38
 80211b6:	2100      	movs	r1, #0
 80211b8:	f004 fb0c 	bl	80257d4 <memset>
 80211bc:	f104 0010 	add.w	r0, r4, #16
 80211c0:	f000 f806 	bl	80211d0 <rmw_get_default_security_options>
 80211c4:	f04f 33ff 	mov.w	r3, #4294967295
 80211c8:	4620      	mov	r0, r4
 80211ca:	60e3      	str	r3, [r4, #12]
 80211cc:	bd10      	pop	{r4, pc}
 80211ce:	bf00      	nop

080211d0 <rmw_get_default_security_options>:
 80211d0:	2200      	movs	r2, #0
 80211d2:	7002      	strb	r2, [r0, #0]
 80211d4:	6042      	str	r2, [r0, #4]
 80211d6:	4770      	bx	lr

080211d8 <rmw_subscription_content_filter_options_fini>:
 80211d8:	b1b0      	cbz	r0, 8021208 <rmw_subscription_content_filter_options_fini+0x30>
 80211da:	b538      	push	{r3, r4, r5, lr}
 80211dc:	4604      	mov	r4, r0
 80211de:	4608      	mov	r0, r1
 80211e0:	460d      	mov	r5, r1
 80211e2:	f7f8 fa07 	bl	80195f4 <rcutils_allocator_is_valid>
 80211e6:	b168      	cbz	r0, 8021204 <rmw_subscription_content_filter_options_fini+0x2c>
 80211e8:	6820      	ldr	r0, [r4, #0]
 80211ea:	b120      	cbz	r0, 80211f6 <rmw_subscription_content_filter_options_fini+0x1e>
 80211ec:	686b      	ldr	r3, [r5, #4]
 80211ee:	6929      	ldr	r1, [r5, #16]
 80211f0:	4798      	blx	r3
 80211f2:	2300      	movs	r3, #0
 80211f4:	6023      	str	r3, [r4, #0]
 80211f6:	1d20      	adds	r0, r4, #4
 80211f8:	f003 fbda 	bl	80249b0 <rcutils_string_array_fini>
 80211fc:	3800      	subs	r0, #0
 80211fe:	bf18      	it	ne
 8021200:	2001      	movne	r0, #1
 8021202:	bd38      	pop	{r3, r4, r5, pc}
 8021204:	200b      	movs	r0, #11
 8021206:	bd38      	pop	{r3, r4, r5, pc}
 8021208:	200b      	movs	r0, #11
 802120a:	4770      	bx	lr

0802120c <rmw_get_default_subscription_options>:
 802120c:	2200      	movs	r2, #0
 802120e:	e9c0 2200 	strd	r2, r2, [r0]
 8021212:	6082      	str	r2, [r0, #8]
 8021214:	4770      	bx	lr
 8021216:	bf00      	nop

08021218 <rmw_time_equal>:
 8021218:	b4f0      	push	{r4, r5, r6, r7}
 802121a:	b084      	sub	sp, #16
 802121c:	ac04      	add	r4, sp, #16
 802121e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8021222:	4603      	mov	r3, r0
 8021224:	4925      	ldr	r1, [pc, #148]	@ (80212bc <rmw_time_equal+0xa4>)
 8021226:	9d01      	ldr	r5, [sp, #4]
 8021228:	4610      	mov	r0, r2
 802122a:	4299      	cmp	r1, r3
 802122c:	f04f 0202 	mov.w	r2, #2
 8021230:	9e03      	ldr	r6, [sp, #12]
 8021232:	41aa      	sbcs	r2, r5
 8021234:	d330      	bcc.n	8021298 <rmw_time_equal+0x80>
 8021236:	4c22      	ldr	r4, [pc, #136]	@ (80212c0 <rmw_time_equal+0xa8>)
 8021238:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 802123c:	fba3 3204 	umull	r3, r2, r3, r4
 8021240:	fb04 2205 	mla	r2, r4, r5, r2
 8021244:	43dd      	mvns	r5, r3
 8021246:	1a8c      	subs	r4, r1, r2
 8021248:	4285      	cmp	r5, r0
 802124a:	41b4      	sbcs	r4, r6
 802124c:	d332      	bcc.n	80212b4 <rmw_time_equal+0x9c>
 802124e:	eb10 0c03 	adds.w	ip, r0, r3
 8021252:	eb42 0106 	adc.w	r1, r2, r6
 8021256:	4819      	ldr	r0, [pc, #100]	@ (80212bc <rmw_time_equal+0xa4>)
 8021258:	2202      	movs	r2, #2
 802125a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802125c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802125e:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8021262:	4298      	cmp	r0, r3
 8021264:	41b2      	sbcs	r2, r6
 8021266:	d31c      	bcc.n	80212a2 <rmw_time_equal+0x8a>
 8021268:	4c15      	ldr	r4, [pc, #84]	@ (80212c0 <rmw_time_equal+0xa8>)
 802126a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 802126e:	fba3 3204 	umull	r3, r2, r3, r4
 8021272:	fb04 2206 	mla	r2, r4, r6, r2
 8021276:	43de      	mvns	r6, r3
 8021278:	1a84      	subs	r4, r0, r2
 802127a:	42ae      	cmp	r6, r5
 802127c:	41bc      	sbcs	r4, r7
 802127e:	d315      	bcc.n	80212ac <rmw_time_equal+0x94>
 8021280:	195b      	adds	r3, r3, r5
 8021282:	eb42 0207 	adc.w	r2, r2, r7
 8021286:	428a      	cmp	r2, r1
 8021288:	bf08      	it	eq
 802128a:	4563      	cmpeq	r3, ip
 802128c:	bf0c      	ite	eq
 802128e:	2001      	moveq	r0, #1
 8021290:	2000      	movne	r0, #0
 8021292:	b004      	add	sp, #16
 8021294:	bcf0      	pop	{r4, r5, r6, r7}
 8021296:	4770      	bx	lr
 8021298:	f04f 3cff 	mov.w	ip, #4294967295
 802129c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80212a0:	e7d9      	b.n	8021256 <rmw_time_equal+0x3e>
 80212a2:	f04f 33ff 	mov.w	r3, #4294967295
 80212a6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80212aa:	e7ec      	b.n	8021286 <rmw_time_equal+0x6e>
 80212ac:	f04f 33ff 	mov.w	r3, #4294967295
 80212b0:	4602      	mov	r2, r0
 80212b2:	e7e8      	b.n	8021286 <rmw_time_equal+0x6e>
 80212b4:	f04f 3cff 	mov.w	ip, #4294967295
 80212b8:	e7cd      	b.n	8021256 <rmw_time_equal+0x3e>
 80212ba:	bf00      	nop
 80212bc:	25c17d04 	.word	0x25c17d04
 80212c0:	3b9aca00 	.word	0x3b9aca00

080212c4 <rmw_time_total_nsec>:
 80212c4:	b470      	push	{r4, r5, r6}
 80212c6:	b085      	sub	sp, #20
 80212c8:	ac04      	add	r4, sp, #16
 80212ca:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80212ce:	4603      	mov	r3, r0
 80212d0:	4913      	ldr	r1, [pc, #76]	@ (8021320 <rmw_time_total_nsec+0x5c>)
 80212d2:	9d01      	ldr	r5, [sp, #4]
 80212d4:	4610      	mov	r0, r2
 80212d6:	4299      	cmp	r1, r3
 80212d8:	f04f 0202 	mov.w	r2, #2
 80212dc:	9e03      	ldr	r6, [sp, #12]
 80212de:	41aa      	sbcs	r2, r5
 80212e0:	d311      	bcc.n	8021306 <rmw_time_total_nsec+0x42>
 80212e2:	4c10      	ldr	r4, [pc, #64]	@ (8021324 <rmw_time_total_nsec+0x60>)
 80212e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80212e8:	fba3 3204 	umull	r3, r2, r3, r4
 80212ec:	fb04 2205 	mla	r2, r4, r5, r2
 80212f0:	43dd      	mvns	r5, r3
 80212f2:	1a8c      	subs	r4, r1, r2
 80212f4:	4285      	cmp	r5, r0
 80212f6:	41b4      	sbcs	r4, r6
 80212f8:	d30c      	bcc.n	8021314 <rmw_time_total_nsec+0x50>
 80212fa:	1818      	adds	r0, r3, r0
 80212fc:	eb42 0106 	adc.w	r1, r2, r6
 8021300:	b005      	add	sp, #20
 8021302:	bc70      	pop	{r4, r5, r6}
 8021304:	4770      	bx	lr
 8021306:	f04f 30ff 	mov.w	r0, #4294967295
 802130a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 802130e:	b005      	add	sp, #20
 8021310:	bc70      	pop	{r4, r5, r6}
 8021312:	4770      	bx	lr
 8021314:	f04f 30ff 	mov.w	r0, #4294967295
 8021318:	b005      	add	sp, #20
 802131a:	bc70      	pop	{r4, r5, r6}
 802131c:	4770      	bx	lr
 802131e:	bf00      	nop
 8021320:	25c17d04 	.word	0x25c17d04
 8021324:	3b9aca00 	.word	0x3b9aca00

08021328 <rmw_get_zero_initialized_message_info>:
 8021328:	b510      	push	{r4, lr}
 802132a:	4604      	mov	r4, r0
 802132c:	2240      	movs	r2, #64	@ 0x40
 802132e:	2100      	movs	r1, #0
 8021330:	f004 fa50 	bl	80257d4 <memset>
 8021334:	4620      	mov	r0, r4
 8021336:	bd10      	pop	{r4, pc}

08021338 <rmw_validate_full_topic_name>:
 8021338:	2800      	cmp	r0, #0
 802133a:	d05d      	beq.n	80213f8 <rmw_validate_full_topic_name+0xc0>
 802133c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021340:	460d      	mov	r5, r1
 8021342:	2900      	cmp	r1, #0
 8021344:	d05a      	beq.n	80213fc <rmw_validate_full_topic_name+0xc4>
 8021346:	4604      	mov	r4, r0
 8021348:	4616      	mov	r6, r2
 802134a:	f7de ff83 	bl	8000254 <strlen>
 802134e:	b150      	cbz	r0, 8021366 <rmw_validate_full_topic_name+0x2e>
 8021350:	7823      	ldrb	r3, [r4, #0]
 8021352:	2b2f      	cmp	r3, #47	@ 0x2f
 8021354:	d00e      	beq.n	8021374 <rmw_validate_full_topic_name+0x3c>
 8021356:	2302      	movs	r3, #2
 8021358:	602b      	str	r3, [r5, #0]
 802135a:	b146      	cbz	r6, 802136e <rmw_validate_full_topic_name+0x36>
 802135c:	2300      	movs	r3, #0
 802135e:	4618      	mov	r0, r3
 8021360:	6033      	str	r3, [r6, #0]
 8021362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021366:	2301      	movs	r3, #1
 8021368:	602b      	str	r3, [r5, #0]
 802136a:	2e00      	cmp	r6, #0
 802136c:	d1f6      	bne.n	802135c <rmw_validate_full_topic_name+0x24>
 802136e:	2000      	movs	r0, #0
 8021370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021374:	1e43      	subs	r3, r0, #1
 8021376:	5ce2      	ldrb	r2, [r4, r3]
 8021378:	2a2f      	cmp	r2, #47	@ 0x2f
 802137a:	d041      	beq.n	8021400 <rmw_validate_full_topic_name+0xc8>
 802137c:	1e62      	subs	r2, r4, #1
 802137e:	f1c4 0e01 	rsb	lr, r4, #1
 8021382:	eb02 0800 	add.w	r8, r2, r0
 8021386:	eb0e 0702 	add.w	r7, lr, r2
 802138a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 802138e:	f023 0120 	bic.w	r1, r3, #32
 8021392:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 8021396:	3941      	subs	r1, #65	@ 0x41
 8021398:	2919      	cmp	r1, #25
 802139a:	d90f      	bls.n	80213bc <rmw_validate_full_topic_name+0x84>
 802139c:	f1bc 0f0a 	cmp.w	ip, #10
 80213a0:	d90c      	bls.n	80213bc <rmw_validate_full_topic_name+0x84>
 80213a2:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 80213a6:	fab3 f383 	clz	r3, r3
 80213aa:	095b      	lsrs	r3, r3, #5
 80213ac:	b933      	cbnz	r3, 80213bc <rmw_validate_full_topic_name+0x84>
 80213ae:	2204      	movs	r2, #4
 80213b0:	602a      	str	r2, [r5, #0]
 80213b2:	2e00      	cmp	r6, #0
 80213b4:	d0db      	beq.n	802136e <rmw_validate_full_topic_name+0x36>
 80213b6:	4618      	mov	r0, r3
 80213b8:	6037      	str	r7, [r6, #0]
 80213ba:	e7d2      	b.n	8021362 <rmw_validate_full_topic_name+0x2a>
 80213bc:	4542      	cmp	r2, r8
 80213be:	d1e2      	bne.n	8021386 <rmw_validate_full_topic_name+0x4e>
 80213c0:	2301      	movs	r3, #1
 80213c2:	4f1a      	ldr	r7, [pc, #104]	@ (802142c <rmw_validate_full_topic_name+0xf4>)
 80213c4:	e004      	b.n	80213d0 <rmw_validate_full_topic_name+0x98>
 80213c6:	4298      	cmp	r0, r3
 80213c8:	f104 0401 	add.w	r4, r4, #1
 80213cc:	4613      	mov	r3, r2
 80213ce:	d91c      	bls.n	802140a <rmw_validate_full_topic_name+0xd2>
 80213d0:	4298      	cmp	r0, r3
 80213d2:	f103 0201 	add.w	r2, r3, #1
 80213d6:	d0f6      	beq.n	80213c6 <rmw_validate_full_topic_name+0x8e>
 80213d8:	7821      	ldrb	r1, [r4, #0]
 80213da:	292f      	cmp	r1, #47	@ 0x2f
 80213dc:	d1f3      	bne.n	80213c6 <rmw_validate_full_topic_name+0x8e>
 80213de:	7861      	ldrb	r1, [r4, #1]
 80213e0:	292f      	cmp	r1, #47	@ 0x2f
 80213e2:	d01e      	beq.n	8021422 <rmw_validate_full_topic_name+0xea>
 80213e4:	5dc9      	ldrb	r1, [r1, r7]
 80213e6:	0749      	lsls	r1, r1, #29
 80213e8:	d5ed      	bpl.n	80213c6 <rmw_validate_full_topic_name+0x8e>
 80213ea:	2206      	movs	r2, #6
 80213ec:	602a      	str	r2, [r5, #0]
 80213ee:	2e00      	cmp	r6, #0
 80213f0:	d0bd      	beq.n	802136e <rmw_validate_full_topic_name+0x36>
 80213f2:	2000      	movs	r0, #0
 80213f4:	6033      	str	r3, [r6, #0]
 80213f6:	e7b4      	b.n	8021362 <rmw_validate_full_topic_name+0x2a>
 80213f8:	200b      	movs	r0, #11
 80213fa:	4770      	bx	lr
 80213fc:	200b      	movs	r0, #11
 80213fe:	e7b0      	b.n	8021362 <rmw_validate_full_topic_name+0x2a>
 8021400:	2203      	movs	r2, #3
 8021402:	602a      	str	r2, [r5, #0]
 8021404:	2e00      	cmp	r6, #0
 8021406:	d1f4      	bne.n	80213f2 <rmw_validate_full_topic_name+0xba>
 8021408:	e7b1      	b.n	802136e <rmw_validate_full_topic_name+0x36>
 802140a:	28f7      	cmp	r0, #247	@ 0xf7
 802140c:	d803      	bhi.n	8021416 <rmw_validate_full_topic_name+0xde>
 802140e:	2300      	movs	r3, #0
 8021410:	4618      	mov	r0, r3
 8021412:	602b      	str	r3, [r5, #0]
 8021414:	e7a5      	b.n	8021362 <rmw_validate_full_topic_name+0x2a>
 8021416:	2307      	movs	r3, #7
 8021418:	602b      	str	r3, [r5, #0]
 802141a:	2e00      	cmp	r6, #0
 802141c:	d0a7      	beq.n	802136e <rmw_validate_full_topic_name+0x36>
 802141e:	23f6      	movs	r3, #246	@ 0xf6
 8021420:	e7e7      	b.n	80213f2 <rmw_validate_full_topic_name+0xba>
 8021422:	2205      	movs	r2, #5
 8021424:	602a      	str	r2, [r5, #0]
 8021426:	2e00      	cmp	r6, #0
 8021428:	d1e3      	bne.n	80213f2 <rmw_validate_full_topic_name+0xba>
 802142a:	e7a0      	b.n	802136e <rmw_validate_full_topic_name+0x36>
 802142c:	0802b023 	.word	0x0802b023

08021430 <rmw_validate_namespace_with_size>:
 8021430:	2800      	cmp	r0, #0
 8021432:	d043      	beq.n	80214bc <rmw_validate_namespace_with_size+0x8c>
 8021434:	b570      	push	{r4, r5, r6, lr}
 8021436:	4614      	mov	r4, r2
 8021438:	b0c2      	sub	sp, #264	@ 0x108
 802143a:	b32a      	cbz	r2, 8021488 <rmw_validate_namespace_with_size+0x58>
 802143c:	2901      	cmp	r1, #1
 802143e:	460d      	mov	r5, r1
 8021440:	461e      	mov	r6, r3
 8021442:	d102      	bne.n	802144a <rmw_validate_namespace_with_size+0x1a>
 8021444:	7803      	ldrb	r3, [r0, #0]
 8021446:	2b2f      	cmp	r3, #47	@ 0x2f
 8021448:	d012      	beq.n	8021470 <rmw_validate_namespace_with_size+0x40>
 802144a:	aa01      	add	r2, sp, #4
 802144c:	4669      	mov	r1, sp
 802144e:	f7ff ff73 	bl	8021338 <rmw_validate_full_topic_name>
 8021452:	b980      	cbnz	r0, 8021476 <rmw_validate_namespace_with_size+0x46>
 8021454:	9a00      	ldr	r2, [sp, #0]
 8021456:	b14a      	cbz	r2, 802146c <rmw_validate_namespace_with_size+0x3c>
 8021458:	2a07      	cmp	r2, #7
 802145a:	d007      	beq.n	802146c <rmw_validate_namespace_with_size+0x3c>
 802145c:	1e53      	subs	r3, r2, #1
 802145e:	2b05      	cmp	r3, #5
 8021460:	d82e      	bhi.n	80214c0 <rmw_validate_namespace_with_size+0x90>
 8021462:	e8df f003 	tbb	[pc, r3]
 8021466:	1f1c      	.short	0x1f1c
 8021468:	14282522 	.word	0x14282522
 802146c:	2df5      	cmp	r5, #245	@ 0xf5
 802146e:	d804      	bhi.n	802147a <rmw_validate_namespace_with_size+0x4a>
 8021470:	2300      	movs	r3, #0
 8021472:	4618      	mov	r0, r3
 8021474:	6023      	str	r3, [r4, #0]
 8021476:	b042      	add	sp, #264	@ 0x108
 8021478:	bd70      	pop	{r4, r5, r6, pc}
 802147a:	2307      	movs	r3, #7
 802147c:	6023      	str	r3, [r4, #0]
 802147e:	2e00      	cmp	r6, #0
 8021480:	d0f9      	beq.n	8021476 <rmw_validate_namespace_with_size+0x46>
 8021482:	23f4      	movs	r3, #244	@ 0xf4
 8021484:	6033      	str	r3, [r6, #0]
 8021486:	e7f6      	b.n	8021476 <rmw_validate_namespace_with_size+0x46>
 8021488:	200b      	movs	r0, #11
 802148a:	b042      	add	sp, #264	@ 0x108
 802148c:	bd70      	pop	{r4, r5, r6, pc}
 802148e:	2306      	movs	r3, #6
 8021490:	6023      	str	r3, [r4, #0]
 8021492:	2e00      	cmp	r6, #0
 8021494:	d0ef      	beq.n	8021476 <rmw_validate_namespace_with_size+0x46>
 8021496:	9b01      	ldr	r3, [sp, #4]
 8021498:	6033      	str	r3, [r6, #0]
 802149a:	b042      	add	sp, #264	@ 0x108
 802149c:	bd70      	pop	{r4, r5, r6, pc}
 802149e:	2301      	movs	r3, #1
 80214a0:	6023      	str	r3, [r4, #0]
 80214a2:	e7f6      	b.n	8021492 <rmw_validate_namespace_with_size+0x62>
 80214a4:	2302      	movs	r3, #2
 80214a6:	6023      	str	r3, [r4, #0]
 80214a8:	e7f3      	b.n	8021492 <rmw_validate_namespace_with_size+0x62>
 80214aa:	2303      	movs	r3, #3
 80214ac:	6023      	str	r3, [r4, #0]
 80214ae:	e7f0      	b.n	8021492 <rmw_validate_namespace_with_size+0x62>
 80214b0:	2304      	movs	r3, #4
 80214b2:	6023      	str	r3, [r4, #0]
 80214b4:	e7ed      	b.n	8021492 <rmw_validate_namespace_with_size+0x62>
 80214b6:	2305      	movs	r3, #5
 80214b8:	6023      	str	r3, [r4, #0]
 80214ba:	e7ea      	b.n	8021492 <rmw_validate_namespace_with_size+0x62>
 80214bc:	200b      	movs	r0, #11
 80214be:	4770      	bx	lr
 80214c0:	4613      	mov	r3, r2
 80214c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80214c6:	4a03      	ldr	r2, [pc, #12]	@ (80214d4 <rmw_validate_namespace_with_size+0xa4>)
 80214c8:	a802      	add	r0, sp, #8
 80214ca:	f7ff fc99 	bl	8020e00 <rcutils_snprintf>
 80214ce:	2001      	movs	r0, #1
 80214d0:	e7d1      	b.n	8021476 <rmw_validate_namespace_with_size+0x46>
 80214d2:	bf00      	nop
 80214d4:	0802a6fc 	.word	0x0802a6fc

080214d8 <rmw_validate_namespace>:
 80214d8:	b168      	cbz	r0, 80214f6 <rmw_validate_namespace+0x1e>
 80214da:	b570      	push	{r4, r5, r6, lr}
 80214dc:	460d      	mov	r5, r1
 80214de:	4616      	mov	r6, r2
 80214e0:	4604      	mov	r4, r0
 80214e2:	f7de feb7 	bl	8000254 <strlen>
 80214e6:	4633      	mov	r3, r6
 80214e8:	4601      	mov	r1, r0
 80214ea:	462a      	mov	r2, r5
 80214ec:	4620      	mov	r0, r4
 80214ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80214f2:	f7ff bf9d 	b.w	8021430 <rmw_validate_namespace_with_size>
 80214f6:	200b      	movs	r0, #11
 80214f8:	4770      	bx	lr
 80214fa:	bf00      	nop

080214fc <rmw_namespace_validation_result_string>:
 80214fc:	2807      	cmp	r0, #7
 80214fe:	d803      	bhi.n	8021508 <rmw_namespace_validation_result_string+0xc>
 8021500:	4b02      	ldr	r3, [pc, #8]	@ (802150c <rmw_namespace_validation_result_string+0x10>)
 8021502:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8021506:	4770      	bx	lr
 8021508:	4801      	ldr	r0, [pc, #4]	@ (8021510 <rmw_namespace_validation_result_string+0x14>)
 802150a:	4770      	bx	lr
 802150c:	0802ad04 	.word	0x0802ad04
 8021510:	0802a74c 	.word	0x0802a74c

08021514 <rmw_validate_node_name>:
 8021514:	2800      	cmp	r0, #0
 8021516:	d042      	beq.n	802159e <rmw_validate_node_name+0x8a>
 8021518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802151c:	460d      	mov	r5, r1
 802151e:	2900      	cmp	r1, #0
 8021520:	d03f      	beq.n	80215a2 <rmw_validate_node_name+0x8e>
 8021522:	4604      	mov	r4, r0
 8021524:	4616      	mov	r6, r2
 8021526:	f7de fe95 	bl	8000254 <strlen>
 802152a:	b310      	cbz	r0, 8021572 <rmw_validate_node_name+0x5e>
 802152c:	1e63      	subs	r3, r4, #1
 802152e:	f1c4 0101 	rsb	r1, r4, #1
 8021532:	eb03 0800 	add.w	r8, r3, r0
 8021536:	18cf      	adds	r7, r1, r3
 8021538:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 802153c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8021540:	f02e 0c20 	bic.w	ip, lr, #32
 8021544:	2a09      	cmp	r2, #9
 8021546:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 802154a:	d905      	bls.n	8021558 <rmw_validate_node_name+0x44>
 802154c:	f1bc 0f19 	cmp.w	ip, #25
 8021550:	d902      	bls.n	8021558 <rmw_validate_node_name+0x44>
 8021552:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8021556:	d114      	bne.n	8021582 <rmw_validate_node_name+0x6e>
 8021558:	4598      	cmp	r8, r3
 802155a:	d1ec      	bne.n	8021536 <rmw_validate_node_name+0x22>
 802155c:	7822      	ldrb	r2, [r4, #0]
 802155e:	4b16      	ldr	r3, [pc, #88]	@ (80215b8 <rmw_validate_node_name+0xa4>)
 8021560:	5cd3      	ldrb	r3, [r2, r3]
 8021562:	f013 0304 	ands.w	r3, r3, #4
 8021566:	d113      	bne.n	8021590 <rmw_validate_node_name+0x7c>
 8021568:	28ff      	cmp	r0, #255	@ 0xff
 802156a:	d81c      	bhi.n	80215a6 <rmw_validate_node_name+0x92>
 802156c:	4618      	mov	r0, r3
 802156e:	602b      	str	r3, [r5, #0]
 8021570:	e00c      	b.n	802158c <rmw_validate_node_name+0x78>
 8021572:	2301      	movs	r3, #1
 8021574:	602b      	str	r3, [r5, #0]
 8021576:	b17e      	cbz	r6, 8021598 <rmw_validate_node_name+0x84>
 8021578:	2300      	movs	r3, #0
 802157a:	4618      	mov	r0, r3
 802157c:	6033      	str	r3, [r6, #0]
 802157e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021582:	2302      	movs	r3, #2
 8021584:	602b      	str	r3, [r5, #0]
 8021586:	b13e      	cbz	r6, 8021598 <rmw_validate_node_name+0x84>
 8021588:	2000      	movs	r0, #0
 802158a:	6037      	str	r7, [r6, #0]
 802158c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021590:	2303      	movs	r3, #3
 8021592:	602b      	str	r3, [r5, #0]
 8021594:	2e00      	cmp	r6, #0
 8021596:	d1ef      	bne.n	8021578 <rmw_validate_node_name+0x64>
 8021598:	2000      	movs	r0, #0
 802159a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802159e:	200b      	movs	r0, #11
 80215a0:	4770      	bx	lr
 80215a2:	200b      	movs	r0, #11
 80215a4:	e7f2      	b.n	802158c <rmw_validate_node_name+0x78>
 80215a6:	2204      	movs	r2, #4
 80215a8:	602a      	str	r2, [r5, #0]
 80215aa:	2e00      	cmp	r6, #0
 80215ac:	d0f4      	beq.n	8021598 <rmw_validate_node_name+0x84>
 80215ae:	22fe      	movs	r2, #254	@ 0xfe
 80215b0:	4618      	mov	r0, r3
 80215b2:	6032      	str	r2, [r6, #0]
 80215b4:	e7ea      	b.n	802158c <rmw_validate_node_name+0x78>
 80215b6:	bf00      	nop
 80215b8:	0802b023 	.word	0x0802b023

080215bc <rmw_node_name_validation_result_string>:
 80215bc:	2804      	cmp	r0, #4
 80215be:	d803      	bhi.n	80215c8 <rmw_node_name_validation_result_string+0xc>
 80215c0:	4b02      	ldr	r3, [pc, #8]	@ (80215cc <rmw_node_name_validation_result_string+0x10>)
 80215c2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80215c6:	4770      	bx	lr
 80215c8:	4801      	ldr	r0, [pc, #4]	@ (80215d0 <rmw_node_name_validation_result_string+0x14>)
 80215ca:	4770      	bx	lr
 80215cc:	0802ad24 	.word	0x0802ad24
 80215d0:	0802a8f4 	.word	0x0802a8f4

080215d4 <get_memory>:
 80215d4:	4603      	mov	r3, r0
 80215d6:	6840      	ldr	r0, [r0, #4]
 80215d8:	b158      	cbz	r0, 80215f2 <get_memory+0x1e>
 80215da:	6842      	ldr	r2, [r0, #4]
 80215dc:	605a      	str	r2, [r3, #4]
 80215de:	b10a      	cbz	r2, 80215e4 <get_memory+0x10>
 80215e0:	2100      	movs	r1, #0
 80215e2:	6011      	str	r1, [r2, #0]
 80215e4:	681a      	ldr	r2, [r3, #0]
 80215e6:	6042      	str	r2, [r0, #4]
 80215e8:	b102      	cbz	r2, 80215ec <get_memory+0x18>
 80215ea:	6010      	str	r0, [r2, #0]
 80215ec:	2200      	movs	r2, #0
 80215ee:	6002      	str	r2, [r0, #0]
 80215f0:	6018      	str	r0, [r3, #0]
 80215f2:	4770      	bx	lr

080215f4 <put_memory>:
 80215f4:	680b      	ldr	r3, [r1, #0]
 80215f6:	b10b      	cbz	r3, 80215fc <put_memory+0x8>
 80215f8:	684a      	ldr	r2, [r1, #4]
 80215fa:	605a      	str	r2, [r3, #4]
 80215fc:	684a      	ldr	r2, [r1, #4]
 80215fe:	b102      	cbz	r2, 8021602 <put_memory+0xe>
 8021600:	6013      	str	r3, [r2, #0]
 8021602:	6803      	ldr	r3, [r0, #0]
 8021604:	428b      	cmp	r3, r1
 8021606:	6843      	ldr	r3, [r0, #4]
 8021608:	bf08      	it	eq
 802160a:	6002      	streq	r2, [r0, #0]
 802160c:	604b      	str	r3, [r1, #4]
 802160e:	b103      	cbz	r3, 8021612 <put_memory+0x1e>
 8021610:	6019      	str	r1, [r3, #0]
 8021612:	2300      	movs	r3, #0
 8021614:	600b      	str	r3, [r1, #0]
 8021616:	6041      	str	r1, [r0, #4]
 8021618:	4770      	bx	lr
 802161a:	bf00      	nop

0802161c <rmw_destroy_client>:
 802161c:	b570      	push	{r4, r5, r6, lr}
 802161e:	b128      	cbz	r0, 802162c <rmw_destroy_client+0x10>
 8021620:	4604      	mov	r4, r0
 8021622:	6800      	ldr	r0, [r0, #0]
 8021624:	460d      	mov	r5, r1
 8021626:	f7f8 fd9b 	bl	801a160 <is_uxrce_rmw_identifier_valid>
 802162a:	b910      	cbnz	r0, 8021632 <rmw_destroy_client+0x16>
 802162c:	2401      	movs	r4, #1
 802162e:	4620      	mov	r0, r4
 8021630:	bd70      	pop	{r4, r5, r6, pc}
 8021632:	6863      	ldr	r3, [r4, #4]
 8021634:	2b00      	cmp	r3, #0
 8021636:	d0f9      	beq.n	802162c <rmw_destroy_client+0x10>
 8021638:	2d00      	cmp	r5, #0
 802163a:	d0f7      	beq.n	802162c <rmw_destroy_client+0x10>
 802163c:	6828      	ldr	r0, [r5, #0]
 802163e:	f7f8 fd8f 	bl	801a160 <is_uxrce_rmw_identifier_valid>
 8021642:	2800      	cmp	r0, #0
 8021644:	d0f2      	beq.n	802162c <rmw_destroy_client+0x10>
 8021646:	686e      	ldr	r6, [r5, #4]
 8021648:	2e00      	cmp	r6, #0
 802164a:	d0ef      	beq.n	802162c <rmw_destroy_client+0x10>
 802164c:	6864      	ldr	r4, [r4, #4]
 802164e:	6932      	ldr	r2, [r6, #16]
 8021650:	6920      	ldr	r0, [r4, #16]
 8021652:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8021656:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 802165a:	6819      	ldr	r1, [r3, #0]
 802165c:	f002 f90a 	bl	8023874 <uxr_buffer_cancel_data>
 8021660:	4602      	mov	r2, r0
 8021662:	6920      	ldr	r0, [r4, #16]
 8021664:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8021668:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 802166c:	f7f8 fcfe 	bl	801a06c <run_xrce_session>
 8021670:	6920      	ldr	r0, [r4, #16]
 8021672:	6932      	ldr	r2, [r6, #16]
 8021674:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8021678:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 802167c:	6819      	ldr	r1, [r3, #0]
 802167e:	f7f9 ff17 	bl	801b4b0 <uxr_buffer_delete_entity>
 8021682:	4602      	mov	r2, r0
 8021684:	6920      	ldr	r0, [r4, #16]
 8021686:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 802168a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 802168e:	f7f8 fced 	bl	801a06c <run_xrce_session>
 8021692:	4603      	mov	r3, r0
 8021694:	4628      	mov	r0, r5
 8021696:	2b00      	cmp	r3, #0
 8021698:	bf14      	ite	ne
 802169a:	2400      	movne	r4, #0
 802169c:	2402      	moveq	r4, #2
 802169e:	f7f8 fbc1 	bl	8019e24 <rmw_uxrce_fini_client_memory>
 80216a2:	e7c4      	b.n	802162e <rmw_destroy_client+0x12>

080216a4 <rmw_get_implementation_identifier>:
 80216a4:	4b01      	ldr	r3, [pc, #4]	@ (80216ac <rmw_get_implementation_identifier+0x8>)
 80216a6:	6818      	ldr	r0, [r3, #0]
 80216a8:	4770      	bx	lr
 80216aa:	bf00      	nop
 80216ac:	0802ad38 	.word	0x0802ad38

080216b0 <rmw_init_options_init>:
 80216b0:	b084      	sub	sp, #16
 80216b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80216b4:	b083      	sub	sp, #12
 80216b6:	ad09      	add	r5, sp, #36	@ 0x24
 80216b8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80216bc:	b130      	cbz	r0, 80216cc <rmw_init_options_init+0x1c>
 80216be:	4604      	mov	r4, r0
 80216c0:	4628      	mov	r0, r5
 80216c2:	f7f7 ff97 	bl	80195f4 <rcutils_allocator_is_valid>
 80216c6:	b108      	cbz	r0, 80216cc <rmw_init_options_init+0x1c>
 80216c8:	68a6      	ldr	r6, [r4, #8]
 80216ca:	b12e      	cbz	r6, 80216d8 <rmw_init_options_init+0x28>
 80216cc:	200b      	movs	r0, #11
 80216ce:	b003      	add	sp, #12
 80216d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80216d4:	b004      	add	sp, #16
 80216d6:	4770      	bx	lr
 80216d8:	2200      	movs	r2, #0
 80216da:	2300      	movs	r3, #0
 80216dc:	f104 0c20 	add.w	ip, r4, #32
 80216e0:	466f      	mov	r7, sp
 80216e2:	e9c4 2300 	strd	r2, r3, [r4]
 80216e6:	4b1f      	ldr	r3, [pc, #124]	@ (8021764 <rmw_init_options_init+0xb4>)
 80216e8:	681b      	ldr	r3, [r3, #0]
 80216ea:	60a3      	str	r3, [r4, #8]
 80216ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80216ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80216f2:	682b      	ldr	r3, [r5, #0]
 80216f4:	4638      	mov	r0, r7
 80216f6:	f8cc 3000 	str.w	r3, [ip]
 80216fa:	61e6      	str	r6, [r4, #28]
 80216fc:	60e6      	str	r6, [r4, #12]
 80216fe:	f7ff fd67 	bl	80211d0 <rmw_get_default_security_options>
 8021702:	f104 0310 	add.w	r3, r4, #16
 8021706:	2203      	movs	r2, #3
 8021708:	e897 0003 	ldmia.w	r7, {r0, r1}
 802170c:	e883 0003 	stmia.w	r3, {r0, r1}
 8021710:	4815      	ldr	r0, [pc, #84]	@ (8021768 <rmw_init_options_init+0xb8>)
 8021712:	4916      	ldr	r1, [pc, #88]	@ (802176c <rmw_init_options_init+0xbc>)
 8021714:	7626      	strb	r6, [r4, #24]
 8021716:	f7f8 fac5 	bl	8019ca4 <rmw_uxrce_init_init_options_impl_memory>
 802171a:	4813      	ldr	r0, [pc, #76]	@ (8021768 <rmw_init_options_init+0xb8>)
 802171c:	f7ff ff5a 	bl	80215d4 <get_memory>
 8021720:	b1f0      	cbz	r0, 8021760 <rmw_init_options_init+0xb0>
 8021722:	4a13      	ldr	r2, [pc, #76]	@ (8021770 <rmw_init_options_init+0xc0>)
 8021724:	6883      	ldr	r3, [r0, #8]
 8021726:	6851      	ldr	r1, [r2, #4]
 8021728:	6363      	str	r3, [r4, #52]	@ 0x34
 802172a:	7810      	ldrb	r0, [r2, #0]
 802172c:	6159      	str	r1, [r3, #20]
 802172e:	68d1      	ldr	r1, [r2, #12]
 8021730:	7418      	strb	r0, [r3, #16]
 8021732:	61d9      	str	r1, [r3, #28]
 8021734:	6911      	ldr	r1, [r2, #16]
 8021736:	6219      	str	r1, [r3, #32]
 8021738:	6951      	ldr	r1, [r2, #20]
 802173a:	6892      	ldr	r2, [r2, #8]
 802173c:	6259      	str	r1, [r3, #36]	@ 0x24
 802173e:	619a      	str	r2, [r3, #24]
 8021740:	f7fb fb20 	bl	801cd84 <uxr_nanos>
 8021744:	f003 fc06 	bl	8024f54 <srand>
 8021748:	f003 fc32 	bl	8024fb0 <rand>
 802174c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802174e:	6298      	str	r0, [r3, #40]	@ 0x28
 8021750:	2800      	cmp	r0, #0
 8021752:	d0f9      	beq.n	8021748 <rmw_init_options_init+0x98>
 8021754:	2000      	movs	r0, #0
 8021756:	b003      	add	sp, #12
 8021758:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802175c:	b004      	add	sp, #16
 802175e:	4770      	bx	lr
 8021760:	2001      	movs	r0, #1
 8021762:	e7b4      	b.n	80216ce <rmw_init_options_init+0x1e>
 8021764:	0802ad38 	.word	0x0802ad38
 8021768:	20014944 	.word	0x20014944
 802176c:	200101e0 	.word	0x200101e0
 8021770:	2001006c 	.word	0x2001006c

08021774 <rmw_init_options_copy>:
 8021774:	b570      	push	{r4, r5, r6, lr}
 8021776:	b088      	sub	sp, #32
 8021778:	b160      	cbz	r0, 8021794 <rmw_init_options_copy+0x20>
 802177a:	460d      	mov	r5, r1
 802177c:	b151      	cbz	r1, 8021794 <rmw_init_options_copy+0x20>
 802177e:	4604      	mov	r4, r0
 8021780:	6880      	ldr	r0, [r0, #8]
 8021782:	b128      	cbz	r0, 8021790 <rmw_init_options_copy+0x1c>
 8021784:	4b34      	ldr	r3, [pc, #208]	@ (8021858 <rmw_init_options_copy+0xe4>)
 8021786:	6819      	ldr	r1, [r3, #0]
 8021788:	f7de fd5a 	bl	8000240 <strcmp>
 802178c:	2800      	cmp	r0, #0
 802178e:	d157      	bne.n	8021840 <rmw_init_options_copy+0xcc>
 8021790:	68ab      	ldr	r3, [r5, #8]
 8021792:	b11b      	cbz	r3, 802179c <rmw_init_options_copy+0x28>
 8021794:	240b      	movs	r4, #11
 8021796:	4620      	mov	r0, r4
 8021798:	b008      	add	sp, #32
 802179a:	bd70      	pop	{r4, r5, r6, pc}
 802179c:	4623      	mov	r3, r4
 802179e:	462a      	mov	r2, r5
 80217a0:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 80217a4:	f8d3 e000 	ldr.w	lr, [r3]
 80217a8:	3310      	adds	r3, #16
 80217aa:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 80217ae:	3210      	adds	r2, #16
 80217b0:	f853 0c08 	ldr.w	r0, [r3, #-8]
 80217b4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80217b8:	42b3      	cmp	r3, r6
 80217ba:	f842 ec10 	str.w	lr, [r2, #-16]
 80217be:	f842 cc0c 	str.w	ip, [r2, #-12]
 80217c2:	f842 0c08 	str.w	r0, [r2, #-8]
 80217c6:	f842 1c04 	str.w	r1, [r2, #-4]
 80217ca:	d1eb      	bne.n	80217a4 <rmw_init_options_copy+0x30>
 80217cc:	6819      	ldr	r1, [r3, #0]
 80217ce:	f104 0e20 	add.w	lr, r4, #32
 80217d2:	685b      	ldr	r3, [r3, #4]
 80217d4:	f10d 0c0c 	add.w	ip, sp, #12
 80217d8:	6011      	str	r1, [r2, #0]
 80217da:	6053      	str	r3, [r2, #4]
 80217dc:	4666      	mov	r6, ip
 80217de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80217e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80217e6:	f8de 3000 	ldr.w	r3, [lr]
 80217ea:	4630      	mov	r0, r6
 80217ec:	f8cc 3000 	str.w	r3, [ip]
 80217f0:	f7f7 ff00 	bl	80195f4 <rcutils_allocator_is_valid>
 80217f4:	2800      	cmp	r0, #0
 80217f6:	d0cd      	beq.n	8021794 <rmw_init_options_copy+0x20>
 80217f8:	ab08      	add	r3, sp, #32
 80217fa:	e913 0003 	ldmdb	r3, {r0, r1}
 80217fe:	e88d 0003 	stmia.w	sp, {r0, r1}
 8021802:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8021806:	69e0      	ldr	r0, [r4, #28]
 8021808:	f7ff fb50 	bl	8020eac <rcutils_strdup>
 802180c:	61e8      	str	r0, [r5, #28]
 802180e:	69e3      	ldr	r3, [r4, #28]
 8021810:	b103      	cbz	r3, 8021814 <rmw_init_options_copy+0xa0>
 8021812:	b1f8      	cbz	r0, 8021854 <rmw_init_options_copy+0xe0>
 8021814:	4811      	ldr	r0, [pc, #68]	@ (802185c <rmw_init_options_copy+0xe8>)
 8021816:	f7ff fedd 	bl	80215d4 <get_memory>
 802181a:	b1a8      	cbz	r0, 8021848 <rmw_init_options_copy+0xd4>
 802181c:	6883      	ldr	r3, [r0, #8]
 802181e:	636b      	str	r3, [r5, #52]	@ 0x34
 8021820:	f103 0510 	add.w	r5, r3, #16
 8021824:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8021826:	2400      	movs	r4, #0
 8021828:	f102 0c10 	add.w	ip, r2, #16
 802182c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8021830:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8021832:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8021836:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 802183a:	4620      	mov	r0, r4
 802183c:	b008      	add	sp, #32
 802183e:	bd70      	pop	{r4, r5, r6, pc}
 8021840:	240c      	movs	r4, #12
 8021842:	4620      	mov	r0, r4
 8021844:	b008      	add	sp, #32
 8021846:	bd70      	pop	{r4, r5, r6, pc}
 8021848:	9b04      	ldr	r3, [sp, #16]
 802184a:	2401      	movs	r4, #1
 802184c:	9907      	ldr	r1, [sp, #28]
 802184e:	69e8      	ldr	r0, [r5, #28]
 8021850:	4798      	blx	r3
 8021852:	e7a0      	b.n	8021796 <rmw_init_options_copy+0x22>
 8021854:	240a      	movs	r4, #10
 8021856:	e79e      	b.n	8021796 <rmw_init_options_copy+0x22>
 8021858:	0802ad38 	.word	0x0802ad38
 802185c:	20014944 	.word	0x20014944

08021860 <rmw_init_options_fini>:
 8021860:	b510      	push	{r4, lr}
 8021862:	b08e      	sub	sp, #56	@ 0x38
 8021864:	2800      	cmp	r0, #0
 8021866:	d035      	beq.n	80218d4 <rmw_init_options_fini+0x74>
 8021868:	4604      	mov	r4, r0
 802186a:	3020      	adds	r0, #32
 802186c:	f7f7 fec2 	bl	80195f4 <rcutils_allocator_is_valid>
 8021870:	b380      	cbz	r0, 80218d4 <rmw_init_options_fini+0x74>
 8021872:	68a0      	ldr	r0, [r4, #8]
 8021874:	b120      	cbz	r0, 8021880 <rmw_init_options_fini+0x20>
 8021876:	4b1c      	ldr	r3, [pc, #112]	@ (80218e8 <rmw_init_options_fini+0x88>)
 8021878:	6819      	ldr	r1, [r3, #0]
 802187a:	f7de fce1 	bl	8000240 <strcmp>
 802187e:	bb88      	cbnz	r0, 80218e4 <rmw_init_options_fini+0x84>
 8021880:	4b1a      	ldr	r3, [pc, #104]	@ (80218ec <rmw_init_options_fini+0x8c>)
 8021882:	6819      	ldr	r1, [r3, #0]
 8021884:	b351      	cbz	r1, 80218dc <rmw_init_options_fini+0x7c>
 8021886:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8021888:	e001      	b.n	802188e <rmw_init_options_fini+0x2e>
 802188a:	6849      	ldr	r1, [r1, #4]
 802188c:	b331      	cbz	r1, 80218dc <rmw_init_options_fini+0x7c>
 802188e:	688b      	ldr	r3, [r1, #8]
 8021890:	429a      	cmp	r2, r3
 8021892:	d1fa      	bne.n	802188a <rmw_init_options_fini+0x2a>
 8021894:	4815      	ldr	r0, [pc, #84]	@ (80218ec <rmw_init_options_fini+0x8c>)
 8021896:	f7ff fead 	bl	80215f4 <put_memory>
 802189a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802189c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 802189e:	69e0      	ldr	r0, [r4, #28]
 80218a0:	4798      	blx	r3
 80218a2:	4668      	mov	r0, sp
 80218a4:	f7ff fc84 	bl	80211b0 <rmw_get_zero_initialized_init_options>
 80218a8:	46ee      	mov	lr, sp
 80218aa:	46a4      	mov	ip, r4
 80218ac:	2400      	movs	r4, #0
 80218ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80218b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80218b6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80218ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80218be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80218c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80218c6:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80218ca:	e88c 0003 	stmia.w	ip, {r0, r1}
 80218ce:	4620      	mov	r0, r4
 80218d0:	b00e      	add	sp, #56	@ 0x38
 80218d2:	bd10      	pop	{r4, pc}
 80218d4:	240b      	movs	r4, #11
 80218d6:	4620      	mov	r0, r4
 80218d8:	b00e      	add	sp, #56	@ 0x38
 80218da:	bd10      	pop	{r4, pc}
 80218dc:	2401      	movs	r4, #1
 80218de:	4620      	mov	r0, r4
 80218e0:	b00e      	add	sp, #56	@ 0x38
 80218e2:	bd10      	pop	{r4, pc}
 80218e4:	240c      	movs	r4, #12
 80218e6:	e7f2      	b.n	80218ce <rmw_init_options_fini+0x6e>
 80218e8:	0802ad38 	.word	0x0802ad38
 80218ec:	20014944 	.word	0x20014944

080218f0 <rmw_init>:
 80218f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80218f4:	b083      	sub	sp, #12
 80218f6:	2800      	cmp	r0, #0
 80218f8:	f000 80d3 	beq.w	8021aa2 <rmw_init+0x1b2>
 80218fc:	460e      	mov	r6, r1
 80218fe:	2900      	cmp	r1, #0
 8021900:	f000 80cf 	beq.w	8021aa2 <rmw_init+0x1b2>
 8021904:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8021906:	4605      	mov	r5, r0
 8021908:	2b00      	cmp	r3, #0
 802190a:	f000 80ca 	beq.w	8021aa2 <rmw_init+0x1b2>
 802190e:	4b78      	ldr	r3, [pc, #480]	@ (8021af0 <rmw_init+0x200>)
 8021910:	6880      	ldr	r0, [r0, #8]
 8021912:	681f      	ldr	r7, [r3, #0]
 8021914:	b128      	cbz	r0, 8021922 <rmw_init+0x32>
 8021916:	4639      	mov	r1, r7
 8021918:	f7de fc92 	bl	8000240 <strcmp>
 802191c:	2800      	cmp	r0, #0
 802191e:	f040 80ca 	bne.w	8021ab6 <rmw_init+0x1c6>
 8021922:	4c74      	ldr	r4, [pc, #464]	@ (8021af4 <rmw_init+0x204>)
 8021924:	f04f 0800 	mov.w	r8, #0
 8021928:	4973      	ldr	r1, [pc, #460]	@ (8021af8 <rmw_init+0x208>)
 802192a:	4874      	ldr	r0, [pc, #464]	@ (8021afc <rmw_init+0x20c>)
 802192c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8021930:	60b7      	str	r7, [r6, #8]
 8021932:	e9c6 2300 	strd	r2, r3, [r6]
 8021936:	68eb      	ldr	r3, [r5, #12]
 8021938:	2201      	movs	r2, #1
 802193a:	64b3      	str	r3, [r6, #72]	@ 0x48
 802193c:	f7f8 f952 	bl	8019be4 <rmw_uxrce_init_session_memory>
 8021940:	4620      	mov	r0, r4
 8021942:	2204      	movs	r2, #4
 8021944:	496e      	ldr	r1, [pc, #440]	@ (8021b00 <rmw_init+0x210>)
 8021946:	f7f8 f98d 	bl	8019c64 <rmw_uxrce_init_static_input_buffer_memory>
 802194a:	486c      	ldr	r0, [pc, #432]	@ (8021afc <rmw_init+0x20c>)
 802194c:	f884 800d 	strb.w	r8, [r4, #13]
 8021950:	f7ff fe40 	bl	80215d4 <get_memory>
 8021954:	2800      	cmp	r0, #0
 8021956:	f000 80a9 	beq.w	8021aac <rmw_init+0x1bc>
 802195a:	6884      	ldr	r4, [r0, #8]
 802195c:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 802195e:	f104 0910 	add.w	r9, r4, #16
 8021962:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8021964:	f890 c010 	ldrb.w	ip, [r0, #16]
 8021968:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 802196c:	9101      	str	r1, [sp, #4]
 802196e:	4661      	mov	r1, ip
 8021970:	6a00      	ldr	r0, [r0, #32]
 8021972:	9000      	str	r0, [sp, #0]
 8021974:	4648      	mov	r0, r9
 8021976:	f001 f9b7 	bl	8022ce8 <uxr_set_custom_transport_callbacks>
 802197a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802197e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8021982:	4960      	ldr	r1, [pc, #384]	@ (8021b04 <rmw_init+0x214>)
 8021984:	4860      	ldr	r0, [pc, #384]	@ (8021b08 <rmw_init+0x218>)
 8021986:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 802198a:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 802198e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8021992:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8021996:	2201      	movs	r2, #1
 8021998:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 802199c:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 80219a0:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 80219a4:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 80219a8:	64f4      	str	r4, [r6, #76]	@ 0x4c
 80219aa:	f7f8 f8fb 	bl	8019ba4 <rmw_uxrce_init_node_memory>
 80219ae:	2205      	movs	r2, #5
 80219b0:	4956      	ldr	r1, [pc, #344]	@ (8021b0c <rmw_init+0x21c>)
 80219b2:	4857      	ldr	r0, [pc, #348]	@ (8021b10 <rmw_init+0x220>)
 80219b4:	f7f8 f8d6 	bl	8019b64 <rmw_uxrce_init_subscription_memory>
 80219b8:	220a      	movs	r2, #10
 80219ba:	4956      	ldr	r1, [pc, #344]	@ (8021b14 <rmw_init+0x224>)
 80219bc:	4856      	ldr	r0, [pc, #344]	@ (8021b18 <rmw_init+0x228>)
 80219be:	f7f8 f8b1 	bl	8019b24 <rmw_uxrce_init_publisher_memory>
 80219c2:	2201      	movs	r2, #1
 80219c4:	4955      	ldr	r1, [pc, #340]	@ (8021b1c <rmw_init+0x22c>)
 80219c6:	4856      	ldr	r0, [pc, #344]	@ (8021b20 <rmw_init+0x230>)
 80219c8:	f7f8 f86c 	bl	8019aa4 <rmw_uxrce_init_service_memory>
 80219cc:	2201      	movs	r2, #1
 80219ce:	4955      	ldr	r1, [pc, #340]	@ (8021b24 <rmw_init+0x234>)
 80219d0:	4855      	ldr	r0, [pc, #340]	@ (8021b28 <rmw_init+0x238>)
 80219d2:	f7f8 f887 	bl	8019ae4 <rmw_uxrce_init_client_memory>
 80219d6:	220f      	movs	r2, #15
 80219d8:	4954      	ldr	r1, [pc, #336]	@ (8021b2c <rmw_init+0x23c>)
 80219da:	4855      	ldr	r0, [pc, #340]	@ (8021b30 <rmw_init+0x240>)
 80219dc:	f7f8 f922 	bl	8019c24 <rmw_uxrce_init_topic_memory>
 80219e0:	2203      	movs	r2, #3
 80219e2:	4954      	ldr	r1, [pc, #336]	@ (8021b34 <rmw_init+0x244>)
 80219e4:	4854      	ldr	r0, [pc, #336]	@ (8021b38 <rmw_init+0x248>)
 80219e6:	f7f8 f95d 	bl	8019ca4 <rmw_uxrce_init_init_options_impl_memory>
 80219ea:	2204      	movs	r2, #4
 80219ec:	4953      	ldr	r1, [pc, #332]	@ (8021b3c <rmw_init+0x24c>)
 80219ee:	4854      	ldr	r0, [pc, #336]	@ (8021b40 <rmw_init+0x250>)
 80219f0:	f7f8 f978 	bl	8019ce4 <rmw_uxrce_init_wait_set_memory>
 80219f4:	4953      	ldr	r1, [pc, #332]	@ (8021b44 <rmw_init+0x254>)
 80219f6:	4854      	ldr	r0, [pc, #336]	@ (8021b48 <rmw_init+0x258>)
 80219f8:	2204      	movs	r2, #4
 80219fa:	f7f8 f993 	bl	8019d24 <rmw_uxrce_init_guard_condition_memory>
 80219fe:	4642      	mov	r2, r8
 8021a00:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8021a02:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8021a04:	f000 fdb8 	bl	8022578 <rmw_uxrce_transport_init>
 8021a08:	4607      	mov	r7, r0
 8021a0a:	2800      	cmp	r0, #0
 8021a0c:	d158      	bne.n	8021ac0 <rmw_init+0x1d0>
 8021a0e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8021a10:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8021a14:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8021a18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8021a1a:	4628      	mov	r0, r5
 8021a1c:	f7fa f808 	bl	801ba30 <uxr_init_session>
 8021a20:	4622      	mov	r2, r4
 8021a22:	494a      	ldr	r1, [pc, #296]	@ (8021b4c <rmw_init+0x25c>)
 8021a24:	4628      	mov	r0, r5
 8021a26:	f7fa f827 	bl	801ba78 <uxr_set_topic_callback>
 8021a2a:	463a      	mov	r2, r7
 8021a2c:	4948      	ldr	r1, [pc, #288]	@ (8021b50 <rmw_init+0x260>)
 8021a2e:	4628      	mov	r0, r5
 8021a30:	f7fa f81e 	bl	801ba70 <uxr_set_status_callback>
 8021a34:	463a      	mov	r2, r7
 8021a36:	4947      	ldr	r1, [pc, #284]	@ (8021b54 <rmw_init+0x264>)
 8021a38:	4628      	mov	r0, r5
 8021a3a:	f7fa f821 	bl	801ba80 <uxr_set_request_callback>
 8021a3e:	463a      	mov	r2, r7
 8021a40:	4945      	ldr	r1, [pc, #276]	@ (8021b58 <rmw_init+0x268>)
 8021a42:	4628      	mov	r0, r5
 8021a44:	f7fa f820 	bl	801ba88 <uxr_set_reply_callback>
 8021a48:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8021a4c:	2304      	movs	r3, #4
 8021a4e:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8021a52:	0092      	lsls	r2, r2, #2
 8021a54:	4628      	mov	r0, r5
 8021a56:	f7fa f857 	bl	801bb08 <uxr_create_input_reliable_stream>
 8021a5a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8021a5e:	2304      	movs	r3, #4
 8021a60:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8021a64:	0092      	lsls	r2, r2, #2
 8021a66:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8021a6a:	4628      	mov	r0, r5
 8021a6c:	f7fa f822 	bl	801bab4 <uxr_create_output_reliable_stream>
 8021a70:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8021a74:	4628      	mov	r0, r5
 8021a76:	f7fa f841 	bl	801bafc <uxr_create_input_best_effort_stream>
 8021a7a:	f241 3194 	movw	r1, #5012	@ 0x1394
 8021a7e:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8021a82:	4628      	mov	r0, r5
 8021a84:	4421      	add	r1, r4
 8021a86:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8021a8a:	f7fa f801 	bl	801ba90 <uxr_create_output_best_effort_stream>
 8021a8e:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8021a92:	4628      	mov	r0, r5
 8021a94:	f7fa fd8a 	bl	801c5ac <uxr_create_session>
 8021a98:	b1f8      	cbz	r0, 8021ada <rmw_init+0x1ea>
 8021a9a:	4638      	mov	r0, r7
 8021a9c:	b003      	add	sp, #12
 8021a9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021aa2:	270b      	movs	r7, #11
 8021aa4:	4638      	mov	r0, r7
 8021aa6:	b003      	add	sp, #12
 8021aa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021aac:	2701      	movs	r7, #1
 8021aae:	4638      	mov	r0, r7
 8021ab0:	b003      	add	sp, #12
 8021ab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021ab6:	270c      	movs	r7, #12
 8021ab8:	4638      	mov	r0, r7
 8021aba:	b003      	add	sp, #12
 8021abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021ac0:	4648      	mov	r0, r9
 8021ac2:	f001 f94f 	bl	8022d64 <uxr_close_custom_transport>
 8021ac6:	4621      	mov	r1, r4
 8021ac8:	480c      	ldr	r0, [pc, #48]	@ (8021afc <rmw_init+0x20c>)
 8021aca:	f7ff fd93 	bl	80215f4 <put_memory>
 8021ace:	4638      	mov	r0, r7
 8021ad0:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8021ad4:	b003      	add	sp, #12
 8021ad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021ada:	4648      	mov	r0, r9
 8021adc:	f001 f942 	bl	8022d64 <uxr_close_custom_transport>
 8021ae0:	4621      	mov	r1, r4
 8021ae2:	4806      	ldr	r0, [pc, #24]	@ (8021afc <rmw_init+0x20c>)
 8021ae4:	f7ff fd86 	bl	80215f4 <put_memory>
 8021ae8:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8021aea:	2701      	movs	r7, #1
 8021aec:	e7d5      	b.n	8021a9a <rmw_init+0x1aa>
 8021aee:	bf00      	nop
 8021af0:	0802ad38 	.word	0x0802ad38
 8021af4:	20014994 	.word	0x20014994
 8021af8:	20010c40 	.word	0x20010c40
 8021afc:	20014984 	.word	0x20014984
 8021b00:	200121e8 	.word	0x200121e8
 8021b04:	20010264 	.word	0x20010264
 8021b08:	20014954 	.word	0x20014954
 8021b0c:	200142e8 	.word	0x200142e8
 8021b10:	200149a4 	.word	0x200149a4
 8021b14:	20010308 	.word	0x20010308
 8021b18:	20014964 	.word	0x20014964
 8021b1c:	20010b78 	.word	0x20010b78
 8021b20:	20014974 	.word	0x20014974
 8021b24:	20010098 	.word	0x20010098
 8021b28:	20010088 	.word	0x20010088
 8021b2c:	20014720 	.word	0x20014720
 8021b30:	200149b4 	.word	0x200149b4
 8021b34:	200101e0 	.word	0x200101e0
 8021b38:	20014944 	.word	0x20014944
 8021b3c:	200148c4 	.word	0x200148c4
 8021b40:	200149c4 	.word	0x200149c4
 8021b44:	20010160 	.word	0x20010160
 8021b48:	20014934 	.word	0x20014934
 8021b4c:	08024a0d 	.word	0x08024a0d
 8021b50:	08024a05 	.word	0x08024a05
 8021b54:	08024aa5 	.word	0x08024aa5
 8021b58:	08024b41 	.word	0x08024b41

08021b5c <rmw_context_fini>:
 8021b5c:	4b17      	ldr	r3, [pc, #92]	@ (8021bbc <rmw_context_fini+0x60>)
 8021b5e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8021b60:	b570      	push	{r4, r5, r6, lr}
 8021b62:	681c      	ldr	r4, [r3, #0]
 8021b64:	4605      	mov	r5, r0
 8021b66:	b334      	cbz	r4, 8021bb6 <rmw_context_fini+0x5a>
 8021b68:	2600      	movs	r6, #0
 8021b6a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8021b6e:	6902      	ldr	r2, [r0, #16]
 8021b70:	428a      	cmp	r2, r1
 8021b72:	d018      	beq.n	8021ba6 <rmw_context_fini+0x4a>
 8021b74:	2c00      	cmp	r4, #0
 8021b76:	d1f8      	bne.n	8021b6a <rmw_context_fini+0xe>
 8021b78:	b189      	cbz	r1, 8021b9e <rmw_context_fini+0x42>
 8021b7a:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8021b7e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8021b82:	789b      	ldrb	r3, [r3, #2]
 8021b84:	2b01      	cmp	r3, #1
 8021b86:	bf14      	ite	ne
 8021b88:	210a      	movne	r1, #10
 8021b8a:	2100      	moveq	r1, #0
 8021b8c:	f7fa fce6 	bl	801c55c <uxr_delete_session_retries>
 8021b90:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8021b92:	f7f8 f8e7 	bl	8019d64 <rmw_uxrce_fini_session_memory>
 8021b96:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8021b98:	3010      	adds	r0, #16
 8021b9a:	f001 f8e3 	bl	8022d64 <uxr_close_custom_transport>
 8021b9e:	2300      	movs	r3, #0
 8021ba0:	4630      	mov	r0, r6
 8021ba2:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8021ba4:	bd70      	pop	{r4, r5, r6, pc}
 8021ba6:	3018      	adds	r0, #24
 8021ba8:	f000 f90e 	bl	8021dc8 <rmw_destroy_node>
 8021bac:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8021bae:	4606      	mov	r6, r0
 8021bb0:	2c00      	cmp	r4, #0
 8021bb2:	d1da      	bne.n	8021b6a <rmw_context_fini+0xe>
 8021bb4:	e7e0      	b.n	8021b78 <rmw_context_fini+0x1c>
 8021bb6:	4626      	mov	r6, r4
 8021bb8:	e7de      	b.n	8021b78 <rmw_context_fini+0x1c>
 8021bba:	bf00      	nop
 8021bbc:	20014954 	.word	0x20014954

08021bc0 <create_topic>:
 8021bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021bc4:	4605      	mov	r5, r0
 8021bc6:	b084      	sub	sp, #16
 8021bc8:	4822      	ldr	r0, [pc, #136]	@ (8021c54 <create_topic+0x94>)
 8021bca:	460f      	mov	r7, r1
 8021bcc:	4616      	mov	r6, r2
 8021bce:	f7ff fd01 	bl	80215d4 <get_memory>
 8021bd2:	4604      	mov	r4, r0
 8021bd4:	2800      	cmp	r0, #0
 8021bd6:	d039      	beq.n	8021c4c <create_topic+0x8c>
 8021bd8:	692b      	ldr	r3, [r5, #16]
 8021bda:	2102      	movs	r1, #2
 8021bdc:	6884      	ldr	r4, [r0, #8]
 8021bde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8021be2:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 8021c5c <create_topic+0x9c>
 8021be6:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8021bea:	1c42      	adds	r2, r0, #1
 8021bec:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8021bf0:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8021bf4:	f7f9 fe5e 	bl	801b8b4 <uxr_object_id>
 8021bf8:	223c      	movs	r2, #60	@ 0x3c
 8021bfa:	6120      	str	r0, [r4, #16]
 8021bfc:	4641      	mov	r1, r8
 8021bfe:	4638      	mov	r0, r7
 8021c00:	f7f8 fa96 	bl	801a130 <generate_topic_name>
 8021c04:	b1f0      	cbz	r0, 8021c44 <create_topic+0x84>
 8021c06:	4f14      	ldr	r7, [pc, #80]	@ (8021c58 <create_topic+0x98>)
 8021c08:	4630      	mov	r0, r6
 8021c0a:	2264      	movs	r2, #100	@ 0x64
 8021c0c:	4639      	mov	r1, r7
 8021c0e:	f7f8 fa61 	bl	801a0d4 <generate_type_name>
 8021c12:	b1b8      	cbz	r0, 8021c44 <create_topic+0x84>
 8021c14:	6928      	ldr	r0, [r5, #16]
 8021c16:	2106      	movs	r1, #6
 8021c18:	696b      	ldr	r3, [r5, #20]
 8021c1a:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8021c1e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8021c22:	f8cd 8000 	str.w	r8, [sp]
 8021c26:	e9cd 7101 	strd	r7, r1, [sp, #4]
 8021c2a:	6811      	ldr	r1, [r2, #0]
 8021c2c:	6922      	ldr	r2, [r4, #16]
 8021c2e:	f7f9 fcbd 	bl	801b5ac <uxr_buffer_create_topic_bin>
 8021c32:	4602      	mov	r2, r0
 8021c34:	6928      	ldr	r0, [r5, #16]
 8021c36:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8021c3a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8021c3e:	f7f8 fa15 	bl	801a06c <run_xrce_session>
 8021c42:	b918      	cbnz	r0, 8021c4c <create_topic+0x8c>
 8021c44:	4620      	mov	r0, r4
 8021c46:	2400      	movs	r4, #0
 8021c48:	f7f8 f902 	bl	8019e50 <rmw_uxrce_fini_topic_memory>
 8021c4c:	4620      	mov	r0, r4
 8021c4e:	b004      	add	sp, #16
 8021c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021c54:	200149b4 	.word	0x200149b4
 8021c58:	20014aa0 	.word	0x20014aa0
 8021c5c:	20014a64 	.word	0x20014a64

08021c60 <destroy_topic>:
 8021c60:	b538      	push	{r3, r4, r5, lr}
 8021c62:	6985      	ldr	r5, [r0, #24]
 8021c64:	b1dd      	cbz	r5, 8021c9e <destroy_topic+0x3e>
 8021c66:	4604      	mov	r4, r0
 8021c68:	6928      	ldr	r0, [r5, #16]
 8021c6a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8021c6e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8021c72:	6922      	ldr	r2, [r4, #16]
 8021c74:	6819      	ldr	r1, [r3, #0]
 8021c76:	f7f9 fc1b 	bl	801b4b0 <uxr_buffer_delete_entity>
 8021c7a:	4602      	mov	r2, r0
 8021c7c:	6928      	ldr	r0, [r5, #16]
 8021c7e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8021c82:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8021c86:	f7f8 f9f1 	bl	801a06c <run_xrce_session>
 8021c8a:	4603      	mov	r3, r0
 8021c8c:	4620      	mov	r0, r4
 8021c8e:	2b00      	cmp	r3, #0
 8021c90:	bf14      	ite	ne
 8021c92:	2400      	movne	r4, #0
 8021c94:	2402      	moveq	r4, #2
 8021c96:	f7f8 f8db 	bl	8019e50 <rmw_uxrce_fini_topic_memory>
 8021c9a:	4620      	mov	r0, r4
 8021c9c:	bd38      	pop	{r3, r4, r5, pc}
 8021c9e:	2401      	movs	r4, #1
 8021ca0:	4620      	mov	r0, r4
 8021ca2:	bd38      	pop	{r3, r4, r5, pc}

08021ca4 <create_node>:
 8021ca4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021ca8:	b083      	sub	sp, #12
 8021caa:	2b00      	cmp	r3, #0
 8021cac:	d064      	beq.n	8021d78 <create_node+0xd4>
 8021cae:	4606      	mov	r6, r0
 8021cb0:	4838      	ldr	r0, [pc, #224]	@ (8021d94 <create_node+0xf0>)
 8021cb2:	460f      	mov	r7, r1
 8021cb4:	4690      	mov	r8, r2
 8021cb6:	461d      	mov	r5, r3
 8021cb8:	f7ff fc8c 	bl	80215d4 <get_memory>
 8021cbc:	2800      	cmp	r0, #0
 8021cbe:	d05b      	beq.n	8021d78 <create_node+0xd4>
 8021cc0:	6884      	ldr	r4, [r0, #8]
 8021cc2:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8021cc4:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8021cc8:	f104 0518 	add.w	r5, r4, #24
 8021ccc:	6123      	str	r3, [r4, #16]
 8021cce:	f7ff fce9 	bl	80216a4 <rmw_get_implementation_identifier>
 8021cd2:	f8c4 9020 	str.w	r9, [r4, #32]
 8021cd6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8021cda:	4630      	mov	r0, r6
 8021cdc:	f7de faba 	bl	8000254 <strlen>
 8021ce0:	1c42      	adds	r2, r0, #1
 8021ce2:	2a3c      	cmp	r2, #60	@ 0x3c
 8021ce4:	d840      	bhi.n	8021d68 <create_node+0xc4>
 8021ce6:	4648      	mov	r0, r9
 8021ce8:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8021cec:	4631      	mov	r1, r6
 8021cee:	f003 fe98 	bl	8025a22 <memcpy>
 8021cf2:	4638      	mov	r0, r7
 8021cf4:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8021cf8:	f7de faac 	bl	8000254 <strlen>
 8021cfc:	1c42      	adds	r2, r0, #1
 8021cfe:	2a3c      	cmp	r2, #60	@ 0x3c
 8021d00:	d832      	bhi.n	8021d68 <create_node+0xc4>
 8021d02:	4639      	mov	r1, r7
 8021d04:	4648      	mov	r0, r9
 8021d06:	f003 fe8c 	bl	8025a22 <memcpy>
 8021d0a:	6923      	ldr	r3, [r4, #16]
 8021d0c:	2101      	movs	r1, #1
 8021d0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8021d12:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8021d16:	1842      	adds	r2, r0, r1
 8021d18:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8021d1c:	f7f9 fdca 	bl	801b8b4 <uxr_object_id>
 8021d20:	6160      	str	r0, [r4, #20]
 8021d22:	783b      	ldrb	r3, [r7, #0]
 8021d24:	2b2f      	cmp	r3, #47	@ 0x2f
 8021d26:	d12c      	bne.n	8021d82 <create_node+0xde>
 8021d28:	787b      	ldrb	r3, [r7, #1]
 8021d2a:	bb53      	cbnz	r3, 8021d82 <create_node+0xde>
 8021d2c:	4633      	mov	r3, r6
 8021d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8021d98 <create_node+0xf4>)
 8021d30:	213c      	movs	r1, #60	@ 0x3c
 8021d32:	481a      	ldr	r0, [pc, #104]	@ (8021d9c <create_node+0xf8>)
 8021d34:	f003 fbda 	bl	80254ec <sniprintf>
 8021d38:	6920      	ldr	r0, [r4, #16]
 8021d3a:	2106      	movs	r1, #6
 8021d3c:	fa1f f388 	uxth.w	r3, r8
 8021d40:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8021d44:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8021d48:	9101      	str	r1, [sp, #4]
 8021d4a:	4914      	ldr	r1, [pc, #80]	@ (8021d9c <create_node+0xf8>)
 8021d4c:	9100      	str	r1, [sp, #0]
 8021d4e:	6811      	ldr	r1, [r2, #0]
 8021d50:	6962      	ldr	r2, [r4, #20]
 8021d52:	f7f9 fbf9 	bl	801b548 <uxr_buffer_create_participant_bin>
 8021d56:	4602      	mov	r2, r0
 8021d58:	6920      	ldr	r0, [r4, #16]
 8021d5a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8021d5e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8021d62:	f7f8 f983 	bl	801a06c <run_xrce_session>
 8021d66:	b918      	cbnz	r0, 8021d70 <create_node+0xcc>
 8021d68:	4628      	mov	r0, r5
 8021d6a:	2500      	movs	r5, #0
 8021d6c:	f7f8 f800 	bl	8019d70 <rmw_uxrce_fini_node_memory>
 8021d70:	4628      	mov	r0, r5
 8021d72:	b003      	add	sp, #12
 8021d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021d78:	2500      	movs	r5, #0
 8021d7a:	4628      	mov	r0, r5
 8021d7c:	b003      	add	sp, #12
 8021d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021d82:	463b      	mov	r3, r7
 8021d84:	4a06      	ldr	r2, [pc, #24]	@ (8021da0 <create_node+0xfc>)
 8021d86:	213c      	movs	r1, #60	@ 0x3c
 8021d88:	9600      	str	r6, [sp, #0]
 8021d8a:	4804      	ldr	r0, [pc, #16]	@ (8021d9c <create_node+0xf8>)
 8021d8c:	f003 fbae 	bl	80254ec <sniprintf>
 8021d90:	e7d2      	b.n	8021d38 <create_node+0x94>
 8021d92:	bf00      	nop
 8021d94:	20014954 	.word	0x20014954
 8021d98:	0802a4c0 	.word	0x0802a4c0
 8021d9c:	20014b04 	.word	0x20014b04
 8021da0:	0802a6bc 	.word	0x0802a6bc

08021da4 <rmw_create_node>:
 8021da4:	468c      	mov	ip, r1
 8021da6:	4611      	mov	r1, r2
 8021da8:	f1bc 0f00 	cmp.w	ip, #0
 8021dac:	d00a      	beq.n	8021dc4 <rmw_create_node+0x20>
 8021dae:	f89c 3000 	ldrb.w	r3, [ip]
 8021db2:	b13b      	cbz	r3, 8021dc4 <rmw_create_node+0x20>
 8021db4:	b132      	cbz	r2, 8021dc4 <rmw_create_node+0x20>
 8021db6:	7813      	ldrb	r3, [r2, #0]
 8021db8:	b123      	cbz	r3, 8021dc4 <rmw_create_node+0x20>
 8021dba:	4603      	mov	r3, r0
 8021dbc:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8021dbe:	4660      	mov	r0, ip
 8021dc0:	f7ff bf70 	b.w	8021ca4 <create_node>
 8021dc4:	2000      	movs	r0, #0
 8021dc6:	4770      	bx	lr

08021dc8 <rmw_destroy_node>:
 8021dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021dca:	b328      	cbz	r0, 8021e18 <rmw_destroy_node+0x50>
 8021dcc:	4607      	mov	r7, r0
 8021dce:	6800      	ldr	r0, [r0, #0]
 8021dd0:	b120      	cbz	r0, 8021ddc <rmw_destroy_node+0x14>
 8021dd2:	4b37      	ldr	r3, [pc, #220]	@ (8021eb0 <rmw_destroy_node+0xe8>)
 8021dd4:	6819      	ldr	r1, [r3, #0]
 8021dd6:	f7de fa33 	bl	8000240 <strcmp>
 8021dda:	b9e8      	cbnz	r0, 8021e18 <rmw_destroy_node+0x50>
 8021ddc:	687d      	ldr	r5, [r7, #4]
 8021dde:	b1dd      	cbz	r5, 8021e18 <rmw_destroy_node+0x50>
 8021de0:	4b34      	ldr	r3, [pc, #208]	@ (8021eb4 <rmw_destroy_node+0xec>)
 8021de2:	681c      	ldr	r4, [r3, #0]
 8021de4:	2c00      	cmp	r4, #0
 8021de6:	d060      	beq.n	8021eaa <rmw_destroy_node+0xe2>
 8021de8:	2600      	movs	r6, #0
 8021dea:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8021dee:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8021df2:	429d      	cmp	r5, r3
 8021df4:	d013      	beq.n	8021e1e <rmw_destroy_node+0x56>
 8021df6:	2c00      	cmp	r4, #0
 8021df8:	d1f7      	bne.n	8021dea <rmw_destroy_node+0x22>
 8021dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8021eb8 <rmw_destroy_node+0xf0>)
 8021dfc:	681c      	ldr	r4, [r3, #0]
 8021dfe:	b1c4      	cbz	r4, 8021e32 <rmw_destroy_node+0x6a>
 8021e00:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8021e04:	6a0b      	ldr	r3, [r1, #32]
 8021e06:	429d      	cmp	r5, r3
 8021e08:	d1f9      	bne.n	8021dfe <rmw_destroy_node+0x36>
 8021e0a:	317c      	adds	r1, #124	@ 0x7c
 8021e0c:	4638      	mov	r0, r7
 8021e0e:	f000 fafd 	bl	802240c <rmw_destroy_subscription>
 8021e12:	2801      	cmp	r0, #1
 8021e14:	4606      	mov	r6, r0
 8021e16:	d1f2      	bne.n	8021dfe <rmw_destroy_node+0x36>
 8021e18:	2601      	movs	r6, #1
 8021e1a:	4630      	mov	r0, r6
 8021e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021e1e:	3184      	adds	r1, #132	@ 0x84
 8021e20:	4638      	mov	r0, r7
 8021e22:	f7f7 fdeb 	bl	80199fc <rmw_destroy_publisher>
 8021e26:	2801      	cmp	r0, #1
 8021e28:	4606      	mov	r6, r0
 8021e2a:	d0f5      	beq.n	8021e18 <rmw_destroy_node+0x50>
 8021e2c:	2c00      	cmp	r4, #0
 8021e2e:	d1dc      	bne.n	8021dea <rmw_destroy_node+0x22>
 8021e30:	e7e3      	b.n	8021dfa <rmw_destroy_node+0x32>
 8021e32:	4b22      	ldr	r3, [pc, #136]	@ (8021ebc <rmw_destroy_node+0xf4>)
 8021e34:	681c      	ldr	r4, [r3, #0]
 8021e36:	b16c      	cbz	r4, 8021e54 <rmw_destroy_node+0x8c>
 8021e38:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8021e3c:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8021e3e:	429d      	cmp	r5, r3
 8021e40:	d1f9      	bne.n	8021e36 <rmw_destroy_node+0x6e>
 8021e42:	317c      	adds	r1, #124	@ 0x7c
 8021e44:	4638      	mov	r0, r7
 8021e46:	f000 f993 	bl	8022170 <rmw_destroy_service>
 8021e4a:	2801      	cmp	r0, #1
 8021e4c:	4606      	mov	r6, r0
 8021e4e:	d0e3      	beq.n	8021e18 <rmw_destroy_node+0x50>
 8021e50:	2c00      	cmp	r4, #0
 8021e52:	d1f1      	bne.n	8021e38 <rmw_destroy_node+0x70>
 8021e54:	4b1a      	ldr	r3, [pc, #104]	@ (8021ec0 <rmw_destroy_node+0xf8>)
 8021e56:	681c      	ldr	r4, [r3, #0]
 8021e58:	b16c      	cbz	r4, 8021e76 <rmw_destroy_node+0xae>
 8021e5a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8021e5e:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8021e60:	429d      	cmp	r5, r3
 8021e62:	d1f9      	bne.n	8021e58 <rmw_destroy_node+0x90>
 8021e64:	317c      	adds	r1, #124	@ 0x7c
 8021e66:	4638      	mov	r0, r7
 8021e68:	f7ff fbd8 	bl	802161c <rmw_destroy_client>
 8021e6c:	2801      	cmp	r0, #1
 8021e6e:	4606      	mov	r6, r0
 8021e70:	d0d2      	beq.n	8021e18 <rmw_destroy_node+0x50>
 8021e72:	2c00      	cmp	r4, #0
 8021e74:	d1f1      	bne.n	8021e5a <rmw_destroy_node+0x92>
 8021e76:	6928      	ldr	r0, [r5, #16]
 8021e78:	696a      	ldr	r2, [r5, #20]
 8021e7a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8021e7e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8021e82:	6819      	ldr	r1, [r3, #0]
 8021e84:	f7f9 fb14 	bl	801b4b0 <uxr_buffer_delete_entity>
 8021e88:	4602      	mov	r2, r0
 8021e8a:	6928      	ldr	r0, [r5, #16]
 8021e8c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8021e90:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8021e94:	f7f8 f8ea 	bl	801a06c <run_xrce_session>
 8021e98:	4603      	mov	r3, r0
 8021e9a:	4638      	mov	r0, r7
 8021e9c:	2b00      	cmp	r3, #0
 8021e9e:	bf08      	it	eq
 8021ea0:	2602      	moveq	r6, #2
 8021ea2:	f7f7 ff65 	bl	8019d70 <rmw_uxrce_fini_node_memory>
 8021ea6:	4630      	mov	r0, r6
 8021ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021eaa:	4626      	mov	r6, r4
 8021eac:	e7a5      	b.n	8021dfa <rmw_destroy_node+0x32>
 8021eae:	bf00      	nop
 8021eb0:	0802ad38 	.word	0x0802ad38
 8021eb4:	20014964 	.word	0x20014964
 8021eb8:	200149a4 	.word	0x200149a4
 8021ebc:	20014974 	.word	0x20014974
 8021ec0:	20010088 	.word	0x20010088

08021ec4 <rmw_node_get_graph_guard_condition>:
 8021ec4:	6843      	ldr	r3, [r0, #4]
 8021ec6:	6918      	ldr	r0, [r3, #16]
 8021ec8:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8021ecc:	4770      	bx	lr
 8021ece:	bf00      	nop

08021ed0 <rmw_send_request>:
 8021ed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021ed4:	4604      	mov	r4, r0
 8021ed6:	6800      	ldr	r0, [r0, #0]
 8021ed8:	b08b      	sub	sp, #44	@ 0x2c
 8021eda:	460e      	mov	r6, r1
 8021edc:	4615      	mov	r5, r2
 8021ede:	b128      	cbz	r0, 8021eec <rmw_send_request+0x1c>
 8021ee0:	4b21      	ldr	r3, [pc, #132]	@ (8021f68 <rmw_send_request+0x98>)
 8021ee2:	6819      	ldr	r1, [r3, #0]
 8021ee4:	f7de f9ac 	bl	8000240 <strcmp>
 8021ee8:	2800      	cmp	r0, #0
 8021eea:	d139      	bne.n	8021f60 <rmw_send_request+0x90>
 8021eec:	6864      	ldr	r4, [r4, #4]
 8021eee:	2700      	movs	r7, #0
 8021ef0:	6963      	ldr	r3, [r4, #20]
 8021ef2:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8021ef6:	689b      	ldr	r3, [r3, #8]
 8021ef8:	4798      	blx	r3
 8021efa:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8021efe:	4630      	mov	r0, r6
 8021f00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8021f04:	4798      	blx	r3
 8021f06:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8021f0a:	9000      	str	r0, [sp, #0]
 8021f0c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8021f10:	6922      	ldr	r2, [r4, #16]
 8021f12:	ab02      	add	r3, sp, #8
 8021f14:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8021f16:	f7fa ffd5 	bl	801cec4 <uxr_prepare_output_stream>
 8021f1a:	e9c5 0700 	strd	r0, r7, [r5]
 8021f1e:	b198      	cbz	r0, 8021f48 <rmw_send_request+0x78>
 8021f20:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8021f24:	a902      	add	r1, sp, #8
 8021f26:	4630      	mov	r0, r6
 8021f28:	4798      	blx	r3
 8021f2a:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8021f2e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8021f32:	2b01      	cmp	r3, #1
 8021f34:	d00c      	beq.n	8021f50 <rmw_send_request+0x80>
 8021f36:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8021f38:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8021f3c:	f7fa f9c4 	bl	801c2c8 <uxr_run_session_until_confirm_delivery>
 8021f40:	4638      	mov	r0, r7
 8021f42:	b00b      	add	sp, #44	@ 0x2c
 8021f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021f48:	2001      	movs	r0, #1
 8021f4a:	b00b      	add	sp, #44	@ 0x2c
 8021f4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021f50:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8021f54:	f7f9 fdfe 	bl	801bb54 <uxr_flash_output_streams>
 8021f58:	4638      	mov	r0, r7
 8021f5a:	b00b      	add	sp, #44	@ 0x2c
 8021f5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021f60:	200c      	movs	r0, #12
 8021f62:	b00b      	add	sp, #44	@ 0x2c
 8021f64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021f68:	0802ad38 	.word	0x0802ad38

08021f6c <rmw_take_request>:
 8021f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021f70:	4605      	mov	r5, r0
 8021f72:	6800      	ldr	r0, [r0, #0]
 8021f74:	b089      	sub	sp, #36	@ 0x24
 8021f76:	460c      	mov	r4, r1
 8021f78:	4690      	mov	r8, r2
 8021f7a:	461e      	mov	r6, r3
 8021f7c:	b128      	cbz	r0, 8021f8a <rmw_take_request+0x1e>
 8021f7e:	4b28      	ldr	r3, [pc, #160]	@ (8022020 <rmw_take_request+0xb4>)
 8021f80:	6819      	ldr	r1, [r3, #0]
 8021f82:	f7de f95d 	bl	8000240 <strcmp>
 8021f86:	2800      	cmp	r0, #0
 8021f88:	d146      	bne.n	8022018 <rmw_take_request+0xac>
 8021f8a:	b10e      	cbz	r6, 8021f90 <rmw_take_request+0x24>
 8021f8c:	2300      	movs	r3, #0
 8021f8e:	7033      	strb	r3, [r6, #0]
 8021f90:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8021f94:	f7f7 ffec 	bl	8019f70 <rmw_uxrce_clean_expired_static_input_buffer>
 8021f98:	4648      	mov	r0, r9
 8021f9a:	f7f7 ffbf 	bl	8019f1c <rmw_uxrce_find_static_input_buffer_by_owner>
 8021f9e:	4607      	mov	r7, r0
 8021fa0:	b3b0      	cbz	r0, 8022010 <rmw_take_request+0xa4>
 8021fa2:	6885      	ldr	r5, [r0, #8]
 8021fa4:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 8021fa8:	f8d5 383c 	ldr.w	r3, [r5, #2108]	@ 0x83c
 8021fac:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8021fb0:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8021fb4:	7423      	strb	r3, [r4, #16]
 8021fb6:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	@ 0x834
 8021fba:	f895 3836 	ldrb.w	r3, [r5, #2102]	@ 0x836
 8021fbe:	f8a4 2011 	strh.w	r2, [r4, #17]
 8021fc2:	74e3      	strb	r3, [r4, #19]
 8021fc4:	f8d5 1828 	ldr.w	r1, [r5, #2088]	@ 0x828
 8021fc8:	f8d5 282c 	ldr.w	r2, [r5, #2092]	@ 0x82c
 8021fcc:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 8021fd0:	6161      	str	r1, [r4, #20]
 8021fd2:	61a2      	str	r2, [r4, #24]
 8021fd4:	61e3      	str	r3, [r4, #28]
 8021fd6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8021fda:	689b      	ldr	r3, [r3, #8]
 8021fdc:	4798      	blx	r3
 8021fde:	6844      	ldr	r4, [r0, #4]
 8021fe0:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8021fe4:	f105 0110 	add.w	r1, r5, #16
 8021fe8:	4668      	mov	r0, sp
 8021fea:	f7f9 f995 	bl	801b318 <ucdr_init_buffer>
 8021fee:	4641      	mov	r1, r8
 8021ff0:	68e3      	ldr	r3, [r4, #12]
 8021ff2:	4668      	mov	r0, sp
 8021ff4:	4798      	blx	r3
 8021ff6:	4639      	mov	r1, r7
 8021ff8:	4604      	mov	r4, r0
 8021ffa:	480a      	ldr	r0, [pc, #40]	@ (8022024 <rmw_take_request+0xb8>)
 8021ffc:	f7ff fafa 	bl	80215f4 <put_memory>
 8022000:	b106      	cbz	r6, 8022004 <rmw_take_request+0x98>
 8022002:	7034      	strb	r4, [r6, #0]
 8022004:	f084 0001 	eor.w	r0, r4, #1
 8022008:	b2c0      	uxtb	r0, r0
 802200a:	b009      	add	sp, #36	@ 0x24
 802200c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022010:	2001      	movs	r0, #1
 8022012:	b009      	add	sp, #36	@ 0x24
 8022014:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022018:	200c      	movs	r0, #12
 802201a:	b009      	add	sp, #36	@ 0x24
 802201c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022020:	0802ad38 	.word	0x0802ad38
 8022024:	20014994 	.word	0x20014994

08022028 <rmw_send_response>:
 8022028:	b5f0      	push	{r4, r5, r6, r7, lr}
 802202a:	4605      	mov	r5, r0
 802202c:	6800      	ldr	r0, [r0, #0]
 802202e:	b091      	sub	sp, #68	@ 0x44
 8022030:	460c      	mov	r4, r1
 8022032:	4616      	mov	r6, r2
 8022034:	b128      	cbz	r0, 8022042 <rmw_send_response+0x1a>
 8022036:	4b29      	ldr	r3, [pc, #164]	@ (80220dc <rmw_send_response+0xb4>)
 8022038:	6819      	ldr	r1, [r3, #0]
 802203a:	f7de f901 	bl	8000240 <strcmp>
 802203e:	2800      	cmp	r0, #0
 8022040:	d141      	bne.n	80220c6 <rmw_send_response+0x9e>
 8022042:	686d      	ldr	r5, [r5, #4]
 8022044:	68a1      	ldr	r1, [r4, #8]
 8022046:	6860      	ldr	r0, [r4, #4]
 8022048:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 802204a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 802204e:	9307      	str	r3, [sp, #28]
 8022050:	4623      	mov	r3, r4
 8022052:	9206      	str	r2, [sp, #24]
 8022054:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022058:	789b      	ldrb	r3, [r3, #2]
 802205a:	f88d 2017 	strb.w	r2, [sp, #23]
 802205e:	f88d 3016 	strb.w	r3, [sp, #22]
 8022062:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8022066:	68e2      	ldr	r2, [r4, #12]
 8022068:	f8ad 3014 	strh.w	r3, [sp, #20]
 802206c:	ab02      	add	r3, sp, #8
 802206e:	696c      	ldr	r4, [r5, #20]
 8022070:	c307      	stmia	r3!, {r0, r1, r2}
 8022072:	68e3      	ldr	r3, [r4, #12]
 8022074:	4798      	blx	r3
 8022076:	6844      	ldr	r4, [r0, #4]
 8022078:	4630      	mov	r0, r6
 802207a:	6923      	ldr	r3, [r4, #16]
 802207c:	4798      	blx	r3
 802207e:	f100 0318 	add.w	r3, r0, #24
 8022082:	6938      	ldr	r0, [r7, #16]
 8022084:	9300      	str	r3, [sp, #0]
 8022086:	ab08      	add	r3, sp, #32
 8022088:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 802208c:	692a      	ldr	r2, [r5, #16]
 802208e:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8022090:	f7fa ff18 	bl	801cec4 <uxr_prepare_output_stream>
 8022094:	b910      	cbnz	r0, 802209c <rmw_send_response+0x74>
 8022096:	2001      	movs	r0, #1
 8022098:	b011      	add	sp, #68	@ 0x44
 802209a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802209c:	a902      	add	r1, sp, #8
 802209e:	a808      	add	r0, sp, #32
 80220a0:	f7fc f848 	bl	801e134 <uxr_serialize_SampleIdentity>
 80220a4:	68a3      	ldr	r3, [r4, #8]
 80220a6:	a908      	add	r1, sp, #32
 80220a8:	4630      	mov	r0, r6
 80220aa:	4798      	blx	r3
 80220ac:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 80220b0:	6938      	ldr	r0, [r7, #16]
 80220b2:	2b01      	cmp	r3, #1
 80220b4:	d00a      	beq.n	80220cc <rmw_send_response+0xa4>
 80220b6:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80220b8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80220bc:	f7fa f904 	bl	801c2c8 <uxr_run_session_until_confirm_delivery>
 80220c0:	2000      	movs	r0, #0
 80220c2:	b011      	add	sp, #68	@ 0x44
 80220c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80220c6:	200c      	movs	r0, #12
 80220c8:	b011      	add	sp, #68	@ 0x44
 80220ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80220cc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80220d0:	f7f9 fd40 	bl	801bb54 <uxr_flash_output_streams>
 80220d4:	2000      	movs	r0, #0
 80220d6:	b011      	add	sp, #68	@ 0x44
 80220d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80220da:	bf00      	nop
 80220dc:	0802ad38 	.word	0x0802ad38

080220e0 <rmw_take_response>:
 80220e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80220e4:	4604      	mov	r4, r0
 80220e6:	6800      	ldr	r0, [r0, #0]
 80220e8:	b088      	sub	sp, #32
 80220ea:	460f      	mov	r7, r1
 80220ec:	4690      	mov	r8, r2
 80220ee:	461d      	mov	r5, r3
 80220f0:	b120      	cbz	r0, 80220fc <rmw_take_response+0x1c>
 80220f2:	4b1d      	ldr	r3, [pc, #116]	@ (8022168 <rmw_take_response+0x88>)
 80220f4:	6819      	ldr	r1, [r3, #0]
 80220f6:	f7de f8a3 	bl	8000240 <strcmp>
 80220fa:	bb68      	cbnz	r0, 8022158 <rmw_take_response+0x78>
 80220fc:	b10d      	cbz	r5, 8022102 <rmw_take_response+0x22>
 80220fe:	2300      	movs	r3, #0
 8022100:	702b      	strb	r3, [r5, #0]
 8022102:	6864      	ldr	r4, [r4, #4]
 8022104:	f7f7 ff34 	bl	8019f70 <rmw_uxrce_clean_expired_static_input_buffer>
 8022108:	4620      	mov	r0, r4
 802210a:	f7f7 ff07 	bl	8019f1c <rmw_uxrce_find_static_input_buffer_by_owner>
 802210e:	4606      	mov	r6, r0
 8022110:	b330      	cbz	r0, 8022160 <rmw_take_response+0x80>
 8022112:	6963      	ldr	r3, [r4, #20]
 8022114:	6884      	ldr	r4, [r0, #8]
 8022116:	68db      	ldr	r3, [r3, #12]
 8022118:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 802211c:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8022120:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8022124:	4798      	blx	r3
 8022126:	6847      	ldr	r7, [r0, #4]
 8022128:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 802212c:	f104 0110 	add.w	r1, r4, #16
 8022130:	4668      	mov	r0, sp
 8022132:	f7f9 f8f1 	bl	801b318 <ucdr_init_buffer>
 8022136:	4641      	mov	r1, r8
 8022138:	68fb      	ldr	r3, [r7, #12]
 802213a:	4668      	mov	r0, sp
 802213c:	4798      	blx	r3
 802213e:	4631      	mov	r1, r6
 8022140:	4604      	mov	r4, r0
 8022142:	480a      	ldr	r0, [pc, #40]	@ (802216c <rmw_take_response+0x8c>)
 8022144:	f7ff fa56 	bl	80215f4 <put_memory>
 8022148:	b105      	cbz	r5, 802214c <rmw_take_response+0x6c>
 802214a:	702c      	strb	r4, [r5, #0]
 802214c:	f084 0001 	eor.w	r0, r4, #1
 8022150:	b2c0      	uxtb	r0, r0
 8022152:	b008      	add	sp, #32
 8022154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022158:	200c      	movs	r0, #12
 802215a:	b008      	add	sp, #32
 802215c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022160:	2001      	movs	r0, #1
 8022162:	b008      	add	sp, #32
 8022164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022168:	0802ad38 	.word	0x0802ad38
 802216c:	20014994 	.word	0x20014994

08022170 <rmw_destroy_service>:
 8022170:	b570      	push	{r4, r5, r6, lr}
 8022172:	b128      	cbz	r0, 8022180 <rmw_destroy_service+0x10>
 8022174:	4604      	mov	r4, r0
 8022176:	6800      	ldr	r0, [r0, #0]
 8022178:	460d      	mov	r5, r1
 802217a:	f7f7 fff1 	bl	801a160 <is_uxrce_rmw_identifier_valid>
 802217e:	b910      	cbnz	r0, 8022186 <rmw_destroy_service+0x16>
 8022180:	2401      	movs	r4, #1
 8022182:	4620      	mov	r0, r4
 8022184:	bd70      	pop	{r4, r5, r6, pc}
 8022186:	6863      	ldr	r3, [r4, #4]
 8022188:	2b00      	cmp	r3, #0
 802218a:	d0f9      	beq.n	8022180 <rmw_destroy_service+0x10>
 802218c:	2d00      	cmp	r5, #0
 802218e:	d0f7      	beq.n	8022180 <rmw_destroy_service+0x10>
 8022190:	6828      	ldr	r0, [r5, #0]
 8022192:	f7f7 ffe5 	bl	801a160 <is_uxrce_rmw_identifier_valid>
 8022196:	2800      	cmp	r0, #0
 8022198:	d0f2      	beq.n	8022180 <rmw_destroy_service+0x10>
 802219a:	686e      	ldr	r6, [r5, #4]
 802219c:	2e00      	cmp	r6, #0
 802219e:	d0ef      	beq.n	8022180 <rmw_destroy_service+0x10>
 80221a0:	6864      	ldr	r4, [r4, #4]
 80221a2:	6932      	ldr	r2, [r6, #16]
 80221a4:	6920      	ldr	r0, [r4, #16]
 80221a6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80221aa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80221ae:	6819      	ldr	r1, [r3, #0]
 80221b0:	f001 fb60 	bl	8023874 <uxr_buffer_cancel_data>
 80221b4:	4602      	mov	r2, r0
 80221b6:	6920      	ldr	r0, [r4, #16]
 80221b8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80221bc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80221c0:	f7f7 ff54 	bl	801a06c <run_xrce_session>
 80221c4:	6920      	ldr	r0, [r4, #16]
 80221c6:	6932      	ldr	r2, [r6, #16]
 80221c8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80221cc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80221d0:	6819      	ldr	r1, [r3, #0]
 80221d2:	f7f9 f96d 	bl	801b4b0 <uxr_buffer_delete_entity>
 80221d6:	4602      	mov	r2, r0
 80221d8:	6920      	ldr	r0, [r4, #16]
 80221da:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80221de:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80221e2:	f7f7 ff43 	bl	801a06c <run_xrce_session>
 80221e6:	4603      	mov	r3, r0
 80221e8:	4628      	mov	r0, r5
 80221ea:	2b00      	cmp	r3, #0
 80221ec:	bf14      	ite	ne
 80221ee:	2400      	movne	r4, #0
 80221f0:	2402      	moveq	r4, #2
 80221f2:	f7f7 fe01 	bl	8019df8 <rmw_uxrce_fini_service_memory>
 80221f6:	e7c4      	b.n	8022182 <rmw_destroy_service+0x12>

080221f8 <rmw_create_subscription>:
 80221f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80221fc:	b08d      	sub	sp, #52	@ 0x34
 80221fe:	2900      	cmp	r1, #0
 8022200:	f000 80d8 	beq.w	80223b4 <rmw_create_subscription+0x1bc>
 8022204:	4604      	mov	r4, r0
 8022206:	2800      	cmp	r0, #0
 8022208:	f000 80d4 	beq.w	80223b4 <rmw_create_subscription+0x1bc>
 802220c:	6800      	ldr	r0, [r0, #0]
 802220e:	460e      	mov	r6, r1
 8022210:	4615      	mov	r5, r2
 8022212:	461f      	mov	r7, r3
 8022214:	f7f7 ffa4 	bl	801a160 <is_uxrce_rmw_identifier_valid>
 8022218:	f080 0001 	eor.w	r0, r0, #1
 802221c:	b2c0      	uxtb	r0, r0
 802221e:	2800      	cmp	r0, #0
 8022220:	f040 80c8 	bne.w	80223b4 <rmw_create_subscription+0x1bc>
 8022224:	2d00      	cmp	r5, #0
 8022226:	f000 80c5 	beq.w	80223b4 <rmw_create_subscription+0x1bc>
 802222a:	782b      	ldrb	r3, [r5, #0]
 802222c:	2b00      	cmp	r3, #0
 802222e:	f000 80c1 	beq.w	80223b4 <rmw_create_subscription+0x1bc>
 8022232:	2f00      	cmp	r7, #0
 8022234:	f000 80be 	beq.w	80223b4 <rmw_create_subscription+0x1bc>
 8022238:	4867      	ldr	r0, [pc, #412]	@ (80223d8 <rmw_create_subscription+0x1e0>)
 802223a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 802223e:	f7ff f9c9 	bl	80215d4 <get_memory>
 8022242:	4604      	mov	r4, r0
 8022244:	2800      	cmp	r0, #0
 8022246:	f000 80b6 	beq.w	80223b6 <rmw_create_subscription+0x1be>
 802224a:	f8d0 8008 	ldr.w	r8, [r0, #8]
 802224e:	f108 0a98 	add.w	sl, r8, #152	@ 0x98
 8022252:	f8c8 8080 	str.w	r8, [r8, #128]	@ 0x80
 8022256:	f7ff fa25 	bl	80216a4 <rmw_get_implementation_identifier>
 802225a:	f8c8 007c 	str.w	r0, [r8, #124]	@ 0x7c
 802225e:	f8c8 a084 	str.w	sl, [r8, #132]	@ 0x84
 8022262:	4628      	mov	r0, r5
 8022264:	f7dd fff6 	bl	8000254 <strlen>
 8022268:	3001      	adds	r0, #1
 802226a:	f108 047c 	add.w	r4, r8, #124	@ 0x7c
 802226e:	283c      	cmp	r0, #60	@ 0x3c
 8022270:	f200 80a5 	bhi.w	80223be <rmw_create_subscription+0x1c6>
 8022274:	462b      	mov	r3, r5
 8022276:	4a59      	ldr	r2, [pc, #356]	@ (80223dc <rmw_create_subscription+0x1e4>)
 8022278:	213c      	movs	r1, #60	@ 0x3c
 802227a:	4650      	mov	r0, sl
 802227c:	f003 f936 	bl	80254ec <sniprintf>
 8022280:	4639      	mov	r1, r7
 8022282:	2250      	movs	r2, #80	@ 0x50
 8022284:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 8022288:	f8c8 9020 	str.w	r9, [r8, #32]
 802228c:	f003 fbc9 	bl	8025a22 <memcpy>
 8022290:	4630      	mov	r0, r6
 8022292:	4953      	ldr	r1, [pc, #332]	@ (80223e0 <rmw_create_subscription+0x1e8>)
 8022294:	f7f7 ff72 	bl	801a17c <get_message_typesupport_handle>
 8022298:	2800      	cmp	r0, #0
 802229a:	f000 8090 	beq.w	80223be <rmw_create_subscription+0x1c6>
 802229e:	6842      	ldr	r2, [r0, #4]
 80222a0:	f8c8 2018 	str.w	r2, [r8, #24]
 80222a4:	2a00      	cmp	r2, #0
 80222a6:	f000 808a 	beq.w	80223be <rmw_create_subscription+0x1c6>
 80222aa:	4629      	mov	r1, r5
 80222ac:	463b      	mov	r3, r7
 80222ae:	4648      	mov	r0, r9
 80222b0:	f7ff fc86 	bl	8021bc0 <create_topic>
 80222b4:	f8c8 001c 	str.w	r0, [r8, #28]
 80222b8:	2800      	cmp	r0, #0
 80222ba:	f000 8085 	beq.w	80223c8 <rmw_create_subscription+0x1d0>
 80222be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80222c2:	2104      	movs	r1, #4
 80222c4:	2506      	movs	r5, #6
 80222c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80222ca:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 80222ce:	1c42      	adds	r2, r0, #1
 80222d0:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 80222d4:	f7f9 faee 	bl	801b8b4 <uxr_object_id>
 80222d8:	f8c8 0010 	str.w	r0, [r8, #16]
 80222dc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80222e0:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 80222e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80222e8:	9500      	str	r5, [sp, #0]
 80222ea:	6819      	ldr	r1, [r3, #0]
 80222ec:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80222f0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80222f4:	f7f9 f9c0 	bl	801b678 <uxr_buffer_create_subscriber_bin>
 80222f8:	4602      	mov	r2, r0
 80222fa:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80222fe:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8022302:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8022306:	f7f7 feb1 	bl	801a06c <run_xrce_session>
 802230a:	2800      	cmp	r0, #0
 802230c:	d057      	beq.n	80223be <rmw_create_subscription+0x1c6>
 802230e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8022312:	4629      	mov	r1, r5
 8022314:	ae08      	add	r6, sp, #32
 8022316:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 802231a:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 802231e:	1c42      	adds	r2, r0, #1
 8022320:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8022324:	f7f9 fac6 	bl	801b8b4 <uxr_object_id>
 8022328:	f8d9 a010 	ldr.w	sl, [r9, #16]
 802232c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8022330:	4639      	mov	r1, r7
 8022332:	f8c8 0014 	str.w	r0, [r8, #20]
 8022336:	4630      	mov	r0, r6
 8022338:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 802233c:	9305      	str	r3, [sp, #20]
 802233e:	f7f7 feb1 	bl	801a0a4 <convert_qos_profile>
 8022342:	9503      	str	r5, [sp, #12]
 8022344:	9b05      	ldr	r3, [sp, #20]
 8022346:	e896 0003 	ldmia.w	r6, {r0, r1}
 802234a:	9001      	str	r0, [sp, #4]
 802234c:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8022350:	f8ad 1008 	strh.w	r1, [sp, #8]
 8022354:	691b      	ldr	r3, [r3, #16]
 8022356:	9300      	str	r3, [sp, #0]
 8022358:	f8db 1000 	ldr.w	r1, [fp]
 802235c:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 8022360:	f7f9 fa30 	bl	801b7c4 <uxr_buffer_create_datareader_bin>
 8022364:	4602      	mov	r2, r0
 8022366:	f8d9 0010 	ldr.w	r0, [r9, #16]
 802236a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 802236e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8022372:	f7f7 fe7b 	bl	801a06c <run_xrce_session>
 8022376:	b310      	cbz	r0, 80223be <rmw_create_subscription+0x1c6>
 8022378:	7a3b      	ldrb	r3, [r7, #8]
 802237a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802237e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8022382:	2b02      	cmp	r3, #2
 8022384:	920a      	str	r2, [sp, #40]	@ 0x28
 8022386:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 802238a:	f04f 0200 	mov.w	r2, #0
 802238e:	bf08      	it	eq
 8022390:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8022394:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8022398:	bf18      	it	ne
 802239a:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	@ 0xd4
 802239e:	920b      	str	r2, [sp, #44]	@ 0x2c
 80223a0:	9307      	str	r3, [sp, #28]
 80223a2:	ab0a      	add	r3, sp, #40	@ 0x28
 80223a4:	9300      	str	r3, [sp, #0]
 80223a6:	9b07      	ldr	r3, [sp, #28]
 80223a8:	f8d8 2014 	ldr.w	r2, [r8, #20]
 80223ac:	6809      	ldr	r1, [r1, #0]
 80223ae:	f001 fa27 	bl	8023800 <uxr_buffer_request_data>
 80223b2:	e000      	b.n	80223b6 <rmw_create_subscription+0x1be>
 80223b4:	2400      	movs	r4, #0
 80223b6:	4620      	mov	r0, r4
 80223b8:	b00d      	add	sp, #52	@ 0x34
 80223ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80223be:	f8d8 001c 	ldr.w	r0, [r8, #28]
 80223c2:	b108      	cbz	r0, 80223c8 <rmw_create_subscription+0x1d0>
 80223c4:	f7f7 fd44 	bl	8019e50 <rmw_uxrce_fini_topic_memory>
 80223c8:	4620      	mov	r0, r4
 80223ca:	2400      	movs	r4, #0
 80223cc:	f7f7 fcfe 	bl	8019dcc <rmw_uxrce_fini_subscription_memory>
 80223d0:	4620      	mov	r0, r4
 80223d2:	b00d      	add	sp, #52	@ 0x34
 80223d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80223d8:	200149a4 	.word	0x200149a4
 80223dc:	0802a4c0 	.word	0x0802a4c0
 80223e0:	0802a48c 	.word	0x0802a48c

080223e4 <rmw_subscription_get_actual_qos>:
 80223e4:	b178      	cbz	r0, 8022406 <rmw_subscription_get_actual_qos+0x22>
 80223e6:	b510      	push	{r4, lr}
 80223e8:	fab1 f481 	clz	r4, r1
 80223ec:	0964      	lsrs	r4, r4, #5
 80223ee:	b141      	cbz	r1, 8022402 <rmw_subscription_get_actual_qos+0x1e>
 80223f0:	6843      	ldr	r3, [r0, #4]
 80223f2:	2250      	movs	r2, #80	@ 0x50
 80223f4:	4608      	mov	r0, r1
 80223f6:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80223fa:	f003 fb12 	bl	8025a22 <memcpy>
 80223fe:	4620      	mov	r0, r4
 8022400:	bd10      	pop	{r4, pc}
 8022402:	200b      	movs	r0, #11
 8022404:	bd10      	pop	{r4, pc}
 8022406:	200b      	movs	r0, #11
 8022408:	4770      	bx	lr
 802240a:	bf00      	nop

0802240c <rmw_destroy_subscription>:
 802240c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022410:	b128      	cbz	r0, 802241e <rmw_destroy_subscription+0x12>
 8022412:	4604      	mov	r4, r0
 8022414:	6800      	ldr	r0, [r0, #0]
 8022416:	460d      	mov	r5, r1
 8022418:	f7f7 fea2 	bl	801a160 <is_uxrce_rmw_identifier_valid>
 802241c:	b918      	cbnz	r0, 8022426 <rmw_destroy_subscription+0x1a>
 802241e:	2401      	movs	r4, #1
 8022420:	4620      	mov	r0, r4
 8022422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022426:	6863      	ldr	r3, [r4, #4]
 8022428:	2b00      	cmp	r3, #0
 802242a:	d0f8      	beq.n	802241e <rmw_destroy_subscription+0x12>
 802242c:	fab5 f485 	clz	r4, r5
 8022430:	0964      	lsrs	r4, r4, #5
 8022432:	2d00      	cmp	r5, #0
 8022434:	d0f3      	beq.n	802241e <rmw_destroy_subscription+0x12>
 8022436:	6828      	ldr	r0, [r5, #0]
 8022438:	f7f7 fe92 	bl	801a160 <is_uxrce_rmw_identifier_valid>
 802243c:	2800      	cmp	r0, #0
 802243e:	d0ee      	beq.n	802241e <rmw_destroy_subscription+0x12>
 8022440:	686e      	ldr	r6, [r5, #4]
 8022442:	2e00      	cmp	r6, #0
 8022444:	d0eb      	beq.n	802241e <rmw_destroy_subscription+0x12>
 8022446:	6a37      	ldr	r7, [r6, #32]
 8022448:	6972      	ldr	r2, [r6, #20]
 802244a:	6938      	ldr	r0, [r7, #16]
 802244c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8022450:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8022454:	6819      	ldr	r1, [r3, #0]
 8022456:	f001 fa0d 	bl	8023874 <uxr_buffer_cancel_data>
 802245a:	4602      	mov	r2, r0
 802245c:	6938      	ldr	r0, [r7, #16]
 802245e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8022462:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8022466:	f7f7 fe01 	bl	801a06c <run_xrce_session>
 802246a:	69f0      	ldr	r0, [r6, #28]
 802246c:	f7ff fbf8 	bl	8021c60 <destroy_topic>
 8022470:	6a33      	ldr	r3, [r6, #32]
 8022472:	6972      	ldr	r2, [r6, #20]
 8022474:	6918      	ldr	r0, [r3, #16]
 8022476:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 802247a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 802247e:	6819      	ldr	r1, [r3, #0]
 8022480:	f7f9 f816 	bl	801b4b0 <uxr_buffer_delete_entity>
 8022484:	6a33      	ldr	r3, [r6, #32]
 8022486:	4680      	mov	r8, r0
 8022488:	6932      	ldr	r2, [r6, #16]
 802248a:	6918      	ldr	r0, [r3, #16]
 802248c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8022490:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8022494:	6819      	ldr	r1, [r3, #0]
 8022496:	f7f9 f80b 	bl	801b4b0 <uxr_buffer_delete_entity>
 802249a:	4606      	mov	r6, r0
 802249c:	6938      	ldr	r0, [r7, #16]
 802249e:	4642      	mov	r2, r8
 80224a0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80224a4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80224a8:	f7f7 fde0 	bl	801a06c <run_xrce_session>
 80224ac:	693f      	ldr	r7, [r7, #16]
 80224ae:	4632      	mov	r2, r6
 80224b0:	4606      	mov	r6, r0
 80224b2:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80224b6:	4638      	mov	r0, r7
 80224b8:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 80224bc:	f7f7 fdd6 	bl	801a06c <run_xrce_session>
 80224c0:	b126      	cbz	r6, 80224cc <rmw_destroy_subscription+0xc0>
 80224c2:	b118      	cbz	r0, 80224cc <rmw_destroy_subscription+0xc0>
 80224c4:	4628      	mov	r0, r5
 80224c6:	f7f7 fc81 	bl	8019dcc <rmw_uxrce_fini_subscription_memory>
 80224ca:	e7a9      	b.n	8022420 <rmw_destroy_subscription+0x14>
 80224cc:	2402      	movs	r4, #2
 80224ce:	e7f9      	b.n	80224c4 <rmw_destroy_subscription+0xb8>

080224d0 <rmw_take_with_info>:
 80224d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80224d2:	4604      	mov	r4, r0
 80224d4:	6800      	ldr	r0, [r0, #0]
 80224d6:	b089      	sub	sp, #36	@ 0x24
 80224d8:	460f      	mov	r7, r1
 80224da:	4615      	mov	r5, r2
 80224dc:	b128      	cbz	r0, 80224ea <rmw_take_with_info+0x1a>
 80224de:	4b24      	ldr	r3, [pc, #144]	@ (8022570 <rmw_take_with_info+0xa0>)
 80224e0:	6819      	ldr	r1, [r3, #0]
 80224e2:	f7dd fead 	bl	8000240 <strcmp>
 80224e6:	2800      	cmp	r0, #0
 80224e8:	d13e      	bne.n	8022568 <rmw_take_with_info+0x98>
 80224ea:	b305      	cbz	r5, 802252e <rmw_take_with_info+0x5e>
 80224ec:	2300      	movs	r3, #0
 80224ee:	6864      	ldr	r4, [r4, #4]
 80224f0:	702b      	strb	r3, [r5, #0]
 80224f2:	f7f7 fd3d 	bl	8019f70 <rmw_uxrce_clean_expired_static_input_buffer>
 80224f6:	4620      	mov	r0, r4
 80224f8:	f7f7 fd10 	bl	8019f1c <rmw_uxrce_find_static_input_buffer_by_owner>
 80224fc:	4606      	mov	r6, r0
 80224fe:	b1f0      	cbz	r0, 802253e <rmw_take_with_info+0x6e>
 8022500:	6881      	ldr	r1, [r0, #8]
 8022502:	4668      	mov	r0, sp
 8022504:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8022508:	3110      	adds	r1, #16
 802250a:	f7f8 ff05 	bl	801b318 <ucdr_init_buffer>
 802250e:	69a3      	ldr	r3, [r4, #24]
 8022510:	4639      	mov	r1, r7
 8022512:	4668      	mov	r0, sp
 8022514:	68db      	ldr	r3, [r3, #12]
 8022516:	4798      	blx	r3
 8022518:	4604      	mov	r4, r0
 802251a:	4631      	mov	r1, r6
 802251c:	4815      	ldr	r0, [pc, #84]	@ (8022574 <rmw_take_with_info+0xa4>)
 802251e:	f7ff f869 	bl	80215f4 <put_memory>
 8022522:	702c      	strb	r4, [r5, #0]
 8022524:	f084 0001 	eor.w	r0, r4, #1
 8022528:	b2c0      	uxtb	r0, r0
 802252a:	b009      	add	sp, #36	@ 0x24
 802252c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802252e:	6864      	ldr	r4, [r4, #4]
 8022530:	f7f7 fd1e 	bl	8019f70 <rmw_uxrce_clean_expired_static_input_buffer>
 8022534:	4620      	mov	r0, r4
 8022536:	f7f7 fcf1 	bl	8019f1c <rmw_uxrce_find_static_input_buffer_by_owner>
 802253a:	4605      	mov	r5, r0
 802253c:	b910      	cbnz	r0, 8022544 <rmw_take_with_info+0x74>
 802253e:	2001      	movs	r0, #1
 8022540:	b009      	add	sp, #36	@ 0x24
 8022542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022544:	68a9      	ldr	r1, [r5, #8]
 8022546:	4668      	mov	r0, sp
 8022548:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 802254c:	3110      	adds	r1, #16
 802254e:	f7f8 fee3 	bl	801b318 <ucdr_init_buffer>
 8022552:	69a3      	ldr	r3, [r4, #24]
 8022554:	4639      	mov	r1, r7
 8022556:	4668      	mov	r0, sp
 8022558:	68db      	ldr	r3, [r3, #12]
 802255a:	4798      	blx	r3
 802255c:	4629      	mov	r1, r5
 802255e:	4604      	mov	r4, r0
 8022560:	4804      	ldr	r0, [pc, #16]	@ (8022574 <rmw_take_with_info+0xa4>)
 8022562:	f7ff f847 	bl	80215f4 <put_memory>
 8022566:	e7dd      	b.n	8022524 <rmw_take_with_info+0x54>
 8022568:	200c      	movs	r0, #12
 802256a:	b009      	add	sp, #36	@ 0x24
 802256c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802256e:	bf00      	nop
 8022570:	0802ad38 	.word	0x0802ad38
 8022574:	20014994 	.word	0x20014994

08022578 <rmw_uxrce_transport_init>:
 8022578:	b508      	push	{r3, lr}
 802257a:	b108      	cbz	r0, 8022580 <rmw_uxrce_transport_init+0x8>
 802257c:	f100 0210 	add.w	r2, r0, #16
 8022580:	b139      	cbz	r1, 8022592 <rmw_uxrce_transport_init+0x1a>
 8022582:	6949      	ldr	r1, [r1, #20]
 8022584:	4610      	mov	r0, r2
 8022586:	f000 fbb9 	bl	8022cfc <uxr_init_custom_transport>
 802258a:	f080 0001 	eor.w	r0, r0, #1
 802258e:	b2c0      	uxtb	r0, r0
 8022590:	bd08      	pop	{r3, pc}
 8022592:	4b04      	ldr	r3, [pc, #16]	@ (80225a4 <rmw_uxrce_transport_init+0x2c>)
 8022594:	4610      	mov	r0, r2
 8022596:	6859      	ldr	r1, [r3, #4]
 8022598:	f000 fbb0 	bl	8022cfc <uxr_init_custom_transport>
 802259c:	f080 0001 	eor.w	r0, r0, #1
 80225a0:	b2c0      	uxtb	r0, r0
 80225a2:	bd08      	pop	{r3, pc}
 80225a4:	2001006c 	.word	0x2001006c

080225a8 <rmw_wait>:
 80225a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80225ac:	4698      	mov	r8, r3
 80225ae:	ea40 0301 	orr.w	r3, r0, r1
 80225b2:	b089      	sub	sp, #36	@ 0x24
 80225b4:	ea48 0303 	orr.w	r3, r8, r3
 80225b8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80225ba:	4313      	orrs	r3, r2
 80225bc:	f000 8106 	beq.w	80227cc <rmw_wait+0x224>
 80225c0:	4605      	mov	r5, r0
 80225c2:	460e      	mov	r6, r1
 80225c4:	4691      	mov	r9, r2
 80225c6:	b16c      	cbz	r4, 80225e4 <rmw_wait+0x3c>
 80225c8:	4ba6      	ldr	r3, [pc, #664]	@ (8022864 <rmw_wait+0x2bc>)
 80225ca:	af04      	add	r7, sp, #16
 80225cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80225ce:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80225d2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80225d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80225da:	f7fe fe1d 	bl	8021218 <rmw_time_equal>
 80225de:	2800      	cmp	r0, #0
 80225e0:	f000 810b 	beq.w	80227fa <rmw_wait+0x252>
 80225e4:	f04f 37ff 	mov.w	r7, #4294967295
 80225e8:	f7f7 fcc2 	bl	8019f70 <rmw_uxrce_clean_expired_static_input_buffer>
 80225ec:	4b9e      	ldr	r3, [pc, #632]	@ (8022868 <rmw_wait+0x2c0>)
 80225ee:	681c      	ldr	r4, [r3, #0]
 80225f0:	b14c      	cbz	r4, 8022606 <rmw_wait+0x5e>
 80225f2:	4623      	mov	r3, r4
 80225f4:	2100      	movs	r1, #0
 80225f6:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80225fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80225fe:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8022602:	2b00      	cmp	r3, #0
 8022604:	d1f7      	bne.n	80225f6 <rmw_wait+0x4e>
 8022606:	f1b9 0f00 	cmp.w	r9, #0
 802260a:	d011      	beq.n	8022630 <rmw_wait+0x88>
 802260c:	f8d9 1000 	ldr.w	r1, [r9]
 8022610:	b171      	cbz	r1, 8022630 <rmw_wait+0x88>
 8022612:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8022616:	2300      	movs	r3, #0
 8022618:	2001      	movs	r0, #1
 802261a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 802261e:	3301      	adds	r3, #1
 8022620:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8022622:	4299      	cmp	r1, r3
 8022624:	6912      	ldr	r2, [r2, #16]
 8022626:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 802262a:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 802262e:	d1f4      	bne.n	802261a <rmw_wait+0x72>
 8022630:	f1b8 0f00 	cmp.w	r8, #0
 8022634:	d011      	beq.n	802265a <rmw_wait+0xb2>
 8022636:	f8d8 1000 	ldr.w	r1, [r8]
 802263a:	b171      	cbz	r1, 802265a <rmw_wait+0xb2>
 802263c:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8022640:	2300      	movs	r3, #0
 8022642:	2001      	movs	r0, #1
 8022644:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8022648:	3301      	adds	r3, #1
 802264a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 802264c:	4299      	cmp	r1, r3
 802264e:	6912      	ldr	r2, [r2, #16]
 8022650:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8022654:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8022658:	d1f4      	bne.n	8022644 <rmw_wait+0x9c>
 802265a:	b185      	cbz	r5, 802267e <rmw_wait+0xd6>
 802265c:	6829      	ldr	r1, [r5, #0]
 802265e:	b171      	cbz	r1, 802267e <rmw_wait+0xd6>
 8022660:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8022664:	2300      	movs	r3, #0
 8022666:	2001      	movs	r0, #1
 8022668:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 802266c:	3301      	adds	r3, #1
 802266e:	6a12      	ldr	r2, [r2, #32]
 8022670:	4299      	cmp	r1, r3
 8022672:	6912      	ldr	r2, [r2, #16]
 8022674:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8022678:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 802267c:	d1f4      	bne.n	8022668 <rmw_wait+0xc0>
 802267e:	b344      	cbz	r4, 80226d2 <rmw_wait+0x12a>
 8022680:	4622      	mov	r2, r4
 8022682:	2300      	movs	r3, #0
 8022684:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8022688:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 802268c:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8022690:	440b      	add	r3, r1
 8022692:	b2db      	uxtb	r3, r3
 8022694:	2a00      	cmp	r2, #0
 8022696:	d1f5      	bne.n	8022684 <rmw_wait+0xdc>
 8022698:	2b00      	cmp	r3, #0
 802269a:	d05f      	beq.n	802275c <rmw_wait+0x1b4>
 802269c:	1c7a      	adds	r2, r7, #1
 802269e:	d00d      	beq.n	80226bc <rmw_wait+0x114>
 80226a0:	ee07 7a90 	vmov	s15, r7
 80226a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80226a8:	ee07 3a90 	vmov	s15, r3
 80226ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80226b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80226b4:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80226b8:	ee17 7a90 	vmov	r7, s15
 80226bc:	68a0      	ldr	r0, [r4, #8]
 80226be:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80226c2:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 80226c6:	2b00      	cmp	r3, #0
 80226c8:	f040 808d 	bne.w	80227e6 <rmw_wait+0x23e>
 80226cc:	6864      	ldr	r4, [r4, #4]
 80226ce:	2c00      	cmp	r4, #0
 80226d0:	d1f4      	bne.n	80226bc <rmw_wait+0x114>
 80226d2:	f1b9 0f00 	cmp.w	r9, #0
 80226d6:	f000 80a1 	beq.w	802281c <rmw_wait+0x274>
 80226da:	f8d9 7000 	ldr.w	r7, [r9]
 80226de:	2f00      	cmp	r7, #0
 80226e0:	f000 80a4 	beq.w	802282c <rmw_wait+0x284>
 80226e4:	2400      	movs	r4, #0
 80226e6:	4627      	mov	r7, r4
 80226e8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80226ec:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80226f0:	f7f7 fc14 	bl	8019f1c <rmw_uxrce_find_static_input_buffer_by_owner>
 80226f4:	2800      	cmp	r0, #0
 80226f6:	d03b      	beq.n	8022770 <rmw_wait+0x1c8>
 80226f8:	3401      	adds	r4, #1
 80226fa:	f8d9 3000 	ldr.w	r3, [r9]
 80226fe:	2701      	movs	r7, #1
 8022700:	42a3      	cmp	r3, r4
 8022702:	d8f1      	bhi.n	80226e8 <rmw_wait+0x140>
 8022704:	2701      	movs	r7, #1
 8022706:	f1b8 0f00 	cmp.w	r8, #0
 802270a:	d010      	beq.n	802272e <rmw_wait+0x186>
 802270c:	f8d8 3000 	ldr.w	r3, [r8]
 8022710:	b16b      	cbz	r3, 802272e <rmw_wait+0x186>
 8022712:	2400      	movs	r4, #0
 8022714:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8022718:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802271c:	f7f7 fbfe 	bl	8019f1c <rmw_uxrce_find_static_input_buffer_by_owner>
 8022720:	b370      	cbz	r0, 8022780 <rmw_wait+0x1d8>
 8022722:	3401      	adds	r4, #1
 8022724:	f8d8 3000 	ldr.w	r3, [r8]
 8022728:	2701      	movs	r7, #1
 802272a:	42a3      	cmp	r3, r4
 802272c:	d8f2      	bhi.n	8022714 <rmw_wait+0x16c>
 802272e:	2d00      	cmp	r5, #0
 8022730:	d035      	beq.n	802279e <rmw_wait+0x1f6>
 8022732:	682b      	ldr	r3, [r5, #0]
 8022734:	b39b      	cbz	r3, 802279e <rmw_wait+0x1f6>
 8022736:	2400      	movs	r4, #0
 8022738:	686b      	ldr	r3, [r5, #4]
 802273a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802273e:	f7f7 fbed 	bl	8019f1c <rmw_uxrce_find_static_input_buffer_by_owner>
 8022742:	b328      	cbz	r0, 8022790 <rmw_wait+0x1e8>
 8022744:	3401      	adds	r4, #1
 8022746:	682b      	ldr	r3, [r5, #0]
 8022748:	2701      	movs	r7, #1
 802274a:	42a3      	cmp	r3, r4
 802274c:	d8f4      	bhi.n	8022738 <rmw_wait+0x190>
 802274e:	2e00      	cmp	r6, #0
 8022750:	d03c      	beq.n	80227cc <rmw_wait+0x224>
 8022752:	6834      	ldr	r4, [r6, #0]
 8022754:	2c00      	cmp	r4, #0
 8022756:	d039      	beq.n	80227cc <rmw_wait+0x224>
 8022758:	2701      	movs	r7, #1
 802275a:	e023      	b.n	80227a4 <rmw_wait+0x1fc>
 802275c:	68a0      	ldr	r0, [r4, #8]
 802275e:	2100      	movs	r1, #0
 8022760:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8022764:	f7f9 fd76 	bl	801c254 <uxr_run_session_timeout>
 8022768:	6864      	ldr	r4, [r4, #4]
 802276a:	2c00      	cmp	r4, #0
 802276c:	d1f6      	bne.n	802275c <rmw_wait+0x1b4>
 802276e:	e7b0      	b.n	80226d2 <rmw_wait+0x12a>
 8022770:	e9d9 3200 	ldrd	r3, r2, [r9]
 8022774:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8022778:	3401      	adds	r4, #1
 802277a:	42a3      	cmp	r3, r4
 802277c:	d8b4      	bhi.n	80226e8 <rmw_wait+0x140>
 802277e:	e7c2      	b.n	8022706 <rmw_wait+0x15e>
 8022780:	e9d8 3200 	ldrd	r3, r2, [r8]
 8022784:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8022788:	3401      	adds	r4, #1
 802278a:	429c      	cmp	r4, r3
 802278c:	d3c2      	bcc.n	8022714 <rmw_wait+0x16c>
 802278e:	e7ce      	b.n	802272e <rmw_wait+0x186>
 8022790:	e9d5 3200 	ldrd	r3, r2, [r5]
 8022794:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8022798:	3401      	adds	r4, #1
 802279a:	42a3      	cmp	r3, r4
 802279c:	d8cc      	bhi.n	8022738 <rmw_wait+0x190>
 802279e:	b1a6      	cbz	r6, 80227ca <rmw_wait+0x222>
 80227a0:	6834      	ldr	r4, [r6, #0]
 80227a2:	b194      	cbz	r4, 80227ca <rmw_wait+0x222>
 80227a4:	2300      	movs	r3, #0
 80227a6:	461d      	mov	r5, r3
 80227a8:	e004      	b.n	80227b4 <rmw_wait+0x20c>
 80227aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80227ae:	3301      	adds	r3, #1
 80227b0:	42a3      	cmp	r3, r4
 80227b2:	d00a      	beq.n	80227ca <rmw_wait+0x222>
 80227b4:	6870      	ldr	r0, [r6, #4]
 80227b6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80227ba:	7c0a      	ldrb	r2, [r1, #16]
 80227bc:	2a00      	cmp	r2, #0
 80227be:	d0f4      	beq.n	80227aa <rmw_wait+0x202>
 80227c0:	3301      	adds	r3, #1
 80227c2:	4617      	mov	r7, r2
 80227c4:	740d      	strb	r5, [r1, #16]
 80227c6:	42a3      	cmp	r3, r4
 80227c8:	d1f4      	bne.n	80227b4 <rmw_wait+0x20c>
 80227ca:	b147      	cbz	r7, 80227de <rmw_wait+0x236>
 80227cc:	2000      	movs	r0, #0
 80227ce:	b009      	add	sp, #36	@ 0x24
 80227d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80227d4:	b11e      	cbz	r6, 80227de <rmw_wait+0x236>
 80227d6:	6834      	ldr	r4, [r6, #0]
 80227d8:	462f      	mov	r7, r5
 80227da:	2c00      	cmp	r4, #0
 80227dc:	d1e2      	bne.n	80227a4 <rmw_wait+0x1fc>
 80227de:	2002      	movs	r0, #2
 80227e0:	b009      	add	sp, #36	@ 0x24
 80227e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80227e6:	4639      	mov	r1, r7
 80227e8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80227ec:	f7f9 fd4c 	bl	801c288 <uxr_run_session_until_data>
 80227f0:	6864      	ldr	r4, [r4, #4]
 80227f2:	2c00      	cmp	r4, #0
 80227f4:	f47f af62 	bne.w	80226bc <rmw_wait+0x114>
 80227f8:	e76b      	b.n	80226d2 <rmw_wait+0x12a>
 80227fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80227fe:	f7fe fd61 	bl	80212c4 <rmw_time_total_nsec>
 8022802:	2300      	movs	r3, #0
 8022804:	4a19      	ldr	r2, [pc, #100]	@ (802286c <rmw_wait+0x2c4>)
 8022806:	f7dd fdd3 	bl	80003b0 <__aeabi_uldivmod>
 802280a:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 802280e:	4607      	mov	r7, r0
 8022810:	f171 0300 	sbcs.w	r3, r1, #0
 8022814:	bfa8      	it	ge
 8022816:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 802281a:	e6e5      	b.n	80225e8 <rmw_wait+0x40>
 802281c:	f1b8 0f00 	cmp.w	r8, #0
 8022820:	d00f      	beq.n	8022842 <rmw_wait+0x29a>
 8022822:	f8d8 3000 	ldr.w	r3, [r8]
 8022826:	b193      	cbz	r3, 802284e <rmw_wait+0x2a6>
 8022828:	464f      	mov	r7, r9
 802282a:	e772      	b.n	8022712 <rmw_wait+0x16a>
 802282c:	f1b8 0f00 	cmp.w	r8, #0
 8022830:	d007      	beq.n	8022842 <rmw_wait+0x29a>
 8022832:	f8d8 3000 	ldr.w	r3, [r8]
 8022836:	2b00      	cmp	r3, #0
 8022838:	f47f af6b 	bne.w	8022712 <rmw_wait+0x16a>
 802283c:	b155      	cbz	r5, 8022854 <rmw_wait+0x2ac>
 802283e:	461f      	mov	r7, r3
 8022840:	e777      	b.n	8022732 <rmw_wait+0x18a>
 8022842:	2d00      	cmp	r5, #0
 8022844:	d0c6      	beq.n	80227d4 <rmw_wait+0x22c>
 8022846:	682b      	ldr	r3, [r5, #0]
 8022848:	b143      	cbz	r3, 802285c <rmw_wait+0x2b4>
 802284a:	4647      	mov	r7, r8
 802284c:	e773      	b.n	8022736 <rmw_wait+0x18e>
 802284e:	b10d      	cbz	r5, 8022854 <rmw_wait+0x2ac>
 8022850:	464f      	mov	r7, r9
 8022852:	e76e      	b.n	8022732 <rmw_wait+0x18a>
 8022854:	462f      	mov	r7, r5
 8022856:	2e00      	cmp	r6, #0
 8022858:	d1a2      	bne.n	80227a0 <rmw_wait+0x1f8>
 802285a:	e7c0      	b.n	80227de <rmw_wait+0x236>
 802285c:	4647      	mov	r7, r8
 802285e:	2e00      	cmp	r6, #0
 8022860:	d19e      	bne.n	80227a0 <rmw_wait+0x1f8>
 8022862:	e7bc      	b.n	80227de <rmw_wait+0x236>
 8022864:	0802a160 	.word	0x0802a160
 8022868:	20014984 	.word	0x20014984
 802286c:	000f4240 	.word	0x000f4240

08022870 <rmw_create_wait_set>:
 8022870:	b508      	push	{r3, lr}
 8022872:	4803      	ldr	r0, [pc, #12]	@ (8022880 <rmw_create_wait_set+0x10>)
 8022874:	f7fe feae 	bl	80215d4 <get_memory>
 8022878:	b108      	cbz	r0, 802287e <rmw_create_wait_set+0xe>
 802287a:	6880      	ldr	r0, [r0, #8]
 802287c:	3010      	adds	r0, #16
 802287e:	bd08      	pop	{r3, pc}
 8022880:	200149c4 	.word	0x200149c4

08022884 <rmw_destroy_wait_set>:
 8022884:	b508      	push	{r3, lr}
 8022886:	4b08      	ldr	r3, [pc, #32]	@ (80228a8 <rmw_destroy_wait_set+0x24>)
 8022888:	6819      	ldr	r1, [r3, #0]
 802288a:	b911      	cbnz	r1, 8022892 <rmw_destroy_wait_set+0xe>
 802288c:	e00a      	b.n	80228a4 <rmw_destroy_wait_set+0x20>
 802288e:	6849      	ldr	r1, [r1, #4]
 8022890:	b141      	cbz	r1, 80228a4 <rmw_destroy_wait_set+0x20>
 8022892:	688b      	ldr	r3, [r1, #8]
 8022894:	3310      	adds	r3, #16
 8022896:	4298      	cmp	r0, r3
 8022898:	d1f9      	bne.n	802288e <rmw_destroy_wait_set+0xa>
 802289a:	4803      	ldr	r0, [pc, #12]	@ (80228a8 <rmw_destroy_wait_set+0x24>)
 802289c:	f7fe feaa 	bl	80215f4 <put_memory>
 80228a0:	2000      	movs	r0, #0
 80228a2:	bd08      	pop	{r3, pc}
 80228a4:	2001      	movs	r0, #1
 80228a6:	bd08      	pop	{r3, pc}
 80228a8:	200149c4 	.word	0x200149c4

080228ac <rmw_uros_epoch_nanos>:
 80228ac:	4b05      	ldr	r3, [pc, #20]	@ (80228c4 <rmw_uros_epoch_nanos+0x18>)
 80228ae:	681b      	ldr	r3, [r3, #0]
 80228b0:	b123      	cbz	r3, 80228bc <rmw_uros_epoch_nanos+0x10>
 80228b2:	6898      	ldr	r0, [r3, #8]
 80228b4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80228b8:	f7f9 b942 	b.w	801bb40 <uxr_epoch_nanos>
 80228bc:	2000      	movs	r0, #0
 80228be:	2100      	movs	r1, #0
 80228c0:	4770      	bx	lr
 80228c2:	bf00      	nop
 80228c4:	20014984 	.word	0x20014984

080228c8 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80228c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80228cc:	6805      	ldr	r5, [r0, #0]
 80228ce:	4604      	mov	r4, r0
 80228d0:	460e      	mov	r6, r1
 80228d2:	4628      	mov	r0, r5
 80228d4:	f7dd fcb4 	bl	8000240 <strcmp>
 80228d8:	b1c8      	cbz	r0, 802290e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80228da:	4b11      	ldr	r3, [pc, #68]	@ (8022920 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80228dc:	681b      	ldr	r3, [r3, #0]
 80228de:	429d      	cmp	r5, r3
 80228e0:	d112      	bne.n	8022908 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80228e2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80228e6:	f8d8 4000 	ldr.w	r4, [r8]
 80228ea:	b16c      	cbz	r4, 8022908 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80228ec:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80228f0:	2700      	movs	r7, #0
 80228f2:	3d04      	subs	r5, #4
 80228f4:	4631      	mov	r1, r6
 80228f6:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80228fa:	f7dd fca1 	bl	8000240 <strcmp>
 80228fe:	00bb      	lsls	r3, r7, #2
 8022900:	b140      	cbz	r0, 8022914 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8022902:	3701      	adds	r7, #1
 8022904:	42bc      	cmp	r4, r7
 8022906:	d1f5      	bne.n	80228f4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8022908:	2000      	movs	r0, #0
 802290a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802290e:	4620      	mov	r0, r4
 8022910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022914:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8022918:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802291c:	58d3      	ldr	r3, [r2, r3]
 802291e:	4718      	bx	r3
 8022920:	20000154 	.word	0x20000154

08022924 <std_msgs__msg__Int32__init>:
 8022924:	3800      	subs	r0, #0
 8022926:	bf18      	it	ne
 8022928:	2001      	movne	r0, #1
 802292a:	4770      	bx	lr

0802292c <std_msgs__msg__Int32__fini>:
 802292c:	4770      	bx	lr
 802292e:	bf00      	nop

08022930 <std_msgs__msg__String__init>:
 8022930:	b538      	push	{r3, r4, r5, lr}
 8022932:	4604      	mov	r4, r0
 8022934:	b128      	cbz	r0, 8022942 <std_msgs__msg__String__init+0x12>
 8022936:	f002 f977 	bl	8024c28 <rosidl_runtime_c__String__init>
 802293a:	4605      	mov	r5, r0
 802293c:	b120      	cbz	r0, 8022948 <std_msgs__msg__String__init+0x18>
 802293e:	4628      	mov	r0, r5
 8022940:	bd38      	pop	{r3, r4, r5, pc}
 8022942:	4605      	mov	r5, r0
 8022944:	4628      	mov	r0, r5
 8022946:	bd38      	pop	{r3, r4, r5, pc}
 8022948:	4620      	mov	r0, r4
 802294a:	f002 f983 	bl	8024c54 <rosidl_runtime_c__String__fini>
 802294e:	4628      	mov	r0, r5
 8022950:	bd38      	pop	{r3, r4, r5, pc}
 8022952:	bf00      	nop

08022954 <std_msgs__msg__String__fini>:
 8022954:	b108      	cbz	r0, 802295a <std_msgs__msg__String__fini+0x6>
 8022956:	f002 b97d 	b.w	8024c54 <rosidl_runtime_c__String__fini>
 802295a:	4770      	bx	lr

0802295c <ucdr_serialize_endian_array_char>:
 802295c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022960:	4619      	mov	r1, r3
 8022962:	461f      	mov	r7, r3
 8022964:	4605      	mov	r5, r0
 8022966:	4690      	mov	r8, r2
 8022968:	f7f8 fc82 	bl	801b270 <ucdr_check_buffer_available_for>
 802296c:	b9e0      	cbnz	r0, 80229a8 <ucdr_serialize_endian_array_char+0x4c>
 802296e:	463e      	mov	r6, r7
 8022970:	e00b      	b.n	802298a <ucdr_serialize_endian_array_char+0x2e>
 8022972:	4441      	add	r1, r8
 8022974:	68a8      	ldr	r0, [r5, #8]
 8022976:	4622      	mov	r2, r4
 8022978:	1b36      	subs	r6, r6, r4
 802297a:	f003 f852 	bl	8025a22 <memcpy>
 802297e:	68ab      	ldr	r3, [r5, #8]
 8022980:	6928      	ldr	r0, [r5, #16]
 8022982:	4423      	add	r3, r4
 8022984:	4420      	add	r0, r4
 8022986:	60ab      	str	r3, [r5, #8]
 8022988:	6128      	str	r0, [r5, #16]
 802298a:	4631      	mov	r1, r6
 802298c:	2201      	movs	r2, #1
 802298e:	4628      	mov	r0, r5
 8022990:	f7f8 fcf8 	bl	801b384 <ucdr_check_final_buffer_behavior_array>
 8022994:	1bb9      	subs	r1, r7, r6
 8022996:	4604      	mov	r4, r0
 8022998:	2800      	cmp	r0, #0
 802299a:	d1ea      	bne.n	8022972 <ucdr_serialize_endian_array_char+0x16>
 802299c:	2301      	movs	r3, #1
 802299e:	7da8      	ldrb	r0, [r5, #22]
 80229a0:	756b      	strb	r3, [r5, #21]
 80229a2:	4058      	eors	r0, r3
 80229a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80229a8:	463a      	mov	r2, r7
 80229aa:	4641      	mov	r1, r8
 80229ac:	68a8      	ldr	r0, [r5, #8]
 80229ae:	f003 f838 	bl	8025a22 <memcpy>
 80229b2:	68aa      	ldr	r2, [r5, #8]
 80229b4:	692b      	ldr	r3, [r5, #16]
 80229b6:	443a      	add	r2, r7
 80229b8:	443b      	add	r3, r7
 80229ba:	60aa      	str	r2, [r5, #8]
 80229bc:	612b      	str	r3, [r5, #16]
 80229be:	e7ed      	b.n	802299c <ucdr_serialize_endian_array_char+0x40>

080229c0 <ucdr_deserialize_endian_array_char>:
 80229c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80229c4:	4619      	mov	r1, r3
 80229c6:	461f      	mov	r7, r3
 80229c8:	4605      	mov	r5, r0
 80229ca:	4690      	mov	r8, r2
 80229cc:	f7f8 fc50 	bl	801b270 <ucdr_check_buffer_available_for>
 80229d0:	b9e8      	cbnz	r0, 8022a0e <ucdr_deserialize_endian_array_char+0x4e>
 80229d2:	463e      	mov	r6, r7
 80229d4:	e00c      	b.n	80229f0 <ucdr_deserialize_endian_array_char+0x30>
 80229d6:	eb08 0003 	add.w	r0, r8, r3
 80229da:	68a9      	ldr	r1, [r5, #8]
 80229dc:	4622      	mov	r2, r4
 80229de:	1b36      	subs	r6, r6, r4
 80229e0:	f003 f81f 	bl	8025a22 <memcpy>
 80229e4:	68ab      	ldr	r3, [r5, #8]
 80229e6:	6928      	ldr	r0, [r5, #16]
 80229e8:	4423      	add	r3, r4
 80229ea:	4420      	add	r0, r4
 80229ec:	60ab      	str	r3, [r5, #8]
 80229ee:	6128      	str	r0, [r5, #16]
 80229f0:	4631      	mov	r1, r6
 80229f2:	2201      	movs	r2, #1
 80229f4:	4628      	mov	r0, r5
 80229f6:	f7f8 fcc5 	bl	801b384 <ucdr_check_final_buffer_behavior_array>
 80229fa:	1bbb      	subs	r3, r7, r6
 80229fc:	4604      	mov	r4, r0
 80229fe:	2800      	cmp	r0, #0
 8022a00:	d1e9      	bne.n	80229d6 <ucdr_deserialize_endian_array_char+0x16>
 8022a02:	2301      	movs	r3, #1
 8022a04:	7da8      	ldrb	r0, [r5, #22]
 8022a06:	756b      	strb	r3, [r5, #21]
 8022a08:	4058      	eors	r0, r3
 8022a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022a0e:	463a      	mov	r2, r7
 8022a10:	68a9      	ldr	r1, [r5, #8]
 8022a12:	4640      	mov	r0, r8
 8022a14:	f003 f805 	bl	8025a22 <memcpy>
 8022a18:	68aa      	ldr	r2, [r5, #8]
 8022a1a:	692b      	ldr	r3, [r5, #16]
 8022a1c:	443a      	add	r2, r7
 8022a1e:	443b      	add	r3, r7
 8022a20:	60aa      	str	r2, [r5, #8]
 8022a22:	612b      	str	r3, [r5, #16]
 8022a24:	e7ed      	b.n	8022a02 <ucdr_deserialize_endian_array_char+0x42>
 8022a26:	bf00      	nop

08022a28 <ucdr_serialize_array_uint8_t>:
 8022a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022a2c:	4688      	mov	r8, r1
 8022a2e:	4611      	mov	r1, r2
 8022a30:	4617      	mov	r7, r2
 8022a32:	4605      	mov	r5, r0
 8022a34:	f7f8 fc1c 	bl	801b270 <ucdr_check_buffer_available_for>
 8022a38:	b9e0      	cbnz	r0, 8022a74 <ucdr_serialize_array_uint8_t+0x4c>
 8022a3a:	463e      	mov	r6, r7
 8022a3c:	e00b      	b.n	8022a56 <ucdr_serialize_array_uint8_t+0x2e>
 8022a3e:	4441      	add	r1, r8
 8022a40:	68a8      	ldr	r0, [r5, #8]
 8022a42:	4622      	mov	r2, r4
 8022a44:	1b36      	subs	r6, r6, r4
 8022a46:	f002 ffec 	bl	8025a22 <memcpy>
 8022a4a:	68ab      	ldr	r3, [r5, #8]
 8022a4c:	6928      	ldr	r0, [r5, #16]
 8022a4e:	4423      	add	r3, r4
 8022a50:	4420      	add	r0, r4
 8022a52:	60ab      	str	r3, [r5, #8]
 8022a54:	6128      	str	r0, [r5, #16]
 8022a56:	4631      	mov	r1, r6
 8022a58:	2201      	movs	r2, #1
 8022a5a:	4628      	mov	r0, r5
 8022a5c:	f7f8 fc92 	bl	801b384 <ucdr_check_final_buffer_behavior_array>
 8022a60:	1bb9      	subs	r1, r7, r6
 8022a62:	4604      	mov	r4, r0
 8022a64:	2800      	cmp	r0, #0
 8022a66:	d1ea      	bne.n	8022a3e <ucdr_serialize_array_uint8_t+0x16>
 8022a68:	2301      	movs	r3, #1
 8022a6a:	7da8      	ldrb	r0, [r5, #22]
 8022a6c:	756b      	strb	r3, [r5, #21]
 8022a6e:	4058      	eors	r0, r3
 8022a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022a74:	463a      	mov	r2, r7
 8022a76:	4641      	mov	r1, r8
 8022a78:	68a8      	ldr	r0, [r5, #8]
 8022a7a:	f002 ffd2 	bl	8025a22 <memcpy>
 8022a7e:	68aa      	ldr	r2, [r5, #8]
 8022a80:	692b      	ldr	r3, [r5, #16]
 8022a82:	443a      	add	r2, r7
 8022a84:	443b      	add	r3, r7
 8022a86:	60aa      	str	r2, [r5, #8]
 8022a88:	612b      	str	r3, [r5, #16]
 8022a8a:	e7ed      	b.n	8022a68 <ucdr_serialize_array_uint8_t+0x40>

08022a8c <ucdr_serialize_endian_array_uint8_t>:
 8022a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022a90:	4619      	mov	r1, r3
 8022a92:	461f      	mov	r7, r3
 8022a94:	4605      	mov	r5, r0
 8022a96:	4690      	mov	r8, r2
 8022a98:	f7f8 fbea 	bl	801b270 <ucdr_check_buffer_available_for>
 8022a9c:	b9e0      	cbnz	r0, 8022ad8 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8022a9e:	463e      	mov	r6, r7
 8022aa0:	e00b      	b.n	8022aba <ucdr_serialize_endian_array_uint8_t+0x2e>
 8022aa2:	4441      	add	r1, r8
 8022aa4:	68a8      	ldr	r0, [r5, #8]
 8022aa6:	4622      	mov	r2, r4
 8022aa8:	1b36      	subs	r6, r6, r4
 8022aaa:	f002 ffba 	bl	8025a22 <memcpy>
 8022aae:	68ab      	ldr	r3, [r5, #8]
 8022ab0:	6928      	ldr	r0, [r5, #16]
 8022ab2:	4423      	add	r3, r4
 8022ab4:	4420      	add	r0, r4
 8022ab6:	60ab      	str	r3, [r5, #8]
 8022ab8:	6128      	str	r0, [r5, #16]
 8022aba:	4631      	mov	r1, r6
 8022abc:	2201      	movs	r2, #1
 8022abe:	4628      	mov	r0, r5
 8022ac0:	f7f8 fc60 	bl	801b384 <ucdr_check_final_buffer_behavior_array>
 8022ac4:	1bb9      	subs	r1, r7, r6
 8022ac6:	4604      	mov	r4, r0
 8022ac8:	2800      	cmp	r0, #0
 8022aca:	d1ea      	bne.n	8022aa2 <ucdr_serialize_endian_array_uint8_t+0x16>
 8022acc:	2301      	movs	r3, #1
 8022ace:	7da8      	ldrb	r0, [r5, #22]
 8022ad0:	756b      	strb	r3, [r5, #21]
 8022ad2:	4058      	eors	r0, r3
 8022ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022ad8:	463a      	mov	r2, r7
 8022ada:	4641      	mov	r1, r8
 8022adc:	68a8      	ldr	r0, [r5, #8]
 8022ade:	f002 ffa0 	bl	8025a22 <memcpy>
 8022ae2:	68aa      	ldr	r2, [r5, #8]
 8022ae4:	692b      	ldr	r3, [r5, #16]
 8022ae6:	443a      	add	r2, r7
 8022ae8:	443b      	add	r3, r7
 8022aea:	60aa      	str	r2, [r5, #8]
 8022aec:	612b      	str	r3, [r5, #16]
 8022aee:	e7ed      	b.n	8022acc <ucdr_serialize_endian_array_uint8_t+0x40>

08022af0 <ucdr_deserialize_array_uint8_t>:
 8022af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022af4:	4688      	mov	r8, r1
 8022af6:	4611      	mov	r1, r2
 8022af8:	4617      	mov	r7, r2
 8022afa:	4605      	mov	r5, r0
 8022afc:	f7f8 fbb8 	bl	801b270 <ucdr_check_buffer_available_for>
 8022b00:	b9e8      	cbnz	r0, 8022b3e <ucdr_deserialize_array_uint8_t+0x4e>
 8022b02:	463e      	mov	r6, r7
 8022b04:	e00c      	b.n	8022b20 <ucdr_deserialize_array_uint8_t+0x30>
 8022b06:	eb08 0003 	add.w	r0, r8, r3
 8022b0a:	68a9      	ldr	r1, [r5, #8]
 8022b0c:	4622      	mov	r2, r4
 8022b0e:	1b36      	subs	r6, r6, r4
 8022b10:	f002 ff87 	bl	8025a22 <memcpy>
 8022b14:	68ab      	ldr	r3, [r5, #8]
 8022b16:	6928      	ldr	r0, [r5, #16]
 8022b18:	4423      	add	r3, r4
 8022b1a:	4420      	add	r0, r4
 8022b1c:	60ab      	str	r3, [r5, #8]
 8022b1e:	6128      	str	r0, [r5, #16]
 8022b20:	4631      	mov	r1, r6
 8022b22:	2201      	movs	r2, #1
 8022b24:	4628      	mov	r0, r5
 8022b26:	f7f8 fc2d 	bl	801b384 <ucdr_check_final_buffer_behavior_array>
 8022b2a:	1bbb      	subs	r3, r7, r6
 8022b2c:	4604      	mov	r4, r0
 8022b2e:	2800      	cmp	r0, #0
 8022b30:	d1e9      	bne.n	8022b06 <ucdr_deserialize_array_uint8_t+0x16>
 8022b32:	2301      	movs	r3, #1
 8022b34:	7da8      	ldrb	r0, [r5, #22]
 8022b36:	756b      	strb	r3, [r5, #21]
 8022b38:	4058      	eors	r0, r3
 8022b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022b3e:	463a      	mov	r2, r7
 8022b40:	68a9      	ldr	r1, [r5, #8]
 8022b42:	4640      	mov	r0, r8
 8022b44:	f002 ff6d 	bl	8025a22 <memcpy>
 8022b48:	68aa      	ldr	r2, [r5, #8]
 8022b4a:	692b      	ldr	r3, [r5, #16]
 8022b4c:	443a      	add	r2, r7
 8022b4e:	443b      	add	r3, r7
 8022b50:	60aa      	str	r2, [r5, #8]
 8022b52:	612b      	str	r3, [r5, #16]
 8022b54:	e7ed      	b.n	8022b32 <ucdr_deserialize_array_uint8_t+0x42>
 8022b56:	bf00      	nop

08022b58 <ucdr_deserialize_endian_array_uint8_t>:
 8022b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022b5c:	4619      	mov	r1, r3
 8022b5e:	461f      	mov	r7, r3
 8022b60:	4605      	mov	r5, r0
 8022b62:	4690      	mov	r8, r2
 8022b64:	f7f8 fb84 	bl	801b270 <ucdr_check_buffer_available_for>
 8022b68:	b9e8      	cbnz	r0, 8022ba6 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8022b6a:	463e      	mov	r6, r7
 8022b6c:	e00c      	b.n	8022b88 <ucdr_deserialize_endian_array_uint8_t+0x30>
 8022b6e:	eb08 0003 	add.w	r0, r8, r3
 8022b72:	68a9      	ldr	r1, [r5, #8]
 8022b74:	4622      	mov	r2, r4
 8022b76:	1b36      	subs	r6, r6, r4
 8022b78:	f002 ff53 	bl	8025a22 <memcpy>
 8022b7c:	68ab      	ldr	r3, [r5, #8]
 8022b7e:	6928      	ldr	r0, [r5, #16]
 8022b80:	4423      	add	r3, r4
 8022b82:	4420      	add	r0, r4
 8022b84:	60ab      	str	r3, [r5, #8]
 8022b86:	6128      	str	r0, [r5, #16]
 8022b88:	4631      	mov	r1, r6
 8022b8a:	2201      	movs	r2, #1
 8022b8c:	4628      	mov	r0, r5
 8022b8e:	f7f8 fbf9 	bl	801b384 <ucdr_check_final_buffer_behavior_array>
 8022b92:	1bbb      	subs	r3, r7, r6
 8022b94:	4604      	mov	r4, r0
 8022b96:	2800      	cmp	r0, #0
 8022b98:	d1e9      	bne.n	8022b6e <ucdr_deserialize_endian_array_uint8_t+0x16>
 8022b9a:	2301      	movs	r3, #1
 8022b9c:	7da8      	ldrb	r0, [r5, #22]
 8022b9e:	756b      	strb	r3, [r5, #21]
 8022ba0:	4058      	eors	r0, r3
 8022ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022ba6:	463a      	mov	r2, r7
 8022ba8:	68a9      	ldr	r1, [r5, #8]
 8022baa:	4640      	mov	r0, r8
 8022bac:	f002 ff39 	bl	8025a22 <memcpy>
 8022bb0:	68aa      	ldr	r2, [r5, #8]
 8022bb2:	692b      	ldr	r3, [r5, #16]
 8022bb4:	443a      	add	r2, r7
 8022bb6:	443b      	add	r3, r7
 8022bb8:	60aa      	str	r2, [r5, #8]
 8022bba:	612b      	str	r3, [r5, #16]
 8022bbc:	e7ed      	b.n	8022b9a <ucdr_deserialize_endian_array_uint8_t+0x42>
 8022bbe:	bf00      	nop

08022bc0 <ucdr_serialize_string>:
 8022bc0:	b510      	push	{r4, lr}
 8022bc2:	b082      	sub	sp, #8
 8022bc4:	4604      	mov	r4, r0
 8022bc6:	4608      	mov	r0, r1
 8022bc8:	9101      	str	r1, [sp, #4]
 8022bca:	f7dd fb43 	bl	8000254 <strlen>
 8022bce:	4602      	mov	r2, r0
 8022bd0:	9901      	ldr	r1, [sp, #4]
 8022bd2:	4620      	mov	r0, r4
 8022bd4:	3201      	adds	r2, #1
 8022bd6:	b002      	add	sp, #8
 8022bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022bdc:	f7f8 bc10 	b.w	801b400 <ucdr_serialize_sequence_char>

08022be0 <ucdr_deserialize_string>:
 8022be0:	b500      	push	{lr}
 8022be2:	b083      	sub	sp, #12
 8022be4:	ab01      	add	r3, sp, #4
 8022be6:	f7f8 fc1d 	bl	801b424 <ucdr_deserialize_sequence_char>
 8022bea:	b003      	add	sp, #12
 8022bec:	f85d fb04 	ldr.w	pc, [sp], #4

08022bf0 <get_custom_error>:
 8022bf0:	4b01      	ldr	r3, [pc, #4]	@ (8022bf8 <get_custom_error+0x8>)
 8022bf2:	7818      	ldrb	r0, [r3, #0]
 8022bf4:	4770      	bx	lr
 8022bf6:	bf00      	nop
 8022bf8:	20014b40 	.word	0x20014b40

08022bfc <recv_custom_msg>:
 8022bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c00:	4693      	mov	fp, r2
 8022c02:	b089      	sub	sp, #36	@ 0x24
 8022c04:	2200      	movs	r2, #0
 8022c06:	4604      	mov	r4, r0
 8022c08:	468a      	mov	sl, r1
 8022c0a:	9305      	str	r3, [sp, #20]
 8022c0c:	f88d 201e 	strb.w	r2, [sp, #30]
 8022c10:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8022c14:	b322      	cbz	r2, 8022c60 <recv_custom_msg+0x64>
 8022c16:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8022c1a:	f10d 081f 	add.w	r8, sp, #31
 8022c1e:	af05      	add	r7, sp, #20
 8022c20:	f10d 061e 	add.w	r6, sp, #30
 8022c24:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8022c28:	e002      	b.n	8022c30 <recv_custom_msg+0x34>
 8022c2a:	9b05      	ldr	r3, [sp, #20]
 8022c2c:	2b00      	cmp	r3, #0
 8022c2e:	dd0f      	ble.n	8022c50 <recv_custom_msg+0x54>
 8022c30:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8022c34:	4623      	mov	r3, r4
 8022c36:	4622      	mov	r2, r4
 8022c38:	4648      	mov	r0, r9
 8022c3a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8022c3e:	e9cd 5600 	strd	r5, r6, [sp]
 8022c42:	f001 f911 	bl	8023e68 <uxr_read_framed_msg>
 8022c46:	2800      	cmp	r0, #0
 8022c48:	d0ef      	beq.n	8022c2a <recv_custom_msg+0x2e>
 8022c4a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8022c4e:	b1b3      	cbz	r3, 8022c7e <recv_custom_msg+0x82>
 8022c50:	4b0f      	ldr	r3, [pc, #60]	@ (8022c90 <recv_custom_msg+0x94>)
 8022c52:	2000      	movs	r0, #0
 8022c54:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8022c58:	701a      	strb	r2, [r3, #0]
 8022c5a:	b009      	add	sp, #36	@ 0x24
 8022c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c60:	f10d 021f 	add.w	r2, sp, #31
 8022c64:	4601      	mov	r1, r0
 8022c66:	9200      	str	r2, [sp, #0]
 8022c68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8022c6c:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8022c70:	47a8      	blx	r5
 8022c72:	2800      	cmp	r0, #0
 8022c74:	d0ec      	beq.n	8022c50 <recv_custom_msg+0x54>
 8022c76:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8022c7a:	2b00      	cmp	r3, #0
 8022c7c:	d1e8      	bne.n	8022c50 <recv_custom_msg+0x54>
 8022c7e:	f8cb 0000 	str.w	r0, [fp]
 8022c82:	2001      	movs	r0, #1
 8022c84:	f8ca 4000 	str.w	r4, [sl]
 8022c88:	b009      	add	sp, #36	@ 0x24
 8022c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c8e:	bf00      	nop
 8022c90:	20014b40 	.word	0x20014b40

08022c94 <send_custom_msg>:
 8022c94:	b530      	push	{r4, r5, lr}
 8022c96:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8022c9a:	b087      	sub	sp, #28
 8022c9c:	4614      	mov	r4, r2
 8022c9e:	b995      	cbnz	r5, 8022cc6 <send_custom_msg+0x32>
 8022ca0:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 8022ca4:	f10d 0317 	add.w	r3, sp, #23
 8022ca8:	47a8      	blx	r5
 8022caa:	1e03      	subs	r3, r0, #0
 8022cac:	bf18      	it	ne
 8022cae:	2301      	movne	r3, #1
 8022cb0:	42a0      	cmp	r0, r4
 8022cb2:	bf18      	it	ne
 8022cb4:	2300      	movne	r3, #0
 8022cb6:	b91b      	cbnz	r3, 8022cc0 <send_custom_msg+0x2c>
 8022cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8022ce4 <send_custom_msg+0x50>)
 8022cba:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8022cbe:	7011      	strb	r1, [r2, #0]
 8022cc0:	4618      	mov	r0, r3
 8022cc2:	b007      	add	sp, #28
 8022cc4:	bd30      	pop	{r4, r5, pc}
 8022cc6:	460b      	mov	r3, r1
 8022cc8:	2200      	movs	r2, #0
 8022cca:	f10d 0117 	add.w	r1, sp, #23
 8022cce:	9400      	str	r4, [sp, #0]
 8022cd0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8022cd4:	4602      	mov	r2, r0
 8022cd6:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8022cda:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8022cde:	f000 fee5 	bl	8023aac <uxr_write_framed_msg>
 8022ce2:	e7e2      	b.n	8022caa <send_custom_msg+0x16>
 8022ce4:	20014b40 	.word	0x20014b40

08022ce8 <uxr_set_custom_transport_callbacks>:
 8022ce8:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8022cec:	9901      	ldr	r1, [sp, #4]
 8022cee:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8022cf2:	9b00      	ldr	r3, [sp, #0]
 8022cf4:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 8022cf8:	4770      	bx	lr
 8022cfa:	bf00      	nop

08022cfc <uxr_init_custom_transport>:
 8022cfc:	b538      	push	{r3, r4, r5, lr}
 8022cfe:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8022d02:	b303      	cbz	r3, 8022d46 <uxr_init_custom_transport+0x4a>
 8022d04:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8022d08:	4604      	mov	r4, r0
 8022d0a:	b1e2      	cbz	r2, 8022d46 <uxr_init_custom_transport+0x4a>
 8022d0c:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8022d10:	b1ca      	cbz	r2, 8022d46 <uxr_init_custom_transport+0x4a>
 8022d12:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8022d16:	b1b2      	cbz	r2, 8022d46 <uxr_init_custom_transport+0x4a>
 8022d18:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8022d1c:	4798      	blx	r3
 8022d1e:	4605      	mov	r5, r0
 8022d20:	b188      	cbz	r0, 8022d46 <uxr_init_custom_transport+0x4a>
 8022d22:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8022d26:	b98b      	cbnz	r3, 8022d4c <uxr_init_custom_transport+0x50>
 8022d28:	4b0b      	ldr	r3, [pc, #44]	@ (8022d58 <uxr_init_custom_transport+0x5c>)
 8022d2a:	4628      	mov	r0, r5
 8022d2c:	490b      	ldr	r1, [pc, #44]	@ (8022d5c <uxr_init_custom_transport+0x60>)
 8022d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8022d60 <uxr_init_custom_transport+0x64>)
 8022d30:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8022d34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8022d38:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8022d3c:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8022d40:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8022d44:	bd38      	pop	{r3, r4, r5, pc}
 8022d46:	2500      	movs	r5, #0
 8022d48:	4628      	mov	r0, r5
 8022d4a:	bd38      	pop	{r3, r4, r5, pc}
 8022d4c:	2100      	movs	r1, #0
 8022d4e:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8022d52:	f000 fea5 	bl	8023aa0 <uxr_init_framing_io>
 8022d56:	e7e7      	b.n	8022d28 <uxr_init_custom_transport+0x2c>
 8022d58:	08022bfd 	.word	0x08022bfd
 8022d5c:	08022c95 	.word	0x08022c95
 8022d60:	08022bf1 	.word	0x08022bf1

08022d64 <uxr_close_custom_transport>:
 8022d64:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8022d68:	4718      	bx	r3
 8022d6a:	bf00      	nop

08022d6c <uxr_init_input_best_effort_stream>:
 8022d6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8022d70:	8003      	strh	r3, [r0, #0]
 8022d72:	4770      	bx	lr

08022d74 <uxr_reset_input_best_effort_stream>:
 8022d74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8022d78:	8003      	strh	r3, [r0, #0]
 8022d7a:	4770      	bx	lr

08022d7c <uxr_receive_best_effort_message>:
 8022d7c:	b538      	push	{r3, r4, r5, lr}
 8022d7e:	4604      	mov	r4, r0
 8022d80:	8800      	ldrh	r0, [r0, #0]
 8022d82:	460d      	mov	r5, r1
 8022d84:	f000 fe74 	bl	8023a70 <uxr_seq_num_cmp>
 8022d88:	4603      	mov	r3, r0
 8022d8a:	0fc0      	lsrs	r0, r0, #31
 8022d8c:	2b00      	cmp	r3, #0
 8022d8e:	bfb8      	it	lt
 8022d90:	8025      	strhlt	r5, [r4, #0]
 8022d92:	bd38      	pop	{r3, r4, r5, pc}

08022d94 <on_full_input_buffer>:
 8022d94:	b570      	push	{r4, r5, r6, lr}
 8022d96:	460c      	mov	r4, r1
 8022d98:	4605      	mov	r5, r0
 8022d9a:	8908      	ldrh	r0, [r1, #8]
 8022d9c:	682b      	ldr	r3, [r5, #0]
 8022d9e:	7d26      	ldrb	r6, [r4, #20]
 8022da0:	e9d1 1200 	ldrd	r1, r2, [r1]
 8022da4:	fbb2 f2f0 	udiv	r2, r2, r0
 8022da8:	eba3 0c01 	sub.w	ip, r3, r1
 8022dac:	fbbc fcf2 	udiv	ip, ip, r2
 8022db0:	f10c 0c01 	add.w	ip, ip, #1
 8022db4:	fa1f f38c 	uxth.w	r3, ip
 8022db8:	fbb3 fcf0 	udiv	ip, r3, r0
 8022dbc:	fb00 331c 	mls	r3, r0, ip, r3
 8022dc0:	b29b      	uxth	r3, r3
 8022dc2:	fb02 f303 	mul.w	r3, r2, r3
 8022dc6:	1d18      	adds	r0, r3, #4
 8022dc8:	4408      	add	r0, r1
 8022dca:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8022dce:	b116      	cbz	r6, 8022dd6 <on_full_input_buffer+0x42>
 8022dd0:	2600      	movs	r6, #0
 8022dd2:	f840 6c04 	str.w	r6, [r0, #-4]
 8022dd6:	2a03      	cmp	r2, #3
 8022dd8:	d801      	bhi.n	8022dde <on_full_input_buffer+0x4a>
 8022dda:	2001      	movs	r0, #1
 8022ddc:	bd70      	pop	{r4, r5, r6, pc}
 8022dde:	3308      	adds	r3, #8
 8022de0:	4628      	mov	r0, r5
 8022de2:	3a04      	subs	r2, #4
 8022de4:	4419      	add	r1, r3
 8022de6:	692b      	ldr	r3, [r5, #16]
 8022de8:	f7f8 fa8e 	bl	801b308 <ucdr_init_buffer_origin>
 8022dec:	4628      	mov	r0, r5
 8022dee:	4622      	mov	r2, r4
 8022df0:	4902      	ldr	r1, [pc, #8]	@ (8022dfc <on_full_input_buffer+0x68>)
 8022df2:	f7f8 fa65 	bl	801b2c0 <ucdr_set_on_full_buffer_callback>
 8022df6:	2000      	movs	r0, #0
 8022df8:	bd70      	pop	{r4, r5, r6, pc}
 8022dfa:	bf00      	nop
 8022dfc:	08022d95 	.word	0x08022d95

08022e00 <uxr_init_input_reliable_stream>:
 8022e00:	b510      	push	{r4, lr}
 8022e02:	e9c0 1200 	strd	r1, r2, [r0]
 8022e06:	2400      	movs	r4, #0
 8022e08:	9a02      	ldr	r2, [sp, #8]
 8022e0a:	8103      	strh	r3, [r0, #8]
 8022e0c:	6102      	str	r2, [r0, #16]
 8022e0e:	7504      	strb	r4, [r0, #20]
 8022e10:	b1c3      	cbz	r3, 8022e44 <uxr_init_input_reliable_stream+0x44>
 8022e12:	600c      	str	r4, [r1, #0]
 8022e14:	8901      	ldrh	r1, [r0, #8]
 8022e16:	2901      	cmp	r1, #1
 8022e18:	d914      	bls.n	8022e44 <uxr_init_input_reliable_stream+0x44>
 8022e1a:	f04f 0c01 	mov.w	ip, #1
 8022e1e:	6843      	ldr	r3, [r0, #4]
 8022e20:	f10c 0e01 	add.w	lr, ip, #1
 8022e24:	fbbc f2f1 	udiv	r2, ip, r1
 8022e28:	fbb3 f3f1 	udiv	r3, r3, r1
 8022e2c:	fb01 c212 	mls	r2, r1, r2, ip
 8022e30:	fa1f fc8e 	uxth.w	ip, lr
 8022e34:	b292      	uxth	r2, r2
 8022e36:	fb02 f303 	mul.w	r3, r2, r3
 8022e3a:	6802      	ldr	r2, [r0, #0]
 8022e3c:	50d4      	str	r4, [r2, r3]
 8022e3e:	8901      	ldrh	r1, [r0, #8]
 8022e40:	4561      	cmp	r1, ip
 8022e42:	d8ec      	bhi.n	8022e1e <uxr_init_input_reliable_stream+0x1e>
 8022e44:	f04f 33ff 	mov.w	r3, #4294967295
 8022e48:	60c3      	str	r3, [r0, #12]
 8022e4a:	bd10      	pop	{r4, pc}

08022e4c <uxr_reset_input_reliable_stream>:
 8022e4c:	8901      	ldrh	r1, [r0, #8]
 8022e4e:	b1d9      	cbz	r1, 8022e88 <uxr_reset_input_reliable_stream+0x3c>
 8022e50:	b510      	push	{r4, lr}
 8022e52:	f04f 0e00 	mov.w	lr, #0
 8022e56:	46f4      	mov	ip, lr
 8022e58:	4674      	mov	r4, lr
 8022e5a:	6843      	ldr	r3, [r0, #4]
 8022e5c:	f10e 0e01 	add.w	lr, lr, #1
 8022e60:	fbbc f2f1 	udiv	r2, ip, r1
 8022e64:	fbb3 f3f1 	udiv	r3, r3, r1
 8022e68:	fb01 c212 	mls	r2, r1, r2, ip
 8022e6c:	fa1f fc8e 	uxth.w	ip, lr
 8022e70:	b292      	uxth	r2, r2
 8022e72:	fb02 f303 	mul.w	r3, r2, r3
 8022e76:	6802      	ldr	r2, [r0, #0]
 8022e78:	50d4      	str	r4, [r2, r3]
 8022e7a:	8901      	ldrh	r1, [r0, #8]
 8022e7c:	4561      	cmp	r1, ip
 8022e7e:	d8ec      	bhi.n	8022e5a <uxr_reset_input_reliable_stream+0xe>
 8022e80:	f04f 33ff 	mov.w	r3, #4294967295
 8022e84:	60c3      	str	r3, [r0, #12]
 8022e86:	bd10      	pop	{r4, pc}
 8022e88:	f04f 33ff 	mov.w	r3, #4294967295
 8022e8c:	60c3      	str	r3, [r0, #12]
 8022e8e:	4770      	bx	lr

08022e90 <uxr_receive_reliable_message>:
 8022e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022e94:	4604      	mov	r4, r0
 8022e96:	460d      	mov	r5, r1
 8022e98:	8901      	ldrh	r1, [r0, #8]
 8022e9a:	4617      	mov	r7, r2
 8022e9c:	8980      	ldrh	r0, [r0, #12]
 8022e9e:	4698      	mov	r8, r3
 8022ea0:	f000 fdde 	bl	8023a60 <uxr_seq_num_add>
 8022ea4:	4629      	mov	r1, r5
 8022ea6:	4606      	mov	r6, r0
 8022ea8:	89a0      	ldrh	r0, [r4, #12]
 8022eaa:	f000 fde1 	bl	8023a70 <uxr_seq_num_cmp>
 8022eae:	2800      	cmp	r0, #0
 8022eb0:	db0a      	blt.n	8022ec8 <uxr_receive_reliable_message+0x38>
 8022eb2:	2600      	movs	r6, #0
 8022eb4:	4629      	mov	r1, r5
 8022eb6:	89e0      	ldrh	r0, [r4, #14]
 8022eb8:	f000 fdda 	bl	8023a70 <uxr_seq_num_cmp>
 8022ebc:	2800      	cmp	r0, #0
 8022ebe:	da00      	bge.n	8022ec2 <uxr_receive_reliable_message+0x32>
 8022ec0:	81e5      	strh	r5, [r4, #14]
 8022ec2:	4630      	mov	r0, r6
 8022ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022ec8:	4630      	mov	r0, r6
 8022eca:	4629      	mov	r1, r5
 8022ecc:	f000 fdd0 	bl	8023a70 <uxr_seq_num_cmp>
 8022ed0:	2800      	cmp	r0, #0
 8022ed2:	dbee      	blt.n	8022eb2 <uxr_receive_reliable_message+0x22>
 8022ed4:	6923      	ldr	r3, [r4, #16]
 8022ed6:	4638      	mov	r0, r7
 8022ed8:	4798      	blx	r3
 8022eda:	4681      	mov	r9, r0
 8022edc:	2101      	movs	r1, #1
 8022ede:	89a0      	ldrh	r0, [r4, #12]
 8022ee0:	f000 fdbe 	bl	8023a60 <uxr_seq_num_add>
 8022ee4:	f1b9 0f00 	cmp.w	r9, #0
 8022ee8:	bf08      	it	eq
 8022eea:	4285      	cmpeq	r5, r0
 8022eec:	bf0c      	ite	eq
 8022eee:	2601      	moveq	r6, #1
 8022ef0:	2600      	movne	r6, #0
 8022ef2:	d104      	bne.n	8022efe <uxr_receive_reliable_message+0x6e>
 8022ef4:	2300      	movs	r3, #0
 8022ef6:	9a08      	ldr	r2, [sp, #32]
 8022ef8:	81a0      	strh	r0, [r4, #12]
 8022efa:	7013      	strb	r3, [r2, #0]
 8022efc:	e7da      	b.n	8022eb4 <uxr_receive_reliable_message+0x24>
 8022efe:	8922      	ldrh	r2, [r4, #8]
 8022f00:	6863      	ldr	r3, [r4, #4]
 8022f02:	fbb5 f0f2 	udiv	r0, r5, r2
 8022f06:	fbb3 f3f2 	udiv	r3, r3, r2
 8022f0a:	fb02 5010 	mls	r0, r2, r0, r5
 8022f0e:	b280      	uxth	r0, r0
 8022f10:	fb03 f000 	mul.w	r0, r3, r0
 8022f14:	6823      	ldr	r3, [r4, #0]
 8022f16:	3004      	adds	r0, #4
 8022f18:	4418      	add	r0, r3
 8022f1a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8022f1e:	2b00      	cmp	r3, #0
 8022f20:	d1c7      	bne.n	8022eb2 <uxr_receive_reliable_message+0x22>
 8022f22:	4639      	mov	r1, r7
 8022f24:	4642      	mov	r2, r8
 8022f26:	f002 fd7c 	bl	8025a22 <memcpy>
 8022f2a:	8921      	ldrh	r1, [r4, #8]
 8022f2c:	6863      	ldr	r3, [r4, #4]
 8022f2e:	fbb5 f2f1 	udiv	r2, r5, r1
 8022f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8022f36:	fb01 5212 	mls	r2, r1, r2, r5
 8022f3a:	b292      	uxth	r2, r2
 8022f3c:	fb02 f303 	mul.w	r3, r2, r3
 8022f40:	6822      	ldr	r2, [r4, #0]
 8022f42:	f842 8003 	str.w	r8, [r2, r3]
 8022f46:	2301      	movs	r3, #1
 8022f48:	9a08      	ldr	r2, [sp, #32]
 8022f4a:	7013      	strb	r3, [r2, #0]
 8022f4c:	f1b9 0f00 	cmp.w	r9, #0
 8022f50:	d0af      	beq.n	8022eb2 <uxr_receive_reliable_message+0x22>
 8022f52:	89a6      	ldrh	r6, [r4, #12]
 8022f54:	2101      	movs	r1, #1
 8022f56:	4630      	mov	r0, r6
 8022f58:	f000 fd82 	bl	8023a60 <uxr_seq_num_add>
 8022f5c:	8921      	ldrh	r1, [r4, #8]
 8022f5e:	6863      	ldr	r3, [r4, #4]
 8022f60:	4606      	mov	r6, r0
 8022f62:	fbb0 f2f1 	udiv	r2, r0, r1
 8022f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8022f6a:	fb01 0212 	mls	r2, r1, r2, r0
 8022f6e:	6820      	ldr	r0, [r4, #0]
 8022f70:	b292      	uxth	r2, r2
 8022f72:	fb02 f303 	mul.w	r3, r2, r3
 8022f76:	3304      	adds	r3, #4
 8022f78:	4418      	add	r0, r3
 8022f7a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8022f7e:	2b00      	cmp	r3, #0
 8022f80:	d097      	beq.n	8022eb2 <uxr_receive_reliable_message+0x22>
 8022f82:	6923      	ldr	r3, [r4, #16]
 8022f84:	4798      	blx	r3
 8022f86:	2802      	cmp	r0, #2
 8022f88:	d002      	beq.n	8022f90 <uxr_receive_reliable_message+0x100>
 8022f8a:	2801      	cmp	r0, #1
 8022f8c:	d0e2      	beq.n	8022f54 <uxr_receive_reliable_message+0xc4>
 8022f8e:	e790      	b.n	8022eb2 <uxr_receive_reliable_message+0x22>
 8022f90:	2601      	movs	r6, #1
 8022f92:	e78f      	b.n	8022eb4 <uxr_receive_reliable_message+0x24>

08022f94 <uxr_next_input_reliable_buffer_available>:
 8022f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022f98:	4604      	mov	r4, r0
 8022f9a:	460f      	mov	r7, r1
 8022f9c:	8980      	ldrh	r0, [r0, #12]
 8022f9e:	2101      	movs	r1, #1
 8022fa0:	4690      	mov	r8, r2
 8022fa2:	f000 fd5d 	bl	8023a60 <uxr_seq_num_add>
 8022fa6:	8922      	ldrh	r2, [r4, #8]
 8022fa8:	6866      	ldr	r6, [r4, #4]
 8022faa:	fbb0 f3f2 	udiv	r3, r0, r2
 8022fae:	fbb6 f6f2 	udiv	r6, r6, r2
 8022fb2:	fb02 0313 	mls	r3, r2, r3, r0
 8022fb6:	b29b      	uxth	r3, r3
 8022fb8:	fb03 f606 	mul.w	r6, r3, r6
 8022fbc:	6823      	ldr	r3, [r4, #0]
 8022fbe:	3604      	adds	r6, #4
 8022fc0:	441e      	add	r6, r3
 8022fc2:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8022fc6:	f1b9 0f00 	cmp.w	r9, #0
 8022fca:	d023      	beq.n	8023014 <uxr_next_input_reliable_buffer_available+0x80>
 8022fcc:	4605      	mov	r5, r0
 8022fce:	6923      	ldr	r3, [r4, #16]
 8022fd0:	4630      	mov	r0, r6
 8022fd2:	4798      	blx	r3
 8022fd4:	4682      	mov	sl, r0
 8022fd6:	b300      	cbz	r0, 802301a <uxr_next_input_reliable_buffer_available+0x86>
 8022fd8:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8022fdc:	2101      	movs	r1, #1
 8022fde:	4650      	mov	r0, sl
 8022fe0:	f000 fd3e 	bl	8023a60 <uxr_seq_num_add>
 8022fe4:	8921      	ldrh	r1, [r4, #8]
 8022fe6:	4682      	mov	sl, r0
 8022fe8:	6863      	ldr	r3, [r4, #4]
 8022fea:	6820      	ldr	r0, [r4, #0]
 8022fec:	fbba f2f1 	udiv	r2, sl, r1
 8022ff0:	fbb3 f3f1 	udiv	r3, r3, r1
 8022ff4:	fb01 a212 	mls	r2, r1, r2, sl
 8022ff8:	b292      	uxth	r2, r2
 8022ffa:	fb02 f303 	mul.w	r3, r2, r3
 8022ffe:	3304      	adds	r3, #4
 8023000:	4418      	add	r0, r3
 8023002:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8023006:	b12b      	cbz	r3, 8023014 <uxr_next_input_reliable_buffer_available+0x80>
 8023008:	6923      	ldr	r3, [r4, #16]
 802300a:	4798      	blx	r3
 802300c:	2802      	cmp	r0, #2
 802300e:	d01b      	beq.n	8023048 <uxr_next_input_reliable_buffer_available+0xb4>
 8023010:	2801      	cmp	r0, #1
 8023012:	d0e3      	beq.n	8022fdc <uxr_next_input_reliable_buffer_available+0x48>
 8023014:	2000      	movs	r0, #0
 8023016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802301a:	464a      	mov	r2, r9
 802301c:	4631      	mov	r1, r6
 802301e:	4638      	mov	r0, r7
 8023020:	f7f8 f97a 	bl	801b318 <ucdr_init_buffer>
 8023024:	8921      	ldrh	r1, [r4, #8]
 8023026:	6863      	ldr	r3, [r4, #4]
 8023028:	2001      	movs	r0, #1
 802302a:	fbb5 f2f1 	udiv	r2, r5, r1
 802302e:	fbb3 f3f1 	udiv	r3, r3, r1
 8023032:	fb01 5212 	mls	r2, r1, r2, r5
 8023036:	b292      	uxth	r2, r2
 8023038:	fb02 f303 	mul.w	r3, r2, r3
 802303c:	6822      	ldr	r2, [r4, #0]
 802303e:	f842 a003 	str.w	sl, [r2, r3]
 8023042:	81a5      	strh	r5, [r4, #12]
 8023044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023048:	8920      	ldrh	r0, [r4, #8]
 802304a:	eb06 0108 	add.w	r1, r6, r8
 802304e:	6863      	ldr	r3, [r4, #4]
 8023050:	eba9 0208 	sub.w	r2, r9, r8
 8023054:	fbb5 f6f0 	udiv	r6, r5, r0
 8023058:	fbb3 f3f0 	udiv	r3, r3, r0
 802305c:	fb00 5516 	mls	r5, r0, r6, r5
 8023060:	2000      	movs	r0, #0
 8023062:	b2ad      	uxth	r5, r5
 8023064:	fb03 f505 	mul.w	r5, r3, r5
 8023068:	6823      	ldr	r3, [r4, #0]
 802306a:	5158      	str	r0, [r3, r5]
 802306c:	4638      	mov	r0, r7
 802306e:	f7f8 f953 	bl	801b318 <ucdr_init_buffer>
 8023072:	4638      	mov	r0, r7
 8023074:	4622      	mov	r2, r4
 8023076:	4903      	ldr	r1, [pc, #12]	@ (8023084 <uxr_next_input_reliable_buffer_available+0xf0>)
 8023078:	f7f8 f922 	bl	801b2c0 <ucdr_set_on_full_buffer_callback>
 802307c:	2001      	movs	r0, #1
 802307e:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8023082:	e7c8      	b.n	8023016 <uxr_next_input_reliable_buffer_available+0x82>
 8023084:	08022d95 	.word	0x08022d95

08023088 <uxr_process_heartbeat>:
 8023088:	b538      	push	{r3, r4, r5, lr}
 802308a:	4611      	mov	r1, r2
 802308c:	4604      	mov	r4, r0
 802308e:	89c0      	ldrh	r0, [r0, #14]
 8023090:	4615      	mov	r5, r2
 8023092:	f000 fced 	bl	8023a70 <uxr_seq_num_cmp>
 8023096:	2800      	cmp	r0, #0
 8023098:	bfb8      	it	lt
 802309a:	81e5      	strhlt	r5, [r4, #14]
 802309c:	bd38      	pop	{r3, r4, r5, pc}
 802309e:	bf00      	nop

080230a0 <uxr_compute_acknack>:
 80230a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80230a4:	8903      	ldrh	r3, [r0, #8]
 80230a6:	4604      	mov	r4, r0
 80230a8:	460f      	mov	r7, r1
 80230aa:	8985      	ldrh	r5, [r0, #12]
 80230ac:	b1db      	cbz	r3, 80230e6 <uxr_compute_acknack+0x46>
 80230ae:	4628      	mov	r0, r5
 80230b0:	2601      	movs	r6, #1
 80230b2:	e004      	b.n	80230be <uxr_compute_acknack+0x1e>
 80230b4:	4566      	cmp	r6, ip
 80230b6:	f106 0601 	add.w	r6, r6, #1
 80230ba:	d214      	bcs.n	80230e6 <uxr_compute_acknack+0x46>
 80230bc:	89a0      	ldrh	r0, [r4, #12]
 80230be:	b2b1      	uxth	r1, r6
 80230c0:	f000 fcce 	bl	8023a60 <uxr_seq_num_add>
 80230c4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80230c8:	fbb0 f2fc 	udiv	r2, r0, ip
 80230cc:	e9d4 1300 	ldrd	r1, r3, [r4]
 80230d0:	fb0c 0212 	mls	r2, ip, r2, r0
 80230d4:	fbb3 f3fc 	udiv	r3, r3, ip
 80230d8:	b292      	uxth	r2, r2
 80230da:	fb02 f303 	mul.w	r3, r2, r3
 80230de:	58cb      	ldr	r3, [r1, r3]
 80230e0:	2b00      	cmp	r3, #0
 80230e2:	d1e7      	bne.n	80230b4 <uxr_compute_acknack+0x14>
 80230e4:	4605      	mov	r5, r0
 80230e6:	803d      	strh	r5, [r7, #0]
 80230e8:	2101      	movs	r1, #1
 80230ea:	89e6      	ldrh	r6, [r4, #14]
 80230ec:	4628      	mov	r0, r5
 80230ee:	f000 fcbb 	bl	8023a68 <uxr_seq_num_sub>
 80230f2:	4601      	mov	r1, r0
 80230f4:	4630      	mov	r0, r6
 80230f6:	f000 fcb7 	bl	8023a68 <uxr_seq_num_sub>
 80230fa:	4606      	mov	r6, r0
 80230fc:	b328      	cbz	r0, 802314a <uxr_compute_acknack+0xaa>
 80230fe:	f04f 0900 	mov.w	r9, #0
 8023102:	f04f 0801 	mov.w	r8, #1
 8023106:	464d      	mov	r5, r9
 8023108:	fa1f f189 	uxth.w	r1, r9
 802310c:	8838      	ldrh	r0, [r7, #0]
 802310e:	f000 fca7 	bl	8023a60 <uxr_seq_num_add>
 8023112:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8023116:	6861      	ldr	r1, [r4, #4]
 8023118:	fa08 fe09 	lsl.w	lr, r8, r9
 802311c:	6822      	ldr	r2, [r4, #0]
 802311e:	f109 0901 	add.w	r9, r9, #1
 8023122:	ea4e 0e05 	orr.w	lr, lr, r5
 8023126:	fbb0 f3fc 	udiv	r3, r0, ip
 802312a:	fbb1 f1fc 	udiv	r1, r1, ip
 802312e:	fb03 001c 	mls	r0, r3, ip, r0
 8023132:	b283      	uxth	r3, r0
 8023134:	fb01 f303 	mul.w	r3, r1, r3
 8023138:	58d3      	ldr	r3, [r2, r3]
 802313a:	b90b      	cbnz	r3, 8023140 <uxr_compute_acknack+0xa0>
 802313c:	fa1f f58e 	uxth.w	r5, lr
 8023140:	454e      	cmp	r6, r9
 8023142:	d1e1      	bne.n	8023108 <uxr_compute_acknack+0x68>
 8023144:	4628      	mov	r0, r5
 8023146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802314a:	4605      	mov	r5, r0
 802314c:	4628      	mov	r0, r5
 802314e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023152:	bf00      	nop

08023154 <uxr_init_output_best_effort_stream>:
 8023154:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8023158:	6001      	str	r1, [r0, #0]
 802315a:	7303      	strb	r3, [r0, #12]
 802315c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8023160:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8023164:	4770      	bx	lr
 8023166:	bf00      	nop

08023168 <uxr_reset_output_best_effort_stream>:
 8023168:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802316c:	7b03      	ldrb	r3, [r0, #12]
 802316e:	81c2      	strh	r2, [r0, #14]
 8023170:	6043      	str	r3, [r0, #4]
 8023172:	4770      	bx	lr

08023174 <uxr_prepare_best_effort_buffer_to_write>:
 8023174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023176:	4604      	mov	r4, r0
 8023178:	b083      	sub	sp, #12
 802317a:	6840      	ldr	r0, [r0, #4]
 802317c:	460d      	mov	r5, r1
 802317e:	4616      	mov	r6, r2
 8023180:	f7f9 fdde 	bl	801cd40 <uxr_submessage_padding>
 8023184:	6863      	ldr	r3, [r4, #4]
 8023186:	4418      	add	r0, r3
 8023188:	68a3      	ldr	r3, [r4, #8]
 802318a:	1942      	adds	r2, r0, r5
 802318c:	4293      	cmp	r3, r2
 802318e:	bf2c      	ite	cs
 8023190:	2701      	movcs	r7, #1
 8023192:	2700      	movcc	r7, #0
 8023194:	d202      	bcs.n	802319c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8023196:	4638      	mov	r0, r7
 8023198:	b003      	add	sp, #12
 802319a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802319c:	9000      	str	r0, [sp, #0]
 802319e:	2300      	movs	r3, #0
 80231a0:	4630      	mov	r0, r6
 80231a2:	6821      	ldr	r1, [r4, #0]
 80231a4:	f7f8 f8a6 	bl	801b2f4 <ucdr_init_buffer_origin_offset>
 80231a8:	6861      	ldr	r1, [r4, #4]
 80231aa:	4638      	mov	r0, r7
 80231ac:	4429      	add	r1, r5
 80231ae:	6061      	str	r1, [r4, #4]
 80231b0:	b003      	add	sp, #12
 80231b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080231b4 <uxr_prepare_best_effort_buffer_to_send>:
 80231b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80231b8:	4604      	mov	r4, r0
 80231ba:	461d      	mov	r5, r3
 80231bc:	6840      	ldr	r0, [r0, #4]
 80231be:	7b23      	ldrb	r3, [r4, #12]
 80231c0:	4298      	cmp	r0, r3
 80231c2:	bf8c      	ite	hi
 80231c4:	2601      	movhi	r6, #1
 80231c6:	2600      	movls	r6, #0
 80231c8:	d802      	bhi.n	80231d0 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80231ca:	4630      	mov	r0, r6
 80231cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80231d0:	4688      	mov	r8, r1
 80231d2:	89e0      	ldrh	r0, [r4, #14]
 80231d4:	2101      	movs	r1, #1
 80231d6:	4617      	mov	r7, r2
 80231d8:	f000 fc42 	bl	8023a60 <uxr_seq_num_add>
 80231dc:	6823      	ldr	r3, [r4, #0]
 80231de:	81e0      	strh	r0, [r4, #14]
 80231e0:	8028      	strh	r0, [r5, #0]
 80231e2:	4630      	mov	r0, r6
 80231e4:	f8c8 3000 	str.w	r3, [r8]
 80231e8:	6863      	ldr	r3, [r4, #4]
 80231ea:	603b      	str	r3, [r7, #0]
 80231ec:	7b23      	ldrb	r3, [r4, #12]
 80231ee:	6063      	str	r3, [r4, #4]
 80231f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080231f4 <on_full_output_buffer>:
 80231f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80231f6:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 80231fa:	460c      	mov	r4, r1
 80231fc:	6803      	ldr	r3, [r0, #0]
 80231fe:	4605      	mov	r5, r0
 8023200:	7b26      	ldrb	r6, [r4, #12]
 8023202:	e9d1 1200 	ldrd	r1, r2, [r1]
 8023206:	fbb2 f2fc 	udiv	r2, r2, ip
 802320a:	eba3 0e01 	sub.w	lr, r3, r1
 802320e:	6903      	ldr	r3, [r0, #16]
 8023210:	fbbe fef2 	udiv	lr, lr, r2
 8023214:	f10e 0e01 	add.w	lr, lr, #1
 8023218:	fa1f fe8e 	uxth.w	lr, lr
 802321c:	fbbe f7fc 	udiv	r7, lr, ip
 8023220:	fb0c ec17 	mls	ip, ip, r7, lr
 8023224:	fa1f fc8c 	uxth.w	ip, ip
 8023228:	fb02 fc0c 	mul.w	ip, r2, ip
 802322c:	f851 200c 	ldr.w	r2, [r1, ip]
 8023230:	44b4      	add	ip, r6
 8023232:	1b92      	subs	r2, r2, r6
 8023234:	f10c 0c08 	add.w	ip, ip, #8
 8023238:	3a04      	subs	r2, #4
 802323a:	4461      	add	r1, ip
 802323c:	f7f8 f864 	bl	801b308 <ucdr_init_buffer_origin>
 8023240:	4628      	mov	r0, r5
 8023242:	4622      	mov	r2, r4
 8023244:	4902      	ldr	r1, [pc, #8]	@ (8023250 <on_full_output_buffer+0x5c>)
 8023246:	f7f8 f83b 	bl	801b2c0 <ucdr_set_on_full_buffer_callback>
 802324a:	2000      	movs	r0, #0
 802324c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802324e:	bf00      	nop
 8023250:	080231f5 	.word	0x080231f5

08023254 <uxr_init_output_reliable_stream>:
 8023254:	b530      	push	{r4, r5, lr}
 8023256:	f89d 400c 	ldrb.w	r4, [sp, #12]
 802325a:	8103      	strh	r3, [r0, #8]
 802325c:	7304      	strb	r4, [r0, #12]
 802325e:	e9c0 1200 	strd	r1, r2, [r0]
 8023262:	b1e3      	cbz	r3, 802329e <uxr_init_output_reliable_stream+0x4a>
 8023264:	600c      	str	r4, [r1, #0]
 8023266:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 802326a:	f1bc 0f01 	cmp.w	ip, #1
 802326e:	d916      	bls.n	802329e <uxr_init_output_reliable_stream+0x4a>
 8023270:	f04f 0e01 	mov.w	lr, #1
 8023274:	6843      	ldr	r3, [r0, #4]
 8023276:	f10e 0501 	add.w	r5, lr, #1
 802327a:	7b04      	ldrb	r4, [r0, #12]
 802327c:	6801      	ldr	r1, [r0, #0]
 802327e:	fbbe f2fc 	udiv	r2, lr, ip
 8023282:	fbb3 f3fc 	udiv	r3, r3, ip
 8023286:	fb0c e212 	mls	r2, ip, r2, lr
 802328a:	fa1f fe85 	uxth.w	lr, r5
 802328e:	b292      	uxth	r2, r2
 8023290:	fb02 f303 	mul.w	r3, r2, r3
 8023294:	50cc      	str	r4, [r1, r3]
 8023296:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 802329a:	45f4      	cmp	ip, lr
 802329c:	d8ea      	bhi.n	8023274 <uxr_init_output_reliable_stream+0x20>
 802329e:	4b07      	ldr	r3, [pc, #28]	@ (80232bc <uxr_init_output_reliable_stream+0x68>)
 80232a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80232a4:	f04f 34ff 	mov.w	r4, #4294967295
 80232a8:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 80232ac:	f8c0 300e 	str.w	r3, [r0, #14]
 80232b0:	2300      	movs	r3, #0
 80232b2:	8242      	strh	r2, [r0, #18]
 80232b4:	8403      	strh	r3, [r0, #32]
 80232b6:	e9c0 4506 	strd	r4, r5, [r0, #24]
 80232ba:	bd30      	pop	{r4, r5, pc}
 80232bc:	ffff0000 	.word	0xffff0000

080232c0 <uxr_reset_output_reliable_stream>:
 80232c0:	8901      	ldrh	r1, [r0, #8]
 80232c2:	b510      	push	{r4, lr}
 80232c4:	b1b1      	cbz	r1, 80232f4 <uxr_reset_output_reliable_stream+0x34>
 80232c6:	f04f 0e00 	mov.w	lr, #0
 80232ca:	46f4      	mov	ip, lr
 80232cc:	6843      	ldr	r3, [r0, #4]
 80232ce:	f10e 0e01 	add.w	lr, lr, #1
 80232d2:	7b04      	ldrb	r4, [r0, #12]
 80232d4:	fbbc f2f1 	udiv	r2, ip, r1
 80232d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80232dc:	fb01 c212 	mls	r2, r1, r2, ip
 80232e0:	fa1f fc8e 	uxth.w	ip, lr
 80232e4:	b292      	uxth	r2, r2
 80232e6:	fb02 f303 	mul.w	r3, r2, r3
 80232ea:	6802      	ldr	r2, [r0, #0]
 80232ec:	50d4      	str	r4, [r2, r3]
 80232ee:	8901      	ldrh	r1, [r0, #8]
 80232f0:	4561      	cmp	r1, ip
 80232f2:	d8eb      	bhi.n	80232cc <uxr_reset_output_reliable_stream+0xc>
 80232f4:	4b08      	ldr	r3, [pc, #32]	@ (8023318 <uxr_reset_output_reliable_stream+0x58>)
 80232f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80232fa:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8023310 <uxr_reset_output_reliable_stream+0x50>
 80232fe:	f8c0 300e 	str.w	r3, [r0, #14]
 8023302:	2300      	movs	r3, #0
 8023304:	8242      	strh	r2, [r0, #18]
 8023306:	8403      	strh	r3, [r0, #32]
 8023308:	ed80 7b06 	vstr	d7, [r0, #24]
 802330c:	bd10      	pop	{r4, pc}
 802330e:	bf00      	nop
 8023310:	ffffffff 	.word	0xffffffff
 8023314:	7fffffff 	.word	0x7fffffff
 8023318:	ffff0000 	.word	0xffff0000

0802331c <uxr_prepare_reliable_buffer_to_write>:
 802331c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023320:	4604      	mov	r4, r0
 8023322:	b091      	sub	sp, #68	@ 0x44
 8023324:	8900      	ldrh	r0, [r0, #8]
 8023326:	468b      	mov	fp, r1
 8023328:	89e6      	ldrh	r6, [r4, #14]
 802332a:	9204      	str	r2, [sp, #16]
 802332c:	6865      	ldr	r5, [r4, #4]
 802332e:	6823      	ldr	r3, [r4, #0]
 8023330:	f894 900c 	ldrb.w	r9, [r4, #12]
 8023334:	fbb6 f2f0 	udiv	r2, r6, r0
 8023338:	fbb5 f5f0 	udiv	r5, r5, r0
 802333c:	fb00 6212 	mls	r2, r0, r2, r6
 8023340:	1f2f      	subs	r7, r5, #4
 8023342:	b292      	uxth	r2, r2
 8023344:	fb05 3202 	mla	r2, r5, r2, r3
 8023348:	1d11      	adds	r1, r2, #4
 802334a:	f8d2 8000 	ldr.w	r8, [r2]
 802334e:	9103      	str	r1, [sp, #12]
 8023350:	2800      	cmp	r0, #0
 8023352:	f000 814a 	beq.w	80235ea <uxr_prepare_reliable_buffer_to_write+0x2ce>
 8023356:	f04f 0c00 	mov.w	ip, #0
 802335a:	46e2      	mov	sl, ip
 802335c:	4661      	mov	r1, ip
 802335e:	f10c 0c01 	add.w	ip, ip, #1
 8023362:	fbb1 f2f0 	udiv	r2, r1, r0
 8023366:	fb00 1212 	mls	r2, r0, r2, r1
 802336a:	fa1f f18c 	uxth.w	r1, ip
 802336e:	b292      	uxth	r2, r2
 8023370:	fb05 f202 	mul.w	r2, r5, r2
 8023374:	589a      	ldr	r2, [r3, r2]
 8023376:	454a      	cmp	r2, r9
 8023378:	d103      	bne.n	8023382 <uxr_prepare_reliable_buffer_to_write+0x66>
 802337a:	f10a 0a01 	add.w	sl, sl, #1
 802337e:	fa1f fa8a 	uxth.w	sl, sl
 8023382:	4281      	cmp	r1, r0
 8023384:	d3eb      	bcc.n	802335e <uxr_prepare_reliable_buffer_to_write+0x42>
 8023386:	4640      	mov	r0, r8
 8023388:	2104      	movs	r1, #4
 802338a:	f8cd a014 	str.w	sl, [sp, #20]
 802338e:	f7f7 ffc7 	bl	801b320 <ucdr_alignment>
 8023392:	4480      	add	r8, r0
 8023394:	eb08 020b 	add.w	r2, r8, fp
 8023398:	42ba      	cmp	r2, r7
 802339a:	f240 80ca 	bls.w	8023532 <uxr_prepare_reliable_buffer_to_write+0x216>
 802339e:	7b22      	ldrb	r2, [r4, #12]
 80233a0:	445a      	add	r2, fp
 80233a2:	42ba      	cmp	r2, r7
 80233a4:	f240 80b2 	bls.w	802350c <uxr_prepare_reliable_buffer_to_write+0x1f0>
 80233a8:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80233ac:	b2bb      	uxth	r3, r7
 80233ae:	eba2 0209 	sub.w	r2, r2, r9
 80233b2:	441a      	add	r2, r3
 80233b4:	b292      	uxth	r2, r2
 80233b6:	fb0a f902 	mul.w	r9, sl, r2
 80233ba:	9205      	str	r2, [sp, #20]
 80233bc:	45d9      	cmp	r9, fp
 80233be:	9206      	str	r2, [sp, #24]
 80233c0:	f0c0 80b3 	bcc.w	802352a <uxr_prepare_reliable_buffer_to_write+0x20e>
 80233c4:	f108 0204 	add.w	r2, r8, #4
 80233c8:	42ba      	cmp	r2, r7
 80233ca:	f080 80da 	bcs.w	8023582 <uxr_prepare_reliable_buffer_to_write+0x266>
 80233ce:	f1a3 0904 	sub.w	r9, r3, #4
 80233d2:	9b05      	ldr	r3, [sp, #20]
 80233d4:	eba9 0908 	sub.w	r9, r9, r8
 80233d8:	fa1f f989 	uxth.w	r9, r9
 80233dc:	ebab 0b09 	sub.w	fp, fp, r9
 80233e0:	fbbb f2f3 	udiv	r2, fp, r3
 80233e4:	fb03 b312 	mls	r3, r3, r2, fp
 80233e8:	2b00      	cmp	r3, #0
 80233ea:	f040 80c4 	bne.w	8023576 <uxr_prepare_reliable_buffer_to_write+0x25a>
 80233ee:	b293      	uxth	r3, r2
 80233f0:	4553      	cmp	r3, sl
 80233f2:	f200 809a 	bhi.w	802352a <uxr_prepare_reliable_buffer_to_write+0x20e>
 80233f6:	2b00      	cmp	r3, #0
 80233f8:	f000 80f9 	beq.w	80235ee <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80233fc:	f8cd 801c 	str.w	r8, [sp, #28]
 8023400:	f04f 0a00 	mov.w	sl, #0
 8023404:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8023408:	f10d 0b20 	add.w	fp, sp, #32
 802340c:	9505      	str	r5, [sp, #20]
 802340e:	461d      	mov	r5, r3
 8023410:	e000      	b.n	8023414 <uxr_prepare_reliable_buffer_to_write+0xf8>
 8023412:	46c1      	mov	r9, r8
 8023414:	8922      	ldrh	r2, [r4, #8]
 8023416:	4658      	mov	r0, fp
 8023418:	6863      	ldr	r3, [r4, #4]
 802341a:	f10a 0a01 	add.w	sl, sl, #1
 802341e:	fbb6 f1f2 	udiv	r1, r6, r2
 8023422:	fbb3 f3f2 	udiv	r3, r3, r2
 8023426:	fb02 6111 	mls	r1, r2, r1, r6
 802342a:	463a      	mov	r2, r7
 802342c:	b289      	uxth	r1, r1
 802342e:	fb03 f101 	mul.w	r1, r3, r1
 8023432:	6823      	ldr	r3, [r4, #0]
 8023434:	3104      	adds	r1, #4
 8023436:	4419      	add	r1, r3
 8023438:	2300      	movs	r3, #0
 802343a:	f851 cc04 	ldr.w	ip, [r1, #-4]
 802343e:	f8cd c000 	str.w	ip, [sp]
 8023442:	f7f7 ff57 	bl	801b2f4 <ucdr_init_buffer_origin_offset>
 8023446:	464a      	mov	r2, r9
 8023448:	2300      	movs	r3, #0
 802344a:	210d      	movs	r1, #13
 802344c:	4658      	mov	r0, fp
 802344e:	f7f9 fc37 	bl	801ccc0 <uxr_buffer_submessage_header>
 8023452:	8921      	ldrh	r1, [r4, #8]
 8023454:	6863      	ldr	r3, [r4, #4]
 8023456:	4630      	mov	r0, r6
 8023458:	fbb6 f2f1 	udiv	r2, r6, r1
 802345c:	fbb3 f3f1 	udiv	r3, r3, r1
 8023460:	fb01 6212 	mls	r2, r1, r2, r6
 8023464:	2101      	movs	r1, #1
 8023466:	b292      	uxth	r2, r2
 8023468:	fb02 f303 	mul.w	r3, r2, r3
 802346c:	6822      	ldr	r2, [r4, #0]
 802346e:	50d7      	str	r7, [r2, r3]
 8023470:	f000 faf6 	bl	8023a60 <uxr_seq_num_add>
 8023474:	4606      	mov	r6, r0
 8023476:	fa1f f38a 	uxth.w	r3, sl
 802347a:	429d      	cmp	r5, r3
 802347c:	d8c9      	bhi.n	8023412 <uxr_prepare_reliable_buffer_to_write+0xf6>
 802347e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8023482:	9d05      	ldr	r5, [sp, #20]
 8023484:	8920      	ldrh	r0, [r4, #8]
 8023486:	463a      	mov	r2, r7
 8023488:	6863      	ldr	r3, [r4, #4]
 802348a:	fbb6 f1f0 	udiv	r1, r6, r0
 802348e:	fbb3 f3f0 	udiv	r3, r3, r0
 8023492:	fb00 6111 	mls	r1, r0, r1, r6
 8023496:	4658      	mov	r0, fp
 8023498:	b289      	uxth	r1, r1
 802349a:	fb01 f303 	mul.w	r3, r1, r3
 802349e:	6821      	ldr	r1, [r4, #0]
 80234a0:	3304      	adds	r3, #4
 80234a2:	4419      	add	r1, r3
 80234a4:	2300      	movs	r3, #0
 80234a6:	f851 7c04 	ldr.w	r7, [r1, #-4]
 80234aa:	9700      	str	r7, [sp, #0]
 80234ac:	f7f7 ff22 	bl	801b2f4 <ucdr_init_buffer_origin_offset>
 80234b0:	9f06      	ldr	r7, [sp, #24]
 80234b2:	4658      	mov	r0, fp
 80234b4:	2302      	movs	r3, #2
 80234b6:	b2ba      	uxth	r2, r7
 80234b8:	210d      	movs	r1, #13
 80234ba:	f7f9 fc01 	bl	801ccc0 <uxr_buffer_submessage_header>
 80234be:	f108 0104 	add.w	r1, r8, #4
 80234c2:	9b03      	ldr	r3, [sp, #12]
 80234c4:	f1a5 0208 	sub.w	r2, r5, #8
 80234c8:	8925      	ldrh	r5, [r4, #8]
 80234ca:	440b      	add	r3, r1
 80234cc:	eba2 0208 	sub.w	r2, r2, r8
 80234d0:	fbb6 f0f5 	udiv	r0, r6, r5
 80234d4:	4619      	mov	r1, r3
 80234d6:	6863      	ldr	r3, [r4, #4]
 80234d8:	fb05 6010 	mls	r0, r5, r0, r6
 80234dc:	fbb3 f3f5 	udiv	r3, r3, r5
 80234e0:	b280      	uxth	r0, r0
 80234e2:	6825      	ldr	r5, [r4, #0]
 80234e4:	fb00 f303 	mul.w	r3, r0, r3
 80234e8:	7b20      	ldrb	r0, [r4, #12]
 80234ea:	3004      	adds	r0, #4
 80234ec:	4438      	add	r0, r7
 80234ee:	50e8      	str	r0, [r5, r3]
 80234f0:	9d04      	ldr	r5, [sp, #16]
 80234f2:	4628      	mov	r0, r5
 80234f4:	f7f7 ff10 	bl	801b318 <ucdr_init_buffer>
 80234f8:	4628      	mov	r0, r5
 80234fa:	4622      	mov	r2, r4
 80234fc:	493d      	ldr	r1, [pc, #244]	@ (80235f4 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 80234fe:	f7f7 fedf 	bl	801b2c0 <ucdr_set_on_full_buffer_callback>
 8023502:	2001      	movs	r0, #1
 8023504:	81e6      	strh	r6, [r4, #14]
 8023506:	b011      	add	sp, #68	@ 0x44
 8023508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802350c:	2101      	movs	r1, #1
 802350e:	89e0      	ldrh	r0, [r4, #14]
 8023510:	f000 faa6 	bl	8023a60 <uxr_seq_num_add>
 8023514:	4605      	mov	r5, r0
 8023516:	8921      	ldrh	r1, [r4, #8]
 8023518:	8a60      	ldrh	r0, [r4, #18]
 802351a:	f000 faa1 	bl	8023a60 <uxr_seq_num_add>
 802351e:	4601      	mov	r1, r0
 8023520:	4628      	mov	r0, r5
 8023522:	f000 faa5 	bl	8023a70 <uxr_seq_num_cmp>
 8023526:	2800      	cmp	r0, #0
 8023528:	dd44      	ble.n	80235b4 <uxr_prepare_reliable_buffer_to_write+0x298>
 802352a:	2000      	movs	r0, #0
 802352c:	b011      	add	sp, #68	@ 0x44
 802352e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023532:	8921      	ldrh	r1, [r4, #8]
 8023534:	8a60      	ldrh	r0, [r4, #18]
 8023536:	9205      	str	r2, [sp, #20]
 8023538:	f000 fa92 	bl	8023a60 <uxr_seq_num_add>
 802353c:	4601      	mov	r1, r0
 802353e:	4630      	mov	r0, r6
 8023540:	f000 fa96 	bl	8023a70 <uxr_seq_num_cmp>
 8023544:	2800      	cmp	r0, #0
 8023546:	9a05      	ldr	r2, [sp, #20]
 8023548:	dcef      	bgt.n	802352a <uxr_prepare_reliable_buffer_to_write+0x20e>
 802354a:	8925      	ldrh	r5, [r4, #8]
 802354c:	e9d4 7300 	ldrd	r7, r3, [r4]
 8023550:	fbb6 f4f5 	udiv	r4, r6, r5
 8023554:	fbb3 f3f5 	udiv	r3, r3, r5
 8023558:	fb05 6414 	mls	r4, r5, r4, r6
 802355c:	b2a4      	uxth	r4, r4
 802355e:	fb04 f303 	mul.w	r3, r4, r3
 8023562:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8023566:	50fa      	str	r2, [r7, r3]
 8023568:	2300      	movs	r3, #0
 802356a:	f8cd 8000 	str.w	r8, [sp]
 802356e:	f7f7 fec1 	bl	801b2f4 <ucdr_init_buffer_origin_offset>
 8023572:	2001      	movs	r0, #1
 8023574:	e7da      	b.n	802352c <uxr_prepare_reliable_buffer_to_write+0x210>
 8023576:	3201      	adds	r2, #1
 8023578:	9306      	str	r3, [sp, #24]
 802357a:	b293      	uxth	r3, r2
 802357c:	4553      	cmp	r3, sl
 802357e:	d8d4      	bhi.n	802352a <uxr_prepare_reliable_buffer_to_write+0x20e>
 8023580:	e739      	b.n	80233f6 <uxr_prepare_reliable_buffer_to_write+0xda>
 8023582:	4630      	mov	r0, r6
 8023584:	2101      	movs	r1, #1
 8023586:	9307      	str	r3, [sp, #28]
 8023588:	f000 fa6a 	bl	8023a60 <uxr_seq_num_add>
 802358c:	4606      	mov	r6, r0
 802358e:	8920      	ldrh	r0, [r4, #8]
 8023590:	6862      	ldr	r2, [r4, #4]
 8023592:	fbb6 f1f0 	udiv	r1, r6, r0
 8023596:	fbb2 f2f0 	udiv	r2, r2, r0
 802359a:	fb00 6111 	mls	r1, r0, r1, r6
 802359e:	b289      	uxth	r1, r1
 80235a0:	fb01 f202 	mul.w	r2, r1, r2
 80235a4:	6821      	ldr	r1, [r4, #0]
 80235a6:	3204      	adds	r2, #4
 80235a8:	188b      	adds	r3, r1, r2
 80235aa:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80235ae:	9303      	str	r3, [sp, #12]
 80235b0:	9b07      	ldr	r3, [sp, #28]
 80235b2:	e70c      	b.n	80233ce <uxr_prepare_reliable_buffer_to_write+0xb2>
 80235b4:	8921      	ldrh	r1, [r4, #8]
 80235b6:	6863      	ldr	r3, [r4, #4]
 80235b8:	9804      	ldr	r0, [sp, #16]
 80235ba:	fbb5 f2f1 	udiv	r2, r5, r1
 80235be:	fbb3 f3f1 	udiv	r3, r3, r1
 80235c2:	fb01 5212 	mls	r2, r1, r2, r5
 80235c6:	6821      	ldr	r1, [r4, #0]
 80235c8:	b292      	uxth	r2, r2
 80235ca:	fb02 f303 	mul.w	r3, r2, r3
 80235ce:	7b22      	ldrb	r2, [r4, #12]
 80235d0:	3304      	adds	r3, #4
 80235d2:	445a      	add	r2, fp
 80235d4:	4419      	add	r1, r3
 80235d6:	f841 2c04 	str.w	r2, [r1, #-4]
 80235da:	7b23      	ldrb	r3, [r4, #12]
 80235dc:	9300      	str	r3, [sp, #0]
 80235de:	2300      	movs	r3, #0
 80235e0:	f7f7 fe88 	bl	801b2f4 <ucdr_init_buffer_origin_offset>
 80235e4:	2001      	movs	r0, #1
 80235e6:	81e5      	strh	r5, [r4, #14]
 80235e8:	e7a0      	b.n	802352c <uxr_prepare_reliable_buffer_to_write+0x210>
 80235ea:	4682      	mov	sl, r0
 80235ec:	e6cb      	b.n	8023386 <uxr_prepare_reliable_buffer_to_write+0x6a>
 80235ee:	f10d 0b20 	add.w	fp, sp, #32
 80235f2:	e747      	b.n	8023484 <uxr_prepare_reliable_buffer_to_write+0x168>
 80235f4:	080231f5 	.word	0x080231f5

080235f8 <uxr_prepare_next_reliable_buffer_to_send>:
 80235f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80235fa:	4604      	mov	r4, r0
 80235fc:	461d      	mov	r5, r3
 80235fe:	460f      	mov	r7, r1
 8023600:	8a00      	ldrh	r0, [r0, #16]
 8023602:	2101      	movs	r1, #1
 8023604:	4616      	mov	r6, r2
 8023606:	f000 fa2b 	bl	8023a60 <uxr_seq_num_add>
 802360a:	8028      	strh	r0, [r5, #0]
 802360c:	8922      	ldrh	r2, [r4, #8]
 802360e:	6863      	ldr	r3, [r4, #4]
 8023610:	fbb0 f1f2 	udiv	r1, r0, r2
 8023614:	fbb3 f3f2 	udiv	r3, r3, r2
 8023618:	fb02 0c11 	mls	ip, r2, r1, r0
 802361c:	89e1      	ldrh	r1, [r4, #14]
 802361e:	fa1f fc8c 	uxth.w	ip, ip
 8023622:	fb0c fc03 	mul.w	ip, ip, r3
 8023626:	6823      	ldr	r3, [r4, #0]
 8023628:	f10c 0c04 	add.w	ip, ip, #4
 802362c:	4463      	add	r3, ip
 802362e:	603b      	str	r3, [r7, #0]
 8023630:	6823      	ldr	r3, [r4, #0]
 8023632:	449c      	add	ip, r3
 8023634:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8023638:	6033      	str	r3, [r6, #0]
 802363a:	f000 fa19 	bl	8023a70 <uxr_seq_num_cmp>
 802363e:	2800      	cmp	r0, #0
 8023640:	dd01      	ble.n	8023646 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8023642:	2000      	movs	r0, #0
 8023644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023646:	7b23      	ldrb	r3, [r4, #12]
 8023648:	6832      	ldr	r2, [r6, #0]
 802364a:	429a      	cmp	r2, r3
 802364c:	d9f9      	bls.n	8023642 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 802364e:	8a61      	ldrh	r1, [r4, #18]
 8023650:	8a20      	ldrh	r0, [r4, #16]
 8023652:	f000 fa09 	bl	8023a68 <uxr_seq_num_sub>
 8023656:	8923      	ldrh	r3, [r4, #8]
 8023658:	4283      	cmp	r3, r0
 802365a:	d0f2      	beq.n	8023642 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 802365c:	8828      	ldrh	r0, [r5, #0]
 802365e:	89e3      	ldrh	r3, [r4, #14]
 8023660:	8220      	strh	r0, [r4, #16]
 8023662:	4298      	cmp	r0, r3
 8023664:	d001      	beq.n	802366a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8023666:	2001      	movs	r0, #1
 8023668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802366a:	2101      	movs	r1, #1
 802366c:	f000 f9f8 	bl	8023a60 <uxr_seq_num_add>
 8023670:	4603      	mov	r3, r0
 8023672:	2001      	movs	r0, #1
 8023674:	81e3      	strh	r3, [r4, #14]
 8023676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08023678 <uxr_update_output_stream_heartbeat_timestamp>:
 8023678:	b570      	push	{r4, r5, r6, lr}
 802367a:	8a01      	ldrh	r1, [r0, #16]
 802367c:	4604      	mov	r4, r0
 802367e:	8a40      	ldrh	r0, [r0, #18]
 8023680:	4615      	mov	r5, r2
 8023682:	461e      	mov	r6, r3
 8023684:	f000 f9f4 	bl	8023a70 <uxr_seq_num_cmp>
 8023688:	2800      	cmp	r0, #0
 802368a:	db07      	blt.n	802369c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 802368c:	f04f 32ff 	mov.w	r2, #4294967295
 8023690:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8023694:	2000      	movs	r0, #0
 8023696:	e9c4 2306 	strd	r2, r3, [r4, #24]
 802369a:	bd70      	pop	{r4, r5, r6, pc}
 802369c:	f894 0020 	ldrb.w	r0, [r4, #32]
 80236a0:	b940      	cbnz	r0, 80236b4 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80236a2:	2301      	movs	r3, #1
 80236a4:	f884 3020 	strb.w	r3, [r4, #32]
 80236a8:	3564      	adds	r5, #100	@ 0x64
 80236aa:	f146 0600 	adc.w	r6, r6, #0
 80236ae:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80236b2:	bd70      	pop	{r4, r5, r6, pc}
 80236b4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80236b8:	4295      	cmp	r5, r2
 80236ba:	eb76 0303 	sbcs.w	r3, r6, r3
 80236be:	db04      	blt.n	80236ca <uxr_update_output_stream_heartbeat_timestamp+0x52>
 80236c0:	1c43      	adds	r3, r0, #1
 80236c2:	2001      	movs	r0, #1
 80236c4:	f884 3020 	strb.w	r3, [r4, #32]
 80236c8:	e7ee      	b.n	80236a8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 80236ca:	2000      	movs	r0, #0
 80236cc:	e7ec      	b.n	80236a8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 80236ce:	bf00      	nop

080236d0 <uxr_begin_output_nack_buffer_it>:
 80236d0:	8a40      	ldrh	r0, [r0, #18]
 80236d2:	4770      	bx	lr

080236d4 <uxr_next_reliable_nack_buffer_to_send>:
 80236d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80236d8:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 80236dc:	b197      	cbz	r7, 8023704 <uxr_next_reliable_nack_buffer_to_send+0x30>
 80236de:	4680      	mov	r8, r0
 80236e0:	460d      	mov	r5, r1
 80236e2:	4616      	mov	r6, r2
 80236e4:	461c      	mov	r4, r3
 80236e6:	8818      	ldrh	r0, [r3, #0]
 80236e8:	2101      	movs	r1, #1
 80236ea:	f000 f9b9 	bl	8023a60 <uxr_seq_num_add>
 80236ee:	8020      	strh	r0, [r4, #0]
 80236f0:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 80236f4:	f000 f9bc 	bl	8023a70 <uxr_seq_num_cmp>
 80236f8:	2800      	cmp	r0, #0
 80236fa:	dd06      	ble.n	802370a <uxr_next_reliable_nack_buffer_to_send+0x36>
 80236fc:	2300      	movs	r3, #0
 80236fe:	461f      	mov	r7, r3
 8023700:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 8023704:	4638      	mov	r0, r7
 8023706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802370a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 802370e:	8820      	ldrh	r0, [r4, #0]
 8023710:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8023714:	fbb0 f3f2 	udiv	r3, r0, r2
 8023718:	fbb1 fcf2 	udiv	ip, r1, r2
 802371c:	fb02 0313 	mls	r3, r2, r3, r0
 8023720:	b29b      	uxth	r3, r3
 8023722:	fb03 fc0c 	mul.w	ip, r3, ip
 8023726:	f8d8 3000 	ldr.w	r3, [r8]
 802372a:	f10c 0c04 	add.w	ip, ip, #4
 802372e:	4463      	add	r3, ip
 8023730:	602b      	str	r3, [r5, #0]
 8023732:	f8d8 3000 	ldr.w	r3, [r8]
 8023736:	4463      	add	r3, ip
 8023738:	f853 3c04 	ldr.w	r3, [r3, #-4]
 802373c:	6033      	str	r3, [r6, #0]
 802373e:	f898 200c 	ldrb.w	r2, [r8, #12]
 8023742:	429a      	cmp	r2, r3
 8023744:	d0d0      	beq.n	80236e8 <uxr_next_reliable_nack_buffer_to_send+0x14>
 8023746:	e7dd      	b.n	8023704 <uxr_next_reliable_nack_buffer_to_send+0x30>

08023748 <uxr_process_acknack>:
 8023748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802374a:	4604      	mov	r4, r0
 802374c:	460e      	mov	r6, r1
 802374e:	4610      	mov	r0, r2
 8023750:	2101      	movs	r1, #1
 8023752:	f000 f989 	bl	8023a68 <uxr_seq_num_sub>
 8023756:	8a61      	ldrh	r1, [r4, #18]
 8023758:	f000 f986 	bl	8023a68 <uxr_seq_num_sub>
 802375c:	b1c8      	cbz	r0, 8023792 <uxr_process_acknack+0x4a>
 802375e:	4605      	mov	r5, r0
 8023760:	2700      	movs	r7, #0
 8023762:	2101      	movs	r1, #1
 8023764:	8a60      	ldrh	r0, [r4, #18]
 8023766:	f000 f97b 	bl	8023a60 <uxr_seq_num_add>
 802376a:	8923      	ldrh	r3, [r4, #8]
 802376c:	6862      	ldr	r2, [r4, #4]
 802376e:	3701      	adds	r7, #1
 8023770:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8023774:	6821      	ldr	r1, [r4, #0]
 8023776:	42bd      	cmp	r5, r7
 8023778:	8260      	strh	r0, [r4, #18]
 802377a:	fbb0 fef3 	udiv	lr, r0, r3
 802377e:	fbb2 f2f3 	udiv	r2, r2, r3
 8023782:	fb03 031e 	mls	r3, r3, lr, r0
 8023786:	b29b      	uxth	r3, r3
 8023788:	fb02 f303 	mul.w	r3, r2, r3
 802378c:	f841 c003 	str.w	ip, [r1, r3]
 8023790:	d1e7      	bne.n	8023762 <uxr_process_acknack+0x1a>
 8023792:	3e00      	subs	r6, #0
 8023794:	f04f 0300 	mov.w	r3, #0
 8023798:	bf18      	it	ne
 802379a:	2601      	movne	r6, #1
 802379c:	f884 3020 	strb.w	r3, [r4, #32]
 80237a0:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80237a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80237a6:	bf00      	nop

080237a8 <uxr_is_output_up_to_date>:
 80237a8:	8a01      	ldrh	r1, [r0, #16]
 80237aa:	8a40      	ldrh	r0, [r0, #18]
 80237ac:	b508      	push	{r3, lr}
 80237ae:	f000 f95f 	bl	8023a70 <uxr_seq_num_cmp>
 80237b2:	fab0 f080 	clz	r0, r0
 80237b6:	0940      	lsrs	r0, r0, #5
 80237b8:	bd08      	pop	{r3, pc}
 80237ba:	bf00      	nop

080237bc <get_available_free_slots>:
 80237bc:	8901      	ldrh	r1, [r0, #8]
 80237be:	b1e1      	cbz	r1, 80237fa <get_available_free_slots+0x3e>
 80237c0:	6843      	ldr	r3, [r0, #4]
 80237c2:	f04f 0c00 	mov.w	ip, #0
 80237c6:	b530      	push	{r4, r5, lr}
 80237c8:	fbb3 fef1 	udiv	lr, r3, r1
 80237cc:	6805      	ldr	r5, [r0, #0]
 80237ce:	4662      	mov	r2, ip
 80237d0:	7b04      	ldrb	r4, [r0, #12]
 80237d2:	4660      	mov	r0, ip
 80237d4:	f10c 0c01 	add.w	ip, ip, #1
 80237d8:	fbb2 f3f1 	udiv	r3, r2, r1
 80237dc:	fb01 2313 	mls	r3, r1, r3, r2
 80237e0:	fa1f f28c 	uxth.w	r2, ip
 80237e4:	b29b      	uxth	r3, r3
 80237e6:	fb0e f303 	mul.w	r3, lr, r3
 80237ea:	58eb      	ldr	r3, [r5, r3]
 80237ec:	429c      	cmp	r4, r3
 80237ee:	d101      	bne.n	80237f4 <get_available_free_slots+0x38>
 80237f0:	3001      	adds	r0, #1
 80237f2:	b280      	uxth	r0, r0
 80237f4:	428a      	cmp	r2, r1
 80237f6:	d3ed      	bcc.n	80237d4 <get_available_free_slots+0x18>
 80237f8:	bd30      	pop	{r4, r5, pc}
 80237fa:	4608      	mov	r0, r1
 80237fc:	4770      	bx	lr
 80237fe:	bf00      	nop

08023800 <uxr_buffer_request_data>:
 8023800:	b530      	push	{r4, r5, lr}
 8023802:	b095      	sub	sp, #84	@ 0x54
 8023804:	4604      	mov	r4, r0
 8023806:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8023808:	9303      	str	r3, [sp, #12]
 802380a:	2d00      	cmp	r5, #0
 802380c:	f88d 301c 	strb.w	r3, [sp, #28]
 8023810:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8023814:	f04f 0200 	mov.w	r2, #0
 8023818:	bf14      	ite	ne
 802381a:	2101      	movne	r1, #1
 802381c:	4611      	moveq	r1, r2
 802381e:	f88d 201d 	strb.w	r2, [sp, #29]
 8023822:	f88d 201e 	strb.w	r2, [sp, #30]
 8023826:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 802382a:	d021      	beq.n	8023870 <uxr_buffer_request_data+0x70>
 802382c:	686b      	ldr	r3, [r5, #4]
 802382e:	2210      	movs	r2, #16
 8023830:	6829      	ldr	r1, [r5, #0]
 8023832:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8023836:	f8cd 1026 	str.w	r1, [sp, #38]	@ 0x26
 802383a:	2308      	movs	r3, #8
 802383c:	2100      	movs	r1, #0
 802383e:	4620      	mov	r0, r4
 8023840:	e9cd 3100 	strd	r3, r1, [sp]
 8023844:	ab0c      	add	r3, sp, #48	@ 0x30
 8023846:	9905      	ldr	r1, [sp, #20]
 8023848:	f7f8 ff8e 	bl	801c768 <uxr_prepare_stream_to_write_submessage>
 802384c:	b918      	cbnz	r0, 8023856 <uxr_buffer_request_data+0x56>
 802384e:	4604      	mov	r4, r0
 8023850:	4620      	mov	r0, r4
 8023852:	b015      	add	sp, #84	@ 0x54
 8023854:	bd30      	pop	{r4, r5, pc}
 8023856:	9904      	ldr	r1, [sp, #16]
 8023858:	aa06      	add	r2, sp, #24
 802385a:	4620      	mov	r0, r4
 802385c:	f7f9 f8c0 	bl	801c9e0 <uxr_init_base_object_request>
 8023860:	4604      	mov	r4, r0
 8023862:	a906      	add	r1, sp, #24
 8023864:	a80c      	add	r0, sp, #48	@ 0x30
 8023866:	f7fa fbbf 	bl	801dfe8 <uxr_serialize_READ_DATA_Payload>
 802386a:	4620      	mov	r0, r4
 802386c:	b015      	add	sp, #84	@ 0x54
 802386e:	bd30      	pop	{r4, r5, pc}
 8023870:	2208      	movs	r2, #8
 8023872:	e7e2      	b.n	802383a <uxr_buffer_request_data+0x3a>

08023874 <uxr_buffer_cancel_data>:
 8023874:	b510      	push	{r4, lr}
 8023876:	2300      	movs	r3, #0
 8023878:	b094      	sub	sp, #80	@ 0x50
 802387a:	4604      	mov	r4, r0
 802387c:	9205      	str	r2, [sp, #20]
 802387e:	9301      	str	r3, [sp, #4]
 8023880:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023884:	f88d 301e 	strb.w	r3, [sp, #30]
 8023888:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 802388c:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8023890:	2308      	movs	r3, #8
 8023892:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8023896:	2201      	movs	r2, #1
 8023898:	9300      	str	r3, [sp, #0]
 802389a:	ab0c      	add	r3, sp, #48	@ 0x30
 802389c:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 80238a0:	2210      	movs	r2, #16
 80238a2:	f7f8 ff61 	bl	801c768 <uxr_prepare_stream_to_write_submessage>
 80238a6:	b918      	cbnz	r0, 80238b0 <uxr_buffer_cancel_data+0x3c>
 80238a8:	4604      	mov	r4, r0
 80238aa:	4620      	mov	r0, r4
 80238ac:	b014      	add	sp, #80	@ 0x50
 80238ae:	bd10      	pop	{r4, pc}
 80238b0:	9905      	ldr	r1, [sp, #20]
 80238b2:	aa06      	add	r2, sp, #24
 80238b4:	4620      	mov	r0, r4
 80238b6:	f7f9 f893 	bl	801c9e0 <uxr_init_base_object_request>
 80238ba:	4604      	mov	r4, r0
 80238bc:	a906      	add	r1, sp, #24
 80238be:	a80c      	add	r0, sp, #48	@ 0x30
 80238c0:	f7fa fb92 	bl	801dfe8 <uxr_serialize_READ_DATA_Payload>
 80238c4:	4620      	mov	r0, r4
 80238c6:	b014      	add	sp, #80	@ 0x50
 80238c8:	bd10      	pop	{r4, pc}
 80238ca:	bf00      	nop

080238cc <read_submessage_format>:
 80238cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80238d0:	b095      	sub	sp, #84	@ 0x54
 80238d2:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 80238d6:	b113      	cbz	r3, 80238de <read_submessage_format+0x12>
 80238d8:	b015      	add	sp, #84	@ 0x54
 80238da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80238de:	4606      	mov	r6, r0
 80238e0:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80238e2:	460c      	mov	r4, r1
 80238e4:	4615      	mov	r5, r2
 80238e6:	9004      	str	r0, [sp, #16]
 80238e8:	4699      	mov	r9, r3
 80238ea:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80238ec:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 80238f0:	9005      	str	r0, [sp, #20]
 80238f2:	a80c      	add	r0, sp, #48	@ 0x30
 80238f4:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80238f8:	1a52      	subs	r2, r2, r1
 80238fa:	f7f7 fd0d 	bl	801b318 <ucdr_init_buffer>
 80238fe:	a80c      	add	r0, sp, #48	@ 0x30
 8023900:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8023904:	f7f7 fcdc 	bl	801b2c0 <ucdr_set_on_full_buffer_callback>
 8023908:	69e2      	ldr	r2, [r4, #28]
 802390a:	b19a      	cbz	r2, 8023934 <read_submessage_format+0x68>
 802390c:	f1b8 0f07 	cmp.w	r8, #7
 8023910:	f882 9014 	strb.w	r9, [r2, #20]
 8023914:	d040      	beq.n	8023998 <read_submessage_format+0xcc>
 8023916:	f1b8 0f08 	cmp.w	r8, #8
 802391a:	d02e      	beq.n	802397a <read_submessage_format+0xae>
 802391c:	f1b8 0f06 	cmp.w	r8, #6
 8023920:	d011      	beq.n	8023946 <read_submessage_format+0x7a>
 8023922:	2301      	movs	r3, #1
 8023924:	7513      	strb	r3, [r2, #20]
 8023926:	4629      	mov	r1, r5
 8023928:	4620      	mov	r0, r4
 802392a:	f7f7 fd49 	bl	801b3c0 <ucdr_advance_buffer>
 802392e:	b015      	add	sp, #84	@ 0x54
 8023930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023934:	f1b8 0f07 	cmp.w	r8, #7
 8023938:	d02e      	beq.n	8023998 <read_submessage_format+0xcc>
 802393a:	f1b8 0f08 	cmp.w	r8, #8
 802393e:	d01c      	beq.n	802397a <read_submessage_format+0xae>
 8023940:	f1b8 0f06 	cmp.w	r8, #6
 8023944:	d1ef      	bne.n	8023926 <read_submessage_format+0x5a>
 8023946:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 802394a:	f1b8 0f00 	cmp.w	r8, #0
 802394e:	d011      	beq.n	8023974 <read_submessage_format+0xa8>
 8023950:	ab0c      	add	r3, sp, #48	@ 0x30
 8023952:	9501      	str	r5, [sp, #4]
 8023954:	463a      	mov	r2, r7
 8023956:	4630      	mov	r0, r6
 8023958:	9300      	str	r3, [sp, #0]
 802395a:	2306      	movs	r3, #6
 802395c:	f88d 3016 	strb.w	r3, [sp, #22]
 8023960:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8023964:	9302      	str	r3, [sp, #8]
 8023966:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 802396a:	47c0      	blx	r8
 802396c:	2301      	movs	r3, #1
 802396e:	69e2      	ldr	r2, [r4, #28]
 8023970:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8023974:	2a00      	cmp	r2, #0
 8023976:	d1d4      	bne.n	8023922 <read_submessage_format+0x56>
 8023978:	e7d5      	b.n	8023926 <read_submessage_format+0x5a>
 802397a:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 802397e:	2b00      	cmp	r3, #0
 8023980:	d0f8      	beq.n	8023974 <read_submessage_format+0xa8>
 8023982:	a80c      	add	r0, sp, #48	@ 0x30
 8023984:	a906      	add	r1, sp, #24
 8023986:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 802398a:	f7fa fbf9 	bl	801e180 <uxr_deserialize_SampleIdentity>
 802398e:	b9a0      	cbnz	r0, 80239ba <read_submessage_format+0xee>
 8023990:	69e2      	ldr	r2, [r4, #28]
 8023992:	2a00      	cmp	r2, #0
 8023994:	d1c5      	bne.n	8023922 <read_submessage_format+0x56>
 8023996:	e7c6      	b.n	8023926 <read_submessage_format+0x5a>
 8023998:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 802399c:	b13b      	cbz	r3, 80239ae <read_submessage_format+0xe2>
 802399e:	a906      	add	r1, sp, #24
 80239a0:	a80c      	add	r0, sp, #48	@ 0x30
 80239a2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80239a6:	f7fa f8bf 	bl	801db28 <uxr_deserialize_BaseObjectRequest>
 80239aa:	bb60      	cbnz	r0, 8023a06 <read_submessage_format+0x13a>
 80239ac:	69e2      	ldr	r2, [r4, #28]
 80239ae:	68a3      	ldr	r3, [r4, #8]
 80239b0:	442b      	add	r3, r5
 80239b2:	60a3      	str	r3, [r4, #8]
 80239b4:	2a00      	cmp	r2, #0
 80239b6:	d1b4      	bne.n	8023922 <read_submessage_format+0x56>
 80239b8:	e7b5      	b.n	8023926 <read_submessage_format+0x5a>
 80239ba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80239bc:	a80c      	add	r0, sp, #48	@ 0x30
 80239be:	eba8 0803 	sub.w	r8, r8, r3
 80239c2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80239c6:	44a8      	add	r8, r5
 80239c8:	1a52      	subs	r2, r2, r1
 80239ca:	f7f7 fca5 	bl	801b318 <ucdr_init_buffer>
 80239ce:	a80c      	add	r0, sp, #48	@ 0x30
 80239d0:	fa1f f888 	uxth.w	r8, r8
 80239d4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80239d8:	f7f7 fc72 	bl	801b2c0 <ucdr_set_on_full_buffer_callback>
 80239dc:	ab0c      	add	r3, sp, #48	@ 0x30
 80239de:	2108      	movs	r1, #8
 80239e0:	f8cd 8004 	str.w	r8, [sp, #4]
 80239e4:	9300      	str	r3, [sp, #0]
 80239e6:	463a      	mov	r2, r7
 80239e8:	f88d 1016 	strb.w	r1, [sp, #22]
 80239ec:	ab06      	add	r3, sp, #24
 80239ee:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 80239f2:	4630      	mov	r0, r6
 80239f4:	9102      	str	r1, [sp, #8]
 80239f6:	9905      	ldr	r1, [sp, #20]
 80239f8:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 80239fc:	47b8      	blx	r7
 80239fe:	2301      	movs	r3, #1
 8023a00:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8023a04:	e7c4      	b.n	8023990 <read_submessage_format+0xc4>
 8023a06:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8023a0a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023a0c:	a80c      	add	r0, sp, #48	@ 0x30
 8023a0e:	1a52      	subs	r2, r2, r1
 8023a10:	eba8 0803 	sub.w	r8, r8, r3
 8023a14:	f7f7 fc80 	bl	801b318 <ucdr_init_buffer>
 8023a18:	a80c      	add	r0, sp, #48	@ 0x30
 8023a1a:	44a8      	add	r8, r5
 8023a1c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8023a20:	f7f7 fc4e 	bl	801b2c0 <ucdr_set_on_full_buffer_callback>
 8023a24:	ab0c      	add	r3, sp, #48	@ 0x30
 8023a26:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8023a2a:	fa1f f888 	uxth.w	r8, r8
 8023a2e:	9300      	str	r3, [sp, #0]
 8023a30:	463a      	mov	r2, r7
 8023a32:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8023a36:	4630      	mov	r0, r6
 8023a38:	f8cd 8004 	str.w	r8, [sp, #4]
 8023a3c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8023a40:	2107      	movs	r1, #7
 8023a42:	f88d 1016 	strb.w	r1, [sp, #22]
 8023a46:	b29b      	uxth	r3, r3
 8023a48:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 8023a4c:	9102      	str	r1, [sp, #8]
 8023a4e:	9905      	ldr	r1, [sp, #20]
 8023a50:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 8023a54:	47b8      	blx	r7
 8023a56:	2301      	movs	r3, #1
 8023a58:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8023a5c:	e7a6      	b.n	80239ac <read_submessage_format+0xe0>
 8023a5e:	bf00      	nop

08023a60 <uxr_seq_num_add>:
 8023a60:	4408      	add	r0, r1
 8023a62:	b280      	uxth	r0, r0
 8023a64:	4770      	bx	lr
 8023a66:	bf00      	nop

08023a68 <uxr_seq_num_sub>:
 8023a68:	1a40      	subs	r0, r0, r1
 8023a6a:	b280      	uxth	r0, r0
 8023a6c:	4770      	bx	lr
 8023a6e:	bf00      	nop

08023a70 <uxr_seq_num_cmp>:
 8023a70:	4288      	cmp	r0, r1
 8023a72:	d011      	beq.n	8023a98 <uxr_seq_num_cmp+0x28>
 8023a74:	d309      	bcc.n	8023a8a <uxr_seq_num_cmp+0x1a>
 8023a76:	4288      	cmp	r0, r1
 8023a78:	d910      	bls.n	8023a9c <uxr_seq_num_cmp+0x2c>
 8023a7a:	1a40      	subs	r0, r0, r1
 8023a7c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8023a80:	bfd4      	ite	le
 8023a82:	2001      	movle	r0, #1
 8023a84:	f04f 30ff 	movgt.w	r0, #4294967295
 8023a88:	4770      	bx	lr
 8023a8a:	1a0b      	subs	r3, r1, r0
 8023a8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8023a90:	daf1      	bge.n	8023a76 <uxr_seq_num_cmp+0x6>
 8023a92:	f04f 30ff 	mov.w	r0, #4294967295
 8023a96:	4770      	bx	lr
 8023a98:	2000      	movs	r0, #0
 8023a9a:	4770      	bx	lr
 8023a9c:	2001      	movs	r0, #1
 8023a9e:	4770      	bx	lr

08023aa0 <uxr_init_framing_io>:
 8023aa0:	2300      	movs	r3, #0
 8023aa2:	7041      	strb	r1, [r0, #1]
 8023aa4:	7003      	strb	r3, [r0, #0]
 8023aa6:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8023aa8:	4770      	bx	lr
 8023aaa:	bf00      	nop

08023aac <uxr_write_framed_msg>:
 8023aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ab0:	4617      	mov	r7, r2
 8023ab2:	7842      	ldrb	r2, [r0, #1]
 8023ab4:	460e      	mov	r6, r1
 8023ab6:	b083      	sub	sp, #12
 8023ab8:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8023abc:	469b      	mov	fp, r3
 8023abe:	237e      	movs	r3, #126	@ 0x7e
 8023ac0:	4604      	mov	r4, r0
 8023ac2:	2901      	cmp	r1, #1
 8023ac4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8023ac8:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8023acc:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8023ad0:	f240 8115 	bls.w	8023cfe <uxr_write_framed_msg+0x252>
 8023ad4:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8023ad8:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8023adc:	2202      	movs	r2, #2
 8023ade:	2901      	cmp	r1, #1
 8023ae0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8023ae4:	d952      	bls.n	8023b8c <uxr_write_framed_msg+0xe0>
 8023ae6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023ae8:	2103      	movs	r1, #3
 8023aea:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8023aee:	b2dd      	uxtb	r5, r3
 8023af0:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8023af4:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8023af8:	2a01      	cmp	r2, #1
 8023afa:	d95c      	bls.n	8023bb6 <uxr_write_framed_msg+0x10a>
 8023afc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023afe:	1862      	adds	r2, r4, r1
 8023b00:	3101      	adds	r1, #1
 8023b02:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8023b06:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 8023b0a:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8023b0e:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8023b12:	2a01      	cmp	r2, #1
 8023b14:	d961      	bls.n	8023bda <uxr_write_framed_msg+0x12e>
 8023b16:	1c4a      	adds	r2, r1, #1
 8023b18:	4421      	add	r1, r4
 8023b1a:	b2d2      	uxtb	r2, r2
 8023b1c:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8023b20:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8023b24:	2b00      	cmp	r3, #0
 8023b26:	d06a      	beq.n	8023bfe <uxr_write_framed_msg+0x152>
 8023b28:	f04f 0800 	mov.w	r8, #0
 8023b2c:	46c1      	mov	r9, r8
 8023b2e:	e016      	b.n	8023b5e <uxr_write_framed_msg+0xb2>
 8023b30:	2a29      	cmp	r2, #41	@ 0x29
 8023b32:	d868      	bhi.n	8023c06 <uxr_write_framed_msg+0x15a>
 8023b34:	18a0      	adds	r0, r4, r2
 8023b36:	3201      	adds	r2, #1
 8023b38:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8023b3c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8023b40:	ea88 0101 	eor.w	r1, r8, r1
 8023b44:	4b7d      	ldr	r3, [pc, #500]	@ (8023d3c <uxr_write_framed_msg+0x290>)
 8023b46:	f109 0901 	add.w	r9, r9, #1
 8023b4a:	b2c9      	uxtb	r1, r1
 8023b4c:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8023b50:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8023b54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023b56:	454b      	cmp	r3, r9
 8023b58:	d969      	bls.n	8023c2e <uxr_write_framed_msg+0x182>
 8023b5a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8023b5e:	f81b 1009 	ldrb.w	r1, [fp, r9]
 8023b62:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8023b66:	2801      	cmp	r0, #1
 8023b68:	d8e2      	bhi.n	8023b30 <uxr_write_framed_msg+0x84>
 8023b6a:	1c50      	adds	r0, r2, #1
 8023b6c:	b2c0      	uxtb	r0, r0
 8023b6e:	2829      	cmp	r0, #41	@ 0x29
 8023b70:	d849      	bhi.n	8023c06 <uxr_write_framed_msg+0x15a>
 8023b72:	18a0      	adds	r0, r4, r2
 8023b74:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8023b78:	3202      	adds	r2, #2
 8023b7a:	f081 0520 	eor.w	r5, r1, #32
 8023b7e:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8023b82:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8023b86:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8023b8a:	e7d9      	b.n	8023b40 <uxr_write_framed_msg+0x94>
 8023b8c:	2104      	movs	r1, #4
 8023b8e:	f04f 0c03 	mov.w	ip, #3
 8023b92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023b94:	4422      	add	r2, r4
 8023b96:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8023b9a:	44a4      	add	ip, r4
 8023b9c:	b2dd      	uxtb	r5, r3
 8023b9e:	f080 0020 	eor.w	r0, r0, #32
 8023ba2:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 8023ba6:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8023baa:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8023bae:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8023bb2:	2a01      	cmp	r2, #1
 8023bb4:	d8a2      	bhi.n	8023afc <uxr_write_framed_msg+0x50>
 8023bb6:	1862      	adds	r2, r4, r1
 8023bb8:	207d      	movs	r0, #125	@ 0x7d
 8023bba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023bbc:	f085 0520 	eor.w	r5, r5, #32
 8023bc0:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 8023bc4:	3102      	adds	r1, #2
 8023bc6:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8023bca:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 8023bce:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8023bd2:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8023bd6:	2a01      	cmp	r2, #1
 8023bd8:	d89d      	bhi.n	8023b16 <uxr_write_framed_msg+0x6a>
 8023bda:	1c4d      	adds	r5, r1, #1
 8023bdc:	1c8a      	adds	r2, r1, #2
 8023bde:	f080 0020 	eor.w	r0, r0, #32
 8023be2:	4421      	add	r1, r4
 8023be4:	fa54 f585 	uxtab	r5, r4, r5
 8023be8:	b2d2      	uxtb	r2, r2
 8023bea:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8023bee:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 8023bf2:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 8023bf6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8023bfa:	2b00      	cmp	r3, #0
 8023bfc:	d194      	bne.n	8023b28 <uxr_write_framed_msg+0x7c>
 8023bfe:	4619      	mov	r1, r3
 8023c00:	f8ad 3004 	strh.w	r3, [sp, #4]
 8023c04:	e019      	b.n	8023c3a <uxr_write_framed_msg+0x18e>
 8023c06:	2500      	movs	r5, #0
 8023c08:	e000      	b.n	8023c0c <uxr_write_framed_msg+0x160>
 8023c0a:	b160      	cbz	r0, 8023c26 <uxr_write_framed_msg+0x17a>
 8023c0c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8023c10:	1b52      	subs	r2, r2, r5
 8023c12:	4653      	mov	r3, sl
 8023c14:	4638      	mov	r0, r7
 8023c16:	4421      	add	r1, r4
 8023c18:	47b0      	blx	r6
 8023c1a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8023c1e:	4405      	add	r5, r0
 8023c20:	4295      	cmp	r5, r2
 8023c22:	d3f2      	bcc.n	8023c0a <uxr_write_framed_msg+0x15e>
 8023c24:	d066      	beq.n	8023cf4 <uxr_write_framed_msg+0x248>
 8023c26:	2000      	movs	r0, #0
 8023c28:	b003      	add	sp, #12
 8023c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c2e:	fa5f f188 	uxtb.w	r1, r8
 8023c32:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8023c36:	f8ad 8004 	strh.w	r8, [sp, #4]
 8023c3a:	f04f 0900 	mov.w	r9, #0
 8023c3e:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 8023c42:	46c8      	mov	r8, r9
 8023c44:	e013      	b.n	8023c6e <uxr_write_framed_msg+0x1c2>
 8023c46:	2a29      	cmp	r2, #41	@ 0x29
 8023c48:	d824      	bhi.n	8023c94 <uxr_write_framed_msg+0x1e8>
 8023c4a:	18a3      	adds	r3, r4, r2
 8023c4c:	3201      	adds	r2, #1
 8023c4e:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 8023c52:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8023c56:	f109 0901 	add.w	r9, r9, #1
 8023c5a:	f1b9 0f02 	cmp.w	r9, #2
 8023c5e:	d02d      	beq.n	8023cbc <uxr_write_framed_msg+0x210>
 8023c60:	f109 0308 	add.w	r3, r9, #8
 8023c64:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8023c68:	446b      	add	r3, sp
 8023c6a:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8023c6e:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8023c72:	2b01      	cmp	r3, #1
 8023c74:	d8e7      	bhi.n	8023c46 <uxr_write_framed_msg+0x19a>
 8023c76:	1c53      	adds	r3, r2, #1
 8023c78:	b2db      	uxtb	r3, r3
 8023c7a:	2b29      	cmp	r3, #41	@ 0x29
 8023c7c:	d80a      	bhi.n	8023c94 <uxr_write_framed_msg+0x1e8>
 8023c7e:	18a3      	adds	r3, r4, r2
 8023c80:	f081 0120 	eor.w	r1, r1, #32
 8023c84:	3202      	adds	r2, #2
 8023c86:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 8023c8a:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 8023c8e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8023c92:	e7e0      	b.n	8023c56 <uxr_write_framed_msg+0x1aa>
 8023c94:	2500      	movs	r5, #0
 8023c96:	e001      	b.n	8023c9c <uxr_write_framed_msg+0x1f0>
 8023c98:	2800      	cmp	r0, #0
 8023c9a:	d0c4      	beq.n	8023c26 <uxr_write_framed_msg+0x17a>
 8023c9c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8023ca0:	1b52      	subs	r2, r2, r5
 8023ca2:	4653      	mov	r3, sl
 8023ca4:	4638      	mov	r0, r7
 8023ca6:	4421      	add	r1, r4
 8023ca8:	47b0      	blx	r6
 8023caa:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8023cae:	4405      	add	r5, r0
 8023cb0:	4295      	cmp	r5, r2
 8023cb2:	d3f1      	bcc.n	8023c98 <uxr_write_framed_msg+0x1ec>
 8023cb4:	d1b7      	bne.n	8023c26 <uxr_write_framed_msg+0x17a>
 8023cb6:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 8023cba:	e7d1      	b.n	8023c60 <uxr_write_framed_msg+0x1b4>
 8023cbc:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8023cc0:	b19a      	cbz	r2, 8023cea <uxr_write_framed_msg+0x23e>
 8023cc2:	2500      	movs	r5, #0
 8023cc4:	e001      	b.n	8023cca <uxr_write_framed_msg+0x21e>
 8023cc6:	2800      	cmp	r0, #0
 8023cc8:	d0ad      	beq.n	8023c26 <uxr_write_framed_msg+0x17a>
 8023cca:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8023cce:	1b52      	subs	r2, r2, r5
 8023cd0:	4653      	mov	r3, sl
 8023cd2:	4638      	mov	r0, r7
 8023cd4:	4421      	add	r1, r4
 8023cd6:	47b0      	blx	r6
 8023cd8:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8023cdc:	4405      	add	r5, r0
 8023cde:	4295      	cmp	r5, r2
 8023ce0:	d3f1      	bcc.n	8023cc6 <uxr_write_framed_msg+0x21a>
 8023ce2:	d1a0      	bne.n	8023c26 <uxr_write_framed_msg+0x17a>
 8023ce4:	2300      	movs	r3, #0
 8023ce6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8023cea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023cec:	b298      	uxth	r0, r3
 8023cee:	b003      	add	sp, #12
 8023cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023cf4:	f04f 0300 	mov.w	r3, #0
 8023cf8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8023cfc:	e72a      	b.n	8023b54 <uxr_write_framed_msg+0xa8>
 8023cfe:	217d      	movs	r1, #125	@ 0x7d
 8023d00:	f082 0220 	eor.w	r2, r2, #32
 8023d04:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8023d08:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8023d0c:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8023d10:	2203      	movs	r2, #3
 8023d12:	2901      	cmp	r1, #1
 8023d14:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8023d18:	d803      	bhi.n	8023d22 <uxr_write_framed_msg+0x276>
 8023d1a:	2105      	movs	r1, #5
 8023d1c:	f04f 0c04 	mov.w	ip, #4
 8023d20:	e737      	b.n	8023b92 <uxr_write_framed_msg+0xe6>
 8023d22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023d24:	2104      	movs	r1, #4
 8023d26:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8023d2a:	b2dd      	uxtb	r5, r3
 8023d2c:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8023d30:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8023d34:	2a01      	cmp	r2, #1
 8023d36:	f63f aee1 	bhi.w	8023afc <uxr_write_framed_msg+0x50>
 8023d3a:	e73c      	b.n	8023bb6 <uxr_write_framed_msg+0x10a>
 8023d3c:	0802ad3c 	.word	0x0802ad3c

08023d40 <uxr_framing_read_transport>:
 8023d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d44:	4604      	mov	r4, r0
 8023d46:	b085      	sub	sp, #20
 8023d48:	4692      	mov	sl, r2
 8023d4a:	4689      	mov	r9, r1
 8023d4c:	461d      	mov	r5, r3
 8023d4e:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8023d50:	f7f8 fffc 	bl	801cd4c <uxr_millis>
 8023d54:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8023d58:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8023d5c:	4680      	mov	r8, r0
 8023d5e:	42ba      	cmp	r2, r7
 8023d60:	d05f      	beq.n	8023e22 <uxr_framing_read_transport+0xe2>
 8023d62:	d817      	bhi.n	8023d94 <uxr_framing_read_transport+0x54>
 8023d64:	3f01      	subs	r7, #1
 8023d66:	1aba      	subs	r2, r7, r2
 8023d68:	2700      	movs	r7, #0
 8023d6a:	b2d2      	uxtb	r2, r2
 8023d6c:	42b2      	cmp	r2, r6
 8023d6e:	d81a      	bhi.n	8023da6 <uxr_framing_read_transport+0x66>
 8023d70:	19d3      	adds	r3, r2, r7
 8023d72:	42b3      	cmp	r3, r6
 8023d74:	d852      	bhi.n	8023e1c <uxr_framing_read_transport+0xdc>
 8023d76:	b9d2      	cbnz	r2, 8023dae <uxr_framing_read_transport+0x6e>
 8023d78:	2600      	movs	r6, #0
 8023d7a:	f7f8 ffe7 	bl	801cd4c <uxr_millis>
 8023d7e:	682b      	ldr	r3, [r5, #0]
 8023d80:	eba0 0008 	sub.w	r0, r0, r8
 8023d84:	1a1b      	subs	r3, r3, r0
 8023d86:	4630      	mov	r0, r6
 8023d88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023d8c:	602b      	str	r3, [r5, #0]
 8023d8e:	b005      	add	sp, #20
 8023d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d94:	2f00      	cmp	r7, #0
 8023d96:	d060      	beq.n	8023e5a <uxr_framing_read_transport+0x11a>
 8023d98:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 8023d9c:	3f01      	subs	r7, #1
 8023d9e:	b2d2      	uxtb	r2, r2
 8023da0:	b2ff      	uxtb	r7, r7
 8023da2:	42b2      	cmp	r2, r6
 8023da4:	d9e4      	bls.n	8023d70 <uxr_framing_read_transport+0x30>
 8023da6:	b2f2      	uxtb	r2, r6
 8023da8:	2700      	movs	r7, #0
 8023daa:	2a00      	cmp	r2, #0
 8023dac:	d0e4      	beq.n	8023d78 <uxr_framing_read_transport+0x38>
 8023dae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023db0:	4650      	mov	r0, sl
 8023db2:	9203      	str	r2, [sp, #12]
 8023db4:	9300      	str	r3, [sp, #0]
 8023db6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8023dba:	682b      	ldr	r3, [r5, #0]
 8023dbc:	3102      	adds	r1, #2
 8023dbe:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 8023e64 <uxr_framing_read_transport+0x124>
 8023dc2:	4421      	add	r1, r4
 8023dc4:	47c8      	blx	r9
 8023dc6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8023dca:	4606      	mov	r6, r0
 8023dcc:	4403      	add	r3, r0
 8023dce:	0859      	lsrs	r1, r3, #1
 8023dd0:	fbab 2101 	umull	r2, r1, fp, r1
 8023dd4:	222a      	movs	r2, #42	@ 0x2a
 8023dd6:	0889      	lsrs	r1, r1, #2
 8023dd8:	fb02 3111 	mls	r1, r2, r1, r3
 8023ddc:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8023de0:	2800      	cmp	r0, #0
 8023de2:	d0c9      	beq.n	8023d78 <uxr_framing_read_transport+0x38>
 8023de4:	9a03      	ldr	r2, [sp, #12]
 8023de6:	4290      	cmp	r0, r2
 8023de8:	d1c7      	bne.n	8023d7a <uxr_framing_read_transport+0x3a>
 8023dea:	2f00      	cmp	r7, #0
 8023dec:	d0c5      	beq.n	8023d7a <uxr_framing_read_transport+0x3a>
 8023dee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023df0:	3102      	adds	r1, #2
 8023df2:	463a      	mov	r2, r7
 8023df4:	4650      	mov	r0, sl
 8023df6:	4421      	add	r1, r4
 8023df8:	9300      	str	r3, [sp, #0]
 8023dfa:	2300      	movs	r3, #0
 8023dfc:	47c8      	blx	r9
 8023dfe:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8023e02:	4406      	add	r6, r0
 8023e04:	1813      	adds	r3, r2, r0
 8023e06:	085a      	lsrs	r2, r3, #1
 8023e08:	fbab 1b02 	umull	r1, fp, fp, r2
 8023e0c:	222a      	movs	r2, #42	@ 0x2a
 8023e0e:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8023e12:	fb02 331b 	mls	r3, r2, fp, r3
 8023e16:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8023e1a:	e7ae      	b.n	8023d7a <uxr_framing_read_transport+0x3a>
 8023e1c:	1ab6      	subs	r6, r6, r2
 8023e1e:	b2f7      	uxtb	r7, r6
 8023e20:	e7a9      	b.n	8023d76 <uxr_framing_read_transport+0x36>
 8023e22:	2300      	movs	r3, #0
 8023e24:	2e28      	cmp	r6, #40	@ 0x28
 8023e26:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8023e28:	d9bd      	bls.n	8023da6 <uxr_framing_read_transport+0x66>
 8023e2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023e2c:	2229      	movs	r2, #41	@ 0x29
 8023e2e:	1ca1      	adds	r1, r4, #2
 8023e30:	4650      	mov	r0, sl
 8023e32:	9300      	str	r3, [sp, #0]
 8023e34:	682b      	ldr	r3, [r5, #0]
 8023e36:	47c8      	blx	r9
 8023e38:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8023e3c:	4606      	mov	r6, r0
 8023e3e:	212a      	movs	r1, #42	@ 0x2a
 8023e40:	4403      	add	r3, r0
 8023e42:	4808      	ldr	r0, [pc, #32]	@ (8023e64 <uxr_framing_read_transport+0x124>)
 8023e44:	085a      	lsrs	r2, r3, #1
 8023e46:	fba0 0202 	umull	r0, r2, r0, r2
 8023e4a:	0892      	lsrs	r2, r2, #2
 8023e4c:	fb01 3312 	mls	r3, r1, r2, r3
 8023e50:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8023e54:	2e00      	cmp	r6, #0
 8023e56:	d08f      	beq.n	8023d78 <uxr_framing_read_transport+0x38>
 8023e58:	e78f      	b.n	8023d7a <uxr_framing_read_transport+0x3a>
 8023e5a:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 8023e5e:	b2d2      	uxtb	r2, r2
 8023e60:	e784      	b.n	8023d6c <uxr_framing_read_transport+0x2c>
 8023e62:	bf00      	nop
 8023e64:	30c30c31 	.word	0x30c30c31

08023e68 <uxr_read_framed_msg>:
 8023e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e6c:	461e      	mov	r6, r3
 8023e6e:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8023e72:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8023e76:	b083      	sub	sp, #12
 8023e78:	4604      	mov	r4, r0
 8023e7a:	4688      	mov	r8, r1
 8023e7c:	429d      	cmp	r5, r3
 8023e7e:	4691      	mov	r9, r2
 8023e80:	f000 818c 	beq.w	802419c <uxr_read_framed_msg+0x334>
 8023e84:	7823      	ldrb	r3, [r4, #0]
 8023e86:	4dc3      	ldr	r5, [pc, #780]	@ (8024194 <uxr_read_framed_msg+0x32c>)
 8023e88:	4fc3      	ldr	r7, [pc, #780]	@ (8024198 <uxr_read_framed_msg+0x330>)
 8023e8a:	2b07      	cmp	r3, #7
 8023e8c:	d8fd      	bhi.n	8023e8a <uxr_read_framed_msg+0x22>
 8023e8e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8023e92:	011c      	.short	0x011c
 8023e94:	00d900fb 	.word	0x00d900fb
 8023e98:	008f00ba 	.word	0x008f00ba
 8023e9c:	00320051 	.word	0x00320051
 8023ea0:	0008      	.short	0x0008
 8023ea2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8023ea6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8023eaa:	4299      	cmp	r1, r3
 8023eac:	f000 814d 	beq.w	802414a <uxr_read_framed_msg+0x2e2>
 8023eb0:	18e2      	adds	r2, r4, r3
 8023eb2:	7892      	ldrb	r2, [r2, #2]
 8023eb4:	2a7d      	cmp	r2, #125	@ 0x7d
 8023eb6:	f000 81b8 	beq.w	802422a <uxr_read_framed_msg+0x3c2>
 8023eba:	3301      	adds	r3, #1
 8023ebc:	212a      	movs	r1, #42	@ 0x2a
 8023ebe:	2a7e      	cmp	r2, #126	@ 0x7e
 8023ec0:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8023ec4:	fba5 c000 	umull	ip, r0, r5, r0
 8023ec8:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8023ecc:	fb01 3310 	mls	r3, r1, r0, r3
 8023ed0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8023ed4:	f000 8257 	beq.w	8024386 <uxr_read_framed_msg+0x51e>
 8023ed8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8023eda:	2000      	movs	r0, #0
 8023edc:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8023ede:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8023ee2:	7020      	strb	r0, [r4, #0]
 8023ee4:	b29b      	uxth	r3, r3
 8023ee6:	4299      	cmp	r1, r3
 8023ee8:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8023eea:	f000 8178 	beq.w	80241de <uxr_read_framed_msg+0x376>
 8023eee:	2000      	movs	r0, #0
 8023ef0:	b003      	add	sp, #12
 8023ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ef6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8023efa:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8023efe:	4298      	cmp	r0, r3
 8023f00:	f000 8132 	beq.w	8024168 <uxr_read_framed_msg+0x300>
 8023f04:	18e2      	adds	r2, r4, r3
 8023f06:	7891      	ldrb	r1, [r2, #2]
 8023f08:	297d      	cmp	r1, #125	@ 0x7d
 8023f0a:	f000 8170 	beq.w	80241ee <uxr_read_framed_msg+0x386>
 8023f0e:	3301      	adds	r3, #1
 8023f10:	202a      	movs	r0, #42	@ 0x2a
 8023f12:	297e      	cmp	r1, #126	@ 0x7e
 8023f14:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8023f18:	fba5 c202 	umull	ip, r2, r5, r2
 8023f1c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8023f20:	fb00 3312 	mls	r3, r0, r2, r3
 8023f24:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8023f28:	f000 821d 	beq.w	8024366 <uxr_read_framed_msg+0x4fe>
 8023f2c:	2307      	movs	r3, #7
 8023f2e:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8023f30:	7023      	strb	r3, [r4, #0]
 8023f32:	e7aa      	b.n	8023e8a <uxr_read_framed_msg+0x22>
 8023f34:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8023f36:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8023f3a:	459e      	cmp	lr, r3
 8023f3c:	d827      	bhi.n	8023f8e <uxr_read_framed_msg+0x126>
 8023f3e:	e032      	b.n	8023fa6 <uxr_read_framed_msg+0x13e>
 8023f40:	fba5 b101 	umull	fp, r1, r5, r1
 8023f44:	f89c c002 	ldrb.w	ip, [ip, #2]
 8023f48:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8023f4c:	0889      	lsrs	r1, r1, #2
 8023f4e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8023f52:	fb0b 0111 	mls	r1, fp, r1, r0
 8023f56:	f000 80d4 	beq.w	8024102 <uxr_read_framed_msg+0x29a>
 8023f5a:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8023f5e:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 8023f62:	f000 80cb 	beq.w	80240fc <uxr_read_framed_msg+0x294>
 8023f66:	f806 c003 	strb.w	ip, [r6, r3]
 8023f6a:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8023f6c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8023f6e:	ea80 010c 	eor.w	r1, r0, ip
 8023f72:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8023f76:	3301      	adds	r3, #1
 8023f78:	b2c9      	uxtb	r1, r1
 8023f7a:	b29b      	uxth	r3, r3
 8023f7c:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8023f80:	4573      	cmp	r3, lr
 8023f82:	8663      	strh	r3, [r4, #50]	@ 0x32
 8023f84:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8023f88:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8023f8a:	f080 811d 	bcs.w	80241c8 <uxr_read_framed_msg+0x360>
 8023f8e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8023f92:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8023f96:	1c50      	adds	r0, r2, #1
 8023f98:	eb04 0c02 	add.w	ip, r4, r2
 8023f9c:	4592      	cmp	sl, r2
 8023f9e:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8023fa2:	d1cd      	bne.n	8023f40 <uxr_read_framed_msg+0xd8>
 8023fa4:	459e      	cmp	lr, r3
 8023fa6:	f040 8114 	bne.w	80241d2 <uxr_read_framed_msg+0x36a>
 8023faa:	2306      	movs	r3, #6
 8023fac:	7023      	strb	r3, [r4, #0]
 8023fae:	e76c      	b.n	8023e8a <uxr_read_framed_msg+0x22>
 8023fb0:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8023fb4:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8023fb8:	4298      	cmp	r0, r3
 8023fba:	f000 80c6 	beq.w	802414a <uxr_read_framed_msg+0x2e2>
 8023fbe:	18e2      	adds	r2, r4, r3
 8023fc0:	7891      	ldrb	r1, [r2, #2]
 8023fc2:	297d      	cmp	r1, #125	@ 0x7d
 8023fc4:	f000 8193 	beq.w	80242ee <uxr_read_framed_msg+0x486>
 8023fc8:	3301      	adds	r3, #1
 8023fca:	202a      	movs	r0, #42	@ 0x2a
 8023fcc:	297e      	cmp	r1, #126	@ 0x7e
 8023fce:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8023fd2:	fba5 c202 	umull	ip, r2, r5, r2
 8023fd6:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8023fda:	fb00 3312 	mls	r3, r0, r2, r3
 8023fde:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8023fe2:	f000 81d0 	beq.w	8024386 <uxr_read_framed_msg+0x51e>
 8023fe6:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8023fe8:	2000      	movs	r0, #0
 8023fea:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8023fee:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8023ff0:	8660      	strh	r0, [r4, #50]	@ 0x32
 8023ff2:	b29b      	uxth	r3, r3
 8023ff4:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8023ff6:	428b      	cmp	r3, r1
 8023ff8:	8623      	strh	r3, [r4, #48]	@ 0x30
 8023ffa:	f240 80e2 	bls.w	80241c2 <uxr_read_framed_msg+0x35a>
 8023ffe:	7020      	strb	r0, [r4, #0]
 8024000:	b003      	add	sp, #12
 8024002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024006:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 802400a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 802400e:	4298      	cmp	r0, r3
 8024010:	f000 80aa 	beq.w	8024168 <uxr_read_framed_msg+0x300>
 8024014:	18e2      	adds	r2, r4, r3
 8024016:	7891      	ldrb	r1, [r2, #2]
 8024018:	297d      	cmp	r1, #125	@ 0x7d
 802401a:	f000 8186 	beq.w	802432a <uxr_read_framed_msg+0x4c2>
 802401e:	3301      	adds	r3, #1
 8024020:	202a      	movs	r0, #42	@ 0x2a
 8024022:	297e      	cmp	r1, #126	@ 0x7e
 8024024:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8024028:	fba5 c202 	umull	ip, r2, r5, r2
 802402c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8024030:	fb00 3312 	mls	r3, r0, r2, r3
 8024034:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8024038:	f000 8195 	beq.w	8024366 <uxr_read_framed_msg+0x4fe>
 802403c:	2304      	movs	r3, #4
 802403e:	8621      	strh	r1, [r4, #48]	@ 0x30
 8024040:	7023      	strb	r3, [r4, #0]
 8024042:	e722      	b.n	8023e8a <uxr_read_framed_msg+0x22>
 8024044:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8024048:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 802404c:	4290      	cmp	r0, r2
 802404e:	f000 80b4 	beq.w	80241ba <uxr_read_framed_msg+0x352>
 8024052:	18a3      	adds	r3, r4, r2
 8024054:	7899      	ldrb	r1, [r3, #2]
 8024056:	297d      	cmp	r1, #125	@ 0x7d
 8024058:	f000 8107 	beq.w	802426a <uxr_read_framed_msg+0x402>
 802405c:	3201      	adds	r2, #1
 802405e:	232a      	movs	r3, #42	@ 0x2a
 8024060:	297e      	cmp	r1, #126	@ 0x7e
 8024062:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8024066:	fba5 c000 	umull	ip, r0, r5, r0
 802406a:	ea4f 0090 	mov.w	r0, r0, lsr #2
 802406e:	fb03 2210 	mls	r2, r3, r0, r2
 8024072:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8024076:	f000 818a 	beq.w	802438e <uxr_read_framed_msg+0x526>
 802407a:	7863      	ldrb	r3, [r4, #1]
 802407c:	428b      	cmp	r3, r1
 802407e:	bf0c      	ite	eq
 8024080:	2303      	moveq	r3, #3
 8024082:	2300      	movne	r3, #0
 8024084:	7023      	strb	r3, [r4, #0]
 8024086:	e700      	b.n	8023e8a <uxr_read_framed_msg+0x22>
 8024088:	2300      	movs	r3, #0
 802408a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 802408e:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8024092:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8024096:	4299      	cmp	r1, r3
 8024098:	d06a      	beq.n	8024170 <uxr_read_framed_msg+0x308>
 802409a:	18e2      	adds	r2, r4, r3
 802409c:	7890      	ldrb	r0, [r2, #2]
 802409e:	287d      	cmp	r0, #125	@ 0x7d
 80240a0:	f000 8100 	beq.w	80242a4 <uxr_read_framed_msg+0x43c>
 80240a4:	3301      	adds	r3, #1
 80240a6:	212a      	movs	r1, #42	@ 0x2a
 80240a8:	287e      	cmp	r0, #126	@ 0x7e
 80240aa:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80240ae:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80240b2:	fba5 c202 	umull	ip, r2, r5, r2
 80240b6:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80240ba:	fb01 3312 	mls	r3, r1, r2, r3
 80240be:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80240c2:	d055      	beq.n	8024170 <uxr_read_framed_msg+0x308>
 80240c4:	2302      	movs	r3, #2
 80240c6:	7023      	strb	r3, [r4, #0]
 80240c8:	e6df      	b.n	8023e8a <uxr_read_framed_msg+0x22>
 80240ca:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 80240ce:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80240d2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80240d6:	1c5a      	adds	r2, r3, #1
 80240d8:	459c      	cmp	ip, r3
 80240da:	eb04 0103 	add.w	r1, r4, r3
 80240de:	ea4f 0352 	mov.w	r3, r2, lsr #1
 80240e2:	f43f af04 	beq.w	8023eee <uxr_read_framed_msg+0x86>
 80240e6:	fba5 0303 	umull	r0, r3, r5, r3
 80240ea:	7889      	ldrb	r1, [r1, #2]
 80240ec:	089b      	lsrs	r3, r3, #2
 80240ee:	297e      	cmp	r1, #126	@ 0x7e
 80240f0:	fb0e 2313 	mls	r3, lr, r3, r2
 80240f4:	b2db      	uxtb	r3, r3
 80240f6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80240fa:	d1ec      	bne.n	80240d6 <uxr_read_framed_msg+0x26e>
 80240fc:	2301      	movs	r3, #1
 80240fe:	7023      	strb	r3, [r4, #0]
 8024100:	e6c3      	b.n	8023e8a <uxr_read_framed_msg+0x22>
 8024102:	1c50      	adds	r0, r2, #1
 8024104:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8024108:	3202      	adds	r2, #2
 802410a:	0841      	lsrs	r1, r0, #1
 802410c:	fba5 c101 	umull	ip, r1, r5, r1
 8024110:	0889      	lsrs	r1, r1, #2
 8024112:	fb0b 0111 	mls	r1, fp, r1, r0
 8024116:	1860      	adds	r0, r4, r1
 8024118:	b2c9      	uxtb	r1, r1
 802411a:	458a      	cmp	sl, r1
 802411c:	f43f af42 	beq.w	8023fa4 <uxr_read_framed_msg+0x13c>
 8024120:	0851      	lsrs	r1, r2, #1
 8024122:	7880      	ldrb	r0, [r0, #2]
 8024124:	fba5 a101 	umull	sl, r1, r5, r1
 8024128:	287e      	cmp	r0, #126	@ 0x7e
 802412a:	f080 0c20 	eor.w	ip, r0, #32
 802412e:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8024132:	fb0b 2211 	mls	r2, fp, r1, r2
 8024136:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 802413a:	f47f af14 	bne.w	8023f66 <uxr_read_framed_msg+0xfe>
 802413e:	459e      	cmp	lr, r3
 8024140:	f43f af33 	beq.w	8023faa <uxr_read_framed_msg+0x142>
 8024144:	2301      	movs	r3, #1
 8024146:	7023      	strb	r3, [r4, #0]
 8024148:	e69f      	b.n	8023e8a <uxr_read_framed_msg+0x22>
 802414a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802414c:	9300      	str	r3, [sp, #0]
 802414e:	2301      	movs	r3, #1
 8024150:	9301      	str	r3, [sp, #4]
 8024152:	464a      	mov	r2, r9
 8024154:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024156:	4641      	mov	r1, r8
 8024158:	4620      	mov	r0, r4
 802415a:	f7ff fdf1 	bl	8023d40 <uxr_framing_read_transport>
 802415e:	2800      	cmp	r0, #0
 8024160:	f43f aec5 	beq.w	8023eee <uxr_read_framed_msg+0x86>
 8024164:	7823      	ldrb	r3, [r4, #0]
 8024166:	e690      	b.n	8023e8a <uxr_read_framed_msg+0x22>
 8024168:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802416a:	9300      	str	r3, [sp, #0]
 802416c:	2302      	movs	r3, #2
 802416e:	e7ef      	b.n	8024150 <uxr_read_framed_msg+0x2e8>
 8024170:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024172:	464a      	mov	r2, r9
 8024174:	4641      	mov	r1, r8
 8024176:	4620      	mov	r0, r4
 8024178:	9300      	str	r3, [sp, #0]
 802417a:	2304      	movs	r3, #4
 802417c:	9301      	str	r3, [sp, #4]
 802417e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024180:	f7ff fdde 	bl	8023d40 <uxr_framing_read_transport>
 8024184:	2800      	cmp	r0, #0
 8024186:	d1ed      	bne.n	8024164 <uxr_read_framed_msg+0x2fc>
 8024188:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 802418c:	2b7e      	cmp	r3, #126	@ 0x7e
 802418e:	d0e9      	beq.n	8024164 <uxr_read_framed_msg+0x2fc>
 8024190:	e6ad      	b.n	8023eee <uxr_read_framed_msg+0x86>
 8024192:	bf00      	nop
 8024194:	30c30c31 	.word	0x30c30c31
 8024198:	0802ad3c 	.word	0x0802ad3c
 802419c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802419e:	9300      	str	r3, [sp, #0]
 80241a0:	2305      	movs	r3, #5
 80241a2:	9301      	str	r3, [sp, #4]
 80241a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80241a6:	f7ff fdcb 	bl	8023d40 <uxr_framing_read_transport>
 80241aa:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80241ae:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80241b2:	429a      	cmp	r2, r3
 80241b4:	f43f ae9b 	beq.w	8023eee <uxr_read_framed_msg+0x86>
 80241b8:	e664      	b.n	8023e84 <uxr_read_framed_msg+0x1c>
 80241ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80241bc:	9300      	str	r3, [sp, #0]
 80241be:	2303      	movs	r3, #3
 80241c0:	e7c6      	b.n	8024150 <uxr_read_framed_msg+0x2e8>
 80241c2:	2305      	movs	r3, #5
 80241c4:	7023      	strb	r3, [r4, #0]
 80241c6:	e660      	b.n	8023e8a <uxr_read_framed_msg+0x22>
 80241c8:	f43f aeef 	beq.w	8023faa <uxr_read_framed_msg+0x142>
 80241cc:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80241d0:	d094      	beq.n	80240fc <uxr_read_framed_msg+0x294>
 80241d2:	ebae 0303 	sub.w	r3, lr, r3
 80241d6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80241d8:	3302      	adds	r3, #2
 80241da:	9200      	str	r2, [sp, #0]
 80241dc:	e7b8      	b.n	8024150 <uxr_read_framed_msg+0x2e8>
 80241de:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80241e2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80241e4:	7013      	strb	r3, [r2, #0]
 80241e6:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80241e8:	b003      	add	sp, #12
 80241ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80241ee:	1c59      	adds	r1, r3, #1
 80241f0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80241f4:	084a      	lsrs	r2, r1, #1
 80241f6:	fba5 e202 	umull	lr, r2, r5, r2
 80241fa:	0892      	lsrs	r2, r2, #2
 80241fc:	fb0c 1212 	mls	r2, ip, r2, r1
 8024200:	b2d1      	uxtb	r1, r2
 8024202:	4288      	cmp	r0, r1
 8024204:	d0b0      	beq.n	8024168 <uxr_read_framed_msg+0x300>
 8024206:	3302      	adds	r3, #2
 8024208:	4422      	add	r2, r4
 802420a:	7891      	ldrb	r1, [r2, #2]
 802420c:	085a      	lsrs	r2, r3, #1
 802420e:	fba5 0202 	umull	r0, r2, r5, r2
 8024212:	297e      	cmp	r1, #126	@ 0x7e
 8024214:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8024218:	fb0c 3312 	mls	r3, ip, r2, r3
 802421c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8024220:	f000 80a1 	beq.w	8024366 <uxr_read_framed_msg+0x4fe>
 8024224:	f081 0120 	eor.w	r1, r1, #32
 8024228:	e680      	b.n	8023f2c <uxr_read_framed_msg+0xc4>
 802422a:	f103 0c01 	add.w	ip, r3, #1
 802422e:	202a      	movs	r0, #42	@ 0x2a
 8024230:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8024234:	fba5 e202 	umull	lr, r2, r5, r2
 8024238:	0892      	lsrs	r2, r2, #2
 802423a:	fb00 c212 	mls	r2, r0, r2, ip
 802423e:	fa5f fc82 	uxtb.w	ip, r2
 8024242:	4561      	cmp	r1, ip
 8024244:	d081      	beq.n	802414a <uxr_read_framed_msg+0x2e2>
 8024246:	3302      	adds	r3, #2
 8024248:	4422      	add	r2, r4
 802424a:	0859      	lsrs	r1, r3, #1
 802424c:	7892      	ldrb	r2, [r2, #2]
 802424e:	fba5 c101 	umull	ip, r1, r5, r1
 8024252:	2a7e      	cmp	r2, #126	@ 0x7e
 8024254:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8024258:	fb00 3311 	mls	r3, r0, r1, r3
 802425c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8024260:	f000 8091 	beq.w	8024386 <uxr_read_framed_msg+0x51e>
 8024264:	f082 0220 	eor.w	r2, r2, #32
 8024268:	e636      	b.n	8023ed8 <uxr_read_framed_msg+0x70>
 802426a:	1c51      	adds	r1, r2, #1
 802426c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8024270:	084b      	lsrs	r3, r1, #1
 8024272:	fba5 e303 	umull	lr, r3, r5, r3
 8024276:	089b      	lsrs	r3, r3, #2
 8024278:	fb0c 1313 	mls	r3, ip, r3, r1
 802427c:	b2d9      	uxtb	r1, r3
 802427e:	4288      	cmp	r0, r1
 8024280:	d09b      	beq.n	80241ba <uxr_read_framed_msg+0x352>
 8024282:	3202      	adds	r2, #2
 8024284:	4423      	add	r3, r4
 8024286:	0850      	lsrs	r0, r2, #1
 8024288:	789b      	ldrb	r3, [r3, #2]
 802428a:	fba5 1000 	umull	r1, r0, r5, r0
 802428e:	2b7e      	cmp	r3, #126	@ 0x7e
 8024290:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8024294:	fb0c 2210 	mls	r2, ip, r0, r2
 8024298:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 802429c:	d077      	beq.n	802438e <uxr_read_framed_msg+0x526>
 802429e:	f083 0120 	eor.w	r1, r3, #32
 80242a2:	e6ea      	b.n	802407a <uxr_read_framed_msg+0x212>
 80242a4:	f103 0c01 	add.w	ip, r3, #1
 80242a8:	202a      	movs	r0, #42	@ 0x2a
 80242aa:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80242ae:	fba5 e202 	umull	lr, r2, r5, r2
 80242b2:	0892      	lsrs	r2, r2, #2
 80242b4:	fb00 c212 	mls	r2, r0, r2, ip
 80242b8:	fa5f fc82 	uxtb.w	ip, r2
 80242bc:	4561      	cmp	r1, ip
 80242be:	f43f af57 	beq.w	8024170 <uxr_read_framed_msg+0x308>
 80242c2:	3302      	adds	r3, #2
 80242c4:	4422      	add	r2, r4
 80242c6:	7891      	ldrb	r1, [r2, #2]
 80242c8:	085a      	lsrs	r2, r3, #1
 80242ca:	fba5 c202 	umull	ip, r2, r5, r2
 80242ce:	297e      	cmp	r1, #126	@ 0x7e
 80242d0:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80242d4:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80242d8:	fb00 3312 	mls	r3, r0, r2, r3
 80242dc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80242e0:	f43f af46 	beq.w	8024170 <uxr_read_framed_msg+0x308>
 80242e4:	f081 0120 	eor.w	r1, r1, #32
 80242e8:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80242ec:	e6ea      	b.n	80240c4 <uxr_read_framed_msg+0x25c>
 80242ee:	1c59      	adds	r1, r3, #1
 80242f0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80242f4:	084a      	lsrs	r2, r1, #1
 80242f6:	fba5 e202 	umull	lr, r2, r5, r2
 80242fa:	0892      	lsrs	r2, r2, #2
 80242fc:	fb0c 1212 	mls	r2, ip, r2, r1
 8024300:	b2d1      	uxtb	r1, r2
 8024302:	4288      	cmp	r0, r1
 8024304:	f43f af21 	beq.w	802414a <uxr_read_framed_msg+0x2e2>
 8024308:	3302      	adds	r3, #2
 802430a:	4422      	add	r2, r4
 802430c:	7891      	ldrb	r1, [r2, #2]
 802430e:	085a      	lsrs	r2, r3, #1
 8024310:	fba5 0202 	umull	r0, r2, r5, r2
 8024314:	297e      	cmp	r1, #126	@ 0x7e
 8024316:	ea4f 0292 	mov.w	r2, r2, lsr #2
 802431a:	fb0c 3312 	mls	r3, ip, r2, r3
 802431e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8024322:	d030      	beq.n	8024386 <uxr_read_framed_msg+0x51e>
 8024324:	f081 0120 	eor.w	r1, r1, #32
 8024328:	e65d      	b.n	8023fe6 <uxr_read_framed_msg+0x17e>
 802432a:	1c59      	adds	r1, r3, #1
 802432c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8024330:	084a      	lsrs	r2, r1, #1
 8024332:	fba5 e202 	umull	lr, r2, r5, r2
 8024336:	0892      	lsrs	r2, r2, #2
 8024338:	fb0c 1212 	mls	r2, ip, r2, r1
 802433c:	b2d1      	uxtb	r1, r2
 802433e:	4288      	cmp	r0, r1
 8024340:	f43f af12 	beq.w	8024168 <uxr_read_framed_msg+0x300>
 8024344:	3302      	adds	r3, #2
 8024346:	4422      	add	r2, r4
 8024348:	7891      	ldrb	r1, [r2, #2]
 802434a:	085a      	lsrs	r2, r3, #1
 802434c:	fba5 0202 	umull	r0, r2, r5, r2
 8024350:	297e      	cmp	r1, #126	@ 0x7e
 8024352:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8024356:	fb0c 3312 	mls	r3, ip, r2, r3
 802435a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 802435e:	d002      	beq.n	8024366 <uxr_read_framed_msg+0x4fe>
 8024360:	f081 0120 	eor.w	r1, r1, #32
 8024364:	e66a      	b.n	802403c <uxr_read_framed_msg+0x1d4>
 8024366:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024368:	9300      	str	r3, [sp, #0]
 802436a:	2302      	movs	r3, #2
 802436c:	9301      	str	r3, [sp, #4]
 802436e:	464a      	mov	r2, r9
 8024370:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024372:	4641      	mov	r1, r8
 8024374:	4620      	mov	r0, r4
 8024376:	f7ff fce3 	bl	8023d40 <uxr_framing_read_transport>
 802437a:	2800      	cmp	r0, #0
 802437c:	f47f aef2 	bne.w	8024164 <uxr_read_framed_msg+0x2fc>
 8024380:	2301      	movs	r3, #1
 8024382:	7023      	strb	r3, [r4, #0]
 8024384:	e581      	b.n	8023e8a <uxr_read_framed_msg+0x22>
 8024386:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024388:	9300      	str	r3, [sp, #0]
 802438a:	2301      	movs	r3, #1
 802438c:	e7ee      	b.n	802436c <uxr_read_framed_msg+0x504>
 802438e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024390:	9300      	str	r3, [sp, #0]
 8024392:	2303      	movs	r3, #3
 8024394:	e7ea      	b.n	802436c <uxr_read_framed_msg+0x504>
 8024396:	bf00      	nop

08024398 <rcl_get_default_domain_id>:
 8024398:	b510      	push	{r4, lr}
 802439a:	2300      	movs	r3, #0
 802439c:	b082      	sub	sp, #8
 802439e:	9300      	str	r3, [sp, #0]
 80243a0:	b1f0      	cbz	r0, 80243e0 <rcl_get_default_domain_id+0x48>
 80243a2:	4604      	mov	r4, r0
 80243a4:	4669      	mov	r1, sp
 80243a6:	4814      	ldr	r0, [pc, #80]	@ (80243f8 <rcl_get_default_domain_id+0x60>)
 80243a8:	f7fc fc26 	bl	8020bf8 <rcutils_get_env>
 80243ac:	4602      	mov	r2, r0
 80243ae:	b110      	cbz	r0, 80243b6 <rcl_get_default_domain_id+0x1e>
 80243b0:	2001      	movs	r0, #1
 80243b2:	b002      	add	sp, #8
 80243b4:	bd10      	pop	{r4, pc}
 80243b6:	9b00      	ldr	r3, [sp, #0]
 80243b8:	b1ab      	cbz	r3, 80243e6 <rcl_get_default_domain_id+0x4e>
 80243ba:	7818      	ldrb	r0, [r3, #0]
 80243bc:	2800      	cmp	r0, #0
 80243be:	d0f8      	beq.n	80243b2 <rcl_get_default_domain_id+0x1a>
 80243c0:	4618      	mov	r0, r3
 80243c2:	a901      	add	r1, sp, #4
 80243c4:	9201      	str	r2, [sp, #4]
 80243c6:	f000 ff59 	bl	802527c <strtoul>
 80243ca:	4603      	mov	r3, r0
 80243cc:	b170      	cbz	r0, 80243ec <rcl_get_default_domain_id+0x54>
 80243ce:	1c42      	adds	r2, r0, #1
 80243d0:	d103      	bne.n	80243da <rcl_get_default_domain_id+0x42>
 80243d2:	4a0a      	ldr	r2, [pc, #40]	@ (80243fc <rcl_get_default_domain_id+0x64>)
 80243d4:	6812      	ldr	r2, [r2, #0]
 80243d6:	2a22      	cmp	r2, #34	@ 0x22
 80243d8:	d0ea      	beq.n	80243b0 <rcl_get_default_domain_id+0x18>
 80243da:	2000      	movs	r0, #0
 80243dc:	6023      	str	r3, [r4, #0]
 80243de:	e7e8      	b.n	80243b2 <rcl_get_default_domain_id+0x1a>
 80243e0:	200b      	movs	r0, #11
 80243e2:	b002      	add	sp, #8
 80243e4:	bd10      	pop	{r4, pc}
 80243e6:	4618      	mov	r0, r3
 80243e8:	b002      	add	sp, #8
 80243ea:	bd10      	pop	{r4, pc}
 80243ec:	9a01      	ldr	r2, [sp, #4]
 80243ee:	7812      	ldrb	r2, [r2, #0]
 80243f0:	2a00      	cmp	r2, #0
 80243f2:	d0f2      	beq.n	80243da <rcl_get_default_domain_id+0x42>
 80243f4:	e7dc      	b.n	80243b0 <rcl_get_default_domain_id+0x18>
 80243f6:	bf00      	nop
 80243f8:	0802aa10 	.word	0x0802aa10
 80243fc:	20014c9c 	.word	0x20014c9c

08024400 <rcl_expand_topic_name>:
 8024400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024404:	b08d      	sub	sp, #52	@ 0x34
 8024406:	4698      	mov	r8, r3
 8024408:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802440a:	9207      	str	r2, [sp, #28]
 802440c:	2b00      	cmp	r3, #0
 802440e:	bf18      	it	ne
 8024410:	f1b8 0f00 	cmpne.w	r8, #0
 8024414:	bf0c      	ite	eq
 8024416:	2301      	moveq	r3, #1
 8024418:	2300      	movne	r3, #0
 802441a:	2a00      	cmp	r2, #0
 802441c:	bf08      	it	eq
 802441e:	f043 0301 	orreq.w	r3, r3, #1
 8024422:	2900      	cmp	r1, #0
 8024424:	bf08      	it	eq
 8024426:	f043 0301 	orreq.w	r3, r3, #1
 802442a:	2b00      	cmp	r3, #0
 802442c:	d13d      	bne.n	80244aa <rcl_expand_topic_name+0xaa>
 802442e:	fab0 f280 	clz	r2, r0
 8024432:	4604      	mov	r4, r0
 8024434:	0952      	lsrs	r2, r2, #5
 8024436:	2800      	cmp	r0, #0
 8024438:	d037      	beq.n	80244aa <rcl_expand_topic_name+0xaa>
 802443a:	460f      	mov	r7, r1
 802443c:	a90b      	add	r1, sp, #44	@ 0x2c
 802443e:	f000 f9f3 	bl	8024828 <rcl_validate_topic_name>
 8024442:	4605      	mov	r5, r0
 8024444:	bb68      	cbnz	r0, 80244a2 <rcl_expand_topic_name+0xa2>
 8024446:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024448:	2b00      	cmp	r3, #0
 802444a:	d137      	bne.n	80244bc <rcl_expand_topic_name+0xbc>
 802444c:	4602      	mov	r2, r0
 802444e:	a90b      	add	r1, sp, #44	@ 0x2c
 8024450:	4638      	mov	r0, r7
 8024452:	f7fd f85f 	bl	8021514 <rmw_validate_node_name>
 8024456:	bb68      	cbnz	r0, 80244b4 <rcl_expand_topic_name+0xb4>
 8024458:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802445a:	2b00      	cmp	r3, #0
 802445c:	d133      	bne.n	80244c6 <rcl_expand_topic_name+0xc6>
 802445e:	462a      	mov	r2, r5
 8024460:	a90b      	add	r1, sp, #44	@ 0x2c
 8024462:	9807      	ldr	r0, [sp, #28]
 8024464:	f7fd f838 	bl	80214d8 <rmw_validate_namespace>
 8024468:	bb20      	cbnz	r0, 80244b4 <rcl_expand_topic_name+0xb4>
 802446a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802446c:	2d00      	cmp	r5, #0
 802446e:	f040 80a2 	bne.w	80245b6 <rcl_expand_topic_name+0x1b6>
 8024472:	217b      	movs	r1, #123	@ 0x7b
 8024474:	4620      	mov	r0, r4
 8024476:	f001 f9b5 	bl	80257e4 <strchr>
 802447a:	7823      	ldrb	r3, [r4, #0]
 802447c:	4681      	mov	r9, r0
 802447e:	bb20      	cbnz	r0, 80244ca <rcl_expand_topic_name+0xca>
 8024480:	2b2f      	cmp	r3, #47	@ 0x2f
 8024482:	d122      	bne.n	80244ca <rcl_expand_topic_name+0xca>
 8024484:	ab19      	add	r3, sp, #100	@ 0x64
 8024486:	e893 0003 	ldmia.w	r3, {r0, r1}
 802448a:	ab16      	add	r3, sp, #88	@ 0x58
 802448c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8024490:	4620      	mov	r0, r4
 8024492:	cb0e      	ldmia	r3, {r1, r2, r3}
 8024494:	f7fc fd0a 	bl	8020eac <rcutils_strdup>
 8024498:	2800      	cmp	r0, #0
 802449a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802449c:	bf08      	it	eq
 802449e:	250a      	moveq	r5, #10
 80244a0:	6018      	str	r0, [r3, #0]
 80244a2:	4628      	mov	r0, r5
 80244a4:	b00d      	add	sp, #52	@ 0x34
 80244a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80244aa:	250b      	movs	r5, #11
 80244ac:	4628      	mov	r0, r5
 80244ae:	b00d      	add	sp, #52	@ 0x34
 80244b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80244b4:	f7f9 ff1e 	bl	801e2f4 <rcl_convert_rmw_ret_to_rcl_ret>
 80244b8:	4605      	mov	r5, r0
 80244ba:	e7f2      	b.n	80244a2 <rcl_expand_topic_name+0xa2>
 80244bc:	2567      	movs	r5, #103	@ 0x67
 80244be:	4628      	mov	r0, r5
 80244c0:	b00d      	add	sp, #52	@ 0x34
 80244c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80244c6:	25c9      	movs	r5, #201	@ 0xc9
 80244c8:	e7eb      	b.n	80244a2 <rcl_expand_topic_name+0xa2>
 80244ca:	2b7e      	cmp	r3, #126	@ 0x7e
 80244cc:	d075      	beq.n	80245ba <rcl_expand_topic_name+0x1ba>
 80244ce:	f1b9 0f00 	cmp.w	r9, #0
 80244d2:	f000 80c2 	beq.w	802465a <rcl_expand_topic_name+0x25a>
 80244d6:	2300      	movs	r3, #0
 80244d8:	46a2      	mov	sl, r4
 80244da:	461e      	mov	r6, r3
 80244dc:	9508      	str	r5, [sp, #32]
 80244de:	4655      	mov	r5, sl
 80244e0:	9409      	str	r4, [sp, #36]	@ 0x24
 80244e2:	46b2      	mov	sl, r6
 80244e4:	464c      	mov	r4, r9
 80244e6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80244ea:	2c00      	cmp	r4, #0
 80244ec:	f000 80ae 	beq.w	802464c <rcl_expand_topic_name+0x24c>
 80244f0:	217d      	movs	r1, #125	@ 0x7d
 80244f2:	4628      	mov	r0, r5
 80244f4:	f001 f976 	bl	80257e4 <strchr>
 80244f8:	eba0 0904 	sub.w	r9, r0, r4
 80244fc:	4621      	mov	r1, r4
 80244fe:	4869      	ldr	r0, [pc, #420]	@ (80246a4 <rcl_expand_topic_name+0x2a4>)
 8024500:	f109 0601 	add.w	r6, r9, #1
 8024504:	4632      	mov	r2, r6
 8024506:	f001 f97a 	bl	80257fe <strncmp>
 802450a:	2800      	cmp	r0, #0
 802450c:	d051      	beq.n	80245b2 <rcl_expand_topic_name+0x1b2>
 802450e:	4632      	mov	r2, r6
 8024510:	4621      	mov	r1, r4
 8024512:	4865      	ldr	r0, [pc, #404]	@ (80246a8 <rcl_expand_topic_name+0x2a8>)
 8024514:	f001 f973 	bl	80257fe <strncmp>
 8024518:	b128      	cbz	r0, 8024526 <rcl_expand_topic_name+0x126>
 802451a:	4632      	mov	r2, r6
 802451c:	4621      	mov	r1, r4
 802451e:	4863      	ldr	r0, [pc, #396]	@ (80246ac <rcl_expand_topic_name+0x2ac>)
 8024520:	f001 f96d 	bl	80257fe <strncmp>
 8024524:	bb38      	cbnz	r0, 8024576 <rcl_expand_topic_name+0x176>
 8024526:	46d9      	mov	r9, fp
 8024528:	ab18      	add	r3, sp, #96	@ 0x60
 802452a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802452e:	ab16      	add	r3, sp, #88	@ 0x58
 8024530:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8024534:	4620      	mov	r0, r4
 8024536:	4631      	mov	r1, r6
 8024538:	cb0c      	ldmia	r3, {r2, r3}
 802453a:	f7fc fcd9 	bl	8020ef0 <rcutils_strndup>
 802453e:	4604      	mov	r4, r0
 8024540:	2800      	cmp	r0, #0
 8024542:	f000 80a3 	beq.w	802468c <rcl_expand_topic_name+0x28c>
 8024546:	464a      	mov	r2, r9
 8024548:	4628      	mov	r0, r5
 802454a:	ab16      	add	r3, sp, #88	@ 0x58
 802454c:	4621      	mov	r1, r4
 802454e:	f7fc fba5 	bl	8020c9c <rcutils_repl_str>
 8024552:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8024554:	4605      	mov	r5, r0
 8024556:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8024558:	4620      	mov	r0, r4
 802455a:	4798      	blx	r3
 802455c:	4650      	mov	r0, sl
 802455e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8024560:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8024562:	4798      	blx	r3
 8024564:	2d00      	cmp	r5, #0
 8024566:	d06c      	beq.n	8024642 <rcl_expand_topic_name+0x242>
 8024568:	217b      	movs	r1, #123	@ 0x7b
 802456a:	4628      	mov	r0, r5
 802456c:	f001 f93a 	bl	80257e4 <strchr>
 8024570:	46aa      	mov	sl, r5
 8024572:	4604      	mov	r4, r0
 8024574:	e7b9      	b.n	80244ea <rcl_expand_topic_name+0xea>
 8024576:	f109 32ff 	add.w	r2, r9, #4294967295
 802457a:	1c61      	adds	r1, r4, #1
 802457c:	4640      	mov	r0, r8
 802457e:	f7fc fdcf 	bl	8021120 <rcutils_string_map_getn>
 8024582:	4681      	mov	r9, r0
 8024584:	2800      	cmp	r0, #0
 8024586:	d1cf      	bne.n	8024528 <rcl_expand_topic_name+0x128>
 8024588:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802458a:	aa18      	add	r2, sp, #96	@ 0x60
 802458c:	2569      	movs	r5, #105	@ 0x69
 802458e:	6018      	str	r0, [r3, #0]
 8024590:	ab16      	add	r3, sp, #88	@ 0x58
 8024592:	ca07      	ldmia	r2, {r0, r1, r2}
 8024594:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8024598:	4631      	mov	r1, r6
 802459a:	4620      	mov	r0, r4
 802459c:	cb0c      	ldmia	r3, {r2, r3}
 802459e:	f7fc fca7 	bl	8020ef0 <rcutils_strndup>
 80245a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80245a4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80245a6:	4798      	blx	r3
 80245a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80245aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80245ac:	4650      	mov	r0, sl
 80245ae:	4798      	blx	r3
 80245b0:	e777      	b.n	80244a2 <rcl_expand_topic_name+0xa2>
 80245b2:	46b9      	mov	r9, r7
 80245b4:	e7b8      	b.n	8024528 <rcl_expand_topic_name+0x128>
 80245b6:	25ca      	movs	r5, #202	@ 0xca
 80245b8:	e773      	b.n	80244a2 <rcl_expand_topic_name+0xa2>
 80245ba:	9e07      	ldr	r6, [sp, #28]
 80245bc:	4630      	mov	r0, r6
 80245be:	f7db fe49 	bl	8000254 <strlen>
 80245c2:	4a3b      	ldr	r2, [pc, #236]	@ (80246b0 <rcl_expand_topic_name+0x2b0>)
 80245c4:	4b3b      	ldr	r3, [pc, #236]	@ (80246b4 <rcl_expand_topic_name+0x2b4>)
 80245c6:	9603      	str	r6, [sp, #12]
 80245c8:	2801      	cmp	r0, #1
 80245ca:	bf18      	it	ne
 80245cc:	4613      	movne	r3, r2
 80245ce:	9704      	str	r7, [sp, #16]
 80245d0:	9302      	str	r3, [sp, #8]
 80245d2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80245d4:	9300      	str	r3, [sp, #0]
 80245d6:	1c63      	adds	r3, r4, #1
 80245d8:	9305      	str	r3, [sp, #20]
 80245da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80245de:	9301      	str	r3, [sp, #4]
 80245e0:	ab16      	add	r3, sp, #88	@ 0x58
 80245e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80245e4:	f7fc fb20 	bl	8020c28 <rcutils_format_string_limit>
 80245e8:	4606      	mov	r6, r0
 80245ea:	b350      	cbz	r0, 8024642 <rcl_expand_topic_name+0x242>
 80245ec:	f1b9 0f00 	cmp.w	r9, #0
 80245f0:	d005      	beq.n	80245fe <rcl_expand_topic_name+0x1fe>
 80245f2:	217b      	movs	r1, #123	@ 0x7b
 80245f4:	46b2      	mov	sl, r6
 80245f6:	f001 f8f5 	bl	80257e4 <strchr>
 80245fa:	4681      	mov	r9, r0
 80245fc:	e76e      	b.n	80244dc <rcl_expand_topic_name+0xdc>
 80245fe:	7833      	ldrb	r3, [r6, #0]
 8024600:	2b2f      	cmp	r3, #47	@ 0x2f
 8024602:	d01b      	beq.n	802463c <rcl_expand_topic_name+0x23c>
 8024604:	9c07      	ldr	r4, [sp, #28]
 8024606:	4620      	mov	r0, r4
 8024608:	f7db fe24 	bl	8000254 <strlen>
 802460c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8024610:	4a29      	ldr	r2, [pc, #164]	@ (80246b8 <rcl_expand_topic_name+0x2b8>)
 8024612:	9301      	str	r3, [sp, #4]
 8024614:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8024616:	9604      	str	r6, [sp, #16]
 8024618:	9300      	str	r3, [sp, #0]
 802461a:	4b28      	ldr	r3, [pc, #160]	@ (80246bc <rcl_expand_topic_name+0x2bc>)
 802461c:	9403      	str	r4, [sp, #12]
 802461e:	2801      	cmp	r0, #1
 8024620:	bf18      	it	ne
 8024622:	4613      	movne	r3, r2
 8024624:	9302      	str	r3, [sp, #8]
 8024626:	ab16      	add	r3, sp, #88	@ 0x58
 8024628:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802462a:	f7fc fafd 	bl	8020c28 <rcutils_format_string_limit>
 802462e:	4603      	mov	r3, r0
 8024630:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8024632:	4630      	mov	r0, r6
 8024634:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8024636:	461e      	mov	r6, r3
 8024638:	4790      	blx	r2
 802463a:	b116      	cbz	r6, 8024642 <rcl_expand_topic_name+0x242>
 802463c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802463e:	601e      	str	r6, [r3, #0]
 8024640:	e72f      	b.n	80244a2 <rcl_expand_topic_name+0xa2>
 8024642:	2300      	movs	r3, #0
 8024644:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8024646:	250a      	movs	r5, #10
 8024648:	6013      	str	r3, [r2, #0]
 802464a:	e72a      	b.n	80244a2 <rcl_expand_topic_name+0xa2>
 802464c:	4653      	mov	r3, sl
 802464e:	4656      	mov	r6, sl
 8024650:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 8024654:	2b00      	cmp	r3, #0
 8024656:	d1d2      	bne.n	80245fe <rcl_expand_topic_name+0x1fe>
 8024658:	7823      	ldrb	r3, [r4, #0]
 802465a:	2b2f      	cmp	r3, #47	@ 0x2f
 802465c:	d01e      	beq.n	802469c <rcl_expand_topic_name+0x29c>
 802465e:	9e07      	ldr	r6, [sp, #28]
 8024660:	4630      	mov	r0, r6
 8024662:	f7db fdf7 	bl	8000254 <strlen>
 8024666:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8024668:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 802466c:	9603      	str	r6, [sp, #12]
 802466e:	9404      	str	r4, [sp, #16]
 8024670:	e9cd 2300 	strd	r2, r3, [sp]
 8024674:	4a10      	ldr	r2, [pc, #64]	@ (80246b8 <rcl_expand_topic_name+0x2b8>)
 8024676:	4b11      	ldr	r3, [pc, #68]	@ (80246bc <rcl_expand_topic_name+0x2bc>)
 8024678:	2801      	cmp	r0, #1
 802467a:	bf18      	it	ne
 802467c:	4613      	movne	r3, r2
 802467e:	9302      	str	r3, [sp, #8]
 8024680:	ab16      	add	r3, sp, #88	@ 0x58
 8024682:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024684:	f7fc fad0 	bl	8020c28 <rcutils_format_string_limit>
 8024688:	4606      	mov	r6, r0
 802468a:	e7d6      	b.n	802463a <rcl_expand_topic_name+0x23a>
 802468c:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 8024690:	4650      	mov	r0, sl
 8024692:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8024694:	6014      	str	r4, [r2, #0]
 8024696:	250a      	movs	r5, #10
 8024698:	4798      	blx	r3
 802469a:	e702      	b.n	80244a2 <rcl_expand_topic_name+0xa2>
 802469c:	2300      	movs	r3, #0
 802469e:	461e      	mov	r6, r3
 80246a0:	e7cc      	b.n	802463c <rcl_expand_topic_name+0x23c>
 80246a2:	bf00      	nop
 80246a4:	0802aa28 	.word	0x0802aa28
 80246a8:	0802aa30 	.word	0x0802aa30
 80246ac:	0802aa38 	.word	0x0802aa38
 80246b0:	0802aa20 	.word	0x0802aa20
 80246b4:	0802a4bc 	.word	0x0802a4bc
 80246b8:	0802a6bc 	.word	0x0802a6bc
 80246bc:	0802a4cc 	.word	0x0802a4cc

080246c0 <rcl_get_default_topic_name_substitutions>:
 80246c0:	2800      	cmp	r0, #0
 80246c2:	bf0c      	ite	eq
 80246c4:	200b      	moveq	r0, #11
 80246c6:	2000      	movne	r0, #0
 80246c8:	4770      	bx	lr
 80246ca:	bf00      	nop

080246cc <rcl_get_zero_initialized_guard_condition>:
 80246cc:	4a03      	ldr	r2, [pc, #12]	@ (80246dc <rcl_get_zero_initialized_guard_condition+0x10>)
 80246ce:	4603      	mov	r3, r0
 80246d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80246d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80246d8:	4618      	mov	r0, r3
 80246da:	4770      	bx	lr
 80246dc:	0802af3c 	.word	0x0802af3c

080246e0 <rcl_guard_condition_init_from_rmw>:
 80246e0:	b082      	sub	sp, #8
 80246e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80246e6:	b086      	sub	sp, #24
 80246e8:	4604      	mov	r4, r0
 80246ea:	460e      	mov	r6, r1
 80246ec:	4615      	mov	r5, r2
 80246ee:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80246f2:	f10d 0e04 	add.w	lr, sp, #4
 80246f6:	f84c 3f04 	str.w	r3, [ip, #4]!
 80246fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80246fe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8024702:	f8dc 3000 	ldr.w	r3, [ip]
 8024706:	a801      	add	r0, sp, #4
 8024708:	f8ce 3000 	str.w	r3, [lr]
 802470c:	f7f4 ff72 	bl	80195f4 <rcutils_allocator_is_valid>
 8024710:	f080 0301 	eor.w	r3, r0, #1
 8024714:	b2db      	uxtb	r3, r3
 8024716:	bb3b      	cbnz	r3, 8024768 <rcl_guard_condition_init_from_rmw+0x88>
 8024718:	b334      	cbz	r4, 8024768 <rcl_guard_condition_init_from_rmw+0x88>
 802471a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 802471e:	f1b8 0f00 	cmp.w	r8, #0
 8024722:	d11a      	bne.n	802475a <rcl_guard_condition_init_from_rmw+0x7a>
 8024724:	b305      	cbz	r5, 8024768 <rcl_guard_condition_init_from_rmw+0x88>
 8024726:	4628      	mov	r0, r5
 8024728:	f7f9 fe02 	bl	801e330 <rcl_context_is_valid>
 802472c:	b1f0      	cbz	r0, 802476c <rcl_guard_condition_init_from_rmw+0x8c>
 802472e:	9b01      	ldr	r3, [sp, #4]
 8024730:	201c      	movs	r0, #28
 8024732:	9905      	ldr	r1, [sp, #20]
 8024734:	4798      	blx	r3
 8024736:	4607      	mov	r7, r0
 8024738:	6060      	str	r0, [r4, #4]
 802473a:	b320      	cbz	r0, 8024786 <rcl_guard_condition_init_from_rmw+0xa6>
 802473c:	b1c6      	cbz	r6, 8024770 <rcl_guard_condition_init_from_rmw+0x90>
 802473e:	6006      	str	r6, [r0, #0]
 8024740:	f880 8004 	strb.w	r8, [r0, #4]
 8024744:	ac01      	add	r4, sp, #4
 8024746:	f107 0c08 	add.w	ip, r7, #8
 802474a:	2500      	movs	r5, #0
 802474c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802474e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8024752:	6823      	ldr	r3, [r4, #0]
 8024754:	f8cc 3000 	str.w	r3, [ip]
 8024758:	e000      	b.n	802475c <rcl_guard_condition_init_from_rmw+0x7c>
 802475a:	2564      	movs	r5, #100	@ 0x64
 802475c:	4628      	mov	r0, r5
 802475e:	b006      	add	sp, #24
 8024760:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024764:	b002      	add	sp, #8
 8024766:	4770      	bx	lr
 8024768:	250b      	movs	r5, #11
 802476a:	e7f7      	b.n	802475c <rcl_guard_condition_init_from_rmw+0x7c>
 802476c:	2565      	movs	r5, #101	@ 0x65
 802476e:	e7f5      	b.n	802475c <rcl_guard_condition_init_from_rmw+0x7c>
 8024770:	6828      	ldr	r0, [r5, #0]
 8024772:	3028      	adds	r0, #40	@ 0x28
 8024774:	f000 fa2e 	bl	8024bd4 <rmw_create_guard_condition>
 8024778:	6038      	str	r0, [r7, #0]
 802477a:	6867      	ldr	r7, [r4, #4]
 802477c:	683e      	ldr	r6, [r7, #0]
 802477e:	b126      	cbz	r6, 802478a <rcl_guard_condition_init_from_rmw+0xaa>
 8024780:	2301      	movs	r3, #1
 8024782:	713b      	strb	r3, [r7, #4]
 8024784:	e7de      	b.n	8024744 <rcl_guard_condition_init_from_rmw+0x64>
 8024786:	250a      	movs	r5, #10
 8024788:	e7e8      	b.n	802475c <rcl_guard_condition_init_from_rmw+0x7c>
 802478a:	9b02      	ldr	r3, [sp, #8]
 802478c:	4638      	mov	r0, r7
 802478e:	9905      	ldr	r1, [sp, #20]
 8024790:	2501      	movs	r5, #1
 8024792:	4798      	blx	r3
 8024794:	6066      	str	r6, [r4, #4]
 8024796:	e7e1      	b.n	802475c <rcl_guard_condition_init_from_rmw+0x7c>

08024798 <rcl_guard_condition_fini>:
 8024798:	b570      	push	{r4, r5, r6, lr}
 802479a:	b082      	sub	sp, #8
 802479c:	b1f0      	cbz	r0, 80247dc <rcl_guard_condition_fini+0x44>
 802479e:	6843      	ldr	r3, [r0, #4]
 80247a0:	4604      	mov	r4, r0
 80247a2:	b163      	cbz	r3, 80247be <rcl_guard_condition_fini+0x26>
 80247a4:	6818      	ldr	r0, [r3, #0]
 80247a6:	68de      	ldr	r6, [r3, #12]
 80247a8:	6999      	ldr	r1, [r3, #24]
 80247aa:	b160      	cbz	r0, 80247c6 <rcl_guard_condition_fini+0x2e>
 80247ac:	791d      	ldrb	r5, [r3, #4]
 80247ae:	b965      	cbnz	r5, 80247ca <rcl_guard_condition_fini+0x32>
 80247b0:	4618      	mov	r0, r3
 80247b2:	47b0      	blx	r6
 80247b4:	2300      	movs	r3, #0
 80247b6:	4628      	mov	r0, r5
 80247b8:	6063      	str	r3, [r4, #4]
 80247ba:	b002      	add	sp, #8
 80247bc:	bd70      	pop	{r4, r5, r6, pc}
 80247be:	461d      	mov	r5, r3
 80247c0:	4628      	mov	r0, r5
 80247c2:	b002      	add	sp, #8
 80247c4:	bd70      	pop	{r4, r5, r6, pc}
 80247c6:	4605      	mov	r5, r0
 80247c8:	e7f2      	b.n	80247b0 <rcl_guard_condition_fini+0x18>
 80247ca:	9101      	str	r1, [sp, #4]
 80247cc:	f000 fa18 	bl	8024c00 <rmw_destroy_guard_condition>
 80247d0:	1e05      	subs	r5, r0, #0
 80247d2:	6863      	ldr	r3, [r4, #4]
 80247d4:	9901      	ldr	r1, [sp, #4]
 80247d6:	bf18      	it	ne
 80247d8:	2501      	movne	r5, #1
 80247da:	e7e9      	b.n	80247b0 <rcl_guard_condition_fini+0x18>
 80247dc:	250b      	movs	r5, #11
 80247de:	4628      	mov	r0, r5
 80247e0:	b002      	add	sp, #8
 80247e2:	bd70      	pop	{r4, r5, r6, pc}

080247e4 <rcl_guard_condition_get_default_options>:
 80247e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80247e6:	b087      	sub	sp, #28
 80247e8:	4606      	mov	r6, r0
 80247ea:	4c0b      	ldr	r4, [pc, #44]	@ (8024818 <rcl_guard_condition_get_default_options+0x34>)
 80247ec:	4668      	mov	r0, sp
 80247ee:	f7f4 fef3 	bl	80195d8 <rcutils_get_default_allocator>
 80247f2:	46ee      	mov	lr, sp
 80247f4:	46a4      	mov	ip, r4
 80247f6:	4625      	mov	r5, r4
 80247f8:	4634      	mov	r4, r6
 80247fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80247fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8024802:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8024804:	f8de 7000 	ldr.w	r7, [lr]
 8024808:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802480a:	4630      	mov	r0, r6
 802480c:	f8cc 7000 	str.w	r7, [ip]
 8024810:	6027      	str	r7, [r4, #0]
 8024812:	b007      	add	sp, #28
 8024814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024816:	bf00      	nop
 8024818:	20014b44 	.word	0x20014b44

0802481c <rcl_guard_condition_get_rmw_handle>:
 802481c:	b110      	cbz	r0, 8024824 <rcl_guard_condition_get_rmw_handle+0x8>
 802481e:	6840      	ldr	r0, [r0, #4]
 8024820:	b100      	cbz	r0, 8024824 <rcl_guard_condition_get_rmw_handle+0x8>
 8024822:	6800      	ldr	r0, [r0, #0]
 8024824:	4770      	bx	lr
 8024826:	bf00      	nop

08024828 <rcl_validate_topic_name>:
 8024828:	2800      	cmp	r0, #0
 802482a:	f000 8089 	beq.w	8024940 <rcl_validate_topic_name+0x118>
 802482e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024832:	460e      	mov	r6, r1
 8024834:	2900      	cmp	r1, #0
 8024836:	f000 8085 	beq.w	8024944 <rcl_validate_topic_name+0x11c>
 802483a:	4604      	mov	r4, r0
 802483c:	4617      	mov	r7, r2
 802483e:	f7db fd09 	bl	8000254 <strlen>
 8024842:	b1b0      	cbz	r0, 8024872 <rcl_validate_topic_name+0x4a>
 8024844:	f894 e000 	ldrb.w	lr, [r4]
 8024848:	f8df c160 	ldr.w	ip, [pc, #352]	@ 80249ac <rcl_validate_topic_name+0x184>
 802484c:	f81c 300e 	ldrb.w	r3, [ip, lr]
 8024850:	f013 0304 	ands.w	r3, r3, #4
 8024854:	d139      	bne.n	80248ca <rcl_validate_topic_name+0xa2>
 8024856:	f100 38ff 	add.w	r8, r0, #4294967295
 802485a:	f814 2008 	ldrb.w	r2, [r4, r8]
 802485e:	2a2f      	cmp	r2, #47	@ 0x2f
 8024860:	d10f      	bne.n	8024882 <rcl_validate_topic_name+0x5a>
 8024862:	2202      	movs	r2, #2
 8024864:	6032      	str	r2, [r6, #0]
 8024866:	b3a7      	cbz	r7, 80248d2 <rcl_validate_topic_name+0xaa>
 8024868:	4618      	mov	r0, r3
 802486a:	f8c7 8000 	str.w	r8, [r7]
 802486e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024872:	2301      	movs	r3, #1
 8024874:	6033      	str	r3, [r6, #0]
 8024876:	b367      	cbz	r7, 80248d2 <rcl_validate_topic_name+0xaa>
 8024878:	2300      	movs	r3, #0
 802487a:	4618      	mov	r0, r3
 802487c:	603b      	str	r3, [r7, #0]
 802487e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024882:	f104 3aff 	add.w	sl, r4, #4294967295
 8024886:	461d      	mov	r5, r3
 8024888:	4619      	mov	r1, r3
 802488a:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 802488e:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 8024892:	f1b9 0f09 	cmp.w	r9, #9
 8024896:	d91f      	bls.n	80248d8 <rcl_validate_topic_name+0xb0>
 8024898:	f022 0920 	bic.w	r9, r2, #32
 802489c:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 80248a0:	f1b9 0f19 	cmp.w	r9, #25
 80248a4:	d918      	bls.n	80248d8 <rcl_validate_topic_name+0xb0>
 80248a6:	2a5f      	cmp	r2, #95	@ 0x5f
 80248a8:	d024      	beq.n	80248f4 <rcl_validate_topic_name+0xcc>
 80248aa:	2a2f      	cmp	r2, #47	@ 0x2f
 80248ac:	d058      	beq.n	8024960 <rcl_validate_topic_name+0x138>
 80248ae:	2a7e      	cmp	r2, #126	@ 0x7e
 80248b0:	d04a      	beq.n	8024948 <rcl_validate_topic_name+0x120>
 80248b2:	2a7b      	cmp	r2, #123	@ 0x7b
 80248b4:	d05b      	beq.n	802496e <rcl_validate_topic_name+0x146>
 80248b6:	2a7d      	cmp	r2, #125	@ 0x7d
 80248b8:	d169      	bne.n	802498e <rcl_validate_topic_name+0x166>
 80248ba:	2d00      	cmp	r5, #0
 80248bc:	d15c      	bne.n	8024978 <rcl_validate_topic_name+0x150>
 80248be:	2305      	movs	r3, #5
 80248c0:	6033      	str	r3, [r6, #0]
 80248c2:	b137      	cbz	r7, 80248d2 <rcl_validate_topic_name+0xaa>
 80248c4:	2000      	movs	r0, #0
 80248c6:	6039      	str	r1, [r7, #0]
 80248c8:	e7d9      	b.n	802487e <rcl_validate_topic_name+0x56>
 80248ca:	2304      	movs	r3, #4
 80248cc:	6033      	str	r3, [r6, #0]
 80248ce:	2f00      	cmp	r7, #0
 80248d0:	d1d2      	bne.n	8024878 <rcl_validate_topic_name+0x50>
 80248d2:	2000      	movs	r0, #0
 80248d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80248d8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80248dc:	0752      	lsls	r2, r2, #29
 80248de:	d509      	bpl.n	80248f4 <rcl_validate_topic_name+0xcc>
 80248e0:	2900      	cmp	r1, #0
 80248e2:	bf0c      	ite	eq
 80248e4:	2200      	moveq	r2, #0
 80248e6:	f005 0201 	andne.w	r2, r5, #1
 80248ea:	b11a      	cbz	r2, 80248f4 <rcl_validate_topic_name+0xcc>
 80248ec:	1e4d      	subs	r5, r1, #1
 80248ee:	429d      	cmp	r5, r3
 80248f0:	d031      	beq.n	8024956 <rcl_validate_topic_name+0x12e>
 80248f2:	4615      	mov	r5, r2
 80248f4:	3101      	adds	r1, #1
 80248f6:	4288      	cmp	r0, r1
 80248f8:	d1c7      	bne.n	802488a <rcl_validate_topic_name+0x62>
 80248fa:	2d00      	cmp	r5, #0
 80248fc:	d142      	bne.n	8024984 <rcl_validate_topic_name+0x15c>
 80248fe:	4628      	mov	r0, r5
 8024900:	2301      	movs	r3, #1
 8024902:	e00c      	b.n	802491e <rcl_validate_topic_name+0xf6>
 8024904:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8024908:	d101      	bne.n	802490e <rcl_validate_topic_name+0xe6>
 802490a:	2801      	cmp	r0, #1
 802490c:	d047      	beq.n	802499e <rcl_validate_topic_name+0x176>
 802490e:	1c5a      	adds	r2, r3, #1
 8024910:	428b      	cmp	r3, r1
 8024912:	f100 0001 	add.w	r0, r0, #1
 8024916:	f104 0401 	add.w	r4, r4, #1
 802491a:	4613      	mov	r3, r2
 802491c:	d22e      	bcs.n	802497c <rcl_validate_topic_name+0x154>
 802491e:	4580      	cmp	r8, r0
 8024920:	d0f5      	beq.n	802490e <rcl_validate_topic_name+0xe6>
 8024922:	7822      	ldrb	r2, [r4, #0]
 8024924:	2a2f      	cmp	r2, #47	@ 0x2f
 8024926:	d1ed      	bne.n	8024904 <rcl_validate_topic_name+0xdc>
 8024928:	7862      	ldrb	r2, [r4, #1]
 802492a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802492e:	0752      	lsls	r2, r2, #29
 8024930:	d5ed      	bpl.n	802490e <rcl_validate_topic_name+0xe6>
 8024932:	2204      	movs	r2, #4
 8024934:	6032      	str	r2, [r6, #0]
 8024936:	2f00      	cmp	r7, #0
 8024938:	d0cb      	beq.n	80248d2 <rcl_validate_topic_name+0xaa>
 802493a:	2000      	movs	r0, #0
 802493c:	603b      	str	r3, [r7, #0]
 802493e:	e79e      	b.n	802487e <rcl_validate_topic_name+0x56>
 8024940:	200b      	movs	r0, #11
 8024942:	4770      	bx	lr
 8024944:	200b      	movs	r0, #11
 8024946:	e79a      	b.n	802487e <rcl_validate_topic_name+0x56>
 8024948:	2900      	cmp	r1, #0
 802494a:	d0d3      	beq.n	80248f4 <rcl_validate_topic_name+0xcc>
 802494c:	2306      	movs	r3, #6
 802494e:	6033      	str	r3, [r6, #0]
 8024950:	2f00      	cmp	r7, #0
 8024952:	d1b7      	bne.n	80248c4 <rcl_validate_topic_name+0x9c>
 8024954:	e7bd      	b.n	80248d2 <rcl_validate_topic_name+0xaa>
 8024956:	2309      	movs	r3, #9
 8024958:	6033      	str	r3, [r6, #0]
 802495a:	2f00      	cmp	r7, #0
 802495c:	d1b2      	bne.n	80248c4 <rcl_validate_topic_name+0x9c>
 802495e:	e7b8      	b.n	80248d2 <rcl_validate_topic_name+0xaa>
 8024960:	2d00      	cmp	r5, #0
 8024962:	d0c7      	beq.n	80248f4 <rcl_validate_topic_name+0xcc>
 8024964:	2308      	movs	r3, #8
 8024966:	6033      	str	r3, [r6, #0]
 8024968:	2f00      	cmp	r7, #0
 802496a:	d1ab      	bne.n	80248c4 <rcl_validate_topic_name+0x9c>
 802496c:	e7b1      	b.n	80248d2 <rcl_validate_topic_name+0xaa>
 802496e:	2d00      	cmp	r5, #0
 8024970:	d1f8      	bne.n	8024964 <rcl_validate_topic_name+0x13c>
 8024972:	460b      	mov	r3, r1
 8024974:	2501      	movs	r5, #1
 8024976:	e7bd      	b.n	80248f4 <rcl_validate_topic_name+0xcc>
 8024978:	2500      	movs	r5, #0
 802497a:	e7bb      	b.n	80248f4 <rcl_validate_topic_name+0xcc>
 802497c:	2300      	movs	r3, #0
 802497e:	4618      	mov	r0, r3
 8024980:	6033      	str	r3, [r6, #0]
 8024982:	e77c      	b.n	802487e <rcl_validate_topic_name+0x56>
 8024984:	2205      	movs	r2, #5
 8024986:	6032      	str	r2, [r6, #0]
 8024988:	2f00      	cmp	r7, #0
 802498a:	d1d6      	bne.n	802493a <rcl_validate_topic_name+0x112>
 802498c:	e7a1      	b.n	80248d2 <rcl_validate_topic_name+0xaa>
 802498e:	2d00      	cmp	r5, #0
 8024990:	bf14      	ite	ne
 8024992:	2308      	movne	r3, #8
 8024994:	2303      	moveq	r3, #3
 8024996:	6033      	str	r3, [r6, #0]
 8024998:	2f00      	cmp	r7, #0
 802499a:	d193      	bne.n	80248c4 <rcl_validate_topic_name+0x9c>
 802499c:	e799      	b.n	80248d2 <rcl_validate_topic_name+0xaa>
 802499e:	2307      	movs	r3, #7
 80249a0:	6033      	str	r3, [r6, #0]
 80249a2:	2f00      	cmp	r7, #0
 80249a4:	d095      	beq.n	80248d2 <rcl_validate_topic_name+0xaa>
 80249a6:	2301      	movs	r3, #1
 80249a8:	e7c7      	b.n	802493a <rcl_validate_topic_name+0x112>
 80249aa:	bf00      	nop
 80249ac:	0802b023 	.word	0x0802b023

080249b0 <rcutils_string_array_fini>:
 80249b0:	b328      	cbz	r0, 80249fe <rcutils_string_array_fini+0x4e>
 80249b2:	b570      	push	{r4, r5, r6, lr}
 80249b4:	4604      	mov	r4, r0
 80249b6:	6840      	ldr	r0, [r0, #4]
 80249b8:	b1e0      	cbz	r0, 80249f4 <rcutils_string_array_fini+0x44>
 80249ba:	f104 0008 	add.w	r0, r4, #8
 80249be:	f7f4 fe19 	bl	80195f4 <rcutils_allocator_is_valid>
 80249c2:	b1c0      	cbz	r0, 80249f6 <rcutils_string_array_fini+0x46>
 80249c4:	6823      	ldr	r3, [r4, #0]
 80249c6:	b1c3      	cbz	r3, 80249fa <rcutils_string_array_fini+0x4a>
 80249c8:	2500      	movs	r5, #0
 80249ca:	6860      	ldr	r0, [r4, #4]
 80249cc:	462e      	mov	r6, r5
 80249ce:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80249d2:	68e3      	ldr	r3, [r4, #12]
 80249d4:	69a1      	ldr	r1, [r4, #24]
 80249d6:	4798      	blx	r3
 80249d8:	e9d4 3000 	ldrd	r3, r0, [r4]
 80249dc:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80249e0:	3501      	adds	r5, #1
 80249e2:	429d      	cmp	r5, r3
 80249e4:	d3f3      	bcc.n	80249ce <rcutils_string_array_fini+0x1e>
 80249e6:	68e3      	ldr	r3, [r4, #12]
 80249e8:	69a1      	ldr	r1, [r4, #24]
 80249ea:	4798      	blx	r3
 80249ec:	2300      	movs	r3, #0
 80249ee:	4618      	mov	r0, r3
 80249f0:	e9c4 3300 	strd	r3, r3, [r4]
 80249f4:	bd70      	pop	{r4, r5, r6, pc}
 80249f6:	200b      	movs	r0, #11
 80249f8:	bd70      	pop	{r4, r5, r6, pc}
 80249fa:	6860      	ldr	r0, [r4, #4]
 80249fc:	e7f3      	b.n	80249e6 <rcutils_string_array_fini+0x36>
 80249fe:	200b      	movs	r0, #11
 8024a00:	4770      	bx	lr
 8024a02:	bf00      	nop

08024a04 <on_status>:
 8024a04:	b082      	sub	sp, #8
 8024a06:	b002      	add	sp, #8
 8024a08:	4770      	bx	lr
 8024a0a:	bf00      	nop

08024a0c <on_topic>:
 8024a0c:	4a23      	ldr	r2, [pc, #140]	@ (8024a9c <on_topic+0x90>)
 8024a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024a12:	6812      	ldr	r2, [r2, #0]
 8024a14:	b094      	sub	sp, #80	@ 0x50
 8024a16:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8024a18:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8024a1c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8024a1e:	9312      	str	r3, [sp, #72]	@ 0x48
 8024a20:	b3c2      	cbz	r2, 8024a94 <on_topic+0x88>
 8024a22:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8024a26:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8024a2a:	e001      	b.n	8024a30 <on_topic+0x24>
 8024a2c:	6852      	ldr	r2, [r2, #4]
 8024a2e:	b38a      	cbz	r2, 8024a94 <on_topic+0x88>
 8024a30:	6894      	ldr	r4, [r2, #8]
 8024a32:	8aa3      	ldrh	r3, [r4, #20]
 8024a34:	428b      	cmp	r3, r1
 8024a36:	d1f9      	bne.n	8024a2c <on_topic+0x20>
 8024a38:	7da3      	ldrb	r3, [r4, #22]
 8024a3a:	4283      	cmp	r3, r0
 8024a3c:	d1f6      	bne.n	8024a2c <on_topic+0x20>
 8024a3e:	2248      	movs	r2, #72	@ 0x48
 8024a40:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8024a44:	4668      	mov	r0, sp
 8024a46:	f000 ffec 	bl	8025a22 <memcpy>
 8024a4a:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8024a4e:	4620      	mov	r0, r4
 8024a50:	cb0c      	ldmia	r3, {r2, r3}
 8024a52:	f7f5 fa09 	bl	8019e68 <rmw_uxrce_get_static_input_buffer_for_entity>
 8024a56:	4607      	mov	r7, r0
 8024a58:	b1e0      	cbz	r0, 8024a94 <on_topic+0x88>
 8024a5a:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8024a5e:	462a      	mov	r2, r5
 8024a60:	4630      	mov	r0, r6
 8024a62:	f108 0110 	add.w	r1, r8, #16
 8024a66:	f7fe f843 	bl	8022af0 <ucdr_deserialize_array_uint8_t>
 8024a6a:	b930      	cbnz	r0, 8024a7a <on_topic+0x6e>
 8024a6c:	4639      	mov	r1, r7
 8024a6e:	480c      	ldr	r0, [pc, #48]	@ (8024aa0 <on_topic+0x94>)
 8024a70:	b014      	add	sp, #80	@ 0x50
 8024a72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024a76:	f7fc bdbd 	b.w	80215f4 <put_memory>
 8024a7a:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8024a7e:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 8024a82:	f7fd ff13 	bl	80228ac <rmw_uros_epoch_nanos>
 8024a86:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8024a8a:	2305      	movs	r3, #5
 8024a8c:	e942 0102 	strd	r0, r1, [r2, #-8]
 8024a90:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8024a94:	b014      	add	sp, #80	@ 0x50
 8024a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024a9a:	bf00      	nop
 8024a9c:	200149a4 	.word	0x200149a4
 8024aa0:	20014994 	.word	0x20014994

08024aa4 <on_request>:
 8024aa4:	4824      	ldr	r0, [pc, #144]	@ (8024b38 <on_request+0x94>)
 8024aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024aaa:	6800      	ldr	r0, [r0, #0]
 8024aac:	b094      	sub	sp, #80	@ 0x50
 8024aae:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8024ab0:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8024ab4:	9113      	str	r1, [sp, #76]	@ 0x4c
 8024ab6:	2800      	cmp	r0, #0
 8024ab8:	d03b      	beq.n	8024b32 <on_request+0x8e>
 8024aba:	461d      	mov	r5, r3
 8024abc:	e001      	b.n	8024ac2 <on_request+0x1e>
 8024abe:	6840      	ldr	r0, [r0, #4]
 8024ac0:	b3b8      	cbz	r0, 8024b32 <on_request+0x8e>
 8024ac2:	6884      	ldr	r4, [r0, #8]
 8024ac4:	8b21      	ldrh	r1, [r4, #24]
 8024ac6:	4291      	cmp	r1, r2
 8024ac8:	d1f9      	bne.n	8024abe <on_request+0x1a>
 8024aca:	2248      	movs	r2, #72	@ 0x48
 8024acc:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8024ad0:	4668      	mov	r0, sp
 8024ad2:	f000 ffa6 	bl	8025a22 <memcpy>
 8024ad6:	f104 0320 	add.w	r3, r4, #32
 8024ada:	4620      	mov	r0, r4
 8024adc:	cb0c      	ldmia	r3, {r2, r3}
 8024ade:	f7f5 f9c3 	bl	8019e68 <rmw_uxrce_get_static_input_buffer_for_entity>
 8024ae2:	4680      	mov	r8, r0
 8024ae4:	b328      	cbz	r0, 8024b32 <on_request+0x8e>
 8024ae6:	4630      	mov	r0, r6
 8024ae8:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8024aec:	463a      	mov	r2, r7
 8024aee:	f106 0110 	add.w	r1, r6, #16
 8024af2:	f7fd fffd 	bl	8022af0 <ucdr_deserialize_array_uint8_t>
 8024af6:	b930      	cbnz	r0, 8024b06 <on_request+0x62>
 8024af8:	4641      	mov	r1, r8
 8024afa:	4810      	ldr	r0, [pc, #64]	@ (8024b3c <on_request+0x98>)
 8024afc:	b014      	add	sp, #80	@ 0x50
 8024afe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024b02:	f7fc bd77 	b.w	80215f4 <put_memory>
 8024b06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8024b08:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 8024b0c:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 8024b10:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 8024b14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8024b18:	e895 0003 	ldmia.w	r5, {r0, r1}
 8024b1c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8024b20:	f7fd fec4 	bl	80228ac <rmw_uros_epoch_nanos>
 8024b24:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 8024b28:	2303      	movs	r3, #3
 8024b2a:	e942 0102 	strd	r0, r1, [r2, #-8]
 8024b2e:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 8024b32:	b014      	add	sp, #80	@ 0x50
 8024b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024b38:	20014974 	.word	0x20014974
 8024b3c:	20014994 	.word	0x20014994

08024b40 <on_reply>:
 8024b40:	4822      	ldr	r0, [pc, #136]	@ (8024bcc <on_reply+0x8c>)
 8024b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024b46:	6800      	ldr	r0, [r0, #0]
 8024b48:	b094      	sub	sp, #80	@ 0x50
 8024b4a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8024b4c:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8024b50:	9113      	str	r1, [sp, #76]	@ 0x4c
 8024b52:	b3b8      	cbz	r0, 8024bc4 <on_reply+0x84>
 8024b54:	461d      	mov	r5, r3
 8024b56:	e001      	b.n	8024b5c <on_reply+0x1c>
 8024b58:	6840      	ldr	r0, [r0, #4]
 8024b5a:	b398      	cbz	r0, 8024bc4 <on_reply+0x84>
 8024b5c:	6884      	ldr	r4, [r0, #8]
 8024b5e:	8b21      	ldrh	r1, [r4, #24]
 8024b60:	4291      	cmp	r1, r2
 8024b62:	d1f9      	bne.n	8024b58 <on_reply+0x18>
 8024b64:	2248      	movs	r2, #72	@ 0x48
 8024b66:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8024b6a:	4668      	mov	r0, sp
 8024b6c:	f000 ff59 	bl	8025a22 <memcpy>
 8024b70:	f104 0320 	add.w	r3, r4, #32
 8024b74:	4620      	mov	r0, r4
 8024b76:	cb0c      	ldmia	r3, {r2, r3}
 8024b78:	f7f5 f976 	bl	8019e68 <rmw_uxrce_get_static_input_buffer_for_entity>
 8024b7c:	4680      	mov	r8, r0
 8024b7e:	b308      	cbz	r0, 8024bc4 <on_reply+0x84>
 8024b80:	4630      	mov	r0, r6
 8024b82:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8024b86:	463a      	mov	r2, r7
 8024b88:	f106 0110 	add.w	r1, r6, #16
 8024b8c:	f7fd ffb0 	bl	8022af0 <ucdr_deserialize_array_uint8_t>
 8024b90:	b930      	cbnz	r0, 8024ba0 <on_reply+0x60>
 8024b92:	4641      	mov	r1, r8
 8024b94:	480e      	ldr	r0, [pc, #56]	@ (8024bd0 <on_reply+0x90>)
 8024b96:	b014      	add	sp, #80	@ 0x50
 8024b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024b9c:	f7fc bd2a 	b.w	80215f4 <put_memory>
 8024ba0:	2200      	movs	r2, #0
 8024ba2:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 8024ba6:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 8024baa:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 8024bae:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 8024bb2:	f7fd fe7b 	bl	80228ac <rmw_uros_epoch_nanos>
 8024bb6:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 8024bba:	2304      	movs	r3, #4
 8024bbc:	e942 0102 	strd	r0, r1, [r2, #-8]
 8024bc0:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 8024bc4:	b014      	add	sp, #80	@ 0x50
 8024bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024bca:	bf00      	nop
 8024bcc:	20010088 	.word	0x20010088
 8024bd0:	20014994 	.word	0x20014994

08024bd4 <rmw_create_guard_condition>:
 8024bd4:	b538      	push	{r3, r4, r5, lr}
 8024bd6:	4605      	mov	r5, r0
 8024bd8:	4808      	ldr	r0, [pc, #32]	@ (8024bfc <rmw_create_guard_condition+0x28>)
 8024bda:	f7fc fcfb 	bl	80215d4 <get_memory>
 8024bde:	4603      	mov	r3, r0
 8024be0:	b148      	cbz	r0, 8024bf6 <rmw_create_guard_condition+0x22>
 8024be2:	6884      	ldr	r4, [r0, #8]
 8024be4:	2300      	movs	r3, #0
 8024be6:	61e5      	str	r5, [r4, #28]
 8024be8:	7423      	strb	r3, [r4, #16]
 8024bea:	f7fc fd5b 	bl	80216a4 <rmw_get_implementation_identifier>
 8024bee:	f104 0314 	add.w	r3, r4, #20
 8024bf2:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8024bf6:	4618      	mov	r0, r3
 8024bf8:	bd38      	pop	{r3, r4, r5, pc}
 8024bfa:	bf00      	nop
 8024bfc:	20014934 	.word	0x20014934

08024c00 <rmw_destroy_guard_condition>:
 8024c00:	b508      	push	{r3, lr}
 8024c02:	4b08      	ldr	r3, [pc, #32]	@ (8024c24 <rmw_destroy_guard_condition+0x24>)
 8024c04:	6819      	ldr	r1, [r3, #0]
 8024c06:	b911      	cbnz	r1, 8024c0e <rmw_destroy_guard_condition+0xe>
 8024c08:	e00a      	b.n	8024c20 <rmw_destroy_guard_condition+0x20>
 8024c0a:	6849      	ldr	r1, [r1, #4]
 8024c0c:	b141      	cbz	r1, 8024c20 <rmw_destroy_guard_condition+0x20>
 8024c0e:	688b      	ldr	r3, [r1, #8]
 8024c10:	3314      	adds	r3, #20
 8024c12:	4298      	cmp	r0, r3
 8024c14:	d1f9      	bne.n	8024c0a <rmw_destroy_guard_condition+0xa>
 8024c16:	4803      	ldr	r0, [pc, #12]	@ (8024c24 <rmw_destroy_guard_condition+0x24>)
 8024c18:	f7fc fcec 	bl	80215f4 <put_memory>
 8024c1c:	2000      	movs	r0, #0
 8024c1e:	bd08      	pop	{r3, pc}
 8024c20:	2001      	movs	r0, #1
 8024c22:	bd08      	pop	{r3, pc}
 8024c24:	20014934 	.word	0x20014934

08024c28 <rosidl_runtime_c__String__init>:
 8024c28:	b510      	push	{r4, lr}
 8024c2a:	4604      	mov	r4, r0
 8024c2c:	b086      	sub	sp, #24
 8024c2e:	b170      	cbz	r0, 8024c4e <rosidl_runtime_c__String__init+0x26>
 8024c30:	a801      	add	r0, sp, #4
 8024c32:	f7f4 fcd1 	bl	80195d8 <rcutils_get_default_allocator>
 8024c36:	9b01      	ldr	r3, [sp, #4]
 8024c38:	9905      	ldr	r1, [sp, #20]
 8024c3a:	2001      	movs	r0, #1
 8024c3c:	4798      	blx	r3
 8024c3e:	6020      	str	r0, [r4, #0]
 8024c40:	b128      	cbz	r0, 8024c4e <rosidl_runtime_c__String__init+0x26>
 8024c42:	2100      	movs	r1, #0
 8024c44:	2201      	movs	r2, #1
 8024c46:	7001      	strb	r1, [r0, #0]
 8024c48:	4610      	mov	r0, r2
 8024c4a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8024c4e:	b006      	add	sp, #24
 8024c50:	bd10      	pop	{r4, pc}
 8024c52:	bf00      	nop

08024c54 <rosidl_runtime_c__String__fini>:
 8024c54:	b320      	cbz	r0, 8024ca0 <rosidl_runtime_c__String__fini+0x4c>
 8024c56:	6803      	ldr	r3, [r0, #0]
 8024c58:	b510      	push	{r4, lr}
 8024c5a:	4604      	mov	r4, r0
 8024c5c:	b086      	sub	sp, #24
 8024c5e:	b173      	cbz	r3, 8024c7e <rosidl_runtime_c__String__fini+0x2a>
 8024c60:	6883      	ldr	r3, [r0, #8]
 8024c62:	b1f3      	cbz	r3, 8024ca2 <rosidl_runtime_c__String__fini+0x4e>
 8024c64:	a801      	add	r0, sp, #4
 8024c66:	f7f4 fcb7 	bl	80195d8 <rcutils_get_default_allocator>
 8024c6a:	9b02      	ldr	r3, [sp, #8]
 8024c6c:	9905      	ldr	r1, [sp, #20]
 8024c6e:	6820      	ldr	r0, [r4, #0]
 8024c70:	4798      	blx	r3
 8024c72:	2300      	movs	r3, #0
 8024c74:	e9c4 3300 	strd	r3, r3, [r4]
 8024c78:	60a3      	str	r3, [r4, #8]
 8024c7a:	b006      	add	sp, #24
 8024c7c:	bd10      	pop	{r4, pc}
 8024c7e:	6843      	ldr	r3, [r0, #4]
 8024c80:	b9db      	cbnz	r3, 8024cba <rosidl_runtime_c__String__fini+0x66>
 8024c82:	6883      	ldr	r3, [r0, #8]
 8024c84:	2b00      	cmp	r3, #0
 8024c86:	d0f8      	beq.n	8024c7a <rosidl_runtime_c__String__fini+0x26>
 8024c88:	4b12      	ldr	r3, [pc, #72]	@ (8024cd4 <rosidl_runtime_c__String__fini+0x80>)
 8024c8a:	2251      	movs	r2, #81	@ 0x51
 8024c8c:	2101      	movs	r1, #1
 8024c8e:	4812      	ldr	r0, [pc, #72]	@ (8024cd8 <rosidl_runtime_c__String__fini+0x84>)
 8024c90:	681b      	ldr	r3, [r3, #0]
 8024c92:	68db      	ldr	r3, [r3, #12]
 8024c94:	f000 fc0a 	bl	80254ac <fwrite>
 8024c98:	f04f 30ff 	mov.w	r0, #4294967295
 8024c9c:	f000 f842 	bl	8024d24 <exit>
 8024ca0:	4770      	bx	lr
 8024ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8024cd4 <rosidl_runtime_c__String__fini+0x80>)
 8024ca4:	224c      	movs	r2, #76	@ 0x4c
 8024ca6:	2101      	movs	r1, #1
 8024ca8:	480c      	ldr	r0, [pc, #48]	@ (8024cdc <rosidl_runtime_c__String__fini+0x88>)
 8024caa:	681b      	ldr	r3, [r3, #0]
 8024cac:	68db      	ldr	r3, [r3, #12]
 8024cae:	f000 fbfd 	bl	80254ac <fwrite>
 8024cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8024cb6:	f000 f835 	bl	8024d24 <exit>
 8024cba:	4b06      	ldr	r3, [pc, #24]	@ (8024cd4 <rosidl_runtime_c__String__fini+0x80>)
 8024cbc:	224e      	movs	r2, #78	@ 0x4e
 8024cbe:	2101      	movs	r1, #1
 8024cc0:	4807      	ldr	r0, [pc, #28]	@ (8024ce0 <rosidl_runtime_c__String__fini+0x8c>)
 8024cc2:	681b      	ldr	r3, [r3, #0]
 8024cc4:	68db      	ldr	r3, [r3, #12]
 8024cc6:	f000 fbf1 	bl	80254ac <fwrite>
 8024cca:	f04f 30ff 	mov.w	r0, #4294967295
 8024cce:	f000 f829 	bl	8024d24 <exit>
 8024cd2:	bf00      	nop
 8024cd4:	20000168 	.word	0x20000168
 8024cd8:	0802aae4 	.word	0x0802aae4
 8024cdc:	0802aa44 	.word	0x0802aa44
 8024ce0:	0802aa94 	.word	0x0802aa94

08024ce4 <atoi>:
 8024ce4:	220a      	movs	r2, #10
 8024ce6:	2100      	movs	r1, #0
 8024ce8:	f000 ba50 	b.w	802518c <strtol>

08024cec <calloc>:
 8024cec:	4b02      	ldr	r3, [pc, #8]	@ (8024cf8 <calloc+0xc>)
 8024cee:	460a      	mov	r2, r1
 8024cf0:	4601      	mov	r1, r0
 8024cf2:	6818      	ldr	r0, [r3, #0]
 8024cf4:	f000 b802 	b.w	8024cfc <_calloc_r>
 8024cf8:	20000168 	.word	0x20000168

08024cfc <_calloc_r>:
 8024cfc:	b570      	push	{r4, r5, r6, lr}
 8024cfe:	fba1 5402 	umull	r5, r4, r1, r2
 8024d02:	b934      	cbnz	r4, 8024d12 <_calloc_r+0x16>
 8024d04:	4629      	mov	r1, r5
 8024d06:	f000 f899 	bl	8024e3c <_malloc_r>
 8024d0a:	4606      	mov	r6, r0
 8024d0c:	b928      	cbnz	r0, 8024d1a <_calloc_r+0x1e>
 8024d0e:	4630      	mov	r0, r6
 8024d10:	bd70      	pop	{r4, r5, r6, pc}
 8024d12:	220c      	movs	r2, #12
 8024d14:	6002      	str	r2, [r0, #0]
 8024d16:	2600      	movs	r6, #0
 8024d18:	e7f9      	b.n	8024d0e <_calloc_r+0x12>
 8024d1a:	462a      	mov	r2, r5
 8024d1c:	4621      	mov	r1, r4
 8024d1e:	f000 fd59 	bl	80257d4 <memset>
 8024d22:	e7f4      	b.n	8024d0e <_calloc_r+0x12>

08024d24 <exit>:
 8024d24:	b508      	push	{r3, lr}
 8024d26:	4b06      	ldr	r3, [pc, #24]	@ (8024d40 <exit+0x1c>)
 8024d28:	4604      	mov	r4, r0
 8024d2a:	b113      	cbz	r3, 8024d32 <exit+0xe>
 8024d2c:	2100      	movs	r1, #0
 8024d2e:	f3af 8000 	nop.w
 8024d32:	4b04      	ldr	r3, [pc, #16]	@ (8024d44 <exit+0x20>)
 8024d34:	681b      	ldr	r3, [r3, #0]
 8024d36:	b103      	cbz	r3, 8024d3a <exit+0x16>
 8024d38:	4798      	blx	r3
 8024d3a:	4620      	mov	r0, r4
 8024d3c:	f7dc fb94 	bl	8001468 <_exit>
 8024d40:	00000000 	.word	0x00000000
 8024d44:	20014c98 	.word	0x20014c98

08024d48 <getenv>:
 8024d48:	b507      	push	{r0, r1, r2, lr}
 8024d4a:	4b04      	ldr	r3, [pc, #16]	@ (8024d5c <getenv+0x14>)
 8024d4c:	4601      	mov	r1, r0
 8024d4e:	aa01      	add	r2, sp, #4
 8024d50:	6818      	ldr	r0, [r3, #0]
 8024d52:	f000 f805 	bl	8024d60 <_findenv_r>
 8024d56:	b003      	add	sp, #12
 8024d58:	f85d fb04 	ldr.w	pc, [sp], #4
 8024d5c:	20000168 	.word	0x20000168

08024d60 <_findenv_r>:
 8024d60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d64:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8024dd4 <_findenv_r+0x74>
 8024d68:	4606      	mov	r6, r0
 8024d6a:	4689      	mov	r9, r1
 8024d6c:	4617      	mov	r7, r2
 8024d6e:	f000 fe85 	bl	8025a7c <__env_lock>
 8024d72:	f8da 4000 	ldr.w	r4, [sl]
 8024d76:	b134      	cbz	r4, 8024d86 <_findenv_r+0x26>
 8024d78:	464b      	mov	r3, r9
 8024d7a:	4698      	mov	r8, r3
 8024d7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024d80:	b13a      	cbz	r2, 8024d92 <_findenv_r+0x32>
 8024d82:	2a3d      	cmp	r2, #61	@ 0x3d
 8024d84:	d1f9      	bne.n	8024d7a <_findenv_r+0x1a>
 8024d86:	4630      	mov	r0, r6
 8024d88:	f000 fe7e 	bl	8025a88 <__env_unlock>
 8024d8c:	2000      	movs	r0, #0
 8024d8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024d92:	eba8 0809 	sub.w	r8, r8, r9
 8024d96:	46a3      	mov	fp, r4
 8024d98:	f854 0b04 	ldr.w	r0, [r4], #4
 8024d9c:	2800      	cmp	r0, #0
 8024d9e:	d0f2      	beq.n	8024d86 <_findenv_r+0x26>
 8024da0:	4642      	mov	r2, r8
 8024da2:	4649      	mov	r1, r9
 8024da4:	f000 fd2b 	bl	80257fe <strncmp>
 8024da8:	2800      	cmp	r0, #0
 8024daa:	d1f4      	bne.n	8024d96 <_findenv_r+0x36>
 8024dac:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8024db0:	eb03 0508 	add.w	r5, r3, r8
 8024db4:	f813 3008 	ldrb.w	r3, [r3, r8]
 8024db8:	2b3d      	cmp	r3, #61	@ 0x3d
 8024dba:	d1ec      	bne.n	8024d96 <_findenv_r+0x36>
 8024dbc:	f8da 3000 	ldr.w	r3, [sl]
 8024dc0:	ebab 0303 	sub.w	r3, fp, r3
 8024dc4:	109b      	asrs	r3, r3, #2
 8024dc6:	4630      	mov	r0, r6
 8024dc8:	603b      	str	r3, [r7, #0]
 8024dca:	f000 fe5d 	bl	8025a88 <__env_unlock>
 8024dce:	1c68      	adds	r0, r5, #1
 8024dd0:	e7dd      	b.n	8024d8e <_findenv_r+0x2e>
 8024dd2:	bf00      	nop
 8024dd4:	20000004 	.word	0x20000004

08024dd8 <malloc>:
 8024dd8:	4b02      	ldr	r3, [pc, #8]	@ (8024de4 <malloc+0xc>)
 8024dda:	4601      	mov	r1, r0
 8024ddc:	6818      	ldr	r0, [r3, #0]
 8024dde:	f000 b82d 	b.w	8024e3c <_malloc_r>
 8024de2:	bf00      	nop
 8024de4:	20000168 	.word	0x20000168

08024de8 <free>:
 8024de8:	4b02      	ldr	r3, [pc, #8]	@ (8024df4 <free+0xc>)
 8024dea:	4601      	mov	r1, r0
 8024dec:	6818      	ldr	r0, [r3, #0]
 8024dee:	f000 be51 	b.w	8025a94 <_free_r>
 8024df2:	bf00      	nop
 8024df4:	20000168 	.word	0x20000168

08024df8 <sbrk_aligned>:
 8024df8:	b570      	push	{r4, r5, r6, lr}
 8024dfa:	4e0f      	ldr	r6, [pc, #60]	@ (8024e38 <sbrk_aligned+0x40>)
 8024dfc:	460c      	mov	r4, r1
 8024dfe:	6831      	ldr	r1, [r6, #0]
 8024e00:	4605      	mov	r5, r0
 8024e02:	b911      	cbnz	r1, 8024e0a <sbrk_aligned+0x12>
 8024e04:	f000 fdb6 	bl	8025974 <_sbrk_r>
 8024e08:	6030      	str	r0, [r6, #0]
 8024e0a:	4621      	mov	r1, r4
 8024e0c:	4628      	mov	r0, r5
 8024e0e:	f000 fdb1 	bl	8025974 <_sbrk_r>
 8024e12:	1c43      	adds	r3, r0, #1
 8024e14:	d103      	bne.n	8024e1e <sbrk_aligned+0x26>
 8024e16:	f04f 34ff 	mov.w	r4, #4294967295
 8024e1a:	4620      	mov	r0, r4
 8024e1c:	bd70      	pop	{r4, r5, r6, pc}
 8024e1e:	1cc4      	adds	r4, r0, #3
 8024e20:	f024 0403 	bic.w	r4, r4, #3
 8024e24:	42a0      	cmp	r0, r4
 8024e26:	d0f8      	beq.n	8024e1a <sbrk_aligned+0x22>
 8024e28:	1a21      	subs	r1, r4, r0
 8024e2a:	4628      	mov	r0, r5
 8024e2c:	f000 fda2 	bl	8025974 <_sbrk_r>
 8024e30:	3001      	adds	r0, #1
 8024e32:	d1f2      	bne.n	8024e1a <sbrk_aligned+0x22>
 8024e34:	e7ef      	b.n	8024e16 <sbrk_aligned+0x1e>
 8024e36:	bf00      	nop
 8024e38:	20014b58 	.word	0x20014b58

08024e3c <_malloc_r>:
 8024e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024e40:	1ccd      	adds	r5, r1, #3
 8024e42:	f025 0503 	bic.w	r5, r5, #3
 8024e46:	3508      	adds	r5, #8
 8024e48:	2d0c      	cmp	r5, #12
 8024e4a:	bf38      	it	cc
 8024e4c:	250c      	movcc	r5, #12
 8024e4e:	2d00      	cmp	r5, #0
 8024e50:	4606      	mov	r6, r0
 8024e52:	db01      	blt.n	8024e58 <_malloc_r+0x1c>
 8024e54:	42a9      	cmp	r1, r5
 8024e56:	d904      	bls.n	8024e62 <_malloc_r+0x26>
 8024e58:	230c      	movs	r3, #12
 8024e5a:	6033      	str	r3, [r6, #0]
 8024e5c:	2000      	movs	r0, #0
 8024e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024e62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8024f38 <_malloc_r+0xfc>
 8024e66:	f000 f869 	bl	8024f3c <__malloc_lock>
 8024e6a:	f8d8 3000 	ldr.w	r3, [r8]
 8024e6e:	461c      	mov	r4, r3
 8024e70:	bb44      	cbnz	r4, 8024ec4 <_malloc_r+0x88>
 8024e72:	4629      	mov	r1, r5
 8024e74:	4630      	mov	r0, r6
 8024e76:	f7ff ffbf 	bl	8024df8 <sbrk_aligned>
 8024e7a:	1c43      	adds	r3, r0, #1
 8024e7c:	4604      	mov	r4, r0
 8024e7e:	d158      	bne.n	8024f32 <_malloc_r+0xf6>
 8024e80:	f8d8 4000 	ldr.w	r4, [r8]
 8024e84:	4627      	mov	r7, r4
 8024e86:	2f00      	cmp	r7, #0
 8024e88:	d143      	bne.n	8024f12 <_malloc_r+0xd6>
 8024e8a:	2c00      	cmp	r4, #0
 8024e8c:	d04b      	beq.n	8024f26 <_malloc_r+0xea>
 8024e8e:	6823      	ldr	r3, [r4, #0]
 8024e90:	4639      	mov	r1, r7
 8024e92:	4630      	mov	r0, r6
 8024e94:	eb04 0903 	add.w	r9, r4, r3
 8024e98:	f000 fd6c 	bl	8025974 <_sbrk_r>
 8024e9c:	4581      	cmp	r9, r0
 8024e9e:	d142      	bne.n	8024f26 <_malloc_r+0xea>
 8024ea0:	6821      	ldr	r1, [r4, #0]
 8024ea2:	1a6d      	subs	r5, r5, r1
 8024ea4:	4629      	mov	r1, r5
 8024ea6:	4630      	mov	r0, r6
 8024ea8:	f7ff ffa6 	bl	8024df8 <sbrk_aligned>
 8024eac:	3001      	adds	r0, #1
 8024eae:	d03a      	beq.n	8024f26 <_malloc_r+0xea>
 8024eb0:	6823      	ldr	r3, [r4, #0]
 8024eb2:	442b      	add	r3, r5
 8024eb4:	6023      	str	r3, [r4, #0]
 8024eb6:	f8d8 3000 	ldr.w	r3, [r8]
 8024eba:	685a      	ldr	r2, [r3, #4]
 8024ebc:	bb62      	cbnz	r2, 8024f18 <_malloc_r+0xdc>
 8024ebe:	f8c8 7000 	str.w	r7, [r8]
 8024ec2:	e00f      	b.n	8024ee4 <_malloc_r+0xa8>
 8024ec4:	6822      	ldr	r2, [r4, #0]
 8024ec6:	1b52      	subs	r2, r2, r5
 8024ec8:	d420      	bmi.n	8024f0c <_malloc_r+0xd0>
 8024eca:	2a0b      	cmp	r2, #11
 8024ecc:	d917      	bls.n	8024efe <_malloc_r+0xc2>
 8024ece:	1961      	adds	r1, r4, r5
 8024ed0:	42a3      	cmp	r3, r4
 8024ed2:	6025      	str	r5, [r4, #0]
 8024ed4:	bf18      	it	ne
 8024ed6:	6059      	strne	r1, [r3, #4]
 8024ed8:	6863      	ldr	r3, [r4, #4]
 8024eda:	bf08      	it	eq
 8024edc:	f8c8 1000 	streq.w	r1, [r8]
 8024ee0:	5162      	str	r2, [r4, r5]
 8024ee2:	604b      	str	r3, [r1, #4]
 8024ee4:	4630      	mov	r0, r6
 8024ee6:	f000 f82f 	bl	8024f48 <__malloc_unlock>
 8024eea:	f104 000b 	add.w	r0, r4, #11
 8024eee:	1d23      	adds	r3, r4, #4
 8024ef0:	f020 0007 	bic.w	r0, r0, #7
 8024ef4:	1ac2      	subs	r2, r0, r3
 8024ef6:	bf1c      	itt	ne
 8024ef8:	1a1b      	subne	r3, r3, r0
 8024efa:	50a3      	strne	r3, [r4, r2]
 8024efc:	e7af      	b.n	8024e5e <_malloc_r+0x22>
 8024efe:	6862      	ldr	r2, [r4, #4]
 8024f00:	42a3      	cmp	r3, r4
 8024f02:	bf0c      	ite	eq
 8024f04:	f8c8 2000 	streq.w	r2, [r8]
 8024f08:	605a      	strne	r2, [r3, #4]
 8024f0a:	e7eb      	b.n	8024ee4 <_malloc_r+0xa8>
 8024f0c:	4623      	mov	r3, r4
 8024f0e:	6864      	ldr	r4, [r4, #4]
 8024f10:	e7ae      	b.n	8024e70 <_malloc_r+0x34>
 8024f12:	463c      	mov	r4, r7
 8024f14:	687f      	ldr	r7, [r7, #4]
 8024f16:	e7b6      	b.n	8024e86 <_malloc_r+0x4a>
 8024f18:	461a      	mov	r2, r3
 8024f1a:	685b      	ldr	r3, [r3, #4]
 8024f1c:	42a3      	cmp	r3, r4
 8024f1e:	d1fb      	bne.n	8024f18 <_malloc_r+0xdc>
 8024f20:	2300      	movs	r3, #0
 8024f22:	6053      	str	r3, [r2, #4]
 8024f24:	e7de      	b.n	8024ee4 <_malloc_r+0xa8>
 8024f26:	230c      	movs	r3, #12
 8024f28:	6033      	str	r3, [r6, #0]
 8024f2a:	4630      	mov	r0, r6
 8024f2c:	f000 f80c 	bl	8024f48 <__malloc_unlock>
 8024f30:	e794      	b.n	8024e5c <_malloc_r+0x20>
 8024f32:	6005      	str	r5, [r0, #0]
 8024f34:	e7d6      	b.n	8024ee4 <_malloc_r+0xa8>
 8024f36:	bf00      	nop
 8024f38:	20014b5c 	.word	0x20014b5c

08024f3c <__malloc_lock>:
 8024f3c:	4801      	ldr	r0, [pc, #4]	@ (8024f44 <__malloc_lock+0x8>)
 8024f3e:	f000 bd66 	b.w	8025a0e <__retarget_lock_acquire_recursive>
 8024f42:	bf00      	nop
 8024f44:	20014ca1 	.word	0x20014ca1

08024f48 <__malloc_unlock>:
 8024f48:	4801      	ldr	r0, [pc, #4]	@ (8024f50 <__malloc_unlock+0x8>)
 8024f4a:	f000 bd61 	b.w	8025a10 <__retarget_lock_release_recursive>
 8024f4e:	bf00      	nop
 8024f50:	20014ca1 	.word	0x20014ca1

08024f54 <srand>:
 8024f54:	b538      	push	{r3, r4, r5, lr}
 8024f56:	4b10      	ldr	r3, [pc, #64]	@ (8024f98 <srand+0x44>)
 8024f58:	681d      	ldr	r5, [r3, #0]
 8024f5a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8024f5c:	4604      	mov	r4, r0
 8024f5e:	b9b3      	cbnz	r3, 8024f8e <srand+0x3a>
 8024f60:	2018      	movs	r0, #24
 8024f62:	f7ff ff39 	bl	8024dd8 <malloc>
 8024f66:	4602      	mov	r2, r0
 8024f68:	6328      	str	r0, [r5, #48]	@ 0x30
 8024f6a:	b920      	cbnz	r0, 8024f76 <srand+0x22>
 8024f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8024f9c <srand+0x48>)
 8024f6e:	480c      	ldr	r0, [pc, #48]	@ (8024fa0 <srand+0x4c>)
 8024f70:	2146      	movs	r1, #70	@ 0x46
 8024f72:	f000 fd65 	bl	8025a40 <__assert_func>
 8024f76:	490b      	ldr	r1, [pc, #44]	@ (8024fa4 <srand+0x50>)
 8024f78:	4b0b      	ldr	r3, [pc, #44]	@ (8024fa8 <srand+0x54>)
 8024f7a:	e9c0 1300 	strd	r1, r3, [r0]
 8024f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8024fac <srand+0x58>)
 8024f80:	6083      	str	r3, [r0, #8]
 8024f82:	230b      	movs	r3, #11
 8024f84:	8183      	strh	r3, [r0, #12]
 8024f86:	2100      	movs	r1, #0
 8024f88:	2001      	movs	r0, #1
 8024f8a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8024f8e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8024f90:	2200      	movs	r2, #0
 8024f92:	611c      	str	r4, [r3, #16]
 8024f94:	615a      	str	r2, [r3, #20]
 8024f96:	bd38      	pop	{r3, r4, r5, pc}
 8024f98:	20000168 	.word	0x20000168
 8024f9c:	0802af44 	.word	0x0802af44
 8024fa0:	0802af5b 	.word	0x0802af5b
 8024fa4:	abcd330e 	.word	0xabcd330e
 8024fa8:	e66d1234 	.word	0xe66d1234
 8024fac:	0005deec 	.word	0x0005deec

08024fb0 <rand>:
 8024fb0:	4b16      	ldr	r3, [pc, #88]	@ (802500c <rand+0x5c>)
 8024fb2:	b510      	push	{r4, lr}
 8024fb4:	681c      	ldr	r4, [r3, #0]
 8024fb6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8024fb8:	b9b3      	cbnz	r3, 8024fe8 <rand+0x38>
 8024fba:	2018      	movs	r0, #24
 8024fbc:	f7ff ff0c 	bl	8024dd8 <malloc>
 8024fc0:	4602      	mov	r2, r0
 8024fc2:	6320      	str	r0, [r4, #48]	@ 0x30
 8024fc4:	b920      	cbnz	r0, 8024fd0 <rand+0x20>
 8024fc6:	4b12      	ldr	r3, [pc, #72]	@ (8025010 <rand+0x60>)
 8024fc8:	4812      	ldr	r0, [pc, #72]	@ (8025014 <rand+0x64>)
 8024fca:	2152      	movs	r1, #82	@ 0x52
 8024fcc:	f000 fd38 	bl	8025a40 <__assert_func>
 8024fd0:	4911      	ldr	r1, [pc, #68]	@ (8025018 <rand+0x68>)
 8024fd2:	4b12      	ldr	r3, [pc, #72]	@ (802501c <rand+0x6c>)
 8024fd4:	e9c0 1300 	strd	r1, r3, [r0]
 8024fd8:	4b11      	ldr	r3, [pc, #68]	@ (8025020 <rand+0x70>)
 8024fda:	6083      	str	r3, [r0, #8]
 8024fdc:	230b      	movs	r3, #11
 8024fde:	8183      	strh	r3, [r0, #12]
 8024fe0:	2100      	movs	r1, #0
 8024fe2:	2001      	movs	r0, #1
 8024fe4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8024fe8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8024fea:	480e      	ldr	r0, [pc, #56]	@ (8025024 <rand+0x74>)
 8024fec:	690b      	ldr	r3, [r1, #16]
 8024fee:	694c      	ldr	r4, [r1, #20]
 8024ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8025028 <rand+0x78>)
 8024ff2:	4358      	muls	r0, r3
 8024ff4:	fb02 0004 	mla	r0, r2, r4, r0
 8024ff8:	fba3 3202 	umull	r3, r2, r3, r2
 8024ffc:	3301      	adds	r3, #1
 8024ffe:	eb40 0002 	adc.w	r0, r0, r2
 8025002:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8025006:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 802500a:	bd10      	pop	{r4, pc}
 802500c:	20000168 	.word	0x20000168
 8025010:	0802af44 	.word	0x0802af44
 8025014:	0802af5b 	.word	0x0802af5b
 8025018:	abcd330e 	.word	0xabcd330e
 802501c:	e66d1234 	.word	0xe66d1234
 8025020:	0005deec 	.word	0x0005deec
 8025024:	5851f42d 	.word	0x5851f42d
 8025028:	4c957f2d 	.word	0x4c957f2d

0802502c <realloc>:
 802502c:	4b02      	ldr	r3, [pc, #8]	@ (8025038 <realloc+0xc>)
 802502e:	460a      	mov	r2, r1
 8025030:	4601      	mov	r1, r0
 8025032:	6818      	ldr	r0, [r3, #0]
 8025034:	f000 b802 	b.w	802503c <_realloc_r>
 8025038:	20000168 	.word	0x20000168

0802503c <_realloc_r>:
 802503c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025040:	4607      	mov	r7, r0
 8025042:	4614      	mov	r4, r2
 8025044:	460d      	mov	r5, r1
 8025046:	b921      	cbnz	r1, 8025052 <_realloc_r+0x16>
 8025048:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802504c:	4611      	mov	r1, r2
 802504e:	f7ff bef5 	b.w	8024e3c <_malloc_r>
 8025052:	b92a      	cbnz	r2, 8025060 <_realloc_r+0x24>
 8025054:	f000 fd1e 	bl	8025a94 <_free_r>
 8025058:	4625      	mov	r5, r4
 802505a:	4628      	mov	r0, r5
 802505c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025060:	f000 fd62 	bl	8025b28 <_malloc_usable_size_r>
 8025064:	4284      	cmp	r4, r0
 8025066:	4606      	mov	r6, r0
 8025068:	d802      	bhi.n	8025070 <_realloc_r+0x34>
 802506a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802506e:	d8f4      	bhi.n	802505a <_realloc_r+0x1e>
 8025070:	4621      	mov	r1, r4
 8025072:	4638      	mov	r0, r7
 8025074:	f7ff fee2 	bl	8024e3c <_malloc_r>
 8025078:	4680      	mov	r8, r0
 802507a:	b908      	cbnz	r0, 8025080 <_realloc_r+0x44>
 802507c:	4645      	mov	r5, r8
 802507e:	e7ec      	b.n	802505a <_realloc_r+0x1e>
 8025080:	42b4      	cmp	r4, r6
 8025082:	4622      	mov	r2, r4
 8025084:	4629      	mov	r1, r5
 8025086:	bf28      	it	cs
 8025088:	4632      	movcs	r2, r6
 802508a:	f000 fcca 	bl	8025a22 <memcpy>
 802508e:	4629      	mov	r1, r5
 8025090:	4638      	mov	r0, r7
 8025092:	f000 fcff 	bl	8025a94 <_free_r>
 8025096:	e7f1      	b.n	802507c <_realloc_r+0x40>

08025098 <_strtol_l.isra.0>:
 8025098:	2b24      	cmp	r3, #36	@ 0x24
 802509a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802509e:	4686      	mov	lr, r0
 80250a0:	4690      	mov	r8, r2
 80250a2:	d801      	bhi.n	80250a8 <_strtol_l.isra.0+0x10>
 80250a4:	2b01      	cmp	r3, #1
 80250a6:	d106      	bne.n	80250b6 <_strtol_l.isra.0+0x1e>
 80250a8:	f000 fc86 	bl	80259b8 <__errno>
 80250ac:	2316      	movs	r3, #22
 80250ae:	6003      	str	r3, [r0, #0]
 80250b0:	2000      	movs	r0, #0
 80250b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80250b6:	4834      	ldr	r0, [pc, #208]	@ (8025188 <_strtol_l.isra.0+0xf0>)
 80250b8:	460d      	mov	r5, r1
 80250ba:	462a      	mov	r2, r5
 80250bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80250c0:	5d06      	ldrb	r6, [r0, r4]
 80250c2:	f016 0608 	ands.w	r6, r6, #8
 80250c6:	d1f8      	bne.n	80250ba <_strtol_l.isra.0+0x22>
 80250c8:	2c2d      	cmp	r4, #45	@ 0x2d
 80250ca:	d110      	bne.n	80250ee <_strtol_l.isra.0+0x56>
 80250cc:	782c      	ldrb	r4, [r5, #0]
 80250ce:	2601      	movs	r6, #1
 80250d0:	1c95      	adds	r5, r2, #2
 80250d2:	f033 0210 	bics.w	r2, r3, #16
 80250d6:	d115      	bne.n	8025104 <_strtol_l.isra.0+0x6c>
 80250d8:	2c30      	cmp	r4, #48	@ 0x30
 80250da:	d10d      	bne.n	80250f8 <_strtol_l.isra.0+0x60>
 80250dc:	782a      	ldrb	r2, [r5, #0]
 80250de:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80250e2:	2a58      	cmp	r2, #88	@ 0x58
 80250e4:	d108      	bne.n	80250f8 <_strtol_l.isra.0+0x60>
 80250e6:	786c      	ldrb	r4, [r5, #1]
 80250e8:	3502      	adds	r5, #2
 80250ea:	2310      	movs	r3, #16
 80250ec:	e00a      	b.n	8025104 <_strtol_l.isra.0+0x6c>
 80250ee:	2c2b      	cmp	r4, #43	@ 0x2b
 80250f0:	bf04      	itt	eq
 80250f2:	782c      	ldrbeq	r4, [r5, #0]
 80250f4:	1c95      	addeq	r5, r2, #2
 80250f6:	e7ec      	b.n	80250d2 <_strtol_l.isra.0+0x3a>
 80250f8:	2b00      	cmp	r3, #0
 80250fa:	d1f6      	bne.n	80250ea <_strtol_l.isra.0+0x52>
 80250fc:	2c30      	cmp	r4, #48	@ 0x30
 80250fe:	bf14      	ite	ne
 8025100:	230a      	movne	r3, #10
 8025102:	2308      	moveq	r3, #8
 8025104:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8025108:	f10c 3cff 	add.w	ip, ip, #4294967295
 802510c:	2200      	movs	r2, #0
 802510e:	fbbc f9f3 	udiv	r9, ip, r3
 8025112:	4610      	mov	r0, r2
 8025114:	fb03 ca19 	mls	sl, r3, r9, ip
 8025118:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 802511c:	2f09      	cmp	r7, #9
 802511e:	d80f      	bhi.n	8025140 <_strtol_l.isra.0+0xa8>
 8025120:	463c      	mov	r4, r7
 8025122:	42a3      	cmp	r3, r4
 8025124:	dd1b      	ble.n	802515e <_strtol_l.isra.0+0xc6>
 8025126:	1c57      	adds	r7, r2, #1
 8025128:	d007      	beq.n	802513a <_strtol_l.isra.0+0xa2>
 802512a:	4581      	cmp	r9, r0
 802512c:	d314      	bcc.n	8025158 <_strtol_l.isra.0+0xc0>
 802512e:	d101      	bne.n	8025134 <_strtol_l.isra.0+0x9c>
 8025130:	45a2      	cmp	sl, r4
 8025132:	db11      	blt.n	8025158 <_strtol_l.isra.0+0xc0>
 8025134:	fb00 4003 	mla	r0, r0, r3, r4
 8025138:	2201      	movs	r2, #1
 802513a:	f815 4b01 	ldrb.w	r4, [r5], #1
 802513e:	e7eb      	b.n	8025118 <_strtol_l.isra.0+0x80>
 8025140:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8025144:	2f19      	cmp	r7, #25
 8025146:	d801      	bhi.n	802514c <_strtol_l.isra.0+0xb4>
 8025148:	3c37      	subs	r4, #55	@ 0x37
 802514a:	e7ea      	b.n	8025122 <_strtol_l.isra.0+0x8a>
 802514c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8025150:	2f19      	cmp	r7, #25
 8025152:	d804      	bhi.n	802515e <_strtol_l.isra.0+0xc6>
 8025154:	3c57      	subs	r4, #87	@ 0x57
 8025156:	e7e4      	b.n	8025122 <_strtol_l.isra.0+0x8a>
 8025158:	f04f 32ff 	mov.w	r2, #4294967295
 802515c:	e7ed      	b.n	802513a <_strtol_l.isra.0+0xa2>
 802515e:	1c53      	adds	r3, r2, #1
 8025160:	d108      	bne.n	8025174 <_strtol_l.isra.0+0xdc>
 8025162:	2322      	movs	r3, #34	@ 0x22
 8025164:	f8ce 3000 	str.w	r3, [lr]
 8025168:	4660      	mov	r0, ip
 802516a:	f1b8 0f00 	cmp.w	r8, #0
 802516e:	d0a0      	beq.n	80250b2 <_strtol_l.isra.0+0x1a>
 8025170:	1e69      	subs	r1, r5, #1
 8025172:	e006      	b.n	8025182 <_strtol_l.isra.0+0xea>
 8025174:	b106      	cbz	r6, 8025178 <_strtol_l.isra.0+0xe0>
 8025176:	4240      	negs	r0, r0
 8025178:	f1b8 0f00 	cmp.w	r8, #0
 802517c:	d099      	beq.n	80250b2 <_strtol_l.isra.0+0x1a>
 802517e:	2a00      	cmp	r2, #0
 8025180:	d1f6      	bne.n	8025170 <_strtol_l.isra.0+0xd8>
 8025182:	f8c8 1000 	str.w	r1, [r8]
 8025186:	e794      	b.n	80250b2 <_strtol_l.isra.0+0x1a>
 8025188:	0802b023 	.word	0x0802b023

0802518c <strtol>:
 802518c:	4613      	mov	r3, r2
 802518e:	460a      	mov	r2, r1
 8025190:	4601      	mov	r1, r0
 8025192:	4802      	ldr	r0, [pc, #8]	@ (802519c <strtol+0x10>)
 8025194:	6800      	ldr	r0, [r0, #0]
 8025196:	f7ff bf7f 	b.w	8025098 <_strtol_l.isra.0>
 802519a:	bf00      	nop
 802519c:	20000168 	.word	0x20000168

080251a0 <_strtoul_l.isra.0>:
 80251a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80251a4:	4e34      	ldr	r6, [pc, #208]	@ (8025278 <_strtoul_l.isra.0+0xd8>)
 80251a6:	4686      	mov	lr, r0
 80251a8:	460d      	mov	r5, r1
 80251aa:	4628      	mov	r0, r5
 80251ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80251b0:	5d37      	ldrb	r7, [r6, r4]
 80251b2:	f017 0708 	ands.w	r7, r7, #8
 80251b6:	d1f8      	bne.n	80251aa <_strtoul_l.isra.0+0xa>
 80251b8:	2c2d      	cmp	r4, #45	@ 0x2d
 80251ba:	d110      	bne.n	80251de <_strtoul_l.isra.0+0x3e>
 80251bc:	782c      	ldrb	r4, [r5, #0]
 80251be:	2701      	movs	r7, #1
 80251c0:	1c85      	adds	r5, r0, #2
 80251c2:	f033 0010 	bics.w	r0, r3, #16
 80251c6:	d115      	bne.n	80251f4 <_strtoul_l.isra.0+0x54>
 80251c8:	2c30      	cmp	r4, #48	@ 0x30
 80251ca:	d10d      	bne.n	80251e8 <_strtoul_l.isra.0+0x48>
 80251cc:	7828      	ldrb	r0, [r5, #0]
 80251ce:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80251d2:	2858      	cmp	r0, #88	@ 0x58
 80251d4:	d108      	bne.n	80251e8 <_strtoul_l.isra.0+0x48>
 80251d6:	786c      	ldrb	r4, [r5, #1]
 80251d8:	3502      	adds	r5, #2
 80251da:	2310      	movs	r3, #16
 80251dc:	e00a      	b.n	80251f4 <_strtoul_l.isra.0+0x54>
 80251de:	2c2b      	cmp	r4, #43	@ 0x2b
 80251e0:	bf04      	itt	eq
 80251e2:	782c      	ldrbeq	r4, [r5, #0]
 80251e4:	1c85      	addeq	r5, r0, #2
 80251e6:	e7ec      	b.n	80251c2 <_strtoul_l.isra.0+0x22>
 80251e8:	2b00      	cmp	r3, #0
 80251ea:	d1f6      	bne.n	80251da <_strtoul_l.isra.0+0x3a>
 80251ec:	2c30      	cmp	r4, #48	@ 0x30
 80251ee:	bf14      	ite	ne
 80251f0:	230a      	movne	r3, #10
 80251f2:	2308      	moveq	r3, #8
 80251f4:	f04f 38ff 	mov.w	r8, #4294967295
 80251f8:	2600      	movs	r6, #0
 80251fa:	fbb8 f8f3 	udiv	r8, r8, r3
 80251fe:	fb03 f908 	mul.w	r9, r3, r8
 8025202:	ea6f 0909 	mvn.w	r9, r9
 8025206:	4630      	mov	r0, r6
 8025208:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 802520c:	f1bc 0f09 	cmp.w	ip, #9
 8025210:	d810      	bhi.n	8025234 <_strtoul_l.isra.0+0x94>
 8025212:	4664      	mov	r4, ip
 8025214:	42a3      	cmp	r3, r4
 8025216:	dd1e      	ble.n	8025256 <_strtoul_l.isra.0+0xb6>
 8025218:	f1b6 3fff 	cmp.w	r6, #4294967295
 802521c:	d007      	beq.n	802522e <_strtoul_l.isra.0+0x8e>
 802521e:	4580      	cmp	r8, r0
 8025220:	d316      	bcc.n	8025250 <_strtoul_l.isra.0+0xb0>
 8025222:	d101      	bne.n	8025228 <_strtoul_l.isra.0+0x88>
 8025224:	45a1      	cmp	r9, r4
 8025226:	db13      	blt.n	8025250 <_strtoul_l.isra.0+0xb0>
 8025228:	fb00 4003 	mla	r0, r0, r3, r4
 802522c:	2601      	movs	r6, #1
 802522e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8025232:	e7e9      	b.n	8025208 <_strtoul_l.isra.0+0x68>
 8025234:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8025238:	f1bc 0f19 	cmp.w	ip, #25
 802523c:	d801      	bhi.n	8025242 <_strtoul_l.isra.0+0xa2>
 802523e:	3c37      	subs	r4, #55	@ 0x37
 8025240:	e7e8      	b.n	8025214 <_strtoul_l.isra.0+0x74>
 8025242:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8025246:	f1bc 0f19 	cmp.w	ip, #25
 802524a:	d804      	bhi.n	8025256 <_strtoul_l.isra.0+0xb6>
 802524c:	3c57      	subs	r4, #87	@ 0x57
 802524e:	e7e1      	b.n	8025214 <_strtoul_l.isra.0+0x74>
 8025250:	f04f 36ff 	mov.w	r6, #4294967295
 8025254:	e7eb      	b.n	802522e <_strtoul_l.isra.0+0x8e>
 8025256:	1c73      	adds	r3, r6, #1
 8025258:	d106      	bne.n	8025268 <_strtoul_l.isra.0+0xc8>
 802525a:	2322      	movs	r3, #34	@ 0x22
 802525c:	f8ce 3000 	str.w	r3, [lr]
 8025260:	4630      	mov	r0, r6
 8025262:	b932      	cbnz	r2, 8025272 <_strtoul_l.isra.0+0xd2>
 8025264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025268:	b107      	cbz	r7, 802526c <_strtoul_l.isra.0+0xcc>
 802526a:	4240      	negs	r0, r0
 802526c:	2a00      	cmp	r2, #0
 802526e:	d0f9      	beq.n	8025264 <_strtoul_l.isra.0+0xc4>
 8025270:	b106      	cbz	r6, 8025274 <_strtoul_l.isra.0+0xd4>
 8025272:	1e69      	subs	r1, r5, #1
 8025274:	6011      	str	r1, [r2, #0]
 8025276:	e7f5      	b.n	8025264 <_strtoul_l.isra.0+0xc4>
 8025278:	0802b023 	.word	0x0802b023

0802527c <strtoul>:
 802527c:	4613      	mov	r3, r2
 802527e:	460a      	mov	r2, r1
 8025280:	4601      	mov	r1, r0
 8025282:	4802      	ldr	r0, [pc, #8]	@ (802528c <strtoul+0x10>)
 8025284:	6800      	ldr	r0, [r0, #0]
 8025286:	f7ff bf8b 	b.w	80251a0 <_strtoul_l.isra.0>
 802528a:	bf00      	nop
 802528c:	20000168 	.word	0x20000168

08025290 <std>:
 8025290:	2300      	movs	r3, #0
 8025292:	b510      	push	{r4, lr}
 8025294:	4604      	mov	r4, r0
 8025296:	e9c0 3300 	strd	r3, r3, [r0]
 802529a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802529e:	6083      	str	r3, [r0, #8]
 80252a0:	8181      	strh	r1, [r0, #12]
 80252a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80252a4:	81c2      	strh	r2, [r0, #14]
 80252a6:	6183      	str	r3, [r0, #24]
 80252a8:	4619      	mov	r1, r3
 80252aa:	2208      	movs	r2, #8
 80252ac:	305c      	adds	r0, #92	@ 0x5c
 80252ae:	f000 fa91 	bl	80257d4 <memset>
 80252b2:	4b0d      	ldr	r3, [pc, #52]	@ (80252e8 <std+0x58>)
 80252b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80252b6:	4b0d      	ldr	r3, [pc, #52]	@ (80252ec <std+0x5c>)
 80252b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80252ba:	4b0d      	ldr	r3, [pc, #52]	@ (80252f0 <std+0x60>)
 80252bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80252be:	4b0d      	ldr	r3, [pc, #52]	@ (80252f4 <std+0x64>)
 80252c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80252c2:	4b0d      	ldr	r3, [pc, #52]	@ (80252f8 <std+0x68>)
 80252c4:	6224      	str	r4, [r4, #32]
 80252c6:	429c      	cmp	r4, r3
 80252c8:	d006      	beq.n	80252d8 <std+0x48>
 80252ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80252ce:	4294      	cmp	r4, r2
 80252d0:	d002      	beq.n	80252d8 <std+0x48>
 80252d2:	33d0      	adds	r3, #208	@ 0xd0
 80252d4:	429c      	cmp	r4, r3
 80252d6:	d105      	bne.n	80252e4 <std+0x54>
 80252d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80252dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80252e0:	f000 bb94 	b.w	8025a0c <__retarget_lock_init_recursive>
 80252e4:	bd10      	pop	{r4, pc}
 80252e6:	bf00      	nop
 80252e8:	08025559 	.word	0x08025559
 80252ec:	0802557b 	.word	0x0802557b
 80252f0:	080255b3 	.word	0x080255b3
 80252f4:	080255d7 	.word	0x080255d7
 80252f8:	20014b60 	.word	0x20014b60

080252fc <stdio_exit_handler>:
 80252fc:	4a02      	ldr	r2, [pc, #8]	@ (8025308 <stdio_exit_handler+0xc>)
 80252fe:	4903      	ldr	r1, [pc, #12]	@ (802530c <stdio_exit_handler+0x10>)
 8025300:	4803      	ldr	r0, [pc, #12]	@ (8025310 <stdio_exit_handler+0x14>)
 8025302:	f000 b869 	b.w	80253d8 <_fwalk_sglue>
 8025306:	bf00      	nop
 8025308:	2000015c 	.word	0x2000015c
 802530c:	0802648d 	.word	0x0802648d
 8025310:	2000016c 	.word	0x2000016c

08025314 <cleanup_stdio>:
 8025314:	6841      	ldr	r1, [r0, #4]
 8025316:	4b0c      	ldr	r3, [pc, #48]	@ (8025348 <cleanup_stdio+0x34>)
 8025318:	4299      	cmp	r1, r3
 802531a:	b510      	push	{r4, lr}
 802531c:	4604      	mov	r4, r0
 802531e:	d001      	beq.n	8025324 <cleanup_stdio+0x10>
 8025320:	f001 f8b4 	bl	802648c <_fflush_r>
 8025324:	68a1      	ldr	r1, [r4, #8]
 8025326:	4b09      	ldr	r3, [pc, #36]	@ (802534c <cleanup_stdio+0x38>)
 8025328:	4299      	cmp	r1, r3
 802532a:	d002      	beq.n	8025332 <cleanup_stdio+0x1e>
 802532c:	4620      	mov	r0, r4
 802532e:	f001 f8ad 	bl	802648c <_fflush_r>
 8025332:	68e1      	ldr	r1, [r4, #12]
 8025334:	4b06      	ldr	r3, [pc, #24]	@ (8025350 <cleanup_stdio+0x3c>)
 8025336:	4299      	cmp	r1, r3
 8025338:	d004      	beq.n	8025344 <cleanup_stdio+0x30>
 802533a:	4620      	mov	r0, r4
 802533c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025340:	f001 b8a4 	b.w	802648c <_fflush_r>
 8025344:	bd10      	pop	{r4, pc}
 8025346:	bf00      	nop
 8025348:	20014b60 	.word	0x20014b60
 802534c:	20014bc8 	.word	0x20014bc8
 8025350:	20014c30 	.word	0x20014c30

08025354 <global_stdio_init.part.0>:
 8025354:	b510      	push	{r4, lr}
 8025356:	4b0b      	ldr	r3, [pc, #44]	@ (8025384 <global_stdio_init.part.0+0x30>)
 8025358:	4c0b      	ldr	r4, [pc, #44]	@ (8025388 <global_stdio_init.part.0+0x34>)
 802535a:	4a0c      	ldr	r2, [pc, #48]	@ (802538c <global_stdio_init.part.0+0x38>)
 802535c:	601a      	str	r2, [r3, #0]
 802535e:	4620      	mov	r0, r4
 8025360:	2200      	movs	r2, #0
 8025362:	2104      	movs	r1, #4
 8025364:	f7ff ff94 	bl	8025290 <std>
 8025368:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802536c:	2201      	movs	r2, #1
 802536e:	2109      	movs	r1, #9
 8025370:	f7ff ff8e 	bl	8025290 <std>
 8025374:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8025378:	2202      	movs	r2, #2
 802537a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802537e:	2112      	movs	r1, #18
 8025380:	f7ff bf86 	b.w	8025290 <std>
 8025384:	20014c98 	.word	0x20014c98
 8025388:	20014b60 	.word	0x20014b60
 802538c:	080252fd 	.word	0x080252fd

08025390 <__sfp_lock_acquire>:
 8025390:	4801      	ldr	r0, [pc, #4]	@ (8025398 <__sfp_lock_acquire+0x8>)
 8025392:	f000 bb3c 	b.w	8025a0e <__retarget_lock_acquire_recursive>
 8025396:	bf00      	nop
 8025398:	20014ca2 	.word	0x20014ca2

0802539c <__sfp_lock_release>:
 802539c:	4801      	ldr	r0, [pc, #4]	@ (80253a4 <__sfp_lock_release+0x8>)
 802539e:	f000 bb37 	b.w	8025a10 <__retarget_lock_release_recursive>
 80253a2:	bf00      	nop
 80253a4:	20014ca2 	.word	0x20014ca2

080253a8 <__sinit>:
 80253a8:	b510      	push	{r4, lr}
 80253aa:	4604      	mov	r4, r0
 80253ac:	f7ff fff0 	bl	8025390 <__sfp_lock_acquire>
 80253b0:	6a23      	ldr	r3, [r4, #32]
 80253b2:	b11b      	cbz	r3, 80253bc <__sinit+0x14>
 80253b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80253b8:	f7ff bff0 	b.w	802539c <__sfp_lock_release>
 80253bc:	4b04      	ldr	r3, [pc, #16]	@ (80253d0 <__sinit+0x28>)
 80253be:	6223      	str	r3, [r4, #32]
 80253c0:	4b04      	ldr	r3, [pc, #16]	@ (80253d4 <__sinit+0x2c>)
 80253c2:	681b      	ldr	r3, [r3, #0]
 80253c4:	2b00      	cmp	r3, #0
 80253c6:	d1f5      	bne.n	80253b4 <__sinit+0xc>
 80253c8:	f7ff ffc4 	bl	8025354 <global_stdio_init.part.0>
 80253cc:	e7f2      	b.n	80253b4 <__sinit+0xc>
 80253ce:	bf00      	nop
 80253d0:	08025315 	.word	0x08025315
 80253d4:	20014c98 	.word	0x20014c98

080253d8 <_fwalk_sglue>:
 80253d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80253dc:	4607      	mov	r7, r0
 80253de:	4688      	mov	r8, r1
 80253e0:	4614      	mov	r4, r2
 80253e2:	2600      	movs	r6, #0
 80253e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80253e8:	f1b9 0901 	subs.w	r9, r9, #1
 80253ec:	d505      	bpl.n	80253fa <_fwalk_sglue+0x22>
 80253ee:	6824      	ldr	r4, [r4, #0]
 80253f0:	2c00      	cmp	r4, #0
 80253f2:	d1f7      	bne.n	80253e4 <_fwalk_sglue+0xc>
 80253f4:	4630      	mov	r0, r6
 80253f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80253fa:	89ab      	ldrh	r3, [r5, #12]
 80253fc:	2b01      	cmp	r3, #1
 80253fe:	d907      	bls.n	8025410 <_fwalk_sglue+0x38>
 8025400:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025404:	3301      	adds	r3, #1
 8025406:	d003      	beq.n	8025410 <_fwalk_sglue+0x38>
 8025408:	4629      	mov	r1, r5
 802540a:	4638      	mov	r0, r7
 802540c:	47c0      	blx	r8
 802540e:	4306      	orrs	r6, r0
 8025410:	3568      	adds	r5, #104	@ 0x68
 8025412:	e7e9      	b.n	80253e8 <_fwalk_sglue+0x10>

08025414 <_fwrite_r>:
 8025414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025418:	9c08      	ldr	r4, [sp, #32]
 802541a:	468a      	mov	sl, r1
 802541c:	4690      	mov	r8, r2
 802541e:	fb02 f903 	mul.w	r9, r2, r3
 8025422:	4606      	mov	r6, r0
 8025424:	b118      	cbz	r0, 802542e <_fwrite_r+0x1a>
 8025426:	6a03      	ldr	r3, [r0, #32]
 8025428:	b90b      	cbnz	r3, 802542e <_fwrite_r+0x1a>
 802542a:	f7ff ffbd 	bl	80253a8 <__sinit>
 802542e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025430:	07dd      	lsls	r5, r3, #31
 8025432:	d405      	bmi.n	8025440 <_fwrite_r+0x2c>
 8025434:	89a3      	ldrh	r3, [r4, #12]
 8025436:	0598      	lsls	r0, r3, #22
 8025438:	d402      	bmi.n	8025440 <_fwrite_r+0x2c>
 802543a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802543c:	f000 fae7 	bl	8025a0e <__retarget_lock_acquire_recursive>
 8025440:	89a3      	ldrh	r3, [r4, #12]
 8025442:	0719      	lsls	r1, r3, #28
 8025444:	d516      	bpl.n	8025474 <_fwrite_r+0x60>
 8025446:	6923      	ldr	r3, [r4, #16]
 8025448:	b1a3      	cbz	r3, 8025474 <_fwrite_r+0x60>
 802544a:	2500      	movs	r5, #0
 802544c:	454d      	cmp	r5, r9
 802544e:	d01f      	beq.n	8025490 <_fwrite_r+0x7c>
 8025450:	68a7      	ldr	r7, [r4, #8]
 8025452:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8025456:	3f01      	subs	r7, #1
 8025458:	2f00      	cmp	r7, #0
 802545a:	60a7      	str	r7, [r4, #8]
 802545c:	da04      	bge.n	8025468 <_fwrite_r+0x54>
 802545e:	69a3      	ldr	r3, [r4, #24]
 8025460:	429f      	cmp	r7, r3
 8025462:	db0f      	blt.n	8025484 <_fwrite_r+0x70>
 8025464:	290a      	cmp	r1, #10
 8025466:	d00d      	beq.n	8025484 <_fwrite_r+0x70>
 8025468:	6823      	ldr	r3, [r4, #0]
 802546a:	1c5a      	adds	r2, r3, #1
 802546c:	6022      	str	r2, [r4, #0]
 802546e:	7019      	strb	r1, [r3, #0]
 8025470:	3501      	adds	r5, #1
 8025472:	e7eb      	b.n	802544c <_fwrite_r+0x38>
 8025474:	4621      	mov	r1, r4
 8025476:	4630      	mov	r0, r6
 8025478:	f000 f92c 	bl	80256d4 <__swsetup_r>
 802547c:	2800      	cmp	r0, #0
 802547e:	d0e4      	beq.n	802544a <_fwrite_r+0x36>
 8025480:	2500      	movs	r5, #0
 8025482:	e005      	b.n	8025490 <_fwrite_r+0x7c>
 8025484:	4622      	mov	r2, r4
 8025486:	4630      	mov	r0, r6
 8025488:	f000 f8e6 	bl	8025658 <__swbuf_r>
 802548c:	3001      	adds	r0, #1
 802548e:	d1ef      	bne.n	8025470 <_fwrite_r+0x5c>
 8025490:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025492:	07da      	lsls	r2, r3, #31
 8025494:	d405      	bmi.n	80254a2 <_fwrite_r+0x8e>
 8025496:	89a3      	ldrh	r3, [r4, #12]
 8025498:	059b      	lsls	r3, r3, #22
 802549a:	d402      	bmi.n	80254a2 <_fwrite_r+0x8e>
 802549c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802549e:	f000 fab7 	bl	8025a10 <__retarget_lock_release_recursive>
 80254a2:	fbb5 f0f8 	udiv	r0, r5, r8
 80254a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080254ac <fwrite>:
 80254ac:	b507      	push	{r0, r1, r2, lr}
 80254ae:	9300      	str	r3, [sp, #0]
 80254b0:	4613      	mov	r3, r2
 80254b2:	460a      	mov	r2, r1
 80254b4:	4601      	mov	r1, r0
 80254b6:	4803      	ldr	r0, [pc, #12]	@ (80254c4 <fwrite+0x18>)
 80254b8:	6800      	ldr	r0, [r0, #0]
 80254ba:	f7ff ffab 	bl	8025414 <_fwrite_r>
 80254be:	b003      	add	sp, #12
 80254c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80254c4:	20000168 	.word	0x20000168

080254c8 <iprintf>:
 80254c8:	b40f      	push	{r0, r1, r2, r3}
 80254ca:	b507      	push	{r0, r1, r2, lr}
 80254cc:	4906      	ldr	r1, [pc, #24]	@ (80254e8 <iprintf+0x20>)
 80254ce:	ab04      	add	r3, sp, #16
 80254d0:	6808      	ldr	r0, [r1, #0]
 80254d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80254d6:	6881      	ldr	r1, [r0, #8]
 80254d8:	9301      	str	r3, [sp, #4]
 80254da:	f000 fcaf 	bl	8025e3c <_vfiprintf_r>
 80254de:	b003      	add	sp, #12
 80254e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80254e4:	b004      	add	sp, #16
 80254e6:	4770      	bx	lr
 80254e8:	20000168 	.word	0x20000168

080254ec <sniprintf>:
 80254ec:	b40c      	push	{r2, r3}
 80254ee:	b530      	push	{r4, r5, lr}
 80254f0:	4b18      	ldr	r3, [pc, #96]	@ (8025554 <sniprintf+0x68>)
 80254f2:	1e0c      	subs	r4, r1, #0
 80254f4:	681d      	ldr	r5, [r3, #0]
 80254f6:	b09d      	sub	sp, #116	@ 0x74
 80254f8:	da08      	bge.n	802550c <sniprintf+0x20>
 80254fa:	238b      	movs	r3, #139	@ 0x8b
 80254fc:	602b      	str	r3, [r5, #0]
 80254fe:	f04f 30ff 	mov.w	r0, #4294967295
 8025502:	b01d      	add	sp, #116	@ 0x74
 8025504:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025508:	b002      	add	sp, #8
 802550a:	4770      	bx	lr
 802550c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8025510:	f8ad 3014 	strh.w	r3, [sp, #20]
 8025514:	f04f 0300 	mov.w	r3, #0
 8025518:	931b      	str	r3, [sp, #108]	@ 0x6c
 802551a:	bf14      	ite	ne
 802551c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8025520:	4623      	moveq	r3, r4
 8025522:	9304      	str	r3, [sp, #16]
 8025524:	9307      	str	r3, [sp, #28]
 8025526:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802552a:	9002      	str	r0, [sp, #8]
 802552c:	9006      	str	r0, [sp, #24]
 802552e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8025532:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8025534:	ab21      	add	r3, sp, #132	@ 0x84
 8025536:	a902      	add	r1, sp, #8
 8025538:	4628      	mov	r0, r5
 802553a:	9301      	str	r3, [sp, #4]
 802553c:	f000 fb58 	bl	8025bf0 <_svfiprintf_r>
 8025540:	1c43      	adds	r3, r0, #1
 8025542:	bfbc      	itt	lt
 8025544:	238b      	movlt	r3, #139	@ 0x8b
 8025546:	602b      	strlt	r3, [r5, #0]
 8025548:	2c00      	cmp	r4, #0
 802554a:	d0da      	beq.n	8025502 <sniprintf+0x16>
 802554c:	9b02      	ldr	r3, [sp, #8]
 802554e:	2200      	movs	r2, #0
 8025550:	701a      	strb	r2, [r3, #0]
 8025552:	e7d6      	b.n	8025502 <sniprintf+0x16>
 8025554:	20000168 	.word	0x20000168

08025558 <__sread>:
 8025558:	b510      	push	{r4, lr}
 802555a:	460c      	mov	r4, r1
 802555c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025560:	f000 f9f6 	bl	8025950 <_read_r>
 8025564:	2800      	cmp	r0, #0
 8025566:	bfab      	itete	ge
 8025568:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802556a:	89a3      	ldrhlt	r3, [r4, #12]
 802556c:	181b      	addge	r3, r3, r0
 802556e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8025572:	bfac      	ite	ge
 8025574:	6563      	strge	r3, [r4, #84]	@ 0x54
 8025576:	81a3      	strhlt	r3, [r4, #12]
 8025578:	bd10      	pop	{r4, pc}

0802557a <__swrite>:
 802557a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802557e:	461f      	mov	r7, r3
 8025580:	898b      	ldrh	r3, [r1, #12]
 8025582:	05db      	lsls	r3, r3, #23
 8025584:	4605      	mov	r5, r0
 8025586:	460c      	mov	r4, r1
 8025588:	4616      	mov	r6, r2
 802558a:	d505      	bpl.n	8025598 <__swrite+0x1e>
 802558c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025590:	2302      	movs	r3, #2
 8025592:	2200      	movs	r2, #0
 8025594:	f000 f9ca 	bl	802592c <_lseek_r>
 8025598:	89a3      	ldrh	r3, [r4, #12]
 802559a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802559e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80255a2:	81a3      	strh	r3, [r4, #12]
 80255a4:	4632      	mov	r2, r6
 80255a6:	463b      	mov	r3, r7
 80255a8:	4628      	mov	r0, r5
 80255aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80255ae:	f000 b9f1 	b.w	8025994 <_write_r>

080255b2 <__sseek>:
 80255b2:	b510      	push	{r4, lr}
 80255b4:	460c      	mov	r4, r1
 80255b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80255ba:	f000 f9b7 	bl	802592c <_lseek_r>
 80255be:	1c43      	adds	r3, r0, #1
 80255c0:	89a3      	ldrh	r3, [r4, #12]
 80255c2:	bf15      	itete	ne
 80255c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80255c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80255ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80255ce:	81a3      	strheq	r3, [r4, #12]
 80255d0:	bf18      	it	ne
 80255d2:	81a3      	strhne	r3, [r4, #12]
 80255d4:	bd10      	pop	{r4, pc}

080255d6 <__sclose>:
 80255d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80255da:	f000 b939 	b.w	8025850 <_close_r>

080255de <_vsniprintf_r>:
 80255de:	b530      	push	{r4, r5, lr}
 80255e0:	4614      	mov	r4, r2
 80255e2:	2c00      	cmp	r4, #0
 80255e4:	b09b      	sub	sp, #108	@ 0x6c
 80255e6:	4605      	mov	r5, r0
 80255e8:	461a      	mov	r2, r3
 80255ea:	da05      	bge.n	80255f8 <_vsniprintf_r+0x1a>
 80255ec:	238b      	movs	r3, #139	@ 0x8b
 80255ee:	6003      	str	r3, [r0, #0]
 80255f0:	f04f 30ff 	mov.w	r0, #4294967295
 80255f4:	b01b      	add	sp, #108	@ 0x6c
 80255f6:	bd30      	pop	{r4, r5, pc}
 80255f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80255fc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8025600:	f04f 0300 	mov.w	r3, #0
 8025604:	9319      	str	r3, [sp, #100]	@ 0x64
 8025606:	bf14      	ite	ne
 8025608:	f104 33ff 	addne.w	r3, r4, #4294967295
 802560c:	4623      	moveq	r3, r4
 802560e:	9302      	str	r3, [sp, #8]
 8025610:	9305      	str	r3, [sp, #20]
 8025612:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8025616:	9100      	str	r1, [sp, #0]
 8025618:	9104      	str	r1, [sp, #16]
 802561a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802561e:	4669      	mov	r1, sp
 8025620:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8025622:	f000 fae5 	bl	8025bf0 <_svfiprintf_r>
 8025626:	1c43      	adds	r3, r0, #1
 8025628:	bfbc      	itt	lt
 802562a:	238b      	movlt	r3, #139	@ 0x8b
 802562c:	602b      	strlt	r3, [r5, #0]
 802562e:	2c00      	cmp	r4, #0
 8025630:	d0e0      	beq.n	80255f4 <_vsniprintf_r+0x16>
 8025632:	9b00      	ldr	r3, [sp, #0]
 8025634:	2200      	movs	r2, #0
 8025636:	701a      	strb	r2, [r3, #0]
 8025638:	e7dc      	b.n	80255f4 <_vsniprintf_r+0x16>
	...

0802563c <vsniprintf>:
 802563c:	b507      	push	{r0, r1, r2, lr}
 802563e:	9300      	str	r3, [sp, #0]
 8025640:	4613      	mov	r3, r2
 8025642:	460a      	mov	r2, r1
 8025644:	4601      	mov	r1, r0
 8025646:	4803      	ldr	r0, [pc, #12]	@ (8025654 <vsniprintf+0x18>)
 8025648:	6800      	ldr	r0, [r0, #0]
 802564a:	f7ff ffc8 	bl	80255de <_vsniprintf_r>
 802564e:	b003      	add	sp, #12
 8025650:	f85d fb04 	ldr.w	pc, [sp], #4
 8025654:	20000168 	.word	0x20000168

08025658 <__swbuf_r>:
 8025658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802565a:	460e      	mov	r6, r1
 802565c:	4614      	mov	r4, r2
 802565e:	4605      	mov	r5, r0
 8025660:	b118      	cbz	r0, 802566a <__swbuf_r+0x12>
 8025662:	6a03      	ldr	r3, [r0, #32]
 8025664:	b90b      	cbnz	r3, 802566a <__swbuf_r+0x12>
 8025666:	f7ff fe9f 	bl	80253a8 <__sinit>
 802566a:	69a3      	ldr	r3, [r4, #24]
 802566c:	60a3      	str	r3, [r4, #8]
 802566e:	89a3      	ldrh	r3, [r4, #12]
 8025670:	071a      	lsls	r2, r3, #28
 8025672:	d501      	bpl.n	8025678 <__swbuf_r+0x20>
 8025674:	6923      	ldr	r3, [r4, #16]
 8025676:	b943      	cbnz	r3, 802568a <__swbuf_r+0x32>
 8025678:	4621      	mov	r1, r4
 802567a:	4628      	mov	r0, r5
 802567c:	f000 f82a 	bl	80256d4 <__swsetup_r>
 8025680:	b118      	cbz	r0, 802568a <__swbuf_r+0x32>
 8025682:	f04f 37ff 	mov.w	r7, #4294967295
 8025686:	4638      	mov	r0, r7
 8025688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802568a:	6823      	ldr	r3, [r4, #0]
 802568c:	6922      	ldr	r2, [r4, #16]
 802568e:	1a98      	subs	r0, r3, r2
 8025690:	6963      	ldr	r3, [r4, #20]
 8025692:	b2f6      	uxtb	r6, r6
 8025694:	4283      	cmp	r3, r0
 8025696:	4637      	mov	r7, r6
 8025698:	dc05      	bgt.n	80256a6 <__swbuf_r+0x4e>
 802569a:	4621      	mov	r1, r4
 802569c:	4628      	mov	r0, r5
 802569e:	f000 fef5 	bl	802648c <_fflush_r>
 80256a2:	2800      	cmp	r0, #0
 80256a4:	d1ed      	bne.n	8025682 <__swbuf_r+0x2a>
 80256a6:	68a3      	ldr	r3, [r4, #8]
 80256a8:	3b01      	subs	r3, #1
 80256aa:	60a3      	str	r3, [r4, #8]
 80256ac:	6823      	ldr	r3, [r4, #0]
 80256ae:	1c5a      	adds	r2, r3, #1
 80256b0:	6022      	str	r2, [r4, #0]
 80256b2:	701e      	strb	r6, [r3, #0]
 80256b4:	6962      	ldr	r2, [r4, #20]
 80256b6:	1c43      	adds	r3, r0, #1
 80256b8:	429a      	cmp	r2, r3
 80256ba:	d004      	beq.n	80256c6 <__swbuf_r+0x6e>
 80256bc:	89a3      	ldrh	r3, [r4, #12]
 80256be:	07db      	lsls	r3, r3, #31
 80256c0:	d5e1      	bpl.n	8025686 <__swbuf_r+0x2e>
 80256c2:	2e0a      	cmp	r6, #10
 80256c4:	d1df      	bne.n	8025686 <__swbuf_r+0x2e>
 80256c6:	4621      	mov	r1, r4
 80256c8:	4628      	mov	r0, r5
 80256ca:	f000 fedf 	bl	802648c <_fflush_r>
 80256ce:	2800      	cmp	r0, #0
 80256d0:	d0d9      	beq.n	8025686 <__swbuf_r+0x2e>
 80256d2:	e7d6      	b.n	8025682 <__swbuf_r+0x2a>

080256d4 <__swsetup_r>:
 80256d4:	b538      	push	{r3, r4, r5, lr}
 80256d6:	4b29      	ldr	r3, [pc, #164]	@ (802577c <__swsetup_r+0xa8>)
 80256d8:	4605      	mov	r5, r0
 80256da:	6818      	ldr	r0, [r3, #0]
 80256dc:	460c      	mov	r4, r1
 80256de:	b118      	cbz	r0, 80256e8 <__swsetup_r+0x14>
 80256e0:	6a03      	ldr	r3, [r0, #32]
 80256e2:	b90b      	cbnz	r3, 80256e8 <__swsetup_r+0x14>
 80256e4:	f7ff fe60 	bl	80253a8 <__sinit>
 80256e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80256ec:	0719      	lsls	r1, r3, #28
 80256ee:	d422      	bmi.n	8025736 <__swsetup_r+0x62>
 80256f0:	06da      	lsls	r2, r3, #27
 80256f2:	d407      	bmi.n	8025704 <__swsetup_r+0x30>
 80256f4:	2209      	movs	r2, #9
 80256f6:	602a      	str	r2, [r5, #0]
 80256f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80256fc:	81a3      	strh	r3, [r4, #12]
 80256fe:	f04f 30ff 	mov.w	r0, #4294967295
 8025702:	e033      	b.n	802576c <__swsetup_r+0x98>
 8025704:	0758      	lsls	r0, r3, #29
 8025706:	d512      	bpl.n	802572e <__swsetup_r+0x5a>
 8025708:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802570a:	b141      	cbz	r1, 802571e <__swsetup_r+0x4a>
 802570c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8025710:	4299      	cmp	r1, r3
 8025712:	d002      	beq.n	802571a <__swsetup_r+0x46>
 8025714:	4628      	mov	r0, r5
 8025716:	f000 f9bd 	bl	8025a94 <_free_r>
 802571a:	2300      	movs	r3, #0
 802571c:	6363      	str	r3, [r4, #52]	@ 0x34
 802571e:	89a3      	ldrh	r3, [r4, #12]
 8025720:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8025724:	81a3      	strh	r3, [r4, #12]
 8025726:	2300      	movs	r3, #0
 8025728:	6063      	str	r3, [r4, #4]
 802572a:	6923      	ldr	r3, [r4, #16]
 802572c:	6023      	str	r3, [r4, #0]
 802572e:	89a3      	ldrh	r3, [r4, #12]
 8025730:	f043 0308 	orr.w	r3, r3, #8
 8025734:	81a3      	strh	r3, [r4, #12]
 8025736:	6923      	ldr	r3, [r4, #16]
 8025738:	b94b      	cbnz	r3, 802574e <__swsetup_r+0x7a>
 802573a:	89a3      	ldrh	r3, [r4, #12]
 802573c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8025740:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8025744:	d003      	beq.n	802574e <__swsetup_r+0x7a>
 8025746:	4621      	mov	r1, r4
 8025748:	4628      	mov	r0, r5
 802574a:	f000 feff 	bl	802654c <__smakebuf_r>
 802574e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025752:	f013 0201 	ands.w	r2, r3, #1
 8025756:	d00a      	beq.n	802576e <__swsetup_r+0x9a>
 8025758:	2200      	movs	r2, #0
 802575a:	60a2      	str	r2, [r4, #8]
 802575c:	6962      	ldr	r2, [r4, #20]
 802575e:	4252      	negs	r2, r2
 8025760:	61a2      	str	r2, [r4, #24]
 8025762:	6922      	ldr	r2, [r4, #16]
 8025764:	b942      	cbnz	r2, 8025778 <__swsetup_r+0xa4>
 8025766:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802576a:	d1c5      	bne.n	80256f8 <__swsetup_r+0x24>
 802576c:	bd38      	pop	{r3, r4, r5, pc}
 802576e:	0799      	lsls	r1, r3, #30
 8025770:	bf58      	it	pl
 8025772:	6962      	ldrpl	r2, [r4, #20]
 8025774:	60a2      	str	r2, [r4, #8]
 8025776:	e7f4      	b.n	8025762 <__swsetup_r+0x8e>
 8025778:	2000      	movs	r0, #0
 802577a:	e7f7      	b.n	802576c <__swsetup_r+0x98>
 802577c:	20000168 	.word	0x20000168

08025780 <memcmp>:
 8025780:	b510      	push	{r4, lr}
 8025782:	3901      	subs	r1, #1
 8025784:	4402      	add	r2, r0
 8025786:	4290      	cmp	r0, r2
 8025788:	d101      	bne.n	802578e <memcmp+0xe>
 802578a:	2000      	movs	r0, #0
 802578c:	e005      	b.n	802579a <memcmp+0x1a>
 802578e:	7803      	ldrb	r3, [r0, #0]
 8025790:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8025794:	42a3      	cmp	r3, r4
 8025796:	d001      	beq.n	802579c <memcmp+0x1c>
 8025798:	1b18      	subs	r0, r3, r4
 802579a:	bd10      	pop	{r4, pc}
 802579c:	3001      	adds	r0, #1
 802579e:	e7f2      	b.n	8025786 <memcmp+0x6>

080257a0 <memmove>:
 80257a0:	4288      	cmp	r0, r1
 80257a2:	b510      	push	{r4, lr}
 80257a4:	eb01 0402 	add.w	r4, r1, r2
 80257a8:	d902      	bls.n	80257b0 <memmove+0x10>
 80257aa:	4284      	cmp	r4, r0
 80257ac:	4623      	mov	r3, r4
 80257ae:	d807      	bhi.n	80257c0 <memmove+0x20>
 80257b0:	1e43      	subs	r3, r0, #1
 80257b2:	42a1      	cmp	r1, r4
 80257b4:	d008      	beq.n	80257c8 <memmove+0x28>
 80257b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80257ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80257be:	e7f8      	b.n	80257b2 <memmove+0x12>
 80257c0:	4402      	add	r2, r0
 80257c2:	4601      	mov	r1, r0
 80257c4:	428a      	cmp	r2, r1
 80257c6:	d100      	bne.n	80257ca <memmove+0x2a>
 80257c8:	bd10      	pop	{r4, pc}
 80257ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80257ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80257d2:	e7f7      	b.n	80257c4 <memmove+0x24>

080257d4 <memset>:
 80257d4:	4402      	add	r2, r0
 80257d6:	4603      	mov	r3, r0
 80257d8:	4293      	cmp	r3, r2
 80257da:	d100      	bne.n	80257de <memset+0xa>
 80257dc:	4770      	bx	lr
 80257de:	f803 1b01 	strb.w	r1, [r3], #1
 80257e2:	e7f9      	b.n	80257d8 <memset+0x4>

080257e4 <strchr>:
 80257e4:	b2c9      	uxtb	r1, r1
 80257e6:	4603      	mov	r3, r0
 80257e8:	4618      	mov	r0, r3
 80257ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80257ee:	b112      	cbz	r2, 80257f6 <strchr+0x12>
 80257f0:	428a      	cmp	r2, r1
 80257f2:	d1f9      	bne.n	80257e8 <strchr+0x4>
 80257f4:	4770      	bx	lr
 80257f6:	2900      	cmp	r1, #0
 80257f8:	bf18      	it	ne
 80257fa:	2000      	movne	r0, #0
 80257fc:	4770      	bx	lr

080257fe <strncmp>:
 80257fe:	b510      	push	{r4, lr}
 8025800:	b16a      	cbz	r2, 802581e <strncmp+0x20>
 8025802:	3901      	subs	r1, #1
 8025804:	1884      	adds	r4, r0, r2
 8025806:	f810 2b01 	ldrb.w	r2, [r0], #1
 802580a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802580e:	429a      	cmp	r2, r3
 8025810:	d103      	bne.n	802581a <strncmp+0x1c>
 8025812:	42a0      	cmp	r0, r4
 8025814:	d001      	beq.n	802581a <strncmp+0x1c>
 8025816:	2a00      	cmp	r2, #0
 8025818:	d1f5      	bne.n	8025806 <strncmp+0x8>
 802581a:	1ad0      	subs	r0, r2, r3
 802581c:	bd10      	pop	{r4, pc}
 802581e:	4610      	mov	r0, r2
 8025820:	e7fc      	b.n	802581c <strncmp+0x1e>

08025822 <strstr>:
 8025822:	780a      	ldrb	r2, [r1, #0]
 8025824:	b570      	push	{r4, r5, r6, lr}
 8025826:	b96a      	cbnz	r2, 8025844 <strstr+0x22>
 8025828:	bd70      	pop	{r4, r5, r6, pc}
 802582a:	429a      	cmp	r2, r3
 802582c:	d109      	bne.n	8025842 <strstr+0x20>
 802582e:	460c      	mov	r4, r1
 8025830:	4605      	mov	r5, r0
 8025832:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8025836:	2b00      	cmp	r3, #0
 8025838:	d0f6      	beq.n	8025828 <strstr+0x6>
 802583a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802583e:	429e      	cmp	r6, r3
 8025840:	d0f7      	beq.n	8025832 <strstr+0x10>
 8025842:	3001      	adds	r0, #1
 8025844:	7803      	ldrb	r3, [r0, #0]
 8025846:	2b00      	cmp	r3, #0
 8025848:	d1ef      	bne.n	802582a <strstr+0x8>
 802584a:	4618      	mov	r0, r3
 802584c:	e7ec      	b.n	8025828 <strstr+0x6>
	...

08025850 <_close_r>:
 8025850:	b538      	push	{r3, r4, r5, lr}
 8025852:	4d06      	ldr	r5, [pc, #24]	@ (802586c <_close_r+0x1c>)
 8025854:	2300      	movs	r3, #0
 8025856:	4604      	mov	r4, r0
 8025858:	4608      	mov	r0, r1
 802585a:	602b      	str	r3, [r5, #0]
 802585c:	f7db fe48 	bl	80014f0 <_close>
 8025860:	1c43      	adds	r3, r0, #1
 8025862:	d102      	bne.n	802586a <_close_r+0x1a>
 8025864:	682b      	ldr	r3, [r5, #0]
 8025866:	b103      	cbz	r3, 802586a <_close_r+0x1a>
 8025868:	6023      	str	r3, [r4, #0]
 802586a:	bd38      	pop	{r3, r4, r5, pc}
 802586c:	20014c9c 	.word	0x20014c9c

08025870 <_reclaim_reent>:
 8025870:	4b2d      	ldr	r3, [pc, #180]	@ (8025928 <_reclaim_reent+0xb8>)
 8025872:	681b      	ldr	r3, [r3, #0]
 8025874:	4283      	cmp	r3, r0
 8025876:	b570      	push	{r4, r5, r6, lr}
 8025878:	4604      	mov	r4, r0
 802587a:	d053      	beq.n	8025924 <_reclaim_reent+0xb4>
 802587c:	69c3      	ldr	r3, [r0, #28]
 802587e:	b31b      	cbz	r3, 80258c8 <_reclaim_reent+0x58>
 8025880:	68db      	ldr	r3, [r3, #12]
 8025882:	b163      	cbz	r3, 802589e <_reclaim_reent+0x2e>
 8025884:	2500      	movs	r5, #0
 8025886:	69e3      	ldr	r3, [r4, #28]
 8025888:	68db      	ldr	r3, [r3, #12]
 802588a:	5959      	ldr	r1, [r3, r5]
 802588c:	b9b1      	cbnz	r1, 80258bc <_reclaim_reent+0x4c>
 802588e:	3504      	adds	r5, #4
 8025890:	2d80      	cmp	r5, #128	@ 0x80
 8025892:	d1f8      	bne.n	8025886 <_reclaim_reent+0x16>
 8025894:	69e3      	ldr	r3, [r4, #28]
 8025896:	4620      	mov	r0, r4
 8025898:	68d9      	ldr	r1, [r3, #12]
 802589a:	f000 f8fb 	bl	8025a94 <_free_r>
 802589e:	69e3      	ldr	r3, [r4, #28]
 80258a0:	6819      	ldr	r1, [r3, #0]
 80258a2:	b111      	cbz	r1, 80258aa <_reclaim_reent+0x3a>
 80258a4:	4620      	mov	r0, r4
 80258a6:	f000 f8f5 	bl	8025a94 <_free_r>
 80258aa:	69e3      	ldr	r3, [r4, #28]
 80258ac:	689d      	ldr	r5, [r3, #8]
 80258ae:	b15d      	cbz	r5, 80258c8 <_reclaim_reent+0x58>
 80258b0:	4629      	mov	r1, r5
 80258b2:	4620      	mov	r0, r4
 80258b4:	682d      	ldr	r5, [r5, #0]
 80258b6:	f000 f8ed 	bl	8025a94 <_free_r>
 80258ba:	e7f8      	b.n	80258ae <_reclaim_reent+0x3e>
 80258bc:	680e      	ldr	r6, [r1, #0]
 80258be:	4620      	mov	r0, r4
 80258c0:	f000 f8e8 	bl	8025a94 <_free_r>
 80258c4:	4631      	mov	r1, r6
 80258c6:	e7e1      	b.n	802588c <_reclaim_reent+0x1c>
 80258c8:	6961      	ldr	r1, [r4, #20]
 80258ca:	b111      	cbz	r1, 80258d2 <_reclaim_reent+0x62>
 80258cc:	4620      	mov	r0, r4
 80258ce:	f000 f8e1 	bl	8025a94 <_free_r>
 80258d2:	69e1      	ldr	r1, [r4, #28]
 80258d4:	b111      	cbz	r1, 80258dc <_reclaim_reent+0x6c>
 80258d6:	4620      	mov	r0, r4
 80258d8:	f000 f8dc 	bl	8025a94 <_free_r>
 80258dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80258de:	b111      	cbz	r1, 80258e6 <_reclaim_reent+0x76>
 80258e0:	4620      	mov	r0, r4
 80258e2:	f000 f8d7 	bl	8025a94 <_free_r>
 80258e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80258e8:	b111      	cbz	r1, 80258f0 <_reclaim_reent+0x80>
 80258ea:	4620      	mov	r0, r4
 80258ec:	f000 f8d2 	bl	8025a94 <_free_r>
 80258f0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80258f2:	b111      	cbz	r1, 80258fa <_reclaim_reent+0x8a>
 80258f4:	4620      	mov	r0, r4
 80258f6:	f000 f8cd 	bl	8025a94 <_free_r>
 80258fa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80258fc:	b111      	cbz	r1, 8025904 <_reclaim_reent+0x94>
 80258fe:	4620      	mov	r0, r4
 8025900:	f000 f8c8 	bl	8025a94 <_free_r>
 8025904:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8025906:	b111      	cbz	r1, 802590e <_reclaim_reent+0x9e>
 8025908:	4620      	mov	r0, r4
 802590a:	f000 f8c3 	bl	8025a94 <_free_r>
 802590e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8025910:	b111      	cbz	r1, 8025918 <_reclaim_reent+0xa8>
 8025912:	4620      	mov	r0, r4
 8025914:	f000 f8be 	bl	8025a94 <_free_r>
 8025918:	6a23      	ldr	r3, [r4, #32]
 802591a:	b11b      	cbz	r3, 8025924 <_reclaim_reent+0xb4>
 802591c:	4620      	mov	r0, r4
 802591e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8025922:	4718      	bx	r3
 8025924:	bd70      	pop	{r4, r5, r6, pc}
 8025926:	bf00      	nop
 8025928:	20000168 	.word	0x20000168

0802592c <_lseek_r>:
 802592c:	b538      	push	{r3, r4, r5, lr}
 802592e:	4d07      	ldr	r5, [pc, #28]	@ (802594c <_lseek_r+0x20>)
 8025930:	4604      	mov	r4, r0
 8025932:	4608      	mov	r0, r1
 8025934:	4611      	mov	r1, r2
 8025936:	2200      	movs	r2, #0
 8025938:	602a      	str	r2, [r5, #0]
 802593a:	461a      	mov	r2, r3
 802593c:	f7db fdff 	bl	800153e <_lseek>
 8025940:	1c43      	adds	r3, r0, #1
 8025942:	d102      	bne.n	802594a <_lseek_r+0x1e>
 8025944:	682b      	ldr	r3, [r5, #0]
 8025946:	b103      	cbz	r3, 802594a <_lseek_r+0x1e>
 8025948:	6023      	str	r3, [r4, #0]
 802594a:	bd38      	pop	{r3, r4, r5, pc}
 802594c:	20014c9c 	.word	0x20014c9c

08025950 <_read_r>:
 8025950:	b538      	push	{r3, r4, r5, lr}
 8025952:	4d07      	ldr	r5, [pc, #28]	@ (8025970 <_read_r+0x20>)
 8025954:	4604      	mov	r4, r0
 8025956:	4608      	mov	r0, r1
 8025958:	4611      	mov	r1, r2
 802595a:	2200      	movs	r2, #0
 802595c:	602a      	str	r2, [r5, #0]
 802595e:	461a      	mov	r2, r3
 8025960:	f7db fd8d 	bl	800147e <_read>
 8025964:	1c43      	adds	r3, r0, #1
 8025966:	d102      	bne.n	802596e <_read_r+0x1e>
 8025968:	682b      	ldr	r3, [r5, #0]
 802596a:	b103      	cbz	r3, 802596e <_read_r+0x1e>
 802596c:	6023      	str	r3, [r4, #0]
 802596e:	bd38      	pop	{r3, r4, r5, pc}
 8025970:	20014c9c 	.word	0x20014c9c

08025974 <_sbrk_r>:
 8025974:	b538      	push	{r3, r4, r5, lr}
 8025976:	4d06      	ldr	r5, [pc, #24]	@ (8025990 <_sbrk_r+0x1c>)
 8025978:	2300      	movs	r3, #0
 802597a:	4604      	mov	r4, r0
 802597c:	4608      	mov	r0, r1
 802597e:	602b      	str	r3, [r5, #0]
 8025980:	f7db fdea 	bl	8001558 <_sbrk>
 8025984:	1c43      	adds	r3, r0, #1
 8025986:	d102      	bne.n	802598e <_sbrk_r+0x1a>
 8025988:	682b      	ldr	r3, [r5, #0]
 802598a:	b103      	cbz	r3, 802598e <_sbrk_r+0x1a>
 802598c:	6023      	str	r3, [r4, #0]
 802598e:	bd38      	pop	{r3, r4, r5, pc}
 8025990:	20014c9c 	.word	0x20014c9c

08025994 <_write_r>:
 8025994:	b538      	push	{r3, r4, r5, lr}
 8025996:	4d07      	ldr	r5, [pc, #28]	@ (80259b4 <_write_r+0x20>)
 8025998:	4604      	mov	r4, r0
 802599a:	4608      	mov	r0, r1
 802599c:	4611      	mov	r1, r2
 802599e:	2200      	movs	r2, #0
 80259a0:	602a      	str	r2, [r5, #0]
 80259a2:	461a      	mov	r2, r3
 80259a4:	f7db fd88 	bl	80014b8 <_write>
 80259a8:	1c43      	adds	r3, r0, #1
 80259aa:	d102      	bne.n	80259b2 <_write_r+0x1e>
 80259ac:	682b      	ldr	r3, [r5, #0]
 80259ae:	b103      	cbz	r3, 80259b2 <_write_r+0x1e>
 80259b0:	6023      	str	r3, [r4, #0]
 80259b2:	bd38      	pop	{r3, r4, r5, pc}
 80259b4:	20014c9c 	.word	0x20014c9c

080259b8 <__errno>:
 80259b8:	4b01      	ldr	r3, [pc, #4]	@ (80259c0 <__errno+0x8>)
 80259ba:	6818      	ldr	r0, [r3, #0]
 80259bc:	4770      	bx	lr
 80259be:	bf00      	nop
 80259c0:	20000168 	.word	0x20000168

080259c4 <__libc_init_array>:
 80259c4:	b570      	push	{r4, r5, r6, lr}
 80259c6:	4d0d      	ldr	r5, [pc, #52]	@ (80259fc <__libc_init_array+0x38>)
 80259c8:	4c0d      	ldr	r4, [pc, #52]	@ (8025a00 <__libc_init_array+0x3c>)
 80259ca:	1b64      	subs	r4, r4, r5
 80259cc:	10a4      	asrs	r4, r4, #2
 80259ce:	2600      	movs	r6, #0
 80259d0:	42a6      	cmp	r6, r4
 80259d2:	d109      	bne.n	80259e8 <__libc_init_array+0x24>
 80259d4:	4d0b      	ldr	r5, [pc, #44]	@ (8025a04 <__libc_init_array+0x40>)
 80259d6:	4c0c      	ldr	r4, [pc, #48]	@ (8025a08 <__libc_init_array+0x44>)
 80259d8:	f000 fe62 	bl	80266a0 <_init>
 80259dc:	1b64      	subs	r4, r4, r5
 80259de:	10a4      	asrs	r4, r4, #2
 80259e0:	2600      	movs	r6, #0
 80259e2:	42a6      	cmp	r6, r4
 80259e4:	d105      	bne.n	80259f2 <__libc_init_array+0x2e>
 80259e6:	bd70      	pop	{r4, r5, r6, pc}
 80259e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80259ec:	4798      	blx	r3
 80259ee:	3601      	adds	r6, #1
 80259f0:	e7ee      	b.n	80259d0 <__libc_init_array+0xc>
 80259f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80259f6:	4798      	blx	r3
 80259f8:	3601      	adds	r6, #1
 80259fa:	e7f2      	b.n	80259e2 <__libc_init_array+0x1e>
 80259fc:	0802b12c 	.word	0x0802b12c
 8025a00:	0802b12c 	.word	0x0802b12c
 8025a04:	0802b12c 	.word	0x0802b12c
 8025a08:	0802b138 	.word	0x0802b138

08025a0c <__retarget_lock_init_recursive>:
 8025a0c:	4770      	bx	lr

08025a0e <__retarget_lock_acquire_recursive>:
 8025a0e:	4770      	bx	lr

08025a10 <__retarget_lock_release_recursive>:
 8025a10:	4770      	bx	lr

08025a12 <strcpy>:
 8025a12:	4603      	mov	r3, r0
 8025a14:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025a18:	f803 2b01 	strb.w	r2, [r3], #1
 8025a1c:	2a00      	cmp	r2, #0
 8025a1e:	d1f9      	bne.n	8025a14 <strcpy+0x2>
 8025a20:	4770      	bx	lr

08025a22 <memcpy>:
 8025a22:	440a      	add	r2, r1
 8025a24:	4291      	cmp	r1, r2
 8025a26:	f100 33ff 	add.w	r3, r0, #4294967295
 8025a2a:	d100      	bne.n	8025a2e <memcpy+0xc>
 8025a2c:	4770      	bx	lr
 8025a2e:	b510      	push	{r4, lr}
 8025a30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025a34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025a38:	4291      	cmp	r1, r2
 8025a3a:	d1f9      	bne.n	8025a30 <memcpy+0xe>
 8025a3c:	bd10      	pop	{r4, pc}
	...

08025a40 <__assert_func>:
 8025a40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025a42:	4614      	mov	r4, r2
 8025a44:	461a      	mov	r2, r3
 8025a46:	4b09      	ldr	r3, [pc, #36]	@ (8025a6c <__assert_func+0x2c>)
 8025a48:	681b      	ldr	r3, [r3, #0]
 8025a4a:	4605      	mov	r5, r0
 8025a4c:	68d8      	ldr	r0, [r3, #12]
 8025a4e:	b14c      	cbz	r4, 8025a64 <__assert_func+0x24>
 8025a50:	4b07      	ldr	r3, [pc, #28]	@ (8025a70 <__assert_func+0x30>)
 8025a52:	9100      	str	r1, [sp, #0]
 8025a54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025a58:	4906      	ldr	r1, [pc, #24]	@ (8025a74 <__assert_func+0x34>)
 8025a5a:	462b      	mov	r3, r5
 8025a5c:	f000 fd3e 	bl	80264dc <fiprintf>
 8025a60:	f000 fdd2 	bl	8026608 <abort>
 8025a64:	4b04      	ldr	r3, [pc, #16]	@ (8025a78 <__assert_func+0x38>)
 8025a66:	461c      	mov	r4, r3
 8025a68:	e7f3      	b.n	8025a52 <__assert_func+0x12>
 8025a6a:	bf00      	nop
 8025a6c:	20000168 	.word	0x20000168
 8025a70:	0802afb3 	.word	0x0802afb3
 8025a74:	0802afc0 	.word	0x0802afc0
 8025a78:	0802afee 	.word	0x0802afee

08025a7c <__env_lock>:
 8025a7c:	4801      	ldr	r0, [pc, #4]	@ (8025a84 <__env_lock+0x8>)
 8025a7e:	f7ff bfc6 	b.w	8025a0e <__retarget_lock_acquire_recursive>
 8025a82:	bf00      	nop
 8025a84:	20014ca0 	.word	0x20014ca0

08025a88 <__env_unlock>:
 8025a88:	4801      	ldr	r0, [pc, #4]	@ (8025a90 <__env_unlock+0x8>)
 8025a8a:	f7ff bfc1 	b.w	8025a10 <__retarget_lock_release_recursive>
 8025a8e:	bf00      	nop
 8025a90:	20014ca0 	.word	0x20014ca0

08025a94 <_free_r>:
 8025a94:	b538      	push	{r3, r4, r5, lr}
 8025a96:	4605      	mov	r5, r0
 8025a98:	2900      	cmp	r1, #0
 8025a9a:	d041      	beq.n	8025b20 <_free_r+0x8c>
 8025a9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025aa0:	1f0c      	subs	r4, r1, #4
 8025aa2:	2b00      	cmp	r3, #0
 8025aa4:	bfb8      	it	lt
 8025aa6:	18e4      	addlt	r4, r4, r3
 8025aa8:	f7ff fa48 	bl	8024f3c <__malloc_lock>
 8025aac:	4a1d      	ldr	r2, [pc, #116]	@ (8025b24 <_free_r+0x90>)
 8025aae:	6813      	ldr	r3, [r2, #0]
 8025ab0:	b933      	cbnz	r3, 8025ac0 <_free_r+0x2c>
 8025ab2:	6063      	str	r3, [r4, #4]
 8025ab4:	6014      	str	r4, [r2, #0]
 8025ab6:	4628      	mov	r0, r5
 8025ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025abc:	f7ff ba44 	b.w	8024f48 <__malloc_unlock>
 8025ac0:	42a3      	cmp	r3, r4
 8025ac2:	d908      	bls.n	8025ad6 <_free_r+0x42>
 8025ac4:	6820      	ldr	r0, [r4, #0]
 8025ac6:	1821      	adds	r1, r4, r0
 8025ac8:	428b      	cmp	r3, r1
 8025aca:	bf01      	itttt	eq
 8025acc:	6819      	ldreq	r1, [r3, #0]
 8025ace:	685b      	ldreq	r3, [r3, #4]
 8025ad0:	1809      	addeq	r1, r1, r0
 8025ad2:	6021      	streq	r1, [r4, #0]
 8025ad4:	e7ed      	b.n	8025ab2 <_free_r+0x1e>
 8025ad6:	461a      	mov	r2, r3
 8025ad8:	685b      	ldr	r3, [r3, #4]
 8025ada:	b10b      	cbz	r3, 8025ae0 <_free_r+0x4c>
 8025adc:	42a3      	cmp	r3, r4
 8025ade:	d9fa      	bls.n	8025ad6 <_free_r+0x42>
 8025ae0:	6811      	ldr	r1, [r2, #0]
 8025ae2:	1850      	adds	r0, r2, r1
 8025ae4:	42a0      	cmp	r0, r4
 8025ae6:	d10b      	bne.n	8025b00 <_free_r+0x6c>
 8025ae8:	6820      	ldr	r0, [r4, #0]
 8025aea:	4401      	add	r1, r0
 8025aec:	1850      	adds	r0, r2, r1
 8025aee:	4283      	cmp	r3, r0
 8025af0:	6011      	str	r1, [r2, #0]
 8025af2:	d1e0      	bne.n	8025ab6 <_free_r+0x22>
 8025af4:	6818      	ldr	r0, [r3, #0]
 8025af6:	685b      	ldr	r3, [r3, #4]
 8025af8:	6053      	str	r3, [r2, #4]
 8025afa:	4408      	add	r0, r1
 8025afc:	6010      	str	r0, [r2, #0]
 8025afe:	e7da      	b.n	8025ab6 <_free_r+0x22>
 8025b00:	d902      	bls.n	8025b08 <_free_r+0x74>
 8025b02:	230c      	movs	r3, #12
 8025b04:	602b      	str	r3, [r5, #0]
 8025b06:	e7d6      	b.n	8025ab6 <_free_r+0x22>
 8025b08:	6820      	ldr	r0, [r4, #0]
 8025b0a:	1821      	adds	r1, r4, r0
 8025b0c:	428b      	cmp	r3, r1
 8025b0e:	bf04      	itt	eq
 8025b10:	6819      	ldreq	r1, [r3, #0]
 8025b12:	685b      	ldreq	r3, [r3, #4]
 8025b14:	6063      	str	r3, [r4, #4]
 8025b16:	bf04      	itt	eq
 8025b18:	1809      	addeq	r1, r1, r0
 8025b1a:	6021      	streq	r1, [r4, #0]
 8025b1c:	6054      	str	r4, [r2, #4]
 8025b1e:	e7ca      	b.n	8025ab6 <_free_r+0x22>
 8025b20:	bd38      	pop	{r3, r4, r5, pc}
 8025b22:	bf00      	nop
 8025b24:	20014b5c 	.word	0x20014b5c

08025b28 <_malloc_usable_size_r>:
 8025b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025b2c:	1f18      	subs	r0, r3, #4
 8025b2e:	2b00      	cmp	r3, #0
 8025b30:	bfbc      	itt	lt
 8025b32:	580b      	ldrlt	r3, [r1, r0]
 8025b34:	18c0      	addlt	r0, r0, r3
 8025b36:	4770      	bx	lr

08025b38 <__ssputs_r>:
 8025b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025b3c:	688e      	ldr	r6, [r1, #8]
 8025b3e:	461f      	mov	r7, r3
 8025b40:	42be      	cmp	r6, r7
 8025b42:	680b      	ldr	r3, [r1, #0]
 8025b44:	4682      	mov	sl, r0
 8025b46:	460c      	mov	r4, r1
 8025b48:	4690      	mov	r8, r2
 8025b4a:	d82d      	bhi.n	8025ba8 <__ssputs_r+0x70>
 8025b4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8025b50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8025b54:	d026      	beq.n	8025ba4 <__ssputs_r+0x6c>
 8025b56:	6965      	ldr	r5, [r4, #20]
 8025b58:	6909      	ldr	r1, [r1, #16]
 8025b5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025b5e:	eba3 0901 	sub.w	r9, r3, r1
 8025b62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8025b66:	1c7b      	adds	r3, r7, #1
 8025b68:	444b      	add	r3, r9
 8025b6a:	106d      	asrs	r5, r5, #1
 8025b6c:	429d      	cmp	r5, r3
 8025b6e:	bf38      	it	cc
 8025b70:	461d      	movcc	r5, r3
 8025b72:	0553      	lsls	r3, r2, #21
 8025b74:	d527      	bpl.n	8025bc6 <__ssputs_r+0x8e>
 8025b76:	4629      	mov	r1, r5
 8025b78:	f7ff f960 	bl	8024e3c <_malloc_r>
 8025b7c:	4606      	mov	r6, r0
 8025b7e:	b360      	cbz	r0, 8025bda <__ssputs_r+0xa2>
 8025b80:	6921      	ldr	r1, [r4, #16]
 8025b82:	464a      	mov	r2, r9
 8025b84:	f7ff ff4d 	bl	8025a22 <memcpy>
 8025b88:	89a3      	ldrh	r3, [r4, #12]
 8025b8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8025b8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8025b92:	81a3      	strh	r3, [r4, #12]
 8025b94:	6126      	str	r6, [r4, #16]
 8025b96:	6165      	str	r5, [r4, #20]
 8025b98:	444e      	add	r6, r9
 8025b9a:	eba5 0509 	sub.w	r5, r5, r9
 8025b9e:	6026      	str	r6, [r4, #0]
 8025ba0:	60a5      	str	r5, [r4, #8]
 8025ba2:	463e      	mov	r6, r7
 8025ba4:	42be      	cmp	r6, r7
 8025ba6:	d900      	bls.n	8025baa <__ssputs_r+0x72>
 8025ba8:	463e      	mov	r6, r7
 8025baa:	6820      	ldr	r0, [r4, #0]
 8025bac:	4632      	mov	r2, r6
 8025bae:	4641      	mov	r1, r8
 8025bb0:	f7ff fdf6 	bl	80257a0 <memmove>
 8025bb4:	68a3      	ldr	r3, [r4, #8]
 8025bb6:	1b9b      	subs	r3, r3, r6
 8025bb8:	60a3      	str	r3, [r4, #8]
 8025bba:	6823      	ldr	r3, [r4, #0]
 8025bbc:	4433      	add	r3, r6
 8025bbe:	6023      	str	r3, [r4, #0]
 8025bc0:	2000      	movs	r0, #0
 8025bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025bc6:	462a      	mov	r2, r5
 8025bc8:	f7ff fa38 	bl	802503c <_realloc_r>
 8025bcc:	4606      	mov	r6, r0
 8025bce:	2800      	cmp	r0, #0
 8025bd0:	d1e0      	bne.n	8025b94 <__ssputs_r+0x5c>
 8025bd2:	6921      	ldr	r1, [r4, #16]
 8025bd4:	4650      	mov	r0, sl
 8025bd6:	f7ff ff5d 	bl	8025a94 <_free_r>
 8025bda:	230c      	movs	r3, #12
 8025bdc:	f8ca 3000 	str.w	r3, [sl]
 8025be0:	89a3      	ldrh	r3, [r4, #12]
 8025be2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025be6:	81a3      	strh	r3, [r4, #12]
 8025be8:	f04f 30ff 	mov.w	r0, #4294967295
 8025bec:	e7e9      	b.n	8025bc2 <__ssputs_r+0x8a>
	...

08025bf0 <_svfiprintf_r>:
 8025bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025bf4:	4698      	mov	r8, r3
 8025bf6:	898b      	ldrh	r3, [r1, #12]
 8025bf8:	061b      	lsls	r3, r3, #24
 8025bfa:	b09d      	sub	sp, #116	@ 0x74
 8025bfc:	4607      	mov	r7, r0
 8025bfe:	460d      	mov	r5, r1
 8025c00:	4614      	mov	r4, r2
 8025c02:	d510      	bpl.n	8025c26 <_svfiprintf_r+0x36>
 8025c04:	690b      	ldr	r3, [r1, #16]
 8025c06:	b973      	cbnz	r3, 8025c26 <_svfiprintf_r+0x36>
 8025c08:	2140      	movs	r1, #64	@ 0x40
 8025c0a:	f7ff f917 	bl	8024e3c <_malloc_r>
 8025c0e:	6028      	str	r0, [r5, #0]
 8025c10:	6128      	str	r0, [r5, #16]
 8025c12:	b930      	cbnz	r0, 8025c22 <_svfiprintf_r+0x32>
 8025c14:	230c      	movs	r3, #12
 8025c16:	603b      	str	r3, [r7, #0]
 8025c18:	f04f 30ff 	mov.w	r0, #4294967295
 8025c1c:	b01d      	add	sp, #116	@ 0x74
 8025c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025c22:	2340      	movs	r3, #64	@ 0x40
 8025c24:	616b      	str	r3, [r5, #20]
 8025c26:	2300      	movs	r3, #0
 8025c28:	9309      	str	r3, [sp, #36]	@ 0x24
 8025c2a:	2320      	movs	r3, #32
 8025c2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8025c30:	f8cd 800c 	str.w	r8, [sp, #12]
 8025c34:	2330      	movs	r3, #48	@ 0x30
 8025c36:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8025dd4 <_svfiprintf_r+0x1e4>
 8025c3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8025c3e:	f04f 0901 	mov.w	r9, #1
 8025c42:	4623      	mov	r3, r4
 8025c44:	469a      	mov	sl, r3
 8025c46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025c4a:	b10a      	cbz	r2, 8025c50 <_svfiprintf_r+0x60>
 8025c4c:	2a25      	cmp	r2, #37	@ 0x25
 8025c4e:	d1f9      	bne.n	8025c44 <_svfiprintf_r+0x54>
 8025c50:	ebba 0b04 	subs.w	fp, sl, r4
 8025c54:	d00b      	beq.n	8025c6e <_svfiprintf_r+0x7e>
 8025c56:	465b      	mov	r3, fp
 8025c58:	4622      	mov	r2, r4
 8025c5a:	4629      	mov	r1, r5
 8025c5c:	4638      	mov	r0, r7
 8025c5e:	f7ff ff6b 	bl	8025b38 <__ssputs_r>
 8025c62:	3001      	adds	r0, #1
 8025c64:	f000 80a7 	beq.w	8025db6 <_svfiprintf_r+0x1c6>
 8025c68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025c6a:	445a      	add	r2, fp
 8025c6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8025c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8025c72:	2b00      	cmp	r3, #0
 8025c74:	f000 809f 	beq.w	8025db6 <_svfiprintf_r+0x1c6>
 8025c78:	2300      	movs	r3, #0
 8025c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8025c7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025c82:	f10a 0a01 	add.w	sl, sl, #1
 8025c86:	9304      	str	r3, [sp, #16]
 8025c88:	9307      	str	r3, [sp, #28]
 8025c8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8025c8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8025c90:	4654      	mov	r4, sl
 8025c92:	2205      	movs	r2, #5
 8025c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025c98:	484e      	ldr	r0, [pc, #312]	@ (8025dd4 <_svfiprintf_r+0x1e4>)
 8025c9a:	f7da fae9 	bl	8000270 <memchr>
 8025c9e:	9a04      	ldr	r2, [sp, #16]
 8025ca0:	b9d8      	cbnz	r0, 8025cda <_svfiprintf_r+0xea>
 8025ca2:	06d0      	lsls	r0, r2, #27
 8025ca4:	bf44      	itt	mi
 8025ca6:	2320      	movmi	r3, #32
 8025ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025cac:	0711      	lsls	r1, r2, #28
 8025cae:	bf44      	itt	mi
 8025cb0:	232b      	movmi	r3, #43	@ 0x2b
 8025cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025cb6:	f89a 3000 	ldrb.w	r3, [sl]
 8025cba:	2b2a      	cmp	r3, #42	@ 0x2a
 8025cbc:	d015      	beq.n	8025cea <_svfiprintf_r+0xfa>
 8025cbe:	9a07      	ldr	r2, [sp, #28]
 8025cc0:	4654      	mov	r4, sl
 8025cc2:	2000      	movs	r0, #0
 8025cc4:	f04f 0c0a 	mov.w	ip, #10
 8025cc8:	4621      	mov	r1, r4
 8025cca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025cce:	3b30      	subs	r3, #48	@ 0x30
 8025cd0:	2b09      	cmp	r3, #9
 8025cd2:	d94b      	bls.n	8025d6c <_svfiprintf_r+0x17c>
 8025cd4:	b1b0      	cbz	r0, 8025d04 <_svfiprintf_r+0x114>
 8025cd6:	9207      	str	r2, [sp, #28]
 8025cd8:	e014      	b.n	8025d04 <_svfiprintf_r+0x114>
 8025cda:	eba0 0308 	sub.w	r3, r0, r8
 8025cde:	fa09 f303 	lsl.w	r3, r9, r3
 8025ce2:	4313      	orrs	r3, r2
 8025ce4:	9304      	str	r3, [sp, #16]
 8025ce6:	46a2      	mov	sl, r4
 8025ce8:	e7d2      	b.n	8025c90 <_svfiprintf_r+0xa0>
 8025cea:	9b03      	ldr	r3, [sp, #12]
 8025cec:	1d19      	adds	r1, r3, #4
 8025cee:	681b      	ldr	r3, [r3, #0]
 8025cf0:	9103      	str	r1, [sp, #12]
 8025cf2:	2b00      	cmp	r3, #0
 8025cf4:	bfbb      	ittet	lt
 8025cf6:	425b      	neglt	r3, r3
 8025cf8:	f042 0202 	orrlt.w	r2, r2, #2
 8025cfc:	9307      	strge	r3, [sp, #28]
 8025cfe:	9307      	strlt	r3, [sp, #28]
 8025d00:	bfb8      	it	lt
 8025d02:	9204      	strlt	r2, [sp, #16]
 8025d04:	7823      	ldrb	r3, [r4, #0]
 8025d06:	2b2e      	cmp	r3, #46	@ 0x2e
 8025d08:	d10a      	bne.n	8025d20 <_svfiprintf_r+0x130>
 8025d0a:	7863      	ldrb	r3, [r4, #1]
 8025d0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8025d0e:	d132      	bne.n	8025d76 <_svfiprintf_r+0x186>
 8025d10:	9b03      	ldr	r3, [sp, #12]
 8025d12:	1d1a      	adds	r2, r3, #4
 8025d14:	681b      	ldr	r3, [r3, #0]
 8025d16:	9203      	str	r2, [sp, #12]
 8025d18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8025d1c:	3402      	adds	r4, #2
 8025d1e:	9305      	str	r3, [sp, #20]
 8025d20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8025de4 <_svfiprintf_r+0x1f4>
 8025d24:	7821      	ldrb	r1, [r4, #0]
 8025d26:	2203      	movs	r2, #3
 8025d28:	4650      	mov	r0, sl
 8025d2a:	f7da faa1 	bl	8000270 <memchr>
 8025d2e:	b138      	cbz	r0, 8025d40 <_svfiprintf_r+0x150>
 8025d30:	9b04      	ldr	r3, [sp, #16]
 8025d32:	eba0 000a 	sub.w	r0, r0, sl
 8025d36:	2240      	movs	r2, #64	@ 0x40
 8025d38:	4082      	lsls	r2, r0
 8025d3a:	4313      	orrs	r3, r2
 8025d3c:	3401      	adds	r4, #1
 8025d3e:	9304      	str	r3, [sp, #16]
 8025d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025d44:	4824      	ldr	r0, [pc, #144]	@ (8025dd8 <_svfiprintf_r+0x1e8>)
 8025d46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8025d4a:	2206      	movs	r2, #6
 8025d4c:	f7da fa90 	bl	8000270 <memchr>
 8025d50:	2800      	cmp	r0, #0
 8025d52:	d036      	beq.n	8025dc2 <_svfiprintf_r+0x1d2>
 8025d54:	4b21      	ldr	r3, [pc, #132]	@ (8025ddc <_svfiprintf_r+0x1ec>)
 8025d56:	bb1b      	cbnz	r3, 8025da0 <_svfiprintf_r+0x1b0>
 8025d58:	9b03      	ldr	r3, [sp, #12]
 8025d5a:	3307      	adds	r3, #7
 8025d5c:	f023 0307 	bic.w	r3, r3, #7
 8025d60:	3308      	adds	r3, #8
 8025d62:	9303      	str	r3, [sp, #12]
 8025d64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025d66:	4433      	add	r3, r6
 8025d68:	9309      	str	r3, [sp, #36]	@ 0x24
 8025d6a:	e76a      	b.n	8025c42 <_svfiprintf_r+0x52>
 8025d6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8025d70:	460c      	mov	r4, r1
 8025d72:	2001      	movs	r0, #1
 8025d74:	e7a8      	b.n	8025cc8 <_svfiprintf_r+0xd8>
 8025d76:	2300      	movs	r3, #0
 8025d78:	3401      	adds	r4, #1
 8025d7a:	9305      	str	r3, [sp, #20]
 8025d7c:	4619      	mov	r1, r3
 8025d7e:	f04f 0c0a 	mov.w	ip, #10
 8025d82:	4620      	mov	r0, r4
 8025d84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025d88:	3a30      	subs	r2, #48	@ 0x30
 8025d8a:	2a09      	cmp	r2, #9
 8025d8c:	d903      	bls.n	8025d96 <_svfiprintf_r+0x1a6>
 8025d8e:	2b00      	cmp	r3, #0
 8025d90:	d0c6      	beq.n	8025d20 <_svfiprintf_r+0x130>
 8025d92:	9105      	str	r1, [sp, #20]
 8025d94:	e7c4      	b.n	8025d20 <_svfiprintf_r+0x130>
 8025d96:	fb0c 2101 	mla	r1, ip, r1, r2
 8025d9a:	4604      	mov	r4, r0
 8025d9c:	2301      	movs	r3, #1
 8025d9e:	e7f0      	b.n	8025d82 <_svfiprintf_r+0x192>
 8025da0:	ab03      	add	r3, sp, #12
 8025da2:	9300      	str	r3, [sp, #0]
 8025da4:	462a      	mov	r2, r5
 8025da6:	4b0e      	ldr	r3, [pc, #56]	@ (8025de0 <_svfiprintf_r+0x1f0>)
 8025da8:	a904      	add	r1, sp, #16
 8025daa:	4638      	mov	r0, r7
 8025dac:	f3af 8000 	nop.w
 8025db0:	1c42      	adds	r2, r0, #1
 8025db2:	4606      	mov	r6, r0
 8025db4:	d1d6      	bne.n	8025d64 <_svfiprintf_r+0x174>
 8025db6:	89ab      	ldrh	r3, [r5, #12]
 8025db8:	065b      	lsls	r3, r3, #25
 8025dba:	f53f af2d 	bmi.w	8025c18 <_svfiprintf_r+0x28>
 8025dbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025dc0:	e72c      	b.n	8025c1c <_svfiprintf_r+0x2c>
 8025dc2:	ab03      	add	r3, sp, #12
 8025dc4:	9300      	str	r3, [sp, #0]
 8025dc6:	462a      	mov	r2, r5
 8025dc8:	4b05      	ldr	r3, [pc, #20]	@ (8025de0 <_svfiprintf_r+0x1f0>)
 8025dca:	a904      	add	r1, sp, #16
 8025dcc:	4638      	mov	r0, r7
 8025dce:	f000 f9bb 	bl	8026148 <_printf_i>
 8025dd2:	e7ed      	b.n	8025db0 <_svfiprintf_r+0x1c0>
 8025dd4:	0802afef 	.word	0x0802afef
 8025dd8:	0802aff9 	.word	0x0802aff9
 8025ddc:	00000000 	.word	0x00000000
 8025de0:	08025b39 	.word	0x08025b39
 8025de4:	0802aff5 	.word	0x0802aff5

08025de8 <__sfputc_r>:
 8025de8:	6893      	ldr	r3, [r2, #8]
 8025dea:	3b01      	subs	r3, #1
 8025dec:	2b00      	cmp	r3, #0
 8025dee:	b410      	push	{r4}
 8025df0:	6093      	str	r3, [r2, #8]
 8025df2:	da08      	bge.n	8025e06 <__sfputc_r+0x1e>
 8025df4:	6994      	ldr	r4, [r2, #24]
 8025df6:	42a3      	cmp	r3, r4
 8025df8:	db01      	blt.n	8025dfe <__sfputc_r+0x16>
 8025dfa:	290a      	cmp	r1, #10
 8025dfc:	d103      	bne.n	8025e06 <__sfputc_r+0x1e>
 8025dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025e02:	f7ff bc29 	b.w	8025658 <__swbuf_r>
 8025e06:	6813      	ldr	r3, [r2, #0]
 8025e08:	1c58      	adds	r0, r3, #1
 8025e0a:	6010      	str	r0, [r2, #0]
 8025e0c:	7019      	strb	r1, [r3, #0]
 8025e0e:	4608      	mov	r0, r1
 8025e10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025e14:	4770      	bx	lr

08025e16 <__sfputs_r>:
 8025e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025e18:	4606      	mov	r6, r0
 8025e1a:	460f      	mov	r7, r1
 8025e1c:	4614      	mov	r4, r2
 8025e1e:	18d5      	adds	r5, r2, r3
 8025e20:	42ac      	cmp	r4, r5
 8025e22:	d101      	bne.n	8025e28 <__sfputs_r+0x12>
 8025e24:	2000      	movs	r0, #0
 8025e26:	e007      	b.n	8025e38 <__sfputs_r+0x22>
 8025e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025e2c:	463a      	mov	r2, r7
 8025e2e:	4630      	mov	r0, r6
 8025e30:	f7ff ffda 	bl	8025de8 <__sfputc_r>
 8025e34:	1c43      	adds	r3, r0, #1
 8025e36:	d1f3      	bne.n	8025e20 <__sfputs_r+0xa>
 8025e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025e3c <_vfiprintf_r>:
 8025e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e40:	460d      	mov	r5, r1
 8025e42:	b09d      	sub	sp, #116	@ 0x74
 8025e44:	4614      	mov	r4, r2
 8025e46:	4698      	mov	r8, r3
 8025e48:	4606      	mov	r6, r0
 8025e4a:	b118      	cbz	r0, 8025e54 <_vfiprintf_r+0x18>
 8025e4c:	6a03      	ldr	r3, [r0, #32]
 8025e4e:	b90b      	cbnz	r3, 8025e54 <_vfiprintf_r+0x18>
 8025e50:	f7ff faaa 	bl	80253a8 <__sinit>
 8025e54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8025e56:	07d9      	lsls	r1, r3, #31
 8025e58:	d405      	bmi.n	8025e66 <_vfiprintf_r+0x2a>
 8025e5a:	89ab      	ldrh	r3, [r5, #12]
 8025e5c:	059a      	lsls	r2, r3, #22
 8025e5e:	d402      	bmi.n	8025e66 <_vfiprintf_r+0x2a>
 8025e60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8025e62:	f7ff fdd4 	bl	8025a0e <__retarget_lock_acquire_recursive>
 8025e66:	89ab      	ldrh	r3, [r5, #12]
 8025e68:	071b      	lsls	r3, r3, #28
 8025e6a:	d501      	bpl.n	8025e70 <_vfiprintf_r+0x34>
 8025e6c:	692b      	ldr	r3, [r5, #16]
 8025e6e:	b99b      	cbnz	r3, 8025e98 <_vfiprintf_r+0x5c>
 8025e70:	4629      	mov	r1, r5
 8025e72:	4630      	mov	r0, r6
 8025e74:	f7ff fc2e 	bl	80256d4 <__swsetup_r>
 8025e78:	b170      	cbz	r0, 8025e98 <_vfiprintf_r+0x5c>
 8025e7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8025e7c:	07dc      	lsls	r4, r3, #31
 8025e7e:	d504      	bpl.n	8025e8a <_vfiprintf_r+0x4e>
 8025e80:	f04f 30ff 	mov.w	r0, #4294967295
 8025e84:	b01d      	add	sp, #116	@ 0x74
 8025e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e8a:	89ab      	ldrh	r3, [r5, #12]
 8025e8c:	0598      	lsls	r0, r3, #22
 8025e8e:	d4f7      	bmi.n	8025e80 <_vfiprintf_r+0x44>
 8025e90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8025e92:	f7ff fdbd 	bl	8025a10 <__retarget_lock_release_recursive>
 8025e96:	e7f3      	b.n	8025e80 <_vfiprintf_r+0x44>
 8025e98:	2300      	movs	r3, #0
 8025e9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8025e9c:	2320      	movs	r3, #32
 8025e9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8025ea2:	f8cd 800c 	str.w	r8, [sp, #12]
 8025ea6:	2330      	movs	r3, #48	@ 0x30
 8025ea8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8026058 <_vfiprintf_r+0x21c>
 8025eac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8025eb0:	f04f 0901 	mov.w	r9, #1
 8025eb4:	4623      	mov	r3, r4
 8025eb6:	469a      	mov	sl, r3
 8025eb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025ebc:	b10a      	cbz	r2, 8025ec2 <_vfiprintf_r+0x86>
 8025ebe:	2a25      	cmp	r2, #37	@ 0x25
 8025ec0:	d1f9      	bne.n	8025eb6 <_vfiprintf_r+0x7a>
 8025ec2:	ebba 0b04 	subs.w	fp, sl, r4
 8025ec6:	d00b      	beq.n	8025ee0 <_vfiprintf_r+0xa4>
 8025ec8:	465b      	mov	r3, fp
 8025eca:	4622      	mov	r2, r4
 8025ecc:	4629      	mov	r1, r5
 8025ece:	4630      	mov	r0, r6
 8025ed0:	f7ff ffa1 	bl	8025e16 <__sfputs_r>
 8025ed4:	3001      	adds	r0, #1
 8025ed6:	f000 80a7 	beq.w	8026028 <_vfiprintf_r+0x1ec>
 8025eda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025edc:	445a      	add	r2, fp
 8025ede:	9209      	str	r2, [sp, #36]	@ 0x24
 8025ee0:	f89a 3000 	ldrb.w	r3, [sl]
 8025ee4:	2b00      	cmp	r3, #0
 8025ee6:	f000 809f 	beq.w	8026028 <_vfiprintf_r+0x1ec>
 8025eea:	2300      	movs	r3, #0
 8025eec:	f04f 32ff 	mov.w	r2, #4294967295
 8025ef0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025ef4:	f10a 0a01 	add.w	sl, sl, #1
 8025ef8:	9304      	str	r3, [sp, #16]
 8025efa:	9307      	str	r3, [sp, #28]
 8025efc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8025f00:	931a      	str	r3, [sp, #104]	@ 0x68
 8025f02:	4654      	mov	r4, sl
 8025f04:	2205      	movs	r2, #5
 8025f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025f0a:	4853      	ldr	r0, [pc, #332]	@ (8026058 <_vfiprintf_r+0x21c>)
 8025f0c:	f7da f9b0 	bl	8000270 <memchr>
 8025f10:	9a04      	ldr	r2, [sp, #16]
 8025f12:	b9d8      	cbnz	r0, 8025f4c <_vfiprintf_r+0x110>
 8025f14:	06d1      	lsls	r1, r2, #27
 8025f16:	bf44      	itt	mi
 8025f18:	2320      	movmi	r3, #32
 8025f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025f1e:	0713      	lsls	r3, r2, #28
 8025f20:	bf44      	itt	mi
 8025f22:	232b      	movmi	r3, #43	@ 0x2b
 8025f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025f28:	f89a 3000 	ldrb.w	r3, [sl]
 8025f2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8025f2e:	d015      	beq.n	8025f5c <_vfiprintf_r+0x120>
 8025f30:	9a07      	ldr	r2, [sp, #28]
 8025f32:	4654      	mov	r4, sl
 8025f34:	2000      	movs	r0, #0
 8025f36:	f04f 0c0a 	mov.w	ip, #10
 8025f3a:	4621      	mov	r1, r4
 8025f3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025f40:	3b30      	subs	r3, #48	@ 0x30
 8025f42:	2b09      	cmp	r3, #9
 8025f44:	d94b      	bls.n	8025fde <_vfiprintf_r+0x1a2>
 8025f46:	b1b0      	cbz	r0, 8025f76 <_vfiprintf_r+0x13a>
 8025f48:	9207      	str	r2, [sp, #28]
 8025f4a:	e014      	b.n	8025f76 <_vfiprintf_r+0x13a>
 8025f4c:	eba0 0308 	sub.w	r3, r0, r8
 8025f50:	fa09 f303 	lsl.w	r3, r9, r3
 8025f54:	4313      	orrs	r3, r2
 8025f56:	9304      	str	r3, [sp, #16]
 8025f58:	46a2      	mov	sl, r4
 8025f5a:	e7d2      	b.n	8025f02 <_vfiprintf_r+0xc6>
 8025f5c:	9b03      	ldr	r3, [sp, #12]
 8025f5e:	1d19      	adds	r1, r3, #4
 8025f60:	681b      	ldr	r3, [r3, #0]
 8025f62:	9103      	str	r1, [sp, #12]
 8025f64:	2b00      	cmp	r3, #0
 8025f66:	bfbb      	ittet	lt
 8025f68:	425b      	neglt	r3, r3
 8025f6a:	f042 0202 	orrlt.w	r2, r2, #2
 8025f6e:	9307      	strge	r3, [sp, #28]
 8025f70:	9307      	strlt	r3, [sp, #28]
 8025f72:	bfb8      	it	lt
 8025f74:	9204      	strlt	r2, [sp, #16]
 8025f76:	7823      	ldrb	r3, [r4, #0]
 8025f78:	2b2e      	cmp	r3, #46	@ 0x2e
 8025f7a:	d10a      	bne.n	8025f92 <_vfiprintf_r+0x156>
 8025f7c:	7863      	ldrb	r3, [r4, #1]
 8025f7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8025f80:	d132      	bne.n	8025fe8 <_vfiprintf_r+0x1ac>
 8025f82:	9b03      	ldr	r3, [sp, #12]
 8025f84:	1d1a      	adds	r2, r3, #4
 8025f86:	681b      	ldr	r3, [r3, #0]
 8025f88:	9203      	str	r2, [sp, #12]
 8025f8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8025f8e:	3402      	adds	r4, #2
 8025f90:	9305      	str	r3, [sp, #20]
 8025f92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8026068 <_vfiprintf_r+0x22c>
 8025f96:	7821      	ldrb	r1, [r4, #0]
 8025f98:	2203      	movs	r2, #3
 8025f9a:	4650      	mov	r0, sl
 8025f9c:	f7da f968 	bl	8000270 <memchr>
 8025fa0:	b138      	cbz	r0, 8025fb2 <_vfiprintf_r+0x176>
 8025fa2:	9b04      	ldr	r3, [sp, #16]
 8025fa4:	eba0 000a 	sub.w	r0, r0, sl
 8025fa8:	2240      	movs	r2, #64	@ 0x40
 8025faa:	4082      	lsls	r2, r0
 8025fac:	4313      	orrs	r3, r2
 8025fae:	3401      	adds	r4, #1
 8025fb0:	9304      	str	r3, [sp, #16]
 8025fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025fb6:	4829      	ldr	r0, [pc, #164]	@ (802605c <_vfiprintf_r+0x220>)
 8025fb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8025fbc:	2206      	movs	r2, #6
 8025fbe:	f7da f957 	bl	8000270 <memchr>
 8025fc2:	2800      	cmp	r0, #0
 8025fc4:	d03f      	beq.n	8026046 <_vfiprintf_r+0x20a>
 8025fc6:	4b26      	ldr	r3, [pc, #152]	@ (8026060 <_vfiprintf_r+0x224>)
 8025fc8:	bb1b      	cbnz	r3, 8026012 <_vfiprintf_r+0x1d6>
 8025fca:	9b03      	ldr	r3, [sp, #12]
 8025fcc:	3307      	adds	r3, #7
 8025fce:	f023 0307 	bic.w	r3, r3, #7
 8025fd2:	3308      	adds	r3, #8
 8025fd4:	9303      	str	r3, [sp, #12]
 8025fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025fd8:	443b      	add	r3, r7
 8025fda:	9309      	str	r3, [sp, #36]	@ 0x24
 8025fdc:	e76a      	b.n	8025eb4 <_vfiprintf_r+0x78>
 8025fde:	fb0c 3202 	mla	r2, ip, r2, r3
 8025fe2:	460c      	mov	r4, r1
 8025fe4:	2001      	movs	r0, #1
 8025fe6:	e7a8      	b.n	8025f3a <_vfiprintf_r+0xfe>
 8025fe8:	2300      	movs	r3, #0
 8025fea:	3401      	adds	r4, #1
 8025fec:	9305      	str	r3, [sp, #20]
 8025fee:	4619      	mov	r1, r3
 8025ff0:	f04f 0c0a 	mov.w	ip, #10
 8025ff4:	4620      	mov	r0, r4
 8025ff6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025ffa:	3a30      	subs	r2, #48	@ 0x30
 8025ffc:	2a09      	cmp	r2, #9
 8025ffe:	d903      	bls.n	8026008 <_vfiprintf_r+0x1cc>
 8026000:	2b00      	cmp	r3, #0
 8026002:	d0c6      	beq.n	8025f92 <_vfiprintf_r+0x156>
 8026004:	9105      	str	r1, [sp, #20]
 8026006:	e7c4      	b.n	8025f92 <_vfiprintf_r+0x156>
 8026008:	fb0c 2101 	mla	r1, ip, r1, r2
 802600c:	4604      	mov	r4, r0
 802600e:	2301      	movs	r3, #1
 8026010:	e7f0      	b.n	8025ff4 <_vfiprintf_r+0x1b8>
 8026012:	ab03      	add	r3, sp, #12
 8026014:	9300      	str	r3, [sp, #0]
 8026016:	462a      	mov	r2, r5
 8026018:	4b12      	ldr	r3, [pc, #72]	@ (8026064 <_vfiprintf_r+0x228>)
 802601a:	a904      	add	r1, sp, #16
 802601c:	4630      	mov	r0, r6
 802601e:	f3af 8000 	nop.w
 8026022:	4607      	mov	r7, r0
 8026024:	1c78      	adds	r0, r7, #1
 8026026:	d1d6      	bne.n	8025fd6 <_vfiprintf_r+0x19a>
 8026028:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802602a:	07d9      	lsls	r1, r3, #31
 802602c:	d405      	bmi.n	802603a <_vfiprintf_r+0x1fe>
 802602e:	89ab      	ldrh	r3, [r5, #12]
 8026030:	059a      	lsls	r2, r3, #22
 8026032:	d402      	bmi.n	802603a <_vfiprintf_r+0x1fe>
 8026034:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8026036:	f7ff fceb 	bl	8025a10 <__retarget_lock_release_recursive>
 802603a:	89ab      	ldrh	r3, [r5, #12]
 802603c:	065b      	lsls	r3, r3, #25
 802603e:	f53f af1f 	bmi.w	8025e80 <_vfiprintf_r+0x44>
 8026042:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8026044:	e71e      	b.n	8025e84 <_vfiprintf_r+0x48>
 8026046:	ab03      	add	r3, sp, #12
 8026048:	9300      	str	r3, [sp, #0]
 802604a:	462a      	mov	r2, r5
 802604c:	4b05      	ldr	r3, [pc, #20]	@ (8026064 <_vfiprintf_r+0x228>)
 802604e:	a904      	add	r1, sp, #16
 8026050:	4630      	mov	r0, r6
 8026052:	f000 f879 	bl	8026148 <_printf_i>
 8026056:	e7e4      	b.n	8026022 <_vfiprintf_r+0x1e6>
 8026058:	0802afef 	.word	0x0802afef
 802605c:	0802aff9 	.word	0x0802aff9
 8026060:	00000000 	.word	0x00000000
 8026064:	08025e17 	.word	0x08025e17
 8026068:	0802aff5 	.word	0x0802aff5

0802606c <_printf_common>:
 802606c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026070:	4616      	mov	r6, r2
 8026072:	4698      	mov	r8, r3
 8026074:	688a      	ldr	r2, [r1, #8]
 8026076:	690b      	ldr	r3, [r1, #16]
 8026078:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802607c:	4293      	cmp	r3, r2
 802607e:	bfb8      	it	lt
 8026080:	4613      	movlt	r3, r2
 8026082:	6033      	str	r3, [r6, #0]
 8026084:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8026088:	4607      	mov	r7, r0
 802608a:	460c      	mov	r4, r1
 802608c:	b10a      	cbz	r2, 8026092 <_printf_common+0x26>
 802608e:	3301      	adds	r3, #1
 8026090:	6033      	str	r3, [r6, #0]
 8026092:	6823      	ldr	r3, [r4, #0]
 8026094:	0699      	lsls	r1, r3, #26
 8026096:	bf42      	ittt	mi
 8026098:	6833      	ldrmi	r3, [r6, #0]
 802609a:	3302      	addmi	r3, #2
 802609c:	6033      	strmi	r3, [r6, #0]
 802609e:	6825      	ldr	r5, [r4, #0]
 80260a0:	f015 0506 	ands.w	r5, r5, #6
 80260a4:	d106      	bne.n	80260b4 <_printf_common+0x48>
 80260a6:	f104 0a19 	add.w	sl, r4, #25
 80260aa:	68e3      	ldr	r3, [r4, #12]
 80260ac:	6832      	ldr	r2, [r6, #0]
 80260ae:	1a9b      	subs	r3, r3, r2
 80260b0:	42ab      	cmp	r3, r5
 80260b2:	dc26      	bgt.n	8026102 <_printf_common+0x96>
 80260b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80260b8:	6822      	ldr	r2, [r4, #0]
 80260ba:	3b00      	subs	r3, #0
 80260bc:	bf18      	it	ne
 80260be:	2301      	movne	r3, #1
 80260c0:	0692      	lsls	r2, r2, #26
 80260c2:	d42b      	bmi.n	802611c <_printf_common+0xb0>
 80260c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80260c8:	4641      	mov	r1, r8
 80260ca:	4638      	mov	r0, r7
 80260cc:	47c8      	blx	r9
 80260ce:	3001      	adds	r0, #1
 80260d0:	d01e      	beq.n	8026110 <_printf_common+0xa4>
 80260d2:	6823      	ldr	r3, [r4, #0]
 80260d4:	6922      	ldr	r2, [r4, #16]
 80260d6:	f003 0306 	and.w	r3, r3, #6
 80260da:	2b04      	cmp	r3, #4
 80260dc:	bf02      	ittt	eq
 80260de:	68e5      	ldreq	r5, [r4, #12]
 80260e0:	6833      	ldreq	r3, [r6, #0]
 80260e2:	1aed      	subeq	r5, r5, r3
 80260e4:	68a3      	ldr	r3, [r4, #8]
 80260e6:	bf0c      	ite	eq
 80260e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80260ec:	2500      	movne	r5, #0
 80260ee:	4293      	cmp	r3, r2
 80260f0:	bfc4      	itt	gt
 80260f2:	1a9b      	subgt	r3, r3, r2
 80260f4:	18ed      	addgt	r5, r5, r3
 80260f6:	2600      	movs	r6, #0
 80260f8:	341a      	adds	r4, #26
 80260fa:	42b5      	cmp	r5, r6
 80260fc:	d11a      	bne.n	8026134 <_printf_common+0xc8>
 80260fe:	2000      	movs	r0, #0
 8026100:	e008      	b.n	8026114 <_printf_common+0xa8>
 8026102:	2301      	movs	r3, #1
 8026104:	4652      	mov	r2, sl
 8026106:	4641      	mov	r1, r8
 8026108:	4638      	mov	r0, r7
 802610a:	47c8      	blx	r9
 802610c:	3001      	adds	r0, #1
 802610e:	d103      	bne.n	8026118 <_printf_common+0xac>
 8026110:	f04f 30ff 	mov.w	r0, #4294967295
 8026114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026118:	3501      	adds	r5, #1
 802611a:	e7c6      	b.n	80260aa <_printf_common+0x3e>
 802611c:	18e1      	adds	r1, r4, r3
 802611e:	1c5a      	adds	r2, r3, #1
 8026120:	2030      	movs	r0, #48	@ 0x30
 8026122:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8026126:	4422      	add	r2, r4
 8026128:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802612c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8026130:	3302      	adds	r3, #2
 8026132:	e7c7      	b.n	80260c4 <_printf_common+0x58>
 8026134:	2301      	movs	r3, #1
 8026136:	4622      	mov	r2, r4
 8026138:	4641      	mov	r1, r8
 802613a:	4638      	mov	r0, r7
 802613c:	47c8      	blx	r9
 802613e:	3001      	adds	r0, #1
 8026140:	d0e6      	beq.n	8026110 <_printf_common+0xa4>
 8026142:	3601      	adds	r6, #1
 8026144:	e7d9      	b.n	80260fa <_printf_common+0x8e>
	...

08026148 <_printf_i>:
 8026148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802614c:	7e0f      	ldrb	r7, [r1, #24]
 802614e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8026150:	2f78      	cmp	r7, #120	@ 0x78
 8026152:	4691      	mov	r9, r2
 8026154:	4680      	mov	r8, r0
 8026156:	460c      	mov	r4, r1
 8026158:	469a      	mov	sl, r3
 802615a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802615e:	d807      	bhi.n	8026170 <_printf_i+0x28>
 8026160:	2f62      	cmp	r7, #98	@ 0x62
 8026162:	d80a      	bhi.n	802617a <_printf_i+0x32>
 8026164:	2f00      	cmp	r7, #0
 8026166:	f000 80d1 	beq.w	802630c <_printf_i+0x1c4>
 802616a:	2f58      	cmp	r7, #88	@ 0x58
 802616c:	f000 80b8 	beq.w	80262e0 <_printf_i+0x198>
 8026170:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8026174:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8026178:	e03a      	b.n	80261f0 <_printf_i+0xa8>
 802617a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802617e:	2b15      	cmp	r3, #21
 8026180:	d8f6      	bhi.n	8026170 <_printf_i+0x28>
 8026182:	a101      	add	r1, pc, #4	@ (adr r1, 8026188 <_printf_i+0x40>)
 8026184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8026188:	080261e1 	.word	0x080261e1
 802618c:	080261f5 	.word	0x080261f5
 8026190:	08026171 	.word	0x08026171
 8026194:	08026171 	.word	0x08026171
 8026198:	08026171 	.word	0x08026171
 802619c:	08026171 	.word	0x08026171
 80261a0:	080261f5 	.word	0x080261f5
 80261a4:	08026171 	.word	0x08026171
 80261a8:	08026171 	.word	0x08026171
 80261ac:	08026171 	.word	0x08026171
 80261b0:	08026171 	.word	0x08026171
 80261b4:	080262f3 	.word	0x080262f3
 80261b8:	0802621f 	.word	0x0802621f
 80261bc:	080262ad 	.word	0x080262ad
 80261c0:	08026171 	.word	0x08026171
 80261c4:	08026171 	.word	0x08026171
 80261c8:	08026315 	.word	0x08026315
 80261cc:	08026171 	.word	0x08026171
 80261d0:	0802621f 	.word	0x0802621f
 80261d4:	08026171 	.word	0x08026171
 80261d8:	08026171 	.word	0x08026171
 80261dc:	080262b5 	.word	0x080262b5
 80261e0:	6833      	ldr	r3, [r6, #0]
 80261e2:	1d1a      	adds	r2, r3, #4
 80261e4:	681b      	ldr	r3, [r3, #0]
 80261e6:	6032      	str	r2, [r6, #0]
 80261e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80261ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80261f0:	2301      	movs	r3, #1
 80261f2:	e09c      	b.n	802632e <_printf_i+0x1e6>
 80261f4:	6833      	ldr	r3, [r6, #0]
 80261f6:	6820      	ldr	r0, [r4, #0]
 80261f8:	1d19      	adds	r1, r3, #4
 80261fa:	6031      	str	r1, [r6, #0]
 80261fc:	0606      	lsls	r6, r0, #24
 80261fe:	d501      	bpl.n	8026204 <_printf_i+0xbc>
 8026200:	681d      	ldr	r5, [r3, #0]
 8026202:	e003      	b.n	802620c <_printf_i+0xc4>
 8026204:	0645      	lsls	r5, r0, #25
 8026206:	d5fb      	bpl.n	8026200 <_printf_i+0xb8>
 8026208:	f9b3 5000 	ldrsh.w	r5, [r3]
 802620c:	2d00      	cmp	r5, #0
 802620e:	da03      	bge.n	8026218 <_printf_i+0xd0>
 8026210:	232d      	movs	r3, #45	@ 0x2d
 8026212:	426d      	negs	r5, r5
 8026214:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8026218:	4858      	ldr	r0, [pc, #352]	@ (802637c <_printf_i+0x234>)
 802621a:	230a      	movs	r3, #10
 802621c:	e011      	b.n	8026242 <_printf_i+0xfa>
 802621e:	6821      	ldr	r1, [r4, #0]
 8026220:	6833      	ldr	r3, [r6, #0]
 8026222:	0608      	lsls	r0, r1, #24
 8026224:	f853 5b04 	ldr.w	r5, [r3], #4
 8026228:	d402      	bmi.n	8026230 <_printf_i+0xe8>
 802622a:	0649      	lsls	r1, r1, #25
 802622c:	bf48      	it	mi
 802622e:	b2ad      	uxthmi	r5, r5
 8026230:	2f6f      	cmp	r7, #111	@ 0x6f
 8026232:	4852      	ldr	r0, [pc, #328]	@ (802637c <_printf_i+0x234>)
 8026234:	6033      	str	r3, [r6, #0]
 8026236:	bf14      	ite	ne
 8026238:	230a      	movne	r3, #10
 802623a:	2308      	moveq	r3, #8
 802623c:	2100      	movs	r1, #0
 802623e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8026242:	6866      	ldr	r6, [r4, #4]
 8026244:	60a6      	str	r6, [r4, #8]
 8026246:	2e00      	cmp	r6, #0
 8026248:	db05      	blt.n	8026256 <_printf_i+0x10e>
 802624a:	6821      	ldr	r1, [r4, #0]
 802624c:	432e      	orrs	r6, r5
 802624e:	f021 0104 	bic.w	r1, r1, #4
 8026252:	6021      	str	r1, [r4, #0]
 8026254:	d04b      	beq.n	80262ee <_printf_i+0x1a6>
 8026256:	4616      	mov	r6, r2
 8026258:	fbb5 f1f3 	udiv	r1, r5, r3
 802625c:	fb03 5711 	mls	r7, r3, r1, r5
 8026260:	5dc7      	ldrb	r7, [r0, r7]
 8026262:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8026266:	462f      	mov	r7, r5
 8026268:	42bb      	cmp	r3, r7
 802626a:	460d      	mov	r5, r1
 802626c:	d9f4      	bls.n	8026258 <_printf_i+0x110>
 802626e:	2b08      	cmp	r3, #8
 8026270:	d10b      	bne.n	802628a <_printf_i+0x142>
 8026272:	6823      	ldr	r3, [r4, #0]
 8026274:	07df      	lsls	r7, r3, #31
 8026276:	d508      	bpl.n	802628a <_printf_i+0x142>
 8026278:	6923      	ldr	r3, [r4, #16]
 802627a:	6861      	ldr	r1, [r4, #4]
 802627c:	4299      	cmp	r1, r3
 802627e:	bfde      	ittt	le
 8026280:	2330      	movle	r3, #48	@ 0x30
 8026282:	f806 3c01 	strble.w	r3, [r6, #-1]
 8026286:	f106 36ff 	addle.w	r6, r6, #4294967295
 802628a:	1b92      	subs	r2, r2, r6
 802628c:	6122      	str	r2, [r4, #16]
 802628e:	f8cd a000 	str.w	sl, [sp]
 8026292:	464b      	mov	r3, r9
 8026294:	aa03      	add	r2, sp, #12
 8026296:	4621      	mov	r1, r4
 8026298:	4640      	mov	r0, r8
 802629a:	f7ff fee7 	bl	802606c <_printf_common>
 802629e:	3001      	adds	r0, #1
 80262a0:	d14a      	bne.n	8026338 <_printf_i+0x1f0>
 80262a2:	f04f 30ff 	mov.w	r0, #4294967295
 80262a6:	b004      	add	sp, #16
 80262a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80262ac:	6823      	ldr	r3, [r4, #0]
 80262ae:	f043 0320 	orr.w	r3, r3, #32
 80262b2:	6023      	str	r3, [r4, #0]
 80262b4:	4832      	ldr	r0, [pc, #200]	@ (8026380 <_printf_i+0x238>)
 80262b6:	2778      	movs	r7, #120	@ 0x78
 80262b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80262bc:	6823      	ldr	r3, [r4, #0]
 80262be:	6831      	ldr	r1, [r6, #0]
 80262c0:	061f      	lsls	r7, r3, #24
 80262c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80262c6:	d402      	bmi.n	80262ce <_printf_i+0x186>
 80262c8:	065f      	lsls	r7, r3, #25
 80262ca:	bf48      	it	mi
 80262cc:	b2ad      	uxthmi	r5, r5
 80262ce:	6031      	str	r1, [r6, #0]
 80262d0:	07d9      	lsls	r1, r3, #31
 80262d2:	bf44      	itt	mi
 80262d4:	f043 0320 	orrmi.w	r3, r3, #32
 80262d8:	6023      	strmi	r3, [r4, #0]
 80262da:	b11d      	cbz	r5, 80262e4 <_printf_i+0x19c>
 80262dc:	2310      	movs	r3, #16
 80262de:	e7ad      	b.n	802623c <_printf_i+0xf4>
 80262e0:	4826      	ldr	r0, [pc, #152]	@ (802637c <_printf_i+0x234>)
 80262e2:	e7e9      	b.n	80262b8 <_printf_i+0x170>
 80262e4:	6823      	ldr	r3, [r4, #0]
 80262e6:	f023 0320 	bic.w	r3, r3, #32
 80262ea:	6023      	str	r3, [r4, #0]
 80262ec:	e7f6      	b.n	80262dc <_printf_i+0x194>
 80262ee:	4616      	mov	r6, r2
 80262f0:	e7bd      	b.n	802626e <_printf_i+0x126>
 80262f2:	6833      	ldr	r3, [r6, #0]
 80262f4:	6825      	ldr	r5, [r4, #0]
 80262f6:	6961      	ldr	r1, [r4, #20]
 80262f8:	1d18      	adds	r0, r3, #4
 80262fa:	6030      	str	r0, [r6, #0]
 80262fc:	062e      	lsls	r6, r5, #24
 80262fe:	681b      	ldr	r3, [r3, #0]
 8026300:	d501      	bpl.n	8026306 <_printf_i+0x1be>
 8026302:	6019      	str	r1, [r3, #0]
 8026304:	e002      	b.n	802630c <_printf_i+0x1c4>
 8026306:	0668      	lsls	r0, r5, #25
 8026308:	d5fb      	bpl.n	8026302 <_printf_i+0x1ba>
 802630a:	8019      	strh	r1, [r3, #0]
 802630c:	2300      	movs	r3, #0
 802630e:	6123      	str	r3, [r4, #16]
 8026310:	4616      	mov	r6, r2
 8026312:	e7bc      	b.n	802628e <_printf_i+0x146>
 8026314:	6833      	ldr	r3, [r6, #0]
 8026316:	1d1a      	adds	r2, r3, #4
 8026318:	6032      	str	r2, [r6, #0]
 802631a:	681e      	ldr	r6, [r3, #0]
 802631c:	6862      	ldr	r2, [r4, #4]
 802631e:	2100      	movs	r1, #0
 8026320:	4630      	mov	r0, r6
 8026322:	f7d9 ffa5 	bl	8000270 <memchr>
 8026326:	b108      	cbz	r0, 802632c <_printf_i+0x1e4>
 8026328:	1b80      	subs	r0, r0, r6
 802632a:	6060      	str	r0, [r4, #4]
 802632c:	6863      	ldr	r3, [r4, #4]
 802632e:	6123      	str	r3, [r4, #16]
 8026330:	2300      	movs	r3, #0
 8026332:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8026336:	e7aa      	b.n	802628e <_printf_i+0x146>
 8026338:	6923      	ldr	r3, [r4, #16]
 802633a:	4632      	mov	r2, r6
 802633c:	4649      	mov	r1, r9
 802633e:	4640      	mov	r0, r8
 8026340:	47d0      	blx	sl
 8026342:	3001      	adds	r0, #1
 8026344:	d0ad      	beq.n	80262a2 <_printf_i+0x15a>
 8026346:	6823      	ldr	r3, [r4, #0]
 8026348:	079b      	lsls	r3, r3, #30
 802634a:	d413      	bmi.n	8026374 <_printf_i+0x22c>
 802634c:	68e0      	ldr	r0, [r4, #12]
 802634e:	9b03      	ldr	r3, [sp, #12]
 8026350:	4298      	cmp	r0, r3
 8026352:	bfb8      	it	lt
 8026354:	4618      	movlt	r0, r3
 8026356:	e7a6      	b.n	80262a6 <_printf_i+0x15e>
 8026358:	2301      	movs	r3, #1
 802635a:	4632      	mov	r2, r6
 802635c:	4649      	mov	r1, r9
 802635e:	4640      	mov	r0, r8
 8026360:	47d0      	blx	sl
 8026362:	3001      	adds	r0, #1
 8026364:	d09d      	beq.n	80262a2 <_printf_i+0x15a>
 8026366:	3501      	adds	r5, #1
 8026368:	68e3      	ldr	r3, [r4, #12]
 802636a:	9903      	ldr	r1, [sp, #12]
 802636c:	1a5b      	subs	r3, r3, r1
 802636e:	42ab      	cmp	r3, r5
 8026370:	dcf2      	bgt.n	8026358 <_printf_i+0x210>
 8026372:	e7eb      	b.n	802634c <_printf_i+0x204>
 8026374:	2500      	movs	r5, #0
 8026376:	f104 0619 	add.w	r6, r4, #25
 802637a:	e7f5      	b.n	8026368 <_printf_i+0x220>
 802637c:	0802b000 	.word	0x0802b000
 8026380:	0802b011 	.word	0x0802b011

08026384 <__sflush_r>:
 8026384:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8026388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802638c:	0716      	lsls	r6, r2, #28
 802638e:	4605      	mov	r5, r0
 8026390:	460c      	mov	r4, r1
 8026392:	d454      	bmi.n	802643e <__sflush_r+0xba>
 8026394:	684b      	ldr	r3, [r1, #4]
 8026396:	2b00      	cmp	r3, #0
 8026398:	dc02      	bgt.n	80263a0 <__sflush_r+0x1c>
 802639a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802639c:	2b00      	cmp	r3, #0
 802639e:	dd48      	ble.n	8026432 <__sflush_r+0xae>
 80263a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80263a2:	2e00      	cmp	r6, #0
 80263a4:	d045      	beq.n	8026432 <__sflush_r+0xae>
 80263a6:	2300      	movs	r3, #0
 80263a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80263ac:	682f      	ldr	r7, [r5, #0]
 80263ae:	6a21      	ldr	r1, [r4, #32]
 80263b0:	602b      	str	r3, [r5, #0]
 80263b2:	d030      	beq.n	8026416 <__sflush_r+0x92>
 80263b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80263b6:	89a3      	ldrh	r3, [r4, #12]
 80263b8:	0759      	lsls	r1, r3, #29
 80263ba:	d505      	bpl.n	80263c8 <__sflush_r+0x44>
 80263bc:	6863      	ldr	r3, [r4, #4]
 80263be:	1ad2      	subs	r2, r2, r3
 80263c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80263c2:	b10b      	cbz	r3, 80263c8 <__sflush_r+0x44>
 80263c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80263c6:	1ad2      	subs	r2, r2, r3
 80263c8:	2300      	movs	r3, #0
 80263ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80263cc:	6a21      	ldr	r1, [r4, #32]
 80263ce:	4628      	mov	r0, r5
 80263d0:	47b0      	blx	r6
 80263d2:	1c43      	adds	r3, r0, #1
 80263d4:	89a3      	ldrh	r3, [r4, #12]
 80263d6:	d106      	bne.n	80263e6 <__sflush_r+0x62>
 80263d8:	6829      	ldr	r1, [r5, #0]
 80263da:	291d      	cmp	r1, #29
 80263dc:	d82b      	bhi.n	8026436 <__sflush_r+0xb2>
 80263de:	4a2a      	ldr	r2, [pc, #168]	@ (8026488 <__sflush_r+0x104>)
 80263e0:	40ca      	lsrs	r2, r1
 80263e2:	07d6      	lsls	r6, r2, #31
 80263e4:	d527      	bpl.n	8026436 <__sflush_r+0xb2>
 80263e6:	2200      	movs	r2, #0
 80263e8:	6062      	str	r2, [r4, #4]
 80263ea:	04d9      	lsls	r1, r3, #19
 80263ec:	6922      	ldr	r2, [r4, #16]
 80263ee:	6022      	str	r2, [r4, #0]
 80263f0:	d504      	bpl.n	80263fc <__sflush_r+0x78>
 80263f2:	1c42      	adds	r2, r0, #1
 80263f4:	d101      	bne.n	80263fa <__sflush_r+0x76>
 80263f6:	682b      	ldr	r3, [r5, #0]
 80263f8:	b903      	cbnz	r3, 80263fc <__sflush_r+0x78>
 80263fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80263fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80263fe:	602f      	str	r7, [r5, #0]
 8026400:	b1b9      	cbz	r1, 8026432 <__sflush_r+0xae>
 8026402:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8026406:	4299      	cmp	r1, r3
 8026408:	d002      	beq.n	8026410 <__sflush_r+0x8c>
 802640a:	4628      	mov	r0, r5
 802640c:	f7ff fb42 	bl	8025a94 <_free_r>
 8026410:	2300      	movs	r3, #0
 8026412:	6363      	str	r3, [r4, #52]	@ 0x34
 8026414:	e00d      	b.n	8026432 <__sflush_r+0xae>
 8026416:	2301      	movs	r3, #1
 8026418:	4628      	mov	r0, r5
 802641a:	47b0      	blx	r6
 802641c:	4602      	mov	r2, r0
 802641e:	1c50      	adds	r0, r2, #1
 8026420:	d1c9      	bne.n	80263b6 <__sflush_r+0x32>
 8026422:	682b      	ldr	r3, [r5, #0]
 8026424:	2b00      	cmp	r3, #0
 8026426:	d0c6      	beq.n	80263b6 <__sflush_r+0x32>
 8026428:	2b1d      	cmp	r3, #29
 802642a:	d001      	beq.n	8026430 <__sflush_r+0xac>
 802642c:	2b16      	cmp	r3, #22
 802642e:	d11e      	bne.n	802646e <__sflush_r+0xea>
 8026430:	602f      	str	r7, [r5, #0]
 8026432:	2000      	movs	r0, #0
 8026434:	e022      	b.n	802647c <__sflush_r+0xf8>
 8026436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802643a:	b21b      	sxth	r3, r3
 802643c:	e01b      	b.n	8026476 <__sflush_r+0xf2>
 802643e:	690f      	ldr	r7, [r1, #16]
 8026440:	2f00      	cmp	r7, #0
 8026442:	d0f6      	beq.n	8026432 <__sflush_r+0xae>
 8026444:	0793      	lsls	r3, r2, #30
 8026446:	680e      	ldr	r6, [r1, #0]
 8026448:	bf08      	it	eq
 802644a:	694b      	ldreq	r3, [r1, #20]
 802644c:	600f      	str	r7, [r1, #0]
 802644e:	bf18      	it	ne
 8026450:	2300      	movne	r3, #0
 8026452:	eba6 0807 	sub.w	r8, r6, r7
 8026456:	608b      	str	r3, [r1, #8]
 8026458:	f1b8 0f00 	cmp.w	r8, #0
 802645c:	dde9      	ble.n	8026432 <__sflush_r+0xae>
 802645e:	6a21      	ldr	r1, [r4, #32]
 8026460:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8026462:	4643      	mov	r3, r8
 8026464:	463a      	mov	r2, r7
 8026466:	4628      	mov	r0, r5
 8026468:	47b0      	blx	r6
 802646a:	2800      	cmp	r0, #0
 802646c:	dc08      	bgt.n	8026480 <__sflush_r+0xfc>
 802646e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026476:	81a3      	strh	r3, [r4, #12]
 8026478:	f04f 30ff 	mov.w	r0, #4294967295
 802647c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026480:	4407      	add	r7, r0
 8026482:	eba8 0800 	sub.w	r8, r8, r0
 8026486:	e7e7      	b.n	8026458 <__sflush_r+0xd4>
 8026488:	20400001 	.word	0x20400001

0802648c <_fflush_r>:
 802648c:	b538      	push	{r3, r4, r5, lr}
 802648e:	690b      	ldr	r3, [r1, #16]
 8026490:	4605      	mov	r5, r0
 8026492:	460c      	mov	r4, r1
 8026494:	b913      	cbnz	r3, 802649c <_fflush_r+0x10>
 8026496:	2500      	movs	r5, #0
 8026498:	4628      	mov	r0, r5
 802649a:	bd38      	pop	{r3, r4, r5, pc}
 802649c:	b118      	cbz	r0, 80264a6 <_fflush_r+0x1a>
 802649e:	6a03      	ldr	r3, [r0, #32]
 80264a0:	b90b      	cbnz	r3, 80264a6 <_fflush_r+0x1a>
 80264a2:	f7fe ff81 	bl	80253a8 <__sinit>
 80264a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80264aa:	2b00      	cmp	r3, #0
 80264ac:	d0f3      	beq.n	8026496 <_fflush_r+0xa>
 80264ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80264b0:	07d0      	lsls	r0, r2, #31
 80264b2:	d404      	bmi.n	80264be <_fflush_r+0x32>
 80264b4:	0599      	lsls	r1, r3, #22
 80264b6:	d402      	bmi.n	80264be <_fflush_r+0x32>
 80264b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80264ba:	f7ff faa8 	bl	8025a0e <__retarget_lock_acquire_recursive>
 80264be:	4628      	mov	r0, r5
 80264c0:	4621      	mov	r1, r4
 80264c2:	f7ff ff5f 	bl	8026384 <__sflush_r>
 80264c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80264c8:	07da      	lsls	r2, r3, #31
 80264ca:	4605      	mov	r5, r0
 80264cc:	d4e4      	bmi.n	8026498 <_fflush_r+0xc>
 80264ce:	89a3      	ldrh	r3, [r4, #12]
 80264d0:	059b      	lsls	r3, r3, #22
 80264d2:	d4e1      	bmi.n	8026498 <_fflush_r+0xc>
 80264d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80264d6:	f7ff fa9b 	bl	8025a10 <__retarget_lock_release_recursive>
 80264da:	e7dd      	b.n	8026498 <_fflush_r+0xc>

080264dc <fiprintf>:
 80264dc:	b40e      	push	{r1, r2, r3}
 80264de:	b503      	push	{r0, r1, lr}
 80264e0:	4601      	mov	r1, r0
 80264e2:	ab03      	add	r3, sp, #12
 80264e4:	4805      	ldr	r0, [pc, #20]	@ (80264fc <fiprintf+0x20>)
 80264e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80264ea:	6800      	ldr	r0, [r0, #0]
 80264ec:	9301      	str	r3, [sp, #4]
 80264ee:	f7ff fca5 	bl	8025e3c <_vfiprintf_r>
 80264f2:	b002      	add	sp, #8
 80264f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80264f8:	b003      	add	sp, #12
 80264fa:	4770      	bx	lr
 80264fc:	20000168 	.word	0x20000168

08026500 <__swhatbuf_r>:
 8026500:	b570      	push	{r4, r5, r6, lr}
 8026502:	460c      	mov	r4, r1
 8026504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026508:	2900      	cmp	r1, #0
 802650a:	b096      	sub	sp, #88	@ 0x58
 802650c:	4615      	mov	r5, r2
 802650e:	461e      	mov	r6, r3
 8026510:	da0d      	bge.n	802652e <__swhatbuf_r+0x2e>
 8026512:	89a3      	ldrh	r3, [r4, #12]
 8026514:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8026518:	f04f 0100 	mov.w	r1, #0
 802651c:	bf14      	ite	ne
 802651e:	2340      	movne	r3, #64	@ 0x40
 8026520:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8026524:	2000      	movs	r0, #0
 8026526:	6031      	str	r1, [r6, #0]
 8026528:	602b      	str	r3, [r5, #0]
 802652a:	b016      	add	sp, #88	@ 0x58
 802652c:	bd70      	pop	{r4, r5, r6, pc}
 802652e:	466a      	mov	r2, sp
 8026530:	f000 f848 	bl	80265c4 <_fstat_r>
 8026534:	2800      	cmp	r0, #0
 8026536:	dbec      	blt.n	8026512 <__swhatbuf_r+0x12>
 8026538:	9901      	ldr	r1, [sp, #4]
 802653a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802653e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8026542:	4259      	negs	r1, r3
 8026544:	4159      	adcs	r1, r3
 8026546:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802654a:	e7eb      	b.n	8026524 <__swhatbuf_r+0x24>

0802654c <__smakebuf_r>:
 802654c:	898b      	ldrh	r3, [r1, #12]
 802654e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026550:	079d      	lsls	r5, r3, #30
 8026552:	4606      	mov	r6, r0
 8026554:	460c      	mov	r4, r1
 8026556:	d507      	bpl.n	8026568 <__smakebuf_r+0x1c>
 8026558:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802655c:	6023      	str	r3, [r4, #0]
 802655e:	6123      	str	r3, [r4, #16]
 8026560:	2301      	movs	r3, #1
 8026562:	6163      	str	r3, [r4, #20]
 8026564:	b003      	add	sp, #12
 8026566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026568:	ab01      	add	r3, sp, #4
 802656a:	466a      	mov	r2, sp
 802656c:	f7ff ffc8 	bl	8026500 <__swhatbuf_r>
 8026570:	9f00      	ldr	r7, [sp, #0]
 8026572:	4605      	mov	r5, r0
 8026574:	4639      	mov	r1, r7
 8026576:	4630      	mov	r0, r6
 8026578:	f7fe fc60 	bl	8024e3c <_malloc_r>
 802657c:	b948      	cbnz	r0, 8026592 <__smakebuf_r+0x46>
 802657e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026582:	059a      	lsls	r2, r3, #22
 8026584:	d4ee      	bmi.n	8026564 <__smakebuf_r+0x18>
 8026586:	f023 0303 	bic.w	r3, r3, #3
 802658a:	f043 0302 	orr.w	r3, r3, #2
 802658e:	81a3      	strh	r3, [r4, #12]
 8026590:	e7e2      	b.n	8026558 <__smakebuf_r+0xc>
 8026592:	89a3      	ldrh	r3, [r4, #12]
 8026594:	6020      	str	r0, [r4, #0]
 8026596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802659a:	81a3      	strh	r3, [r4, #12]
 802659c:	9b01      	ldr	r3, [sp, #4]
 802659e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80265a2:	b15b      	cbz	r3, 80265bc <__smakebuf_r+0x70>
 80265a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80265a8:	4630      	mov	r0, r6
 80265aa:	f000 f81d 	bl	80265e8 <_isatty_r>
 80265ae:	b128      	cbz	r0, 80265bc <__smakebuf_r+0x70>
 80265b0:	89a3      	ldrh	r3, [r4, #12]
 80265b2:	f023 0303 	bic.w	r3, r3, #3
 80265b6:	f043 0301 	orr.w	r3, r3, #1
 80265ba:	81a3      	strh	r3, [r4, #12]
 80265bc:	89a3      	ldrh	r3, [r4, #12]
 80265be:	431d      	orrs	r5, r3
 80265c0:	81a5      	strh	r5, [r4, #12]
 80265c2:	e7cf      	b.n	8026564 <__smakebuf_r+0x18>

080265c4 <_fstat_r>:
 80265c4:	b538      	push	{r3, r4, r5, lr}
 80265c6:	4d07      	ldr	r5, [pc, #28]	@ (80265e4 <_fstat_r+0x20>)
 80265c8:	2300      	movs	r3, #0
 80265ca:	4604      	mov	r4, r0
 80265cc:	4608      	mov	r0, r1
 80265ce:	4611      	mov	r1, r2
 80265d0:	602b      	str	r3, [r5, #0]
 80265d2:	f7da ff99 	bl	8001508 <_fstat>
 80265d6:	1c43      	adds	r3, r0, #1
 80265d8:	d102      	bne.n	80265e0 <_fstat_r+0x1c>
 80265da:	682b      	ldr	r3, [r5, #0]
 80265dc:	b103      	cbz	r3, 80265e0 <_fstat_r+0x1c>
 80265de:	6023      	str	r3, [r4, #0]
 80265e0:	bd38      	pop	{r3, r4, r5, pc}
 80265e2:	bf00      	nop
 80265e4:	20014c9c 	.word	0x20014c9c

080265e8 <_isatty_r>:
 80265e8:	b538      	push	{r3, r4, r5, lr}
 80265ea:	4d06      	ldr	r5, [pc, #24]	@ (8026604 <_isatty_r+0x1c>)
 80265ec:	2300      	movs	r3, #0
 80265ee:	4604      	mov	r4, r0
 80265f0:	4608      	mov	r0, r1
 80265f2:	602b      	str	r3, [r5, #0]
 80265f4:	f7da ff98 	bl	8001528 <_isatty>
 80265f8:	1c43      	adds	r3, r0, #1
 80265fa:	d102      	bne.n	8026602 <_isatty_r+0x1a>
 80265fc:	682b      	ldr	r3, [r5, #0]
 80265fe:	b103      	cbz	r3, 8026602 <_isatty_r+0x1a>
 8026600:	6023      	str	r3, [r4, #0]
 8026602:	bd38      	pop	{r3, r4, r5, pc}
 8026604:	20014c9c 	.word	0x20014c9c

08026608 <abort>:
 8026608:	b508      	push	{r3, lr}
 802660a:	2006      	movs	r0, #6
 802660c:	f000 f82c 	bl	8026668 <raise>
 8026610:	2001      	movs	r0, #1
 8026612:	f7da ff29 	bl	8001468 <_exit>

08026616 <_raise_r>:
 8026616:	291f      	cmp	r1, #31
 8026618:	b538      	push	{r3, r4, r5, lr}
 802661a:	4605      	mov	r5, r0
 802661c:	460c      	mov	r4, r1
 802661e:	d904      	bls.n	802662a <_raise_r+0x14>
 8026620:	2316      	movs	r3, #22
 8026622:	6003      	str	r3, [r0, #0]
 8026624:	f04f 30ff 	mov.w	r0, #4294967295
 8026628:	bd38      	pop	{r3, r4, r5, pc}
 802662a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802662c:	b112      	cbz	r2, 8026634 <_raise_r+0x1e>
 802662e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026632:	b94b      	cbnz	r3, 8026648 <_raise_r+0x32>
 8026634:	4628      	mov	r0, r5
 8026636:	f000 f831 	bl	802669c <_getpid_r>
 802663a:	4622      	mov	r2, r4
 802663c:	4601      	mov	r1, r0
 802663e:	4628      	mov	r0, r5
 8026640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026644:	f000 b818 	b.w	8026678 <_kill_r>
 8026648:	2b01      	cmp	r3, #1
 802664a:	d00a      	beq.n	8026662 <_raise_r+0x4c>
 802664c:	1c59      	adds	r1, r3, #1
 802664e:	d103      	bne.n	8026658 <_raise_r+0x42>
 8026650:	2316      	movs	r3, #22
 8026652:	6003      	str	r3, [r0, #0]
 8026654:	2001      	movs	r0, #1
 8026656:	e7e7      	b.n	8026628 <_raise_r+0x12>
 8026658:	2100      	movs	r1, #0
 802665a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802665e:	4620      	mov	r0, r4
 8026660:	4798      	blx	r3
 8026662:	2000      	movs	r0, #0
 8026664:	e7e0      	b.n	8026628 <_raise_r+0x12>
	...

08026668 <raise>:
 8026668:	4b02      	ldr	r3, [pc, #8]	@ (8026674 <raise+0xc>)
 802666a:	4601      	mov	r1, r0
 802666c:	6818      	ldr	r0, [r3, #0]
 802666e:	f7ff bfd2 	b.w	8026616 <_raise_r>
 8026672:	bf00      	nop
 8026674:	20000168 	.word	0x20000168

08026678 <_kill_r>:
 8026678:	b538      	push	{r3, r4, r5, lr}
 802667a:	4d07      	ldr	r5, [pc, #28]	@ (8026698 <_kill_r+0x20>)
 802667c:	2300      	movs	r3, #0
 802667e:	4604      	mov	r4, r0
 8026680:	4608      	mov	r0, r1
 8026682:	4611      	mov	r1, r2
 8026684:	602b      	str	r3, [r5, #0]
 8026686:	f7da fedd 	bl	8001444 <_kill>
 802668a:	1c43      	adds	r3, r0, #1
 802668c:	d102      	bne.n	8026694 <_kill_r+0x1c>
 802668e:	682b      	ldr	r3, [r5, #0]
 8026690:	b103      	cbz	r3, 8026694 <_kill_r+0x1c>
 8026692:	6023      	str	r3, [r4, #0]
 8026694:	bd38      	pop	{r3, r4, r5, pc}
 8026696:	bf00      	nop
 8026698:	20014c9c 	.word	0x20014c9c

0802669c <_getpid_r>:
 802669c:	f7da beca 	b.w	8001434 <_getpid>

080266a0 <_init>:
 80266a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80266a2:	bf00      	nop
 80266a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80266a6:	bc08      	pop	{r3}
 80266a8:	469e      	mov	lr, r3
 80266aa:	4770      	bx	lr

080266ac <_fini>:
 80266ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80266ae:	bf00      	nop
 80266b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80266b2:	bc08      	pop	{r3}
 80266b4:	469e      	mov	lr, r3
 80266b6:	4770      	bx	lr
